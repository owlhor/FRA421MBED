
H745_STAMPR_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009494  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08109734  08109734  00019734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08109870  08109870  00019870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08109878  08109878  00019878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810987c  0810987c  0001987c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  10000000  08109880  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000040c  10000078  081098f4  00020078  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  10000484  081098f4  00020484  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022d8f  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000373e  00000000  00000000  00042e33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001958  00000000  00000000  00046578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001800  00000000  00000000  00047ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e603  00000000  00000000  000496d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00022714  00000000  00000000  00087cd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0019840c  00000000  00000000  000aa3e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002427f3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000070dc  00000000  00000000  00242844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000078 	.word	0x10000078
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810971c 	.word	0x0810971c

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	1000007c 	.word	0x1000007c
 81002dc:	0810971c 	.word	0x0810971c

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <__aeabi_uldivmod>:
 8100390:	b953      	cbnz	r3, 81003a8 <__aeabi_uldivmod+0x18>
 8100392:	b94a      	cbnz	r2, 81003a8 <__aeabi_uldivmod+0x18>
 8100394:	2900      	cmp	r1, #0
 8100396:	bf08      	it	eq
 8100398:	2800      	cmpeq	r0, #0
 810039a:	bf1c      	itt	ne
 810039c:	f04f 31ff 	movne.w	r1, #4294967295
 81003a0:	f04f 30ff 	movne.w	r0, #4294967295
 81003a4:	f000 b974 	b.w	8100690 <__aeabi_idiv0>
 81003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 81003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81003b0:	f000 f806 	bl	81003c0 <__udivmoddi4>
 81003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 81003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 81003bc:	b004      	add	sp, #16
 81003be:	4770      	bx	lr

081003c0 <__udivmoddi4>:
 81003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81003c4:	9d08      	ldr	r5, [sp, #32]
 81003c6:	4604      	mov	r4, r0
 81003c8:	468e      	mov	lr, r1
 81003ca:	2b00      	cmp	r3, #0
 81003cc:	d14d      	bne.n	810046a <__udivmoddi4+0xaa>
 81003ce:	428a      	cmp	r2, r1
 81003d0:	4694      	mov	ip, r2
 81003d2:	d969      	bls.n	81004a8 <__udivmoddi4+0xe8>
 81003d4:	fab2 f282 	clz	r2, r2
 81003d8:	b152      	cbz	r2, 81003f0 <__udivmoddi4+0x30>
 81003da:	fa01 f302 	lsl.w	r3, r1, r2
 81003de:	f1c2 0120 	rsb	r1, r2, #32
 81003e2:	fa20 f101 	lsr.w	r1, r0, r1
 81003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 81003ea:	ea41 0e03 	orr.w	lr, r1, r3
 81003ee:	4094      	lsls	r4, r2
 81003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 81003f4:	0c21      	lsrs	r1, r4, #16
 81003f6:	fbbe f6f8 	udiv	r6, lr, r8
 81003fa:	fa1f f78c 	uxth.w	r7, ip
 81003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8100402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8100406:	fb06 f107 	mul.w	r1, r6, r7
 810040a:	4299      	cmp	r1, r3
 810040c:	d90a      	bls.n	8100424 <__udivmoddi4+0x64>
 810040e:	eb1c 0303 	adds.w	r3, ip, r3
 8100412:	f106 30ff 	add.w	r0, r6, #4294967295
 8100416:	f080 811f 	bcs.w	8100658 <__udivmoddi4+0x298>
 810041a:	4299      	cmp	r1, r3
 810041c:	f240 811c 	bls.w	8100658 <__udivmoddi4+0x298>
 8100420:	3e02      	subs	r6, #2
 8100422:	4463      	add	r3, ip
 8100424:	1a5b      	subs	r3, r3, r1
 8100426:	b2a4      	uxth	r4, r4
 8100428:	fbb3 f0f8 	udiv	r0, r3, r8
 810042c:	fb08 3310 	mls	r3, r8, r0, r3
 8100430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100434:	fb00 f707 	mul.w	r7, r0, r7
 8100438:	42a7      	cmp	r7, r4
 810043a:	d90a      	bls.n	8100452 <__udivmoddi4+0x92>
 810043c:	eb1c 0404 	adds.w	r4, ip, r4
 8100440:	f100 33ff 	add.w	r3, r0, #4294967295
 8100444:	f080 810a 	bcs.w	810065c <__udivmoddi4+0x29c>
 8100448:	42a7      	cmp	r7, r4
 810044a:	f240 8107 	bls.w	810065c <__udivmoddi4+0x29c>
 810044e:	4464      	add	r4, ip
 8100450:	3802      	subs	r0, #2
 8100452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100456:	1be4      	subs	r4, r4, r7
 8100458:	2600      	movs	r6, #0
 810045a:	b11d      	cbz	r5, 8100464 <__udivmoddi4+0xa4>
 810045c:	40d4      	lsrs	r4, r2
 810045e:	2300      	movs	r3, #0
 8100460:	e9c5 4300 	strd	r4, r3, [r5]
 8100464:	4631      	mov	r1, r6
 8100466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810046a:	428b      	cmp	r3, r1
 810046c:	d909      	bls.n	8100482 <__udivmoddi4+0xc2>
 810046e:	2d00      	cmp	r5, #0
 8100470:	f000 80ef 	beq.w	8100652 <__udivmoddi4+0x292>
 8100474:	2600      	movs	r6, #0
 8100476:	e9c5 0100 	strd	r0, r1, [r5]
 810047a:	4630      	mov	r0, r6
 810047c:	4631      	mov	r1, r6
 810047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100482:	fab3 f683 	clz	r6, r3
 8100486:	2e00      	cmp	r6, #0
 8100488:	d14a      	bne.n	8100520 <__udivmoddi4+0x160>
 810048a:	428b      	cmp	r3, r1
 810048c:	d302      	bcc.n	8100494 <__udivmoddi4+0xd4>
 810048e:	4282      	cmp	r2, r0
 8100490:	f200 80f9 	bhi.w	8100686 <__udivmoddi4+0x2c6>
 8100494:	1a84      	subs	r4, r0, r2
 8100496:	eb61 0303 	sbc.w	r3, r1, r3
 810049a:	2001      	movs	r0, #1
 810049c:	469e      	mov	lr, r3
 810049e:	2d00      	cmp	r5, #0
 81004a0:	d0e0      	beq.n	8100464 <__udivmoddi4+0xa4>
 81004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 81004a6:	e7dd      	b.n	8100464 <__udivmoddi4+0xa4>
 81004a8:	b902      	cbnz	r2, 81004ac <__udivmoddi4+0xec>
 81004aa:	deff      	udf	#255	; 0xff
 81004ac:	fab2 f282 	clz	r2, r2
 81004b0:	2a00      	cmp	r2, #0
 81004b2:	f040 8092 	bne.w	81005da <__udivmoddi4+0x21a>
 81004b6:	eba1 010c 	sub.w	r1, r1, ip
 81004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 81004be:	fa1f fe8c 	uxth.w	lr, ip
 81004c2:	2601      	movs	r6, #1
 81004c4:	0c20      	lsrs	r0, r4, #16
 81004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 81004ca:	fb07 1113 	mls	r1, r7, r3, r1
 81004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 81004d2:	fb0e f003 	mul.w	r0, lr, r3
 81004d6:	4288      	cmp	r0, r1
 81004d8:	d908      	bls.n	81004ec <__udivmoddi4+0x12c>
 81004da:	eb1c 0101 	adds.w	r1, ip, r1
 81004de:	f103 38ff 	add.w	r8, r3, #4294967295
 81004e2:	d202      	bcs.n	81004ea <__udivmoddi4+0x12a>
 81004e4:	4288      	cmp	r0, r1
 81004e6:	f200 80cb 	bhi.w	8100680 <__udivmoddi4+0x2c0>
 81004ea:	4643      	mov	r3, r8
 81004ec:	1a09      	subs	r1, r1, r0
 81004ee:	b2a4      	uxth	r4, r4
 81004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 81004f4:	fb07 1110 	mls	r1, r7, r0, r1
 81004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 81004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8100500:	45a6      	cmp	lr, r4
 8100502:	d908      	bls.n	8100516 <__udivmoddi4+0x156>
 8100504:	eb1c 0404 	adds.w	r4, ip, r4
 8100508:	f100 31ff 	add.w	r1, r0, #4294967295
 810050c:	d202      	bcs.n	8100514 <__udivmoddi4+0x154>
 810050e:	45a6      	cmp	lr, r4
 8100510:	f200 80bb 	bhi.w	810068a <__udivmoddi4+0x2ca>
 8100514:	4608      	mov	r0, r1
 8100516:	eba4 040e 	sub.w	r4, r4, lr
 810051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 810051e:	e79c      	b.n	810045a <__udivmoddi4+0x9a>
 8100520:	f1c6 0720 	rsb	r7, r6, #32
 8100524:	40b3      	lsls	r3, r6
 8100526:	fa22 fc07 	lsr.w	ip, r2, r7
 810052a:	ea4c 0c03 	orr.w	ip, ip, r3
 810052e:	fa20 f407 	lsr.w	r4, r0, r7
 8100532:	fa01 f306 	lsl.w	r3, r1, r6
 8100536:	431c      	orrs	r4, r3
 8100538:	40f9      	lsrs	r1, r7
 810053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 810053e:	fa00 f306 	lsl.w	r3, r0, r6
 8100542:	fbb1 f8f9 	udiv	r8, r1, r9
 8100546:	0c20      	lsrs	r0, r4, #16
 8100548:	fa1f fe8c 	uxth.w	lr, ip
 810054c:	fb09 1118 	mls	r1, r9, r8, r1
 8100550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100554:	fb08 f00e 	mul.w	r0, r8, lr
 8100558:	4288      	cmp	r0, r1
 810055a:	fa02 f206 	lsl.w	r2, r2, r6
 810055e:	d90b      	bls.n	8100578 <__udivmoddi4+0x1b8>
 8100560:	eb1c 0101 	adds.w	r1, ip, r1
 8100564:	f108 3aff 	add.w	sl, r8, #4294967295
 8100568:	f080 8088 	bcs.w	810067c <__udivmoddi4+0x2bc>
 810056c:	4288      	cmp	r0, r1
 810056e:	f240 8085 	bls.w	810067c <__udivmoddi4+0x2bc>
 8100572:	f1a8 0802 	sub.w	r8, r8, #2
 8100576:	4461      	add	r1, ip
 8100578:	1a09      	subs	r1, r1, r0
 810057a:	b2a4      	uxth	r4, r4
 810057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8100580:	fb09 1110 	mls	r1, r9, r0, r1
 8100584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8100588:	fb00 fe0e 	mul.w	lr, r0, lr
 810058c:	458e      	cmp	lr, r1
 810058e:	d908      	bls.n	81005a2 <__udivmoddi4+0x1e2>
 8100590:	eb1c 0101 	adds.w	r1, ip, r1
 8100594:	f100 34ff 	add.w	r4, r0, #4294967295
 8100598:	d26c      	bcs.n	8100674 <__udivmoddi4+0x2b4>
 810059a:	458e      	cmp	lr, r1
 810059c:	d96a      	bls.n	8100674 <__udivmoddi4+0x2b4>
 810059e:	3802      	subs	r0, #2
 81005a0:	4461      	add	r1, ip
 81005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 81005a6:	fba0 9402 	umull	r9, r4, r0, r2
 81005aa:	eba1 010e 	sub.w	r1, r1, lr
 81005ae:	42a1      	cmp	r1, r4
 81005b0:	46c8      	mov	r8, r9
 81005b2:	46a6      	mov	lr, r4
 81005b4:	d356      	bcc.n	8100664 <__udivmoddi4+0x2a4>
 81005b6:	d053      	beq.n	8100660 <__udivmoddi4+0x2a0>
 81005b8:	b15d      	cbz	r5, 81005d2 <__udivmoddi4+0x212>
 81005ba:	ebb3 0208 	subs.w	r2, r3, r8
 81005be:	eb61 010e 	sbc.w	r1, r1, lr
 81005c2:	fa01 f707 	lsl.w	r7, r1, r7
 81005c6:	fa22 f306 	lsr.w	r3, r2, r6
 81005ca:	40f1      	lsrs	r1, r6
 81005cc:	431f      	orrs	r7, r3
 81005ce:	e9c5 7100 	strd	r7, r1, [r5]
 81005d2:	2600      	movs	r6, #0
 81005d4:	4631      	mov	r1, r6
 81005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81005da:	f1c2 0320 	rsb	r3, r2, #32
 81005de:	40d8      	lsrs	r0, r3
 81005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 81005e4:	fa21 f303 	lsr.w	r3, r1, r3
 81005e8:	4091      	lsls	r1, r2
 81005ea:	4301      	orrs	r1, r0
 81005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 81005f0:	fa1f fe8c 	uxth.w	lr, ip
 81005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 81005f8:	fb07 3610 	mls	r6, r7, r0, r3
 81005fc:	0c0b      	lsrs	r3, r1, #16
 81005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8100602:	fb00 f60e 	mul.w	r6, r0, lr
 8100606:	429e      	cmp	r6, r3
 8100608:	fa04 f402 	lsl.w	r4, r4, r2
 810060c:	d908      	bls.n	8100620 <__udivmoddi4+0x260>
 810060e:	eb1c 0303 	adds.w	r3, ip, r3
 8100612:	f100 38ff 	add.w	r8, r0, #4294967295
 8100616:	d22f      	bcs.n	8100678 <__udivmoddi4+0x2b8>
 8100618:	429e      	cmp	r6, r3
 810061a:	d92d      	bls.n	8100678 <__udivmoddi4+0x2b8>
 810061c:	3802      	subs	r0, #2
 810061e:	4463      	add	r3, ip
 8100620:	1b9b      	subs	r3, r3, r6
 8100622:	b289      	uxth	r1, r1
 8100624:	fbb3 f6f7 	udiv	r6, r3, r7
 8100628:	fb07 3316 	mls	r3, r7, r6, r3
 810062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100630:	fb06 f30e 	mul.w	r3, r6, lr
 8100634:	428b      	cmp	r3, r1
 8100636:	d908      	bls.n	810064a <__udivmoddi4+0x28a>
 8100638:	eb1c 0101 	adds.w	r1, ip, r1
 810063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8100640:	d216      	bcs.n	8100670 <__udivmoddi4+0x2b0>
 8100642:	428b      	cmp	r3, r1
 8100644:	d914      	bls.n	8100670 <__udivmoddi4+0x2b0>
 8100646:	3e02      	subs	r6, #2
 8100648:	4461      	add	r1, ip
 810064a:	1ac9      	subs	r1, r1, r3
 810064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8100650:	e738      	b.n	81004c4 <__udivmoddi4+0x104>
 8100652:	462e      	mov	r6, r5
 8100654:	4628      	mov	r0, r5
 8100656:	e705      	b.n	8100464 <__udivmoddi4+0xa4>
 8100658:	4606      	mov	r6, r0
 810065a:	e6e3      	b.n	8100424 <__udivmoddi4+0x64>
 810065c:	4618      	mov	r0, r3
 810065e:	e6f8      	b.n	8100452 <__udivmoddi4+0x92>
 8100660:	454b      	cmp	r3, r9
 8100662:	d2a9      	bcs.n	81005b8 <__udivmoddi4+0x1f8>
 8100664:	ebb9 0802 	subs.w	r8, r9, r2
 8100668:	eb64 0e0c 	sbc.w	lr, r4, ip
 810066c:	3801      	subs	r0, #1
 810066e:	e7a3      	b.n	81005b8 <__udivmoddi4+0x1f8>
 8100670:	4646      	mov	r6, r8
 8100672:	e7ea      	b.n	810064a <__udivmoddi4+0x28a>
 8100674:	4620      	mov	r0, r4
 8100676:	e794      	b.n	81005a2 <__udivmoddi4+0x1e2>
 8100678:	4640      	mov	r0, r8
 810067a:	e7d1      	b.n	8100620 <__udivmoddi4+0x260>
 810067c:	46d0      	mov	r8, sl
 810067e:	e77b      	b.n	8100578 <__udivmoddi4+0x1b8>
 8100680:	3b02      	subs	r3, #2
 8100682:	4461      	add	r1, ip
 8100684:	e732      	b.n	81004ec <__udivmoddi4+0x12c>
 8100686:	4630      	mov	r0, r6
 8100688:	e709      	b.n	810049e <__udivmoddi4+0xde>
 810068a:	4464      	add	r4, ip
 810068c:	3802      	subs	r0, #2
 810068e:	e742      	b.n	8100516 <__udivmoddi4+0x156>

08100690 <__aeabi_idiv0>:
 8100690:	4770      	bx	lr
 8100692:	bf00      	nop

08100694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100694:	b480      	push	{r7}
 8100696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100698:	4b09      	ldr	r3, [pc, #36]	; (81006c0 <SystemInit+0x2c>)
 810069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810069e:	4a08      	ldr	r2, [pc, #32]	; (81006c0 <SystemInit+0x2c>)
 81006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81006a8:	4b05      	ldr	r3, [pc, #20]	; (81006c0 <SystemInit+0x2c>)
 81006aa:	691b      	ldr	r3, [r3, #16]
 81006ac:	4a04      	ldr	r2, [pc, #16]	; (81006c0 <SystemInit+0x2c>)
 81006ae:	f043 0310 	orr.w	r3, r3, #16
 81006b2:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81006b4:	bf00      	nop
 81006b6:	46bd      	mov	sp, r7
 81006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006bc:	4770      	bx	lr
 81006be:	bf00      	nop
 81006c0:	e000ed00 	.word	0xe000ed00

081006c4 <DS3231_Read>:
#ifdef ExRTC_IS_DS3231

DS3231_RG_Strc ERTC_lg;


void DS3231_Read(I2C_HandleTypeDef *hi2c){
 81006c4:	b580      	push	{r7, lr}
 81006c6:	b086      	sub	sp, #24
 81006c8:	af04      	add	r7, sp, #16
 81006ca:	6078      	str	r0, [r7, #4]
	/* Check by use "ERTC_lg" in live expression
	 * ex. S3231_Read(&hi2c2);
	 * */
	if(hi2c->State == HAL_I2C_STATE_READY){
 81006cc:	687b      	ldr	r3, [r7, #4]
 81006ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81006d2:	b2db      	uxtb	r3, r3
 81006d4:	2b20      	cmp	r3, #32
 81006d6:	d10b      	bne.n	81006f0 <DS3231_Read+0x2c>
		HAL_I2C_Mem_Read(hi2c, DS_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT,
 81006d8:	2364      	movs	r3, #100	; 0x64
 81006da:	9302      	str	r3, [sp, #8]
 81006dc:	2313      	movs	r3, #19
 81006de:	9301      	str	r3, [sp, #4]
 81006e0:	4b05      	ldr	r3, [pc, #20]	; (81006f8 <DS3231_Read+0x34>)
 81006e2:	9300      	str	r3, [sp, #0]
 81006e4:	2301      	movs	r3, #1
 81006e6:	2200      	movs	r2, #0
 81006e8:	21d0      	movs	r1, #208	; 0xd0
 81006ea:	6878      	ldr	r0, [r7, #4]
 81006ec:	f003 fb58 	bl	8103da0 <HAL_I2C_Mem_Read>
				&ERTC_lg.D8[0], 19, 100);
	}

}
 81006f0:	bf00      	nop
 81006f2:	3708      	adds	r7, #8
 81006f4:	46bd      	mov	sp, r7
 81006f6:	bd80      	pop	{r7, pc}
 81006f8:	10000094 	.word	0x10000094

081006fc <EXIN_RTC_SYNC>:


//// Sync timevalue when boot(in case Vbat is not powered)
void EXIN_RTC_SYNC(I2C_HandleTypeDef *hi2c, RTC_HandleTypeDef *hrtc){
 81006fc:	b580      	push	{r7, lr}
 81006fe:	b088      	sub	sp, #32
 8100700:	af00      	add	r7, sp, #0
 8100702:	6078      	str	r0, [r7, #4]
 8100704:	6039      	str	r1, [r7, #0]
	DS3231_Read(hi2c);
 8100706:	6878      	ldr	r0, [r7, #4]
 8100708:	f7ff ffdc 	bl	81006c4 <DS3231_Read>

	RTC_TimeTypeDef sTime={0};
 810070c:	f107 030c 	add.w	r3, r7, #12
 8100710:	2200      	movs	r2, #0
 8100712:	601a      	str	r2, [r3, #0]
 8100714:	605a      	str	r2, [r3, #4]
 8100716:	609a      	str	r2, [r3, #8]
 8100718:	60da      	str	r2, [r3, #12]
 810071a:	611a      	str	r2, [r3, #16]
	sTime.Hours = ERTC_lg.DS3231RG.hour; //
 810071c:	4b18      	ldr	r3, [pc, #96]	; (8100780 <EXIN_RTC_SYNC+0x84>)
 810071e:	789b      	ldrb	r3, [r3, #2]
 8100720:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8100724:	b2db      	uxtb	r3, r3
 8100726:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = ERTC_lg.DS3231RG.min;
 8100728:	4b15      	ldr	r3, [pc, #84]	; (8100780 <EXIN_RTC_SYNC+0x84>)
 810072a:	785b      	ldrb	r3, [r3, #1]
 810072c:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = ERTC_lg.DS3231RG.sec;
 810072e:	4b14      	ldr	r3, [pc, #80]	; (8100780 <EXIN_RTC_SYNC+0x84>)
 8100730:	781b      	ldrb	r3, [r3, #0]
 8100732:	73bb      	strb	r3, [r7, #14]

	HAL_RTC_SetTime(hrtc, &sTime, RTC_FORMAT_BCD);
 8100734:	f107 030c 	add.w	r3, r7, #12
 8100738:	2201      	movs	r2, #1
 810073a:	4619      	mov	r1, r3
 810073c:	6838      	ldr	r0, [r7, #0]
 810073e:	f005 fd73 	bl	8106228 <HAL_RTC_SetTime>

	RTC_DateTypeDef sDate ={0};
 8100742:	2300      	movs	r3, #0
 8100744:	60bb      	str	r3, [r7, #8]
	sDate.Date = ERTC_lg.DS3231RG.date;
 8100746:	4b0e      	ldr	r3, [pc, #56]	; (8100780 <EXIN_RTC_SYNC+0x84>)
 8100748:	791b      	ldrb	r3, [r3, #4]
 810074a:	72bb      	strb	r3, [r7, #10]
	sDate.Month = ERTC_lg.DS3231RG.month;
 810074c:	4b0c      	ldr	r3, [pc, #48]	; (8100780 <EXIN_RTC_SYNC+0x84>)
 810074e:	795b      	ldrb	r3, [r3, #5]
 8100750:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8100754:	b2db      	uxtb	r3, r3
 8100756:	727b      	strb	r3, [r7, #9]
	sDate.WeekDay = ERTC_lg.DS3231RG.wkday;
 8100758:	4b09      	ldr	r3, [pc, #36]	; (8100780 <EXIN_RTC_SYNC+0x84>)
 810075a:	78db      	ldrb	r3, [r3, #3]
 810075c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8100760:	b2db      	uxtb	r3, r3
 8100762:	723b      	strb	r3, [r7, #8]
	sDate.Year = ERTC_lg.DS3231RG.year;
 8100764:	4b06      	ldr	r3, [pc, #24]	; (8100780 <EXIN_RTC_SYNC+0x84>)
 8100766:	799b      	ldrb	r3, [r3, #6]
 8100768:	72fb      	strb	r3, [r7, #11]

	HAL_RTC_SetDate(hrtc, &sDate, RTC_FORMAT_BCD);
 810076a:	f107 0308 	add.w	r3, r7, #8
 810076e:	2201      	movs	r2, #1
 8100770:	4619      	mov	r1, r3
 8100772:	6838      	ldr	r0, [r7, #0]
 8100774:	f005 fe51 	bl	810641a <HAL_RTC_SetDate>
}
 8100778:	bf00      	nop
 810077a:	3720      	adds	r7, #32
 810077c:	46bd      	mov	sp, r7
 810077e:	bd80      	pop	{r7, pc}
 8100780:	10000094 	.word	0x10000094

08100784 <Write_MFRC522>:
 * Function Nameï¼šWrite_MFRC5200
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parametersï¼šaddr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(u_char addr, u_char val) {
 8100784:	b580      	push	{r7, lr}
 8100786:	b084      	sub	sp, #16
 8100788:	af00      	add	r7, sp, #0
 810078a:	4603      	mov	r3, r0
 810078c:	460a      	mov	r2, r1
 810078e:	71fb      	strb	r3, [r7, #7]
 8100790:	4613      	mov	r3, r2
 8100792:	71bb      	strb	r3, [r7, #6]
  //uint32_t rx_bits;
	  u_char addr_bits = (((addr<<1) & 0x7E)); //// 8.1.2.3 read = 1/ write = 0[1] + addr[6] + 0[1]
 8100794:	79fb      	ldrb	r3, [r7, #7]
 8100796:	005b      	lsls	r3, r3, #1
 8100798:	b2db      	uxtb	r3, r3
 810079a:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 810079e:	b2db      	uxtb	r3, r3
 81007a0:	73fb      	strb	r3, [r7, #15]
  //u_char rx_bits;

#ifdef MFRC522_SPI_HWOUT_NSS_DIS
////  set the select line so we can start transferring
////  MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 81007a2:	2200      	movs	r2, #0
 81007a4:	2110      	movs	r1, #16
 81007a6:	480d      	ldr	r0, [pc, #52]	; (81007dc <Write_MFRC522+0x58>)
 81007a8:	f003 f9d2 	bl	8103b50 <HAL_GPIO_WritePin>
   - bottom 8 bits are the data bits being sent for that address, we send
     them as is
   */
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, (((addr << 1) & 0x7E) << 8) |  val );
  //HAL_SPI_TransmitReceive(&hspi2, (((addr << 1) & 0x7E) << 8) |  val , rx_bits, 1, 500);
  HAL_SPI_Transmit(&MFRC522_SPI_PORT, &addr_bits, 1, 500);
 81007ac:	f107 010f 	add.w	r1, r7, #15
 81007b0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 81007b4:	2201      	movs	r2, #1
 81007b6:	480a      	ldr	r0, [pc, #40]	; (81007e0 <Write_MFRC522+0x5c>)
 81007b8:	f006 f91e 	bl	81069f8 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&MFRC522_SPI_PORT, &val, 1, 500);
 81007bc:	1db9      	adds	r1, r7, #6
 81007be:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 81007c2:	2201      	movs	r2, #1
 81007c4:	4806      	ldr	r0, [pc, #24]	; (81007e0 <Write_MFRC522+0x5c>)
 81007c6:	f006 f917 	bl	81069f8 <HAL_SPI_Transmit>
  //HAL_SPI_TransmitReceive(&MFRC522_SPI_PORT, pTxData, pRxData, Size, Timeout);

#ifdef MFRC522_SPI_HWOUT_NSS_DIS
  //// clear the select line-- we are done here
//  MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 81007ca:	2201      	movs	r2, #1
 81007cc:	2110      	movs	r1, #16
 81007ce:	4803      	ldr	r0, [pc, #12]	; (81007dc <Write_MFRC522+0x58>)
 81007d0:	f003 f9be 	bl	8103b50 <HAL_GPIO_WritePin>
#endif
  //// burn some time
  // volatile uint32_t ticks;
  // for(ticks=0; ticks < 5000; ++ticks);
}
 81007d4:	bf00      	nop
 81007d6:	3710      	adds	r7, #16
 81007d8:	46bd      	mov	sp, r7
 81007da:	bd80      	pop	{r7, pc}
 81007dc:	58021000 	.word	0x58021000
 81007e0:	10000164 	.word	0x10000164

081007e4 <Read_MFRC522>:
 * Function Name: Read_MFRC522
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the
 */
u_char Read_MFRC522(u_char addr) {
 81007e4:	b580      	push	{r7, lr}
 81007e6:	b084      	sub	sp, #16
 81007e8:	af00      	add	r7, sp, #0
 81007ea:	4603      	mov	r3, r0
 81007ec:	71fb      	strb	r3, [r7, #7]
  //uint32_t rx_bits;
  u_char rx_bits;
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80); ////  8.1.2.3  read = 1/ write = 0[1] + addr[6] + 0[1]
 81007ee:	79fb      	ldrb	r3, [r7, #7]
 81007f0:	005b      	lsls	r3, r3, #1
 81007f2:	b25b      	sxtb	r3, r3
 81007f4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 81007f8:	b25b      	sxtb	r3, r3
 81007fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 81007fe:	b25b      	sxtb	r3, r3
 8100800:	b2db      	uxtb	r3, r3
 8100802:	73bb      	strb	r3, [r7, #14]

#ifdef MFRC522_SPI_HWOUT_NSS_DIS
  // set the select line so we can start transferring
//  MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8100804:	2200      	movs	r2, #0
 8100806:	2110      	movs	r1, #16
 8100808:	480e      	ldr	r0, [pc, #56]	; (8100844 <Read_MFRC522+0x60>)
 810080a:	f003 f9a1 	bl	8103b50 <HAL_GPIO_WritePin>
  //// - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
  */
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 );
  //HAL_SPI_TransmitReceive(&hspi2, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 , rx_bits, 1, 500);
//HAL_SPI_Transmit(&hspi2, (unsigned char*) ((((addr<<1) & 0x7E) | 0x80)), 1, 500);
  HAL_SPI_Transmit(&MFRC522_SPI_PORT, &addr_bits, 1, 500);
 810080e:	f107 010e 	add.w	r1, r7, #14
 8100812:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8100816:	2201      	movs	r2, #1
 8100818:	480b      	ldr	r0, [pc, #44]	; (8100848 <Read_MFRC522+0x64>)
 810081a:	f006 f8ed 	bl	81069f8 <HAL_SPI_Transmit>

  HAL_SPI_Receive(&MFRC522_SPI_PORT, &rx_bits, 1, 500);
 810081e:	f107 010f 	add.w	r1, r7, #15
 8100822:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8100826:	2201      	movs	r2, #1
 8100828:	4807      	ldr	r0, [pc, #28]	; (8100848 <Read_MFRC522+0x64>)
 810082a:	f006 fad3 	bl	8106dd4 <HAL_SPI_Receive>
  // burn some time
  // volatile uint32_t ticks;
  // for(ticks=0; ticks < 5000; ++ticks);
#ifdef MFRC522_SPI_HWOUT_NSS_DIS
  //// NSS pin trig using Hardware output NSS signal / setting at ioc
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 810082e:	2201      	movs	r2, #1
 8100830:	2110      	movs	r1, #16
 8100832:	4804      	ldr	r0, [pc, #16]	; (8100844 <Read_MFRC522+0x60>)
 8100834:	f003 f98c 	bl	8103b50 <HAL_GPIO_WritePin>
#endif
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8100838:	7bfb      	ldrb	r3, [r7, #15]
}
 810083a:	4618      	mov	r0, r3
 810083c:	3710      	adds	r7, #16
 810083e:	46bd      	mov	sp, r7
 8100840:	bd80      	pop	{r7, pc}
 8100842:	bf00      	nop
 8100844:	58021000 	.word	0x58021000
 8100848:	10000164 	.word	0x10000164

0810084c <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(u_char reg, u_char mask)
{
 810084c:	b580      	push	{r7, lr}
 810084e:	b084      	sub	sp, #16
 8100850:	af00      	add	r7, sp, #0
 8100852:	4603      	mov	r3, r0
 8100854:	460a      	mov	r2, r1
 8100856:	71fb      	strb	r3, [r7, #7]
 8100858:	4613      	mov	r3, r2
 810085a:	71bb      	strb	r3, [r7, #6]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 810085c:	79fb      	ldrb	r3, [r7, #7]
 810085e:	4618      	mov	r0, r3
 8100860:	f7ff ffc0 	bl	81007e4 <Read_MFRC522>
 8100864:	4603      	mov	r3, r0
 8100866:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8100868:	7bfa      	ldrb	r2, [r7, #15]
 810086a:	79bb      	ldrb	r3, [r7, #6]
 810086c:	4313      	orrs	r3, r2
 810086e:	b2da      	uxtb	r2, r3
 8100870:	79fb      	ldrb	r3, [r7, #7]
 8100872:	4611      	mov	r1, r2
 8100874:	4618      	mov	r0, r3
 8100876:	f7ff ff85 	bl	8100784 <Write_MFRC522>
}
 810087a:	bf00      	nop
 810087c:	3710      	adds	r7, #16
 810087e:	46bd      	mov	sp, r7
 8100880:	bd80      	pop	{r7, pc}

08100882 <ClearBitMask>:
 * 				read current bit then add preferred bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(u_char reg, u_char mask)
{
 8100882:	b580      	push	{r7, lr}
 8100884:	b084      	sub	sp, #16
 8100886:	af00      	add	r7, sp, #0
 8100888:	4603      	mov	r3, r0
 810088a:	460a      	mov	r2, r1
 810088c:	71fb      	strb	r3, [r7, #7]
 810088e:	4613      	mov	r3, r2
 8100890:	71bb      	strb	r3, [r7, #6]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 8100892:	79fb      	ldrb	r3, [r7, #7]
 8100894:	4618      	mov	r0, r3
 8100896:	f7ff ffa5 	bl	81007e4 <Read_MFRC522>
 810089a:	4603      	mov	r3, r0
 810089c:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 810089e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 81008a2:	43db      	mvns	r3, r3
 81008a4:	b25a      	sxtb	r2, r3
 81008a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81008aa:	4013      	ands	r3, r2
 81008ac:	b25b      	sxtb	r3, r3
 81008ae:	b2da      	uxtb	r2, r3
 81008b0:	79fb      	ldrb	r3, [r7, #7]
 81008b2:	4611      	mov	r1, r2
 81008b4:	4618      	mov	r0, r3
 81008b6:	f7ff ff65 	bl	8100784 <Write_MFRC522>
}
 81008ba:	bf00      	nop
 81008bc:	3710      	adds	r7, #16
 81008be:	46bd      	mov	sp, r7
 81008c0:	bd80      	pop	{r7, pc}

081008c2 <AntennaOn>:
 * 				Set 1 to Tx1RFEn, Tx2RFEn
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 81008c2:	b580      	push	{r7, lr}
 81008c4:	af00      	add	r7, sp, #0
  SetBitMask(TxControlReg, 0x03);
 81008c6:	2103      	movs	r1, #3
 81008c8:	2014      	movs	r0, #20
 81008ca:	f7ff ffbf 	bl	810084c <SetBitMask>
}
 81008ce:	bf00      	nop
 81008d0:	bd80      	pop	{r7, pc}

081008d2 <MFRC522_Reset>:
 * 				Soft reset, 10.3 Table 149
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 81008d2:	b580      	push	{r7, lr}
 81008d4:	af00      	add	r7, sp, #0
  Write_MFRC522(CommandReg, PCD_RESETPHASE);
 81008d6:	210f      	movs	r1, #15
 81008d8:	2001      	movs	r0, #1
 81008da:	f7ff ff53 	bl	8100784 <Write_MFRC522>
}
 81008de:	bf00      	nop
 81008e0:	bd80      	pop	{r7, pc}

081008e2 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 81008e2:	b580      	push	{r7, lr}
 81008e4:	af00      	add	r7, sp, #0
//  MSS_GPIO_set_output( MSS_GPIO_1, 1 );
  MFRC522_Reset();
 81008e6:	f7ff fff4 	bl	81008d2 <MFRC522_Reset>

  // Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
  Write_MFRC522(TModeReg, 0x80); // 0x8D);      // Tauto = 1; f(Timer) = 6.78MHz/TPreScaler
 81008ea:	2180      	movs	r1, #128	; 0x80
 81008ec:	202a      	movs	r0, #42	; 0x2a
 81008ee:	f7ff ff49 	bl	8100784 <Write_MFRC522>
  Write_MFRC522(TPrescalerReg, 0xA9); //0x34); // TModeReg[3..0] + TPrescalerReg
 81008f2:	21a9      	movs	r1, #169	; 0xa9
 81008f4:	202b      	movs	r0, #43	; 0x2b
 81008f6:	f7ff ff45 	bl	8100784 <Write_MFRC522>
  Write_MFRC522(TReloadRegL, 0x03); //30);
 81008fa:	2103      	movs	r1, #3
 81008fc:	202d      	movs	r0, #45	; 0x2d
 81008fe:	f7ff ff41 	bl	8100784 <Write_MFRC522>
  Write_MFRC522(TReloadRegH, 0xE8); //0);
 8100902:	21e8      	movs	r1, #232	; 0xe8
 8100904:	202c      	movs	r0, #44	; 0x2c
 8100906:	f7ff ff3d 	bl	8100784 <Write_MFRC522>
  Write_MFRC522(TxAutoReg, 0x40);     // force 100% ASK modulation
 810090a:	2140      	movs	r1, #64	; 0x40
 810090c:	2015      	movs	r0, #21
 810090e:	f7ff ff39 	bl	8100784 <Write_MFRC522>
  Write_MFRC522(ModeReg, 0x3D);       // CRC Initial value 0x6363
 8100912:	213d      	movs	r1, #61	; 0x3d
 8100914:	2011      	movs	r0, #17
 8100916:	f7ff ff35 	bl	8100784 <Write_MFRC522>
  // interrupts, still playing with these
  // Write_MFRC522(CommIEnReg, 0xFF);
  // Write_MFRC522(DivlEnReg, 0xFF);

  // turn antenna on
  AntennaOn();
 810091a:	f7ff ffd2 	bl	81008c2 <AntennaOn>
}
 810091e:	bf00      	nop
 8100920:	bd80      	pop	{r7, pc}

08100922 <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Request(u_char reqMode, u_char *TagType)
{
 8100922:	b580      	push	{r7, lr}
 8100924:	b086      	sub	sp, #24
 8100926:	af02      	add	r7, sp, #8
 8100928:	4603      	mov	r3, r0
 810092a:	6039      	str	r1, [r7, #0]
 810092c:	71fb      	strb	r3, [r7, #7]
  u_char status;
  uint backBits; // The received data bits

  Write_MFRC522(BitFramingReg, 0x07);   // TxLastBists = BitFramingReg[2..0]
 810092e:	2107      	movs	r1, #7
 8100930:	200d      	movs	r0, #13
 8100932:	f7ff ff27 	bl	8100784 <Write_MFRC522>

  TagType[0] = reqMode;
 8100936:	683b      	ldr	r3, [r7, #0]
 8100938:	79fa      	ldrb	r2, [r7, #7]
 810093a:	701a      	strb	r2, [r3, #0]

  status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 810093c:	f107 0308 	add.w	r3, r7, #8
 8100940:	9300      	str	r3, [sp, #0]
 8100942:	683b      	ldr	r3, [r7, #0]
 8100944:	2201      	movs	r2, #1
 8100946:	6839      	ldr	r1, [r7, #0]
 8100948:	200c      	movs	r0, #12
 810094a:	f000 f80f 	bl	810096c <MFRC522_ToCard>
 810094e:	4603      	mov	r3, r0
 8100950:	73fb      	strb	r3, [r7, #15]
  if ((status != MI_OK) || (backBits != 0x10)) {
 8100952:	7bfb      	ldrb	r3, [r7, #15]
 8100954:	2b00      	cmp	r3, #0
 8100956:	d102      	bne.n	810095e <MFRC522_Request+0x3c>
 8100958:	68bb      	ldr	r3, [r7, #8]
 810095a:	2b10      	cmp	r3, #16
 810095c:	d001      	beq.n	8100962 <MFRC522_Request+0x40>
    status = MI_ERR;
 810095e:	2302      	movs	r3, #2
 8100960:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8100962:	7bfb      	ldrb	r3, [r7, #15]
}
 8100964:	4618      	mov	r0, r3
 8100966:	3710      	adds	r7, #16
 8100968:	46bd      	mov	sp, r7
 810096a:	bd80      	pop	{r7, pc}

0810096c <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
u_char MFRC522_ToCard(u_char command, u_char *sendData, u_char sendLen, u_char *backData, uint *backLen)
{
 810096c:	b590      	push	{r4, r7, lr}
 810096e:	b089      	sub	sp, #36	; 0x24
 8100970:	af00      	add	r7, sp, #0
 8100972:	60b9      	str	r1, [r7, #8]
 8100974:	607b      	str	r3, [r7, #4]
 8100976:	4603      	mov	r3, r0
 8100978:	73fb      	strb	r3, [r7, #15]
 810097a:	4613      	mov	r3, r2
 810097c:	73bb      	strb	r3, [r7, #14]
  u_char status = MI_ERR;
 810097e:	2302      	movs	r3, #2
 8100980:	77fb      	strb	r3, [r7, #31]
  u_char irqEn = 0x00;
 8100982:	2300      	movs	r3, #0
 8100984:	77bb      	strb	r3, [r7, #30]
  u_char waitIRq = 0x00;
 8100986:	2300      	movs	r3, #0
 8100988:	777b      	strb	r3, [r7, #29]
  u_char lastBits;
  u_char n;
  uint i;

  switch (command)
 810098a:	7bfb      	ldrb	r3, [r7, #15]
 810098c:	2b0c      	cmp	r3, #12
 810098e:	d006      	beq.n	810099e <MFRC522_ToCard+0x32>
 8100990:	2b0e      	cmp	r3, #14
 8100992:	d109      	bne.n	81009a8 <MFRC522_ToCard+0x3c>
  {
    case PCD_AUTHENT:     // Certification cards close
      {
        irqEn = 0x12;
 8100994:	2312      	movs	r3, #18
 8100996:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x10;
 8100998:	2310      	movs	r3, #16
 810099a:	777b      	strb	r3, [r7, #29]
        break;
 810099c:	e005      	b.n	81009aa <MFRC522_ToCard+0x3e>
      }
    case PCD_TRANSCEIVE:  // Transmit FIFO data
      {
        irqEn = 0x77;
 810099e:	2377      	movs	r3, #119	; 0x77
 81009a0:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x30;
 81009a2:	2330      	movs	r3, #48	; 0x30
 81009a4:	777b      	strb	r3, [r7, #29]
        break;
 81009a6:	e000      	b.n	81009aa <MFRC522_ToCard+0x3e>
      }
    default:
      break;
 81009a8:	bf00      	nop
  }

  Write_MFRC522(CommIEnReg, irqEn|0x80);  // Interrupt request
 81009aa:	7fbb      	ldrb	r3, [r7, #30]
 81009ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 81009b0:	b2db      	uxtb	r3, r3
 81009b2:	4619      	mov	r1, r3
 81009b4:	2002      	movs	r0, #2
 81009b6:	f7ff fee5 	bl	8100784 <Write_MFRC522>
  ClearBitMask(CommIrqReg, 0x80);         // Clear all interrupt request bit
 81009ba:	2180      	movs	r1, #128	; 0x80
 81009bc:	2004      	movs	r0, #4
 81009be:	f7ff ff60 	bl	8100882 <ClearBitMask>
  SetBitMask(FIFOLevelReg, 0x80);         // FlushBuffer=1, FIFO Initialization
 81009c2:	2180      	movs	r1, #128	; 0x80
 81009c4:	200a      	movs	r0, #10
 81009c6:	f7ff ff41 	bl	810084c <SetBitMask>

  Write_MFRC522(CommandReg, PCD_IDLE);    // NO action; Cancel the current command
 81009ca:	2100      	movs	r1, #0
 81009cc:	2001      	movs	r0, #1
 81009ce:	f7ff fed9 	bl	8100784 <Write_MFRC522>

  // Writing data to the FIFO
  for (i=0; i<sendLen; i++)
 81009d2:	2300      	movs	r3, #0
 81009d4:	61bb      	str	r3, [r7, #24]
 81009d6:	e00a      	b.n	81009ee <MFRC522_ToCard+0x82>
  {
    Write_MFRC522(FIFODataReg, sendData[i]);
 81009d8:	68ba      	ldr	r2, [r7, #8]
 81009da:	69bb      	ldr	r3, [r7, #24]
 81009dc:	4413      	add	r3, r2
 81009de:	781b      	ldrb	r3, [r3, #0]
 81009e0:	4619      	mov	r1, r3
 81009e2:	2009      	movs	r0, #9
 81009e4:	f7ff fece 	bl	8100784 <Write_MFRC522>
  for (i=0; i<sendLen; i++)
 81009e8:	69bb      	ldr	r3, [r7, #24]
 81009ea:	3301      	adds	r3, #1
 81009ec:	61bb      	str	r3, [r7, #24]
 81009ee:	7bbb      	ldrb	r3, [r7, #14]
 81009f0:	69ba      	ldr	r2, [r7, #24]
 81009f2:	429a      	cmp	r2, r3
 81009f4:	d3f0      	bcc.n	81009d8 <MFRC522_ToCard+0x6c>
  }

  // Execute the command
  Write_MFRC522(CommandReg, command);
 81009f6:	7bfb      	ldrb	r3, [r7, #15]
 81009f8:	4619      	mov	r1, r3
 81009fa:	2001      	movs	r0, #1
 81009fc:	f7ff fec2 	bl	8100784 <Write_MFRC522>
  if (command == PCD_TRANSCEIVE)
 8100a00:	7bfb      	ldrb	r3, [r7, #15]
 8100a02:	2b0c      	cmp	r3, #12
 8100a04:	d103      	bne.n	8100a0e <MFRC522_ToCard+0xa2>
  {
    SetBitMask(BitFramingReg, 0x80);      // StartSend=1,transmission of data starts
 8100a06:	2180      	movs	r1, #128	; 0x80
 8100a08:	200d      	movs	r0, #13
 8100a0a:	f7ff ff1f 	bl	810084c <SetBitMask>
  }

  // Waiting to receive data to complete
  i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8100a0e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8100a12:	61bb      	str	r3, [r7, #24]
  do
  {
    // CommIrqReg[7..0]
    // Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
    n = Read_MFRC522(CommIrqReg);
 8100a14:	2004      	movs	r0, #4
 8100a16:	f7ff fee5 	bl	81007e4 <Read_MFRC522>
 8100a1a:	4603      	mov	r3, r0
 8100a1c:	773b      	strb	r3, [r7, #28]
    i--;
 8100a1e:	69bb      	ldr	r3, [r7, #24]
 8100a20:	3b01      	subs	r3, #1
 8100a22:	61bb      	str	r3, [r7, #24]
  }
  while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8100a24:	69bb      	ldr	r3, [r7, #24]
 8100a26:	2b00      	cmp	r3, #0
 8100a28:	d00a      	beq.n	8100a40 <MFRC522_ToCard+0xd4>
 8100a2a:	7f3b      	ldrb	r3, [r7, #28]
 8100a2c:	f003 0301 	and.w	r3, r3, #1
 8100a30:	2b00      	cmp	r3, #0
 8100a32:	d105      	bne.n	8100a40 <MFRC522_ToCard+0xd4>
 8100a34:	7f3a      	ldrb	r2, [r7, #28]
 8100a36:	7f7b      	ldrb	r3, [r7, #29]
 8100a38:	4013      	ands	r3, r2
 8100a3a:	b2db      	uxtb	r3, r3
 8100a3c:	2b00      	cmp	r3, #0
 8100a3e:	d0e9      	beq.n	8100a14 <MFRC522_ToCard+0xa8>

  ClearBitMask(BitFramingReg, 0x80);      // StartSend=0
 8100a40:	2180      	movs	r1, #128	; 0x80
 8100a42:	200d      	movs	r0, #13
 8100a44:	f7ff ff1d 	bl	8100882 <ClearBitMask>

  if (i != 0)
 8100a48:	69bb      	ldr	r3, [r7, #24]
 8100a4a:	2b00      	cmp	r3, #0
 8100a4c:	d052      	beq.n	8100af4 <MFRC522_ToCard+0x188>
  {
    if(!(Read_MFRC522(ErrorReg) & 0x1B))  // BufferOvfl Collerr CRCErr ProtecolErr
 8100a4e:	2006      	movs	r0, #6
 8100a50:	f7ff fec8 	bl	81007e4 <Read_MFRC522>
 8100a54:	4603      	mov	r3, r0
 8100a56:	f003 031b 	and.w	r3, r3, #27
 8100a5a:	2b00      	cmp	r3, #0
 8100a5c:	d148      	bne.n	8100af0 <MFRC522_ToCard+0x184>
    {
      status = MI_OK;
 8100a5e:	2300      	movs	r3, #0
 8100a60:	77fb      	strb	r3, [r7, #31]
      if (n & irqEn & 0x01)
 8100a62:	7f3a      	ldrb	r2, [r7, #28]
 8100a64:	7fbb      	ldrb	r3, [r7, #30]
 8100a66:	4013      	ands	r3, r2
 8100a68:	b2db      	uxtb	r3, r3
 8100a6a:	f003 0301 	and.w	r3, r3, #1
 8100a6e:	2b00      	cmp	r3, #0
 8100a70:	d001      	beq.n	8100a76 <MFRC522_ToCard+0x10a>
      {
        status = MI_NOTAGERR;             // ??
 8100a72:	2301      	movs	r3, #1
 8100a74:	77fb      	strb	r3, [r7, #31]
      }

      if (command == PCD_TRANSCEIVE)
 8100a76:	7bfb      	ldrb	r3, [r7, #15]
 8100a78:	2b0c      	cmp	r3, #12
 8100a7a:	d13b      	bne.n	8100af4 <MFRC522_ToCard+0x188>
      {
        n = Read_MFRC522(FIFOLevelReg);
 8100a7c:	200a      	movs	r0, #10
 8100a7e:	f7ff feb1 	bl	81007e4 <Read_MFRC522>
 8100a82:	4603      	mov	r3, r0
 8100a84:	773b      	strb	r3, [r7, #28]
        lastBits = Read_MFRC522(ControlReg) & 0x07;
 8100a86:	200c      	movs	r0, #12
 8100a88:	f7ff feac 	bl	81007e4 <Read_MFRC522>
 8100a8c:	4603      	mov	r3, r0
 8100a8e:	f003 0307 	and.w	r3, r3, #7
 8100a92:	75fb      	strb	r3, [r7, #23]
        if (lastBits)
 8100a94:	7dfb      	ldrb	r3, [r7, #23]
 8100a96:	2b00      	cmp	r3, #0
 8100a98:	d008      	beq.n	8100aac <MFRC522_ToCard+0x140>
        {
          *backLen = (n-1)*8 + lastBits;
 8100a9a:	7f3b      	ldrb	r3, [r7, #28]
 8100a9c:	3b01      	subs	r3, #1
 8100a9e:	00da      	lsls	r2, r3, #3
 8100aa0:	7dfb      	ldrb	r3, [r7, #23]
 8100aa2:	4413      	add	r3, r2
 8100aa4:	461a      	mov	r2, r3
 8100aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8100aa8:	601a      	str	r2, [r3, #0]
 8100aaa:	e004      	b.n	8100ab6 <MFRC522_ToCard+0x14a>
        }
        else
        {
          *backLen = n*8;
 8100aac:	7f3b      	ldrb	r3, [r7, #28]
 8100aae:	00db      	lsls	r3, r3, #3
 8100ab0:	461a      	mov	r2, r3
 8100ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8100ab4:	601a      	str	r2, [r3, #0]
        }

        if (n == 0)
 8100ab6:	7f3b      	ldrb	r3, [r7, #28]
 8100ab8:	2b00      	cmp	r3, #0
 8100aba:	d101      	bne.n	8100ac0 <MFRC522_ToCard+0x154>
        {
          n = 1;
 8100abc:	2301      	movs	r3, #1
 8100abe:	773b      	strb	r3, [r7, #28]
        }
        if (n > MAX_LEN)
 8100ac0:	7f3b      	ldrb	r3, [r7, #28]
 8100ac2:	2b10      	cmp	r3, #16
 8100ac4:	d901      	bls.n	8100aca <MFRC522_ToCard+0x15e>
        {
          n = MAX_LEN;
 8100ac6:	2310      	movs	r3, #16
 8100ac8:	773b      	strb	r3, [r7, #28]
        }

        // Reading the received data in FIFO
        for (i=0; i<n; i++)
 8100aca:	2300      	movs	r3, #0
 8100acc:	61bb      	str	r3, [r7, #24]
 8100ace:	e00a      	b.n	8100ae6 <MFRC522_ToCard+0x17a>
        {
          backData[i] = Read_MFRC522(FIFODataReg);
 8100ad0:	687a      	ldr	r2, [r7, #4]
 8100ad2:	69bb      	ldr	r3, [r7, #24]
 8100ad4:	18d4      	adds	r4, r2, r3
 8100ad6:	2009      	movs	r0, #9
 8100ad8:	f7ff fe84 	bl	81007e4 <Read_MFRC522>
 8100adc:	4603      	mov	r3, r0
 8100ade:	7023      	strb	r3, [r4, #0]
        for (i=0; i<n; i++)
 8100ae0:	69bb      	ldr	r3, [r7, #24]
 8100ae2:	3301      	adds	r3, #1
 8100ae4:	61bb      	str	r3, [r7, #24]
 8100ae6:	7f3b      	ldrb	r3, [r7, #28]
 8100ae8:	69ba      	ldr	r2, [r7, #24]
 8100aea:	429a      	cmp	r2, r3
 8100aec:	d3f0      	bcc.n	8100ad0 <MFRC522_ToCard+0x164>
 8100aee:	e001      	b.n	8100af4 <MFRC522_ToCard+0x188>
        }
      }
    }
    else {
      //printf("~~~ buffer overflow, collerr, crcerr, or protecolerr\r\n");
      status = MI_ERR;
 8100af0:	2302      	movs	r3, #2
 8100af2:	77fb      	strb	r3, [r7, #31]
  }
  else {
    //printf("~~~ request timed out\r\n");
  }

  return status;
 8100af4:	7ffb      	ldrb	r3, [r7, #31]
}
 8100af6:	4618      	mov	r0, r3
 8100af8:	3724      	adds	r7, #36	; 0x24
 8100afa:	46bd      	mov	sp, r7
 8100afc:	bd90      	pop	{r4, r7, pc}

08100afe <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Anticoll(u_char *serNum)
{
 8100afe:	b580      	push	{r7, lr}
 8100b00:	b086      	sub	sp, #24
 8100b02:	af02      	add	r7, sp, #8
 8100b04:	6078      	str	r0, [r7, #4]
  u_char status;
  u_char i;
  u_char serNumCheck=0;
 8100b06:	2300      	movs	r3, #0
 8100b08:	737b      	strb	r3, [r7, #13]
  uint unLen;


  //ClearBitMask(Status2Reg, 0x08);		//TempSensclear
  //ClearBitMask(CollReg,0x80);			//ValuesAfterColl
  Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8100b0a:	2100      	movs	r1, #0
 8100b0c:	200d      	movs	r0, #13
 8100b0e:	f7ff fe39 	bl	8100784 <Write_MFRC522>

  serNum[0] = PICC_ANTICOLL;
 8100b12:	687b      	ldr	r3, [r7, #4]
 8100b14:	2293      	movs	r2, #147	; 0x93
 8100b16:	701a      	strb	r2, [r3, #0]
  serNum[1] = 0x20;
 8100b18:	687b      	ldr	r3, [r7, #4]
 8100b1a:	3301      	adds	r3, #1
 8100b1c:	2220      	movs	r2, #32
 8100b1e:	701a      	strb	r2, [r3, #0]
  status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8100b20:	f107 0308 	add.w	r3, r7, #8
 8100b24:	9300      	str	r3, [sp, #0]
 8100b26:	687b      	ldr	r3, [r7, #4]
 8100b28:	2202      	movs	r2, #2
 8100b2a:	6879      	ldr	r1, [r7, #4]
 8100b2c:	200c      	movs	r0, #12
 8100b2e:	f7ff ff1d 	bl	810096c <MFRC522_ToCard>
 8100b32:	4603      	mov	r3, r0
 8100b34:	73fb      	strb	r3, [r7, #15]

  if (status == MI_OK)
 8100b36:	7bfb      	ldrb	r3, [r7, #15]
 8100b38:	2b00      	cmp	r3, #0
 8100b3a:	d118      	bne.n	8100b6e <MFRC522_Anticoll+0x70>
  {
    //Check card serial number
    for (i=0; i<4; i++)
 8100b3c:	2300      	movs	r3, #0
 8100b3e:	73bb      	strb	r3, [r7, #14]
 8100b40:	e009      	b.n	8100b56 <MFRC522_Anticoll+0x58>
    {
      serNumCheck ^= serNum[i];
 8100b42:	7bbb      	ldrb	r3, [r7, #14]
 8100b44:	687a      	ldr	r2, [r7, #4]
 8100b46:	4413      	add	r3, r2
 8100b48:	781a      	ldrb	r2, [r3, #0]
 8100b4a:	7b7b      	ldrb	r3, [r7, #13]
 8100b4c:	4053      	eors	r3, r2
 8100b4e:	737b      	strb	r3, [r7, #13]
    for (i=0; i<4; i++)
 8100b50:	7bbb      	ldrb	r3, [r7, #14]
 8100b52:	3301      	adds	r3, #1
 8100b54:	73bb      	strb	r3, [r7, #14]
 8100b56:	7bbb      	ldrb	r3, [r7, #14]
 8100b58:	2b03      	cmp	r3, #3
 8100b5a:	d9f2      	bls.n	8100b42 <MFRC522_Anticoll+0x44>
    }
    if (serNumCheck != serNum[i])
 8100b5c:	7bbb      	ldrb	r3, [r7, #14]
 8100b5e:	687a      	ldr	r2, [r7, #4]
 8100b60:	4413      	add	r3, r2
 8100b62:	781b      	ldrb	r3, [r3, #0]
 8100b64:	7b7a      	ldrb	r2, [r7, #13]
 8100b66:	429a      	cmp	r2, r3
 8100b68:	d001      	beq.n	8100b6e <MFRC522_Anticoll+0x70>
    {
      status = MI_ERR;
 8100b6a:	2302      	movs	r3, #2
 8100b6c:	73fb      	strb	r3, [r7, #15]
    }
  }

  //SetBitMask(CollReg, 0x80);		//ValuesAfterColl=1

  return status;
 8100b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8100b70:	4618      	mov	r0, r3
 8100b72:	3710      	adds	r7, #16
 8100b74:	46bd      	mov	sp, r7
 8100b76:	bd80      	pop	{r7, pc}

08100b78 <MFRC522_HardResetSet>:
	// Clear MFCrypto1On bit
	ClearBitMask(Status2Reg, 0x08); // Status2Reg[7..0] bits are: TempSensClear I2CForceHS reserved reserved   MFCrypto1On ModemState[2:0]
} // End PCD_StopCrypto1()

////------------owl_hor-------owl_hor---------owl_hor----------
void MFRC522_HardResetSet(void){
 8100b78:	b580      	push	{r7, lr}
 8100b7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RC522_Rst_GPIO_Port, RC522_Rst_Pin, GPIO_PIN_RESET);
 8100b7c:	2200      	movs	r2, #0
 8100b7e:	2108      	movs	r1, #8
 8100b80:	4806      	ldr	r0, [pc, #24]	; (8100b9c <MFRC522_HardResetSet+0x24>)
 8100b82:	f002 ffe5 	bl	8103b50 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8100b86:	2001      	movs	r0, #1
 8100b88:	f001 f82a 	bl	8101be0 <HAL_Delay>
	HAL_GPIO_WritePin(RC522_Rst_GPIO_Port, RC522_Rst_Pin, GPIO_PIN_SET);
 8100b8c:	2201      	movs	r2, #1
 8100b8e:	2108      	movs	r1, #8
 8100b90:	4802      	ldr	r0, [pc, #8]	; (8100b9c <MFRC522_HardResetSet+0x24>)
 8100b92:	f002 ffdd 	bl	8103b50 <HAL_GPIO_WritePin>
}
 8100b96:	bf00      	nop
 8100b98:	bd80      	pop	{r7, pc}
 8100b9a:	bf00      	nop
 8100b9c:	58021000 	.word	0x58021000

08100ba0 <MFRC522_SelfTest>:

uint8_t FIFOBuffex522[75]; //// Read FIFO buffer test
void MFRC522_SelfTest(void){
 8100ba0:	b580      	push	{r7, lr}
 8100ba2:	b082      	sub	sp, #8
 8100ba4:	af00      	add	r7, sp, #0
			5Dh, 48h, 76h, D5h, 71h, 061h, 21h, A9h,
			86h, 96h, 83h, 38h, CFh, 9Dh, 5Bh, 6Dh,
			DCh, 15h, BAh, 3Eh, 7Dh, 95h, 03Bh, 2Fh
	 * */
	//// 1. Soft reset -> send 1111 to 01h
	Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8100ba6:	210f      	movs	r1, #15
 8100ba8:	2001      	movs	r0, #1
 8100baa:	f7ff fdeb 	bl	8100784 <Write_MFRC522>

	//// 2. Write 00h to FIFO 25x times
	for(int i = 0;i < 25; i++){
 8100bae:	2300      	movs	r3, #0
 8100bb0:	607b      	str	r3, [r7, #4]
 8100bb2:	e002      	b.n	8100bba <MFRC522_SelfTest+0x1a>
 8100bb4:	687b      	ldr	r3, [r7, #4]
 8100bb6:	3301      	adds	r3, #1
 8100bb8:	607b      	str	r3, [r7, #4]
 8100bba:	687b      	ldr	r3, [r7, #4]
 8100bbc:	2b18      	cmp	r3, #24
 8100bbe:	ddf9      	ble.n	8100bb4 <MFRC522_SelfTest+0x14>
		//Write_MFRC522(FIFODataReg, Reserved00); // use reserved bc it equals to 00h
	}
	//// 3. write 09h to AutoTest
	Write_MFRC522(AutoTestReg, PCD_SELFTSTEN);
 8100bc0:	2109      	movs	r1, #9
 8100bc2:	2036      	movs	r0, #54	; 0x36
 8100bc4:	f7ff fdde 	bl	8100784 <Write_MFRC522>

	//// 4. Write 00h to the FIFO buffer again
	Write_MFRC522(FIFODataReg, Reserved00);
 8100bc8:	2100      	movs	r1, #0
 8100bca:	2009      	movs	r0, #9
 8100bcc:	f7ff fdda 	bl	8100784 <Write_MFRC522>

	FIFOBuffex522[0] = Read_MFRC522(FIFOLevelReg); //// FIFO Check
 8100bd0:	200a      	movs	r0, #10
 8100bd2:	f7ff fe07 	bl	81007e4 <Read_MFRC522>
 8100bd6:	4603      	mov	r3, r0
 8100bd8:	461a      	mov	r2, r3
 8100bda:	4b14      	ldr	r3, [pc, #80]	; (8100c2c <MFRC522_SelfTest+0x8c>)
 8100bdc:	701a      	strb	r2, [r3, #0]
	//// 5. CalcCRC -> Write 0011 to 01h
	Write_MFRC522(CommandReg, PCD_CALCCRC);
 8100bde:	2103      	movs	r1, #3
 8100be0:	2001      	movs	r0, #1
 8100be2:	f7ff fdcf 	bl	8100784 <Write_MFRC522>

	//// 6. Self test enable, wait for calculation/ must have!!!
	HAL_Delay(1);
 8100be6:	2001      	movs	r0, #1
 8100be8:	f000 fffa 	bl	8101be0 <HAL_Delay>

	FIFOBuffex522[1] = Read_MFRC522(FIFOLevelReg);  //// FIFO Check
 8100bec:	200a      	movs	r0, #10
 8100bee:	f7ff fdf9 	bl	81007e4 <Read_MFRC522>
 8100bf2:	4603      	mov	r3, r0
 8100bf4:	461a      	mov	r2, r3
 8100bf6:	4b0d      	ldr	r3, [pc, #52]	; (8100c2c <MFRC522_SelfTest+0x8c>)
 8100bf8:	705a      	strb	r2, [r3, #1]

	//// 7. Read 64 buffer FIFO
	for(uint j = 2;j < 73; j++){
 8100bfa:	2302      	movs	r3, #2
 8100bfc:	603b      	str	r3, [r7, #0]
 8100bfe:	e00c      	b.n	8100c1a <MFRC522_SelfTest+0x7a>
	FIFOBuffex522[j] = Read_MFRC522(FIFODataReg);
 8100c00:	2009      	movs	r0, #9
 8100c02:	f7ff fdef 	bl	81007e4 <Read_MFRC522>
 8100c06:	4603      	mov	r3, r0
 8100c08:	4619      	mov	r1, r3
 8100c0a:	4a08      	ldr	r2, [pc, #32]	; (8100c2c <MFRC522_SelfTest+0x8c>)
 8100c0c:	683b      	ldr	r3, [r7, #0]
 8100c0e:	4413      	add	r3, r2
 8100c10:	460a      	mov	r2, r1
 8100c12:	701a      	strb	r2, [r3, #0]
	for(uint j = 2;j < 73; j++){
 8100c14:	683b      	ldr	r3, [r7, #0]
 8100c16:	3301      	adds	r3, #1
 8100c18:	603b      	str	r3, [r7, #0]
 8100c1a:	683b      	ldr	r3, [r7, #0]
 8100c1c:	2b48      	cmp	r3, #72	; 0x48
 8100c1e:	d9ef      	bls.n	8100c00 <MFRC522_SelfTest+0x60>
	}
}
 8100c20:	bf00      	nop
 8100c22:	bf00      	nop
 8100c24:	3708      	adds	r7, #8
 8100c26:	46bd      	mov	sp, r7
 8100c28:	bd80      	pop	{r7, pc}
 8100c2a:	bf00      	nop
 8100c2c:	100000a8 	.word	0x100000a8

08100c30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8100c32:	b0af      	sub	sp, #188	; 0xbc
 8100c34:	af04      	add	r7, sp, #16

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100c36:	4b14      	ldr	r3, [pc, #80]	; (8100c88 <main+0x58>)
 8100c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c3c:	4a12      	ldr	r2, [pc, #72]	; (8100c88 <main+0x58>)
 8100c3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8100c42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100c46:	4b10      	ldr	r3, [pc, #64]	; (8100c88 <main+0x58>)
 8100c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100c50:	607b      	str	r3, [r7, #4]
 8100c52:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100c54:	2001      	movs	r0, #1
 8100c56:	f003 f801 	bl	8103c5c <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100c5a:	f003 fd1f 	bl	810469c <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100c5e:	2201      	movs	r2, #1
 8100c60:	2102      	movs	r1, #2
 8100c62:	2000      	movs	r0, #0
 8100c64:	f003 fca0 	bl	81045a8 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100c68:	4b08      	ldr	r3, [pc, #32]	; (8100c8c <main+0x5c>)
 8100c6a:	681b      	ldr	r3, [r3, #0]
 8100c6c:	091b      	lsrs	r3, r3, #4
 8100c6e:	f003 030f 	and.w	r3, r3, #15
 8100c72:	2b07      	cmp	r3, #7
 8100c74:	d10e      	bne.n	8100c94 <main+0x64>
 8100c76:	4b06      	ldr	r3, [pc, #24]	; (8100c90 <main+0x60>)
 8100c78:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100c7c:	4a04      	ldr	r2, [pc, #16]	; (8100c90 <main+0x60>)
 8100c7e:	f043 0301 	orr.w	r3, r3, #1
 8100c82:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8100c86:	e00d      	b.n	8100ca4 <main+0x74>
 8100c88:	58024400 	.word	0x58024400
 8100c8c:	e000ed00 	.word	0xe000ed00
 8100c90:	58026400 	.word	0x58026400
 8100c94:	4bad      	ldr	r3, [pc, #692]	; (8100f4c <main+0x31c>)
 8100c96:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100c9a:	4aac      	ldr	r2, [pc, #688]	; (8100f4c <main+0x31c>)
 8100c9c:	f043 0301 	orr.w	r3, r3, #1
 8100ca0:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100ca4:	f000 fee8 	bl	8101a78 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100ca8:	f000 fb1e 	bl	81012e8 <MX_GPIO_Init>
  MX_TIM17_Init();
 8100cac:	f000 fa80 	bl	81011b0 <MX_TIM17_Init>
  MX_RTC_Init();
 8100cb0:	f000 f9c2 	bl	8101038 <MX_RTC_Init>
  MX_I2C2_Init();
 8100cb4:	f000 f980 	bl	8100fb8 <MX_I2C2_Init>
  MX_DMA_Init();
 8100cb8:	f000 faee 	bl	8101298 <MX_DMA_Init>
  MX_SPI4_Init();
 8100cbc:	f000 fa22 	bl	8101104 <MX_SPI4_Init>
  MX_USART3_UART_Init();
 8100cc0:	f000 fa9e 	bl	8101200 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  //HAL_TIM_Base_Start_IT(&htim17);

  //// Start sync EXIN RTC
  DS3231_Read(&hi2c2);
 8100cc4:	48a2      	ldr	r0, [pc, #648]	; (8100f50 <main+0x320>)
 8100cc6:	f7ff fcfd 	bl	81006c4 <DS3231_Read>
  EXIN_RTC_SYNC(&hi2c2,&hrtc);
 8100cca:	49a2      	ldr	r1, [pc, #648]	; (8100f54 <main+0x324>)
 8100ccc:	48a0      	ldr	r0, [pc, #640]	; (8100f50 <main+0x320>)
 8100cce:	f7ff fd15 	bl	81006fc <EXIN_RTC_SYNC>
  MFRC522_HardResetSet();
 8100cd2:	f7ff ff51 	bl	8100b78 <MFRC522_HardResetSet>
  MFRC522_Init();
 8100cd6:	f7ff fe04 	bl	81008e2 <MFRC522_Init>
  //// MFRC522 version 2.0 software version is: 92h
  rc522_version = Read_MFRC522(VersionReg);
 8100cda:	2037      	movs	r0, #55	; 0x37
 8100cdc:	f7ff fd82 	bl	81007e4 <Read_MFRC522>
 8100ce0:	4603      	mov	r3, r0
 8100ce2:	461a      	mov	r2, r3
 8100ce4:	4b9c      	ldr	r3, [pc, #624]	; (8100f58 <main+0x328>)
 8100ce6:	701a      	strb	r2, [r3, #0]

#define Huart3
#ifdef Huart3
  HAL_RTC_GetTime(&hrtc, &NowTime, RTC_FORMAT_BCD);
 8100ce8:	2201      	movs	r2, #1
 8100cea:	499c      	ldr	r1, [pc, #624]	; (8100f5c <main+0x32c>)
 8100cec:	4899      	ldr	r0, [pc, #612]	; (8100f54 <main+0x324>)
 8100cee:	f005 fb38 	bl	8106362 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &NowDate, RTC_FORMAT_BCD);
 8100cf2:	2201      	movs	r2, #1
 8100cf4:	499a      	ldr	r1, [pc, #616]	; (8100f60 <main+0x330>)
 8100cf6:	4897      	ldr	r0, [pc, #604]	; (8100f54 <main+0x324>)
 8100cf8:	f005 fc16 	bl	8106528 <HAL_RTC_GetDate>

  char temp[]="----------------- H745_STAMPR_CM4 --------------------\r\n";
 8100cfc:	4b99      	ldr	r3, [pc, #612]	; (8100f64 <main+0x334>)
 8100cfe:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8100d02:	461d      	mov	r5, r3
 8100d04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8100d06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8100d08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8100d0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8100d0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8100d0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8100d10:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8100d14:	c403      	stmia	r4!, {r0, r1}
 8100d16:	7022      	strb	r2, [r4, #0]
  HAL_UART_Transmit(&huart3, (uint8_t*)temp, strlen(temp),10); // strlen = length of str -> config length of data
 8100d18:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8100d1c:	4618      	mov	r0, r3
 8100d1e:	f7ff fadf 	bl	81002e0 <strlen>
 8100d22:	4603      	mov	r3, r0
 8100d24:	b29a      	uxth	r2, r3
 8100d26:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8100d2a:	230a      	movs	r3, #10
 8100d2c:	488e      	ldr	r0, [pc, #568]	; (8100f68 <main+0x338>)
 8100d2e:	f006 ff9f 	bl	8107c70 <HAL_UART_Transmit>
  char temp2[100];
  sprintf(temp2, "Date: %x/%x/%x  Time: %x:%x:%x \r\n",
		  NowDate.Date, NowDate.Month, NowDate.Year,
 8100d32:	4b8b      	ldr	r3, [pc, #556]	; (8100f60 <main+0x330>)
 8100d34:	789b      	ldrb	r3, [r3, #2]
  sprintf(temp2, "Date: %x/%x/%x  Time: %x:%x:%x \r\n",
 8100d36:	461d      	mov	r5, r3
		  NowDate.Date, NowDate.Month, NowDate.Year,
 8100d38:	4b89      	ldr	r3, [pc, #548]	; (8100f60 <main+0x330>)
 8100d3a:	785b      	ldrb	r3, [r3, #1]
  sprintf(temp2, "Date: %x/%x/%x  Time: %x:%x:%x \r\n",
 8100d3c:	461e      	mov	r6, r3
		  NowDate.Date, NowDate.Month, NowDate.Year,
 8100d3e:	4b88      	ldr	r3, [pc, #544]	; (8100f60 <main+0x330>)
 8100d40:	78db      	ldrb	r3, [r3, #3]
  sprintf(temp2, "Date: %x/%x/%x  Time: %x:%x:%x \r\n",
 8100d42:	461a      	mov	r2, r3
		  NowTime.Hours,NowTime.Minutes, NowTime.Seconds);
 8100d44:	4b85      	ldr	r3, [pc, #532]	; (8100f5c <main+0x32c>)
 8100d46:	781b      	ldrb	r3, [r3, #0]
  sprintf(temp2, "Date: %x/%x/%x  Time: %x:%x:%x \r\n",
 8100d48:	4619      	mov	r1, r3
		  NowTime.Hours,NowTime.Minutes, NowTime.Seconds);
 8100d4a:	4b84      	ldr	r3, [pc, #528]	; (8100f5c <main+0x32c>)
 8100d4c:	785b      	ldrb	r3, [r3, #1]
  sprintf(temp2, "Date: %x/%x/%x  Time: %x:%x:%x \r\n",
 8100d4e:	461c      	mov	r4, r3
		  NowTime.Hours,NowTime.Minutes, NowTime.Seconds);
 8100d50:	4b82      	ldr	r3, [pc, #520]	; (8100f5c <main+0x32c>)
 8100d52:	789b      	ldrb	r3, [r3, #2]
  sprintf(temp2, "Date: %x/%x/%x  Time: %x:%x:%x \r\n",
 8100d54:	f107 0008 	add.w	r0, r7, #8
 8100d58:	9303      	str	r3, [sp, #12]
 8100d5a:	9402      	str	r4, [sp, #8]
 8100d5c:	9101      	str	r1, [sp, #4]
 8100d5e:	9200      	str	r2, [sp, #0]
 8100d60:	4633      	mov	r3, r6
 8100d62:	462a      	mov	r2, r5
 8100d64:	4981      	ldr	r1, [pc, #516]	; (8100f6c <main+0x33c>)
 8100d66:	f008 f86b 	bl	8108e40 <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)temp2, strlen(temp2),30);
 8100d6a:	f107 0308 	add.w	r3, r7, #8
 8100d6e:	4618      	mov	r0, r3
 8100d70:	f7ff fab6 	bl	81002e0 <strlen>
 8100d74:	4603      	mov	r3, r0
 8100d76:	b29a      	uxth	r2, r3
 8100d78:	f107 0108 	add.w	r1, r7, #8
 8100d7c:	231e      	movs	r3, #30
 8100d7e:	487a      	ldr	r0, [pc, #488]	; (8100f68 <main+0x338>)
 8100d80:	f006 ff76 	bl	8107c70 <HAL_UART_Transmit>

  status_522 = Read_MFRC522(VersionReg);
 8100d84:	2037      	movs	r0, #55	; 0x37
 8100d86:	f7ff fd2d 	bl	81007e4 <Read_MFRC522>
 8100d8a:	4603      	mov	r3, r0
 8100d8c:	461a      	mov	r2, r3
 8100d8e:	4b78      	ldr	r3, [pc, #480]	; (8100f70 <main+0x340>)
 8100d90:	701a      	strb	r2, [r3, #0]
  sprintf(txtUARTBF, "Version  %xh \r\n",status_522);
 8100d92:	4b77      	ldr	r3, [pc, #476]	; (8100f70 <main+0x340>)
 8100d94:	781b      	ldrb	r3, [r3, #0]
 8100d96:	461a      	mov	r2, r3
 8100d98:	4976      	ldr	r1, [pc, #472]	; (8100f74 <main+0x344>)
 8100d9a:	4877      	ldr	r0, [pc, #476]	; (8100f78 <main+0x348>)
 8100d9c:	f008 f850 	bl	8108e40 <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)txtUARTBF, strlen(txtUARTBF),10);
 8100da0:	4875      	ldr	r0, [pc, #468]	; (8100f78 <main+0x348>)
 8100da2:	f7ff fa9d 	bl	81002e0 <strlen>
 8100da6:	4603      	mov	r3, r0
 8100da8:	b29a      	uxth	r2, r3
 8100daa:	230a      	movs	r3, #10
 8100dac:	4972      	ldr	r1, [pc, #456]	; (8100f78 <main+0x348>)
 8100dae:	486e      	ldr	r0, [pc, #440]	; (8100f68 <main+0x338>)
 8100db0:	f006 ff5e 	bl	8107c70 <HAL_UART_Transmit>
	  //SRAM4->state1 = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
	  //chk2 = SRAM4->state1;
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GetTick() - timestamp_one >= 500){
 8100db4:	f000 ff08 	bl	8101bc8 <HAL_GetTick>
 8100db8:	4602      	mov	r2, r0
 8100dba:	4b70      	ldr	r3, [pc, #448]	; (8100f7c <main+0x34c>)
 8100dbc:	681b      	ldr	r3, [r3, #0]
 8100dbe:	1ad3      	subs	r3, r2, r3
 8100dc0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8100dc4:	d32e      	bcc.n	8100e24 <main+0x1f4>
		  timestamp_one = HAL_GetTick();
 8100dc6:	f000 feff 	bl	8101bc8 <HAL_GetTick>
 8100dca:	4603      	mov	r3, r0
 8100dcc:	4a6b      	ldr	r2, [pc, #428]	; (8100f7c <main+0x34c>)
 8100dce:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8100dd0:	2102      	movs	r1, #2
 8100dd2:	486b      	ldr	r0, [pc, #428]	; (8100f80 <main+0x350>)
 8100dd4:	f002 fed5 	bl	8103b82 <HAL_GPIO_TogglePin>

		  DS3231_Read(&hi2c2);
 8100dd8:	485d      	ldr	r0, [pc, #372]	; (8100f50 <main+0x320>)
 8100dda:	f7ff fc73 	bl	81006c4 <DS3231_Read>
		  if(HAL_HSEM_Take(1, 1) == HAL_OK){
 8100dde:	2101      	movs	r1, #1
 8100de0:	2001      	movs	r0, #1
 8100de2:	f002 ff03 	bl	8103bec <HAL_HSEM_Take>
 8100de6:	4603      	mov	r3, r0
 8100de8:	2b00      	cmp	r3, #0
 8100dea:	d11b      	bne.n	8100e24 <main+0x1f4>
		  //read RTC NEED TO READ BOTH IN OTHER
		  HAL_RTC_GetTime(&hrtc, &NowTime, RTC_FORMAT_BCD);
 8100dec:	2201      	movs	r2, #1
 8100dee:	495b      	ldr	r1, [pc, #364]	; (8100f5c <main+0x32c>)
 8100df0:	4858      	ldr	r0, [pc, #352]	; (8100f54 <main+0x324>)
 8100df2:	f005 fab6 	bl	8106362 <HAL_RTC_GetTime>
		  HAL_RTC_GetDate(&hrtc, &NowDate, RTC_FORMAT_BCD);
 8100df6:	2201      	movs	r2, #1
 8100df8:	4959      	ldr	r1, [pc, #356]	; (8100f60 <main+0x330>)
 8100dfa:	4856      	ldr	r0, [pc, #344]	; (8100f54 <main+0x324>)
 8100dfc:	f005 fb94 	bl	8106528 <HAL_RTC_GetDate>
		  SRAM4->NowTimes = NowTime;
 8100e00:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8100e04:	4a55      	ldr	r2, [pc, #340]	; (8100f5c <main+0x32c>)
 8100e06:	1d1c      	adds	r4, r3, #4
 8100e08:	4615      	mov	r5, r2
 8100e0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8100e0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8100e0e:	682b      	ldr	r3, [r5, #0]
 8100e10:	6023      	str	r3, [r4, #0]
		  SRAM4->NowDates = NowDate;
 8100e12:	f04f 5260 	mov.w	r2, #939524096	; 0x38000000
 8100e16:	4b52      	ldr	r3, [pc, #328]	; (8100f60 <main+0x330>)
 8100e18:	681b      	ldr	r3, [r3, #0]
 8100e1a:	6193      	str	r3, [r2, #24]

		  HAL_HSEM_Release(1, 1);
 8100e1c:	2101      	movs	r1, #1
 8100e1e:	2001      	movs	r0, #1
 8100e20:	f002 ff08 	bl	8103c34 <HAL_HSEM_Release>
		  	  }
	  }

	  if(HAL_GetTick() - timestamp_two >= 2000){
 8100e24:	f000 fed0 	bl	8101bc8 <HAL_GetTick>
 8100e28:	4602      	mov	r2, r0
 8100e2a:	4b56      	ldr	r3, [pc, #344]	; (8100f84 <main+0x354>)
 8100e2c:	681b      	ldr	r3, [r3, #0]
 8100e2e:	1ad3      	subs	r3, r2, r3
 8100e30:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8100e34:	d37a      	bcc.n	8100f2c <main+0x2fc>
		  timestamp_two = HAL_GetTick();
 8100e36:	f000 fec7 	bl	8101bc8 <HAL_GetTick>
 8100e3a:	4603      	mov	r3, r0
 8100e3c:	4a51      	ldr	r2, [pc, #324]	; (8100f84 <main+0x354>)
 8100e3e:	6013      	str	r3, [r2, #0]
//		  HAL_Delay(500);
//		  //// test-------------------------


		  // Find cards
		  status_5221 = MFRC522_Request(PICC_REQIDL, &bufferMM[1]);//bufferMM
 8100e40:	4951      	ldr	r1, [pc, #324]	; (8100f88 <main+0x358>)
 8100e42:	2026      	movs	r0, #38	; 0x26
 8100e44:	f7ff fd6d 	bl	8100922 <MFRC522_Request>
 8100e48:	4603      	mov	r3, r0
 8100e4a:	461a      	mov	r2, r3
 8100e4c:	4b4f      	ldr	r3, [pc, #316]	; (8100f8c <main+0x35c>)
 8100e4e:	701a      	strb	r2, [r3, #0]
		  //bufferMM[3] = Read_MFRC522(FIFODataReg);
		  status_522 = MFRC522_Anticoll(&cardstr[0]);
 8100e50:	484f      	ldr	r0, [pc, #316]	; (8100f90 <main+0x360>)
 8100e52:	f7ff fe54 	bl	8100afe <MFRC522_Anticoll>
 8100e56:	4603      	mov	r3, r0
 8100e58:	461a      	mov	r2, r3
 8100e5a:	4b45      	ldr	r3, [pc, #276]	; (8100f70 <main+0x340>)
 8100e5c:	701a      	strb	r2, [r3, #0]

		  sprintf(txtUARTBF, "Find Cards %x  %x  %x  %x \r\n",status_5221 ,status_522, bufferMM[1], bufferMM[3]);
 8100e5e:	4b4b      	ldr	r3, [pc, #300]	; (8100f8c <main+0x35c>)
 8100e60:	781b      	ldrb	r3, [r3, #0]
 8100e62:	4619      	mov	r1, r3
 8100e64:	4b42      	ldr	r3, [pc, #264]	; (8100f70 <main+0x340>)
 8100e66:	781b      	ldrb	r3, [r3, #0]
 8100e68:	4618      	mov	r0, r3
 8100e6a:	4b4a      	ldr	r3, [pc, #296]	; (8100f94 <main+0x364>)
 8100e6c:	785b      	ldrb	r3, [r3, #1]
 8100e6e:	461a      	mov	r2, r3
 8100e70:	4b48      	ldr	r3, [pc, #288]	; (8100f94 <main+0x364>)
 8100e72:	78db      	ldrb	r3, [r3, #3]
 8100e74:	9301      	str	r3, [sp, #4]
 8100e76:	9200      	str	r2, [sp, #0]
 8100e78:	4603      	mov	r3, r0
 8100e7a:	460a      	mov	r2, r1
 8100e7c:	4946      	ldr	r1, [pc, #280]	; (8100f98 <main+0x368>)
 8100e7e:	483e      	ldr	r0, [pc, #248]	; (8100f78 <main+0x348>)
 8100e80:	f007 ffde 	bl	8108e40 <siprintf>
		  HAL_UART_Transmit(&huart3, (uint8_t*)txtUARTBF, strlen(txtUARTBF),10);
 8100e84:	483c      	ldr	r0, [pc, #240]	; (8100f78 <main+0x348>)
 8100e86:	f7ff fa2b 	bl	81002e0 <strlen>
 8100e8a:	4603      	mov	r3, r0
 8100e8c:	b29a      	uxth	r2, r3
 8100e8e:	230a      	movs	r3, #10
 8100e90:	4939      	ldr	r1, [pc, #228]	; (8100f78 <main+0x348>)
 8100e92:	4835      	ldr	r0, [pc, #212]	; (8100f68 <main+0x338>)
 8100e94:	f006 feec 	bl	8107c70 <HAL_UART_Transmit>

		  if(status_522 == MI_OK) {
 8100e98:	4b35      	ldr	r3, [pc, #212]	; (8100f70 <main+0x340>)
 8100e9a:	781b      	ldrb	r3, [r3, #0]
 8100e9c:	2b00      	cmp	r3, #0
 8100e9e:	d140      	bne.n	8100f22 <main+0x2f2>
			  printUART("Anticoll OK \r\n", 10);
 8100ea0:	210a      	movs	r1, #10
 8100ea2:	483e      	ldr	r0, [pc, #248]	; (8100f9c <main+0x36c>)
 8100ea4:	f000 fab4 	bl	8101410 <printUART>
			  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8100ea8:	2201      	movs	r2, #1
 8100eaa:	2101      	movs	r1, #1
 8100eac:	483c      	ldr	r0, [pc, #240]	; (8100fa0 <main+0x370>)
 8100eae:	f002 fe4f 	bl	8103b50 <HAL_GPIO_WritePin>
			  result++;
 8100eb2:	4b3c      	ldr	r3, [pc, #240]	; (8100fa4 <main+0x374>)
 8100eb4:	881b      	ldrh	r3, [r3, #0]
 8100eb6:	3301      	adds	r3, #1
 8100eb8:	b29a      	uxth	r2, r3
 8100eba:	4b3a      	ldr	r3, [pc, #232]	; (8100fa4 <main+0x374>)
 8100ebc:	801a      	strh	r2, [r3, #0]
			  sprintf(txtUARTBF,"UID: %x %x %x %x \r\n", cardstr[0], cardstr[1], cardstr[2], cardstr[3]);
 8100ebe:	4b34      	ldr	r3, [pc, #208]	; (8100f90 <main+0x360>)
 8100ec0:	781b      	ldrb	r3, [r3, #0]
 8100ec2:	4619      	mov	r1, r3
 8100ec4:	4b32      	ldr	r3, [pc, #200]	; (8100f90 <main+0x360>)
 8100ec6:	785b      	ldrb	r3, [r3, #1]
 8100ec8:	4618      	mov	r0, r3
 8100eca:	4b31      	ldr	r3, [pc, #196]	; (8100f90 <main+0x360>)
 8100ecc:	789b      	ldrb	r3, [r3, #2]
 8100ece:	461a      	mov	r2, r3
 8100ed0:	4b2f      	ldr	r3, [pc, #188]	; (8100f90 <main+0x360>)
 8100ed2:	78db      	ldrb	r3, [r3, #3]
 8100ed4:	9301      	str	r3, [sp, #4]
 8100ed6:	9200      	str	r2, [sp, #0]
 8100ed8:	4603      	mov	r3, r0
 8100eda:	460a      	mov	r2, r1
 8100edc:	4932      	ldr	r1, [pc, #200]	; (8100fa8 <main+0x378>)
 8100ede:	4826      	ldr	r0, [pc, #152]	; (8100f78 <main+0x348>)
 8100ee0:	f007 ffae 	bl	8108e40 <siprintf>
			  HAL_UART_Transmit(&huart3, (uint8_t*)txtUARTBF, strlen(txtUARTBF),10);
 8100ee4:	4824      	ldr	r0, [pc, #144]	; (8100f78 <main+0x348>)
 8100ee6:	f7ff f9fb 	bl	81002e0 <strlen>
 8100eea:	4603      	mov	r3, r0
 8100eec:	b29a      	uxth	r2, r3
 8100eee:	230a      	movs	r3, #10
 8100ef0:	4921      	ldr	r1, [pc, #132]	; (8100f78 <main+0x348>)
 8100ef2:	481d      	ldr	r0, [pc, #116]	; (8100f68 <main+0x338>)
 8100ef4:	f006 febc 	bl	8107c70 <HAL_UART_Transmit>
			  UID[0] = cardstr[0];
 8100ef8:	4b25      	ldr	r3, [pc, #148]	; (8100f90 <main+0x360>)
 8100efa:	781a      	ldrb	r2, [r3, #0]
 8100efc:	4b2b      	ldr	r3, [pc, #172]	; (8100fac <main+0x37c>)
 8100efe:	701a      	strb	r2, [r3, #0]
			  UID[1] = cardstr[1];
 8100f00:	4b23      	ldr	r3, [pc, #140]	; (8100f90 <main+0x360>)
 8100f02:	785a      	ldrb	r2, [r3, #1]
 8100f04:	4b29      	ldr	r3, [pc, #164]	; (8100fac <main+0x37c>)
 8100f06:	705a      	strb	r2, [r3, #1]
			  UID[2] = cardstr[2];
 8100f08:	4b21      	ldr	r3, [pc, #132]	; (8100f90 <main+0x360>)
 8100f0a:	789a      	ldrb	r2, [r3, #2]
 8100f0c:	4b27      	ldr	r3, [pc, #156]	; (8100fac <main+0x37c>)
 8100f0e:	709a      	strb	r2, [r3, #2]
			  UID[3] = cardstr[3];
 8100f10:	4b1f      	ldr	r3, [pc, #124]	; (8100f90 <main+0x360>)
 8100f12:	78da      	ldrb	r2, [r3, #3]
 8100f14:	4b25      	ldr	r3, [pc, #148]	; (8100fac <main+0x37c>)
 8100f16:	70da      	strb	r2, [r3, #3]
			  UID[4] = cardstr[4];
 8100f18:	4b1d      	ldr	r3, [pc, #116]	; (8100f90 <main+0x360>)
 8100f1a:	791a      	ldrb	r2, [r3, #4]
 8100f1c:	4b23      	ldr	r3, [pc, #140]	; (8100fac <main+0x37c>)
 8100f1e:	711a      	strb	r2, [r3, #4]
 8100f20:	e004      	b.n	8100f2c <main+0x2fc>
		  }else{
			  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8100f22:	2200      	movs	r2, #0
 8100f24:	2101      	movs	r1, #1
 8100f26:	481e      	ldr	r0, [pc, #120]	; (8100fa0 <main+0x370>)
 8100f28:	f002 fe12 	bl	8103b50 <HAL_GPIO_WritePin>
		  }

	  } //// timestamp_two loop

	  if(flag_one == 3){
 8100f2c:	4b20      	ldr	r3, [pc, #128]	; (8100fb0 <main+0x380>)
 8100f2e:	781b      	ldrb	r3, [r3, #0]
 8100f30:	2b03      	cmp	r3, #3
 8100f32:	f47f af3f 	bne.w	8100db4 <main+0x184>

		  MFRC522_SelfTest();
 8100f36:	f7ff fe33 	bl	8100ba0 <MFRC522_SelfTest>
		  printUART("RC522 Self test\r\n", 10);
 8100f3a:	210a      	movs	r1, #10
 8100f3c:	481d      	ldr	r0, [pc, #116]	; (8100fb4 <main+0x384>)
 8100f3e:	f000 fa67 	bl	8101410 <printUART>
		  flag_one = 0;
 8100f42:	4b1b      	ldr	r3, [pc, #108]	; (8100fb0 <main+0x380>)
 8100f44:	2200      	movs	r2, #0
 8100f46:	701a      	strb	r2, [r3, #0]
	  if(HAL_GetTick() - timestamp_one >= 500){
 8100f48:	e734      	b.n	8100db4 <main+0x184>
 8100f4a:	bf00      	nop
 8100f4c:	58026400 	.word	0x58026400
 8100f50:	100000f4 	.word	0x100000f4
 8100f54:	10000140 	.word	0x10000140
 8100f58:	1000044c 	.word	0x1000044c
 8100f5c:	100003c8 	.word	0x100003c8
 8100f60:	100003dc 	.word	0x100003dc
 8100f64:	081097c0 	.word	0x081097c0
 8100f68:	10000238 	.word	0x10000238
 8100f6c:	08109734 	.word	0x08109734
 8100f70:	10000455 	.word	0x10000455
 8100f74:	08109758 	.word	0x08109758
 8100f78:	100003e0 	.word	0x100003e0
 8100f7c:	100003c0 	.word	0x100003c0
 8100f80:	58021000 	.word	0x58021000
 8100f84:	100003c4 	.word	0x100003c4
 8100f88:	10000445 	.word	0x10000445
 8100f8c:	1000044d 	.word	0x1000044d
 8100f90:	10000458 	.word	0x10000458
 8100f94:	10000444 	.word	0x10000444
 8100f98:	08109768 	.word	0x08109768
 8100f9c:	08109788 	.word	0x08109788
 8100fa0:	58020400 	.word	0x58020400
 8100fa4:	1000046a 	.word	0x1000046a
 8100fa8:	08109798 	.word	0x08109798
 8100fac:	10000450 	.word	0x10000450
 8100fb0:	1000044e 	.word	0x1000044e
 8100fb4:	081097ac 	.word	0x081097ac

08100fb8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8100fb8:	b580      	push	{r7, lr}
 8100fba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8100fbc:	4b1b      	ldr	r3, [pc, #108]	; (810102c <MX_I2C2_Init+0x74>)
 8100fbe:	4a1c      	ldr	r2, [pc, #112]	; (8101030 <MX_I2C2_Init+0x78>)
 8100fc0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 8100fc2:	4b1a      	ldr	r3, [pc, #104]	; (810102c <MX_I2C2_Init+0x74>)
 8100fc4:	4a1b      	ldr	r2, [pc, #108]	; (8101034 <MX_I2C2_Init+0x7c>)
 8100fc6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8100fc8:	4b18      	ldr	r3, [pc, #96]	; (810102c <MX_I2C2_Init+0x74>)
 8100fca:	2200      	movs	r2, #0
 8100fcc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8100fce:	4b17      	ldr	r3, [pc, #92]	; (810102c <MX_I2C2_Init+0x74>)
 8100fd0:	2201      	movs	r2, #1
 8100fd2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8100fd4:	4b15      	ldr	r3, [pc, #84]	; (810102c <MX_I2C2_Init+0x74>)
 8100fd6:	2200      	movs	r2, #0
 8100fd8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8100fda:	4b14      	ldr	r3, [pc, #80]	; (810102c <MX_I2C2_Init+0x74>)
 8100fdc:	2200      	movs	r2, #0
 8100fde:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8100fe0:	4b12      	ldr	r3, [pc, #72]	; (810102c <MX_I2C2_Init+0x74>)
 8100fe2:	2200      	movs	r2, #0
 8100fe4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8100fe6:	4b11      	ldr	r3, [pc, #68]	; (810102c <MX_I2C2_Init+0x74>)
 8100fe8:	2200      	movs	r2, #0
 8100fea:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8100fec:	4b0f      	ldr	r3, [pc, #60]	; (810102c <MX_I2C2_Init+0x74>)
 8100fee:	2200      	movs	r2, #0
 8100ff0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8100ff2:	480e      	ldr	r0, [pc, #56]	; (810102c <MX_I2C2_Init+0x74>)
 8100ff4:	f002 fe44 	bl	8103c80 <HAL_I2C_Init>
 8100ff8:	4603      	mov	r3, r0
 8100ffa:	2b00      	cmp	r3, #0
 8100ffc:	d001      	beq.n	8101002 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8100ffe:	f000 fa53 	bl	81014a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8101002:	2100      	movs	r1, #0
 8101004:	4809      	ldr	r0, [pc, #36]	; (810102c <MX_I2C2_Init+0x74>)
 8101006:	f003 fa37 	bl	8104478 <HAL_I2CEx_ConfigAnalogFilter>
 810100a:	4603      	mov	r3, r0
 810100c:	2b00      	cmp	r3, #0
 810100e:	d001      	beq.n	8101014 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8101010:	f000 fa4a 	bl	81014a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8101014:	2100      	movs	r1, #0
 8101016:	4805      	ldr	r0, [pc, #20]	; (810102c <MX_I2C2_Init+0x74>)
 8101018:	f003 fa79 	bl	810450e <HAL_I2CEx_ConfigDigitalFilter>
 810101c:	4603      	mov	r3, r0
 810101e:	2b00      	cmp	r3, #0
 8101020:	d001      	beq.n	8101026 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8101022:	f000 fa41 	bl	81014a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8101026:	bf00      	nop
 8101028:	bd80      	pop	{r7, pc}
 810102a:	bf00      	nop
 810102c:	100000f4 	.word	0x100000f4
 8101030:	40005800 	.word	0x40005800
 8101034:	00b03fdb 	.word	0x00b03fdb

08101038 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8101038:	b580      	push	{r7, lr}
 810103a:	b086      	sub	sp, #24
 810103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 810103e:	1d3b      	adds	r3, r7, #4
 8101040:	2200      	movs	r2, #0
 8101042:	601a      	str	r2, [r3, #0]
 8101044:	605a      	str	r2, [r3, #4]
 8101046:	609a      	str	r2, [r3, #8]
 8101048:	60da      	str	r2, [r3, #12]
 810104a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 810104c:	2300      	movs	r3, #0
 810104e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8101050:	4b2a      	ldr	r3, [pc, #168]	; (81010fc <MX_RTC_Init+0xc4>)
 8101052:	4a2b      	ldr	r2, [pc, #172]	; (8101100 <MX_RTC_Init+0xc8>)
 8101054:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8101056:	4b29      	ldr	r3, [pc, #164]	; (81010fc <MX_RTC_Init+0xc4>)
 8101058:	2200      	movs	r2, #0
 810105a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 810105c:	4b27      	ldr	r3, [pc, #156]	; (81010fc <MX_RTC_Init+0xc4>)
 810105e:	227f      	movs	r2, #127	; 0x7f
 8101060:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8101062:	4b26      	ldr	r3, [pc, #152]	; (81010fc <MX_RTC_Init+0xc4>)
 8101064:	22ff      	movs	r2, #255	; 0xff
 8101066:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8101068:	4b24      	ldr	r3, [pc, #144]	; (81010fc <MX_RTC_Init+0xc4>)
 810106a:	2200      	movs	r2, #0
 810106c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 810106e:	4b23      	ldr	r3, [pc, #140]	; (81010fc <MX_RTC_Init+0xc4>)
 8101070:	2200      	movs	r2, #0
 8101072:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8101074:	4b21      	ldr	r3, [pc, #132]	; (81010fc <MX_RTC_Init+0xc4>)
 8101076:	2200      	movs	r2, #0
 8101078:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 810107a:	4b20      	ldr	r3, [pc, #128]	; (81010fc <MX_RTC_Init+0xc4>)
 810107c:	2200      	movs	r2, #0
 810107e:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8101080:	481e      	ldr	r0, [pc, #120]	; (81010fc <MX_RTC_Init+0xc4>)
 8101082:	f005 f859 	bl	8106138 <HAL_RTC_Init>
 8101086:	4603      	mov	r3, r0
 8101088:	2b00      	cmp	r3, #0
 810108a:	d001      	beq.n	8101090 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 810108c:	f000 fa0c 	bl	81014a8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8101090:	2300      	movs	r3, #0
 8101092:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x30;
 8101094:	2330      	movs	r3, #48	; 0x30
 8101096:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8101098:	2300      	movs	r3, #0
 810109a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 810109c:	2300      	movs	r3, #0
 810109e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_SET;
 81010a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 81010a4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 81010a6:	1d3b      	adds	r3, r7, #4
 81010a8:	2201      	movs	r2, #1
 81010aa:	4619      	mov	r1, r3
 81010ac:	4813      	ldr	r0, [pc, #76]	; (81010fc <MX_RTC_Init+0xc4>)
 81010ae:	f005 f8bb 	bl	8106228 <HAL_RTC_SetTime>
 81010b2:	4603      	mov	r3, r0
 81010b4:	2b00      	cmp	r3, #0
 81010b6:	d001      	beq.n	81010bc <MX_RTC_Init+0x84>
  {
    Error_Handler();
 81010b8:	f000 f9f6 	bl	81014a8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 81010bc:	2306      	movs	r3, #6
 81010be:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 81010c0:	2311      	movs	r3, #17
 81010c2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x12;
 81010c4:	2312      	movs	r3, #18
 81010c6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 81010c8:	2322      	movs	r3, #34	; 0x22
 81010ca:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 81010cc:	463b      	mov	r3, r7
 81010ce:	2201      	movs	r2, #1
 81010d0:	4619      	mov	r1, r3
 81010d2:	480a      	ldr	r0, [pc, #40]	; (81010fc <MX_RTC_Init+0xc4>)
 81010d4:	f005 f9a1 	bl	810641a <HAL_RTC_SetDate>
 81010d8:	4603      	mov	r3, r0
 81010da:	2b00      	cmp	r3, #0
 81010dc:	d001      	beq.n	81010e2 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 81010de:	f000 f9e3 	bl	81014a8 <Error_Handler>
  }

  /** Enable the reference Clock input
  */
  if (HAL_RTCEx_SetRefClock(&hrtc) != HAL_OK)
 81010e2:	4806      	ldr	r0, [pc, #24]	; (81010fc <MX_RTC_Init+0xc4>)
 81010e4:	f005 fb3e 	bl	8106764 <HAL_RTCEx_SetRefClock>
 81010e8:	4603      	mov	r3, r0
 81010ea:	2b00      	cmp	r3, #0
 81010ec:	d001      	beq.n	81010f2 <MX_RTC_Init+0xba>
  {
    Error_Handler();
 81010ee:	f000 f9db 	bl	81014a8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 81010f2:	bf00      	nop
 81010f4:	3718      	adds	r7, #24
 81010f6:	46bd      	mov	sp, r7
 81010f8:	bd80      	pop	{r7, pc}
 81010fa:	bf00      	nop
 81010fc:	10000140 	.word	0x10000140
 8101100:	58004000 	.word	0x58004000

08101104 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8101104:	b580      	push	{r7, lr}
 8101106:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8101108:	4b27      	ldr	r3, [pc, #156]	; (81011a8 <MX_SPI4_Init+0xa4>)
 810110a:	4a28      	ldr	r2, [pc, #160]	; (81011ac <MX_SPI4_Init+0xa8>)
 810110c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 810110e:	4b26      	ldr	r3, [pc, #152]	; (81011a8 <MX_SPI4_Init+0xa4>)
 8101110:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8101114:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8101116:	4b24      	ldr	r3, [pc, #144]	; (81011a8 <MX_SPI4_Init+0xa4>)
 8101118:	2200      	movs	r2, #0
 810111a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 810111c:	4b22      	ldr	r3, [pc, #136]	; (81011a8 <MX_SPI4_Init+0xa4>)
 810111e:	2207      	movs	r2, #7
 8101120:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8101122:	4b21      	ldr	r3, [pc, #132]	; (81011a8 <MX_SPI4_Init+0xa4>)
 8101124:	2200      	movs	r2, #0
 8101126:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8101128:	4b1f      	ldr	r3, [pc, #124]	; (81011a8 <MX_SPI4_Init+0xa4>)
 810112a:	2200      	movs	r2, #0
 810112c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 810112e:	4b1e      	ldr	r3, [pc, #120]	; (81011a8 <MX_SPI4_Init+0xa4>)
 8101130:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8101134:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8101136:	4b1c      	ldr	r3, [pc, #112]	; (81011a8 <MX_SPI4_Init+0xa4>)
 8101138:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 810113c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 810113e:	4b1a      	ldr	r3, [pc, #104]	; (81011a8 <MX_SPI4_Init+0xa4>)
 8101140:	2200      	movs	r2, #0
 8101142:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8101144:	4b18      	ldr	r3, [pc, #96]	; (81011a8 <MX_SPI4_Init+0xa4>)
 8101146:	2200      	movs	r2, #0
 8101148:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 810114a:	4b17      	ldr	r3, [pc, #92]	; (81011a8 <MX_SPI4_Init+0xa4>)
 810114c:	2200      	movs	r2, #0
 810114e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8101150:	4b15      	ldr	r3, [pc, #84]	; (81011a8 <MX_SPI4_Init+0xa4>)
 8101152:	2200      	movs	r2, #0
 8101154:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8101156:	4b14      	ldr	r3, [pc, #80]	; (81011a8 <MX_SPI4_Init+0xa4>)
 8101158:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 810115c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 810115e:	4b12      	ldr	r3, [pc, #72]	; (81011a8 <MX_SPI4_Init+0xa4>)
 8101160:	2200      	movs	r2, #0
 8101162:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8101164:	4b10      	ldr	r3, [pc, #64]	; (81011a8 <MX_SPI4_Init+0xa4>)
 8101166:	2200      	movs	r2, #0
 8101168:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 810116a:	4b0f      	ldr	r3, [pc, #60]	; (81011a8 <MX_SPI4_Init+0xa4>)
 810116c:	2200      	movs	r2, #0
 810116e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101170:	4b0d      	ldr	r3, [pc, #52]	; (81011a8 <MX_SPI4_Init+0xa4>)
 8101172:	2200      	movs	r2, #0
 8101174:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8101176:	4b0c      	ldr	r3, [pc, #48]	; (81011a8 <MX_SPI4_Init+0xa4>)
 8101178:	2200      	movs	r2, #0
 810117a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 810117c:	4b0a      	ldr	r3, [pc, #40]	; (81011a8 <MX_SPI4_Init+0xa4>)
 810117e:	2200      	movs	r2, #0
 8101180:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8101182:	4b09      	ldr	r3, [pc, #36]	; (81011a8 <MX_SPI4_Init+0xa4>)
 8101184:	2200      	movs	r2, #0
 8101186:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8101188:	4b07      	ldr	r3, [pc, #28]	; (81011a8 <MX_SPI4_Init+0xa4>)
 810118a:	2200      	movs	r2, #0
 810118c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 810118e:	4b06      	ldr	r3, [pc, #24]	; (81011a8 <MX_SPI4_Init+0xa4>)
 8101190:	2200      	movs	r2, #0
 8101192:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8101194:	4804      	ldr	r0, [pc, #16]	; (81011a8 <MX_SPI4_Init+0xa4>)
 8101196:	f005 fb29 	bl	81067ec <HAL_SPI_Init>
 810119a:	4603      	mov	r3, r0
 810119c:	2b00      	cmp	r3, #0
 810119e:	d001      	beq.n	81011a4 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 81011a0:	f000 f982 	bl	81014a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 81011a4:	bf00      	nop
 81011a6:	bd80      	pop	{r7, pc}
 81011a8:	10000164 	.word	0x10000164
 81011ac:	40013400 	.word	0x40013400

081011b0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 81011b0:	b580      	push	{r7, lr}
 81011b2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 81011b4:	4b10      	ldr	r3, [pc, #64]	; (81011f8 <MX_TIM17_Init+0x48>)
 81011b6:	4a11      	ldr	r2, [pc, #68]	; (81011fc <MX_TIM17_Init+0x4c>)
 81011b8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 479;
 81011ba:	4b0f      	ldr	r3, [pc, #60]	; (81011f8 <MX_TIM17_Init+0x48>)
 81011bc:	f240 12df 	movw	r2, #479	; 0x1df
 81011c0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 81011c2:	4b0d      	ldr	r3, [pc, #52]	; (81011f8 <MX_TIM17_Init+0x48>)
 81011c4:	2200      	movs	r2, #0
 81011c6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 81011c8:	4b0b      	ldr	r3, [pc, #44]	; (81011f8 <MX_TIM17_Init+0x48>)
 81011ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 81011ce:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81011d0:	4b09      	ldr	r3, [pc, #36]	; (81011f8 <MX_TIM17_Init+0x48>)
 81011d2:	2200      	movs	r2, #0
 81011d4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 81011d6:	4b08      	ldr	r3, [pc, #32]	; (81011f8 <MX_TIM17_Init+0x48>)
 81011d8:	2200      	movs	r2, #0
 81011da:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81011dc:	4b06      	ldr	r3, [pc, #24]	; (81011f8 <MX_TIM17_Init+0x48>)
 81011de:	2200      	movs	r2, #0
 81011e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 81011e2:	4805      	ldr	r0, [pc, #20]	; (81011f8 <MX_TIM17_Init+0x48>)
 81011e4:	f006 fa9e 	bl	8107724 <HAL_TIM_Base_Init>
 81011e8:	4603      	mov	r3, r0
 81011ea:	2b00      	cmp	r3, #0
 81011ec:	d001      	beq.n	81011f2 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 81011ee:	f000 f95b 	bl	81014a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 81011f2:	bf00      	nop
 81011f4:	bd80      	pop	{r7, pc}
 81011f6:	bf00      	nop
 81011f8:	100001ec 	.word	0x100001ec
 81011fc:	40014800 	.word	0x40014800

08101200 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8101200:	b580      	push	{r7, lr}
 8101202:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8101204:	4b22      	ldr	r3, [pc, #136]	; (8101290 <MX_USART3_UART_Init+0x90>)
 8101206:	4a23      	ldr	r2, [pc, #140]	; (8101294 <MX_USART3_UART_Init+0x94>)
 8101208:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 810120a:	4b21      	ldr	r3, [pc, #132]	; (8101290 <MX_USART3_UART_Init+0x90>)
 810120c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8101210:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8101212:	4b1f      	ldr	r3, [pc, #124]	; (8101290 <MX_USART3_UART_Init+0x90>)
 8101214:	2200      	movs	r2, #0
 8101216:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8101218:	4b1d      	ldr	r3, [pc, #116]	; (8101290 <MX_USART3_UART_Init+0x90>)
 810121a:	2200      	movs	r2, #0
 810121c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 810121e:	4b1c      	ldr	r3, [pc, #112]	; (8101290 <MX_USART3_UART_Init+0x90>)
 8101220:	2200      	movs	r2, #0
 8101222:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8101224:	4b1a      	ldr	r3, [pc, #104]	; (8101290 <MX_USART3_UART_Init+0x90>)
 8101226:	220c      	movs	r2, #12
 8101228:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 810122a:	4b19      	ldr	r3, [pc, #100]	; (8101290 <MX_USART3_UART_Init+0x90>)
 810122c:	2200      	movs	r2, #0
 810122e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8101230:	4b17      	ldr	r3, [pc, #92]	; (8101290 <MX_USART3_UART_Init+0x90>)
 8101232:	2200      	movs	r2, #0
 8101234:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8101236:	4b16      	ldr	r3, [pc, #88]	; (8101290 <MX_USART3_UART_Init+0x90>)
 8101238:	2200      	movs	r2, #0
 810123a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 810123c:	4b14      	ldr	r3, [pc, #80]	; (8101290 <MX_USART3_UART_Init+0x90>)
 810123e:	2200      	movs	r2, #0
 8101240:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8101242:	4b13      	ldr	r3, [pc, #76]	; (8101290 <MX_USART3_UART_Init+0x90>)
 8101244:	2200      	movs	r2, #0
 8101246:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8101248:	4811      	ldr	r0, [pc, #68]	; (8101290 <MX_USART3_UART_Init+0x90>)
 810124a:	f006 fcc1 	bl	8107bd0 <HAL_UART_Init>
 810124e:	4603      	mov	r3, r0
 8101250:	2b00      	cmp	r3, #0
 8101252:	d001      	beq.n	8101258 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8101254:	f000 f928 	bl	81014a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101258:	2100      	movs	r1, #0
 810125a:	480d      	ldr	r0, [pc, #52]	; (8101290 <MX_USART3_UART_Init+0x90>)
 810125c:	f007 fcf4 	bl	8108c48 <HAL_UARTEx_SetTxFifoThreshold>
 8101260:	4603      	mov	r3, r0
 8101262:	2b00      	cmp	r3, #0
 8101264:	d001      	beq.n	810126a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8101266:	f000 f91f 	bl	81014a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 810126a:	2100      	movs	r1, #0
 810126c:	4808      	ldr	r0, [pc, #32]	; (8101290 <MX_USART3_UART_Init+0x90>)
 810126e:	f007 fd29 	bl	8108cc4 <HAL_UARTEx_SetRxFifoThreshold>
 8101272:	4603      	mov	r3, r0
 8101274:	2b00      	cmp	r3, #0
 8101276:	d001      	beq.n	810127c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8101278:	f000 f916 	bl	81014a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 810127c:	4804      	ldr	r0, [pc, #16]	; (8101290 <MX_USART3_UART_Init+0x90>)
 810127e:	f007 fcaa 	bl	8108bd6 <HAL_UARTEx_DisableFifoMode>
 8101282:	4603      	mov	r3, r0
 8101284:	2b00      	cmp	r3, #0
 8101286:	d001      	beq.n	810128c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8101288:	f000 f90e 	bl	81014a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 810128c:	bf00      	nop
 810128e:	bd80      	pop	{r7, pc}
 8101290:	10000238 	.word	0x10000238
 8101294:	40004800 	.word	0x40004800

08101298 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8101298:	b580      	push	{r7, lr}
 810129a:	b082      	sub	sp, #8
 810129c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 810129e:	4b11      	ldr	r3, [pc, #68]	; (81012e4 <MX_DMA_Init+0x4c>)
 81012a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81012a4:	4a0f      	ldr	r2, [pc, #60]	; (81012e4 <MX_DMA_Init+0x4c>)
 81012a6:	f043 0301 	orr.w	r3, r3, #1
 81012aa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81012ae:	4b0d      	ldr	r3, [pc, #52]	; (81012e4 <MX_DMA_Init+0x4c>)
 81012b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81012b4:	f003 0301 	and.w	r3, r3, #1
 81012b8:	607b      	str	r3, [r7, #4]
 81012ba:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 81012bc:	2200      	movs	r2, #0
 81012be:	2100      	movs	r1, #0
 81012c0:	200b      	movs	r0, #11
 81012c2:	f000 fd8c 	bl	8101dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 81012c6:	200b      	movs	r0, #11
 81012c8:	f000 fda3 	bl	8101e12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 81012cc:	2200      	movs	r2, #0
 81012ce:	2100      	movs	r1, #0
 81012d0:	200c      	movs	r0, #12
 81012d2:	f000 fd84 	bl	8101dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 81012d6:	200c      	movs	r0, #12
 81012d8:	f000 fd9b 	bl	8101e12 <HAL_NVIC_EnableIRQ>

}
 81012dc:	bf00      	nop
 81012de:	3708      	adds	r7, #8
 81012e0:	46bd      	mov	sp, r7
 81012e2:	bd80      	pop	{r7, pc}
 81012e4:	58024400 	.word	0x58024400

081012e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81012e8:	b580      	push	{r7, lr}
 81012ea:	b08a      	sub	sp, #40	; 0x28
 81012ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81012ee:	f107 0314 	add.w	r3, r7, #20
 81012f2:	2200      	movs	r2, #0
 81012f4:	601a      	str	r2, [r3, #0]
 81012f6:	605a      	str	r2, [r3, #4]
 81012f8:	609a      	str	r2, [r3, #8]
 81012fa:	60da      	str	r2, [r3, #12]
 81012fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 81012fe:	4b40      	ldr	r3, [pc, #256]	; (8101400 <MX_GPIO_Init+0x118>)
 8101300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101304:	4a3e      	ldr	r2, [pc, #248]	; (8101400 <MX_GPIO_Init+0x118>)
 8101306:	f043 0310 	orr.w	r3, r3, #16
 810130a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810130e:	4b3c      	ldr	r3, [pc, #240]	; (8101400 <MX_GPIO_Init+0x118>)
 8101310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101314:	f003 0310 	and.w	r3, r3, #16
 8101318:	613b      	str	r3, [r7, #16]
 810131a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 810131c:	4b38      	ldr	r3, [pc, #224]	; (8101400 <MX_GPIO_Init+0x118>)
 810131e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101322:	4a37      	ldr	r2, [pc, #220]	; (8101400 <MX_GPIO_Init+0x118>)
 8101324:	f043 0304 	orr.w	r3, r3, #4
 8101328:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810132c:	4b34      	ldr	r3, [pc, #208]	; (8101400 <MX_GPIO_Init+0x118>)
 810132e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101332:	f003 0304 	and.w	r3, r3, #4
 8101336:	60fb      	str	r3, [r7, #12]
 8101338:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 810133a:	4b31      	ldr	r3, [pc, #196]	; (8101400 <MX_GPIO_Init+0x118>)
 810133c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101340:	4a2f      	ldr	r2, [pc, #188]	; (8101400 <MX_GPIO_Init+0x118>)
 8101342:	f043 0302 	orr.w	r3, r3, #2
 8101346:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810134a:	4b2d      	ldr	r3, [pc, #180]	; (8101400 <MX_GPIO_Init+0x118>)
 810134c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101350:	f003 0302 	and.w	r3, r3, #2
 8101354:	60bb      	str	r3, [r7, #8]
 8101356:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8101358:	4b29      	ldr	r3, [pc, #164]	; (8101400 <MX_GPIO_Init+0x118>)
 810135a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810135e:	4a28      	ldr	r2, [pc, #160]	; (8101400 <MX_GPIO_Init+0x118>)
 8101360:	f043 0308 	orr.w	r3, r3, #8
 8101364:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101368:	4b25      	ldr	r3, [pc, #148]	; (8101400 <MX_GPIO_Init+0x118>)
 810136a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810136e:	f003 0308 	and.w	r3, r3, #8
 8101372:	607b      	str	r3, [r7, #4]
 8101374:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RC522_Rst_Pin|RC522_SPI4_NSS_Pin, GPIO_PIN_SET);
 8101376:	2201      	movs	r2, #1
 8101378:	2118      	movs	r1, #24
 810137a:	4822      	ldr	r0, [pc, #136]	; (8101404 <MX_GPIO_Init+0x11c>)
 810137c:	f002 fbe8 	bl	8103b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8101380:	2200      	movs	r2, #0
 8101382:	2101      	movs	r1, #1
 8101384:	4820      	ldr	r0, [pc, #128]	; (8101408 <MX_GPIO_Init+0x120>)
 8101386:	f002 fbe3 	bl	8103b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 810138a:	2200      	movs	r2, #0
 810138c:	2102      	movs	r1, #2
 810138e:	481d      	ldr	r0, [pc, #116]	; (8101404 <MX_GPIO_Init+0x11c>)
 8101390:	f002 fbde 	bl	8103b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RC522_Rst_Pin RC522_SPI4_NSS_Pin LD2_Pin */
  GPIO_InitStruct.Pin = RC522_Rst_Pin|RC522_SPI4_NSS_Pin|LD2_Pin;
 8101394:	231a      	movs	r3, #26
 8101396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101398:	2301      	movs	r3, #1
 810139a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810139c:	2300      	movs	r3, #0
 810139e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81013a0:	2300      	movs	r3, #0
 81013a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 81013a4:	f107 0314 	add.w	r3, r7, #20
 81013a8:	4619      	mov	r1, r3
 81013aa:	4816      	ldr	r0, [pc, #88]	; (8101404 <MX_GPIO_Init+0x11c>)
 81013ac:	f002 fa20 	bl	81037f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 81013b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 81013b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 81013b6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 81013ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81013bc:	2300      	movs	r3, #0
 81013be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 81013c0:	f107 0314 	add.w	r3, r7, #20
 81013c4:	4619      	mov	r1, r3
 81013c6:	4811      	ldr	r0, [pc, #68]	; (810140c <MX_GPIO_Init+0x124>)
 81013c8:	f002 fa12 	bl	81037f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 81013cc:	2301      	movs	r3, #1
 81013ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81013d0:	2301      	movs	r3, #1
 81013d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81013d4:	2300      	movs	r3, #0
 81013d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81013d8:	2300      	movs	r3, #0
 81013da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 81013dc:	f107 0314 	add.w	r3, r7, #20
 81013e0:	4619      	mov	r1, r3
 81013e2:	4809      	ldr	r0, [pc, #36]	; (8101408 <MX_GPIO_Init+0x120>)
 81013e4:	f002 fa04 	bl	81037f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 81013e8:	2200      	movs	r2, #0
 81013ea:	2100      	movs	r1, #0
 81013ec:	2028      	movs	r0, #40	; 0x28
 81013ee:	f000 fcf6 	bl	8101dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 81013f2:	2028      	movs	r0, #40	; 0x28
 81013f4:	f000 fd0d 	bl	8101e12 <HAL_NVIC_EnableIRQ>

}
 81013f8:	bf00      	nop
 81013fa:	3728      	adds	r7, #40	; 0x28
 81013fc:	46bd      	mov	sp, r7
 81013fe:	bd80      	pop	{r7, pc}
 8101400:	58024400 	.word	0x58024400
 8101404:	58021000 	.word	0x58021000
 8101408:	58020400 	.word	0x58020400
 810140c:	58020800 	.word	0x58020800

08101410 <printUART>:

/* USER CODE BEGIN 4 */
void printUART(char* texts, uint8_t timeoutc){
 8101410:	b580      	push	{r7, lr}
 8101412:	b082      	sub	sp, #8
 8101414:	af00      	add	r7, sp, #0
 8101416:	6078      	str	r0, [r7, #4]
 8101418:	460b      	mov	r3, r1
 810141a:	70fb      	strb	r3, [r7, #3]
	sprintf(txtUARTBF, texts);
 810141c:	6879      	ldr	r1, [r7, #4]
 810141e:	4808      	ldr	r0, [pc, #32]	; (8101440 <printUART+0x30>)
 8101420:	f007 fd0e 	bl	8108e40 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)txtUARTBF, strlen(txtUARTBF),timeoutc);
 8101424:	4806      	ldr	r0, [pc, #24]	; (8101440 <printUART+0x30>)
 8101426:	f7fe ff5b 	bl	81002e0 <strlen>
 810142a:	4603      	mov	r3, r0
 810142c:	b29a      	uxth	r2, r3
 810142e:	78fb      	ldrb	r3, [r7, #3]
 8101430:	4903      	ldr	r1, [pc, #12]	; (8101440 <printUART+0x30>)
 8101432:	4804      	ldr	r0, [pc, #16]	; (8101444 <printUART+0x34>)
 8101434:	f006 fc1c 	bl	8107c70 <HAL_UART_Transmit>
}
 8101438:	bf00      	nop
 810143a:	3708      	adds	r7, #8
 810143c:	46bd      	mov	sp, r7
 810143e:	bd80      	pop	{r7, pc}
 8101440:	100003e0 	.word	0x100003e0
 8101444:	10000238 	.word	0x10000238

08101448 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8101448:	b480      	push	{r7}
 810144a:	b083      	sub	sp, #12
 810144c:	af00      	add	r7, sp, #0
 810144e:	4603      	mov	r3, r0
 8101450:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 8101452:	88fb      	ldrh	r3, [r7, #6]
 8101454:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8101458:	d102      	bne.n	8101460 <HAL_GPIO_EXTI_Callback+0x18>
		flag_one = 3;   ////MFRC522_SelfTest();
 810145a:	4b04      	ldr	r3, [pc, #16]	; (810146c <HAL_GPIO_EXTI_Callback+0x24>)
 810145c:	2203      	movs	r2, #3
 810145e:	701a      	strb	r2, [r3, #0]

		}
}
 8101460:	bf00      	nop
 8101462:	370c      	adds	r7, #12
 8101464:	46bd      	mov	sp, r7
 8101466:	f85d 7b04 	ldr.w	r7, [sp], #4
 810146a:	4770      	bx	lr
 810146c:	1000044e 	.word	0x1000044e

08101470 <HAL_TIM_PeriodElapsedCallback>:

uint64_t micros()
{return _micros + htim17.Instance->CNT;}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8101470:	b4b0      	push	{r4, r5, r7}
 8101472:	b083      	sub	sp, #12
 8101474:	af00      	add	r7, sp, #0
 8101476:	6078      	str	r0, [r7, #4]
 if(htim == &htim17)
 8101478:	687b      	ldr	r3, [r7, #4]
 810147a:	4a09      	ldr	r2, [pc, #36]	; (81014a0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 810147c:	4293      	cmp	r3, r2
 810147e:	d10a      	bne.n	8101496 <HAL_TIM_PeriodElapsedCallback+0x26>
 {_micros += 65535;}
 8101480:	4b08      	ldr	r3, [pc, #32]	; (81014a4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8101482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101486:	f64f 71ff 	movw	r1, #65535	; 0xffff
 810148a:	1854      	adds	r4, r2, r1
 810148c:	f143 0500 	adc.w	r5, r3, #0
 8101490:	4b04      	ldr	r3, [pc, #16]	; (81014a4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8101492:	e9c3 4500 	strd	r4, r5, [r3]
}
 8101496:	bf00      	nop
 8101498:	370c      	adds	r7, #12
 810149a:	46bd      	mov	sp, r7
 810149c:	bcb0      	pop	{r4, r5, r7}
 810149e:	4770      	bx	lr
 81014a0:	100001ec 	.word	0x100001ec
 81014a4:	100003b8 	.word	0x100003b8

081014a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81014a8:	b480      	push	{r7}
 81014aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81014ac:	b672      	cpsid	i
}
 81014ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81014b0:	e7fe      	b.n	81014b0 <Error_Handler+0x8>
	...

081014b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81014b4:	b480      	push	{r7}
 81014b6:	b083      	sub	sp, #12
 81014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81014ba:	4b0a      	ldr	r3, [pc, #40]	; (81014e4 <HAL_MspInit+0x30>)
 81014bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81014c0:	4a08      	ldr	r2, [pc, #32]	; (81014e4 <HAL_MspInit+0x30>)
 81014c2:	f043 0302 	orr.w	r3, r3, #2
 81014c6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81014ca:	4b06      	ldr	r3, [pc, #24]	; (81014e4 <HAL_MspInit+0x30>)
 81014cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81014d0:	f003 0302 	and.w	r3, r3, #2
 81014d4:	607b      	str	r3, [r7, #4]
 81014d6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81014d8:	bf00      	nop
 81014da:	370c      	adds	r7, #12
 81014dc:	46bd      	mov	sp, r7
 81014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014e2:	4770      	bx	lr
 81014e4:	58024400 	.word	0x58024400

081014e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 81014e8:	b580      	push	{r7, lr}
 81014ea:	b0b8      	sub	sp, #224	; 0xe0
 81014ec:	af00      	add	r7, sp, #0
 81014ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81014f0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81014f4:	2200      	movs	r2, #0
 81014f6:	601a      	str	r2, [r3, #0]
 81014f8:	605a      	str	r2, [r3, #4]
 81014fa:	609a      	str	r2, [r3, #8]
 81014fc:	60da      	str	r2, [r3, #12]
 81014fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101500:	f107 0310 	add.w	r3, r7, #16
 8101504:	22bc      	movs	r2, #188	; 0xbc
 8101506:	2100      	movs	r1, #0
 8101508:	4618      	mov	r0, r3
 810150a:	f007 fc91 	bl	8108e30 <memset>
  if(hi2c->Instance==I2C2)
 810150e:	687b      	ldr	r3, [r7, #4]
 8101510:	681b      	ldr	r3, [r3, #0]
 8101512:	4a25      	ldr	r2, [pc, #148]	; (81015a8 <HAL_I2C_MspInit+0xc0>)
 8101514:	4293      	cmp	r3, r2
 8101516:	d142      	bne.n	810159e <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8101518:	2308      	movs	r3, #8
 810151a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 810151c:	2300      	movs	r3, #0
 810151e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101522:	f107 0310 	add.w	r3, r7, #16
 8101526:	4618      	mov	r0, r3
 8101528:	f003 fa9e 	bl	8104a68 <HAL_RCCEx_PeriphCLKConfig>
 810152c:	4603      	mov	r3, r0
 810152e:	2b00      	cmp	r3, #0
 8101530:	d001      	beq.n	8101536 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8101532:	f7ff ffb9 	bl	81014a8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101536:	4b1d      	ldr	r3, [pc, #116]	; (81015ac <HAL_I2C_MspInit+0xc4>)
 8101538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810153c:	4a1b      	ldr	r2, [pc, #108]	; (81015ac <HAL_I2C_MspInit+0xc4>)
 810153e:	f043 0302 	orr.w	r3, r3, #2
 8101542:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101546:	4b19      	ldr	r3, [pc, #100]	; (81015ac <HAL_I2C_MspInit+0xc4>)
 8101548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810154c:	f003 0302 	and.w	r3, r3, #2
 8101550:	60fb      	str	r3, [r7, #12]
 8101552:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8101554:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8101558:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 810155c:	2312      	movs	r3, #18
 810155e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101562:	2300      	movs	r3, #0
 8101564:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101568:	2300      	movs	r3, #0
 810156a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 810156e:	2304      	movs	r3, #4
 8101570:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101574:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101578:	4619      	mov	r1, r3
 810157a:	480d      	ldr	r0, [pc, #52]	; (81015b0 <HAL_I2C_MspInit+0xc8>)
 810157c:	f002 f938 	bl	81037f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8101580:	4b0a      	ldr	r3, [pc, #40]	; (81015ac <HAL_I2C_MspInit+0xc4>)
 8101582:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101586:	4a09      	ldr	r2, [pc, #36]	; (81015ac <HAL_I2C_MspInit+0xc4>)
 8101588:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810158c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101590:	4b06      	ldr	r3, [pc, #24]	; (81015ac <HAL_I2C_MspInit+0xc4>)
 8101592:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810159a:	60bb      	str	r3, [r7, #8]
 810159c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 810159e:	bf00      	nop
 81015a0:	37e0      	adds	r7, #224	; 0xe0
 81015a2:	46bd      	mov	sp, r7
 81015a4:	bd80      	pop	{r7, pc}
 81015a6:	bf00      	nop
 81015a8:	40005800 	.word	0x40005800
 81015ac:	58024400 	.word	0x58024400
 81015b0:	58020400 	.word	0x58020400

081015b4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 81015b4:	b580      	push	{r7, lr}
 81015b6:	b0b8      	sub	sp, #224	; 0xe0
 81015b8:	af00      	add	r7, sp, #0
 81015ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81015bc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81015c0:	2200      	movs	r2, #0
 81015c2:	601a      	str	r2, [r3, #0]
 81015c4:	605a      	str	r2, [r3, #4]
 81015c6:	609a      	str	r2, [r3, #8]
 81015c8:	60da      	str	r2, [r3, #12]
 81015ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81015cc:	f107 0310 	add.w	r3, r7, #16
 81015d0:	22bc      	movs	r2, #188	; 0xbc
 81015d2:	2100      	movs	r1, #0
 81015d4:	4618      	mov	r0, r3
 81015d6:	f007 fc2b 	bl	8108e30 <memset>
  if(hrtc->Instance==RTC)
 81015da:	687b      	ldr	r3, [r7, #4]
 81015dc:	681b      	ldr	r3, [r3, #0]
 81015de:	4a21      	ldr	r2, [pc, #132]	; (8101664 <HAL_RTC_MspInit+0xb0>)
 81015e0:	4293      	cmp	r3, r2
 81015e2:	d13b      	bne.n	810165c <HAL_RTC_MspInit+0xa8>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 81015e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 81015e8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 81015ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 81015ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81015f2:	f107 0310 	add.w	r3, r7, #16
 81015f6:	4618      	mov	r0, r3
 81015f8:	f003 fa36 	bl	8104a68 <HAL_RCCEx_PeriphCLKConfig>
 81015fc:	4603      	mov	r3, r0
 81015fe:	2b00      	cmp	r3, #0
 8101600:	d001      	beq.n	8101606 <HAL_RTC_MspInit+0x52>
    {
      Error_Handler();
 8101602:	f7ff ff51 	bl	81014a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8101606:	4b18      	ldr	r3, [pc, #96]	; (8101668 <HAL_RTC_MspInit+0xb4>)
 8101608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810160a:	4a17      	ldr	r2, [pc, #92]	; (8101668 <HAL_RTC_MspInit+0xb4>)
 810160c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8101610:	6713      	str	r3, [r2, #112]	; 0x70

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101612:	4b15      	ldr	r3, [pc, #84]	; (8101668 <HAL_RTC_MspInit+0xb4>)
 8101614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101618:	4a13      	ldr	r2, [pc, #76]	; (8101668 <HAL_RTC_MspInit+0xb4>)
 810161a:	f043 0302 	orr.w	r3, r3, #2
 810161e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101622:	4b11      	ldr	r3, [pc, #68]	; (8101668 <HAL_RTC_MspInit+0xb4>)
 8101624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101628:	f003 0302 	and.w	r3, r3, #2
 810162c:	60fb      	str	r3, [r7, #12]
 810162e:	68fb      	ldr	r3, [r7, #12]
    /**RTC GPIO Configuration
    PB15     ------> RTC_REFIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8101630:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8101634:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101638:	2302      	movs	r3, #2
 810163a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810163e:	2300      	movs	r3, #0
 8101640:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101644:	2300      	movs	r3, #0
 8101646:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF0_RTC_50Hz;
 810164a:	2300      	movs	r3, #0
 810164c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101650:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101654:	4619      	mov	r1, r3
 8101656:	4805      	ldr	r0, [pc, #20]	; (810166c <HAL_RTC_MspInit+0xb8>)
 8101658:	f002 f8ca 	bl	81037f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 810165c:	bf00      	nop
 810165e:	37e0      	adds	r7, #224	; 0xe0
 8101660:	46bd      	mov	sp, r7
 8101662:	bd80      	pop	{r7, pc}
 8101664:	58004000 	.word	0x58004000
 8101668:	58024400 	.word	0x58024400
 810166c:	58020400 	.word	0x58020400

08101670 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8101670:	b580      	push	{r7, lr}
 8101672:	b0b8      	sub	sp, #224	; 0xe0
 8101674:	af00      	add	r7, sp, #0
 8101676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101678:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 810167c:	2200      	movs	r2, #0
 810167e:	601a      	str	r2, [r3, #0]
 8101680:	605a      	str	r2, [r3, #4]
 8101682:	609a      	str	r2, [r3, #8]
 8101684:	60da      	str	r2, [r3, #12]
 8101686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101688:	f107 0310 	add.w	r3, r7, #16
 810168c:	22bc      	movs	r2, #188	; 0xbc
 810168e:	2100      	movs	r1, #0
 8101690:	4618      	mov	r0, r3
 8101692:	f007 fbcd 	bl	8108e30 <memset>
  if(hspi->Instance==SPI4)
 8101696:	687b      	ldr	r3, [r7, #4]
 8101698:	681b      	ldr	r3, [r3, #0]
 810169a:	4a24      	ldr	r2, [pc, #144]	; (810172c <HAL_SPI_MspInit+0xbc>)
 810169c:	4293      	cmp	r3, r2
 810169e:	d141      	bne.n	8101724 <HAL_SPI_MspInit+0xb4>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 81016a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 81016a4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 81016a6:	2300      	movs	r3, #0
 81016a8:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81016aa:	f107 0310 	add.w	r3, r7, #16
 81016ae:	4618      	mov	r0, r3
 81016b0:	f003 f9da 	bl	8104a68 <HAL_RCCEx_PeriphCLKConfig>
 81016b4:	4603      	mov	r3, r0
 81016b6:	2b00      	cmp	r3, #0
 81016b8:	d001      	beq.n	81016be <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 81016ba:	f7ff fef5 	bl	81014a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 81016be:	4b1c      	ldr	r3, [pc, #112]	; (8101730 <HAL_SPI_MspInit+0xc0>)
 81016c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81016c4:	4a1a      	ldr	r2, [pc, #104]	; (8101730 <HAL_SPI_MspInit+0xc0>)
 81016c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 81016ca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 81016ce:	4b18      	ldr	r3, [pc, #96]	; (8101730 <HAL_SPI_MspInit+0xc0>)
 81016d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81016d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 81016d8:	60fb      	str	r3, [r7, #12]
 81016da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 81016dc:	4b14      	ldr	r3, [pc, #80]	; (8101730 <HAL_SPI_MspInit+0xc0>)
 81016de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81016e2:	4a13      	ldr	r2, [pc, #76]	; (8101730 <HAL_SPI_MspInit+0xc0>)
 81016e4:	f043 0310 	orr.w	r3, r3, #16
 81016e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81016ec:	4b10      	ldr	r3, [pc, #64]	; (8101730 <HAL_SPI_MspInit+0xc0>)
 81016ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81016f2:	f003 0310 	and.w	r3, r3, #16
 81016f6:	60bb      	str	r3, [r7, #8]
 81016f8:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 81016fa:	2364      	movs	r3, #100	; 0x64
 81016fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101700:	2302      	movs	r3, #2
 8101702:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101706:	2300      	movs	r3, #0
 8101708:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810170c:	2300      	movs	r3, #0
 810170e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8101712:	2305      	movs	r3, #5
 8101714:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101718:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 810171c:	4619      	mov	r1, r3
 810171e:	4805      	ldr	r0, [pc, #20]	; (8101734 <HAL_SPI_MspInit+0xc4>)
 8101720:	f002 f866 	bl	81037f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8101724:	bf00      	nop
 8101726:	37e0      	adds	r7, #224	; 0xe0
 8101728:	46bd      	mov	sp, r7
 810172a:	bd80      	pop	{r7, pc}
 810172c:	40013400 	.word	0x40013400
 8101730:	58024400 	.word	0x58024400
 8101734:	58021000 	.word	0x58021000

08101738 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8101738:	b580      	push	{r7, lr}
 810173a:	b084      	sub	sp, #16
 810173c:	af00      	add	r7, sp, #0
 810173e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8101740:	687b      	ldr	r3, [r7, #4]
 8101742:	681b      	ldr	r3, [r3, #0]
 8101744:	4a0e      	ldr	r2, [pc, #56]	; (8101780 <HAL_TIM_Base_MspInit+0x48>)
 8101746:	4293      	cmp	r3, r2
 8101748:	d116      	bne.n	8101778 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 810174a:	4b0e      	ldr	r3, [pc, #56]	; (8101784 <HAL_TIM_Base_MspInit+0x4c>)
 810174c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101750:	4a0c      	ldr	r2, [pc, #48]	; (8101784 <HAL_TIM_Base_MspInit+0x4c>)
 8101752:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8101756:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 810175a:	4b0a      	ldr	r3, [pc, #40]	; (8101784 <HAL_TIM_Base_MspInit+0x4c>)
 810175c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101760:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8101764:	60fb      	str	r3, [r7, #12]
 8101766:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8101768:	2200      	movs	r2, #0
 810176a:	2100      	movs	r1, #0
 810176c:	2076      	movs	r0, #118	; 0x76
 810176e:	f000 fb36 	bl	8101dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8101772:	2076      	movs	r0, #118	; 0x76
 8101774:	f000 fb4d 	bl	8101e12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8101778:	bf00      	nop
 810177a:	3710      	adds	r7, #16
 810177c:	46bd      	mov	sp, r7
 810177e:	bd80      	pop	{r7, pc}
 8101780:	40014800 	.word	0x40014800
 8101784:	58024400 	.word	0x58024400

08101788 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8101788:	b580      	push	{r7, lr}
 810178a:	b0b8      	sub	sp, #224	; 0xe0
 810178c:	af00      	add	r7, sp, #0
 810178e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101790:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101794:	2200      	movs	r2, #0
 8101796:	601a      	str	r2, [r3, #0]
 8101798:	605a      	str	r2, [r3, #4]
 810179a:	609a      	str	r2, [r3, #8]
 810179c:	60da      	str	r2, [r3, #12]
 810179e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81017a0:	f107 0310 	add.w	r3, r7, #16
 81017a4:	22bc      	movs	r2, #188	; 0xbc
 81017a6:	2100      	movs	r1, #0
 81017a8:	4618      	mov	r0, r3
 81017aa:	f007 fb41 	bl	8108e30 <memset>
  if(huart->Instance==USART3)
 81017ae:	687b      	ldr	r3, [r7, #4]
 81017b0:	681b      	ldr	r3, [r3, #0]
 81017b2:	4a52      	ldr	r2, [pc, #328]	; (81018fc <HAL_UART_MspInit+0x174>)
 81017b4:	4293      	cmp	r3, r2
 81017b6:	f040 809d 	bne.w	81018f4 <HAL_UART_MspInit+0x16c>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 81017ba:	2302      	movs	r3, #2
 81017bc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 81017be:	2300      	movs	r3, #0
 81017c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81017c4:	f107 0310 	add.w	r3, r7, #16
 81017c8:	4618      	mov	r0, r3
 81017ca:	f003 f94d 	bl	8104a68 <HAL_RCCEx_PeriphCLKConfig>
 81017ce:	4603      	mov	r3, r0
 81017d0:	2b00      	cmp	r3, #0
 81017d2:	d001      	beq.n	81017d8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 81017d4:	f7ff fe68 	bl	81014a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 81017d8:	4b49      	ldr	r3, [pc, #292]	; (8101900 <HAL_UART_MspInit+0x178>)
 81017da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81017de:	4a48      	ldr	r2, [pc, #288]	; (8101900 <HAL_UART_MspInit+0x178>)
 81017e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 81017e4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81017e8:	4b45      	ldr	r3, [pc, #276]	; (8101900 <HAL_UART_MspInit+0x178>)
 81017ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81017ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81017f2:	60fb      	str	r3, [r7, #12]
 81017f4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 81017f6:	4b42      	ldr	r3, [pc, #264]	; (8101900 <HAL_UART_MspInit+0x178>)
 81017f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81017fc:	4a40      	ldr	r2, [pc, #256]	; (8101900 <HAL_UART_MspInit+0x178>)
 81017fe:	f043 0308 	orr.w	r3, r3, #8
 8101802:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101806:	4b3e      	ldr	r3, [pc, #248]	; (8101900 <HAL_UART_MspInit+0x178>)
 8101808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810180c:	f003 0308 	and.w	r3, r3, #8
 8101810:	60bb      	str	r3, [r7, #8]
 8101812:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8101814:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101818:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810181c:	2302      	movs	r3, #2
 810181e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101822:	2300      	movs	r3, #0
 8101824:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101828:	2300      	movs	r3, #0
 810182a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 810182e:	2307      	movs	r3, #7
 8101830:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101834:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101838:	4619      	mov	r1, r3
 810183a:	4832      	ldr	r0, [pc, #200]	; (8101904 <HAL_UART_MspInit+0x17c>)
 810183c:	f001 ffd8 	bl	81037f0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8101840:	4b31      	ldr	r3, [pc, #196]	; (8101908 <HAL_UART_MspInit+0x180>)
 8101842:	4a32      	ldr	r2, [pc, #200]	; (810190c <HAL_UART_MspInit+0x184>)
 8101844:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8101846:	4b30      	ldr	r3, [pc, #192]	; (8101908 <HAL_UART_MspInit+0x180>)
 8101848:	222d      	movs	r2, #45	; 0x2d
 810184a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 810184c:	4b2e      	ldr	r3, [pc, #184]	; (8101908 <HAL_UART_MspInit+0x180>)
 810184e:	2200      	movs	r2, #0
 8101850:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101852:	4b2d      	ldr	r3, [pc, #180]	; (8101908 <HAL_UART_MspInit+0x180>)
 8101854:	2200      	movs	r2, #0
 8101856:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8101858:	4b2b      	ldr	r3, [pc, #172]	; (8101908 <HAL_UART_MspInit+0x180>)
 810185a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 810185e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101860:	4b29      	ldr	r3, [pc, #164]	; (8101908 <HAL_UART_MspInit+0x180>)
 8101862:	2200      	movs	r2, #0
 8101864:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101866:	4b28      	ldr	r3, [pc, #160]	; (8101908 <HAL_UART_MspInit+0x180>)
 8101868:	2200      	movs	r2, #0
 810186a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 810186c:	4b26      	ldr	r3, [pc, #152]	; (8101908 <HAL_UART_MspInit+0x180>)
 810186e:	2200      	movs	r2, #0
 8101870:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8101872:	4b25      	ldr	r3, [pc, #148]	; (8101908 <HAL_UART_MspInit+0x180>)
 8101874:	2200      	movs	r2, #0
 8101876:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101878:	4b23      	ldr	r3, [pc, #140]	; (8101908 <HAL_UART_MspInit+0x180>)
 810187a:	2200      	movs	r2, #0
 810187c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 810187e:	4822      	ldr	r0, [pc, #136]	; (8101908 <HAL_UART_MspInit+0x180>)
 8101880:	f000 faf6 	bl	8101e70 <HAL_DMA_Init>
 8101884:	4603      	mov	r3, r0
 8101886:	2b00      	cmp	r3, #0
 8101888:	d001      	beq.n	810188e <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 810188a:	f7ff fe0d 	bl	81014a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 810188e:	687b      	ldr	r3, [r7, #4]
 8101890:	4a1d      	ldr	r2, [pc, #116]	; (8101908 <HAL_UART_MspInit+0x180>)
 8101892:	67da      	str	r2, [r3, #124]	; 0x7c
 8101894:	4a1c      	ldr	r2, [pc, #112]	; (8101908 <HAL_UART_MspInit+0x180>)
 8101896:	687b      	ldr	r3, [r7, #4]
 8101898:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 810189a:	4b1d      	ldr	r3, [pc, #116]	; (8101910 <HAL_UART_MspInit+0x188>)
 810189c:	4a1d      	ldr	r2, [pc, #116]	; (8101914 <HAL_UART_MspInit+0x18c>)
 810189e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 81018a0:	4b1b      	ldr	r3, [pc, #108]	; (8101910 <HAL_UART_MspInit+0x188>)
 81018a2:	222e      	movs	r2, #46	; 0x2e
 81018a4:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 81018a6:	4b1a      	ldr	r3, [pc, #104]	; (8101910 <HAL_UART_MspInit+0x188>)
 81018a8:	2240      	movs	r2, #64	; 0x40
 81018aa:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 81018ac:	4b18      	ldr	r3, [pc, #96]	; (8101910 <HAL_UART_MspInit+0x188>)
 81018ae:	2200      	movs	r2, #0
 81018b0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 81018b2:	4b17      	ldr	r3, [pc, #92]	; (8101910 <HAL_UART_MspInit+0x188>)
 81018b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81018b8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 81018ba:	4b15      	ldr	r3, [pc, #84]	; (8101910 <HAL_UART_MspInit+0x188>)
 81018bc:	2200      	movs	r2, #0
 81018be:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 81018c0:	4b13      	ldr	r3, [pc, #76]	; (8101910 <HAL_UART_MspInit+0x188>)
 81018c2:	2200      	movs	r2, #0
 81018c4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 81018c6:	4b12      	ldr	r3, [pc, #72]	; (8101910 <HAL_UART_MspInit+0x188>)
 81018c8:	2200      	movs	r2, #0
 81018ca:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 81018cc:	4b10      	ldr	r3, [pc, #64]	; (8101910 <HAL_UART_MspInit+0x188>)
 81018ce:	2200      	movs	r2, #0
 81018d0:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 81018d2:	4b0f      	ldr	r3, [pc, #60]	; (8101910 <HAL_UART_MspInit+0x188>)
 81018d4:	2200      	movs	r2, #0
 81018d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 81018d8:	480d      	ldr	r0, [pc, #52]	; (8101910 <HAL_UART_MspInit+0x188>)
 81018da:	f000 fac9 	bl	8101e70 <HAL_DMA_Init>
 81018de:	4603      	mov	r3, r0
 81018e0:	2b00      	cmp	r3, #0
 81018e2:	d001      	beq.n	81018e8 <HAL_UART_MspInit+0x160>
    {
      Error_Handler();
 81018e4:	f7ff fde0 	bl	81014a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 81018e8:	687b      	ldr	r3, [r7, #4]
 81018ea:	4a09      	ldr	r2, [pc, #36]	; (8101910 <HAL_UART_MspInit+0x188>)
 81018ec:	679a      	str	r2, [r3, #120]	; 0x78
 81018ee:	4a08      	ldr	r2, [pc, #32]	; (8101910 <HAL_UART_MspInit+0x188>)
 81018f0:	687b      	ldr	r3, [r7, #4]
 81018f2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 81018f4:	bf00      	nop
 81018f6:	37e0      	adds	r7, #224	; 0xe0
 81018f8:	46bd      	mov	sp, r7
 81018fa:	bd80      	pop	{r7, pc}
 81018fc:	40004800 	.word	0x40004800
 8101900:	58024400 	.word	0x58024400
 8101904:	58020c00 	.word	0x58020c00
 8101908:	100002c8 	.word	0x100002c8
 810190c:	40020010 	.word	0x40020010
 8101910:	10000340 	.word	0x10000340
 8101914:	40020028 	.word	0x40020028

08101918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101918:	b480      	push	{r7}
 810191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 810191c:	e7fe      	b.n	810191c <NMI_Handler+0x4>

0810191e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810191e:	b480      	push	{r7}
 8101920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101922:	e7fe      	b.n	8101922 <HardFault_Handler+0x4>

08101924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101924:	b480      	push	{r7}
 8101926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101928:	e7fe      	b.n	8101928 <MemManage_Handler+0x4>

0810192a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810192a:	b480      	push	{r7}
 810192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810192e:	e7fe      	b.n	810192e <BusFault_Handler+0x4>

08101930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101930:	b480      	push	{r7}
 8101932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101934:	e7fe      	b.n	8101934 <UsageFault_Handler+0x4>

08101936 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8101936:	b480      	push	{r7}
 8101938:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810193a:	bf00      	nop
 810193c:	46bd      	mov	sp, r7
 810193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101942:	4770      	bx	lr

08101944 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101944:	b480      	push	{r7}
 8101946:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101948:	bf00      	nop
 810194a:	46bd      	mov	sp, r7
 810194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101950:	4770      	bx	lr

08101952 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101952:	b480      	push	{r7}
 8101954:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8101956:	bf00      	nop
 8101958:	46bd      	mov	sp, r7
 810195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810195e:	4770      	bx	lr

08101960 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101960:	b580      	push	{r7, lr}
 8101962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101964:	f000 f91c 	bl	8101ba0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8101968:	bf00      	nop
 810196a:	bd80      	pop	{r7, pc}

0810196c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 810196c:	b580      	push	{r7, lr}
 810196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8101970:	4802      	ldr	r0, [pc, #8]	; (810197c <DMA1_Stream0_IRQHandler+0x10>)
 8101972:	f000 fdd7 	bl	8102524 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8101976:	bf00      	nop
 8101978:	bd80      	pop	{r7, pc}
 810197a:	bf00      	nop
 810197c:	100002c8 	.word	0x100002c8

08101980 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8101980:	b580      	push	{r7, lr}
 8101982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8101984:	4802      	ldr	r0, [pc, #8]	; (8101990 <DMA1_Stream1_IRQHandler+0x10>)
 8101986:	f000 fdcd 	bl	8102524 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 810198a:	bf00      	nop
 810198c:	bd80      	pop	{r7, pc}
 810198e:	bf00      	nop
 8101990:	10000340 	.word	0x10000340

08101994 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8101994:	b580      	push	{r7, lr}
 8101996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8101998:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 810199c:	f002 f90b 	bl	8103bb6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 81019a0:	bf00      	nop
 81019a2:	bd80      	pop	{r7, pc}

081019a4 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 81019a4:	b580      	push	{r7, lr}
 81019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 81019a8:	4802      	ldr	r0, [pc, #8]	; (81019b4 <TIM17_IRQHandler+0x10>)
 81019aa:	f005 ff12 	bl	81077d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 81019ae:	bf00      	nop
 81019b0:	bd80      	pop	{r7, pc}
 81019b2:	bf00      	nop
 81019b4:	100001ec 	.word	0x100001ec

081019b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 81019b8:	b580      	push	{r7, lr}
 81019ba:	b086      	sub	sp, #24
 81019bc:	af00      	add	r7, sp, #0
 81019be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 81019c0:	4a14      	ldr	r2, [pc, #80]	; (8101a14 <_sbrk+0x5c>)
 81019c2:	4b15      	ldr	r3, [pc, #84]	; (8101a18 <_sbrk+0x60>)
 81019c4:	1ad3      	subs	r3, r2, r3
 81019c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 81019c8:	697b      	ldr	r3, [r7, #20]
 81019ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 81019cc:	4b13      	ldr	r3, [pc, #76]	; (8101a1c <_sbrk+0x64>)
 81019ce:	681b      	ldr	r3, [r3, #0]
 81019d0:	2b00      	cmp	r3, #0
 81019d2:	d102      	bne.n	81019da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 81019d4:	4b11      	ldr	r3, [pc, #68]	; (8101a1c <_sbrk+0x64>)
 81019d6:	4a12      	ldr	r2, [pc, #72]	; (8101a20 <_sbrk+0x68>)
 81019d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 81019da:	4b10      	ldr	r3, [pc, #64]	; (8101a1c <_sbrk+0x64>)
 81019dc:	681a      	ldr	r2, [r3, #0]
 81019de:	687b      	ldr	r3, [r7, #4]
 81019e0:	4413      	add	r3, r2
 81019e2:	693a      	ldr	r2, [r7, #16]
 81019e4:	429a      	cmp	r2, r3
 81019e6:	d207      	bcs.n	81019f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 81019e8:	f007 f9f8 	bl	8108ddc <__errno>
 81019ec:	4603      	mov	r3, r0
 81019ee:	220c      	movs	r2, #12
 81019f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 81019f2:	f04f 33ff 	mov.w	r3, #4294967295
 81019f6:	e009      	b.n	8101a0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 81019f8:	4b08      	ldr	r3, [pc, #32]	; (8101a1c <_sbrk+0x64>)
 81019fa:	681b      	ldr	r3, [r3, #0]
 81019fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 81019fe:	4b07      	ldr	r3, [pc, #28]	; (8101a1c <_sbrk+0x64>)
 8101a00:	681a      	ldr	r2, [r3, #0]
 8101a02:	687b      	ldr	r3, [r7, #4]
 8101a04:	4413      	add	r3, r2
 8101a06:	4a05      	ldr	r2, [pc, #20]	; (8101a1c <_sbrk+0x64>)
 8101a08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8101a0a:	68fb      	ldr	r3, [r7, #12]
}
 8101a0c:	4618      	mov	r0, r3
 8101a0e:	3718      	adds	r7, #24
 8101a10:	46bd      	mov	sp, r7
 8101a12:	bd80      	pop	{r7, pc}
 8101a14:	10048000 	.word	0x10048000
 8101a18:	00000400 	.word	0x00000400
 8101a1c:	1000046c 	.word	0x1000046c
 8101a20:	10000488 	.word	0x10000488

08101a24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101a24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8101a5c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8101a28:	f7fe fe34 	bl	8100694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101a2c:	480c      	ldr	r0, [pc, #48]	; (8101a60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8101a2e:	490d      	ldr	r1, [pc, #52]	; (8101a64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101a30:	4a0d      	ldr	r2, [pc, #52]	; (8101a68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101a34:	e002      	b.n	8101a3c <LoopCopyDataInit>

08101a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8101a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8101a3a:	3304      	adds	r3, #4

08101a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8101a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101a40:	d3f9      	bcc.n	8101a36 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101a42:	4a0a      	ldr	r2, [pc, #40]	; (8101a6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101a44:	4c0a      	ldr	r4, [pc, #40]	; (8101a70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8101a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101a48:	e001      	b.n	8101a4e <LoopFillZerobss>

08101a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8101a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101a4c:	3204      	adds	r2, #4

08101a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8101a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101a50:	d3fb      	bcc.n	8101a4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101a52:	f007 f9c9 	bl	8108de8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101a56:	f7ff f8eb 	bl	8100c30 <main>
  bx  lr
 8101a5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101a5c:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101a60:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101a64:	10000074 	.word	0x10000074
  ldr r2, =_sidata
 8101a68:	08109880 	.word	0x08109880
  ldr r2, =_sbss
 8101a6c:	10000078 	.word	0x10000078
  ldr r4, =_ebss
 8101a70:	10000484 	.word	0x10000484

08101a74 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101a74:	e7fe      	b.n	8101a74 <ADC3_IRQHandler>
	...

08101a78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101a78:	b580      	push	{r7, lr}
 8101a7a:	b082      	sub	sp, #8
 8101a7c:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8101a7e:	4b28      	ldr	r3, [pc, #160]	; (8101b20 <HAL_Init+0xa8>)
 8101a80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101a84:	4a26      	ldr	r2, [pc, #152]	; (8101b20 <HAL_Init+0xa8>)
 8101a86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101a8a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101a8e:	4b24      	ldr	r3, [pc, #144]	; (8101b20 <HAL_Init+0xa8>)
 8101a90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101a94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101a98:	603b      	str	r3, [r7, #0]
 8101a9a:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101a9c:	4b21      	ldr	r3, [pc, #132]	; (8101b24 <HAL_Init+0xac>)
 8101a9e:	681b      	ldr	r3, [r3, #0]
 8101aa0:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8101aa4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101aa8:	4a1e      	ldr	r2, [pc, #120]	; (8101b24 <HAL_Init+0xac>)
 8101aaa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8101aae:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101ab0:	4b1c      	ldr	r3, [pc, #112]	; (8101b24 <HAL_Init+0xac>)
 8101ab2:	681b      	ldr	r3, [r3, #0]
 8101ab4:	4a1b      	ldr	r2, [pc, #108]	; (8101b24 <HAL_Init+0xac>)
 8101ab6:	f043 0301 	orr.w	r3, r3, #1
 8101aba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101abc:	2003      	movs	r0, #3
 8101abe:	f000 f983 	bl	8101dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8101ac2:	f002 fdf9 	bl	81046b8 <HAL_RCC_GetSysClockFreq>
 8101ac6:	4602      	mov	r2, r0
 8101ac8:	4b15      	ldr	r3, [pc, #84]	; (8101b20 <HAL_Init+0xa8>)
 8101aca:	699b      	ldr	r3, [r3, #24]
 8101acc:	0a1b      	lsrs	r3, r3, #8
 8101ace:	f003 030f 	and.w	r3, r3, #15
 8101ad2:	4915      	ldr	r1, [pc, #84]	; (8101b28 <HAL_Init+0xb0>)
 8101ad4:	5ccb      	ldrb	r3, [r1, r3]
 8101ad6:	f003 031f 	and.w	r3, r3, #31
 8101ada:	fa22 f303 	lsr.w	r3, r2, r3
 8101ade:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101ae0:	4b0f      	ldr	r3, [pc, #60]	; (8101b20 <HAL_Init+0xa8>)
 8101ae2:	699b      	ldr	r3, [r3, #24]
 8101ae4:	f003 030f 	and.w	r3, r3, #15
 8101ae8:	4a0f      	ldr	r2, [pc, #60]	; (8101b28 <HAL_Init+0xb0>)
 8101aea:	5cd3      	ldrb	r3, [r2, r3]
 8101aec:	f003 031f 	and.w	r3, r3, #31
 8101af0:	687a      	ldr	r2, [r7, #4]
 8101af2:	fa22 f303 	lsr.w	r3, r2, r3
 8101af6:	4a0d      	ldr	r2, [pc, #52]	; (8101b2c <HAL_Init+0xb4>)
 8101af8:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101afa:	4b0c      	ldr	r3, [pc, #48]	; (8101b2c <HAL_Init+0xb4>)
 8101afc:	681b      	ldr	r3, [r3, #0]
 8101afe:	4a0c      	ldr	r2, [pc, #48]	; (8101b30 <HAL_Init+0xb8>)
 8101b00:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101b02:	2000      	movs	r0, #0
 8101b04:	f000 f816 	bl	8101b34 <HAL_InitTick>
 8101b08:	4603      	mov	r3, r0
 8101b0a:	2b00      	cmp	r3, #0
 8101b0c:	d001      	beq.n	8101b12 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101b0e:	2301      	movs	r3, #1
 8101b10:	e002      	b.n	8101b18 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101b12:	f7ff fccf 	bl	81014b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101b16:	2300      	movs	r3, #0
}
 8101b18:	4618      	mov	r0, r3
 8101b1a:	3708      	adds	r7, #8
 8101b1c:	46bd      	mov	sp, r7
 8101b1e:	bd80      	pop	{r7, pc}
 8101b20:	58024400 	.word	0x58024400
 8101b24:	40024400 	.word	0x40024400
 8101b28:	081097fc 	.word	0x081097fc
 8101b2c:	10000004 	.word	0x10000004
 8101b30:	10000000 	.word	0x10000000

08101b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101b34:	b580      	push	{r7, lr}
 8101b36:	b082      	sub	sp, #8
 8101b38:	af00      	add	r7, sp, #0
 8101b3a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8101b3c:	4b15      	ldr	r3, [pc, #84]	; (8101b94 <HAL_InitTick+0x60>)
 8101b3e:	781b      	ldrb	r3, [r3, #0]
 8101b40:	2b00      	cmp	r3, #0
 8101b42:	d101      	bne.n	8101b48 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101b44:	2301      	movs	r3, #1
 8101b46:	e021      	b.n	8101b8c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8101b48:	4b13      	ldr	r3, [pc, #76]	; (8101b98 <HAL_InitTick+0x64>)
 8101b4a:	681a      	ldr	r2, [r3, #0]
 8101b4c:	4b11      	ldr	r3, [pc, #68]	; (8101b94 <HAL_InitTick+0x60>)
 8101b4e:	781b      	ldrb	r3, [r3, #0]
 8101b50:	4619      	mov	r1, r3
 8101b52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101b56:	fbb3 f3f1 	udiv	r3, r3, r1
 8101b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8101b5e:	4618      	mov	r0, r3
 8101b60:	f000 f965 	bl	8101e2e <HAL_SYSTICK_Config>
 8101b64:	4603      	mov	r3, r0
 8101b66:	2b00      	cmp	r3, #0
 8101b68:	d001      	beq.n	8101b6e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8101b6a:	2301      	movs	r3, #1
 8101b6c:	e00e      	b.n	8101b8c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101b6e:	687b      	ldr	r3, [r7, #4]
 8101b70:	2b0f      	cmp	r3, #15
 8101b72:	d80a      	bhi.n	8101b8a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8101b74:	2200      	movs	r2, #0
 8101b76:	6879      	ldr	r1, [r7, #4]
 8101b78:	f04f 30ff 	mov.w	r0, #4294967295
 8101b7c:	f000 f92f 	bl	8101dde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8101b80:	4a06      	ldr	r2, [pc, #24]	; (8101b9c <HAL_InitTick+0x68>)
 8101b82:	687b      	ldr	r3, [r7, #4]
 8101b84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8101b86:	2300      	movs	r3, #0
 8101b88:	e000      	b.n	8101b8c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8101b8a:	2301      	movs	r3, #1
}
 8101b8c:	4618      	mov	r0, r3
 8101b8e:	3708      	adds	r7, #8
 8101b90:	46bd      	mov	sp, r7
 8101b92:	bd80      	pop	{r7, pc}
 8101b94:	1000000c 	.word	0x1000000c
 8101b98:	10000000 	.word	0x10000000
 8101b9c:	10000008 	.word	0x10000008

08101ba0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101ba0:	b480      	push	{r7}
 8101ba2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101ba4:	4b06      	ldr	r3, [pc, #24]	; (8101bc0 <HAL_IncTick+0x20>)
 8101ba6:	781b      	ldrb	r3, [r3, #0]
 8101ba8:	461a      	mov	r2, r3
 8101baa:	4b06      	ldr	r3, [pc, #24]	; (8101bc4 <HAL_IncTick+0x24>)
 8101bac:	681b      	ldr	r3, [r3, #0]
 8101bae:	4413      	add	r3, r2
 8101bb0:	4a04      	ldr	r2, [pc, #16]	; (8101bc4 <HAL_IncTick+0x24>)
 8101bb2:	6013      	str	r3, [r2, #0]
}
 8101bb4:	bf00      	nop
 8101bb6:	46bd      	mov	sp, r7
 8101bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bbc:	4770      	bx	lr
 8101bbe:	bf00      	nop
 8101bc0:	1000000c 	.word	0x1000000c
 8101bc4:	10000470 	.word	0x10000470

08101bc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101bc8:	b480      	push	{r7}
 8101bca:	af00      	add	r7, sp, #0
  return uwTick;
 8101bcc:	4b03      	ldr	r3, [pc, #12]	; (8101bdc <HAL_GetTick+0x14>)
 8101bce:	681b      	ldr	r3, [r3, #0]
}
 8101bd0:	4618      	mov	r0, r3
 8101bd2:	46bd      	mov	sp, r7
 8101bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bd8:	4770      	bx	lr
 8101bda:	bf00      	nop
 8101bdc:	10000470 	.word	0x10000470

08101be0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8101be0:	b580      	push	{r7, lr}
 8101be2:	b084      	sub	sp, #16
 8101be4:	af00      	add	r7, sp, #0
 8101be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8101be8:	f7ff ffee 	bl	8101bc8 <HAL_GetTick>
 8101bec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8101bee:	687b      	ldr	r3, [r7, #4]
 8101bf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8101bf2:	68fb      	ldr	r3, [r7, #12]
 8101bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101bf8:	d005      	beq.n	8101c06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8101bfa:	4b0a      	ldr	r3, [pc, #40]	; (8101c24 <HAL_Delay+0x44>)
 8101bfc:	781b      	ldrb	r3, [r3, #0]
 8101bfe:	461a      	mov	r2, r3
 8101c00:	68fb      	ldr	r3, [r7, #12]
 8101c02:	4413      	add	r3, r2
 8101c04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8101c06:	bf00      	nop
 8101c08:	f7ff ffde 	bl	8101bc8 <HAL_GetTick>
 8101c0c:	4602      	mov	r2, r0
 8101c0e:	68bb      	ldr	r3, [r7, #8]
 8101c10:	1ad3      	subs	r3, r2, r3
 8101c12:	68fa      	ldr	r2, [r7, #12]
 8101c14:	429a      	cmp	r2, r3
 8101c16:	d8f7      	bhi.n	8101c08 <HAL_Delay+0x28>
  {
  }
}
 8101c18:	bf00      	nop
 8101c1a:	bf00      	nop
 8101c1c:	3710      	adds	r7, #16
 8101c1e:	46bd      	mov	sp, r7
 8101c20:	bd80      	pop	{r7, pc}
 8101c22:	bf00      	nop
 8101c24:	1000000c 	.word	0x1000000c

08101c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101c28:	b480      	push	{r7}
 8101c2a:	b085      	sub	sp, #20
 8101c2c:	af00      	add	r7, sp, #0
 8101c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101c30:	687b      	ldr	r3, [r7, #4]
 8101c32:	f003 0307 	and.w	r3, r3, #7
 8101c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101c38:	4b0c      	ldr	r3, [pc, #48]	; (8101c6c <__NVIC_SetPriorityGrouping+0x44>)
 8101c3a:	68db      	ldr	r3, [r3, #12]
 8101c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8101c3e:	68ba      	ldr	r2, [r7, #8]
 8101c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8101c44:	4013      	ands	r3, r2
 8101c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101c48:	68fb      	ldr	r3, [r7, #12]
 8101c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101c4c:	68bb      	ldr	r3, [r7, #8]
 8101c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8101c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8101c5a:	4a04      	ldr	r2, [pc, #16]	; (8101c6c <__NVIC_SetPriorityGrouping+0x44>)
 8101c5c:	68bb      	ldr	r3, [r7, #8]
 8101c5e:	60d3      	str	r3, [r2, #12]
}
 8101c60:	bf00      	nop
 8101c62:	3714      	adds	r7, #20
 8101c64:	46bd      	mov	sp, r7
 8101c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c6a:	4770      	bx	lr
 8101c6c:	e000ed00 	.word	0xe000ed00

08101c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101c70:	b480      	push	{r7}
 8101c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101c74:	4b04      	ldr	r3, [pc, #16]	; (8101c88 <__NVIC_GetPriorityGrouping+0x18>)
 8101c76:	68db      	ldr	r3, [r3, #12]
 8101c78:	0a1b      	lsrs	r3, r3, #8
 8101c7a:	f003 0307 	and.w	r3, r3, #7
}
 8101c7e:	4618      	mov	r0, r3
 8101c80:	46bd      	mov	sp, r7
 8101c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c86:	4770      	bx	lr
 8101c88:	e000ed00 	.word	0xe000ed00

08101c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101c8c:	b480      	push	{r7}
 8101c8e:	b083      	sub	sp, #12
 8101c90:	af00      	add	r7, sp, #0
 8101c92:	4603      	mov	r3, r0
 8101c94:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101c96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101c9a:	2b00      	cmp	r3, #0
 8101c9c:	db0b      	blt.n	8101cb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8101c9e:	88fb      	ldrh	r3, [r7, #6]
 8101ca0:	f003 021f 	and.w	r2, r3, #31
 8101ca4:	4907      	ldr	r1, [pc, #28]	; (8101cc4 <__NVIC_EnableIRQ+0x38>)
 8101ca6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101caa:	095b      	lsrs	r3, r3, #5
 8101cac:	2001      	movs	r0, #1
 8101cae:	fa00 f202 	lsl.w	r2, r0, r2
 8101cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8101cb6:	bf00      	nop
 8101cb8:	370c      	adds	r7, #12
 8101cba:	46bd      	mov	sp, r7
 8101cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101cc0:	4770      	bx	lr
 8101cc2:	bf00      	nop
 8101cc4:	e000e100 	.word	0xe000e100

08101cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101cc8:	b480      	push	{r7}
 8101cca:	b083      	sub	sp, #12
 8101ccc:	af00      	add	r7, sp, #0
 8101cce:	4603      	mov	r3, r0
 8101cd0:	6039      	str	r1, [r7, #0]
 8101cd2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101cd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101cd8:	2b00      	cmp	r3, #0
 8101cda:	db0a      	blt.n	8101cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101cdc:	683b      	ldr	r3, [r7, #0]
 8101cde:	b2da      	uxtb	r2, r3
 8101ce0:	490c      	ldr	r1, [pc, #48]	; (8101d14 <__NVIC_SetPriority+0x4c>)
 8101ce2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101ce6:	0112      	lsls	r2, r2, #4
 8101ce8:	b2d2      	uxtb	r2, r2
 8101cea:	440b      	add	r3, r1
 8101cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101cf0:	e00a      	b.n	8101d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101cf2:	683b      	ldr	r3, [r7, #0]
 8101cf4:	b2da      	uxtb	r2, r3
 8101cf6:	4908      	ldr	r1, [pc, #32]	; (8101d18 <__NVIC_SetPriority+0x50>)
 8101cf8:	88fb      	ldrh	r3, [r7, #6]
 8101cfa:	f003 030f 	and.w	r3, r3, #15
 8101cfe:	3b04      	subs	r3, #4
 8101d00:	0112      	lsls	r2, r2, #4
 8101d02:	b2d2      	uxtb	r2, r2
 8101d04:	440b      	add	r3, r1
 8101d06:	761a      	strb	r2, [r3, #24]
}
 8101d08:	bf00      	nop
 8101d0a:	370c      	adds	r7, #12
 8101d0c:	46bd      	mov	sp, r7
 8101d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d12:	4770      	bx	lr
 8101d14:	e000e100 	.word	0xe000e100
 8101d18:	e000ed00 	.word	0xe000ed00

08101d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101d1c:	b480      	push	{r7}
 8101d1e:	b089      	sub	sp, #36	; 0x24
 8101d20:	af00      	add	r7, sp, #0
 8101d22:	60f8      	str	r0, [r7, #12]
 8101d24:	60b9      	str	r1, [r7, #8]
 8101d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101d28:	68fb      	ldr	r3, [r7, #12]
 8101d2a:	f003 0307 	and.w	r3, r3, #7
 8101d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101d30:	69fb      	ldr	r3, [r7, #28]
 8101d32:	f1c3 0307 	rsb	r3, r3, #7
 8101d36:	2b04      	cmp	r3, #4
 8101d38:	bf28      	it	cs
 8101d3a:	2304      	movcs	r3, #4
 8101d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101d3e:	69fb      	ldr	r3, [r7, #28]
 8101d40:	3304      	adds	r3, #4
 8101d42:	2b06      	cmp	r3, #6
 8101d44:	d902      	bls.n	8101d4c <NVIC_EncodePriority+0x30>
 8101d46:	69fb      	ldr	r3, [r7, #28]
 8101d48:	3b03      	subs	r3, #3
 8101d4a:	e000      	b.n	8101d4e <NVIC_EncodePriority+0x32>
 8101d4c:	2300      	movs	r3, #0
 8101d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101d50:	f04f 32ff 	mov.w	r2, #4294967295
 8101d54:	69bb      	ldr	r3, [r7, #24]
 8101d56:	fa02 f303 	lsl.w	r3, r2, r3
 8101d5a:	43da      	mvns	r2, r3
 8101d5c:	68bb      	ldr	r3, [r7, #8]
 8101d5e:	401a      	ands	r2, r3
 8101d60:	697b      	ldr	r3, [r7, #20]
 8101d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101d64:	f04f 31ff 	mov.w	r1, #4294967295
 8101d68:	697b      	ldr	r3, [r7, #20]
 8101d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8101d6e:	43d9      	mvns	r1, r3
 8101d70:	687b      	ldr	r3, [r7, #4]
 8101d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101d74:	4313      	orrs	r3, r2
         );
}
 8101d76:	4618      	mov	r0, r3
 8101d78:	3724      	adds	r7, #36	; 0x24
 8101d7a:	46bd      	mov	sp, r7
 8101d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d80:	4770      	bx	lr
	...

08101d84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8101d84:	b580      	push	{r7, lr}
 8101d86:	b082      	sub	sp, #8
 8101d88:	af00      	add	r7, sp, #0
 8101d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8101d8c:	687b      	ldr	r3, [r7, #4]
 8101d8e:	3b01      	subs	r3, #1
 8101d90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8101d94:	d301      	bcc.n	8101d9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8101d96:	2301      	movs	r3, #1
 8101d98:	e00f      	b.n	8101dba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8101d9a:	4a0a      	ldr	r2, [pc, #40]	; (8101dc4 <SysTick_Config+0x40>)
 8101d9c:	687b      	ldr	r3, [r7, #4]
 8101d9e:	3b01      	subs	r3, #1
 8101da0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8101da2:	210f      	movs	r1, #15
 8101da4:	f04f 30ff 	mov.w	r0, #4294967295
 8101da8:	f7ff ff8e 	bl	8101cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8101dac:	4b05      	ldr	r3, [pc, #20]	; (8101dc4 <SysTick_Config+0x40>)
 8101dae:	2200      	movs	r2, #0
 8101db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8101db2:	4b04      	ldr	r3, [pc, #16]	; (8101dc4 <SysTick_Config+0x40>)
 8101db4:	2207      	movs	r2, #7
 8101db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8101db8:	2300      	movs	r3, #0
}
 8101dba:	4618      	mov	r0, r3
 8101dbc:	3708      	adds	r7, #8
 8101dbe:	46bd      	mov	sp, r7
 8101dc0:	bd80      	pop	{r7, pc}
 8101dc2:	bf00      	nop
 8101dc4:	e000e010 	.word	0xe000e010

08101dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101dc8:	b580      	push	{r7, lr}
 8101dca:	b082      	sub	sp, #8
 8101dcc:	af00      	add	r7, sp, #0
 8101dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8101dd0:	6878      	ldr	r0, [r7, #4]
 8101dd2:	f7ff ff29 	bl	8101c28 <__NVIC_SetPriorityGrouping>
}
 8101dd6:	bf00      	nop
 8101dd8:	3708      	adds	r7, #8
 8101dda:	46bd      	mov	sp, r7
 8101ddc:	bd80      	pop	{r7, pc}

08101dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101dde:	b580      	push	{r7, lr}
 8101de0:	b086      	sub	sp, #24
 8101de2:	af00      	add	r7, sp, #0
 8101de4:	4603      	mov	r3, r0
 8101de6:	60b9      	str	r1, [r7, #8]
 8101de8:	607a      	str	r2, [r7, #4]
 8101dea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8101dec:	f7ff ff40 	bl	8101c70 <__NVIC_GetPriorityGrouping>
 8101df0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8101df2:	687a      	ldr	r2, [r7, #4]
 8101df4:	68b9      	ldr	r1, [r7, #8]
 8101df6:	6978      	ldr	r0, [r7, #20]
 8101df8:	f7ff ff90 	bl	8101d1c <NVIC_EncodePriority>
 8101dfc:	4602      	mov	r2, r0
 8101dfe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8101e02:	4611      	mov	r1, r2
 8101e04:	4618      	mov	r0, r3
 8101e06:	f7ff ff5f 	bl	8101cc8 <__NVIC_SetPriority>
}
 8101e0a:	bf00      	nop
 8101e0c:	3718      	adds	r7, #24
 8101e0e:	46bd      	mov	sp, r7
 8101e10:	bd80      	pop	{r7, pc}

08101e12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101e12:	b580      	push	{r7, lr}
 8101e14:	b082      	sub	sp, #8
 8101e16:	af00      	add	r7, sp, #0
 8101e18:	4603      	mov	r3, r0
 8101e1a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8101e1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101e20:	4618      	mov	r0, r3
 8101e22:	f7ff ff33 	bl	8101c8c <__NVIC_EnableIRQ>
}
 8101e26:	bf00      	nop
 8101e28:	3708      	adds	r7, #8
 8101e2a:	46bd      	mov	sp, r7
 8101e2c:	bd80      	pop	{r7, pc}

08101e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8101e2e:	b580      	push	{r7, lr}
 8101e30:	b082      	sub	sp, #8
 8101e32:	af00      	add	r7, sp, #0
 8101e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8101e36:	6878      	ldr	r0, [r7, #4]
 8101e38:	f7ff ffa4 	bl	8101d84 <SysTick_Config>
 8101e3c:	4603      	mov	r3, r0
}
 8101e3e:	4618      	mov	r0, r3
 8101e40:	3708      	adds	r7, #8
 8101e42:	46bd      	mov	sp, r7
 8101e44:	bd80      	pop	{r7, pc}
	...

08101e48 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101e48:	b480      	push	{r7}
 8101e4a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8101e4c:	4b07      	ldr	r3, [pc, #28]	; (8101e6c <HAL_GetCurrentCPUID+0x24>)
 8101e4e:	681b      	ldr	r3, [r3, #0]
 8101e50:	091b      	lsrs	r3, r3, #4
 8101e52:	f003 030f 	and.w	r3, r3, #15
 8101e56:	2b07      	cmp	r3, #7
 8101e58:	d101      	bne.n	8101e5e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8101e5a:	2303      	movs	r3, #3
 8101e5c:	e000      	b.n	8101e60 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8101e5e:	2301      	movs	r3, #1
  }
}
 8101e60:	4618      	mov	r0, r3
 8101e62:	46bd      	mov	sp, r7
 8101e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e68:	4770      	bx	lr
 8101e6a:	bf00      	nop
 8101e6c:	e000ed00 	.word	0xe000ed00

08101e70 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8101e70:	b580      	push	{r7, lr}
 8101e72:	b086      	sub	sp, #24
 8101e74:	af00      	add	r7, sp, #0
 8101e76:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8101e78:	f7ff fea6 	bl	8101bc8 <HAL_GetTick>
 8101e7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8101e7e:	687b      	ldr	r3, [r7, #4]
 8101e80:	2b00      	cmp	r3, #0
 8101e82:	d101      	bne.n	8101e88 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8101e84:	2301      	movs	r3, #1
 8101e86:	e314      	b.n	81024b2 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8101e88:	687b      	ldr	r3, [r7, #4]
 8101e8a:	681b      	ldr	r3, [r3, #0]
 8101e8c:	4a66      	ldr	r2, [pc, #408]	; (8102028 <HAL_DMA_Init+0x1b8>)
 8101e8e:	4293      	cmp	r3, r2
 8101e90:	d04a      	beq.n	8101f28 <HAL_DMA_Init+0xb8>
 8101e92:	687b      	ldr	r3, [r7, #4]
 8101e94:	681b      	ldr	r3, [r3, #0]
 8101e96:	4a65      	ldr	r2, [pc, #404]	; (810202c <HAL_DMA_Init+0x1bc>)
 8101e98:	4293      	cmp	r3, r2
 8101e9a:	d045      	beq.n	8101f28 <HAL_DMA_Init+0xb8>
 8101e9c:	687b      	ldr	r3, [r7, #4]
 8101e9e:	681b      	ldr	r3, [r3, #0]
 8101ea0:	4a63      	ldr	r2, [pc, #396]	; (8102030 <HAL_DMA_Init+0x1c0>)
 8101ea2:	4293      	cmp	r3, r2
 8101ea4:	d040      	beq.n	8101f28 <HAL_DMA_Init+0xb8>
 8101ea6:	687b      	ldr	r3, [r7, #4]
 8101ea8:	681b      	ldr	r3, [r3, #0]
 8101eaa:	4a62      	ldr	r2, [pc, #392]	; (8102034 <HAL_DMA_Init+0x1c4>)
 8101eac:	4293      	cmp	r3, r2
 8101eae:	d03b      	beq.n	8101f28 <HAL_DMA_Init+0xb8>
 8101eb0:	687b      	ldr	r3, [r7, #4]
 8101eb2:	681b      	ldr	r3, [r3, #0]
 8101eb4:	4a60      	ldr	r2, [pc, #384]	; (8102038 <HAL_DMA_Init+0x1c8>)
 8101eb6:	4293      	cmp	r3, r2
 8101eb8:	d036      	beq.n	8101f28 <HAL_DMA_Init+0xb8>
 8101eba:	687b      	ldr	r3, [r7, #4]
 8101ebc:	681b      	ldr	r3, [r3, #0]
 8101ebe:	4a5f      	ldr	r2, [pc, #380]	; (810203c <HAL_DMA_Init+0x1cc>)
 8101ec0:	4293      	cmp	r3, r2
 8101ec2:	d031      	beq.n	8101f28 <HAL_DMA_Init+0xb8>
 8101ec4:	687b      	ldr	r3, [r7, #4]
 8101ec6:	681b      	ldr	r3, [r3, #0]
 8101ec8:	4a5d      	ldr	r2, [pc, #372]	; (8102040 <HAL_DMA_Init+0x1d0>)
 8101eca:	4293      	cmp	r3, r2
 8101ecc:	d02c      	beq.n	8101f28 <HAL_DMA_Init+0xb8>
 8101ece:	687b      	ldr	r3, [r7, #4]
 8101ed0:	681b      	ldr	r3, [r3, #0]
 8101ed2:	4a5c      	ldr	r2, [pc, #368]	; (8102044 <HAL_DMA_Init+0x1d4>)
 8101ed4:	4293      	cmp	r3, r2
 8101ed6:	d027      	beq.n	8101f28 <HAL_DMA_Init+0xb8>
 8101ed8:	687b      	ldr	r3, [r7, #4]
 8101eda:	681b      	ldr	r3, [r3, #0]
 8101edc:	4a5a      	ldr	r2, [pc, #360]	; (8102048 <HAL_DMA_Init+0x1d8>)
 8101ede:	4293      	cmp	r3, r2
 8101ee0:	d022      	beq.n	8101f28 <HAL_DMA_Init+0xb8>
 8101ee2:	687b      	ldr	r3, [r7, #4]
 8101ee4:	681b      	ldr	r3, [r3, #0]
 8101ee6:	4a59      	ldr	r2, [pc, #356]	; (810204c <HAL_DMA_Init+0x1dc>)
 8101ee8:	4293      	cmp	r3, r2
 8101eea:	d01d      	beq.n	8101f28 <HAL_DMA_Init+0xb8>
 8101eec:	687b      	ldr	r3, [r7, #4]
 8101eee:	681b      	ldr	r3, [r3, #0]
 8101ef0:	4a57      	ldr	r2, [pc, #348]	; (8102050 <HAL_DMA_Init+0x1e0>)
 8101ef2:	4293      	cmp	r3, r2
 8101ef4:	d018      	beq.n	8101f28 <HAL_DMA_Init+0xb8>
 8101ef6:	687b      	ldr	r3, [r7, #4]
 8101ef8:	681b      	ldr	r3, [r3, #0]
 8101efa:	4a56      	ldr	r2, [pc, #344]	; (8102054 <HAL_DMA_Init+0x1e4>)
 8101efc:	4293      	cmp	r3, r2
 8101efe:	d013      	beq.n	8101f28 <HAL_DMA_Init+0xb8>
 8101f00:	687b      	ldr	r3, [r7, #4]
 8101f02:	681b      	ldr	r3, [r3, #0]
 8101f04:	4a54      	ldr	r2, [pc, #336]	; (8102058 <HAL_DMA_Init+0x1e8>)
 8101f06:	4293      	cmp	r3, r2
 8101f08:	d00e      	beq.n	8101f28 <HAL_DMA_Init+0xb8>
 8101f0a:	687b      	ldr	r3, [r7, #4]
 8101f0c:	681b      	ldr	r3, [r3, #0]
 8101f0e:	4a53      	ldr	r2, [pc, #332]	; (810205c <HAL_DMA_Init+0x1ec>)
 8101f10:	4293      	cmp	r3, r2
 8101f12:	d009      	beq.n	8101f28 <HAL_DMA_Init+0xb8>
 8101f14:	687b      	ldr	r3, [r7, #4]
 8101f16:	681b      	ldr	r3, [r3, #0]
 8101f18:	4a51      	ldr	r2, [pc, #324]	; (8102060 <HAL_DMA_Init+0x1f0>)
 8101f1a:	4293      	cmp	r3, r2
 8101f1c:	d004      	beq.n	8101f28 <HAL_DMA_Init+0xb8>
 8101f1e:	687b      	ldr	r3, [r7, #4]
 8101f20:	681b      	ldr	r3, [r3, #0]
 8101f22:	4a50      	ldr	r2, [pc, #320]	; (8102064 <HAL_DMA_Init+0x1f4>)
 8101f24:	4293      	cmp	r3, r2
 8101f26:	d101      	bne.n	8101f2c <HAL_DMA_Init+0xbc>
 8101f28:	2301      	movs	r3, #1
 8101f2a:	e000      	b.n	8101f2e <HAL_DMA_Init+0xbe>
 8101f2c:	2300      	movs	r3, #0
 8101f2e:	2b00      	cmp	r3, #0
 8101f30:	f000 813b 	beq.w	81021aa <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8101f34:	687b      	ldr	r3, [r7, #4]
 8101f36:	2202      	movs	r2, #2
 8101f38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8101f3c:	687b      	ldr	r3, [r7, #4]
 8101f3e:	2200      	movs	r2, #0
 8101f40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8101f44:	687b      	ldr	r3, [r7, #4]
 8101f46:	681b      	ldr	r3, [r3, #0]
 8101f48:	4a37      	ldr	r2, [pc, #220]	; (8102028 <HAL_DMA_Init+0x1b8>)
 8101f4a:	4293      	cmp	r3, r2
 8101f4c:	d04a      	beq.n	8101fe4 <HAL_DMA_Init+0x174>
 8101f4e:	687b      	ldr	r3, [r7, #4]
 8101f50:	681b      	ldr	r3, [r3, #0]
 8101f52:	4a36      	ldr	r2, [pc, #216]	; (810202c <HAL_DMA_Init+0x1bc>)
 8101f54:	4293      	cmp	r3, r2
 8101f56:	d045      	beq.n	8101fe4 <HAL_DMA_Init+0x174>
 8101f58:	687b      	ldr	r3, [r7, #4]
 8101f5a:	681b      	ldr	r3, [r3, #0]
 8101f5c:	4a34      	ldr	r2, [pc, #208]	; (8102030 <HAL_DMA_Init+0x1c0>)
 8101f5e:	4293      	cmp	r3, r2
 8101f60:	d040      	beq.n	8101fe4 <HAL_DMA_Init+0x174>
 8101f62:	687b      	ldr	r3, [r7, #4]
 8101f64:	681b      	ldr	r3, [r3, #0]
 8101f66:	4a33      	ldr	r2, [pc, #204]	; (8102034 <HAL_DMA_Init+0x1c4>)
 8101f68:	4293      	cmp	r3, r2
 8101f6a:	d03b      	beq.n	8101fe4 <HAL_DMA_Init+0x174>
 8101f6c:	687b      	ldr	r3, [r7, #4]
 8101f6e:	681b      	ldr	r3, [r3, #0]
 8101f70:	4a31      	ldr	r2, [pc, #196]	; (8102038 <HAL_DMA_Init+0x1c8>)
 8101f72:	4293      	cmp	r3, r2
 8101f74:	d036      	beq.n	8101fe4 <HAL_DMA_Init+0x174>
 8101f76:	687b      	ldr	r3, [r7, #4]
 8101f78:	681b      	ldr	r3, [r3, #0]
 8101f7a:	4a30      	ldr	r2, [pc, #192]	; (810203c <HAL_DMA_Init+0x1cc>)
 8101f7c:	4293      	cmp	r3, r2
 8101f7e:	d031      	beq.n	8101fe4 <HAL_DMA_Init+0x174>
 8101f80:	687b      	ldr	r3, [r7, #4]
 8101f82:	681b      	ldr	r3, [r3, #0]
 8101f84:	4a2e      	ldr	r2, [pc, #184]	; (8102040 <HAL_DMA_Init+0x1d0>)
 8101f86:	4293      	cmp	r3, r2
 8101f88:	d02c      	beq.n	8101fe4 <HAL_DMA_Init+0x174>
 8101f8a:	687b      	ldr	r3, [r7, #4]
 8101f8c:	681b      	ldr	r3, [r3, #0]
 8101f8e:	4a2d      	ldr	r2, [pc, #180]	; (8102044 <HAL_DMA_Init+0x1d4>)
 8101f90:	4293      	cmp	r3, r2
 8101f92:	d027      	beq.n	8101fe4 <HAL_DMA_Init+0x174>
 8101f94:	687b      	ldr	r3, [r7, #4]
 8101f96:	681b      	ldr	r3, [r3, #0]
 8101f98:	4a2b      	ldr	r2, [pc, #172]	; (8102048 <HAL_DMA_Init+0x1d8>)
 8101f9a:	4293      	cmp	r3, r2
 8101f9c:	d022      	beq.n	8101fe4 <HAL_DMA_Init+0x174>
 8101f9e:	687b      	ldr	r3, [r7, #4]
 8101fa0:	681b      	ldr	r3, [r3, #0]
 8101fa2:	4a2a      	ldr	r2, [pc, #168]	; (810204c <HAL_DMA_Init+0x1dc>)
 8101fa4:	4293      	cmp	r3, r2
 8101fa6:	d01d      	beq.n	8101fe4 <HAL_DMA_Init+0x174>
 8101fa8:	687b      	ldr	r3, [r7, #4]
 8101faa:	681b      	ldr	r3, [r3, #0]
 8101fac:	4a28      	ldr	r2, [pc, #160]	; (8102050 <HAL_DMA_Init+0x1e0>)
 8101fae:	4293      	cmp	r3, r2
 8101fb0:	d018      	beq.n	8101fe4 <HAL_DMA_Init+0x174>
 8101fb2:	687b      	ldr	r3, [r7, #4]
 8101fb4:	681b      	ldr	r3, [r3, #0]
 8101fb6:	4a27      	ldr	r2, [pc, #156]	; (8102054 <HAL_DMA_Init+0x1e4>)
 8101fb8:	4293      	cmp	r3, r2
 8101fba:	d013      	beq.n	8101fe4 <HAL_DMA_Init+0x174>
 8101fbc:	687b      	ldr	r3, [r7, #4]
 8101fbe:	681b      	ldr	r3, [r3, #0]
 8101fc0:	4a25      	ldr	r2, [pc, #148]	; (8102058 <HAL_DMA_Init+0x1e8>)
 8101fc2:	4293      	cmp	r3, r2
 8101fc4:	d00e      	beq.n	8101fe4 <HAL_DMA_Init+0x174>
 8101fc6:	687b      	ldr	r3, [r7, #4]
 8101fc8:	681b      	ldr	r3, [r3, #0]
 8101fca:	4a24      	ldr	r2, [pc, #144]	; (810205c <HAL_DMA_Init+0x1ec>)
 8101fcc:	4293      	cmp	r3, r2
 8101fce:	d009      	beq.n	8101fe4 <HAL_DMA_Init+0x174>
 8101fd0:	687b      	ldr	r3, [r7, #4]
 8101fd2:	681b      	ldr	r3, [r3, #0]
 8101fd4:	4a22      	ldr	r2, [pc, #136]	; (8102060 <HAL_DMA_Init+0x1f0>)
 8101fd6:	4293      	cmp	r3, r2
 8101fd8:	d004      	beq.n	8101fe4 <HAL_DMA_Init+0x174>
 8101fda:	687b      	ldr	r3, [r7, #4]
 8101fdc:	681b      	ldr	r3, [r3, #0]
 8101fde:	4a21      	ldr	r2, [pc, #132]	; (8102064 <HAL_DMA_Init+0x1f4>)
 8101fe0:	4293      	cmp	r3, r2
 8101fe2:	d108      	bne.n	8101ff6 <HAL_DMA_Init+0x186>
 8101fe4:	687b      	ldr	r3, [r7, #4]
 8101fe6:	681b      	ldr	r3, [r3, #0]
 8101fe8:	681a      	ldr	r2, [r3, #0]
 8101fea:	687b      	ldr	r3, [r7, #4]
 8101fec:	681b      	ldr	r3, [r3, #0]
 8101fee:	f022 0201 	bic.w	r2, r2, #1
 8101ff2:	601a      	str	r2, [r3, #0]
 8101ff4:	e007      	b.n	8102006 <HAL_DMA_Init+0x196>
 8101ff6:	687b      	ldr	r3, [r7, #4]
 8101ff8:	681b      	ldr	r3, [r3, #0]
 8101ffa:	681a      	ldr	r2, [r3, #0]
 8101ffc:	687b      	ldr	r3, [r7, #4]
 8101ffe:	681b      	ldr	r3, [r3, #0]
 8102000:	f022 0201 	bic.w	r2, r2, #1
 8102004:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8102006:	e02f      	b.n	8102068 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8102008:	f7ff fdde 	bl	8101bc8 <HAL_GetTick>
 810200c:	4602      	mov	r2, r0
 810200e:	693b      	ldr	r3, [r7, #16]
 8102010:	1ad3      	subs	r3, r2, r3
 8102012:	2b05      	cmp	r3, #5
 8102014:	d928      	bls.n	8102068 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8102016:	687b      	ldr	r3, [r7, #4]
 8102018:	2220      	movs	r2, #32
 810201a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 810201c:	687b      	ldr	r3, [r7, #4]
 810201e:	2203      	movs	r2, #3
 8102020:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8102024:	2301      	movs	r3, #1
 8102026:	e244      	b.n	81024b2 <HAL_DMA_Init+0x642>
 8102028:	40020010 	.word	0x40020010
 810202c:	40020028 	.word	0x40020028
 8102030:	40020040 	.word	0x40020040
 8102034:	40020058 	.word	0x40020058
 8102038:	40020070 	.word	0x40020070
 810203c:	40020088 	.word	0x40020088
 8102040:	400200a0 	.word	0x400200a0
 8102044:	400200b8 	.word	0x400200b8
 8102048:	40020410 	.word	0x40020410
 810204c:	40020428 	.word	0x40020428
 8102050:	40020440 	.word	0x40020440
 8102054:	40020458 	.word	0x40020458
 8102058:	40020470 	.word	0x40020470
 810205c:	40020488 	.word	0x40020488
 8102060:	400204a0 	.word	0x400204a0
 8102064:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8102068:	687b      	ldr	r3, [r7, #4]
 810206a:	681b      	ldr	r3, [r3, #0]
 810206c:	681b      	ldr	r3, [r3, #0]
 810206e:	f003 0301 	and.w	r3, r3, #1
 8102072:	2b00      	cmp	r3, #0
 8102074:	d1c8      	bne.n	8102008 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8102076:	687b      	ldr	r3, [r7, #4]
 8102078:	681b      	ldr	r3, [r3, #0]
 810207a:	681b      	ldr	r3, [r3, #0]
 810207c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 810207e:	697a      	ldr	r2, [r7, #20]
 8102080:	4b84      	ldr	r3, [pc, #528]	; (8102294 <HAL_DMA_Init+0x424>)
 8102082:	4013      	ands	r3, r2
 8102084:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8102086:	687b      	ldr	r3, [r7, #4]
 8102088:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 810208a:	687b      	ldr	r3, [r7, #4]
 810208c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 810208e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8102090:	687b      	ldr	r3, [r7, #4]
 8102092:	691b      	ldr	r3, [r3, #16]
 8102094:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8102096:	687b      	ldr	r3, [r7, #4]
 8102098:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 810209a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 810209c:	687b      	ldr	r3, [r7, #4]
 810209e:	699b      	ldr	r3, [r3, #24]
 81020a0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 81020a2:	687b      	ldr	r3, [r7, #4]
 81020a4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 81020a6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 81020a8:	687b      	ldr	r3, [r7, #4]
 81020aa:	6a1b      	ldr	r3, [r3, #32]
 81020ac:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 81020ae:	697a      	ldr	r2, [r7, #20]
 81020b0:	4313      	orrs	r3, r2
 81020b2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 81020b4:	687b      	ldr	r3, [r7, #4]
 81020b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81020b8:	2b04      	cmp	r3, #4
 81020ba:	d107      	bne.n	81020cc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 81020bc:	687b      	ldr	r3, [r7, #4]
 81020be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81020c0:	687b      	ldr	r3, [r7, #4]
 81020c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81020c4:	4313      	orrs	r3, r2
 81020c6:	697a      	ldr	r2, [r7, #20]
 81020c8:	4313      	orrs	r3, r2
 81020ca:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 81020cc:	4b72      	ldr	r3, [pc, #456]	; (8102298 <HAL_DMA_Init+0x428>)
 81020ce:	681b      	ldr	r3, [r3, #0]
 81020d0:	0c1b      	lsrs	r3, r3, #16
 81020d2:	041b      	lsls	r3, r3, #16
 81020d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81020d8:	d328      	bcc.n	810212c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 81020da:	687b      	ldr	r3, [r7, #4]
 81020dc:	685b      	ldr	r3, [r3, #4]
 81020de:	2b28      	cmp	r3, #40	; 0x28
 81020e0:	d903      	bls.n	81020ea <HAL_DMA_Init+0x27a>
 81020e2:	687b      	ldr	r3, [r7, #4]
 81020e4:	685b      	ldr	r3, [r3, #4]
 81020e6:	2b2e      	cmp	r3, #46	; 0x2e
 81020e8:	d917      	bls.n	810211a <HAL_DMA_Init+0x2aa>
 81020ea:	687b      	ldr	r3, [r7, #4]
 81020ec:	685b      	ldr	r3, [r3, #4]
 81020ee:	2b3e      	cmp	r3, #62	; 0x3e
 81020f0:	d903      	bls.n	81020fa <HAL_DMA_Init+0x28a>
 81020f2:	687b      	ldr	r3, [r7, #4]
 81020f4:	685b      	ldr	r3, [r3, #4]
 81020f6:	2b42      	cmp	r3, #66	; 0x42
 81020f8:	d90f      	bls.n	810211a <HAL_DMA_Init+0x2aa>
 81020fa:	687b      	ldr	r3, [r7, #4]
 81020fc:	685b      	ldr	r3, [r3, #4]
 81020fe:	2b46      	cmp	r3, #70	; 0x46
 8102100:	d903      	bls.n	810210a <HAL_DMA_Init+0x29a>
 8102102:	687b      	ldr	r3, [r7, #4]
 8102104:	685b      	ldr	r3, [r3, #4]
 8102106:	2b48      	cmp	r3, #72	; 0x48
 8102108:	d907      	bls.n	810211a <HAL_DMA_Init+0x2aa>
 810210a:	687b      	ldr	r3, [r7, #4]
 810210c:	685b      	ldr	r3, [r3, #4]
 810210e:	2b4e      	cmp	r3, #78	; 0x4e
 8102110:	d905      	bls.n	810211e <HAL_DMA_Init+0x2ae>
 8102112:	687b      	ldr	r3, [r7, #4]
 8102114:	685b      	ldr	r3, [r3, #4]
 8102116:	2b52      	cmp	r3, #82	; 0x52
 8102118:	d801      	bhi.n	810211e <HAL_DMA_Init+0x2ae>
 810211a:	2301      	movs	r3, #1
 810211c:	e000      	b.n	8102120 <HAL_DMA_Init+0x2b0>
 810211e:	2300      	movs	r3, #0
 8102120:	2b00      	cmp	r3, #0
 8102122:	d003      	beq.n	810212c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8102124:	697b      	ldr	r3, [r7, #20]
 8102126:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810212a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 810212c:	687b      	ldr	r3, [r7, #4]
 810212e:	681b      	ldr	r3, [r3, #0]
 8102130:	697a      	ldr	r2, [r7, #20]
 8102132:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8102134:	687b      	ldr	r3, [r7, #4]
 8102136:	681b      	ldr	r3, [r3, #0]
 8102138:	695b      	ldr	r3, [r3, #20]
 810213a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 810213c:	697b      	ldr	r3, [r7, #20]
 810213e:	f023 0307 	bic.w	r3, r3, #7
 8102142:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8102144:	687b      	ldr	r3, [r7, #4]
 8102146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102148:	697a      	ldr	r2, [r7, #20]
 810214a:	4313      	orrs	r3, r2
 810214c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 810214e:	687b      	ldr	r3, [r7, #4]
 8102150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102152:	2b04      	cmp	r3, #4
 8102154:	d117      	bne.n	8102186 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8102156:	687b      	ldr	r3, [r7, #4]
 8102158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810215a:	697a      	ldr	r2, [r7, #20]
 810215c:	4313      	orrs	r3, r2
 810215e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8102160:	687b      	ldr	r3, [r7, #4]
 8102162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102164:	2b00      	cmp	r3, #0
 8102166:	d00e      	beq.n	8102186 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8102168:	6878      	ldr	r0, [r7, #4]
 810216a:	f001 f9b7 	bl	81034dc <DMA_CheckFifoParam>
 810216e:	4603      	mov	r3, r0
 8102170:	2b00      	cmp	r3, #0
 8102172:	d008      	beq.n	8102186 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8102174:	687b      	ldr	r3, [r7, #4]
 8102176:	2240      	movs	r2, #64	; 0x40
 8102178:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 810217a:	687b      	ldr	r3, [r7, #4]
 810217c:	2201      	movs	r2, #1
 810217e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8102182:	2301      	movs	r3, #1
 8102184:	e195      	b.n	81024b2 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8102186:	687b      	ldr	r3, [r7, #4]
 8102188:	681b      	ldr	r3, [r3, #0]
 810218a:	697a      	ldr	r2, [r7, #20]
 810218c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 810218e:	6878      	ldr	r0, [r7, #4]
 8102190:	f001 f8f2 	bl	8103378 <DMA_CalcBaseAndBitshift>
 8102194:	4603      	mov	r3, r0
 8102196:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8102198:	687b      	ldr	r3, [r7, #4]
 810219a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810219c:	f003 031f 	and.w	r3, r3, #31
 81021a0:	223f      	movs	r2, #63	; 0x3f
 81021a2:	409a      	lsls	r2, r3
 81021a4:	68bb      	ldr	r3, [r7, #8]
 81021a6:	609a      	str	r2, [r3, #8]
 81021a8:	e0cb      	b.n	8102342 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 81021aa:	687b      	ldr	r3, [r7, #4]
 81021ac:	681b      	ldr	r3, [r3, #0]
 81021ae:	4a3b      	ldr	r2, [pc, #236]	; (810229c <HAL_DMA_Init+0x42c>)
 81021b0:	4293      	cmp	r3, r2
 81021b2:	d022      	beq.n	81021fa <HAL_DMA_Init+0x38a>
 81021b4:	687b      	ldr	r3, [r7, #4]
 81021b6:	681b      	ldr	r3, [r3, #0]
 81021b8:	4a39      	ldr	r2, [pc, #228]	; (81022a0 <HAL_DMA_Init+0x430>)
 81021ba:	4293      	cmp	r3, r2
 81021bc:	d01d      	beq.n	81021fa <HAL_DMA_Init+0x38a>
 81021be:	687b      	ldr	r3, [r7, #4]
 81021c0:	681b      	ldr	r3, [r3, #0]
 81021c2:	4a38      	ldr	r2, [pc, #224]	; (81022a4 <HAL_DMA_Init+0x434>)
 81021c4:	4293      	cmp	r3, r2
 81021c6:	d018      	beq.n	81021fa <HAL_DMA_Init+0x38a>
 81021c8:	687b      	ldr	r3, [r7, #4]
 81021ca:	681b      	ldr	r3, [r3, #0]
 81021cc:	4a36      	ldr	r2, [pc, #216]	; (81022a8 <HAL_DMA_Init+0x438>)
 81021ce:	4293      	cmp	r3, r2
 81021d0:	d013      	beq.n	81021fa <HAL_DMA_Init+0x38a>
 81021d2:	687b      	ldr	r3, [r7, #4]
 81021d4:	681b      	ldr	r3, [r3, #0]
 81021d6:	4a35      	ldr	r2, [pc, #212]	; (81022ac <HAL_DMA_Init+0x43c>)
 81021d8:	4293      	cmp	r3, r2
 81021da:	d00e      	beq.n	81021fa <HAL_DMA_Init+0x38a>
 81021dc:	687b      	ldr	r3, [r7, #4]
 81021de:	681b      	ldr	r3, [r3, #0]
 81021e0:	4a33      	ldr	r2, [pc, #204]	; (81022b0 <HAL_DMA_Init+0x440>)
 81021e2:	4293      	cmp	r3, r2
 81021e4:	d009      	beq.n	81021fa <HAL_DMA_Init+0x38a>
 81021e6:	687b      	ldr	r3, [r7, #4]
 81021e8:	681b      	ldr	r3, [r3, #0]
 81021ea:	4a32      	ldr	r2, [pc, #200]	; (81022b4 <HAL_DMA_Init+0x444>)
 81021ec:	4293      	cmp	r3, r2
 81021ee:	d004      	beq.n	81021fa <HAL_DMA_Init+0x38a>
 81021f0:	687b      	ldr	r3, [r7, #4]
 81021f2:	681b      	ldr	r3, [r3, #0]
 81021f4:	4a30      	ldr	r2, [pc, #192]	; (81022b8 <HAL_DMA_Init+0x448>)
 81021f6:	4293      	cmp	r3, r2
 81021f8:	d101      	bne.n	81021fe <HAL_DMA_Init+0x38e>
 81021fa:	2301      	movs	r3, #1
 81021fc:	e000      	b.n	8102200 <HAL_DMA_Init+0x390>
 81021fe:	2300      	movs	r3, #0
 8102200:	2b00      	cmp	r3, #0
 8102202:	f000 8095 	beq.w	8102330 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8102206:	687b      	ldr	r3, [r7, #4]
 8102208:	681b      	ldr	r3, [r3, #0]
 810220a:	4a24      	ldr	r2, [pc, #144]	; (810229c <HAL_DMA_Init+0x42c>)
 810220c:	4293      	cmp	r3, r2
 810220e:	d021      	beq.n	8102254 <HAL_DMA_Init+0x3e4>
 8102210:	687b      	ldr	r3, [r7, #4]
 8102212:	681b      	ldr	r3, [r3, #0]
 8102214:	4a22      	ldr	r2, [pc, #136]	; (81022a0 <HAL_DMA_Init+0x430>)
 8102216:	4293      	cmp	r3, r2
 8102218:	d01c      	beq.n	8102254 <HAL_DMA_Init+0x3e4>
 810221a:	687b      	ldr	r3, [r7, #4]
 810221c:	681b      	ldr	r3, [r3, #0]
 810221e:	4a21      	ldr	r2, [pc, #132]	; (81022a4 <HAL_DMA_Init+0x434>)
 8102220:	4293      	cmp	r3, r2
 8102222:	d017      	beq.n	8102254 <HAL_DMA_Init+0x3e4>
 8102224:	687b      	ldr	r3, [r7, #4]
 8102226:	681b      	ldr	r3, [r3, #0]
 8102228:	4a1f      	ldr	r2, [pc, #124]	; (81022a8 <HAL_DMA_Init+0x438>)
 810222a:	4293      	cmp	r3, r2
 810222c:	d012      	beq.n	8102254 <HAL_DMA_Init+0x3e4>
 810222e:	687b      	ldr	r3, [r7, #4]
 8102230:	681b      	ldr	r3, [r3, #0]
 8102232:	4a1e      	ldr	r2, [pc, #120]	; (81022ac <HAL_DMA_Init+0x43c>)
 8102234:	4293      	cmp	r3, r2
 8102236:	d00d      	beq.n	8102254 <HAL_DMA_Init+0x3e4>
 8102238:	687b      	ldr	r3, [r7, #4]
 810223a:	681b      	ldr	r3, [r3, #0]
 810223c:	4a1c      	ldr	r2, [pc, #112]	; (81022b0 <HAL_DMA_Init+0x440>)
 810223e:	4293      	cmp	r3, r2
 8102240:	d008      	beq.n	8102254 <HAL_DMA_Init+0x3e4>
 8102242:	687b      	ldr	r3, [r7, #4]
 8102244:	681b      	ldr	r3, [r3, #0]
 8102246:	4a1b      	ldr	r2, [pc, #108]	; (81022b4 <HAL_DMA_Init+0x444>)
 8102248:	4293      	cmp	r3, r2
 810224a:	d003      	beq.n	8102254 <HAL_DMA_Init+0x3e4>
 810224c:	687b      	ldr	r3, [r7, #4]
 810224e:	681b      	ldr	r3, [r3, #0]
 8102250:	4a19      	ldr	r2, [pc, #100]	; (81022b8 <HAL_DMA_Init+0x448>)
 8102252:	4293      	cmp	r3, r2
 8102254:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8102256:	687b      	ldr	r3, [r7, #4]
 8102258:	2202      	movs	r2, #2
 810225a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 810225e:	687b      	ldr	r3, [r7, #4]
 8102260:	2200      	movs	r2, #0
 8102262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8102266:	687b      	ldr	r3, [r7, #4]
 8102268:	681b      	ldr	r3, [r3, #0]
 810226a:	681b      	ldr	r3, [r3, #0]
 810226c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 810226e:	697b      	ldr	r3, [r7, #20]
 8102270:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8102274:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8102278:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 810227a:	687b      	ldr	r3, [r7, #4]
 810227c:	689b      	ldr	r3, [r3, #8]
 810227e:	2b40      	cmp	r3, #64	; 0x40
 8102280:	d01c      	beq.n	81022bc <HAL_DMA_Init+0x44c>
 8102282:	687b      	ldr	r3, [r7, #4]
 8102284:	689b      	ldr	r3, [r3, #8]
 8102286:	2b80      	cmp	r3, #128	; 0x80
 8102288:	d102      	bne.n	8102290 <HAL_DMA_Init+0x420>
 810228a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 810228e:	e016      	b.n	81022be <HAL_DMA_Init+0x44e>
 8102290:	2300      	movs	r3, #0
 8102292:	e014      	b.n	81022be <HAL_DMA_Init+0x44e>
 8102294:	fe10803f 	.word	0xfe10803f
 8102298:	5c001000 	.word	0x5c001000
 810229c:	58025408 	.word	0x58025408
 81022a0:	5802541c 	.word	0x5802541c
 81022a4:	58025430 	.word	0x58025430
 81022a8:	58025444 	.word	0x58025444
 81022ac:	58025458 	.word	0x58025458
 81022b0:	5802546c 	.word	0x5802546c
 81022b4:	58025480 	.word	0x58025480
 81022b8:	58025494 	.word	0x58025494
 81022bc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 81022be:	687a      	ldr	r2, [r7, #4]
 81022c0:	68d2      	ldr	r2, [r2, #12]
 81022c2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81022c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 81022c6:	687b      	ldr	r3, [r7, #4]
 81022c8:	691b      	ldr	r3, [r3, #16]
 81022ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 81022cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 81022ce:	687b      	ldr	r3, [r7, #4]
 81022d0:	695b      	ldr	r3, [r3, #20]
 81022d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 81022d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 81022d6:	687b      	ldr	r3, [r7, #4]
 81022d8:	699b      	ldr	r3, [r3, #24]
 81022da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 81022dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 81022de:	687b      	ldr	r3, [r7, #4]
 81022e0:	69db      	ldr	r3, [r3, #28]
 81022e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 81022e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 81022e6:	687b      	ldr	r3, [r7, #4]
 81022e8:	6a1b      	ldr	r3, [r3, #32]
 81022ea:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 81022ec:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81022ee:	697a      	ldr	r2, [r7, #20]
 81022f0:	4313      	orrs	r3, r2
 81022f2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 81022f4:	687b      	ldr	r3, [r7, #4]
 81022f6:	681b      	ldr	r3, [r3, #0]
 81022f8:	697a      	ldr	r2, [r7, #20]
 81022fa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 81022fc:	687b      	ldr	r3, [r7, #4]
 81022fe:	681b      	ldr	r3, [r3, #0]
 8102300:	461a      	mov	r2, r3
 8102302:	4b6e      	ldr	r3, [pc, #440]	; (81024bc <HAL_DMA_Init+0x64c>)
 8102304:	4413      	add	r3, r2
 8102306:	4a6e      	ldr	r2, [pc, #440]	; (81024c0 <HAL_DMA_Init+0x650>)
 8102308:	fba2 2303 	umull	r2, r3, r2, r3
 810230c:	091b      	lsrs	r3, r3, #4
 810230e:	009a      	lsls	r2, r3, #2
 8102310:	687b      	ldr	r3, [r7, #4]
 8102312:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8102314:	6878      	ldr	r0, [r7, #4]
 8102316:	f001 f82f 	bl	8103378 <DMA_CalcBaseAndBitshift>
 810231a:	4603      	mov	r3, r0
 810231c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 810231e:	687b      	ldr	r3, [r7, #4]
 8102320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102322:	f003 031f 	and.w	r3, r3, #31
 8102326:	2201      	movs	r2, #1
 8102328:	409a      	lsls	r2, r3
 810232a:	68fb      	ldr	r3, [r7, #12]
 810232c:	605a      	str	r2, [r3, #4]
 810232e:	e008      	b.n	8102342 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8102330:	687b      	ldr	r3, [r7, #4]
 8102332:	2240      	movs	r2, #64	; 0x40
 8102334:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8102336:	687b      	ldr	r3, [r7, #4]
 8102338:	2203      	movs	r2, #3
 810233a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 810233e:	2301      	movs	r3, #1
 8102340:	e0b7      	b.n	81024b2 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102342:	687b      	ldr	r3, [r7, #4]
 8102344:	681b      	ldr	r3, [r3, #0]
 8102346:	4a5f      	ldr	r2, [pc, #380]	; (81024c4 <HAL_DMA_Init+0x654>)
 8102348:	4293      	cmp	r3, r2
 810234a:	d072      	beq.n	8102432 <HAL_DMA_Init+0x5c2>
 810234c:	687b      	ldr	r3, [r7, #4]
 810234e:	681b      	ldr	r3, [r3, #0]
 8102350:	4a5d      	ldr	r2, [pc, #372]	; (81024c8 <HAL_DMA_Init+0x658>)
 8102352:	4293      	cmp	r3, r2
 8102354:	d06d      	beq.n	8102432 <HAL_DMA_Init+0x5c2>
 8102356:	687b      	ldr	r3, [r7, #4]
 8102358:	681b      	ldr	r3, [r3, #0]
 810235a:	4a5c      	ldr	r2, [pc, #368]	; (81024cc <HAL_DMA_Init+0x65c>)
 810235c:	4293      	cmp	r3, r2
 810235e:	d068      	beq.n	8102432 <HAL_DMA_Init+0x5c2>
 8102360:	687b      	ldr	r3, [r7, #4]
 8102362:	681b      	ldr	r3, [r3, #0]
 8102364:	4a5a      	ldr	r2, [pc, #360]	; (81024d0 <HAL_DMA_Init+0x660>)
 8102366:	4293      	cmp	r3, r2
 8102368:	d063      	beq.n	8102432 <HAL_DMA_Init+0x5c2>
 810236a:	687b      	ldr	r3, [r7, #4]
 810236c:	681b      	ldr	r3, [r3, #0]
 810236e:	4a59      	ldr	r2, [pc, #356]	; (81024d4 <HAL_DMA_Init+0x664>)
 8102370:	4293      	cmp	r3, r2
 8102372:	d05e      	beq.n	8102432 <HAL_DMA_Init+0x5c2>
 8102374:	687b      	ldr	r3, [r7, #4]
 8102376:	681b      	ldr	r3, [r3, #0]
 8102378:	4a57      	ldr	r2, [pc, #348]	; (81024d8 <HAL_DMA_Init+0x668>)
 810237a:	4293      	cmp	r3, r2
 810237c:	d059      	beq.n	8102432 <HAL_DMA_Init+0x5c2>
 810237e:	687b      	ldr	r3, [r7, #4]
 8102380:	681b      	ldr	r3, [r3, #0]
 8102382:	4a56      	ldr	r2, [pc, #344]	; (81024dc <HAL_DMA_Init+0x66c>)
 8102384:	4293      	cmp	r3, r2
 8102386:	d054      	beq.n	8102432 <HAL_DMA_Init+0x5c2>
 8102388:	687b      	ldr	r3, [r7, #4]
 810238a:	681b      	ldr	r3, [r3, #0]
 810238c:	4a54      	ldr	r2, [pc, #336]	; (81024e0 <HAL_DMA_Init+0x670>)
 810238e:	4293      	cmp	r3, r2
 8102390:	d04f      	beq.n	8102432 <HAL_DMA_Init+0x5c2>
 8102392:	687b      	ldr	r3, [r7, #4]
 8102394:	681b      	ldr	r3, [r3, #0]
 8102396:	4a53      	ldr	r2, [pc, #332]	; (81024e4 <HAL_DMA_Init+0x674>)
 8102398:	4293      	cmp	r3, r2
 810239a:	d04a      	beq.n	8102432 <HAL_DMA_Init+0x5c2>
 810239c:	687b      	ldr	r3, [r7, #4]
 810239e:	681b      	ldr	r3, [r3, #0]
 81023a0:	4a51      	ldr	r2, [pc, #324]	; (81024e8 <HAL_DMA_Init+0x678>)
 81023a2:	4293      	cmp	r3, r2
 81023a4:	d045      	beq.n	8102432 <HAL_DMA_Init+0x5c2>
 81023a6:	687b      	ldr	r3, [r7, #4]
 81023a8:	681b      	ldr	r3, [r3, #0]
 81023aa:	4a50      	ldr	r2, [pc, #320]	; (81024ec <HAL_DMA_Init+0x67c>)
 81023ac:	4293      	cmp	r3, r2
 81023ae:	d040      	beq.n	8102432 <HAL_DMA_Init+0x5c2>
 81023b0:	687b      	ldr	r3, [r7, #4]
 81023b2:	681b      	ldr	r3, [r3, #0]
 81023b4:	4a4e      	ldr	r2, [pc, #312]	; (81024f0 <HAL_DMA_Init+0x680>)
 81023b6:	4293      	cmp	r3, r2
 81023b8:	d03b      	beq.n	8102432 <HAL_DMA_Init+0x5c2>
 81023ba:	687b      	ldr	r3, [r7, #4]
 81023bc:	681b      	ldr	r3, [r3, #0]
 81023be:	4a4d      	ldr	r2, [pc, #308]	; (81024f4 <HAL_DMA_Init+0x684>)
 81023c0:	4293      	cmp	r3, r2
 81023c2:	d036      	beq.n	8102432 <HAL_DMA_Init+0x5c2>
 81023c4:	687b      	ldr	r3, [r7, #4]
 81023c6:	681b      	ldr	r3, [r3, #0]
 81023c8:	4a4b      	ldr	r2, [pc, #300]	; (81024f8 <HAL_DMA_Init+0x688>)
 81023ca:	4293      	cmp	r3, r2
 81023cc:	d031      	beq.n	8102432 <HAL_DMA_Init+0x5c2>
 81023ce:	687b      	ldr	r3, [r7, #4]
 81023d0:	681b      	ldr	r3, [r3, #0]
 81023d2:	4a4a      	ldr	r2, [pc, #296]	; (81024fc <HAL_DMA_Init+0x68c>)
 81023d4:	4293      	cmp	r3, r2
 81023d6:	d02c      	beq.n	8102432 <HAL_DMA_Init+0x5c2>
 81023d8:	687b      	ldr	r3, [r7, #4]
 81023da:	681b      	ldr	r3, [r3, #0]
 81023dc:	4a48      	ldr	r2, [pc, #288]	; (8102500 <HAL_DMA_Init+0x690>)
 81023de:	4293      	cmp	r3, r2
 81023e0:	d027      	beq.n	8102432 <HAL_DMA_Init+0x5c2>
 81023e2:	687b      	ldr	r3, [r7, #4]
 81023e4:	681b      	ldr	r3, [r3, #0]
 81023e6:	4a47      	ldr	r2, [pc, #284]	; (8102504 <HAL_DMA_Init+0x694>)
 81023e8:	4293      	cmp	r3, r2
 81023ea:	d022      	beq.n	8102432 <HAL_DMA_Init+0x5c2>
 81023ec:	687b      	ldr	r3, [r7, #4]
 81023ee:	681b      	ldr	r3, [r3, #0]
 81023f0:	4a45      	ldr	r2, [pc, #276]	; (8102508 <HAL_DMA_Init+0x698>)
 81023f2:	4293      	cmp	r3, r2
 81023f4:	d01d      	beq.n	8102432 <HAL_DMA_Init+0x5c2>
 81023f6:	687b      	ldr	r3, [r7, #4]
 81023f8:	681b      	ldr	r3, [r3, #0]
 81023fa:	4a44      	ldr	r2, [pc, #272]	; (810250c <HAL_DMA_Init+0x69c>)
 81023fc:	4293      	cmp	r3, r2
 81023fe:	d018      	beq.n	8102432 <HAL_DMA_Init+0x5c2>
 8102400:	687b      	ldr	r3, [r7, #4]
 8102402:	681b      	ldr	r3, [r3, #0]
 8102404:	4a42      	ldr	r2, [pc, #264]	; (8102510 <HAL_DMA_Init+0x6a0>)
 8102406:	4293      	cmp	r3, r2
 8102408:	d013      	beq.n	8102432 <HAL_DMA_Init+0x5c2>
 810240a:	687b      	ldr	r3, [r7, #4]
 810240c:	681b      	ldr	r3, [r3, #0]
 810240e:	4a41      	ldr	r2, [pc, #260]	; (8102514 <HAL_DMA_Init+0x6a4>)
 8102410:	4293      	cmp	r3, r2
 8102412:	d00e      	beq.n	8102432 <HAL_DMA_Init+0x5c2>
 8102414:	687b      	ldr	r3, [r7, #4]
 8102416:	681b      	ldr	r3, [r3, #0]
 8102418:	4a3f      	ldr	r2, [pc, #252]	; (8102518 <HAL_DMA_Init+0x6a8>)
 810241a:	4293      	cmp	r3, r2
 810241c:	d009      	beq.n	8102432 <HAL_DMA_Init+0x5c2>
 810241e:	687b      	ldr	r3, [r7, #4]
 8102420:	681b      	ldr	r3, [r3, #0]
 8102422:	4a3e      	ldr	r2, [pc, #248]	; (810251c <HAL_DMA_Init+0x6ac>)
 8102424:	4293      	cmp	r3, r2
 8102426:	d004      	beq.n	8102432 <HAL_DMA_Init+0x5c2>
 8102428:	687b      	ldr	r3, [r7, #4]
 810242a:	681b      	ldr	r3, [r3, #0]
 810242c:	4a3c      	ldr	r2, [pc, #240]	; (8102520 <HAL_DMA_Init+0x6b0>)
 810242e:	4293      	cmp	r3, r2
 8102430:	d101      	bne.n	8102436 <HAL_DMA_Init+0x5c6>
 8102432:	2301      	movs	r3, #1
 8102434:	e000      	b.n	8102438 <HAL_DMA_Init+0x5c8>
 8102436:	2300      	movs	r3, #0
 8102438:	2b00      	cmp	r3, #0
 810243a:	d032      	beq.n	81024a2 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 810243c:	6878      	ldr	r0, [r7, #4]
 810243e:	f001 f8c9 	bl	81035d4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8102442:	687b      	ldr	r3, [r7, #4]
 8102444:	689b      	ldr	r3, [r3, #8]
 8102446:	2b80      	cmp	r3, #128	; 0x80
 8102448:	d102      	bne.n	8102450 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 810244a:	687b      	ldr	r3, [r7, #4]
 810244c:	2200      	movs	r2, #0
 810244e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8102450:	687b      	ldr	r3, [r7, #4]
 8102452:	685a      	ldr	r2, [r3, #4]
 8102454:	687b      	ldr	r3, [r7, #4]
 8102456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102458:	b2d2      	uxtb	r2, r2
 810245a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 810245c:	687b      	ldr	r3, [r7, #4]
 810245e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102460:	687a      	ldr	r2, [r7, #4]
 8102462:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8102464:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8102466:	687b      	ldr	r3, [r7, #4]
 8102468:	685b      	ldr	r3, [r3, #4]
 810246a:	2b00      	cmp	r3, #0
 810246c:	d010      	beq.n	8102490 <HAL_DMA_Init+0x620>
 810246e:	687b      	ldr	r3, [r7, #4]
 8102470:	685b      	ldr	r3, [r3, #4]
 8102472:	2b08      	cmp	r3, #8
 8102474:	d80c      	bhi.n	8102490 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8102476:	6878      	ldr	r0, [r7, #4]
 8102478:	f001 f946 	bl	8103708 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 810247c:	687b      	ldr	r3, [r7, #4]
 810247e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102480:	2200      	movs	r2, #0
 8102482:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8102484:	687b      	ldr	r3, [r7, #4]
 8102486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102488:	687a      	ldr	r2, [r7, #4]
 810248a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 810248c:	605a      	str	r2, [r3, #4]
 810248e:	e008      	b.n	81024a2 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8102490:	687b      	ldr	r3, [r7, #4]
 8102492:	2200      	movs	r2, #0
 8102494:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8102496:	687b      	ldr	r3, [r7, #4]
 8102498:	2200      	movs	r2, #0
 810249a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 810249c:	687b      	ldr	r3, [r7, #4]
 810249e:	2200      	movs	r2, #0
 81024a0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 81024a2:	687b      	ldr	r3, [r7, #4]
 81024a4:	2200      	movs	r2, #0
 81024a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 81024a8:	687b      	ldr	r3, [r7, #4]
 81024aa:	2201      	movs	r2, #1
 81024ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 81024b0:	2300      	movs	r3, #0
}
 81024b2:	4618      	mov	r0, r3
 81024b4:	3718      	adds	r7, #24
 81024b6:	46bd      	mov	sp, r7
 81024b8:	bd80      	pop	{r7, pc}
 81024ba:	bf00      	nop
 81024bc:	a7fdabf8 	.word	0xa7fdabf8
 81024c0:	cccccccd 	.word	0xcccccccd
 81024c4:	40020010 	.word	0x40020010
 81024c8:	40020028 	.word	0x40020028
 81024cc:	40020040 	.word	0x40020040
 81024d0:	40020058 	.word	0x40020058
 81024d4:	40020070 	.word	0x40020070
 81024d8:	40020088 	.word	0x40020088
 81024dc:	400200a0 	.word	0x400200a0
 81024e0:	400200b8 	.word	0x400200b8
 81024e4:	40020410 	.word	0x40020410
 81024e8:	40020428 	.word	0x40020428
 81024ec:	40020440 	.word	0x40020440
 81024f0:	40020458 	.word	0x40020458
 81024f4:	40020470 	.word	0x40020470
 81024f8:	40020488 	.word	0x40020488
 81024fc:	400204a0 	.word	0x400204a0
 8102500:	400204b8 	.word	0x400204b8
 8102504:	58025408 	.word	0x58025408
 8102508:	5802541c 	.word	0x5802541c
 810250c:	58025430 	.word	0x58025430
 8102510:	58025444 	.word	0x58025444
 8102514:	58025458 	.word	0x58025458
 8102518:	5802546c 	.word	0x5802546c
 810251c:	58025480 	.word	0x58025480
 8102520:	58025494 	.word	0x58025494

08102524 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8102524:	b580      	push	{r7, lr}
 8102526:	b08a      	sub	sp, #40	; 0x28
 8102528:	af00      	add	r7, sp, #0
 810252a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 810252c:	2300      	movs	r3, #0
 810252e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8102530:	4b67      	ldr	r3, [pc, #412]	; (81026d0 <HAL_DMA_IRQHandler+0x1ac>)
 8102532:	681b      	ldr	r3, [r3, #0]
 8102534:	4a67      	ldr	r2, [pc, #412]	; (81026d4 <HAL_DMA_IRQHandler+0x1b0>)
 8102536:	fba2 2303 	umull	r2, r3, r2, r3
 810253a:	0a9b      	lsrs	r3, r3, #10
 810253c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 810253e:	687b      	ldr	r3, [r7, #4]
 8102540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102542:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8102544:	687b      	ldr	r3, [r7, #4]
 8102546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102548:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 810254a:	6a3b      	ldr	r3, [r7, #32]
 810254c:	681b      	ldr	r3, [r3, #0]
 810254e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8102550:	69fb      	ldr	r3, [r7, #28]
 8102552:	681b      	ldr	r3, [r3, #0]
 8102554:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8102556:	687b      	ldr	r3, [r7, #4]
 8102558:	681b      	ldr	r3, [r3, #0]
 810255a:	4a5f      	ldr	r2, [pc, #380]	; (81026d8 <HAL_DMA_IRQHandler+0x1b4>)
 810255c:	4293      	cmp	r3, r2
 810255e:	d04a      	beq.n	81025f6 <HAL_DMA_IRQHandler+0xd2>
 8102560:	687b      	ldr	r3, [r7, #4]
 8102562:	681b      	ldr	r3, [r3, #0]
 8102564:	4a5d      	ldr	r2, [pc, #372]	; (81026dc <HAL_DMA_IRQHandler+0x1b8>)
 8102566:	4293      	cmp	r3, r2
 8102568:	d045      	beq.n	81025f6 <HAL_DMA_IRQHandler+0xd2>
 810256a:	687b      	ldr	r3, [r7, #4]
 810256c:	681b      	ldr	r3, [r3, #0]
 810256e:	4a5c      	ldr	r2, [pc, #368]	; (81026e0 <HAL_DMA_IRQHandler+0x1bc>)
 8102570:	4293      	cmp	r3, r2
 8102572:	d040      	beq.n	81025f6 <HAL_DMA_IRQHandler+0xd2>
 8102574:	687b      	ldr	r3, [r7, #4]
 8102576:	681b      	ldr	r3, [r3, #0]
 8102578:	4a5a      	ldr	r2, [pc, #360]	; (81026e4 <HAL_DMA_IRQHandler+0x1c0>)
 810257a:	4293      	cmp	r3, r2
 810257c:	d03b      	beq.n	81025f6 <HAL_DMA_IRQHandler+0xd2>
 810257e:	687b      	ldr	r3, [r7, #4]
 8102580:	681b      	ldr	r3, [r3, #0]
 8102582:	4a59      	ldr	r2, [pc, #356]	; (81026e8 <HAL_DMA_IRQHandler+0x1c4>)
 8102584:	4293      	cmp	r3, r2
 8102586:	d036      	beq.n	81025f6 <HAL_DMA_IRQHandler+0xd2>
 8102588:	687b      	ldr	r3, [r7, #4]
 810258a:	681b      	ldr	r3, [r3, #0]
 810258c:	4a57      	ldr	r2, [pc, #348]	; (81026ec <HAL_DMA_IRQHandler+0x1c8>)
 810258e:	4293      	cmp	r3, r2
 8102590:	d031      	beq.n	81025f6 <HAL_DMA_IRQHandler+0xd2>
 8102592:	687b      	ldr	r3, [r7, #4]
 8102594:	681b      	ldr	r3, [r3, #0]
 8102596:	4a56      	ldr	r2, [pc, #344]	; (81026f0 <HAL_DMA_IRQHandler+0x1cc>)
 8102598:	4293      	cmp	r3, r2
 810259a:	d02c      	beq.n	81025f6 <HAL_DMA_IRQHandler+0xd2>
 810259c:	687b      	ldr	r3, [r7, #4]
 810259e:	681b      	ldr	r3, [r3, #0]
 81025a0:	4a54      	ldr	r2, [pc, #336]	; (81026f4 <HAL_DMA_IRQHandler+0x1d0>)
 81025a2:	4293      	cmp	r3, r2
 81025a4:	d027      	beq.n	81025f6 <HAL_DMA_IRQHandler+0xd2>
 81025a6:	687b      	ldr	r3, [r7, #4]
 81025a8:	681b      	ldr	r3, [r3, #0]
 81025aa:	4a53      	ldr	r2, [pc, #332]	; (81026f8 <HAL_DMA_IRQHandler+0x1d4>)
 81025ac:	4293      	cmp	r3, r2
 81025ae:	d022      	beq.n	81025f6 <HAL_DMA_IRQHandler+0xd2>
 81025b0:	687b      	ldr	r3, [r7, #4]
 81025b2:	681b      	ldr	r3, [r3, #0]
 81025b4:	4a51      	ldr	r2, [pc, #324]	; (81026fc <HAL_DMA_IRQHandler+0x1d8>)
 81025b6:	4293      	cmp	r3, r2
 81025b8:	d01d      	beq.n	81025f6 <HAL_DMA_IRQHandler+0xd2>
 81025ba:	687b      	ldr	r3, [r7, #4]
 81025bc:	681b      	ldr	r3, [r3, #0]
 81025be:	4a50      	ldr	r2, [pc, #320]	; (8102700 <HAL_DMA_IRQHandler+0x1dc>)
 81025c0:	4293      	cmp	r3, r2
 81025c2:	d018      	beq.n	81025f6 <HAL_DMA_IRQHandler+0xd2>
 81025c4:	687b      	ldr	r3, [r7, #4]
 81025c6:	681b      	ldr	r3, [r3, #0]
 81025c8:	4a4e      	ldr	r2, [pc, #312]	; (8102704 <HAL_DMA_IRQHandler+0x1e0>)
 81025ca:	4293      	cmp	r3, r2
 81025cc:	d013      	beq.n	81025f6 <HAL_DMA_IRQHandler+0xd2>
 81025ce:	687b      	ldr	r3, [r7, #4]
 81025d0:	681b      	ldr	r3, [r3, #0]
 81025d2:	4a4d      	ldr	r2, [pc, #308]	; (8102708 <HAL_DMA_IRQHandler+0x1e4>)
 81025d4:	4293      	cmp	r3, r2
 81025d6:	d00e      	beq.n	81025f6 <HAL_DMA_IRQHandler+0xd2>
 81025d8:	687b      	ldr	r3, [r7, #4]
 81025da:	681b      	ldr	r3, [r3, #0]
 81025dc:	4a4b      	ldr	r2, [pc, #300]	; (810270c <HAL_DMA_IRQHandler+0x1e8>)
 81025de:	4293      	cmp	r3, r2
 81025e0:	d009      	beq.n	81025f6 <HAL_DMA_IRQHandler+0xd2>
 81025e2:	687b      	ldr	r3, [r7, #4]
 81025e4:	681b      	ldr	r3, [r3, #0]
 81025e6:	4a4a      	ldr	r2, [pc, #296]	; (8102710 <HAL_DMA_IRQHandler+0x1ec>)
 81025e8:	4293      	cmp	r3, r2
 81025ea:	d004      	beq.n	81025f6 <HAL_DMA_IRQHandler+0xd2>
 81025ec:	687b      	ldr	r3, [r7, #4]
 81025ee:	681b      	ldr	r3, [r3, #0]
 81025f0:	4a48      	ldr	r2, [pc, #288]	; (8102714 <HAL_DMA_IRQHandler+0x1f0>)
 81025f2:	4293      	cmp	r3, r2
 81025f4:	d101      	bne.n	81025fa <HAL_DMA_IRQHandler+0xd6>
 81025f6:	2301      	movs	r3, #1
 81025f8:	e000      	b.n	81025fc <HAL_DMA_IRQHandler+0xd8>
 81025fa:	2300      	movs	r3, #0
 81025fc:	2b00      	cmp	r3, #0
 81025fe:	f000 842b 	beq.w	8102e58 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8102602:	687b      	ldr	r3, [r7, #4]
 8102604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102606:	f003 031f 	and.w	r3, r3, #31
 810260a:	2208      	movs	r2, #8
 810260c:	409a      	lsls	r2, r3
 810260e:	69bb      	ldr	r3, [r7, #24]
 8102610:	4013      	ands	r3, r2
 8102612:	2b00      	cmp	r3, #0
 8102614:	f000 80a2 	beq.w	810275c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8102618:	687b      	ldr	r3, [r7, #4]
 810261a:	681b      	ldr	r3, [r3, #0]
 810261c:	4a2e      	ldr	r2, [pc, #184]	; (81026d8 <HAL_DMA_IRQHandler+0x1b4>)
 810261e:	4293      	cmp	r3, r2
 8102620:	d04a      	beq.n	81026b8 <HAL_DMA_IRQHandler+0x194>
 8102622:	687b      	ldr	r3, [r7, #4]
 8102624:	681b      	ldr	r3, [r3, #0]
 8102626:	4a2d      	ldr	r2, [pc, #180]	; (81026dc <HAL_DMA_IRQHandler+0x1b8>)
 8102628:	4293      	cmp	r3, r2
 810262a:	d045      	beq.n	81026b8 <HAL_DMA_IRQHandler+0x194>
 810262c:	687b      	ldr	r3, [r7, #4]
 810262e:	681b      	ldr	r3, [r3, #0]
 8102630:	4a2b      	ldr	r2, [pc, #172]	; (81026e0 <HAL_DMA_IRQHandler+0x1bc>)
 8102632:	4293      	cmp	r3, r2
 8102634:	d040      	beq.n	81026b8 <HAL_DMA_IRQHandler+0x194>
 8102636:	687b      	ldr	r3, [r7, #4]
 8102638:	681b      	ldr	r3, [r3, #0]
 810263a:	4a2a      	ldr	r2, [pc, #168]	; (81026e4 <HAL_DMA_IRQHandler+0x1c0>)
 810263c:	4293      	cmp	r3, r2
 810263e:	d03b      	beq.n	81026b8 <HAL_DMA_IRQHandler+0x194>
 8102640:	687b      	ldr	r3, [r7, #4]
 8102642:	681b      	ldr	r3, [r3, #0]
 8102644:	4a28      	ldr	r2, [pc, #160]	; (81026e8 <HAL_DMA_IRQHandler+0x1c4>)
 8102646:	4293      	cmp	r3, r2
 8102648:	d036      	beq.n	81026b8 <HAL_DMA_IRQHandler+0x194>
 810264a:	687b      	ldr	r3, [r7, #4]
 810264c:	681b      	ldr	r3, [r3, #0]
 810264e:	4a27      	ldr	r2, [pc, #156]	; (81026ec <HAL_DMA_IRQHandler+0x1c8>)
 8102650:	4293      	cmp	r3, r2
 8102652:	d031      	beq.n	81026b8 <HAL_DMA_IRQHandler+0x194>
 8102654:	687b      	ldr	r3, [r7, #4]
 8102656:	681b      	ldr	r3, [r3, #0]
 8102658:	4a25      	ldr	r2, [pc, #148]	; (81026f0 <HAL_DMA_IRQHandler+0x1cc>)
 810265a:	4293      	cmp	r3, r2
 810265c:	d02c      	beq.n	81026b8 <HAL_DMA_IRQHandler+0x194>
 810265e:	687b      	ldr	r3, [r7, #4]
 8102660:	681b      	ldr	r3, [r3, #0]
 8102662:	4a24      	ldr	r2, [pc, #144]	; (81026f4 <HAL_DMA_IRQHandler+0x1d0>)
 8102664:	4293      	cmp	r3, r2
 8102666:	d027      	beq.n	81026b8 <HAL_DMA_IRQHandler+0x194>
 8102668:	687b      	ldr	r3, [r7, #4]
 810266a:	681b      	ldr	r3, [r3, #0]
 810266c:	4a22      	ldr	r2, [pc, #136]	; (81026f8 <HAL_DMA_IRQHandler+0x1d4>)
 810266e:	4293      	cmp	r3, r2
 8102670:	d022      	beq.n	81026b8 <HAL_DMA_IRQHandler+0x194>
 8102672:	687b      	ldr	r3, [r7, #4]
 8102674:	681b      	ldr	r3, [r3, #0]
 8102676:	4a21      	ldr	r2, [pc, #132]	; (81026fc <HAL_DMA_IRQHandler+0x1d8>)
 8102678:	4293      	cmp	r3, r2
 810267a:	d01d      	beq.n	81026b8 <HAL_DMA_IRQHandler+0x194>
 810267c:	687b      	ldr	r3, [r7, #4]
 810267e:	681b      	ldr	r3, [r3, #0]
 8102680:	4a1f      	ldr	r2, [pc, #124]	; (8102700 <HAL_DMA_IRQHandler+0x1dc>)
 8102682:	4293      	cmp	r3, r2
 8102684:	d018      	beq.n	81026b8 <HAL_DMA_IRQHandler+0x194>
 8102686:	687b      	ldr	r3, [r7, #4]
 8102688:	681b      	ldr	r3, [r3, #0]
 810268a:	4a1e      	ldr	r2, [pc, #120]	; (8102704 <HAL_DMA_IRQHandler+0x1e0>)
 810268c:	4293      	cmp	r3, r2
 810268e:	d013      	beq.n	81026b8 <HAL_DMA_IRQHandler+0x194>
 8102690:	687b      	ldr	r3, [r7, #4]
 8102692:	681b      	ldr	r3, [r3, #0]
 8102694:	4a1c      	ldr	r2, [pc, #112]	; (8102708 <HAL_DMA_IRQHandler+0x1e4>)
 8102696:	4293      	cmp	r3, r2
 8102698:	d00e      	beq.n	81026b8 <HAL_DMA_IRQHandler+0x194>
 810269a:	687b      	ldr	r3, [r7, #4]
 810269c:	681b      	ldr	r3, [r3, #0]
 810269e:	4a1b      	ldr	r2, [pc, #108]	; (810270c <HAL_DMA_IRQHandler+0x1e8>)
 81026a0:	4293      	cmp	r3, r2
 81026a2:	d009      	beq.n	81026b8 <HAL_DMA_IRQHandler+0x194>
 81026a4:	687b      	ldr	r3, [r7, #4]
 81026a6:	681b      	ldr	r3, [r3, #0]
 81026a8:	4a19      	ldr	r2, [pc, #100]	; (8102710 <HAL_DMA_IRQHandler+0x1ec>)
 81026aa:	4293      	cmp	r3, r2
 81026ac:	d004      	beq.n	81026b8 <HAL_DMA_IRQHandler+0x194>
 81026ae:	687b      	ldr	r3, [r7, #4]
 81026b0:	681b      	ldr	r3, [r3, #0]
 81026b2:	4a18      	ldr	r2, [pc, #96]	; (8102714 <HAL_DMA_IRQHandler+0x1f0>)
 81026b4:	4293      	cmp	r3, r2
 81026b6:	d12f      	bne.n	8102718 <HAL_DMA_IRQHandler+0x1f4>
 81026b8:	687b      	ldr	r3, [r7, #4]
 81026ba:	681b      	ldr	r3, [r3, #0]
 81026bc:	681b      	ldr	r3, [r3, #0]
 81026be:	f003 0304 	and.w	r3, r3, #4
 81026c2:	2b00      	cmp	r3, #0
 81026c4:	bf14      	ite	ne
 81026c6:	2301      	movne	r3, #1
 81026c8:	2300      	moveq	r3, #0
 81026ca:	b2db      	uxtb	r3, r3
 81026cc:	e02e      	b.n	810272c <HAL_DMA_IRQHandler+0x208>
 81026ce:	bf00      	nop
 81026d0:	10000000 	.word	0x10000000
 81026d4:	1b4e81b5 	.word	0x1b4e81b5
 81026d8:	40020010 	.word	0x40020010
 81026dc:	40020028 	.word	0x40020028
 81026e0:	40020040 	.word	0x40020040
 81026e4:	40020058 	.word	0x40020058
 81026e8:	40020070 	.word	0x40020070
 81026ec:	40020088 	.word	0x40020088
 81026f0:	400200a0 	.word	0x400200a0
 81026f4:	400200b8 	.word	0x400200b8
 81026f8:	40020410 	.word	0x40020410
 81026fc:	40020428 	.word	0x40020428
 8102700:	40020440 	.word	0x40020440
 8102704:	40020458 	.word	0x40020458
 8102708:	40020470 	.word	0x40020470
 810270c:	40020488 	.word	0x40020488
 8102710:	400204a0 	.word	0x400204a0
 8102714:	400204b8 	.word	0x400204b8
 8102718:	687b      	ldr	r3, [r7, #4]
 810271a:	681b      	ldr	r3, [r3, #0]
 810271c:	681b      	ldr	r3, [r3, #0]
 810271e:	f003 0308 	and.w	r3, r3, #8
 8102722:	2b00      	cmp	r3, #0
 8102724:	bf14      	ite	ne
 8102726:	2301      	movne	r3, #1
 8102728:	2300      	moveq	r3, #0
 810272a:	b2db      	uxtb	r3, r3
 810272c:	2b00      	cmp	r3, #0
 810272e:	d015      	beq.n	810275c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8102730:	687b      	ldr	r3, [r7, #4]
 8102732:	681b      	ldr	r3, [r3, #0]
 8102734:	681a      	ldr	r2, [r3, #0]
 8102736:	687b      	ldr	r3, [r7, #4]
 8102738:	681b      	ldr	r3, [r3, #0]
 810273a:	f022 0204 	bic.w	r2, r2, #4
 810273e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8102740:	687b      	ldr	r3, [r7, #4]
 8102742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102744:	f003 031f 	and.w	r3, r3, #31
 8102748:	2208      	movs	r2, #8
 810274a:	409a      	lsls	r2, r3
 810274c:	6a3b      	ldr	r3, [r7, #32]
 810274e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8102750:	687b      	ldr	r3, [r7, #4]
 8102752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102754:	f043 0201 	orr.w	r2, r3, #1
 8102758:	687b      	ldr	r3, [r7, #4]
 810275a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 810275c:	687b      	ldr	r3, [r7, #4]
 810275e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102760:	f003 031f 	and.w	r3, r3, #31
 8102764:	69ba      	ldr	r2, [r7, #24]
 8102766:	fa22 f303 	lsr.w	r3, r2, r3
 810276a:	f003 0301 	and.w	r3, r3, #1
 810276e:	2b00      	cmp	r3, #0
 8102770:	d06e      	beq.n	8102850 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8102772:	687b      	ldr	r3, [r7, #4]
 8102774:	681b      	ldr	r3, [r3, #0]
 8102776:	4a69      	ldr	r2, [pc, #420]	; (810291c <HAL_DMA_IRQHandler+0x3f8>)
 8102778:	4293      	cmp	r3, r2
 810277a:	d04a      	beq.n	8102812 <HAL_DMA_IRQHandler+0x2ee>
 810277c:	687b      	ldr	r3, [r7, #4]
 810277e:	681b      	ldr	r3, [r3, #0]
 8102780:	4a67      	ldr	r2, [pc, #412]	; (8102920 <HAL_DMA_IRQHandler+0x3fc>)
 8102782:	4293      	cmp	r3, r2
 8102784:	d045      	beq.n	8102812 <HAL_DMA_IRQHandler+0x2ee>
 8102786:	687b      	ldr	r3, [r7, #4]
 8102788:	681b      	ldr	r3, [r3, #0]
 810278a:	4a66      	ldr	r2, [pc, #408]	; (8102924 <HAL_DMA_IRQHandler+0x400>)
 810278c:	4293      	cmp	r3, r2
 810278e:	d040      	beq.n	8102812 <HAL_DMA_IRQHandler+0x2ee>
 8102790:	687b      	ldr	r3, [r7, #4]
 8102792:	681b      	ldr	r3, [r3, #0]
 8102794:	4a64      	ldr	r2, [pc, #400]	; (8102928 <HAL_DMA_IRQHandler+0x404>)
 8102796:	4293      	cmp	r3, r2
 8102798:	d03b      	beq.n	8102812 <HAL_DMA_IRQHandler+0x2ee>
 810279a:	687b      	ldr	r3, [r7, #4]
 810279c:	681b      	ldr	r3, [r3, #0]
 810279e:	4a63      	ldr	r2, [pc, #396]	; (810292c <HAL_DMA_IRQHandler+0x408>)
 81027a0:	4293      	cmp	r3, r2
 81027a2:	d036      	beq.n	8102812 <HAL_DMA_IRQHandler+0x2ee>
 81027a4:	687b      	ldr	r3, [r7, #4]
 81027a6:	681b      	ldr	r3, [r3, #0]
 81027a8:	4a61      	ldr	r2, [pc, #388]	; (8102930 <HAL_DMA_IRQHandler+0x40c>)
 81027aa:	4293      	cmp	r3, r2
 81027ac:	d031      	beq.n	8102812 <HAL_DMA_IRQHandler+0x2ee>
 81027ae:	687b      	ldr	r3, [r7, #4]
 81027b0:	681b      	ldr	r3, [r3, #0]
 81027b2:	4a60      	ldr	r2, [pc, #384]	; (8102934 <HAL_DMA_IRQHandler+0x410>)
 81027b4:	4293      	cmp	r3, r2
 81027b6:	d02c      	beq.n	8102812 <HAL_DMA_IRQHandler+0x2ee>
 81027b8:	687b      	ldr	r3, [r7, #4]
 81027ba:	681b      	ldr	r3, [r3, #0]
 81027bc:	4a5e      	ldr	r2, [pc, #376]	; (8102938 <HAL_DMA_IRQHandler+0x414>)
 81027be:	4293      	cmp	r3, r2
 81027c0:	d027      	beq.n	8102812 <HAL_DMA_IRQHandler+0x2ee>
 81027c2:	687b      	ldr	r3, [r7, #4]
 81027c4:	681b      	ldr	r3, [r3, #0]
 81027c6:	4a5d      	ldr	r2, [pc, #372]	; (810293c <HAL_DMA_IRQHandler+0x418>)
 81027c8:	4293      	cmp	r3, r2
 81027ca:	d022      	beq.n	8102812 <HAL_DMA_IRQHandler+0x2ee>
 81027cc:	687b      	ldr	r3, [r7, #4]
 81027ce:	681b      	ldr	r3, [r3, #0]
 81027d0:	4a5b      	ldr	r2, [pc, #364]	; (8102940 <HAL_DMA_IRQHandler+0x41c>)
 81027d2:	4293      	cmp	r3, r2
 81027d4:	d01d      	beq.n	8102812 <HAL_DMA_IRQHandler+0x2ee>
 81027d6:	687b      	ldr	r3, [r7, #4]
 81027d8:	681b      	ldr	r3, [r3, #0]
 81027da:	4a5a      	ldr	r2, [pc, #360]	; (8102944 <HAL_DMA_IRQHandler+0x420>)
 81027dc:	4293      	cmp	r3, r2
 81027de:	d018      	beq.n	8102812 <HAL_DMA_IRQHandler+0x2ee>
 81027e0:	687b      	ldr	r3, [r7, #4]
 81027e2:	681b      	ldr	r3, [r3, #0]
 81027e4:	4a58      	ldr	r2, [pc, #352]	; (8102948 <HAL_DMA_IRQHandler+0x424>)
 81027e6:	4293      	cmp	r3, r2
 81027e8:	d013      	beq.n	8102812 <HAL_DMA_IRQHandler+0x2ee>
 81027ea:	687b      	ldr	r3, [r7, #4]
 81027ec:	681b      	ldr	r3, [r3, #0]
 81027ee:	4a57      	ldr	r2, [pc, #348]	; (810294c <HAL_DMA_IRQHandler+0x428>)
 81027f0:	4293      	cmp	r3, r2
 81027f2:	d00e      	beq.n	8102812 <HAL_DMA_IRQHandler+0x2ee>
 81027f4:	687b      	ldr	r3, [r7, #4]
 81027f6:	681b      	ldr	r3, [r3, #0]
 81027f8:	4a55      	ldr	r2, [pc, #340]	; (8102950 <HAL_DMA_IRQHandler+0x42c>)
 81027fa:	4293      	cmp	r3, r2
 81027fc:	d009      	beq.n	8102812 <HAL_DMA_IRQHandler+0x2ee>
 81027fe:	687b      	ldr	r3, [r7, #4]
 8102800:	681b      	ldr	r3, [r3, #0]
 8102802:	4a54      	ldr	r2, [pc, #336]	; (8102954 <HAL_DMA_IRQHandler+0x430>)
 8102804:	4293      	cmp	r3, r2
 8102806:	d004      	beq.n	8102812 <HAL_DMA_IRQHandler+0x2ee>
 8102808:	687b      	ldr	r3, [r7, #4]
 810280a:	681b      	ldr	r3, [r3, #0]
 810280c:	4a52      	ldr	r2, [pc, #328]	; (8102958 <HAL_DMA_IRQHandler+0x434>)
 810280e:	4293      	cmp	r3, r2
 8102810:	d10a      	bne.n	8102828 <HAL_DMA_IRQHandler+0x304>
 8102812:	687b      	ldr	r3, [r7, #4]
 8102814:	681b      	ldr	r3, [r3, #0]
 8102816:	695b      	ldr	r3, [r3, #20]
 8102818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810281c:	2b00      	cmp	r3, #0
 810281e:	bf14      	ite	ne
 8102820:	2301      	movne	r3, #1
 8102822:	2300      	moveq	r3, #0
 8102824:	b2db      	uxtb	r3, r3
 8102826:	e003      	b.n	8102830 <HAL_DMA_IRQHandler+0x30c>
 8102828:	687b      	ldr	r3, [r7, #4]
 810282a:	681b      	ldr	r3, [r3, #0]
 810282c:	681b      	ldr	r3, [r3, #0]
 810282e:	2300      	movs	r3, #0
 8102830:	2b00      	cmp	r3, #0
 8102832:	d00d      	beq.n	8102850 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8102834:	687b      	ldr	r3, [r7, #4]
 8102836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102838:	f003 031f 	and.w	r3, r3, #31
 810283c:	2201      	movs	r2, #1
 810283e:	409a      	lsls	r2, r3
 8102840:	6a3b      	ldr	r3, [r7, #32]
 8102842:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8102844:	687b      	ldr	r3, [r7, #4]
 8102846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102848:	f043 0202 	orr.w	r2, r3, #2
 810284c:	687b      	ldr	r3, [r7, #4]
 810284e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8102850:	687b      	ldr	r3, [r7, #4]
 8102852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102854:	f003 031f 	and.w	r3, r3, #31
 8102858:	2204      	movs	r2, #4
 810285a:	409a      	lsls	r2, r3
 810285c:	69bb      	ldr	r3, [r7, #24]
 810285e:	4013      	ands	r3, r2
 8102860:	2b00      	cmp	r3, #0
 8102862:	f000 808f 	beq.w	8102984 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8102866:	687b      	ldr	r3, [r7, #4]
 8102868:	681b      	ldr	r3, [r3, #0]
 810286a:	4a2c      	ldr	r2, [pc, #176]	; (810291c <HAL_DMA_IRQHandler+0x3f8>)
 810286c:	4293      	cmp	r3, r2
 810286e:	d04a      	beq.n	8102906 <HAL_DMA_IRQHandler+0x3e2>
 8102870:	687b      	ldr	r3, [r7, #4]
 8102872:	681b      	ldr	r3, [r3, #0]
 8102874:	4a2a      	ldr	r2, [pc, #168]	; (8102920 <HAL_DMA_IRQHandler+0x3fc>)
 8102876:	4293      	cmp	r3, r2
 8102878:	d045      	beq.n	8102906 <HAL_DMA_IRQHandler+0x3e2>
 810287a:	687b      	ldr	r3, [r7, #4]
 810287c:	681b      	ldr	r3, [r3, #0]
 810287e:	4a29      	ldr	r2, [pc, #164]	; (8102924 <HAL_DMA_IRQHandler+0x400>)
 8102880:	4293      	cmp	r3, r2
 8102882:	d040      	beq.n	8102906 <HAL_DMA_IRQHandler+0x3e2>
 8102884:	687b      	ldr	r3, [r7, #4]
 8102886:	681b      	ldr	r3, [r3, #0]
 8102888:	4a27      	ldr	r2, [pc, #156]	; (8102928 <HAL_DMA_IRQHandler+0x404>)
 810288a:	4293      	cmp	r3, r2
 810288c:	d03b      	beq.n	8102906 <HAL_DMA_IRQHandler+0x3e2>
 810288e:	687b      	ldr	r3, [r7, #4]
 8102890:	681b      	ldr	r3, [r3, #0]
 8102892:	4a26      	ldr	r2, [pc, #152]	; (810292c <HAL_DMA_IRQHandler+0x408>)
 8102894:	4293      	cmp	r3, r2
 8102896:	d036      	beq.n	8102906 <HAL_DMA_IRQHandler+0x3e2>
 8102898:	687b      	ldr	r3, [r7, #4]
 810289a:	681b      	ldr	r3, [r3, #0]
 810289c:	4a24      	ldr	r2, [pc, #144]	; (8102930 <HAL_DMA_IRQHandler+0x40c>)
 810289e:	4293      	cmp	r3, r2
 81028a0:	d031      	beq.n	8102906 <HAL_DMA_IRQHandler+0x3e2>
 81028a2:	687b      	ldr	r3, [r7, #4]
 81028a4:	681b      	ldr	r3, [r3, #0]
 81028a6:	4a23      	ldr	r2, [pc, #140]	; (8102934 <HAL_DMA_IRQHandler+0x410>)
 81028a8:	4293      	cmp	r3, r2
 81028aa:	d02c      	beq.n	8102906 <HAL_DMA_IRQHandler+0x3e2>
 81028ac:	687b      	ldr	r3, [r7, #4]
 81028ae:	681b      	ldr	r3, [r3, #0]
 81028b0:	4a21      	ldr	r2, [pc, #132]	; (8102938 <HAL_DMA_IRQHandler+0x414>)
 81028b2:	4293      	cmp	r3, r2
 81028b4:	d027      	beq.n	8102906 <HAL_DMA_IRQHandler+0x3e2>
 81028b6:	687b      	ldr	r3, [r7, #4]
 81028b8:	681b      	ldr	r3, [r3, #0]
 81028ba:	4a20      	ldr	r2, [pc, #128]	; (810293c <HAL_DMA_IRQHandler+0x418>)
 81028bc:	4293      	cmp	r3, r2
 81028be:	d022      	beq.n	8102906 <HAL_DMA_IRQHandler+0x3e2>
 81028c0:	687b      	ldr	r3, [r7, #4]
 81028c2:	681b      	ldr	r3, [r3, #0]
 81028c4:	4a1e      	ldr	r2, [pc, #120]	; (8102940 <HAL_DMA_IRQHandler+0x41c>)
 81028c6:	4293      	cmp	r3, r2
 81028c8:	d01d      	beq.n	8102906 <HAL_DMA_IRQHandler+0x3e2>
 81028ca:	687b      	ldr	r3, [r7, #4]
 81028cc:	681b      	ldr	r3, [r3, #0]
 81028ce:	4a1d      	ldr	r2, [pc, #116]	; (8102944 <HAL_DMA_IRQHandler+0x420>)
 81028d0:	4293      	cmp	r3, r2
 81028d2:	d018      	beq.n	8102906 <HAL_DMA_IRQHandler+0x3e2>
 81028d4:	687b      	ldr	r3, [r7, #4]
 81028d6:	681b      	ldr	r3, [r3, #0]
 81028d8:	4a1b      	ldr	r2, [pc, #108]	; (8102948 <HAL_DMA_IRQHandler+0x424>)
 81028da:	4293      	cmp	r3, r2
 81028dc:	d013      	beq.n	8102906 <HAL_DMA_IRQHandler+0x3e2>
 81028de:	687b      	ldr	r3, [r7, #4]
 81028e0:	681b      	ldr	r3, [r3, #0]
 81028e2:	4a1a      	ldr	r2, [pc, #104]	; (810294c <HAL_DMA_IRQHandler+0x428>)
 81028e4:	4293      	cmp	r3, r2
 81028e6:	d00e      	beq.n	8102906 <HAL_DMA_IRQHandler+0x3e2>
 81028e8:	687b      	ldr	r3, [r7, #4]
 81028ea:	681b      	ldr	r3, [r3, #0]
 81028ec:	4a18      	ldr	r2, [pc, #96]	; (8102950 <HAL_DMA_IRQHandler+0x42c>)
 81028ee:	4293      	cmp	r3, r2
 81028f0:	d009      	beq.n	8102906 <HAL_DMA_IRQHandler+0x3e2>
 81028f2:	687b      	ldr	r3, [r7, #4]
 81028f4:	681b      	ldr	r3, [r3, #0]
 81028f6:	4a17      	ldr	r2, [pc, #92]	; (8102954 <HAL_DMA_IRQHandler+0x430>)
 81028f8:	4293      	cmp	r3, r2
 81028fa:	d004      	beq.n	8102906 <HAL_DMA_IRQHandler+0x3e2>
 81028fc:	687b      	ldr	r3, [r7, #4]
 81028fe:	681b      	ldr	r3, [r3, #0]
 8102900:	4a15      	ldr	r2, [pc, #84]	; (8102958 <HAL_DMA_IRQHandler+0x434>)
 8102902:	4293      	cmp	r3, r2
 8102904:	d12a      	bne.n	810295c <HAL_DMA_IRQHandler+0x438>
 8102906:	687b      	ldr	r3, [r7, #4]
 8102908:	681b      	ldr	r3, [r3, #0]
 810290a:	681b      	ldr	r3, [r3, #0]
 810290c:	f003 0302 	and.w	r3, r3, #2
 8102910:	2b00      	cmp	r3, #0
 8102912:	bf14      	ite	ne
 8102914:	2301      	movne	r3, #1
 8102916:	2300      	moveq	r3, #0
 8102918:	b2db      	uxtb	r3, r3
 810291a:	e023      	b.n	8102964 <HAL_DMA_IRQHandler+0x440>
 810291c:	40020010 	.word	0x40020010
 8102920:	40020028 	.word	0x40020028
 8102924:	40020040 	.word	0x40020040
 8102928:	40020058 	.word	0x40020058
 810292c:	40020070 	.word	0x40020070
 8102930:	40020088 	.word	0x40020088
 8102934:	400200a0 	.word	0x400200a0
 8102938:	400200b8 	.word	0x400200b8
 810293c:	40020410 	.word	0x40020410
 8102940:	40020428 	.word	0x40020428
 8102944:	40020440 	.word	0x40020440
 8102948:	40020458 	.word	0x40020458
 810294c:	40020470 	.word	0x40020470
 8102950:	40020488 	.word	0x40020488
 8102954:	400204a0 	.word	0x400204a0
 8102958:	400204b8 	.word	0x400204b8
 810295c:	687b      	ldr	r3, [r7, #4]
 810295e:	681b      	ldr	r3, [r3, #0]
 8102960:	681b      	ldr	r3, [r3, #0]
 8102962:	2300      	movs	r3, #0
 8102964:	2b00      	cmp	r3, #0
 8102966:	d00d      	beq.n	8102984 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8102968:	687b      	ldr	r3, [r7, #4]
 810296a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810296c:	f003 031f 	and.w	r3, r3, #31
 8102970:	2204      	movs	r2, #4
 8102972:	409a      	lsls	r2, r3
 8102974:	6a3b      	ldr	r3, [r7, #32]
 8102976:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8102978:	687b      	ldr	r3, [r7, #4]
 810297a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810297c:	f043 0204 	orr.w	r2, r3, #4
 8102980:	687b      	ldr	r3, [r7, #4]
 8102982:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8102984:	687b      	ldr	r3, [r7, #4]
 8102986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102988:	f003 031f 	and.w	r3, r3, #31
 810298c:	2210      	movs	r2, #16
 810298e:	409a      	lsls	r2, r3
 8102990:	69bb      	ldr	r3, [r7, #24]
 8102992:	4013      	ands	r3, r2
 8102994:	2b00      	cmp	r3, #0
 8102996:	f000 80a6 	beq.w	8102ae6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 810299a:	687b      	ldr	r3, [r7, #4]
 810299c:	681b      	ldr	r3, [r3, #0]
 810299e:	4a85      	ldr	r2, [pc, #532]	; (8102bb4 <HAL_DMA_IRQHandler+0x690>)
 81029a0:	4293      	cmp	r3, r2
 81029a2:	d04a      	beq.n	8102a3a <HAL_DMA_IRQHandler+0x516>
 81029a4:	687b      	ldr	r3, [r7, #4]
 81029a6:	681b      	ldr	r3, [r3, #0]
 81029a8:	4a83      	ldr	r2, [pc, #524]	; (8102bb8 <HAL_DMA_IRQHandler+0x694>)
 81029aa:	4293      	cmp	r3, r2
 81029ac:	d045      	beq.n	8102a3a <HAL_DMA_IRQHandler+0x516>
 81029ae:	687b      	ldr	r3, [r7, #4]
 81029b0:	681b      	ldr	r3, [r3, #0]
 81029b2:	4a82      	ldr	r2, [pc, #520]	; (8102bbc <HAL_DMA_IRQHandler+0x698>)
 81029b4:	4293      	cmp	r3, r2
 81029b6:	d040      	beq.n	8102a3a <HAL_DMA_IRQHandler+0x516>
 81029b8:	687b      	ldr	r3, [r7, #4]
 81029ba:	681b      	ldr	r3, [r3, #0]
 81029bc:	4a80      	ldr	r2, [pc, #512]	; (8102bc0 <HAL_DMA_IRQHandler+0x69c>)
 81029be:	4293      	cmp	r3, r2
 81029c0:	d03b      	beq.n	8102a3a <HAL_DMA_IRQHandler+0x516>
 81029c2:	687b      	ldr	r3, [r7, #4]
 81029c4:	681b      	ldr	r3, [r3, #0]
 81029c6:	4a7f      	ldr	r2, [pc, #508]	; (8102bc4 <HAL_DMA_IRQHandler+0x6a0>)
 81029c8:	4293      	cmp	r3, r2
 81029ca:	d036      	beq.n	8102a3a <HAL_DMA_IRQHandler+0x516>
 81029cc:	687b      	ldr	r3, [r7, #4]
 81029ce:	681b      	ldr	r3, [r3, #0]
 81029d0:	4a7d      	ldr	r2, [pc, #500]	; (8102bc8 <HAL_DMA_IRQHandler+0x6a4>)
 81029d2:	4293      	cmp	r3, r2
 81029d4:	d031      	beq.n	8102a3a <HAL_DMA_IRQHandler+0x516>
 81029d6:	687b      	ldr	r3, [r7, #4]
 81029d8:	681b      	ldr	r3, [r3, #0]
 81029da:	4a7c      	ldr	r2, [pc, #496]	; (8102bcc <HAL_DMA_IRQHandler+0x6a8>)
 81029dc:	4293      	cmp	r3, r2
 81029de:	d02c      	beq.n	8102a3a <HAL_DMA_IRQHandler+0x516>
 81029e0:	687b      	ldr	r3, [r7, #4]
 81029e2:	681b      	ldr	r3, [r3, #0]
 81029e4:	4a7a      	ldr	r2, [pc, #488]	; (8102bd0 <HAL_DMA_IRQHandler+0x6ac>)
 81029e6:	4293      	cmp	r3, r2
 81029e8:	d027      	beq.n	8102a3a <HAL_DMA_IRQHandler+0x516>
 81029ea:	687b      	ldr	r3, [r7, #4]
 81029ec:	681b      	ldr	r3, [r3, #0]
 81029ee:	4a79      	ldr	r2, [pc, #484]	; (8102bd4 <HAL_DMA_IRQHandler+0x6b0>)
 81029f0:	4293      	cmp	r3, r2
 81029f2:	d022      	beq.n	8102a3a <HAL_DMA_IRQHandler+0x516>
 81029f4:	687b      	ldr	r3, [r7, #4]
 81029f6:	681b      	ldr	r3, [r3, #0]
 81029f8:	4a77      	ldr	r2, [pc, #476]	; (8102bd8 <HAL_DMA_IRQHandler+0x6b4>)
 81029fa:	4293      	cmp	r3, r2
 81029fc:	d01d      	beq.n	8102a3a <HAL_DMA_IRQHandler+0x516>
 81029fe:	687b      	ldr	r3, [r7, #4]
 8102a00:	681b      	ldr	r3, [r3, #0]
 8102a02:	4a76      	ldr	r2, [pc, #472]	; (8102bdc <HAL_DMA_IRQHandler+0x6b8>)
 8102a04:	4293      	cmp	r3, r2
 8102a06:	d018      	beq.n	8102a3a <HAL_DMA_IRQHandler+0x516>
 8102a08:	687b      	ldr	r3, [r7, #4]
 8102a0a:	681b      	ldr	r3, [r3, #0]
 8102a0c:	4a74      	ldr	r2, [pc, #464]	; (8102be0 <HAL_DMA_IRQHandler+0x6bc>)
 8102a0e:	4293      	cmp	r3, r2
 8102a10:	d013      	beq.n	8102a3a <HAL_DMA_IRQHandler+0x516>
 8102a12:	687b      	ldr	r3, [r7, #4]
 8102a14:	681b      	ldr	r3, [r3, #0]
 8102a16:	4a73      	ldr	r2, [pc, #460]	; (8102be4 <HAL_DMA_IRQHandler+0x6c0>)
 8102a18:	4293      	cmp	r3, r2
 8102a1a:	d00e      	beq.n	8102a3a <HAL_DMA_IRQHandler+0x516>
 8102a1c:	687b      	ldr	r3, [r7, #4]
 8102a1e:	681b      	ldr	r3, [r3, #0]
 8102a20:	4a71      	ldr	r2, [pc, #452]	; (8102be8 <HAL_DMA_IRQHandler+0x6c4>)
 8102a22:	4293      	cmp	r3, r2
 8102a24:	d009      	beq.n	8102a3a <HAL_DMA_IRQHandler+0x516>
 8102a26:	687b      	ldr	r3, [r7, #4]
 8102a28:	681b      	ldr	r3, [r3, #0]
 8102a2a:	4a70      	ldr	r2, [pc, #448]	; (8102bec <HAL_DMA_IRQHandler+0x6c8>)
 8102a2c:	4293      	cmp	r3, r2
 8102a2e:	d004      	beq.n	8102a3a <HAL_DMA_IRQHandler+0x516>
 8102a30:	687b      	ldr	r3, [r7, #4]
 8102a32:	681b      	ldr	r3, [r3, #0]
 8102a34:	4a6e      	ldr	r2, [pc, #440]	; (8102bf0 <HAL_DMA_IRQHandler+0x6cc>)
 8102a36:	4293      	cmp	r3, r2
 8102a38:	d10a      	bne.n	8102a50 <HAL_DMA_IRQHandler+0x52c>
 8102a3a:	687b      	ldr	r3, [r7, #4]
 8102a3c:	681b      	ldr	r3, [r3, #0]
 8102a3e:	681b      	ldr	r3, [r3, #0]
 8102a40:	f003 0308 	and.w	r3, r3, #8
 8102a44:	2b00      	cmp	r3, #0
 8102a46:	bf14      	ite	ne
 8102a48:	2301      	movne	r3, #1
 8102a4a:	2300      	moveq	r3, #0
 8102a4c:	b2db      	uxtb	r3, r3
 8102a4e:	e009      	b.n	8102a64 <HAL_DMA_IRQHandler+0x540>
 8102a50:	687b      	ldr	r3, [r7, #4]
 8102a52:	681b      	ldr	r3, [r3, #0]
 8102a54:	681b      	ldr	r3, [r3, #0]
 8102a56:	f003 0304 	and.w	r3, r3, #4
 8102a5a:	2b00      	cmp	r3, #0
 8102a5c:	bf14      	ite	ne
 8102a5e:	2301      	movne	r3, #1
 8102a60:	2300      	moveq	r3, #0
 8102a62:	b2db      	uxtb	r3, r3
 8102a64:	2b00      	cmp	r3, #0
 8102a66:	d03e      	beq.n	8102ae6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8102a68:	687b      	ldr	r3, [r7, #4]
 8102a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102a6c:	f003 031f 	and.w	r3, r3, #31
 8102a70:	2210      	movs	r2, #16
 8102a72:	409a      	lsls	r2, r3
 8102a74:	6a3b      	ldr	r3, [r7, #32]
 8102a76:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8102a78:	687b      	ldr	r3, [r7, #4]
 8102a7a:	681b      	ldr	r3, [r3, #0]
 8102a7c:	681b      	ldr	r3, [r3, #0]
 8102a7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8102a82:	2b00      	cmp	r3, #0
 8102a84:	d018      	beq.n	8102ab8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8102a86:	687b      	ldr	r3, [r7, #4]
 8102a88:	681b      	ldr	r3, [r3, #0]
 8102a8a:	681b      	ldr	r3, [r3, #0]
 8102a8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8102a90:	2b00      	cmp	r3, #0
 8102a92:	d108      	bne.n	8102aa6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8102a94:	687b      	ldr	r3, [r7, #4]
 8102a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102a98:	2b00      	cmp	r3, #0
 8102a9a:	d024      	beq.n	8102ae6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8102a9c:	687b      	ldr	r3, [r7, #4]
 8102a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102aa0:	6878      	ldr	r0, [r7, #4]
 8102aa2:	4798      	blx	r3
 8102aa4:	e01f      	b.n	8102ae6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8102aa6:	687b      	ldr	r3, [r7, #4]
 8102aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102aaa:	2b00      	cmp	r3, #0
 8102aac:	d01b      	beq.n	8102ae6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8102aae:	687b      	ldr	r3, [r7, #4]
 8102ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102ab2:	6878      	ldr	r0, [r7, #4]
 8102ab4:	4798      	blx	r3
 8102ab6:	e016      	b.n	8102ae6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8102ab8:	687b      	ldr	r3, [r7, #4]
 8102aba:	681b      	ldr	r3, [r3, #0]
 8102abc:	681b      	ldr	r3, [r3, #0]
 8102abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102ac2:	2b00      	cmp	r3, #0
 8102ac4:	d107      	bne.n	8102ad6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8102ac6:	687b      	ldr	r3, [r7, #4]
 8102ac8:	681b      	ldr	r3, [r3, #0]
 8102aca:	681a      	ldr	r2, [r3, #0]
 8102acc:	687b      	ldr	r3, [r7, #4]
 8102ace:	681b      	ldr	r3, [r3, #0]
 8102ad0:	f022 0208 	bic.w	r2, r2, #8
 8102ad4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8102ad6:	687b      	ldr	r3, [r7, #4]
 8102ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102ada:	2b00      	cmp	r3, #0
 8102adc:	d003      	beq.n	8102ae6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8102ade:	687b      	ldr	r3, [r7, #4]
 8102ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102ae2:	6878      	ldr	r0, [r7, #4]
 8102ae4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8102ae6:	687b      	ldr	r3, [r7, #4]
 8102ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102aea:	f003 031f 	and.w	r3, r3, #31
 8102aee:	2220      	movs	r2, #32
 8102af0:	409a      	lsls	r2, r3
 8102af2:	69bb      	ldr	r3, [r7, #24]
 8102af4:	4013      	ands	r3, r2
 8102af6:	2b00      	cmp	r3, #0
 8102af8:	f000 8110 	beq.w	8102d1c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8102afc:	687b      	ldr	r3, [r7, #4]
 8102afe:	681b      	ldr	r3, [r3, #0]
 8102b00:	4a2c      	ldr	r2, [pc, #176]	; (8102bb4 <HAL_DMA_IRQHandler+0x690>)
 8102b02:	4293      	cmp	r3, r2
 8102b04:	d04a      	beq.n	8102b9c <HAL_DMA_IRQHandler+0x678>
 8102b06:	687b      	ldr	r3, [r7, #4]
 8102b08:	681b      	ldr	r3, [r3, #0]
 8102b0a:	4a2b      	ldr	r2, [pc, #172]	; (8102bb8 <HAL_DMA_IRQHandler+0x694>)
 8102b0c:	4293      	cmp	r3, r2
 8102b0e:	d045      	beq.n	8102b9c <HAL_DMA_IRQHandler+0x678>
 8102b10:	687b      	ldr	r3, [r7, #4]
 8102b12:	681b      	ldr	r3, [r3, #0]
 8102b14:	4a29      	ldr	r2, [pc, #164]	; (8102bbc <HAL_DMA_IRQHandler+0x698>)
 8102b16:	4293      	cmp	r3, r2
 8102b18:	d040      	beq.n	8102b9c <HAL_DMA_IRQHandler+0x678>
 8102b1a:	687b      	ldr	r3, [r7, #4]
 8102b1c:	681b      	ldr	r3, [r3, #0]
 8102b1e:	4a28      	ldr	r2, [pc, #160]	; (8102bc0 <HAL_DMA_IRQHandler+0x69c>)
 8102b20:	4293      	cmp	r3, r2
 8102b22:	d03b      	beq.n	8102b9c <HAL_DMA_IRQHandler+0x678>
 8102b24:	687b      	ldr	r3, [r7, #4]
 8102b26:	681b      	ldr	r3, [r3, #0]
 8102b28:	4a26      	ldr	r2, [pc, #152]	; (8102bc4 <HAL_DMA_IRQHandler+0x6a0>)
 8102b2a:	4293      	cmp	r3, r2
 8102b2c:	d036      	beq.n	8102b9c <HAL_DMA_IRQHandler+0x678>
 8102b2e:	687b      	ldr	r3, [r7, #4]
 8102b30:	681b      	ldr	r3, [r3, #0]
 8102b32:	4a25      	ldr	r2, [pc, #148]	; (8102bc8 <HAL_DMA_IRQHandler+0x6a4>)
 8102b34:	4293      	cmp	r3, r2
 8102b36:	d031      	beq.n	8102b9c <HAL_DMA_IRQHandler+0x678>
 8102b38:	687b      	ldr	r3, [r7, #4]
 8102b3a:	681b      	ldr	r3, [r3, #0]
 8102b3c:	4a23      	ldr	r2, [pc, #140]	; (8102bcc <HAL_DMA_IRQHandler+0x6a8>)
 8102b3e:	4293      	cmp	r3, r2
 8102b40:	d02c      	beq.n	8102b9c <HAL_DMA_IRQHandler+0x678>
 8102b42:	687b      	ldr	r3, [r7, #4]
 8102b44:	681b      	ldr	r3, [r3, #0]
 8102b46:	4a22      	ldr	r2, [pc, #136]	; (8102bd0 <HAL_DMA_IRQHandler+0x6ac>)
 8102b48:	4293      	cmp	r3, r2
 8102b4a:	d027      	beq.n	8102b9c <HAL_DMA_IRQHandler+0x678>
 8102b4c:	687b      	ldr	r3, [r7, #4]
 8102b4e:	681b      	ldr	r3, [r3, #0]
 8102b50:	4a20      	ldr	r2, [pc, #128]	; (8102bd4 <HAL_DMA_IRQHandler+0x6b0>)
 8102b52:	4293      	cmp	r3, r2
 8102b54:	d022      	beq.n	8102b9c <HAL_DMA_IRQHandler+0x678>
 8102b56:	687b      	ldr	r3, [r7, #4]
 8102b58:	681b      	ldr	r3, [r3, #0]
 8102b5a:	4a1f      	ldr	r2, [pc, #124]	; (8102bd8 <HAL_DMA_IRQHandler+0x6b4>)
 8102b5c:	4293      	cmp	r3, r2
 8102b5e:	d01d      	beq.n	8102b9c <HAL_DMA_IRQHandler+0x678>
 8102b60:	687b      	ldr	r3, [r7, #4]
 8102b62:	681b      	ldr	r3, [r3, #0]
 8102b64:	4a1d      	ldr	r2, [pc, #116]	; (8102bdc <HAL_DMA_IRQHandler+0x6b8>)
 8102b66:	4293      	cmp	r3, r2
 8102b68:	d018      	beq.n	8102b9c <HAL_DMA_IRQHandler+0x678>
 8102b6a:	687b      	ldr	r3, [r7, #4]
 8102b6c:	681b      	ldr	r3, [r3, #0]
 8102b6e:	4a1c      	ldr	r2, [pc, #112]	; (8102be0 <HAL_DMA_IRQHandler+0x6bc>)
 8102b70:	4293      	cmp	r3, r2
 8102b72:	d013      	beq.n	8102b9c <HAL_DMA_IRQHandler+0x678>
 8102b74:	687b      	ldr	r3, [r7, #4]
 8102b76:	681b      	ldr	r3, [r3, #0]
 8102b78:	4a1a      	ldr	r2, [pc, #104]	; (8102be4 <HAL_DMA_IRQHandler+0x6c0>)
 8102b7a:	4293      	cmp	r3, r2
 8102b7c:	d00e      	beq.n	8102b9c <HAL_DMA_IRQHandler+0x678>
 8102b7e:	687b      	ldr	r3, [r7, #4]
 8102b80:	681b      	ldr	r3, [r3, #0]
 8102b82:	4a19      	ldr	r2, [pc, #100]	; (8102be8 <HAL_DMA_IRQHandler+0x6c4>)
 8102b84:	4293      	cmp	r3, r2
 8102b86:	d009      	beq.n	8102b9c <HAL_DMA_IRQHandler+0x678>
 8102b88:	687b      	ldr	r3, [r7, #4]
 8102b8a:	681b      	ldr	r3, [r3, #0]
 8102b8c:	4a17      	ldr	r2, [pc, #92]	; (8102bec <HAL_DMA_IRQHandler+0x6c8>)
 8102b8e:	4293      	cmp	r3, r2
 8102b90:	d004      	beq.n	8102b9c <HAL_DMA_IRQHandler+0x678>
 8102b92:	687b      	ldr	r3, [r7, #4]
 8102b94:	681b      	ldr	r3, [r3, #0]
 8102b96:	4a16      	ldr	r2, [pc, #88]	; (8102bf0 <HAL_DMA_IRQHandler+0x6cc>)
 8102b98:	4293      	cmp	r3, r2
 8102b9a:	d12b      	bne.n	8102bf4 <HAL_DMA_IRQHandler+0x6d0>
 8102b9c:	687b      	ldr	r3, [r7, #4]
 8102b9e:	681b      	ldr	r3, [r3, #0]
 8102ba0:	681b      	ldr	r3, [r3, #0]
 8102ba2:	f003 0310 	and.w	r3, r3, #16
 8102ba6:	2b00      	cmp	r3, #0
 8102ba8:	bf14      	ite	ne
 8102baa:	2301      	movne	r3, #1
 8102bac:	2300      	moveq	r3, #0
 8102bae:	b2db      	uxtb	r3, r3
 8102bb0:	e02a      	b.n	8102c08 <HAL_DMA_IRQHandler+0x6e4>
 8102bb2:	bf00      	nop
 8102bb4:	40020010 	.word	0x40020010
 8102bb8:	40020028 	.word	0x40020028
 8102bbc:	40020040 	.word	0x40020040
 8102bc0:	40020058 	.word	0x40020058
 8102bc4:	40020070 	.word	0x40020070
 8102bc8:	40020088 	.word	0x40020088
 8102bcc:	400200a0 	.word	0x400200a0
 8102bd0:	400200b8 	.word	0x400200b8
 8102bd4:	40020410 	.word	0x40020410
 8102bd8:	40020428 	.word	0x40020428
 8102bdc:	40020440 	.word	0x40020440
 8102be0:	40020458 	.word	0x40020458
 8102be4:	40020470 	.word	0x40020470
 8102be8:	40020488 	.word	0x40020488
 8102bec:	400204a0 	.word	0x400204a0
 8102bf0:	400204b8 	.word	0x400204b8
 8102bf4:	687b      	ldr	r3, [r7, #4]
 8102bf6:	681b      	ldr	r3, [r3, #0]
 8102bf8:	681b      	ldr	r3, [r3, #0]
 8102bfa:	f003 0302 	and.w	r3, r3, #2
 8102bfe:	2b00      	cmp	r3, #0
 8102c00:	bf14      	ite	ne
 8102c02:	2301      	movne	r3, #1
 8102c04:	2300      	moveq	r3, #0
 8102c06:	b2db      	uxtb	r3, r3
 8102c08:	2b00      	cmp	r3, #0
 8102c0a:	f000 8087 	beq.w	8102d1c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8102c0e:	687b      	ldr	r3, [r7, #4]
 8102c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102c12:	f003 031f 	and.w	r3, r3, #31
 8102c16:	2220      	movs	r2, #32
 8102c18:	409a      	lsls	r2, r3
 8102c1a:	6a3b      	ldr	r3, [r7, #32]
 8102c1c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8102c1e:	687b      	ldr	r3, [r7, #4]
 8102c20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8102c24:	b2db      	uxtb	r3, r3
 8102c26:	2b04      	cmp	r3, #4
 8102c28:	d139      	bne.n	8102c9e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8102c2a:	687b      	ldr	r3, [r7, #4]
 8102c2c:	681b      	ldr	r3, [r3, #0]
 8102c2e:	681a      	ldr	r2, [r3, #0]
 8102c30:	687b      	ldr	r3, [r7, #4]
 8102c32:	681b      	ldr	r3, [r3, #0]
 8102c34:	f022 0216 	bic.w	r2, r2, #22
 8102c38:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8102c3a:	687b      	ldr	r3, [r7, #4]
 8102c3c:	681b      	ldr	r3, [r3, #0]
 8102c3e:	695a      	ldr	r2, [r3, #20]
 8102c40:	687b      	ldr	r3, [r7, #4]
 8102c42:	681b      	ldr	r3, [r3, #0]
 8102c44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8102c48:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8102c4a:	687b      	ldr	r3, [r7, #4]
 8102c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102c4e:	2b00      	cmp	r3, #0
 8102c50:	d103      	bne.n	8102c5a <HAL_DMA_IRQHandler+0x736>
 8102c52:	687b      	ldr	r3, [r7, #4]
 8102c54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102c56:	2b00      	cmp	r3, #0
 8102c58:	d007      	beq.n	8102c6a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8102c5a:	687b      	ldr	r3, [r7, #4]
 8102c5c:	681b      	ldr	r3, [r3, #0]
 8102c5e:	681a      	ldr	r2, [r3, #0]
 8102c60:	687b      	ldr	r3, [r7, #4]
 8102c62:	681b      	ldr	r3, [r3, #0]
 8102c64:	f022 0208 	bic.w	r2, r2, #8
 8102c68:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8102c6a:	687b      	ldr	r3, [r7, #4]
 8102c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102c6e:	f003 031f 	and.w	r3, r3, #31
 8102c72:	223f      	movs	r2, #63	; 0x3f
 8102c74:	409a      	lsls	r2, r3
 8102c76:	6a3b      	ldr	r3, [r7, #32]
 8102c78:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8102c7a:	687b      	ldr	r3, [r7, #4]
 8102c7c:	2201      	movs	r2, #1
 8102c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8102c82:	687b      	ldr	r3, [r7, #4]
 8102c84:	2200      	movs	r2, #0
 8102c86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8102c8a:	687b      	ldr	r3, [r7, #4]
 8102c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102c8e:	2b00      	cmp	r3, #0
 8102c90:	f000 834a 	beq.w	8103328 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8102c94:	687b      	ldr	r3, [r7, #4]
 8102c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102c98:	6878      	ldr	r0, [r7, #4]
 8102c9a:	4798      	blx	r3
          }
          return;
 8102c9c:	e344      	b.n	8103328 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8102c9e:	687b      	ldr	r3, [r7, #4]
 8102ca0:	681b      	ldr	r3, [r3, #0]
 8102ca2:	681b      	ldr	r3, [r3, #0]
 8102ca4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8102ca8:	2b00      	cmp	r3, #0
 8102caa:	d018      	beq.n	8102cde <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8102cac:	687b      	ldr	r3, [r7, #4]
 8102cae:	681b      	ldr	r3, [r3, #0]
 8102cb0:	681b      	ldr	r3, [r3, #0]
 8102cb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8102cb6:	2b00      	cmp	r3, #0
 8102cb8:	d108      	bne.n	8102ccc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8102cba:	687b      	ldr	r3, [r7, #4]
 8102cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102cbe:	2b00      	cmp	r3, #0
 8102cc0:	d02c      	beq.n	8102d1c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8102cc2:	687b      	ldr	r3, [r7, #4]
 8102cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102cc6:	6878      	ldr	r0, [r7, #4]
 8102cc8:	4798      	blx	r3
 8102cca:	e027      	b.n	8102d1c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8102ccc:	687b      	ldr	r3, [r7, #4]
 8102cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102cd0:	2b00      	cmp	r3, #0
 8102cd2:	d023      	beq.n	8102d1c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8102cd4:	687b      	ldr	r3, [r7, #4]
 8102cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102cd8:	6878      	ldr	r0, [r7, #4]
 8102cda:	4798      	blx	r3
 8102cdc:	e01e      	b.n	8102d1c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8102cde:	687b      	ldr	r3, [r7, #4]
 8102ce0:	681b      	ldr	r3, [r3, #0]
 8102ce2:	681b      	ldr	r3, [r3, #0]
 8102ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102ce8:	2b00      	cmp	r3, #0
 8102cea:	d10f      	bne.n	8102d0c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8102cec:	687b      	ldr	r3, [r7, #4]
 8102cee:	681b      	ldr	r3, [r3, #0]
 8102cf0:	681a      	ldr	r2, [r3, #0]
 8102cf2:	687b      	ldr	r3, [r7, #4]
 8102cf4:	681b      	ldr	r3, [r3, #0]
 8102cf6:	f022 0210 	bic.w	r2, r2, #16
 8102cfa:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8102cfc:	687b      	ldr	r3, [r7, #4]
 8102cfe:	2201      	movs	r2, #1
 8102d00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8102d04:	687b      	ldr	r3, [r7, #4]
 8102d06:	2200      	movs	r2, #0
 8102d08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8102d0c:	687b      	ldr	r3, [r7, #4]
 8102d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102d10:	2b00      	cmp	r3, #0
 8102d12:	d003      	beq.n	8102d1c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8102d14:	687b      	ldr	r3, [r7, #4]
 8102d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102d18:	6878      	ldr	r0, [r7, #4]
 8102d1a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8102d1c:	687b      	ldr	r3, [r7, #4]
 8102d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102d20:	2b00      	cmp	r3, #0
 8102d22:	f000 8306 	beq.w	8103332 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8102d26:	687b      	ldr	r3, [r7, #4]
 8102d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102d2a:	f003 0301 	and.w	r3, r3, #1
 8102d2e:	2b00      	cmp	r3, #0
 8102d30:	f000 8088 	beq.w	8102e44 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8102d34:	687b      	ldr	r3, [r7, #4]
 8102d36:	2204      	movs	r2, #4
 8102d38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8102d3c:	687b      	ldr	r3, [r7, #4]
 8102d3e:	681b      	ldr	r3, [r3, #0]
 8102d40:	4a7a      	ldr	r2, [pc, #488]	; (8102f2c <HAL_DMA_IRQHandler+0xa08>)
 8102d42:	4293      	cmp	r3, r2
 8102d44:	d04a      	beq.n	8102ddc <HAL_DMA_IRQHandler+0x8b8>
 8102d46:	687b      	ldr	r3, [r7, #4]
 8102d48:	681b      	ldr	r3, [r3, #0]
 8102d4a:	4a79      	ldr	r2, [pc, #484]	; (8102f30 <HAL_DMA_IRQHandler+0xa0c>)
 8102d4c:	4293      	cmp	r3, r2
 8102d4e:	d045      	beq.n	8102ddc <HAL_DMA_IRQHandler+0x8b8>
 8102d50:	687b      	ldr	r3, [r7, #4]
 8102d52:	681b      	ldr	r3, [r3, #0]
 8102d54:	4a77      	ldr	r2, [pc, #476]	; (8102f34 <HAL_DMA_IRQHandler+0xa10>)
 8102d56:	4293      	cmp	r3, r2
 8102d58:	d040      	beq.n	8102ddc <HAL_DMA_IRQHandler+0x8b8>
 8102d5a:	687b      	ldr	r3, [r7, #4]
 8102d5c:	681b      	ldr	r3, [r3, #0]
 8102d5e:	4a76      	ldr	r2, [pc, #472]	; (8102f38 <HAL_DMA_IRQHandler+0xa14>)
 8102d60:	4293      	cmp	r3, r2
 8102d62:	d03b      	beq.n	8102ddc <HAL_DMA_IRQHandler+0x8b8>
 8102d64:	687b      	ldr	r3, [r7, #4]
 8102d66:	681b      	ldr	r3, [r3, #0]
 8102d68:	4a74      	ldr	r2, [pc, #464]	; (8102f3c <HAL_DMA_IRQHandler+0xa18>)
 8102d6a:	4293      	cmp	r3, r2
 8102d6c:	d036      	beq.n	8102ddc <HAL_DMA_IRQHandler+0x8b8>
 8102d6e:	687b      	ldr	r3, [r7, #4]
 8102d70:	681b      	ldr	r3, [r3, #0]
 8102d72:	4a73      	ldr	r2, [pc, #460]	; (8102f40 <HAL_DMA_IRQHandler+0xa1c>)
 8102d74:	4293      	cmp	r3, r2
 8102d76:	d031      	beq.n	8102ddc <HAL_DMA_IRQHandler+0x8b8>
 8102d78:	687b      	ldr	r3, [r7, #4]
 8102d7a:	681b      	ldr	r3, [r3, #0]
 8102d7c:	4a71      	ldr	r2, [pc, #452]	; (8102f44 <HAL_DMA_IRQHandler+0xa20>)
 8102d7e:	4293      	cmp	r3, r2
 8102d80:	d02c      	beq.n	8102ddc <HAL_DMA_IRQHandler+0x8b8>
 8102d82:	687b      	ldr	r3, [r7, #4]
 8102d84:	681b      	ldr	r3, [r3, #0]
 8102d86:	4a70      	ldr	r2, [pc, #448]	; (8102f48 <HAL_DMA_IRQHandler+0xa24>)
 8102d88:	4293      	cmp	r3, r2
 8102d8a:	d027      	beq.n	8102ddc <HAL_DMA_IRQHandler+0x8b8>
 8102d8c:	687b      	ldr	r3, [r7, #4]
 8102d8e:	681b      	ldr	r3, [r3, #0]
 8102d90:	4a6e      	ldr	r2, [pc, #440]	; (8102f4c <HAL_DMA_IRQHandler+0xa28>)
 8102d92:	4293      	cmp	r3, r2
 8102d94:	d022      	beq.n	8102ddc <HAL_DMA_IRQHandler+0x8b8>
 8102d96:	687b      	ldr	r3, [r7, #4]
 8102d98:	681b      	ldr	r3, [r3, #0]
 8102d9a:	4a6d      	ldr	r2, [pc, #436]	; (8102f50 <HAL_DMA_IRQHandler+0xa2c>)
 8102d9c:	4293      	cmp	r3, r2
 8102d9e:	d01d      	beq.n	8102ddc <HAL_DMA_IRQHandler+0x8b8>
 8102da0:	687b      	ldr	r3, [r7, #4]
 8102da2:	681b      	ldr	r3, [r3, #0]
 8102da4:	4a6b      	ldr	r2, [pc, #428]	; (8102f54 <HAL_DMA_IRQHandler+0xa30>)
 8102da6:	4293      	cmp	r3, r2
 8102da8:	d018      	beq.n	8102ddc <HAL_DMA_IRQHandler+0x8b8>
 8102daa:	687b      	ldr	r3, [r7, #4]
 8102dac:	681b      	ldr	r3, [r3, #0]
 8102dae:	4a6a      	ldr	r2, [pc, #424]	; (8102f58 <HAL_DMA_IRQHandler+0xa34>)
 8102db0:	4293      	cmp	r3, r2
 8102db2:	d013      	beq.n	8102ddc <HAL_DMA_IRQHandler+0x8b8>
 8102db4:	687b      	ldr	r3, [r7, #4]
 8102db6:	681b      	ldr	r3, [r3, #0]
 8102db8:	4a68      	ldr	r2, [pc, #416]	; (8102f5c <HAL_DMA_IRQHandler+0xa38>)
 8102dba:	4293      	cmp	r3, r2
 8102dbc:	d00e      	beq.n	8102ddc <HAL_DMA_IRQHandler+0x8b8>
 8102dbe:	687b      	ldr	r3, [r7, #4]
 8102dc0:	681b      	ldr	r3, [r3, #0]
 8102dc2:	4a67      	ldr	r2, [pc, #412]	; (8102f60 <HAL_DMA_IRQHandler+0xa3c>)
 8102dc4:	4293      	cmp	r3, r2
 8102dc6:	d009      	beq.n	8102ddc <HAL_DMA_IRQHandler+0x8b8>
 8102dc8:	687b      	ldr	r3, [r7, #4]
 8102dca:	681b      	ldr	r3, [r3, #0]
 8102dcc:	4a65      	ldr	r2, [pc, #404]	; (8102f64 <HAL_DMA_IRQHandler+0xa40>)
 8102dce:	4293      	cmp	r3, r2
 8102dd0:	d004      	beq.n	8102ddc <HAL_DMA_IRQHandler+0x8b8>
 8102dd2:	687b      	ldr	r3, [r7, #4]
 8102dd4:	681b      	ldr	r3, [r3, #0]
 8102dd6:	4a64      	ldr	r2, [pc, #400]	; (8102f68 <HAL_DMA_IRQHandler+0xa44>)
 8102dd8:	4293      	cmp	r3, r2
 8102dda:	d108      	bne.n	8102dee <HAL_DMA_IRQHandler+0x8ca>
 8102ddc:	687b      	ldr	r3, [r7, #4]
 8102dde:	681b      	ldr	r3, [r3, #0]
 8102de0:	681a      	ldr	r2, [r3, #0]
 8102de2:	687b      	ldr	r3, [r7, #4]
 8102de4:	681b      	ldr	r3, [r3, #0]
 8102de6:	f022 0201 	bic.w	r2, r2, #1
 8102dea:	601a      	str	r2, [r3, #0]
 8102dec:	e007      	b.n	8102dfe <HAL_DMA_IRQHandler+0x8da>
 8102dee:	687b      	ldr	r3, [r7, #4]
 8102df0:	681b      	ldr	r3, [r3, #0]
 8102df2:	681a      	ldr	r2, [r3, #0]
 8102df4:	687b      	ldr	r3, [r7, #4]
 8102df6:	681b      	ldr	r3, [r3, #0]
 8102df8:	f022 0201 	bic.w	r2, r2, #1
 8102dfc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8102dfe:	68fb      	ldr	r3, [r7, #12]
 8102e00:	3301      	adds	r3, #1
 8102e02:	60fb      	str	r3, [r7, #12]
 8102e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8102e06:	429a      	cmp	r2, r3
 8102e08:	d307      	bcc.n	8102e1a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8102e0a:	687b      	ldr	r3, [r7, #4]
 8102e0c:	681b      	ldr	r3, [r3, #0]
 8102e0e:	681b      	ldr	r3, [r3, #0]
 8102e10:	f003 0301 	and.w	r3, r3, #1
 8102e14:	2b00      	cmp	r3, #0
 8102e16:	d1f2      	bne.n	8102dfe <HAL_DMA_IRQHandler+0x8da>
 8102e18:	e000      	b.n	8102e1c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8102e1a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8102e1c:	687b      	ldr	r3, [r7, #4]
 8102e1e:	681b      	ldr	r3, [r3, #0]
 8102e20:	681b      	ldr	r3, [r3, #0]
 8102e22:	f003 0301 	and.w	r3, r3, #1
 8102e26:	2b00      	cmp	r3, #0
 8102e28:	d004      	beq.n	8102e34 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8102e2a:	687b      	ldr	r3, [r7, #4]
 8102e2c:	2203      	movs	r2, #3
 8102e2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8102e32:	e003      	b.n	8102e3c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8102e34:	687b      	ldr	r3, [r7, #4]
 8102e36:	2201      	movs	r2, #1
 8102e38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8102e3c:	687b      	ldr	r3, [r7, #4]
 8102e3e:	2200      	movs	r2, #0
 8102e40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8102e44:	687b      	ldr	r3, [r7, #4]
 8102e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102e48:	2b00      	cmp	r3, #0
 8102e4a:	f000 8272 	beq.w	8103332 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8102e4e:	687b      	ldr	r3, [r7, #4]
 8102e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102e52:	6878      	ldr	r0, [r7, #4]
 8102e54:	4798      	blx	r3
 8102e56:	e26c      	b.n	8103332 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8102e58:	687b      	ldr	r3, [r7, #4]
 8102e5a:	681b      	ldr	r3, [r3, #0]
 8102e5c:	4a43      	ldr	r2, [pc, #268]	; (8102f6c <HAL_DMA_IRQHandler+0xa48>)
 8102e5e:	4293      	cmp	r3, r2
 8102e60:	d022      	beq.n	8102ea8 <HAL_DMA_IRQHandler+0x984>
 8102e62:	687b      	ldr	r3, [r7, #4]
 8102e64:	681b      	ldr	r3, [r3, #0]
 8102e66:	4a42      	ldr	r2, [pc, #264]	; (8102f70 <HAL_DMA_IRQHandler+0xa4c>)
 8102e68:	4293      	cmp	r3, r2
 8102e6a:	d01d      	beq.n	8102ea8 <HAL_DMA_IRQHandler+0x984>
 8102e6c:	687b      	ldr	r3, [r7, #4]
 8102e6e:	681b      	ldr	r3, [r3, #0]
 8102e70:	4a40      	ldr	r2, [pc, #256]	; (8102f74 <HAL_DMA_IRQHandler+0xa50>)
 8102e72:	4293      	cmp	r3, r2
 8102e74:	d018      	beq.n	8102ea8 <HAL_DMA_IRQHandler+0x984>
 8102e76:	687b      	ldr	r3, [r7, #4]
 8102e78:	681b      	ldr	r3, [r3, #0]
 8102e7a:	4a3f      	ldr	r2, [pc, #252]	; (8102f78 <HAL_DMA_IRQHandler+0xa54>)
 8102e7c:	4293      	cmp	r3, r2
 8102e7e:	d013      	beq.n	8102ea8 <HAL_DMA_IRQHandler+0x984>
 8102e80:	687b      	ldr	r3, [r7, #4]
 8102e82:	681b      	ldr	r3, [r3, #0]
 8102e84:	4a3d      	ldr	r2, [pc, #244]	; (8102f7c <HAL_DMA_IRQHandler+0xa58>)
 8102e86:	4293      	cmp	r3, r2
 8102e88:	d00e      	beq.n	8102ea8 <HAL_DMA_IRQHandler+0x984>
 8102e8a:	687b      	ldr	r3, [r7, #4]
 8102e8c:	681b      	ldr	r3, [r3, #0]
 8102e8e:	4a3c      	ldr	r2, [pc, #240]	; (8102f80 <HAL_DMA_IRQHandler+0xa5c>)
 8102e90:	4293      	cmp	r3, r2
 8102e92:	d009      	beq.n	8102ea8 <HAL_DMA_IRQHandler+0x984>
 8102e94:	687b      	ldr	r3, [r7, #4]
 8102e96:	681b      	ldr	r3, [r3, #0]
 8102e98:	4a3a      	ldr	r2, [pc, #232]	; (8102f84 <HAL_DMA_IRQHandler+0xa60>)
 8102e9a:	4293      	cmp	r3, r2
 8102e9c:	d004      	beq.n	8102ea8 <HAL_DMA_IRQHandler+0x984>
 8102e9e:	687b      	ldr	r3, [r7, #4]
 8102ea0:	681b      	ldr	r3, [r3, #0]
 8102ea2:	4a39      	ldr	r2, [pc, #228]	; (8102f88 <HAL_DMA_IRQHandler+0xa64>)
 8102ea4:	4293      	cmp	r3, r2
 8102ea6:	d101      	bne.n	8102eac <HAL_DMA_IRQHandler+0x988>
 8102ea8:	2301      	movs	r3, #1
 8102eaa:	e000      	b.n	8102eae <HAL_DMA_IRQHandler+0x98a>
 8102eac:	2300      	movs	r3, #0
 8102eae:	2b00      	cmp	r3, #0
 8102eb0:	f000 823f 	beq.w	8103332 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8102eb4:	687b      	ldr	r3, [r7, #4]
 8102eb6:	681b      	ldr	r3, [r3, #0]
 8102eb8:	681b      	ldr	r3, [r3, #0]
 8102eba:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8102ebc:	687b      	ldr	r3, [r7, #4]
 8102ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102ec0:	f003 031f 	and.w	r3, r3, #31
 8102ec4:	2204      	movs	r2, #4
 8102ec6:	409a      	lsls	r2, r3
 8102ec8:	697b      	ldr	r3, [r7, #20]
 8102eca:	4013      	ands	r3, r2
 8102ecc:	2b00      	cmp	r3, #0
 8102ece:	f000 80cd 	beq.w	810306c <HAL_DMA_IRQHandler+0xb48>
 8102ed2:	693b      	ldr	r3, [r7, #16]
 8102ed4:	f003 0304 	and.w	r3, r3, #4
 8102ed8:	2b00      	cmp	r3, #0
 8102eda:	f000 80c7 	beq.w	810306c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8102ede:	687b      	ldr	r3, [r7, #4]
 8102ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102ee2:	f003 031f 	and.w	r3, r3, #31
 8102ee6:	2204      	movs	r2, #4
 8102ee8:	409a      	lsls	r2, r3
 8102eea:	69fb      	ldr	r3, [r7, #28]
 8102eec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8102eee:	693b      	ldr	r3, [r7, #16]
 8102ef0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8102ef4:	2b00      	cmp	r3, #0
 8102ef6:	d049      	beq.n	8102f8c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8102ef8:	693b      	ldr	r3, [r7, #16]
 8102efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8102efe:	2b00      	cmp	r3, #0
 8102f00:	d109      	bne.n	8102f16 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8102f02:	687b      	ldr	r3, [r7, #4]
 8102f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102f06:	2b00      	cmp	r3, #0
 8102f08:	f000 8210 	beq.w	810332c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8102f0c:	687b      	ldr	r3, [r7, #4]
 8102f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102f10:	6878      	ldr	r0, [r7, #4]
 8102f12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8102f14:	e20a      	b.n	810332c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8102f16:	687b      	ldr	r3, [r7, #4]
 8102f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102f1a:	2b00      	cmp	r3, #0
 8102f1c:	f000 8206 	beq.w	810332c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8102f20:	687b      	ldr	r3, [r7, #4]
 8102f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102f24:	6878      	ldr	r0, [r7, #4]
 8102f26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8102f28:	e200      	b.n	810332c <HAL_DMA_IRQHandler+0xe08>
 8102f2a:	bf00      	nop
 8102f2c:	40020010 	.word	0x40020010
 8102f30:	40020028 	.word	0x40020028
 8102f34:	40020040 	.word	0x40020040
 8102f38:	40020058 	.word	0x40020058
 8102f3c:	40020070 	.word	0x40020070
 8102f40:	40020088 	.word	0x40020088
 8102f44:	400200a0 	.word	0x400200a0
 8102f48:	400200b8 	.word	0x400200b8
 8102f4c:	40020410 	.word	0x40020410
 8102f50:	40020428 	.word	0x40020428
 8102f54:	40020440 	.word	0x40020440
 8102f58:	40020458 	.word	0x40020458
 8102f5c:	40020470 	.word	0x40020470
 8102f60:	40020488 	.word	0x40020488
 8102f64:	400204a0 	.word	0x400204a0
 8102f68:	400204b8 	.word	0x400204b8
 8102f6c:	58025408 	.word	0x58025408
 8102f70:	5802541c 	.word	0x5802541c
 8102f74:	58025430 	.word	0x58025430
 8102f78:	58025444 	.word	0x58025444
 8102f7c:	58025458 	.word	0x58025458
 8102f80:	5802546c 	.word	0x5802546c
 8102f84:	58025480 	.word	0x58025480
 8102f88:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8102f8c:	693b      	ldr	r3, [r7, #16]
 8102f8e:	f003 0320 	and.w	r3, r3, #32
 8102f92:	2b00      	cmp	r3, #0
 8102f94:	d160      	bne.n	8103058 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8102f96:	687b      	ldr	r3, [r7, #4]
 8102f98:	681b      	ldr	r3, [r3, #0]
 8102f9a:	4a7f      	ldr	r2, [pc, #508]	; (8103198 <HAL_DMA_IRQHandler+0xc74>)
 8102f9c:	4293      	cmp	r3, r2
 8102f9e:	d04a      	beq.n	8103036 <HAL_DMA_IRQHandler+0xb12>
 8102fa0:	687b      	ldr	r3, [r7, #4]
 8102fa2:	681b      	ldr	r3, [r3, #0]
 8102fa4:	4a7d      	ldr	r2, [pc, #500]	; (810319c <HAL_DMA_IRQHandler+0xc78>)
 8102fa6:	4293      	cmp	r3, r2
 8102fa8:	d045      	beq.n	8103036 <HAL_DMA_IRQHandler+0xb12>
 8102faa:	687b      	ldr	r3, [r7, #4]
 8102fac:	681b      	ldr	r3, [r3, #0]
 8102fae:	4a7c      	ldr	r2, [pc, #496]	; (81031a0 <HAL_DMA_IRQHandler+0xc7c>)
 8102fb0:	4293      	cmp	r3, r2
 8102fb2:	d040      	beq.n	8103036 <HAL_DMA_IRQHandler+0xb12>
 8102fb4:	687b      	ldr	r3, [r7, #4]
 8102fb6:	681b      	ldr	r3, [r3, #0]
 8102fb8:	4a7a      	ldr	r2, [pc, #488]	; (81031a4 <HAL_DMA_IRQHandler+0xc80>)
 8102fba:	4293      	cmp	r3, r2
 8102fbc:	d03b      	beq.n	8103036 <HAL_DMA_IRQHandler+0xb12>
 8102fbe:	687b      	ldr	r3, [r7, #4]
 8102fc0:	681b      	ldr	r3, [r3, #0]
 8102fc2:	4a79      	ldr	r2, [pc, #484]	; (81031a8 <HAL_DMA_IRQHandler+0xc84>)
 8102fc4:	4293      	cmp	r3, r2
 8102fc6:	d036      	beq.n	8103036 <HAL_DMA_IRQHandler+0xb12>
 8102fc8:	687b      	ldr	r3, [r7, #4]
 8102fca:	681b      	ldr	r3, [r3, #0]
 8102fcc:	4a77      	ldr	r2, [pc, #476]	; (81031ac <HAL_DMA_IRQHandler+0xc88>)
 8102fce:	4293      	cmp	r3, r2
 8102fd0:	d031      	beq.n	8103036 <HAL_DMA_IRQHandler+0xb12>
 8102fd2:	687b      	ldr	r3, [r7, #4]
 8102fd4:	681b      	ldr	r3, [r3, #0]
 8102fd6:	4a76      	ldr	r2, [pc, #472]	; (81031b0 <HAL_DMA_IRQHandler+0xc8c>)
 8102fd8:	4293      	cmp	r3, r2
 8102fda:	d02c      	beq.n	8103036 <HAL_DMA_IRQHandler+0xb12>
 8102fdc:	687b      	ldr	r3, [r7, #4]
 8102fde:	681b      	ldr	r3, [r3, #0]
 8102fe0:	4a74      	ldr	r2, [pc, #464]	; (81031b4 <HAL_DMA_IRQHandler+0xc90>)
 8102fe2:	4293      	cmp	r3, r2
 8102fe4:	d027      	beq.n	8103036 <HAL_DMA_IRQHandler+0xb12>
 8102fe6:	687b      	ldr	r3, [r7, #4]
 8102fe8:	681b      	ldr	r3, [r3, #0]
 8102fea:	4a73      	ldr	r2, [pc, #460]	; (81031b8 <HAL_DMA_IRQHandler+0xc94>)
 8102fec:	4293      	cmp	r3, r2
 8102fee:	d022      	beq.n	8103036 <HAL_DMA_IRQHandler+0xb12>
 8102ff0:	687b      	ldr	r3, [r7, #4]
 8102ff2:	681b      	ldr	r3, [r3, #0]
 8102ff4:	4a71      	ldr	r2, [pc, #452]	; (81031bc <HAL_DMA_IRQHandler+0xc98>)
 8102ff6:	4293      	cmp	r3, r2
 8102ff8:	d01d      	beq.n	8103036 <HAL_DMA_IRQHandler+0xb12>
 8102ffa:	687b      	ldr	r3, [r7, #4]
 8102ffc:	681b      	ldr	r3, [r3, #0]
 8102ffe:	4a70      	ldr	r2, [pc, #448]	; (81031c0 <HAL_DMA_IRQHandler+0xc9c>)
 8103000:	4293      	cmp	r3, r2
 8103002:	d018      	beq.n	8103036 <HAL_DMA_IRQHandler+0xb12>
 8103004:	687b      	ldr	r3, [r7, #4]
 8103006:	681b      	ldr	r3, [r3, #0]
 8103008:	4a6e      	ldr	r2, [pc, #440]	; (81031c4 <HAL_DMA_IRQHandler+0xca0>)
 810300a:	4293      	cmp	r3, r2
 810300c:	d013      	beq.n	8103036 <HAL_DMA_IRQHandler+0xb12>
 810300e:	687b      	ldr	r3, [r7, #4]
 8103010:	681b      	ldr	r3, [r3, #0]
 8103012:	4a6d      	ldr	r2, [pc, #436]	; (81031c8 <HAL_DMA_IRQHandler+0xca4>)
 8103014:	4293      	cmp	r3, r2
 8103016:	d00e      	beq.n	8103036 <HAL_DMA_IRQHandler+0xb12>
 8103018:	687b      	ldr	r3, [r7, #4]
 810301a:	681b      	ldr	r3, [r3, #0]
 810301c:	4a6b      	ldr	r2, [pc, #428]	; (81031cc <HAL_DMA_IRQHandler+0xca8>)
 810301e:	4293      	cmp	r3, r2
 8103020:	d009      	beq.n	8103036 <HAL_DMA_IRQHandler+0xb12>
 8103022:	687b      	ldr	r3, [r7, #4]
 8103024:	681b      	ldr	r3, [r3, #0]
 8103026:	4a6a      	ldr	r2, [pc, #424]	; (81031d0 <HAL_DMA_IRQHandler+0xcac>)
 8103028:	4293      	cmp	r3, r2
 810302a:	d004      	beq.n	8103036 <HAL_DMA_IRQHandler+0xb12>
 810302c:	687b      	ldr	r3, [r7, #4]
 810302e:	681b      	ldr	r3, [r3, #0]
 8103030:	4a68      	ldr	r2, [pc, #416]	; (81031d4 <HAL_DMA_IRQHandler+0xcb0>)
 8103032:	4293      	cmp	r3, r2
 8103034:	d108      	bne.n	8103048 <HAL_DMA_IRQHandler+0xb24>
 8103036:	687b      	ldr	r3, [r7, #4]
 8103038:	681b      	ldr	r3, [r3, #0]
 810303a:	681a      	ldr	r2, [r3, #0]
 810303c:	687b      	ldr	r3, [r7, #4]
 810303e:	681b      	ldr	r3, [r3, #0]
 8103040:	f022 0208 	bic.w	r2, r2, #8
 8103044:	601a      	str	r2, [r3, #0]
 8103046:	e007      	b.n	8103058 <HAL_DMA_IRQHandler+0xb34>
 8103048:	687b      	ldr	r3, [r7, #4]
 810304a:	681b      	ldr	r3, [r3, #0]
 810304c:	681a      	ldr	r2, [r3, #0]
 810304e:	687b      	ldr	r3, [r7, #4]
 8103050:	681b      	ldr	r3, [r3, #0]
 8103052:	f022 0204 	bic.w	r2, r2, #4
 8103056:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8103058:	687b      	ldr	r3, [r7, #4]
 810305a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810305c:	2b00      	cmp	r3, #0
 810305e:	f000 8165 	beq.w	810332c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8103062:	687b      	ldr	r3, [r7, #4]
 8103064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103066:	6878      	ldr	r0, [r7, #4]
 8103068:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810306a:	e15f      	b.n	810332c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 810306c:	687b      	ldr	r3, [r7, #4]
 810306e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103070:	f003 031f 	and.w	r3, r3, #31
 8103074:	2202      	movs	r2, #2
 8103076:	409a      	lsls	r2, r3
 8103078:	697b      	ldr	r3, [r7, #20]
 810307a:	4013      	ands	r3, r2
 810307c:	2b00      	cmp	r3, #0
 810307e:	f000 80c5 	beq.w	810320c <HAL_DMA_IRQHandler+0xce8>
 8103082:	693b      	ldr	r3, [r7, #16]
 8103084:	f003 0302 	and.w	r3, r3, #2
 8103088:	2b00      	cmp	r3, #0
 810308a:	f000 80bf 	beq.w	810320c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 810308e:	687b      	ldr	r3, [r7, #4]
 8103090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103092:	f003 031f 	and.w	r3, r3, #31
 8103096:	2202      	movs	r2, #2
 8103098:	409a      	lsls	r2, r3
 810309a:	69fb      	ldr	r3, [r7, #28]
 810309c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810309e:	693b      	ldr	r3, [r7, #16]
 81030a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81030a4:	2b00      	cmp	r3, #0
 81030a6:	d018      	beq.n	81030da <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 81030a8:	693b      	ldr	r3, [r7, #16]
 81030aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81030ae:	2b00      	cmp	r3, #0
 81030b0:	d109      	bne.n	81030c6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 81030b2:	687b      	ldr	r3, [r7, #4]
 81030b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81030b6:	2b00      	cmp	r3, #0
 81030b8:	f000 813a 	beq.w	8103330 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 81030bc:	687b      	ldr	r3, [r7, #4]
 81030be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81030c0:	6878      	ldr	r0, [r7, #4]
 81030c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81030c4:	e134      	b.n	8103330 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 81030c6:	687b      	ldr	r3, [r7, #4]
 81030c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81030ca:	2b00      	cmp	r3, #0
 81030cc:	f000 8130 	beq.w	8103330 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 81030d0:	687b      	ldr	r3, [r7, #4]
 81030d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81030d4:	6878      	ldr	r0, [r7, #4]
 81030d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81030d8:	e12a      	b.n	8103330 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 81030da:	693b      	ldr	r3, [r7, #16]
 81030dc:	f003 0320 	and.w	r3, r3, #32
 81030e0:	2b00      	cmp	r3, #0
 81030e2:	f040 8089 	bne.w	81031f8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 81030e6:	687b      	ldr	r3, [r7, #4]
 81030e8:	681b      	ldr	r3, [r3, #0]
 81030ea:	4a2b      	ldr	r2, [pc, #172]	; (8103198 <HAL_DMA_IRQHandler+0xc74>)
 81030ec:	4293      	cmp	r3, r2
 81030ee:	d04a      	beq.n	8103186 <HAL_DMA_IRQHandler+0xc62>
 81030f0:	687b      	ldr	r3, [r7, #4]
 81030f2:	681b      	ldr	r3, [r3, #0]
 81030f4:	4a29      	ldr	r2, [pc, #164]	; (810319c <HAL_DMA_IRQHandler+0xc78>)
 81030f6:	4293      	cmp	r3, r2
 81030f8:	d045      	beq.n	8103186 <HAL_DMA_IRQHandler+0xc62>
 81030fa:	687b      	ldr	r3, [r7, #4]
 81030fc:	681b      	ldr	r3, [r3, #0]
 81030fe:	4a28      	ldr	r2, [pc, #160]	; (81031a0 <HAL_DMA_IRQHandler+0xc7c>)
 8103100:	4293      	cmp	r3, r2
 8103102:	d040      	beq.n	8103186 <HAL_DMA_IRQHandler+0xc62>
 8103104:	687b      	ldr	r3, [r7, #4]
 8103106:	681b      	ldr	r3, [r3, #0]
 8103108:	4a26      	ldr	r2, [pc, #152]	; (81031a4 <HAL_DMA_IRQHandler+0xc80>)
 810310a:	4293      	cmp	r3, r2
 810310c:	d03b      	beq.n	8103186 <HAL_DMA_IRQHandler+0xc62>
 810310e:	687b      	ldr	r3, [r7, #4]
 8103110:	681b      	ldr	r3, [r3, #0]
 8103112:	4a25      	ldr	r2, [pc, #148]	; (81031a8 <HAL_DMA_IRQHandler+0xc84>)
 8103114:	4293      	cmp	r3, r2
 8103116:	d036      	beq.n	8103186 <HAL_DMA_IRQHandler+0xc62>
 8103118:	687b      	ldr	r3, [r7, #4]
 810311a:	681b      	ldr	r3, [r3, #0]
 810311c:	4a23      	ldr	r2, [pc, #140]	; (81031ac <HAL_DMA_IRQHandler+0xc88>)
 810311e:	4293      	cmp	r3, r2
 8103120:	d031      	beq.n	8103186 <HAL_DMA_IRQHandler+0xc62>
 8103122:	687b      	ldr	r3, [r7, #4]
 8103124:	681b      	ldr	r3, [r3, #0]
 8103126:	4a22      	ldr	r2, [pc, #136]	; (81031b0 <HAL_DMA_IRQHandler+0xc8c>)
 8103128:	4293      	cmp	r3, r2
 810312a:	d02c      	beq.n	8103186 <HAL_DMA_IRQHandler+0xc62>
 810312c:	687b      	ldr	r3, [r7, #4]
 810312e:	681b      	ldr	r3, [r3, #0]
 8103130:	4a20      	ldr	r2, [pc, #128]	; (81031b4 <HAL_DMA_IRQHandler+0xc90>)
 8103132:	4293      	cmp	r3, r2
 8103134:	d027      	beq.n	8103186 <HAL_DMA_IRQHandler+0xc62>
 8103136:	687b      	ldr	r3, [r7, #4]
 8103138:	681b      	ldr	r3, [r3, #0]
 810313a:	4a1f      	ldr	r2, [pc, #124]	; (81031b8 <HAL_DMA_IRQHandler+0xc94>)
 810313c:	4293      	cmp	r3, r2
 810313e:	d022      	beq.n	8103186 <HAL_DMA_IRQHandler+0xc62>
 8103140:	687b      	ldr	r3, [r7, #4]
 8103142:	681b      	ldr	r3, [r3, #0]
 8103144:	4a1d      	ldr	r2, [pc, #116]	; (81031bc <HAL_DMA_IRQHandler+0xc98>)
 8103146:	4293      	cmp	r3, r2
 8103148:	d01d      	beq.n	8103186 <HAL_DMA_IRQHandler+0xc62>
 810314a:	687b      	ldr	r3, [r7, #4]
 810314c:	681b      	ldr	r3, [r3, #0]
 810314e:	4a1c      	ldr	r2, [pc, #112]	; (81031c0 <HAL_DMA_IRQHandler+0xc9c>)
 8103150:	4293      	cmp	r3, r2
 8103152:	d018      	beq.n	8103186 <HAL_DMA_IRQHandler+0xc62>
 8103154:	687b      	ldr	r3, [r7, #4]
 8103156:	681b      	ldr	r3, [r3, #0]
 8103158:	4a1a      	ldr	r2, [pc, #104]	; (81031c4 <HAL_DMA_IRQHandler+0xca0>)
 810315a:	4293      	cmp	r3, r2
 810315c:	d013      	beq.n	8103186 <HAL_DMA_IRQHandler+0xc62>
 810315e:	687b      	ldr	r3, [r7, #4]
 8103160:	681b      	ldr	r3, [r3, #0]
 8103162:	4a19      	ldr	r2, [pc, #100]	; (81031c8 <HAL_DMA_IRQHandler+0xca4>)
 8103164:	4293      	cmp	r3, r2
 8103166:	d00e      	beq.n	8103186 <HAL_DMA_IRQHandler+0xc62>
 8103168:	687b      	ldr	r3, [r7, #4]
 810316a:	681b      	ldr	r3, [r3, #0]
 810316c:	4a17      	ldr	r2, [pc, #92]	; (81031cc <HAL_DMA_IRQHandler+0xca8>)
 810316e:	4293      	cmp	r3, r2
 8103170:	d009      	beq.n	8103186 <HAL_DMA_IRQHandler+0xc62>
 8103172:	687b      	ldr	r3, [r7, #4]
 8103174:	681b      	ldr	r3, [r3, #0]
 8103176:	4a16      	ldr	r2, [pc, #88]	; (81031d0 <HAL_DMA_IRQHandler+0xcac>)
 8103178:	4293      	cmp	r3, r2
 810317a:	d004      	beq.n	8103186 <HAL_DMA_IRQHandler+0xc62>
 810317c:	687b      	ldr	r3, [r7, #4]
 810317e:	681b      	ldr	r3, [r3, #0]
 8103180:	4a14      	ldr	r2, [pc, #80]	; (81031d4 <HAL_DMA_IRQHandler+0xcb0>)
 8103182:	4293      	cmp	r3, r2
 8103184:	d128      	bne.n	81031d8 <HAL_DMA_IRQHandler+0xcb4>
 8103186:	687b      	ldr	r3, [r7, #4]
 8103188:	681b      	ldr	r3, [r3, #0]
 810318a:	681a      	ldr	r2, [r3, #0]
 810318c:	687b      	ldr	r3, [r7, #4]
 810318e:	681b      	ldr	r3, [r3, #0]
 8103190:	f022 0214 	bic.w	r2, r2, #20
 8103194:	601a      	str	r2, [r3, #0]
 8103196:	e027      	b.n	81031e8 <HAL_DMA_IRQHandler+0xcc4>
 8103198:	40020010 	.word	0x40020010
 810319c:	40020028 	.word	0x40020028
 81031a0:	40020040 	.word	0x40020040
 81031a4:	40020058 	.word	0x40020058
 81031a8:	40020070 	.word	0x40020070
 81031ac:	40020088 	.word	0x40020088
 81031b0:	400200a0 	.word	0x400200a0
 81031b4:	400200b8 	.word	0x400200b8
 81031b8:	40020410 	.word	0x40020410
 81031bc:	40020428 	.word	0x40020428
 81031c0:	40020440 	.word	0x40020440
 81031c4:	40020458 	.word	0x40020458
 81031c8:	40020470 	.word	0x40020470
 81031cc:	40020488 	.word	0x40020488
 81031d0:	400204a0 	.word	0x400204a0
 81031d4:	400204b8 	.word	0x400204b8
 81031d8:	687b      	ldr	r3, [r7, #4]
 81031da:	681b      	ldr	r3, [r3, #0]
 81031dc:	681a      	ldr	r2, [r3, #0]
 81031de:	687b      	ldr	r3, [r7, #4]
 81031e0:	681b      	ldr	r3, [r3, #0]
 81031e2:	f022 020a 	bic.w	r2, r2, #10
 81031e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 81031e8:	687b      	ldr	r3, [r7, #4]
 81031ea:	2201      	movs	r2, #1
 81031ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 81031f0:	687b      	ldr	r3, [r7, #4]
 81031f2:	2200      	movs	r2, #0
 81031f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 81031f8:	687b      	ldr	r3, [r7, #4]
 81031fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81031fc:	2b00      	cmp	r3, #0
 81031fe:	f000 8097 	beq.w	8103330 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8103202:	687b      	ldr	r3, [r7, #4]
 8103204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103206:	6878      	ldr	r0, [r7, #4]
 8103208:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810320a:	e091      	b.n	8103330 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 810320c:	687b      	ldr	r3, [r7, #4]
 810320e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103210:	f003 031f 	and.w	r3, r3, #31
 8103214:	2208      	movs	r2, #8
 8103216:	409a      	lsls	r2, r3
 8103218:	697b      	ldr	r3, [r7, #20]
 810321a:	4013      	ands	r3, r2
 810321c:	2b00      	cmp	r3, #0
 810321e:	f000 8088 	beq.w	8103332 <HAL_DMA_IRQHandler+0xe0e>
 8103222:	693b      	ldr	r3, [r7, #16]
 8103224:	f003 0308 	and.w	r3, r3, #8
 8103228:	2b00      	cmp	r3, #0
 810322a:	f000 8082 	beq.w	8103332 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 810322e:	687b      	ldr	r3, [r7, #4]
 8103230:	681b      	ldr	r3, [r3, #0]
 8103232:	4a41      	ldr	r2, [pc, #260]	; (8103338 <HAL_DMA_IRQHandler+0xe14>)
 8103234:	4293      	cmp	r3, r2
 8103236:	d04a      	beq.n	81032ce <HAL_DMA_IRQHandler+0xdaa>
 8103238:	687b      	ldr	r3, [r7, #4]
 810323a:	681b      	ldr	r3, [r3, #0]
 810323c:	4a3f      	ldr	r2, [pc, #252]	; (810333c <HAL_DMA_IRQHandler+0xe18>)
 810323e:	4293      	cmp	r3, r2
 8103240:	d045      	beq.n	81032ce <HAL_DMA_IRQHandler+0xdaa>
 8103242:	687b      	ldr	r3, [r7, #4]
 8103244:	681b      	ldr	r3, [r3, #0]
 8103246:	4a3e      	ldr	r2, [pc, #248]	; (8103340 <HAL_DMA_IRQHandler+0xe1c>)
 8103248:	4293      	cmp	r3, r2
 810324a:	d040      	beq.n	81032ce <HAL_DMA_IRQHandler+0xdaa>
 810324c:	687b      	ldr	r3, [r7, #4]
 810324e:	681b      	ldr	r3, [r3, #0]
 8103250:	4a3c      	ldr	r2, [pc, #240]	; (8103344 <HAL_DMA_IRQHandler+0xe20>)
 8103252:	4293      	cmp	r3, r2
 8103254:	d03b      	beq.n	81032ce <HAL_DMA_IRQHandler+0xdaa>
 8103256:	687b      	ldr	r3, [r7, #4]
 8103258:	681b      	ldr	r3, [r3, #0]
 810325a:	4a3b      	ldr	r2, [pc, #236]	; (8103348 <HAL_DMA_IRQHandler+0xe24>)
 810325c:	4293      	cmp	r3, r2
 810325e:	d036      	beq.n	81032ce <HAL_DMA_IRQHandler+0xdaa>
 8103260:	687b      	ldr	r3, [r7, #4]
 8103262:	681b      	ldr	r3, [r3, #0]
 8103264:	4a39      	ldr	r2, [pc, #228]	; (810334c <HAL_DMA_IRQHandler+0xe28>)
 8103266:	4293      	cmp	r3, r2
 8103268:	d031      	beq.n	81032ce <HAL_DMA_IRQHandler+0xdaa>
 810326a:	687b      	ldr	r3, [r7, #4]
 810326c:	681b      	ldr	r3, [r3, #0]
 810326e:	4a38      	ldr	r2, [pc, #224]	; (8103350 <HAL_DMA_IRQHandler+0xe2c>)
 8103270:	4293      	cmp	r3, r2
 8103272:	d02c      	beq.n	81032ce <HAL_DMA_IRQHandler+0xdaa>
 8103274:	687b      	ldr	r3, [r7, #4]
 8103276:	681b      	ldr	r3, [r3, #0]
 8103278:	4a36      	ldr	r2, [pc, #216]	; (8103354 <HAL_DMA_IRQHandler+0xe30>)
 810327a:	4293      	cmp	r3, r2
 810327c:	d027      	beq.n	81032ce <HAL_DMA_IRQHandler+0xdaa>
 810327e:	687b      	ldr	r3, [r7, #4]
 8103280:	681b      	ldr	r3, [r3, #0]
 8103282:	4a35      	ldr	r2, [pc, #212]	; (8103358 <HAL_DMA_IRQHandler+0xe34>)
 8103284:	4293      	cmp	r3, r2
 8103286:	d022      	beq.n	81032ce <HAL_DMA_IRQHandler+0xdaa>
 8103288:	687b      	ldr	r3, [r7, #4]
 810328a:	681b      	ldr	r3, [r3, #0]
 810328c:	4a33      	ldr	r2, [pc, #204]	; (810335c <HAL_DMA_IRQHandler+0xe38>)
 810328e:	4293      	cmp	r3, r2
 8103290:	d01d      	beq.n	81032ce <HAL_DMA_IRQHandler+0xdaa>
 8103292:	687b      	ldr	r3, [r7, #4]
 8103294:	681b      	ldr	r3, [r3, #0]
 8103296:	4a32      	ldr	r2, [pc, #200]	; (8103360 <HAL_DMA_IRQHandler+0xe3c>)
 8103298:	4293      	cmp	r3, r2
 810329a:	d018      	beq.n	81032ce <HAL_DMA_IRQHandler+0xdaa>
 810329c:	687b      	ldr	r3, [r7, #4]
 810329e:	681b      	ldr	r3, [r3, #0]
 81032a0:	4a30      	ldr	r2, [pc, #192]	; (8103364 <HAL_DMA_IRQHandler+0xe40>)
 81032a2:	4293      	cmp	r3, r2
 81032a4:	d013      	beq.n	81032ce <HAL_DMA_IRQHandler+0xdaa>
 81032a6:	687b      	ldr	r3, [r7, #4]
 81032a8:	681b      	ldr	r3, [r3, #0]
 81032aa:	4a2f      	ldr	r2, [pc, #188]	; (8103368 <HAL_DMA_IRQHandler+0xe44>)
 81032ac:	4293      	cmp	r3, r2
 81032ae:	d00e      	beq.n	81032ce <HAL_DMA_IRQHandler+0xdaa>
 81032b0:	687b      	ldr	r3, [r7, #4]
 81032b2:	681b      	ldr	r3, [r3, #0]
 81032b4:	4a2d      	ldr	r2, [pc, #180]	; (810336c <HAL_DMA_IRQHandler+0xe48>)
 81032b6:	4293      	cmp	r3, r2
 81032b8:	d009      	beq.n	81032ce <HAL_DMA_IRQHandler+0xdaa>
 81032ba:	687b      	ldr	r3, [r7, #4]
 81032bc:	681b      	ldr	r3, [r3, #0]
 81032be:	4a2c      	ldr	r2, [pc, #176]	; (8103370 <HAL_DMA_IRQHandler+0xe4c>)
 81032c0:	4293      	cmp	r3, r2
 81032c2:	d004      	beq.n	81032ce <HAL_DMA_IRQHandler+0xdaa>
 81032c4:	687b      	ldr	r3, [r7, #4]
 81032c6:	681b      	ldr	r3, [r3, #0]
 81032c8:	4a2a      	ldr	r2, [pc, #168]	; (8103374 <HAL_DMA_IRQHandler+0xe50>)
 81032ca:	4293      	cmp	r3, r2
 81032cc:	d108      	bne.n	81032e0 <HAL_DMA_IRQHandler+0xdbc>
 81032ce:	687b      	ldr	r3, [r7, #4]
 81032d0:	681b      	ldr	r3, [r3, #0]
 81032d2:	681a      	ldr	r2, [r3, #0]
 81032d4:	687b      	ldr	r3, [r7, #4]
 81032d6:	681b      	ldr	r3, [r3, #0]
 81032d8:	f022 021c 	bic.w	r2, r2, #28
 81032dc:	601a      	str	r2, [r3, #0]
 81032de:	e007      	b.n	81032f0 <HAL_DMA_IRQHandler+0xdcc>
 81032e0:	687b      	ldr	r3, [r7, #4]
 81032e2:	681b      	ldr	r3, [r3, #0]
 81032e4:	681a      	ldr	r2, [r3, #0]
 81032e6:	687b      	ldr	r3, [r7, #4]
 81032e8:	681b      	ldr	r3, [r3, #0]
 81032ea:	f022 020e 	bic.w	r2, r2, #14
 81032ee:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 81032f0:	687b      	ldr	r3, [r7, #4]
 81032f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81032f4:	f003 031f 	and.w	r3, r3, #31
 81032f8:	2201      	movs	r2, #1
 81032fa:	409a      	lsls	r2, r3
 81032fc:	69fb      	ldr	r3, [r7, #28]
 81032fe:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8103300:	687b      	ldr	r3, [r7, #4]
 8103302:	2201      	movs	r2, #1
 8103304:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8103306:	687b      	ldr	r3, [r7, #4]
 8103308:	2201      	movs	r2, #1
 810330a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 810330e:	687b      	ldr	r3, [r7, #4]
 8103310:	2200      	movs	r2, #0
 8103312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8103316:	687b      	ldr	r3, [r7, #4]
 8103318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810331a:	2b00      	cmp	r3, #0
 810331c:	d009      	beq.n	8103332 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 810331e:	687b      	ldr	r3, [r7, #4]
 8103320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103322:	6878      	ldr	r0, [r7, #4]
 8103324:	4798      	blx	r3
 8103326:	e004      	b.n	8103332 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8103328:	bf00      	nop
 810332a:	e002      	b.n	8103332 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810332c:	bf00      	nop
 810332e:	e000      	b.n	8103332 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103330:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8103332:	3728      	adds	r7, #40	; 0x28
 8103334:	46bd      	mov	sp, r7
 8103336:	bd80      	pop	{r7, pc}
 8103338:	40020010 	.word	0x40020010
 810333c:	40020028 	.word	0x40020028
 8103340:	40020040 	.word	0x40020040
 8103344:	40020058 	.word	0x40020058
 8103348:	40020070 	.word	0x40020070
 810334c:	40020088 	.word	0x40020088
 8103350:	400200a0 	.word	0x400200a0
 8103354:	400200b8 	.word	0x400200b8
 8103358:	40020410 	.word	0x40020410
 810335c:	40020428 	.word	0x40020428
 8103360:	40020440 	.word	0x40020440
 8103364:	40020458 	.word	0x40020458
 8103368:	40020470 	.word	0x40020470
 810336c:	40020488 	.word	0x40020488
 8103370:	400204a0 	.word	0x400204a0
 8103374:	400204b8 	.word	0x400204b8

08103378 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8103378:	b480      	push	{r7}
 810337a:	b085      	sub	sp, #20
 810337c:	af00      	add	r7, sp, #0
 810337e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103380:	687b      	ldr	r3, [r7, #4]
 8103382:	681b      	ldr	r3, [r3, #0]
 8103384:	4a43      	ldr	r2, [pc, #268]	; (8103494 <DMA_CalcBaseAndBitshift+0x11c>)
 8103386:	4293      	cmp	r3, r2
 8103388:	d04a      	beq.n	8103420 <DMA_CalcBaseAndBitshift+0xa8>
 810338a:	687b      	ldr	r3, [r7, #4]
 810338c:	681b      	ldr	r3, [r3, #0]
 810338e:	4a42      	ldr	r2, [pc, #264]	; (8103498 <DMA_CalcBaseAndBitshift+0x120>)
 8103390:	4293      	cmp	r3, r2
 8103392:	d045      	beq.n	8103420 <DMA_CalcBaseAndBitshift+0xa8>
 8103394:	687b      	ldr	r3, [r7, #4]
 8103396:	681b      	ldr	r3, [r3, #0]
 8103398:	4a40      	ldr	r2, [pc, #256]	; (810349c <DMA_CalcBaseAndBitshift+0x124>)
 810339a:	4293      	cmp	r3, r2
 810339c:	d040      	beq.n	8103420 <DMA_CalcBaseAndBitshift+0xa8>
 810339e:	687b      	ldr	r3, [r7, #4]
 81033a0:	681b      	ldr	r3, [r3, #0]
 81033a2:	4a3f      	ldr	r2, [pc, #252]	; (81034a0 <DMA_CalcBaseAndBitshift+0x128>)
 81033a4:	4293      	cmp	r3, r2
 81033a6:	d03b      	beq.n	8103420 <DMA_CalcBaseAndBitshift+0xa8>
 81033a8:	687b      	ldr	r3, [r7, #4]
 81033aa:	681b      	ldr	r3, [r3, #0]
 81033ac:	4a3d      	ldr	r2, [pc, #244]	; (81034a4 <DMA_CalcBaseAndBitshift+0x12c>)
 81033ae:	4293      	cmp	r3, r2
 81033b0:	d036      	beq.n	8103420 <DMA_CalcBaseAndBitshift+0xa8>
 81033b2:	687b      	ldr	r3, [r7, #4]
 81033b4:	681b      	ldr	r3, [r3, #0]
 81033b6:	4a3c      	ldr	r2, [pc, #240]	; (81034a8 <DMA_CalcBaseAndBitshift+0x130>)
 81033b8:	4293      	cmp	r3, r2
 81033ba:	d031      	beq.n	8103420 <DMA_CalcBaseAndBitshift+0xa8>
 81033bc:	687b      	ldr	r3, [r7, #4]
 81033be:	681b      	ldr	r3, [r3, #0]
 81033c0:	4a3a      	ldr	r2, [pc, #232]	; (81034ac <DMA_CalcBaseAndBitshift+0x134>)
 81033c2:	4293      	cmp	r3, r2
 81033c4:	d02c      	beq.n	8103420 <DMA_CalcBaseAndBitshift+0xa8>
 81033c6:	687b      	ldr	r3, [r7, #4]
 81033c8:	681b      	ldr	r3, [r3, #0]
 81033ca:	4a39      	ldr	r2, [pc, #228]	; (81034b0 <DMA_CalcBaseAndBitshift+0x138>)
 81033cc:	4293      	cmp	r3, r2
 81033ce:	d027      	beq.n	8103420 <DMA_CalcBaseAndBitshift+0xa8>
 81033d0:	687b      	ldr	r3, [r7, #4]
 81033d2:	681b      	ldr	r3, [r3, #0]
 81033d4:	4a37      	ldr	r2, [pc, #220]	; (81034b4 <DMA_CalcBaseAndBitshift+0x13c>)
 81033d6:	4293      	cmp	r3, r2
 81033d8:	d022      	beq.n	8103420 <DMA_CalcBaseAndBitshift+0xa8>
 81033da:	687b      	ldr	r3, [r7, #4]
 81033dc:	681b      	ldr	r3, [r3, #0]
 81033de:	4a36      	ldr	r2, [pc, #216]	; (81034b8 <DMA_CalcBaseAndBitshift+0x140>)
 81033e0:	4293      	cmp	r3, r2
 81033e2:	d01d      	beq.n	8103420 <DMA_CalcBaseAndBitshift+0xa8>
 81033e4:	687b      	ldr	r3, [r7, #4]
 81033e6:	681b      	ldr	r3, [r3, #0]
 81033e8:	4a34      	ldr	r2, [pc, #208]	; (81034bc <DMA_CalcBaseAndBitshift+0x144>)
 81033ea:	4293      	cmp	r3, r2
 81033ec:	d018      	beq.n	8103420 <DMA_CalcBaseAndBitshift+0xa8>
 81033ee:	687b      	ldr	r3, [r7, #4]
 81033f0:	681b      	ldr	r3, [r3, #0]
 81033f2:	4a33      	ldr	r2, [pc, #204]	; (81034c0 <DMA_CalcBaseAndBitshift+0x148>)
 81033f4:	4293      	cmp	r3, r2
 81033f6:	d013      	beq.n	8103420 <DMA_CalcBaseAndBitshift+0xa8>
 81033f8:	687b      	ldr	r3, [r7, #4]
 81033fa:	681b      	ldr	r3, [r3, #0]
 81033fc:	4a31      	ldr	r2, [pc, #196]	; (81034c4 <DMA_CalcBaseAndBitshift+0x14c>)
 81033fe:	4293      	cmp	r3, r2
 8103400:	d00e      	beq.n	8103420 <DMA_CalcBaseAndBitshift+0xa8>
 8103402:	687b      	ldr	r3, [r7, #4]
 8103404:	681b      	ldr	r3, [r3, #0]
 8103406:	4a30      	ldr	r2, [pc, #192]	; (81034c8 <DMA_CalcBaseAndBitshift+0x150>)
 8103408:	4293      	cmp	r3, r2
 810340a:	d009      	beq.n	8103420 <DMA_CalcBaseAndBitshift+0xa8>
 810340c:	687b      	ldr	r3, [r7, #4]
 810340e:	681b      	ldr	r3, [r3, #0]
 8103410:	4a2e      	ldr	r2, [pc, #184]	; (81034cc <DMA_CalcBaseAndBitshift+0x154>)
 8103412:	4293      	cmp	r3, r2
 8103414:	d004      	beq.n	8103420 <DMA_CalcBaseAndBitshift+0xa8>
 8103416:	687b      	ldr	r3, [r7, #4]
 8103418:	681b      	ldr	r3, [r3, #0]
 810341a:	4a2d      	ldr	r2, [pc, #180]	; (81034d0 <DMA_CalcBaseAndBitshift+0x158>)
 810341c:	4293      	cmp	r3, r2
 810341e:	d101      	bne.n	8103424 <DMA_CalcBaseAndBitshift+0xac>
 8103420:	2301      	movs	r3, #1
 8103422:	e000      	b.n	8103426 <DMA_CalcBaseAndBitshift+0xae>
 8103424:	2300      	movs	r3, #0
 8103426:	2b00      	cmp	r3, #0
 8103428:	d026      	beq.n	8103478 <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 810342a:	687b      	ldr	r3, [r7, #4]
 810342c:	681b      	ldr	r3, [r3, #0]
 810342e:	b2db      	uxtb	r3, r3
 8103430:	3b10      	subs	r3, #16
 8103432:	4a28      	ldr	r2, [pc, #160]	; (81034d4 <DMA_CalcBaseAndBitshift+0x15c>)
 8103434:	fba2 2303 	umull	r2, r3, r2, r3
 8103438:	091b      	lsrs	r3, r3, #4
 810343a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 810343c:	68fb      	ldr	r3, [r7, #12]
 810343e:	f003 0307 	and.w	r3, r3, #7
 8103442:	4a25      	ldr	r2, [pc, #148]	; (81034d8 <DMA_CalcBaseAndBitshift+0x160>)
 8103444:	5cd3      	ldrb	r3, [r2, r3]
 8103446:	461a      	mov	r2, r3
 8103448:	687b      	ldr	r3, [r7, #4]
 810344a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 810344c:	68fb      	ldr	r3, [r7, #12]
 810344e:	2b03      	cmp	r3, #3
 8103450:	d909      	bls.n	8103466 <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8103452:	687b      	ldr	r3, [r7, #4]
 8103454:	681b      	ldr	r3, [r3, #0]
 8103456:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 810345a:	f023 0303 	bic.w	r3, r3, #3
 810345e:	1d1a      	adds	r2, r3, #4
 8103460:	687b      	ldr	r3, [r7, #4]
 8103462:	659a      	str	r2, [r3, #88]	; 0x58
 8103464:	e00e      	b.n	8103484 <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8103466:	687b      	ldr	r3, [r7, #4]
 8103468:	681b      	ldr	r3, [r3, #0]
 810346a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 810346e:	f023 0303 	bic.w	r3, r3, #3
 8103472:	687a      	ldr	r2, [r7, #4]
 8103474:	6593      	str	r3, [r2, #88]	; 0x58
 8103476:	e005      	b.n	8103484 <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8103478:	687b      	ldr	r3, [r7, #4]
 810347a:	681b      	ldr	r3, [r3, #0]
 810347c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8103480:	687b      	ldr	r3, [r7, #4]
 8103482:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8103484:	687b      	ldr	r3, [r7, #4]
 8103486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8103488:	4618      	mov	r0, r3
 810348a:	3714      	adds	r7, #20
 810348c:	46bd      	mov	sp, r7
 810348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103492:	4770      	bx	lr
 8103494:	40020010 	.word	0x40020010
 8103498:	40020028 	.word	0x40020028
 810349c:	40020040 	.word	0x40020040
 81034a0:	40020058 	.word	0x40020058
 81034a4:	40020070 	.word	0x40020070
 81034a8:	40020088 	.word	0x40020088
 81034ac:	400200a0 	.word	0x400200a0
 81034b0:	400200b8 	.word	0x400200b8
 81034b4:	40020410 	.word	0x40020410
 81034b8:	40020428 	.word	0x40020428
 81034bc:	40020440 	.word	0x40020440
 81034c0:	40020458 	.word	0x40020458
 81034c4:	40020470 	.word	0x40020470
 81034c8:	40020488 	.word	0x40020488
 81034cc:	400204a0 	.word	0x400204a0
 81034d0:	400204b8 	.word	0x400204b8
 81034d4:	aaaaaaab 	.word	0xaaaaaaab
 81034d8:	0810980c 	.word	0x0810980c

081034dc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 81034dc:	b480      	push	{r7}
 81034de:	b085      	sub	sp, #20
 81034e0:	af00      	add	r7, sp, #0
 81034e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81034e4:	2300      	movs	r3, #0
 81034e6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 81034e8:	687b      	ldr	r3, [r7, #4]
 81034ea:	699b      	ldr	r3, [r3, #24]
 81034ec:	2b00      	cmp	r3, #0
 81034ee:	d120      	bne.n	8103532 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 81034f0:	687b      	ldr	r3, [r7, #4]
 81034f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81034f4:	2b03      	cmp	r3, #3
 81034f6:	d858      	bhi.n	81035aa <DMA_CheckFifoParam+0xce>
 81034f8:	a201      	add	r2, pc, #4	; (adr r2, 8103500 <DMA_CheckFifoParam+0x24>)
 81034fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81034fe:	bf00      	nop
 8103500:	08103511 	.word	0x08103511
 8103504:	08103523 	.word	0x08103523
 8103508:	08103511 	.word	0x08103511
 810350c:	081035ab 	.word	0x081035ab
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8103510:	687b      	ldr	r3, [r7, #4]
 8103512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103514:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8103518:	2b00      	cmp	r3, #0
 810351a:	d048      	beq.n	81035ae <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 810351c:	2301      	movs	r3, #1
 810351e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8103520:	e045      	b.n	81035ae <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8103522:	687b      	ldr	r3, [r7, #4]
 8103524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103526:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 810352a:	d142      	bne.n	81035b2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 810352c:	2301      	movs	r3, #1
 810352e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8103530:	e03f      	b.n	81035b2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8103532:	687b      	ldr	r3, [r7, #4]
 8103534:	699b      	ldr	r3, [r3, #24]
 8103536:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810353a:	d123      	bne.n	8103584 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 810353c:	687b      	ldr	r3, [r7, #4]
 810353e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103540:	2b03      	cmp	r3, #3
 8103542:	d838      	bhi.n	81035b6 <DMA_CheckFifoParam+0xda>
 8103544:	a201      	add	r2, pc, #4	; (adr r2, 810354c <DMA_CheckFifoParam+0x70>)
 8103546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810354a:	bf00      	nop
 810354c:	0810355d 	.word	0x0810355d
 8103550:	08103563 	.word	0x08103563
 8103554:	0810355d 	.word	0x0810355d
 8103558:	08103575 	.word	0x08103575
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 810355c:	2301      	movs	r3, #1
 810355e:	73fb      	strb	r3, [r7, #15]
        break;
 8103560:	e030      	b.n	81035c4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8103562:	687b      	ldr	r3, [r7, #4]
 8103564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103566:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810356a:	2b00      	cmp	r3, #0
 810356c:	d025      	beq.n	81035ba <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 810356e:	2301      	movs	r3, #1
 8103570:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8103572:	e022      	b.n	81035ba <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8103574:	687b      	ldr	r3, [r7, #4]
 8103576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103578:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 810357c:	d11f      	bne.n	81035be <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 810357e:	2301      	movs	r3, #1
 8103580:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8103582:	e01c      	b.n	81035be <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8103584:	687b      	ldr	r3, [r7, #4]
 8103586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103588:	2b02      	cmp	r3, #2
 810358a:	d902      	bls.n	8103592 <DMA_CheckFifoParam+0xb6>
 810358c:	2b03      	cmp	r3, #3
 810358e:	d003      	beq.n	8103598 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8103590:	e018      	b.n	81035c4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8103592:	2301      	movs	r3, #1
 8103594:	73fb      	strb	r3, [r7, #15]
        break;
 8103596:	e015      	b.n	81035c4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8103598:	687b      	ldr	r3, [r7, #4]
 810359a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810359c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81035a0:	2b00      	cmp	r3, #0
 81035a2:	d00e      	beq.n	81035c2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 81035a4:	2301      	movs	r3, #1
 81035a6:	73fb      	strb	r3, [r7, #15]
    break;
 81035a8:	e00b      	b.n	81035c2 <DMA_CheckFifoParam+0xe6>
        break;
 81035aa:	bf00      	nop
 81035ac:	e00a      	b.n	81035c4 <DMA_CheckFifoParam+0xe8>
        break;
 81035ae:	bf00      	nop
 81035b0:	e008      	b.n	81035c4 <DMA_CheckFifoParam+0xe8>
        break;
 81035b2:	bf00      	nop
 81035b4:	e006      	b.n	81035c4 <DMA_CheckFifoParam+0xe8>
        break;
 81035b6:	bf00      	nop
 81035b8:	e004      	b.n	81035c4 <DMA_CheckFifoParam+0xe8>
        break;
 81035ba:	bf00      	nop
 81035bc:	e002      	b.n	81035c4 <DMA_CheckFifoParam+0xe8>
        break;
 81035be:	bf00      	nop
 81035c0:	e000      	b.n	81035c4 <DMA_CheckFifoParam+0xe8>
    break;
 81035c2:	bf00      	nop
    }
  }

  return status;
 81035c4:	7bfb      	ldrb	r3, [r7, #15]
}
 81035c6:	4618      	mov	r0, r3
 81035c8:	3714      	adds	r7, #20
 81035ca:	46bd      	mov	sp, r7
 81035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035d0:	4770      	bx	lr
 81035d2:	bf00      	nop

081035d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 81035d4:	b480      	push	{r7}
 81035d6:	b085      	sub	sp, #20
 81035d8:	af00      	add	r7, sp, #0
 81035da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 81035dc:	687b      	ldr	r3, [r7, #4]
 81035de:	681b      	ldr	r3, [r3, #0]
 81035e0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 81035e2:	687b      	ldr	r3, [r7, #4]
 81035e4:	681b      	ldr	r3, [r3, #0]
 81035e6:	4a3a      	ldr	r2, [pc, #232]	; (81036d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 81035e8:	4293      	cmp	r3, r2
 81035ea:	d022      	beq.n	8103632 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81035ec:	687b      	ldr	r3, [r7, #4]
 81035ee:	681b      	ldr	r3, [r3, #0]
 81035f0:	4a38      	ldr	r2, [pc, #224]	; (81036d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 81035f2:	4293      	cmp	r3, r2
 81035f4:	d01d      	beq.n	8103632 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81035f6:	687b      	ldr	r3, [r7, #4]
 81035f8:	681b      	ldr	r3, [r3, #0]
 81035fa:	4a37      	ldr	r2, [pc, #220]	; (81036d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 81035fc:	4293      	cmp	r3, r2
 81035fe:	d018      	beq.n	8103632 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103600:	687b      	ldr	r3, [r7, #4]
 8103602:	681b      	ldr	r3, [r3, #0]
 8103604:	4a35      	ldr	r2, [pc, #212]	; (81036dc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8103606:	4293      	cmp	r3, r2
 8103608:	d013      	beq.n	8103632 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810360a:	687b      	ldr	r3, [r7, #4]
 810360c:	681b      	ldr	r3, [r3, #0]
 810360e:	4a34      	ldr	r2, [pc, #208]	; (81036e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8103610:	4293      	cmp	r3, r2
 8103612:	d00e      	beq.n	8103632 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103614:	687b      	ldr	r3, [r7, #4]
 8103616:	681b      	ldr	r3, [r3, #0]
 8103618:	4a32      	ldr	r2, [pc, #200]	; (81036e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 810361a:	4293      	cmp	r3, r2
 810361c:	d009      	beq.n	8103632 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810361e:	687b      	ldr	r3, [r7, #4]
 8103620:	681b      	ldr	r3, [r3, #0]
 8103622:	4a31      	ldr	r2, [pc, #196]	; (81036e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8103624:	4293      	cmp	r3, r2
 8103626:	d004      	beq.n	8103632 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103628:	687b      	ldr	r3, [r7, #4]
 810362a:	681b      	ldr	r3, [r3, #0]
 810362c:	4a2f      	ldr	r2, [pc, #188]	; (81036ec <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 810362e:	4293      	cmp	r3, r2
 8103630:	d101      	bne.n	8103636 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8103632:	2301      	movs	r3, #1
 8103634:	e000      	b.n	8103638 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8103636:	2300      	movs	r3, #0
 8103638:	2b00      	cmp	r3, #0
 810363a:	d01c      	beq.n	8103676 <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 810363c:	687b      	ldr	r3, [r7, #4]
 810363e:	681b      	ldr	r3, [r3, #0]
 8103640:	b2db      	uxtb	r3, r3
 8103642:	3b08      	subs	r3, #8
 8103644:	4a2a      	ldr	r2, [pc, #168]	; (81036f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8103646:	fba2 2303 	umull	r2, r3, r2, r3
 810364a:	091b      	lsrs	r3, r3, #4
 810364c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 810364e:	68fb      	ldr	r3, [r7, #12]
 8103650:	f103 53b0 	add.w	r3, r3, #369098752	; 0x16000000
 8103654:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 8103658:	009b      	lsls	r3, r3, #2
 810365a:	461a      	mov	r2, r3
 810365c:	687b      	ldr	r3, [r7, #4]
 810365e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8103660:	687b      	ldr	r3, [r7, #4]
 8103662:	4a24      	ldr	r2, [pc, #144]	; (81036f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8103664:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8103666:	68fb      	ldr	r3, [r7, #12]
 8103668:	f003 031f 	and.w	r3, r3, #31
 810366c:	2201      	movs	r2, #1
 810366e:	409a      	lsls	r2, r3
 8103670:	687b      	ldr	r3, [r7, #4]
 8103672:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8103674:	e026      	b.n	81036c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8103676:	687b      	ldr	r3, [r7, #4]
 8103678:	681b      	ldr	r3, [r3, #0]
 810367a:	b2db      	uxtb	r3, r3
 810367c:	3b10      	subs	r3, #16
 810367e:	4a1e      	ldr	r2, [pc, #120]	; (81036f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8103680:	fba2 2303 	umull	r2, r3, r2, r3
 8103684:	091b      	lsrs	r3, r3, #4
 8103686:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8103688:	68bb      	ldr	r3, [r7, #8]
 810368a:	4a1c      	ldr	r2, [pc, #112]	; (81036fc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 810368c:	4293      	cmp	r3, r2
 810368e:	d806      	bhi.n	810369e <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 8103690:	68bb      	ldr	r3, [r7, #8]
 8103692:	4a1b      	ldr	r2, [pc, #108]	; (8103700 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8103694:	4293      	cmp	r3, r2
 8103696:	d902      	bls.n	810369e <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 8103698:	68fb      	ldr	r3, [r7, #12]
 810369a:	3308      	adds	r3, #8
 810369c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 810369e:	68fb      	ldr	r3, [r7, #12]
 81036a0:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 81036a4:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 81036a8:	009b      	lsls	r3, r3, #2
 81036aa:	461a      	mov	r2, r3
 81036ac:	687b      	ldr	r3, [r7, #4]
 81036ae:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 81036b0:	687b      	ldr	r3, [r7, #4]
 81036b2:	4a14      	ldr	r2, [pc, #80]	; (8103704 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 81036b4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 81036b6:	68fb      	ldr	r3, [r7, #12]
 81036b8:	f003 031f 	and.w	r3, r3, #31
 81036bc:	2201      	movs	r2, #1
 81036be:	409a      	lsls	r2, r3
 81036c0:	687b      	ldr	r3, [r7, #4]
 81036c2:	669a      	str	r2, [r3, #104]	; 0x68
}
 81036c4:	bf00      	nop
 81036c6:	3714      	adds	r7, #20
 81036c8:	46bd      	mov	sp, r7
 81036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81036ce:	4770      	bx	lr
 81036d0:	58025408 	.word	0x58025408
 81036d4:	5802541c 	.word	0x5802541c
 81036d8:	58025430 	.word	0x58025430
 81036dc:	58025444 	.word	0x58025444
 81036e0:	58025458 	.word	0x58025458
 81036e4:	5802546c 	.word	0x5802546c
 81036e8:	58025480 	.word	0x58025480
 81036ec:	58025494 	.word	0x58025494
 81036f0:	cccccccd 	.word	0xcccccccd
 81036f4:	58025880 	.word	0x58025880
 81036f8:	aaaaaaab 	.word	0xaaaaaaab
 81036fc:	400204b8 	.word	0x400204b8
 8103700:	4002040f 	.word	0x4002040f
 8103704:	40020880 	.word	0x40020880

08103708 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8103708:	b480      	push	{r7}
 810370a:	b085      	sub	sp, #20
 810370c:	af00      	add	r7, sp, #0
 810370e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8103710:	687b      	ldr	r3, [r7, #4]
 8103712:	685b      	ldr	r3, [r3, #4]
 8103714:	b2db      	uxtb	r3, r3
 8103716:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8103718:	68fb      	ldr	r3, [r7, #12]
 810371a:	2b00      	cmp	r3, #0
 810371c:	d04a      	beq.n	81037b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 810371e:	68fb      	ldr	r3, [r7, #12]
 8103720:	2b08      	cmp	r3, #8
 8103722:	d847      	bhi.n	81037b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8103724:	687b      	ldr	r3, [r7, #4]
 8103726:	681b      	ldr	r3, [r3, #0]
 8103728:	4a25      	ldr	r2, [pc, #148]	; (81037c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 810372a:	4293      	cmp	r3, r2
 810372c:	d022      	beq.n	8103774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810372e:	687b      	ldr	r3, [r7, #4]
 8103730:	681b      	ldr	r3, [r3, #0]
 8103732:	4a24      	ldr	r2, [pc, #144]	; (81037c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8103734:	4293      	cmp	r3, r2
 8103736:	d01d      	beq.n	8103774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8103738:	687b      	ldr	r3, [r7, #4]
 810373a:	681b      	ldr	r3, [r3, #0]
 810373c:	4a22      	ldr	r2, [pc, #136]	; (81037c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 810373e:	4293      	cmp	r3, r2
 8103740:	d018      	beq.n	8103774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8103742:	687b      	ldr	r3, [r7, #4]
 8103744:	681b      	ldr	r3, [r3, #0]
 8103746:	4a21      	ldr	r2, [pc, #132]	; (81037cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8103748:	4293      	cmp	r3, r2
 810374a:	d013      	beq.n	8103774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810374c:	687b      	ldr	r3, [r7, #4]
 810374e:	681b      	ldr	r3, [r3, #0]
 8103750:	4a1f      	ldr	r2, [pc, #124]	; (81037d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8103752:	4293      	cmp	r3, r2
 8103754:	d00e      	beq.n	8103774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8103756:	687b      	ldr	r3, [r7, #4]
 8103758:	681b      	ldr	r3, [r3, #0]
 810375a:	4a1e      	ldr	r2, [pc, #120]	; (81037d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 810375c:	4293      	cmp	r3, r2
 810375e:	d009      	beq.n	8103774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8103760:	687b      	ldr	r3, [r7, #4]
 8103762:	681b      	ldr	r3, [r3, #0]
 8103764:	4a1c      	ldr	r2, [pc, #112]	; (81037d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8103766:	4293      	cmp	r3, r2
 8103768:	d004      	beq.n	8103774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810376a:	687b      	ldr	r3, [r7, #4]
 810376c:	681b      	ldr	r3, [r3, #0]
 810376e:	4a1b      	ldr	r2, [pc, #108]	; (81037dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8103770:	4293      	cmp	r3, r2
 8103772:	d101      	bne.n	8103778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8103774:	2301      	movs	r3, #1
 8103776:	e000      	b.n	810377a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8103778:	2300      	movs	r3, #0
 810377a:	2b00      	cmp	r3, #0
 810377c:	d00a      	beq.n	8103794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 810377e:	68fa      	ldr	r2, [r7, #12]
 8103780:	4b17      	ldr	r3, [pc, #92]	; (81037e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8103782:	4413      	add	r3, r2
 8103784:	009b      	lsls	r3, r3, #2
 8103786:	461a      	mov	r2, r3
 8103788:	687b      	ldr	r3, [r7, #4]
 810378a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 810378c:	687b      	ldr	r3, [r7, #4]
 810378e:	4a15      	ldr	r2, [pc, #84]	; (81037e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8103790:	671a      	str	r2, [r3, #112]	; 0x70
 8103792:	e009      	b.n	81037a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8103794:	68fa      	ldr	r2, [r7, #12]
 8103796:	4b14      	ldr	r3, [pc, #80]	; (81037e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8103798:	4413      	add	r3, r2
 810379a:	009b      	lsls	r3, r3, #2
 810379c:	461a      	mov	r2, r3
 810379e:	687b      	ldr	r3, [r7, #4]
 81037a0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 81037a2:	687b      	ldr	r3, [r7, #4]
 81037a4:	4a11      	ldr	r2, [pc, #68]	; (81037ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 81037a6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 81037a8:	68fb      	ldr	r3, [r7, #12]
 81037aa:	3b01      	subs	r3, #1
 81037ac:	2201      	movs	r2, #1
 81037ae:	409a      	lsls	r2, r3
 81037b0:	687b      	ldr	r3, [r7, #4]
 81037b2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 81037b4:	bf00      	nop
 81037b6:	3714      	adds	r7, #20
 81037b8:	46bd      	mov	sp, r7
 81037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037be:	4770      	bx	lr
 81037c0:	58025408 	.word	0x58025408
 81037c4:	5802541c 	.word	0x5802541c
 81037c8:	58025430 	.word	0x58025430
 81037cc:	58025444 	.word	0x58025444
 81037d0:	58025458 	.word	0x58025458
 81037d4:	5802546c 	.word	0x5802546c
 81037d8:	58025480 	.word	0x58025480
 81037dc:	58025494 	.word	0x58025494
 81037e0:	1600963f 	.word	0x1600963f
 81037e4:	58025940 	.word	0x58025940
 81037e8:	1000823f 	.word	0x1000823f
 81037ec:	40020940 	.word	0x40020940

081037f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81037f0:	b480      	push	{r7}
 81037f2:	b089      	sub	sp, #36	; 0x24
 81037f4:	af00      	add	r7, sp, #0
 81037f6:	6078      	str	r0, [r7, #4]
 81037f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81037fa:	2300      	movs	r3, #0
 81037fc:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81037fe:	4b89      	ldr	r3, [pc, #548]	; (8103a24 <HAL_GPIO_Init+0x234>)
 8103800:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8103802:	e194      	b.n	8103b2e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8103804:	683b      	ldr	r3, [r7, #0]
 8103806:	681a      	ldr	r2, [r3, #0]
 8103808:	2101      	movs	r1, #1
 810380a:	69fb      	ldr	r3, [r7, #28]
 810380c:	fa01 f303 	lsl.w	r3, r1, r3
 8103810:	4013      	ands	r3, r2
 8103812:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8103814:	693b      	ldr	r3, [r7, #16]
 8103816:	2b00      	cmp	r3, #0
 8103818:	f000 8186 	beq.w	8103b28 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 810381c:	683b      	ldr	r3, [r7, #0]
 810381e:	685b      	ldr	r3, [r3, #4]
 8103820:	f003 0303 	and.w	r3, r3, #3
 8103824:	2b01      	cmp	r3, #1
 8103826:	d005      	beq.n	8103834 <HAL_GPIO_Init+0x44>
 8103828:	683b      	ldr	r3, [r7, #0]
 810382a:	685b      	ldr	r3, [r3, #4]
 810382c:	f003 0303 	and.w	r3, r3, #3
 8103830:	2b02      	cmp	r3, #2
 8103832:	d130      	bne.n	8103896 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8103834:	687b      	ldr	r3, [r7, #4]
 8103836:	689b      	ldr	r3, [r3, #8]
 8103838:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810383a:	69fb      	ldr	r3, [r7, #28]
 810383c:	005b      	lsls	r3, r3, #1
 810383e:	2203      	movs	r2, #3
 8103840:	fa02 f303 	lsl.w	r3, r2, r3
 8103844:	43db      	mvns	r3, r3
 8103846:	69ba      	ldr	r2, [r7, #24]
 8103848:	4013      	ands	r3, r2
 810384a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 810384c:	683b      	ldr	r3, [r7, #0]
 810384e:	68da      	ldr	r2, [r3, #12]
 8103850:	69fb      	ldr	r3, [r7, #28]
 8103852:	005b      	lsls	r3, r3, #1
 8103854:	fa02 f303 	lsl.w	r3, r2, r3
 8103858:	69ba      	ldr	r2, [r7, #24]
 810385a:	4313      	orrs	r3, r2
 810385c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810385e:	687b      	ldr	r3, [r7, #4]
 8103860:	69ba      	ldr	r2, [r7, #24]
 8103862:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8103864:	687b      	ldr	r3, [r7, #4]
 8103866:	685b      	ldr	r3, [r3, #4]
 8103868:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810386a:	2201      	movs	r2, #1
 810386c:	69fb      	ldr	r3, [r7, #28]
 810386e:	fa02 f303 	lsl.w	r3, r2, r3
 8103872:	43db      	mvns	r3, r3
 8103874:	69ba      	ldr	r2, [r7, #24]
 8103876:	4013      	ands	r3, r2
 8103878:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 810387a:	683b      	ldr	r3, [r7, #0]
 810387c:	685b      	ldr	r3, [r3, #4]
 810387e:	091b      	lsrs	r3, r3, #4
 8103880:	f003 0201 	and.w	r2, r3, #1
 8103884:	69fb      	ldr	r3, [r7, #28]
 8103886:	fa02 f303 	lsl.w	r3, r2, r3
 810388a:	69ba      	ldr	r2, [r7, #24]
 810388c:	4313      	orrs	r3, r2
 810388e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8103890:	687b      	ldr	r3, [r7, #4]
 8103892:	69ba      	ldr	r2, [r7, #24]
 8103894:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8103896:	683b      	ldr	r3, [r7, #0]
 8103898:	685b      	ldr	r3, [r3, #4]
 810389a:	f003 0303 	and.w	r3, r3, #3
 810389e:	2b03      	cmp	r3, #3
 81038a0:	d017      	beq.n	81038d2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81038a2:	687b      	ldr	r3, [r7, #4]
 81038a4:	68db      	ldr	r3, [r3, #12]
 81038a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81038a8:	69fb      	ldr	r3, [r7, #28]
 81038aa:	005b      	lsls	r3, r3, #1
 81038ac:	2203      	movs	r2, #3
 81038ae:	fa02 f303 	lsl.w	r3, r2, r3
 81038b2:	43db      	mvns	r3, r3
 81038b4:	69ba      	ldr	r2, [r7, #24]
 81038b6:	4013      	ands	r3, r2
 81038b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81038ba:	683b      	ldr	r3, [r7, #0]
 81038bc:	689a      	ldr	r2, [r3, #8]
 81038be:	69fb      	ldr	r3, [r7, #28]
 81038c0:	005b      	lsls	r3, r3, #1
 81038c2:	fa02 f303 	lsl.w	r3, r2, r3
 81038c6:	69ba      	ldr	r2, [r7, #24]
 81038c8:	4313      	orrs	r3, r2
 81038ca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81038cc:	687b      	ldr	r3, [r7, #4]
 81038ce:	69ba      	ldr	r2, [r7, #24]
 81038d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 81038d2:	683b      	ldr	r3, [r7, #0]
 81038d4:	685b      	ldr	r3, [r3, #4]
 81038d6:	f003 0303 	and.w	r3, r3, #3
 81038da:	2b02      	cmp	r3, #2
 81038dc:	d123      	bne.n	8103926 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81038de:	69fb      	ldr	r3, [r7, #28]
 81038e0:	08da      	lsrs	r2, r3, #3
 81038e2:	687b      	ldr	r3, [r7, #4]
 81038e4:	3208      	adds	r2, #8
 81038e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81038ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81038ec:	69fb      	ldr	r3, [r7, #28]
 81038ee:	f003 0307 	and.w	r3, r3, #7
 81038f2:	009b      	lsls	r3, r3, #2
 81038f4:	220f      	movs	r2, #15
 81038f6:	fa02 f303 	lsl.w	r3, r2, r3
 81038fa:	43db      	mvns	r3, r3
 81038fc:	69ba      	ldr	r2, [r7, #24]
 81038fe:	4013      	ands	r3, r2
 8103900:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8103902:	683b      	ldr	r3, [r7, #0]
 8103904:	691a      	ldr	r2, [r3, #16]
 8103906:	69fb      	ldr	r3, [r7, #28]
 8103908:	f003 0307 	and.w	r3, r3, #7
 810390c:	009b      	lsls	r3, r3, #2
 810390e:	fa02 f303 	lsl.w	r3, r2, r3
 8103912:	69ba      	ldr	r2, [r7, #24]
 8103914:	4313      	orrs	r3, r2
 8103916:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8103918:	69fb      	ldr	r3, [r7, #28]
 810391a:	08da      	lsrs	r2, r3, #3
 810391c:	687b      	ldr	r3, [r7, #4]
 810391e:	3208      	adds	r2, #8
 8103920:	69b9      	ldr	r1, [r7, #24]
 8103922:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8103926:	687b      	ldr	r3, [r7, #4]
 8103928:	681b      	ldr	r3, [r3, #0]
 810392a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 810392c:	69fb      	ldr	r3, [r7, #28]
 810392e:	005b      	lsls	r3, r3, #1
 8103930:	2203      	movs	r2, #3
 8103932:	fa02 f303 	lsl.w	r3, r2, r3
 8103936:	43db      	mvns	r3, r3
 8103938:	69ba      	ldr	r2, [r7, #24]
 810393a:	4013      	ands	r3, r2
 810393c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810393e:	683b      	ldr	r3, [r7, #0]
 8103940:	685b      	ldr	r3, [r3, #4]
 8103942:	f003 0203 	and.w	r2, r3, #3
 8103946:	69fb      	ldr	r3, [r7, #28]
 8103948:	005b      	lsls	r3, r3, #1
 810394a:	fa02 f303 	lsl.w	r3, r2, r3
 810394e:	69ba      	ldr	r2, [r7, #24]
 8103950:	4313      	orrs	r3, r2
 8103952:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8103954:	687b      	ldr	r3, [r7, #4]
 8103956:	69ba      	ldr	r2, [r7, #24]
 8103958:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 810395a:	683b      	ldr	r3, [r7, #0]
 810395c:	685b      	ldr	r3, [r3, #4]
 810395e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8103962:	2b00      	cmp	r3, #0
 8103964:	f000 80e0 	beq.w	8103b28 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8103968:	4b2f      	ldr	r3, [pc, #188]	; (8103a28 <HAL_GPIO_Init+0x238>)
 810396a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810396e:	4a2e      	ldr	r2, [pc, #184]	; (8103a28 <HAL_GPIO_Init+0x238>)
 8103970:	f043 0302 	orr.w	r3, r3, #2
 8103974:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8103978:	4b2b      	ldr	r3, [pc, #172]	; (8103a28 <HAL_GPIO_Init+0x238>)
 810397a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810397e:	f003 0302 	and.w	r3, r3, #2
 8103982:	60fb      	str	r3, [r7, #12]
 8103984:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8103986:	4a29      	ldr	r2, [pc, #164]	; (8103a2c <HAL_GPIO_Init+0x23c>)
 8103988:	69fb      	ldr	r3, [r7, #28]
 810398a:	089b      	lsrs	r3, r3, #2
 810398c:	3302      	adds	r3, #2
 810398e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8103992:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8103994:	69fb      	ldr	r3, [r7, #28]
 8103996:	f003 0303 	and.w	r3, r3, #3
 810399a:	009b      	lsls	r3, r3, #2
 810399c:	220f      	movs	r2, #15
 810399e:	fa02 f303 	lsl.w	r3, r2, r3
 81039a2:	43db      	mvns	r3, r3
 81039a4:	69ba      	ldr	r2, [r7, #24]
 81039a6:	4013      	ands	r3, r2
 81039a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81039aa:	687b      	ldr	r3, [r7, #4]
 81039ac:	4a20      	ldr	r2, [pc, #128]	; (8103a30 <HAL_GPIO_Init+0x240>)
 81039ae:	4293      	cmp	r3, r2
 81039b0:	d052      	beq.n	8103a58 <HAL_GPIO_Init+0x268>
 81039b2:	687b      	ldr	r3, [r7, #4]
 81039b4:	4a1f      	ldr	r2, [pc, #124]	; (8103a34 <HAL_GPIO_Init+0x244>)
 81039b6:	4293      	cmp	r3, r2
 81039b8:	d031      	beq.n	8103a1e <HAL_GPIO_Init+0x22e>
 81039ba:	687b      	ldr	r3, [r7, #4]
 81039bc:	4a1e      	ldr	r2, [pc, #120]	; (8103a38 <HAL_GPIO_Init+0x248>)
 81039be:	4293      	cmp	r3, r2
 81039c0:	d02b      	beq.n	8103a1a <HAL_GPIO_Init+0x22a>
 81039c2:	687b      	ldr	r3, [r7, #4]
 81039c4:	4a1d      	ldr	r2, [pc, #116]	; (8103a3c <HAL_GPIO_Init+0x24c>)
 81039c6:	4293      	cmp	r3, r2
 81039c8:	d025      	beq.n	8103a16 <HAL_GPIO_Init+0x226>
 81039ca:	687b      	ldr	r3, [r7, #4]
 81039cc:	4a1c      	ldr	r2, [pc, #112]	; (8103a40 <HAL_GPIO_Init+0x250>)
 81039ce:	4293      	cmp	r3, r2
 81039d0:	d01f      	beq.n	8103a12 <HAL_GPIO_Init+0x222>
 81039d2:	687b      	ldr	r3, [r7, #4]
 81039d4:	4a1b      	ldr	r2, [pc, #108]	; (8103a44 <HAL_GPIO_Init+0x254>)
 81039d6:	4293      	cmp	r3, r2
 81039d8:	d019      	beq.n	8103a0e <HAL_GPIO_Init+0x21e>
 81039da:	687b      	ldr	r3, [r7, #4]
 81039dc:	4a1a      	ldr	r2, [pc, #104]	; (8103a48 <HAL_GPIO_Init+0x258>)
 81039de:	4293      	cmp	r3, r2
 81039e0:	d013      	beq.n	8103a0a <HAL_GPIO_Init+0x21a>
 81039e2:	687b      	ldr	r3, [r7, #4]
 81039e4:	4a19      	ldr	r2, [pc, #100]	; (8103a4c <HAL_GPIO_Init+0x25c>)
 81039e6:	4293      	cmp	r3, r2
 81039e8:	d00d      	beq.n	8103a06 <HAL_GPIO_Init+0x216>
 81039ea:	687b      	ldr	r3, [r7, #4]
 81039ec:	4a18      	ldr	r2, [pc, #96]	; (8103a50 <HAL_GPIO_Init+0x260>)
 81039ee:	4293      	cmp	r3, r2
 81039f0:	d007      	beq.n	8103a02 <HAL_GPIO_Init+0x212>
 81039f2:	687b      	ldr	r3, [r7, #4]
 81039f4:	4a17      	ldr	r2, [pc, #92]	; (8103a54 <HAL_GPIO_Init+0x264>)
 81039f6:	4293      	cmp	r3, r2
 81039f8:	d101      	bne.n	81039fe <HAL_GPIO_Init+0x20e>
 81039fa:	2309      	movs	r3, #9
 81039fc:	e02d      	b.n	8103a5a <HAL_GPIO_Init+0x26a>
 81039fe:	230a      	movs	r3, #10
 8103a00:	e02b      	b.n	8103a5a <HAL_GPIO_Init+0x26a>
 8103a02:	2308      	movs	r3, #8
 8103a04:	e029      	b.n	8103a5a <HAL_GPIO_Init+0x26a>
 8103a06:	2307      	movs	r3, #7
 8103a08:	e027      	b.n	8103a5a <HAL_GPIO_Init+0x26a>
 8103a0a:	2306      	movs	r3, #6
 8103a0c:	e025      	b.n	8103a5a <HAL_GPIO_Init+0x26a>
 8103a0e:	2305      	movs	r3, #5
 8103a10:	e023      	b.n	8103a5a <HAL_GPIO_Init+0x26a>
 8103a12:	2304      	movs	r3, #4
 8103a14:	e021      	b.n	8103a5a <HAL_GPIO_Init+0x26a>
 8103a16:	2303      	movs	r3, #3
 8103a18:	e01f      	b.n	8103a5a <HAL_GPIO_Init+0x26a>
 8103a1a:	2302      	movs	r3, #2
 8103a1c:	e01d      	b.n	8103a5a <HAL_GPIO_Init+0x26a>
 8103a1e:	2301      	movs	r3, #1
 8103a20:	e01b      	b.n	8103a5a <HAL_GPIO_Init+0x26a>
 8103a22:	bf00      	nop
 8103a24:	580000c0 	.word	0x580000c0
 8103a28:	58024400 	.word	0x58024400
 8103a2c:	58000400 	.word	0x58000400
 8103a30:	58020000 	.word	0x58020000
 8103a34:	58020400 	.word	0x58020400
 8103a38:	58020800 	.word	0x58020800
 8103a3c:	58020c00 	.word	0x58020c00
 8103a40:	58021000 	.word	0x58021000
 8103a44:	58021400 	.word	0x58021400
 8103a48:	58021800 	.word	0x58021800
 8103a4c:	58021c00 	.word	0x58021c00
 8103a50:	58022000 	.word	0x58022000
 8103a54:	58022400 	.word	0x58022400
 8103a58:	2300      	movs	r3, #0
 8103a5a:	69fa      	ldr	r2, [r7, #28]
 8103a5c:	f002 0203 	and.w	r2, r2, #3
 8103a60:	0092      	lsls	r2, r2, #2
 8103a62:	4093      	lsls	r3, r2
 8103a64:	69ba      	ldr	r2, [r7, #24]
 8103a66:	4313      	orrs	r3, r2
 8103a68:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8103a6a:	4938      	ldr	r1, [pc, #224]	; (8103b4c <HAL_GPIO_Init+0x35c>)
 8103a6c:	69fb      	ldr	r3, [r7, #28]
 8103a6e:	089b      	lsrs	r3, r3, #2
 8103a70:	3302      	adds	r3, #2
 8103a72:	69ba      	ldr	r2, [r7, #24]
 8103a74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8103a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8103a7c:	681b      	ldr	r3, [r3, #0]
 8103a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103a80:	693b      	ldr	r3, [r7, #16]
 8103a82:	43db      	mvns	r3, r3
 8103a84:	69ba      	ldr	r2, [r7, #24]
 8103a86:	4013      	ands	r3, r2
 8103a88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8103a8a:	683b      	ldr	r3, [r7, #0]
 8103a8c:	685b      	ldr	r3, [r3, #4]
 8103a8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8103a92:	2b00      	cmp	r3, #0
 8103a94:	d003      	beq.n	8103a9e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8103a96:	69ba      	ldr	r2, [r7, #24]
 8103a98:	693b      	ldr	r3, [r7, #16]
 8103a9a:	4313      	orrs	r3, r2
 8103a9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8103a9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8103aa2:	69bb      	ldr	r3, [r7, #24]
 8103aa4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8103aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8103aaa:	685b      	ldr	r3, [r3, #4]
 8103aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103aae:	693b      	ldr	r3, [r7, #16]
 8103ab0:	43db      	mvns	r3, r3
 8103ab2:	69ba      	ldr	r2, [r7, #24]
 8103ab4:	4013      	ands	r3, r2
 8103ab6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8103ab8:	683b      	ldr	r3, [r7, #0]
 8103aba:	685b      	ldr	r3, [r3, #4]
 8103abc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8103ac0:	2b00      	cmp	r3, #0
 8103ac2:	d003      	beq.n	8103acc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8103ac4:	69ba      	ldr	r2, [r7, #24]
 8103ac6:	693b      	ldr	r3, [r7, #16]
 8103ac8:	4313      	orrs	r3, r2
 8103aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8103acc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8103ad0:	69bb      	ldr	r3, [r7, #24]
 8103ad2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8103ad4:	697b      	ldr	r3, [r7, #20]
 8103ad6:	685b      	ldr	r3, [r3, #4]
 8103ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103ada:	693b      	ldr	r3, [r7, #16]
 8103adc:	43db      	mvns	r3, r3
 8103ade:	69ba      	ldr	r2, [r7, #24]
 8103ae0:	4013      	ands	r3, r2
 8103ae2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8103ae4:	683b      	ldr	r3, [r7, #0]
 8103ae6:	685b      	ldr	r3, [r3, #4]
 8103ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8103aec:	2b00      	cmp	r3, #0
 8103aee:	d003      	beq.n	8103af8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8103af0:	69ba      	ldr	r2, [r7, #24]
 8103af2:	693b      	ldr	r3, [r7, #16]
 8103af4:	4313      	orrs	r3, r2
 8103af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8103af8:	697b      	ldr	r3, [r7, #20]
 8103afa:	69ba      	ldr	r2, [r7, #24]
 8103afc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8103afe:	697b      	ldr	r3, [r7, #20]
 8103b00:	681b      	ldr	r3, [r3, #0]
 8103b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103b04:	693b      	ldr	r3, [r7, #16]
 8103b06:	43db      	mvns	r3, r3
 8103b08:	69ba      	ldr	r2, [r7, #24]
 8103b0a:	4013      	ands	r3, r2
 8103b0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8103b0e:	683b      	ldr	r3, [r7, #0]
 8103b10:	685b      	ldr	r3, [r3, #4]
 8103b12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103b16:	2b00      	cmp	r3, #0
 8103b18:	d003      	beq.n	8103b22 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8103b1a:	69ba      	ldr	r2, [r7, #24]
 8103b1c:	693b      	ldr	r3, [r7, #16]
 8103b1e:	4313      	orrs	r3, r2
 8103b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8103b22:	697b      	ldr	r3, [r7, #20]
 8103b24:	69ba      	ldr	r2, [r7, #24]
 8103b26:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8103b28:	69fb      	ldr	r3, [r7, #28]
 8103b2a:	3301      	adds	r3, #1
 8103b2c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8103b2e:	683b      	ldr	r3, [r7, #0]
 8103b30:	681a      	ldr	r2, [r3, #0]
 8103b32:	69fb      	ldr	r3, [r7, #28]
 8103b34:	fa22 f303 	lsr.w	r3, r2, r3
 8103b38:	2b00      	cmp	r3, #0
 8103b3a:	f47f ae63 	bne.w	8103804 <HAL_GPIO_Init+0x14>
  }
}
 8103b3e:	bf00      	nop
 8103b40:	bf00      	nop
 8103b42:	3724      	adds	r7, #36	; 0x24
 8103b44:	46bd      	mov	sp, r7
 8103b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b4a:	4770      	bx	lr
 8103b4c:	58000400 	.word	0x58000400

08103b50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8103b50:	b480      	push	{r7}
 8103b52:	b083      	sub	sp, #12
 8103b54:	af00      	add	r7, sp, #0
 8103b56:	6078      	str	r0, [r7, #4]
 8103b58:	460b      	mov	r3, r1
 8103b5a:	807b      	strh	r3, [r7, #2]
 8103b5c:	4613      	mov	r3, r2
 8103b5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8103b60:	787b      	ldrb	r3, [r7, #1]
 8103b62:	2b00      	cmp	r3, #0
 8103b64:	d003      	beq.n	8103b6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8103b66:	887a      	ldrh	r2, [r7, #2]
 8103b68:	687b      	ldr	r3, [r7, #4]
 8103b6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8103b6c:	e003      	b.n	8103b76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8103b6e:	887b      	ldrh	r3, [r7, #2]
 8103b70:	041a      	lsls	r2, r3, #16
 8103b72:	687b      	ldr	r3, [r7, #4]
 8103b74:	619a      	str	r2, [r3, #24]
}
 8103b76:	bf00      	nop
 8103b78:	370c      	adds	r7, #12
 8103b7a:	46bd      	mov	sp, r7
 8103b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b80:	4770      	bx	lr

08103b82 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8103b82:	b480      	push	{r7}
 8103b84:	b085      	sub	sp, #20
 8103b86:	af00      	add	r7, sp, #0
 8103b88:	6078      	str	r0, [r7, #4]
 8103b8a:	460b      	mov	r3, r1
 8103b8c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8103b8e:	687b      	ldr	r3, [r7, #4]
 8103b90:	695b      	ldr	r3, [r3, #20]
 8103b92:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8103b94:	887a      	ldrh	r2, [r7, #2]
 8103b96:	68fb      	ldr	r3, [r7, #12]
 8103b98:	4013      	ands	r3, r2
 8103b9a:	041a      	lsls	r2, r3, #16
 8103b9c:	68fb      	ldr	r3, [r7, #12]
 8103b9e:	43d9      	mvns	r1, r3
 8103ba0:	887b      	ldrh	r3, [r7, #2]
 8103ba2:	400b      	ands	r3, r1
 8103ba4:	431a      	orrs	r2, r3
 8103ba6:	687b      	ldr	r3, [r7, #4]
 8103ba8:	619a      	str	r2, [r3, #24]
}
 8103baa:	bf00      	nop
 8103bac:	3714      	adds	r7, #20
 8103bae:	46bd      	mov	sp, r7
 8103bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103bb4:	4770      	bx	lr

08103bb6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8103bb6:	b580      	push	{r7, lr}
 8103bb8:	b082      	sub	sp, #8
 8103bba:	af00      	add	r7, sp, #0
 8103bbc:	4603      	mov	r3, r0
 8103bbe:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 8103bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8103bc4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8103bc8:	88fb      	ldrh	r3, [r7, #6]
 8103bca:	4013      	ands	r3, r2
 8103bcc:	2b00      	cmp	r3, #0
 8103bce:	d008      	beq.n	8103be2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 8103bd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8103bd4:	88fb      	ldrh	r3, [r7, #6]
 8103bd6:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8103bda:	88fb      	ldrh	r3, [r7, #6]
 8103bdc:	4618      	mov	r0, r3
 8103bde:	f7fd fc33 	bl	8101448 <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 8103be2:	bf00      	nop
 8103be4:	3708      	adds	r7, #8
 8103be6:	46bd      	mov	sp, r7
 8103be8:	bd80      	pop	{r7, pc}
	...

08103bec <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
 8103bec:	b480      	push	{r7}
 8103bee:	b083      	sub	sp, #12
 8103bf0:	af00      	add	r7, sp, #0
 8103bf2:	6078      	str	r0, [r7, #4]
 8103bf4:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
 8103bf6:	490e      	ldr	r1, [pc, #56]	; (8103c30 <HAL_HSEM_Take+0x44>)
 8103bf8:	683b      	ldr	r3, [r7, #0]
 8103bfa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8103bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8103c02:	687a      	ldr	r2, [r7, #4]
 8103c04:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
 8103c08:	4a09      	ldr	r2, [pc, #36]	; (8103c30 <HAL_HSEM_Take+0x44>)
 8103c0a:	687b      	ldr	r3, [r7, #4]
 8103c0c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8103c10:	683b      	ldr	r3, [r7, #0]
 8103c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8103c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8103c1a:	429a      	cmp	r2, r3
 8103c1c:	d101      	bne.n	8103c22 <HAL_HSEM_Take+0x36>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
 8103c1e:	2300      	movs	r3, #0
 8103c20:	e000      	b.n	8103c24 <HAL_HSEM_Take+0x38>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
 8103c22:	2301      	movs	r3, #1
}
 8103c24:	4618      	mov	r0, r3
 8103c26:	370c      	adds	r7, #12
 8103c28:	46bd      	mov	sp, r7
 8103c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c2e:	4770      	bx	lr
 8103c30:	58026400 	.word	0x58026400

08103c34 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8103c34:	b480      	push	{r7}
 8103c36:	b083      	sub	sp, #12
 8103c38:	af00      	add	r7, sp, #0
 8103c3a:	6078      	str	r0, [r7, #4]
 8103c3c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8103c3e:	4906      	ldr	r1, [pc, #24]	; (8103c58 <HAL_HSEM_Release+0x24>)
 8103c40:	683b      	ldr	r3, [r7, #0]
 8103c42:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8103c46:	687b      	ldr	r3, [r7, #4]
 8103c48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8103c4c:	bf00      	nop
 8103c4e:	370c      	adds	r7, #12
 8103c50:	46bd      	mov	sp, r7
 8103c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c56:	4770      	bx	lr
 8103c58:	58026400 	.word	0x58026400

08103c5c <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8103c5c:	b480      	push	{r7}
 8103c5e:	b083      	sub	sp, #12
 8103c60:	af00      	add	r7, sp, #0
 8103c62:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8103c64:	4b05      	ldr	r3, [pc, #20]	; (8103c7c <HAL_HSEM_ActivateNotification+0x20>)
 8103c66:	681a      	ldr	r2, [r3, #0]
 8103c68:	4904      	ldr	r1, [pc, #16]	; (8103c7c <HAL_HSEM_ActivateNotification+0x20>)
 8103c6a:	687b      	ldr	r3, [r7, #4]
 8103c6c:	4313      	orrs	r3, r2
 8103c6e:	600b      	str	r3, [r1, #0]
#endif
}
 8103c70:	bf00      	nop
 8103c72:	370c      	adds	r7, #12
 8103c74:	46bd      	mov	sp, r7
 8103c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c7a:	4770      	bx	lr
 8103c7c:	58026510 	.word	0x58026510

08103c80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8103c80:	b580      	push	{r7, lr}
 8103c82:	b082      	sub	sp, #8
 8103c84:	af00      	add	r7, sp, #0
 8103c86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8103c88:	687b      	ldr	r3, [r7, #4]
 8103c8a:	2b00      	cmp	r3, #0
 8103c8c:	d101      	bne.n	8103c92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8103c8e:	2301      	movs	r3, #1
 8103c90:	e081      	b.n	8103d96 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8103c92:	687b      	ldr	r3, [r7, #4]
 8103c94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8103c98:	b2db      	uxtb	r3, r3
 8103c9a:	2b00      	cmp	r3, #0
 8103c9c:	d106      	bne.n	8103cac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8103c9e:	687b      	ldr	r3, [r7, #4]
 8103ca0:	2200      	movs	r2, #0
 8103ca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8103ca6:	6878      	ldr	r0, [r7, #4]
 8103ca8:	f7fd fc1e 	bl	81014e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8103cac:	687b      	ldr	r3, [r7, #4]
 8103cae:	2224      	movs	r2, #36	; 0x24
 8103cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8103cb4:	687b      	ldr	r3, [r7, #4]
 8103cb6:	681b      	ldr	r3, [r3, #0]
 8103cb8:	681a      	ldr	r2, [r3, #0]
 8103cba:	687b      	ldr	r3, [r7, #4]
 8103cbc:	681b      	ldr	r3, [r3, #0]
 8103cbe:	f022 0201 	bic.w	r2, r2, #1
 8103cc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8103cc4:	687b      	ldr	r3, [r7, #4]
 8103cc6:	685a      	ldr	r2, [r3, #4]
 8103cc8:	687b      	ldr	r3, [r7, #4]
 8103cca:	681b      	ldr	r3, [r3, #0]
 8103ccc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8103cd0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8103cd2:	687b      	ldr	r3, [r7, #4]
 8103cd4:	681b      	ldr	r3, [r3, #0]
 8103cd6:	689a      	ldr	r2, [r3, #8]
 8103cd8:	687b      	ldr	r3, [r7, #4]
 8103cda:	681b      	ldr	r3, [r3, #0]
 8103cdc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8103ce0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8103ce2:	687b      	ldr	r3, [r7, #4]
 8103ce4:	68db      	ldr	r3, [r3, #12]
 8103ce6:	2b01      	cmp	r3, #1
 8103ce8:	d107      	bne.n	8103cfa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8103cea:	687b      	ldr	r3, [r7, #4]
 8103cec:	689a      	ldr	r2, [r3, #8]
 8103cee:	687b      	ldr	r3, [r7, #4]
 8103cf0:	681b      	ldr	r3, [r3, #0]
 8103cf2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8103cf6:	609a      	str	r2, [r3, #8]
 8103cf8:	e006      	b.n	8103d08 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8103cfa:	687b      	ldr	r3, [r7, #4]
 8103cfc:	689a      	ldr	r2, [r3, #8]
 8103cfe:	687b      	ldr	r3, [r7, #4]
 8103d00:	681b      	ldr	r3, [r3, #0]
 8103d02:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8103d06:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8103d08:	687b      	ldr	r3, [r7, #4]
 8103d0a:	68db      	ldr	r3, [r3, #12]
 8103d0c:	2b02      	cmp	r3, #2
 8103d0e:	d104      	bne.n	8103d1a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8103d10:	687b      	ldr	r3, [r7, #4]
 8103d12:	681b      	ldr	r3, [r3, #0]
 8103d14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8103d18:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8103d1a:	687b      	ldr	r3, [r7, #4]
 8103d1c:	681b      	ldr	r3, [r3, #0]
 8103d1e:	685b      	ldr	r3, [r3, #4]
 8103d20:	687a      	ldr	r2, [r7, #4]
 8103d22:	6812      	ldr	r2, [r2, #0]
 8103d24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8103d28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8103d2c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8103d2e:	687b      	ldr	r3, [r7, #4]
 8103d30:	681b      	ldr	r3, [r3, #0]
 8103d32:	68da      	ldr	r2, [r3, #12]
 8103d34:	687b      	ldr	r3, [r7, #4]
 8103d36:	681b      	ldr	r3, [r3, #0]
 8103d38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8103d3c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8103d3e:	687b      	ldr	r3, [r7, #4]
 8103d40:	691a      	ldr	r2, [r3, #16]
 8103d42:	687b      	ldr	r3, [r7, #4]
 8103d44:	695b      	ldr	r3, [r3, #20]
 8103d46:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8103d4a:	687b      	ldr	r3, [r7, #4]
 8103d4c:	699b      	ldr	r3, [r3, #24]
 8103d4e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8103d50:	687b      	ldr	r3, [r7, #4]
 8103d52:	681b      	ldr	r3, [r3, #0]
 8103d54:	430a      	orrs	r2, r1
 8103d56:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8103d58:	687b      	ldr	r3, [r7, #4]
 8103d5a:	69d9      	ldr	r1, [r3, #28]
 8103d5c:	687b      	ldr	r3, [r7, #4]
 8103d5e:	6a1a      	ldr	r2, [r3, #32]
 8103d60:	687b      	ldr	r3, [r7, #4]
 8103d62:	681b      	ldr	r3, [r3, #0]
 8103d64:	430a      	orrs	r2, r1
 8103d66:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8103d68:	687b      	ldr	r3, [r7, #4]
 8103d6a:	681b      	ldr	r3, [r3, #0]
 8103d6c:	681a      	ldr	r2, [r3, #0]
 8103d6e:	687b      	ldr	r3, [r7, #4]
 8103d70:	681b      	ldr	r3, [r3, #0]
 8103d72:	f042 0201 	orr.w	r2, r2, #1
 8103d76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8103d78:	687b      	ldr	r3, [r7, #4]
 8103d7a:	2200      	movs	r2, #0
 8103d7c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8103d7e:	687b      	ldr	r3, [r7, #4]
 8103d80:	2220      	movs	r2, #32
 8103d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8103d86:	687b      	ldr	r3, [r7, #4]
 8103d88:	2200      	movs	r2, #0
 8103d8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8103d8c:	687b      	ldr	r3, [r7, #4]
 8103d8e:	2200      	movs	r2, #0
 8103d90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8103d94:	2300      	movs	r3, #0
}
 8103d96:	4618      	mov	r0, r3
 8103d98:	3708      	adds	r7, #8
 8103d9a:	46bd      	mov	sp, r7
 8103d9c:	bd80      	pop	{r7, pc}
	...

08103da0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8103da0:	b580      	push	{r7, lr}
 8103da2:	b088      	sub	sp, #32
 8103da4:	af02      	add	r7, sp, #8
 8103da6:	60f8      	str	r0, [r7, #12]
 8103da8:	4608      	mov	r0, r1
 8103daa:	4611      	mov	r1, r2
 8103dac:	461a      	mov	r2, r3
 8103dae:	4603      	mov	r3, r0
 8103db0:	817b      	strh	r3, [r7, #10]
 8103db2:	460b      	mov	r3, r1
 8103db4:	813b      	strh	r3, [r7, #8]
 8103db6:	4613      	mov	r3, r2
 8103db8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8103dba:	68fb      	ldr	r3, [r7, #12]
 8103dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8103dc0:	b2db      	uxtb	r3, r3
 8103dc2:	2b20      	cmp	r3, #32
 8103dc4:	f040 80fd 	bne.w	8103fc2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8103dc8:	6a3b      	ldr	r3, [r7, #32]
 8103dca:	2b00      	cmp	r3, #0
 8103dcc:	d002      	beq.n	8103dd4 <HAL_I2C_Mem_Read+0x34>
 8103dce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8103dd0:	2b00      	cmp	r3, #0
 8103dd2:	d105      	bne.n	8103de0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8103dd4:	68fb      	ldr	r3, [r7, #12]
 8103dd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8103dda:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8103ddc:	2301      	movs	r3, #1
 8103dde:	e0f1      	b.n	8103fc4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8103de0:	68fb      	ldr	r3, [r7, #12]
 8103de2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8103de6:	2b01      	cmp	r3, #1
 8103de8:	d101      	bne.n	8103dee <HAL_I2C_Mem_Read+0x4e>
 8103dea:	2302      	movs	r3, #2
 8103dec:	e0ea      	b.n	8103fc4 <HAL_I2C_Mem_Read+0x224>
 8103dee:	68fb      	ldr	r3, [r7, #12]
 8103df0:	2201      	movs	r2, #1
 8103df2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8103df6:	f7fd fee7 	bl	8101bc8 <HAL_GetTick>
 8103dfa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8103dfc:	697b      	ldr	r3, [r7, #20]
 8103dfe:	9300      	str	r3, [sp, #0]
 8103e00:	2319      	movs	r3, #25
 8103e02:	2201      	movs	r2, #1
 8103e04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8103e08:	68f8      	ldr	r0, [r7, #12]
 8103e0a:	f000 f95b 	bl	81040c4 <I2C_WaitOnFlagUntilTimeout>
 8103e0e:	4603      	mov	r3, r0
 8103e10:	2b00      	cmp	r3, #0
 8103e12:	d001      	beq.n	8103e18 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8103e14:	2301      	movs	r3, #1
 8103e16:	e0d5      	b.n	8103fc4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8103e18:	68fb      	ldr	r3, [r7, #12]
 8103e1a:	2222      	movs	r2, #34	; 0x22
 8103e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8103e20:	68fb      	ldr	r3, [r7, #12]
 8103e22:	2240      	movs	r2, #64	; 0x40
 8103e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8103e28:	68fb      	ldr	r3, [r7, #12]
 8103e2a:	2200      	movs	r2, #0
 8103e2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8103e2e:	68fb      	ldr	r3, [r7, #12]
 8103e30:	6a3a      	ldr	r2, [r7, #32]
 8103e32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8103e34:	68fb      	ldr	r3, [r7, #12]
 8103e36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8103e38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8103e3a:	68fb      	ldr	r3, [r7, #12]
 8103e3c:	2200      	movs	r2, #0
 8103e3e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8103e40:	88f8      	ldrh	r0, [r7, #6]
 8103e42:	893a      	ldrh	r2, [r7, #8]
 8103e44:	8979      	ldrh	r1, [r7, #10]
 8103e46:	697b      	ldr	r3, [r7, #20]
 8103e48:	9301      	str	r3, [sp, #4]
 8103e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103e4c:	9300      	str	r3, [sp, #0]
 8103e4e:	4603      	mov	r3, r0
 8103e50:	68f8      	ldr	r0, [r7, #12]
 8103e52:	f000 f8bf 	bl	8103fd4 <I2C_RequestMemoryRead>
 8103e56:	4603      	mov	r3, r0
 8103e58:	2b00      	cmp	r3, #0
 8103e5a:	d005      	beq.n	8103e68 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8103e5c:	68fb      	ldr	r3, [r7, #12]
 8103e5e:	2200      	movs	r2, #0
 8103e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8103e64:	2301      	movs	r3, #1
 8103e66:	e0ad      	b.n	8103fc4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8103e68:	68fb      	ldr	r3, [r7, #12]
 8103e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103e6c:	b29b      	uxth	r3, r3
 8103e6e:	2bff      	cmp	r3, #255	; 0xff
 8103e70:	d90e      	bls.n	8103e90 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8103e72:	68fb      	ldr	r3, [r7, #12]
 8103e74:	22ff      	movs	r2, #255	; 0xff
 8103e76:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8103e78:	68fb      	ldr	r3, [r7, #12]
 8103e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103e7c:	b2da      	uxtb	r2, r3
 8103e7e:	8979      	ldrh	r1, [r7, #10]
 8103e80:	4b52      	ldr	r3, [pc, #328]	; (8103fcc <HAL_I2C_Mem_Read+0x22c>)
 8103e82:	9300      	str	r3, [sp, #0]
 8103e84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8103e88:	68f8      	ldr	r0, [r7, #12]
 8103e8a:	f000 fac3 	bl	8104414 <I2C_TransferConfig>
 8103e8e:	e00f      	b.n	8103eb0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8103e90:	68fb      	ldr	r3, [r7, #12]
 8103e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103e94:	b29a      	uxth	r2, r3
 8103e96:	68fb      	ldr	r3, [r7, #12]
 8103e98:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8103e9a:	68fb      	ldr	r3, [r7, #12]
 8103e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103e9e:	b2da      	uxtb	r2, r3
 8103ea0:	8979      	ldrh	r1, [r7, #10]
 8103ea2:	4b4a      	ldr	r3, [pc, #296]	; (8103fcc <HAL_I2C_Mem_Read+0x22c>)
 8103ea4:	9300      	str	r3, [sp, #0]
 8103ea6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8103eaa:	68f8      	ldr	r0, [r7, #12]
 8103eac:	f000 fab2 	bl	8104414 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8103eb0:	697b      	ldr	r3, [r7, #20]
 8103eb2:	9300      	str	r3, [sp, #0]
 8103eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103eb6:	2200      	movs	r2, #0
 8103eb8:	2104      	movs	r1, #4
 8103eba:	68f8      	ldr	r0, [r7, #12]
 8103ebc:	f000 f902 	bl	81040c4 <I2C_WaitOnFlagUntilTimeout>
 8103ec0:	4603      	mov	r3, r0
 8103ec2:	2b00      	cmp	r3, #0
 8103ec4:	d001      	beq.n	8103eca <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8103ec6:	2301      	movs	r3, #1
 8103ec8:	e07c      	b.n	8103fc4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8103eca:	68fb      	ldr	r3, [r7, #12]
 8103ecc:	681b      	ldr	r3, [r3, #0]
 8103ece:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8103ed0:	68fb      	ldr	r3, [r7, #12]
 8103ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103ed4:	b2d2      	uxtb	r2, r2
 8103ed6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8103ed8:	68fb      	ldr	r3, [r7, #12]
 8103eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103edc:	1c5a      	adds	r2, r3, #1
 8103ede:	68fb      	ldr	r3, [r7, #12]
 8103ee0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8103ee2:	68fb      	ldr	r3, [r7, #12]
 8103ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103ee6:	3b01      	subs	r3, #1
 8103ee8:	b29a      	uxth	r2, r3
 8103eea:	68fb      	ldr	r3, [r7, #12]
 8103eec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8103eee:	68fb      	ldr	r3, [r7, #12]
 8103ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103ef2:	b29b      	uxth	r3, r3
 8103ef4:	3b01      	subs	r3, #1
 8103ef6:	b29a      	uxth	r2, r3
 8103ef8:	68fb      	ldr	r3, [r7, #12]
 8103efa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8103efc:	68fb      	ldr	r3, [r7, #12]
 8103efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103f00:	b29b      	uxth	r3, r3
 8103f02:	2b00      	cmp	r3, #0
 8103f04:	d034      	beq.n	8103f70 <HAL_I2C_Mem_Read+0x1d0>
 8103f06:	68fb      	ldr	r3, [r7, #12]
 8103f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103f0a:	2b00      	cmp	r3, #0
 8103f0c:	d130      	bne.n	8103f70 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8103f0e:	697b      	ldr	r3, [r7, #20]
 8103f10:	9300      	str	r3, [sp, #0]
 8103f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103f14:	2200      	movs	r2, #0
 8103f16:	2180      	movs	r1, #128	; 0x80
 8103f18:	68f8      	ldr	r0, [r7, #12]
 8103f1a:	f000 f8d3 	bl	81040c4 <I2C_WaitOnFlagUntilTimeout>
 8103f1e:	4603      	mov	r3, r0
 8103f20:	2b00      	cmp	r3, #0
 8103f22:	d001      	beq.n	8103f28 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8103f24:	2301      	movs	r3, #1
 8103f26:	e04d      	b.n	8103fc4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8103f28:	68fb      	ldr	r3, [r7, #12]
 8103f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103f2c:	b29b      	uxth	r3, r3
 8103f2e:	2bff      	cmp	r3, #255	; 0xff
 8103f30:	d90e      	bls.n	8103f50 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8103f32:	68fb      	ldr	r3, [r7, #12]
 8103f34:	22ff      	movs	r2, #255	; 0xff
 8103f36:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8103f38:	68fb      	ldr	r3, [r7, #12]
 8103f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103f3c:	b2da      	uxtb	r2, r3
 8103f3e:	8979      	ldrh	r1, [r7, #10]
 8103f40:	2300      	movs	r3, #0
 8103f42:	9300      	str	r3, [sp, #0]
 8103f44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8103f48:	68f8      	ldr	r0, [r7, #12]
 8103f4a:	f000 fa63 	bl	8104414 <I2C_TransferConfig>
 8103f4e:	e00f      	b.n	8103f70 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8103f50:	68fb      	ldr	r3, [r7, #12]
 8103f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103f54:	b29a      	uxth	r2, r3
 8103f56:	68fb      	ldr	r3, [r7, #12]
 8103f58:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8103f5a:	68fb      	ldr	r3, [r7, #12]
 8103f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103f5e:	b2da      	uxtb	r2, r3
 8103f60:	8979      	ldrh	r1, [r7, #10]
 8103f62:	2300      	movs	r3, #0
 8103f64:	9300      	str	r3, [sp, #0]
 8103f66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8103f6a:	68f8      	ldr	r0, [r7, #12]
 8103f6c:	f000 fa52 	bl	8104414 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8103f70:	68fb      	ldr	r3, [r7, #12]
 8103f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103f74:	b29b      	uxth	r3, r3
 8103f76:	2b00      	cmp	r3, #0
 8103f78:	d19a      	bne.n	8103eb0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8103f7a:	697a      	ldr	r2, [r7, #20]
 8103f7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8103f7e:	68f8      	ldr	r0, [r7, #12]
 8103f80:	f000 f920 	bl	81041c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8103f84:	4603      	mov	r3, r0
 8103f86:	2b00      	cmp	r3, #0
 8103f88:	d001      	beq.n	8103f8e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8103f8a:	2301      	movs	r3, #1
 8103f8c:	e01a      	b.n	8103fc4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8103f8e:	68fb      	ldr	r3, [r7, #12]
 8103f90:	681b      	ldr	r3, [r3, #0]
 8103f92:	2220      	movs	r2, #32
 8103f94:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8103f96:	68fb      	ldr	r3, [r7, #12]
 8103f98:	681b      	ldr	r3, [r3, #0]
 8103f9a:	6859      	ldr	r1, [r3, #4]
 8103f9c:	68fb      	ldr	r3, [r7, #12]
 8103f9e:	681a      	ldr	r2, [r3, #0]
 8103fa0:	4b0b      	ldr	r3, [pc, #44]	; (8103fd0 <HAL_I2C_Mem_Read+0x230>)
 8103fa2:	400b      	ands	r3, r1
 8103fa4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8103fa6:	68fb      	ldr	r3, [r7, #12]
 8103fa8:	2220      	movs	r2, #32
 8103faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8103fae:	68fb      	ldr	r3, [r7, #12]
 8103fb0:	2200      	movs	r2, #0
 8103fb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8103fb6:	68fb      	ldr	r3, [r7, #12]
 8103fb8:	2200      	movs	r2, #0
 8103fba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8103fbe:	2300      	movs	r3, #0
 8103fc0:	e000      	b.n	8103fc4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8103fc2:	2302      	movs	r3, #2
  }
}
 8103fc4:	4618      	mov	r0, r3
 8103fc6:	3718      	adds	r7, #24
 8103fc8:	46bd      	mov	sp, r7
 8103fca:	bd80      	pop	{r7, pc}
 8103fcc:	80002400 	.word	0x80002400
 8103fd0:	fe00e800 	.word	0xfe00e800

08103fd4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8103fd4:	b580      	push	{r7, lr}
 8103fd6:	b086      	sub	sp, #24
 8103fd8:	af02      	add	r7, sp, #8
 8103fda:	60f8      	str	r0, [r7, #12]
 8103fdc:	4608      	mov	r0, r1
 8103fde:	4611      	mov	r1, r2
 8103fe0:	461a      	mov	r2, r3
 8103fe2:	4603      	mov	r3, r0
 8103fe4:	817b      	strh	r3, [r7, #10]
 8103fe6:	460b      	mov	r3, r1
 8103fe8:	813b      	strh	r3, [r7, #8]
 8103fea:	4613      	mov	r3, r2
 8103fec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8103fee:	88fb      	ldrh	r3, [r7, #6]
 8103ff0:	b2da      	uxtb	r2, r3
 8103ff2:	8979      	ldrh	r1, [r7, #10]
 8103ff4:	4b20      	ldr	r3, [pc, #128]	; (8104078 <I2C_RequestMemoryRead+0xa4>)
 8103ff6:	9300      	str	r3, [sp, #0]
 8103ff8:	2300      	movs	r3, #0
 8103ffa:	68f8      	ldr	r0, [r7, #12]
 8103ffc:	f000 fa0a 	bl	8104414 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8104000:	69fa      	ldr	r2, [r7, #28]
 8104002:	69b9      	ldr	r1, [r7, #24]
 8104004:	68f8      	ldr	r0, [r7, #12]
 8104006:	f000 f89d 	bl	8104144 <I2C_WaitOnTXISFlagUntilTimeout>
 810400a:	4603      	mov	r3, r0
 810400c:	2b00      	cmp	r3, #0
 810400e:	d001      	beq.n	8104014 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8104010:	2301      	movs	r3, #1
 8104012:	e02c      	b.n	810406e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8104014:	88fb      	ldrh	r3, [r7, #6]
 8104016:	2b01      	cmp	r3, #1
 8104018:	d105      	bne.n	8104026 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 810401a:	893b      	ldrh	r3, [r7, #8]
 810401c:	b2da      	uxtb	r2, r3
 810401e:	68fb      	ldr	r3, [r7, #12]
 8104020:	681b      	ldr	r3, [r3, #0]
 8104022:	629a      	str	r2, [r3, #40]	; 0x28
 8104024:	e015      	b.n	8104052 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8104026:	893b      	ldrh	r3, [r7, #8]
 8104028:	0a1b      	lsrs	r3, r3, #8
 810402a:	b29b      	uxth	r3, r3
 810402c:	b2da      	uxtb	r2, r3
 810402e:	68fb      	ldr	r3, [r7, #12]
 8104030:	681b      	ldr	r3, [r3, #0]
 8104032:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8104034:	69fa      	ldr	r2, [r7, #28]
 8104036:	69b9      	ldr	r1, [r7, #24]
 8104038:	68f8      	ldr	r0, [r7, #12]
 810403a:	f000 f883 	bl	8104144 <I2C_WaitOnTXISFlagUntilTimeout>
 810403e:	4603      	mov	r3, r0
 8104040:	2b00      	cmp	r3, #0
 8104042:	d001      	beq.n	8104048 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8104044:	2301      	movs	r3, #1
 8104046:	e012      	b.n	810406e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8104048:	893b      	ldrh	r3, [r7, #8]
 810404a:	b2da      	uxtb	r2, r3
 810404c:	68fb      	ldr	r3, [r7, #12]
 810404e:	681b      	ldr	r3, [r3, #0]
 8104050:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8104052:	69fb      	ldr	r3, [r7, #28]
 8104054:	9300      	str	r3, [sp, #0]
 8104056:	69bb      	ldr	r3, [r7, #24]
 8104058:	2200      	movs	r2, #0
 810405a:	2140      	movs	r1, #64	; 0x40
 810405c:	68f8      	ldr	r0, [r7, #12]
 810405e:	f000 f831 	bl	81040c4 <I2C_WaitOnFlagUntilTimeout>
 8104062:	4603      	mov	r3, r0
 8104064:	2b00      	cmp	r3, #0
 8104066:	d001      	beq.n	810406c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8104068:	2301      	movs	r3, #1
 810406a:	e000      	b.n	810406e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 810406c:	2300      	movs	r3, #0
}
 810406e:	4618      	mov	r0, r3
 8104070:	3710      	adds	r7, #16
 8104072:	46bd      	mov	sp, r7
 8104074:	bd80      	pop	{r7, pc}
 8104076:	bf00      	nop
 8104078:	80002000 	.word	0x80002000

0810407c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 810407c:	b480      	push	{r7}
 810407e:	b083      	sub	sp, #12
 8104080:	af00      	add	r7, sp, #0
 8104082:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8104084:	687b      	ldr	r3, [r7, #4]
 8104086:	681b      	ldr	r3, [r3, #0]
 8104088:	699b      	ldr	r3, [r3, #24]
 810408a:	f003 0302 	and.w	r3, r3, #2
 810408e:	2b02      	cmp	r3, #2
 8104090:	d103      	bne.n	810409a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8104092:	687b      	ldr	r3, [r7, #4]
 8104094:	681b      	ldr	r3, [r3, #0]
 8104096:	2200      	movs	r2, #0
 8104098:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 810409a:	687b      	ldr	r3, [r7, #4]
 810409c:	681b      	ldr	r3, [r3, #0]
 810409e:	699b      	ldr	r3, [r3, #24]
 81040a0:	f003 0301 	and.w	r3, r3, #1
 81040a4:	2b01      	cmp	r3, #1
 81040a6:	d007      	beq.n	81040b8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 81040a8:	687b      	ldr	r3, [r7, #4]
 81040aa:	681b      	ldr	r3, [r3, #0]
 81040ac:	699a      	ldr	r2, [r3, #24]
 81040ae:	687b      	ldr	r3, [r7, #4]
 81040b0:	681b      	ldr	r3, [r3, #0]
 81040b2:	f042 0201 	orr.w	r2, r2, #1
 81040b6:	619a      	str	r2, [r3, #24]
  }
}
 81040b8:	bf00      	nop
 81040ba:	370c      	adds	r7, #12
 81040bc:	46bd      	mov	sp, r7
 81040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040c2:	4770      	bx	lr

081040c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 81040c4:	b580      	push	{r7, lr}
 81040c6:	b084      	sub	sp, #16
 81040c8:	af00      	add	r7, sp, #0
 81040ca:	60f8      	str	r0, [r7, #12]
 81040cc:	60b9      	str	r1, [r7, #8]
 81040ce:	603b      	str	r3, [r7, #0]
 81040d0:	4613      	mov	r3, r2
 81040d2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 81040d4:	e022      	b.n	810411c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81040d6:	683b      	ldr	r3, [r7, #0]
 81040d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81040dc:	d01e      	beq.n	810411c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81040de:	f7fd fd73 	bl	8101bc8 <HAL_GetTick>
 81040e2:	4602      	mov	r2, r0
 81040e4:	69bb      	ldr	r3, [r7, #24]
 81040e6:	1ad3      	subs	r3, r2, r3
 81040e8:	683a      	ldr	r2, [r7, #0]
 81040ea:	429a      	cmp	r2, r3
 81040ec:	d302      	bcc.n	81040f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 81040ee:	683b      	ldr	r3, [r7, #0]
 81040f0:	2b00      	cmp	r3, #0
 81040f2:	d113      	bne.n	810411c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81040f4:	68fb      	ldr	r3, [r7, #12]
 81040f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81040f8:	f043 0220 	orr.w	r2, r3, #32
 81040fc:	68fb      	ldr	r3, [r7, #12]
 81040fe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8104100:	68fb      	ldr	r3, [r7, #12]
 8104102:	2220      	movs	r2, #32
 8104104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8104108:	68fb      	ldr	r3, [r7, #12]
 810410a:	2200      	movs	r2, #0
 810410c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8104110:	68fb      	ldr	r3, [r7, #12]
 8104112:	2200      	movs	r2, #0
 8104114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8104118:	2301      	movs	r3, #1
 810411a:	e00f      	b.n	810413c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 810411c:	68fb      	ldr	r3, [r7, #12]
 810411e:	681b      	ldr	r3, [r3, #0]
 8104120:	699a      	ldr	r2, [r3, #24]
 8104122:	68bb      	ldr	r3, [r7, #8]
 8104124:	4013      	ands	r3, r2
 8104126:	68ba      	ldr	r2, [r7, #8]
 8104128:	429a      	cmp	r2, r3
 810412a:	bf0c      	ite	eq
 810412c:	2301      	moveq	r3, #1
 810412e:	2300      	movne	r3, #0
 8104130:	b2db      	uxtb	r3, r3
 8104132:	461a      	mov	r2, r3
 8104134:	79fb      	ldrb	r3, [r7, #7]
 8104136:	429a      	cmp	r2, r3
 8104138:	d0cd      	beq.n	81040d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 810413a:	2300      	movs	r3, #0
}
 810413c:	4618      	mov	r0, r3
 810413e:	3710      	adds	r7, #16
 8104140:	46bd      	mov	sp, r7
 8104142:	bd80      	pop	{r7, pc}

08104144 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8104144:	b580      	push	{r7, lr}
 8104146:	b084      	sub	sp, #16
 8104148:	af00      	add	r7, sp, #0
 810414a:	60f8      	str	r0, [r7, #12]
 810414c:	60b9      	str	r1, [r7, #8]
 810414e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8104150:	e02c      	b.n	81041ac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8104152:	687a      	ldr	r2, [r7, #4]
 8104154:	68b9      	ldr	r1, [r7, #8]
 8104156:	68f8      	ldr	r0, [r7, #12]
 8104158:	f000 f870 	bl	810423c <I2C_IsErrorOccurred>
 810415c:	4603      	mov	r3, r0
 810415e:	2b00      	cmp	r3, #0
 8104160:	d001      	beq.n	8104166 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8104162:	2301      	movs	r3, #1
 8104164:	e02a      	b.n	81041bc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8104166:	68bb      	ldr	r3, [r7, #8]
 8104168:	f1b3 3fff 	cmp.w	r3, #4294967295
 810416c:	d01e      	beq.n	81041ac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810416e:	f7fd fd2b 	bl	8101bc8 <HAL_GetTick>
 8104172:	4602      	mov	r2, r0
 8104174:	687b      	ldr	r3, [r7, #4]
 8104176:	1ad3      	subs	r3, r2, r3
 8104178:	68ba      	ldr	r2, [r7, #8]
 810417a:	429a      	cmp	r2, r3
 810417c:	d302      	bcc.n	8104184 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 810417e:	68bb      	ldr	r3, [r7, #8]
 8104180:	2b00      	cmp	r3, #0
 8104182:	d113      	bne.n	81041ac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104184:	68fb      	ldr	r3, [r7, #12]
 8104186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104188:	f043 0220 	orr.w	r2, r3, #32
 810418c:	68fb      	ldr	r3, [r7, #12]
 810418e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8104190:	68fb      	ldr	r3, [r7, #12]
 8104192:	2220      	movs	r2, #32
 8104194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8104198:	68fb      	ldr	r3, [r7, #12]
 810419a:	2200      	movs	r2, #0
 810419c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 81041a0:	68fb      	ldr	r3, [r7, #12]
 81041a2:	2200      	movs	r2, #0
 81041a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 81041a8:	2301      	movs	r3, #1
 81041aa:	e007      	b.n	81041bc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 81041ac:	68fb      	ldr	r3, [r7, #12]
 81041ae:	681b      	ldr	r3, [r3, #0]
 81041b0:	699b      	ldr	r3, [r3, #24]
 81041b2:	f003 0302 	and.w	r3, r3, #2
 81041b6:	2b02      	cmp	r3, #2
 81041b8:	d1cb      	bne.n	8104152 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 81041ba:	2300      	movs	r3, #0
}
 81041bc:	4618      	mov	r0, r3
 81041be:	3710      	adds	r7, #16
 81041c0:	46bd      	mov	sp, r7
 81041c2:	bd80      	pop	{r7, pc}

081041c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 81041c4:	b580      	push	{r7, lr}
 81041c6:	b084      	sub	sp, #16
 81041c8:	af00      	add	r7, sp, #0
 81041ca:	60f8      	str	r0, [r7, #12]
 81041cc:	60b9      	str	r1, [r7, #8]
 81041ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81041d0:	e028      	b.n	8104224 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 81041d2:	687a      	ldr	r2, [r7, #4]
 81041d4:	68b9      	ldr	r1, [r7, #8]
 81041d6:	68f8      	ldr	r0, [r7, #12]
 81041d8:	f000 f830 	bl	810423c <I2C_IsErrorOccurred>
 81041dc:	4603      	mov	r3, r0
 81041de:	2b00      	cmp	r3, #0
 81041e0:	d001      	beq.n	81041e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 81041e2:	2301      	movs	r3, #1
 81041e4:	e026      	b.n	8104234 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81041e6:	f7fd fcef 	bl	8101bc8 <HAL_GetTick>
 81041ea:	4602      	mov	r2, r0
 81041ec:	687b      	ldr	r3, [r7, #4]
 81041ee:	1ad3      	subs	r3, r2, r3
 81041f0:	68ba      	ldr	r2, [r7, #8]
 81041f2:	429a      	cmp	r2, r3
 81041f4:	d302      	bcc.n	81041fc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 81041f6:	68bb      	ldr	r3, [r7, #8]
 81041f8:	2b00      	cmp	r3, #0
 81041fa:	d113      	bne.n	8104224 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81041fc:	68fb      	ldr	r3, [r7, #12]
 81041fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104200:	f043 0220 	orr.w	r2, r3, #32
 8104204:	68fb      	ldr	r3, [r7, #12]
 8104206:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8104208:	68fb      	ldr	r3, [r7, #12]
 810420a:	2220      	movs	r2, #32
 810420c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8104210:	68fb      	ldr	r3, [r7, #12]
 8104212:	2200      	movs	r2, #0
 8104214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8104218:	68fb      	ldr	r3, [r7, #12]
 810421a:	2200      	movs	r2, #0
 810421c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8104220:	2301      	movs	r3, #1
 8104222:	e007      	b.n	8104234 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8104224:	68fb      	ldr	r3, [r7, #12]
 8104226:	681b      	ldr	r3, [r3, #0]
 8104228:	699b      	ldr	r3, [r3, #24]
 810422a:	f003 0320 	and.w	r3, r3, #32
 810422e:	2b20      	cmp	r3, #32
 8104230:	d1cf      	bne.n	81041d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8104232:	2300      	movs	r3, #0
}
 8104234:	4618      	mov	r0, r3
 8104236:	3710      	adds	r7, #16
 8104238:	46bd      	mov	sp, r7
 810423a:	bd80      	pop	{r7, pc}

0810423c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 810423c:	b580      	push	{r7, lr}
 810423e:	b08a      	sub	sp, #40	; 0x28
 8104240:	af00      	add	r7, sp, #0
 8104242:	60f8      	str	r0, [r7, #12]
 8104244:	60b9      	str	r1, [r7, #8]
 8104246:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8104248:	2300      	movs	r3, #0
 810424a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 810424e:	68fb      	ldr	r3, [r7, #12]
 8104250:	681b      	ldr	r3, [r3, #0]
 8104252:	699b      	ldr	r3, [r3, #24]
 8104254:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8104256:	2300      	movs	r3, #0
 8104258:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 810425a:	687b      	ldr	r3, [r7, #4]
 810425c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 810425e:	69bb      	ldr	r3, [r7, #24]
 8104260:	f003 0310 	and.w	r3, r3, #16
 8104264:	2b00      	cmp	r3, #0
 8104266:	d075      	beq.n	8104354 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8104268:	68fb      	ldr	r3, [r7, #12]
 810426a:	681b      	ldr	r3, [r3, #0]
 810426c:	2210      	movs	r2, #16
 810426e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8104270:	e056      	b.n	8104320 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8104272:	68bb      	ldr	r3, [r7, #8]
 8104274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104278:	d052      	beq.n	8104320 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 810427a:	f7fd fca5 	bl	8101bc8 <HAL_GetTick>
 810427e:	4602      	mov	r2, r0
 8104280:	69fb      	ldr	r3, [r7, #28]
 8104282:	1ad3      	subs	r3, r2, r3
 8104284:	68ba      	ldr	r2, [r7, #8]
 8104286:	429a      	cmp	r2, r3
 8104288:	d302      	bcc.n	8104290 <I2C_IsErrorOccurred+0x54>
 810428a:	68bb      	ldr	r3, [r7, #8]
 810428c:	2b00      	cmp	r3, #0
 810428e:	d147      	bne.n	8104320 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8104290:	68fb      	ldr	r3, [r7, #12]
 8104292:	681b      	ldr	r3, [r3, #0]
 8104294:	685b      	ldr	r3, [r3, #4]
 8104296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810429a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 810429c:	68fb      	ldr	r3, [r7, #12]
 810429e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 81042a2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 81042a4:	68fb      	ldr	r3, [r7, #12]
 81042a6:	681b      	ldr	r3, [r3, #0]
 81042a8:	699b      	ldr	r3, [r3, #24]
 81042aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81042ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81042b2:	d12e      	bne.n	8104312 <I2C_IsErrorOccurred+0xd6>
 81042b4:	697b      	ldr	r3, [r7, #20]
 81042b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81042ba:	d02a      	beq.n	8104312 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 81042bc:	7cfb      	ldrb	r3, [r7, #19]
 81042be:	2b20      	cmp	r3, #32
 81042c0:	d027      	beq.n	8104312 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 81042c2:	68fb      	ldr	r3, [r7, #12]
 81042c4:	681b      	ldr	r3, [r3, #0]
 81042c6:	685a      	ldr	r2, [r3, #4]
 81042c8:	68fb      	ldr	r3, [r7, #12]
 81042ca:	681b      	ldr	r3, [r3, #0]
 81042cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 81042d0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 81042d2:	f7fd fc79 	bl	8101bc8 <HAL_GetTick>
 81042d6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81042d8:	e01b      	b.n	8104312 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 81042da:	f7fd fc75 	bl	8101bc8 <HAL_GetTick>
 81042de:	4602      	mov	r2, r0
 81042e0:	69fb      	ldr	r3, [r7, #28]
 81042e2:	1ad3      	subs	r3, r2, r3
 81042e4:	2b19      	cmp	r3, #25
 81042e6:	d914      	bls.n	8104312 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81042e8:	68fb      	ldr	r3, [r7, #12]
 81042ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81042ec:	f043 0220 	orr.w	r2, r3, #32
 81042f0:	68fb      	ldr	r3, [r7, #12]
 81042f2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 81042f4:	68fb      	ldr	r3, [r7, #12]
 81042f6:	2220      	movs	r2, #32
 81042f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 81042fc:	68fb      	ldr	r3, [r7, #12]
 81042fe:	2200      	movs	r2, #0
 8104300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8104304:	68fb      	ldr	r3, [r7, #12]
 8104306:	2200      	movs	r2, #0
 8104308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 810430c:	2301      	movs	r3, #1
 810430e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8104312:	68fb      	ldr	r3, [r7, #12]
 8104314:	681b      	ldr	r3, [r3, #0]
 8104316:	699b      	ldr	r3, [r3, #24]
 8104318:	f003 0320 	and.w	r3, r3, #32
 810431c:	2b20      	cmp	r3, #32
 810431e:	d1dc      	bne.n	81042da <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8104320:	68fb      	ldr	r3, [r7, #12]
 8104322:	681b      	ldr	r3, [r3, #0]
 8104324:	699b      	ldr	r3, [r3, #24]
 8104326:	f003 0320 	and.w	r3, r3, #32
 810432a:	2b20      	cmp	r3, #32
 810432c:	d003      	beq.n	8104336 <I2C_IsErrorOccurred+0xfa>
 810432e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8104332:	2b00      	cmp	r3, #0
 8104334:	d09d      	beq.n	8104272 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8104336:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810433a:	2b00      	cmp	r3, #0
 810433c:	d103      	bne.n	8104346 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810433e:	68fb      	ldr	r3, [r7, #12]
 8104340:	681b      	ldr	r3, [r3, #0]
 8104342:	2220      	movs	r2, #32
 8104344:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8104346:	6a3b      	ldr	r3, [r7, #32]
 8104348:	f043 0304 	orr.w	r3, r3, #4
 810434c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 810434e:	2301      	movs	r3, #1
 8104350:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8104354:	68fb      	ldr	r3, [r7, #12]
 8104356:	681b      	ldr	r3, [r3, #0]
 8104358:	699b      	ldr	r3, [r3, #24]
 810435a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 810435c:	69bb      	ldr	r3, [r7, #24]
 810435e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104362:	2b00      	cmp	r3, #0
 8104364:	d00b      	beq.n	810437e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8104366:	6a3b      	ldr	r3, [r7, #32]
 8104368:	f043 0301 	orr.w	r3, r3, #1
 810436c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 810436e:	68fb      	ldr	r3, [r7, #12]
 8104370:	681b      	ldr	r3, [r3, #0]
 8104372:	f44f 7280 	mov.w	r2, #256	; 0x100
 8104376:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8104378:	2301      	movs	r3, #1
 810437a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 810437e:	69bb      	ldr	r3, [r7, #24]
 8104380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8104384:	2b00      	cmp	r3, #0
 8104386:	d00b      	beq.n	81043a0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8104388:	6a3b      	ldr	r3, [r7, #32]
 810438a:	f043 0308 	orr.w	r3, r3, #8
 810438e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8104390:	68fb      	ldr	r3, [r7, #12]
 8104392:	681b      	ldr	r3, [r3, #0]
 8104394:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8104398:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 810439a:	2301      	movs	r3, #1
 810439c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 81043a0:	69bb      	ldr	r3, [r7, #24]
 81043a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81043a6:	2b00      	cmp	r3, #0
 81043a8:	d00b      	beq.n	81043c2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 81043aa:	6a3b      	ldr	r3, [r7, #32]
 81043ac:	f043 0302 	orr.w	r3, r3, #2
 81043b0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 81043b2:	68fb      	ldr	r3, [r7, #12]
 81043b4:	681b      	ldr	r3, [r3, #0]
 81043b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 81043ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 81043bc:	2301      	movs	r3, #1
 81043be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 81043c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81043c6:	2b00      	cmp	r3, #0
 81043c8:	d01c      	beq.n	8104404 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 81043ca:	68f8      	ldr	r0, [r7, #12]
 81043cc:	f7ff fe56 	bl	810407c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81043d0:	68fb      	ldr	r3, [r7, #12]
 81043d2:	681b      	ldr	r3, [r3, #0]
 81043d4:	6859      	ldr	r1, [r3, #4]
 81043d6:	68fb      	ldr	r3, [r7, #12]
 81043d8:	681a      	ldr	r2, [r3, #0]
 81043da:	4b0d      	ldr	r3, [pc, #52]	; (8104410 <I2C_IsErrorOccurred+0x1d4>)
 81043dc:	400b      	ands	r3, r1
 81043de:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 81043e0:	68fb      	ldr	r3, [r7, #12]
 81043e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 81043e4:	6a3b      	ldr	r3, [r7, #32]
 81043e6:	431a      	orrs	r2, r3
 81043e8:	68fb      	ldr	r3, [r7, #12]
 81043ea:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 81043ec:	68fb      	ldr	r3, [r7, #12]
 81043ee:	2220      	movs	r2, #32
 81043f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 81043f4:	68fb      	ldr	r3, [r7, #12]
 81043f6:	2200      	movs	r2, #0
 81043f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81043fc:	68fb      	ldr	r3, [r7, #12]
 81043fe:	2200      	movs	r2, #0
 8104400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8104404:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8104408:	4618      	mov	r0, r3
 810440a:	3728      	adds	r7, #40	; 0x28
 810440c:	46bd      	mov	sp, r7
 810440e:	bd80      	pop	{r7, pc}
 8104410:	fe00e800 	.word	0xfe00e800

08104414 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8104414:	b480      	push	{r7}
 8104416:	b087      	sub	sp, #28
 8104418:	af00      	add	r7, sp, #0
 810441a:	60f8      	str	r0, [r7, #12]
 810441c:	607b      	str	r3, [r7, #4]
 810441e:	460b      	mov	r3, r1
 8104420:	817b      	strh	r3, [r7, #10]
 8104422:	4613      	mov	r3, r2
 8104424:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8104426:	897b      	ldrh	r3, [r7, #10]
 8104428:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 810442c:	7a7b      	ldrb	r3, [r7, #9]
 810442e:	041b      	lsls	r3, r3, #16
 8104430:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8104434:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8104436:	687b      	ldr	r3, [r7, #4]
 8104438:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 810443a:	6a3b      	ldr	r3, [r7, #32]
 810443c:	4313      	orrs	r3, r2
 810443e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8104442:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8104444:	68fb      	ldr	r3, [r7, #12]
 8104446:	681b      	ldr	r3, [r3, #0]
 8104448:	685a      	ldr	r2, [r3, #4]
 810444a:	6a3b      	ldr	r3, [r7, #32]
 810444c:	0d5b      	lsrs	r3, r3, #21
 810444e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8104452:	4b08      	ldr	r3, [pc, #32]	; (8104474 <I2C_TransferConfig+0x60>)
 8104454:	430b      	orrs	r3, r1
 8104456:	43db      	mvns	r3, r3
 8104458:	ea02 0103 	and.w	r1, r2, r3
 810445c:	68fb      	ldr	r3, [r7, #12]
 810445e:	681b      	ldr	r3, [r3, #0]
 8104460:	697a      	ldr	r2, [r7, #20]
 8104462:	430a      	orrs	r2, r1
 8104464:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8104466:	bf00      	nop
 8104468:	371c      	adds	r7, #28
 810446a:	46bd      	mov	sp, r7
 810446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104470:	4770      	bx	lr
 8104472:	bf00      	nop
 8104474:	03ff63ff 	.word	0x03ff63ff

08104478 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8104478:	b480      	push	{r7}
 810447a:	b083      	sub	sp, #12
 810447c:	af00      	add	r7, sp, #0
 810447e:	6078      	str	r0, [r7, #4]
 8104480:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104482:	687b      	ldr	r3, [r7, #4]
 8104484:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104488:	b2db      	uxtb	r3, r3
 810448a:	2b20      	cmp	r3, #32
 810448c:	d138      	bne.n	8104500 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810448e:	687b      	ldr	r3, [r7, #4]
 8104490:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8104494:	2b01      	cmp	r3, #1
 8104496:	d101      	bne.n	810449c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8104498:	2302      	movs	r3, #2
 810449a:	e032      	b.n	8104502 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 810449c:	687b      	ldr	r3, [r7, #4]
 810449e:	2201      	movs	r2, #1
 81044a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 81044a4:	687b      	ldr	r3, [r7, #4]
 81044a6:	2224      	movs	r2, #36	; 0x24
 81044a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 81044ac:	687b      	ldr	r3, [r7, #4]
 81044ae:	681b      	ldr	r3, [r3, #0]
 81044b0:	681a      	ldr	r2, [r3, #0]
 81044b2:	687b      	ldr	r3, [r7, #4]
 81044b4:	681b      	ldr	r3, [r3, #0]
 81044b6:	f022 0201 	bic.w	r2, r2, #1
 81044ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 81044bc:	687b      	ldr	r3, [r7, #4]
 81044be:	681b      	ldr	r3, [r3, #0]
 81044c0:	681a      	ldr	r2, [r3, #0]
 81044c2:	687b      	ldr	r3, [r7, #4]
 81044c4:	681b      	ldr	r3, [r3, #0]
 81044c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 81044ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 81044cc:	687b      	ldr	r3, [r7, #4]
 81044ce:	681b      	ldr	r3, [r3, #0]
 81044d0:	6819      	ldr	r1, [r3, #0]
 81044d2:	687b      	ldr	r3, [r7, #4]
 81044d4:	681b      	ldr	r3, [r3, #0]
 81044d6:	683a      	ldr	r2, [r7, #0]
 81044d8:	430a      	orrs	r2, r1
 81044da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 81044dc:	687b      	ldr	r3, [r7, #4]
 81044de:	681b      	ldr	r3, [r3, #0]
 81044e0:	681a      	ldr	r2, [r3, #0]
 81044e2:	687b      	ldr	r3, [r7, #4]
 81044e4:	681b      	ldr	r3, [r3, #0]
 81044e6:	f042 0201 	orr.w	r2, r2, #1
 81044ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 81044ec:	687b      	ldr	r3, [r7, #4]
 81044ee:	2220      	movs	r2, #32
 81044f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81044f4:	687b      	ldr	r3, [r7, #4]
 81044f6:	2200      	movs	r2, #0
 81044f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81044fc:	2300      	movs	r3, #0
 81044fe:	e000      	b.n	8104502 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8104500:	2302      	movs	r3, #2
  }
}
 8104502:	4618      	mov	r0, r3
 8104504:	370c      	adds	r7, #12
 8104506:	46bd      	mov	sp, r7
 8104508:	f85d 7b04 	ldr.w	r7, [sp], #4
 810450c:	4770      	bx	lr

0810450e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 810450e:	b480      	push	{r7}
 8104510:	b085      	sub	sp, #20
 8104512:	af00      	add	r7, sp, #0
 8104514:	6078      	str	r0, [r7, #4]
 8104516:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104518:	687b      	ldr	r3, [r7, #4]
 810451a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810451e:	b2db      	uxtb	r3, r3
 8104520:	2b20      	cmp	r3, #32
 8104522:	d139      	bne.n	8104598 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8104524:	687b      	ldr	r3, [r7, #4]
 8104526:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810452a:	2b01      	cmp	r3, #1
 810452c:	d101      	bne.n	8104532 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 810452e:	2302      	movs	r3, #2
 8104530:	e033      	b.n	810459a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8104532:	687b      	ldr	r3, [r7, #4]
 8104534:	2201      	movs	r2, #1
 8104536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 810453a:	687b      	ldr	r3, [r7, #4]
 810453c:	2224      	movs	r2, #36	; 0x24
 810453e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8104542:	687b      	ldr	r3, [r7, #4]
 8104544:	681b      	ldr	r3, [r3, #0]
 8104546:	681a      	ldr	r2, [r3, #0]
 8104548:	687b      	ldr	r3, [r7, #4]
 810454a:	681b      	ldr	r3, [r3, #0]
 810454c:	f022 0201 	bic.w	r2, r2, #1
 8104550:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8104552:	687b      	ldr	r3, [r7, #4]
 8104554:	681b      	ldr	r3, [r3, #0]
 8104556:	681b      	ldr	r3, [r3, #0]
 8104558:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 810455a:	68fb      	ldr	r3, [r7, #12]
 810455c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8104560:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8104562:	683b      	ldr	r3, [r7, #0]
 8104564:	021b      	lsls	r3, r3, #8
 8104566:	68fa      	ldr	r2, [r7, #12]
 8104568:	4313      	orrs	r3, r2
 810456a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 810456c:	687b      	ldr	r3, [r7, #4]
 810456e:	681b      	ldr	r3, [r3, #0]
 8104570:	68fa      	ldr	r2, [r7, #12]
 8104572:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8104574:	687b      	ldr	r3, [r7, #4]
 8104576:	681b      	ldr	r3, [r3, #0]
 8104578:	681a      	ldr	r2, [r3, #0]
 810457a:	687b      	ldr	r3, [r7, #4]
 810457c:	681b      	ldr	r3, [r3, #0]
 810457e:	f042 0201 	orr.w	r2, r2, #1
 8104582:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8104584:	687b      	ldr	r3, [r7, #4]
 8104586:	2220      	movs	r2, #32
 8104588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810458c:	687b      	ldr	r3, [r7, #4]
 810458e:	2200      	movs	r2, #0
 8104590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8104594:	2300      	movs	r3, #0
 8104596:	e000      	b.n	810459a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8104598:	2302      	movs	r3, #2
  }
}
 810459a:	4618      	mov	r0, r3
 810459c:	3714      	adds	r7, #20
 810459e:	46bd      	mov	sp, r7
 81045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81045a4:	4770      	bx	lr
	...

081045a8 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81045a8:	b580      	push	{r7, lr}
 81045aa:	b084      	sub	sp, #16
 81045ac:	af00      	add	r7, sp, #0
 81045ae:	60f8      	str	r0, [r7, #12]
 81045b0:	460b      	mov	r3, r1
 81045b2:	607a      	str	r2, [r7, #4]
 81045b4:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81045b6:	4b37      	ldr	r3, [pc, #220]	; (8104694 <HAL_PWREx_EnterSTOPMode+0xec>)
 81045b8:	681b      	ldr	r3, [r3, #0]
 81045ba:	f023 0201 	bic.w	r2, r3, #1
 81045be:	4935      	ldr	r1, [pc, #212]	; (8104694 <HAL_PWREx_EnterSTOPMode+0xec>)
 81045c0:	68fb      	ldr	r3, [r7, #12]
 81045c2:	4313      	orrs	r3, r2
 81045c4:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81045c6:	687b      	ldr	r3, [r7, #4]
 81045c8:	2b00      	cmp	r3, #0
 81045ca:	d123      	bne.n	8104614 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81045cc:	f7fd fc3c 	bl	8101e48 <HAL_GetCurrentCPUID>
 81045d0:	4603      	mov	r3, r0
 81045d2:	2b03      	cmp	r3, #3
 81045d4:	d158      	bne.n	8104688 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81045d6:	4b2f      	ldr	r3, [pc, #188]	; (8104694 <HAL_PWREx_EnterSTOPMode+0xec>)
 81045d8:	691b      	ldr	r3, [r3, #16]
 81045da:	4a2e      	ldr	r2, [pc, #184]	; (8104694 <HAL_PWREx_EnterSTOPMode+0xec>)
 81045dc:	f023 0301 	bic.w	r3, r3, #1
 81045e0:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81045e2:	4b2d      	ldr	r3, [pc, #180]	; (8104698 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81045e4:	691b      	ldr	r3, [r3, #16]
 81045e6:	4a2c      	ldr	r2, [pc, #176]	; (8104698 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81045e8:	f043 0304 	orr.w	r3, r3, #4
 81045ec:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 81045ee:	f3bf 8f4f 	dsb	sy
}
 81045f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81045f4:	f3bf 8f6f 	isb	sy
}
 81045f8:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81045fa:	7afb      	ldrb	r3, [r7, #11]
 81045fc:	2b01      	cmp	r3, #1
 81045fe:	d101      	bne.n	8104604 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8104600:	bf30      	wfi
 8104602:	e000      	b.n	8104606 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8104604:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104606:	4b24      	ldr	r3, [pc, #144]	; (8104698 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104608:	691b      	ldr	r3, [r3, #16]
 810460a:	4a23      	ldr	r2, [pc, #140]	; (8104698 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810460c:	f023 0304 	bic.w	r3, r3, #4
 8104610:	6113      	str	r3, [r2, #16]
 8104612:	e03c      	b.n	810468e <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8104614:	687b      	ldr	r3, [r7, #4]
 8104616:	2b01      	cmp	r3, #1
 8104618:	d123      	bne.n	8104662 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810461a:	f7fd fc15 	bl	8101e48 <HAL_GetCurrentCPUID>
 810461e:	4603      	mov	r3, r0
 8104620:	2b01      	cmp	r3, #1
 8104622:	d133      	bne.n	810468c <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8104624:	4b1b      	ldr	r3, [pc, #108]	; (8104694 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104626:	695b      	ldr	r3, [r3, #20]
 8104628:	4a1a      	ldr	r2, [pc, #104]	; (8104694 <HAL_PWREx_EnterSTOPMode+0xec>)
 810462a:	f023 0302 	bic.w	r3, r3, #2
 810462e:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104630:	4b19      	ldr	r3, [pc, #100]	; (8104698 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104632:	691b      	ldr	r3, [r3, #16]
 8104634:	4a18      	ldr	r2, [pc, #96]	; (8104698 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104636:	f043 0304 	orr.w	r3, r3, #4
 810463a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 810463c:	f3bf 8f4f 	dsb	sy
}
 8104640:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8104642:	f3bf 8f6f 	isb	sy
}
 8104646:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8104648:	7afb      	ldrb	r3, [r7, #11]
 810464a:	2b01      	cmp	r3, #1
 810464c:	d101      	bne.n	8104652 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810464e:	bf30      	wfi
 8104650:	e000      	b.n	8104654 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8104652:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104654:	4b10      	ldr	r3, [pc, #64]	; (8104698 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104656:	691b      	ldr	r3, [r3, #16]
 8104658:	4a0f      	ldr	r2, [pc, #60]	; (8104698 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810465a:	f023 0304 	bic.w	r3, r3, #4
 810465e:	6113      	str	r3, [r2, #16]
 8104660:	e015      	b.n	810468e <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8104662:	f7fd fbf1 	bl	8101e48 <HAL_GetCurrentCPUID>
 8104666:	4603      	mov	r3, r0
 8104668:	2b03      	cmp	r3, #3
 810466a:	d106      	bne.n	810467a <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 810466c:	4b09      	ldr	r3, [pc, #36]	; (8104694 <HAL_PWREx_EnterSTOPMode+0xec>)
 810466e:	691b      	ldr	r3, [r3, #16]
 8104670:	4a08      	ldr	r2, [pc, #32]	; (8104694 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104672:	f023 0304 	bic.w	r3, r3, #4
 8104676:	6113      	str	r3, [r2, #16]
 8104678:	e009      	b.n	810468e <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810467a:	4b06      	ldr	r3, [pc, #24]	; (8104694 <HAL_PWREx_EnterSTOPMode+0xec>)
 810467c:	695b      	ldr	r3, [r3, #20]
 810467e:	4a05      	ldr	r2, [pc, #20]	; (8104694 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104680:	f023 0304 	bic.w	r3, r3, #4
 8104684:	6153      	str	r3, [r2, #20]
 8104686:	e002      	b.n	810468e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8104688:	bf00      	nop
 810468a:	e000      	b.n	810468e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810468c:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810468e:	3710      	adds	r7, #16
 8104690:	46bd      	mov	sp, r7
 8104692:	bd80      	pop	{r7, pc}
 8104694:	58024800 	.word	0x58024800
 8104698:	e000ed00 	.word	0xe000ed00

0810469c <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 810469c:	b580      	push	{r7, lr}
 810469e:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81046a0:	f7fd fbd2 	bl	8101e48 <HAL_GetCurrentCPUID>
 81046a4:	4603      	mov	r3, r0
 81046a6:	2b03      	cmp	r3, #3
 81046a8:	d101      	bne.n	81046ae <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81046aa:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81046ac:	e001      	b.n	81046b2 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81046ae:	bf40      	sev
    __WFE ();
 81046b0:	bf20      	wfe
}
 81046b2:	bf00      	nop
 81046b4:	bd80      	pop	{r7, pc}
	...

081046b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81046b8:	b480      	push	{r7}
 81046ba:	b089      	sub	sp, #36	; 0x24
 81046bc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81046be:	4bb3      	ldr	r3, [pc, #716]	; (810498c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81046c0:	691b      	ldr	r3, [r3, #16]
 81046c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81046c6:	2b18      	cmp	r3, #24
 81046c8:	f200 8155 	bhi.w	8104976 <HAL_RCC_GetSysClockFreq+0x2be>
 81046cc:	a201      	add	r2, pc, #4	; (adr r2, 81046d4 <HAL_RCC_GetSysClockFreq+0x1c>)
 81046ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81046d2:	bf00      	nop
 81046d4:	08104739 	.word	0x08104739
 81046d8:	08104977 	.word	0x08104977
 81046dc:	08104977 	.word	0x08104977
 81046e0:	08104977 	.word	0x08104977
 81046e4:	08104977 	.word	0x08104977
 81046e8:	08104977 	.word	0x08104977
 81046ec:	08104977 	.word	0x08104977
 81046f0:	08104977 	.word	0x08104977
 81046f4:	0810475f 	.word	0x0810475f
 81046f8:	08104977 	.word	0x08104977
 81046fc:	08104977 	.word	0x08104977
 8104700:	08104977 	.word	0x08104977
 8104704:	08104977 	.word	0x08104977
 8104708:	08104977 	.word	0x08104977
 810470c:	08104977 	.word	0x08104977
 8104710:	08104977 	.word	0x08104977
 8104714:	08104765 	.word	0x08104765
 8104718:	08104977 	.word	0x08104977
 810471c:	08104977 	.word	0x08104977
 8104720:	08104977 	.word	0x08104977
 8104724:	08104977 	.word	0x08104977
 8104728:	08104977 	.word	0x08104977
 810472c:	08104977 	.word	0x08104977
 8104730:	08104977 	.word	0x08104977
 8104734:	0810476b 	.word	0x0810476b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104738:	4b94      	ldr	r3, [pc, #592]	; (810498c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810473a:	681b      	ldr	r3, [r3, #0]
 810473c:	f003 0320 	and.w	r3, r3, #32
 8104740:	2b00      	cmp	r3, #0
 8104742:	d009      	beq.n	8104758 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104744:	4b91      	ldr	r3, [pc, #580]	; (810498c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104746:	681b      	ldr	r3, [r3, #0]
 8104748:	08db      	lsrs	r3, r3, #3
 810474a:	f003 0303 	and.w	r3, r3, #3
 810474e:	4a90      	ldr	r2, [pc, #576]	; (8104990 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8104750:	fa22 f303 	lsr.w	r3, r2, r3
 8104754:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8104756:	e111      	b.n	810497c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8104758:	4b8d      	ldr	r3, [pc, #564]	; (8104990 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810475a:	61bb      	str	r3, [r7, #24]
    break;
 810475c:	e10e      	b.n	810497c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 810475e:	4b8d      	ldr	r3, [pc, #564]	; (8104994 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8104760:	61bb      	str	r3, [r7, #24]
    break;
 8104762:	e10b      	b.n	810497c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8104764:	4b8c      	ldr	r3, [pc, #560]	; (8104998 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8104766:	61bb      	str	r3, [r7, #24]
    break;
 8104768:	e108      	b.n	810497c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810476a:	4b88      	ldr	r3, [pc, #544]	; (810498c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810476c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810476e:	f003 0303 	and.w	r3, r3, #3
 8104772:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8104774:	4b85      	ldr	r3, [pc, #532]	; (810498c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104778:	091b      	lsrs	r3, r3, #4
 810477a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810477e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8104780:	4b82      	ldr	r3, [pc, #520]	; (810498c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104784:	f003 0301 	and.w	r3, r3, #1
 8104788:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 810478a:	4b80      	ldr	r3, [pc, #512]	; (810498c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810478c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810478e:	08db      	lsrs	r3, r3, #3
 8104790:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104794:	68fa      	ldr	r2, [r7, #12]
 8104796:	fb02 f303 	mul.w	r3, r2, r3
 810479a:	ee07 3a90 	vmov	s15, r3
 810479e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81047a2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 81047a6:	693b      	ldr	r3, [r7, #16]
 81047a8:	2b00      	cmp	r3, #0
 81047aa:	f000 80e1 	beq.w	8104970 <HAL_RCC_GetSysClockFreq+0x2b8>
 81047ae:	697b      	ldr	r3, [r7, #20]
 81047b0:	2b02      	cmp	r3, #2
 81047b2:	f000 8083 	beq.w	81048bc <HAL_RCC_GetSysClockFreq+0x204>
 81047b6:	697b      	ldr	r3, [r7, #20]
 81047b8:	2b02      	cmp	r3, #2
 81047ba:	f200 80a1 	bhi.w	8104900 <HAL_RCC_GetSysClockFreq+0x248>
 81047be:	697b      	ldr	r3, [r7, #20]
 81047c0:	2b00      	cmp	r3, #0
 81047c2:	d003      	beq.n	81047cc <HAL_RCC_GetSysClockFreq+0x114>
 81047c4:	697b      	ldr	r3, [r7, #20]
 81047c6:	2b01      	cmp	r3, #1
 81047c8:	d056      	beq.n	8104878 <HAL_RCC_GetSysClockFreq+0x1c0>
 81047ca:	e099      	b.n	8104900 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81047cc:	4b6f      	ldr	r3, [pc, #444]	; (810498c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81047ce:	681b      	ldr	r3, [r3, #0]
 81047d0:	f003 0320 	and.w	r3, r3, #32
 81047d4:	2b00      	cmp	r3, #0
 81047d6:	d02d      	beq.n	8104834 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81047d8:	4b6c      	ldr	r3, [pc, #432]	; (810498c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81047da:	681b      	ldr	r3, [r3, #0]
 81047dc:	08db      	lsrs	r3, r3, #3
 81047de:	f003 0303 	and.w	r3, r3, #3
 81047e2:	4a6b      	ldr	r2, [pc, #428]	; (8104990 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81047e4:	fa22 f303 	lsr.w	r3, r2, r3
 81047e8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81047ea:	687b      	ldr	r3, [r7, #4]
 81047ec:	ee07 3a90 	vmov	s15, r3
 81047f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81047f4:	693b      	ldr	r3, [r7, #16]
 81047f6:	ee07 3a90 	vmov	s15, r3
 81047fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81047fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104802:	4b62      	ldr	r3, [pc, #392]	; (810498c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810480a:	ee07 3a90 	vmov	s15, r3
 810480e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104812:	ed97 6a02 	vldr	s12, [r7, #8]
 8104816:	eddf 5a61 	vldr	s11, [pc, #388]	; 810499c <HAL_RCC_GetSysClockFreq+0x2e4>
 810481a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810481e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104822:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810482a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810482e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8104832:	e087      	b.n	8104944 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104834:	693b      	ldr	r3, [r7, #16]
 8104836:	ee07 3a90 	vmov	s15, r3
 810483a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810483e:	eddf 6a58 	vldr	s13, [pc, #352]	; 81049a0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8104842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104846:	4b51      	ldr	r3, [pc, #324]	; (810498c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810484a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810484e:	ee07 3a90 	vmov	s15, r3
 8104852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104856:	ed97 6a02 	vldr	s12, [r7, #8]
 810485a:	eddf 5a50 	vldr	s11, [pc, #320]	; 810499c <HAL_RCC_GetSysClockFreq+0x2e4>
 810485e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104866:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810486a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810486e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104872:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104876:	e065      	b.n	8104944 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104878:	693b      	ldr	r3, [r7, #16]
 810487a:	ee07 3a90 	vmov	s15, r3
 810487e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104882:	eddf 6a48 	vldr	s13, [pc, #288]	; 81049a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8104886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810488a:	4b40      	ldr	r3, [pc, #256]	; (810498c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810488c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810488e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104892:	ee07 3a90 	vmov	s15, r3
 8104896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810489a:	ed97 6a02 	vldr	s12, [r7, #8]
 810489e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 810499c <HAL_RCC_GetSysClockFreq+0x2e4>
 81048a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81048a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81048aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81048ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81048b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81048b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81048ba:	e043      	b.n	8104944 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81048bc:	693b      	ldr	r3, [r7, #16]
 81048be:	ee07 3a90 	vmov	s15, r3
 81048c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81048c6:	eddf 6a38 	vldr	s13, [pc, #224]	; 81049a8 <HAL_RCC_GetSysClockFreq+0x2f0>
 81048ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81048ce:	4b2f      	ldr	r3, [pc, #188]	; (810498c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81048d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81048d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81048d6:	ee07 3a90 	vmov	s15, r3
 81048da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81048de:	ed97 6a02 	vldr	s12, [r7, #8]
 81048e2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 810499c <HAL_RCC_GetSysClockFreq+0x2e4>
 81048e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81048ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81048ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81048f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81048f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81048fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81048fe:	e021      	b.n	8104944 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104900:	693b      	ldr	r3, [r7, #16]
 8104902:	ee07 3a90 	vmov	s15, r3
 8104906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810490a:	eddf 6a26 	vldr	s13, [pc, #152]	; 81049a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 810490e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104912:	4b1e      	ldr	r3, [pc, #120]	; (810498c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810491a:	ee07 3a90 	vmov	s15, r3
 810491e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104922:	ed97 6a02 	vldr	s12, [r7, #8]
 8104926:	eddf 5a1d 	vldr	s11, [pc, #116]	; 810499c <HAL_RCC_GetSysClockFreq+0x2e4>
 810492a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810492e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104932:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810493a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810493e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104942:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8104944:	4b11      	ldr	r3, [pc, #68]	; (810498c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104948:	0a5b      	lsrs	r3, r3, #9
 810494a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810494e:	3301      	adds	r3, #1
 8104950:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8104952:	683b      	ldr	r3, [r7, #0]
 8104954:	ee07 3a90 	vmov	s15, r3
 8104958:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 810495c:	edd7 6a07 	vldr	s13, [r7, #28]
 8104960:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104964:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104968:	ee17 3a90 	vmov	r3, s15
 810496c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 810496e:	e005      	b.n	810497c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8104970:	2300      	movs	r3, #0
 8104972:	61bb      	str	r3, [r7, #24]
    break;
 8104974:	e002      	b.n	810497c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8104976:	4b07      	ldr	r3, [pc, #28]	; (8104994 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8104978:	61bb      	str	r3, [r7, #24]
    break;
 810497a:	bf00      	nop
  }

  return sysclockfreq;
 810497c:	69bb      	ldr	r3, [r7, #24]
}
 810497e:	4618      	mov	r0, r3
 8104980:	3724      	adds	r7, #36	; 0x24
 8104982:	46bd      	mov	sp, r7
 8104984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104988:	4770      	bx	lr
 810498a:	bf00      	nop
 810498c:	58024400 	.word	0x58024400
 8104990:	03d09000 	.word	0x03d09000
 8104994:	003d0900 	.word	0x003d0900
 8104998:	007a1200 	.word	0x007a1200
 810499c:	46000000 	.word	0x46000000
 81049a0:	4c742400 	.word	0x4c742400
 81049a4:	4a742400 	.word	0x4a742400
 81049a8:	4af42400 	.word	0x4af42400

081049ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 81049ac:	b580      	push	{r7, lr}
 81049ae:	b082      	sub	sp, #8
 81049b0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 81049b2:	f7ff fe81 	bl	81046b8 <HAL_RCC_GetSysClockFreq>
 81049b6:	4602      	mov	r2, r0
 81049b8:	4b11      	ldr	r3, [pc, #68]	; (8104a00 <HAL_RCC_GetHCLKFreq+0x54>)
 81049ba:	699b      	ldr	r3, [r3, #24]
 81049bc:	0a1b      	lsrs	r3, r3, #8
 81049be:	f003 030f 	and.w	r3, r3, #15
 81049c2:	4910      	ldr	r1, [pc, #64]	; (8104a04 <HAL_RCC_GetHCLKFreq+0x58>)
 81049c4:	5ccb      	ldrb	r3, [r1, r3]
 81049c6:	f003 031f 	and.w	r3, r3, #31
 81049ca:	fa22 f303 	lsr.w	r3, r2, r3
 81049ce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81049d0:	4b0b      	ldr	r3, [pc, #44]	; (8104a00 <HAL_RCC_GetHCLKFreq+0x54>)
 81049d2:	699b      	ldr	r3, [r3, #24]
 81049d4:	f003 030f 	and.w	r3, r3, #15
 81049d8:	4a0a      	ldr	r2, [pc, #40]	; (8104a04 <HAL_RCC_GetHCLKFreq+0x58>)
 81049da:	5cd3      	ldrb	r3, [r2, r3]
 81049dc:	f003 031f 	and.w	r3, r3, #31
 81049e0:	687a      	ldr	r2, [r7, #4]
 81049e2:	fa22 f303 	lsr.w	r3, r2, r3
 81049e6:	4a08      	ldr	r2, [pc, #32]	; (8104a08 <HAL_RCC_GetHCLKFreq+0x5c>)
 81049e8:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81049ea:	4b07      	ldr	r3, [pc, #28]	; (8104a08 <HAL_RCC_GetHCLKFreq+0x5c>)
 81049ec:	681b      	ldr	r3, [r3, #0]
 81049ee:	4a07      	ldr	r2, [pc, #28]	; (8104a0c <HAL_RCC_GetHCLKFreq+0x60>)
 81049f0:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 81049f2:	4b05      	ldr	r3, [pc, #20]	; (8104a08 <HAL_RCC_GetHCLKFreq+0x5c>)
 81049f4:	681b      	ldr	r3, [r3, #0]
}
 81049f6:	4618      	mov	r0, r3
 81049f8:	3708      	adds	r7, #8
 81049fa:	46bd      	mov	sp, r7
 81049fc:	bd80      	pop	{r7, pc}
 81049fe:	bf00      	nop
 8104a00:	58024400 	.word	0x58024400
 8104a04:	081097fc 	.word	0x081097fc
 8104a08:	10000004 	.word	0x10000004
 8104a0c:	10000000 	.word	0x10000000

08104a10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8104a10:	b580      	push	{r7, lr}
 8104a12:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8104a14:	f7ff ffca 	bl	81049ac <HAL_RCC_GetHCLKFreq>
 8104a18:	4602      	mov	r2, r0
 8104a1a:	4b06      	ldr	r3, [pc, #24]	; (8104a34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8104a1c:	69db      	ldr	r3, [r3, #28]
 8104a1e:	091b      	lsrs	r3, r3, #4
 8104a20:	f003 0307 	and.w	r3, r3, #7
 8104a24:	4904      	ldr	r1, [pc, #16]	; (8104a38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8104a26:	5ccb      	ldrb	r3, [r1, r3]
 8104a28:	f003 031f 	and.w	r3, r3, #31
 8104a2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8104a30:	4618      	mov	r0, r3
 8104a32:	bd80      	pop	{r7, pc}
 8104a34:	58024400 	.word	0x58024400
 8104a38:	081097fc 	.word	0x081097fc

08104a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8104a3c:	b580      	push	{r7, lr}
 8104a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8104a40:	f7ff ffb4 	bl	81049ac <HAL_RCC_GetHCLKFreq>
 8104a44:	4602      	mov	r2, r0
 8104a46:	4b06      	ldr	r3, [pc, #24]	; (8104a60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8104a48:	69db      	ldr	r3, [r3, #28]
 8104a4a:	0a1b      	lsrs	r3, r3, #8
 8104a4c:	f003 0307 	and.w	r3, r3, #7
 8104a50:	4904      	ldr	r1, [pc, #16]	; (8104a64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8104a52:	5ccb      	ldrb	r3, [r1, r3]
 8104a54:	f003 031f 	and.w	r3, r3, #31
 8104a58:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8104a5c:	4618      	mov	r0, r3
 8104a5e:	bd80      	pop	{r7, pc}
 8104a60:	58024400 	.word	0x58024400
 8104a64:	081097fc 	.word	0x081097fc

08104a68 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8104a68:	b580      	push	{r7, lr}
 8104a6a:	b086      	sub	sp, #24
 8104a6c:	af00      	add	r7, sp, #0
 8104a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8104a70:	2300      	movs	r3, #0
 8104a72:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8104a74:	2300      	movs	r3, #0
 8104a76:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8104a78:	687b      	ldr	r3, [r7, #4]
 8104a7a:	681b      	ldr	r3, [r3, #0]
 8104a7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104a80:	2b00      	cmp	r3, #0
 8104a82:	d03f      	beq.n	8104b04 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8104a84:	687b      	ldr	r3, [r7, #4]
 8104a86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104a88:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104a8c:	d02a      	beq.n	8104ae4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8104a8e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104a92:	d824      	bhi.n	8104ade <HAL_RCCEx_PeriphCLKConfig+0x76>
 8104a94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104a98:	d018      	beq.n	8104acc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8104a9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104a9e:	d81e      	bhi.n	8104ade <HAL_RCCEx_PeriphCLKConfig+0x76>
 8104aa0:	2b00      	cmp	r3, #0
 8104aa2:	d003      	beq.n	8104aac <HAL_RCCEx_PeriphCLKConfig+0x44>
 8104aa4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8104aa8:	d007      	beq.n	8104aba <HAL_RCCEx_PeriphCLKConfig+0x52>
 8104aaa:	e018      	b.n	8104ade <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104aac:	4ba3      	ldr	r3, [pc, #652]	; (8104d3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104ab0:	4aa2      	ldr	r2, [pc, #648]	; (8104d3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104ab2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104ab6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8104ab8:	e015      	b.n	8104ae6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8104aba:	687b      	ldr	r3, [r7, #4]
 8104abc:	3304      	adds	r3, #4
 8104abe:	2102      	movs	r1, #2
 8104ac0:	4618      	mov	r0, r3
 8104ac2:	f001 f9d5 	bl	8105e70 <RCCEx_PLL2_Config>
 8104ac6:	4603      	mov	r3, r0
 8104ac8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8104aca:	e00c      	b.n	8104ae6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8104acc:	687b      	ldr	r3, [r7, #4]
 8104ace:	3324      	adds	r3, #36	; 0x24
 8104ad0:	2102      	movs	r1, #2
 8104ad2:	4618      	mov	r0, r3
 8104ad4:	f001 fa7e 	bl	8105fd4 <RCCEx_PLL3_Config>
 8104ad8:	4603      	mov	r3, r0
 8104ada:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8104adc:	e003      	b.n	8104ae6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104ade:	2301      	movs	r3, #1
 8104ae0:	75fb      	strb	r3, [r7, #23]
      break;
 8104ae2:	e000      	b.n	8104ae6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8104ae4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104ae6:	7dfb      	ldrb	r3, [r7, #23]
 8104ae8:	2b00      	cmp	r3, #0
 8104aea:	d109      	bne.n	8104b00 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8104aec:	4b93      	ldr	r3, [pc, #588]	; (8104d3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104af0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8104af4:	687b      	ldr	r3, [r7, #4]
 8104af6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104af8:	4990      	ldr	r1, [pc, #576]	; (8104d3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104afa:	4313      	orrs	r3, r2
 8104afc:	650b      	str	r3, [r1, #80]	; 0x50
 8104afe:	e001      	b.n	8104b04 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104b00:	7dfb      	ldrb	r3, [r7, #23]
 8104b02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8104b04:	687b      	ldr	r3, [r7, #4]
 8104b06:	681b      	ldr	r3, [r3, #0]
 8104b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104b0c:	2b00      	cmp	r3, #0
 8104b0e:	d03d      	beq.n	8104b8c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8104b10:	687b      	ldr	r3, [r7, #4]
 8104b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104b14:	2b04      	cmp	r3, #4
 8104b16:	d826      	bhi.n	8104b66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8104b18:	a201      	add	r2, pc, #4	; (adr r2, 8104b20 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8104b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104b1e:	bf00      	nop
 8104b20:	08104b35 	.word	0x08104b35
 8104b24:	08104b43 	.word	0x08104b43
 8104b28:	08104b55 	.word	0x08104b55
 8104b2c:	08104b6d 	.word	0x08104b6d
 8104b30:	08104b6d 	.word	0x08104b6d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104b34:	4b81      	ldr	r3, [pc, #516]	; (8104d3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104b38:	4a80      	ldr	r2, [pc, #512]	; (8104d3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104b3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104b3e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104b40:	e015      	b.n	8104b6e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104b42:	687b      	ldr	r3, [r7, #4]
 8104b44:	3304      	adds	r3, #4
 8104b46:	2100      	movs	r1, #0
 8104b48:	4618      	mov	r0, r3
 8104b4a:	f001 f991 	bl	8105e70 <RCCEx_PLL2_Config>
 8104b4e:	4603      	mov	r3, r0
 8104b50:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104b52:	e00c      	b.n	8104b6e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8104b54:	687b      	ldr	r3, [r7, #4]
 8104b56:	3324      	adds	r3, #36	; 0x24
 8104b58:	2100      	movs	r1, #0
 8104b5a:	4618      	mov	r0, r3
 8104b5c:	f001 fa3a 	bl	8105fd4 <RCCEx_PLL3_Config>
 8104b60:	4603      	mov	r3, r0
 8104b62:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104b64:	e003      	b.n	8104b6e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104b66:	2301      	movs	r3, #1
 8104b68:	75fb      	strb	r3, [r7, #23]
      break;
 8104b6a:	e000      	b.n	8104b6e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8104b6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104b6e:	7dfb      	ldrb	r3, [r7, #23]
 8104b70:	2b00      	cmp	r3, #0
 8104b72:	d109      	bne.n	8104b88 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8104b74:	4b71      	ldr	r3, [pc, #452]	; (8104d3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104b78:	f023 0207 	bic.w	r2, r3, #7
 8104b7c:	687b      	ldr	r3, [r7, #4]
 8104b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104b80:	496e      	ldr	r1, [pc, #440]	; (8104d3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104b82:	4313      	orrs	r3, r2
 8104b84:	650b      	str	r3, [r1, #80]	; 0x50
 8104b86:	e001      	b.n	8104b8c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104b88:	7dfb      	ldrb	r3, [r7, #23]
 8104b8a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8104b8c:	687b      	ldr	r3, [r7, #4]
 8104b8e:	681b      	ldr	r3, [r3, #0]
 8104b90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8104b94:	2b00      	cmp	r3, #0
 8104b96:	d042      	beq.n	8104c1e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8104b98:	687b      	ldr	r3, [r7, #4]
 8104b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104b9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104ba0:	d02b      	beq.n	8104bfa <HAL_RCCEx_PeriphCLKConfig+0x192>
 8104ba2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104ba6:	d825      	bhi.n	8104bf4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8104ba8:	2bc0      	cmp	r3, #192	; 0xc0
 8104baa:	d028      	beq.n	8104bfe <HAL_RCCEx_PeriphCLKConfig+0x196>
 8104bac:	2bc0      	cmp	r3, #192	; 0xc0
 8104bae:	d821      	bhi.n	8104bf4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8104bb0:	2b80      	cmp	r3, #128	; 0x80
 8104bb2:	d016      	beq.n	8104be2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8104bb4:	2b80      	cmp	r3, #128	; 0x80
 8104bb6:	d81d      	bhi.n	8104bf4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8104bb8:	2b00      	cmp	r3, #0
 8104bba:	d002      	beq.n	8104bc2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8104bbc:	2b40      	cmp	r3, #64	; 0x40
 8104bbe:	d007      	beq.n	8104bd0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8104bc0:	e018      	b.n	8104bf4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104bc2:	4b5e      	ldr	r3, [pc, #376]	; (8104d3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104bc6:	4a5d      	ldr	r2, [pc, #372]	; (8104d3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104bcc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8104bce:	e017      	b.n	8104c00 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104bd0:	687b      	ldr	r3, [r7, #4]
 8104bd2:	3304      	adds	r3, #4
 8104bd4:	2100      	movs	r1, #0
 8104bd6:	4618      	mov	r0, r3
 8104bd8:	f001 f94a 	bl	8105e70 <RCCEx_PLL2_Config>
 8104bdc:	4603      	mov	r3, r0
 8104bde:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8104be0:	e00e      	b.n	8104c00 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8104be2:	687b      	ldr	r3, [r7, #4]
 8104be4:	3324      	adds	r3, #36	; 0x24
 8104be6:	2100      	movs	r1, #0
 8104be8:	4618      	mov	r0, r3
 8104bea:	f001 f9f3 	bl	8105fd4 <RCCEx_PLL3_Config>
 8104bee:	4603      	mov	r3, r0
 8104bf0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8104bf2:	e005      	b.n	8104c00 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104bf4:	2301      	movs	r3, #1
 8104bf6:	75fb      	strb	r3, [r7, #23]
      break;
 8104bf8:	e002      	b.n	8104c00 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8104bfa:	bf00      	nop
 8104bfc:	e000      	b.n	8104c00 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8104bfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104c00:	7dfb      	ldrb	r3, [r7, #23]
 8104c02:	2b00      	cmp	r3, #0
 8104c04:	d109      	bne.n	8104c1a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8104c06:	4b4d      	ldr	r3, [pc, #308]	; (8104d3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104c0a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8104c0e:	687b      	ldr	r3, [r7, #4]
 8104c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104c12:	494a      	ldr	r1, [pc, #296]	; (8104d3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104c14:	4313      	orrs	r3, r2
 8104c16:	650b      	str	r3, [r1, #80]	; 0x50
 8104c18:	e001      	b.n	8104c1e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104c1a:	7dfb      	ldrb	r3, [r7, #23]
 8104c1c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8104c1e:	687b      	ldr	r3, [r7, #4]
 8104c20:	681b      	ldr	r3, [r3, #0]
 8104c22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8104c26:	2b00      	cmp	r3, #0
 8104c28:	d049      	beq.n	8104cbe <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8104c2a:	687b      	ldr	r3, [r7, #4]
 8104c2c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8104c30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8104c34:	d030      	beq.n	8104c98 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8104c36:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8104c3a:	d82a      	bhi.n	8104c92 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8104c3c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8104c40:	d02c      	beq.n	8104c9c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8104c42:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8104c46:	d824      	bhi.n	8104c92 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8104c48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104c4c:	d018      	beq.n	8104c80 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8104c4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104c52:	d81e      	bhi.n	8104c92 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8104c54:	2b00      	cmp	r3, #0
 8104c56:	d003      	beq.n	8104c60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8104c58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104c5c:	d007      	beq.n	8104c6e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8104c5e:	e018      	b.n	8104c92 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104c60:	4b36      	ldr	r3, [pc, #216]	; (8104d3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104c64:	4a35      	ldr	r2, [pc, #212]	; (8104d3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104c66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104c6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104c6c:	e017      	b.n	8104c9e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104c6e:	687b      	ldr	r3, [r7, #4]
 8104c70:	3304      	adds	r3, #4
 8104c72:	2100      	movs	r1, #0
 8104c74:	4618      	mov	r0, r3
 8104c76:	f001 f8fb 	bl	8105e70 <RCCEx_PLL2_Config>
 8104c7a:	4603      	mov	r3, r0
 8104c7c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8104c7e:	e00e      	b.n	8104c9e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8104c80:	687b      	ldr	r3, [r7, #4]
 8104c82:	3324      	adds	r3, #36	; 0x24
 8104c84:	2100      	movs	r1, #0
 8104c86:	4618      	mov	r0, r3
 8104c88:	f001 f9a4 	bl	8105fd4 <RCCEx_PLL3_Config>
 8104c8c:	4603      	mov	r3, r0
 8104c8e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104c90:	e005      	b.n	8104c9e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8104c92:	2301      	movs	r3, #1
 8104c94:	75fb      	strb	r3, [r7, #23]
      break;
 8104c96:	e002      	b.n	8104c9e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8104c98:	bf00      	nop
 8104c9a:	e000      	b.n	8104c9e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8104c9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104c9e:	7dfb      	ldrb	r3, [r7, #23]
 8104ca0:	2b00      	cmp	r3, #0
 8104ca2:	d10a      	bne.n	8104cba <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8104ca4:	4b25      	ldr	r3, [pc, #148]	; (8104d3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104ca8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8104cac:	687b      	ldr	r3, [r7, #4]
 8104cae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8104cb2:	4922      	ldr	r1, [pc, #136]	; (8104d3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104cb4:	4313      	orrs	r3, r2
 8104cb6:	658b      	str	r3, [r1, #88]	; 0x58
 8104cb8:	e001      	b.n	8104cbe <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104cba:	7dfb      	ldrb	r3, [r7, #23]
 8104cbc:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8104cbe:	687b      	ldr	r3, [r7, #4]
 8104cc0:	681b      	ldr	r3, [r3, #0]
 8104cc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8104cc6:	2b00      	cmp	r3, #0
 8104cc8:	d04b      	beq.n	8104d62 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8104cca:	687b      	ldr	r3, [r7, #4]
 8104ccc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8104cd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8104cd4:	d030      	beq.n	8104d38 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8104cd6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8104cda:	d82a      	bhi.n	8104d32 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8104cdc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8104ce0:	d02e      	beq.n	8104d40 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8104ce2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8104ce6:	d824      	bhi.n	8104d32 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8104ce8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104cec:	d018      	beq.n	8104d20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8104cee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104cf2:	d81e      	bhi.n	8104d32 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8104cf4:	2b00      	cmp	r3, #0
 8104cf6:	d003      	beq.n	8104d00 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8104cf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8104cfc:	d007      	beq.n	8104d0e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8104cfe:	e018      	b.n	8104d32 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104d00:	4b0e      	ldr	r3, [pc, #56]	; (8104d3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104d04:	4a0d      	ldr	r2, [pc, #52]	; (8104d3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104d06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104d0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104d0c:	e019      	b.n	8104d42 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104d0e:	687b      	ldr	r3, [r7, #4]
 8104d10:	3304      	adds	r3, #4
 8104d12:	2100      	movs	r1, #0
 8104d14:	4618      	mov	r0, r3
 8104d16:	f001 f8ab 	bl	8105e70 <RCCEx_PLL2_Config>
 8104d1a:	4603      	mov	r3, r0
 8104d1c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8104d1e:	e010      	b.n	8104d42 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104d20:	687b      	ldr	r3, [r7, #4]
 8104d22:	3324      	adds	r3, #36	; 0x24
 8104d24:	2100      	movs	r1, #0
 8104d26:	4618      	mov	r0, r3
 8104d28:	f001 f954 	bl	8105fd4 <RCCEx_PLL3_Config>
 8104d2c:	4603      	mov	r3, r0
 8104d2e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104d30:	e007      	b.n	8104d42 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8104d32:	2301      	movs	r3, #1
 8104d34:	75fb      	strb	r3, [r7, #23]
      break;
 8104d36:	e004      	b.n	8104d42 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8104d38:	bf00      	nop
 8104d3a:	e002      	b.n	8104d42 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8104d3c:	58024400 	.word	0x58024400
      break;
 8104d40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104d42:	7dfb      	ldrb	r3, [r7, #23]
 8104d44:	2b00      	cmp	r3, #0
 8104d46:	d10a      	bne.n	8104d5e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8104d48:	4b99      	ldr	r3, [pc, #612]	; (8104fb0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104d4c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8104d50:	687b      	ldr	r3, [r7, #4]
 8104d52:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8104d56:	4996      	ldr	r1, [pc, #600]	; (8104fb0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104d58:	4313      	orrs	r3, r2
 8104d5a:	658b      	str	r3, [r1, #88]	; 0x58
 8104d5c:	e001      	b.n	8104d62 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104d5e:	7dfb      	ldrb	r3, [r7, #23]
 8104d60:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8104d62:	687b      	ldr	r3, [r7, #4]
 8104d64:	681b      	ldr	r3, [r3, #0]
 8104d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8104d6a:	2b00      	cmp	r3, #0
 8104d6c:	d032      	beq.n	8104dd4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8104d6e:	687b      	ldr	r3, [r7, #4]
 8104d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104d72:	2b30      	cmp	r3, #48	; 0x30
 8104d74:	d01c      	beq.n	8104db0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8104d76:	2b30      	cmp	r3, #48	; 0x30
 8104d78:	d817      	bhi.n	8104daa <HAL_RCCEx_PeriphCLKConfig+0x342>
 8104d7a:	2b20      	cmp	r3, #32
 8104d7c:	d00c      	beq.n	8104d98 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8104d7e:	2b20      	cmp	r3, #32
 8104d80:	d813      	bhi.n	8104daa <HAL_RCCEx_PeriphCLKConfig+0x342>
 8104d82:	2b00      	cmp	r3, #0
 8104d84:	d016      	beq.n	8104db4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8104d86:	2b10      	cmp	r3, #16
 8104d88:	d10f      	bne.n	8104daa <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104d8a:	4b89      	ldr	r3, [pc, #548]	; (8104fb0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104d8e:	4a88      	ldr	r2, [pc, #544]	; (8104fb0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104d94:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8104d96:	e00e      	b.n	8104db6 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8104d98:	687b      	ldr	r3, [r7, #4]
 8104d9a:	3304      	adds	r3, #4
 8104d9c:	2102      	movs	r1, #2
 8104d9e:	4618      	mov	r0, r3
 8104da0:	f001 f866 	bl	8105e70 <RCCEx_PLL2_Config>
 8104da4:	4603      	mov	r3, r0
 8104da6:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8104da8:	e005      	b.n	8104db6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8104daa:	2301      	movs	r3, #1
 8104dac:	75fb      	strb	r3, [r7, #23]
      break;
 8104dae:	e002      	b.n	8104db6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8104db0:	bf00      	nop
 8104db2:	e000      	b.n	8104db6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8104db4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104db6:	7dfb      	ldrb	r3, [r7, #23]
 8104db8:	2b00      	cmp	r3, #0
 8104dba:	d109      	bne.n	8104dd0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8104dbc:	4b7c      	ldr	r3, [pc, #496]	; (8104fb0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104dc0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8104dc4:	687b      	ldr	r3, [r7, #4]
 8104dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104dc8:	4979      	ldr	r1, [pc, #484]	; (8104fb0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104dca:	4313      	orrs	r3, r2
 8104dcc:	64cb      	str	r3, [r1, #76]	; 0x4c
 8104dce:	e001      	b.n	8104dd4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104dd0:	7dfb      	ldrb	r3, [r7, #23]
 8104dd2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8104dd4:	687b      	ldr	r3, [r7, #4]
 8104dd6:	681b      	ldr	r3, [r3, #0]
 8104dd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8104ddc:	2b00      	cmp	r3, #0
 8104dde:	d047      	beq.n	8104e70 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8104de0:	687b      	ldr	r3, [r7, #4]
 8104de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104de4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104de8:	d030      	beq.n	8104e4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8104dea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104dee:	d82a      	bhi.n	8104e46 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8104df0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8104df4:	d02c      	beq.n	8104e50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8104df6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8104dfa:	d824      	bhi.n	8104e46 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8104dfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104e00:	d018      	beq.n	8104e34 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8104e02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104e06:	d81e      	bhi.n	8104e46 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8104e08:	2b00      	cmp	r3, #0
 8104e0a:	d003      	beq.n	8104e14 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8104e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104e10:	d007      	beq.n	8104e22 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8104e12:	e018      	b.n	8104e46 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104e14:	4b66      	ldr	r3, [pc, #408]	; (8104fb0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104e18:	4a65      	ldr	r2, [pc, #404]	; (8104fb0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104e1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104e1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8104e20:	e017      	b.n	8104e52 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104e22:	687b      	ldr	r3, [r7, #4]
 8104e24:	3304      	adds	r3, #4
 8104e26:	2100      	movs	r1, #0
 8104e28:	4618      	mov	r0, r3
 8104e2a:	f001 f821 	bl	8105e70 <RCCEx_PLL2_Config>
 8104e2e:	4603      	mov	r3, r0
 8104e30:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8104e32:	e00e      	b.n	8104e52 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8104e34:	687b      	ldr	r3, [r7, #4]
 8104e36:	3324      	adds	r3, #36	; 0x24
 8104e38:	2100      	movs	r1, #0
 8104e3a:	4618      	mov	r0, r3
 8104e3c:	f001 f8ca 	bl	8105fd4 <RCCEx_PLL3_Config>
 8104e40:	4603      	mov	r3, r0
 8104e42:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8104e44:	e005      	b.n	8104e52 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104e46:	2301      	movs	r3, #1
 8104e48:	75fb      	strb	r3, [r7, #23]
      break;
 8104e4a:	e002      	b.n	8104e52 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8104e4c:	bf00      	nop
 8104e4e:	e000      	b.n	8104e52 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8104e50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104e52:	7dfb      	ldrb	r3, [r7, #23]
 8104e54:	2b00      	cmp	r3, #0
 8104e56:	d109      	bne.n	8104e6c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8104e58:	4b55      	ldr	r3, [pc, #340]	; (8104fb0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104e5c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8104e60:	687b      	ldr	r3, [r7, #4]
 8104e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104e64:	4952      	ldr	r1, [pc, #328]	; (8104fb0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104e66:	4313      	orrs	r3, r2
 8104e68:	650b      	str	r3, [r1, #80]	; 0x50
 8104e6a:	e001      	b.n	8104e70 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104e6c:	7dfb      	ldrb	r3, [r7, #23]
 8104e6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8104e70:	687b      	ldr	r3, [r7, #4]
 8104e72:	681b      	ldr	r3, [r3, #0]
 8104e74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8104e78:	2b00      	cmp	r3, #0
 8104e7a:	d049      	beq.n	8104f10 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8104e7c:	687b      	ldr	r3, [r7, #4]
 8104e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104e80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8104e84:	d02e      	beq.n	8104ee4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8104e86:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8104e8a:	d828      	bhi.n	8104ede <HAL_RCCEx_PeriphCLKConfig+0x476>
 8104e8c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8104e90:	d02a      	beq.n	8104ee8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8104e92:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8104e96:	d822      	bhi.n	8104ede <HAL_RCCEx_PeriphCLKConfig+0x476>
 8104e98:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8104e9c:	d026      	beq.n	8104eec <HAL_RCCEx_PeriphCLKConfig+0x484>
 8104e9e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8104ea2:	d81c      	bhi.n	8104ede <HAL_RCCEx_PeriphCLKConfig+0x476>
 8104ea4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104ea8:	d010      	beq.n	8104ecc <HAL_RCCEx_PeriphCLKConfig+0x464>
 8104eaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104eae:	d816      	bhi.n	8104ede <HAL_RCCEx_PeriphCLKConfig+0x476>
 8104eb0:	2b00      	cmp	r3, #0
 8104eb2:	d01d      	beq.n	8104ef0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8104eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104eb8:	d111      	bne.n	8104ede <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8104eba:	687b      	ldr	r3, [r7, #4]
 8104ebc:	3304      	adds	r3, #4
 8104ebe:	2101      	movs	r1, #1
 8104ec0:	4618      	mov	r0, r3
 8104ec2:	f000 ffd5 	bl	8105e70 <RCCEx_PLL2_Config>
 8104ec6:	4603      	mov	r3, r0
 8104ec8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8104eca:	e012      	b.n	8104ef2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8104ecc:	687b      	ldr	r3, [r7, #4]
 8104ece:	3324      	adds	r3, #36	; 0x24
 8104ed0:	2101      	movs	r1, #1
 8104ed2:	4618      	mov	r0, r3
 8104ed4:	f001 f87e 	bl	8105fd4 <RCCEx_PLL3_Config>
 8104ed8:	4603      	mov	r3, r0
 8104eda:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8104edc:	e009      	b.n	8104ef2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104ede:	2301      	movs	r3, #1
 8104ee0:	75fb      	strb	r3, [r7, #23]
      break;
 8104ee2:	e006      	b.n	8104ef2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8104ee4:	bf00      	nop
 8104ee6:	e004      	b.n	8104ef2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8104ee8:	bf00      	nop
 8104eea:	e002      	b.n	8104ef2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8104eec:	bf00      	nop
 8104eee:	e000      	b.n	8104ef2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8104ef0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104ef2:	7dfb      	ldrb	r3, [r7, #23]
 8104ef4:	2b00      	cmp	r3, #0
 8104ef6:	d109      	bne.n	8104f0c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8104ef8:	4b2d      	ldr	r3, [pc, #180]	; (8104fb0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104efc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8104f00:	687b      	ldr	r3, [r7, #4]
 8104f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104f04:	492a      	ldr	r1, [pc, #168]	; (8104fb0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104f06:	4313      	orrs	r3, r2
 8104f08:	650b      	str	r3, [r1, #80]	; 0x50
 8104f0a:	e001      	b.n	8104f10 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104f0c:	7dfb      	ldrb	r3, [r7, #23]
 8104f0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8104f10:	687b      	ldr	r3, [r7, #4]
 8104f12:	681b      	ldr	r3, [r3, #0]
 8104f14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8104f18:	2b00      	cmp	r3, #0
 8104f1a:	d04d      	beq.n	8104fb8 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8104f1c:	687b      	ldr	r3, [r7, #4]
 8104f1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8104f22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104f26:	d02e      	beq.n	8104f86 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8104f28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104f2c:	d828      	bhi.n	8104f80 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8104f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104f32:	d02a      	beq.n	8104f8a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8104f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104f38:	d822      	bhi.n	8104f80 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8104f3a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104f3e:	d026      	beq.n	8104f8e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8104f40:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104f44:	d81c      	bhi.n	8104f80 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8104f46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104f4a:	d010      	beq.n	8104f6e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8104f4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104f50:	d816      	bhi.n	8104f80 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8104f52:	2b00      	cmp	r3, #0
 8104f54:	d01d      	beq.n	8104f92 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8104f56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104f5a:	d111      	bne.n	8104f80 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8104f5c:	687b      	ldr	r3, [r7, #4]
 8104f5e:	3304      	adds	r3, #4
 8104f60:	2101      	movs	r1, #1
 8104f62:	4618      	mov	r0, r3
 8104f64:	f000 ff84 	bl	8105e70 <RCCEx_PLL2_Config>
 8104f68:	4603      	mov	r3, r0
 8104f6a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8104f6c:	e012      	b.n	8104f94 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8104f6e:	687b      	ldr	r3, [r7, #4]
 8104f70:	3324      	adds	r3, #36	; 0x24
 8104f72:	2101      	movs	r1, #1
 8104f74:	4618      	mov	r0, r3
 8104f76:	f001 f82d 	bl	8105fd4 <RCCEx_PLL3_Config>
 8104f7a:	4603      	mov	r3, r0
 8104f7c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8104f7e:	e009      	b.n	8104f94 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8104f80:	2301      	movs	r3, #1
 8104f82:	75fb      	strb	r3, [r7, #23]
      break;
 8104f84:	e006      	b.n	8104f94 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8104f86:	bf00      	nop
 8104f88:	e004      	b.n	8104f94 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8104f8a:	bf00      	nop
 8104f8c:	e002      	b.n	8104f94 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8104f8e:	bf00      	nop
 8104f90:	e000      	b.n	8104f94 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8104f92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104f94:	7dfb      	ldrb	r3, [r7, #23]
 8104f96:	2b00      	cmp	r3, #0
 8104f98:	d10c      	bne.n	8104fb4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8104f9a:	4b05      	ldr	r3, [pc, #20]	; (8104fb0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104f9e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8104fa2:	687b      	ldr	r3, [r7, #4]
 8104fa4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8104fa8:	4901      	ldr	r1, [pc, #4]	; (8104fb0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104faa:	4313      	orrs	r3, r2
 8104fac:	658b      	str	r3, [r1, #88]	; 0x58
 8104fae:	e003      	b.n	8104fb8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8104fb0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104fb4:	7dfb      	ldrb	r3, [r7, #23]
 8104fb6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8104fb8:	687b      	ldr	r3, [r7, #4]
 8104fba:	681b      	ldr	r3, [r3, #0]
 8104fbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8104fc0:	2b00      	cmp	r3, #0
 8104fc2:	d02f      	beq.n	8105024 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8104fc4:	687b      	ldr	r3, [r7, #4]
 8104fc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104fc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104fcc:	d00e      	beq.n	8104fec <HAL_RCCEx_PeriphCLKConfig+0x584>
 8104fce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104fd2:	d814      	bhi.n	8104ffe <HAL_RCCEx_PeriphCLKConfig+0x596>
 8104fd4:	2b00      	cmp	r3, #0
 8104fd6:	d015      	beq.n	8105004 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8104fd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104fdc:	d10f      	bne.n	8104ffe <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104fde:	4bb0      	ldr	r3, [pc, #704]	; (81052a0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104fe2:	4aaf      	ldr	r2, [pc, #700]	; (81052a0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104fe8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8104fea:	e00c      	b.n	8105006 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8104fec:	687b      	ldr	r3, [r7, #4]
 8104fee:	3304      	adds	r3, #4
 8104ff0:	2101      	movs	r1, #1
 8104ff2:	4618      	mov	r0, r3
 8104ff4:	f000 ff3c 	bl	8105e70 <RCCEx_PLL2_Config>
 8104ff8:	4603      	mov	r3, r0
 8104ffa:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8104ffc:	e003      	b.n	8105006 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104ffe:	2301      	movs	r3, #1
 8105000:	75fb      	strb	r3, [r7, #23]
      break;
 8105002:	e000      	b.n	8105006 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8105004:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105006:	7dfb      	ldrb	r3, [r7, #23]
 8105008:	2b00      	cmp	r3, #0
 810500a:	d109      	bne.n	8105020 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 810500c:	4ba4      	ldr	r3, [pc, #656]	; (81052a0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810500e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105010:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8105014:	687b      	ldr	r3, [r7, #4]
 8105016:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105018:	49a1      	ldr	r1, [pc, #644]	; (81052a0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810501a:	4313      	orrs	r3, r2
 810501c:	650b      	str	r3, [r1, #80]	; 0x50
 810501e:	e001      	b.n	8105024 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105020:	7dfb      	ldrb	r3, [r7, #23]
 8105022:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8105024:	687b      	ldr	r3, [r7, #4]
 8105026:	681b      	ldr	r3, [r3, #0]
 8105028:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810502c:	2b00      	cmp	r3, #0
 810502e:	d032      	beq.n	8105096 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8105030:	687b      	ldr	r3, [r7, #4]
 8105032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105034:	2b03      	cmp	r3, #3
 8105036:	d81b      	bhi.n	8105070 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8105038:	a201      	add	r2, pc, #4	; (adr r2, 8105040 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 810503a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810503e:	bf00      	nop
 8105040:	08105077 	.word	0x08105077
 8105044:	08105051 	.word	0x08105051
 8105048:	0810505f 	.word	0x0810505f
 810504c:	08105077 	.word	0x08105077
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105050:	4b93      	ldr	r3, [pc, #588]	; (81052a0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105054:	4a92      	ldr	r2, [pc, #584]	; (81052a0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105056:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810505a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 810505c:	e00c      	b.n	8105078 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810505e:	687b      	ldr	r3, [r7, #4]
 8105060:	3304      	adds	r3, #4
 8105062:	2102      	movs	r1, #2
 8105064:	4618      	mov	r0, r3
 8105066:	f000 ff03 	bl	8105e70 <RCCEx_PLL2_Config>
 810506a:	4603      	mov	r3, r0
 810506c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 810506e:	e003      	b.n	8105078 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8105070:	2301      	movs	r3, #1
 8105072:	75fb      	strb	r3, [r7, #23]
      break;
 8105074:	e000      	b.n	8105078 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8105076:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105078:	7dfb      	ldrb	r3, [r7, #23]
 810507a:	2b00      	cmp	r3, #0
 810507c:	d109      	bne.n	8105092 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810507e:	4b88      	ldr	r3, [pc, #544]	; (81052a0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105082:	f023 0203 	bic.w	r2, r3, #3
 8105086:	687b      	ldr	r3, [r7, #4]
 8105088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810508a:	4985      	ldr	r1, [pc, #532]	; (81052a0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810508c:	4313      	orrs	r3, r2
 810508e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8105090:	e001      	b.n	8105096 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105092:	7dfb      	ldrb	r3, [r7, #23]
 8105094:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8105096:	687b      	ldr	r3, [r7, #4]
 8105098:	681b      	ldr	r3, [r3, #0]
 810509a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810509e:	2b00      	cmp	r3, #0
 81050a0:	f000 8088 	beq.w	81051b4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 81050a4:	4b7f      	ldr	r3, [pc, #508]	; (81052a4 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 81050a6:	681b      	ldr	r3, [r3, #0]
 81050a8:	4a7e      	ldr	r2, [pc, #504]	; (81052a4 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 81050aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81050ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 81050b0:	f7fc fd8a 	bl	8101bc8 <HAL_GetTick>
 81050b4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81050b6:	e009      	b.n	81050cc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 81050b8:	f7fc fd86 	bl	8101bc8 <HAL_GetTick>
 81050bc:	4602      	mov	r2, r0
 81050be:	693b      	ldr	r3, [r7, #16]
 81050c0:	1ad3      	subs	r3, r2, r3
 81050c2:	2b64      	cmp	r3, #100	; 0x64
 81050c4:	d902      	bls.n	81050cc <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 81050c6:	2303      	movs	r3, #3
 81050c8:	75fb      	strb	r3, [r7, #23]
        break;
 81050ca:	e005      	b.n	81050d8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81050cc:	4b75      	ldr	r3, [pc, #468]	; (81052a4 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 81050ce:	681b      	ldr	r3, [r3, #0]
 81050d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81050d4:	2b00      	cmp	r3, #0
 81050d6:	d0ef      	beq.n	81050b8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 81050d8:	7dfb      	ldrb	r3, [r7, #23]
 81050da:	2b00      	cmp	r3, #0
 81050dc:	d168      	bne.n	81051b0 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 81050de:	4b70      	ldr	r3, [pc, #448]	; (81052a0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81050e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 81050e2:	687b      	ldr	r3, [r7, #4]
 81050e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81050e8:	4053      	eors	r3, r2
 81050ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81050ee:	2b00      	cmp	r3, #0
 81050f0:	d013      	beq.n	810511a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 81050f2:	4b6b      	ldr	r3, [pc, #428]	; (81052a0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81050f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81050f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81050fa:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 81050fc:	4b68      	ldr	r3, [pc, #416]	; (81052a0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81050fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105100:	4a67      	ldr	r2, [pc, #412]	; (81052a0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8105106:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8105108:	4b65      	ldr	r3, [pc, #404]	; (81052a0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810510a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810510c:	4a64      	ldr	r2, [pc, #400]	; (81052a0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810510e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8105112:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8105114:	4a62      	ldr	r2, [pc, #392]	; (81052a0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105116:	68fb      	ldr	r3, [r7, #12]
 8105118:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 810511a:	687b      	ldr	r3, [r7, #4]
 810511c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8105120:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105124:	d115      	bne.n	8105152 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8105126:	f7fc fd4f 	bl	8101bc8 <HAL_GetTick>
 810512a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810512c:	e00b      	b.n	8105146 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810512e:	f7fc fd4b 	bl	8101bc8 <HAL_GetTick>
 8105132:	4602      	mov	r2, r0
 8105134:	693b      	ldr	r3, [r7, #16]
 8105136:	1ad3      	subs	r3, r2, r3
 8105138:	f241 3288 	movw	r2, #5000	; 0x1388
 810513c:	4293      	cmp	r3, r2
 810513e:	d902      	bls.n	8105146 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8105140:	2303      	movs	r3, #3
 8105142:	75fb      	strb	r3, [r7, #23]
            break;
 8105144:	e005      	b.n	8105152 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8105146:	4b56      	ldr	r3, [pc, #344]	; (81052a0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810514a:	f003 0302 	and.w	r3, r3, #2
 810514e:	2b00      	cmp	r3, #0
 8105150:	d0ed      	beq.n	810512e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8105152:	7dfb      	ldrb	r3, [r7, #23]
 8105154:	2b00      	cmp	r3, #0
 8105156:	d128      	bne.n	81051aa <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8105158:	687b      	ldr	r3, [r7, #4]
 810515a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810515e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8105162:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8105166:	d10f      	bne.n	8105188 <HAL_RCCEx_PeriphCLKConfig+0x720>
 8105168:	4b4d      	ldr	r3, [pc, #308]	; (81052a0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810516a:	691b      	ldr	r3, [r3, #16]
 810516c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8105170:	687b      	ldr	r3, [r7, #4]
 8105172:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8105176:	091b      	lsrs	r3, r3, #4
 8105178:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 810517c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8105180:	4947      	ldr	r1, [pc, #284]	; (81052a0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105182:	4313      	orrs	r3, r2
 8105184:	610b      	str	r3, [r1, #16]
 8105186:	e005      	b.n	8105194 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8105188:	4b45      	ldr	r3, [pc, #276]	; (81052a0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810518a:	691b      	ldr	r3, [r3, #16]
 810518c:	4a44      	ldr	r2, [pc, #272]	; (81052a0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810518e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8105192:	6113      	str	r3, [r2, #16]
 8105194:	4b42      	ldr	r3, [pc, #264]	; (81052a0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8105196:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8105198:	687b      	ldr	r3, [r7, #4]
 810519a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810519e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 81051a2:	493f      	ldr	r1, [pc, #252]	; (81052a0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81051a4:	4313      	orrs	r3, r2
 81051a6:	670b      	str	r3, [r1, #112]	; 0x70
 81051a8:	e004      	b.n	81051b4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 81051aa:	7dfb      	ldrb	r3, [r7, #23]
 81051ac:	75bb      	strb	r3, [r7, #22]
 81051ae:	e001      	b.n	81051b4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 81051b0:	7dfb      	ldrb	r3, [r7, #23]
 81051b2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 81051b4:	687b      	ldr	r3, [r7, #4]
 81051b6:	681b      	ldr	r3, [r3, #0]
 81051b8:	f003 0301 	and.w	r3, r3, #1
 81051bc:	2b00      	cmp	r3, #0
 81051be:	f000 8083 	beq.w	81052c8 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 81051c2:	687b      	ldr	r3, [r7, #4]
 81051c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81051c6:	2b28      	cmp	r3, #40	; 0x28
 81051c8:	d866      	bhi.n	8105298 <HAL_RCCEx_PeriphCLKConfig+0x830>
 81051ca:	a201      	add	r2, pc, #4	; (adr r2, 81051d0 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 81051cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81051d0:	081052a9 	.word	0x081052a9
 81051d4:	08105299 	.word	0x08105299
 81051d8:	08105299 	.word	0x08105299
 81051dc:	08105299 	.word	0x08105299
 81051e0:	08105299 	.word	0x08105299
 81051e4:	08105299 	.word	0x08105299
 81051e8:	08105299 	.word	0x08105299
 81051ec:	08105299 	.word	0x08105299
 81051f0:	08105275 	.word	0x08105275
 81051f4:	08105299 	.word	0x08105299
 81051f8:	08105299 	.word	0x08105299
 81051fc:	08105299 	.word	0x08105299
 8105200:	08105299 	.word	0x08105299
 8105204:	08105299 	.word	0x08105299
 8105208:	08105299 	.word	0x08105299
 810520c:	08105299 	.word	0x08105299
 8105210:	08105287 	.word	0x08105287
 8105214:	08105299 	.word	0x08105299
 8105218:	08105299 	.word	0x08105299
 810521c:	08105299 	.word	0x08105299
 8105220:	08105299 	.word	0x08105299
 8105224:	08105299 	.word	0x08105299
 8105228:	08105299 	.word	0x08105299
 810522c:	08105299 	.word	0x08105299
 8105230:	081052a9 	.word	0x081052a9
 8105234:	08105299 	.word	0x08105299
 8105238:	08105299 	.word	0x08105299
 810523c:	08105299 	.word	0x08105299
 8105240:	08105299 	.word	0x08105299
 8105244:	08105299 	.word	0x08105299
 8105248:	08105299 	.word	0x08105299
 810524c:	08105299 	.word	0x08105299
 8105250:	081052a9 	.word	0x081052a9
 8105254:	08105299 	.word	0x08105299
 8105258:	08105299 	.word	0x08105299
 810525c:	08105299 	.word	0x08105299
 8105260:	08105299 	.word	0x08105299
 8105264:	08105299 	.word	0x08105299
 8105268:	08105299 	.word	0x08105299
 810526c:	08105299 	.word	0x08105299
 8105270:	081052a9 	.word	0x081052a9
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8105274:	687b      	ldr	r3, [r7, #4]
 8105276:	3304      	adds	r3, #4
 8105278:	2101      	movs	r1, #1
 810527a:	4618      	mov	r0, r3
 810527c:	f000 fdf8 	bl	8105e70 <RCCEx_PLL2_Config>
 8105280:	4603      	mov	r3, r0
 8105282:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8105284:	e011      	b.n	81052aa <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8105286:	687b      	ldr	r3, [r7, #4]
 8105288:	3324      	adds	r3, #36	; 0x24
 810528a:	2101      	movs	r1, #1
 810528c:	4618      	mov	r0, r3
 810528e:	f000 fea1 	bl	8105fd4 <RCCEx_PLL3_Config>
 8105292:	4603      	mov	r3, r0
 8105294:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8105296:	e008      	b.n	81052aa <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105298:	2301      	movs	r3, #1
 810529a:	75fb      	strb	r3, [r7, #23]
      break;
 810529c:	e005      	b.n	81052aa <HAL_RCCEx_PeriphCLKConfig+0x842>
 810529e:	bf00      	nop
 81052a0:	58024400 	.word	0x58024400
 81052a4:	58024800 	.word	0x58024800
      break;
 81052a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 81052aa:	7dfb      	ldrb	r3, [r7, #23]
 81052ac:	2b00      	cmp	r3, #0
 81052ae:	d109      	bne.n	81052c4 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 81052b0:	4b96      	ldr	r3, [pc, #600]	; (810550c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81052b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81052b4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 81052b8:	687b      	ldr	r3, [r7, #4]
 81052ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81052bc:	4993      	ldr	r1, [pc, #588]	; (810550c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81052be:	4313      	orrs	r3, r2
 81052c0:	654b      	str	r3, [r1, #84]	; 0x54
 81052c2:	e001      	b.n	81052c8 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81052c4:	7dfb      	ldrb	r3, [r7, #23]
 81052c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 81052c8:	687b      	ldr	r3, [r7, #4]
 81052ca:	681b      	ldr	r3, [r3, #0]
 81052cc:	f003 0302 	and.w	r3, r3, #2
 81052d0:	2b00      	cmp	r3, #0
 81052d2:	d038      	beq.n	8105346 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 81052d4:	687b      	ldr	r3, [r7, #4]
 81052d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81052d8:	2b05      	cmp	r3, #5
 81052da:	d821      	bhi.n	8105320 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 81052dc:	a201      	add	r2, pc, #4	; (adr r2, 81052e4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 81052de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81052e2:	bf00      	nop
 81052e4:	08105327 	.word	0x08105327
 81052e8:	081052fd 	.word	0x081052fd
 81052ec:	0810530f 	.word	0x0810530f
 81052f0:	08105327 	.word	0x08105327
 81052f4:	08105327 	.word	0x08105327
 81052f8:	08105327 	.word	0x08105327
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81052fc:	687b      	ldr	r3, [r7, #4]
 81052fe:	3304      	adds	r3, #4
 8105300:	2101      	movs	r1, #1
 8105302:	4618      	mov	r0, r3
 8105304:	f000 fdb4 	bl	8105e70 <RCCEx_PLL2_Config>
 8105308:	4603      	mov	r3, r0
 810530a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 810530c:	e00c      	b.n	8105328 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810530e:	687b      	ldr	r3, [r7, #4]
 8105310:	3324      	adds	r3, #36	; 0x24
 8105312:	2101      	movs	r1, #1
 8105314:	4618      	mov	r0, r3
 8105316:	f000 fe5d 	bl	8105fd4 <RCCEx_PLL3_Config>
 810531a:	4603      	mov	r3, r0
 810531c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 810531e:	e003      	b.n	8105328 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105320:	2301      	movs	r3, #1
 8105322:	75fb      	strb	r3, [r7, #23]
      break;
 8105324:	e000      	b.n	8105328 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8105326:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105328:	7dfb      	ldrb	r3, [r7, #23]
 810532a:	2b00      	cmp	r3, #0
 810532c:	d109      	bne.n	8105342 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810532e:	4b77      	ldr	r3, [pc, #476]	; (810550c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8105330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105332:	f023 0207 	bic.w	r2, r3, #7
 8105336:	687b      	ldr	r3, [r7, #4]
 8105338:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810533a:	4974      	ldr	r1, [pc, #464]	; (810550c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810533c:	4313      	orrs	r3, r2
 810533e:	654b      	str	r3, [r1, #84]	; 0x54
 8105340:	e001      	b.n	8105346 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105342:	7dfb      	ldrb	r3, [r7, #23]
 8105344:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8105346:	687b      	ldr	r3, [r7, #4]
 8105348:	681b      	ldr	r3, [r3, #0]
 810534a:	f003 0304 	and.w	r3, r3, #4
 810534e:	2b00      	cmp	r3, #0
 8105350:	d03a      	beq.n	81053c8 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8105352:	687b      	ldr	r3, [r7, #4]
 8105354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8105358:	2b05      	cmp	r3, #5
 810535a:	d821      	bhi.n	81053a0 <HAL_RCCEx_PeriphCLKConfig+0x938>
 810535c:	a201      	add	r2, pc, #4	; (adr r2, 8105364 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 810535e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105362:	bf00      	nop
 8105364:	081053a7 	.word	0x081053a7
 8105368:	0810537d 	.word	0x0810537d
 810536c:	0810538f 	.word	0x0810538f
 8105370:	081053a7 	.word	0x081053a7
 8105374:	081053a7 	.word	0x081053a7
 8105378:	081053a7 	.word	0x081053a7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810537c:	687b      	ldr	r3, [r7, #4]
 810537e:	3304      	adds	r3, #4
 8105380:	2101      	movs	r1, #1
 8105382:	4618      	mov	r0, r3
 8105384:	f000 fd74 	bl	8105e70 <RCCEx_PLL2_Config>
 8105388:	4603      	mov	r3, r0
 810538a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 810538c:	e00c      	b.n	81053a8 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810538e:	687b      	ldr	r3, [r7, #4]
 8105390:	3324      	adds	r3, #36	; 0x24
 8105392:	2101      	movs	r1, #1
 8105394:	4618      	mov	r0, r3
 8105396:	f000 fe1d 	bl	8105fd4 <RCCEx_PLL3_Config>
 810539a:	4603      	mov	r3, r0
 810539c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 810539e:	e003      	b.n	81053a8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81053a0:	2301      	movs	r3, #1
 81053a2:	75fb      	strb	r3, [r7, #23]
      break;
 81053a4:	e000      	b.n	81053a8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 81053a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81053a8:	7dfb      	ldrb	r3, [r7, #23]
 81053aa:	2b00      	cmp	r3, #0
 81053ac:	d10a      	bne.n	81053c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 81053ae:	4b57      	ldr	r3, [pc, #348]	; (810550c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81053b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81053b2:	f023 0207 	bic.w	r2, r3, #7
 81053b6:	687b      	ldr	r3, [r7, #4]
 81053b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81053bc:	4953      	ldr	r1, [pc, #332]	; (810550c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81053be:	4313      	orrs	r3, r2
 81053c0:	658b      	str	r3, [r1, #88]	; 0x58
 81053c2:	e001      	b.n	81053c8 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81053c4:	7dfb      	ldrb	r3, [r7, #23]
 81053c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 81053c8:	687b      	ldr	r3, [r7, #4]
 81053ca:	681b      	ldr	r3, [r3, #0]
 81053cc:	f003 0320 	and.w	r3, r3, #32
 81053d0:	2b00      	cmp	r3, #0
 81053d2:	d04b      	beq.n	810546c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 81053d4:	687b      	ldr	r3, [r7, #4]
 81053d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81053da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81053de:	d02e      	beq.n	810543e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 81053e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81053e4:	d828      	bhi.n	8105438 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 81053e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81053ea:	d02a      	beq.n	8105442 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 81053ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81053f0:	d822      	bhi.n	8105438 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 81053f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81053f6:	d026      	beq.n	8105446 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 81053f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81053fc:	d81c      	bhi.n	8105438 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 81053fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105402:	d010      	beq.n	8105426 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8105404:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105408:	d816      	bhi.n	8105438 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 810540a:	2b00      	cmp	r3, #0
 810540c:	d01d      	beq.n	810544a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 810540e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105412:	d111      	bne.n	8105438 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105414:	687b      	ldr	r3, [r7, #4]
 8105416:	3304      	adds	r3, #4
 8105418:	2100      	movs	r1, #0
 810541a:	4618      	mov	r0, r3
 810541c:	f000 fd28 	bl	8105e70 <RCCEx_PLL2_Config>
 8105420:	4603      	mov	r3, r0
 8105422:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8105424:	e012      	b.n	810544c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8105426:	687b      	ldr	r3, [r7, #4]
 8105428:	3324      	adds	r3, #36	; 0x24
 810542a:	2102      	movs	r1, #2
 810542c:	4618      	mov	r0, r3
 810542e:	f000 fdd1 	bl	8105fd4 <RCCEx_PLL3_Config>
 8105432:	4603      	mov	r3, r0
 8105434:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8105436:	e009      	b.n	810544c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105438:	2301      	movs	r3, #1
 810543a:	75fb      	strb	r3, [r7, #23]
      break;
 810543c:	e006      	b.n	810544c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 810543e:	bf00      	nop
 8105440:	e004      	b.n	810544c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8105442:	bf00      	nop
 8105444:	e002      	b.n	810544c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8105446:	bf00      	nop
 8105448:	e000      	b.n	810544c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 810544a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810544c:	7dfb      	ldrb	r3, [r7, #23]
 810544e:	2b00      	cmp	r3, #0
 8105450:	d10a      	bne.n	8105468 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8105452:	4b2e      	ldr	r3, [pc, #184]	; (810550c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8105454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105456:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 810545a:	687b      	ldr	r3, [r7, #4]
 810545c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8105460:	492a      	ldr	r1, [pc, #168]	; (810550c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8105462:	4313      	orrs	r3, r2
 8105464:	654b      	str	r3, [r1, #84]	; 0x54
 8105466:	e001      	b.n	810546c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105468:	7dfb      	ldrb	r3, [r7, #23]
 810546a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 810546c:	687b      	ldr	r3, [r7, #4]
 810546e:	681b      	ldr	r3, [r3, #0]
 8105470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105474:	2b00      	cmp	r3, #0
 8105476:	d04d      	beq.n	8105514 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8105478:	687b      	ldr	r3, [r7, #4]
 810547a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810547e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8105482:	d02e      	beq.n	81054e2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8105484:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8105488:	d828      	bhi.n	81054dc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 810548a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810548e:	d02a      	beq.n	81054e6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8105490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105494:	d822      	bhi.n	81054dc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8105496:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810549a:	d026      	beq.n	81054ea <HAL_RCCEx_PeriphCLKConfig+0xa82>
 810549c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81054a0:	d81c      	bhi.n	81054dc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 81054a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81054a6:	d010      	beq.n	81054ca <HAL_RCCEx_PeriphCLKConfig+0xa62>
 81054a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81054ac:	d816      	bhi.n	81054dc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 81054ae:	2b00      	cmp	r3, #0
 81054b0:	d01d      	beq.n	81054ee <HAL_RCCEx_PeriphCLKConfig+0xa86>
 81054b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81054b6:	d111      	bne.n	81054dc <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81054b8:	687b      	ldr	r3, [r7, #4]
 81054ba:	3304      	adds	r3, #4
 81054bc:	2100      	movs	r1, #0
 81054be:	4618      	mov	r0, r3
 81054c0:	f000 fcd6 	bl	8105e70 <RCCEx_PLL2_Config>
 81054c4:	4603      	mov	r3, r0
 81054c6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 81054c8:	e012      	b.n	81054f0 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81054ca:	687b      	ldr	r3, [r7, #4]
 81054cc:	3324      	adds	r3, #36	; 0x24
 81054ce:	2102      	movs	r1, #2
 81054d0:	4618      	mov	r0, r3
 81054d2:	f000 fd7f 	bl	8105fd4 <RCCEx_PLL3_Config>
 81054d6:	4603      	mov	r3, r0
 81054d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 81054da:	e009      	b.n	81054f0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81054dc:	2301      	movs	r3, #1
 81054de:	75fb      	strb	r3, [r7, #23]
      break;
 81054e0:	e006      	b.n	81054f0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 81054e2:	bf00      	nop
 81054e4:	e004      	b.n	81054f0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 81054e6:	bf00      	nop
 81054e8:	e002      	b.n	81054f0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 81054ea:	bf00      	nop
 81054ec:	e000      	b.n	81054f0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 81054ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 81054f0:	7dfb      	ldrb	r3, [r7, #23]
 81054f2:	2b00      	cmp	r3, #0
 81054f4:	d10c      	bne.n	8105510 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 81054f6:	4b05      	ldr	r3, [pc, #20]	; (810550c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81054f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81054fa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 81054fe:	687b      	ldr	r3, [r7, #4]
 8105500:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8105504:	4901      	ldr	r1, [pc, #4]	; (810550c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8105506:	4313      	orrs	r3, r2
 8105508:	658b      	str	r3, [r1, #88]	; 0x58
 810550a:	e003      	b.n	8105514 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 810550c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105510:	7dfb      	ldrb	r3, [r7, #23]
 8105512:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8105514:	687b      	ldr	r3, [r7, #4]
 8105516:	681b      	ldr	r3, [r3, #0]
 8105518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810551c:	2b00      	cmp	r3, #0
 810551e:	d04b      	beq.n	81055b8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8105520:	687b      	ldr	r3, [r7, #4]
 8105522:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8105526:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 810552a:	d02e      	beq.n	810558a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 810552c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8105530:	d828      	bhi.n	8105584 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8105532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8105536:	d02a      	beq.n	810558e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8105538:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810553c:	d822      	bhi.n	8105584 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 810553e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8105542:	d026      	beq.n	8105592 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8105544:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8105548:	d81c      	bhi.n	8105584 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 810554a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810554e:	d010      	beq.n	8105572 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8105550:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105554:	d816      	bhi.n	8105584 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8105556:	2b00      	cmp	r3, #0
 8105558:	d01d      	beq.n	8105596 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 810555a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810555e:	d111      	bne.n	8105584 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105560:	687b      	ldr	r3, [r7, #4]
 8105562:	3304      	adds	r3, #4
 8105564:	2100      	movs	r1, #0
 8105566:	4618      	mov	r0, r3
 8105568:	f000 fc82 	bl	8105e70 <RCCEx_PLL2_Config>
 810556c:	4603      	mov	r3, r0
 810556e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8105570:	e012      	b.n	8105598 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8105572:	687b      	ldr	r3, [r7, #4]
 8105574:	3324      	adds	r3, #36	; 0x24
 8105576:	2102      	movs	r1, #2
 8105578:	4618      	mov	r0, r3
 810557a:	f000 fd2b 	bl	8105fd4 <RCCEx_PLL3_Config>
 810557e:	4603      	mov	r3, r0
 8105580:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8105582:	e009      	b.n	8105598 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105584:	2301      	movs	r3, #1
 8105586:	75fb      	strb	r3, [r7, #23]
      break;
 8105588:	e006      	b.n	8105598 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810558a:	bf00      	nop
 810558c:	e004      	b.n	8105598 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810558e:	bf00      	nop
 8105590:	e002      	b.n	8105598 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8105592:	bf00      	nop
 8105594:	e000      	b.n	8105598 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8105596:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105598:	7dfb      	ldrb	r3, [r7, #23]
 810559a:	2b00      	cmp	r3, #0
 810559c:	d10a      	bne.n	81055b4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810559e:	4b9d      	ldr	r3, [pc, #628]	; (8105814 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81055a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81055a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 81055a6:	687b      	ldr	r3, [r7, #4]
 81055a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81055ac:	4999      	ldr	r1, [pc, #612]	; (8105814 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81055ae:	4313      	orrs	r3, r2
 81055b0:	658b      	str	r3, [r1, #88]	; 0x58
 81055b2:	e001      	b.n	81055b8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81055b4:	7dfb      	ldrb	r3, [r7, #23]
 81055b6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 81055b8:	687b      	ldr	r3, [r7, #4]
 81055ba:	681b      	ldr	r3, [r3, #0]
 81055bc:	f003 0308 	and.w	r3, r3, #8
 81055c0:	2b00      	cmp	r3, #0
 81055c2:	d01a      	beq.n	81055fa <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 81055c4:	687b      	ldr	r3, [r7, #4]
 81055c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81055ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81055ce:	d10a      	bne.n	81055e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 81055d0:	687b      	ldr	r3, [r7, #4]
 81055d2:	3324      	adds	r3, #36	; 0x24
 81055d4:	2102      	movs	r1, #2
 81055d6:	4618      	mov	r0, r3
 81055d8:	f000 fcfc 	bl	8105fd4 <RCCEx_PLL3_Config>
 81055dc:	4603      	mov	r3, r0
 81055de:	2b00      	cmp	r3, #0
 81055e0:	d001      	beq.n	81055e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 81055e2:	2301      	movs	r3, #1
 81055e4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81055e6:	4b8b      	ldr	r3, [pc, #556]	; (8105814 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81055e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81055ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 81055ee:	687b      	ldr	r3, [r7, #4]
 81055f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81055f4:	4987      	ldr	r1, [pc, #540]	; (8105814 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81055f6:	4313      	orrs	r3, r2
 81055f8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81055fa:	687b      	ldr	r3, [r7, #4]
 81055fc:	681b      	ldr	r3, [r3, #0]
 81055fe:	f003 0310 	and.w	r3, r3, #16
 8105602:	2b00      	cmp	r3, #0
 8105604:	d01a      	beq.n	810563c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8105606:	687b      	ldr	r3, [r7, #4]
 8105608:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810560c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105610:	d10a      	bne.n	8105628 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8105612:	687b      	ldr	r3, [r7, #4]
 8105614:	3324      	adds	r3, #36	; 0x24
 8105616:	2102      	movs	r1, #2
 8105618:	4618      	mov	r0, r3
 810561a:	f000 fcdb 	bl	8105fd4 <RCCEx_PLL3_Config>
 810561e:	4603      	mov	r3, r0
 8105620:	2b00      	cmp	r3, #0
 8105622:	d001      	beq.n	8105628 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8105624:	2301      	movs	r3, #1
 8105626:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8105628:	4b7a      	ldr	r3, [pc, #488]	; (8105814 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810562a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810562c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8105630:	687b      	ldr	r3, [r7, #4]
 8105632:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8105636:	4977      	ldr	r1, [pc, #476]	; (8105814 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105638:	4313      	orrs	r3, r2
 810563a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 810563c:	687b      	ldr	r3, [r7, #4]
 810563e:	681b      	ldr	r3, [r3, #0]
 8105640:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8105644:	2b00      	cmp	r3, #0
 8105646:	d034      	beq.n	81056b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8105648:	687b      	ldr	r3, [r7, #4]
 810564a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810564e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105652:	d01d      	beq.n	8105690 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8105654:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105658:	d817      	bhi.n	810568a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 810565a:	2b00      	cmp	r3, #0
 810565c:	d003      	beq.n	8105666 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 810565e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105662:	d009      	beq.n	8105678 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8105664:	e011      	b.n	810568a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105666:	687b      	ldr	r3, [r7, #4]
 8105668:	3304      	adds	r3, #4
 810566a:	2100      	movs	r1, #0
 810566c:	4618      	mov	r0, r3
 810566e:	f000 fbff 	bl	8105e70 <RCCEx_PLL2_Config>
 8105672:	4603      	mov	r3, r0
 8105674:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8105676:	e00c      	b.n	8105692 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8105678:	687b      	ldr	r3, [r7, #4]
 810567a:	3324      	adds	r3, #36	; 0x24
 810567c:	2102      	movs	r1, #2
 810567e:	4618      	mov	r0, r3
 8105680:	f000 fca8 	bl	8105fd4 <RCCEx_PLL3_Config>
 8105684:	4603      	mov	r3, r0
 8105686:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8105688:	e003      	b.n	8105692 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810568a:	2301      	movs	r3, #1
 810568c:	75fb      	strb	r3, [r7, #23]
      break;
 810568e:	e000      	b.n	8105692 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8105690:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105692:	7dfb      	ldrb	r3, [r7, #23]
 8105694:	2b00      	cmp	r3, #0
 8105696:	d10a      	bne.n	81056ae <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8105698:	4b5e      	ldr	r3, [pc, #376]	; (8105814 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810569a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810569c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 81056a0:	687b      	ldr	r3, [r7, #4]
 81056a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81056a6:	495b      	ldr	r1, [pc, #364]	; (8105814 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81056a8:	4313      	orrs	r3, r2
 81056aa:	658b      	str	r3, [r1, #88]	; 0x58
 81056ac:	e001      	b.n	81056b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81056ae:	7dfb      	ldrb	r3, [r7, #23]
 81056b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 81056b2:	687b      	ldr	r3, [r7, #4]
 81056b4:	681b      	ldr	r3, [r3, #0]
 81056b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81056ba:	2b00      	cmp	r3, #0
 81056bc:	d033      	beq.n	8105726 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 81056be:	687b      	ldr	r3, [r7, #4]
 81056c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81056c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81056c8:	d01c      	beq.n	8105704 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 81056ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81056ce:	d816      	bhi.n	81056fe <HAL_RCCEx_PeriphCLKConfig+0xc96>
 81056d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81056d4:	d003      	beq.n	81056de <HAL_RCCEx_PeriphCLKConfig+0xc76>
 81056d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81056da:	d007      	beq.n	81056ec <HAL_RCCEx_PeriphCLKConfig+0xc84>
 81056dc:	e00f      	b.n	81056fe <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81056de:	4b4d      	ldr	r3, [pc, #308]	; (8105814 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81056e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81056e2:	4a4c      	ldr	r2, [pc, #304]	; (8105814 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81056e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81056e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 81056ea:	e00c      	b.n	8105706 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81056ec:	687b      	ldr	r3, [r7, #4]
 81056ee:	3324      	adds	r3, #36	; 0x24
 81056f0:	2101      	movs	r1, #1
 81056f2:	4618      	mov	r0, r3
 81056f4:	f000 fc6e 	bl	8105fd4 <RCCEx_PLL3_Config>
 81056f8:	4603      	mov	r3, r0
 81056fa:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 81056fc:	e003      	b.n	8105706 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81056fe:	2301      	movs	r3, #1
 8105700:	75fb      	strb	r3, [r7, #23]
      break;
 8105702:	e000      	b.n	8105706 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8105704:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105706:	7dfb      	ldrb	r3, [r7, #23]
 8105708:	2b00      	cmp	r3, #0
 810570a:	d10a      	bne.n	8105722 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 810570c:	4b41      	ldr	r3, [pc, #260]	; (8105814 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810570e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105710:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8105714:	687b      	ldr	r3, [r7, #4]
 8105716:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810571a:	493e      	ldr	r1, [pc, #248]	; (8105814 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810571c:	4313      	orrs	r3, r2
 810571e:	654b      	str	r3, [r1, #84]	; 0x54
 8105720:	e001      	b.n	8105726 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105722:	7dfb      	ldrb	r3, [r7, #23]
 8105724:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8105726:	687b      	ldr	r3, [r7, #4]
 8105728:	681b      	ldr	r3, [r3, #0]
 810572a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810572e:	2b00      	cmp	r3, #0
 8105730:	d029      	beq.n	8105786 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8105732:	687b      	ldr	r3, [r7, #4]
 8105734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105736:	2b00      	cmp	r3, #0
 8105738:	d003      	beq.n	8105742 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 810573a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810573e:	d007      	beq.n	8105750 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8105740:	e00f      	b.n	8105762 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105742:	4b34      	ldr	r3, [pc, #208]	; (8105814 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105746:	4a33      	ldr	r2, [pc, #204]	; (8105814 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810574c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 810574e:	e00b      	b.n	8105768 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8105750:	687b      	ldr	r3, [r7, #4]
 8105752:	3304      	adds	r3, #4
 8105754:	2102      	movs	r1, #2
 8105756:	4618      	mov	r0, r3
 8105758:	f000 fb8a 	bl	8105e70 <RCCEx_PLL2_Config>
 810575c:	4603      	mov	r3, r0
 810575e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8105760:	e002      	b.n	8105768 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8105762:	2301      	movs	r3, #1
 8105764:	75fb      	strb	r3, [r7, #23]
      break;
 8105766:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105768:	7dfb      	ldrb	r3, [r7, #23]
 810576a:	2b00      	cmp	r3, #0
 810576c:	d109      	bne.n	8105782 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810576e:	4b29      	ldr	r3, [pc, #164]	; (8105814 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105772:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8105776:	687b      	ldr	r3, [r7, #4]
 8105778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810577a:	4926      	ldr	r1, [pc, #152]	; (8105814 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810577c:	4313      	orrs	r3, r2
 810577e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8105780:	e001      	b.n	8105786 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105782:	7dfb      	ldrb	r3, [r7, #23]
 8105784:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8105786:	687b      	ldr	r3, [r7, #4]
 8105788:	681b      	ldr	r3, [r3, #0]
 810578a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810578e:	2b00      	cmp	r3, #0
 8105790:	d00a      	beq.n	81057a8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8105792:	687b      	ldr	r3, [r7, #4]
 8105794:	3324      	adds	r3, #36	; 0x24
 8105796:	2102      	movs	r1, #2
 8105798:	4618      	mov	r0, r3
 810579a:	f000 fc1b 	bl	8105fd4 <RCCEx_PLL3_Config>
 810579e:	4603      	mov	r3, r0
 81057a0:	2b00      	cmp	r3, #0
 81057a2:	d001      	beq.n	81057a8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 81057a4:	2301      	movs	r3, #1
 81057a6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 81057a8:	687b      	ldr	r3, [r7, #4]
 81057aa:	681b      	ldr	r3, [r3, #0]
 81057ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81057b0:	2b00      	cmp	r3, #0
 81057b2:	d033      	beq.n	810581c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 81057b4:	687b      	ldr	r3, [r7, #4]
 81057b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81057b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81057bc:	d017      	beq.n	81057ee <HAL_RCCEx_PeriphCLKConfig+0xd86>
 81057be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81057c2:	d811      	bhi.n	81057e8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 81057c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81057c8:	d013      	beq.n	81057f2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 81057ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81057ce:	d80b      	bhi.n	81057e8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 81057d0:	2b00      	cmp	r3, #0
 81057d2:	d010      	beq.n	81057f6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 81057d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81057d8:	d106      	bne.n	81057e8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81057da:	4b0e      	ldr	r3, [pc, #56]	; (8105814 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81057dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81057de:	4a0d      	ldr	r2, [pc, #52]	; (8105814 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81057e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81057e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 81057e6:	e007      	b.n	81057f8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81057e8:	2301      	movs	r3, #1
 81057ea:	75fb      	strb	r3, [r7, #23]
      break;
 81057ec:	e004      	b.n	81057f8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 81057ee:	bf00      	nop
 81057f0:	e002      	b.n	81057f8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 81057f2:	bf00      	nop
 81057f4:	e000      	b.n	81057f8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 81057f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81057f8:	7dfb      	ldrb	r3, [r7, #23]
 81057fa:	2b00      	cmp	r3, #0
 81057fc:	d10c      	bne.n	8105818 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81057fe:	4b05      	ldr	r3, [pc, #20]	; (8105814 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105802:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8105806:	687b      	ldr	r3, [r7, #4]
 8105808:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810580a:	4902      	ldr	r1, [pc, #8]	; (8105814 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810580c:	4313      	orrs	r3, r2
 810580e:	654b      	str	r3, [r1, #84]	; 0x54
 8105810:	e004      	b.n	810581c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8105812:	bf00      	nop
 8105814:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105818:	7dfb      	ldrb	r3, [r7, #23]
 810581a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 810581c:	687b      	ldr	r3, [r7, #4]
 810581e:	681b      	ldr	r3, [r3, #0]
 8105820:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8105824:	2b00      	cmp	r3, #0
 8105826:	d008      	beq.n	810583a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8105828:	4b31      	ldr	r3, [pc, #196]	; (81058f0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810582a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810582c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8105830:	687b      	ldr	r3, [r7, #4]
 8105832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105834:	492e      	ldr	r1, [pc, #184]	; (81058f0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105836:	4313      	orrs	r3, r2
 8105838:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 810583a:	687b      	ldr	r3, [r7, #4]
 810583c:	681b      	ldr	r3, [r3, #0]
 810583e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8105842:	2b00      	cmp	r3, #0
 8105844:	d009      	beq.n	810585a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8105846:	4b2a      	ldr	r3, [pc, #168]	; (81058f0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105848:	691b      	ldr	r3, [r3, #16]
 810584a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 810584e:	687b      	ldr	r3, [r7, #4]
 8105850:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8105854:	4926      	ldr	r1, [pc, #152]	; (81058f0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105856:	4313      	orrs	r3, r2
 8105858:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 810585a:	687b      	ldr	r3, [r7, #4]
 810585c:	681b      	ldr	r3, [r3, #0]
 810585e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8105862:	2b00      	cmp	r3, #0
 8105864:	d008      	beq.n	8105878 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8105866:	4b22      	ldr	r3, [pc, #136]	; (81058f0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810586a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 810586e:	687b      	ldr	r3, [r7, #4]
 8105870:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8105872:	491f      	ldr	r1, [pc, #124]	; (81058f0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105874:	4313      	orrs	r3, r2
 8105876:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8105878:	687b      	ldr	r3, [r7, #4]
 810587a:	681b      	ldr	r3, [r3, #0]
 810587c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8105880:	2b00      	cmp	r3, #0
 8105882:	d00d      	beq.n	81058a0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8105884:	4b1a      	ldr	r3, [pc, #104]	; (81058f0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105886:	691b      	ldr	r3, [r3, #16]
 8105888:	4a19      	ldr	r2, [pc, #100]	; (81058f0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810588a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 810588e:	6113      	str	r3, [r2, #16]
 8105890:	4b17      	ldr	r3, [pc, #92]	; (81058f0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105892:	691a      	ldr	r2, [r3, #16]
 8105894:	687b      	ldr	r3, [r7, #4]
 8105896:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 810589a:	4915      	ldr	r1, [pc, #84]	; (81058f0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810589c:	4313      	orrs	r3, r2
 810589e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 81058a0:	687b      	ldr	r3, [r7, #4]
 81058a2:	681b      	ldr	r3, [r3, #0]
 81058a4:	2b00      	cmp	r3, #0
 81058a6:	da08      	bge.n	81058ba <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 81058a8:	4b11      	ldr	r3, [pc, #68]	; (81058f0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81058aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81058ac:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 81058b0:	687b      	ldr	r3, [r7, #4]
 81058b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81058b4:	490e      	ldr	r1, [pc, #56]	; (81058f0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81058b6:	4313      	orrs	r3, r2
 81058b8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 81058ba:	687b      	ldr	r3, [r7, #4]
 81058bc:	681b      	ldr	r3, [r3, #0]
 81058be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 81058c2:	2b00      	cmp	r3, #0
 81058c4:	d009      	beq.n	81058da <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 81058c6:	4b0a      	ldr	r3, [pc, #40]	; (81058f0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81058c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81058ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 81058ce:	687b      	ldr	r3, [r7, #4]
 81058d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81058d4:	4906      	ldr	r1, [pc, #24]	; (81058f0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81058d6:	4313      	orrs	r3, r2
 81058d8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 81058da:	7dbb      	ldrb	r3, [r7, #22]
 81058dc:	2b00      	cmp	r3, #0
 81058de:	d101      	bne.n	81058e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 81058e0:	2300      	movs	r3, #0
 81058e2:	e000      	b.n	81058e6 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 81058e4:	2301      	movs	r3, #1
}
 81058e6:	4618      	mov	r0, r3
 81058e8:	3718      	adds	r7, #24
 81058ea:	46bd      	mov	sp, r7
 81058ec:	bd80      	pop	{r7, pc}
 81058ee:	bf00      	nop
 81058f0:	58024400 	.word	0x58024400

081058f4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 81058f4:	b580      	push	{r7, lr}
 81058f6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 81058f8:	f7ff f858 	bl	81049ac <HAL_RCC_GetHCLKFreq>
 81058fc:	4602      	mov	r2, r0
 81058fe:	4b06      	ldr	r3, [pc, #24]	; (8105918 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8105900:	6a1b      	ldr	r3, [r3, #32]
 8105902:	091b      	lsrs	r3, r3, #4
 8105904:	f003 0307 	and.w	r3, r3, #7
 8105908:	4904      	ldr	r1, [pc, #16]	; (810591c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810590a:	5ccb      	ldrb	r3, [r1, r3]
 810590c:	f003 031f 	and.w	r3, r3, #31
 8105910:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8105914:	4618      	mov	r0, r3
 8105916:	bd80      	pop	{r7, pc}
 8105918:	58024400 	.word	0x58024400
 810591c:	081097fc 	.word	0x081097fc

08105920 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8105920:	b480      	push	{r7}
 8105922:	b089      	sub	sp, #36	; 0x24
 8105924:	af00      	add	r7, sp, #0
 8105926:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105928:	4ba1      	ldr	r3, [pc, #644]	; (8105bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810592a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810592c:	f003 0303 	and.w	r3, r3, #3
 8105930:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8105932:	4b9f      	ldr	r3, [pc, #636]	; (8105bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105936:	0b1b      	lsrs	r3, r3, #12
 8105938:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810593c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810593e:	4b9c      	ldr	r3, [pc, #624]	; (8105bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105942:	091b      	lsrs	r3, r3, #4
 8105944:	f003 0301 	and.w	r3, r3, #1
 8105948:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 810594a:	4b99      	ldr	r3, [pc, #612]	; (8105bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810594c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810594e:	08db      	lsrs	r3, r3, #3
 8105950:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105954:	693a      	ldr	r2, [r7, #16]
 8105956:	fb02 f303 	mul.w	r3, r2, r3
 810595a:	ee07 3a90 	vmov	s15, r3
 810595e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105962:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8105966:	697b      	ldr	r3, [r7, #20]
 8105968:	2b00      	cmp	r3, #0
 810596a:	f000 8111 	beq.w	8105b90 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 810596e:	69bb      	ldr	r3, [r7, #24]
 8105970:	2b02      	cmp	r3, #2
 8105972:	f000 8083 	beq.w	8105a7c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8105976:	69bb      	ldr	r3, [r7, #24]
 8105978:	2b02      	cmp	r3, #2
 810597a:	f200 80a1 	bhi.w	8105ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 810597e:	69bb      	ldr	r3, [r7, #24]
 8105980:	2b00      	cmp	r3, #0
 8105982:	d003      	beq.n	810598c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8105984:	69bb      	ldr	r3, [r7, #24]
 8105986:	2b01      	cmp	r3, #1
 8105988:	d056      	beq.n	8105a38 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 810598a:	e099      	b.n	8105ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810598c:	4b88      	ldr	r3, [pc, #544]	; (8105bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810598e:	681b      	ldr	r3, [r3, #0]
 8105990:	f003 0320 	and.w	r3, r3, #32
 8105994:	2b00      	cmp	r3, #0
 8105996:	d02d      	beq.n	81059f4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105998:	4b85      	ldr	r3, [pc, #532]	; (8105bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810599a:	681b      	ldr	r3, [r3, #0]
 810599c:	08db      	lsrs	r3, r3, #3
 810599e:	f003 0303 	and.w	r3, r3, #3
 81059a2:	4a84      	ldr	r2, [pc, #528]	; (8105bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 81059a4:	fa22 f303 	lsr.w	r3, r2, r3
 81059a8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81059aa:	68bb      	ldr	r3, [r7, #8]
 81059ac:	ee07 3a90 	vmov	s15, r3
 81059b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81059b4:	697b      	ldr	r3, [r7, #20]
 81059b6:	ee07 3a90 	vmov	s15, r3
 81059ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81059be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81059c2:	4b7b      	ldr	r3, [pc, #492]	; (8105bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81059c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81059c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81059ca:	ee07 3a90 	vmov	s15, r3
 81059ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81059d2:	ed97 6a03 	vldr	s12, [r7, #12]
 81059d6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8105bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81059da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81059de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81059e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81059e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81059ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 81059ee:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81059f2:	e087      	b.n	8105b04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81059f4:	697b      	ldr	r3, [r7, #20]
 81059f6:	ee07 3a90 	vmov	s15, r3
 81059fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81059fe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8105bbc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8105a02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105a06:	4b6a      	ldr	r3, [pc, #424]	; (8105bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105a0e:	ee07 3a90 	vmov	s15, r3
 8105a12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105a16:	ed97 6a03 	vldr	s12, [r7, #12]
 8105a1a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8105bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105a1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105a22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105a26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105a2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105a32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105a36:	e065      	b.n	8105b04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8105a38:	697b      	ldr	r3, [r7, #20]
 8105a3a:	ee07 3a90 	vmov	s15, r3
 8105a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105a42:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8105bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8105a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105a4a:	4b59      	ldr	r3, [pc, #356]	; (8105bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105a52:	ee07 3a90 	vmov	s15, r3
 8105a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105a5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8105a5e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8105bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105a6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105a76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105a7a:	e043      	b.n	8105b04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8105a7c:	697b      	ldr	r3, [r7, #20]
 8105a7e:	ee07 3a90 	vmov	s15, r3
 8105a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105a86:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8105bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8105a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105a8e:	4b48      	ldr	r3, [pc, #288]	; (8105bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105a96:	ee07 3a90 	vmov	s15, r3
 8105a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105a9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8105aa2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8105bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105aae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105aba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105abe:	e021      	b.n	8105b04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8105ac0:	697b      	ldr	r3, [r7, #20]
 8105ac2:	ee07 3a90 	vmov	s15, r3
 8105ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105aca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8105bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8105ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105ad2:	4b37      	ldr	r3, [pc, #220]	; (8105bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105ada:	ee07 3a90 	vmov	s15, r3
 8105ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105ae2:	ed97 6a03 	vldr	s12, [r7, #12]
 8105ae6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8105bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105af2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105afe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105b02:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8105b04:	4b2a      	ldr	r3, [pc, #168]	; (8105bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105b08:	0a5b      	lsrs	r3, r3, #9
 8105b0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105b0e:	ee07 3a90 	vmov	s15, r3
 8105b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105b16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105b1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105b1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8105b22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105b26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105b2a:	ee17 2a90 	vmov	r2, s15
 8105b2e:	687b      	ldr	r3, [r7, #4]
 8105b30:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8105b32:	4b1f      	ldr	r3, [pc, #124]	; (8105bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105b36:	0c1b      	lsrs	r3, r3, #16
 8105b38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105b3c:	ee07 3a90 	vmov	s15, r3
 8105b40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105b44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105b48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105b4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8105b50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105b54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105b58:	ee17 2a90 	vmov	r2, s15
 8105b5c:	687b      	ldr	r3, [r7, #4]
 8105b5e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8105b60:	4b13      	ldr	r3, [pc, #76]	; (8105bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105b64:	0e1b      	lsrs	r3, r3, #24
 8105b66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105b6a:	ee07 3a90 	vmov	s15, r3
 8105b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105b72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105b76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105b7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8105b7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105b82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105b86:	ee17 2a90 	vmov	r2, s15
 8105b8a:	687b      	ldr	r3, [r7, #4]
 8105b8c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8105b8e:	e008      	b.n	8105ba2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8105b90:	687b      	ldr	r3, [r7, #4]
 8105b92:	2200      	movs	r2, #0
 8105b94:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8105b96:	687b      	ldr	r3, [r7, #4]
 8105b98:	2200      	movs	r2, #0
 8105b9a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8105b9c:	687b      	ldr	r3, [r7, #4]
 8105b9e:	2200      	movs	r2, #0
 8105ba0:	609a      	str	r2, [r3, #8]
}
 8105ba2:	bf00      	nop
 8105ba4:	3724      	adds	r7, #36	; 0x24
 8105ba6:	46bd      	mov	sp, r7
 8105ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105bac:	4770      	bx	lr
 8105bae:	bf00      	nop
 8105bb0:	58024400 	.word	0x58024400
 8105bb4:	03d09000 	.word	0x03d09000
 8105bb8:	46000000 	.word	0x46000000
 8105bbc:	4c742400 	.word	0x4c742400
 8105bc0:	4a742400 	.word	0x4a742400
 8105bc4:	4af42400 	.word	0x4af42400

08105bc8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8105bc8:	b480      	push	{r7}
 8105bca:	b089      	sub	sp, #36	; 0x24
 8105bcc:	af00      	add	r7, sp, #0
 8105bce:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105bd0:	4ba1      	ldr	r3, [pc, #644]	; (8105e58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105bd4:	f003 0303 	and.w	r3, r3, #3
 8105bd8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8105bda:	4b9f      	ldr	r3, [pc, #636]	; (8105e58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105bde:	0d1b      	lsrs	r3, r3, #20
 8105be0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8105be4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8105be6:	4b9c      	ldr	r3, [pc, #624]	; (8105e58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105bea:	0a1b      	lsrs	r3, r3, #8
 8105bec:	f003 0301 	and.w	r3, r3, #1
 8105bf0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8105bf2:	4b99      	ldr	r3, [pc, #612]	; (8105e58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105bf6:	08db      	lsrs	r3, r3, #3
 8105bf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105bfc:	693a      	ldr	r2, [r7, #16]
 8105bfe:	fb02 f303 	mul.w	r3, r2, r3
 8105c02:	ee07 3a90 	vmov	s15, r3
 8105c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105c0a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8105c0e:	697b      	ldr	r3, [r7, #20]
 8105c10:	2b00      	cmp	r3, #0
 8105c12:	f000 8111 	beq.w	8105e38 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8105c16:	69bb      	ldr	r3, [r7, #24]
 8105c18:	2b02      	cmp	r3, #2
 8105c1a:	f000 8083 	beq.w	8105d24 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8105c1e:	69bb      	ldr	r3, [r7, #24]
 8105c20:	2b02      	cmp	r3, #2
 8105c22:	f200 80a1 	bhi.w	8105d68 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8105c26:	69bb      	ldr	r3, [r7, #24]
 8105c28:	2b00      	cmp	r3, #0
 8105c2a:	d003      	beq.n	8105c34 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8105c2c:	69bb      	ldr	r3, [r7, #24]
 8105c2e:	2b01      	cmp	r3, #1
 8105c30:	d056      	beq.n	8105ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8105c32:	e099      	b.n	8105d68 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105c34:	4b88      	ldr	r3, [pc, #544]	; (8105e58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105c36:	681b      	ldr	r3, [r3, #0]
 8105c38:	f003 0320 	and.w	r3, r3, #32
 8105c3c:	2b00      	cmp	r3, #0
 8105c3e:	d02d      	beq.n	8105c9c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105c40:	4b85      	ldr	r3, [pc, #532]	; (8105e58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105c42:	681b      	ldr	r3, [r3, #0]
 8105c44:	08db      	lsrs	r3, r3, #3
 8105c46:	f003 0303 	and.w	r3, r3, #3
 8105c4a:	4a84      	ldr	r2, [pc, #528]	; (8105e5c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8105c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8105c50:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8105c52:	68bb      	ldr	r3, [r7, #8]
 8105c54:	ee07 3a90 	vmov	s15, r3
 8105c58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105c5c:	697b      	ldr	r3, [r7, #20]
 8105c5e:	ee07 3a90 	vmov	s15, r3
 8105c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105c66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105c6a:	4b7b      	ldr	r3, [pc, #492]	; (8105e58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105c72:	ee07 3a90 	vmov	s15, r3
 8105c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105c7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8105c7e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8105e60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105c82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105c86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105c8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105c8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105c96:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8105c9a:	e087      	b.n	8105dac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8105c9c:	697b      	ldr	r3, [r7, #20]
 8105c9e:	ee07 3a90 	vmov	s15, r3
 8105ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105ca6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8105e64 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8105caa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105cae:	4b6a      	ldr	r3, [pc, #424]	; (8105e58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105cb6:	ee07 3a90 	vmov	s15, r3
 8105cba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105cbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8105cc2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8105e60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105cc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105cca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105cce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105cd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105cda:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105cde:	e065      	b.n	8105dac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8105ce0:	697b      	ldr	r3, [r7, #20]
 8105ce2:	ee07 3a90 	vmov	s15, r3
 8105ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105cea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8105e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8105cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105cf2:	4b59      	ldr	r3, [pc, #356]	; (8105e58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105cfa:	ee07 3a90 	vmov	s15, r3
 8105cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105d02:	ed97 6a03 	vldr	s12, [r7, #12]
 8105d06:	eddf 5a56 	vldr	s11, [pc, #344]	; 8105e60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105d12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105d1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105d22:	e043      	b.n	8105dac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8105d24:	697b      	ldr	r3, [r7, #20]
 8105d26:	ee07 3a90 	vmov	s15, r3
 8105d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105d2e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8105e6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8105d32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105d36:	4b48      	ldr	r3, [pc, #288]	; (8105e58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105d3e:	ee07 3a90 	vmov	s15, r3
 8105d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105d46:	ed97 6a03 	vldr	s12, [r7, #12]
 8105d4a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8105e60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105d4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105d52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105d56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105d62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105d66:	e021      	b.n	8105dac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8105d68:	697b      	ldr	r3, [r7, #20]
 8105d6a:	ee07 3a90 	vmov	s15, r3
 8105d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105d72:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8105e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8105d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105d7a:	4b37      	ldr	r3, [pc, #220]	; (8105e58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105d82:	ee07 3a90 	vmov	s15, r3
 8105d86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105d8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8105d8e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8105e60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105d92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105d96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105d9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105d9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105da6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105daa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8105dac:	4b2a      	ldr	r3, [pc, #168]	; (8105e58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105db0:	0a5b      	lsrs	r3, r3, #9
 8105db2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105db6:	ee07 3a90 	vmov	s15, r3
 8105dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105dbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105dc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105dc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8105dca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105dce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105dd2:	ee17 2a90 	vmov	r2, s15
 8105dd6:	687b      	ldr	r3, [r7, #4]
 8105dd8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8105dda:	4b1f      	ldr	r3, [pc, #124]	; (8105e58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105dde:	0c1b      	lsrs	r3, r3, #16
 8105de0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105de4:	ee07 3a90 	vmov	s15, r3
 8105de8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105dec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105df0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105df4:	edd7 6a07 	vldr	s13, [r7, #28]
 8105df8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105dfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105e00:	ee17 2a90 	vmov	r2, s15
 8105e04:	687b      	ldr	r3, [r7, #4]
 8105e06:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8105e08:	4b13      	ldr	r3, [pc, #76]	; (8105e58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105e0c:	0e1b      	lsrs	r3, r3, #24
 8105e0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105e12:	ee07 3a90 	vmov	s15, r3
 8105e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105e1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105e1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105e22:	edd7 6a07 	vldr	s13, [r7, #28]
 8105e26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105e2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105e2e:	ee17 2a90 	vmov	r2, s15
 8105e32:	687b      	ldr	r3, [r7, #4]
 8105e34:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8105e36:	e008      	b.n	8105e4a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8105e38:	687b      	ldr	r3, [r7, #4]
 8105e3a:	2200      	movs	r2, #0
 8105e3c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8105e3e:	687b      	ldr	r3, [r7, #4]
 8105e40:	2200      	movs	r2, #0
 8105e42:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8105e44:	687b      	ldr	r3, [r7, #4]
 8105e46:	2200      	movs	r2, #0
 8105e48:	609a      	str	r2, [r3, #8]
}
 8105e4a:	bf00      	nop
 8105e4c:	3724      	adds	r7, #36	; 0x24
 8105e4e:	46bd      	mov	sp, r7
 8105e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105e54:	4770      	bx	lr
 8105e56:	bf00      	nop
 8105e58:	58024400 	.word	0x58024400
 8105e5c:	03d09000 	.word	0x03d09000
 8105e60:	46000000 	.word	0x46000000
 8105e64:	4c742400 	.word	0x4c742400
 8105e68:	4a742400 	.word	0x4a742400
 8105e6c:	4af42400 	.word	0x4af42400

08105e70 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8105e70:	b580      	push	{r7, lr}
 8105e72:	b084      	sub	sp, #16
 8105e74:	af00      	add	r7, sp, #0
 8105e76:	6078      	str	r0, [r7, #4]
 8105e78:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8105e7a:	2300      	movs	r3, #0
 8105e7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8105e7e:	4b54      	ldr	r3, [pc, #336]	; (8105fd0 <RCCEx_PLL2_Config+0x160>)
 8105e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105e82:	f003 0303 	and.w	r3, r3, #3
 8105e86:	2b03      	cmp	r3, #3
 8105e88:	d101      	bne.n	8105e8e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8105e8a:	2301      	movs	r3, #1
 8105e8c:	e09b      	b.n	8105fc6 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8105e8e:	4b50      	ldr	r3, [pc, #320]	; (8105fd0 <RCCEx_PLL2_Config+0x160>)
 8105e90:	681b      	ldr	r3, [r3, #0]
 8105e92:	4a4f      	ldr	r2, [pc, #316]	; (8105fd0 <RCCEx_PLL2_Config+0x160>)
 8105e94:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8105e98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105e9a:	f7fb fe95 	bl	8101bc8 <HAL_GetTick>
 8105e9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8105ea0:	e008      	b.n	8105eb4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8105ea2:	f7fb fe91 	bl	8101bc8 <HAL_GetTick>
 8105ea6:	4602      	mov	r2, r0
 8105ea8:	68bb      	ldr	r3, [r7, #8]
 8105eaa:	1ad3      	subs	r3, r2, r3
 8105eac:	2b02      	cmp	r3, #2
 8105eae:	d901      	bls.n	8105eb4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8105eb0:	2303      	movs	r3, #3
 8105eb2:	e088      	b.n	8105fc6 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8105eb4:	4b46      	ldr	r3, [pc, #280]	; (8105fd0 <RCCEx_PLL2_Config+0x160>)
 8105eb6:	681b      	ldr	r3, [r3, #0]
 8105eb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105ebc:	2b00      	cmp	r3, #0
 8105ebe:	d1f0      	bne.n	8105ea2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8105ec0:	4b43      	ldr	r3, [pc, #268]	; (8105fd0 <RCCEx_PLL2_Config+0x160>)
 8105ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105ec4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8105ec8:	687b      	ldr	r3, [r7, #4]
 8105eca:	681b      	ldr	r3, [r3, #0]
 8105ecc:	031b      	lsls	r3, r3, #12
 8105ece:	4940      	ldr	r1, [pc, #256]	; (8105fd0 <RCCEx_PLL2_Config+0x160>)
 8105ed0:	4313      	orrs	r3, r2
 8105ed2:	628b      	str	r3, [r1, #40]	; 0x28
 8105ed4:	687b      	ldr	r3, [r7, #4]
 8105ed6:	685b      	ldr	r3, [r3, #4]
 8105ed8:	3b01      	subs	r3, #1
 8105eda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8105ede:	687b      	ldr	r3, [r7, #4]
 8105ee0:	689b      	ldr	r3, [r3, #8]
 8105ee2:	3b01      	subs	r3, #1
 8105ee4:	025b      	lsls	r3, r3, #9
 8105ee6:	b29b      	uxth	r3, r3
 8105ee8:	431a      	orrs	r2, r3
 8105eea:	687b      	ldr	r3, [r7, #4]
 8105eec:	68db      	ldr	r3, [r3, #12]
 8105eee:	3b01      	subs	r3, #1
 8105ef0:	041b      	lsls	r3, r3, #16
 8105ef2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8105ef6:	431a      	orrs	r2, r3
 8105ef8:	687b      	ldr	r3, [r7, #4]
 8105efa:	691b      	ldr	r3, [r3, #16]
 8105efc:	3b01      	subs	r3, #1
 8105efe:	061b      	lsls	r3, r3, #24
 8105f00:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8105f04:	4932      	ldr	r1, [pc, #200]	; (8105fd0 <RCCEx_PLL2_Config+0x160>)
 8105f06:	4313      	orrs	r3, r2
 8105f08:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8105f0a:	4b31      	ldr	r3, [pc, #196]	; (8105fd0 <RCCEx_PLL2_Config+0x160>)
 8105f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105f0e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8105f12:	687b      	ldr	r3, [r7, #4]
 8105f14:	695b      	ldr	r3, [r3, #20]
 8105f16:	492e      	ldr	r1, [pc, #184]	; (8105fd0 <RCCEx_PLL2_Config+0x160>)
 8105f18:	4313      	orrs	r3, r2
 8105f1a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8105f1c:	4b2c      	ldr	r3, [pc, #176]	; (8105fd0 <RCCEx_PLL2_Config+0x160>)
 8105f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105f20:	f023 0220 	bic.w	r2, r3, #32
 8105f24:	687b      	ldr	r3, [r7, #4]
 8105f26:	699b      	ldr	r3, [r3, #24]
 8105f28:	4929      	ldr	r1, [pc, #164]	; (8105fd0 <RCCEx_PLL2_Config+0x160>)
 8105f2a:	4313      	orrs	r3, r2
 8105f2c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8105f2e:	4b28      	ldr	r3, [pc, #160]	; (8105fd0 <RCCEx_PLL2_Config+0x160>)
 8105f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105f32:	4a27      	ldr	r2, [pc, #156]	; (8105fd0 <RCCEx_PLL2_Config+0x160>)
 8105f34:	f023 0310 	bic.w	r3, r3, #16
 8105f38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8105f3a:	4b25      	ldr	r3, [pc, #148]	; (8105fd0 <RCCEx_PLL2_Config+0x160>)
 8105f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105f3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8105f42:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8105f46:	687a      	ldr	r2, [r7, #4]
 8105f48:	69d2      	ldr	r2, [r2, #28]
 8105f4a:	00d2      	lsls	r2, r2, #3
 8105f4c:	4920      	ldr	r1, [pc, #128]	; (8105fd0 <RCCEx_PLL2_Config+0x160>)
 8105f4e:	4313      	orrs	r3, r2
 8105f50:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8105f52:	4b1f      	ldr	r3, [pc, #124]	; (8105fd0 <RCCEx_PLL2_Config+0x160>)
 8105f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105f56:	4a1e      	ldr	r2, [pc, #120]	; (8105fd0 <RCCEx_PLL2_Config+0x160>)
 8105f58:	f043 0310 	orr.w	r3, r3, #16
 8105f5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8105f5e:	683b      	ldr	r3, [r7, #0]
 8105f60:	2b00      	cmp	r3, #0
 8105f62:	d106      	bne.n	8105f72 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8105f64:	4b1a      	ldr	r3, [pc, #104]	; (8105fd0 <RCCEx_PLL2_Config+0x160>)
 8105f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105f68:	4a19      	ldr	r2, [pc, #100]	; (8105fd0 <RCCEx_PLL2_Config+0x160>)
 8105f6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8105f6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105f70:	e00f      	b.n	8105f92 <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8105f72:	683b      	ldr	r3, [r7, #0]
 8105f74:	2b01      	cmp	r3, #1
 8105f76:	d106      	bne.n	8105f86 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8105f78:	4b15      	ldr	r3, [pc, #84]	; (8105fd0 <RCCEx_PLL2_Config+0x160>)
 8105f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105f7c:	4a14      	ldr	r2, [pc, #80]	; (8105fd0 <RCCEx_PLL2_Config+0x160>)
 8105f7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8105f82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105f84:	e005      	b.n	8105f92 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8105f86:	4b12      	ldr	r3, [pc, #72]	; (8105fd0 <RCCEx_PLL2_Config+0x160>)
 8105f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105f8a:	4a11      	ldr	r2, [pc, #68]	; (8105fd0 <RCCEx_PLL2_Config+0x160>)
 8105f8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8105f90:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8105f92:	4b0f      	ldr	r3, [pc, #60]	; (8105fd0 <RCCEx_PLL2_Config+0x160>)
 8105f94:	681b      	ldr	r3, [r3, #0]
 8105f96:	4a0e      	ldr	r2, [pc, #56]	; (8105fd0 <RCCEx_PLL2_Config+0x160>)
 8105f98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8105f9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105f9e:	f7fb fe13 	bl	8101bc8 <HAL_GetTick>
 8105fa2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8105fa4:	e008      	b.n	8105fb8 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8105fa6:	f7fb fe0f 	bl	8101bc8 <HAL_GetTick>
 8105faa:	4602      	mov	r2, r0
 8105fac:	68bb      	ldr	r3, [r7, #8]
 8105fae:	1ad3      	subs	r3, r2, r3
 8105fb0:	2b02      	cmp	r3, #2
 8105fb2:	d901      	bls.n	8105fb8 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8105fb4:	2303      	movs	r3, #3
 8105fb6:	e006      	b.n	8105fc6 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8105fb8:	4b05      	ldr	r3, [pc, #20]	; (8105fd0 <RCCEx_PLL2_Config+0x160>)
 8105fba:	681b      	ldr	r3, [r3, #0]
 8105fbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105fc0:	2b00      	cmp	r3, #0
 8105fc2:	d0f0      	beq.n	8105fa6 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8105fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8105fc6:	4618      	mov	r0, r3
 8105fc8:	3710      	adds	r7, #16
 8105fca:	46bd      	mov	sp, r7
 8105fcc:	bd80      	pop	{r7, pc}
 8105fce:	bf00      	nop
 8105fd0:	58024400 	.word	0x58024400

08105fd4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8105fd4:	b580      	push	{r7, lr}
 8105fd6:	b084      	sub	sp, #16
 8105fd8:	af00      	add	r7, sp, #0
 8105fda:	6078      	str	r0, [r7, #4]
 8105fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8105fde:	2300      	movs	r3, #0
 8105fe0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8105fe2:	4b54      	ldr	r3, [pc, #336]	; (8106134 <RCCEx_PLL3_Config+0x160>)
 8105fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105fe6:	f003 0303 	and.w	r3, r3, #3
 8105fea:	2b03      	cmp	r3, #3
 8105fec:	d101      	bne.n	8105ff2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8105fee:	2301      	movs	r3, #1
 8105ff0:	e09b      	b.n	810612a <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8105ff2:	4b50      	ldr	r3, [pc, #320]	; (8106134 <RCCEx_PLL3_Config+0x160>)
 8105ff4:	681b      	ldr	r3, [r3, #0]
 8105ff6:	4a4f      	ldr	r2, [pc, #316]	; (8106134 <RCCEx_PLL3_Config+0x160>)
 8105ff8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8105ffc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105ffe:	f7fb fde3 	bl	8101bc8 <HAL_GetTick>
 8106002:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8106004:	e008      	b.n	8106018 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8106006:	f7fb fddf 	bl	8101bc8 <HAL_GetTick>
 810600a:	4602      	mov	r2, r0
 810600c:	68bb      	ldr	r3, [r7, #8]
 810600e:	1ad3      	subs	r3, r2, r3
 8106010:	2b02      	cmp	r3, #2
 8106012:	d901      	bls.n	8106018 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8106014:	2303      	movs	r3, #3
 8106016:	e088      	b.n	810612a <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8106018:	4b46      	ldr	r3, [pc, #280]	; (8106134 <RCCEx_PLL3_Config+0x160>)
 810601a:	681b      	ldr	r3, [r3, #0]
 810601c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106020:	2b00      	cmp	r3, #0
 8106022:	d1f0      	bne.n	8106006 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8106024:	4b43      	ldr	r3, [pc, #268]	; (8106134 <RCCEx_PLL3_Config+0x160>)
 8106026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106028:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 810602c:	687b      	ldr	r3, [r7, #4]
 810602e:	681b      	ldr	r3, [r3, #0]
 8106030:	051b      	lsls	r3, r3, #20
 8106032:	4940      	ldr	r1, [pc, #256]	; (8106134 <RCCEx_PLL3_Config+0x160>)
 8106034:	4313      	orrs	r3, r2
 8106036:	628b      	str	r3, [r1, #40]	; 0x28
 8106038:	687b      	ldr	r3, [r7, #4]
 810603a:	685b      	ldr	r3, [r3, #4]
 810603c:	3b01      	subs	r3, #1
 810603e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8106042:	687b      	ldr	r3, [r7, #4]
 8106044:	689b      	ldr	r3, [r3, #8]
 8106046:	3b01      	subs	r3, #1
 8106048:	025b      	lsls	r3, r3, #9
 810604a:	b29b      	uxth	r3, r3
 810604c:	431a      	orrs	r2, r3
 810604e:	687b      	ldr	r3, [r7, #4]
 8106050:	68db      	ldr	r3, [r3, #12]
 8106052:	3b01      	subs	r3, #1
 8106054:	041b      	lsls	r3, r3, #16
 8106056:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810605a:	431a      	orrs	r2, r3
 810605c:	687b      	ldr	r3, [r7, #4]
 810605e:	691b      	ldr	r3, [r3, #16]
 8106060:	3b01      	subs	r3, #1
 8106062:	061b      	lsls	r3, r3, #24
 8106064:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8106068:	4932      	ldr	r1, [pc, #200]	; (8106134 <RCCEx_PLL3_Config+0x160>)
 810606a:	4313      	orrs	r3, r2
 810606c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810606e:	4b31      	ldr	r3, [pc, #196]	; (8106134 <RCCEx_PLL3_Config+0x160>)
 8106070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106072:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8106076:	687b      	ldr	r3, [r7, #4]
 8106078:	695b      	ldr	r3, [r3, #20]
 810607a:	492e      	ldr	r1, [pc, #184]	; (8106134 <RCCEx_PLL3_Config+0x160>)
 810607c:	4313      	orrs	r3, r2
 810607e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8106080:	4b2c      	ldr	r3, [pc, #176]	; (8106134 <RCCEx_PLL3_Config+0x160>)
 8106082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106084:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8106088:	687b      	ldr	r3, [r7, #4]
 810608a:	699b      	ldr	r3, [r3, #24]
 810608c:	4929      	ldr	r1, [pc, #164]	; (8106134 <RCCEx_PLL3_Config+0x160>)
 810608e:	4313      	orrs	r3, r2
 8106090:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8106092:	4b28      	ldr	r3, [pc, #160]	; (8106134 <RCCEx_PLL3_Config+0x160>)
 8106094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106096:	4a27      	ldr	r2, [pc, #156]	; (8106134 <RCCEx_PLL3_Config+0x160>)
 8106098:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810609c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810609e:	4b25      	ldr	r3, [pc, #148]	; (8106134 <RCCEx_PLL3_Config+0x160>)
 81060a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81060a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81060a6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 81060aa:	687a      	ldr	r2, [r7, #4]
 81060ac:	69d2      	ldr	r2, [r2, #28]
 81060ae:	00d2      	lsls	r2, r2, #3
 81060b0:	4920      	ldr	r1, [pc, #128]	; (8106134 <RCCEx_PLL3_Config+0x160>)
 81060b2:	4313      	orrs	r3, r2
 81060b4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 81060b6:	4b1f      	ldr	r3, [pc, #124]	; (8106134 <RCCEx_PLL3_Config+0x160>)
 81060b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81060ba:	4a1e      	ldr	r2, [pc, #120]	; (8106134 <RCCEx_PLL3_Config+0x160>)
 81060bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81060c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 81060c2:	683b      	ldr	r3, [r7, #0]
 81060c4:	2b00      	cmp	r3, #0
 81060c6:	d106      	bne.n	81060d6 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 81060c8:	4b1a      	ldr	r3, [pc, #104]	; (8106134 <RCCEx_PLL3_Config+0x160>)
 81060ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81060cc:	4a19      	ldr	r2, [pc, #100]	; (8106134 <RCCEx_PLL3_Config+0x160>)
 81060ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 81060d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 81060d4:	e00f      	b.n	81060f6 <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 81060d6:	683b      	ldr	r3, [r7, #0]
 81060d8:	2b01      	cmp	r3, #1
 81060da:	d106      	bne.n	81060ea <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 81060dc:	4b15      	ldr	r3, [pc, #84]	; (8106134 <RCCEx_PLL3_Config+0x160>)
 81060de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81060e0:	4a14      	ldr	r2, [pc, #80]	; (8106134 <RCCEx_PLL3_Config+0x160>)
 81060e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 81060e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 81060e8:	e005      	b.n	81060f6 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 81060ea:	4b12      	ldr	r3, [pc, #72]	; (8106134 <RCCEx_PLL3_Config+0x160>)
 81060ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81060ee:	4a11      	ldr	r2, [pc, #68]	; (8106134 <RCCEx_PLL3_Config+0x160>)
 81060f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 81060f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 81060f6:	4b0f      	ldr	r3, [pc, #60]	; (8106134 <RCCEx_PLL3_Config+0x160>)
 81060f8:	681b      	ldr	r3, [r3, #0]
 81060fa:	4a0e      	ldr	r2, [pc, #56]	; (8106134 <RCCEx_PLL3_Config+0x160>)
 81060fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8106100:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8106102:	f7fb fd61 	bl	8101bc8 <HAL_GetTick>
 8106106:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8106108:	e008      	b.n	810611c <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 810610a:	f7fb fd5d 	bl	8101bc8 <HAL_GetTick>
 810610e:	4602      	mov	r2, r0
 8106110:	68bb      	ldr	r3, [r7, #8]
 8106112:	1ad3      	subs	r3, r2, r3
 8106114:	2b02      	cmp	r3, #2
 8106116:	d901      	bls.n	810611c <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8106118:	2303      	movs	r3, #3
 810611a:	e006      	b.n	810612a <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810611c:	4b05      	ldr	r3, [pc, #20]	; (8106134 <RCCEx_PLL3_Config+0x160>)
 810611e:	681b      	ldr	r3, [r3, #0]
 8106120:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106124:	2b00      	cmp	r3, #0
 8106126:	d0f0      	beq.n	810610a <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8106128:	7bfb      	ldrb	r3, [r7, #15]
}
 810612a:	4618      	mov	r0, r3
 810612c:	3710      	adds	r7, #16
 810612e:	46bd      	mov	sp, r7
 8106130:	bd80      	pop	{r7, pc}
 8106132:	bf00      	nop
 8106134:	58024400 	.word	0x58024400

08106138 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8106138:	b580      	push	{r7, lr}
 810613a:	b084      	sub	sp, #16
 810613c:	af00      	add	r7, sp, #0
 810613e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8106140:	2301      	movs	r3, #1
 8106142:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8106144:	687b      	ldr	r3, [r7, #4]
 8106146:	2b00      	cmp	r3, #0
 8106148:	d069      	beq.n	810621e <HAL_RTC_Init+0xe6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 810614a:	687b      	ldr	r3, [r7, #4]
 810614c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8106150:	b2db      	uxtb	r3, r3
 8106152:	2b00      	cmp	r3, #0
 8106154:	d106      	bne.n	8106164 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8106156:	687b      	ldr	r3, [r7, #4]
 8106158:	2200      	movs	r2, #0
 810615a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 810615e:	6878      	ldr	r0, [r7, #4]
 8106160:	f7fb fa28 	bl	81015b4 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8106164:	687b      	ldr	r3, [r7, #4]
 8106166:	2202      	movs	r2, #2
 8106168:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 810616c:	687b      	ldr	r3, [r7, #4]
 810616e:	681b      	ldr	r3, [r3, #0]
 8106170:	22ca      	movs	r2, #202	; 0xca
 8106172:	625a      	str	r2, [r3, #36]	; 0x24
 8106174:	687b      	ldr	r3, [r7, #4]
 8106176:	681b      	ldr	r3, [r3, #0]
 8106178:	2253      	movs	r2, #83	; 0x53
 810617a:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 810617c:	6878      	ldr	r0, [r7, #4]
 810617e:	f000 fa46 	bl	810660e <RTC_EnterInitMode>
 8106182:	4603      	mov	r3, r0
 8106184:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8106186:	7bfb      	ldrb	r3, [r7, #15]
 8106188:	2b00      	cmp	r3, #0
 810618a:	d13d      	bne.n	8106208 <HAL_RTC_Init+0xd0>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 810618c:	687b      	ldr	r3, [r7, #4]
 810618e:	681b      	ldr	r3, [r3, #0]
 8106190:	689b      	ldr	r3, [r3, #8]
 8106192:	687a      	ldr	r2, [r7, #4]
 8106194:	6812      	ldr	r2, [r2, #0]
 8106196:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 810619a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 810619e:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 81061a0:	687b      	ldr	r3, [r7, #4]
 81061a2:	681b      	ldr	r3, [r3, #0]
 81061a4:	6899      	ldr	r1, [r3, #8]
 81061a6:	687b      	ldr	r3, [r7, #4]
 81061a8:	685a      	ldr	r2, [r3, #4]
 81061aa:	687b      	ldr	r3, [r7, #4]
 81061ac:	691b      	ldr	r3, [r3, #16]
 81061ae:	431a      	orrs	r2, r3
 81061b0:	687b      	ldr	r3, [r7, #4]
 81061b2:	699b      	ldr	r3, [r3, #24]
 81061b4:	431a      	orrs	r2, r3
 81061b6:	687b      	ldr	r3, [r7, #4]
 81061b8:	681b      	ldr	r3, [r3, #0]
 81061ba:	430a      	orrs	r2, r1
 81061bc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 81061be:	687b      	ldr	r3, [r7, #4]
 81061c0:	689b      	ldr	r3, [r3, #8]
 81061c2:	0419      	lsls	r1, r3, #16
 81061c4:	687b      	ldr	r3, [r7, #4]
 81061c6:	68da      	ldr	r2, [r3, #12]
 81061c8:	687b      	ldr	r3, [r7, #4]
 81061ca:	681b      	ldr	r3, [r3, #0]
 81061cc:	430a      	orrs	r2, r1
 81061ce:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 81061d0:	6878      	ldr	r0, [r7, #4]
 81061d2:	f000 fa4f 	bl	8106674 <RTC_ExitInitMode>
 81061d6:	4603      	mov	r3, r0
 81061d8:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 81061da:	7bfb      	ldrb	r3, [r7, #15]
 81061dc:	2b00      	cmp	r3, #0
 81061de:	d113      	bne.n	8106208 <HAL_RTC_Init+0xd0>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 81061e0:	687b      	ldr	r3, [r7, #4]
 81061e2:	681b      	ldr	r3, [r3, #0]
 81061e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 81061e6:	687b      	ldr	r3, [r7, #4]
 81061e8:	681b      	ldr	r3, [r3, #0]
 81061ea:	f022 0203 	bic.w	r2, r2, #3
 81061ee:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 81061f0:	687b      	ldr	r3, [r7, #4]
 81061f2:	681b      	ldr	r3, [r3, #0]
 81061f4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 81061f6:	687b      	ldr	r3, [r7, #4]
 81061f8:	69da      	ldr	r2, [r3, #28]
 81061fa:	687b      	ldr	r3, [r7, #4]
 81061fc:	695b      	ldr	r3, [r3, #20]
 81061fe:	431a      	orrs	r2, r3
 8106200:	687b      	ldr	r3, [r7, #4]
 8106202:	681b      	ldr	r3, [r3, #0]
 8106204:	430a      	orrs	r2, r1
 8106206:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8106208:	687b      	ldr	r3, [r7, #4]
 810620a:	681b      	ldr	r3, [r3, #0]
 810620c:	22ff      	movs	r2, #255	; 0xff
 810620e:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8106210:	7bfb      	ldrb	r3, [r7, #15]
 8106212:	2b00      	cmp	r3, #0
 8106214:	d103      	bne.n	810621e <HAL_RTC_Init+0xe6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8106216:	687b      	ldr	r3, [r7, #4]
 8106218:	2201      	movs	r2, #1
 810621a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 810621e:	7bfb      	ldrb	r3, [r7, #15]
}
 8106220:	4618      	mov	r0, r3
 8106222:	3710      	adds	r7, #16
 8106224:	46bd      	mov	sp, r7
 8106226:	bd80      	pop	{r7, pc}

08106228 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8106228:	b590      	push	{r4, r7, lr}
 810622a:	b087      	sub	sp, #28
 810622c:	af00      	add	r7, sp, #0
 810622e:	60f8      	str	r0, [r7, #12]
 8106230:	60b9      	str	r1, [r7, #8]
 8106232:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8106234:	68fb      	ldr	r3, [r7, #12]
 8106236:	f893 3020 	ldrb.w	r3, [r3, #32]
 810623a:	2b01      	cmp	r3, #1
 810623c:	d101      	bne.n	8106242 <HAL_RTC_SetTime+0x1a>
 810623e:	2302      	movs	r3, #2
 8106240:	e08b      	b.n	810635a <HAL_RTC_SetTime+0x132>
 8106242:	68fb      	ldr	r3, [r7, #12]
 8106244:	2201      	movs	r2, #1
 8106246:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 810624a:	68fb      	ldr	r3, [r7, #12]
 810624c:	2202      	movs	r2, #2
 810624e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8106252:	68fb      	ldr	r3, [r7, #12]
 8106254:	681b      	ldr	r3, [r3, #0]
 8106256:	22ca      	movs	r2, #202	; 0xca
 8106258:	625a      	str	r2, [r3, #36]	; 0x24
 810625a:	68fb      	ldr	r3, [r7, #12]
 810625c:	681b      	ldr	r3, [r3, #0]
 810625e:	2253      	movs	r2, #83	; 0x53
 8106260:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8106262:	68f8      	ldr	r0, [r7, #12]
 8106264:	f000 f9d3 	bl	810660e <RTC_EnterInitMode>
 8106268:	4603      	mov	r3, r0
 810626a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 810626c:	7cfb      	ldrb	r3, [r7, #19]
 810626e:	2b00      	cmp	r3, #0
 8106270:	d163      	bne.n	810633a <HAL_RTC_SetTime+0x112>
  {
    if(Format == RTC_FORMAT_BIN)
 8106272:	687b      	ldr	r3, [r7, #4]
 8106274:	2b00      	cmp	r3, #0
 8106276:	d126      	bne.n	81062c6 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8106278:	68fb      	ldr	r3, [r7, #12]
 810627a:	681b      	ldr	r3, [r3, #0]
 810627c:	689b      	ldr	r3, [r3, #8]
 810627e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106282:	2b00      	cmp	r3, #0
 8106284:	d102      	bne.n	810628c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8106286:	68bb      	ldr	r3, [r7, #8]
 8106288:	2200      	movs	r2, #0
 810628a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 810628c:	68bb      	ldr	r3, [r7, #8]
 810628e:	781b      	ldrb	r3, [r3, #0]
 8106290:	4618      	mov	r0, r3
 8106292:	f000 fa2d 	bl	81066f0 <RTC_ByteToBcd2>
 8106296:	4603      	mov	r3, r0
 8106298:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 810629a:	68bb      	ldr	r3, [r7, #8]
 810629c:	785b      	ldrb	r3, [r3, #1]
 810629e:	4618      	mov	r0, r3
 81062a0:	f000 fa26 	bl	81066f0 <RTC_ByteToBcd2>
 81062a4:	4603      	mov	r3, r0
 81062a6:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 81062a8:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 81062aa:	68bb      	ldr	r3, [r7, #8]
 81062ac:	789b      	ldrb	r3, [r3, #2]
 81062ae:	4618      	mov	r0, r3
 81062b0:	f000 fa1e 	bl	81066f0 <RTC_ByteToBcd2>
 81062b4:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 81062b6:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 81062ba:	68bb      	ldr	r3, [r7, #8]
 81062bc:	78db      	ldrb	r3, [r3, #3]
 81062be:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 81062c0:	4313      	orrs	r3, r2
 81062c2:	617b      	str	r3, [r7, #20]
 81062c4:	e018      	b.n	81062f8 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 81062c6:	68fb      	ldr	r3, [r7, #12]
 81062c8:	681b      	ldr	r3, [r3, #0]
 81062ca:	689b      	ldr	r3, [r3, #8]
 81062cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81062d0:	2b00      	cmp	r3, #0
 81062d2:	d102      	bne.n	81062da <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 81062d4:	68bb      	ldr	r3, [r7, #8]
 81062d6:	2200      	movs	r2, #0
 81062d8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 81062da:	68bb      	ldr	r3, [r7, #8]
 81062dc:	781b      	ldrb	r3, [r3, #0]
 81062de:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 81062e0:	68bb      	ldr	r3, [r7, #8]
 81062e2:	785b      	ldrb	r3, [r3, #1]
 81062e4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 81062e6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 81062e8:	68ba      	ldr	r2, [r7, #8]
 81062ea:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 81062ec:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 81062ee:	68bb      	ldr	r3, [r7, #8]
 81062f0:	78db      	ldrb	r3, [r3, #3]
 81062f2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 81062f4:	4313      	orrs	r3, r2
 81062f6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 81062f8:	68fb      	ldr	r3, [r7, #12]
 81062fa:	681a      	ldr	r2, [r3, #0]
 81062fc:	697b      	ldr	r3, [r7, #20]
 81062fe:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8106302:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8106306:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8106308:	68fb      	ldr	r3, [r7, #12]
 810630a:	681b      	ldr	r3, [r3, #0]
 810630c:	689a      	ldr	r2, [r3, #8]
 810630e:	68fb      	ldr	r3, [r7, #12]
 8106310:	681b      	ldr	r3, [r3, #0]
 8106312:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8106316:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8106318:	68fb      	ldr	r3, [r7, #12]
 810631a:	681b      	ldr	r3, [r3, #0]
 810631c:	6899      	ldr	r1, [r3, #8]
 810631e:	68bb      	ldr	r3, [r7, #8]
 8106320:	68da      	ldr	r2, [r3, #12]
 8106322:	68bb      	ldr	r3, [r7, #8]
 8106324:	691b      	ldr	r3, [r3, #16]
 8106326:	431a      	orrs	r2, r3
 8106328:	68fb      	ldr	r3, [r7, #12]
 810632a:	681b      	ldr	r3, [r3, #0]
 810632c:	430a      	orrs	r2, r1
 810632e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8106330:	68f8      	ldr	r0, [r7, #12]
 8106332:	f000 f99f 	bl	8106674 <RTC_ExitInitMode>
 8106336:	4603      	mov	r3, r0
 8106338:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 810633a:	68fb      	ldr	r3, [r7, #12]
 810633c:	681b      	ldr	r3, [r3, #0]
 810633e:	22ff      	movs	r2, #255	; 0xff
 8106340:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8106342:	7cfb      	ldrb	r3, [r7, #19]
 8106344:	2b00      	cmp	r3, #0
 8106346:	d103      	bne.n	8106350 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8106348:	68fb      	ldr	r3, [r7, #12]
 810634a:	2201      	movs	r2, #1
 810634c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8106350:	68fb      	ldr	r3, [r7, #12]
 8106352:	2200      	movs	r2, #0
 8106354:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8106358:	7cfb      	ldrb	r3, [r7, #19]
}
 810635a:	4618      	mov	r0, r3
 810635c:	371c      	adds	r7, #28
 810635e:	46bd      	mov	sp, r7
 8106360:	bd90      	pop	{r4, r7, pc}

08106362 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8106362:	b580      	push	{r7, lr}
 8106364:	b086      	sub	sp, #24
 8106366:	af00      	add	r7, sp, #0
 8106368:	60f8      	str	r0, [r7, #12]
 810636a:	60b9      	str	r1, [r7, #8]
 810636c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 810636e:	68fb      	ldr	r3, [r7, #12]
 8106370:	681b      	ldr	r3, [r3, #0]
 8106372:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8106374:	68bb      	ldr	r3, [r7, #8]
 8106376:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8106378:	68fb      	ldr	r3, [r7, #12]
 810637a:	681b      	ldr	r3, [r3, #0]
 810637c:	691b      	ldr	r3, [r3, #16]
 810637e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8106382:	68bb      	ldr	r3, [r7, #8]
 8106384:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8106386:	68fb      	ldr	r3, [r7, #12]
 8106388:	681b      	ldr	r3, [r3, #0]
 810638a:	681b      	ldr	r3, [r3, #0]
 810638c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8106390:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8106394:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8106396:	697b      	ldr	r3, [r7, #20]
 8106398:	0c1b      	lsrs	r3, r3, #16
 810639a:	b2db      	uxtb	r3, r3
 810639c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81063a0:	b2da      	uxtb	r2, r3
 81063a2:	68bb      	ldr	r3, [r7, #8]
 81063a4:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 81063a6:	697b      	ldr	r3, [r7, #20]
 81063a8:	0a1b      	lsrs	r3, r3, #8
 81063aa:	b2db      	uxtb	r3, r3
 81063ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81063b0:	b2da      	uxtb	r2, r3
 81063b2:	68bb      	ldr	r3, [r7, #8]
 81063b4:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 81063b6:	697b      	ldr	r3, [r7, #20]
 81063b8:	b2db      	uxtb	r3, r3
 81063ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81063be:	b2da      	uxtb	r2, r3
 81063c0:	68bb      	ldr	r3, [r7, #8]
 81063c2:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 81063c4:	697b      	ldr	r3, [r7, #20]
 81063c6:	0d9b      	lsrs	r3, r3, #22
 81063c8:	b2db      	uxtb	r3, r3
 81063ca:	f003 0301 	and.w	r3, r3, #1
 81063ce:	b2da      	uxtb	r2, r3
 81063d0:	68bb      	ldr	r3, [r7, #8]
 81063d2:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 81063d4:	687b      	ldr	r3, [r7, #4]
 81063d6:	2b00      	cmp	r3, #0
 81063d8:	d11a      	bne.n	8106410 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 81063da:	68bb      	ldr	r3, [r7, #8]
 81063dc:	781b      	ldrb	r3, [r3, #0]
 81063de:	4618      	mov	r0, r3
 81063e0:	f000 f9a6 	bl	8106730 <RTC_Bcd2ToByte>
 81063e4:	4603      	mov	r3, r0
 81063e6:	461a      	mov	r2, r3
 81063e8:	68bb      	ldr	r3, [r7, #8]
 81063ea:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 81063ec:	68bb      	ldr	r3, [r7, #8]
 81063ee:	785b      	ldrb	r3, [r3, #1]
 81063f0:	4618      	mov	r0, r3
 81063f2:	f000 f99d 	bl	8106730 <RTC_Bcd2ToByte>
 81063f6:	4603      	mov	r3, r0
 81063f8:	461a      	mov	r2, r3
 81063fa:	68bb      	ldr	r3, [r7, #8]
 81063fc:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 81063fe:	68bb      	ldr	r3, [r7, #8]
 8106400:	789b      	ldrb	r3, [r3, #2]
 8106402:	4618      	mov	r0, r3
 8106404:	f000 f994 	bl	8106730 <RTC_Bcd2ToByte>
 8106408:	4603      	mov	r3, r0
 810640a:	461a      	mov	r2, r3
 810640c:	68bb      	ldr	r3, [r7, #8]
 810640e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8106410:	2300      	movs	r3, #0
}
 8106412:	4618      	mov	r0, r3
 8106414:	3718      	adds	r7, #24
 8106416:	46bd      	mov	sp, r7
 8106418:	bd80      	pop	{r7, pc}

0810641a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 810641a:	b590      	push	{r4, r7, lr}
 810641c:	b087      	sub	sp, #28
 810641e:	af00      	add	r7, sp, #0
 8106420:	60f8      	str	r0, [r7, #12]
 8106422:	60b9      	str	r1, [r7, #8]
 8106424:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8106426:	68fb      	ldr	r3, [r7, #12]
 8106428:	f893 3020 	ldrb.w	r3, [r3, #32]
 810642c:	2b01      	cmp	r3, #1
 810642e:	d101      	bne.n	8106434 <HAL_RTC_SetDate+0x1a>
 8106430:	2302      	movs	r3, #2
 8106432:	e075      	b.n	8106520 <HAL_RTC_SetDate+0x106>
 8106434:	68fb      	ldr	r3, [r7, #12]
 8106436:	2201      	movs	r2, #1
 8106438:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 810643c:	68fb      	ldr	r3, [r7, #12]
 810643e:	2202      	movs	r2, #2
 8106440:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8106444:	687b      	ldr	r3, [r7, #4]
 8106446:	2b00      	cmp	r3, #0
 8106448:	d10e      	bne.n	8106468 <HAL_RTC_SetDate+0x4e>
 810644a:	68bb      	ldr	r3, [r7, #8]
 810644c:	785b      	ldrb	r3, [r3, #1]
 810644e:	f003 0310 	and.w	r3, r3, #16
 8106452:	2b00      	cmp	r3, #0
 8106454:	d008      	beq.n	8106468 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8106456:	68bb      	ldr	r3, [r7, #8]
 8106458:	785b      	ldrb	r3, [r3, #1]
 810645a:	f023 0310 	bic.w	r3, r3, #16
 810645e:	b2db      	uxtb	r3, r3
 8106460:	330a      	adds	r3, #10
 8106462:	b2da      	uxtb	r2, r3
 8106464:	68bb      	ldr	r3, [r7, #8]
 8106466:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8106468:	687b      	ldr	r3, [r7, #4]
 810646a:	2b00      	cmp	r3, #0
 810646c:	d11c      	bne.n	81064a8 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 810646e:	68bb      	ldr	r3, [r7, #8]
 8106470:	78db      	ldrb	r3, [r3, #3]
 8106472:	4618      	mov	r0, r3
 8106474:	f000 f93c 	bl	81066f0 <RTC_ByteToBcd2>
 8106478:	4603      	mov	r3, r0
 810647a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 810647c:	68bb      	ldr	r3, [r7, #8]
 810647e:	785b      	ldrb	r3, [r3, #1]
 8106480:	4618      	mov	r0, r3
 8106482:	f000 f935 	bl	81066f0 <RTC_ByteToBcd2>
 8106486:	4603      	mov	r3, r0
 8106488:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 810648a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 810648c:	68bb      	ldr	r3, [r7, #8]
 810648e:	789b      	ldrb	r3, [r3, #2]
 8106490:	4618      	mov	r0, r3
 8106492:	f000 f92d 	bl	81066f0 <RTC_ByteToBcd2>
 8106496:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8106498:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 810649c:	68bb      	ldr	r3, [r7, #8]
 810649e:	781b      	ldrb	r3, [r3, #0]
 81064a0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 81064a2:	4313      	orrs	r3, r2
 81064a4:	617b      	str	r3, [r7, #20]
 81064a6:	e00e      	b.n	81064c6 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 81064a8:	68bb      	ldr	r3, [r7, #8]
 81064aa:	78db      	ldrb	r3, [r3, #3]
 81064ac:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 81064ae:	68bb      	ldr	r3, [r7, #8]
 81064b0:	785b      	ldrb	r3, [r3, #1]
 81064b2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 81064b4:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 81064b6:	68ba      	ldr	r2, [r7, #8]
 81064b8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 81064ba:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 81064bc:	68bb      	ldr	r3, [r7, #8]
 81064be:	781b      	ldrb	r3, [r3, #0]
 81064c0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 81064c2:	4313      	orrs	r3, r2
 81064c4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 81064c6:	68fb      	ldr	r3, [r7, #12]
 81064c8:	681b      	ldr	r3, [r3, #0]
 81064ca:	22ca      	movs	r2, #202	; 0xca
 81064cc:	625a      	str	r2, [r3, #36]	; 0x24
 81064ce:	68fb      	ldr	r3, [r7, #12]
 81064d0:	681b      	ldr	r3, [r3, #0]
 81064d2:	2253      	movs	r2, #83	; 0x53
 81064d4:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 81064d6:	68f8      	ldr	r0, [r7, #12]
 81064d8:	f000 f899 	bl	810660e <RTC_EnterInitMode>
 81064dc:	4603      	mov	r3, r0
 81064de:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 81064e0:	7cfb      	ldrb	r3, [r7, #19]
 81064e2:	2b00      	cmp	r3, #0
 81064e4:	d10c      	bne.n	8106500 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 81064e6:	68fb      	ldr	r3, [r7, #12]
 81064e8:	681a      	ldr	r2, [r3, #0]
 81064ea:	697b      	ldr	r3, [r7, #20]
 81064ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 81064f0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 81064f4:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 81064f6:	68f8      	ldr	r0, [r7, #12]
 81064f8:	f000 f8bc 	bl	8106674 <RTC_ExitInitMode>
 81064fc:	4603      	mov	r3, r0
 81064fe:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8106500:	68fb      	ldr	r3, [r7, #12]
 8106502:	681b      	ldr	r3, [r3, #0]
 8106504:	22ff      	movs	r2, #255	; 0xff
 8106506:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8106508:	7cfb      	ldrb	r3, [r7, #19]
 810650a:	2b00      	cmp	r3, #0
 810650c:	d103      	bne.n	8106516 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 810650e:	68fb      	ldr	r3, [r7, #12]
 8106510:	2201      	movs	r2, #1
 8106512:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8106516:	68fb      	ldr	r3, [r7, #12]
 8106518:	2200      	movs	r2, #0
 810651a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 810651e:	7cfb      	ldrb	r3, [r7, #19]


}
 8106520:	4618      	mov	r0, r3
 8106522:	371c      	adds	r7, #28
 8106524:	46bd      	mov	sp, r7
 8106526:	bd90      	pop	{r4, r7, pc}

08106528 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8106528:	b580      	push	{r7, lr}
 810652a:	b086      	sub	sp, #24
 810652c:	af00      	add	r7, sp, #0
 810652e:	60f8      	str	r0, [r7, #12]
 8106530:	60b9      	str	r1, [r7, #8]
 8106532:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8106534:	68fb      	ldr	r3, [r7, #12]
 8106536:	681b      	ldr	r3, [r3, #0]
 8106538:	685b      	ldr	r3, [r3, #4]
 810653a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 810653e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8106542:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8106544:	697b      	ldr	r3, [r7, #20]
 8106546:	0c1b      	lsrs	r3, r3, #16
 8106548:	b2da      	uxtb	r2, r3
 810654a:	68bb      	ldr	r3, [r7, #8]
 810654c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 810654e:	697b      	ldr	r3, [r7, #20]
 8106550:	0a1b      	lsrs	r3, r3, #8
 8106552:	b2db      	uxtb	r3, r3
 8106554:	f003 031f 	and.w	r3, r3, #31
 8106558:	b2da      	uxtb	r2, r3
 810655a:	68bb      	ldr	r3, [r7, #8]
 810655c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 810655e:	697b      	ldr	r3, [r7, #20]
 8106560:	b2db      	uxtb	r3, r3
 8106562:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8106566:	b2da      	uxtb	r2, r3
 8106568:	68bb      	ldr	r3, [r7, #8]
 810656a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 810656c:	697b      	ldr	r3, [r7, #20]
 810656e:	0b5b      	lsrs	r3, r3, #13
 8106570:	b2db      	uxtb	r3, r3
 8106572:	f003 0307 	and.w	r3, r3, #7
 8106576:	b2da      	uxtb	r2, r3
 8106578:	68bb      	ldr	r3, [r7, #8]
 810657a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 810657c:	687b      	ldr	r3, [r7, #4]
 810657e:	2b00      	cmp	r3, #0
 8106580:	d11a      	bne.n	81065b8 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8106582:	68bb      	ldr	r3, [r7, #8]
 8106584:	78db      	ldrb	r3, [r3, #3]
 8106586:	4618      	mov	r0, r3
 8106588:	f000 f8d2 	bl	8106730 <RTC_Bcd2ToByte>
 810658c:	4603      	mov	r3, r0
 810658e:	461a      	mov	r2, r3
 8106590:	68bb      	ldr	r3, [r7, #8]
 8106592:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8106594:	68bb      	ldr	r3, [r7, #8]
 8106596:	785b      	ldrb	r3, [r3, #1]
 8106598:	4618      	mov	r0, r3
 810659a:	f000 f8c9 	bl	8106730 <RTC_Bcd2ToByte>
 810659e:	4603      	mov	r3, r0
 81065a0:	461a      	mov	r2, r3
 81065a2:	68bb      	ldr	r3, [r7, #8]
 81065a4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 81065a6:	68bb      	ldr	r3, [r7, #8]
 81065a8:	789b      	ldrb	r3, [r3, #2]
 81065aa:	4618      	mov	r0, r3
 81065ac:	f000 f8c0 	bl	8106730 <RTC_Bcd2ToByte>
 81065b0:	4603      	mov	r3, r0
 81065b2:	461a      	mov	r2, r3
 81065b4:	68bb      	ldr	r3, [r7, #8]
 81065b6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 81065b8:	2300      	movs	r3, #0
}
 81065ba:	4618      	mov	r0, r3
 81065bc:	3718      	adds	r7, #24
 81065be:	46bd      	mov	sp, r7
 81065c0:	bd80      	pop	{r7, pc}

081065c2 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 81065c2:	b580      	push	{r7, lr}
 81065c4:	b084      	sub	sp, #16
 81065c6:	af00      	add	r7, sp, #0
 81065c8:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 81065ca:	687b      	ldr	r3, [r7, #4]
 81065cc:	681b      	ldr	r3, [r3, #0]
 81065ce:	68da      	ldr	r2, [r3, #12]
 81065d0:	687b      	ldr	r3, [r7, #4]
 81065d2:	681b      	ldr	r3, [r3, #0]
 81065d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 81065d8:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 81065da:	f7fb faf5 	bl	8101bc8 <HAL_GetTick>
 81065de:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 81065e0:	e009      	b.n	81065f6 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 81065e2:	f7fb faf1 	bl	8101bc8 <HAL_GetTick>
 81065e6:	4602      	mov	r2, r0
 81065e8:	68fb      	ldr	r3, [r7, #12]
 81065ea:	1ad3      	subs	r3, r2, r3
 81065ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 81065f0:	d901      	bls.n	81065f6 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 81065f2:	2303      	movs	r3, #3
 81065f4:	e007      	b.n	8106606 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 81065f6:	687b      	ldr	r3, [r7, #4]
 81065f8:	681b      	ldr	r3, [r3, #0]
 81065fa:	68db      	ldr	r3, [r3, #12]
 81065fc:	f003 0320 	and.w	r3, r3, #32
 8106600:	2b00      	cmp	r3, #0
 8106602:	d0ee      	beq.n	81065e2 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8106604:	2300      	movs	r3, #0
}
 8106606:	4618      	mov	r0, r3
 8106608:	3710      	adds	r7, #16
 810660a:	46bd      	mov	sp, r7
 810660c:	bd80      	pop	{r7, pc}

0810660e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 810660e:	b580      	push	{r7, lr}
 8106610:	b084      	sub	sp, #16
 8106612:	af00      	add	r7, sp, #0
 8106614:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8106616:	2300      	movs	r3, #0
 8106618:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 810661a:	687b      	ldr	r3, [r7, #4]
 810661c:	681b      	ldr	r3, [r3, #0]
 810661e:	68db      	ldr	r3, [r3, #12]
 8106620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106624:	2b00      	cmp	r3, #0
 8106626:	d120      	bne.n	810666a <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8106628:	687b      	ldr	r3, [r7, #4]
 810662a:	681b      	ldr	r3, [r3, #0]
 810662c:	f04f 32ff 	mov.w	r2, #4294967295
 8106630:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8106632:	f7fb fac9 	bl	8101bc8 <HAL_GetTick>
 8106636:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8106638:	e00d      	b.n	8106656 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 810663a:	f7fb fac5 	bl	8101bc8 <HAL_GetTick>
 810663e:	4602      	mov	r2, r0
 8106640:	68bb      	ldr	r3, [r7, #8]
 8106642:	1ad3      	subs	r3, r2, r3
 8106644:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8106648:	d905      	bls.n	8106656 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 810664a:	2303      	movs	r3, #3
 810664c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 810664e:	687b      	ldr	r3, [r7, #4]
 8106650:	2203      	movs	r2, #3
 8106652:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8106656:	687b      	ldr	r3, [r7, #4]
 8106658:	681b      	ldr	r3, [r3, #0]
 810665a:	68db      	ldr	r3, [r3, #12]
 810665c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106660:	2b00      	cmp	r3, #0
 8106662:	d102      	bne.n	810666a <RTC_EnterInitMode+0x5c>
 8106664:	7bfb      	ldrb	r3, [r7, #15]
 8106666:	2b03      	cmp	r3, #3
 8106668:	d1e7      	bne.n	810663a <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 810666a:	7bfb      	ldrb	r3, [r7, #15]
}
 810666c:	4618      	mov	r0, r3
 810666e:	3710      	adds	r7, #16
 8106670:	46bd      	mov	sp, r7
 8106672:	bd80      	pop	{r7, pc}

08106674 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8106674:	b580      	push	{r7, lr}
 8106676:	b084      	sub	sp, #16
 8106678:	af00      	add	r7, sp, #0
 810667a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 810667c:	2300      	movs	r3, #0
 810667e:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8106680:	4b1a      	ldr	r3, [pc, #104]	; (81066ec <RTC_ExitInitMode+0x78>)
 8106682:	68db      	ldr	r3, [r3, #12]
 8106684:	4a19      	ldr	r2, [pc, #100]	; (81066ec <RTC_ExitInitMode+0x78>)
 8106686:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 810668a:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 810668c:	4b17      	ldr	r3, [pc, #92]	; (81066ec <RTC_ExitInitMode+0x78>)
 810668e:	689b      	ldr	r3, [r3, #8]
 8106690:	f003 0320 	and.w	r3, r3, #32
 8106694:	2b00      	cmp	r3, #0
 8106696:	d10c      	bne.n	81066b2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8106698:	6878      	ldr	r0, [r7, #4]
 810669a:	f7ff ff92 	bl	81065c2 <HAL_RTC_WaitForSynchro>
 810669e:	4603      	mov	r3, r0
 81066a0:	2b00      	cmp	r3, #0
 81066a2:	d01e      	beq.n	81066e2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 81066a4:	687b      	ldr	r3, [r7, #4]
 81066a6:	2203      	movs	r2, #3
 81066a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 81066ac:	2303      	movs	r3, #3
 81066ae:	73fb      	strb	r3, [r7, #15]
 81066b0:	e017      	b.n	81066e2 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 81066b2:	4b0e      	ldr	r3, [pc, #56]	; (81066ec <RTC_ExitInitMode+0x78>)
 81066b4:	689b      	ldr	r3, [r3, #8]
 81066b6:	4a0d      	ldr	r2, [pc, #52]	; (81066ec <RTC_ExitInitMode+0x78>)
 81066b8:	f023 0320 	bic.w	r3, r3, #32
 81066bc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 81066be:	6878      	ldr	r0, [r7, #4]
 81066c0:	f7ff ff7f 	bl	81065c2 <HAL_RTC_WaitForSynchro>
 81066c4:	4603      	mov	r3, r0
 81066c6:	2b00      	cmp	r3, #0
 81066c8:	d005      	beq.n	81066d6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 81066ca:	687b      	ldr	r3, [r7, #4]
 81066cc:	2203      	movs	r2, #3
 81066ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 81066d2:	2303      	movs	r3, #3
 81066d4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 81066d6:	4b05      	ldr	r3, [pc, #20]	; (81066ec <RTC_ExitInitMode+0x78>)
 81066d8:	689b      	ldr	r3, [r3, #8]
 81066da:	4a04      	ldr	r2, [pc, #16]	; (81066ec <RTC_ExitInitMode+0x78>)
 81066dc:	f043 0320 	orr.w	r3, r3, #32
 81066e0:	6093      	str	r3, [r2, #8]
  }

  return status;
 81066e2:	7bfb      	ldrb	r3, [r7, #15]
}
 81066e4:	4618      	mov	r0, r3
 81066e6:	3710      	adds	r7, #16
 81066e8:	46bd      	mov	sp, r7
 81066ea:	bd80      	pop	{r7, pc}
 81066ec:	58004000 	.word	0x58004000

081066f0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 81066f0:	b480      	push	{r7}
 81066f2:	b085      	sub	sp, #20
 81066f4:	af00      	add	r7, sp, #0
 81066f6:	4603      	mov	r3, r0
 81066f8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 81066fa:	2300      	movs	r3, #0
 81066fc:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 81066fe:	79fb      	ldrb	r3, [r7, #7]
 8106700:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8106702:	e005      	b.n	8106710 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8106704:	68fb      	ldr	r3, [r7, #12]
 8106706:	3301      	adds	r3, #1
 8106708:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 810670a:	7afb      	ldrb	r3, [r7, #11]
 810670c:	3b0a      	subs	r3, #10
 810670e:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8106710:	7afb      	ldrb	r3, [r7, #11]
 8106712:	2b09      	cmp	r3, #9
 8106714:	d8f6      	bhi.n	8106704 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8106716:	68fb      	ldr	r3, [r7, #12]
 8106718:	b2db      	uxtb	r3, r3
 810671a:	011b      	lsls	r3, r3, #4
 810671c:	b2da      	uxtb	r2, r3
 810671e:	7afb      	ldrb	r3, [r7, #11]
 8106720:	4313      	orrs	r3, r2
 8106722:	b2db      	uxtb	r3, r3
}
 8106724:	4618      	mov	r0, r3
 8106726:	3714      	adds	r7, #20
 8106728:	46bd      	mov	sp, r7
 810672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810672e:	4770      	bx	lr

08106730 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8106730:	b480      	push	{r7}
 8106732:	b085      	sub	sp, #20
 8106734:	af00      	add	r7, sp, #0
 8106736:	4603      	mov	r3, r0
 8106738:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 810673a:	79fb      	ldrb	r3, [r7, #7]
 810673c:	091b      	lsrs	r3, r3, #4
 810673e:	b2db      	uxtb	r3, r3
 8106740:	461a      	mov	r2, r3
 8106742:	0092      	lsls	r2, r2, #2
 8106744:	4413      	add	r3, r2
 8106746:	005b      	lsls	r3, r3, #1
 8106748:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 810674a:	79fb      	ldrb	r3, [r7, #7]
 810674c:	f003 030f 	and.w	r3, r3, #15
 8106750:	b2da      	uxtb	r2, r3
 8106752:	7bfb      	ldrb	r3, [r7, #15]
 8106754:	4413      	add	r3, r2
 8106756:	b2db      	uxtb	r3, r3
}
 8106758:	4618      	mov	r0, r3
 810675a:	3714      	adds	r7, #20
 810675c:	46bd      	mov	sp, r7
 810675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106762:	4770      	bx	lr

08106764 <HAL_RTCEx_SetRefClock>:
  * @brief  Enable the RTC reference clock detection.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetRefClock(RTC_HandleTypeDef * hrtc)
{
 8106764:	b580      	push	{r7, lr}
 8106766:	b084      	sub	sp, #16
 8106768:	af00      	add	r7, sp, #0
 810676a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  /* Process Locked */
  __HAL_LOCK(hrtc);
 810676c:	687b      	ldr	r3, [r7, #4]
 810676e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8106772:	2b01      	cmp	r3, #1
 8106774:	d101      	bne.n	810677a <HAL_RTCEx_SetRefClock+0x16>
 8106776:	2302      	movs	r3, #2
 8106778:	e034      	b.n	81067e4 <HAL_RTCEx_SetRefClock+0x80>
 810677a:	687b      	ldr	r3, [r7, #4]
 810677c:	2201      	movs	r2, #1
 810677e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8106782:	687b      	ldr	r3, [r7, #4]
 8106784:	2202      	movs	r2, #2
 8106786:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 810678a:	687b      	ldr	r3, [r7, #4]
 810678c:	681b      	ldr	r3, [r3, #0]
 810678e:	22ca      	movs	r2, #202	; 0xca
 8106790:	625a      	str	r2, [r3, #36]	; 0x24
 8106792:	687b      	ldr	r3, [r7, #4]
 8106794:	681b      	ldr	r3, [r3, #0]
 8106796:	2253      	movs	r2, #83	; 0x53
 8106798:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 810679a:	6878      	ldr	r0, [r7, #4]
 810679c:	f7ff ff37 	bl	810660e <RTC_EnterInitMode>
 81067a0:	4603      	mov	r3, r0
 81067a2:	73fb      	strb	r3, [r7, #15]
  if (status == HAL_OK)
 81067a4:	7bfb      	ldrb	r3, [r7, #15]
 81067a6:	2b00      	cmp	r3, #0
 81067a8:	d10c      	bne.n	81067c4 <HAL_RTCEx_SetRefClock+0x60>
  {
    __HAL_RTC_CLOCKREF_DETECTION_ENABLE(hrtc);
 81067aa:	687b      	ldr	r3, [r7, #4]
 81067ac:	681b      	ldr	r3, [r3, #0]
 81067ae:	689a      	ldr	r2, [r3, #8]
 81067b0:	687b      	ldr	r3, [r7, #4]
 81067b2:	681b      	ldr	r3, [r3, #0]
 81067b4:	f042 0210 	orr.w	r2, r2, #16
 81067b8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 81067ba:	6878      	ldr	r0, [r7, #4]
 81067bc:	f7ff ff5a 	bl	8106674 <RTC_ExitInitMode>
 81067c0:	4603      	mov	r3, r0
 81067c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 81067c4:	687b      	ldr	r3, [r7, #4]
 81067c6:	681b      	ldr	r3, [r3, #0]
 81067c8:	22ff      	movs	r2, #255	; 0xff
 81067ca:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 81067cc:	7bfb      	ldrb	r3, [r7, #15]
 81067ce:	2b00      	cmp	r3, #0
 81067d0:	d103      	bne.n	81067da <HAL_RTCEx_SetRefClock+0x76>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 81067d2:	687b      	ldr	r3, [r7, #4]
 81067d4:	2201      	movs	r2, #1
 81067d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 81067da:	687b      	ldr	r3, [r7, #4]
 81067dc:	2200      	movs	r2, #0
 81067de:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 81067e2:	2300      	movs	r3, #0
}
 81067e4:	4618      	mov	r0, r3
 81067e6:	3710      	adds	r7, #16
 81067e8:	46bd      	mov	sp, r7
 81067ea:	bd80      	pop	{r7, pc}

081067ec <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 81067ec:	b580      	push	{r7, lr}
 81067ee:	b084      	sub	sp, #16
 81067f0:	af00      	add	r7, sp, #0
 81067f2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 81067f4:	687b      	ldr	r3, [r7, #4]
 81067f6:	2b00      	cmp	r3, #0
 81067f8:	d101      	bne.n	81067fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 81067fa:	2301      	movs	r3, #1
 81067fc:	e0f1      	b.n	81069e2 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 81067fe:	687b      	ldr	r3, [r7, #4]
 8106800:	2200      	movs	r2, #0
 8106802:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8106804:	687b      	ldr	r3, [r7, #4]
 8106806:	681b      	ldr	r3, [r3, #0]
 8106808:	4a78      	ldr	r2, [pc, #480]	; (81069ec <HAL_SPI_Init+0x200>)
 810680a:	4293      	cmp	r3, r2
 810680c:	d00f      	beq.n	810682e <HAL_SPI_Init+0x42>
 810680e:	687b      	ldr	r3, [r7, #4]
 8106810:	681b      	ldr	r3, [r3, #0]
 8106812:	4a77      	ldr	r2, [pc, #476]	; (81069f0 <HAL_SPI_Init+0x204>)
 8106814:	4293      	cmp	r3, r2
 8106816:	d00a      	beq.n	810682e <HAL_SPI_Init+0x42>
 8106818:	687b      	ldr	r3, [r7, #4]
 810681a:	681b      	ldr	r3, [r3, #0]
 810681c:	4a75      	ldr	r2, [pc, #468]	; (81069f4 <HAL_SPI_Init+0x208>)
 810681e:	4293      	cmp	r3, r2
 8106820:	d005      	beq.n	810682e <HAL_SPI_Init+0x42>
 8106822:	687b      	ldr	r3, [r7, #4]
 8106824:	68db      	ldr	r3, [r3, #12]
 8106826:	2b0f      	cmp	r3, #15
 8106828:	d901      	bls.n	810682e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 810682a:	2301      	movs	r3, #1
 810682c:	e0d9      	b.n	81069e2 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 810682e:	6878      	ldr	r0, [r7, #4]
 8106830:	f000 ff5d 	bl	81076ee <SPI_GetPacketSize>
 8106834:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8106836:	687b      	ldr	r3, [r7, #4]
 8106838:	681b      	ldr	r3, [r3, #0]
 810683a:	4a6c      	ldr	r2, [pc, #432]	; (81069ec <HAL_SPI_Init+0x200>)
 810683c:	4293      	cmp	r3, r2
 810683e:	d00c      	beq.n	810685a <HAL_SPI_Init+0x6e>
 8106840:	687b      	ldr	r3, [r7, #4]
 8106842:	681b      	ldr	r3, [r3, #0]
 8106844:	4a6a      	ldr	r2, [pc, #424]	; (81069f0 <HAL_SPI_Init+0x204>)
 8106846:	4293      	cmp	r3, r2
 8106848:	d007      	beq.n	810685a <HAL_SPI_Init+0x6e>
 810684a:	687b      	ldr	r3, [r7, #4]
 810684c:	681b      	ldr	r3, [r3, #0]
 810684e:	4a69      	ldr	r2, [pc, #420]	; (81069f4 <HAL_SPI_Init+0x208>)
 8106850:	4293      	cmp	r3, r2
 8106852:	d002      	beq.n	810685a <HAL_SPI_Init+0x6e>
 8106854:	68fb      	ldr	r3, [r7, #12]
 8106856:	2b08      	cmp	r3, #8
 8106858:	d811      	bhi.n	810687e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 810685a:	687b      	ldr	r3, [r7, #4]
 810685c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810685e:	4a63      	ldr	r2, [pc, #396]	; (81069ec <HAL_SPI_Init+0x200>)
 8106860:	4293      	cmp	r3, r2
 8106862:	d009      	beq.n	8106878 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8106864:	687b      	ldr	r3, [r7, #4]
 8106866:	681b      	ldr	r3, [r3, #0]
 8106868:	4a61      	ldr	r2, [pc, #388]	; (81069f0 <HAL_SPI_Init+0x204>)
 810686a:	4293      	cmp	r3, r2
 810686c:	d004      	beq.n	8106878 <HAL_SPI_Init+0x8c>
 810686e:	687b      	ldr	r3, [r7, #4]
 8106870:	681b      	ldr	r3, [r3, #0]
 8106872:	4a60      	ldr	r2, [pc, #384]	; (81069f4 <HAL_SPI_Init+0x208>)
 8106874:	4293      	cmp	r3, r2
 8106876:	d104      	bne.n	8106882 <HAL_SPI_Init+0x96>
 8106878:	68fb      	ldr	r3, [r7, #12]
 810687a:	2b10      	cmp	r3, #16
 810687c:	d901      	bls.n	8106882 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 810687e:	2301      	movs	r3, #1
 8106880:	e0af      	b.n	81069e2 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8106882:	687b      	ldr	r3, [r7, #4]
 8106884:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8106888:	b2db      	uxtb	r3, r3
 810688a:	2b00      	cmp	r3, #0
 810688c:	d106      	bne.n	810689c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 810688e:	687b      	ldr	r3, [r7, #4]
 8106890:	2200      	movs	r2, #0
 8106892:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8106896:	6878      	ldr	r0, [r7, #4]
 8106898:	f7fa feea 	bl	8101670 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 810689c:	687b      	ldr	r3, [r7, #4]
 810689e:	2202      	movs	r2, #2
 81068a0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 81068a4:	687b      	ldr	r3, [r7, #4]
 81068a6:	681b      	ldr	r3, [r3, #0]
 81068a8:	681a      	ldr	r2, [r3, #0]
 81068aa:	687b      	ldr	r3, [r7, #4]
 81068ac:	681b      	ldr	r3, [r3, #0]
 81068ae:	f022 0201 	bic.w	r2, r2, #1
 81068b2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 81068b4:	687b      	ldr	r3, [r7, #4]
 81068b6:	681b      	ldr	r3, [r3, #0]
 81068b8:	689b      	ldr	r3, [r3, #8]
 81068ba:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 81068be:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 81068c0:	687b      	ldr	r3, [r7, #4]
 81068c2:	699b      	ldr	r3, [r3, #24]
 81068c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81068c8:	d119      	bne.n	81068fe <HAL_SPI_Init+0x112>
 81068ca:	687b      	ldr	r3, [r7, #4]
 81068cc:	685b      	ldr	r3, [r3, #4]
 81068ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81068d2:	d103      	bne.n	81068dc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 81068d4:	687b      	ldr	r3, [r7, #4]
 81068d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 81068d8:	2b00      	cmp	r3, #0
 81068da:	d008      	beq.n	81068ee <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 81068dc:	687b      	ldr	r3, [r7, #4]
 81068de:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 81068e0:	2b00      	cmp	r3, #0
 81068e2:	d10c      	bne.n	81068fe <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 81068e4:	687b      	ldr	r3, [r7, #4]
 81068e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 81068e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81068ec:	d107      	bne.n	81068fe <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 81068ee:	687b      	ldr	r3, [r7, #4]
 81068f0:	681b      	ldr	r3, [r3, #0]
 81068f2:	681a      	ldr	r2, [r3, #0]
 81068f4:	687b      	ldr	r3, [r7, #4]
 81068f6:	681b      	ldr	r3, [r3, #0]
 81068f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 81068fc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 81068fe:	687b      	ldr	r3, [r7, #4]
 8106900:	69da      	ldr	r2, [r3, #28]
 8106902:	687b      	ldr	r3, [r7, #4]
 8106904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106906:	431a      	orrs	r2, r3
 8106908:	68bb      	ldr	r3, [r7, #8]
 810690a:	431a      	orrs	r2, r3
 810690c:	687b      	ldr	r3, [r7, #4]
 810690e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106910:	ea42 0103 	orr.w	r1, r2, r3
 8106914:	687b      	ldr	r3, [r7, #4]
 8106916:	68da      	ldr	r2, [r3, #12]
 8106918:	687b      	ldr	r3, [r7, #4]
 810691a:	681b      	ldr	r3, [r3, #0]
 810691c:	430a      	orrs	r2, r1
 810691e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8106920:	687b      	ldr	r3, [r7, #4]
 8106922:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8106924:	687b      	ldr	r3, [r7, #4]
 8106926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106928:	431a      	orrs	r2, r3
 810692a:	687b      	ldr	r3, [r7, #4]
 810692c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810692e:	431a      	orrs	r2, r3
 8106930:	687b      	ldr	r3, [r7, #4]
 8106932:	699b      	ldr	r3, [r3, #24]
 8106934:	431a      	orrs	r2, r3
 8106936:	687b      	ldr	r3, [r7, #4]
 8106938:	691b      	ldr	r3, [r3, #16]
 810693a:	431a      	orrs	r2, r3
 810693c:	687b      	ldr	r3, [r7, #4]
 810693e:	695b      	ldr	r3, [r3, #20]
 8106940:	431a      	orrs	r2, r3
 8106942:	687b      	ldr	r3, [r7, #4]
 8106944:	6a1b      	ldr	r3, [r3, #32]
 8106946:	431a      	orrs	r2, r3
 8106948:	687b      	ldr	r3, [r7, #4]
 810694a:	685b      	ldr	r3, [r3, #4]
 810694c:	431a      	orrs	r2, r3
 810694e:	687b      	ldr	r3, [r7, #4]
 8106950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106952:	431a      	orrs	r2, r3
 8106954:	687b      	ldr	r3, [r7, #4]
 8106956:	689b      	ldr	r3, [r3, #8]
 8106958:	431a      	orrs	r2, r3
 810695a:	687b      	ldr	r3, [r7, #4]
 810695c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810695e:	ea42 0103 	orr.w	r1, r2, r3
 8106962:	687b      	ldr	r3, [r7, #4]
 8106964:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8106966:	687b      	ldr	r3, [r7, #4]
 8106968:	681b      	ldr	r3, [r3, #0]
 810696a:	430a      	orrs	r2, r1
 810696c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 810696e:	687b      	ldr	r3, [r7, #4]
 8106970:	685b      	ldr	r3, [r3, #4]
 8106972:	2b00      	cmp	r3, #0
 8106974:	d113      	bne.n	810699e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8106976:	687b      	ldr	r3, [r7, #4]
 8106978:	681b      	ldr	r3, [r3, #0]
 810697a:	689b      	ldr	r3, [r3, #8]
 810697c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8106980:	687b      	ldr	r3, [r7, #4]
 8106982:	681b      	ldr	r3, [r3, #0]
 8106984:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8106988:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 810698a:	687b      	ldr	r3, [r7, #4]
 810698c:	681b      	ldr	r3, [r3, #0]
 810698e:	689b      	ldr	r3, [r3, #8]
 8106990:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8106994:	687b      	ldr	r3, [r7, #4]
 8106996:	681b      	ldr	r3, [r3, #0]
 8106998:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 810699c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 810699e:	687b      	ldr	r3, [r7, #4]
 81069a0:	681b      	ldr	r3, [r3, #0]
 81069a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 81069a4:	687b      	ldr	r3, [r7, #4]
 81069a6:	681b      	ldr	r3, [r3, #0]
 81069a8:	f022 0201 	bic.w	r2, r2, #1
 81069ac:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 81069ae:	687b      	ldr	r3, [r7, #4]
 81069b0:	685b      	ldr	r3, [r3, #4]
 81069b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 81069b6:	2b00      	cmp	r3, #0
 81069b8:	d00a      	beq.n	81069d0 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 81069ba:	687b      	ldr	r3, [r7, #4]
 81069bc:	681b      	ldr	r3, [r3, #0]
 81069be:	68db      	ldr	r3, [r3, #12]
 81069c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 81069c4:	687b      	ldr	r3, [r7, #4]
 81069c6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 81069c8:	687b      	ldr	r3, [r7, #4]
 81069ca:	681b      	ldr	r3, [r3, #0]
 81069cc:	430a      	orrs	r2, r1
 81069ce:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 81069d0:	687b      	ldr	r3, [r7, #4]
 81069d2:	2200      	movs	r2, #0
 81069d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 81069d8:	687b      	ldr	r3, [r7, #4]
 81069da:	2201      	movs	r2, #1
 81069dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 81069e0:	2300      	movs	r3, #0
}
 81069e2:	4618      	mov	r0, r3
 81069e4:	3710      	adds	r7, #16
 81069e6:	46bd      	mov	sp, r7
 81069e8:	bd80      	pop	{r7, pc}
 81069ea:	bf00      	nop
 81069ec:	40013000 	.word	0x40013000
 81069f0:	40003800 	.word	0x40003800
 81069f4:	40003c00 	.word	0x40003c00

081069f8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81069f8:	b580      	push	{r7, lr}
 81069fa:	b08a      	sub	sp, #40	; 0x28
 81069fc:	af02      	add	r7, sp, #8
 81069fe:	60f8      	str	r0, [r7, #12]
 8106a00:	60b9      	str	r1, [r7, #8]
 8106a02:	603b      	str	r3, [r7, #0]
 8106a04:	4613      	mov	r3, r2
 8106a06:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8106a08:	68fb      	ldr	r3, [r7, #12]
 8106a0a:	681b      	ldr	r3, [r3, #0]
 8106a0c:	3320      	adds	r3, #32
 8106a0e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8106a10:	2300      	movs	r3, #0
 8106a12:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8106a14:	68fb      	ldr	r3, [r7, #12]
 8106a16:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8106a1a:	2b01      	cmp	r3, #1
 8106a1c:	d101      	bne.n	8106a22 <HAL_SPI_Transmit+0x2a>
 8106a1e:	2302      	movs	r3, #2
 8106a20:	e1d4      	b.n	8106dcc <HAL_SPI_Transmit+0x3d4>
 8106a22:	68fb      	ldr	r3, [r7, #12]
 8106a24:	2201      	movs	r2, #1
 8106a26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8106a2a:	f7fb f8cd 	bl	8101bc8 <HAL_GetTick>
 8106a2e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8106a30:	68fb      	ldr	r3, [r7, #12]
 8106a32:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8106a36:	b2db      	uxtb	r3, r3
 8106a38:	2b01      	cmp	r3, #1
 8106a3a:	d007      	beq.n	8106a4c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8106a3c:	2302      	movs	r3, #2
 8106a3e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8106a40:	68fb      	ldr	r3, [r7, #12]
 8106a42:	2200      	movs	r2, #0
 8106a44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8106a48:	7efb      	ldrb	r3, [r7, #27]
 8106a4a:	e1bf      	b.n	8106dcc <HAL_SPI_Transmit+0x3d4>
  }

  if ((pData == NULL) || (Size == 0UL))
 8106a4c:	68bb      	ldr	r3, [r7, #8]
 8106a4e:	2b00      	cmp	r3, #0
 8106a50:	d002      	beq.n	8106a58 <HAL_SPI_Transmit+0x60>
 8106a52:	88fb      	ldrh	r3, [r7, #6]
 8106a54:	2b00      	cmp	r3, #0
 8106a56:	d107      	bne.n	8106a68 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8106a58:	2301      	movs	r3, #1
 8106a5a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8106a5c:	68fb      	ldr	r3, [r7, #12]
 8106a5e:	2200      	movs	r2, #0
 8106a60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8106a64:	7efb      	ldrb	r3, [r7, #27]
 8106a66:	e1b1      	b.n	8106dcc <HAL_SPI_Transmit+0x3d4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8106a68:	68fb      	ldr	r3, [r7, #12]
 8106a6a:	2203      	movs	r2, #3
 8106a6c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8106a70:	68fb      	ldr	r3, [r7, #12]
 8106a72:	2200      	movs	r2, #0
 8106a74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8106a78:	68fb      	ldr	r3, [r7, #12]
 8106a7a:	68ba      	ldr	r2, [r7, #8]
 8106a7c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8106a7e:	68fb      	ldr	r3, [r7, #12]
 8106a80:	88fa      	ldrh	r2, [r7, #6]
 8106a82:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8106a86:	68fb      	ldr	r3, [r7, #12]
 8106a88:	88fa      	ldrh	r2, [r7, #6]
 8106a8a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8106a8e:	68fb      	ldr	r3, [r7, #12]
 8106a90:	2200      	movs	r2, #0
 8106a92:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8106a94:	68fb      	ldr	r3, [r7, #12]
 8106a96:	2200      	movs	r2, #0
 8106a98:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8106a9c:	68fb      	ldr	r3, [r7, #12]
 8106a9e:	2200      	movs	r2, #0
 8106aa0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8106aa4:	68fb      	ldr	r3, [r7, #12]
 8106aa6:	2200      	movs	r2, #0
 8106aa8:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8106aaa:	68fb      	ldr	r3, [r7, #12]
 8106aac:	2200      	movs	r2, #0
 8106aae:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8106ab0:	68fb      	ldr	r3, [r7, #12]
 8106ab2:	689b      	ldr	r3, [r3, #8]
 8106ab4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8106ab8:	d107      	bne.n	8106aca <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8106aba:	68fb      	ldr	r3, [r7, #12]
 8106abc:	681b      	ldr	r3, [r3, #0]
 8106abe:	681a      	ldr	r2, [r3, #0]
 8106ac0:	68fb      	ldr	r3, [r7, #12]
 8106ac2:	681b      	ldr	r3, [r3, #0]
 8106ac4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8106ac8:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8106aca:	68fb      	ldr	r3, [r7, #12]
 8106acc:	681b      	ldr	r3, [r3, #0]
 8106ace:	685b      	ldr	r3, [r3, #4]
 8106ad0:	0c1b      	lsrs	r3, r3, #16
 8106ad2:	041b      	lsls	r3, r3, #16
 8106ad4:	88f9      	ldrh	r1, [r7, #6]
 8106ad6:	68fa      	ldr	r2, [r7, #12]
 8106ad8:	6812      	ldr	r2, [r2, #0]
 8106ada:	430b      	orrs	r3, r1
 8106adc:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8106ade:	68fb      	ldr	r3, [r7, #12]
 8106ae0:	681b      	ldr	r3, [r3, #0]
 8106ae2:	681a      	ldr	r2, [r3, #0]
 8106ae4:	68fb      	ldr	r3, [r7, #12]
 8106ae6:	681b      	ldr	r3, [r3, #0]
 8106ae8:	f042 0201 	orr.w	r2, r2, #1
 8106aec:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8106aee:	68fb      	ldr	r3, [r7, #12]
 8106af0:	685b      	ldr	r3, [r3, #4]
 8106af2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8106af6:	d107      	bne.n	8106b08 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8106af8:	68fb      	ldr	r3, [r7, #12]
 8106afa:	681b      	ldr	r3, [r3, #0]
 8106afc:	681a      	ldr	r2, [r3, #0]
 8106afe:	68fb      	ldr	r3, [r7, #12]
 8106b00:	681b      	ldr	r3, [r3, #0]
 8106b02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8106b06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8106b08:	68fb      	ldr	r3, [r7, #12]
 8106b0a:	68db      	ldr	r3, [r3, #12]
 8106b0c:	2b0f      	cmp	r3, #15
 8106b0e:	d947      	bls.n	8106ba0 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8106b10:	e03f      	b.n	8106b92 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8106b12:	68fb      	ldr	r3, [r7, #12]
 8106b14:	681b      	ldr	r3, [r3, #0]
 8106b16:	695b      	ldr	r3, [r3, #20]
 8106b18:	f003 0302 	and.w	r3, r3, #2
 8106b1c:	2b02      	cmp	r3, #2
 8106b1e:	d114      	bne.n	8106b4a <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8106b20:	68fb      	ldr	r3, [r7, #12]
 8106b22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8106b24:	68fb      	ldr	r3, [r7, #12]
 8106b26:	681b      	ldr	r3, [r3, #0]
 8106b28:	6812      	ldr	r2, [r2, #0]
 8106b2a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8106b2c:	68fb      	ldr	r3, [r7, #12]
 8106b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106b30:	1d1a      	adds	r2, r3, #4
 8106b32:	68fb      	ldr	r3, [r7, #12]
 8106b34:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8106b36:	68fb      	ldr	r3, [r7, #12]
 8106b38:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8106b3c:	b29b      	uxth	r3, r3
 8106b3e:	3b01      	subs	r3, #1
 8106b40:	b29a      	uxth	r2, r3
 8106b42:	68fb      	ldr	r3, [r7, #12]
 8106b44:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8106b48:	e023      	b.n	8106b92 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8106b4a:	f7fb f83d 	bl	8101bc8 <HAL_GetTick>
 8106b4e:	4602      	mov	r2, r0
 8106b50:	697b      	ldr	r3, [r7, #20]
 8106b52:	1ad3      	subs	r3, r2, r3
 8106b54:	683a      	ldr	r2, [r7, #0]
 8106b56:	429a      	cmp	r2, r3
 8106b58:	d803      	bhi.n	8106b62 <HAL_SPI_Transmit+0x16a>
 8106b5a:	683b      	ldr	r3, [r7, #0]
 8106b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106b60:	d102      	bne.n	8106b68 <HAL_SPI_Transmit+0x170>
 8106b62:	683b      	ldr	r3, [r7, #0]
 8106b64:	2b00      	cmp	r3, #0
 8106b66:	d114      	bne.n	8106b92 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8106b68:	68f8      	ldr	r0, [r7, #12]
 8106b6a:	f000 fcf2 	bl	8107552 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8106b6e:	68fb      	ldr	r3, [r7, #12]
 8106b70:	2200      	movs	r2, #0
 8106b72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8106b76:	68fb      	ldr	r3, [r7, #12]
 8106b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106b7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8106b80:	68fb      	ldr	r3, [r7, #12]
 8106b82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8106b86:	68fb      	ldr	r3, [r7, #12]
 8106b88:	2201      	movs	r2, #1
 8106b8a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8106b8e:	2303      	movs	r3, #3
 8106b90:	e11c      	b.n	8106dcc <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 8106b92:	68fb      	ldr	r3, [r7, #12]
 8106b94:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8106b98:	b29b      	uxth	r3, r3
 8106b9a:	2b00      	cmp	r3, #0
 8106b9c:	d1b9      	bne.n	8106b12 <HAL_SPI_Transmit+0x11a>
 8106b9e:	e0ef      	b.n	8106d80 <HAL_SPI_Transmit+0x388>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8106ba0:	68fb      	ldr	r3, [r7, #12]
 8106ba2:	68db      	ldr	r3, [r3, #12]
 8106ba4:	2b07      	cmp	r3, #7
 8106ba6:	f240 80e4 	bls.w	8106d72 <HAL_SPI_Transmit+0x37a>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8106baa:	e05d      	b.n	8106c68 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8106bac:	68fb      	ldr	r3, [r7, #12]
 8106bae:	681b      	ldr	r3, [r3, #0]
 8106bb0:	695b      	ldr	r3, [r3, #20]
 8106bb2:	f003 0302 	and.w	r3, r3, #2
 8106bb6:	2b02      	cmp	r3, #2
 8106bb8:	d132      	bne.n	8106c20 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8106bba:	68fb      	ldr	r3, [r7, #12]
 8106bbc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8106bc0:	b29b      	uxth	r3, r3
 8106bc2:	2b01      	cmp	r3, #1
 8106bc4:	d918      	bls.n	8106bf8 <HAL_SPI_Transmit+0x200>
 8106bc6:	68fb      	ldr	r3, [r7, #12]
 8106bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106bca:	2b00      	cmp	r3, #0
 8106bcc:	d014      	beq.n	8106bf8 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8106bce:	68fb      	ldr	r3, [r7, #12]
 8106bd0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8106bd2:	68fb      	ldr	r3, [r7, #12]
 8106bd4:	681b      	ldr	r3, [r3, #0]
 8106bd6:	6812      	ldr	r2, [r2, #0]
 8106bd8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8106bda:	68fb      	ldr	r3, [r7, #12]
 8106bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106bde:	1d1a      	adds	r2, r3, #4
 8106be0:	68fb      	ldr	r3, [r7, #12]
 8106be2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8106be4:	68fb      	ldr	r3, [r7, #12]
 8106be6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8106bea:	b29b      	uxth	r3, r3
 8106bec:	3b02      	subs	r3, #2
 8106bee:	b29a      	uxth	r2, r3
 8106bf0:	68fb      	ldr	r3, [r7, #12]
 8106bf2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8106bf6:	e037      	b.n	8106c68 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8106bf8:	68fb      	ldr	r3, [r7, #12]
 8106bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106bfc:	881a      	ldrh	r2, [r3, #0]
 8106bfe:	69fb      	ldr	r3, [r7, #28]
 8106c00:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8106c02:	68fb      	ldr	r3, [r7, #12]
 8106c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106c06:	1c9a      	adds	r2, r3, #2
 8106c08:	68fb      	ldr	r3, [r7, #12]
 8106c0a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8106c0c:	68fb      	ldr	r3, [r7, #12]
 8106c0e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8106c12:	b29b      	uxth	r3, r3
 8106c14:	3b01      	subs	r3, #1
 8106c16:	b29a      	uxth	r2, r3
 8106c18:	68fb      	ldr	r3, [r7, #12]
 8106c1a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8106c1e:	e023      	b.n	8106c68 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8106c20:	f7fa ffd2 	bl	8101bc8 <HAL_GetTick>
 8106c24:	4602      	mov	r2, r0
 8106c26:	697b      	ldr	r3, [r7, #20]
 8106c28:	1ad3      	subs	r3, r2, r3
 8106c2a:	683a      	ldr	r2, [r7, #0]
 8106c2c:	429a      	cmp	r2, r3
 8106c2e:	d803      	bhi.n	8106c38 <HAL_SPI_Transmit+0x240>
 8106c30:	683b      	ldr	r3, [r7, #0]
 8106c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106c36:	d102      	bne.n	8106c3e <HAL_SPI_Transmit+0x246>
 8106c38:	683b      	ldr	r3, [r7, #0]
 8106c3a:	2b00      	cmp	r3, #0
 8106c3c:	d114      	bne.n	8106c68 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8106c3e:	68f8      	ldr	r0, [r7, #12]
 8106c40:	f000 fc87 	bl	8107552 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8106c44:	68fb      	ldr	r3, [r7, #12]
 8106c46:	2200      	movs	r2, #0
 8106c48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8106c4c:	68fb      	ldr	r3, [r7, #12]
 8106c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106c52:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8106c56:	68fb      	ldr	r3, [r7, #12]
 8106c58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8106c5c:	68fb      	ldr	r3, [r7, #12]
 8106c5e:	2201      	movs	r2, #1
 8106c60:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8106c64:	2303      	movs	r3, #3
 8106c66:	e0b1      	b.n	8106dcc <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 8106c68:	68fb      	ldr	r3, [r7, #12]
 8106c6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8106c6e:	b29b      	uxth	r3, r3
 8106c70:	2b00      	cmp	r3, #0
 8106c72:	d19b      	bne.n	8106bac <HAL_SPI_Transmit+0x1b4>
 8106c74:	e084      	b.n	8106d80 <HAL_SPI_Transmit+0x388>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8106c76:	68fb      	ldr	r3, [r7, #12]
 8106c78:	681b      	ldr	r3, [r3, #0]
 8106c7a:	695b      	ldr	r3, [r3, #20]
 8106c7c:	f003 0302 	and.w	r3, r3, #2
 8106c80:	2b02      	cmp	r3, #2
 8106c82:	d152      	bne.n	8106d2a <HAL_SPI_Transmit+0x332>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8106c84:	68fb      	ldr	r3, [r7, #12]
 8106c86:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8106c8a:	b29b      	uxth	r3, r3
 8106c8c:	2b03      	cmp	r3, #3
 8106c8e:	d918      	bls.n	8106cc2 <HAL_SPI_Transmit+0x2ca>
 8106c90:	68fb      	ldr	r3, [r7, #12]
 8106c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106c94:	2b40      	cmp	r3, #64	; 0x40
 8106c96:	d914      	bls.n	8106cc2 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8106c98:	68fb      	ldr	r3, [r7, #12]
 8106c9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8106c9c:	68fb      	ldr	r3, [r7, #12]
 8106c9e:	681b      	ldr	r3, [r3, #0]
 8106ca0:	6812      	ldr	r2, [r2, #0]
 8106ca2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8106ca4:	68fb      	ldr	r3, [r7, #12]
 8106ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106ca8:	1d1a      	adds	r2, r3, #4
 8106caa:	68fb      	ldr	r3, [r7, #12]
 8106cac:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8106cae:	68fb      	ldr	r3, [r7, #12]
 8106cb0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8106cb4:	b29b      	uxth	r3, r3
 8106cb6:	3b04      	subs	r3, #4
 8106cb8:	b29a      	uxth	r2, r3
 8106cba:	68fb      	ldr	r3, [r7, #12]
 8106cbc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8106cc0:	e057      	b.n	8106d72 <HAL_SPI_Transmit+0x37a>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8106cc2:	68fb      	ldr	r3, [r7, #12]
 8106cc4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8106cc8:	b29b      	uxth	r3, r3
 8106cca:	2b01      	cmp	r3, #1
 8106ccc:	d917      	bls.n	8106cfe <HAL_SPI_Transmit+0x306>
 8106cce:	68fb      	ldr	r3, [r7, #12]
 8106cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106cd2:	2b00      	cmp	r3, #0
 8106cd4:	d013      	beq.n	8106cfe <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8106cd6:	68fb      	ldr	r3, [r7, #12]
 8106cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106cda:	881a      	ldrh	r2, [r3, #0]
 8106cdc:	69fb      	ldr	r3, [r7, #28]
 8106cde:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8106ce0:	68fb      	ldr	r3, [r7, #12]
 8106ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106ce4:	1c9a      	adds	r2, r3, #2
 8106ce6:	68fb      	ldr	r3, [r7, #12]
 8106ce8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8106cea:	68fb      	ldr	r3, [r7, #12]
 8106cec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8106cf0:	b29b      	uxth	r3, r3
 8106cf2:	3b02      	subs	r3, #2
 8106cf4:	b29a      	uxth	r2, r3
 8106cf6:	68fb      	ldr	r3, [r7, #12]
 8106cf8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8106cfc:	e039      	b.n	8106d72 <HAL_SPI_Transmit+0x37a>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8106cfe:	68fb      	ldr	r3, [r7, #12]
 8106d00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8106d02:	68fb      	ldr	r3, [r7, #12]
 8106d04:	681b      	ldr	r3, [r3, #0]
 8106d06:	3320      	adds	r3, #32
 8106d08:	7812      	ldrb	r2, [r2, #0]
 8106d0a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8106d0c:	68fb      	ldr	r3, [r7, #12]
 8106d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106d10:	1c5a      	adds	r2, r3, #1
 8106d12:	68fb      	ldr	r3, [r7, #12]
 8106d14:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8106d16:	68fb      	ldr	r3, [r7, #12]
 8106d18:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8106d1c:	b29b      	uxth	r3, r3
 8106d1e:	3b01      	subs	r3, #1
 8106d20:	b29a      	uxth	r2, r3
 8106d22:	68fb      	ldr	r3, [r7, #12]
 8106d24:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8106d28:	e023      	b.n	8106d72 <HAL_SPI_Transmit+0x37a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8106d2a:	f7fa ff4d 	bl	8101bc8 <HAL_GetTick>
 8106d2e:	4602      	mov	r2, r0
 8106d30:	697b      	ldr	r3, [r7, #20]
 8106d32:	1ad3      	subs	r3, r2, r3
 8106d34:	683a      	ldr	r2, [r7, #0]
 8106d36:	429a      	cmp	r2, r3
 8106d38:	d803      	bhi.n	8106d42 <HAL_SPI_Transmit+0x34a>
 8106d3a:	683b      	ldr	r3, [r7, #0]
 8106d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106d40:	d102      	bne.n	8106d48 <HAL_SPI_Transmit+0x350>
 8106d42:	683b      	ldr	r3, [r7, #0]
 8106d44:	2b00      	cmp	r3, #0
 8106d46:	d114      	bne.n	8106d72 <HAL_SPI_Transmit+0x37a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8106d48:	68f8      	ldr	r0, [r7, #12]
 8106d4a:	f000 fc02 	bl	8107552 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8106d4e:	68fb      	ldr	r3, [r7, #12]
 8106d50:	2200      	movs	r2, #0
 8106d52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8106d56:	68fb      	ldr	r3, [r7, #12]
 8106d58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106d5c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8106d60:	68fb      	ldr	r3, [r7, #12]
 8106d62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8106d66:	68fb      	ldr	r3, [r7, #12]
 8106d68:	2201      	movs	r2, #1
 8106d6a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8106d6e:	2303      	movs	r3, #3
 8106d70:	e02c      	b.n	8106dcc <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 8106d72:	68fb      	ldr	r3, [r7, #12]
 8106d74:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8106d78:	b29b      	uxth	r3, r3
 8106d7a:	2b00      	cmp	r3, #0
 8106d7c:	f47f af7b 	bne.w	8106c76 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8106d80:	683b      	ldr	r3, [r7, #0]
 8106d82:	9300      	str	r3, [sp, #0]
 8106d84:	697b      	ldr	r3, [r7, #20]
 8106d86:	2200      	movs	r2, #0
 8106d88:	2108      	movs	r1, #8
 8106d8a:	68f8      	ldr	r0, [r7, #12]
 8106d8c:	f000 fc81 	bl	8107692 <SPI_WaitOnFlagUntilTimeout>
 8106d90:	4603      	mov	r3, r0
 8106d92:	2b00      	cmp	r3, #0
 8106d94:	d007      	beq.n	8106da6 <HAL_SPI_Transmit+0x3ae>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8106d96:	68fb      	ldr	r3, [r7, #12]
 8106d98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106d9c:	f043 0220 	orr.w	r2, r3, #32
 8106da0:	68fb      	ldr	r3, [r7, #12]
 8106da2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8106da6:	68f8      	ldr	r0, [r7, #12]
 8106da8:	f000 fbd3 	bl	8107552 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8106dac:	68fb      	ldr	r3, [r7, #12]
 8106dae:	2200      	movs	r2, #0
 8106db0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8106db4:	68fb      	ldr	r3, [r7, #12]
 8106db6:	2201      	movs	r2, #1
 8106db8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8106dbc:	68fb      	ldr	r3, [r7, #12]
 8106dbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106dc2:	2b00      	cmp	r3, #0
 8106dc4:	d001      	beq.n	8106dca <HAL_SPI_Transmit+0x3d2>
  {
    return HAL_ERROR;
 8106dc6:	2301      	movs	r3, #1
 8106dc8:	e000      	b.n	8106dcc <HAL_SPI_Transmit+0x3d4>
  }
  return errorcode;
 8106dca:	7efb      	ldrb	r3, [r7, #27]
}
 8106dcc:	4618      	mov	r0, r3
 8106dce:	3720      	adds	r7, #32
 8106dd0:	46bd      	mov	sp, r7
 8106dd2:	bd80      	pop	{r7, pc}

08106dd4 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8106dd4:	b580      	push	{r7, lr}
 8106dd6:	b08a      	sub	sp, #40	; 0x28
 8106dd8:	af02      	add	r7, sp, #8
 8106dda:	60f8      	str	r0, [r7, #12]
 8106ddc:	60b9      	str	r1, [r7, #8]
 8106dde:	603b      	str	r3, [r7, #0]
 8106de0:	4613      	mov	r3, r2
 8106de2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8106de4:	2300      	movs	r3, #0
 8106de6:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8106de8:	68fb      	ldr	r3, [r7, #12]
 8106dea:	681b      	ldr	r3, [r3, #0]
 8106dec:	3330      	adds	r3, #48	; 0x30
 8106dee:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8106df0:	68fb      	ldr	r3, [r7, #12]
 8106df2:	685b      	ldr	r3, [r3, #4]
 8106df4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8106df8:	d112      	bne.n	8106e20 <HAL_SPI_Receive+0x4c>
 8106dfa:	68fb      	ldr	r3, [r7, #12]
 8106dfc:	689b      	ldr	r3, [r3, #8]
 8106dfe:	2b00      	cmp	r3, #0
 8106e00:	d10e      	bne.n	8106e20 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8106e02:	68fb      	ldr	r3, [r7, #12]
 8106e04:	2204      	movs	r2, #4
 8106e06:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8106e0a:	88fa      	ldrh	r2, [r7, #6]
 8106e0c:	683b      	ldr	r3, [r7, #0]
 8106e0e:	9300      	str	r3, [sp, #0]
 8106e10:	4613      	mov	r3, r2
 8106e12:	68ba      	ldr	r2, [r7, #8]
 8106e14:	68b9      	ldr	r1, [r7, #8]
 8106e16:	68f8      	ldr	r0, [r7, #12]
 8106e18:	f000 f976 	bl	8107108 <HAL_SPI_TransmitReceive>
 8106e1c:	4603      	mov	r3, r0
 8106e1e:	e16f      	b.n	8107100 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8106e20:	68fb      	ldr	r3, [r7, #12]
 8106e22:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8106e26:	2b01      	cmp	r3, #1
 8106e28:	d101      	bne.n	8106e2e <HAL_SPI_Receive+0x5a>
 8106e2a:	2302      	movs	r3, #2
 8106e2c:	e168      	b.n	8107100 <HAL_SPI_Receive+0x32c>
 8106e2e:	68fb      	ldr	r3, [r7, #12]
 8106e30:	2201      	movs	r2, #1
 8106e32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8106e36:	f7fa fec7 	bl	8101bc8 <HAL_GetTick>
 8106e3a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8106e3c:	68fb      	ldr	r3, [r7, #12]
 8106e3e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8106e42:	b2db      	uxtb	r3, r3
 8106e44:	2b01      	cmp	r3, #1
 8106e46:	d007      	beq.n	8106e58 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8106e48:	2302      	movs	r3, #2
 8106e4a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8106e4c:	68fb      	ldr	r3, [r7, #12]
 8106e4e:	2200      	movs	r2, #0
 8106e50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8106e54:	7ffb      	ldrb	r3, [r7, #31]
 8106e56:	e153      	b.n	8107100 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8106e58:	68bb      	ldr	r3, [r7, #8]
 8106e5a:	2b00      	cmp	r3, #0
 8106e5c:	d002      	beq.n	8106e64 <HAL_SPI_Receive+0x90>
 8106e5e:	88fb      	ldrh	r3, [r7, #6]
 8106e60:	2b00      	cmp	r3, #0
 8106e62:	d107      	bne.n	8106e74 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8106e64:	2301      	movs	r3, #1
 8106e66:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8106e68:	68fb      	ldr	r3, [r7, #12]
 8106e6a:	2200      	movs	r2, #0
 8106e6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8106e70:	7ffb      	ldrb	r3, [r7, #31]
 8106e72:	e145      	b.n	8107100 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8106e74:	68fb      	ldr	r3, [r7, #12]
 8106e76:	2204      	movs	r2, #4
 8106e78:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8106e7c:	68fb      	ldr	r3, [r7, #12]
 8106e7e:	2200      	movs	r2, #0
 8106e80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8106e84:	68fb      	ldr	r3, [r7, #12]
 8106e86:	68ba      	ldr	r2, [r7, #8]
 8106e88:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8106e8a:	68fb      	ldr	r3, [r7, #12]
 8106e8c:	88fa      	ldrh	r2, [r7, #6]
 8106e8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8106e92:	68fb      	ldr	r3, [r7, #12]
 8106e94:	88fa      	ldrh	r2, [r7, #6]
 8106e96:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8106e9a:	68fb      	ldr	r3, [r7, #12]
 8106e9c:	2200      	movs	r2, #0
 8106e9e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8106ea0:	68fb      	ldr	r3, [r7, #12]
 8106ea2:	2200      	movs	r2, #0
 8106ea4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8106ea8:	68fb      	ldr	r3, [r7, #12]
 8106eaa:	2200      	movs	r2, #0
 8106eac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8106eb0:	68fb      	ldr	r3, [r7, #12]
 8106eb2:	2200      	movs	r2, #0
 8106eb4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8106eb6:	68fb      	ldr	r3, [r7, #12]
 8106eb8:	2200      	movs	r2, #0
 8106eba:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8106ebc:	68fb      	ldr	r3, [r7, #12]
 8106ebe:	689b      	ldr	r3, [r3, #8]
 8106ec0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8106ec4:	d107      	bne.n	8106ed6 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8106ec6:	68fb      	ldr	r3, [r7, #12]
 8106ec8:	681b      	ldr	r3, [r3, #0]
 8106eca:	681a      	ldr	r2, [r3, #0]
 8106ecc:	68fb      	ldr	r3, [r7, #12]
 8106ece:	681b      	ldr	r3, [r3, #0]
 8106ed0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8106ed4:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8106ed6:	68fb      	ldr	r3, [r7, #12]
 8106ed8:	681b      	ldr	r3, [r3, #0]
 8106eda:	685b      	ldr	r3, [r3, #4]
 8106edc:	0c1b      	lsrs	r3, r3, #16
 8106ede:	041b      	lsls	r3, r3, #16
 8106ee0:	88f9      	ldrh	r1, [r7, #6]
 8106ee2:	68fa      	ldr	r2, [r7, #12]
 8106ee4:	6812      	ldr	r2, [r2, #0]
 8106ee6:	430b      	orrs	r3, r1
 8106ee8:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8106eea:	68fb      	ldr	r3, [r7, #12]
 8106eec:	681b      	ldr	r3, [r3, #0]
 8106eee:	681a      	ldr	r2, [r3, #0]
 8106ef0:	68fb      	ldr	r3, [r7, #12]
 8106ef2:	681b      	ldr	r3, [r3, #0]
 8106ef4:	f042 0201 	orr.w	r2, r2, #1
 8106ef8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8106efa:	68fb      	ldr	r3, [r7, #12]
 8106efc:	685b      	ldr	r3, [r3, #4]
 8106efe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8106f02:	d107      	bne.n	8106f14 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8106f04:	68fb      	ldr	r3, [r7, #12]
 8106f06:	681b      	ldr	r3, [r3, #0]
 8106f08:	681a      	ldr	r2, [r3, #0]
 8106f0a:	68fb      	ldr	r3, [r7, #12]
 8106f0c:	681b      	ldr	r3, [r3, #0]
 8106f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8106f12:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8106f14:	68fb      	ldr	r3, [r7, #12]
 8106f16:	68db      	ldr	r3, [r3, #12]
 8106f18:	2b0f      	cmp	r3, #15
 8106f1a:	d948      	bls.n	8106fae <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8106f1c:	e040      	b.n	8106fa0 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8106f1e:	68fb      	ldr	r3, [r7, #12]
 8106f20:	681b      	ldr	r3, [r3, #0]
 8106f22:	695a      	ldr	r2, [r3, #20]
 8106f24:	f248 0308 	movw	r3, #32776	; 0x8008
 8106f28:	4013      	ands	r3, r2
 8106f2a:	2b00      	cmp	r3, #0
 8106f2c:	d014      	beq.n	8106f58 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8106f2e:	68fb      	ldr	r3, [r7, #12]
 8106f30:	681a      	ldr	r2, [r3, #0]
 8106f32:	68fb      	ldr	r3, [r7, #12]
 8106f34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106f36:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8106f38:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8106f3a:	68fb      	ldr	r3, [r7, #12]
 8106f3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106f3e:	1d1a      	adds	r2, r3, #4
 8106f40:	68fb      	ldr	r3, [r7, #12]
 8106f42:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8106f44:	68fb      	ldr	r3, [r7, #12]
 8106f46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8106f4a:	b29b      	uxth	r3, r3
 8106f4c:	3b01      	subs	r3, #1
 8106f4e:	b29a      	uxth	r2, r3
 8106f50:	68fb      	ldr	r3, [r7, #12]
 8106f52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8106f56:	e023      	b.n	8106fa0 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8106f58:	f7fa fe36 	bl	8101bc8 <HAL_GetTick>
 8106f5c:	4602      	mov	r2, r0
 8106f5e:	697b      	ldr	r3, [r7, #20]
 8106f60:	1ad3      	subs	r3, r2, r3
 8106f62:	683a      	ldr	r2, [r7, #0]
 8106f64:	429a      	cmp	r2, r3
 8106f66:	d803      	bhi.n	8106f70 <HAL_SPI_Receive+0x19c>
 8106f68:	683b      	ldr	r3, [r7, #0]
 8106f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106f6e:	d102      	bne.n	8106f76 <HAL_SPI_Receive+0x1a2>
 8106f70:	683b      	ldr	r3, [r7, #0]
 8106f72:	2b00      	cmp	r3, #0
 8106f74:	d114      	bne.n	8106fa0 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8106f76:	68f8      	ldr	r0, [r7, #12]
 8106f78:	f000 faeb 	bl	8107552 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8106f7c:	68fb      	ldr	r3, [r7, #12]
 8106f7e:	2200      	movs	r2, #0
 8106f80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8106f84:	68fb      	ldr	r3, [r7, #12]
 8106f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106f8a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8106f8e:	68fb      	ldr	r3, [r7, #12]
 8106f90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8106f94:	68fb      	ldr	r3, [r7, #12]
 8106f96:	2201      	movs	r2, #1
 8106f98:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8106f9c:	2303      	movs	r3, #3
 8106f9e:	e0af      	b.n	8107100 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8106fa0:	68fb      	ldr	r3, [r7, #12]
 8106fa2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8106fa6:	b29b      	uxth	r3, r3
 8106fa8:	2b00      	cmp	r3, #0
 8106faa:	d1b8      	bne.n	8106f1e <HAL_SPI_Receive+0x14a>
 8106fac:	e095      	b.n	81070da <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8106fae:	68fb      	ldr	r3, [r7, #12]
 8106fb0:	68db      	ldr	r3, [r3, #12]
 8106fb2:	2b07      	cmp	r3, #7
 8106fb4:	f240 808b 	bls.w	81070ce <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8106fb8:	e03f      	b.n	810703a <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8106fba:	68fb      	ldr	r3, [r7, #12]
 8106fbc:	681b      	ldr	r3, [r3, #0]
 8106fbe:	695b      	ldr	r3, [r3, #20]
 8106fc0:	f003 0301 	and.w	r3, r3, #1
 8106fc4:	2b01      	cmp	r3, #1
 8106fc6:	d114      	bne.n	8106ff2 <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8106fc8:	68fb      	ldr	r3, [r7, #12]
 8106fca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106fcc:	69ba      	ldr	r2, [r7, #24]
 8106fce:	8812      	ldrh	r2, [r2, #0]
 8106fd0:	b292      	uxth	r2, r2
 8106fd2:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8106fd4:	68fb      	ldr	r3, [r7, #12]
 8106fd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106fd8:	1c9a      	adds	r2, r3, #2
 8106fda:	68fb      	ldr	r3, [r7, #12]
 8106fdc:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8106fde:	68fb      	ldr	r3, [r7, #12]
 8106fe0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8106fe4:	b29b      	uxth	r3, r3
 8106fe6:	3b01      	subs	r3, #1
 8106fe8:	b29a      	uxth	r2, r3
 8106fea:	68fb      	ldr	r3, [r7, #12]
 8106fec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8106ff0:	e023      	b.n	810703a <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8106ff2:	f7fa fde9 	bl	8101bc8 <HAL_GetTick>
 8106ff6:	4602      	mov	r2, r0
 8106ff8:	697b      	ldr	r3, [r7, #20]
 8106ffa:	1ad3      	subs	r3, r2, r3
 8106ffc:	683a      	ldr	r2, [r7, #0]
 8106ffe:	429a      	cmp	r2, r3
 8107000:	d803      	bhi.n	810700a <HAL_SPI_Receive+0x236>
 8107002:	683b      	ldr	r3, [r7, #0]
 8107004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107008:	d102      	bne.n	8107010 <HAL_SPI_Receive+0x23c>
 810700a:	683b      	ldr	r3, [r7, #0]
 810700c:	2b00      	cmp	r3, #0
 810700e:	d114      	bne.n	810703a <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8107010:	68f8      	ldr	r0, [r7, #12]
 8107012:	f000 fa9e 	bl	8107552 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8107016:	68fb      	ldr	r3, [r7, #12]
 8107018:	2200      	movs	r2, #0
 810701a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810701e:	68fb      	ldr	r3, [r7, #12]
 8107020:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107024:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8107028:	68fb      	ldr	r3, [r7, #12]
 810702a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 810702e:	68fb      	ldr	r3, [r7, #12]
 8107030:	2201      	movs	r2, #1
 8107032:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8107036:	2303      	movs	r3, #3
 8107038:	e062      	b.n	8107100 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 810703a:	68fb      	ldr	r3, [r7, #12]
 810703c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8107040:	b29b      	uxth	r3, r3
 8107042:	2b00      	cmp	r3, #0
 8107044:	d1b9      	bne.n	8106fba <HAL_SPI_Receive+0x1e6>
 8107046:	e048      	b.n	81070da <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8107048:	68fb      	ldr	r3, [r7, #12]
 810704a:	681b      	ldr	r3, [r3, #0]
 810704c:	695b      	ldr	r3, [r3, #20]
 810704e:	f003 0301 	and.w	r3, r3, #1
 8107052:	2b01      	cmp	r3, #1
 8107054:	d117      	bne.n	8107086 <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8107056:	68fb      	ldr	r3, [r7, #12]
 8107058:	681b      	ldr	r3, [r3, #0]
 810705a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 810705e:	68fb      	ldr	r3, [r7, #12]
 8107060:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107062:	7812      	ldrb	r2, [r2, #0]
 8107064:	b2d2      	uxtb	r2, r2
 8107066:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8107068:	68fb      	ldr	r3, [r7, #12]
 810706a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810706c:	1c5a      	adds	r2, r3, #1
 810706e:	68fb      	ldr	r3, [r7, #12]
 8107070:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8107072:	68fb      	ldr	r3, [r7, #12]
 8107074:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8107078:	b29b      	uxth	r3, r3
 810707a:	3b01      	subs	r3, #1
 810707c:	b29a      	uxth	r2, r3
 810707e:	68fb      	ldr	r3, [r7, #12]
 8107080:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8107084:	e023      	b.n	81070ce <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8107086:	f7fa fd9f 	bl	8101bc8 <HAL_GetTick>
 810708a:	4602      	mov	r2, r0
 810708c:	697b      	ldr	r3, [r7, #20]
 810708e:	1ad3      	subs	r3, r2, r3
 8107090:	683a      	ldr	r2, [r7, #0]
 8107092:	429a      	cmp	r2, r3
 8107094:	d803      	bhi.n	810709e <HAL_SPI_Receive+0x2ca>
 8107096:	683b      	ldr	r3, [r7, #0]
 8107098:	f1b3 3fff 	cmp.w	r3, #4294967295
 810709c:	d102      	bne.n	81070a4 <HAL_SPI_Receive+0x2d0>
 810709e:	683b      	ldr	r3, [r7, #0]
 81070a0:	2b00      	cmp	r3, #0
 81070a2:	d114      	bne.n	81070ce <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 81070a4:	68f8      	ldr	r0, [r7, #12]
 81070a6:	f000 fa54 	bl	8107552 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 81070aa:	68fb      	ldr	r3, [r7, #12]
 81070ac:	2200      	movs	r2, #0
 81070ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81070b2:	68fb      	ldr	r3, [r7, #12]
 81070b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81070b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81070bc:	68fb      	ldr	r3, [r7, #12]
 81070be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 81070c2:	68fb      	ldr	r3, [r7, #12]
 81070c4:	2201      	movs	r2, #1
 81070c6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 81070ca:	2303      	movs	r3, #3
 81070cc:	e018      	b.n	8107100 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 81070ce:	68fb      	ldr	r3, [r7, #12]
 81070d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81070d4:	b29b      	uxth	r3, r3
 81070d6:	2b00      	cmp	r3, #0
 81070d8:	d1b6      	bne.n	8107048 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 81070da:	68f8      	ldr	r0, [r7, #12]
 81070dc:	f000 fa39 	bl	8107552 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 81070e0:	68fb      	ldr	r3, [r7, #12]
 81070e2:	2200      	movs	r2, #0
 81070e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 81070e8:	68fb      	ldr	r3, [r7, #12]
 81070ea:	2201      	movs	r2, #1
 81070ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 81070f0:	68fb      	ldr	r3, [r7, #12]
 81070f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81070f6:	2b00      	cmp	r3, #0
 81070f8:	d001      	beq.n	81070fe <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 81070fa:	2301      	movs	r3, #1
 81070fc:	e000      	b.n	8107100 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 81070fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8107100:	4618      	mov	r0, r3
 8107102:	3720      	adds	r7, #32
 8107104:	46bd      	mov	sp, r7
 8107106:	bd80      	pop	{r7, pc}

08107108 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8107108:	b580      	push	{r7, lr}
 810710a:	b08e      	sub	sp, #56	; 0x38
 810710c:	af02      	add	r7, sp, #8
 810710e:	60f8      	str	r0, [r7, #12]
 8107110:	60b9      	str	r1, [r7, #8]
 8107112:	607a      	str	r2, [r7, #4]
 8107114:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8107116:	2300      	movs	r3, #0
 8107118:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 810711c:	68fb      	ldr	r3, [r7, #12]
 810711e:	681b      	ldr	r3, [r3, #0]
 8107120:	3320      	adds	r3, #32
 8107122:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8107124:	68fb      	ldr	r3, [r7, #12]
 8107126:	681b      	ldr	r3, [r3, #0]
 8107128:	3330      	adds	r3, #48	; 0x30
 810712a:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 810712c:	68fb      	ldr	r3, [r7, #12]
 810712e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8107132:	2b01      	cmp	r3, #1
 8107134:	d101      	bne.n	810713a <HAL_SPI_TransmitReceive+0x32>
 8107136:	2302      	movs	r3, #2
 8107138:	e207      	b.n	810754a <HAL_SPI_TransmitReceive+0x442>
 810713a:	68fb      	ldr	r3, [r7, #12]
 810713c:	2201      	movs	r2, #1
 810713e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8107142:	f7fa fd41 	bl	8101bc8 <HAL_GetTick>
 8107146:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8107148:	887b      	ldrh	r3, [r7, #2]
 810714a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 810714c:	887b      	ldrh	r3, [r7, #2]
 810714e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8107150:	68fb      	ldr	r3, [r7, #12]
 8107152:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8107156:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8107158:	68fb      	ldr	r3, [r7, #12]
 810715a:	685b      	ldr	r3, [r3, #4]
 810715c:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 810715e:	7efb      	ldrb	r3, [r7, #27]
 8107160:	2b01      	cmp	r3, #1
 8107162:	d014      	beq.n	810718e <HAL_SPI_TransmitReceive+0x86>
 8107164:	697b      	ldr	r3, [r7, #20]
 8107166:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810716a:	d106      	bne.n	810717a <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 810716c:	68fb      	ldr	r3, [r7, #12]
 810716e:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8107170:	2b00      	cmp	r3, #0
 8107172:	d102      	bne.n	810717a <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8107174:	7efb      	ldrb	r3, [r7, #27]
 8107176:	2b04      	cmp	r3, #4
 8107178:	d009      	beq.n	810718e <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 810717a:	2302      	movs	r3, #2
 810717c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8107180:	68fb      	ldr	r3, [r7, #12]
 8107182:	2200      	movs	r2, #0
 8107184:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8107188:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 810718c:	e1dd      	b.n	810754a <HAL_SPI_TransmitReceive+0x442>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 810718e:	68bb      	ldr	r3, [r7, #8]
 8107190:	2b00      	cmp	r3, #0
 8107192:	d005      	beq.n	81071a0 <HAL_SPI_TransmitReceive+0x98>
 8107194:	687b      	ldr	r3, [r7, #4]
 8107196:	2b00      	cmp	r3, #0
 8107198:	d002      	beq.n	81071a0 <HAL_SPI_TransmitReceive+0x98>
 810719a:	887b      	ldrh	r3, [r7, #2]
 810719c:	2b00      	cmp	r3, #0
 810719e:	d109      	bne.n	81071b4 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 81071a0:	2301      	movs	r3, #1
 81071a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 81071a6:	68fb      	ldr	r3, [r7, #12]
 81071a8:	2200      	movs	r2, #0
 81071aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 81071ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 81071b2:	e1ca      	b.n	810754a <HAL_SPI_TransmitReceive+0x442>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 81071b4:	68fb      	ldr	r3, [r7, #12]
 81071b6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 81071ba:	b2db      	uxtb	r3, r3
 81071bc:	2b04      	cmp	r3, #4
 81071be:	d003      	beq.n	81071c8 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 81071c0:	68fb      	ldr	r3, [r7, #12]
 81071c2:	2205      	movs	r2, #5
 81071c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 81071c8:	68fb      	ldr	r3, [r7, #12]
 81071ca:	2200      	movs	r2, #0
 81071cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 81071d0:	68fb      	ldr	r3, [r7, #12]
 81071d2:	687a      	ldr	r2, [r7, #4]
 81071d4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 81071d6:	68fb      	ldr	r3, [r7, #12]
 81071d8:	887a      	ldrh	r2, [r7, #2]
 81071da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 81071de:	68fb      	ldr	r3, [r7, #12]
 81071e0:	887a      	ldrh	r2, [r7, #2]
 81071e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 81071e6:	68fb      	ldr	r3, [r7, #12]
 81071e8:	68ba      	ldr	r2, [r7, #8]
 81071ea:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 81071ec:	68fb      	ldr	r3, [r7, #12]
 81071ee:	887a      	ldrh	r2, [r7, #2]
 81071f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 81071f4:	68fb      	ldr	r3, [r7, #12]
 81071f6:	887a      	ldrh	r2, [r7, #2]
 81071f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 81071fc:	68fb      	ldr	r3, [r7, #12]
 81071fe:	2200      	movs	r2, #0
 8107200:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8107202:	68fb      	ldr	r3, [r7, #12]
 8107204:	2200      	movs	r2, #0
 8107206:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8107208:	68fb      	ldr	r3, [r7, #12]
 810720a:	681b      	ldr	r3, [r3, #0]
 810720c:	685b      	ldr	r3, [r3, #4]
 810720e:	0c1b      	lsrs	r3, r3, #16
 8107210:	041b      	lsls	r3, r3, #16
 8107212:	8879      	ldrh	r1, [r7, #2]
 8107214:	68fa      	ldr	r2, [r7, #12]
 8107216:	6812      	ldr	r2, [r2, #0]
 8107218:	430b      	orrs	r3, r1
 810721a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 810721c:	68fb      	ldr	r3, [r7, #12]
 810721e:	681b      	ldr	r3, [r3, #0]
 8107220:	681a      	ldr	r2, [r3, #0]
 8107222:	68fb      	ldr	r3, [r7, #12]
 8107224:	681b      	ldr	r3, [r3, #0]
 8107226:	f042 0201 	orr.w	r2, r2, #1
 810722a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 810722c:	68fb      	ldr	r3, [r7, #12]
 810722e:	685b      	ldr	r3, [r3, #4]
 8107230:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8107234:	d107      	bne.n	8107246 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8107236:	68fb      	ldr	r3, [r7, #12]
 8107238:	681b      	ldr	r3, [r3, #0]
 810723a:	681a      	ldr	r2, [r3, #0]
 810723c:	68fb      	ldr	r3, [r7, #12]
 810723e:	681b      	ldr	r3, [r3, #0]
 8107240:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8107244:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8107246:	68fb      	ldr	r3, [r7, #12]
 8107248:	68db      	ldr	r3, [r3, #12]
 810724a:	2b0f      	cmp	r3, #15
 810724c:	d970      	bls.n	8107330 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 810724e:	e068      	b.n	8107322 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8107250:	68fb      	ldr	r3, [r7, #12]
 8107252:	681b      	ldr	r3, [r3, #0]
 8107254:	695b      	ldr	r3, [r3, #20]
 8107256:	f003 0302 	and.w	r3, r3, #2
 810725a:	2b02      	cmp	r3, #2
 810725c:	d11a      	bne.n	8107294 <HAL_SPI_TransmitReceive+0x18c>
 810725e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8107260:	2b00      	cmp	r3, #0
 8107262:	d017      	beq.n	8107294 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8107264:	68fb      	ldr	r3, [r7, #12]
 8107266:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8107268:	68fb      	ldr	r3, [r7, #12]
 810726a:	681b      	ldr	r3, [r3, #0]
 810726c:	6812      	ldr	r2, [r2, #0]
 810726e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8107270:	68fb      	ldr	r3, [r7, #12]
 8107272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8107274:	1d1a      	adds	r2, r3, #4
 8107276:	68fb      	ldr	r3, [r7, #12]
 8107278:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 810727a:	68fb      	ldr	r3, [r7, #12]
 810727c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8107280:	b29b      	uxth	r3, r3
 8107282:	3b01      	subs	r3, #1
 8107284:	b29a      	uxth	r2, r3
 8107286:	68fb      	ldr	r3, [r7, #12]
 8107288:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 810728c:	68fb      	ldr	r3, [r7, #12]
 810728e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8107292:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8107294:	68fb      	ldr	r3, [r7, #12]
 8107296:	681b      	ldr	r3, [r3, #0]
 8107298:	695a      	ldr	r2, [r3, #20]
 810729a:	f248 0308 	movw	r3, #32776	; 0x8008
 810729e:	4013      	ands	r3, r2
 81072a0:	2b00      	cmp	r3, #0
 81072a2:	d01a      	beq.n	81072da <HAL_SPI_TransmitReceive+0x1d2>
 81072a4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 81072a6:	2b00      	cmp	r3, #0
 81072a8:	d017      	beq.n	81072da <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 81072aa:	68fb      	ldr	r3, [r7, #12]
 81072ac:	681a      	ldr	r2, [r3, #0]
 81072ae:	68fb      	ldr	r3, [r7, #12]
 81072b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81072b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 81072b4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 81072b6:	68fb      	ldr	r3, [r7, #12]
 81072b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81072ba:	1d1a      	adds	r2, r3, #4
 81072bc:	68fb      	ldr	r3, [r7, #12]
 81072be:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 81072c0:	68fb      	ldr	r3, [r7, #12]
 81072c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81072c6:	b29b      	uxth	r3, r3
 81072c8:	3b01      	subs	r3, #1
 81072ca:	b29a      	uxth	r2, r3
 81072cc:	68fb      	ldr	r3, [r7, #12]
 81072ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 81072d2:	68fb      	ldr	r3, [r7, #12]
 81072d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81072d8:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81072da:	f7fa fc75 	bl	8101bc8 <HAL_GetTick>
 81072de:	4602      	mov	r2, r0
 81072e0:	69fb      	ldr	r3, [r7, #28]
 81072e2:	1ad3      	subs	r3, r2, r3
 81072e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 81072e6:	429a      	cmp	r2, r3
 81072e8:	d803      	bhi.n	81072f2 <HAL_SPI_TransmitReceive+0x1ea>
 81072ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81072ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 81072f0:	d102      	bne.n	81072f8 <HAL_SPI_TransmitReceive+0x1f0>
 81072f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81072f4:	2b00      	cmp	r3, #0
 81072f6:	d114      	bne.n	8107322 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 81072f8:	68f8      	ldr	r0, [r7, #12]
 81072fa:	f000 f92a 	bl	8107552 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 81072fe:	68fb      	ldr	r3, [r7, #12]
 8107300:	2200      	movs	r2, #0
 8107302:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8107306:	68fb      	ldr	r3, [r7, #12]
 8107308:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810730c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8107310:	68fb      	ldr	r3, [r7, #12]
 8107312:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8107316:	68fb      	ldr	r3, [r7, #12]
 8107318:	2201      	movs	r2, #1
 810731a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 810731e:	2303      	movs	r3, #3
 8107320:	e113      	b.n	810754a <HAL_SPI_TransmitReceive+0x442>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8107322:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8107324:	2b00      	cmp	r3, #0
 8107326:	d193      	bne.n	8107250 <HAL_SPI_TransmitReceive+0x148>
 8107328:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 810732a:	2b00      	cmp	r3, #0
 810732c:	d190      	bne.n	8107250 <HAL_SPI_TransmitReceive+0x148>
 810732e:	e0e5      	b.n	81074fc <HAL_SPI_TransmitReceive+0x3f4>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8107330:	68fb      	ldr	r3, [r7, #12]
 8107332:	68db      	ldr	r3, [r3, #12]
 8107334:	2b07      	cmp	r3, #7
 8107336:	f240 80db 	bls.w	81074f0 <HAL_SPI_TransmitReceive+0x3e8>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 810733a:	e066      	b.n	810740a <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 810733c:	68fb      	ldr	r3, [r7, #12]
 810733e:	681b      	ldr	r3, [r3, #0]
 8107340:	695b      	ldr	r3, [r3, #20]
 8107342:	f003 0302 	and.w	r3, r3, #2
 8107346:	2b02      	cmp	r3, #2
 8107348:	d119      	bne.n	810737e <HAL_SPI_TransmitReceive+0x276>
 810734a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 810734c:	2b00      	cmp	r3, #0
 810734e:	d016      	beq.n	810737e <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8107350:	68fb      	ldr	r3, [r7, #12]
 8107352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8107354:	881a      	ldrh	r2, [r3, #0]
 8107356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107358:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 810735a:	68fb      	ldr	r3, [r7, #12]
 810735c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810735e:	1c9a      	adds	r2, r3, #2
 8107360:	68fb      	ldr	r3, [r7, #12]
 8107362:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8107364:	68fb      	ldr	r3, [r7, #12]
 8107366:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810736a:	b29b      	uxth	r3, r3
 810736c:	3b01      	subs	r3, #1
 810736e:	b29a      	uxth	r2, r3
 8107370:	68fb      	ldr	r3, [r7, #12]
 8107372:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8107376:	68fb      	ldr	r3, [r7, #12]
 8107378:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810737c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 810737e:	68fb      	ldr	r3, [r7, #12]
 8107380:	681b      	ldr	r3, [r3, #0]
 8107382:	695b      	ldr	r3, [r3, #20]
 8107384:	f003 0301 	and.w	r3, r3, #1
 8107388:	2b01      	cmp	r3, #1
 810738a:	d11a      	bne.n	81073c2 <HAL_SPI_TransmitReceive+0x2ba>
 810738c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 810738e:	2b00      	cmp	r3, #0
 8107390:	d017      	beq.n	81073c2 <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8107392:	68fb      	ldr	r3, [r7, #12]
 8107394:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107396:	6a3a      	ldr	r2, [r7, #32]
 8107398:	8812      	ldrh	r2, [r2, #0]
 810739a:	b292      	uxth	r2, r2
 810739c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 810739e:	68fb      	ldr	r3, [r7, #12]
 81073a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81073a2:	1c9a      	adds	r2, r3, #2
 81073a4:	68fb      	ldr	r3, [r7, #12]
 81073a6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 81073a8:	68fb      	ldr	r3, [r7, #12]
 81073aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81073ae:	b29b      	uxth	r3, r3
 81073b0:	3b01      	subs	r3, #1
 81073b2:	b29a      	uxth	r2, r3
 81073b4:	68fb      	ldr	r3, [r7, #12]
 81073b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 81073ba:	68fb      	ldr	r3, [r7, #12]
 81073bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81073c0:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81073c2:	f7fa fc01 	bl	8101bc8 <HAL_GetTick>
 81073c6:	4602      	mov	r2, r0
 81073c8:	69fb      	ldr	r3, [r7, #28]
 81073ca:	1ad3      	subs	r3, r2, r3
 81073cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 81073ce:	429a      	cmp	r2, r3
 81073d0:	d803      	bhi.n	81073da <HAL_SPI_TransmitReceive+0x2d2>
 81073d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81073d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81073d8:	d102      	bne.n	81073e0 <HAL_SPI_TransmitReceive+0x2d8>
 81073da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81073dc:	2b00      	cmp	r3, #0
 81073de:	d114      	bne.n	810740a <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 81073e0:	68f8      	ldr	r0, [r7, #12]
 81073e2:	f000 f8b6 	bl	8107552 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 81073e6:	68fb      	ldr	r3, [r7, #12]
 81073e8:	2200      	movs	r2, #0
 81073ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81073ee:	68fb      	ldr	r3, [r7, #12]
 81073f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81073f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81073f8:	68fb      	ldr	r3, [r7, #12]
 81073fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 81073fe:	68fb      	ldr	r3, [r7, #12]
 8107400:	2201      	movs	r2, #1
 8107402:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8107406:	2303      	movs	r3, #3
 8107408:	e09f      	b.n	810754a <HAL_SPI_TransmitReceive+0x442>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 810740a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 810740c:	2b00      	cmp	r3, #0
 810740e:	d195      	bne.n	810733c <HAL_SPI_TransmitReceive+0x234>
 8107410:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8107412:	2b00      	cmp	r3, #0
 8107414:	d192      	bne.n	810733c <HAL_SPI_TransmitReceive+0x234>
 8107416:	e071      	b.n	81074fc <HAL_SPI_TransmitReceive+0x3f4>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8107418:	68fb      	ldr	r3, [r7, #12]
 810741a:	681b      	ldr	r3, [r3, #0]
 810741c:	695b      	ldr	r3, [r3, #20]
 810741e:	f003 0302 	and.w	r3, r3, #2
 8107422:	2b02      	cmp	r3, #2
 8107424:	d11b      	bne.n	810745e <HAL_SPI_TransmitReceive+0x356>
 8107426:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8107428:	2b00      	cmp	r3, #0
 810742a:	d018      	beq.n	810745e <HAL_SPI_TransmitReceive+0x356>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 810742c:	68fb      	ldr	r3, [r7, #12]
 810742e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8107430:	68fb      	ldr	r3, [r7, #12]
 8107432:	681b      	ldr	r3, [r3, #0]
 8107434:	3320      	adds	r3, #32
 8107436:	7812      	ldrb	r2, [r2, #0]
 8107438:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 810743a:	68fb      	ldr	r3, [r7, #12]
 810743c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810743e:	1c5a      	adds	r2, r3, #1
 8107440:	68fb      	ldr	r3, [r7, #12]
 8107442:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8107444:	68fb      	ldr	r3, [r7, #12]
 8107446:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810744a:	b29b      	uxth	r3, r3
 810744c:	3b01      	subs	r3, #1
 810744e:	b29a      	uxth	r2, r3
 8107450:	68fb      	ldr	r3, [r7, #12]
 8107452:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8107456:	68fb      	ldr	r3, [r7, #12]
 8107458:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810745c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 810745e:	68fb      	ldr	r3, [r7, #12]
 8107460:	681b      	ldr	r3, [r3, #0]
 8107462:	695b      	ldr	r3, [r3, #20]
 8107464:	f003 0301 	and.w	r3, r3, #1
 8107468:	2b01      	cmp	r3, #1
 810746a:	d11d      	bne.n	81074a8 <HAL_SPI_TransmitReceive+0x3a0>
 810746c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 810746e:	2b00      	cmp	r3, #0
 8107470:	d01a      	beq.n	81074a8 <HAL_SPI_TransmitReceive+0x3a0>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8107472:	68fb      	ldr	r3, [r7, #12]
 8107474:	681b      	ldr	r3, [r3, #0]
 8107476:	f103 0230 	add.w	r2, r3, #48	; 0x30
 810747a:	68fb      	ldr	r3, [r7, #12]
 810747c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810747e:	7812      	ldrb	r2, [r2, #0]
 8107480:	b2d2      	uxtb	r2, r2
 8107482:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8107484:	68fb      	ldr	r3, [r7, #12]
 8107486:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107488:	1c5a      	adds	r2, r3, #1
 810748a:	68fb      	ldr	r3, [r7, #12]
 810748c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 810748e:	68fb      	ldr	r3, [r7, #12]
 8107490:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8107494:	b29b      	uxth	r3, r3
 8107496:	3b01      	subs	r3, #1
 8107498:	b29a      	uxth	r2, r3
 810749a:	68fb      	ldr	r3, [r7, #12]
 810749c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 81074a0:	68fb      	ldr	r3, [r7, #12]
 81074a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81074a6:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81074a8:	f7fa fb8e 	bl	8101bc8 <HAL_GetTick>
 81074ac:	4602      	mov	r2, r0
 81074ae:	69fb      	ldr	r3, [r7, #28]
 81074b0:	1ad3      	subs	r3, r2, r3
 81074b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 81074b4:	429a      	cmp	r2, r3
 81074b6:	d803      	bhi.n	81074c0 <HAL_SPI_TransmitReceive+0x3b8>
 81074b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81074ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 81074be:	d102      	bne.n	81074c6 <HAL_SPI_TransmitReceive+0x3be>
 81074c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81074c2:	2b00      	cmp	r3, #0
 81074c4:	d114      	bne.n	81074f0 <HAL_SPI_TransmitReceive+0x3e8>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 81074c6:	68f8      	ldr	r0, [r7, #12]
 81074c8:	f000 f843 	bl	8107552 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 81074cc:	68fb      	ldr	r3, [r7, #12]
 81074ce:	2200      	movs	r2, #0
 81074d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81074d4:	68fb      	ldr	r3, [r7, #12]
 81074d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81074da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81074de:	68fb      	ldr	r3, [r7, #12]
 81074e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 81074e4:	68fb      	ldr	r3, [r7, #12]
 81074e6:	2201      	movs	r2, #1
 81074e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 81074ec:	2303      	movs	r3, #3
 81074ee:	e02c      	b.n	810754a <HAL_SPI_TransmitReceive+0x442>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 81074f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 81074f2:	2b00      	cmp	r3, #0
 81074f4:	d190      	bne.n	8107418 <HAL_SPI_TransmitReceive+0x310>
 81074f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 81074f8:	2b00      	cmp	r3, #0
 81074fa:	d18d      	bne.n	8107418 <HAL_SPI_TransmitReceive+0x310>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 81074fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81074fe:	9300      	str	r3, [sp, #0]
 8107500:	69fb      	ldr	r3, [r7, #28]
 8107502:	2200      	movs	r2, #0
 8107504:	2108      	movs	r1, #8
 8107506:	68f8      	ldr	r0, [r7, #12]
 8107508:	f000 f8c3 	bl	8107692 <SPI_WaitOnFlagUntilTimeout>
 810750c:	4603      	mov	r3, r0
 810750e:	2b00      	cmp	r3, #0
 8107510:	d007      	beq.n	8107522 <HAL_SPI_TransmitReceive+0x41a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8107512:	68fb      	ldr	r3, [r7, #12]
 8107514:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107518:	f043 0220 	orr.w	r2, r3, #32
 810751c:	68fb      	ldr	r3, [r7, #12]
 810751e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8107522:	68f8      	ldr	r0, [r7, #12]
 8107524:	f000 f815 	bl	8107552 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8107528:	68fb      	ldr	r3, [r7, #12]
 810752a:	2200      	movs	r2, #0
 810752c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8107530:	68fb      	ldr	r3, [r7, #12]
 8107532:	2201      	movs	r2, #1
 8107534:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8107538:	68fb      	ldr	r3, [r7, #12]
 810753a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810753e:	2b00      	cmp	r3, #0
 8107540:	d001      	beq.n	8107546 <HAL_SPI_TransmitReceive+0x43e>
  {
    return HAL_ERROR;
 8107542:	2301      	movs	r3, #1
 8107544:	e001      	b.n	810754a <HAL_SPI_TransmitReceive+0x442>
  }
  return errorcode;
 8107546:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 810754a:	4618      	mov	r0, r3
 810754c:	3730      	adds	r7, #48	; 0x30
 810754e:	46bd      	mov	sp, r7
 8107550:	bd80      	pop	{r7, pc}

08107552 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8107552:	b480      	push	{r7}
 8107554:	b085      	sub	sp, #20
 8107556:	af00      	add	r7, sp, #0
 8107558:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 810755a:	687b      	ldr	r3, [r7, #4]
 810755c:	681b      	ldr	r3, [r3, #0]
 810755e:	695b      	ldr	r3, [r3, #20]
 8107560:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8107562:	687b      	ldr	r3, [r7, #4]
 8107564:	681b      	ldr	r3, [r3, #0]
 8107566:	699a      	ldr	r2, [r3, #24]
 8107568:	687b      	ldr	r3, [r7, #4]
 810756a:	681b      	ldr	r3, [r3, #0]
 810756c:	f042 0208 	orr.w	r2, r2, #8
 8107570:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8107572:	687b      	ldr	r3, [r7, #4]
 8107574:	681b      	ldr	r3, [r3, #0]
 8107576:	699a      	ldr	r2, [r3, #24]
 8107578:	687b      	ldr	r3, [r7, #4]
 810757a:	681b      	ldr	r3, [r3, #0]
 810757c:	f042 0210 	orr.w	r2, r2, #16
 8107580:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8107582:	687b      	ldr	r3, [r7, #4]
 8107584:	681b      	ldr	r3, [r3, #0]
 8107586:	681a      	ldr	r2, [r3, #0]
 8107588:	687b      	ldr	r3, [r7, #4]
 810758a:	681b      	ldr	r3, [r3, #0]
 810758c:	f022 0201 	bic.w	r2, r2, #1
 8107590:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8107592:	687b      	ldr	r3, [r7, #4]
 8107594:	681b      	ldr	r3, [r3, #0]
 8107596:	691b      	ldr	r3, [r3, #16]
 8107598:	687a      	ldr	r2, [r7, #4]
 810759a:	6812      	ldr	r2, [r2, #0]
 810759c:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 81075a0:	f023 0303 	bic.w	r3, r3, #3
 81075a4:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 81075a6:	687b      	ldr	r3, [r7, #4]
 81075a8:	681b      	ldr	r3, [r3, #0]
 81075aa:	689a      	ldr	r2, [r3, #8]
 81075ac:	687b      	ldr	r3, [r7, #4]
 81075ae:	681b      	ldr	r3, [r3, #0]
 81075b0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 81075b4:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 81075b6:	687b      	ldr	r3, [r7, #4]
 81075b8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 81075bc:	b2db      	uxtb	r3, r3
 81075be:	2b04      	cmp	r3, #4
 81075c0:	d014      	beq.n	81075ec <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 81075c2:	68fb      	ldr	r3, [r7, #12]
 81075c4:	f003 0320 	and.w	r3, r3, #32
 81075c8:	2b00      	cmp	r3, #0
 81075ca:	d00f      	beq.n	81075ec <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 81075cc:	687b      	ldr	r3, [r7, #4]
 81075ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81075d2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 81075d6:	687b      	ldr	r3, [r7, #4]
 81075d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 81075dc:	687b      	ldr	r3, [r7, #4]
 81075de:	681b      	ldr	r3, [r3, #0]
 81075e0:	699a      	ldr	r2, [r3, #24]
 81075e2:	687b      	ldr	r3, [r7, #4]
 81075e4:	681b      	ldr	r3, [r3, #0]
 81075e6:	f042 0220 	orr.w	r2, r2, #32
 81075ea:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 81075ec:	687b      	ldr	r3, [r7, #4]
 81075ee:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 81075f2:	b2db      	uxtb	r3, r3
 81075f4:	2b03      	cmp	r3, #3
 81075f6:	d014      	beq.n	8107622 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 81075f8:	68fb      	ldr	r3, [r7, #12]
 81075fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81075fe:	2b00      	cmp	r3, #0
 8107600:	d00f      	beq.n	8107622 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8107602:	687b      	ldr	r3, [r7, #4]
 8107604:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107608:	f043 0204 	orr.w	r2, r3, #4
 810760c:	687b      	ldr	r3, [r7, #4]
 810760e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8107612:	687b      	ldr	r3, [r7, #4]
 8107614:	681b      	ldr	r3, [r3, #0]
 8107616:	699a      	ldr	r2, [r3, #24]
 8107618:	687b      	ldr	r3, [r7, #4]
 810761a:	681b      	ldr	r3, [r3, #0]
 810761c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8107620:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8107622:	68fb      	ldr	r3, [r7, #12]
 8107624:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8107628:	2b00      	cmp	r3, #0
 810762a:	d00f      	beq.n	810764c <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 810762c:	687b      	ldr	r3, [r7, #4]
 810762e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107632:	f043 0201 	orr.w	r2, r3, #1
 8107636:	687b      	ldr	r3, [r7, #4]
 8107638:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 810763c:	687b      	ldr	r3, [r7, #4]
 810763e:	681b      	ldr	r3, [r3, #0]
 8107640:	699a      	ldr	r2, [r3, #24]
 8107642:	687b      	ldr	r3, [r7, #4]
 8107644:	681b      	ldr	r3, [r3, #0]
 8107646:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810764a:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 810764c:	68fb      	ldr	r3, [r7, #12]
 810764e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8107652:	2b00      	cmp	r3, #0
 8107654:	d00f      	beq.n	8107676 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8107656:	687b      	ldr	r3, [r7, #4]
 8107658:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810765c:	f043 0208 	orr.w	r2, r3, #8
 8107660:	687b      	ldr	r3, [r7, #4]
 8107662:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8107666:	687b      	ldr	r3, [r7, #4]
 8107668:	681b      	ldr	r3, [r3, #0]
 810766a:	699a      	ldr	r2, [r3, #24]
 810766c:	687b      	ldr	r3, [r7, #4]
 810766e:	681b      	ldr	r3, [r3, #0]
 8107670:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8107674:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8107676:	687b      	ldr	r3, [r7, #4]
 8107678:	2200      	movs	r2, #0
 810767a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 810767e:	687b      	ldr	r3, [r7, #4]
 8107680:	2200      	movs	r2, #0
 8107682:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8107686:	bf00      	nop
 8107688:	3714      	adds	r7, #20
 810768a:	46bd      	mov	sp, r7
 810768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107690:	4770      	bx	lr

08107692 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8107692:	b580      	push	{r7, lr}
 8107694:	b084      	sub	sp, #16
 8107696:	af00      	add	r7, sp, #0
 8107698:	60f8      	str	r0, [r7, #12]
 810769a:	60b9      	str	r1, [r7, #8]
 810769c:	603b      	str	r3, [r7, #0]
 810769e:	4613      	mov	r3, r2
 81076a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 81076a2:	e010      	b.n	81076c6 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81076a4:	f7fa fa90 	bl	8101bc8 <HAL_GetTick>
 81076a8:	4602      	mov	r2, r0
 81076aa:	683b      	ldr	r3, [r7, #0]
 81076ac:	1ad3      	subs	r3, r2, r3
 81076ae:	69ba      	ldr	r2, [r7, #24]
 81076b0:	429a      	cmp	r2, r3
 81076b2:	d803      	bhi.n	81076bc <SPI_WaitOnFlagUntilTimeout+0x2a>
 81076b4:	69bb      	ldr	r3, [r7, #24]
 81076b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 81076ba:	d102      	bne.n	81076c2 <SPI_WaitOnFlagUntilTimeout+0x30>
 81076bc:	69bb      	ldr	r3, [r7, #24]
 81076be:	2b00      	cmp	r3, #0
 81076c0:	d101      	bne.n	81076c6 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 81076c2:	2303      	movs	r3, #3
 81076c4:	e00f      	b.n	81076e6 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 81076c6:	68fb      	ldr	r3, [r7, #12]
 81076c8:	681b      	ldr	r3, [r3, #0]
 81076ca:	695a      	ldr	r2, [r3, #20]
 81076cc:	68bb      	ldr	r3, [r7, #8]
 81076ce:	4013      	ands	r3, r2
 81076d0:	68ba      	ldr	r2, [r7, #8]
 81076d2:	429a      	cmp	r2, r3
 81076d4:	bf0c      	ite	eq
 81076d6:	2301      	moveq	r3, #1
 81076d8:	2300      	movne	r3, #0
 81076da:	b2db      	uxtb	r3, r3
 81076dc:	461a      	mov	r2, r3
 81076de:	79fb      	ldrb	r3, [r7, #7]
 81076e0:	429a      	cmp	r2, r3
 81076e2:	d0df      	beq.n	81076a4 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 81076e4:	2300      	movs	r3, #0
}
 81076e6:	4618      	mov	r0, r3
 81076e8:	3710      	adds	r7, #16
 81076ea:	46bd      	mov	sp, r7
 81076ec:	bd80      	pop	{r7, pc}

081076ee <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 81076ee:	b480      	push	{r7}
 81076f0:	b085      	sub	sp, #20
 81076f2:	af00      	add	r7, sp, #0
 81076f4:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 81076f6:	687b      	ldr	r3, [r7, #4]
 81076f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81076fa:	095b      	lsrs	r3, r3, #5
 81076fc:	3301      	adds	r3, #1
 81076fe:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8107700:	687b      	ldr	r3, [r7, #4]
 8107702:	68db      	ldr	r3, [r3, #12]
 8107704:	3301      	adds	r3, #1
 8107706:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8107708:	68bb      	ldr	r3, [r7, #8]
 810770a:	3307      	adds	r3, #7
 810770c:	08db      	lsrs	r3, r3, #3
 810770e:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8107710:	68bb      	ldr	r3, [r7, #8]
 8107712:	68fa      	ldr	r2, [r7, #12]
 8107714:	fb02 f303 	mul.w	r3, r2, r3
}
 8107718:	4618      	mov	r0, r3
 810771a:	3714      	adds	r7, #20
 810771c:	46bd      	mov	sp, r7
 810771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107722:	4770      	bx	lr

08107724 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8107724:	b580      	push	{r7, lr}
 8107726:	b082      	sub	sp, #8
 8107728:	af00      	add	r7, sp, #0
 810772a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810772c:	687b      	ldr	r3, [r7, #4]
 810772e:	2b00      	cmp	r3, #0
 8107730:	d101      	bne.n	8107736 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8107732:	2301      	movs	r3, #1
 8107734:	e049      	b.n	81077ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8107736:	687b      	ldr	r3, [r7, #4]
 8107738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810773c:	b2db      	uxtb	r3, r3
 810773e:	2b00      	cmp	r3, #0
 8107740:	d106      	bne.n	8107750 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8107742:	687b      	ldr	r3, [r7, #4]
 8107744:	2200      	movs	r2, #0
 8107746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 810774a:	6878      	ldr	r0, [r7, #4]
 810774c:	f7f9 fff4 	bl	8101738 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8107750:	687b      	ldr	r3, [r7, #4]
 8107752:	2202      	movs	r2, #2
 8107754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8107758:	687b      	ldr	r3, [r7, #4]
 810775a:	681a      	ldr	r2, [r3, #0]
 810775c:	687b      	ldr	r3, [r7, #4]
 810775e:	3304      	adds	r3, #4
 8107760:	4619      	mov	r1, r3
 8107762:	4610      	mov	r0, r2
 8107764:	f000 f97c 	bl	8107a60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8107768:	687b      	ldr	r3, [r7, #4]
 810776a:	2201      	movs	r2, #1
 810776c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8107770:	687b      	ldr	r3, [r7, #4]
 8107772:	2201      	movs	r2, #1
 8107774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8107778:	687b      	ldr	r3, [r7, #4]
 810777a:	2201      	movs	r2, #1
 810777c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8107780:	687b      	ldr	r3, [r7, #4]
 8107782:	2201      	movs	r2, #1
 8107784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8107788:	687b      	ldr	r3, [r7, #4]
 810778a:	2201      	movs	r2, #1
 810778c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8107790:	687b      	ldr	r3, [r7, #4]
 8107792:	2201      	movs	r2, #1
 8107794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8107798:	687b      	ldr	r3, [r7, #4]
 810779a:	2201      	movs	r2, #1
 810779c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81077a0:	687b      	ldr	r3, [r7, #4]
 81077a2:	2201      	movs	r2, #1
 81077a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81077a8:	687b      	ldr	r3, [r7, #4]
 81077aa:	2201      	movs	r2, #1
 81077ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81077b0:	687b      	ldr	r3, [r7, #4]
 81077b2:	2201      	movs	r2, #1
 81077b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 81077b8:	687b      	ldr	r3, [r7, #4]
 81077ba:	2201      	movs	r2, #1
 81077bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81077c0:	687b      	ldr	r3, [r7, #4]
 81077c2:	2201      	movs	r2, #1
 81077c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 81077c8:	2300      	movs	r3, #0
}
 81077ca:	4618      	mov	r0, r3
 81077cc:	3708      	adds	r7, #8
 81077ce:	46bd      	mov	sp, r7
 81077d0:	bd80      	pop	{r7, pc}

081077d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 81077d2:	b580      	push	{r7, lr}
 81077d4:	b082      	sub	sp, #8
 81077d6:	af00      	add	r7, sp, #0
 81077d8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 81077da:	687b      	ldr	r3, [r7, #4]
 81077dc:	681b      	ldr	r3, [r3, #0]
 81077de:	691b      	ldr	r3, [r3, #16]
 81077e0:	f003 0302 	and.w	r3, r3, #2
 81077e4:	2b02      	cmp	r3, #2
 81077e6:	d122      	bne.n	810782e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 81077e8:	687b      	ldr	r3, [r7, #4]
 81077ea:	681b      	ldr	r3, [r3, #0]
 81077ec:	68db      	ldr	r3, [r3, #12]
 81077ee:	f003 0302 	and.w	r3, r3, #2
 81077f2:	2b02      	cmp	r3, #2
 81077f4:	d11b      	bne.n	810782e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 81077f6:	687b      	ldr	r3, [r7, #4]
 81077f8:	681b      	ldr	r3, [r3, #0]
 81077fa:	f06f 0202 	mvn.w	r2, #2
 81077fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8107800:	687b      	ldr	r3, [r7, #4]
 8107802:	2201      	movs	r2, #1
 8107804:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8107806:	687b      	ldr	r3, [r7, #4]
 8107808:	681b      	ldr	r3, [r3, #0]
 810780a:	699b      	ldr	r3, [r3, #24]
 810780c:	f003 0303 	and.w	r3, r3, #3
 8107810:	2b00      	cmp	r3, #0
 8107812:	d003      	beq.n	810781c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8107814:	6878      	ldr	r0, [r7, #4]
 8107816:	f000 f905 	bl	8107a24 <HAL_TIM_IC_CaptureCallback>
 810781a:	e005      	b.n	8107828 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 810781c:	6878      	ldr	r0, [r7, #4]
 810781e:	f000 f8f7 	bl	8107a10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8107822:	6878      	ldr	r0, [r7, #4]
 8107824:	f000 f908 	bl	8107a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8107828:	687b      	ldr	r3, [r7, #4]
 810782a:	2200      	movs	r2, #0
 810782c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 810782e:	687b      	ldr	r3, [r7, #4]
 8107830:	681b      	ldr	r3, [r3, #0]
 8107832:	691b      	ldr	r3, [r3, #16]
 8107834:	f003 0304 	and.w	r3, r3, #4
 8107838:	2b04      	cmp	r3, #4
 810783a:	d122      	bne.n	8107882 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 810783c:	687b      	ldr	r3, [r7, #4]
 810783e:	681b      	ldr	r3, [r3, #0]
 8107840:	68db      	ldr	r3, [r3, #12]
 8107842:	f003 0304 	and.w	r3, r3, #4
 8107846:	2b04      	cmp	r3, #4
 8107848:	d11b      	bne.n	8107882 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 810784a:	687b      	ldr	r3, [r7, #4]
 810784c:	681b      	ldr	r3, [r3, #0]
 810784e:	f06f 0204 	mvn.w	r2, #4
 8107852:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8107854:	687b      	ldr	r3, [r7, #4]
 8107856:	2202      	movs	r2, #2
 8107858:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 810785a:	687b      	ldr	r3, [r7, #4]
 810785c:	681b      	ldr	r3, [r3, #0]
 810785e:	699b      	ldr	r3, [r3, #24]
 8107860:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8107864:	2b00      	cmp	r3, #0
 8107866:	d003      	beq.n	8107870 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8107868:	6878      	ldr	r0, [r7, #4]
 810786a:	f000 f8db 	bl	8107a24 <HAL_TIM_IC_CaptureCallback>
 810786e:	e005      	b.n	810787c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8107870:	6878      	ldr	r0, [r7, #4]
 8107872:	f000 f8cd 	bl	8107a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8107876:	6878      	ldr	r0, [r7, #4]
 8107878:	f000 f8de 	bl	8107a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810787c:	687b      	ldr	r3, [r7, #4]
 810787e:	2200      	movs	r2, #0
 8107880:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8107882:	687b      	ldr	r3, [r7, #4]
 8107884:	681b      	ldr	r3, [r3, #0]
 8107886:	691b      	ldr	r3, [r3, #16]
 8107888:	f003 0308 	and.w	r3, r3, #8
 810788c:	2b08      	cmp	r3, #8
 810788e:	d122      	bne.n	81078d6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8107890:	687b      	ldr	r3, [r7, #4]
 8107892:	681b      	ldr	r3, [r3, #0]
 8107894:	68db      	ldr	r3, [r3, #12]
 8107896:	f003 0308 	and.w	r3, r3, #8
 810789a:	2b08      	cmp	r3, #8
 810789c:	d11b      	bne.n	81078d6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 810789e:	687b      	ldr	r3, [r7, #4]
 81078a0:	681b      	ldr	r3, [r3, #0]
 81078a2:	f06f 0208 	mvn.w	r2, #8
 81078a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 81078a8:	687b      	ldr	r3, [r7, #4]
 81078aa:	2204      	movs	r2, #4
 81078ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 81078ae:	687b      	ldr	r3, [r7, #4]
 81078b0:	681b      	ldr	r3, [r3, #0]
 81078b2:	69db      	ldr	r3, [r3, #28]
 81078b4:	f003 0303 	and.w	r3, r3, #3
 81078b8:	2b00      	cmp	r3, #0
 81078ba:	d003      	beq.n	81078c4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81078bc:	6878      	ldr	r0, [r7, #4]
 81078be:	f000 f8b1 	bl	8107a24 <HAL_TIM_IC_CaptureCallback>
 81078c2:	e005      	b.n	81078d0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81078c4:	6878      	ldr	r0, [r7, #4]
 81078c6:	f000 f8a3 	bl	8107a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81078ca:	6878      	ldr	r0, [r7, #4]
 81078cc:	f000 f8b4 	bl	8107a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81078d0:	687b      	ldr	r3, [r7, #4]
 81078d2:	2200      	movs	r2, #0
 81078d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 81078d6:	687b      	ldr	r3, [r7, #4]
 81078d8:	681b      	ldr	r3, [r3, #0]
 81078da:	691b      	ldr	r3, [r3, #16]
 81078dc:	f003 0310 	and.w	r3, r3, #16
 81078e0:	2b10      	cmp	r3, #16
 81078e2:	d122      	bne.n	810792a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 81078e4:	687b      	ldr	r3, [r7, #4]
 81078e6:	681b      	ldr	r3, [r3, #0]
 81078e8:	68db      	ldr	r3, [r3, #12]
 81078ea:	f003 0310 	and.w	r3, r3, #16
 81078ee:	2b10      	cmp	r3, #16
 81078f0:	d11b      	bne.n	810792a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 81078f2:	687b      	ldr	r3, [r7, #4]
 81078f4:	681b      	ldr	r3, [r3, #0]
 81078f6:	f06f 0210 	mvn.w	r2, #16
 81078fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 81078fc:	687b      	ldr	r3, [r7, #4]
 81078fe:	2208      	movs	r2, #8
 8107900:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8107902:	687b      	ldr	r3, [r7, #4]
 8107904:	681b      	ldr	r3, [r3, #0]
 8107906:	69db      	ldr	r3, [r3, #28]
 8107908:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810790c:	2b00      	cmp	r3, #0
 810790e:	d003      	beq.n	8107918 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8107910:	6878      	ldr	r0, [r7, #4]
 8107912:	f000 f887 	bl	8107a24 <HAL_TIM_IC_CaptureCallback>
 8107916:	e005      	b.n	8107924 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8107918:	6878      	ldr	r0, [r7, #4]
 810791a:	f000 f879 	bl	8107a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810791e:	6878      	ldr	r0, [r7, #4]
 8107920:	f000 f88a 	bl	8107a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8107924:	687b      	ldr	r3, [r7, #4]
 8107926:	2200      	movs	r2, #0
 8107928:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 810792a:	687b      	ldr	r3, [r7, #4]
 810792c:	681b      	ldr	r3, [r3, #0]
 810792e:	691b      	ldr	r3, [r3, #16]
 8107930:	f003 0301 	and.w	r3, r3, #1
 8107934:	2b01      	cmp	r3, #1
 8107936:	d10e      	bne.n	8107956 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8107938:	687b      	ldr	r3, [r7, #4]
 810793a:	681b      	ldr	r3, [r3, #0]
 810793c:	68db      	ldr	r3, [r3, #12]
 810793e:	f003 0301 	and.w	r3, r3, #1
 8107942:	2b01      	cmp	r3, #1
 8107944:	d107      	bne.n	8107956 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8107946:	687b      	ldr	r3, [r7, #4]
 8107948:	681b      	ldr	r3, [r3, #0]
 810794a:	f06f 0201 	mvn.w	r2, #1
 810794e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8107950:	6878      	ldr	r0, [r7, #4]
 8107952:	f7f9 fd8d 	bl	8101470 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8107956:	687b      	ldr	r3, [r7, #4]
 8107958:	681b      	ldr	r3, [r3, #0]
 810795a:	691b      	ldr	r3, [r3, #16]
 810795c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8107960:	2b80      	cmp	r3, #128	; 0x80
 8107962:	d10e      	bne.n	8107982 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8107964:	687b      	ldr	r3, [r7, #4]
 8107966:	681b      	ldr	r3, [r3, #0]
 8107968:	68db      	ldr	r3, [r3, #12]
 810796a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810796e:	2b80      	cmp	r3, #128	; 0x80
 8107970:	d107      	bne.n	8107982 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8107972:	687b      	ldr	r3, [r7, #4]
 8107974:	681b      	ldr	r3, [r3, #0]
 8107976:	f06f 0280 	mvn.w	r2, #128	; 0x80
 810797a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 810797c:	6878      	ldr	r0, [r7, #4]
 810797e:	f000 f913 	bl	8107ba8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8107982:	687b      	ldr	r3, [r7, #4]
 8107984:	681b      	ldr	r3, [r3, #0]
 8107986:	691b      	ldr	r3, [r3, #16]
 8107988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810798c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107990:	d10e      	bne.n	81079b0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8107992:	687b      	ldr	r3, [r7, #4]
 8107994:	681b      	ldr	r3, [r3, #0]
 8107996:	68db      	ldr	r3, [r3, #12]
 8107998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810799c:	2b80      	cmp	r3, #128	; 0x80
 810799e:	d107      	bne.n	81079b0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 81079a0:	687b      	ldr	r3, [r7, #4]
 81079a2:	681b      	ldr	r3, [r3, #0]
 81079a4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 81079a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 81079aa:	6878      	ldr	r0, [r7, #4]
 81079ac:	f000 f906 	bl	8107bbc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 81079b0:	687b      	ldr	r3, [r7, #4]
 81079b2:	681b      	ldr	r3, [r3, #0]
 81079b4:	691b      	ldr	r3, [r3, #16]
 81079b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81079ba:	2b40      	cmp	r3, #64	; 0x40
 81079bc:	d10e      	bne.n	81079dc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 81079be:	687b      	ldr	r3, [r7, #4]
 81079c0:	681b      	ldr	r3, [r3, #0]
 81079c2:	68db      	ldr	r3, [r3, #12]
 81079c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81079c8:	2b40      	cmp	r3, #64	; 0x40
 81079ca:	d107      	bne.n	81079dc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 81079cc:	687b      	ldr	r3, [r7, #4]
 81079ce:	681b      	ldr	r3, [r3, #0]
 81079d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 81079d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 81079d6:	6878      	ldr	r0, [r7, #4]
 81079d8:	f000 f838 	bl	8107a4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 81079dc:	687b      	ldr	r3, [r7, #4]
 81079de:	681b      	ldr	r3, [r3, #0]
 81079e0:	691b      	ldr	r3, [r3, #16]
 81079e2:	f003 0320 	and.w	r3, r3, #32
 81079e6:	2b20      	cmp	r3, #32
 81079e8:	d10e      	bne.n	8107a08 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 81079ea:	687b      	ldr	r3, [r7, #4]
 81079ec:	681b      	ldr	r3, [r3, #0]
 81079ee:	68db      	ldr	r3, [r3, #12]
 81079f0:	f003 0320 	and.w	r3, r3, #32
 81079f4:	2b20      	cmp	r3, #32
 81079f6:	d107      	bne.n	8107a08 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 81079f8:	687b      	ldr	r3, [r7, #4]
 81079fa:	681b      	ldr	r3, [r3, #0]
 81079fc:	f06f 0220 	mvn.w	r2, #32
 8107a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8107a02:	6878      	ldr	r0, [r7, #4]
 8107a04:	f000 f8c6 	bl	8107b94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8107a08:	bf00      	nop
 8107a0a:	3708      	adds	r7, #8
 8107a0c:	46bd      	mov	sp, r7
 8107a0e:	bd80      	pop	{r7, pc}

08107a10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8107a10:	b480      	push	{r7}
 8107a12:	b083      	sub	sp, #12
 8107a14:	af00      	add	r7, sp, #0
 8107a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8107a18:	bf00      	nop
 8107a1a:	370c      	adds	r7, #12
 8107a1c:	46bd      	mov	sp, r7
 8107a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a22:	4770      	bx	lr

08107a24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8107a24:	b480      	push	{r7}
 8107a26:	b083      	sub	sp, #12
 8107a28:	af00      	add	r7, sp, #0
 8107a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8107a2c:	bf00      	nop
 8107a2e:	370c      	adds	r7, #12
 8107a30:	46bd      	mov	sp, r7
 8107a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a36:	4770      	bx	lr

08107a38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8107a38:	b480      	push	{r7}
 8107a3a:	b083      	sub	sp, #12
 8107a3c:	af00      	add	r7, sp, #0
 8107a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8107a40:	bf00      	nop
 8107a42:	370c      	adds	r7, #12
 8107a44:	46bd      	mov	sp, r7
 8107a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a4a:	4770      	bx	lr

08107a4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8107a4c:	b480      	push	{r7}
 8107a4e:	b083      	sub	sp, #12
 8107a50:	af00      	add	r7, sp, #0
 8107a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8107a54:	bf00      	nop
 8107a56:	370c      	adds	r7, #12
 8107a58:	46bd      	mov	sp, r7
 8107a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a5e:	4770      	bx	lr

08107a60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8107a60:	b480      	push	{r7}
 8107a62:	b085      	sub	sp, #20
 8107a64:	af00      	add	r7, sp, #0
 8107a66:	6078      	str	r0, [r7, #4]
 8107a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8107a6a:	687b      	ldr	r3, [r7, #4]
 8107a6c:	681b      	ldr	r3, [r3, #0]
 8107a6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8107a70:	687b      	ldr	r3, [r7, #4]
 8107a72:	4a40      	ldr	r2, [pc, #256]	; (8107b74 <TIM_Base_SetConfig+0x114>)
 8107a74:	4293      	cmp	r3, r2
 8107a76:	d013      	beq.n	8107aa0 <TIM_Base_SetConfig+0x40>
 8107a78:	687b      	ldr	r3, [r7, #4]
 8107a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107a7e:	d00f      	beq.n	8107aa0 <TIM_Base_SetConfig+0x40>
 8107a80:	687b      	ldr	r3, [r7, #4]
 8107a82:	4a3d      	ldr	r2, [pc, #244]	; (8107b78 <TIM_Base_SetConfig+0x118>)
 8107a84:	4293      	cmp	r3, r2
 8107a86:	d00b      	beq.n	8107aa0 <TIM_Base_SetConfig+0x40>
 8107a88:	687b      	ldr	r3, [r7, #4]
 8107a8a:	4a3c      	ldr	r2, [pc, #240]	; (8107b7c <TIM_Base_SetConfig+0x11c>)
 8107a8c:	4293      	cmp	r3, r2
 8107a8e:	d007      	beq.n	8107aa0 <TIM_Base_SetConfig+0x40>
 8107a90:	687b      	ldr	r3, [r7, #4]
 8107a92:	4a3b      	ldr	r2, [pc, #236]	; (8107b80 <TIM_Base_SetConfig+0x120>)
 8107a94:	4293      	cmp	r3, r2
 8107a96:	d003      	beq.n	8107aa0 <TIM_Base_SetConfig+0x40>
 8107a98:	687b      	ldr	r3, [r7, #4]
 8107a9a:	4a3a      	ldr	r2, [pc, #232]	; (8107b84 <TIM_Base_SetConfig+0x124>)
 8107a9c:	4293      	cmp	r3, r2
 8107a9e:	d108      	bne.n	8107ab2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8107aa0:	68fb      	ldr	r3, [r7, #12]
 8107aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107aa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8107aa8:	683b      	ldr	r3, [r7, #0]
 8107aaa:	685b      	ldr	r3, [r3, #4]
 8107aac:	68fa      	ldr	r2, [r7, #12]
 8107aae:	4313      	orrs	r3, r2
 8107ab0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8107ab2:	687b      	ldr	r3, [r7, #4]
 8107ab4:	4a2f      	ldr	r2, [pc, #188]	; (8107b74 <TIM_Base_SetConfig+0x114>)
 8107ab6:	4293      	cmp	r3, r2
 8107ab8:	d01f      	beq.n	8107afa <TIM_Base_SetConfig+0x9a>
 8107aba:	687b      	ldr	r3, [r7, #4]
 8107abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107ac0:	d01b      	beq.n	8107afa <TIM_Base_SetConfig+0x9a>
 8107ac2:	687b      	ldr	r3, [r7, #4]
 8107ac4:	4a2c      	ldr	r2, [pc, #176]	; (8107b78 <TIM_Base_SetConfig+0x118>)
 8107ac6:	4293      	cmp	r3, r2
 8107ac8:	d017      	beq.n	8107afa <TIM_Base_SetConfig+0x9a>
 8107aca:	687b      	ldr	r3, [r7, #4]
 8107acc:	4a2b      	ldr	r2, [pc, #172]	; (8107b7c <TIM_Base_SetConfig+0x11c>)
 8107ace:	4293      	cmp	r3, r2
 8107ad0:	d013      	beq.n	8107afa <TIM_Base_SetConfig+0x9a>
 8107ad2:	687b      	ldr	r3, [r7, #4]
 8107ad4:	4a2a      	ldr	r2, [pc, #168]	; (8107b80 <TIM_Base_SetConfig+0x120>)
 8107ad6:	4293      	cmp	r3, r2
 8107ad8:	d00f      	beq.n	8107afa <TIM_Base_SetConfig+0x9a>
 8107ada:	687b      	ldr	r3, [r7, #4]
 8107adc:	4a29      	ldr	r2, [pc, #164]	; (8107b84 <TIM_Base_SetConfig+0x124>)
 8107ade:	4293      	cmp	r3, r2
 8107ae0:	d00b      	beq.n	8107afa <TIM_Base_SetConfig+0x9a>
 8107ae2:	687b      	ldr	r3, [r7, #4]
 8107ae4:	4a28      	ldr	r2, [pc, #160]	; (8107b88 <TIM_Base_SetConfig+0x128>)
 8107ae6:	4293      	cmp	r3, r2
 8107ae8:	d007      	beq.n	8107afa <TIM_Base_SetConfig+0x9a>
 8107aea:	687b      	ldr	r3, [r7, #4]
 8107aec:	4a27      	ldr	r2, [pc, #156]	; (8107b8c <TIM_Base_SetConfig+0x12c>)
 8107aee:	4293      	cmp	r3, r2
 8107af0:	d003      	beq.n	8107afa <TIM_Base_SetConfig+0x9a>
 8107af2:	687b      	ldr	r3, [r7, #4]
 8107af4:	4a26      	ldr	r2, [pc, #152]	; (8107b90 <TIM_Base_SetConfig+0x130>)
 8107af6:	4293      	cmp	r3, r2
 8107af8:	d108      	bne.n	8107b0c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8107afa:	68fb      	ldr	r3, [r7, #12]
 8107afc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8107b00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8107b02:	683b      	ldr	r3, [r7, #0]
 8107b04:	68db      	ldr	r3, [r3, #12]
 8107b06:	68fa      	ldr	r2, [r7, #12]
 8107b08:	4313      	orrs	r3, r2
 8107b0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8107b0c:	68fb      	ldr	r3, [r7, #12]
 8107b0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8107b12:	683b      	ldr	r3, [r7, #0]
 8107b14:	695b      	ldr	r3, [r3, #20]
 8107b16:	4313      	orrs	r3, r2
 8107b18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8107b1a:	687b      	ldr	r3, [r7, #4]
 8107b1c:	68fa      	ldr	r2, [r7, #12]
 8107b1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8107b20:	683b      	ldr	r3, [r7, #0]
 8107b22:	689a      	ldr	r2, [r3, #8]
 8107b24:	687b      	ldr	r3, [r7, #4]
 8107b26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8107b28:	683b      	ldr	r3, [r7, #0]
 8107b2a:	681a      	ldr	r2, [r3, #0]
 8107b2c:	687b      	ldr	r3, [r7, #4]
 8107b2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8107b30:	687b      	ldr	r3, [r7, #4]
 8107b32:	4a10      	ldr	r2, [pc, #64]	; (8107b74 <TIM_Base_SetConfig+0x114>)
 8107b34:	4293      	cmp	r3, r2
 8107b36:	d00f      	beq.n	8107b58 <TIM_Base_SetConfig+0xf8>
 8107b38:	687b      	ldr	r3, [r7, #4]
 8107b3a:	4a12      	ldr	r2, [pc, #72]	; (8107b84 <TIM_Base_SetConfig+0x124>)
 8107b3c:	4293      	cmp	r3, r2
 8107b3e:	d00b      	beq.n	8107b58 <TIM_Base_SetConfig+0xf8>
 8107b40:	687b      	ldr	r3, [r7, #4]
 8107b42:	4a11      	ldr	r2, [pc, #68]	; (8107b88 <TIM_Base_SetConfig+0x128>)
 8107b44:	4293      	cmp	r3, r2
 8107b46:	d007      	beq.n	8107b58 <TIM_Base_SetConfig+0xf8>
 8107b48:	687b      	ldr	r3, [r7, #4]
 8107b4a:	4a10      	ldr	r2, [pc, #64]	; (8107b8c <TIM_Base_SetConfig+0x12c>)
 8107b4c:	4293      	cmp	r3, r2
 8107b4e:	d003      	beq.n	8107b58 <TIM_Base_SetConfig+0xf8>
 8107b50:	687b      	ldr	r3, [r7, #4]
 8107b52:	4a0f      	ldr	r2, [pc, #60]	; (8107b90 <TIM_Base_SetConfig+0x130>)
 8107b54:	4293      	cmp	r3, r2
 8107b56:	d103      	bne.n	8107b60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8107b58:	683b      	ldr	r3, [r7, #0]
 8107b5a:	691a      	ldr	r2, [r3, #16]
 8107b5c:	687b      	ldr	r3, [r7, #4]
 8107b5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8107b60:	687b      	ldr	r3, [r7, #4]
 8107b62:	2201      	movs	r2, #1
 8107b64:	615a      	str	r2, [r3, #20]
}
 8107b66:	bf00      	nop
 8107b68:	3714      	adds	r7, #20
 8107b6a:	46bd      	mov	sp, r7
 8107b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b70:	4770      	bx	lr
 8107b72:	bf00      	nop
 8107b74:	40010000 	.word	0x40010000
 8107b78:	40000400 	.word	0x40000400
 8107b7c:	40000800 	.word	0x40000800
 8107b80:	40000c00 	.word	0x40000c00
 8107b84:	40010400 	.word	0x40010400
 8107b88:	40014000 	.word	0x40014000
 8107b8c:	40014400 	.word	0x40014400
 8107b90:	40014800 	.word	0x40014800

08107b94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8107b94:	b480      	push	{r7}
 8107b96:	b083      	sub	sp, #12
 8107b98:	af00      	add	r7, sp, #0
 8107b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8107b9c:	bf00      	nop
 8107b9e:	370c      	adds	r7, #12
 8107ba0:	46bd      	mov	sp, r7
 8107ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107ba6:	4770      	bx	lr

08107ba8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8107ba8:	b480      	push	{r7}
 8107baa:	b083      	sub	sp, #12
 8107bac:	af00      	add	r7, sp, #0
 8107bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8107bb0:	bf00      	nop
 8107bb2:	370c      	adds	r7, #12
 8107bb4:	46bd      	mov	sp, r7
 8107bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107bba:	4770      	bx	lr

08107bbc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8107bbc:	b480      	push	{r7}
 8107bbe:	b083      	sub	sp, #12
 8107bc0:	af00      	add	r7, sp, #0
 8107bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8107bc4:	bf00      	nop
 8107bc6:	370c      	adds	r7, #12
 8107bc8:	46bd      	mov	sp, r7
 8107bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107bce:	4770      	bx	lr

08107bd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8107bd0:	b580      	push	{r7, lr}
 8107bd2:	b082      	sub	sp, #8
 8107bd4:	af00      	add	r7, sp, #0
 8107bd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8107bd8:	687b      	ldr	r3, [r7, #4]
 8107bda:	2b00      	cmp	r3, #0
 8107bdc:	d101      	bne.n	8107be2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8107bde:	2301      	movs	r3, #1
 8107be0:	e042      	b.n	8107c68 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8107be2:	687b      	ldr	r3, [r7, #4]
 8107be4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107be8:	2b00      	cmp	r3, #0
 8107bea:	d106      	bne.n	8107bfa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8107bec:	687b      	ldr	r3, [r7, #4]
 8107bee:	2200      	movs	r2, #0
 8107bf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8107bf4:	6878      	ldr	r0, [r7, #4]
 8107bf6:	f7f9 fdc7 	bl	8101788 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8107bfa:	687b      	ldr	r3, [r7, #4]
 8107bfc:	2224      	movs	r2, #36	; 0x24
 8107bfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8107c02:	687b      	ldr	r3, [r7, #4]
 8107c04:	681b      	ldr	r3, [r3, #0]
 8107c06:	681a      	ldr	r2, [r3, #0]
 8107c08:	687b      	ldr	r3, [r7, #4]
 8107c0a:	681b      	ldr	r3, [r3, #0]
 8107c0c:	f022 0201 	bic.w	r2, r2, #1
 8107c10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8107c12:	6878      	ldr	r0, [r7, #4]
 8107c14:	f000 f8c2 	bl	8107d9c <UART_SetConfig>
 8107c18:	4603      	mov	r3, r0
 8107c1a:	2b01      	cmp	r3, #1
 8107c1c:	d101      	bne.n	8107c22 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8107c1e:	2301      	movs	r3, #1
 8107c20:	e022      	b.n	8107c68 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8107c22:	687b      	ldr	r3, [r7, #4]
 8107c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107c26:	2b00      	cmp	r3, #0
 8107c28:	d002      	beq.n	8107c30 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8107c2a:	6878      	ldr	r0, [r7, #4]
 8107c2c:	f000 fe1e 	bl	810886c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8107c30:	687b      	ldr	r3, [r7, #4]
 8107c32:	681b      	ldr	r3, [r3, #0]
 8107c34:	685a      	ldr	r2, [r3, #4]
 8107c36:	687b      	ldr	r3, [r7, #4]
 8107c38:	681b      	ldr	r3, [r3, #0]
 8107c3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8107c3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8107c40:	687b      	ldr	r3, [r7, #4]
 8107c42:	681b      	ldr	r3, [r3, #0]
 8107c44:	689a      	ldr	r2, [r3, #8]
 8107c46:	687b      	ldr	r3, [r7, #4]
 8107c48:	681b      	ldr	r3, [r3, #0]
 8107c4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8107c4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8107c50:	687b      	ldr	r3, [r7, #4]
 8107c52:	681b      	ldr	r3, [r3, #0]
 8107c54:	681a      	ldr	r2, [r3, #0]
 8107c56:	687b      	ldr	r3, [r7, #4]
 8107c58:	681b      	ldr	r3, [r3, #0]
 8107c5a:	f042 0201 	orr.w	r2, r2, #1
 8107c5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8107c60:	6878      	ldr	r0, [r7, #4]
 8107c62:	f000 fea5 	bl	81089b0 <UART_CheckIdleState>
 8107c66:	4603      	mov	r3, r0
}
 8107c68:	4618      	mov	r0, r3
 8107c6a:	3708      	adds	r7, #8
 8107c6c:	46bd      	mov	sp, r7
 8107c6e:	bd80      	pop	{r7, pc}

08107c70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8107c70:	b580      	push	{r7, lr}
 8107c72:	b08a      	sub	sp, #40	; 0x28
 8107c74:	af02      	add	r7, sp, #8
 8107c76:	60f8      	str	r0, [r7, #12]
 8107c78:	60b9      	str	r1, [r7, #8]
 8107c7a:	603b      	str	r3, [r7, #0]
 8107c7c:	4613      	mov	r3, r2
 8107c7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8107c80:	68fb      	ldr	r3, [r7, #12]
 8107c82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107c86:	2b20      	cmp	r3, #32
 8107c88:	f040 8083 	bne.w	8107d92 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8107c8c:	68bb      	ldr	r3, [r7, #8]
 8107c8e:	2b00      	cmp	r3, #0
 8107c90:	d002      	beq.n	8107c98 <HAL_UART_Transmit+0x28>
 8107c92:	88fb      	ldrh	r3, [r7, #6]
 8107c94:	2b00      	cmp	r3, #0
 8107c96:	d101      	bne.n	8107c9c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8107c98:	2301      	movs	r3, #1
 8107c9a:	e07b      	b.n	8107d94 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8107c9c:	68fb      	ldr	r3, [r7, #12]
 8107c9e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8107ca2:	2b01      	cmp	r3, #1
 8107ca4:	d101      	bne.n	8107caa <HAL_UART_Transmit+0x3a>
 8107ca6:	2302      	movs	r3, #2
 8107ca8:	e074      	b.n	8107d94 <HAL_UART_Transmit+0x124>
 8107caa:	68fb      	ldr	r3, [r7, #12]
 8107cac:	2201      	movs	r2, #1
 8107cae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8107cb2:	68fb      	ldr	r3, [r7, #12]
 8107cb4:	2200      	movs	r2, #0
 8107cb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8107cba:	68fb      	ldr	r3, [r7, #12]
 8107cbc:	2221      	movs	r2, #33	; 0x21
 8107cbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8107cc2:	f7f9 ff81 	bl	8101bc8 <HAL_GetTick>
 8107cc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8107cc8:	68fb      	ldr	r3, [r7, #12]
 8107cca:	88fa      	ldrh	r2, [r7, #6]
 8107ccc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8107cd0:	68fb      	ldr	r3, [r7, #12]
 8107cd2:	88fa      	ldrh	r2, [r7, #6]
 8107cd4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8107cd8:	68fb      	ldr	r3, [r7, #12]
 8107cda:	689b      	ldr	r3, [r3, #8]
 8107cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8107ce0:	d108      	bne.n	8107cf4 <HAL_UART_Transmit+0x84>
 8107ce2:	68fb      	ldr	r3, [r7, #12]
 8107ce4:	691b      	ldr	r3, [r3, #16]
 8107ce6:	2b00      	cmp	r3, #0
 8107ce8:	d104      	bne.n	8107cf4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8107cea:	2300      	movs	r3, #0
 8107cec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8107cee:	68bb      	ldr	r3, [r7, #8]
 8107cf0:	61bb      	str	r3, [r7, #24]
 8107cf2:	e003      	b.n	8107cfc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8107cf4:	68bb      	ldr	r3, [r7, #8]
 8107cf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8107cf8:	2300      	movs	r3, #0
 8107cfa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8107cfc:	68fb      	ldr	r3, [r7, #12]
 8107cfe:	2200      	movs	r2, #0
 8107d00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8107d04:	e02c      	b.n	8107d60 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8107d06:	683b      	ldr	r3, [r7, #0]
 8107d08:	9300      	str	r3, [sp, #0]
 8107d0a:	697b      	ldr	r3, [r7, #20]
 8107d0c:	2200      	movs	r2, #0
 8107d0e:	2180      	movs	r1, #128	; 0x80
 8107d10:	68f8      	ldr	r0, [r7, #12]
 8107d12:	f000 fe98 	bl	8108a46 <UART_WaitOnFlagUntilTimeout>
 8107d16:	4603      	mov	r3, r0
 8107d18:	2b00      	cmp	r3, #0
 8107d1a:	d001      	beq.n	8107d20 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8107d1c:	2303      	movs	r3, #3
 8107d1e:	e039      	b.n	8107d94 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8107d20:	69fb      	ldr	r3, [r7, #28]
 8107d22:	2b00      	cmp	r3, #0
 8107d24:	d10b      	bne.n	8107d3e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8107d26:	69bb      	ldr	r3, [r7, #24]
 8107d28:	881b      	ldrh	r3, [r3, #0]
 8107d2a:	461a      	mov	r2, r3
 8107d2c:	68fb      	ldr	r3, [r7, #12]
 8107d2e:	681b      	ldr	r3, [r3, #0]
 8107d30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8107d34:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8107d36:	69bb      	ldr	r3, [r7, #24]
 8107d38:	3302      	adds	r3, #2
 8107d3a:	61bb      	str	r3, [r7, #24]
 8107d3c:	e007      	b.n	8107d4e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8107d3e:	69fb      	ldr	r3, [r7, #28]
 8107d40:	781a      	ldrb	r2, [r3, #0]
 8107d42:	68fb      	ldr	r3, [r7, #12]
 8107d44:	681b      	ldr	r3, [r3, #0]
 8107d46:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8107d48:	69fb      	ldr	r3, [r7, #28]
 8107d4a:	3301      	adds	r3, #1
 8107d4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8107d4e:	68fb      	ldr	r3, [r7, #12]
 8107d50:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8107d54:	b29b      	uxth	r3, r3
 8107d56:	3b01      	subs	r3, #1
 8107d58:	b29a      	uxth	r2, r3
 8107d5a:	68fb      	ldr	r3, [r7, #12]
 8107d5c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8107d60:	68fb      	ldr	r3, [r7, #12]
 8107d62:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8107d66:	b29b      	uxth	r3, r3
 8107d68:	2b00      	cmp	r3, #0
 8107d6a:	d1cc      	bne.n	8107d06 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8107d6c:	683b      	ldr	r3, [r7, #0]
 8107d6e:	9300      	str	r3, [sp, #0]
 8107d70:	697b      	ldr	r3, [r7, #20]
 8107d72:	2200      	movs	r2, #0
 8107d74:	2140      	movs	r1, #64	; 0x40
 8107d76:	68f8      	ldr	r0, [r7, #12]
 8107d78:	f000 fe65 	bl	8108a46 <UART_WaitOnFlagUntilTimeout>
 8107d7c:	4603      	mov	r3, r0
 8107d7e:	2b00      	cmp	r3, #0
 8107d80:	d001      	beq.n	8107d86 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8107d82:	2303      	movs	r3, #3
 8107d84:	e006      	b.n	8107d94 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8107d86:	68fb      	ldr	r3, [r7, #12]
 8107d88:	2220      	movs	r2, #32
 8107d8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8107d8e:	2300      	movs	r3, #0
 8107d90:	e000      	b.n	8107d94 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8107d92:	2302      	movs	r3, #2
  }
}
 8107d94:	4618      	mov	r0, r3
 8107d96:	3720      	adds	r7, #32
 8107d98:	46bd      	mov	sp, r7
 8107d9a:	bd80      	pop	{r7, pc}

08107d9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8107d9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8107da0:	b092      	sub	sp, #72	; 0x48
 8107da2:	af00      	add	r7, sp, #0
 8107da4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8107da6:	2300      	movs	r3, #0
 8107da8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8107dac:	697b      	ldr	r3, [r7, #20]
 8107dae:	689a      	ldr	r2, [r3, #8]
 8107db0:	697b      	ldr	r3, [r7, #20]
 8107db2:	691b      	ldr	r3, [r3, #16]
 8107db4:	431a      	orrs	r2, r3
 8107db6:	697b      	ldr	r3, [r7, #20]
 8107db8:	695b      	ldr	r3, [r3, #20]
 8107dba:	431a      	orrs	r2, r3
 8107dbc:	697b      	ldr	r3, [r7, #20]
 8107dbe:	69db      	ldr	r3, [r3, #28]
 8107dc0:	4313      	orrs	r3, r2
 8107dc2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8107dc4:	697b      	ldr	r3, [r7, #20]
 8107dc6:	681b      	ldr	r3, [r3, #0]
 8107dc8:	681a      	ldr	r2, [r3, #0]
 8107dca:	4bbd      	ldr	r3, [pc, #756]	; (81080c0 <UART_SetConfig+0x324>)
 8107dcc:	4013      	ands	r3, r2
 8107dce:	697a      	ldr	r2, [r7, #20]
 8107dd0:	6812      	ldr	r2, [r2, #0]
 8107dd2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8107dd4:	430b      	orrs	r3, r1
 8107dd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8107dd8:	697b      	ldr	r3, [r7, #20]
 8107dda:	681b      	ldr	r3, [r3, #0]
 8107ddc:	685b      	ldr	r3, [r3, #4]
 8107dde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8107de2:	697b      	ldr	r3, [r7, #20]
 8107de4:	68da      	ldr	r2, [r3, #12]
 8107de6:	697b      	ldr	r3, [r7, #20]
 8107de8:	681b      	ldr	r3, [r3, #0]
 8107dea:	430a      	orrs	r2, r1
 8107dec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8107dee:	697b      	ldr	r3, [r7, #20]
 8107df0:	699b      	ldr	r3, [r3, #24]
 8107df2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8107df4:	697b      	ldr	r3, [r7, #20]
 8107df6:	681b      	ldr	r3, [r3, #0]
 8107df8:	4ab2      	ldr	r2, [pc, #712]	; (81080c4 <UART_SetConfig+0x328>)
 8107dfa:	4293      	cmp	r3, r2
 8107dfc:	d004      	beq.n	8107e08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8107dfe:	697b      	ldr	r3, [r7, #20]
 8107e00:	6a1b      	ldr	r3, [r3, #32]
 8107e02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8107e04:	4313      	orrs	r3, r2
 8107e06:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8107e08:	697b      	ldr	r3, [r7, #20]
 8107e0a:	681b      	ldr	r3, [r3, #0]
 8107e0c:	689b      	ldr	r3, [r3, #8]
 8107e0e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8107e12:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8107e16:	697a      	ldr	r2, [r7, #20]
 8107e18:	6812      	ldr	r2, [r2, #0]
 8107e1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8107e1c:	430b      	orrs	r3, r1
 8107e1e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8107e20:	697b      	ldr	r3, [r7, #20]
 8107e22:	681b      	ldr	r3, [r3, #0]
 8107e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107e26:	f023 010f 	bic.w	r1, r3, #15
 8107e2a:	697b      	ldr	r3, [r7, #20]
 8107e2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8107e2e:	697b      	ldr	r3, [r7, #20]
 8107e30:	681b      	ldr	r3, [r3, #0]
 8107e32:	430a      	orrs	r2, r1
 8107e34:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8107e36:	697b      	ldr	r3, [r7, #20]
 8107e38:	681b      	ldr	r3, [r3, #0]
 8107e3a:	4aa3      	ldr	r2, [pc, #652]	; (81080c8 <UART_SetConfig+0x32c>)
 8107e3c:	4293      	cmp	r3, r2
 8107e3e:	d177      	bne.n	8107f30 <UART_SetConfig+0x194>
 8107e40:	4ba2      	ldr	r3, [pc, #648]	; (81080cc <UART_SetConfig+0x330>)
 8107e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107e44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8107e48:	2b28      	cmp	r3, #40	; 0x28
 8107e4a:	d86d      	bhi.n	8107f28 <UART_SetConfig+0x18c>
 8107e4c:	a201      	add	r2, pc, #4	; (adr r2, 8107e54 <UART_SetConfig+0xb8>)
 8107e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107e52:	bf00      	nop
 8107e54:	08107ef9 	.word	0x08107ef9
 8107e58:	08107f29 	.word	0x08107f29
 8107e5c:	08107f29 	.word	0x08107f29
 8107e60:	08107f29 	.word	0x08107f29
 8107e64:	08107f29 	.word	0x08107f29
 8107e68:	08107f29 	.word	0x08107f29
 8107e6c:	08107f29 	.word	0x08107f29
 8107e70:	08107f29 	.word	0x08107f29
 8107e74:	08107f01 	.word	0x08107f01
 8107e78:	08107f29 	.word	0x08107f29
 8107e7c:	08107f29 	.word	0x08107f29
 8107e80:	08107f29 	.word	0x08107f29
 8107e84:	08107f29 	.word	0x08107f29
 8107e88:	08107f29 	.word	0x08107f29
 8107e8c:	08107f29 	.word	0x08107f29
 8107e90:	08107f29 	.word	0x08107f29
 8107e94:	08107f09 	.word	0x08107f09
 8107e98:	08107f29 	.word	0x08107f29
 8107e9c:	08107f29 	.word	0x08107f29
 8107ea0:	08107f29 	.word	0x08107f29
 8107ea4:	08107f29 	.word	0x08107f29
 8107ea8:	08107f29 	.word	0x08107f29
 8107eac:	08107f29 	.word	0x08107f29
 8107eb0:	08107f29 	.word	0x08107f29
 8107eb4:	08107f11 	.word	0x08107f11
 8107eb8:	08107f29 	.word	0x08107f29
 8107ebc:	08107f29 	.word	0x08107f29
 8107ec0:	08107f29 	.word	0x08107f29
 8107ec4:	08107f29 	.word	0x08107f29
 8107ec8:	08107f29 	.word	0x08107f29
 8107ecc:	08107f29 	.word	0x08107f29
 8107ed0:	08107f29 	.word	0x08107f29
 8107ed4:	08107f19 	.word	0x08107f19
 8107ed8:	08107f29 	.word	0x08107f29
 8107edc:	08107f29 	.word	0x08107f29
 8107ee0:	08107f29 	.word	0x08107f29
 8107ee4:	08107f29 	.word	0x08107f29
 8107ee8:	08107f29 	.word	0x08107f29
 8107eec:	08107f29 	.word	0x08107f29
 8107ef0:	08107f29 	.word	0x08107f29
 8107ef4:	08107f21 	.word	0x08107f21
 8107ef8:	2301      	movs	r3, #1
 8107efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107efe:	e220      	b.n	8108342 <UART_SetConfig+0x5a6>
 8107f00:	2304      	movs	r3, #4
 8107f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107f06:	e21c      	b.n	8108342 <UART_SetConfig+0x5a6>
 8107f08:	2308      	movs	r3, #8
 8107f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107f0e:	e218      	b.n	8108342 <UART_SetConfig+0x5a6>
 8107f10:	2310      	movs	r3, #16
 8107f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107f16:	e214      	b.n	8108342 <UART_SetConfig+0x5a6>
 8107f18:	2320      	movs	r3, #32
 8107f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107f1e:	e210      	b.n	8108342 <UART_SetConfig+0x5a6>
 8107f20:	2340      	movs	r3, #64	; 0x40
 8107f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107f26:	e20c      	b.n	8108342 <UART_SetConfig+0x5a6>
 8107f28:	2380      	movs	r3, #128	; 0x80
 8107f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107f2e:	e208      	b.n	8108342 <UART_SetConfig+0x5a6>
 8107f30:	697b      	ldr	r3, [r7, #20]
 8107f32:	681b      	ldr	r3, [r3, #0]
 8107f34:	4a66      	ldr	r2, [pc, #408]	; (81080d0 <UART_SetConfig+0x334>)
 8107f36:	4293      	cmp	r3, r2
 8107f38:	d130      	bne.n	8107f9c <UART_SetConfig+0x200>
 8107f3a:	4b64      	ldr	r3, [pc, #400]	; (81080cc <UART_SetConfig+0x330>)
 8107f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107f3e:	f003 0307 	and.w	r3, r3, #7
 8107f42:	2b05      	cmp	r3, #5
 8107f44:	d826      	bhi.n	8107f94 <UART_SetConfig+0x1f8>
 8107f46:	a201      	add	r2, pc, #4	; (adr r2, 8107f4c <UART_SetConfig+0x1b0>)
 8107f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107f4c:	08107f65 	.word	0x08107f65
 8107f50:	08107f6d 	.word	0x08107f6d
 8107f54:	08107f75 	.word	0x08107f75
 8107f58:	08107f7d 	.word	0x08107f7d
 8107f5c:	08107f85 	.word	0x08107f85
 8107f60:	08107f8d 	.word	0x08107f8d
 8107f64:	2300      	movs	r3, #0
 8107f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107f6a:	e1ea      	b.n	8108342 <UART_SetConfig+0x5a6>
 8107f6c:	2304      	movs	r3, #4
 8107f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107f72:	e1e6      	b.n	8108342 <UART_SetConfig+0x5a6>
 8107f74:	2308      	movs	r3, #8
 8107f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107f7a:	e1e2      	b.n	8108342 <UART_SetConfig+0x5a6>
 8107f7c:	2310      	movs	r3, #16
 8107f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107f82:	e1de      	b.n	8108342 <UART_SetConfig+0x5a6>
 8107f84:	2320      	movs	r3, #32
 8107f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107f8a:	e1da      	b.n	8108342 <UART_SetConfig+0x5a6>
 8107f8c:	2340      	movs	r3, #64	; 0x40
 8107f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107f92:	e1d6      	b.n	8108342 <UART_SetConfig+0x5a6>
 8107f94:	2380      	movs	r3, #128	; 0x80
 8107f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107f9a:	e1d2      	b.n	8108342 <UART_SetConfig+0x5a6>
 8107f9c:	697b      	ldr	r3, [r7, #20]
 8107f9e:	681b      	ldr	r3, [r3, #0]
 8107fa0:	4a4c      	ldr	r2, [pc, #304]	; (81080d4 <UART_SetConfig+0x338>)
 8107fa2:	4293      	cmp	r3, r2
 8107fa4:	d130      	bne.n	8108008 <UART_SetConfig+0x26c>
 8107fa6:	4b49      	ldr	r3, [pc, #292]	; (81080cc <UART_SetConfig+0x330>)
 8107fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107faa:	f003 0307 	and.w	r3, r3, #7
 8107fae:	2b05      	cmp	r3, #5
 8107fb0:	d826      	bhi.n	8108000 <UART_SetConfig+0x264>
 8107fb2:	a201      	add	r2, pc, #4	; (adr r2, 8107fb8 <UART_SetConfig+0x21c>)
 8107fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107fb8:	08107fd1 	.word	0x08107fd1
 8107fbc:	08107fd9 	.word	0x08107fd9
 8107fc0:	08107fe1 	.word	0x08107fe1
 8107fc4:	08107fe9 	.word	0x08107fe9
 8107fc8:	08107ff1 	.word	0x08107ff1
 8107fcc:	08107ff9 	.word	0x08107ff9
 8107fd0:	2300      	movs	r3, #0
 8107fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107fd6:	e1b4      	b.n	8108342 <UART_SetConfig+0x5a6>
 8107fd8:	2304      	movs	r3, #4
 8107fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107fde:	e1b0      	b.n	8108342 <UART_SetConfig+0x5a6>
 8107fe0:	2308      	movs	r3, #8
 8107fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107fe6:	e1ac      	b.n	8108342 <UART_SetConfig+0x5a6>
 8107fe8:	2310      	movs	r3, #16
 8107fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107fee:	e1a8      	b.n	8108342 <UART_SetConfig+0x5a6>
 8107ff0:	2320      	movs	r3, #32
 8107ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107ff6:	e1a4      	b.n	8108342 <UART_SetConfig+0x5a6>
 8107ff8:	2340      	movs	r3, #64	; 0x40
 8107ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107ffe:	e1a0      	b.n	8108342 <UART_SetConfig+0x5a6>
 8108000:	2380      	movs	r3, #128	; 0x80
 8108002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108006:	e19c      	b.n	8108342 <UART_SetConfig+0x5a6>
 8108008:	697b      	ldr	r3, [r7, #20]
 810800a:	681b      	ldr	r3, [r3, #0]
 810800c:	4a32      	ldr	r2, [pc, #200]	; (81080d8 <UART_SetConfig+0x33c>)
 810800e:	4293      	cmp	r3, r2
 8108010:	d130      	bne.n	8108074 <UART_SetConfig+0x2d8>
 8108012:	4b2e      	ldr	r3, [pc, #184]	; (81080cc <UART_SetConfig+0x330>)
 8108014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108016:	f003 0307 	and.w	r3, r3, #7
 810801a:	2b05      	cmp	r3, #5
 810801c:	d826      	bhi.n	810806c <UART_SetConfig+0x2d0>
 810801e:	a201      	add	r2, pc, #4	; (adr r2, 8108024 <UART_SetConfig+0x288>)
 8108020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108024:	0810803d 	.word	0x0810803d
 8108028:	08108045 	.word	0x08108045
 810802c:	0810804d 	.word	0x0810804d
 8108030:	08108055 	.word	0x08108055
 8108034:	0810805d 	.word	0x0810805d
 8108038:	08108065 	.word	0x08108065
 810803c:	2300      	movs	r3, #0
 810803e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108042:	e17e      	b.n	8108342 <UART_SetConfig+0x5a6>
 8108044:	2304      	movs	r3, #4
 8108046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810804a:	e17a      	b.n	8108342 <UART_SetConfig+0x5a6>
 810804c:	2308      	movs	r3, #8
 810804e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108052:	e176      	b.n	8108342 <UART_SetConfig+0x5a6>
 8108054:	2310      	movs	r3, #16
 8108056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810805a:	e172      	b.n	8108342 <UART_SetConfig+0x5a6>
 810805c:	2320      	movs	r3, #32
 810805e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108062:	e16e      	b.n	8108342 <UART_SetConfig+0x5a6>
 8108064:	2340      	movs	r3, #64	; 0x40
 8108066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810806a:	e16a      	b.n	8108342 <UART_SetConfig+0x5a6>
 810806c:	2380      	movs	r3, #128	; 0x80
 810806e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108072:	e166      	b.n	8108342 <UART_SetConfig+0x5a6>
 8108074:	697b      	ldr	r3, [r7, #20]
 8108076:	681b      	ldr	r3, [r3, #0]
 8108078:	4a18      	ldr	r2, [pc, #96]	; (81080dc <UART_SetConfig+0x340>)
 810807a:	4293      	cmp	r3, r2
 810807c:	d140      	bne.n	8108100 <UART_SetConfig+0x364>
 810807e:	4b13      	ldr	r3, [pc, #76]	; (81080cc <UART_SetConfig+0x330>)
 8108080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108082:	f003 0307 	and.w	r3, r3, #7
 8108086:	2b05      	cmp	r3, #5
 8108088:	d836      	bhi.n	81080f8 <UART_SetConfig+0x35c>
 810808a:	a201      	add	r2, pc, #4	; (adr r2, 8108090 <UART_SetConfig+0x2f4>)
 810808c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108090:	081080a9 	.word	0x081080a9
 8108094:	081080b1 	.word	0x081080b1
 8108098:	081080b9 	.word	0x081080b9
 810809c:	081080e1 	.word	0x081080e1
 81080a0:	081080e9 	.word	0x081080e9
 81080a4:	081080f1 	.word	0x081080f1
 81080a8:	2300      	movs	r3, #0
 81080aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81080ae:	e148      	b.n	8108342 <UART_SetConfig+0x5a6>
 81080b0:	2304      	movs	r3, #4
 81080b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81080b6:	e144      	b.n	8108342 <UART_SetConfig+0x5a6>
 81080b8:	2308      	movs	r3, #8
 81080ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81080be:	e140      	b.n	8108342 <UART_SetConfig+0x5a6>
 81080c0:	cfff69f3 	.word	0xcfff69f3
 81080c4:	58000c00 	.word	0x58000c00
 81080c8:	40011000 	.word	0x40011000
 81080cc:	58024400 	.word	0x58024400
 81080d0:	40004400 	.word	0x40004400
 81080d4:	40004800 	.word	0x40004800
 81080d8:	40004c00 	.word	0x40004c00
 81080dc:	40005000 	.word	0x40005000
 81080e0:	2310      	movs	r3, #16
 81080e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81080e6:	e12c      	b.n	8108342 <UART_SetConfig+0x5a6>
 81080e8:	2320      	movs	r3, #32
 81080ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81080ee:	e128      	b.n	8108342 <UART_SetConfig+0x5a6>
 81080f0:	2340      	movs	r3, #64	; 0x40
 81080f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81080f6:	e124      	b.n	8108342 <UART_SetConfig+0x5a6>
 81080f8:	2380      	movs	r3, #128	; 0x80
 81080fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81080fe:	e120      	b.n	8108342 <UART_SetConfig+0x5a6>
 8108100:	697b      	ldr	r3, [r7, #20]
 8108102:	681b      	ldr	r3, [r3, #0]
 8108104:	4acb      	ldr	r2, [pc, #812]	; (8108434 <UART_SetConfig+0x698>)
 8108106:	4293      	cmp	r3, r2
 8108108:	d176      	bne.n	81081f8 <UART_SetConfig+0x45c>
 810810a:	4bcb      	ldr	r3, [pc, #812]	; (8108438 <UART_SetConfig+0x69c>)
 810810c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810810e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8108112:	2b28      	cmp	r3, #40	; 0x28
 8108114:	d86c      	bhi.n	81081f0 <UART_SetConfig+0x454>
 8108116:	a201      	add	r2, pc, #4	; (adr r2, 810811c <UART_SetConfig+0x380>)
 8108118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810811c:	081081c1 	.word	0x081081c1
 8108120:	081081f1 	.word	0x081081f1
 8108124:	081081f1 	.word	0x081081f1
 8108128:	081081f1 	.word	0x081081f1
 810812c:	081081f1 	.word	0x081081f1
 8108130:	081081f1 	.word	0x081081f1
 8108134:	081081f1 	.word	0x081081f1
 8108138:	081081f1 	.word	0x081081f1
 810813c:	081081c9 	.word	0x081081c9
 8108140:	081081f1 	.word	0x081081f1
 8108144:	081081f1 	.word	0x081081f1
 8108148:	081081f1 	.word	0x081081f1
 810814c:	081081f1 	.word	0x081081f1
 8108150:	081081f1 	.word	0x081081f1
 8108154:	081081f1 	.word	0x081081f1
 8108158:	081081f1 	.word	0x081081f1
 810815c:	081081d1 	.word	0x081081d1
 8108160:	081081f1 	.word	0x081081f1
 8108164:	081081f1 	.word	0x081081f1
 8108168:	081081f1 	.word	0x081081f1
 810816c:	081081f1 	.word	0x081081f1
 8108170:	081081f1 	.word	0x081081f1
 8108174:	081081f1 	.word	0x081081f1
 8108178:	081081f1 	.word	0x081081f1
 810817c:	081081d9 	.word	0x081081d9
 8108180:	081081f1 	.word	0x081081f1
 8108184:	081081f1 	.word	0x081081f1
 8108188:	081081f1 	.word	0x081081f1
 810818c:	081081f1 	.word	0x081081f1
 8108190:	081081f1 	.word	0x081081f1
 8108194:	081081f1 	.word	0x081081f1
 8108198:	081081f1 	.word	0x081081f1
 810819c:	081081e1 	.word	0x081081e1
 81081a0:	081081f1 	.word	0x081081f1
 81081a4:	081081f1 	.word	0x081081f1
 81081a8:	081081f1 	.word	0x081081f1
 81081ac:	081081f1 	.word	0x081081f1
 81081b0:	081081f1 	.word	0x081081f1
 81081b4:	081081f1 	.word	0x081081f1
 81081b8:	081081f1 	.word	0x081081f1
 81081bc:	081081e9 	.word	0x081081e9
 81081c0:	2301      	movs	r3, #1
 81081c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81081c6:	e0bc      	b.n	8108342 <UART_SetConfig+0x5a6>
 81081c8:	2304      	movs	r3, #4
 81081ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81081ce:	e0b8      	b.n	8108342 <UART_SetConfig+0x5a6>
 81081d0:	2308      	movs	r3, #8
 81081d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81081d6:	e0b4      	b.n	8108342 <UART_SetConfig+0x5a6>
 81081d8:	2310      	movs	r3, #16
 81081da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81081de:	e0b0      	b.n	8108342 <UART_SetConfig+0x5a6>
 81081e0:	2320      	movs	r3, #32
 81081e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81081e6:	e0ac      	b.n	8108342 <UART_SetConfig+0x5a6>
 81081e8:	2340      	movs	r3, #64	; 0x40
 81081ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81081ee:	e0a8      	b.n	8108342 <UART_SetConfig+0x5a6>
 81081f0:	2380      	movs	r3, #128	; 0x80
 81081f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81081f6:	e0a4      	b.n	8108342 <UART_SetConfig+0x5a6>
 81081f8:	697b      	ldr	r3, [r7, #20]
 81081fa:	681b      	ldr	r3, [r3, #0]
 81081fc:	4a8f      	ldr	r2, [pc, #572]	; (810843c <UART_SetConfig+0x6a0>)
 81081fe:	4293      	cmp	r3, r2
 8108200:	d130      	bne.n	8108264 <UART_SetConfig+0x4c8>
 8108202:	4b8d      	ldr	r3, [pc, #564]	; (8108438 <UART_SetConfig+0x69c>)
 8108204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108206:	f003 0307 	and.w	r3, r3, #7
 810820a:	2b05      	cmp	r3, #5
 810820c:	d826      	bhi.n	810825c <UART_SetConfig+0x4c0>
 810820e:	a201      	add	r2, pc, #4	; (adr r2, 8108214 <UART_SetConfig+0x478>)
 8108210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108214:	0810822d 	.word	0x0810822d
 8108218:	08108235 	.word	0x08108235
 810821c:	0810823d 	.word	0x0810823d
 8108220:	08108245 	.word	0x08108245
 8108224:	0810824d 	.word	0x0810824d
 8108228:	08108255 	.word	0x08108255
 810822c:	2300      	movs	r3, #0
 810822e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108232:	e086      	b.n	8108342 <UART_SetConfig+0x5a6>
 8108234:	2304      	movs	r3, #4
 8108236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810823a:	e082      	b.n	8108342 <UART_SetConfig+0x5a6>
 810823c:	2308      	movs	r3, #8
 810823e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108242:	e07e      	b.n	8108342 <UART_SetConfig+0x5a6>
 8108244:	2310      	movs	r3, #16
 8108246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810824a:	e07a      	b.n	8108342 <UART_SetConfig+0x5a6>
 810824c:	2320      	movs	r3, #32
 810824e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108252:	e076      	b.n	8108342 <UART_SetConfig+0x5a6>
 8108254:	2340      	movs	r3, #64	; 0x40
 8108256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810825a:	e072      	b.n	8108342 <UART_SetConfig+0x5a6>
 810825c:	2380      	movs	r3, #128	; 0x80
 810825e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108262:	e06e      	b.n	8108342 <UART_SetConfig+0x5a6>
 8108264:	697b      	ldr	r3, [r7, #20]
 8108266:	681b      	ldr	r3, [r3, #0]
 8108268:	4a75      	ldr	r2, [pc, #468]	; (8108440 <UART_SetConfig+0x6a4>)
 810826a:	4293      	cmp	r3, r2
 810826c:	d130      	bne.n	81082d0 <UART_SetConfig+0x534>
 810826e:	4b72      	ldr	r3, [pc, #456]	; (8108438 <UART_SetConfig+0x69c>)
 8108270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108272:	f003 0307 	and.w	r3, r3, #7
 8108276:	2b05      	cmp	r3, #5
 8108278:	d826      	bhi.n	81082c8 <UART_SetConfig+0x52c>
 810827a:	a201      	add	r2, pc, #4	; (adr r2, 8108280 <UART_SetConfig+0x4e4>)
 810827c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108280:	08108299 	.word	0x08108299
 8108284:	081082a1 	.word	0x081082a1
 8108288:	081082a9 	.word	0x081082a9
 810828c:	081082b1 	.word	0x081082b1
 8108290:	081082b9 	.word	0x081082b9
 8108294:	081082c1 	.word	0x081082c1
 8108298:	2300      	movs	r3, #0
 810829a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810829e:	e050      	b.n	8108342 <UART_SetConfig+0x5a6>
 81082a0:	2304      	movs	r3, #4
 81082a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81082a6:	e04c      	b.n	8108342 <UART_SetConfig+0x5a6>
 81082a8:	2308      	movs	r3, #8
 81082aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81082ae:	e048      	b.n	8108342 <UART_SetConfig+0x5a6>
 81082b0:	2310      	movs	r3, #16
 81082b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81082b6:	e044      	b.n	8108342 <UART_SetConfig+0x5a6>
 81082b8:	2320      	movs	r3, #32
 81082ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81082be:	e040      	b.n	8108342 <UART_SetConfig+0x5a6>
 81082c0:	2340      	movs	r3, #64	; 0x40
 81082c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81082c6:	e03c      	b.n	8108342 <UART_SetConfig+0x5a6>
 81082c8:	2380      	movs	r3, #128	; 0x80
 81082ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81082ce:	e038      	b.n	8108342 <UART_SetConfig+0x5a6>
 81082d0:	697b      	ldr	r3, [r7, #20]
 81082d2:	681b      	ldr	r3, [r3, #0]
 81082d4:	4a5b      	ldr	r2, [pc, #364]	; (8108444 <UART_SetConfig+0x6a8>)
 81082d6:	4293      	cmp	r3, r2
 81082d8:	d130      	bne.n	810833c <UART_SetConfig+0x5a0>
 81082da:	4b57      	ldr	r3, [pc, #348]	; (8108438 <UART_SetConfig+0x69c>)
 81082dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81082de:	f003 0307 	and.w	r3, r3, #7
 81082e2:	2b05      	cmp	r3, #5
 81082e4:	d826      	bhi.n	8108334 <UART_SetConfig+0x598>
 81082e6:	a201      	add	r2, pc, #4	; (adr r2, 81082ec <UART_SetConfig+0x550>)
 81082e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81082ec:	08108305 	.word	0x08108305
 81082f0:	0810830d 	.word	0x0810830d
 81082f4:	08108315 	.word	0x08108315
 81082f8:	0810831d 	.word	0x0810831d
 81082fc:	08108325 	.word	0x08108325
 8108300:	0810832d 	.word	0x0810832d
 8108304:	2302      	movs	r3, #2
 8108306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810830a:	e01a      	b.n	8108342 <UART_SetConfig+0x5a6>
 810830c:	2304      	movs	r3, #4
 810830e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108312:	e016      	b.n	8108342 <UART_SetConfig+0x5a6>
 8108314:	2308      	movs	r3, #8
 8108316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810831a:	e012      	b.n	8108342 <UART_SetConfig+0x5a6>
 810831c:	2310      	movs	r3, #16
 810831e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108322:	e00e      	b.n	8108342 <UART_SetConfig+0x5a6>
 8108324:	2320      	movs	r3, #32
 8108326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810832a:	e00a      	b.n	8108342 <UART_SetConfig+0x5a6>
 810832c:	2340      	movs	r3, #64	; 0x40
 810832e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108332:	e006      	b.n	8108342 <UART_SetConfig+0x5a6>
 8108334:	2380      	movs	r3, #128	; 0x80
 8108336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810833a:	e002      	b.n	8108342 <UART_SetConfig+0x5a6>
 810833c:	2380      	movs	r3, #128	; 0x80
 810833e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8108342:	697b      	ldr	r3, [r7, #20]
 8108344:	681b      	ldr	r3, [r3, #0]
 8108346:	4a3f      	ldr	r2, [pc, #252]	; (8108444 <UART_SetConfig+0x6a8>)
 8108348:	4293      	cmp	r3, r2
 810834a:	f040 80f8 	bne.w	810853e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810834e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8108352:	2b20      	cmp	r3, #32
 8108354:	dc46      	bgt.n	81083e4 <UART_SetConfig+0x648>
 8108356:	2b02      	cmp	r3, #2
 8108358:	f2c0 8082 	blt.w	8108460 <UART_SetConfig+0x6c4>
 810835c:	3b02      	subs	r3, #2
 810835e:	2b1e      	cmp	r3, #30
 8108360:	d87e      	bhi.n	8108460 <UART_SetConfig+0x6c4>
 8108362:	a201      	add	r2, pc, #4	; (adr r2, 8108368 <UART_SetConfig+0x5cc>)
 8108364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108368:	081083eb 	.word	0x081083eb
 810836c:	08108461 	.word	0x08108461
 8108370:	081083f3 	.word	0x081083f3
 8108374:	08108461 	.word	0x08108461
 8108378:	08108461 	.word	0x08108461
 810837c:	08108461 	.word	0x08108461
 8108380:	08108403 	.word	0x08108403
 8108384:	08108461 	.word	0x08108461
 8108388:	08108461 	.word	0x08108461
 810838c:	08108461 	.word	0x08108461
 8108390:	08108461 	.word	0x08108461
 8108394:	08108461 	.word	0x08108461
 8108398:	08108461 	.word	0x08108461
 810839c:	08108461 	.word	0x08108461
 81083a0:	08108413 	.word	0x08108413
 81083a4:	08108461 	.word	0x08108461
 81083a8:	08108461 	.word	0x08108461
 81083ac:	08108461 	.word	0x08108461
 81083b0:	08108461 	.word	0x08108461
 81083b4:	08108461 	.word	0x08108461
 81083b8:	08108461 	.word	0x08108461
 81083bc:	08108461 	.word	0x08108461
 81083c0:	08108461 	.word	0x08108461
 81083c4:	08108461 	.word	0x08108461
 81083c8:	08108461 	.word	0x08108461
 81083cc:	08108461 	.word	0x08108461
 81083d0:	08108461 	.word	0x08108461
 81083d4:	08108461 	.word	0x08108461
 81083d8:	08108461 	.word	0x08108461
 81083dc:	08108461 	.word	0x08108461
 81083e0:	08108453 	.word	0x08108453
 81083e4:	2b40      	cmp	r3, #64	; 0x40
 81083e6:	d037      	beq.n	8108458 <UART_SetConfig+0x6bc>
 81083e8:	e03a      	b.n	8108460 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 81083ea:	f7fd fa83 	bl	81058f4 <HAL_RCCEx_GetD3PCLK1Freq>
 81083ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81083f0:	e03c      	b.n	810846c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81083f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81083f6:	4618      	mov	r0, r3
 81083f8:	f7fd fa92 	bl	8105920 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81083fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81083fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108400:	e034      	b.n	810846c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108402:	f107 0318 	add.w	r3, r7, #24
 8108406:	4618      	mov	r0, r3
 8108408:	f7fd fbde 	bl	8105bc8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810840c:	69fb      	ldr	r3, [r7, #28]
 810840e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108410:	e02c      	b.n	810846c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108412:	4b09      	ldr	r3, [pc, #36]	; (8108438 <UART_SetConfig+0x69c>)
 8108414:	681b      	ldr	r3, [r3, #0]
 8108416:	f003 0320 	and.w	r3, r3, #32
 810841a:	2b00      	cmp	r3, #0
 810841c:	d016      	beq.n	810844c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810841e:	4b06      	ldr	r3, [pc, #24]	; (8108438 <UART_SetConfig+0x69c>)
 8108420:	681b      	ldr	r3, [r3, #0]
 8108422:	08db      	lsrs	r3, r3, #3
 8108424:	f003 0303 	and.w	r3, r3, #3
 8108428:	4a07      	ldr	r2, [pc, #28]	; (8108448 <UART_SetConfig+0x6ac>)
 810842a:	fa22 f303 	lsr.w	r3, r2, r3
 810842e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8108430:	e01c      	b.n	810846c <UART_SetConfig+0x6d0>
 8108432:	bf00      	nop
 8108434:	40011400 	.word	0x40011400
 8108438:	58024400 	.word	0x58024400
 810843c:	40007800 	.word	0x40007800
 8108440:	40007c00 	.word	0x40007c00
 8108444:	58000c00 	.word	0x58000c00
 8108448:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 810844c:	4b9d      	ldr	r3, [pc, #628]	; (81086c4 <UART_SetConfig+0x928>)
 810844e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108450:	e00c      	b.n	810846c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8108452:	4b9d      	ldr	r3, [pc, #628]	; (81086c8 <UART_SetConfig+0x92c>)
 8108454:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108456:	e009      	b.n	810846c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8108458:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810845c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810845e:	e005      	b.n	810846c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8108460:	2300      	movs	r3, #0
 8108462:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8108464:	2301      	movs	r3, #1
 8108466:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 810846a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810846c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810846e:	2b00      	cmp	r3, #0
 8108470:	f000 81de 	beq.w	8108830 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8108474:	697b      	ldr	r3, [r7, #20]
 8108476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108478:	4a94      	ldr	r2, [pc, #592]	; (81086cc <UART_SetConfig+0x930>)
 810847a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810847e:	461a      	mov	r2, r3
 8108480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108482:	fbb3 f3f2 	udiv	r3, r3, r2
 8108486:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8108488:	697b      	ldr	r3, [r7, #20]
 810848a:	685a      	ldr	r2, [r3, #4]
 810848c:	4613      	mov	r3, r2
 810848e:	005b      	lsls	r3, r3, #1
 8108490:	4413      	add	r3, r2
 8108492:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8108494:	429a      	cmp	r2, r3
 8108496:	d305      	bcc.n	81084a4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8108498:	697b      	ldr	r3, [r7, #20]
 810849a:	685b      	ldr	r3, [r3, #4]
 810849c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810849e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81084a0:	429a      	cmp	r2, r3
 81084a2:	d903      	bls.n	81084ac <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 81084a4:	2301      	movs	r3, #1
 81084a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 81084aa:	e1c1      	b.n	8108830 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81084ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81084ae:	2200      	movs	r2, #0
 81084b0:	60bb      	str	r3, [r7, #8]
 81084b2:	60fa      	str	r2, [r7, #12]
 81084b4:	697b      	ldr	r3, [r7, #20]
 81084b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81084b8:	4a84      	ldr	r2, [pc, #528]	; (81086cc <UART_SetConfig+0x930>)
 81084ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81084be:	b29b      	uxth	r3, r3
 81084c0:	2200      	movs	r2, #0
 81084c2:	603b      	str	r3, [r7, #0]
 81084c4:	607a      	str	r2, [r7, #4]
 81084c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 81084ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 81084ce:	f7f7 ff5f 	bl	8100390 <__aeabi_uldivmod>
 81084d2:	4602      	mov	r2, r0
 81084d4:	460b      	mov	r3, r1
 81084d6:	4610      	mov	r0, r2
 81084d8:	4619      	mov	r1, r3
 81084da:	f04f 0200 	mov.w	r2, #0
 81084de:	f04f 0300 	mov.w	r3, #0
 81084e2:	020b      	lsls	r3, r1, #8
 81084e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 81084e8:	0202      	lsls	r2, r0, #8
 81084ea:	6979      	ldr	r1, [r7, #20]
 81084ec:	6849      	ldr	r1, [r1, #4]
 81084ee:	0849      	lsrs	r1, r1, #1
 81084f0:	2000      	movs	r0, #0
 81084f2:	460c      	mov	r4, r1
 81084f4:	4605      	mov	r5, r0
 81084f6:	eb12 0804 	adds.w	r8, r2, r4
 81084fa:	eb43 0905 	adc.w	r9, r3, r5
 81084fe:	697b      	ldr	r3, [r7, #20]
 8108500:	685b      	ldr	r3, [r3, #4]
 8108502:	2200      	movs	r2, #0
 8108504:	469a      	mov	sl, r3
 8108506:	4693      	mov	fp, r2
 8108508:	4652      	mov	r2, sl
 810850a:	465b      	mov	r3, fp
 810850c:	4640      	mov	r0, r8
 810850e:	4649      	mov	r1, r9
 8108510:	f7f7 ff3e 	bl	8100390 <__aeabi_uldivmod>
 8108514:	4602      	mov	r2, r0
 8108516:	460b      	mov	r3, r1
 8108518:	4613      	mov	r3, r2
 810851a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810851c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810851e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8108522:	d308      	bcc.n	8108536 <UART_SetConfig+0x79a>
 8108524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108526:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810852a:	d204      	bcs.n	8108536 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 810852c:	697b      	ldr	r3, [r7, #20]
 810852e:	681b      	ldr	r3, [r3, #0]
 8108530:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8108532:	60da      	str	r2, [r3, #12]
 8108534:	e17c      	b.n	8108830 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8108536:	2301      	movs	r3, #1
 8108538:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 810853c:	e178      	b.n	8108830 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810853e:	697b      	ldr	r3, [r7, #20]
 8108540:	69db      	ldr	r3, [r3, #28]
 8108542:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8108546:	f040 80c5 	bne.w	81086d4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 810854a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 810854e:	2b20      	cmp	r3, #32
 8108550:	dc48      	bgt.n	81085e4 <UART_SetConfig+0x848>
 8108552:	2b00      	cmp	r3, #0
 8108554:	db7b      	blt.n	810864e <UART_SetConfig+0x8b2>
 8108556:	2b20      	cmp	r3, #32
 8108558:	d879      	bhi.n	810864e <UART_SetConfig+0x8b2>
 810855a:	a201      	add	r2, pc, #4	; (adr r2, 8108560 <UART_SetConfig+0x7c4>)
 810855c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108560:	081085eb 	.word	0x081085eb
 8108564:	081085f3 	.word	0x081085f3
 8108568:	0810864f 	.word	0x0810864f
 810856c:	0810864f 	.word	0x0810864f
 8108570:	081085fb 	.word	0x081085fb
 8108574:	0810864f 	.word	0x0810864f
 8108578:	0810864f 	.word	0x0810864f
 810857c:	0810864f 	.word	0x0810864f
 8108580:	0810860b 	.word	0x0810860b
 8108584:	0810864f 	.word	0x0810864f
 8108588:	0810864f 	.word	0x0810864f
 810858c:	0810864f 	.word	0x0810864f
 8108590:	0810864f 	.word	0x0810864f
 8108594:	0810864f 	.word	0x0810864f
 8108598:	0810864f 	.word	0x0810864f
 810859c:	0810864f 	.word	0x0810864f
 81085a0:	0810861b 	.word	0x0810861b
 81085a4:	0810864f 	.word	0x0810864f
 81085a8:	0810864f 	.word	0x0810864f
 81085ac:	0810864f 	.word	0x0810864f
 81085b0:	0810864f 	.word	0x0810864f
 81085b4:	0810864f 	.word	0x0810864f
 81085b8:	0810864f 	.word	0x0810864f
 81085bc:	0810864f 	.word	0x0810864f
 81085c0:	0810864f 	.word	0x0810864f
 81085c4:	0810864f 	.word	0x0810864f
 81085c8:	0810864f 	.word	0x0810864f
 81085cc:	0810864f 	.word	0x0810864f
 81085d0:	0810864f 	.word	0x0810864f
 81085d4:	0810864f 	.word	0x0810864f
 81085d8:	0810864f 	.word	0x0810864f
 81085dc:	0810864f 	.word	0x0810864f
 81085e0:	08108641 	.word	0x08108641
 81085e4:	2b40      	cmp	r3, #64	; 0x40
 81085e6:	d02e      	beq.n	8108646 <UART_SetConfig+0x8aa>
 81085e8:	e031      	b.n	810864e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 81085ea:	f7fc fa11 	bl	8104a10 <HAL_RCC_GetPCLK1Freq>
 81085ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81085f0:	e033      	b.n	810865a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 81085f2:	f7fc fa23 	bl	8104a3c <HAL_RCC_GetPCLK2Freq>
 81085f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81085f8:	e02f      	b.n	810865a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81085fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81085fe:	4618      	mov	r0, r3
 8108600:	f7fd f98e 	bl	8105920 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8108604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108606:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108608:	e027      	b.n	810865a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810860a:	f107 0318 	add.w	r3, r7, #24
 810860e:	4618      	mov	r0, r3
 8108610:	f7fd fada 	bl	8105bc8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8108614:	69fb      	ldr	r3, [r7, #28]
 8108616:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108618:	e01f      	b.n	810865a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810861a:	4b2d      	ldr	r3, [pc, #180]	; (81086d0 <UART_SetConfig+0x934>)
 810861c:	681b      	ldr	r3, [r3, #0]
 810861e:	f003 0320 	and.w	r3, r3, #32
 8108622:	2b00      	cmp	r3, #0
 8108624:	d009      	beq.n	810863a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8108626:	4b2a      	ldr	r3, [pc, #168]	; (81086d0 <UART_SetConfig+0x934>)
 8108628:	681b      	ldr	r3, [r3, #0]
 810862a:	08db      	lsrs	r3, r3, #3
 810862c:	f003 0303 	and.w	r3, r3, #3
 8108630:	4a24      	ldr	r2, [pc, #144]	; (81086c4 <UART_SetConfig+0x928>)
 8108632:	fa22 f303 	lsr.w	r3, r2, r3
 8108636:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8108638:	e00f      	b.n	810865a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 810863a:	4b22      	ldr	r3, [pc, #136]	; (81086c4 <UART_SetConfig+0x928>)
 810863c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810863e:	e00c      	b.n	810865a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8108640:	4b21      	ldr	r3, [pc, #132]	; (81086c8 <UART_SetConfig+0x92c>)
 8108642:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108644:	e009      	b.n	810865a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8108646:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810864a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810864c:	e005      	b.n	810865a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 810864e:	2300      	movs	r3, #0
 8108650:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8108652:	2301      	movs	r3, #1
 8108654:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8108658:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810865a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810865c:	2b00      	cmp	r3, #0
 810865e:	f000 80e7 	beq.w	8108830 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8108662:	697b      	ldr	r3, [r7, #20]
 8108664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108666:	4a19      	ldr	r2, [pc, #100]	; (81086cc <UART_SetConfig+0x930>)
 8108668:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810866c:	461a      	mov	r2, r3
 810866e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108670:	fbb3 f3f2 	udiv	r3, r3, r2
 8108674:	005a      	lsls	r2, r3, #1
 8108676:	697b      	ldr	r3, [r7, #20]
 8108678:	685b      	ldr	r3, [r3, #4]
 810867a:	085b      	lsrs	r3, r3, #1
 810867c:	441a      	add	r2, r3
 810867e:	697b      	ldr	r3, [r7, #20]
 8108680:	685b      	ldr	r3, [r3, #4]
 8108682:	fbb2 f3f3 	udiv	r3, r2, r3
 8108686:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8108688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810868a:	2b0f      	cmp	r3, #15
 810868c:	d916      	bls.n	81086bc <UART_SetConfig+0x920>
 810868e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8108694:	d212      	bcs.n	81086bc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8108696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108698:	b29b      	uxth	r3, r3
 810869a:	f023 030f 	bic.w	r3, r3, #15
 810869e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 81086a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81086a2:	085b      	lsrs	r3, r3, #1
 81086a4:	b29b      	uxth	r3, r3
 81086a6:	f003 0307 	and.w	r3, r3, #7
 81086aa:	b29a      	uxth	r2, r3
 81086ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 81086ae:	4313      	orrs	r3, r2
 81086b0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 81086b2:	697b      	ldr	r3, [r7, #20]
 81086b4:	681b      	ldr	r3, [r3, #0]
 81086b6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 81086b8:	60da      	str	r2, [r3, #12]
 81086ba:	e0b9      	b.n	8108830 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 81086bc:	2301      	movs	r3, #1
 81086be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 81086c2:	e0b5      	b.n	8108830 <UART_SetConfig+0xa94>
 81086c4:	03d09000 	.word	0x03d09000
 81086c8:	003d0900 	.word	0x003d0900
 81086cc:	08109814 	.word	0x08109814
 81086d0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 81086d4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 81086d8:	2b20      	cmp	r3, #32
 81086da:	dc49      	bgt.n	8108770 <UART_SetConfig+0x9d4>
 81086dc:	2b00      	cmp	r3, #0
 81086de:	db7c      	blt.n	81087da <UART_SetConfig+0xa3e>
 81086e0:	2b20      	cmp	r3, #32
 81086e2:	d87a      	bhi.n	81087da <UART_SetConfig+0xa3e>
 81086e4:	a201      	add	r2, pc, #4	; (adr r2, 81086ec <UART_SetConfig+0x950>)
 81086e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81086ea:	bf00      	nop
 81086ec:	08108777 	.word	0x08108777
 81086f0:	0810877f 	.word	0x0810877f
 81086f4:	081087db 	.word	0x081087db
 81086f8:	081087db 	.word	0x081087db
 81086fc:	08108787 	.word	0x08108787
 8108700:	081087db 	.word	0x081087db
 8108704:	081087db 	.word	0x081087db
 8108708:	081087db 	.word	0x081087db
 810870c:	08108797 	.word	0x08108797
 8108710:	081087db 	.word	0x081087db
 8108714:	081087db 	.word	0x081087db
 8108718:	081087db 	.word	0x081087db
 810871c:	081087db 	.word	0x081087db
 8108720:	081087db 	.word	0x081087db
 8108724:	081087db 	.word	0x081087db
 8108728:	081087db 	.word	0x081087db
 810872c:	081087a7 	.word	0x081087a7
 8108730:	081087db 	.word	0x081087db
 8108734:	081087db 	.word	0x081087db
 8108738:	081087db 	.word	0x081087db
 810873c:	081087db 	.word	0x081087db
 8108740:	081087db 	.word	0x081087db
 8108744:	081087db 	.word	0x081087db
 8108748:	081087db 	.word	0x081087db
 810874c:	081087db 	.word	0x081087db
 8108750:	081087db 	.word	0x081087db
 8108754:	081087db 	.word	0x081087db
 8108758:	081087db 	.word	0x081087db
 810875c:	081087db 	.word	0x081087db
 8108760:	081087db 	.word	0x081087db
 8108764:	081087db 	.word	0x081087db
 8108768:	081087db 	.word	0x081087db
 810876c:	081087cd 	.word	0x081087cd
 8108770:	2b40      	cmp	r3, #64	; 0x40
 8108772:	d02e      	beq.n	81087d2 <UART_SetConfig+0xa36>
 8108774:	e031      	b.n	81087da <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8108776:	f7fc f94b 	bl	8104a10 <HAL_RCC_GetPCLK1Freq>
 810877a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810877c:	e033      	b.n	81087e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810877e:	f7fc f95d 	bl	8104a3c <HAL_RCC_GetPCLK2Freq>
 8108782:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8108784:	e02f      	b.n	81087e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810878a:	4618      	mov	r0, r3
 810878c:	f7fd f8c8 	bl	8105920 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8108790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108792:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108794:	e027      	b.n	81087e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108796:	f107 0318 	add.w	r3, r7, #24
 810879a:	4618      	mov	r0, r3
 810879c:	f7fd fa14 	bl	8105bc8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81087a0:	69fb      	ldr	r3, [r7, #28]
 81087a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81087a4:	e01f      	b.n	81087e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81087a6:	4b2d      	ldr	r3, [pc, #180]	; (810885c <UART_SetConfig+0xac0>)
 81087a8:	681b      	ldr	r3, [r3, #0]
 81087aa:	f003 0320 	and.w	r3, r3, #32
 81087ae:	2b00      	cmp	r3, #0
 81087b0:	d009      	beq.n	81087c6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81087b2:	4b2a      	ldr	r3, [pc, #168]	; (810885c <UART_SetConfig+0xac0>)
 81087b4:	681b      	ldr	r3, [r3, #0]
 81087b6:	08db      	lsrs	r3, r3, #3
 81087b8:	f003 0303 	and.w	r3, r3, #3
 81087bc:	4a28      	ldr	r2, [pc, #160]	; (8108860 <UART_SetConfig+0xac4>)
 81087be:	fa22 f303 	lsr.w	r3, r2, r3
 81087c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81087c4:	e00f      	b.n	81087e6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 81087c6:	4b26      	ldr	r3, [pc, #152]	; (8108860 <UART_SetConfig+0xac4>)
 81087c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81087ca:	e00c      	b.n	81087e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81087cc:	4b25      	ldr	r3, [pc, #148]	; (8108864 <UART_SetConfig+0xac8>)
 81087ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81087d0:	e009      	b.n	81087e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81087d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81087d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81087d8:	e005      	b.n	81087e6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 81087da:	2300      	movs	r3, #0
 81087dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 81087de:	2301      	movs	r3, #1
 81087e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 81087e4:	bf00      	nop
    }

    if (pclk != 0U)
 81087e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81087e8:	2b00      	cmp	r3, #0
 81087ea:	d021      	beq.n	8108830 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81087ec:	697b      	ldr	r3, [r7, #20]
 81087ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81087f0:	4a1d      	ldr	r2, [pc, #116]	; (8108868 <UART_SetConfig+0xacc>)
 81087f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81087f6:	461a      	mov	r2, r3
 81087f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81087fa:	fbb3 f2f2 	udiv	r2, r3, r2
 81087fe:	697b      	ldr	r3, [r7, #20]
 8108800:	685b      	ldr	r3, [r3, #4]
 8108802:	085b      	lsrs	r3, r3, #1
 8108804:	441a      	add	r2, r3
 8108806:	697b      	ldr	r3, [r7, #20]
 8108808:	685b      	ldr	r3, [r3, #4]
 810880a:	fbb2 f3f3 	udiv	r3, r2, r3
 810880e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8108810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108812:	2b0f      	cmp	r3, #15
 8108814:	d909      	bls.n	810882a <UART_SetConfig+0xa8e>
 8108816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810881c:	d205      	bcs.n	810882a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 810881e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108820:	b29a      	uxth	r2, r3
 8108822:	697b      	ldr	r3, [r7, #20]
 8108824:	681b      	ldr	r3, [r3, #0]
 8108826:	60da      	str	r2, [r3, #12]
 8108828:	e002      	b.n	8108830 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810882a:	2301      	movs	r3, #1
 810882c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8108830:	697b      	ldr	r3, [r7, #20]
 8108832:	2201      	movs	r2, #1
 8108834:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8108838:	697b      	ldr	r3, [r7, #20]
 810883a:	2201      	movs	r2, #1
 810883c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8108840:	697b      	ldr	r3, [r7, #20]
 8108842:	2200      	movs	r2, #0
 8108844:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8108846:	697b      	ldr	r3, [r7, #20]
 8108848:	2200      	movs	r2, #0
 810884a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 810884c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8108850:	4618      	mov	r0, r3
 8108852:	3748      	adds	r7, #72	; 0x48
 8108854:	46bd      	mov	sp, r7
 8108856:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810885a:	bf00      	nop
 810885c:	58024400 	.word	0x58024400
 8108860:	03d09000 	.word	0x03d09000
 8108864:	003d0900 	.word	0x003d0900
 8108868:	08109814 	.word	0x08109814

0810886c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810886c:	b480      	push	{r7}
 810886e:	b083      	sub	sp, #12
 8108870:	af00      	add	r7, sp, #0
 8108872:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8108874:	687b      	ldr	r3, [r7, #4]
 8108876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108878:	f003 0301 	and.w	r3, r3, #1
 810887c:	2b00      	cmp	r3, #0
 810887e:	d00a      	beq.n	8108896 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8108880:	687b      	ldr	r3, [r7, #4]
 8108882:	681b      	ldr	r3, [r3, #0]
 8108884:	685b      	ldr	r3, [r3, #4]
 8108886:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 810888a:	687b      	ldr	r3, [r7, #4]
 810888c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810888e:	687b      	ldr	r3, [r7, #4]
 8108890:	681b      	ldr	r3, [r3, #0]
 8108892:	430a      	orrs	r2, r1
 8108894:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8108896:	687b      	ldr	r3, [r7, #4]
 8108898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810889a:	f003 0302 	and.w	r3, r3, #2
 810889e:	2b00      	cmp	r3, #0
 81088a0:	d00a      	beq.n	81088b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 81088a2:	687b      	ldr	r3, [r7, #4]
 81088a4:	681b      	ldr	r3, [r3, #0]
 81088a6:	685b      	ldr	r3, [r3, #4]
 81088a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 81088ac:	687b      	ldr	r3, [r7, #4]
 81088ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 81088b0:	687b      	ldr	r3, [r7, #4]
 81088b2:	681b      	ldr	r3, [r3, #0]
 81088b4:	430a      	orrs	r2, r1
 81088b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 81088b8:	687b      	ldr	r3, [r7, #4]
 81088ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81088bc:	f003 0304 	and.w	r3, r3, #4
 81088c0:	2b00      	cmp	r3, #0
 81088c2:	d00a      	beq.n	81088da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 81088c4:	687b      	ldr	r3, [r7, #4]
 81088c6:	681b      	ldr	r3, [r3, #0]
 81088c8:	685b      	ldr	r3, [r3, #4]
 81088ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 81088ce:	687b      	ldr	r3, [r7, #4]
 81088d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81088d2:	687b      	ldr	r3, [r7, #4]
 81088d4:	681b      	ldr	r3, [r3, #0]
 81088d6:	430a      	orrs	r2, r1
 81088d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 81088da:	687b      	ldr	r3, [r7, #4]
 81088dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81088de:	f003 0308 	and.w	r3, r3, #8
 81088e2:	2b00      	cmp	r3, #0
 81088e4:	d00a      	beq.n	81088fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 81088e6:	687b      	ldr	r3, [r7, #4]
 81088e8:	681b      	ldr	r3, [r3, #0]
 81088ea:	685b      	ldr	r3, [r3, #4]
 81088ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 81088f0:	687b      	ldr	r3, [r7, #4]
 81088f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 81088f4:	687b      	ldr	r3, [r7, #4]
 81088f6:	681b      	ldr	r3, [r3, #0]
 81088f8:	430a      	orrs	r2, r1
 81088fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 81088fc:	687b      	ldr	r3, [r7, #4]
 81088fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108900:	f003 0310 	and.w	r3, r3, #16
 8108904:	2b00      	cmp	r3, #0
 8108906:	d00a      	beq.n	810891e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8108908:	687b      	ldr	r3, [r7, #4]
 810890a:	681b      	ldr	r3, [r3, #0]
 810890c:	689b      	ldr	r3, [r3, #8]
 810890e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8108912:	687b      	ldr	r3, [r7, #4]
 8108914:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8108916:	687b      	ldr	r3, [r7, #4]
 8108918:	681b      	ldr	r3, [r3, #0]
 810891a:	430a      	orrs	r2, r1
 810891c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810891e:	687b      	ldr	r3, [r7, #4]
 8108920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108922:	f003 0320 	and.w	r3, r3, #32
 8108926:	2b00      	cmp	r3, #0
 8108928:	d00a      	beq.n	8108940 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810892a:	687b      	ldr	r3, [r7, #4]
 810892c:	681b      	ldr	r3, [r3, #0]
 810892e:	689b      	ldr	r3, [r3, #8]
 8108930:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8108934:	687b      	ldr	r3, [r7, #4]
 8108936:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8108938:	687b      	ldr	r3, [r7, #4]
 810893a:	681b      	ldr	r3, [r3, #0]
 810893c:	430a      	orrs	r2, r1
 810893e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8108940:	687b      	ldr	r3, [r7, #4]
 8108942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8108948:	2b00      	cmp	r3, #0
 810894a:	d01a      	beq.n	8108982 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810894c:	687b      	ldr	r3, [r7, #4]
 810894e:	681b      	ldr	r3, [r3, #0]
 8108950:	685b      	ldr	r3, [r3, #4]
 8108952:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8108956:	687b      	ldr	r3, [r7, #4]
 8108958:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810895a:	687b      	ldr	r3, [r7, #4]
 810895c:	681b      	ldr	r3, [r3, #0]
 810895e:	430a      	orrs	r2, r1
 8108960:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8108962:	687b      	ldr	r3, [r7, #4]
 8108964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108966:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810896a:	d10a      	bne.n	8108982 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810896c:	687b      	ldr	r3, [r7, #4]
 810896e:	681b      	ldr	r3, [r3, #0]
 8108970:	685b      	ldr	r3, [r3, #4]
 8108972:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8108976:	687b      	ldr	r3, [r7, #4]
 8108978:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810897a:	687b      	ldr	r3, [r7, #4]
 810897c:	681b      	ldr	r3, [r3, #0]
 810897e:	430a      	orrs	r2, r1
 8108980:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8108982:	687b      	ldr	r3, [r7, #4]
 8108984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810898a:	2b00      	cmp	r3, #0
 810898c:	d00a      	beq.n	81089a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810898e:	687b      	ldr	r3, [r7, #4]
 8108990:	681b      	ldr	r3, [r3, #0]
 8108992:	685b      	ldr	r3, [r3, #4]
 8108994:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8108998:	687b      	ldr	r3, [r7, #4]
 810899a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810899c:	687b      	ldr	r3, [r7, #4]
 810899e:	681b      	ldr	r3, [r3, #0]
 81089a0:	430a      	orrs	r2, r1
 81089a2:	605a      	str	r2, [r3, #4]
  }
}
 81089a4:	bf00      	nop
 81089a6:	370c      	adds	r7, #12
 81089a8:	46bd      	mov	sp, r7
 81089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81089ae:	4770      	bx	lr

081089b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 81089b0:	b580      	push	{r7, lr}
 81089b2:	b086      	sub	sp, #24
 81089b4:	af02      	add	r7, sp, #8
 81089b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 81089b8:	687b      	ldr	r3, [r7, #4]
 81089ba:	2200      	movs	r2, #0
 81089bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 81089c0:	f7f9 f902 	bl	8101bc8 <HAL_GetTick>
 81089c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 81089c6:	687b      	ldr	r3, [r7, #4]
 81089c8:	681b      	ldr	r3, [r3, #0]
 81089ca:	681b      	ldr	r3, [r3, #0]
 81089cc:	f003 0308 	and.w	r3, r3, #8
 81089d0:	2b08      	cmp	r3, #8
 81089d2:	d10e      	bne.n	81089f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81089d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 81089d8:	9300      	str	r3, [sp, #0]
 81089da:	68fb      	ldr	r3, [r7, #12]
 81089dc:	2200      	movs	r2, #0
 81089de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 81089e2:	6878      	ldr	r0, [r7, #4]
 81089e4:	f000 f82f 	bl	8108a46 <UART_WaitOnFlagUntilTimeout>
 81089e8:	4603      	mov	r3, r0
 81089ea:	2b00      	cmp	r3, #0
 81089ec:	d001      	beq.n	81089f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 81089ee:	2303      	movs	r3, #3
 81089f0:	e025      	b.n	8108a3e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 81089f2:	687b      	ldr	r3, [r7, #4]
 81089f4:	681b      	ldr	r3, [r3, #0]
 81089f6:	681b      	ldr	r3, [r3, #0]
 81089f8:	f003 0304 	and.w	r3, r3, #4
 81089fc:	2b04      	cmp	r3, #4
 81089fe:	d10e      	bne.n	8108a1e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8108a00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8108a04:	9300      	str	r3, [sp, #0]
 8108a06:	68fb      	ldr	r3, [r7, #12]
 8108a08:	2200      	movs	r2, #0
 8108a0a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8108a0e:	6878      	ldr	r0, [r7, #4]
 8108a10:	f000 f819 	bl	8108a46 <UART_WaitOnFlagUntilTimeout>
 8108a14:	4603      	mov	r3, r0
 8108a16:	2b00      	cmp	r3, #0
 8108a18:	d001      	beq.n	8108a1e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8108a1a:	2303      	movs	r3, #3
 8108a1c:	e00f      	b.n	8108a3e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8108a1e:	687b      	ldr	r3, [r7, #4]
 8108a20:	2220      	movs	r2, #32
 8108a22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8108a26:	687b      	ldr	r3, [r7, #4]
 8108a28:	2220      	movs	r2, #32
 8108a2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8108a2e:	687b      	ldr	r3, [r7, #4]
 8108a30:	2200      	movs	r2, #0
 8108a32:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8108a34:	687b      	ldr	r3, [r7, #4]
 8108a36:	2200      	movs	r2, #0
 8108a38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8108a3c:	2300      	movs	r3, #0
}
 8108a3e:	4618      	mov	r0, r3
 8108a40:	3710      	adds	r7, #16
 8108a42:	46bd      	mov	sp, r7
 8108a44:	bd80      	pop	{r7, pc}

08108a46 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8108a46:	b580      	push	{r7, lr}
 8108a48:	b09c      	sub	sp, #112	; 0x70
 8108a4a:	af00      	add	r7, sp, #0
 8108a4c:	60f8      	str	r0, [r7, #12]
 8108a4e:	60b9      	str	r1, [r7, #8]
 8108a50:	603b      	str	r3, [r7, #0]
 8108a52:	4613      	mov	r3, r2
 8108a54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8108a56:	e0a9      	b.n	8108bac <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8108a58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8108a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108a5e:	f000 80a5 	beq.w	8108bac <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8108a62:	f7f9 f8b1 	bl	8101bc8 <HAL_GetTick>
 8108a66:	4602      	mov	r2, r0
 8108a68:	683b      	ldr	r3, [r7, #0]
 8108a6a:	1ad3      	subs	r3, r2, r3
 8108a6c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8108a6e:	429a      	cmp	r2, r3
 8108a70:	d302      	bcc.n	8108a78 <UART_WaitOnFlagUntilTimeout+0x32>
 8108a72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8108a74:	2b00      	cmp	r3, #0
 8108a76:	d140      	bne.n	8108afa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8108a78:	68fb      	ldr	r3, [r7, #12]
 8108a7a:	681b      	ldr	r3, [r3, #0]
 8108a7c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8108a80:	e853 3f00 	ldrex	r3, [r3]
 8108a84:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8108a86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8108a88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8108a8c:	667b      	str	r3, [r7, #100]	; 0x64
 8108a8e:	68fb      	ldr	r3, [r7, #12]
 8108a90:	681b      	ldr	r3, [r3, #0]
 8108a92:	461a      	mov	r2, r3
 8108a94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8108a96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8108a98:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108a9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8108a9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8108a9e:	e841 2300 	strex	r3, r2, [r1]
 8108aa2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8108aa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8108aa6:	2b00      	cmp	r3, #0
 8108aa8:	d1e6      	bne.n	8108a78 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8108aaa:	68fb      	ldr	r3, [r7, #12]
 8108aac:	681b      	ldr	r3, [r3, #0]
 8108aae:	3308      	adds	r3, #8
 8108ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108ab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108ab4:	e853 3f00 	ldrex	r3, [r3]
 8108ab8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8108aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108abc:	f023 0301 	bic.w	r3, r3, #1
 8108ac0:	663b      	str	r3, [r7, #96]	; 0x60
 8108ac2:	68fb      	ldr	r3, [r7, #12]
 8108ac4:	681b      	ldr	r3, [r3, #0]
 8108ac6:	3308      	adds	r3, #8
 8108ac8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8108aca:	64ba      	str	r2, [r7, #72]	; 0x48
 8108acc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108ace:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8108ad0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8108ad2:	e841 2300 	strex	r3, r2, [r1]
 8108ad6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8108ad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8108ada:	2b00      	cmp	r3, #0
 8108adc:	d1e5      	bne.n	8108aaa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8108ade:	68fb      	ldr	r3, [r7, #12]
 8108ae0:	2220      	movs	r2, #32
 8108ae2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8108ae6:	68fb      	ldr	r3, [r7, #12]
 8108ae8:	2220      	movs	r2, #32
 8108aea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8108aee:	68fb      	ldr	r3, [r7, #12]
 8108af0:	2200      	movs	r2, #0
 8108af2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8108af6:	2303      	movs	r3, #3
 8108af8:	e069      	b.n	8108bce <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8108afa:	68fb      	ldr	r3, [r7, #12]
 8108afc:	681b      	ldr	r3, [r3, #0]
 8108afe:	681b      	ldr	r3, [r3, #0]
 8108b00:	f003 0304 	and.w	r3, r3, #4
 8108b04:	2b00      	cmp	r3, #0
 8108b06:	d051      	beq.n	8108bac <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8108b08:	68fb      	ldr	r3, [r7, #12]
 8108b0a:	681b      	ldr	r3, [r3, #0]
 8108b0c:	69db      	ldr	r3, [r3, #28]
 8108b0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8108b12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8108b16:	d149      	bne.n	8108bac <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8108b18:	68fb      	ldr	r3, [r7, #12]
 8108b1a:	681b      	ldr	r3, [r3, #0]
 8108b1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8108b20:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8108b22:	68fb      	ldr	r3, [r7, #12]
 8108b24:	681b      	ldr	r3, [r3, #0]
 8108b26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108b2a:	e853 3f00 	ldrex	r3, [r3]
 8108b2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8108b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108b32:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8108b36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8108b38:	68fb      	ldr	r3, [r7, #12]
 8108b3a:	681b      	ldr	r3, [r3, #0]
 8108b3c:	461a      	mov	r2, r3
 8108b3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8108b40:	637b      	str	r3, [r7, #52]	; 0x34
 8108b42:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108b44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8108b46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8108b48:	e841 2300 	strex	r3, r2, [r1]
 8108b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8108b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108b50:	2b00      	cmp	r3, #0
 8108b52:	d1e6      	bne.n	8108b22 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8108b54:	68fb      	ldr	r3, [r7, #12]
 8108b56:	681b      	ldr	r3, [r3, #0]
 8108b58:	3308      	adds	r3, #8
 8108b5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108b5c:	697b      	ldr	r3, [r7, #20]
 8108b5e:	e853 3f00 	ldrex	r3, [r3]
 8108b62:	613b      	str	r3, [r7, #16]
   return(result);
 8108b64:	693b      	ldr	r3, [r7, #16]
 8108b66:	f023 0301 	bic.w	r3, r3, #1
 8108b6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8108b6c:	68fb      	ldr	r3, [r7, #12]
 8108b6e:	681b      	ldr	r3, [r3, #0]
 8108b70:	3308      	adds	r3, #8
 8108b72:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8108b74:	623a      	str	r2, [r7, #32]
 8108b76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108b78:	69f9      	ldr	r1, [r7, #28]
 8108b7a:	6a3a      	ldr	r2, [r7, #32]
 8108b7c:	e841 2300 	strex	r3, r2, [r1]
 8108b80:	61bb      	str	r3, [r7, #24]
   return(result);
 8108b82:	69bb      	ldr	r3, [r7, #24]
 8108b84:	2b00      	cmp	r3, #0
 8108b86:	d1e5      	bne.n	8108b54 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8108b88:	68fb      	ldr	r3, [r7, #12]
 8108b8a:	2220      	movs	r2, #32
 8108b8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8108b90:	68fb      	ldr	r3, [r7, #12]
 8108b92:	2220      	movs	r2, #32
 8108b94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8108b98:	68fb      	ldr	r3, [r7, #12]
 8108b9a:	2220      	movs	r2, #32
 8108b9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8108ba0:	68fb      	ldr	r3, [r7, #12]
 8108ba2:	2200      	movs	r2, #0
 8108ba4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8108ba8:	2303      	movs	r3, #3
 8108baa:	e010      	b.n	8108bce <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8108bac:	68fb      	ldr	r3, [r7, #12]
 8108bae:	681b      	ldr	r3, [r3, #0]
 8108bb0:	69da      	ldr	r2, [r3, #28]
 8108bb2:	68bb      	ldr	r3, [r7, #8]
 8108bb4:	4013      	ands	r3, r2
 8108bb6:	68ba      	ldr	r2, [r7, #8]
 8108bb8:	429a      	cmp	r2, r3
 8108bba:	bf0c      	ite	eq
 8108bbc:	2301      	moveq	r3, #1
 8108bbe:	2300      	movne	r3, #0
 8108bc0:	b2db      	uxtb	r3, r3
 8108bc2:	461a      	mov	r2, r3
 8108bc4:	79fb      	ldrb	r3, [r7, #7]
 8108bc6:	429a      	cmp	r2, r3
 8108bc8:	f43f af46 	beq.w	8108a58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8108bcc:	2300      	movs	r3, #0
}
 8108bce:	4618      	mov	r0, r3
 8108bd0:	3770      	adds	r7, #112	; 0x70
 8108bd2:	46bd      	mov	sp, r7
 8108bd4:	bd80      	pop	{r7, pc}

08108bd6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8108bd6:	b480      	push	{r7}
 8108bd8:	b085      	sub	sp, #20
 8108bda:	af00      	add	r7, sp, #0
 8108bdc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8108bde:	687b      	ldr	r3, [r7, #4]
 8108be0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8108be4:	2b01      	cmp	r3, #1
 8108be6:	d101      	bne.n	8108bec <HAL_UARTEx_DisableFifoMode+0x16>
 8108be8:	2302      	movs	r3, #2
 8108bea:	e027      	b.n	8108c3c <HAL_UARTEx_DisableFifoMode+0x66>
 8108bec:	687b      	ldr	r3, [r7, #4]
 8108bee:	2201      	movs	r2, #1
 8108bf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8108bf4:	687b      	ldr	r3, [r7, #4]
 8108bf6:	2224      	movs	r2, #36	; 0x24
 8108bf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8108bfc:	687b      	ldr	r3, [r7, #4]
 8108bfe:	681b      	ldr	r3, [r3, #0]
 8108c00:	681b      	ldr	r3, [r3, #0]
 8108c02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8108c04:	687b      	ldr	r3, [r7, #4]
 8108c06:	681b      	ldr	r3, [r3, #0]
 8108c08:	681a      	ldr	r2, [r3, #0]
 8108c0a:	687b      	ldr	r3, [r7, #4]
 8108c0c:	681b      	ldr	r3, [r3, #0]
 8108c0e:	f022 0201 	bic.w	r2, r2, #1
 8108c12:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8108c14:	68fb      	ldr	r3, [r7, #12]
 8108c16:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8108c1a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8108c1c:	687b      	ldr	r3, [r7, #4]
 8108c1e:	2200      	movs	r2, #0
 8108c20:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8108c22:	687b      	ldr	r3, [r7, #4]
 8108c24:	681b      	ldr	r3, [r3, #0]
 8108c26:	68fa      	ldr	r2, [r7, #12]
 8108c28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8108c2a:	687b      	ldr	r3, [r7, #4]
 8108c2c:	2220      	movs	r2, #32
 8108c2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8108c32:	687b      	ldr	r3, [r7, #4]
 8108c34:	2200      	movs	r2, #0
 8108c36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8108c3a:	2300      	movs	r3, #0
}
 8108c3c:	4618      	mov	r0, r3
 8108c3e:	3714      	adds	r7, #20
 8108c40:	46bd      	mov	sp, r7
 8108c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108c46:	4770      	bx	lr

08108c48 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8108c48:	b580      	push	{r7, lr}
 8108c4a:	b084      	sub	sp, #16
 8108c4c:	af00      	add	r7, sp, #0
 8108c4e:	6078      	str	r0, [r7, #4]
 8108c50:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8108c52:	687b      	ldr	r3, [r7, #4]
 8108c54:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8108c58:	2b01      	cmp	r3, #1
 8108c5a:	d101      	bne.n	8108c60 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8108c5c:	2302      	movs	r3, #2
 8108c5e:	e02d      	b.n	8108cbc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8108c60:	687b      	ldr	r3, [r7, #4]
 8108c62:	2201      	movs	r2, #1
 8108c64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8108c68:	687b      	ldr	r3, [r7, #4]
 8108c6a:	2224      	movs	r2, #36	; 0x24
 8108c6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8108c70:	687b      	ldr	r3, [r7, #4]
 8108c72:	681b      	ldr	r3, [r3, #0]
 8108c74:	681b      	ldr	r3, [r3, #0]
 8108c76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8108c78:	687b      	ldr	r3, [r7, #4]
 8108c7a:	681b      	ldr	r3, [r3, #0]
 8108c7c:	681a      	ldr	r2, [r3, #0]
 8108c7e:	687b      	ldr	r3, [r7, #4]
 8108c80:	681b      	ldr	r3, [r3, #0]
 8108c82:	f022 0201 	bic.w	r2, r2, #1
 8108c86:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8108c88:	687b      	ldr	r3, [r7, #4]
 8108c8a:	681b      	ldr	r3, [r3, #0]
 8108c8c:	689b      	ldr	r3, [r3, #8]
 8108c8e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8108c92:	687b      	ldr	r3, [r7, #4]
 8108c94:	681b      	ldr	r3, [r3, #0]
 8108c96:	683a      	ldr	r2, [r7, #0]
 8108c98:	430a      	orrs	r2, r1
 8108c9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8108c9c:	6878      	ldr	r0, [r7, #4]
 8108c9e:	f000 f84f 	bl	8108d40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8108ca2:	687b      	ldr	r3, [r7, #4]
 8108ca4:	681b      	ldr	r3, [r3, #0]
 8108ca6:	68fa      	ldr	r2, [r7, #12]
 8108ca8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8108caa:	687b      	ldr	r3, [r7, #4]
 8108cac:	2220      	movs	r2, #32
 8108cae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8108cb2:	687b      	ldr	r3, [r7, #4]
 8108cb4:	2200      	movs	r2, #0
 8108cb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8108cba:	2300      	movs	r3, #0
}
 8108cbc:	4618      	mov	r0, r3
 8108cbe:	3710      	adds	r7, #16
 8108cc0:	46bd      	mov	sp, r7
 8108cc2:	bd80      	pop	{r7, pc}

08108cc4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8108cc4:	b580      	push	{r7, lr}
 8108cc6:	b084      	sub	sp, #16
 8108cc8:	af00      	add	r7, sp, #0
 8108cca:	6078      	str	r0, [r7, #4]
 8108ccc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8108cce:	687b      	ldr	r3, [r7, #4]
 8108cd0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8108cd4:	2b01      	cmp	r3, #1
 8108cd6:	d101      	bne.n	8108cdc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8108cd8:	2302      	movs	r3, #2
 8108cda:	e02d      	b.n	8108d38 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8108cdc:	687b      	ldr	r3, [r7, #4]
 8108cde:	2201      	movs	r2, #1
 8108ce0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8108ce4:	687b      	ldr	r3, [r7, #4]
 8108ce6:	2224      	movs	r2, #36	; 0x24
 8108ce8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8108cec:	687b      	ldr	r3, [r7, #4]
 8108cee:	681b      	ldr	r3, [r3, #0]
 8108cf0:	681b      	ldr	r3, [r3, #0]
 8108cf2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8108cf4:	687b      	ldr	r3, [r7, #4]
 8108cf6:	681b      	ldr	r3, [r3, #0]
 8108cf8:	681a      	ldr	r2, [r3, #0]
 8108cfa:	687b      	ldr	r3, [r7, #4]
 8108cfc:	681b      	ldr	r3, [r3, #0]
 8108cfe:	f022 0201 	bic.w	r2, r2, #1
 8108d02:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8108d04:	687b      	ldr	r3, [r7, #4]
 8108d06:	681b      	ldr	r3, [r3, #0]
 8108d08:	689b      	ldr	r3, [r3, #8]
 8108d0a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8108d0e:	687b      	ldr	r3, [r7, #4]
 8108d10:	681b      	ldr	r3, [r3, #0]
 8108d12:	683a      	ldr	r2, [r7, #0]
 8108d14:	430a      	orrs	r2, r1
 8108d16:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8108d18:	6878      	ldr	r0, [r7, #4]
 8108d1a:	f000 f811 	bl	8108d40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8108d1e:	687b      	ldr	r3, [r7, #4]
 8108d20:	681b      	ldr	r3, [r3, #0]
 8108d22:	68fa      	ldr	r2, [r7, #12]
 8108d24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8108d26:	687b      	ldr	r3, [r7, #4]
 8108d28:	2220      	movs	r2, #32
 8108d2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8108d2e:	687b      	ldr	r3, [r7, #4]
 8108d30:	2200      	movs	r2, #0
 8108d32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8108d36:	2300      	movs	r3, #0
}
 8108d38:	4618      	mov	r0, r3
 8108d3a:	3710      	adds	r7, #16
 8108d3c:	46bd      	mov	sp, r7
 8108d3e:	bd80      	pop	{r7, pc}

08108d40 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8108d40:	b480      	push	{r7}
 8108d42:	b085      	sub	sp, #20
 8108d44:	af00      	add	r7, sp, #0
 8108d46:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8108d48:	687b      	ldr	r3, [r7, #4]
 8108d4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108d4c:	2b00      	cmp	r3, #0
 8108d4e:	d108      	bne.n	8108d62 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8108d50:	687b      	ldr	r3, [r7, #4]
 8108d52:	2201      	movs	r2, #1
 8108d54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8108d58:	687b      	ldr	r3, [r7, #4]
 8108d5a:	2201      	movs	r2, #1
 8108d5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8108d60:	e031      	b.n	8108dc6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8108d62:	2310      	movs	r3, #16
 8108d64:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8108d66:	2310      	movs	r3, #16
 8108d68:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8108d6a:	687b      	ldr	r3, [r7, #4]
 8108d6c:	681b      	ldr	r3, [r3, #0]
 8108d6e:	689b      	ldr	r3, [r3, #8]
 8108d70:	0e5b      	lsrs	r3, r3, #25
 8108d72:	b2db      	uxtb	r3, r3
 8108d74:	f003 0307 	and.w	r3, r3, #7
 8108d78:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8108d7a:	687b      	ldr	r3, [r7, #4]
 8108d7c:	681b      	ldr	r3, [r3, #0]
 8108d7e:	689b      	ldr	r3, [r3, #8]
 8108d80:	0f5b      	lsrs	r3, r3, #29
 8108d82:	b2db      	uxtb	r3, r3
 8108d84:	f003 0307 	and.w	r3, r3, #7
 8108d88:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8108d8a:	7bbb      	ldrb	r3, [r7, #14]
 8108d8c:	7b3a      	ldrb	r2, [r7, #12]
 8108d8e:	4911      	ldr	r1, [pc, #68]	; (8108dd4 <UARTEx_SetNbDataToProcess+0x94>)
 8108d90:	5c8a      	ldrb	r2, [r1, r2]
 8108d92:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8108d96:	7b3a      	ldrb	r2, [r7, #12]
 8108d98:	490f      	ldr	r1, [pc, #60]	; (8108dd8 <UARTEx_SetNbDataToProcess+0x98>)
 8108d9a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8108d9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8108da0:	b29a      	uxth	r2, r3
 8108da2:	687b      	ldr	r3, [r7, #4]
 8108da4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8108da8:	7bfb      	ldrb	r3, [r7, #15]
 8108daa:	7b7a      	ldrb	r2, [r7, #13]
 8108dac:	4909      	ldr	r1, [pc, #36]	; (8108dd4 <UARTEx_SetNbDataToProcess+0x94>)
 8108dae:	5c8a      	ldrb	r2, [r1, r2]
 8108db0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8108db4:	7b7a      	ldrb	r2, [r7, #13]
 8108db6:	4908      	ldr	r1, [pc, #32]	; (8108dd8 <UARTEx_SetNbDataToProcess+0x98>)
 8108db8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8108dba:	fb93 f3f2 	sdiv	r3, r3, r2
 8108dbe:	b29a      	uxth	r2, r3
 8108dc0:	687b      	ldr	r3, [r7, #4]
 8108dc2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8108dc6:	bf00      	nop
 8108dc8:	3714      	adds	r7, #20
 8108dca:	46bd      	mov	sp, r7
 8108dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108dd0:	4770      	bx	lr
 8108dd2:	bf00      	nop
 8108dd4:	0810982c 	.word	0x0810982c
 8108dd8:	08109834 	.word	0x08109834

08108ddc <__errno>:
 8108ddc:	4b01      	ldr	r3, [pc, #4]	; (8108de4 <__errno+0x8>)
 8108dde:	6818      	ldr	r0, [r3, #0]
 8108de0:	4770      	bx	lr
 8108de2:	bf00      	nop
 8108de4:	10000010 	.word	0x10000010

08108de8 <__libc_init_array>:
 8108de8:	b570      	push	{r4, r5, r6, lr}
 8108dea:	4d0d      	ldr	r5, [pc, #52]	; (8108e20 <__libc_init_array+0x38>)
 8108dec:	4c0d      	ldr	r4, [pc, #52]	; (8108e24 <__libc_init_array+0x3c>)
 8108dee:	1b64      	subs	r4, r4, r5
 8108df0:	10a4      	asrs	r4, r4, #2
 8108df2:	2600      	movs	r6, #0
 8108df4:	42a6      	cmp	r6, r4
 8108df6:	d109      	bne.n	8108e0c <__libc_init_array+0x24>
 8108df8:	4d0b      	ldr	r5, [pc, #44]	; (8108e28 <__libc_init_array+0x40>)
 8108dfa:	4c0c      	ldr	r4, [pc, #48]	; (8108e2c <__libc_init_array+0x44>)
 8108dfc:	f000 fc8e 	bl	810971c <_init>
 8108e00:	1b64      	subs	r4, r4, r5
 8108e02:	10a4      	asrs	r4, r4, #2
 8108e04:	2600      	movs	r6, #0
 8108e06:	42a6      	cmp	r6, r4
 8108e08:	d105      	bne.n	8108e16 <__libc_init_array+0x2e>
 8108e0a:	bd70      	pop	{r4, r5, r6, pc}
 8108e0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8108e10:	4798      	blx	r3
 8108e12:	3601      	adds	r6, #1
 8108e14:	e7ee      	b.n	8108df4 <__libc_init_array+0xc>
 8108e16:	f855 3b04 	ldr.w	r3, [r5], #4
 8108e1a:	4798      	blx	r3
 8108e1c:	3601      	adds	r6, #1
 8108e1e:	e7f2      	b.n	8108e06 <__libc_init_array+0x1e>
 8108e20:	08109878 	.word	0x08109878
 8108e24:	08109878 	.word	0x08109878
 8108e28:	08109878 	.word	0x08109878
 8108e2c:	0810987c 	.word	0x0810987c

08108e30 <memset>:
 8108e30:	4402      	add	r2, r0
 8108e32:	4603      	mov	r3, r0
 8108e34:	4293      	cmp	r3, r2
 8108e36:	d100      	bne.n	8108e3a <memset+0xa>
 8108e38:	4770      	bx	lr
 8108e3a:	f803 1b01 	strb.w	r1, [r3], #1
 8108e3e:	e7f9      	b.n	8108e34 <memset+0x4>

08108e40 <siprintf>:
 8108e40:	b40e      	push	{r1, r2, r3}
 8108e42:	b500      	push	{lr}
 8108e44:	b09c      	sub	sp, #112	; 0x70
 8108e46:	ab1d      	add	r3, sp, #116	; 0x74
 8108e48:	9002      	str	r0, [sp, #8]
 8108e4a:	9006      	str	r0, [sp, #24]
 8108e4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8108e50:	4809      	ldr	r0, [pc, #36]	; (8108e78 <siprintf+0x38>)
 8108e52:	9107      	str	r1, [sp, #28]
 8108e54:	9104      	str	r1, [sp, #16]
 8108e56:	4909      	ldr	r1, [pc, #36]	; (8108e7c <siprintf+0x3c>)
 8108e58:	f853 2b04 	ldr.w	r2, [r3], #4
 8108e5c:	9105      	str	r1, [sp, #20]
 8108e5e:	6800      	ldr	r0, [r0, #0]
 8108e60:	9301      	str	r3, [sp, #4]
 8108e62:	a902      	add	r1, sp, #8
 8108e64:	f000 f868 	bl	8108f38 <_svfiprintf_r>
 8108e68:	9b02      	ldr	r3, [sp, #8]
 8108e6a:	2200      	movs	r2, #0
 8108e6c:	701a      	strb	r2, [r3, #0]
 8108e6e:	b01c      	add	sp, #112	; 0x70
 8108e70:	f85d eb04 	ldr.w	lr, [sp], #4
 8108e74:	b003      	add	sp, #12
 8108e76:	4770      	bx	lr
 8108e78:	10000010 	.word	0x10000010
 8108e7c:	ffff0208 	.word	0xffff0208

08108e80 <__ssputs_r>:
 8108e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8108e84:	688e      	ldr	r6, [r1, #8]
 8108e86:	429e      	cmp	r6, r3
 8108e88:	4682      	mov	sl, r0
 8108e8a:	460c      	mov	r4, r1
 8108e8c:	4690      	mov	r8, r2
 8108e8e:	461f      	mov	r7, r3
 8108e90:	d838      	bhi.n	8108f04 <__ssputs_r+0x84>
 8108e92:	898a      	ldrh	r2, [r1, #12]
 8108e94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8108e98:	d032      	beq.n	8108f00 <__ssputs_r+0x80>
 8108e9a:	6825      	ldr	r5, [r4, #0]
 8108e9c:	6909      	ldr	r1, [r1, #16]
 8108e9e:	eba5 0901 	sub.w	r9, r5, r1
 8108ea2:	6965      	ldr	r5, [r4, #20]
 8108ea4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8108ea8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8108eac:	3301      	adds	r3, #1
 8108eae:	444b      	add	r3, r9
 8108eb0:	106d      	asrs	r5, r5, #1
 8108eb2:	429d      	cmp	r5, r3
 8108eb4:	bf38      	it	cc
 8108eb6:	461d      	movcc	r5, r3
 8108eb8:	0553      	lsls	r3, r2, #21
 8108eba:	d531      	bpl.n	8108f20 <__ssputs_r+0xa0>
 8108ebc:	4629      	mov	r1, r5
 8108ebe:	f000 fb63 	bl	8109588 <_malloc_r>
 8108ec2:	4606      	mov	r6, r0
 8108ec4:	b950      	cbnz	r0, 8108edc <__ssputs_r+0x5c>
 8108ec6:	230c      	movs	r3, #12
 8108ec8:	f8ca 3000 	str.w	r3, [sl]
 8108ecc:	89a3      	ldrh	r3, [r4, #12]
 8108ece:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8108ed2:	81a3      	strh	r3, [r4, #12]
 8108ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8108ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8108edc:	6921      	ldr	r1, [r4, #16]
 8108ede:	464a      	mov	r2, r9
 8108ee0:	f000 fabe 	bl	8109460 <memcpy>
 8108ee4:	89a3      	ldrh	r3, [r4, #12]
 8108ee6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8108eea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8108eee:	81a3      	strh	r3, [r4, #12]
 8108ef0:	6126      	str	r6, [r4, #16]
 8108ef2:	6165      	str	r5, [r4, #20]
 8108ef4:	444e      	add	r6, r9
 8108ef6:	eba5 0509 	sub.w	r5, r5, r9
 8108efa:	6026      	str	r6, [r4, #0]
 8108efc:	60a5      	str	r5, [r4, #8]
 8108efe:	463e      	mov	r6, r7
 8108f00:	42be      	cmp	r6, r7
 8108f02:	d900      	bls.n	8108f06 <__ssputs_r+0x86>
 8108f04:	463e      	mov	r6, r7
 8108f06:	6820      	ldr	r0, [r4, #0]
 8108f08:	4632      	mov	r2, r6
 8108f0a:	4641      	mov	r1, r8
 8108f0c:	f000 fab6 	bl	810947c <memmove>
 8108f10:	68a3      	ldr	r3, [r4, #8]
 8108f12:	1b9b      	subs	r3, r3, r6
 8108f14:	60a3      	str	r3, [r4, #8]
 8108f16:	6823      	ldr	r3, [r4, #0]
 8108f18:	4433      	add	r3, r6
 8108f1a:	6023      	str	r3, [r4, #0]
 8108f1c:	2000      	movs	r0, #0
 8108f1e:	e7db      	b.n	8108ed8 <__ssputs_r+0x58>
 8108f20:	462a      	mov	r2, r5
 8108f22:	f000 fba5 	bl	8109670 <_realloc_r>
 8108f26:	4606      	mov	r6, r0
 8108f28:	2800      	cmp	r0, #0
 8108f2a:	d1e1      	bne.n	8108ef0 <__ssputs_r+0x70>
 8108f2c:	6921      	ldr	r1, [r4, #16]
 8108f2e:	4650      	mov	r0, sl
 8108f30:	f000 fabe 	bl	81094b0 <_free_r>
 8108f34:	e7c7      	b.n	8108ec6 <__ssputs_r+0x46>
	...

08108f38 <_svfiprintf_r>:
 8108f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108f3c:	4698      	mov	r8, r3
 8108f3e:	898b      	ldrh	r3, [r1, #12]
 8108f40:	061b      	lsls	r3, r3, #24
 8108f42:	b09d      	sub	sp, #116	; 0x74
 8108f44:	4607      	mov	r7, r0
 8108f46:	460d      	mov	r5, r1
 8108f48:	4614      	mov	r4, r2
 8108f4a:	d50e      	bpl.n	8108f6a <_svfiprintf_r+0x32>
 8108f4c:	690b      	ldr	r3, [r1, #16]
 8108f4e:	b963      	cbnz	r3, 8108f6a <_svfiprintf_r+0x32>
 8108f50:	2140      	movs	r1, #64	; 0x40
 8108f52:	f000 fb19 	bl	8109588 <_malloc_r>
 8108f56:	6028      	str	r0, [r5, #0]
 8108f58:	6128      	str	r0, [r5, #16]
 8108f5a:	b920      	cbnz	r0, 8108f66 <_svfiprintf_r+0x2e>
 8108f5c:	230c      	movs	r3, #12
 8108f5e:	603b      	str	r3, [r7, #0]
 8108f60:	f04f 30ff 	mov.w	r0, #4294967295
 8108f64:	e0d1      	b.n	810910a <_svfiprintf_r+0x1d2>
 8108f66:	2340      	movs	r3, #64	; 0x40
 8108f68:	616b      	str	r3, [r5, #20]
 8108f6a:	2300      	movs	r3, #0
 8108f6c:	9309      	str	r3, [sp, #36]	; 0x24
 8108f6e:	2320      	movs	r3, #32
 8108f70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8108f74:	f8cd 800c 	str.w	r8, [sp, #12]
 8108f78:	2330      	movs	r3, #48	; 0x30
 8108f7a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8109124 <_svfiprintf_r+0x1ec>
 8108f7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8108f82:	f04f 0901 	mov.w	r9, #1
 8108f86:	4623      	mov	r3, r4
 8108f88:	469a      	mov	sl, r3
 8108f8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8108f8e:	b10a      	cbz	r2, 8108f94 <_svfiprintf_r+0x5c>
 8108f90:	2a25      	cmp	r2, #37	; 0x25
 8108f92:	d1f9      	bne.n	8108f88 <_svfiprintf_r+0x50>
 8108f94:	ebba 0b04 	subs.w	fp, sl, r4
 8108f98:	d00b      	beq.n	8108fb2 <_svfiprintf_r+0x7a>
 8108f9a:	465b      	mov	r3, fp
 8108f9c:	4622      	mov	r2, r4
 8108f9e:	4629      	mov	r1, r5
 8108fa0:	4638      	mov	r0, r7
 8108fa2:	f7ff ff6d 	bl	8108e80 <__ssputs_r>
 8108fa6:	3001      	adds	r0, #1
 8108fa8:	f000 80aa 	beq.w	8109100 <_svfiprintf_r+0x1c8>
 8108fac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8108fae:	445a      	add	r2, fp
 8108fb0:	9209      	str	r2, [sp, #36]	; 0x24
 8108fb2:	f89a 3000 	ldrb.w	r3, [sl]
 8108fb6:	2b00      	cmp	r3, #0
 8108fb8:	f000 80a2 	beq.w	8109100 <_svfiprintf_r+0x1c8>
 8108fbc:	2300      	movs	r3, #0
 8108fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8108fc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8108fc6:	f10a 0a01 	add.w	sl, sl, #1
 8108fca:	9304      	str	r3, [sp, #16]
 8108fcc:	9307      	str	r3, [sp, #28]
 8108fce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8108fd2:	931a      	str	r3, [sp, #104]	; 0x68
 8108fd4:	4654      	mov	r4, sl
 8108fd6:	2205      	movs	r2, #5
 8108fd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8108fdc:	4851      	ldr	r0, [pc, #324]	; (8109124 <_svfiprintf_r+0x1ec>)
 8108fde:	f7f7 f987 	bl	81002f0 <memchr>
 8108fe2:	9a04      	ldr	r2, [sp, #16]
 8108fe4:	b9d8      	cbnz	r0, 810901e <_svfiprintf_r+0xe6>
 8108fe6:	06d0      	lsls	r0, r2, #27
 8108fe8:	bf44      	itt	mi
 8108fea:	2320      	movmi	r3, #32
 8108fec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8108ff0:	0711      	lsls	r1, r2, #28
 8108ff2:	bf44      	itt	mi
 8108ff4:	232b      	movmi	r3, #43	; 0x2b
 8108ff6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8108ffa:	f89a 3000 	ldrb.w	r3, [sl]
 8108ffe:	2b2a      	cmp	r3, #42	; 0x2a
 8109000:	d015      	beq.n	810902e <_svfiprintf_r+0xf6>
 8109002:	9a07      	ldr	r2, [sp, #28]
 8109004:	4654      	mov	r4, sl
 8109006:	2000      	movs	r0, #0
 8109008:	f04f 0c0a 	mov.w	ip, #10
 810900c:	4621      	mov	r1, r4
 810900e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8109012:	3b30      	subs	r3, #48	; 0x30
 8109014:	2b09      	cmp	r3, #9
 8109016:	d94e      	bls.n	81090b6 <_svfiprintf_r+0x17e>
 8109018:	b1b0      	cbz	r0, 8109048 <_svfiprintf_r+0x110>
 810901a:	9207      	str	r2, [sp, #28]
 810901c:	e014      	b.n	8109048 <_svfiprintf_r+0x110>
 810901e:	eba0 0308 	sub.w	r3, r0, r8
 8109022:	fa09 f303 	lsl.w	r3, r9, r3
 8109026:	4313      	orrs	r3, r2
 8109028:	9304      	str	r3, [sp, #16]
 810902a:	46a2      	mov	sl, r4
 810902c:	e7d2      	b.n	8108fd4 <_svfiprintf_r+0x9c>
 810902e:	9b03      	ldr	r3, [sp, #12]
 8109030:	1d19      	adds	r1, r3, #4
 8109032:	681b      	ldr	r3, [r3, #0]
 8109034:	9103      	str	r1, [sp, #12]
 8109036:	2b00      	cmp	r3, #0
 8109038:	bfbb      	ittet	lt
 810903a:	425b      	neglt	r3, r3
 810903c:	f042 0202 	orrlt.w	r2, r2, #2
 8109040:	9307      	strge	r3, [sp, #28]
 8109042:	9307      	strlt	r3, [sp, #28]
 8109044:	bfb8      	it	lt
 8109046:	9204      	strlt	r2, [sp, #16]
 8109048:	7823      	ldrb	r3, [r4, #0]
 810904a:	2b2e      	cmp	r3, #46	; 0x2e
 810904c:	d10c      	bne.n	8109068 <_svfiprintf_r+0x130>
 810904e:	7863      	ldrb	r3, [r4, #1]
 8109050:	2b2a      	cmp	r3, #42	; 0x2a
 8109052:	d135      	bne.n	81090c0 <_svfiprintf_r+0x188>
 8109054:	9b03      	ldr	r3, [sp, #12]
 8109056:	1d1a      	adds	r2, r3, #4
 8109058:	681b      	ldr	r3, [r3, #0]
 810905a:	9203      	str	r2, [sp, #12]
 810905c:	2b00      	cmp	r3, #0
 810905e:	bfb8      	it	lt
 8109060:	f04f 33ff 	movlt.w	r3, #4294967295
 8109064:	3402      	adds	r4, #2
 8109066:	9305      	str	r3, [sp, #20]
 8109068:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8109134 <_svfiprintf_r+0x1fc>
 810906c:	7821      	ldrb	r1, [r4, #0]
 810906e:	2203      	movs	r2, #3
 8109070:	4650      	mov	r0, sl
 8109072:	f7f7 f93d 	bl	81002f0 <memchr>
 8109076:	b140      	cbz	r0, 810908a <_svfiprintf_r+0x152>
 8109078:	2340      	movs	r3, #64	; 0x40
 810907a:	eba0 000a 	sub.w	r0, r0, sl
 810907e:	fa03 f000 	lsl.w	r0, r3, r0
 8109082:	9b04      	ldr	r3, [sp, #16]
 8109084:	4303      	orrs	r3, r0
 8109086:	3401      	adds	r4, #1
 8109088:	9304      	str	r3, [sp, #16]
 810908a:	f814 1b01 	ldrb.w	r1, [r4], #1
 810908e:	4826      	ldr	r0, [pc, #152]	; (8109128 <_svfiprintf_r+0x1f0>)
 8109090:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8109094:	2206      	movs	r2, #6
 8109096:	f7f7 f92b 	bl	81002f0 <memchr>
 810909a:	2800      	cmp	r0, #0
 810909c:	d038      	beq.n	8109110 <_svfiprintf_r+0x1d8>
 810909e:	4b23      	ldr	r3, [pc, #140]	; (810912c <_svfiprintf_r+0x1f4>)
 81090a0:	bb1b      	cbnz	r3, 81090ea <_svfiprintf_r+0x1b2>
 81090a2:	9b03      	ldr	r3, [sp, #12]
 81090a4:	3307      	adds	r3, #7
 81090a6:	f023 0307 	bic.w	r3, r3, #7
 81090aa:	3308      	adds	r3, #8
 81090ac:	9303      	str	r3, [sp, #12]
 81090ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81090b0:	4433      	add	r3, r6
 81090b2:	9309      	str	r3, [sp, #36]	; 0x24
 81090b4:	e767      	b.n	8108f86 <_svfiprintf_r+0x4e>
 81090b6:	fb0c 3202 	mla	r2, ip, r2, r3
 81090ba:	460c      	mov	r4, r1
 81090bc:	2001      	movs	r0, #1
 81090be:	e7a5      	b.n	810900c <_svfiprintf_r+0xd4>
 81090c0:	2300      	movs	r3, #0
 81090c2:	3401      	adds	r4, #1
 81090c4:	9305      	str	r3, [sp, #20]
 81090c6:	4619      	mov	r1, r3
 81090c8:	f04f 0c0a 	mov.w	ip, #10
 81090cc:	4620      	mov	r0, r4
 81090ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 81090d2:	3a30      	subs	r2, #48	; 0x30
 81090d4:	2a09      	cmp	r2, #9
 81090d6:	d903      	bls.n	81090e0 <_svfiprintf_r+0x1a8>
 81090d8:	2b00      	cmp	r3, #0
 81090da:	d0c5      	beq.n	8109068 <_svfiprintf_r+0x130>
 81090dc:	9105      	str	r1, [sp, #20]
 81090de:	e7c3      	b.n	8109068 <_svfiprintf_r+0x130>
 81090e0:	fb0c 2101 	mla	r1, ip, r1, r2
 81090e4:	4604      	mov	r4, r0
 81090e6:	2301      	movs	r3, #1
 81090e8:	e7f0      	b.n	81090cc <_svfiprintf_r+0x194>
 81090ea:	ab03      	add	r3, sp, #12
 81090ec:	9300      	str	r3, [sp, #0]
 81090ee:	462a      	mov	r2, r5
 81090f0:	4b0f      	ldr	r3, [pc, #60]	; (8109130 <_svfiprintf_r+0x1f8>)
 81090f2:	a904      	add	r1, sp, #16
 81090f4:	4638      	mov	r0, r7
 81090f6:	f3af 8000 	nop.w
 81090fa:	1c42      	adds	r2, r0, #1
 81090fc:	4606      	mov	r6, r0
 81090fe:	d1d6      	bne.n	81090ae <_svfiprintf_r+0x176>
 8109100:	89ab      	ldrh	r3, [r5, #12]
 8109102:	065b      	lsls	r3, r3, #25
 8109104:	f53f af2c 	bmi.w	8108f60 <_svfiprintf_r+0x28>
 8109108:	9809      	ldr	r0, [sp, #36]	; 0x24
 810910a:	b01d      	add	sp, #116	; 0x74
 810910c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109110:	ab03      	add	r3, sp, #12
 8109112:	9300      	str	r3, [sp, #0]
 8109114:	462a      	mov	r2, r5
 8109116:	4b06      	ldr	r3, [pc, #24]	; (8109130 <_svfiprintf_r+0x1f8>)
 8109118:	a904      	add	r1, sp, #16
 810911a:	4638      	mov	r0, r7
 810911c:	f000 f87a 	bl	8109214 <_printf_i>
 8109120:	e7eb      	b.n	81090fa <_svfiprintf_r+0x1c2>
 8109122:	bf00      	nop
 8109124:	0810983c 	.word	0x0810983c
 8109128:	08109846 	.word	0x08109846
 810912c:	00000000 	.word	0x00000000
 8109130:	08108e81 	.word	0x08108e81
 8109134:	08109842 	.word	0x08109842

08109138 <_printf_common>:
 8109138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810913c:	4616      	mov	r6, r2
 810913e:	4699      	mov	r9, r3
 8109140:	688a      	ldr	r2, [r1, #8]
 8109142:	690b      	ldr	r3, [r1, #16]
 8109144:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8109148:	4293      	cmp	r3, r2
 810914a:	bfb8      	it	lt
 810914c:	4613      	movlt	r3, r2
 810914e:	6033      	str	r3, [r6, #0]
 8109150:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8109154:	4607      	mov	r7, r0
 8109156:	460c      	mov	r4, r1
 8109158:	b10a      	cbz	r2, 810915e <_printf_common+0x26>
 810915a:	3301      	adds	r3, #1
 810915c:	6033      	str	r3, [r6, #0]
 810915e:	6823      	ldr	r3, [r4, #0]
 8109160:	0699      	lsls	r1, r3, #26
 8109162:	bf42      	ittt	mi
 8109164:	6833      	ldrmi	r3, [r6, #0]
 8109166:	3302      	addmi	r3, #2
 8109168:	6033      	strmi	r3, [r6, #0]
 810916a:	6825      	ldr	r5, [r4, #0]
 810916c:	f015 0506 	ands.w	r5, r5, #6
 8109170:	d106      	bne.n	8109180 <_printf_common+0x48>
 8109172:	f104 0a19 	add.w	sl, r4, #25
 8109176:	68e3      	ldr	r3, [r4, #12]
 8109178:	6832      	ldr	r2, [r6, #0]
 810917a:	1a9b      	subs	r3, r3, r2
 810917c:	42ab      	cmp	r3, r5
 810917e:	dc26      	bgt.n	81091ce <_printf_common+0x96>
 8109180:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8109184:	1e13      	subs	r3, r2, #0
 8109186:	6822      	ldr	r2, [r4, #0]
 8109188:	bf18      	it	ne
 810918a:	2301      	movne	r3, #1
 810918c:	0692      	lsls	r2, r2, #26
 810918e:	d42b      	bmi.n	81091e8 <_printf_common+0xb0>
 8109190:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8109194:	4649      	mov	r1, r9
 8109196:	4638      	mov	r0, r7
 8109198:	47c0      	blx	r8
 810919a:	3001      	adds	r0, #1
 810919c:	d01e      	beq.n	81091dc <_printf_common+0xa4>
 810919e:	6823      	ldr	r3, [r4, #0]
 81091a0:	68e5      	ldr	r5, [r4, #12]
 81091a2:	6832      	ldr	r2, [r6, #0]
 81091a4:	f003 0306 	and.w	r3, r3, #6
 81091a8:	2b04      	cmp	r3, #4
 81091aa:	bf08      	it	eq
 81091ac:	1aad      	subeq	r5, r5, r2
 81091ae:	68a3      	ldr	r3, [r4, #8]
 81091b0:	6922      	ldr	r2, [r4, #16]
 81091b2:	bf0c      	ite	eq
 81091b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 81091b8:	2500      	movne	r5, #0
 81091ba:	4293      	cmp	r3, r2
 81091bc:	bfc4      	itt	gt
 81091be:	1a9b      	subgt	r3, r3, r2
 81091c0:	18ed      	addgt	r5, r5, r3
 81091c2:	2600      	movs	r6, #0
 81091c4:	341a      	adds	r4, #26
 81091c6:	42b5      	cmp	r5, r6
 81091c8:	d11a      	bne.n	8109200 <_printf_common+0xc8>
 81091ca:	2000      	movs	r0, #0
 81091cc:	e008      	b.n	81091e0 <_printf_common+0xa8>
 81091ce:	2301      	movs	r3, #1
 81091d0:	4652      	mov	r2, sl
 81091d2:	4649      	mov	r1, r9
 81091d4:	4638      	mov	r0, r7
 81091d6:	47c0      	blx	r8
 81091d8:	3001      	adds	r0, #1
 81091da:	d103      	bne.n	81091e4 <_printf_common+0xac>
 81091dc:	f04f 30ff 	mov.w	r0, #4294967295
 81091e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81091e4:	3501      	adds	r5, #1
 81091e6:	e7c6      	b.n	8109176 <_printf_common+0x3e>
 81091e8:	18e1      	adds	r1, r4, r3
 81091ea:	1c5a      	adds	r2, r3, #1
 81091ec:	2030      	movs	r0, #48	; 0x30
 81091ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 81091f2:	4422      	add	r2, r4
 81091f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 81091f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 81091fc:	3302      	adds	r3, #2
 81091fe:	e7c7      	b.n	8109190 <_printf_common+0x58>
 8109200:	2301      	movs	r3, #1
 8109202:	4622      	mov	r2, r4
 8109204:	4649      	mov	r1, r9
 8109206:	4638      	mov	r0, r7
 8109208:	47c0      	blx	r8
 810920a:	3001      	adds	r0, #1
 810920c:	d0e6      	beq.n	81091dc <_printf_common+0xa4>
 810920e:	3601      	adds	r6, #1
 8109210:	e7d9      	b.n	81091c6 <_printf_common+0x8e>
	...

08109214 <_printf_i>:
 8109214:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8109218:	7e0f      	ldrb	r7, [r1, #24]
 810921a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 810921c:	2f78      	cmp	r7, #120	; 0x78
 810921e:	4691      	mov	r9, r2
 8109220:	4680      	mov	r8, r0
 8109222:	460c      	mov	r4, r1
 8109224:	469a      	mov	sl, r3
 8109226:	f101 0243 	add.w	r2, r1, #67	; 0x43
 810922a:	d807      	bhi.n	810923c <_printf_i+0x28>
 810922c:	2f62      	cmp	r7, #98	; 0x62
 810922e:	d80a      	bhi.n	8109246 <_printf_i+0x32>
 8109230:	2f00      	cmp	r7, #0
 8109232:	f000 80d8 	beq.w	81093e6 <_printf_i+0x1d2>
 8109236:	2f58      	cmp	r7, #88	; 0x58
 8109238:	f000 80a3 	beq.w	8109382 <_printf_i+0x16e>
 810923c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8109240:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8109244:	e03a      	b.n	81092bc <_printf_i+0xa8>
 8109246:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 810924a:	2b15      	cmp	r3, #21
 810924c:	d8f6      	bhi.n	810923c <_printf_i+0x28>
 810924e:	a101      	add	r1, pc, #4	; (adr r1, 8109254 <_printf_i+0x40>)
 8109250:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8109254:	081092ad 	.word	0x081092ad
 8109258:	081092c1 	.word	0x081092c1
 810925c:	0810923d 	.word	0x0810923d
 8109260:	0810923d 	.word	0x0810923d
 8109264:	0810923d 	.word	0x0810923d
 8109268:	0810923d 	.word	0x0810923d
 810926c:	081092c1 	.word	0x081092c1
 8109270:	0810923d 	.word	0x0810923d
 8109274:	0810923d 	.word	0x0810923d
 8109278:	0810923d 	.word	0x0810923d
 810927c:	0810923d 	.word	0x0810923d
 8109280:	081093cd 	.word	0x081093cd
 8109284:	081092f1 	.word	0x081092f1
 8109288:	081093af 	.word	0x081093af
 810928c:	0810923d 	.word	0x0810923d
 8109290:	0810923d 	.word	0x0810923d
 8109294:	081093ef 	.word	0x081093ef
 8109298:	0810923d 	.word	0x0810923d
 810929c:	081092f1 	.word	0x081092f1
 81092a0:	0810923d 	.word	0x0810923d
 81092a4:	0810923d 	.word	0x0810923d
 81092a8:	081093b7 	.word	0x081093b7
 81092ac:	682b      	ldr	r3, [r5, #0]
 81092ae:	1d1a      	adds	r2, r3, #4
 81092b0:	681b      	ldr	r3, [r3, #0]
 81092b2:	602a      	str	r2, [r5, #0]
 81092b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 81092b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 81092bc:	2301      	movs	r3, #1
 81092be:	e0a3      	b.n	8109408 <_printf_i+0x1f4>
 81092c0:	6820      	ldr	r0, [r4, #0]
 81092c2:	6829      	ldr	r1, [r5, #0]
 81092c4:	0606      	lsls	r6, r0, #24
 81092c6:	f101 0304 	add.w	r3, r1, #4
 81092ca:	d50a      	bpl.n	81092e2 <_printf_i+0xce>
 81092cc:	680e      	ldr	r6, [r1, #0]
 81092ce:	602b      	str	r3, [r5, #0]
 81092d0:	2e00      	cmp	r6, #0
 81092d2:	da03      	bge.n	81092dc <_printf_i+0xc8>
 81092d4:	232d      	movs	r3, #45	; 0x2d
 81092d6:	4276      	negs	r6, r6
 81092d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81092dc:	485e      	ldr	r0, [pc, #376]	; (8109458 <_printf_i+0x244>)
 81092de:	230a      	movs	r3, #10
 81092e0:	e019      	b.n	8109316 <_printf_i+0x102>
 81092e2:	680e      	ldr	r6, [r1, #0]
 81092e4:	602b      	str	r3, [r5, #0]
 81092e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 81092ea:	bf18      	it	ne
 81092ec:	b236      	sxthne	r6, r6
 81092ee:	e7ef      	b.n	81092d0 <_printf_i+0xbc>
 81092f0:	682b      	ldr	r3, [r5, #0]
 81092f2:	6820      	ldr	r0, [r4, #0]
 81092f4:	1d19      	adds	r1, r3, #4
 81092f6:	6029      	str	r1, [r5, #0]
 81092f8:	0601      	lsls	r1, r0, #24
 81092fa:	d501      	bpl.n	8109300 <_printf_i+0xec>
 81092fc:	681e      	ldr	r6, [r3, #0]
 81092fe:	e002      	b.n	8109306 <_printf_i+0xf2>
 8109300:	0646      	lsls	r6, r0, #25
 8109302:	d5fb      	bpl.n	81092fc <_printf_i+0xe8>
 8109304:	881e      	ldrh	r6, [r3, #0]
 8109306:	4854      	ldr	r0, [pc, #336]	; (8109458 <_printf_i+0x244>)
 8109308:	2f6f      	cmp	r7, #111	; 0x6f
 810930a:	bf0c      	ite	eq
 810930c:	2308      	moveq	r3, #8
 810930e:	230a      	movne	r3, #10
 8109310:	2100      	movs	r1, #0
 8109312:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8109316:	6865      	ldr	r5, [r4, #4]
 8109318:	60a5      	str	r5, [r4, #8]
 810931a:	2d00      	cmp	r5, #0
 810931c:	bfa2      	ittt	ge
 810931e:	6821      	ldrge	r1, [r4, #0]
 8109320:	f021 0104 	bicge.w	r1, r1, #4
 8109324:	6021      	strge	r1, [r4, #0]
 8109326:	b90e      	cbnz	r6, 810932c <_printf_i+0x118>
 8109328:	2d00      	cmp	r5, #0
 810932a:	d04d      	beq.n	81093c8 <_printf_i+0x1b4>
 810932c:	4615      	mov	r5, r2
 810932e:	fbb6 f1f3 	udiv	r1, r6, r3
 8109332:	fb03 6711 	mls	r7, r3, r1, r6
 8109336:	5dc7      	ldrb	r7, [r0, r7]
 8109338:	f805 7d01 	strb.w	r7, [r5, #-1]!
 810933c:	4637      	mov	r7, r6
 810933e:	42bb      	cmp	r3, r7
 8109340:	460e      	mov	r6, r1
 8109342:	d9f4      	bls.n	810932e <_printf_i+0x11a>
 8109344:	2b08      	cmp	r3, #8
 8109346:	d10b      	bne.n	8109360 <_printf_i+0x14c>
 8109348:	6823      	ldr	r3, [r4, #0]
 810934a:	07de      	lsls	r6, r3, #31
 810934c:	d508      	bpl.n	8109360 <_printf_i+0x14c>
 810934e:	6923      	ldr	r3, [r4, #16]
 8109350:	6861      	ldr	r1, [r4, #4]
 8109352:	4299      	cmp	r1, r3
 8109354:	bfde      	ittt	le
 8109356:	2330      	movle	r3, #48	; 0x30
 8109358:	f805 3c01 	strble.w	r3, [r5, #-1]
 810935c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8109360:	1b52      	subs	r2, r2, r5
 8109362:	6122      	str	r2, [r4, #16]
 8109364:	f8cd a000 	str.w	sl, [sp]
 8109368:	464b      	mov	r3, r9
 810936a:	aa03      	add	r2, sp, #12
 810936c:	4621      	mov	r1, r4
 810936e:	4640      	mov	r0, r8
 8109370:	f7ff fee2 	bl	8109138 <_printf_common>
 8109374:	3001      	adds	r0, #1
 8109376:	d14c      	bne.n	8109412 <_printf_i+0x1fe>
 8109378:	f04f 30ff 	mov.w	r0, #4294967295
 810937c:	b004      	add	sp, #16
 810937e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8109382:	4835      	ldr	r0, [pc, #212]	; (8109458 <_printf_i+0x244>)
 8109384:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8109388:	6829      	ldr	r1, [r5, #0]
 810938a:	6823      	ldr	r3, [r4, #0]
 810938c:	f851 6b04 	ldr.w	r6, [r1], #4
 8109390:	6029      	str	r1, [r5, #0]
 8109392:	061d      	lsls	r5, r3, #24
 8109394:	d514      	bpl.n	81093c0 <_printf_i+0x1ac>
 8109396:	07df      	lsls	r7, r3, #31
 8109398:	bf44      	itt	mi
 810939a:	f043 0320 	orrmi.w	r3, r3, #32
 810939e:	6023      	strmi	r3, [r4, #0]
 81093a0:	b91e      	cbnz	r6, 81093aa <_printf_i+0x196>
 81093a2:	6823      	ldr	r3, [r4, #0]
 81093a4:	f023 0320 	bic.w	r3, r3, #32
 81093a8:	6023      	str	r3, [r4, #0]
 81093aa:	2310      	movs	r3, #16
 81093ac:	e7b0      	b.n	8109310 <_printf_i+0xfc>
 81093ae:	6823      	ldr	r3, [r4, #0]
 81093b0:	f043 0320 	orr.w	r3, r3, #32
 81093b4:	6023      	str	r3, [r4, #0]
 81093b6:	2378      	movs	r3, #120	; 0x78
 81093b8:	4828      	ldr	r0, [pc, #160]	; (810945c <_printf_i+0x248>)
 81093ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 81093be:	e7e3      	b.n	8109388 <_printf_i+0x174>
 81093c0:	0659      	lsls	r1, r3, #25
 81093c2:	bf48      	it	mi
 81093c4:	b2b6      	uxthmi	r6, r6
 81093c6:	e7e6      	b.n	8109396 <_printf_i+0x182>
 81093c8:	4615      	mov	r5, r2
 81093ca:	e7bb      	b.n	8109344 <_printf_i+0x130>
 81093cc:	682b      	ldr	r3, [r5, #0]
 81093ce:	6826      	ldr	r6, [r4, #0]
 81093d0:	6961      	ldr	r1, [r4, #20]
 81093d2:	1d18      	adds	r0, r3, #4
 81093d4:	6028      	str	r0, [r5, #0]
 81093d6:	0635      	lsls	r5, r6, #24
 81093d8:	681b      	ldr	r3, [r3, #0]
 81093da:	d501      	bpl.n	81093e0 <_printf_i+0x1cc>
 81093dc:	6019      	str	r1, [r3, #0]
 81093de:	e002      	b.n	81093e6 <_printf_i+0x1d2>
 81093e0:	0670      	lsls	r0, r6, #25
 81093e2:	d5fb      	bpl.n	81093dc <_printf_i+0x1c8>
 81093e4:	8019      	strh	r1, [r3, #0]
 81093e6:	2300      	movs	r3, #0
 81093e8:	6123      	str	r3, [r4, #16]
 81093ea:	4615      	mov	r5, r2
 81093ec:	e7ba      	b.n	8109364 <_printf_i+0x150>
 81093ee:	682b      	ldr	r3, [r5, #0]
 81093f0:	1d1a      	adds	r2, r3, #4
 81093f2:	602a      	str	r2, [r5, #0]
 81093f4:	681d      	ldr	r5, [r3, #0]
 81093f6:	6862      	ldr	r2, [r4, #4]
 81093f8:	2100      	movs	r1, #0
 81093fa:	4628      	mov	r0, r5
 81093fc:	f7f6 ff78 	bl	81002f0 <memchr>
 8109400:	b108      	cbz	r0, 8109406 <_printf_i+0x1f2>
 8109402:	1b40      	subs	r0, r0, r5
 8109404:	6060      	str	r0, [r4, #4]
 8109406:	6863      	ldr	r3, [r4, #4]
 8109408:	6123      	str	r3, [r4, #16]
 810940a:	2300      	movs	r3, #0
 810940c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8109410:	e7a8      	b.n	8109364 <_printf_i+0x150>
 8109412:	6923      	ldr	r3, [r4, #16]
 8109414:	462a      	mov	r2, r5
 8109416:	4649      	mov	r1, r9
 8109418:	4640      	mov	r0, r8
 810941a:	47d0      	blx	sl
 810941c:	3001      	adds	r0, #1
 810941e:	d0ab      	beq.n	8109378 <_printf_i+0x164>
 8109420:	6823      	ldr	r3, [r4, #0]
 8109422:	079b      	lsls	r3, r3, #30
 8109424:	d413      	bmi.n	810944e <_printf_i+0x23a>
 8109426:	68e0      	ldr	r0, [r4, #12]
 8109428:	9b03      	ldr	r3, [sp, #12]
 810942a:	4298      	cmp	r0, r3
 810942c:	bfb8      	it	lt
 810942e:	4618      	movlt	r0, r3
 8109430:	e7a4      	b.n	810937c <_printf_i+0x168>
 8109432:	2301      	movs	r3, #1
 8109434:	4632      	mov	r2, r6
 8109436:	4649      	mov	r1, r9
 8109438:	4640      	mov	r0, r8
 810943a:	47d0      	blx	sl
 810943c:	3001      	adds	r0, #1
 810943e:	d09b      	beq.n	8109378 <_printf_i+0x164>
 8109440:	3501      	adds	r5, #1
 8109442:	68e3      	ldr	r3, [r4, #12]
 8109444:	9903      	ldr	r1, [sp, #12]
 8109446:	1a5b      	subs	r3, r3, r1
 8109448:	42ab      	cmp	r3, r5
 810944a:	dcf2      	bgt.n	8109432 <_printf_i+0x21e>
 810944c:	e7eb      	b.n	8109426 <_printf_i+0x212>
 810944e:	2500      	movs	r5, #0
 8109450:	f104 0619 	add.w	r6, r4, #25
 8109454:	e7f5      	b.n	8109442 <_printf_i+0x22e>
 8109456:	bf00      	nop
 8109458:	0810984d 	.word	0x0810984d
 810945c:	0810985e 	.word	0x0810985e

08109460 <memcpy>:
 8109460:	440a      	add	r2, r1
 8109462:	4291      	cmp	r1, r2
 8109464:	f100 33ff 	add.w	r3, r0, #4294967295
 8109468:	d100      	bne.n	810946c <memcpy+0xc>
 810946a:	4770      	bx	lr
 810946c:	b510      	push	{r4, lr}
 810946e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8109472:	f803 4f01 	strb.w	r4, [r3, #1]!
 8109476:	4291      	cmp	r1, r2
 8109478:	d1f9      	bne.n	810946e <memcpy+0xe>
 810947a:	bd10      	pop	{r4, pc}

0810947c <memmove>:
 810947c:	4288      	cmp	r0, r1
 810947e:	b510      	push	{r4, lr}
 8109480:	eb01 0402 	add.w	r4, r1, r2
 8109484:	d902      	bls.n	810948c <memmove+0x10>
 8109486:	4284      	cmp	r4, r0
 8109488:	4623      	mov	r3, r4
 810948a:	d807      	bhi.n	810949c <memmove+0x20>
 810948c:	1e43      	subs	r3, r0, #1
 810948e:	42a1      	cmp	r1, r4
 8109490:	d008      	beq.n	81094a4 <memmove+0x28>
 8109492:	f811 2b01 	ldrb.w	r2, [r1], #1
 8109496:	f803 2f01 	strb.w	r2, [r3, #1]!
 810949a:	e7f8      	b.n	810948e <memmove+0x12>
 810949c:	4402      	add	r2, r0
 810949e:	4601      	mov	r1, r0
 81094a0:	428a      	cmp	r2, r1
 81094a2:	d100      	bne.n	81094a6 <memmove+0x2a>
 81094a4:	bd10      	pop	{r4, pc}
 81094a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 81094aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 81094ae:	e7f7      	b.n	81094a0 <memmove+0x24>

081094b0 <_free_r>:
 81094b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 81094b2:	2900      	cmp	r1, #0
 81094b4:	d044      	beq.n	8109540 <_free_r+0x90>
 81094b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 81094ba:	9001      	str	r0, [sp, #4]
 81094bc:	2b00      	cmp	r3, #0
 81094be:	f1a1 0404 	sub.w	r4, r1, #4
 81094c2:	bfb8      	it	lt
 81094c4:	18e4      	addlt	r4, r4, r3
 81094c6:	f000 f913 	bl	81096f0 <__malloc_lock>
 81094ca:	4a1e      	ldr	r2, [pc, #120]	; (8109544 <_free_r+0x94>)
 81094cc:	9801      	ldr	r0, [sp, #4]
 81094ce:	6813      	ldr	r3, [r2, #0]
 81094d0:	b933      	cbnz	r3, 81094e0 <_free_r+0x30>
 81094d2:	6063      	str	r3, [r4, #4]
 81094d4:	6014      	str	r4, [r2, #0]
 81094d6:	b003      	add	sp, #12
 81094d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 81094dc:	f000 b90e 	b.w	81096fc <__malloc_unlock>
 81094e0:	42a3      	cmp	r3, r4
 81094e2:	d908      	bls.n	81094f6 <_free_r+0x46>
 81094e4:	6825      	ldr	r5, [r4, #0]
 81094e6:	1961      	adds	r1, r4, r5
 81094e8:	428b      	cmp	r3, r1
 81094ea:	bf01      	itttt	eq
 81094ec:	6819      	ldreq	r1, [r3, #0]
 81094ee:	685b      	ldreq	r3, [r3, #4]
 81094f0:	1949      	addeq	r1, r1, r5
 81094f2:	6021      	streq	r1, [r4, #0]
 81094f4:	e7ed      	b.n	81094d2 <_free_r+0x22>
 81094f6:	461a      	mov	r2, r3
 81094f8:	685b      	ldr	r3, [r3, #4]
 81094fa:	b10b      	cbz	r3, 8109500 <_free_r+0x50>
 81094fc:	42a3      	cmp	r3, r4
 81094fe:	d9fa      	bls.n	81094f6 <_free_r+0x46>
 8109500:	6811      	ldr	r1, [r2, #0]
 8109502:	1855      	adds	r5, r2, r1
 8109504:	42a5      	cmp	r5, r4
 8109506:	d10b      	bne.n	8109520 <_free_r+0x70>
 8109508:	6824      	ldr	r4, [r4, #0]
 810950a:	4421      	add	r1, r4
 810950c:	1854      	adds	r4, r2, r1
 810950e:	42a3      	cmp	r3, r4
 8109510:	6011      	str	r1, [r2, #0]
 8109512:	d1e0      	bne.n	81094d6 <_free_r+0x26>
 8109514:	681c      	ldr	r4, [r3, #0]
 8109516:	685b      	ldr	r3, [r3, #4]
 8109518:	6053      	str	r3, [r2, #4]
 810951a:	4421      	add	r1, r4
 810951c:	6011      	str	r1, [r2, #0]
 810951e:	e7da      	b.n	81094d6 <_free_r+0x26>
 8109520:	d902      	bls.n	8109528 <_free_r+0x78>
 8109522:	230c      	movs	r3, #12
 8109524:	6003      	str	r3, [r0, #0]
 8109526:	e7d6      	b.n	81094d6 <_free_r+0x26>
 8109528:	6825      	ldr	r5, [r4, #0]
 810952a:	1961      	adds	r1, r4, r5
 810952c:	428b      	cmp	r3, r1
 810952e:	bf04      	itt	eq
 8109530:	6819      	ldreq	r1, [r3, #0]
 8109532:	685b      	ldreq	r3, [r3, #4]
 8109534:	6063      	str	r3, [r4, #4]
 8109536:	bf04      	itt	eq
 8109538:	1949      	addeq	r1, r1, r5
 810953a:	6021      	streq	r1, [r4, #0]
 810953c:	6054      	str	r4, [r2, #4]
 810953e:	e7ca      	b.n	81094d6 <_free_r+0x26>
 8109540:	b003      	add	sp, #12
 8109542:	bd30      	pop	{r4, r5, pc}
 8109544:	10000474 	.word	0x10000474

08109548 <sbrk_aligned>:
 8109548:	b570      	push	{r4, r5, r6, lr}
 810954a:	4e0e      	ldr	r6, [pc, #56]	; (8109584 <sbrk_aligned+0x3c>)
 810954c:	460c      	mov	r4, r1
 810954e:	6831      	ldr	r1, [r6, #0]
 8109550:	4605      	mov	r5, r0
 8109552:	b911      	cbnz	r1, 810955a <sbrk_aligned+0x12>
 8109554:	f000 f8bc 	bl	81096d0 <_sbrk_r>
 8109558:	6030      	str	r0, [r6, #0]
 810955a:	4621      	mov	r1, r4
 810955c:	4628      	mov	r0, r5
 810955e:	f000 f8b7 	bl	81096d0 <_sbrk_r>
 8109562:	1c43      	adds	r3, r0, #1
 8109564:	d00a      	beq.n	810957c <sbrk_aligned+0x34>
 8109566:	1cc4      	adds	r4, r0, #3
 8109568:	f024 0403 	bic.w	r4, r4, #3
 810956c:	42a0      	cmp	r0, r4
 810956e:	d007      	beq.n	8109580 <sbrk_aligned+0x38>
 8109570:	1a21      	subs	r1, r4, r0
 8109572:	4628      	mov	r0, r5
 8109574:	f000 f8ac 	bl	81096d0 <_sbrk_r>
 8109578:	3001      	adds	r0, #1
 810957a:	d101      	bne.n	8109580 <sbrk_aligned+0x38>
 810957c:	f04f 34ff 	mov.w	r4, #4294967295
 8109580:	4620      	mov	r0, r4
 8109582:	bd70      	pop	{r4, r5, r6, pc}
 8109584:	10000478 	.word	0x10000478

08109588 <_malloc_r>:
 8109588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810958c:	1ccd      	adds	r5, r1, #3
 810958e:	f025 0503 	bic.w	r5, r5, #3
 8109592:	3508      	adds	r5, #8
 8109594:	2d0c      	cmp	r5, #12
 8109596:	bf38      	it	cc
 8109598:	250c      	movcc	r5, #12
 810959a:	2d00      	cmp	r5, #0
 810959c:	4607      	mov	r7, r0
 810959e:	db01      	blt.n	81095a4 <_malloc_r+0x1c>
 81095a0:	42a9      	cmp	r1, r5
 81095a2:	d905      	bls.n	81095b0 <_malloc_r+0x28>
 81095a4:	230c      	movs	r3, #12
 81095a6:	603b      	str	r3, [r7, #0]
 81095a8:	2600      	movs	r6, #0
 81095aa:	4630      	mov	r0, r6
 81095ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 81095b0:	4e2e      	ldr	r6, [pc, #184]	; (810966c <_malloc_r+0xe4>)
 81095b2:	f000 f89d 	bl	81096f0 <__malloc_lock>
 81095b6:	6833      	ldr	r3, [r6, #0]
 81095b8:	461c      	mov	r4, r3
 81095ba:	bb34      	cbnz	r4, 810960a <_malloc_r+0x82>
 81095bc:	4629      	mov	r1, r5
 81095be:	4638      	mov	r0, r7
 81095c0:	f7ff ffc2 	bl	8109548 <sbrk_aligned>
 81095c4:	1c43      	adds	r3, r0, #1
 81095c6:	4604      	mov	r4, r0
 81095c8:	d14d      	bne.n	8109666 <_malloc_r+0xde>
 81095ca:	6834      	ldr	r4, [r6, #0]
 81095cc:	4626      	mov	r6, r4
 81095ce:	2e00      	cmp	r6, #0
 81095d0:	d140      	bne.n	8109654 <_malloc_r+0xcc>
 81095d2:	6823      	ldr	r3, [r4, #0]
 81095d4:	4631      	mov	r1, r6
 81095d6:	4638      	mov	r0, r7
 81095d8:	eb04 0803 	add.w	r8, r4, r3
 81095dc:	f000 f878 	bl	81096d0 <_sbrk_r>
 81095e0:	4580      	cmp	r8, r0
 81095e2:	d13a      	bne.n	810965a <_malloc_r+0xd2>
 81095e4:	6821      	ldr	r1, [r4, #0]
 81095e6:	3503      	adds	r5, #3
 81095e8:	1a6d      	subs	r5, r5, r1
 81095ea:	f025 0503 	bic.w	r5, r5, #3
 81095ee:	3508      	adds	r5, #8
 81095f0:	2d0c      	cmp	r5, #12
 81095f2:	bf38      	it	cc
 81095f4:	250c      	movcc	r5, #12
 81095f6:	4629      	mov	r1, r5
 81095f8:	4638      	mov	r0, r7
 81095fa:	f7ff ffa5 	bl	8109548 <sbrk_aligned>
 81095fe:	3001      	adds	r0, #1
 8109600:	d02b      	beq.n	810965a <_malloc_r+0xd2>
 8109602:	6823      	ldr	r3, [r4, #0]
 8109604:	442b      	add	r3, r5
 8109606:	6023      	str	r3, [r4, #0]
 8109608:	e00e      	b.n	8109628 <_malloc_r+0xa0>
 810960a:	6822      	ldr	r2, [r4, #0]
 810960c:	1b52      	subs	r2, r2, r5
 810960e:	d41e      	bmi.n	810964e <_malloc_r+0xc6>
 8109610:	2a0b      	cmp	r2, #11
 8109612:	d916      	bls.n	8109642 <_malloc_r+0xba>
 8109614:	1961      	adds	r1, r4, r5
 8109616:	42a3      	cmp	r3, r4
 8109618:	6025      	str	r5, [r4, #0]
 810961a:	bf18      	it	ne
 810961c:	6059      	strne	r1, [r3, #4]
 810961e:	6863      	ldr	r3, [r4, #4]
 8109620:	bf08      	it	eq
 8109622:	6031      	streq	r1, [r6, #0]
 8109624:	5162      	str	r2, [r4, r5]
 8109626:	604b      	str	r3, [r1, #4]
 8109628:	4638      	mov	r0, r7
 810962a:	f104 060b 	add.w	r6, r4, #11
 810962e:	f000 f865 	bl	81096fc <__malloc_unlock>
 8109632:	f026 0607 	bic.w	r6, r6, #7
 8109636:	1d23      	adds	r3, r4, #4
 8109638:	1af2      	subs	r2, r6, r3
 810963a:	d0b6      	beq.n	81095aa <_malloc_r+0x22>
 810963c:	1b9b      	subs	r3, r3, r6
 810963e:	50a3      	str	r3, [r4, r2]
 8109640:	e7b3      	b.n	81095aa <_malloc_r+0x22>
 8109642:	6862      	ldr	r2, [r4, #4]
 8109644:	42a3      	cmp	r3, r4
 8109646:	bf0c      	ite	eq
 8109648:	6032      	streq	r2, [r6, #0]
 810964a:	605a      	strne	r2, [r3, #4]
 810964c:	e7ec      	b.n	8109628 <_malloc_r+0xa0>
 810964e:	4623      	mov	r3, r4
 8109650:	6864      	ldr	r4, [r4, #4]
 8109652:	e7b2      	b.n	81095ba <_malloc_r+0x32>
 8109654:	4634      	mov	r4, r6
 8109656:	6876      	ldr	r6, [r6, #4]
 8109658:	e7b9      	b.n	81095ce <_malloc_r+0x46>
 810965a:	230c      	movs	r3, #12
 810965c:	603b      	str	r3, [r7, #0]
 810965e:	4638      	mov	r0, r7
 8109660:	f000 f84c 	bl	81096fc <__malloc_unlock>
 8109664:	e7a1      	b.n	81095aa <_malloc_r+0x22>
 8109666:	6025      	str	r5, [r4, #0]
 8109668:	e7de      	b.n	8109628 <_malloc_r+0xa0>
 810966a:	bf00      	nop
 810966c:	10000474 	.word	0x10000474

08109670 <_realloc_r>:
 8109670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8109674:	4680      	mov	r8, r0
 8109676:	4614      	mov	r4, r2
 8109678:	460e      	mov	r6, r1
 810967a:	b921      	cbnz	r1, 8109686 <_realloc_r+0x16>
 810967c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8109680:	4611      	mov	r1, r2
 8109682:	f7ff bf81 	b.w	8109588 <_malloc_r>
 8109686:	b92a      	cbnz	r2, 8109694 <_realloc_r+0x24>
 8109688:	f7ff ff12 	bl	81094b0 <_free_r>
 810968c:	4625      	mov	r5, r4
 810968e:	4628      	mov	r0, r5
 8109690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8109694:	f000 f838 	bl	8109708 <_malloc_usable_size_r>
 8109698:	4284      	cmp	r4, r0
 810969a:	4607      	mov	r7, r0
 810969c:	d802      	bhi.n	81096a4 <_realloc_r+0x34>
 810969e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 81096a2:	d812      	bhi.n	81096ca <_realloc_r+0x5a>
 81096a4:	4621      	mov	r1, r4
 81096a6:	4640      	mov	r0, r8
 81096a8:	f7ff ff6e 	bl	8109588 <_malloc_r>
 81096ac:	4605      	mov	r5, r0
 81096ae:	2800      	cmp	r0, #0
 81096b0:	d0ed      	beq.n	810968e <_realloc_r+0x1e>
 81096b2:	42bc      	cmp	r4, r7
 81096b4:	4622      	mov	r2, r4
 81096b6:	4631      	mov	r1, r6
 81096b8:	bf28      	it	cs
 81096ba:	463a      	movcs	r2, r7
 81096bc:	f7ff fed0 	bl	8109460 <memcpy>
 81096c0:	4631      	mov	r1, r6
 81096c2:	4640      	mov	r0, r8
 81096c4:	f7ff fef4 	bl	81094b0 <_free_r>
 81096c8:	e7e1      	b.n	810968e <_realloc_r+0x1e>
 81096ca:	4635      	mov	r5, r6
 81096cc:	e7df      	b.n	810968e <_realloc_r+0x1e>
	...

081096d0 <_sbrk_r>:
 81096d0:	b538      	push	{r3, r4, r5, lr}
 81096d2:	4d06      	ldr	r5, [pc, #24]	; (81096ec <_sbrk_r+0x1c>)
 81096d4:	2300      	movs	r3, #0
 81096d6:	4604      	mov	r4, r0
 81096d8:	4608      	mov	r0, r1
 81096da:	602b      	str	r3, [r5, #0]
 81096dc:	f7f8 f96c 	bl	81019b8 <_sbrk>
 81096e0:	1c43      	adds	r3, r0, #1
 81096e2:	d102      	bne.n	81096ea <_sbrk_r+0x1a>
 81096e4:	682b      	ldr	r3, [r5, #0]
 81096e6:	b103      	cbz	r3, 81096ea <_sbrk_r+0x1a>
 81096e8:	6023      	str	r3, [r4, #0]
 81096ea:	bd38      	pop	{r3, r4, r5, pc}
 81096ec:	1000047c 	.word	0x1000047c

081096f0 <__malloc_lock>:
 81096f0:	4801      	ldr	r0, [pc, #4]	; (81096f8 <__malloc_lock+0x8>)
 81096f2:	f000 b811 	b.w	8109718 <__retarget_lock_acquire_recursive>
 81096f6:	bf00      	nop
 81096f8:	10000480 	.word	0x10000480

081096fc <__malloc_unlock>:
 81096fc:	4801      	ldr	r0, [pc, #4]	; (8109704 <__malloc_unlock+0x8>)
 81096fe:	f000 b80c 	b.w	810971a <__retarget_lock_release_recursive>
 8109702:	bf00      	nop
 8109704:	10000480 	.word	0x10000480

08109708 <_malloc_usable_size_r>:
 8109708:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810970c:	1f18      	subs	r0, r3, #4
 810970e:	2b00      	cmp	r3, #0
 8109710:	bfbc      	itt	lt
 8109712:	580b      	ldrlt	r3, [r1, r0]
 8109714:	18c0      	addlt	r0, r0, r3
 8109716:	4770      	bx	lr

08109718 <__retarget_lock_acquire_recursive>:
 8109718:	4770      	bx	lr

0810971a <__retarget_lock_release_recursive>:
 810971a:	4770      	bx	lr

0810971c <_init>:
 810971c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810971e:	bf00      	nop
 8109720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8109722:	bc08      	pop	{r3}
 8109724:	469e      	mov	lr, r3
 8109726:	4770      	bx	lr

08109728 <_fini>:
 8109728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810972a:	bf00      	nop
 810972c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810972e:	bc08      	pop	{r3}
 8109730:	469e      	mov	lr, r3
 8109732:	4770      	bx	lr
