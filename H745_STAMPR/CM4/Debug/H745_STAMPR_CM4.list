
H745_STAMPR_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005100  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08105398  08105398  00015398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  081053a8  081053a8  000153a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  081053ac  081053ac  000153ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  10000000  081053b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000214  10000010  081053c0  00020010  2**3
                  ALLOC
  7 ._user_heap_stack 00000604  10000224  081053c0  00020224  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001c035  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002e8b  00000000  00000000  0003c075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001590  00000000  00000000  0003ef00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001448  00000000  00000000  00040490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003d965  00000000  00000000  000418d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001aa49  00000000  00000000  0007f23d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00196a42  00000000  00000000  00099c86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  002306c8  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005bcc  00000000  00000000  00230718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000010 	.word	0x10000010
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08105380 	.word	0x08105380

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000014 	.word	0x10000014
 81002d4:	08105380 	.word	0x08105380

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b09      	ldr	r3, [pc, #36]	; (8100304 <SystemInit+0x2c>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81002e2:	4a08      	ldr	r2, [pc, #32]	; (8100304 <SystemInit+0x2c>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b05      	ldr	r3, [pc, #20]	; (8100304 <SystemInit+0x2c>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a04      	ldr	r2, [pc, #16]	; (8100304 <SystemInit+0x2c>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81002f8:	bf00      	nop
 81002fa:	46bd      	mov	sp, r7
 81002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100300:	4770      	bx	lr
 8100302:	bf00      	nop
 8100304:	e000ed00 	.word	0xe000ed00

08100308 <DS3231_Read>:

#ifdef ExRTC_IS_DS3231

DS3231_RG_Strc ERTC_lg;

void DS3231_Read(I2C_HandleTypeDef *hi2c){
 8100308:	b580      	push	{r7, lr}
 810030a:	b086      	sub	sp, #24
 810030c:	af04      	add	r7, sp, #16
 810030e:	6078      	str	r0, [r7, #4]
	/* Check by use "ERTC_lg" in live expression
	 * ex. S3231_Read(&hi2c2);
	 * */
	if(hi2c->State == HAL_I2C_STATE_READY){
 8100310:	687b      	ldr	r3, [r7, #4]
 8100312:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8100316:	b2db      	uxtb	r3, r3
 8100318:	2b20      	cmp	r3, #32
 810031a:	d10b      	bne.n	8100334 <DS3231_Read+0x2c>
		HAL_I2C_Mem_Read(hi2c, DS_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT,
 810031c:	2364      	movs	r3, #100	; 0x64
 810031e:	9302      	str	r3, [sp, #8]
 8100320:	2313      	movs	r3, #19
 8100322:	9301      	str	r3, [sp, #4]
 8100324:	4b05      	ldr	r3, [pc, #20]	; (810033c <DS3231_Read+0x34>)
 8100326:	9300      	str	r3, [sp, #0]
 8100328:	2301      	movs	r3, #1
 810032a:	2200      	movs	r2, #0
 810032c:	21d0      	movs	r1, #208	; 0xd0
 810032e:	6878      	ldr	r0, [r7, #4]
 8100330:	f001 fbfe 	bl	8101b30 <HAL_I2C_Mem_Read>
				&ERTC_lg.D8[0], 19, 100);
	}

}
 8100334:	bf00      	nop
 8100336:	3708      	adds	r7, #8
 8100338:	46bd      	mov	sp, r7
 810033a:	bd80      	pop	{r7, pc}
 810033c:	1000002c 	.word	0x1000002c

08100340 <EXIN_RTC_SYNC>:


//// Sync timevalue when boot(in case Vbat is not powered)
void EXIN_RTC_SYNC(I2C_HandleTypeDef *hi2c, RTC_HandleTypeDef *hrtc){
 8100340:	b580      	push	{r7, lr}
 8100342:	b088      	sub	sp, #32
 8100344:	af00      	add	r7, sp, #0
 8100346:	6078      	str	r0, [r7, #4]
 8100348:	6039      	str	r1, [r7, #0]
	DS3231_Read(hi2c);
 810034a:	6878      	ldr	r0, [r7, #4]
 810034c:	f7ff ffdc 	bl	8100308 <DS3231_Read>

	RTC_TimeTypeDef sTime={0};
 8100350:	f107 030c 	add.w	r3, r7, #12
 8100354:	2200      	movs	r2, #0
 8100356:	601a      	str	r2, [r3, #0]
 8100358:	605a      	str	r2, [r3, #4]
 810035a:	609a      	str	r2, [r3, #8]
 810035c:	60da      	str	r2, [r3, #12]
 810035e:	611a      	str	r2, [r3, #16]
	sTime.Hours = ERTC_lg.DS3231RG.hour; //
 8100360:	4b18      	ldr	r3, [pc, #96]	; (81003c4 <EXIN_RTC_SYNC+0x84>)
 8100362:	789b      	ldrb	r3, [r3, #2]
 8100364:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8100368:	b2db      	uxtb	r3, r3
 810036a:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = ERTC_lg.DS3231RG.min;
 810036c:	4b15      	ldr	r3, [pc, #84]	; (81003c4 <EXIN_RTC_SYNC+0x84>)
 810036e:	785b      	ldrb	r3, [r3, #1]
 8100370:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = ERTC_lg.DS3231RG.sec;
 8100372:	4b14      	ldr	r3, [pc, #80]	; (81003c4 <EXIN_RTC_SYNC+0x84>)
 8100374:	781b      	ldrb	r3, [r3, #0]
 8100376:	73bb      	strb	r3, [r7, #14]

	HAL_RTC_SetTime(hrtc, &sTime, RTC_FORMAT_BCD);
 8100378:	f107 030c 	add.w	r3, r7, #12
 810037c:	2201      	movs	r2, #1
 810037e:	4619      	mov	r1, r3
 8100380:	6838      	ldr	r0, [r7, #0]
 8100382:	f003 fafd 	bl	8103980 <HAL_RTC_SetTime>

	RTC_DateTypeDef sDate ={0};
 8100386:	2300      	movs	r3, #0
 8100388:	60bb      	str	r3, [r7, #8]
	sDate.Date = ERTC_lg.DS3231RG.date;
 810038a:	4b0e      	ldr	r3, [pc, #56]	; (81003c4 <EXIN_RTC_SYNC+0x84>)
 810038c:	791b      	ldrb	r3, [r3, #4]
 810038e:	72bb      	strb	r3, [r7, #10]
	sDate.Month = ERTC_lg.DS3231RG.month;
 8100390:	4b0c      	ldr	r3, [pc, #48]	; (81003c4 <EXIN_RTC_SYNC+0x84>)
 8100392:	795b      	ldrb	r3, [r3, #5]
 8100394:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8100398:	b2db      	uxtb	r3, r3
 810039a:	727b      	strb	r3, [r7, #9]
	sDate.WeekDay = ERTC_lg.DS3231RG.wkday;
 810039c:	4b09      	ldr	r3, [pc, #36]	; (81003c4 <EXIN_RTC_SYNC+0x84>)
 810039e:	78db      	ldrb	r3, [r3, #3]
 81003a0:	f3c3 0302 	ubfx	r3, r3, #0, #3
 81003a4:	b2db      	uxtb	r3, r3
 81003a6:	723b      	strb	r3, [r7, #8]
	sDate.Year = ERTC_lg.DS3231RG.year;
 81003a8:	4b06      	ldr	r3, [pc, #24]	; (81003c4 <EXIN_RTC_SYNC+0x84>)
 81003aa:	799b      	ldrb	r3, [r3, #6]
 81003ac:	72fb      	strb	r3, [r7, #11]

	HAL_RTC_SetDate(hrtc, &sDate, RTC_FORMAT_BCD);
 81003ae:	f107 0308 	add.w	r3, r7, #8
 81003b2:	2201      	movs	r2, #1
 81003b4:	4619      	mov	r1, r3
 81003b6:	6838      	ldr	r0, [r7, #0]
 81003b8:	f003 fbdb 	bl	8103b72 <HAL_RTC_SetDate>
}
 81003bc:	bf00      	nop
 81003be:	3720      	adds	r7, #32
 81003c0:	46bd      	mov	sp, r7
 81003c2:	bd80      	pop	{r7, pc}
 81003c4:	1000002c 	.word	0x1000002c

081003c8 <Write_MFRC522>:
 * Function Nameï¼šWrite_MFRC5200
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parametersï¼šaddr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(u_char addr, u_char val) {
 81003c8:	b580      	push	{r7, lr}
 81003ca:	b084      	sub	sp, #16
 81003cc:	af00      	add	r7, sp, #0
 81003ce:	4603      	mov	r3, r0
 81003d0:	460a      	mov	r2, r1
 81003d2:	71fb      	strb	r3, [r7, #7]
 81003d4:	4613      	mov	r3, r2
 81003d6:	71bb      	strb	r3, [r7, #6]
  //uint32_t rx_bits;
	  u_char addr_bits = (((addr<<1) & 0x7E)); //// 8.1.2.3 read = 1/ write = 0[1] + addr[6] + 0[1]
 81003d8:	79fb      	ldrb	r3, [r7, #7]
 81003da:	005b      	lsls	r3, r3, #1
 81003dc:	b2db      	uxtb	r3, r3
 81003de:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 81003e2:	b2db      	uxtb	r3, r3
 81003e4:	73fb      	strb	r3, [r7, #15]
  //u_char rx_bits;

#ifdef MFRC522_SPI_HWOUT_NSS_DIS
////  set the select line so we can start transferring
////  MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 81003e6:	2200      	movs	r2, #0
 81003e8:	2110      	movs	r1, #16
 81003ea:	480d      	ldr	r0, [pc, #52]	; (8100420 <Write_MFRC522+0x58>)
 81003ec:	f001 fa78 	bl	81018e0 <HAL_GPIO_WritePin>
   - bottom 8 bits are the data bits being sent for that address, we send
     them as is
   */
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, (((addr << 1) & 0x7E) << 8) |  val );
  //HAL_SPI_TransmitReceive(&hspi2, (((addr << 1) & 0x7E) << 8) |  val , rx_bits, 1, 500);
  HAL_SPI_Transmit(&MFRC522_SPI_PORT, &addr_bits, 1, 500);
 81003f0:	f107 010f 	add.w	r1, r7, #15
 81003f4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 81003f8:	2201      	movs	r2, #1
 81003fa:	480a      	ldr	r0, [pc, #40]	; (8100424 <Write_MFRC522+0x5c>)
 81003fc:	f003 fea8 	bl	8104150 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&MFRC522_SPI_PORT, &val, 1, 500);
 8100400:	1db9      	adds	r1, r7, #6
 8100402:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8100406:	2201      	movs	r2, #1
 8100408:	4806      	ldr	r0, [pc, #24]	; (8100424 <Write_MFRC522+0x5c>)
 810040a:	f003 fea1 	bl	8104150 <HAL_SPI_Transmit>
  //HAL_SPI_TransmitReceive(&MFRC522_SPI_PORT, pTxData, pRxData, Size, Timeout);

#ifdef MFRC522_SPI_HWOUT_NSS_DIS
  //// clear the select line-- we are done here
//  MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 810040e:	2201      	movs	r2, #1
 8100410:	2110      	movs	r1, #16
 8100412:	4803      	ldr	r0, [pc, #12]	; (8100420 <Write_MFRC522+0x58>)
 8100414:	f001 fa64 	bl	81018e0 <HAL_GPIO_WritePin>
#endif
  //// burn some time
  // volatile uint32_t ticks;
  // for(ticks=0; ticks < 5000; ++ticks);
}
 8100418:	bf00      	nop
 810041a:	3710      	adds	r7, #16
 810041c:	46bd      	mov	sp, r7
 810041e:	bd80      	pop	{r7, pc}
 8100420:	58021000 	.word	0x58021000
 8100424:	100000fc 	.word	0x100000fc

08100428 <Read_MFRC522>:
 * Function Name: Read_MFRC522
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the
 */
u_char Read_MFRC522(u_char addr) {
 8100428:	b580      	push	{r7, lr}
 810042a:	b084      	sub	sp, #16
 810042c:	af00      	add	r7, sp, #0
 810042e:	4603      	mov	r3, r0
 8100430:	71fb      	strb	r3, [r7, #7]
  //uint32_t rx_bits;
  u_char rx_bits;
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80); ////  8.1.2.3  read = 1/ write = 0[1] + addr[6] + 0[1]
 8100432:	79fb      	ldrb	r3, [r7, #7]
 8100434:	005b      	lsls	r3, r3, #1
 8100436:	b25b      	sxtb	r3, r3
 8100438:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 810043c:	b25b      	sxtb	r3, r3
 810043e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8100442:	b25b      	sxtb	r3, r3
 8100444:	b2db      	uxtb	r3, r3
 8100446:	73bb      	strb	r3, [r7, #14]

#ifdef MFRC522_SPI_HWOUT_NSS_DIS
  // set the select line so we can start transferring
//  MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8100448:	2200      	movs	r2, #0
 810044a:	2110      	movs	r1, #16
 810044c:	480e      	ldr	r0, [pc, #56]	; (8100488 <Read_MFRC522+0x60>)
 810044e:	f001 fa47 	bl	81018e0 <HAL_GPIO_WritePin>
  //// - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
  */
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 );
  //HAL_SPI_TransmitReceive(&hspi2, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 , rx_bits, 1, 500);
//HAL_SPI_Transmit(&hspi2, (unsigned char*) ((((addr<<1) & 0x7E) | 0x80)), 1, 500);
  HAL_SPI_Transmit(&MFRC522_SPI_PORT, &addr_bits, 1, 500);
 8100452:	f107 010e 	add.w	r1, r7, #14
 8100456:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 810045a:	2201      	movs	r2, #1
 810045c:	480b      	ldr	r0, [pc, #44]	; (810048c <Read_MFRC522+0x64>)
 810045e:	f003 fe77 	bl	8104150 <HAL_SPI_Transmit>

  HAL_SPI_Receive(&MFRC522_SPI_PORT, &rx_bits, 1, 500);
 8100462:	f107 010f 	add.w	r1, r7, #15
 8100466:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 810046a:	2201      	movs	r2, #1
 810046c:	4807      	ldr	r0, [pc, #28]	; (810048c <Read_MFRC522+0x64>)
 810046e:	f004 f85d 	bl	810452c <HAL_SPI_Receive>
  // burn some time
  // volatile uint32_t ticks;
  // for(ticks=0; ticks < 5000; ++ticks);
#ifdef MFRC522_SPI_HWOUT_NSS_DIS
  //// NSS pin trig using Hardware output NSS signal / setting at ioc
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8100472:	2201      	movs	r2, #1
 8100474:	2110      	movs	r1, #16
 8100476:	4804      	ldr	r0, [pc, #16]	; (8100488 <Read_MFRC522+0x60>)
 8100478:	f001 fa32 	bl	81018e0 <HAL_GPIO_WritePin>
#endif
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 810047c:	7bfb      	ldrb	r3, [r7, #15]
}
 810047e:	4618      	mov	r0, r3
 8100480:	3710      	adds	r7, #16
 8100482:	46bd      	mov	sp, r7
 8100484:	bd80      	pop	{r7, pc}
 8100486:	bf00      	nop
 8100488:	58021000 	.word	0x58021000
 810048c:	100000fc 	.word	0x100000fc

08100490 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(u_char reg, u_char mask)
{
 8100490:	b580      	push	{r7, lr}
 8100492:	b084      	sub	sp, #16
 8100494:	af00      	add	r7, sp, #0
 8100496:	4603      	mov	r3, r0
 8100498:	460a      	mov	r2, r1
 810049a:	71fb      	strb	r3, [r7, #7]
 810049c:	4613      	mov	r3, r2
 810049e:	71bb      	strb	r3, [r7, #6]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 81004a0:	79fb      	ldrb	r3, [r7, #7]
 81004a2:	4618      	mov	r0, r3
 81004a4:	f7ff ffc0 	bl	8100428 <Read_MFRC522>
 81004a8:	4603      	mov	r3, r0
 81004aa:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 81004ac:	7bfa      	ldrb	r2, [r7, #15]
 81004ae:	79bb      	ldrb	r3, [r7, #6]
 81004b0:	4313      	orrs	r3, r2
 81004b2:	b2da      	uxtb	r2, r3
 81004b4:	79fb      	ldrb	r3, [r7, #7]
 81004b6:	4611      	mov	r1, r2
 81004b8:	4618      	mov	r0, r3
 81004ba:	f7ff ff85 	bl	81003c8 <Write_MFRC522>
}
 81004be:	bf00      	nop
 81004c0:	3710      	adds	r7, #16
 81004c2:	46bd      	mov	sp, r7
 81004c4:	bd80      	pop	{r7, pc}

081004c6 <ClearBitMask>:
 * 				read current bit then add preferred bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(u_char reg, u_char mask)
{
 81004c6:	b580      	push	{r7, lr}
 81004c8:	b084      	sub	sp, #16
 81004ca:	af00      	add	r7, sp, #0
 81004cc:	4603      	mov	r3, r0
 81004ce:	460a      	mov	r2, r1
 81004d0:	71fb      	strb	r3, [r7, #7]
 81004d2:	4613      	mov	r3, r2
 81004d4:	71bb      	strb	r3, [r7, #6]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 81004d6:	79fb      	ldrb	r3, [r7, #7]
 81004d8:	4618      	mov	r0, r3
 81004da:	f7ff ffa5 	bl	8100428 <Read_MFRC522>
 81004de:	4603      	mov	r3, r0
 81004e0:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 81004e2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 81004e6:	43db      	mvns	r3, r3
 81004e8:	b25a      	sxtb	r2, r3
 81004ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81004ee:	4013      	ands	r3, r2
 81004f0:	b25b      	sxtb	r3, r3
 81004f2:	b2da      	uxtb	r2, r3
 81004f4:	79fb      	ldrb	r3, [r7, #7]
 81004f6:	4611      	mov	r1, r2
 81004f8:	4618      	mov	r0, r3
 81004fa:	f7ff ff65 	bl	81003c8 <Write_MFRC522>
}
 81004fe:	bf00      	nop
 8100500:	3710      	adds	r7, #16
 8100502:	46bd      	mov	sp, r7
 8100504:	bd80      	pop	{r7, pc}

08100506 <AntennaOn>:
 * 				Set 1 to Tx1RFEn, Tx2RFEn
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 8100506:	b580      	push	{r7, lr}
 8100508:	af00      	add	r7, sp, #0
  SetBitMask(TxControlReg, 0x03);
 810050a:	2103      	movs	r1, #3
 810050c:	2014      	movs	r0, #20
 810050e:	f7ff ffbf 	bl	8100490 <SetBitMask>
}
 8100512:	bf00      	nop
 8100514:	bd80      	pop	{r7, pc}

08100516 <MFRC522_Reset>:
 * 				Soft reset, 10.3 Table 149
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 8100516:	b580      	push	{r7, lr}
 8100518:	af00      	add	r7, sp, #0
  Write_MFRC522(CommandReg, PCD_RESETPHASE);
 810051a:	210f      	movs	r1, #15
 810051c:	2001      	movs	r0, #1
 810051e:	f7ff ff53 	bl	81003c8 <Write_MFRC522>
}
 8100522:	bf00      	nop
 8100524:	bd80      	pop	{r7, pc}

08100526 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 8100526:	b580      	push	{r7, lr}
 8100528:	af00      	add	r7, sp, #0
//  MSS_GPIO_set_output( MSS_GPIO_1, 1 );
  MFRC522_Reset();
 810052a:	f7ff fff4 	bl	8100516 <MFRC522_Reset>

  // Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
  Write_MFRC522(TModeReg, 0x80); // 0x8D);      // Tauto = 1; f(Timer) = 6.78MHz/TPreScaler
 810052e:	2180      	movs	r1, #128	; 0x80
 8100530:	202a      	movs	r0, #42	; 0x2a
 8100532:	f7ff ff49 	bl	81003c8 <Write_MFRC522>
  Write_MFRC522(TPrescalerReg, 0xA9); //0x34); // TModeReg[3..0] + TPrescalerReg
 8100536:	21a9      	movs	r1, #169	; 0xa9
 8100538:	202b      	movs	r0, #43	; 0x2b
 810053a:	f7ff ff45 	bl	81003c8 <Write_MFRC522>
  Write_MFRC522(TReloadRegL, 0x03); //30);
 810053e:	2103      	movs	r1, #3
 8100540:	202d      	movs	r0, #45	; 0x2d
 8100542:	f7ff ff41 	bl	81003c8 <Write_MFRC522>
  Write_MFRC522(TReloadRegH, 0xE8); //0);
 8100546:	21e8      	movs	r1, #232	; 0xe8
 8100548:	202c      	movs	r0, #44	; 0x2c
 810054a:	f7ff ff3d 	bl	81003c8 <Write_MFRC522>
  Write_MFRC522(TxAutoReg, 0x40);     // force 100% ASK modulation
 810054e:	2140      	movs	r1, #64	; 0x40
 8100550:	2015      	movs	r0, #21
 8100552:	f7ff ff39 	bl	81003c8 <Write_MFRC522>
  Write_MFRC522(ModeReg, 0x3D);       // CRC Initial value 0x6363
 8100556:	213d      	movs	r1, #61	; 0x3d
 8100558:	2011      	movs	r0, #17
 810055a:	f7ff ff35 	bl	81003c8 <Write_MFRC522>
  // interrupts, still playing with these
  // Write_MFRC522(CommIEnReg, 0xFF);
  // Write_MFRC522(DivlEnReg, 0xFF);

  // turn antenna on
  AntennaOn();
 810055e:	f7ff ffd2 	bl	8100506 <AntennaOn>
}
 8100562:	bf00      	nop
 8100564:	bd80      	pop	{r7, pc}

08100566 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
u_char MFRC522_ToCard(u_char command, u_char *sendData, u_char sendLen, u_char *backData, uint *backLen)
{
 8100566:	b590      	push	{r4, r7, lr}
 8100568:	b089      	sub	sp, #36	; 0x24
 810056a:	af00      	add	r7, sp, #0
 810056c:	60b9      	str	r1, [r7, #8]
 810056e:	607b      	str	r3, [r7, #4]
 8100570:	4603      	mov	r3, r0
 8100572:	73fb      	strb	r3, [r7, #15]
 8100574:	4613      	mov	r3, r2
 8100576:	73bb      	strb	r3, [r7, #14]
  u_char status = MI_ERR;
 8100578:	2302      	movs	r3, #2
 810057a:	77fb      	strb	r3, [r7, #31]
  u_char irqEn = 0x00;
 810057c:	2300      	movs	r3, #0
 810057e:	77bb      	strb	r3, [r7, #30]
  u_char waitIRq = 0x00;
 8100580:	2300      	movs	r3, #0
 8100582:	777b      	strb	r3, [r7, #29]
  u_char lastBits;
  u_char n;
  uint i;

  switch (command)
 8100584:	7bfb      	ldrb	r3, [r7, #15]
 8100586:	2b0c      	cmp	r3, #12
 8100588:	d006      	beq.n	8100598 <MFRC522_ToCard+0x32>
 810058a:	2b0e      	cmp	r3, #14
 810058c:	d109      	bne.n	81005a2 <MFRC522_ToCard+0x3c>
  {
    case PCD_AUTHENT:     // Certification cards close
      {
        irqEn = 0x12;
 810058e:	2312      	movs	r3, #18
 8100590:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x10;
 8100592:	2310      	movs	r3, #16
 8100594:	777b      	strb	r3, [r7, #29]
        break;
 8100596:	e005      	b.n	81005a4 <MFRC522_ToCard+0x3e>
      }
    case PCD_TRANSCEIVE:  // Transmit FIFO data
      {
        irqEn = 0x77;
 8100598:	2377      	movs	r3, #119	; 0x77
 810059a:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x30;
 810059c:	2330      	movs	r3, #48	; 0x30
 810059e:	777b      	strb	r3, [r7, #29]
        break;
 81005a0:	e000      	b.n	81005a4 <MFRC522_ToCard+0x3e>
      }
    default:
      break;
 81005a2:	bf00      	nop
  }

  Write_MFRC522(CommIEnReg, irqEn|0x80);  // Interrupt request
 81005a4:	7fbb      	ldrb	r3, [r7, #30]
 81005a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 81005aa:	b2db      	uxtb	r3, r3
 81005ac:	4619      	mov	r1, r3
 81005ae:	2002      	movs	r0, #2
 81005b0:	f7ff ff0a 	bl	81003c8 <Write_MFRC522>
  ClearBitMask(CommIrqReg, 0x80);         // Clear all interrupt request bit
 81005b4:	2180      	movs	r1, #128	; 0x80
 81005b6:	2004      	movs	r0, #4
 81005b8:	f7ff ff85 	bl	81004c6 <ClearBitMask>
  SetBitMask(FIFOLevelReg, 0x80);         // FlushBuffer=1, FIFO Initialization
 81005bc:	2180      	movs	r1, #128	; 0x80
 81005be:	200a      	movs	r0, #10
 81005c0:	f7ff ff66 	bl	8100490 <SetBitMask>

  Write_MFRC522(CommandReg, PCD_IDLE);    // NO action; Cancel the current command
 81005c4:	2100      	movs	r1, #0
 81005c6:	2001      	movs	r0, #1
 81005c8:	f7ff fefe 	bl	81003c8 <Write_MFRC522>

  // Writing data to the FIFO
  for (i=0; i<sendLen; i++)
 81005cc:	2300      	movs	r3, #0
 81005ce:	61bb      	str	r3, [r7, #24]
 81005d0:	e00a      	b.n	81005e8 <MFRC522_ToCard+0x82>
  {
    Write_MFRC522(FIFODataReg, sendData[i]);
 81005d2:	68ba      	ldr	r2, [r7, #8]
 81005d4:	69bb      	ldr	r3, [r7, #24]
 81005d6:	4413      	add	r3, r2
 81005d8:	781b      	ldrb	r3, [r3, #0]
 81005da:	4619      	mov	r1, r3
 81005dc:	2009      	movs	r0, #9
 81005de:	f7ff fef3 	bl	81003c8 <Write_MFRC522>
  for (i=0; i<sendLen; i++)
 81005e2:	69bb      	ldr	r3, [r7, #24]
 81005e4:	3301      	adds	r3, #1
 81005e6:	61bb      	str	r3, [r7, #24]
 81005e8:	7bbb      	ldrb	r3, [r7, #14]
 81005ea:	69ba      	ldr	r2, [r7, #24]
 81005ec:	429a      	cmp	r2, r3
 81005ee:	d3f0      	bcc.n	81005d2 <MFRC522_ToCard+0x6c>
  }

  // Execute the command
  Write_MFRC522(CommandReg, command);
 81005f0:	7bfb      	ldrb	r3, [r7, #15]
 81005f2:	4619      	mov	r1, r3
 81005f4:	2001      	movs	r0, #1
 81005f6:	f7ff fee7 	bl	81003c8 <Write_MFRC522>
  if (command == PCD_TRANSCEIVE)
 81005fa:	7bfb      	ldrb	r3, [r7, #15]
 81005fc:	2b0c      	cmp	r3, #12
 81005fe:	d103      	bne.n	8100608 <MFRC522_ToCard+0xa2>
  {
    SetBitMask(BitFramingReg, 0x80);      // StartSend=1,transmission of data starts
 8100600:	2180      	movs	r1, #128	; 0x80
 8100602:	200d      	movs	r0, #13
 8100604:	f7ff ff44 	bl	8100490 <SetBitMask>
  }

  // Waiting to receive data to complete
  i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8100608:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 810060c:	61bb      	str	r3, [r7, #24]
  do
  {
    // CommIrqReg[7..0]
    // Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
    n = Read_MFRC522(CommIrqReg);
 810060e:	2004      	movs	r0, #4
 8100610:	f7ff ff0a 	bl	8100428 <Read_MFRC522>
 8100614:	4603      	mov	r3, r0
 8100616:	773b      	strb	r3, [r7, #28]
    i--;
 8100618:	69bb      	ldr	r3, [r7, #24]
 810061a:	3b01      	subs	r3, #1
 810061c:	61bb      	str	r3, [r7, #24]
  }
  while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 810061e:	69bb      	ldr	r3, [r7, #24]
 8100620:	2b00      	cmp	r3, #0
 8100622:	d00a      	beq.n	810063a <MFRC522_ToCard+0xd4>
 8100624:	7f3b      	ldrb	r3, [r7, #28]
 8100626:	f003 0301 	and.w	r3, r3, #1
 810062a:	2b00      	cmp	r3, #0
 810062c:	d105      	bne.n	810063a <MFRC522_ToCard+0xd4>
 810062e:	7f3a      	ldrb	r2, [r7, #28]
 8100630:	7f7b      	ldrb	r3, [r7, #29]
 8100632:	4013      	ands	r3, r2
 8100634:	b2db      	uxtb	r3, r3
 8100636:	2b00      	cmp	r3, #0
 8100638:	d0e9      	beq.n	810060e <MFRC522_ToCard+0xa8>

  ClearBitMask(BitFramingReg, 0x80);      // StartSend=0
 810063a:	2180      	movs	r1, #128	; 0x80
 810063c:	200d      	movs	r0, #13
 810063e:	f7ff ff42 	bl	81004c6 <ClearBitMask>

  if (i != 0)
 8100642:	69bb      	ldr	r3, [r7, #24]
 8100644:	2b00      	cmp	r3, #0
 8100646:	d052      	beq.n	81006ee <MFRC522_ToCard+0x188>
  {
    if(!(Read_MFRC522(ErrorReg) & 0x1B))  // BufferOvfl Collerr CRCErr ProtecolErr
 8100648:	2006      	movs	r0, #6
 810064a:	f7ff feed 	bl	8100428 <Read_MFRC522>
 810064e:	4603      	mov	r3, r0
 8100650:	f003 031b 	and.w	r3, r3, #27
 8100654:	2b00      	cmp	r3, #0
 8100656:	d148      	bne.n	81006ea <MFRC522_ToCard+0x184>
    {
      status = MI_OK;
 8100658:	2300      	movs	r3, #0
 810065a:	77fb      	strb	r3, [r7, #31]
      if (n & irqEn & 0x01)
 810065c:	7f3a      	ldrb	r2, [r7, #28]
 810065e:	7fbb      	ldrb	r3, [r7, #30]
 8100660:	4013      	ands	r3, r2
 8100662:	b2db      	uxtb	r3, r3
 8100664:	f003 0301 	and.w	r3, r3, #1
 8100668:	2b00      	cmp	r3, #0
 810066a:	d001      	beq.n	8100670 <MFRC522_ToCard+0x10a>
      {
        status = MI_NOTAGERR;             // ??
 810066c:	2301      	movs	r3, #1
 810066e:	77fb      	strb	r3, [r7, #31]
      }

      if (command == PCD_TRANSCEIVE)
 8100670:	7bfb      	ldrb	r3, [r7, #15]
 8100672:	2b0c      	cmp	r3, #12
 8100674:	d13b      	bne.n	81006ee <MFRC522_ToCard+0x188>
      {
        n = Read_MFRC522(FIFOLevelReg);
 8100676:	200a      	movs	r0, #10
 8100678:	f7ff fed6 	bl	8100428 <Read_MFRC522>
 810067c:	4603      	mov	r3, r0
 810067e:	773b      	strb	r3, [r7, #28]
        lastBits = Read_MFRC522(ControlReg) & 0x07;
 8100680:	200c      	movs	r0, #12
 8100682:	f7ff fed1 	bl	8100428 <Read_MFRC522>
 8100686:	4603      	mov	r3, r0
 8100688:	f003 0307 	and.w	r3, r3, #7
 810068c:	75fb      	strb	r3, [r7, #23]
        if (lastBits)
 810068e:	7dfb      	ldrb	r3, [r7, #23]
 8100690:	2b00      	cmp	r3, #0
 8100692:	d008      	beq.n	81006a6 <MFRC522_ToCard+0x140>
        {
          *backLen = (n-1)*8 + lastBits;
 8100694:	7f3b      	ldrb	r3, [r7, #28]
 8100696:	3b01      	subs	r3, #1
 8100698:	00da      	lsls	r2, r3, #3
 810069a:	7dfb      	ldrb	r3, [r7, #23]
 810069c:	4413      	add	r3, r2
 810069e:	461a      	mov	r2, r3
 81006a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81006a2:	601a      	str	r2, [r3, #0]
 81006a4:	e004      	b.n	81006b0 <MFRC522_ToCard+0x14a>
        }
        else
        {
          *backLen = n*8;
 81006a6:	7f3b      	ldrb	r3, [r7, #28]
 81006a8:	00db      	lsls	r3, r3, #3
 81006aa:	461a      	mov	r2, r3
 81006ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81006ae:	601a      	str	r2, [r3, #0]
        }

        if (n == 0)
 81006b0:	7f3b      	ldrb	r3, [r7, #28]
 81006b2:	2b00      	cmp	r3, #0
 81006b4:	d101      	bne.n	81006ba <MFRC522_ToCard+0x154>
        {
          n = 1;
 81006b6:	2301      	movs	r3, #1
 81006b8:	773b      	strb	r3, [r7, #28]
        }
        if (n > MAX_LEN)
 81006ba:	7f3b      	ldrb	r3, [r7, #28]
 81006bc:	2b10      	cmp	r3, #16
 81006be:	d901      	bls.n	81006c4 <MFRC522_ToCard+0x15e>
        {
          n = MAX_LEN;
 81006c0:	2310      	movs	r3, #16
 81006c2:	773b      	strb	r3, [r7, #28]
        }

        // Reading the received data in FIFO
        for (i=0; i<n; i++)
 81006c4:	2300      	movs	r3, #0
 81006c6:	61bb      	str	r3, [r7, #24]
 81006c8:	e00a      	b.n	81006e0 <MFRC522_ToCard+0x17a>
        {
          backData[i] = Read_MFRC522(FIFODataReg);
 81006ca:	687a      	ldr	r2, [r7, #4]
 81006cc:	69bb      	ldr	r3, [r7, #24]
 81006ce:	18d4      	adds	r4, r2, r3
 81006d0:	2009      	movs	r0, #9
 81006d2:	f7ff fea9 	bl	8100428 <Read_MFRC522>
 81006d6:	4603      	mov	r3, r0
 81006d8:	7023      	strb	r3, [r4, #0]
        for (i=0; i<n; i++)
 81006da:	69bb      	ldr	r3, [r7, #24]
 81006dc:	3301      	adds	r3, #1
 81006de:	61bb      	str	r3, [r7, #24]
 81006e0:	7f3b      	ldrb	r3, [r7, #28]
 81006e2:	69ba      	ldr	r2, [r7, #24]
 81006e4:	429a      	cmp	r2, r3
 81006e6:	d3f0      	bcc.n	81006ca <MFRC522_ToCard+0x164>
 81006e8:	e001      	b.n	81006ee <MFRC522_ToCard+0x188>
        }
      }
    }
    else {
      //printf("~~~ buffer overflow, collerr, crcerr, or protecolerr\r\n");
      status = MI_ERR;
 81006ea:	2302      	movs	r3, #2
 81006ec:	77fb      	strb	r3, [r7, #31]
  }
  else {
    //printf("~~~ request timed out\r\n");
  }

  return status;
 81006ee:	7ffb      	ldrb	r3, [r7, #31]
}
 81006f0:	4618      	mov	r0, r3
 81006f2:	3724      	adds	r7, #36	; 0x24
 81006f4:	46bd      	mov	sp, r7
 81006f6:	bd90      	pop	{r4, r7, pc}

081006f8 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Anticoll(u_char *serNum)
{
 81006f8:	b580      	push	{r7, lr}
 81006fa:	b086      	sub	sp, #24
 81006fc:	af02      	add	r7, sp, #8
 81006fe:	6078      	str	r0, [r7, #4]
  u_char status;
  u_char i;
  u_char serNumCheck=0;
 8100700:	2300      	movs	r3, #0
 8100702:	737b      	strb	r3, [r7, #13]
  uint unLen;


  //ClearBitMask(Status2Reg, 0x08);		//TempSensclear
  //ClearBitMask(CollReg,0x80);			//ValuesAfterColl
  Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8100704:	2100      	movs	r1, #0
 8100706:	200d      	movs	r0, #13
 8100708:	f7ff fe5e 	bl	81003c8 <Write_MFRC522>

  serNum[0] = PICC_ANTICOLL;
 810070c:	687b      	ldr	r3, [r7, #4]
 810070e:	2293      	movs	r2, #147	; 0x93
 8100710:	701a      	strb	r2, [r3, #0]
  serNum[1] = 0x20;
 8100712:	687b      	ldr	r3, [r7, #4]
 8100714:	3301      	adds	r3, #1
 8100716:	2220      	movs	r2, #32
 8100718:	701a      	strb	r2, [r3, #0]
  status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 810071a:	f107 0308 	add.w	r3, r7, #8
 810071e:	9300      	str	r3, [sp, #0]
 8100720:	687b      	ldr	r3, [r7, #4]
 8100722:	2202      	movs	r2, #2
 8100724:	6879      	ldr	r1, [r7, #4]
 8100726:	200c      	movs	r0, #12
 8100728:	f7ff ff1d 	bl	8100566 <MFRC522_ToCard>
 810072c:	4603      	mov	r3, r0
 810072e:	73fb      	strb	r3, [r7, #15]

  if (status == MI_OK)
 8100730:	7bfb      	ldrb	r3, [r7, #15]
 8100732:	2b00      	cmp	r3, #0
 8100734:	d118      	bne.n	8100768 <MFRC522_Anticoll+0x70>
  {
    //Check card serial number
    for (i=0; i<4; i++)
 8100736:	2300      	movs	r3, #0
 8100738:	73bb      	strb	r3, [r7, #14]
 810073a:	e009      	b.n	8100750 <MFRC522_Anticoll+0x58>
    {
      serNumCheck ^= serNum[i];
 810073c:	7bbb      	ldrb	r3, [r7, #14]
 810073e:	687a      	ldr	r2, [r7, #4]
 8100740:	4413      	add	r3, r2
 8100742:	781a      	ldrb	r2, [r3, #0]
 8100744:	7b7b      	ldrb	r3, [r7, #13]
 8100746:	4053      	eors	r3, r2
 8100748:	737b      	strb	r3, [r7, #13]
    for (i=0; i<4; i++)
 810074a:	7bbb      	ldrb	r3, [r7, #14]
 810074c:	3301      	adds	r3, #1
 810074e:	73bb      	strb	r3, [r7, #14]
 8100750:	7bbb      	ldrb	r3, [r7, #14]
 8100752:	2b03      	cmp	r3, #3
 8100754:	d9f2      	bls.n	810073c <MFRC522_Anticoll+0x44>
    }
    if (serNumCheck != serNum[i])
 8100756:	7bbb      	ldrb	r3, [r7, #14]
 8100758:	687a      	ldr	r2, [r7, #4]
 810075a:	4413      	add	r3, r2
 810075c:	781b      	ldrb	r3, [r3, #0]
 810075e:	7b7a      	ldrb	r2, [r7, #13]
 8100760:	429a      	cmp	r2, r3
 8100762:	d001      	beq.n	8100768 <MFRC522_Anticoll+0x70>
    {
      status = MI_ERR;
 8100764:	2302      	movs	r3, #2
 8100766:	73fb      	strb	r3, [r7, #15]
    }
  }

  //SetBitMask(CollReg, 0x80);		//ValuesAfterColl=1

  return status;
 8100768:	7bfb      	ldrb	r3, [r7, #15]
}
 810076a:	4618      	mov	r0, r3
 810076c:	3710      	adds	r7, #16
 810076e:	46bd      	mov	sp, r7
 8100770:	bd80      	pop	{r7, pc}
	...

08100774 <MFRC522_HardResetSet>:
	// Clear MFCrypto1On bit
	ClearBitMask(Status2Reg, 0x08); // Status2Reg[7..0] bits are: TempSensClear I2CForceHS reserved reserved   MFCrypto1On ModemState[2:0]
} // End PCD_StopCrypto1()

////-------------------------------------------owl_hor----------
void MFRC522_HardResetSet(void){
 8100774:	b580      	push	{r7, lr}
 8100776:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RC522_Rst_GPIO_Port, RC522_Rst_Pin, GPIO_PIN_RESET);
 8100778:	2200      	movs	r2, #0
 810077a:	2108      	movs	r1, #8
 810077c:	4806      	ldr	r0, [pc, #24]	; (8100798 <MFRC522_HardResetSet+0x24>)
 810077e:	f001 f8af 	bl	81018e0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8100782:	2001      	movs	r0, #1
 8100784:	f000 fdb4 	bl	81012f0 <HAL_Delay>
	HAL_GPIO_WritePin(RC522_Rst_GPIO_Port, RC522_Rst_Pin, GPIO_PIN_SET);
 8100788:	2201      	movs	r2, #1
 810078a:	2108      	movs	r1, #8
 810078c:	4802      	ldr	r0, [pc, #8]	; (8100798 <MFRC522_HardResetSet+0x24>)
 810078e:	f001 f8a7 	bl	81018e0 <HAL_GPIO_WritePin>
}
 8100792:	bf00      	nop
 8100794:	bd80      	pop	{r7, pc}
 8100796:	bf00      	nop
 8100798:	58021000 	.word	0x58021000

0810079c <MFRC522_SelfTest>:

uint8_t FIFOBuffex522[75];
void MFRC522_SelfTest(void){
 810079c:	b580      	push	{r7, lr}
 810079e:	b082      	sub	sp, #8
 81007a0:	af00      	add	r7, sp, #0
		5. Start the self test with the CalcCRC command.
		6. The self test is initiated.
		7. When the self test has completed, the FIFO buffer contains the following 64 bytes:
	 * */
	//// 1. Soft reset -> send 1111 to 01h
	Write_MFRC522(CommandReg, PCD_RESETPHASE);
 81007a2:	210f      	movs	r1, #15
 81007a4:	2001      	movs	r0, #1
 81007a6:	f7ff fe0f 	bl	81003c8 <Write_MFRC522>

	//// 2. Write 00h to FIFO 25x times
	for(int i = 0;i < 25; i++){
 81007aa:	2300      	movs	r3, #0
 81007ac:	607b      	str	r3, [r7, #4]
 81007ae:	e002      	b.n	81007b6 <MFRC522_SelfTest+0x1a>
 81007b0:	687b      	ldr	r3, [r7, #4]
 81007b2:	3301      	adds	r3, #1
 81007b4:	607b      	str	r3, [r7, #4]
 81007b6:	687b      	ldr	r3, [r7, #4]
 81007b8:	2b18      	cmp	r3, #24
 81007ba:	ddf9      	ble.n	81007b0 <MFRC522_SelfTest+0x14>
		//Write_MFRC522(FIFODataReg, Reserved00); // use reserved bc it equals to 00h
	}
	//// 3. write 09h to AutoTest
	Write_MFRC522(AutoTestReg, PCD_SELFTSTEN);
 81007bc:	2109      	movs	r1, #9
 81007be:	2036      	movs	r0, #54	; 0x36
 81007c0:	f7ff fe02 	bl	81003c8 <Write_MFRC522>

	//// 4. Write 00h to the FIFO buffer again
	Write_MFRC522(FIFODataReg, Reserved00);
 81007c4:	2100      	movs	r1, #0
 81007c6:	2009      	movs	r0, #9
 81007c8:	f7ff fdfe 	bl	81003c8 <Write_MFRC522>

	FIFOBuffex522[0] = Read_MFRC522(FIFOLevelReg); //// FIFO Check
 81007cc:	200a      	movs	r0, #10
 81007ce:	f7ff fe2b 	bl	8100428 <Read_MFRC522>
 81007d2:	4603      	mov	r3, r0
 81007d4:	461a      	mov	r2, r3
 81007d6:	4b14      	ldr	r3, [pc, #80]	; (8100828 <MFRC522_SelfTest+0x8c>)
 81007d8:	701a      	strb	r2, [r3, #0]
	//// 5. CalcCRC -> Write 0011 to 01h
	Write_MFRC522(CommandReg, PCD_CALCCRC);
 81007da:	2103      	movs	r1, #3
 81007dc:	2001      	movs	r0, #1
 81007de:	f7ff fdf3 	bl	81003c8 <Write_MFRC522>

	//// 6. Self test enable, wait for calculation
	HAL_Delay(1);
 81007e2:	2001      	movs	r0, #1
 81007e4:	f000 fd84 	bl	81012f0 <HAL_Delay>

	FIFOBuffex522[1] = Read_MFRC522(FIFOLevelReg);  //// FIFO Check
 81007e8:	200a      	movs	r0, #10
 81007ea:	f7ff fe1d 	bl	8100428 <Read_MFRC522>
 81007ee:	4603      	mov	r3, r0
 81007f0:	461a      	mov	r2, r3
 81007f2:	4b0d      	ldr	r3, [pc, #52]	; (8100828 <MFRC522_SelfTest+0x8c>)
 81007f4:	705a      	strb	r2, [r3, #1]
//	HAL_SPI_Transmit(&MFRC522_SPI_PORT, &addr_bitsx, 1, 100);
//	HAL_SPI_Receive(&MFRC522_SPI_PORT, &FIFOBuffex522[i] , 1, 100);
//	}
//	HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);

	for(uint j = 2;j < 73; j++){
 81007f6:	2302      	movs	r3, #2
 81007f8:	603b      	str	r3, [r7, #0]
 81007fa:	e00c      	b.n	8100816 <MFRC522_SelfTest+0x7a>
	FIFOBuffex522[j] = Read_MFRC522(FIFODataReg);
 81007fc:	2009      	movs	r0, #9
 81007fe:	f7ff fe13 	bl	8100428 <Read_MFRC522>
 8100802:	4603      	mov	r3, r0
 8100804:	4619      	mov	r1, r3
 8100806:	4a08      	ldr	r2, [pc, #32]	; (8100828 <MFRC522_SelfTest+0x8c>)
 8100808:	683b      	ldr	r3, [r7, #0]
 810080a:	4413      	add	r3, r2
 810080c:	460a      	mov	r2, r1
 810080e:	701a      	strb	r2, [r3, #0]
	for(uint j = 2;j < 73; j++){
 8100810:	683b      	ldr	r3, [r7, #0]
 8100812:	3301      	adds	r3, #1
 8100814:	603b      	str	r3, [r7, #0]
 8100816:	683b      	ldr	r3, [r7, #0]
 8100818:	2b48      	cmp	r3, #72	; 0x48
 810081a:	d9ef      	bls.n	81007fc <MFRC522_SelfTest+0x60>
	}
}
 810081c:	bf00      	nop
 810081e:	bf00      	nop
 8100820:	3708      	adds	r7, #8
 8100822:	46bd      	mov	sp, r7
 8100824:	bd80      	pop	{r7, pc}
 8100826:	bf00      	nop
 8100828:	10000040 	.word	0x10000040

0810082c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 810082c:	b5b0      	push	{r4, r5, r7, lr}
 810082e:	b082      	sub	sp, #8
 8100830:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100832:	4b6b      	ldr	r3, [pc, #428]	; (81009e0 <main+0x1b4>)
 8100834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100838:	4a69      	ldr	r2, [pc, #420]	; (81009e0 <main+0x1b4>)
 810083a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810083e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100842:	4b67      	ldr	r3, [pc, #412]	; (81009e0 <main+0x1b4>)
 8100844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810084c:	607b      	str	r3, [r7, #4]
 810084e:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100850:	2001      	movs	r0, #1
 8100852:	f001 f8cb 	bl	81019ec <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100856:	f001 fde9 	bl	810242c <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810085a:	2201      	movs	r2, #1
 810085c:	2102      	movs	r1, #2
 810085e:	2000      	movs	r0, #0
 8100860:	f001 fd6a 	bl	8102338 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100864:	4b5f      	ldr	r3, [pc, #380]	; (81009e4 <main+0x1b8>)
 8100866:	681b      	ldr	r3, [r3, #0]
 8100868:	091b      	lsrs	r3, r3, #4
 810086a:	f003 030f 	and.w	r3, r3, #15
 810086e:	2b07      	cmp	r3, #7
 8100870:	d108      	bne.n	8100884 <main+0x58>
 8100872:	4b5d      	ldr	r3, [pc, #372]	; (81009e8 <main+0x1bc>)
 8100874:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100878:	4a5b      	ldr	r2, [pc, #364]	; (81009e8 <main+0x1bc>)
 810087a:	f043 0301 	orr.w	r3, r3, #1
 810087e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8100882:	e007      	b.n	8100894 <main+0x68>
 8100884:	4b58      	ldr	r3, [pc, #352]	; (81009e8 <main+0x1bc>)
 8100886:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 810088a:	4a57      	ldr	r2, [pc, #348]	; (81009e8 <main+0x1bc>)
 810088c:	f043 0301 	orr.w	r3, r3, #1
 8100890:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100894:	f000 fc78 	bl	8101188 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100898:	f000 f9ea 	bl	8100c70 <MX_GPIO_Init>
  MX_TIM17_Init();
 810089c:	f000 f9c0 	bl	8100c20 <MX_TIM17_Init>
  MX_RTC_Init();
 81008a0:	f000 f902 	bl	8100aa8 <MX_RTC_Init>
  MX_I2C2_Init();
 81008a4:	f000 f8c0 	bl	8100a28 <MX_I2C2_Init>
  MX_SPI4_Init();
 81008a8:	f000 f964 	bl	8100b74 <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */

  //HAL_TIM_Base_Start_IT(&htim17);

  //// Start sync EXIN RTC
  EXIN_RTC_SYNC(&hi2c2,&hrtc);
 81008ac:	494f      	ldr	r1, [pc, #316]	; (81009ec <main+0x1c0>)
 81008ae:	4850      	ldr	r0, [pc, #320]	; (81009f0 <main+0x1c4>)
 81008b0:	f7ff fd46 	bl	8100340 <EXIN_RTC_SYNC>
  MFRC522_HardResetSet();
 81008b4:	f7ff ff5e 	bl	8100774 <MFRC522_HardResetSet>
  MFRC522_Init();
 81008b8:	f7ff fe35 	bl	8100526 <MFRC522_Init>
  //// MFRC522 version 2.0 software version is: 92h
  rc522_version = Read_MFRC522(VersionReg);
 81008bc:	2037      	movs	r0, #55	; 0x37
 81008be:	f7ff fdb3 	bl	8100428 <Read_MFRC522>
 81008c2:	4603      	mov	r3, r0
 81008c4:	461a      	mov	r2, r3
 81008c6:	4b4b      	ldr	r3, [pc, #300]	; (81009f4 <main+0x1c8>)
 81008c8:	701a      	strb	r2, [r3, #0]
	  //SRAM4->state1 = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
	  //chk2 = SRAM4->state1;
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GetTick() - timestamp_one >= 500){
 81008ca:	f000 fd05 	bl	81012d8 <HAL_GetTick>
 81008ce:	4602      	mov	r2, r0
 81008d0:	4b49      	ldr	r3, [pc, #292]	; (81009f8 <main+0x1cc>)
 81008d2:	681b      	ldr	r3, [r3, #0]
 81008d4:	1ad3      	subs	r3, r2, r3
 81008d6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 81008da:	d32e      	bcc.n	810093a <main+0x10e>
		  timestamp_one = HAL_GetTick();
 81008dc:	f000 fcfc 	bl	81012d8 <HAL_GetTick>
 81008e0:	4603      	mov	r3, r0
 81008e2:	4a45      	ldr	r2, [pc, #276]	; (81009f8 <main+0x1cc>)
 81008e4:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 81008e6:	2102      	movs	r1, #2
 81008e8:	4844      	ldr	r0, [pc, #272]	; (81009fc <main+0x1d0>)
 81008ea:	f001 f812 	bl	8101912 <HAL_GPIO_TogglePin>

		  DS3231_Read(&hi2c2);
 81008ee:	4840      	ldr	r0, [pc, #256]	; (81009f0 <main+0x1c4>)
 81008f0:	f7ff fd0a 	bl	8100308 <DS3231_Read>

		  if(HAL_HSEM_Take(1, 1) == HAL_OK){
 81008f4:	2101      	movs	r1, #1
 81008f6:	2001      	movs	r0, #1
 81008f8:	f001 f840 	bl	810197c <HAL_HSEM_Take>
 81008fc:	4603      	mov	r3, r0
 81008fe:	2b00      	cmp	r3, #0
 8100900:	d11b      	bne.n	810093a <main+0x10e>
		  //read RTC NEED TO READ BOTH IN OTHER
		  HAL_RTC_GetTime(&hrtc, &NowTime, RTC_FORMAT_BCD);
 8100902:	2201      	movs	r2, #1
 8100904:	493e      	ldr	r1, [pc, #248]	; (8100a00 <main+0x1d4>)
 8100906:	4839      	ldr	r0, [pc, #228]	; (81009ec <main+0x1c0>)
 8100908:	f003 f8d7 	bl	8103aba <HAL_RTC_GetTime>
		  HAL_RTC_GetDate(&hrtc, &NowDate, RTC_FORMAT_BCD);
 810090c:	2201      	movs	r2, #1
 810090e:	493d      	ldr	r1, [pc, #244]	; (8100a04 <main+0x1d8>)
 8100910:	4836      	ldr	r0, [pc, #216]	; (81009ec <main+0x1c0>)
 8100912:	f003 f9b5 	bl	8103c80 <HAL_RTC_GetDate>
		  SRAM4->NowTimes = NowTime;
 8100916:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 810091a:	4a39      	ldr	r2, [pc, #228]	; (8100a00 <main+0x1d4>)
 810091c:	1d1c      	adds	r4, r3, #4
 810091e:	4615      	mov	r5, r2
 8100920:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8100922:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8100924:	682b      	ldr	r3, [r5, #0]
 8100926:	6023      	str	r3, [r4, #0]
		  SRAM4->NowDates = NowDate;
 8100928:	f04f 5260 	mov.w	r2, #939524096	; 0x38000000
 810092c:	4b35      	ldr	r3, [pc, #212]	; (8100a04 <main+0x1d8>)
 810092e:	681b      	ldr	r3, [r3, #0]
 8100930:	6193      	str	r3, [r2, #24]

		  HAL_HSEM_Release(1, 1);
 8100932:	2101      	movs	r1, #1
 8100934:	2001      	movs	r0, #1
 8100936:	f001 f845 	bl	81019c4 <HAL_HSEM_Release>
		  	  }
	  }

	  if(HAL_GetTick() - timestamp_two >= 2000 && flag_one == 4){
 810093a:	f000 fccd 	bl	81012d8 <HAL_GetTick>
 810093e:	4602      	mov	r2, r0
 8100940:	4b31      	ldr	r3, [pc, #196]	; (8100a08 <main+0x1dc>)
 8100942:	681b      	ldr	r3, [r3, #0]
 8100944:	1ad3      	subs	r3, r2, r3
 8100946:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 810094a:	d33e      	bcc.n	81009ca <main+0x19e>
 810094c:	4b2f      	ldr	r3, [pc, #188]	; (8100a0c <main+0x1e0>)
 810094e:	781b      	ldrb	r3, [r3, #0]
 8100950:	2b04      	cmp	r3, #4
 8100952:	d13a      	bne.n	81009ca <main+0x19e>
		  timestamp_two = HAL_GetTick();
 8100954:	f000 fcc0 	bl	81012d8 <HAL_GetTick>
 8100958:	4603      	mov	r3, r0
 810095a:	4a2b      	ldr	r2, [pc, #172]	; (8100a08 <main+0x1dc>)
 810095c:	6013      	str	r3, [r2, #0]
//		  for (int i = 0; i < 16; i++) {
//			  cardstr[i] = 0;
//		  }
		  //status_522 = 0;
		  // Find cards
		  stcnt[0]++;
 810095e:	4b2c      	ldr	r3, [pc, #176]	; (8100a10 <main+0x1e4>)
 8100960:	781b      	ldrb	r3, [r3, #0]
 8100962:	3301      	adds	r3, #1
 8100964:	b2da      	uxtb	r2, r3
 8100966:	4b2a      	ldr	r3, [pc, #168]	; (8100a10 <main+0x1e4>)
 8100968:	701a      	strb	r2, [r3, #0]

		  //status_522 = MFRC522_Request(PICC_REQIDL, &cardstr[0]);
		  status_522 = MFRC522_Anticoll(&cardstr[0]);
 810096a:	482a      	ldr	r0, [pc, #168]	; (8100a14 <main+0x1e8>)
 810096c:	f7ff fec4 	bl	81006f8 <MFRC522_Anticoll>
 8100970:	4603      	mov	r3, r0
 8100972:	461a      	mov	r2, r3
 8100974:	4b28      	ldr	r3, [pc, #160]	; (8100a18 <main+0x1ec>)
 8100976:	701a      	strb	r2, [r3, #0]
		  if(status_522 == MI_OK) {
 8100978:	4b27      	ldr	r3, [pc, #156]	; (8100a18 <main+0x1ec>)
 810097a:	781b      	ldrb	r3, [r3, #0]
 810097c:	2b00      	cmp	r3, #0
 810097e:	d11f      	bne.n	81009c0 <main+0x194>
			  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8100980:	2201      	movs	r2, #1
 8100982:	2101      	movs	r1, #1
 8100984:	4825      	ldr	r0, [pc, #148]	; (8100a1c <main+0x1f0>)
 8100986:	f000 ffab 	bl	81018e0 <HAL_GPIO_WritePin>
			  result++;
 810098a:	4b25      	ldr	r3, [pc, #148]	; (8100a20 <main+0x1f4>)
 810098c:	881b      	ldrh	r3, [r3, #0]
 810098e:	3301      	adds	r3, #1
 8100990:	b29a      	uxth	r2, r3
 8100992:	4b23      	ldr	r3, [pc, #140]	; (8100a20 <main+0x1f4>)
 8100994:	801a      	strh	r2, [r3, #0]
			  //sprintf(str2,"UID:%x %x %x %x", cardstr[0], cardstr[1], cardstr[2], cardstr[3]);
			  UID[0] = cardstr[0];
 8100996:	4b1f      	ldr	r3, [pc, #124]	; (8100a14 <main+0x1e8>)
 8100998:	781a      	ldrb	r2, [r3, #0]
 810099a:	4b22      	ldr	r3, [pc, #136]	; (8100a24 <main+0x1f8>)
 810099c:	701a      	strb	r2, [r3, #0]
			  UID[1] = cardstr[1];
 810099e:	4b1d      	ldr	r3, [pc, #116]	; (8100a14 <main+0x1e8>)
 81009a0:	785a      	ldrb	r2, [r3, #1]
 81009a2:	4b20      	ldr	r3, [pc, #128]	; (8100a24 <main+0x1f8>)
 81009a4:	705a      	strb	r2, [r3, #1]
			  UID[2] = cardstr[2];
 81009a6:	4b1b      	ldr	r3, [pc, #108]	; (8100a14 <main+0x1e8>)
 81009a8:	789a      	ldrb	r2, [r3, #2]
 81009aa:	4b1e      	ldr	r3, [pc, #120]	; (8100a24 <main+0x1f8>)
 81009ac:	709a      	strb	r2, [r3, #2]
			  UID[3] = cardstr[3];
 81009ae:	4b19      	ldr	r3, [pc, #100]	; (8100a14 <main+0x1e8>)
 81009b0:	78da      	ldrb	r2, [r3, #3]
 81009b2:	4b1c      	ldr	r3, [pc, #112]	; (8100a24 <main+0x1f8>)
 81009b4:	70da      	strb	r2, [r3, #3]
			  UID[4] = cardstr[4];
 81009b6:	4b17      	ldr	r3, [pc, #92]	; (8100a14 <main+0x1e8>)
 81009b8:	791a      	ldrb	r2, [r3, #4]
 81009ba:	4b1a      	ldr	r3, [pc, #104]	; (8100a24 <main+0x1f8>)
 81009bc:	711a      	strb	r2, [r3, #4]
 81009be:	e004      	b.n	81009ca <main+0x19e>
		  }else{
			  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 81009c0:	2200      	movs	r2, #0
 81009c2:	2101      	movs	r1, #1
 81009c4:	4815      	ldr	r0, [pc, #84]	; (8100a1c <main+0x1f0>)
 81009c6:	f000 ff8b 	bl	81018e0 <HAL_GPIO_WritePin>
		  }

	  } //// timestamp_two loop

	  if(flag_one == 3){
 81009ca:	4b10      	ldr	r3, [pc, #64]	; (8100a0c <main+0x1e0>)
 81009cc:	781b      	ldrb	r3, [r3, #0]
 81009ce:	2b03      	cmp	r3, #3
 81009d0:	f47f af7b 	bne.w	81008ca <main+0x9e>
		  MFRC522_SelfTest();
 81009d4:	f7ff fee2 	bl	810079c <MFRC522_SelfTest>
		  flag_one = 0;
 81009d8:	4b0c      	ldr	r3, [pc, #48]	; (8100a0c <main+0x1e0>)
 81009da:	2200      	movs	r2, #0
 81009dc:	701a      	strb	r2, [r3, #0]
	  if(HAL_GetTick() - timestamp_one >= 500){
 81009de:	e774      	b.n	81008ca <main+0x9e>
 81009e0:	58024400 	.word	0x58024400
 81009e4:	e000ed00 	.word	0xe000ed00
 81009e8:	58026400 	.word	0x58026400
 81009ec:	100000d8 	.word	0x100000d8
 81009f0:	1000008c 	.word	0x1000008c
 81009f4:	100001f8 	.word	0x100001f8
 81009f8:	100001d8 	.word	0x100001d8
 81009fc:	58021000 	.word	0x58021000
 8100a00:	100001e0 	.word	0x100001e0
 8100a04:	100001f4 	.word	0x100001f4
 8100a08:	100001dc 	.word	0x100001dc
 8100a0c:	100001f9 	.word	0x100001f9
 8100a10:	100001fc 	.word	0x100001fc
 8100a14:	1000020c 	.word	0x1000020c
 8100a18:	10000209 	.word	0x10000209
 8100a1c:	58020400 	.word	0x58020400
 8100a20:	1000021e 	.word	0x1000021e
 8100a24:	10000204 	.word	0x10000204

08100a28 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8100a28:	b580      	push	{r7, lr}
 8100a2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8100a2c:	4b1b      	ldr	r3, [pc, #108]	; (8100a9c <MX_I2C2_Init+0x74>)
 8100a2e:	4a1c      	ldr	r2, [pc, #112]	; (8100aa0 <MX_I2C2_Init+0x78>)
 8100a30:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 8100a32:	4b1a      	ldr	r3, [pc, #104]	; (8100a9c <MX_I2C2_Init+0x74>)
 8100a34:	4a1b      	ldr	r2, [pc, #108]	; (8100aa4 <MX_I2C2_Init+0x7c>)
 8100a36:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8100a38:	4b18      	ldr	r3, [pc, #96]	; (8100a9c <MX_I2C2_Init+0x74>)
 8100a3a:	2200      	movs	r2, #0
 8100a3c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8100a3e:	4b17      	ldr	r3, [pc, #92]	; (8100a9c <MX_I2C2_Init+0x74>)
 8100a40:	2201      	movs	r2, #1
 8100a42:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8100a44:	4b15      	ldr	r3, [pc, #84]	; (8100a9c <MX_I2C2_Init+0x74>)
 8100a46:	2200      	movs	r2, #0
 8100a48:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8100a4a:	4b14      	ldr	r3, [pc, #80]	; (8100a9c <MX_I2C2_Init+0x74>)
 8100a4c:	2200      	movs	r2, #0
 8100a4e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8100a50:	4b12      	ldr	r3, [pc, #72]	; (8100a9c <MX_I2C2_Init+0x74>)
 8100a52:	2200      	movs	r2, #0
 8100a54:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8100a56:	4b11      	ldr	r3, [pc, #68]	; (8100a9c <MX_I2C2_Init+0x74>)
 8100a58:	2200      	movs	r2, #0
 8100a5a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8100a5c:	4b0f      	ldr	r3, [pc, #60]	; (8100a9c <MX_I2C2_Init+0x74>)
 8100a5e:	2200      	movs	r2, #0
 8100a60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8100a62:	480e      	ldr	r0, [pc, #56]	; (8100a9c <MX_I2C2_Init+0x74>)
 8100a64:	f000 ffd4 	bl	8101a10 <HAL_I2C_Init>
 8100a68:	4603      	mov	r3, r0
 8100a6a:	2b00      	cmp	r3, #0
 8100a6c:	d001      	beq.n	8100a72 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8100a6e:	f000 f9b5 	bl	8100ddc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8100a72:	2100      	movs	r1, #0
 8100a74:	4809      	ldr	r0, [pc, #36]	; (8100a9c <MX_I2C2_Init+0x74>)
 8100a76:	f001 fbc7 	bl	8102208 <HAL_I2CEx_ConfigAnalogFilter>
 8100a7a:	4603      	mov	r3, r0
 8100a7c:	2b00      	cmp	r3, #0
 8100a7e:	d001      	beq.n	8100a84 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8100a80:	f000 f9ac 	bl	8100ddc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8100a84:	2100      	movs	r1, #0
 8100a86:	4805      	ldr	r0, [pc, #20]	; (8100a9c <MX_I2C2_Init+0x74>)
 8100a88:	f001 fc09 	bl	810229e <HAL_I2CEx_ConfigDigitalFilter>
 8100a8c:	4603      	mov	r3, r0
 8100a8e:	2b00      	cmp	r3, #0
 8100a90:	d001      	beq.n	8100a96 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8100a92:	f000 f9a3 	bl	8100ddc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8100a96:	bf00      	nop
 8100a98:	bd80      	pop	{r7, pc}
 8100a9a:	bf00      	nop
 8100a9c:	1000008c 	.word	0x1000008c
 8100aa0:	40005800 	.word	0x40005800
 8100aa4:	00b03fdb 	.word	0x00b03fdb

08100aa8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8100aa8:	b580      	push	{r7, lr}
 8100aaa:	b086      	sub	sp, #24
 8100aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8100aae:	1d3b      	adds	r3, r7, #4
 8100ab0:	2200      	movs	r2, #0
 8100ab2:	601a      	str	r2, [r3, #0]
 8100ab4:	605a      	str	r2, [r3, #4]
 8100ab6:	609a      	str	r2, [r3, #8]
 8100ab8:	60da      	str	r2, [r3, #12]
 8100aba:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8100abc:	2300      	movs	r3, #0
 8100abe:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8100ac0:	4b2a      	ldr	r3, [pc, #168]	; (8100b6c <MX_RTC_Init+0xc4>)
 8100ac2:	4a2b      	ldr	r2, [pc, #172]	; (8100b70 <MX_RTC_Init+0xc8>)
 8100ac4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8100ac6:	4b29      	ldr	r3, [pc, #164]	; (8100b6c <MX_RTC_Init+0xc4>)
 8100ac8:	2200      	movs	r2, #0
 8100aca:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8100acc:	4b27      	ldr	r3, [pc, #156]	; (8100b6c <MX_RTC_Init+0xc4>)
 8100ace:	227f      	movs	r2, #127	; 0x7f
 8100ad0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8100ad2:	4b26      	ldr	r3, [pc, #152]	; (8100b6c <MX_RTC_Init+0xc4>)
 8100ad4:	22ff      	movs	r2, #255	; 0xff
 8100ad6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8100ad8:	4b24      	ldr	r3, [pc, #144]	; (8100b6c <MX_RTC_Init+0xc4>)
 8100ada:	2200      	movs	r2, #0
 8100adc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8100ade:	4b23      	ldr	r3, [pc, #140]	; (8100b6c <MX_RTC_Init+0xc4>)
 8100ae0:	2200      	movs	r2, #0
 8100ae2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8100ae4:	4b21      	ldr	r3, [pc, #132]	; (8100b6c <MX_RTC_Init+0xc4>)
 8100ae6:	2200      	movs	r2, #0
 8100ae8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8100aea:	4b20      	ldr	r3, [pc, #128]	; (8100b6c <MX_RTC_Init+0xc4>)
 8100aec:	2200      	movs	r2, #0
 8100aee:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8100af0:	481e      	ldr	r0, [pc, #120]	; (8100b6c <MX_RTC_Init+0xc4>)
 8100af2:	f002 fecd 	bl	8103890 <HAL_RTC_Init>
 8100af6:	4603      	mov	r3, r0
 8100af8:	2b00      	cmp	r3, #0
 8100afa:	d001      	beq.n	8100b00 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8100afc:	f000 f96e 	bl	8100ddc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8100b00:	2300      	movs	r3, #0
 8100b02:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x30;
 8100b04:	2330      	movs	r3, #48	; 0x30
 8100b06:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8100b08:	2300      	movs	r3, #0
 8100b0a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8100b0c:	2300      	movs	r3, #0
 8100b0e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_SET;
 8100b10:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8100b14:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8100b16:	1d3b      	adds	r3, r7, #4
 8100b18:	2201      	movs	r2, #1
 8100b1a:	4619      	mov	r1, r3
 8100b1c:	4813      	ldr	r0, [pc, #76]	; (8100b6c <MX_RTC_Init+0xc4>)
 8100b1e:	f002 ff2f 	bl	8103980 <HAL_RTC_SetTime>
 8100b22:	4603      	mov	r3, r0
 8100b24:	2b00      	cmp	r3, #0
 8100b26:	d001      	beq.n	8100b2c <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8100b28:	f000 f958 	bl	8100ddc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8100b2c:	2306      	movs	r3, #6
 8100b2e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 8100b30:	2311      	movs	r3, #17
 8100b32:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x12;
 8100b34:	2312      	movs	r3, #18
 8100b36:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 8100b38:	2322      	movs	r3, #34	; 0x22
 8100b3a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8100b3c:	463b      	mov	r3, r7
 8100b3e:	2201      	movs	r2, #1
 8100b40:	4619      	mov	r1, r3
 8100b42:	480a      	ldr	r0, [pc, #40]	; (8100b6c <MX_RTC_Init+0xc4>)
 8100b44:	f003 f815 	bl	8103b72 <HAL_RTC_SetDate>
 8100b48:	4603      	mov	r3, r0
 8100b4a:	2b00      	cmp	r3, #0
 8100b4c:	d001      	beq.n	8100b52 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8100b4e:	f000 f945 	bl	8100ddc <Error_Handler>
  }

  /** Enable the reference Clock input
  */
  if (HAL_RTCEx_SetRefClock(&hrtc) != HAL_OK)
 8100b52:	4806      	ldr	r0, [pc, #24]	; (8100b6c <MX_RTC_Init+0xc4>)
 8100b54:	f003 f9b2 	bl	8103ebc <HAL_RTCEx_SetRefClock>
 8100b58:	4603      	mov	r3, r0
 8100b5a:	2b00      	cmp	r3, #0
 8100b5c:	d001      	beq.n	8100b62 <MX_RTC_Init+0xba>
  {
    Error_Handler();
 8100b5e:	f000 f93d 	bl	8100ddc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8100b62:	bf00      	nop
 8100b64:	3718      	adds	r7, #24
 8100b66:	46bd      	mov	sp, r7
 8100b68:	bd80      	pop	{r7, pc}
 8100b6a:	bf00      	nop
 8100b6c:	100000d8 	.word	0x100000d8
 8100b70:	58004000 	.word	0x58004000

08100b74 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8100b74:	b580      	push	{r7, lr}
 8100b76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8100b78:	4b27      	ldr	r3, [pc, #156]	; (8100c18 <MX_SPI4_Init+0xa4>)
 8100b7a:	4a28      	ldr	r2, [pc, #160]	; (8100c1c <MX_SPI4_Init+0xa8>)
 8100b7c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8100b7e:	4b26      	ldr	r3, [pc, #152]	; (8100c18 <MX_SPI4_Init+0xa4>)
 8100b80:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8100b84:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8100b86:	4b24      	ldr	r3, [pc, #144]	; (8100c18 <MX_SPI4_Init+0xa4>)
 8100b88:	2200      	movs	r2, #0
 8100b8a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8100b8c:	4b22      	ldr	r3, [pc, #136]	; (8100c18 <MX_SPI4_Init+0xa4>)
 8100b8e:	2207      	movs	r2, #7
 8100b90:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8100b92:	4b21      	ldr	r3, [pc, #132]	; (8100c18 <MX_SPI4_Init+0xa4>)
 8100b94:	2200      	movs	r2, #0
 8100b96:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8100b98:	4b1f      	ldr	r3, [pc, #124]	; (8100c18 <MX_SPI4_Init+0xa4>)
 8100b9a:	2200      	movs	r2, #0
 8100b9c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8100b9e:	4b1e      	ldr	r3, [pc, #120]	; (8100c18 <MX_SPI4_Init+0xa4>)
 8100ba0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8100ba4:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8100ba6:	4b1c      	ldr	r3, [pc, #112]	; (8100c18 <MX_SPI4_Init+0xa4>)
 8100ba8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8100bac:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8100bae:	4b1a      	ldr	r3, [pc, #104]	; (8100c18 <MX_SPI4_Init+0xa4>)
 8100bb0:	2200      	movs	r2, #0
 8100bb2:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8100bb4:	4b18      	ldr	r3, [pc, #96]	; (8100c18 <MX_SPI4_Init+0xa4>)
 8100bb6:	2200      	movs	r2, #0
 8100bb8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8100bba:	4b17      	ldr	r3, [pc, #92]	; (8100c18 <MX_SPI4_Init+0xa4>)
 8100bbc:	2200      	movs	r2, #0
 8100bbe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8100bc0:	4b15      	ldr	r3, [pc, #84]	; (8100c18 <MX_SPI4_Init+0xa4>)
 8100bc2:	2200      	movs	r2, #0
 8100bc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8100bc6:	4b14      	ldr	r3, [pc, #80]	; (8100c18 <MX_SPI4_Init+0xa4>)
 8100bc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8100bcc:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8100bce:	4b12      	ldr	r3, [pc, #72]	; (8100c18 <MX_SPI4_Init+0xa4>)
 8100bd0:	2200      	movs	r2, #0
 8100bd2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8100bd4:	4b10      	ldr	r3, [pc, #64]	; (8100c18 <MX_SPI4_Init+0xa4>)
 8100bd6:	2200      	movs	r2, #0
 8100bd8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100bda:	4b0f      	ldr	r3, [pc, #60]	; (8100c18 <MX_SPI4_Init+0xa4>)
 8100bdc:	2200      	movs	r2, #0
 8100bde:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100be0:	4b0d      	ldr	r3, [pc, #52]	; (8100c18 <MX_SPI4_Init+0xa4>)
 8100be2:	2200      	movs	r2, #0
 8100be4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8100be6:	4b0c      	ldr	r3, [pc, #48]	; (8100c18 <MX_SPI4_Init+0xa4>)
 8100be8:	2200      	movs	r2, #0
 8100bea:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8100bec:	4b0a      	ldr	r3, [pc, #40]	; (8100c18 <MX_SPI4_Init+0xa4>)
 8100bee:	2200      	movs	r2, #0
 8100bf0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8100bf2:	4b09      	ldr	r3, [pc, #36]	; (8100c18 <MX_SPI4_Init+0xa4>)
 8100bf4:	2200      	movs	r2, #0
 8100bf6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8100bf8:	4b07      	ldr	r3, [pc, #28]	; (8100c18 <MX_SPI4_Init+0xa4>)
 8100bfa:	2200      	movs	r2, #0
 8100bfc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8100bfe:	4b06      	ldr	r3, [pc, #24]	; (8100c18 <MX_SPI4_Init+0xa4>)
 8100c00:	2200      	movs	r2, #0
 8100c02:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8100c04:	4804      	ldr	r0, [pc, #16]	; (8100c18 <MX_SPI4_Init+0xa4>)
 8100c06:	f003 f99d 	bl	8103f44 <HAL_SPI_Init>
 8100c0a:	4603      	mov	r3, r0
 8100c0c:	2b00      	cmp	r3, #0
 8100c0e:	d001      	beq.n	8100c14 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8100c10:	f000 f8e4 	bl	8100ddc <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8100c14:	bf00      	nop
 8100c16:	bd80      	pop	{r7, pc}
 8100c18:	100000fc 	.word	0x100000fc
 8100c1c:	40013400 	.word	0x40013400

08100c20 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8100c20:	b580      	push	{r7, lr}
 8100c22:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8100c24:	4b10      	ldr	r3, [pc, #64]	; (8100c68 <MX_TIM17_Init+0x48>)
 8100c26:	4a11      	ldr	r2, [pc, #68]	; (8100c6c <MX_TIM17_Init+0x4c>)
 8100c28:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 479;
 8100c2a:	4b0f      	ldr	r3, [pc, #60]	; (8100c68 <MX_TIM17_Init+0x48>)
 8100c2c:	f240 12df 	movw	r2, #479	; 0x1df
 8100c30:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100c32:	4b0d      	ldr	r3, [pc, #52]	; (8100c68 <MX_TIM17_Init+0x48>)
 8100c34:	2200      	movs	r2, #0
 8100c36:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8100c38:	4b0b      	ldr	r3, [pc, #44]	; (8100c68 <MX_TIM17_Init+0x48>)
 8100c3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8100c3e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8100c40:	4b09      	ldr	r3, [pc, #36]	; (8100c68 <MX_TIM17_Init+0x48>)
 8100c42:	2200      	movs	r2, #0
 8100c44:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8100c46:	4b08      	ldr	r3, [pc, #32]	; (8100c68 <MX_TIM17_Init+0x48>)
 8100c48:	2200      	movs	r2, #0
 8100c4a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8100c4c:	4b06      	ldr	r3, [pc, #24]	; (8100c68 <MX_TIM17_Init+0x48>)
 8100c4e:	2200      	movs	r2, #0
 8100c50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8100c52:	4805      	ldr	r0, [pc, #20]	; (8100c68 <MX_TIM17_Init+0x48>)
 8100c54:	f004 f912 	bl	8104e7c <HAL_TIM_Base_Init>
 8100c58:	4603      	mov	r3, r0
 8100c5a:	2b00      	cmp	r3, #0
 8100c5c:	d001      	beq.n	8100c62 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8100c5e:	f000 f8bd 	bl	8100ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8100c62:	bf00      	nop
 8100c64:	bd80      	pop	{r7, pc}
 8100c66:	bf00      	nop
 8100c68:	10000184 	.word	0x10000184
 8100c6c:	40014800 	.word	0x40014800

08100c70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100c70:	b580      	push	{r7, lr}
 8100c72:	b088      	sub	sp, #32
 8100c74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100c76:	f107 030c 	add.w	r3, r7, #12
 8100c7a:	2200      	movs	r2, #0
 8100c7c:	601a      	str	r2, [r3, #0]
 8100c7e:	605a      	str	r2, [r3, #4]
 8100c80:	609a      	str	r2, [r3, #8]
 8100c82:	60da      	str	r2, [r3, #12]
 8100c84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8100c86:	4b39      	ldr	r3, [pc, #228]	; (8100d6c <MX_GPIO_Init+0xfc>)
 8100c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c8c:	4a37      	ldr	r2, [pc, #220]	; (8100d6c <MX_GPIO_Init+0xfc>)
 8100c8e:	f043 0310 	orr.w	r3, r3, #16
 8100c92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100c96:	4b35      	ldr	r3, [pc, #212]	; (8100d6c <MX_GPIO_Init+0xfc>)
 8100c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c9c:	f003 0310 	and.w	r3, r3, #16
 8100ca0:	60bb      	str	r3, [r7, #8]
 8100ca2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8100ca4:	4b31      	ldr	r3, [pc, #196]	; (8100d6c <MX_GPIO_Init+0xfc>)
 8100ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100caa:	4a30      	ldr	r2, [pc, #192]	; (8100d6c <MX_GPIO_Init+0xfc>)
 8100cac:	f043 0304 	orr.w	r3, r3, #4
 8100cb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100cb4:	4b2d      	ldr	r3, [pc, #180]	; (8100d6c <MX_GPIO_Init+0xfc>)
 8100cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100cba:	f003 0304 	and.w	r3, r3, #4
 8100cbe:	607b      	str	r3, [r7, #4]
 8100cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100cc2:	4b2a      	ldr	r3, [pc, #168]	; (8100d6c <MX_GPIO_Init+0xfc>)
 8100cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100cc8:	4a28      	ldr	r2, [pc, #160]	; (8100d6c <MX_GPIO_Init+0xfc>)
 8100cca:	f043 0302 	orr.w	r3, r3, #2
 8100cce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100cd2:	4b26      	ldr	r3, [pc, #152]	; (8100d6c <MX_GPIO_Init+0xfc>)
 8100cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100cd8:	f003 0302 	and.w	r3, r3, #2
 8100cdc:	603b      	str	r3, [r7, #0]
 8100cde:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RC522_Rst_Pin|RC522_SPI4_NSS_Pin, GPIO_PIN_SET);
 8100ce0:	2201      	movs	r2, #1
 8100ce2:	2118      	movs	r1, #24
 8100ce4:	4822      	ldr	r0, [pc, #136]	; (8100d70 <MX_GPIO_Init+0x100>)
 8100ce6:	f000 fdfb 	bl	81018e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8100cea:	2200      	movs	r2, #0
 8100cec:	2101      	movs	r1, #1
 8100cee:	4821      	ldr	r0, [pc, #132]	; (8100d74 <MX_GPIO_Init+0x104>)
 8100cf0:	f000 fdf6 	bl	81018e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8100cf4:	2200      	movs	r2, #0
 8100cf6:	2102      	movs	r1, #2
 8100cf8:	481d      	ldr	r0, [pc, #116]	; (8100d70 <MX_GPIO_Init+0x100>)
 8100cfa:	f000 fdf1 	bl	81018e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RC522_Rst_Pin RC522_SPI4_NSS_Pin LD2_Pin */
  GPIO_InitStruct.Pin = RC522_Rst_Pin|RC522_SPI4_NSS_Pin|LD2_Pin;
 8100cfe:	231a      	movs	r3, #26
 8100d00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100d02:	2301      	movs	r3, #1
 8100d04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100d06:	2300      	movs	r3, #0
 8100d08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100d0a:	2300      	movs	r3, #0
 8100d0c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8100d0e:	f107 030c 	add.w	r3, r7, #12
 8100d12:	4619      	mov	r1, r3
 8100d14:	4816      	ldr	r0, [pc, #88]	; (8100d70 <MX_GPIO_Init+0x100>)
 8100d16:	f000 fc33 	bl	8101580 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8100d1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8100d1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8100d20:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8100d24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100d26:	2300      	movs	r3, #0
 8100d28:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8100d2a:	f107 030c 	add.w	r3, r7, #12
 8100d2e:	4619      	mov	r1, r3
 8100d30:	4811      	ldr	r0, [pc, #68]	; (8100d78 <MX_GPIO_Init+0x108>)
 8100d32:	f000 fc25 	bl	8101580 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8100d36:	2301      	movs	r3, #1
 8100d38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100d3a:	2301      	movs	r3, #1
 8100d3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100d3e:	2300      	movs	r3, #0
 8100d40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100d42:	2300      	movs	r3, #0
 8100d44:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8100d46:	f107 030c 	add.w	r3, r7, #12
 8100d4a:	4619      	mov	r1, r3
 8100d4c:	4809      	ldr	r0, [pc, #36]	; (8100d74 <MX_GPIO_Init+0x104>)
 8100d4e:	f000 fc17 	bl	8101580 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8100d52:	2200      	movs	r2, #0
 8100d54:	2100      	movs	r1, #0
 8100d56:	2028      	movs	r0, #40	; 0x28
 8100d58:	f000 fbc9 	bl	81014ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8100d5c:	2028      	movs	r0, #40	; 0x28
 8100d5e:	f000 fbe0 	bl	8101522 <HAL_NVIC_EnableIRQ>

}
 8100d62:	bf00      	nop
 8100d64:	3720      	adds	r7, #32
 8100d66:	46bd      	mov	sp, r7
 8100d68:	bd80      	pop	{r7, pc}
 8100d6a:	bf00      	nop
 8100d6c:	58024400 	.word	0x58024400
 8100d70:	58021000 	.word	0x58021000
 8100d74:	58020400 	.word	0x58020400
 8100d78:	58020800 	.word	0x58020800

08100d7c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8100d7c:	b480      	push	{r7}
 8100d7e:	b083      	sub	sp, #12
 8100d80:	af00      	add	r7, sp, #0
 8100d82:	4603      	mov	r3, r0
 8100d84:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 8100d86:	88fb      	ldrh	r3, [r7, #6]
 8100d88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8100d8c:	d102      	bne.n	8100d94 <HAL_GPIO_EXTI_Callback+0x18>
		flag_one = 3;
 8100d8e:	4b04      	ldr	r3, [pc, #16]	; (8100da0 <HAL_GPIO_EXTI_Callback+0x24>)
 8100d90:	2203      	movs	r2, #3
 8100d92:	701a      	strb	r2, [r3, #0]
		//MFRC522_SelfTest();
		}
}
 8100d94:	bf00      	nop
 8100d96:	370c      	adds	r7, #12
 8100d98:	46bd      	mov	sp, r7
 8100d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d9e:	4770      	bx	lr
 8100da0:	100001f9 	.word	0x100001f9

08100da4 <HAL_TIM_PeriodElapsedCallback>:

uint64_t micros()
{return _micros + htim17.Instance->CNT;}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8100da4:	b4b0      	push	{r4, r5, r7}
 8100da6:	b083      	sub	sp, #12
 8100da8:	af00      	add	r7, sp, #0
 8100daa:	6078      	str	r0, [r7, #4]
 if(htim == &htim17)
 8100dac:	687b      	ldr	r3, [r7, #4]
 8100dae:	4a09      	ldr	r2, [pc, #36]	; (8100dd4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8100db0:	4293      	cmp	r3, r2
 8100db2:	d10a      	bne.n	8100dca <HAL_TIM_PeriodElapsedCallback+0x26>
 {_micros += 65535;}
 8100db4:	4b08      	ldr	r3, [pc, #32]	; (8100dd8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8100db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8100dba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8100dbe:	1854      	adds	r4, r2, r1
 8100dc0:	f143 0500 	adc.w	r5, r3, #0
 8100dc4:	4b04      	ldr	r3, [pc, #16]	; (8100dd8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8100dc6:	e9c3 4500 	strd	r4, r5, [r3]
}
 8100dca:	bf00      	nop
 8100dcc:	370c      	adds	r7, #12
 8100dce:	46bd      	mov	sp, r7
 8100dd0:	bcb0      	pop	{r4, r5, r7}
 8100dd2:	4770      	bx	lr
 8100dd4:	10000184 	.word	0x10000184
 8100dd8:	100001d0 	.word	0x100001d0

08100ddc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100ddc:	b480      	push	{r7}
 8100dde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100de0:	b672      	cpsid	i
}
 8100de2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8100de4:	e7fe      	b.n	8100de4 <Error_Handler+0x8>
	...

08100de8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100de8:	b480      	push	{r7}
 8100dea:	b083      	sub	sp, #12
 8100dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100dee:	4b0a      	ldr	r3, [pc, #40]	; (8100e18 <HAL_MspInit+0x30>)
 8100df0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100df4:	4a08      	ldr	r2, [pc, #32]	; (8100e18 <HAL_MspInit+0x30>)
 8100df6:	f043 0302 	orr.w	r3, r3, #2
 8100dfa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100dfe:	4b06      	ldr	r3, [pc, #24]	; (8100e18 <HAL_MspInit+0x30>)
 8100e00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100e04:	f003 0302 	and.w	r3, r3, #2
 8100e08:	607b      	str	r3, [r7, #4]
 8100e0a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100e0c:	bf00      	nop
 8100e0e:	370c      	adds	r7, #12
 8100e10:	46bd      	mov	sp, r7
 8100e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e16:	4770      	bx	lr
 8100e18:	58024400 	.word	0x58024400

08100e1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8100e1c:	b580      	push	{r7, lr}
 8100e1e:	b0b8      	sub	sp, #224	; 0xe0
 8100e20:	af00      	add	r7, sp, #0
 8100e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100e24:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8100e28:	2200      	movs	r2, #0
 8100e2a:	601a      	str	r2, [r3, #0]
 8100e2c:	605a      	str	r2, [r3, #4]
 8100e2e:	609a      	str	r2, [r3, #8]
 8100e30:	60da      	str	r2, [r3, #12]
 8100e32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100e34:	f107 0310 	add.w	r3, r7, #16
 8100e38:	22bc      	movs	r2, #188	; 0xbc
 8100e3a:	2100      	movs	r1, #0
 8100e3c:	4618      	mov	r0, r3
 8100e3e:	f004 fa97 	bl	8105370 <memset>
  if(hi2c->Instance==I2C2)
 8100e42:	687b      	ldr	r3, [r7, #4]
 8100e44:	681b      	ldr	r3, [r3, #0]
 8100e46:	4a25      	ldr	r2, [pc, #148]	; (8100edc <HAL_I2C_MspInit+0xc0>)
 8100e48:	4293      	cmp	r3, r2
 8100e4a:	d142      	bne.n	8100ed2 <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8100e4c:	2308      	movs	r3, #8
 8100e4e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8100e50:	2300      	movs	r3, #0
 8100e52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100e56:	f107 0310 	add.w	r3, r7, #16
 8100e5a:	4618      	mov	r0, r3
 8100e5c:	f001 fc6e 	bl	810273c <HAL_RCCEx_PeriphCLKConfig>
 8100e60:	4603      	mov	r3, r0
 8100e62:	2b00      	cmp	r3, #0
 8100e64:	d001      	beq.n	8100e6a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8100e66:	f7ff ffb9 	bl	8100ddc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8100e6a:	4b1d      	ldr	r3, [pc, #116]	; (8100ee0 <HAL_I2C_MspInit+0xc4>)
 8100e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e70:	4a1b      	ldr	r2, [pc, #108]	; (8100ee0 <HAL_I2C_MspInit+0xc4>)
 8100e72:	f043 0302 	orr.w	r3, r3, #2
 8100e76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100e7a:	4b19      	ldr	r3, [pc, #100]	; (8100ee0 <HAL_I2C_MspInit+0xc4>)
 8100e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e80:	f003 0302 	and.w	r3, r3, #2
 8100e84:	60fb      	str	r3, [r7, #12]
 8100e86:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8100e88:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8100e8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8100e90:	2312      	movs	r3, #18
 8100e92:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100e96:	2300      	movs	r3, #0
 8100e98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100e9c:	2300      	movs	r3, #0
 8100e9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8100ea2:	2304      	movs	r3, #4
 8100ea4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8100ea8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8100eac:	4619      	mov	r1, r3
 8100eae:	480d      	ldr	r0, [pc, #52]	; (8100ee4 <HAL_I2C_MspInit+0xc8>)
 8100eb0:	f000 fb66 	bl	8101580 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8100eb4:	4b0a      	ldr	r3, [pc, #40]	; (8100ee0 <HAL_I2C_MspInit+0xc4>)
 8100eb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100eba:	4a09      	ldr	r2, [pc, #36]	; (8100ee0 <HAL_I2C_MspInit+0xc4>)
 8100ebc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8100ec0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8100ec4:	4b06      	ldr	r3, [pc, #24]	; (8100ee0 <HAL_I2C_MspInit+0xc4>)
 8100ec6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8100ece:	60bb      	str	r3, [r7, #8]
 8100ed0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8100ed2:	bf00      	nop
 8100ed4:	37e0      	adds	r7, #224	; 0xe0
 8100ed6:	46bd      	mov	sp, r7
 8100ed8:	bd80      	pop	{r7, pc}
 8100eda:	bf00      	nop
 8100edc:	40005800 	.word	0x40005800
 8100ee0:	58024400 	.word	0x58024400
 8100ee4:	58020400 	.word	0x58020400

08100ee8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8100ee8:	b580      	push	{r7, lr}
 8100eea:	b0b8      	sub	sp, #224	; 0xe0
 8100eec:	af00      	add	r7, sp, #0
 8100eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100ef0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8100ef4:	2200      	movs	r2, #0
 8100ef6:	601a      	str	r2, [r3, #0]
 8100ef8:	605a      	str	r2, [r3, #4]
 8100efa:	609a      	str	r2, [r3, #8]
 8100efc:	60da      	str	r2, [r3, #12]
 8100efe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100f00:	f107 0310 	add.w	r3, r7, #16
 8100f04:	22bc      	movs	r2, #188	; 0xbc
 8100f06:	2100      	movs	r1, #0
 8100f08:	4618      	mov	r0, r3
 8100f0a:	f004 fa31 	bl	8105370 <memset>
  if(hrtc->Instance==RTC)
 8100f0e:	687b      	ldr	r3, [r7, #4]
 8100f10:	681b      	ldr	r3, [r3, #0]
 8100f12:	4a21      	ldr	r2, [pc, #132]	; (8100f98 <HAL_RTC_MspInit+0xb0>)
 8100f14:	4293      	cmp	r3, r2
 8100f16:	d13b      	bne.n	8100f90 <HAL_RTC_MspInit+0xa8>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8100f18:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8100f1c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8100f1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8100f22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100f26:	f107 0310 	add.w	r3, r7, #16
 8100f2a:	4618      	mov	r0, r3
 8100f2c:	f001 fc06 	bl	810273c <HAL_RCCEx_PeriphCLKConfig>
 8100f30:	4603      	mov	r3, r0
 8100f32:	2b00      	cmp	r3, #0
 8100f34:	d001      	beq.n	8100f3a <HAL_RTC_MspInit+0x52>
    {
      Error_Handler();
 8100f36:	f7ff ff51 	bl	8100ddc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8100f3a:	4b18      	ldr	r3, [pc, #96]	; (8100f9c <HAL_RTC_MspInit+0xb4>)
 8100f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8100f3e:	4a17      	ldr	r2, [pc, #92]	; (8100f9c <HAL_RTC_MspInit+0xb4>)
 8100f40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8100f44:	6713      	str	r3, [r2, #112]	; 0x70

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8100f46:	4b15      	ldr	r3, [pc, #84]	; (8100f9c <HAL_RTC_MspInit+0xb4>)
 8100f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f4c:	4a13      	ldr	r2, [pc, #76]	; (8100f9c <HAL_RTC_MspInit+0xb4>)
 8100f4e:	f043 0302 	orr.w	r3, r3, #2
 8100f52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100f56:	4b11      	ldr	r3, [pc, #68]	; (8100f9c <HAL_RTC_MspInit+0xb4>)
 8100f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f5c:	f003 0302 	and.w	r3, r3, #2
 8100f60:	60fb      	str	r3, [r7, #12]
 8100f62:	68fb      	ldr	r3, [r7, #12]
    /**RTC GPIO Configuration
    PB15     ------> RTC_REFIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8100f64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8100f68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100f6c:	2302      	movs	r3, #2
 8100f6e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100f72:	2300      	movs	r3, #0
 8100f74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100f78:	2300      	movs	r3, #0
 8100f7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF0_RTC_50Hz;
 8100f7e:	2300      	movs	r3, #0
 8100f80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8100f84:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8100f88:	4619      	mov	r1, r3
 8100f8a:	4805      	ldr	r0, [pc, #20]	; (8100fa0 <HAL_RTC_MspInit+0xb8>)
 8100f8c:	f000 faf8 	bl	8101580 <HAL_GPIO_Init>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8100f90:	bf00      	nop
 8100f92:	37e0      	adds	r7, #224	; 0xe0
 8100f94:	46bd      	mov	sp, r7
 8100f96:	bd80      	pop	{r7, pc}
 8100f98:	58004000 	.word	0x58004000
 8100f9c:	58024400 	.word	0x58024400
 8100fa0:	58020400 	.word	0x58020400

08100fa4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8100fa4:	b580      	push	{r7, lr}
 8100fa6:	b0b8      	sub	sp, #224	; 0xe0
 8100fa8:	af00      	add	r7, sp, #0
 8100faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100fac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8100fb0:	2200      	movs	r2, #0
 8100fb2:	601a      	str	r2, [r3, #0]
 8100fb4:	605a      	str	r2, [r3, #4]
 8100fb6:	609a      	str	r2, [r3, #8]
 8100fb8:	60da      	str	r2, [r3, #12]
 8100fba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100fbc:	f107 0310 	add.w	r3, r7, #16
 8100fc0:	22bc      	movs	r2, #188	; 0xbc
 8100fc2:	2100      	movs	r1, #0
 8100fc4:	4618      	mov	r0, r3
 8100fc6:	f004 f9d3 	bl	8105370 <memset>
  if(hspi->Instance==SPI4)
 8100fca:	687b      	ldr	r3, [r7, #4]
 8100fcc:	681b      	ldr	r3, [r3, #0]
 8100fce:	4a24      	ldr	r2, [pc, #144]	; (8101060 <HAL_SPI_MspInit+0xbc>)
 8100fd0:	4293      	cmp	r3, r2
 8100fd2:	d141      	bne.n	8101058 <HAL_SPI_MspInit+0xb4>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8100fd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8100fd8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8100fda:	2300      	movs	r3, #0
 8100fdc:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100fde:	f107 0310 	add.w	r3, r7, #16
 8100fe2:	4618      	mov	r0, r3
 8100fe4:	f001 fbaa 	bl	810273c <HAL_RCCEx_PeriphCLKConfig>
 8100fe8:	4603      	mov	r3, r0
 8100fea:	2b00      	cmp	r3, #0
 8100fec:	d001      	beq.n	8100ff2 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8100fee:	f7ff fef5 	bl	8100ddc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8100ff2:	4b1c      	ldr	r3, [pc, #112]	; (8101064 <HAL_SPI_MspInit+0xc0>)
 8100ff4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8100ff8:	4a1a      	ldr	r2, [pc, #104]	; (8101064 <HAL_SPI_MspInit+0xc0>)
 8100ffa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8100ffe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101002:	4b18      	ldr	r3, [pc, #96]	; (8101064 <HAL_SPI_MspInit+0xc0>)
 8101004:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101008:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 810100c:	60fb      	str	r3, [r7, #12]
 810100e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8101010:	4b14      	ldr	r3, [pc, #80]	; (8101064 <HAL_SPI_MspInit+0xc0>)
 8101012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101016:	4a13      	ldr	r2, [pc, #76]	; (8101064 <HAL_SPI_MspInit+0xc0>)
 8101018:	f043 0310 	orr.w	r3, r3, #16
 810101c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101020:	4b10      	ldr	r3, [pc, #64]	; (8101064 <HAL_SPI_MspInit+0xc0>)
 8101022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101026:	f003 0310 	and.w	r3, r3, #16
 810102a:	60bb      	str	r3, [r7, #8]
 810102c:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 810102e:	2364      	movs	r3, #100	; 0x64
 8101030:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101034:	2302      	movs	r3, #2
 8101036:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810103a:	2300      	movs	r3, #0
 810103c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101040:	2300      	movs	r3, #0
 8101042:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8101046:	2305      	movs	r3, #5
 8101048:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 810104c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101050:	4619      	mov	r1, r3
 8101052:	4805      	ldr	r0, [pc, #20]	; (8101068 <HAL_SPI_MspInit+0xc4>)
 8101054:	f000 fa94 	bl	8101580 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8101058:	bf00      	nop
 810105a:	37e0      	adds	r7, #224	; 0xe0
 810105c:	46bd      	mov	sp, r7
 810105e:	bd80      	pop	{r7, pc}
 8101060:	40013400 	.word	0x40013400
 8101064:	58024400 	.word	0x58024400
 8101068:	58021000 	.word	0x58021000

0810106c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 810106c:	b580      	push	{r7, lr}
 810106e:	b084      	sub	sp, #16
 8101070:	af00      	add	r7, sp, #0
 8101072:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8101074:	687b      	ldr	r3, [r7, #4]
 8101076:	681b      	ldr	r3, [r3, #0]
 8101078:	4a0e      	ldr	r2, [pc, #56]	; (81010b4 <HAL_TIM_Base_MspInit+0x48>)
 810107a:	4293      	cmp	r3, r2
 810107c:	d116      	bne.n	81010ac <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 810107e:	4b0e      	ldr	r3, [pc, #56]	; (81010b8 <HAL_TIM_Base_MspInit+0x4c>)
 8101080:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101084:	4a0c      	ldr	r2, [pc, #48]	; (81010b8 <HAL_TIM_Base_MspInit+0x4c>)
 8101086:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 810108a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 810108e:	4b0a      	ldr	r3, [pc, #40]	; (81010b8 <HAL_TIM_Base_MspInit+0x4c>)
 8101090:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101094:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8101098:	60fb      	str	r3, [r7, #12]
 810109a:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 810109c:	2200      	movs	r2, #0
 810109e:	2100      	movs	r1, #0
 81010a0:	2076      	movs	r0, #118	; 0x76
 81010a2:	f000 fa24 	bl	81014ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 81010a6:	2076      	movs	r0, #118	; 0x76
 81010a8:	f000 fa3b 	bl	8101522 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 81010ac:	bf00      	nop
 81010ae:	3710      	adds	r7, #16
 81010b0:	46bd      	mov	sp, r7
 81010b2:	bd80      	pop	{r7, pc}
 81010b4:	40014800 	.word	0x40014800
 81010b8:	58024400 	.word	0x58024400

081010bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81010bc:	b480      	push	{r7}
 81010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 81010c0:	e7fe      	b.n	81010c0 <NMI_Handler+0x4>

081010c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81010c2:	b480      	push	{r7}
 81010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81010c6:	e7fe      	b.n	81010c6 <HardFault_Handler+0x4>

081010c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81010c8:	b480      	push	{r7}
 81010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81010cc:	e7fe      	b.n	81010cc <MemManage_Handler+0x4>

081010ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81010ce:	b480      	push	{r7}
 81010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81010d2:	e7fe      	b.n	81010d2 <BusFault_Handler+0x4>

081010d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81010d4:	b480      	push	{r7}
 81010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81010d8:	e7fe      	b.n	81010d8 <UsageFault_Handler+0x4>

081010da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81010da:	b480      	push	{r7}
 81010dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81010de:	bf00      	nop
 81010e0:	46bd      	mov	sp, r7
 81010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010e6:	4770      	bx	lr

081010e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81010e8:	b480      	push	{r7}
 81010ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81010ec:	bf00      	nop
 81010ee:	46bd      	mov	sp, r7
 81010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010f4:	4770      	bx	lr

081010f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81010f6:	b480      	push	{r7}
 81010f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81010fa:	bf00      	nop
 81010fc:	46bd      	mov	sp, r7
 81010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101102:	4770      	bx	lr

08101104 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101104:	b580      	push	{r7, lr}
 8101106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101108:	f000 f8d2 	bl	81012b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 810110c:	bf00      	nop
 810110e:	bd80      	pop	{r7, pc}

08101110 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8101110:	b580      	push	{r7, lr}
 8101112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8101114:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8101118:	f000 fc15 	bl	8101946 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 810111c:	bf00      	nop
 810111e:	bd80      	pop	{r7, pc}

08101120 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8101120:	b580      	push	{r7, lr}
 8101122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8101124:	4802      	ldr	r0, [pc, #8]	; (8101130 <TIM17_IRQHandler+0x10>)
 8101126:	f003 ff00 	bl	8104f2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 810112a:	bf00      	nop
 810112c:	bd80      	pop	{r7, pc}
 810112e:	bf00      	nop
 8101130:	10000184 	.word	0x10000184

08101134 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101134:	f8df d034 	ldr.w	sp, [pc, #52]	; 810116c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8101138:	f7ff f8ce 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 810113c:	480c      	ldr	r0, [pc, #48]	; (8101170 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 810113e:	490d      	ldr	r1, [pc, #52]	; (8101174 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101140:	4a0d      	ldr	r2, [pc, #52]	; (8101178 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101142:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101144:	e002      	b.n	810114c <LoopCopyDataInit>

08101146 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8101146:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101148:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810114a:	3304      	adds	r3, #4

0810114c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 810114c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 810114e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101150:	d3f9      	bcc.n	8101146 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101152:	4a0a      	ldr	r2, [pc, #40]	; (810117c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101154:	4c0a      	ldr	r4, [pc, #40]	; (8101180 <LoopFillZerobss+0x22>)
  movs r3, #0
 8101156:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101158:	e001      	b.n	810115e <LoopFillZerobss>

0810115a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810115a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 810115c:	3204      	adds	r2, #4

0810115e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810115e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101160:	d3fb      	bcc.n	810115a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101162:	f004 f8e1 	bl	8105328 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101166:	f7ff fb61 	bl	810082c <main>
  bx  lr
 810116a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 810116c:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101170:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101174:	10000010 	.word	0x10000010
  ldr r2, =_sidata
 8101178:	081053b0 	.word	0x081053b0
  ldr r2, =_sbss
 810117c:	10000010 	.word	0x10000010
  ldr r4, =_ebss
 8101180:	10000224 	.word	0x10000224

08101184 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101184:	e7fe      	b.n	8101184 <ADC3_IRQHandler>
	...

08101188 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101188:	b580      	push	{r7, lr}
 810118a:	b082      	sub	sp, #8
 810118c:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810118e:	4b28      	ldr	r3, [pc, #160]	; (8101230 <HAL_Init+0xa8>)
 8101190:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101194:	4a26      	ldr	r2, [pc, #152]	; (8101230 <HAL_Init+0xa8>)
 8101196:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 810119a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810119e:	4b24      	ldr	r3, [pc, #144]	; (8101230 <HAL_Init+0xa8>)
 81011a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81011a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81011a8:	603b      	str	r3, [r7, #0]
 81011aa:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81011ac:	4b21      	ldr	r3, [pc, #132]	; (8101234 <HAL_Init+0xac>)
 81011ae:	681b      	ldr	r3, [r3, #0]
 81011b0:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 81011b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81011b8:	4a1e      	ldr	r2, [pc, #120]	; (8101234 <HAL_Init+0xac>)
 81011ba:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 81011be:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81011c0:	4b1c      	ldr	r3, [pc, #112]	; (8101234 <HAL_Init+0xac>)
 81011c2:	681b      	ldr	r3, [r3, #0]
 81011c4:	4a1b      	ldr	r2, [pc, #108]	; (8101234 <HAL_Init+0xac>)
 81011c6:	f043 0301 	orr.w	r3, r3, #1
 81011ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81011cc:	2003      	movs	r0, #3
 81011ce:	f000 f983 	bl	81014d8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81011d2:	f001 f939 	bl	8102448 <HAL_RCC_GetSysClockFreq>
 81011d6:	4602      	mov	r2, r0
 81011d8:	4b15      	ldr	r3, [pc, #84]	; (8101230 <HAL_Init+0xa8>)
 81011da:	699b      	ldr	r3, [r3, #24]
 81011dc:	0a1b      	lsrs	r3, r3, #8
 81011de:	f003 030f 	and.w	r3, r3, #15
 81011e2:	4915      	ldr	r1, [pc, #84]	; (8101238 <HAL_Init+0xb0>)
 81011e4:	5ccb      	ldrb	r3, [r1, r3]
 81011e6:	f003 031f 	and.w	r3, r3, #31
 81011ea:	fa22 f303 	lsr.w	r3, r2, r3
 81011ee:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81011f0:	4b0f      	ldr	r3, [pc, #60]	; (8101230 <HAL_Init+0xa8>)
 81011f2:	699b      	ldr	r3, [r3, #24]
 81011f4:	f003 030f 	and.w	r3, r3, #15
 81011f8:	4a0f      	ldr	r2, [pc, #60]	; (8101238 <HAL_Init+0xb0>)
 81011fa:	5cd3      	ldrb	r3, [r2, r3]
 81011fc:	f003 031f 	and.w	r3, r3, #31
 8101200:	687a      	ldr	r2, [r7, #4]
 8101202:	fa22 f303 	lsr.w	r3, r2, r3
 8101206:	4a0d      	ldr	r2, [pc, #52]	; (810123c <HAL_Init+0xb4>)
 8101208:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810120a:	4b0c      	ldr	r3, [pc, #48]	; (810123c <HAL_Init+0xb4>)
 810120c:	681b      	ldr	r3, [r3, #0]
 810120e:	4a0c      	ldr	r2, [pc, #48]	; (8101240 <HAL_Init+0xb8>)
 8101210:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101212:	2000      	movs	r0, #0
 8101214:	f000 f816 	bl	8101244 <HAL_InitTick>
 8101218:	4603      	mov	r3, r0
 810121a:	2b00      	cmp	r3, #0
 810121c:	d001      	beq.n	8101222 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810121e:	2301      	movs	r3, #1
 8101220:	e002      	b.n	8101228 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101222:	f7ff fde1 	bl	8100de8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101226:	2300      	movs	r3, #0
}
 8101228:	4618      	mov	r0, r3
 810122a:	3708      	adds	r7, #8
 810122c:	46bd      	mov	sp, r7
 810122e:	bd80      	pop	{r7, pc}
 8101230:	58024400 	.word	0x58024400
 8101234:	40024400 	.word	0x40024400
 8101238:	08105398 	.word	0x08105398
 810123c:	10000004 	.word	0x10000004
 8101240:	10000000 	.word	0x10000000

08101244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101244:	b580      	push	{r7, lr}
 8101246:	b082      	sub	sp, #8
 8101248:	af00      	add	r7, sp, #0
 810124a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 810124c:	4b15      	ldr	r3, [pc, #84]	; (81012a4 <HAL_InitTick+0x60>)
 810124e:	781b      	ldrb	r3, [r3, #0]
 8101250:	2b00      	cmp	r3, #0
 8101252:	d101      	bne.n	8101258 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101254:	2301      	movs	r3, #1
 8101256:	e021      	b.n	810129c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8101258:	4b13      	ldr	r3, [pc, #76]	; (81012a8 <HAL_InitTick+0x64>)
 810125a:	681a      	ldr	r2, [r3, #0]
 810125c:	4b11      	ldr	r3, [pc, #68]	; (81012a4 <HAL_InitTick+0x60>)
 810125e:	781b      	ldrb	r3, [r3, #0]
 8101260:	4619      	mov	r1, r3
 8101262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101266:	fbb3 f3f1 	udiv	r3, r3, r1
 810126a:	fbb2 f3f3 	udiv	r3, r2, r3
 810126e:	4618      	mov	r0, r3
 8101270:	f000 f965 	bl	810153e <HAL_SYSTICK_Config>
 8101274:	4603      	mov	r3, r0
 8101276:	2b00      	cmp	r3, #0
 8101278:	d001      	beq.n	810127e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 810127a:	2301      	movs	r3, #1
 810127c:	e00e      	b.n	810129c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 810127e:	687b      	ldr	r3, [r7, #4]
 8101280:	2b0f      	cmp	r3, #15
 8101282:	d80a      	bhi.n	810129a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8101284:	2200      	movs	r2, #0
 8101286:	6879      	ldr	r1, [r7, #4]
 8101288:	f04f 30ff 	mov.w	r0, #4294967295
 810128c:	f000 f92f 	bl	81014ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8101290:	4a06      	ldr	r2, [pc, #24]	; (81012ac <HAL_InitTick+0x68>)
 8101292:	687b      	ldr	r3, [r7, #4]
 8101294:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8101296:	2300      	movs	r3, #0
 8101298:	e000      	b.n	810129c <HAL_InitTick+0x58>
    return HAL_ERROR;
 810129a:	2301      	movs	r3, #1
}
 810129c:	4618      	mov	r0, r3
 810129e:	3708      	adds	r7, #8
 81012a0:	46bd      	mov	sp, r7
 81012a2:	bd80      	pop	{r7, pc}
 81012a4:	1000000c 	.word	0x1000000c
 81012a8:	10000000 	.word	0x10000000
 81012ac:	10000008 	.word	0x10000008

081012b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81012b0:	b480      	push	{r7}
 81012b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81012b4:	4b06      	ldr	r3, [pc, #24]	; (81012d0 <HAL_IncTick+0x20>)
 81012b6:	781b      	ldrb	r3, [r3, #0]
 81012b8:	461a      	mov	r2, r3
 81012ba:	4b06      	ldr	r3, [pc, #24]	; (81012d4 <HAL_IncTick+0x24>)
 81012bc:	681b      	ldr	r3, [r3, #0]
 81012be:	4413      	add	r3, r2
 81012c0:	4a04      	ldr	r2, [pc, #16]	; (81012d4 <HAL_IncTick+0x24>)
 81012c2:	6013      	str	r3, [r2, #0]
}
 81012c4:	bf00      	nop
 81012c6:	46bd      	mov	sp, r7
 81012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012cc:	4770      	bx	lr
 81012ce:	bf00      	nop
 81012d0:	1000000c 	.word	0x1000000c
 81012d4:	10000220 	.word	0x10000220

081012d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81012d8:	b480      	push	{r7}
 81012da:	af00      	add	r7, sp, #0
  return uwTick;
 81012dc:	4b03      	ldr	r3, [pc, #12]	; (81012ec <HAL_GetTick+0x14>)
 81012de:	681b      	ldr	r3, [r3, #0]
}
 81012e0:	4618      	mov	r0, r3
 81012e2:	46bd      	mov	sp, r7
 81012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012e8:	4770      	bx	lr
 81012ea:	bf00      	nop
 81012ec:	10000220 	.word	0x10000220

081012f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 81012f0:	b580      	push	{r7, lr}
 81012f2:	b084      	sub	sp, #16
 81012f4:	af00      	add	r7, sp, #0
 81012f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 81012f8:	f7ff ffee 	bl	81012d8 <HAL_GetTick>
 81012fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 81012fe:	687b      	ldr	r3, [r7, #4]
 8101300:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8101302:	68fb      	ldr	r3, [r7, #12]
 8101304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101308:	d005      	beq.n	8101316 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 810130a:	4b0a      	ldr	r3, [pc, #40]	; (8101334 <HAL_Delay+0x44>)
 810130c:	781b      	ldrb	r3, [r3, #0]
 810130e:	461a      	mov	r2, r3
 8101310:	68fb      	ldr	r3, [r7, #12]
 8101312:	4413      	add	r3, r2
 8101314:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8101316:	bf00      	nop
 8101318:	f7ff ffde 	bl	81012d8 <HAL_GetTick>
 810131c:	4602      	mov	r2, r0
 810131e:	68bb      	ldr	r3, [r7, #8]
 8101320:	1ad3      	subs	r3, r2, r3
 8101322:	68fa      	ldr	r2, [r7, #12]
 8101324:	429a      	cmp	r2, r3
 8101326:	d8f7      	bhi.n	8101318 <HAL_Delay+0x28>
  {
  }
}
 8101328:	bf00      	nop
 810132a:	bf00      	nop
 810132c:	3710      	adds	r7, #16
 810132e:	46bd      	mov	sp, r7
 8101330:	bd80      	pop	{r7, pc}
 8101332:	bf00      	nop
 8101334:	1000000c 	.word	0x1000000c

08101338 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101338:	b480      	push	{r7}
 810133a:	b085      	sub	sp, #20
 810133c:	af00      	add	r7, sp, #0
 810133e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101340:	687b      	ldr	r3, [r7, #4]
 8101342:	f003 0307 	and.w	r3, r3, #7
 8101346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101348:	4b0c      	ldr	r3, [pc, #48]	; (810137c <__NVIC_SetPriorityGrouping+0x44>)
 810134a:	68db      	ldr	r3, [r3, #12]
 810134c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810134e:	68ba      	ldr	r2, [r7, #8]
 8101350:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8101354:	4013      	ands	r3, r2
 8101356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101358:	68fb      	ldr	r3, [r7, #12]
 810135a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 810135c:	68bb      	ldr	r3, [r7, #8]
 810135e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101360:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8101364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101368:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810136a:	4a04      	ldr	r2, [pc, #16]	; (810137c <__NVIC_SetPriorityGrouping+0x44>)
 810136c:	68bb      	ldr	r3, [r7, #8]
 810136e:	60d3      	str	r3, [r2, #12]
}
 8101370:	bf00      	nop
 8101372:	3714      	adds	r7, #20
 8101374:	46bd      	mov	sp, r7
 8101376:	f85d 7b04 	ldr.w	r7, [sp], #4
 810137a:	4770      	bx	lr
 810137c:	e000ed00 	.word	0xe000ed00

08101380 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101380:	b480      	push	{r7}
 8101382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101384:	4b04      	ldr	r3, [pc, #16]	; (8101398 <__NVIC_GetPriorityGrouping+0x18>)
 8101386:	68db      	ldr	r3, [r3, #12]
 8101388:	0a1b      	lsrs	r3, r3, #8
 810138a:	f003 0307 	and.w	r3, r3, #7
}
 810138e:	4618      	mov	r0, r3
 8101390:	46bd      	mov	sp, r7
 8101392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101396:	4770      	bx	lr
 8101398:	e000ed00 	.word	0xe000ed00

0810139c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810139c:	b480      	push	{r7}
 810139e:	b083      	sub	sp, #12
 81013a0:	af00      	add	r7, sp, #0
 81013a2:	4603      	mov	r3, r0
 81013a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81013a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81013aa:	2b00      	cmp	r3, #0
 81013ac:	db0b      	blt.n	81013c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81013ae:	88fb      	ldrh	r3, [r7, #6]
 81013b0:	f003 021f 	and.w	r2, r3, #31
 81013b4:	4907      	ldr	r1, [pc, #28]	; (81013d4 <__NVIC_EnableIRQ+0x38>)
 81013b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81013ba:	095b      	lsrs	r3, r3, #5
 81013bc:	2001      	movs	r0, #1
 81013be:	fa00 f202 	lsl.w	r2, r0, r2
 81013c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81013c6:	bf00      	nop
 81013c8:	370c      	adds	r7, #12
 81013ca:	46bd      	mov	sp, r7
 81013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013d0:	4770      	bx	lr
 81013d2:	bf00      	nop
 81013d4:	e000e100 	.word	0xe000e100

081013d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81013d8:	b480      	push	{r7}
 81013da:	b083      	sub	sp, #12
 81013dc:	af00      	add	r7, sp, #0
 81013de:	4603      	mov	r3, r0
 81013e0:	6039      	str	r1, [r7, #0]
 81013e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81013e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81013e8:	2b00      	cmp	r3, #0
 81013ea:	db0a      	blt.n	8101402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81013ec:	683b      	ldr	r3, [r7, #0]
 81013ee:	b2da      	uxtb	r2, r3
 81013f0:	490c      	ldr	r1, [pc, #48]	; (8101424 <__NVIC_SetPriority+0x4c>)
 81013f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81013f6:	0112      	lsls	r2, r2, #4
 81013f8:	b2d2      	uxtb	r2, r2
 81013fa:	440b      	add	r3, r1
 81013fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101400:	e00a      	b.n	8101418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101402:	683b      	ldr	r3, [r7, #0]
 8101404:	b2da      	uxtb	r2, r3
 8101406:	4908      	ldr	r1, [pc, #32]	; (8101428 <__NVIC_SetPriority+0x50>)
 8101408:	88fb      	ldrh	r3, [r7, #6]
 810140a:	f003 030f 	and.w	r3, r3, #15
 810140e:	3b04      	subs	r3, #4
 8101410:	0112      	lsls	r2, r2, #4
 8101412:	b2d2      	uxtb	r2, r2
 8101414:	440b      	add	r3, r1
 8101416:	761a      	strb	r2, [r3, #24]
}
 8101418:	bf00      	nop
 810141a:	370c      	adds	r7, #12
 810141c:	46bd      	mov	sp, r7
 810141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101422:	4770      	bx	lr
 8101424:	e000e100 	.word	0xe000e100
 8101428:	e000ed00 	.word	0xe000ed00

0810142c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810142c:	b480      	push	{r7}
 810142e:	b089      	sub	sp, #36	; 0x24
 8101430:	af00      	add	r7, sp, #0
 8101432:	60f8      	str	r0, [r7, #12]
 8101434:	60b9      	str	r1, [r7, #8]
 8101436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101438:	68fb      	ldr	r3, [r7, #12]
 810143a:	f003 0307 	and.w	r3, r3, #7
 810143e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101440:	69fb      	ldr	r3, [r7, #28]
 8101442:	f1c3 0307 	rsb	r3, r3, #7
 8101446:	2b04      	cmp	r3, #4
 8101448:	bf28      	it	cs
 810144a:	2304      	movcs	r3, #4
 810144c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810144e:	69fb      	ldr	r3, [r7, #28]
 8101450:	3304      	adds	r3, #4
 8101452:	2b06      	cmp	r3, #6
 8101454:	d902      	bls.n	810145c <NVIC_EncodePriority+0x30>
 8101456:	69fb      	ldr	r3, [r7, #28]
 8101458:	3b03      	subs	r3, #3
 810145a:	e000      	b.n	810145e <NVIC_EncodePriority+0x32>
 810145c:	2300      	movs	r3, #0
 810145e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101460:	f04f 32ff 	mov.w	r2, #4294967295
 8101464:	69bb      	ldr	r3, [r7, #24]
 8101466:	fa02 f303 	lsl.w	r3, r2, r3
 810146a:	43da      	mvns	r2, r3
 810146c:	68bb      	ldr	r3, [r7, #8]
 810146e:	401a      	ands	r2, r3
 8101470:	697b      	ldr	r3, [r7, #20]
 8101472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101474:	f04f 31ff 	mov.w	r1, #4294967295
 8101478:	697b      	ldr	r3, [r7, #20]
 810147a:	fa01 f303 	lsl.w	r3, r1, r3
 810147e:	43d9      	mvns	r1, r3
 8101480:	687b      	ldr	r3, [r7, #4]
 8101482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101484:	4313      	orrs	r3, r2
         );
}
 8101486:	4618      	mov	r0, r3
 8101488:	3724      	adds	r7, #36	; 0x24
 810148a:	46bd      	mov	sp, r7
 810148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101490:	4770      	bx	lr
	...

08101494 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8101494:	b580      	push	{r7, lr}
 8101496:	b082      	sub	sp, #8
 8101498:	af00      	add	r7, sp, #0
 810149a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 810149c:	687b      	ldr	r3, [r7, #4]
 810149e:	3b01      	subs	r3, #1
 81014a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81014a4:	d301      	bcc.n	81014aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 81014a6:	2301      	movs	r3, #1
 81014a8:	e00f      	b.n	81014ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81014aa:	4a0a      	ldr	r2, [pc, #40]	; (81014d4 <SysTick_Config+0x40>)
 81014ac:	687b      	ldr	r3, [r7, #4]
 81014ae:	3b01      	subs	r3, #1
 81014b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 81014b2:	210f      	movs	r1, #15
 81014b4:	f04f 30ff 	mov.w	r0, #4294967295
 81014b8:	f7ff ff8e 	bl	81013d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 81014bc:	4b05      	ldr	r3, [pc, #20]	; (81014d4 <SysTick_Config+0x40>)
 81014be:	2200      	movs	r2, #0
 81014c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 81014c2:	4b04      	ldr	r3, [pc, #16]	; (81014d4 <SysTick_Config+0x40>)
 81014c4:	2207      	movs	r2, #7
 81014c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 81014c8:	2300      	movs	r3, #0
}
 81014ca:	4618      	mov	r0, r3
 81014cc:	3708      	adds	r7, #8
 81014ce:	46bd      	mov	sp, r7
 81014d0:	bd80      	pop	{r7, pc}
 81014d2:	bf00      	nop
 81014d4:	e000e010 	.word	0xe000e010

081014d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81014d8:	b580      	push	{r7, lr}
 81014da:	b082      	sub	sp, #8
 81014dc:	af00      	add	r7, sp, #0
 81014de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81014e0:	6878      	ldr	r0, [r7, #4]
 81014e2:	f7ff ff29 	bl	8101338 <__NVIC_SetPriorityGrouping>
}
 81014e6:	bf00      	nop
 81014e8:	3708      	adds	r7, #8
 81014ea:	46bd      	mov	sp, r7
 81014ec:	bd80      	pop	{r7, pc}

081014ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81014ee:	b580      	push	{r7, lr}
 81014f0:	b086      	sub	sp, #24
 81014f2:	af00      	add	r7, sp, #0
 81014f4:	4603      	mov	r3, r0
 81014f6:	60b9      	str	r1, [r7, #8]
 81014f8:	607a      	str	r2, [r7, #4]
 81014fa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81014fc:	f7ff ff40 	bl	8101380 <__NVIC_GetPriorityGrouping>
 8101500:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8101502:	687a      	ldr	r2, [r7, #4]
 8101504:	68b9      	ldr	r1, [r7, #8]
 8101506:	6978      	ldr	r0, [r7, #20]
 8101508:	f7ff ff90 	bl	810142c <NVIC_EncodePriority>
 810150c:	4602      	mov	r2, r0
 810150e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8101512:	4611      	mov	r1, r2
 8101514:	4618      	mov	r0, r3
 8101516:	f7ff ff5f 	bl	81013d8 <__NVIC_SetPriority>
}
 810151a:	bf00      	nop
 810151c:	3718      	adds	r7, #24
 810151e:	46bd      	mov	sp, r7
 8101520:	bd80      	pop	{r7, pc}

08101522 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101522:	b580      	push	{r7, lr}
 8101524:	b082      	sub	sp, #8
 8101526:	af00      	add	r7, sp, #0
 8101528:	4603      	mov	r3, r0
 810152a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 810152c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101530:	4618      	mov	r0, r3
 8101532:	f7ff ff33 	bl	810139c <__NVIC_EnableIRQ>
}
 8101536:	bf00      	nop
 8101538:	3708      	adds	r7, #8
 810153a:	46bd      	mov	sp, r7
 810153c:	bd80      	pop	{r7, pc}

0810153e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 810153e:	b580      	push	{r7, lr}
 8101540:	b082      	sub	sp, #8
 8101542:	af00      	add	r7, sp, #0
 8101544:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8101546:	6878      	ldr	r0, [r7, #4]
 8101548:	f7ff ffa4 	bl	8101494 <SysTick_Config>
 810154c:	4603      	mov	r3, r0
}
 810154e:	4618      	mov	r0, r3
 8101550:	3708      	adds	r7, #8
 8101552:	46bd      	mov	sp, r7
 8101554:	bd80      	pop	{r7, pc}
	...

08101558 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101558:	b480      	push	{r7}
 810155a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 810155c:	4b07      	ldr	r3, [pc, #28]	; (810157c <HAL_GetCurrentCPUID+0x24>)
 810155e:	681b      	ldr	r3, [r3, #0]
 8101560:	091b      	lsrs	r3, r3, #4
 8101562:	f003 030f 	and.w	r3, r3, #15
 8101566:	2b07      	cmp	r3, #7
 8101568:	d101      	bne.n	810156e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810156a:	2303      	movs	r3, #3
 810156c:	e000      	b.n	8101570 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810156e:	2301      	movs	r3, #1
  }
}
 8101570:	4618      	mov	r0, r3
 8101572:	46bd      	mov	sp, r7
 8101574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101578:	4770      	bx	lr
 810157a:	bf00      	nop
 810157c:	e000ed00 	.word	0xe000ed00

08101580 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8101580:	b480      	push	{r7}
 8101582:	b089      	sub	sp, #36	; 0x24
 8101584:	af00      	add	r7, sp, #0
 8101586:	6078      	str	r0, [r7, #4]
 8101588:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810158a:	2300      	movs	r3, #0
 810158c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810158e:	4b89      	ldr	r3, [pc, #548]	; (81017b4 <HAL_GPIO_Init+0x234>)
 8101590:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101592:	e194      	b.n	81018be <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8101594:	683b      	ldr	r3, [r7, #0]
 8101596:	681a      	ldr	r2, [r3, #0]
 8101598:	2101      	movs	r1, #1
 810159a:	69fb      	ldr	r3, [r7, #28]
 810159c:	fa01 f303 	lsl.w	r3, r1, r3
 81015a0:	4013      	ands	r3, r2
 81015a2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81015a4:	693b      	ldr	r3, [r7, #16]
 81015a6:	2b00      	cmp	r3, #0
 81015a8:	f000 8186 	beq.w	81018b8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81015ac:	683b      	ldr	r3, [r7, #0]
 81015ae:	685b      	ldr	r3, [r3, #4]
 81015b0:	f003 0303 	and.w	r3, r3, #3
 81015b4:	2b01      	cmp	r3, #1
 81015b6:	d005      	beq.n	81015c4 <HAL_GPIO_Init+0x44>
 81015b8:	683b      	ldr	r3, [r7, #0]
 81015ba:	685b      	ldr	r3, [r3, #4]
 81015bc:	f003 0303 	and.w	r3, r3, #3
 81015c0:	2b02      	cmp	r3, #2
 81015c2:	d130      	bne.n	8101626 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81015c4:	687b      	ldr	r3, [r7, #4]
 81015c6:	689b      	ldr	r3, [r3, #8]
 81015c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81015ca:	69fb      	ldr	r3, [r7, #28]
 81015cc:	005b      	lsls	r3, r3, #1
 81015ce:	2203      	movs	r2, #3
 81015d0:	fa02 f303 	lsl.w	r3, r2, r3
 81015d4:	43db      	mvns	r3, r3
 81015d6:	69ba      	ldr	r2, [r7, #24]
 81015d8:	4013      	ands	r3, r2
 81015da:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81015dc:	683b      	ldr	r3, [r7, #0]
 81015de:	68da      	ldr	r2, [r3, #12]
 81015e0:	69fb      	ldr	r3, [r7, #28]
 81015e2:	005b      	lsls	r3, r3, #1
 81015e4:	fa02 f303 	lsl.w	r3, r2, r3
 81015e8:	69ba      	ldr	r2, [r7, #24]
 81015ea:	4313      	orrs	r3, r2
 81015ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81015ee:	687b      	ldr	r3, [r7, #4]
 81015f0:	69ba      	ldr	r2, [r7, #24]
 81015f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81015f4:	687b      	ldr	r3, [r7, #4]
 81015f6:	685b      	ldr	r3, [r3, #4]
 81015f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81015fa:	2201      	movs	r2, #1
 81015fc:	69fb      	ldr	r3, [r7, #28]
 81015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8101602:	43db      	mvns	r3, r3
 8101604:	69ba      	ldr	r2, [r7, #24]
 8101606:	4013      	ands	r3, r2
 8101608:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 810160a:	683b      	ldr	r3, [r7, #0]
 810160c:	685b      	ldr	r3, [r3, #4]
 810160e:	091b      	lsrs	r3, r3, #4
 8101610:	f003 0201 	and.w	r2, r3, #1
 8101614:	69fb      	ldr	r3, [r7, #28]
 8101616:	fa02 f303 	lsl.w	r3, r2, r3
 810161a:	69ba      	ldr	r2, [r7, #24]
 810161c:	4313      	orrs	r3, r2
 810161e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8101620:	687b      	ldr	r3, [r7, #4]
 8101622:	69ba      	ldr	r2, [r7, #24]
 8101624:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8101626:	683b      	ldr	r3, [r7, #0]
 8101628:	685b      	ldr	r3, [r3, #4]
 810162a:	f003 0303 	and.w	r3, r3, #3
 810162e:	2b03      	cmp	r3, #3
 8101630:	d017      	beq.n	8101662 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8101632:	687b      	ldr	r3, [r7, #4]
 8101634:	68db      	ldr	r3, [r3, #12]
 8101636:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8101638:	69fb      	ldr	r3, [r7, #28]
 810163a:	005b      	lsls	r3, r3, #1
 810163c:	2203      	movs	r2, #3
 810163e:	fa02 f303 	lsl.w	r3, r2, r3
 8101642:	43db      	mvns	r3, r3
 8101644:	69ba      	ldr	r2, [r7, #24]
 8101646:	4013      	ands	r3, r2
 8101648:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810164a:	683b      	ldr	r3, [r7, #0]
 810164c:	689a      	ldr	r2, [r3, #8]
 810164e:	69fb      	ldr	r3, [r7, #28]
 8101650:	005b      	lsls	r3, r3, #1
 8101652:	fa02 f303 	lsl.w	r3, r2, r3
 8101656:	69ba      	ldr	r2, [r7, #24]
 8101658:	4313      	orrs	r3, r2
 810165a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 810165c:	687b      	ldr	r3, [r7, #4]
 810165e:	69ba      	ldr	r2, [r7, #24]
 8101660:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8101662:	683b      	ldr	r3, [r7, #0]
 8101664:	685b      	ldr	r3, [r3, #4]
 8101666:	f003 0303 	and.w	r3, r3, #3
 810166a:	2b02      	cmp	r3, #2
 810166c:	d123      	bne.n	81016b6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810166e:	69fb      	ldr	r3, [r7, #28]
 8101670:	08da      	lsrs	r2, r3, #3
 8101672:	687b      	ldr	r3, [r7, #4]
 8101674:	3208      	adds	r2, #8
 8101676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810167a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 810167c:	69fb      	ldr	r3, [r7, #28]
 810167e:	f003 0307 	and.w	r3, r3, #7
 8101682:	009b      	lsls	r3, r3, #2
 8101684:	220f      	movs	r2, #15
 8101686:	fa02 f303 	lsl.w	r3, r2, r3
 810168a:	43db      	mvns	r3, r3
 810168c:	69ba      	ldr	r2, [r7, #24]
 810168e:	4013      	ands	r3, r2
 8101690:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8101692:	683b      	ldr	r3, [r7, #0]
 8101694:	691a      	ldr	r2, [r3, #16]
 8101696:	69fb      	ldr	r3, [r7, #28]
 8101698:	f003 0307 	and.w	r3, r3, #7
 810169c:	009b      	lsls	r3, r3, #2
 810169e:	fa02 f303 	lsl.w	r3, r2, r3
 81016a2:	69ba      	ldr	r2, [r7, #24]
 81016a4:	4313      	orrs	r3, r2
 81016a6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81016a8:	69fb      	ldr	r3, [r7, #28]
 81016aa:	08da      	lsrs	r2, r3, #3
 81016ac:	687b      	ldr	r3, [r7, #4]
 81016ae:	3208      	adds	r2, #8
 81016b0:	69b9      	ldr	r1, [r7, #24]
 81016b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81016b6:	687b      	ldr	r3, [r7, #4]
 81016b8:	681b      	ldr	r3, [r3, #0]
 81016ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81016bc:	69fb      	ldr	r3, [r7, #28]
 81016be:	005b      	lsls	r3, r3, #1
 81016c0:	2203      	movs	r2, #3
 81016c2:	fa02 f303 	lsl.w	r3, r2, r3
 81016c6:	43db      	mvns	r3, r3
 81016c8:	69ba      	ldr	r2, [r7, #24]
 81016ca:	4013      	ands	r3, r2
 81016cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81016ce:	683b      	ldr	r3, [r7, #0]
 81016d0:	685b      	ldr	r3, [r3, #4]
 81016d2:	f003 0203 	and.w	r2, r3, #3
 81016d6:	69fb      	ldr	r3, [r7, #28]
 81016d8:	005b      	lsls	r3, r3, #1
 81016da:	fa02 f303 	lsl.w	r3, r2, r3
 81016de:	69ba      	ldr	r2, [r7, #24]
 81016e0:	4313      	orrs	r3, r2
 81016e2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81016e4:	687b      	ldr	r3, [r7, #4]
 81016e6:	69ba      	ldr	r2, [r7, #24]
 81016e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81016ea:	683b      	ldr	r3, [r7, #0]
 81016ec:	685b      	ldr	r3, [r3, #4]
 81016ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81016f2:	2b00      	cmp	r3, #0
 81016f4:	f000 80e0 	beq.w	81018b8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81016f8:	4b2f      	ldr	r3, [pc, #188]	; (81017b8 <HAL_GPIO_Init+0x238>)
 81016fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81016fe:	4a2e      	ldr	r2, [pc, #184]	; (81017b8 <HAL_GPIO_Init+0x238>)
 8101700:	f043 0302 	orr.w	r3, r3, #2
 8101704:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101708:	4b2b      	ldr	r3, [pc, #172]	; (81017b8 <HAL_GPIO_Init+0x238>)
 810170a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810170e:	f003 0302 	and.w	r3, r3, #2
 8101712:	60fb      	str	r3, [r7, #12]
 8101714:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8101716:	4a29      	ldr	r2, [pc, #164]	; (81017bc <HAL_GPIO_Init+0x23c>)
 8101718:	69fb      	ldr	r3, [r7, #28]
 810171a:	089b      	lsrs	r3, r3, #2
 810171c:	3302      	adds	r3, #2
 810171e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8101722:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8101724:	69fb      	ldr	r3, [r7, #28]
 8101726:	f003 0303 	and.w	r3, r3, #3
 810172a:	009b      	lsls	r3, r3, #2
 810172c:	220f      	movs	r2, #15
 810172e:	fa02 f303 	lsl.w	r3, r2, r3
 8101732:	43db      	mvns	r3, r3
 8101734:	69ba      	ldr	r2, [r7, #24]
 8101736:	4013      	ands	r3, r2
 8101738:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 810173a:	687b      	ldr	r3, [r7, #4]
 810173c:	4a20      	ldr	r2, [pc, #128]	; (81017c0 <HAL_GPIO_Init+0x240>)
 810173e:	4293      	cmp	r3, r2
 8101740:	d052      	beq.n	81017e8 <HAL_GPIO_Init+0x268>
 8101742:	687b      	ldr	r3, [r7, #4]
 8101744:	4a1f      	ldr	r2, [pc, #124]	; (81017c4 <HAL_GPIO_Init+0x244>)
 8101746:	4293      	cmp	r3, r2
 8101748:	d031      	beq.n	81017ae <HAL_GPIO_Init+0x22e>
 810174a:	687b      	ldr	r3, [r7, #4]
 810174c:	4a1e      	ldr	r2, [pc, #120]	; (81017c8 <HAL_GPIO_Init+0x248>)
 810174e:	4293      	cmp	r3, r2
 8101750:	d02b      	beq.n	81017aa <HAL_GPIO_Init+0x22a>
 8101752:	687b      	ldr	r3, [r7, #4]
 8101754:	4a1d      	ldr	r2, [pc, #116]	; (81017cc <HAL_GPIO_Init+0x24c>)
 8101756:	4293      	cmp	r3, r2
 8101758:	d025      	beq.n	81017a6 <HAL_GPIO_Init+0x226>
 810175a:	687b      	ldr	r3, [r7, #4]
 810175c:	4a1c      	ldr	r2, [pc, #112]	; (81017d0 <HAL_GPIO_Init+0x250>)
 810175e:	4293      	cmp	r3, r2
 8101760:	d01f      	beq.n	81017a2 <HAL_GPIO_Init+0x222>
 8101762:	687b      	ldr	r3, [r7, #4]
 8101764:	4a1b      	ldr	r2, [pc, #108]	; (81017d4 <HAL_GPIO_Init+0x254>)
 8101766:	4293      	cmp	r3, r2
 8101768:	d019      	beq.n	810179e <HAL_GPIO_Init+0x21e>
 810176a:	687b      	ldr	r3, [r7, #4]
 810176c:	4a1a      	ldr	r2, [pc, #104]	; (81017d8 <HAL_GPIO_Init+0x258>)
 810176e:	4293      	cmp	r3, r2
 8101770:	d013      	beq.n	810179a <HAL_GPIO_Init+0x21a>
 8101772:	687b      	ldr	r3, [r7, #4]
 8101774:	4a19      	ldr	r2, [pc, #100]	; (81017dc <HAL_GPIO_Init+0x25c>)
 8101776:	4293      	cmp	r3, r2
 8101778:	d00d      	beq.n	8101796 <HAL_GPIO_Init+0x216>
 810177a:	687b      	ldr	r3, [r7, #4]
 810177c:	4a18      	ldr	r2, [pc, #96]	; (81017e0 <HAL_GPIO_Init+0x260>)
 810177e:	4293      	cmp	r3, r2
 8101780:	d007      	beq.n	8101792 <HAL_GPIO_Init+0x212>
 8101782:	687b      	ldr	r3, [r7, #4]
 8101784:	4a17      	ldr	r2, [pc, #92]	; (81017e4 <HAL_GPIO_Init+0x264>)
 8101786:	4293      	cmp	r3, r2
 8101788:	d101      	bne.n	810178e <HAL_GPIO_Init+0x20e>
 810178a:	2309      	movs	r3, #9
 810178c:	e02d      	b.n	81017ea <HAL_GPIO_Init+0x26a>
 810178e:	230a      	movs	r3, #10
 8101790:	e02b      	b.n	81017ea <HAL_GPIO_Init+0x26a>
 8101792:	2308      	movs	r3, #8
 8101794:	e029      	b.n	81017ea <HAL_GPIO_Init+0x26a>
 8101796:	2307      	movs	r3, #7
 8101798:	e027      	b.n	81017ea <HAL_GPIO_Init+0x26a>
 810179a:	2306      	movs	r3, #6
 810179c:	e025      	b.n	81017ea <HAL_GPIO_Init+0x26a>
 810179e:	2305      	movs	r3, #5
 81017a0:	e023      	b.n	81017ea <HAL_GPIO_Init+0x26a>
 81017a2:	2304      	movs	r3, #4
 81017a4:	e021      	b.n	81017ea <HAL_GPIO_Init+0x26a>
 81017a6:	2303      	movs	r3, #3
 81017a8:	e01f      	b.n	81017ea <HAL_GPIO_Init+0x26a>
 81017aa:	2302      	movs	r3, #2
 81017ac:	e01d      	b.n	81017ea <HAL_GPIO_Init+0x26a>
 81017ae:	2301      	movs	r3, #1
 81017b0:	e01b      	b.n	81017ea <HAL_GPIO_Init+0x26a>
 81017b2:	bf00      	nop
 81017b4:	580000c0 	.word	0x580000c0
 81017b8:	58024400 	.word	0x58024400
 81017bc:	58000400 	.word	0x58000400
 81017c0:	58020000 	.word	0x58020000
 81017c4:	58020400 	.word	0x58020400
 81017c8:	58020800 	.word	0x58020800
 81017cc:	58020c00 	.word	0x58020c00
 81017d0:	58021000 	.word	0x58021000
 81017d4:	58021400 	.word	0x58021400
 81017d8:	58021800 	.word	0x58021800
 81017dc:	58021c00 	.word	0x58021c00
 81017e0:	58022000 	.word	0x58022000
 81017e4:	58022400 	.word	0x58022400
 81017e8:	2300      	movs	r3, #0
 81017ea:	69fa      	ldr	r2, [r7, #28]
 81017ec:	f002 0203 	and.w	r2, r2, #3
 81017f0:	0092      	lsls	r2, r2, #2
 81017f2:	4093      	lsls	r3, r2
 81017f4:	69ba      	ldr	r2, [r7, #24]
 81017f6:	4313      	orrs	r3, r2
 81017f8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81017fa:	4938      	ldr	r1, [pc, #224]	; (81018dc <HAL_GPIO_Init+0x35c>)
 81017fc:	69fb      	ldr	r3, [r7, #28]
 81017fe:	089b      	lsrs	r3, r3, #2
 8101800:	3302      	adds	r3, #2
 8101802:	69ba      	ldr	r2, [r7, #24]
 8101804:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8101808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810180c:	681b      	ldr	r3, [r3, #0]
 810180e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101810:	693b      	ldr	r3, [r7, #16]
 8101812:	43db      	mvns	r3, r3
 8101814:	69ba      	ldr	r2, [r7, #24]
 8101816:	4013      	ands	r3, r2
 8101818:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 810181a:	683b      	ldr	r3, [r7, #0]
 810181c:	685b      	ldr	r3, [r3, #4]
 810181e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8101822:	2b00      	cmp	r3, #0
 8101824:	d003      	beq.n	810182e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8101826:	69ba      	ldr	r2, [r7, #24]
 8101828:	693b      	ldr	r3, [r7, #16]
 810182a:	4313      	orrs	r3, r2
 810182c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 810182e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101832:	69bb      	ldr	r3, [r7, #24]
 8101834:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8101836:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810183a:	685b      	ldr	r3, [r3, #4]
 810183c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810183e:	693b      	ldr	r3, [r7, #16]
 8101840:	43db      	mvns	r3, r3
 8101842:	69ba      	ldr	r2, [r7, #24]
 8101844:	4013      	ands	r3, r2
 8101846:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8101848:	683b      	ldr	r3, [r7, #0]
 810184a:	685b      	ldr	r3, [r3, #4]
 810184c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101850:	2b00      	cmp	r3, #0
 8101852:	d003      	beq.n	810185c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8101854:	69ba      	ldr	r2, [r7, #24]
 8101856:	693b      	ldr	r3, [r7, #16]
 8101858:	4313      	orrs	r3, r2
 810185a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 810185c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101860:	69bb      	ldr	r3, [r7, #24]
 8101862:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8101864:	697b      	ldr	r3, [r7, #20]
 8101866:	685b      	ldr	r3, [r3, #4]
 8101868:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810186a:	693b      	ldr	r3, [r7, #16]
 810186c:	43db      	mvns	r3, r3
 810186e:	69ba      	ldr	r2, [r7, #24]
 8101870:	4013      	ands	r3, r2
 8101872:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8101874:	683b      	ldr	r3, [r7, #0]
 8101876:	685b      	ldr	r3, [r3, #4]
 8101878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810187c:	2b00      	cmp	r3, #0
 810187e:	d003      	beq.n	8101888 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8101880:	69ba      	ldr	r2, [r7, #24]
 8101882:	693b      	ldr	r3, [r7, #16]
 8101884:	4313      	orrs	r3, r2
 8101886:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8101888:	697b      	ldr	r3, [r7, #20]
 810188a:	69ba      	ldr	r2, [r7, #24]
 810188c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810188e:	697b      	ldr	r3, [r7, #20]
 8101890:	681b      	ldr	r3, [r3, #0]
 8101892:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101894:	693b      	ldr	r3, [r7, #16]
 8101896:	43db      	mvns	r3, r3
 8101898:	69ba      	ldr	r2, [r7, #24]
 810189a:	4013      	ands	r3, r2
 810189c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810189e:	683b      	ldr	r3, [r7, #0]
 81018a0:	685b      	ldr	r3, [r3, #4]
 81018a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81018a6:	2b00      	cmp	r3, #0
 81018a8:	d003      	beq.n	81018b2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 81018aa:	69ba      	ldr	r2, [r7, #24]
 81018ac:	693b      	ldr	r3, [r7, #16]
 81018ae:	4313      	orrs	r3, r2
 81018b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81018b2:	697b      	ldr	r3, [r7, #20]
 81018b4:	69ba      	ldr	r2, [r7, #24]
 81018b6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 81018b8:	69fb      	ldr	r3, [r7, #28]
 81018ba:	3301      	adds	r3, #1
 81018bc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81018be:	683b      	ldr	r3, [r7, #0]
 81018c0:	681a      	ldr	r2, [r3, #0]
 81018c2:	69fb      	ldr	r3, [r7, #28]
 81018c4:	fa22 f303 	lsr.w	r3, r2, r3
 81018c8:	2b00      	cmp	r3, #0
 81018ca:	f47f ae63 	bne.w	8101594 <HAL_GPIO_Init+0x14>
  }
}
 81018ce:	bf00      	nop
 81018d0:	bf00      	nop
 81018d2:	3724      	adds	r7, #36	; 0x24
 81018d4:	46bd      	mov	sp, r7
 81018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018da:	4770      	bx	lr
 81018dc:	58000400 	.word	0x58000400

081018e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 81018e0:	b480      	push	{r7}
 81018e2:	b083      	sub	sp, #12
 81018e4:	af00      	add	r7, sp, #0
 81018e6:	6078      	str	r0, [r7, #4]
 81018e8:	460b      	mov	r3, r1
 81018ea:	807b      	strh	r3, [r7, #2]
 81018ec:	4613      	mov	r3, r2
 81018ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 81018f0:	787b      	ldrb	r3, [r7, #1]
 81018f2:	2b00      	cmp	r3, #0
 81018f4:	d003      	beq.n	81018fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 81018f6:	887a      	ldrh	r2, [r7, #2]
 81018f8:	687b      	ldr	r3, [r7, #4]
 81018fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 81018fc:	e003      	b.n	8101906 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 81018fe:	887b      	ldrh	r3, [r7, #2]
 8101900:	041a      	lsls	r2, r3, #16
 8101902:	687b      	ldr	r3, [r7, #4]
 8101904:	619a      	str	r2, [r3, #24]
}
 8101906:	bf00      	nop
 8101908:	370c      	adds	r7, #12
 810190a:	46bd      	mov	sp, r7
 810190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101910:	4770      	bx	lr

08101912 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8101912:	b480      	push	{r7}
 8101914:	b085      	sub	sp, #20
 8101916:	af00      	add	r7, sp, #0
 8101918:	6078      	str	r0, [r7, #4]
 810191a:	460b      	mov	r3, r1
 810191c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 810191e:	687b      	ldr	r3, [r7, #4]
 8101920:	695b      	ldr	r3, [r3, #20]
 8101922:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8101924:	887a      	ldrh	r2, [r7, #2]
 8101926:	68fb      	ldr	r3, [r7, #12]
 8101928:	4013      	ands	r3, r2
 810192a:	041a      	lsls	r2, r3, #16
 810192c:	68fb      	ldr	r3, [r7, #12]
 810192e:	43d9      	mvns	r1, r3
 8101930:	887b      	ldrh	r3, [r7, #2]
 8101932:	400b      	ands	r3, r1
 8101934:	431a      	orrs	r2, r3
 8101936:	687b      	ldr	r3, [r7, #4]
 8101938:	619a      	str	r2, [r3, #24]
}
 810193a:	bf00      	nop
 810193c:	3714      	adds	r7, #20
 810193e:	46bd      	mov	sp, r7
 8101940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101944:	4770      	bx	lr

08101946 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8101946:	b580      	push	{r7, lr}
 8101948:	b082      	sub	sp, #8
 810194a:	af00      	add	r7, sp, #0
 810194c:	4603      	mov	r3, r0
 810194e:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 8101950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101954:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8101958:	88fb      	ldrh	r3, [r7, #6]
 810195a:	4013      	ands	r3, r2
 810195c:	2b00      	cmp	r3, #0
 810195e:	d008      	beq.n	8101972 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 8101960:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101964:	88fb      	ldrh	r3, [r7, #6]
 8101966:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 810196a:	88fb      	ldrh	r3, [r7, #6]
 810196c:	4618      	mov	r0, r3
 810196e:	f7ff fa05 	bl	8100d7c <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 8101972:	bf00      	nop
 8101974:	3708      	adds	r7, #8
 8101976:	46bd      	mov	sp, r7
 8101978:	bd80      	pop	{r7, pc}
	...

0810197c <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
 810197c:	b480      	push	{r7}
 810197e:	b083      	sub	sp, #12
 8101980:	af00      	add	r7, sp, #0
 8101982:	6078      	str	r0, [r7, #4]
 8101984:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
 8101986:	490e      	ldr	r1, [pc, #56]	; (81019c0 <HAL_HSEM_Take+0x44>)
 8101988:	683b      	ldr	r3, [r7, #0]
 810198a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 810198e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8101992:	687a      	ldr	r2, [r7, #4]
 8101994:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
 8101998:	4a09      	ldr	r2, [pc, #36]	; (81019c0 <HAL_HSEM_Take+0x44>)
 810199a:	687b      	ldr	r3, [r7, #4]
 810199c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 81019a0:	683b      	ldr	r3, [r7, #0]
 81019a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 81019a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81019aa:	429a      	cmp	r2, r3
 81019ac:	d101      	bne.n	81019b2 <HAL_HSEM_Take+0x36>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
 81019ae:	2300      	movs	r3, #0
 81019b0:	e000      	b.n	81019b4 <HAL_HSEM_Take+0x38>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
 81019b2:	2301      	movs	r3, #1
}
 81019b4:	4618      	mov	r0, r3
 81019b6:	370c      	adds	r7, #12
 81019b8:	46bd      	mov	sp, r7
 81019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019be:	4770      	bx	lr
 81019c0:	58026400 	.word	0x58026400

081019c4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 81019c4:	b480      	push	{r7}
 81019c6:	b083      	sub	sp, #12
 81019c8:	af00      	add	r7, sp, #0
 81019ca:	6078      	str	r0, [r7, #4]
 81019cc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 81019ce:	4906      	ldr	r1, [pc, #24]	; (81019e8 <HAL_HSEM_Release+0x24>)
 81019d0:	683b      	ldr	r3, [r7, #0]
 81019d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81019d6:	687b      	ldr	r3, [r7, #4]
 81019d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 81019dc:	bf00      	nop
 81019de:	370c      	adds	r7, #12
 81019e0:	46bd      	mov	sp, r7
 81019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019e6:	4770      	bx	lr
 81019e8:	58026400 	.word	0x58026400

081019ec <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81019ec:	b480      	push	{r7}
 81019ee:	b083      	sub	sp, #12
 81019f0:	af00      	add	r7, sp, #0
 81019f2:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81019f4:	4b05      	ldr	r3, [pc, #20]	; (8101a0c <HAL_HSEM_ActivateNotification+0x20>)
 81019f6:	681a      	ldr	r2, [r3, #0]
 81019f8:	4904      	ldr	r1, [pc, #16]	; (8101a0c <HAL_HSEM_ActivateNotification+0x20>)
 81019fa:	687b      	ldr	r3, [r7, #4]
 81019fc:	4313      	orrs	r3, r2
 81019fe:	600b      	str	r3, [r1, #0]
#endif
}
 8101a00:	bf00      	nop
 8101a02:	370c      	adds	r7, #12
 8101a04:	46bd      	mov	sp, r7
 8101a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a0a:	4770      	bx	lr
 8101a0c:	58026510 	.word	0x58026510

08101a10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8101a10:	b580      	push	{r7, lr}
 8101a12:	b082      	sub	sp, #8
 8101a14:	af00      	add	r7, sp, #0
 8101a16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8101a18:	687b      	ldr	r3, [r7, #4]
 8101a1a:	2b00      	cmp	r3, #0
 8101a1c:	d101      	bne.n	8101a22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8101a1e:	2301      	movs	r3, #1
 8101a20:	e081      	b.n	8101b26 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8101a22:	687b      	ldr	r3, [r7, #4]
 8101a24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8101a28:	b2db      	uxtb	r3, r3
 8101a2a:	2b00      	cmp	r3, #0
 8101a2c:	d106      	bne.n	8101a3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8101a2e:	687b      	ldr	r3, [r7, #4]
 8101a30:	2200      	movs	r2, #0
 8101a32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8101a36:	6878      	ldr	r0, [r7, #4]
 8101a38:	f7ff f9f0 	bl	8100e1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8101a3c:	687b      	ldr	r3, [r7, #4]
 8101a3e:	2224      	movs	r2, #36	; 0x24
 8101a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8101a44:	687b      	ldr	r3, [r7, #4]
 8101a46:	681b      	ldr	r3, [r3, #0]
 8101a48:	681a      	ldr	r2, [r3, #0]
 8101a4a:	687b      	ldr	r3, [r7, #4]
 8101a4c:	681b      	ldr	r3, [r3, #0]
 8101a4e:	f022 0201 	bic.w	r2, r2, #1
 8101a52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8101a54:	687b      	ldr	r3, [r7, #4]
 8101a56:	685a      	ldr	r2, [r3, #4]
 8101a58:	687b      	ldr	r3, [r7, #4]
 8101a5a:	681b      	ldr	r3, [r3, #0]
 8101a5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8101a60:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8101a62:	687b      	ldr	r3, [r7, #4]
 8101a64:	681b      	ldr	r3, [r3, #0]
 8101a66:	689a      	ldr	r2, [r3, #8]
 8101a68:	687b      	ldr	r3, [r7, #4]
 8101a6a:	681b      	ldr	r3, [r3, #0]
 8101a6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8101a70:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8101a72:	687b      	ldr	r3, [r7, #4]
 8101a74:	68db      	ldr	r3, [r3, #12]
 8101a76:	2b01      	cmp	r3, #1
 8101a78:	d107      	bne.n	8101a8a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8101a7a:	687b      	ldr	r3, [r7, #4]
 8101a7c:	689a      	ldr	r2, [r3, #8]
 8101a7e:	687b      	ldr	r3, [r7, #4]
 8101a80:	681b      	ldr	r3, [r3, #0]
 8101a82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8101a86:	609a      	str	r2, [r3, #8]
 8101a88:	e006      	b.n	8101a98 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8101a8a:	687b      	ldr	r3, [r7, #4]
 8101a8c:	689a      	ldr	r2, [r3, #8]
 8101a8e:	687b      	ldr	r3, [r7, #4]
 8101a90:	681b      	ldr	r3, [r3, #0]
 8101a92:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8101a96:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8101a98:	687b      	ldr	r3, [r7, #4]
 8101a9a:	68db      	ldr	r3, [r3, #12]
 8101a9c:	2b02      	cmp	r3, #2
 8101a9e:	d104      	bne.n	8101aaa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8101aa0:	687b      	ldr	r3, [r7, #4]
 8101aa2:	681b      	ldr	r3, [r3, #0]
 8101aa4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8101aa8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8101aaa:	687b      	ldr	r3, [r7, #4]
 8101aac:	681b      	ldr	r3, [r3, #0]
 8101aae:	685b      	ldr	r3, [r3, #4]
 8101ab0:	687a      	ldr	r2, [r7, #4]
 8101ab2:	6812      	ldr	r2, [r2, #0]
 8101ab4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8101ab8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8101abc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8101abe:	687b      	ldr	r3, [r7, #4]
 8101ac0:	681b      	ldr	r3, [r3, #0]
 8101ac2:	68da      	ldr	r2, [r3, #12]
 8101ac4:	687b      	ldr	r3, [r7, #4]
 8101ac6:	681b      	ldr	r3, [r3, #0]
 8101ac8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8101acc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8101ace:	687b      	ldr	r3, [r7, #4]
 8101ad0:	691a      	ldr	r2, [r3, #16]
 8101ad2:	687b      	ldr	r3, [r7, #4]
 8101ad4:	695b      	ldr	r3, [r3, #20]
 8101ad6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8101ada:	687b      	ldr	r3, [r7, #4]
 8101adc:	699b      	ldr	r3, [r3, #24]
 8101ade:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8101ae0:	687b      	ldr	r3, [r7, #4]
 8101ae2:	681b      	ldr	r3, [r3, #0]
 8101ae4:	430a      	orrs	r2, r1
 8101ae6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8101ae8:	687b      	ldr	r3, [r7, #4]
 8101aea:	69d9      	ldr	r1, [r3, #28]
 8101aec:	687b      	ldr	r3, [r7, #4]
 8101aee:	6a1a      	ldr	r2, [r3, #32]
 8101af0:	687b      	ldr	r3, [r7, #4]
 8101af2:	681b      	ldr	r3, [r3, #0]
 8101af4:	430a      	orrs	r2, r1
 8101af6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8101af8:	687b      	ldr	r3, [r7, #4]
 8101afa:	681b      	ldr	r3, [r3, #0]
 8101afc:	681a      	ldr	r2, [r3, #0]
 8101afe:	687b      	ldr	r3, [r7, #4]
 8101b00:	681b      	ldr	r3, [r3, #0]
 8101b02:	f042 0201 	orr.w	r2, r2, #1
 8101b06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8101b08:	687b      	ldr	r3, [r7, #4]
 8101b0a:	2200      	movs	r2, #0
 8101b0c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8101b0e:	687b      	ldr	r3, [r7, #4]
 8101b10:	2220      	movs	r2, #32
 8101b12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8101b16:	687b      	ldr	r3, [r7, #4]
 8101b18:	2200      	movs	r2, #0
 8101b1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8101b1c:	687b      	ldr	r3, [r7, #4]
 8101b1e:	2200      	movs	r2, #0
 8101b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8101b24:	2300      	movs	r3, #0
}
 8101b26:	4618      	mov	r0, r3
 8101b28:	3708      	adds	r7, #8
 8101b2a:	46bd      	mov	sp, r7
 8101b2c:	bd80      	pop	{r7, pc}
	...

08101b30 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8101b30:	b580      	push	{r7, lr}
 8101b32:	b088      	sub	sp, #32
 8101b34:	af02      	add	r7, sp, #8
 8101b36:	60f8      	str	r0, [r7, #12]
 8101b38:	4608      	mov	r0, r1
 8101b3a:	4611      	mov	r1, r2
 8101b3c:	461a      	mov	r2, r3
 8101b3e:	4603      	mov	r3, r0
 8101b40:	817b      	strh	r3, [r7, #10]
 8101b42:	460b      	mov	r3, r1
 8101b44:	813b      	strh	r3, [r7, #8]
 8101b46:	4613      	mov	r3, r2
 8101b48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8101b4a:	68fb      	ldr	r3, [r7, #12]
 8101b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8101b50:	b2db      	uxtb	r3, r3
 8101b52:	2b20      	cmp	r3, #32
 8101b54:	f040 80fd 	bne.w	8101d52 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8101b58:	6a3b      	ldr	r3, [r7, #32]
 8101b5a:	2b00      	cmp	r3, #0
 8101b5c:	d002      	beq.n	8101b64 <HAL_I2C_Mem_Read+0x34>
 8101b5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8101b60:	2b00      	cmp	r3, #0
 8101b62:	d105      	bne.n	8101b70 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8101b64:	68fb      	ldr	r3, [r7, #12]
 8101b66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8101b6a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8101b6c:	2301      	movs	r3, #1
 8101b6e:	e0f1      	b.n	8101d54 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8101b70:	68fb      	ldr	r3, [r7, #12]
 8101b72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8101b76:	2b01      	cmp	r3, #1
 8101b78:	d101      	bne.n	8101b7e <HAL_I2C_Mem_Read+0x4e>
 8101b7a:	2302      	movs	r3, #2
 8101b7c:	e0ea      	b.n	8101d54 <HAL_I2C_Mem_Read+0x224>
 8101b7e:	68fb      	ldr	r3, [r7, #12]
 8101b80:	2201      	movs	r2, #1
 8101b82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8101b86:	f7ff fba7 	bl	81012d8 <HAL_GetTick>
 8101b8a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8101b8c:	697b      	ldr	r3, [r7, #20]
 8101b8e:	9300      	str	r3, [sp, #0]
 8101b90:	2319      	movs	r3, #25
 8101b92:	2201      	movs	r2, #1
 8101b94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8101b98:	68f8      	ldr	r0, [r7, #12]
 8101b9a:	f000 f95b 	bl	8101e54 <I2C_WaitOnFlagUntilTimeout>
 8101b9e:	4603      	mov	r3, r0
 8101ba0:	2b00      	cmp	r3, #0
 8101ba2:	d001      	beq.n	8101ba8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8101ba4:	2301      	movs	r3, #1
 8101ba6:	e0d5      	b.n	8101d54 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8101ba8:	68fb      	ldr	r3, [r7, #12]
 8101baa:	2222      	movs	r2, #34	; 0x22
 8101bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8101bb0:	68fb      	ldr	r3, [r7, #12]
 8101bb2:	2240      	movs	r2, #64	; 0x40
 8101bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8101bb8:	68fb      	ldr	r3, [r7, #12]
 8101bba:	2200      	movs	r2, #0
 8101bbc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8101bbe:	68fb      	ldr	r3, [r7, #12]
 8101bc0:	6a3a      	ldr	r2, [r7, #32]
 8101bc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8101bc4:	68fb      	ldr	r3, [r7, #12]
 8101bc6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8101bc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8101bca:	68fb      	ldr	r3, [r7, #12]
 8101bcc:	2200      	movs	r2, #0
 8101bce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8101bd0:	88f8      	ldrh	r0, [r7, #6]
 8101bd2:	893a      	ldrh	r2, [r7, #8]
 8101bd4:	8979      	ldrh	r1, [r7, #10]
 8101bd6:	697b      	ldr	r3, [r7, #20]
 8101bd8:	9301      	str	r3, [sp, #4]
 8101bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101bdc:	9300      	str	r3, [sp, #0]
 8101bde:	4603      	mov	r3, r0
 8101be0:	68f8      	ldr	r0, [r7, #12]
 8101be2:	f000 f8bf 	bl	8101d64 <I2C_RequestMemoryRead>
 8101be6:	4603      	mov	r3, r0
 8101be8:	2b00      	cmp	r3, #0
 8101bea:	d005      	beq.n	8101bf8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8101bec:	68fb      	ldr	r3, [r7, #12]
 8101bee:	2200      	movs	r2, #0
 8101bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8101bf4:	2301      	movs	r3, #1
 8101bf6:	e0ad      	b.n	8101d54 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8101bf8:	68fb      	ldr	r3, [r7, #12]
 8101bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8101bfc:	b29b      	uxth	r3, r3
 8101bfe:	2bff      	cmp	r3, #255	; 0xff
 8101c00:	d90e      	bls.n	8101c20 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8101c02:	68fb      	ldr	r3, [r7, #12]
 8101c04:	22ff      	movs	r2, #255	; 0xff
 8101c06:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8101c08:	68fb      	ldr	r3, [r7, #12]
 8101c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8101c0c:	b2da      	uxtb	r2, r3
 8101c0e:	8979      	ldrh	r1, [r7, #10]
 8101c10:	4b52      	ldr	r3, [pc, #328]	; (8101d5c <HAL_I2C_Mem_Read+0x22c>)
 8101c12:	9300      	str	r3, [sp, #0]
 8101c14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8101c18:	68f8      	ldr	r0, [r7, #12]
 8101c1a:	f000 fac3 	bl	81021a4 <I2C_TransferConfig>
 8101c1e:	e00f      	b.n	8101c40 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8101c20:	68fb      	ldr	r3, [r7, #12]
 8101c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8101c24:	b29a      	uxth	r2, r3
 8101c26:	68fb      	ldr	r3, [r7, #12]
 8101c28:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8101c2a:	68fb      	ldr	r3, [r7, #12]
 8101c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8101c2e:	b2da      	uxtb	r2, r3
 8101c30:	8979      	ldrh	r1, [r7, #10]
 8101c32:	4b4a      	ldr	r3, [pc, #296]	; (8101d5c <HAL_I2C_Mem_Read+0x22c>)
 8101c34:	9300      	str	r3, [sp, #0]
 8101c36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8101c3a:	68f8      	ldr	r0, [r7, #12]
 8101c3c:	f000 fab2 	bl	81021a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8101c40:	697b      	ldr	r3, [r7, #20]
 8101c42:	9300      	str	r3, [sp, #0]
 8101c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101c46:	2200      	movs	r2, #0
 8101c48:	2104      	movs	r1, #4
 8101c4a:	68f8      	ldr	r0, [r7, #12]
 8101c4c:	f000 f902 	bl	8101e54 <I2C_WaitOnFlagUntilTimeout>
 8101c50:	4603      	mov	r3, r0
 8101c52:	2b00      	cmp	r3, #0
 8101c54:	d001      	beq.n	8101c5a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8101c56:	2301      	movs	r3, #1
 8101c58:	e07c      	b.n	8101d54 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8101c5a:	68fb      	ldr	r3, [r7, #12]
 8101c5c:	681b      	ldr	r3, [r3, #0]
 8101c5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8101c60:	68fb      	ldr	r3, [r7, #12]
 8101c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101c64:	b2d2      	uxtb	r2, r2
 8101c66:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8101c68:	68fb      	ldr	r3, [r7, #12]
 8101c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101c6c:	1c5a      	adds	r2, r3, #1
 8101c6e:	68fb      	ldr	r3, [r7, #12]
 8101c70:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8101c72:	68fb      	ldr	r3, [r7, #12]
 8101c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8101c76:	3b01      	subs	r3, #1
 8101c78:	b29a      	uxth	r2, r3
 8101c7a:	68fb      	ldr	r3, [r7, #12]
 8101c7c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8101c7e:	68fb      	ldr	r3, [r7, #12]
 8101c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8101c82:	b29b      	uxth	r3, r3
 8101c84:	3b01      	subs	r3, #1
 8101c86:	b29a      	uxth	r2, r3
 8101c88:	68fb      	ldr	r3, [r7, #12]
 8101c8a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8101c8c:	68fb      	ldr	r3, [r7, #12]
 8101c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8101c90:	b29b      	uxth	r3, r3
 8101c92:	2b00      	cmp	r3, #0
 8101c94:	d034      	beq.n	8101d00 <HAL_I2C_Mem_Read+0x1d0>
 8101c96:	68fb      	ldr	r3, [r7, #12]
 8101c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8101c9a:	2b00      	cmp	r3, #0
 8101c9c:	d130      	bne.n	8101d00 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8101c9e:	697b      	ldr	r3, [r7, #20]
 8101ca0:	9300      	str	r3, [sp, #0]
 8101ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101ca4:	2200      	movs	r2, #0
 8101ca6:	2180      	movs	r1, #128	; 0x80
 8101ca8:	68f8      	ldr	r0, [r7, #12]
 8101caa:	f000 f8d3 	bl	8101e54 <I2C_WaitOnFlagUntilTimeout>
 8101cae:	4603      	mov	r3, r0
 8101cb0:	2b00      	cmp	r3, #0
 8101cb2:	d001      	beq.n	8101cb8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8101cb4:	2301      	movs	r3, #1
 8101cb6:	e04d      	b.n	8101d54 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8101cb8:	68fb      	ldr	r3, [r7, #12]
 8101cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8101cbc:	b29b      	uxth	r3, r3
 8101cbe:	2bff      	cmp	r3, #255	; 0xff
 8101cc0:	d90e      	bls.n	8101ce0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8101cc2:	68fb      	ldr	r3, [r7, #12]
 8101cc4:	22ff      	movs	r2, #255	; 0xff
 8101cc6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8101cc8:	68fb      	ldr	r3, [r7, #12]
 8101cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8101ccc:	b2da      	uxtb	r2, r3
 8101cce:	8979      	ldrh	r1, [r7, #10]
 8101cd0:	2300      	movs	r3, #0
 8101cd2:	9300      	str	r3, [sp, #0]
 8101cd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8101cd8:	68f8      	ldr	r0, [r7, #12]
 8101cda:	f000 fa63 	bl	81021a4 <I2C_TransferConfig>
 8101cde:	e00f      	b.n	8101d00 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8101ce0:	68fb      	ldr	r3, [r7, #12]
 8101ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8101ce4:	b29a      	uxth	r2, r3
 8101ce6:	68fb      	ldr	r3, [r7, #12]
 8101ce8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8101cea:	68fb      	ldr	r3, [r7, #12]
 8101cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8101cee:	b2da      	uxtb	r2, r3
 8101cf0:	8979      	ldrh	r1, [r7, #10]
 8101cf2:	2300      	movs	r3, #0
 8101cf4:	9300      	str	r3, [sp, #0]
 8101cf6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8101cfa:	68f8      	ldr	r0, [r7, #12]
 8101cfc:	f000 fa52 	bl	81021a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8101d00:	68fb      	ldr	r3, [r7, #12]
 8101d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8101d04:	b29b      	uxth	r3, r3
 8101d06:	2b00      	cmp	r3, #0
 8101d08:	d19a      	bne.n	8101c40 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8101d0a:	697a      	ldr	r2, [r7, #20]
 8101d0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8101d0e:	68f8      	ldr	r0, [r7, #12]
 8101d10:	f000 f920 	bl	8101f54 <I2C_WaitOnSTOPFlagUntilTimeout>
 8101d14:	4603      	mov	r3, r0
 8101d16:	2b00      	cmp	r3, #0
 8101d18:	d001      	beq.n	8101d1e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8101d1a:	2301      	movs	r3, #1
 8101d1c:	e01a      	b.n	8101d54 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8101d1e:	68fb      	ldr	r3, [r7, #12]
 8101d20:	681b      	ldr	r3, [r3, #0]
 8101d22:	2220      	movs	r2, #32
 8101d24:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8101d26:	68fb      	ldr	r3, [r7, #12]
 8101d28:	681b      	ldr	r3, [r3, #0]
 8101d2a:	6859      	ldr	r1, [r3, #4]
 8101d2c:	68fb      	ldr	r3, [r7, #12]
 8101d2e:	681a      	ldr	r2, [r3, #0]
 8101d30:	4b0b      	ldr	r3, [pc, #44]	; (8101d60 <HAL_I2C_Mem_Read+0x230>)
 8101d32:	400b      	ands	r3, r1
 8101d34:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8101d36:	68fb      	ldr	r3, [r7, #12]
 8101d38:	2220      	movs	r2, #32
 8101d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8101d3e:	68fb      	ldr	r3, [r7, #12]
 8101d40:	2200      	movs	r2, #0
 8101d42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8101d46:	68fb      	ldr	r3, [r7, #12]
 8101d48:	2200      	movs	r2, #0
 8101d4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8101d4e:	2300      	movs	r3, #0
 8101d50:	e000      	b.n	8101d54 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8101d52:	2302      	movs	r3, #2
  }
}
 8101d54:	4618      	mov	r0, r3
 8101d56:	3718      	adds	r7, #24
 8101d58:	46bd      	mov	sp, r7
 8101d5a:	bd80      	pop	{r7, pc}
 8101d5c:	80002400 	.word	0x80002400
 8101d60:	fe00e800 	.word	0xfe00e800

08101d64 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8101d64:	b580      	push	{r7, lr}
 8101d66:	b086      	sub	sp, #24
 8101d68:	af02      	add	r7, sp, #8
 8101d6a:	60f8      	str	r0, [r7, #12]
 8101d6c:	4608      	mov	r0, r1
 8101d6e:	4611      	mov	r1, r2
 8101d70:	461a      	mov	r2, r3
 8101d72:	4603      	mov	r3, r0
 8101d74:	817b      	strh	r3, [r7, #10]
 8101d76:	460b      	mov	r3, r1
 8101d78:	813b      	strh	r3, [r7, #8]
 8101d7a:	4613      	mov	r3, r2
 8101d7c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8101d7e:	88fb      	ldrh	r3, [r7, #6]
 8101d80:	b2da      	uxtb	r2, r3
 8101d82:	8979      	ldrh	r1, [r7, #10]
 8101d84:	4b20      	ldr	r3, [pc, #128]	; (8101e08 <I2C_RequestMemoryRead+0xa4>)
 8101d86:	9300      	str	r3, [sp, #0]
 8101d88:	2300      	movs	r3, #0
 8101d8a:	68f8      	ldr	r0, [r7, #12]
 8101d8c:	f000 fa0a 	bl	81021a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8101d90:	69fa      	ldr	r2, [r7, #28]
 8101d92:	69b9      	ldr	r1, [r7, #24]
 8101d94:	68f8      	ldr	r0, [r7, #12]
 8101d96:	f000 f89d 	bl	8101ed4 <I2C_WaitOnTXISFlagUntilTimeout>
 8101d9a:	4603      	mov	r3, r0
 8101d9c:	2b00      	cmp	r3, #0
 8101d9e:	d001      	beq.n	8101da4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8101da0:	2301      	movs	r3, #1
 8101da2:	e02c      	b.n	8101dfe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8101da4:	88fb      	ldrh	r3, [r7, #6]
 8101da6:	2b01      	cmp	r3, #1
 8101da8:	d105      	bne.n	8101db6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8101daa:	893b      	ldrh	r3, [r7, #8]
 8101dac:	b2da      	uxtb	r2, r3
 8101dae:	68fb      	ldr	r3, [r7, #12]
 8101db0:	681b      	ldr	r3, [r3, #0]
 8101db2:	629a      	str	r2, [r3, #40]	; 0x28
 8101db4:	e015      	b.n	8101de2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8101db6:	893b      	ldrh	r3, [r7, #8]
 8101db8:	0a1b      	lsrs	r3, r3, #8
 8101dba:	b29b      	uxth	r3, r3
 8101dbc:	b2da      	uxtb	r2, r3
 8101dbe:	68fb      	ldr	r3, [r7, #12]
 8101dc0:	681b      	ldr	r3, [r3, #0]
 8101dc2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8101dc4:	69fa      	ldr	r2, [r7, #28]
 8101dc6:	69b9      	ldr	r1, [r7, #24]
 8101dc8:	68f8      	ldr	r0, [r7, #12]
 8101dca:	f000 f883 	bl	8101ed4 <I2C_WaitOnTXISFlagUntilTimeout>
 8101dce:	4603      	mov	r3, r0
 8101dd0:	2b00      	cmp	r3, #0
 8101dd2:	d001      	beq.n	8101dd8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8101dd4:	2301      	movs	r3, #1
 8101dd6:	e012      	b.n	8101dfe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8101dd8:	893b      	ldrh	r3, [r7, #8]
 8101dda:	b2da      	uxtb	r2, r3
 8101ddc:	68fb      	ldr	r3, [r7, #12]
 8101dde:	681b      	ldr	r3, [r3, #0]
 8101de0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8101de2:	69fb      	ldr	r3, [r7, #28]
 8101de4:	9300      	str	r3, [sp, #0]
 8101de6:	69bb      	ldr	r3, [r7, #24]
 8101de8:	2200      	movs	r2, #0
 8101dea:	2140      	movs	r1, #64	; 0x40
 8101dec:	68f8      	ldr	r0, [r7, #12]
 8101dee:	f000 f831 	bl	8101e54 <I2C_WaitOnFlagUntilTimeout>
 8101df2:	4603      	mov	r3, r0
 8101df4:	2b00      	cmp	r3, #0
 8101df6:	d001      	beq.n	8101dfc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8101df8:	2301      	movs	r3, #1
 8101dfa:	e000      	b.n	8101dfe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8101dfc:	2300      	movs	r3, #0
}
 8101dfe:	4618      	mov	r0, r3
 8101e00:	3710      	adds	r7, #16
 8101e02:	46bd      	mov	sp, r7
 8101e04:	bd80      	pop	{r7, pc}
 8101e06:	bf00      	nop
 8101e08:	80002000 	.word	0x80002000

08101e0c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8101e0c:	b480      	push	{r7}
 8101e0e:	b083      	sub	sp, #12
 8101e10:	af00      	add	r7, sp, #0
 8101e12:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8101e14:	687b      	ldr	r3, [r7, #4]
 8101e16:	681b      	ldr	r3, [r3, #0]
 8101e18:	699b      	ldr	r3, [r3, #24]
 8101e1a:	f003 0302 	and.w	r3, r3, #2
 8101e1e:	2b02      	cmp	r3, #2
 8101e20:	d103      	bne.n	8101e2a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8101e22:	687b      	ldr	r3, [r7, #4]
 8101e24:	681b      	ldr	r3, [r3, #0]
 8101e26:	2200      	movs	r2, #0
 8101e28:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8101e2a:	687b      	ldr	r3, [r7, #4]
 8101e2c:	681b      	ldr	r3, [r3, #0]
 8101e2e:	699b      	ldr	r3, [r3, #24]
 8101e30:	f003 0301 	and.w	r3, r3, #1
 8101e34:	2b01      	cmp	r3, #1
 8101e36:	d007      	beq.n	8101e48 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8101e38:	687b      	ldr	r3, [r7, #4]
 8101e3a:	681b      	ldr	r3, [r3, #0]
 8101e3c:	699a      	ldr	r2, [r3, #24]
 8101e3e:	687b      	ldr	r3, [r7, #4]
 8101e40:	681b      	ldr	r3, [r3, #0]
 8101e42:	f042 0201 	orr.w	r2, r2, #1
 8101e46:	619a      	str	r2, [r3, #24]
  }
}
 8101e48:	bf00      	nop
 8101e4a:	370c      	adds	r7, #12
 8101e4c:	46bd      	mov	sp, r7
 8101e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e52:	4770      	bx	lr

08101e54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8101e54:	b580      	push	{r7, lr}
 8101e56:	b084      	sub	sp, #16
 8101e58:	af00      	add	r7, sp, #0
 8101e5a:	60f8      	str	r0, [r7, #12]
 8101e5c:	60b9      	str	r1, [r7, #8]
 8101e5e:	603b      	str	r3, [r7, #0]
 8101e60:	4613      	mov	r3, r2
 8101e62:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8101e64:	e022      	b.n	8101eac <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8101e66:	683b      	ldr	r3, [r7, #0]
 8101e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101e6c:	d01e      	beq.n	8101eac <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8101e6e:	f7ff fa33 	bl	81012d8 <HAL_GetTick>
 8101e72:	4602      	mov	r2, r0
 8101e74:	69bb      	ldr	r3, [r7, #24]
 8101e76:	1ad3      	subs	r3, r2, r3
 8101e78:	683a      	ldr	r2, [r7, #0]
 8101e7a:	429a      	cmp	r2, r3
 8101e7c:	d302      	bcc.n	8101e84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8101e7e:	683b      	ldr	r3, [r7, #0]
 8101e80:	2b00      	cmp	r3, #0
 8101e82:	d113      	bne.n	8101eac <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8101e84:	68fb      	ldr	r3, [r7, #12]
 8101e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8101e88:	f043 0220 	orr.w	r2, r3, #32
 8101e8c:	68fb      	ldr	r3, [r7, #12]
 8101e8e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8101e90:	68fb      	ldr	r3, [r7, #12]
 8101e92:	2220      	movs	r2, #32
 8101e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8101e98:	68fb      	ldr	r3, [r7, #12]
 8101e9a:	2200      	movs	r2, #0
 8101e9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8101ea0:	68fb      	ldr	r3, [r7, #12]
 8101ea2:	2200      	movs	r2, #0
 8101ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8101ea8:	2301      	movs	r3, #1
 8101eaa:	e00f      	b.n	8101ecc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8101eac:	68fb      	ldr	r3, [r7, #12]
 8101eae:	681b      	ldr	r3, [r3, #0]
 8101eb0:	699a      	ldr	r2, [r3, #24]
 8101eb2:	68bb      	ldr	r3, [r7, #8]
 8101eb4:	4013      	ands	r3, r2
 8101eb6:	68ba      	ldr	r2, [r7, #8]
 8101eb8:	429a      	cmp	r2, r3
 8101eba:	bf0c      	ite	eq
 8101ebc:	2301      	moveq	r3, #1
 8101ebe:	2300      	movne	r3, #0
 8101ec0:	b2db      	uxtb	r3, r3
 8101ec2:	461a      	mov	r2, r3
 8101ec4:	79fb      	ldrb	r3, [r7, #7]
 8101ec6:	429a      	cmp	r2, r3
 8101ec8:	d0cd      	beq.n	8101e66 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8101eca:	2300      	movs	r3, #0
}
 8101ecc:	4618      	mov	r0, r3
 8101ece:	3710      	adds	r7, #16
 8101ed0:	46bd      	mov	sp, r7
 8101ed2:	bd80      	pop	{r7, pc}

08101ed4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8101ed4:	b580      	push	{r7, lr}
 8101ed6:	b084      	sub	sp, #16
 8101ed8:	af00      	add	r7, sp, #0
 8101eda:	60f8      	str	r0, [r7, #12]
 8101edc:	60b9      	str	r1, [r7, #8]
 8101ede:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8101ee0:	e02c      	b.n	8101f3c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8101ee2:	687a      	ldr	r2, [r7, #4]
 8101ee4:	68b9      	ldr	r1, [r7, #8]
 8101ee6:	68f8      	ldr	r0, [r7, #12]
 8101ee8:	f000 f870 	bl	8101fcc <I2C_IsErrorOccurred>
 8101eec:	4603      	mov	r3, r0
 8101eee:	2b00      	cmp	r3, #0
 8101ef0:	d001      	beq.n	8101ef6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8101ef2:	2301      	movs	r3, #1
 8101ef4:	e02a      	b.n	8101f4c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8101ef6:	68bb      	ldr	r3, [r7, #8]
 8101ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101efc:	d01e      	beq.n	8101f3c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8101efe:	f7ff f9eb 	bl	81012d8 <HAL_GetTick>
 8101f02:	4602      	mov	r2, r0
 8101f04:	687b      	ldr	r3, [r7, #4]
 8101f06:	1ad3      	subs	r3, r2, r3
 8101f08:	68ba      	ldr	r2, [r7, #8]
 8101f0a:	429a      	cmp	r2, r3
 8101f0c:	d302      	bcc.n	8101f14 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8101f0e:	68bb      	ldr	r3, [r7, #8]
 8101f10:	2b00      	cmp	r3, #0
 8101f12:	d113      	bne.n	8101f3c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8101f14:	68fb      	ldr	r3, [r7, #12]
 8101f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8101f18:	f043 0220 	orr.w	r2, r3, #32
 8101f1c:	68fb      	ldr	r3, [r7, #12]
 8101f1e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8101f20:	68fb      	ldr	r3, [r7, #12]
 8101f22:	2220      	movs	r2, #32
 8101f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8101f28:	68fb      	ldr	r3, [r7, #12]
 8101f2a:	2200      	movs	r2, #0
 8101f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8101f30:	68fb      	ldr	r3, [r7, #12]
 8101f32:	2200      	movs	r2, #0
 8101f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8101f38:	2301      	movs	r3, #1
 8101f3a:	e007      	b.n	8101f4c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8101f3c:	68fb      	ldr	r3, [r7, #12]
 8101f3e:	681b      	ldr	r3, [r3, #0]
 8101f40:	699b      	ldr	r3, [r3, #24]
 8101f42:	f003 0302 	and.w	r3, r3, #2
 8101f46:	2b02      	cmp	r3, #2
 8101f48:	d1cb      	bne.n	8101ee2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8101f4a:	2300      	movs	r3, #0
}
 8101f4c:	4618      	mov	r0, r3
 8101f4e:	3710      	adds	r7, #16
 8101f50:	46bd      	mov	sp, r7
 8101f52:	bd80      	pop	{r7, pc}

08101f54 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8101f54:	b580      	push	{r7, lr}
 8101f56:	b084      	sub	sp, #16
 8101f58:	af00      	add	r7, sp, #0
 8101f5a:	60f8      	str	r0, [r7, #12]
 8101f5c:	60b9      	str	r1, [r7, #8]
 8101f5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8101f60:	e028      	b.n	8101fb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8101f62:	687a      	ldr	r2, [r7, #4]
 8101f64:	68b9      	ldr	r1, [r7, #8]
 8101f66:	68f8      	ldr	r0, [r7, #12]
 8101f68:	f000 f830 	bl	8101fcc <I2C_IsErrorOccurred>
 8101f6c:	4603      	mov	r3, r0
 8101f6e:	2b00      	cmp	r3, #0
 8101f70:	d001      	beq.n	8101f76 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8101f72:	2301      	movs	r3, #1
 8101f74:	e026      	b.n	8101fc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8101f76:	f7ff f9af 	bl	81012d8 <HAL_GetTick>
 8101f7a:	4602      	mov	r2, r0
 8101f7c:	687b      	ldr	r3, [r7, #4]
 8101f7e:	1ad3      	subs	r3, r2, r3
 8101f80:	68ba      	ldr	r2, [r7, #8]
 8101f82:	429a      	cmp	r2, r3
 8101f84:	d302      	bcc.n	8101f8c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8101f86:	68bb      	ldr	r3, [r7, #8]
 8101f88:	2b00      	cmp	r3, #0
 8101f8a:	d113      	bne.n	8101fb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8101f8c:	68fb      	ldr	r3, [r7, #12]
 8101f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8101f90:	f043 0220 	orr.w	r2, r3, #32
 8101f94:	68fb      	ldr	r3, [r7, #12]
 8101f96:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8101f98:	68fb      	ldr	r3, [r7, #12]
 8101f9a:	2220      	movs	r2, #32
 8101f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8101fa0:	68fb      	ldr	r3, [r7, #12]
 8101fa2:	2200      	movs	r2, #0
 8101fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8101fa8:	68fb      	ldr	r3, [r7, #12]
 8101faa:	2200      	movs	r2, #0
 8101fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8101fb0:	2301      	movs	r3, #1
 8101fb2:	e007      	b.n	8101fc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8101fb4:	68fb      	ldr	r3, [r7, #12]
 8101fb6:	681b      	ldr	r3, [r3, #0]
 8101fb8:	699b      	ldr	r3, [r3, #24]
 8101fba:	f003 0320 	and.w	r3, r3, #32
 8101fbe:	2b20      	cmp	r3, #32
 8101fc0:	d1cf      	bne.n	8101f62 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8101fc2:	2300      	movs	r3, #0
}
 8101fc4:	4618      	mov	r0, r3
 8101fc6:	3710      	adds	r7, #16
 8101fc8:	46bd      	mov	sp, r7
 8101fca:	bd80      	pop	{r7, pc}

08101fcc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8101fcc:	b580      	push	{r7, lr}
 8101fce:	b08a      	sub	sp, #40	; 0x28
 8101fd0:	af00      	add	r7, sp, #0
 8101fd2:	60f8      	str	r0, [r7, #12]
 8101fd4:	60b9      	str	r1, [r7, #8]
 8101fd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8101fd8:	2300      	movs	r3, #0
 8101fda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8101fde:	68fb      	ldr	r3, [r7, #12]
 8101fe0:	681b      	ldr	r3, [r3, #0]
 8101fe2:	699b      	ldr	r3, [r3, #24]
 8101fe4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8101fe6:	2300      	movs	r3, #0
 8101fe8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8101fea:	687b      	ldr	r3, [r7, #4]
 8101fec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8101fee:	69bb      	ldr	r3, [r7, #24]
 8101ff0:	f003 0310 	and.w	r3, r3, #16
 8101ff4:	2b00      	cmp	r3, #0
 8101ff6:	d075      	beq.n	81020e4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8101ff8:	68fb      	ldr	r3, [r7, #12]
 8101ffa:	681b      	ldr	r3, [r3, #0]
 8101ffc:	2210      	movs	r2, #16
 8101ffe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8102000:	e056      	b.n	81020b0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8102002:	68bb      	ldr	r3, [r7, #8]
 8102004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102008:	d052      	beq.n	81020b0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 810200a:	f7ff f965 	bl	81012d8 <HAL_GetTick>
 810200e:	4602      	mov	r2, r0
 8102010:	69fb      	ldr	r3, [r7, #28]
 8102012:	1ad3      	subs	r3, r2, r3
 8102014:	68ba      	ldr	r2, [r7, #8]
 8102016:	429a      	cmp	r2, r3
 8102018:	d302      	bcc.n	8102020 <I2C_IsErrorOccurred+0x54>
 810201a:	68bb      	ldr	r3, [r7, #8]
 810201c:	2b00      	cmp	r3, #0
 810201e:	d147      	bne.n	81020b0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8102020:	68fb      	ldr	r3, [r7, #12]
 8102022:	681b      	ldr	r3, [r3, #0]
 8102024:	685b      	ldr	r3, [r3, #4]
 8102026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810202a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 810202c:	68fb      	ldr	r3, [r7, #12]
 810202e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8102032:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8102034:	68fb      	ldr	r3, [r7, #12]
 8102036:	681b      	ldr	r3, [r3, #0]
 8102038:	699b      	ldr	r3, [r3, #24]
 810203a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810203e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8102042:	d12e      	bne.n	81020a2 <I2C_IsErrorOccurred+0xd6>
 8102044:	697b      	ldr	r3, [r7, #20]
 8102046:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810204a:	d02a      	beq.n	81020a2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 810204c:	7cfb      	ldrb	r3, [r7, #19]
 810204e:	2b20      	cmp	r3, #32
 8102050:	d027      	beq.n	81020a2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8102052:	68fb      	ldr	r3, [r7, #12]
 8102054:	681b      	ldr	r3, [r3, #0]
 8102056:	685a      	ldr	r2, [r3, #4]
 8102058:	68fb      	ldr	r3, [r7, #12]
 810205a:	681b      	ldr	r3, [r3, #0]
 810205c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8102060:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8102062:	f7ff f939 	bl	81012d8 <HAL_GetTick>
 8102066:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102068:	e01b      	b.n	81020a2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 810206a:	f7ff f935 	bl	81012d8 <HAL_GetTick>
 810206e:	4602      	mov	r2, r0
 8102070:	69fb      	ldr	r3, [r7, #28]
 8102072:	1ad3      	subs	r3, r2, r3
 8102074:	2b19      	cmp	r3, #25
 8102076:	d914      	bls.n	81020a2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102078:	68fb      	ldr	r3, [r7, #12]
 810207a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810207c:	f043 0220 	orr.w	r2, r3, #32
 8102080:	68fb      	ldr	r3, [r7, #12]
 8102082:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8102084:	68fb      	ldr	r3, [r7, #12]
 8102086:	2220      	movs	r2, #32
 8102088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 810208c:	68fb      	ldr	r3, [r7, #12]
 810208e:	2200      	movs	r2, #0
 8102090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8102094:	68fb      	ldr	r3, [r7, #12]
 8102096:	2200      	movs	r2, #0
 8102098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 810209c:	2301      	movs	r3, #1
 810209e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81020a2:	68fb      	ldr	r3, [r7, #12]
 81020a4:	681b      	ldr	r3, [r3, #0]
 81020a6:	699b      	ldr	r3, [r3, #24]
 81020a8:	f003 0320 	and.w	r3, r3, #32
 81020ac:	2b20      	cmp	r3, #32
 81020ae:	d1dc      	bne.n	810206a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 81020b0:	68fb      	ldr	r3, [r7, #12]
 81020b2:	681b      	ldr	r3, [r3, #0]
 81020b4:	699b      	ldr	r3, [r3, #24]
 81020b6:	f003 0320 	and.w	r3, r3, #32
 81020ba:	2b20      	cmp	r3, #32
 81020bc:	d003      	beq.n	81020c6 <I2C_IsErrorOccurred+0xfa>
 81020be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81020c2:	2b00      	cmp	r3, #0
 81020c4:	d09d      	beq.n	8102002 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 81020c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81020ca:	2b00      	cmp	r3, #0
 81020cc:	d103      	bne.n	81020d6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81020ce:	68fb      	ldr	r3, [r7, #12]
 81020d0:	681b      	ldr	r3, [r3, #0]
 81020d2:	2220      	movs	r2, #32
 81020d4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 81020d6:	6a3b      	ldr	r3, [r7, #32]
 81020d8:	f043 0304 	orr.w	r3, r3, #4
 81020dc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 81020de:	2301      	movs	r3, #1
 81020e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 81020e4:	68fb      	ldr	r3, [r7, #12]
 81020e6:	681b      	ldr	r3, [r3, #0]
 81020e8:	699b      	ldr	r3, [r3, #24]
 81020ea:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 81020ec:	69bb      	ldr	r3, [r7, #24]
 81020ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81020f2:	2b00      	cmp	r3, #0
 81020f4:	d00b      	beq.n	810210e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 81020f6:	6a3b      	ldr	r3, [r7, #32]
 81020f8:	f043 0301 	orr.w	r3, r3, #1
 81020fc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 81020fe:	68fb      	ldr	r3, [r7, #12]
 8102100:	681b      	ldr	r3, [r3, #0]
 8102102:	f44f 7280 	mov.w	r2, #256	; 0x100
 8102106:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8102108:	2301      	movs	r3, #1
 810210a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 810210e:	69bb      	ldr	r3, [r7, #24]
 8102110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8102114:	2b00      	cmp	r3, #0
 8102116:	d00b      	beq.n	8102130 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8102118:	6a3b      	ldr	r3, [r7, #32]
 810211a:	f043 0308 	orr.w	r3, r3, #8
 810211e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8102120:	68fb      	ldr	r3, [r7, #12]
 8102122:	681b      	ldr	r3, [r3, #0]
 8102124:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8102128:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 810212a:	2301      	movs	r3, #1
 810212c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8102130:	69bb      	ldr	r3, [r7, #24]
 8102132:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8102136:	2b00      	cmp	r3, #0
 8102138:	d00b      	beq.n	8102152 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 810213a:	6a3b      	ldr	r3, [r7, #32]
 810213c:	f043 0302 	orr.w	r3, r3, #2
 8102140:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8102142:	68fb      	ldr	r3, [r7, #12]
 8102144:	681b      	ldr	r3, [r3, #0]
 8102146:	f44f 7200 	mov.w	r2, #512	; 0x200
 810214a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 810214c:	2301      	movs	r3, #1
 810214e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8102152:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8102156:	2b00      	cmp	r3, #0
 8102158:	d01c      	beq.n	8102194 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 810215a:	68f8      	ldr	r0, [r7, #12]
 810215c:	f7ff fe56 	bl	8101e0c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8102160:	68fb      	ldr	r3, [r7, #12]
 8102162:	681b      	ldr	r3, [r3, #0]
 8102164:	6859      	ldr	r1, [r3, #4]
 8102166:	68fb      	ldr	r3, [r7, #12]
 8102168:	681a      	ldr	r2, [r3, #0]
 810216a:	4b0d      	ldr	r3, [pc, #52]	; (81021a0 <I2C_IsErrorOccurred+0x1d4>)
 810216c:	400b      	ands	r3, r1
 810216e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8102170:	68fb      	ldr	r3, [r7, #12]
 8102172:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8102174:	6a3b      	ldr	r3, [r7, #32]
 8102176:	431a      	orrs	r2, r3
 8102178:	68fb      	ldr	r3, [r7, #12]
 810217a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 810217c:	68fb      	ldr	r3, [r7, #12]
 810217e:	2220      	movs	r2, #32
 8102180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8102184:	68fb      	ldr	r3, [r7, #12]
 8102186:	2200      	movs	r2, #0
 8102188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810218c:	68fb      	ldr	r3, [r7, #12]
 810218e:	2200      	movs	r2, #0
 8102190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8102194:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8102198:	4618      	mov	r0, r3
 810219a:	3728      	adds	r7, #40	; 0x28
 810219c:	46bd      	mov	sp, r7
 810219e:	bd80      	pop	{r7, pc}
 81021a0:	fe00e800 	.word	0xfe00e800

081021a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 81021a4:	b480      	push	{r7}
 81021a6:	b087      	sub	sp, #28
 81021a8:	af00      	add	r7, sp, #0
 81021aa:	60f8      	str	r0, [r7, #12]
 81021ac:	607b      	str	r3, [r7, #4]
 81021ae:	460b      	mov	r3, r1
 81021b0:	817b      	strh	r3, [r7, #10]
 81021b2:	4613      	mov	r3, r2
 81021b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81021b6:	897b      	ldrh	r3, [r7, #10]
 81021b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 81021bc:	7a7b      	ldrb	r3, [r7, #9]
 81021be:	041b      	lsls	r3, r3, #16
 81021c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81021c4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 81021c6:	687b      	ldr	r3, [r7, #4]
 81021c8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81021ca:	6a3b      	ldr	r3, [r7, #32]
 81021cc:	4313      	orrs	r3, r2
 81021ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 81021d2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 81021d4:	68fb      	ldr	r3, [r7, #12]
 81021d6:	681b      	ldr	r3, [r3, #0]
 81021d8:	685a      	ldr	r2, [r3, #4]
 81021da:	6a3b      	ldr	r3, [r7, #32]
 81021dc:	0d5b      	lsrs	r3, r3, #21
 81021de:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 81021e2:	4b08      	ldr	r3, [pc, #32]	; (8102204 <I2C_TransferConfig+0x60>)
 81021e4:	430b      	orrs	r3, r1
 81021e6:	43db      	mvns	r3, r3
 81021e8:	ea02 0103 	and.w	r1, r2, r3
 81021ec:	68fb      	ldr	r3, [r7, #12]
 81021ee:	681b      	ldr	r3, [r3, #0]
 81021f0:	697a      	ldr	r2, [r7, #20]
 81021f2:	430a      	orrs	r2, r1
 81021f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 81021f6:	bf00      	nop
 81021f8:	371c      	adds	r7, #28
 81021fa:	46bd      	mov	sp, r7
 81021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102200:	4770      	bx	lr
 8102202:	bf00      	nop
 8102204:	03ff63ff 	.word	0x03ff63ff

08102208 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8102208:	b480      	push	{r7}
 810220a:	b083      	sub	sp, #12
 810220c:	af00      	add	r7, sp, #0
 810220e:	6078      	str	r0, [r7, #4]
 8102210:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102212:	687b      	ldr	r3, [r7, #4]
 8102214:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102218:	b2db      	uxtb	r3, r3
 810221a:	2b20      	cmp	r3, #32
 810221c:	d138      	bne.n	8102290 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810221e:	687b      	ldr	r3, [r7, #4]
 8102220:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8102224:	2b01      	cmp	r3, #1
 8102226:	d101      	bne.n	810222c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8102228:	2302      	movs	r3, #2
 810222a:	e032      	b.n	8102292 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 810222c:	687b      	ldr	r3, [r7, #4]
 810222e:	2201      	movs	r2, #1
 8102230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8102234:	687b      	ldr	r3, [r7, #4]
 8102236:	2224      	movs	r2, #36	; 0x24
 8102238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 810223c:	687b      	ldr	r3, [r7, #4]
 810223e:	681b      	ldr	r3, [r3, #0]
 8102240:	681a      	ldr	r2, [r3, #0]
 8102242:	687b      	ldr	r3, [r7, #4]
 8102244:	681b      	ldr	r3, [r3, #0]
 8102246:	f022 0201 	bic.w	r2, r2, #1
 810224a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 810224c:	687b      	ldr	r3, [r7, #4]
 810224e:	681b      	ldr	r3, [r3, #0]
 8102250:	681a      	ldr	r2, [r3, #0]
 8102252:	687b      	ldr	r3, [r7, #4]
 8102254:	681b      	ldr	r3, [r3, #0]
 8102256:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 810225a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 810225c:	687b      	ldr	r3, [r7, #4]
 810225e:	681b      	ldr	r3, [r3, #0]
 8102260:	6819      	ldr	r1, [r3, #0]
 8102262:	687b      	ldr	r3, [r7, #4]
 8102264:	681b      	ldr	r3, [r3, #0]
 8102266:	683a      	ldr	r2, [r7, #0]
 8102268:	430a      	orrs	r2, r1
 810226a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 810226c:	687b      	ldr	r3, [r7, #4]
 810226e:	681b      	ldr	r3, [r3, #0]
 8102270:	681a      	ldr	r2, [r3, #0]
 8102272:	687b      	ldr	r3, [r7, #4]
 8102274:	681b      	ldr	r3, [r3, #0]
 8102276:	f042 0201 	orr.w	r2, r2, #1
 810227a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 810227c:	687b      	ldr	r3, [r7, #4]
 810227e:	2220      	movs	r2, #32
 8102280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102284:	687b      	ldr	r3, [r7, #4]
 8102286:	2200      	movs	r2, #0
 8102288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810228c:	2300      	movs	r3, #0
 810228e:	e000      	b.n	8102292 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8102290:	2302      	movs	r3, #2
  }
}
 8102292:	4618      	mov	r0, r3
 8102294:	370c      	adds	r7, #12
 8102296:	46bd      	mov	sp, r7
 8102298:	f85d 7b04 	ldr.w	r7, [sp], #4
 810229c:	4770      	bx	lr

0810229e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 810229e:	b480      	push	{r7}
 81022a0:	b085      	sub	sp, #20
 81022a2:	af00      	add	r7, sp, #0
 81022a4:	6078      	str	r0, [r7, #4]
 81022a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81022a8:	687b      	ldr	r3, [r7, #4]
 81022aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81022ae:	b2db      	uxtb	r3, r3
 81022b0:	2b20      	cmp	r3, #32
 81022b2:	d139      	bne.n	8102328 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81022b4:	687b      	ldr	r3, [r7, #4]
 81022b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81022ba:	2b01      	cmp	r3, #1
 81022bc:	d101      	bne.n	81022c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 81022be:	2302      	movs	r3, #2
 81022c0:	e033      	b.n	810232a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 81022c2:	687b      	ldr	r3, [r7, #4]
 81022c4:	2201      	movs	r2, #1
 81022c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 81022ca:	687b      	ldr	r3, [r7, #4]
 81022cc:	2224      	movs	r2, #36	; 0x24
 81022ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 81022d2:	687b      	ldr	r3, [r7, #4]
 81022d4:	681b      	ldr	r3, [r3, #0]
 81022d6:	681a      	ldr	r2, [r3, #0]
 81022d8:	687b      	ldr	r3, [r7, #4]
 81022da:	681b      	ldr	r3, [r3, #0]
 81022dc:	f022 0201 	bic.w	r2, r2, #1
 81022e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 81022e2:	687b      	ldr	r3, [r7, #4]
 81022e4:	681b      	ldr	r3, [r3, #0]
 81022e6:	681b      	ldr	r3, [r3, #0]
 81022e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 81022ea:	68fb      	ldr	r3, [r7, #12]
 81022ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81022f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 81022f2:	683b      	ldr	r3, [r7, #0]
 81022f4:	021b      	lsls	r3, r3, #8
 81022f6:	68fa      	ldr	r2, [r7, #12]
 81022f8:	4313      	orrs	r3, r2
 81022fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 81022fc:	687b      	ldr	r3, [r7, #4]
 81022fe:	681b      	ldr	r3, [r3, #0]
 8102300:	68fa      	ldr	r2, [r7, #12]
 8102302:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8102304:	687b      	ldr	r3, [r7, #4]
 8102306:	681b      	ldr	r3, [r3, #0]
 8102308:	681a      	ldr	r2, [r3, #0]
 810230a:	687b      	ldr	r3, [r7, #4]
 810230c:	681b      	ldr	r3, [r3, #0]
 810230e:	f042 0201 	orr.w	r2, r2, #1
 8102312:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8102314:	687b      	ldr	r3, [r7, #4]
 8102316:	2220      	movs	r2, #32
 8102318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810231c:	687b      	ldr	r3, [r7, #4]
 810231e:	2200      	movs	r2, #0
 8102320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8102324:	2300      	movs	r3, #0
 8102326:	e000      	b.n	810232a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8102328:	2302      	movs	r3, #2
  }
}
 810232a:	4618      	mov	r0, r3
 810232c:	3714      	adds	r7, #20
 810232e:	46bd      	mov	sp, r7
 8102330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102334:	4770      	bx	lr
	...

08102338 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8102338:	b580      	push	{r7, lr}
 810233a:	b084      	sub	sp, #16
 810233c:	af00      	add	r7, sp, #0
 810233e:	60f8      	str	r0, [r7, #12]
 8102340:	460b      	mov	r3, r1
 8102342:	607a      	str	r2, [r7, #4]
 8102344:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8102346:	4b37      	ldr	r3, [pc, #220]	; (8102424 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102348:	681b      	ldr	r3, [r3, #0]
 810234a:	f023 0201 	bic.w	r2, r3, #1
 810234e:	4935      	ldr	r1, [pc, #212]	; (8102424 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102350:	68fb      	ldr	r3, [r7, #12]
 8102352:	4313      	orrs	r3, r2
 8102354:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8102356:	687b      	ldr	r3, [r7, #4]
 8102358:	2b00      	cmp	r3, #0
 810235a:	d123      	bne.n	81023a4 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 810235c:	f7ff f8fc 	bl	8101558 <HAL_GetCurrentCPUID>
 8102360:	4603      	mov	r3, r0
 8102362:	2b03      	cmp	r3, #3
 8102364:	d158      	bne.n	8102418 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8102366:	4b2f      	ldr	r3, [pc, #188]	; (8102424 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102368:	691b      	ldr	r3, [r3, #16]
 810236a:	4a2e      	ldr	r2, [pc, #184]	; (8102424 <HAL_PWREx_EnterSTOPMode+0xec>)
 810236c:	f023 0301 	bic.w	r3, r3, #1
 8102370:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102372:	4b2d      	ldr	r3, [pc, #180]	; (8102428 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102374:	691b      	ldr	r3, [r3, #16]
 8102376:	4a2c      	ldr	r2, [pc, #176]	; (8102428 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102378:	f043 0304 	orr.w	r3, r3, #4
 810237c:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 810237e:	f3bf 8f4f 	dsb	sy
}
 8102382:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102384:	f3bf 8f6f 	isb	sy
}
 8102388:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810238a:	7afb      	ldrb	r3, [r7, #11]
 810238c:	2b01      	cmp	r3, #1
 810238e:	d101      	bne.n	8102394 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102390:	bf30      	wfi
 8102392:	e000      	b.n	8102396 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102394:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102396:	4b24      	ldr	r3, [pc, #144]	; (8102428 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102398:	691b      	ldr	r3, [r3, #16]
 810239a:	4a23      	ldr	r2, [pc, #140]	; (8102428 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810239c:	f023 0304 	bic.w	r3, r3, #4
 81023a0:	6113      	str	r3, [r2, #16]
 81023a2:	e03c      	b.n	810241e <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81023a4:	687b      	ldr	r3, [r7, #4]
 81023a6:	2b01      	cmp	r3, #1
 81023a8:	d123      	bne.n	81023f2 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81023aa:	f7ff f8d5 	bl	8101558 <HAL_GetCurrentCPUID>
 81023ae:	4603      	mov	r3, r0
 81023b0:	2b01      	cmp	r3, #1
 81023b2:	d133      	bne.n	810241c <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81023b4:	4b1b      	ldr	r3, [pc, #108]	; (8102424 <HAL_PWREx_EnterSTOPMode+0xec>)
 81023b6:	695b      	ldr	r3, [r3, #20]
 81023b8:	4a1a      	ldr	r2, [pc, #104]	; (8102424 <HAL_PWREx_EnterSTOPMode+0xec>)
 81023ba:	f023 0302 	bic.w	r3, r3, #2
 81023be:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81023c0:	4b19      	ldr	r3, [pc, #100]	; (8102428 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81023c2:	691b      	ldr	r3, [r3, #16]
 81023c4:	4a18      	ldr	r2, [pc, #96]	; (8102428 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81023c6:	f043 0304 	orr.w	r3, r3, #4
 81023ca:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81023cc:	f3bf 8f4f 	dsb	sy
}
 81023d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81023d2:	f3bf 8f6f 	isb	sy
}
 81023d6:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81023d8:	7afb      	ldrb	r3, [r7, #11]
 81023da:	2b01      	cmp	r3, #1
 81023dc:	d101      	bne.n	81023e2 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81023de:	bf30      	wfi
 81023e0:	e000      	b.n	81023e4 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81023e2:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81023e4:	4b10      	ldr	r3, [pc, #64]	; (8102428 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81023e6:	691b      	ldr	r3, [r3, #16]
 81023e8:	4a0f      	ldr	r2, [pc, #60]	; (8102428 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81023ea:	f023 0304 	bic.w	r3, r3, #4
 81023ee:	6113      	str	r3, [r2, #16]
 81023f0:	e015      	b.n	810241e <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81023f2:	f7ff f8b1 	bl	8101558 <HAL_GetCurrentCPUID>
 81023f6:	4603      	mov	r3, r0
 81023f8:	2b03      	cmp	r3, #3
 81023fa:	d106      	bne.n	810240a <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81023fc:	4b09      	ldr	r3, [pc, #36]	; (8102424 <HAL_PWREx_EnterSTOPMode+0xec>)
 81023fe:	691b      	ldr	r3, [r3, #16]
 8102400:	4a08      	ldr	r2, [pc, #32]	; (8102424 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102402:	f023 0304 	bic.w	r3, r3, #4
 8102406:	6113      	str	r3, [r2, #16]
 8102408:	e009      	b.n	810241e <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810240a:	4b06      	ldr	r3, [pc, #24]	; (8102424 <HAL_PWREx_EnterSTOPMode+0xec>)
 810240c:	695b      	ldr	r3, [r3, #20]
 810240e:	4a05      	ldr	r2, [pc, #20]	; (8102424 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102410:	f023 0304 	bic.w	r3, r3, #4
 8102414:	6153      	str	r3, [r2, #20]
 8102416:	e002      	b.n	810241e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102418:	bf00      	nop
 810241a:	e000      	b.n	810241e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810241c:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810241e:	3710      	adds	r7, #16
 8102420:	46bd      	mov	sp, r7
 8102422:	bd80      	pop	{r7, pc}
 8102424:	58024800 	.word	0x58024800
 8102428:	e000ed00 	.word	0xe000ed00

0810242c <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 810242c:	b580      	push	{r7, lr}
 810242e:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8102430:	f7ff f892 	bl	8101558 <HAL_GetCurrentCPUID>
 8102434:	4603      	mov	r3, r0
 8102436:	2b03      	cmp	r3, #3
 8102438:	d101      	bne.n	810243e <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810243a:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 810243c:	e001      	b.n	8102442 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810243e:	bf40      	sev
    __WFE ();
 8102440:	bf20      	wfe
}
 8102442:	bf00      	nop
 8102444:	bd80      	pop	{r7, pc}
	...

08102448 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8102448:	b480      	push	{r7}
 810244a:	b089      	sub	sp, #36	; 0x24
 810244c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810244e:	4bb3      	ldr	r3, [pc, #716]	; (810271c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102450:	691b      	ldr	r3, [r3, #16]
 8102452:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8102456:	2b18      	cmp	r3, #24
 8102458:	f200 8155 	bhi.w	8102706 <HAL_RCC_GetSysClockFreq+0x2be>
 810245c:	a201      	add	r2, pc, #4	; (adr r2, 8102464 <HAL_RCC_GetSysClockFreq+0x1c>)
 810245e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102462:	bf00      	nop
 8102464:	081024c9 	.word	0x081024c9
 8102468:	08102707 	.word	0x08102707
 810246c:	08102707 	.word	0x08102707
 8102470:	08102707 	.word	0x08102707
 8102474:	08102707 	.word	0x08102707
 8102478:	08102707 	.word	0x08102707
 810247c:	08102707 	.word	0x08102707
 8102480:	08102707 	.word	0x08102707
 8102484:	081024ef 	.word	0x081024ef
 8102488:	08102707 	.word	0x08102707
 810248c:	08102707 	.word	0x08102707
 8102490:	08102707 	.word	0x08102707
 8102494:	08102707 	.word	0x08102707
 8102498:	08102707 	.word	0x08102707
 810249c:	08102707 	.word	0x08102707
 81024a0:	08102707 	.word	0x08102707
 81024a4:	081024f5 	.word	0x081024f5
 81024a8:	08102707 	.word	0x08102707
 81024ac:	08102707 	.word	0x08102707
 81024b0:	08102707 	.word	0x08102707
 81024b4:	08102707 	.word	0x08102707
 81024b8:	08102707 	.word	0x08102707
 81024bc:	08102707 	.word	0x08102707
 81024c0:	08102707 	.word	0x08102707
 81024c4:	081024fb 	.word	0x081024fb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81024c8:	4b94      	ldr	r3, [pc, #592]	; (810271c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81024ca:	681b      	ldr	r3, [r3, #0]
 81024cc:	f003 0320 	and.w	r3, r3, #32
 81024d0:	2b00      	cmp	r3, #0
 81024d2:	d009      	beq.n	81024e8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81024d4:	4b91      	ldr	r3, [pc, #580]	; (810271c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81024d6:	681b      	ldr	r3, [r3, #0]
 81024d8:	08db      	lsrs	r3, r3, #3
 81024da:	f003 0303 	and.w	r3, r3, #3
 81024de:	4a90      	ldr	r2, [pc, #576]	; (8102720 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81024e0:	fa22 f303 	lsr.w	r3, r2, r3
 81024e4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 81024e6:	e111      	b.n	810270c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81024e8:	4b8d      	ldr	r3, [pc, #564]	; (8102720 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81024ea:	61bb      	str	r3, [r7, #24]
    break;
 81024ec:	e10e      	b.n	810270c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 81024ee:	4b8d      	ldr	r3, [pc, #564]	; (8102724 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81024f0:	61bb      	str	r3, [r7, #24]
    break;
 81024f2:	e10b      	b.n	810270c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 81024f4:	4b8c      	ldr	r3, [pc, #560]	; (8102728 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81024f6:	61bb      	str	r3, [r7, #24]
    break;
 81024f8:	e108      	b.n	810270c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81024fa:	4b88      	ldr	r3, [pc, #544]	; (810271c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81024fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81024fe:	f003 0303 	and.w	r3, r3, #3
 8102502:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8102504:	4b85      	ldr	r3, [pc, #532]	; (810271c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102508:	091b      	lsrs	r3, r3, #4
 810250a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810250e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8102510:	4b82      	ldr	r3, [pc, #520]	; (810271c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102514:	f003 0301 	and.w	r3, r3, #1
 8102518:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 810251a:	4b80      	ldr	r3, [pc, #512]	; (810271c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810251c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810251e:	08db      	lsrs	r3, r3, #3
 8102520:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8102524:	68fa      	ldr	r2, [r7, #12]
 8102526:	fb02 f303 	mul.w	r3, r2, r3
 810252a:	ee07 3a90 	vmov	s15, r3
 810252e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102532:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8102536:	693b      	ldr	r3, [r7, #16]
 8102538:	2b00      	cmp	r3, #0
 810253a:	f000 80e1 	beq.w	8102700 <HAL_RCC_GetSysClockFreq+0x2b8>
 810253e:	697b      	ldr	r3, [r7, #20]
 8102540:	2b02      	cmp	r3, #2
 8102542:	f000 8083 	beq.w	810264c <HAL_RCC_GetSysClockFreq+0x204>
 8102546:	697b      	ldr	r3, [r7, #20]
 8102548:	2b02      	cmp	r3, #2
 810254a:	f200 80a1 	bhi.w	8102690 <HAL_RCC_GetSysClockFreq+0x248>
 810254e:	697b      	ldr	r3, [r7, #20]
 8102550:	2b00      	cmp	r3, #0
 8102552:	d003      	beq.n	810255c <HAL_RCC_GetSysClockFreq+0x114>
 8102554:	697b      	ldr	r3, [r7, #20]
 8102556:	2b01      	cmp	r3, #1
 8102558:	d056      	beq.n	8102608 <HAL_RCC_GetSysClockFreq+0x1c0>
 810255a:	e099      	b.n	8102690 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810255c:	4b6f      	ldr	r3, [pc, #444]	; (810271c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810255e:	681b      	ldr	r3, [r3, #0]
 8102560:	f003 0320 	and.w	r3, r3, #32
 8102564:	2b00      	cmp	r3, #0
 8102566:	d02d      	beq.n	81025c4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8102568:	4b6c      	ldr	r3, [pc, #432]	; (810271c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810256a:	681b      	ldr	r3, [r3, #0]
 810256c:	08db      	lsrs	r3, r3, #3
 810256e:	f003 0303 	and.w	r3, r3, #3
 8102572:	4a6b      	ldr	r2, [pc, #428]	; (8102720 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102574:	fa22 f303 	lsr.w	r3, r2, r3
 8102578:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810257a:	687b      	ldr	r3, [r7, #4]
 810257c:	ee07 3a90 	vmov	s15, r3
 8102580:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102584:	693b      	ldr	r3, [r7, #16]
 8102586:	ee07 3a90 	vmov	s15, r3
 810258a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810258e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102592:	4b62      	ldr	r3, [pc, #392]	; (810271c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810259a:	ee07 3a90 	vmov	s15, r3
 810259e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81025a2:	ed97 6a02 	vldr	s12, [r7, #8]
 81025a6:	eddf 5a61 	vldr	s11, [pc, #388]	; 810272c <HAL_RCC_GetSysClockFreq+0x2e4>
 81025aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81025ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81025b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81025b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81025ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 81025be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 81025c2:	e087      	b.n	81026d4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81025c4:	693b      	ldr	r3, [r7, #16]
 81025c6:	ee07 3a90 	vmov	s15, r3
 81025ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81025ce:	eddf 6a58 	vldr	s13, [pc, #352]	; 8102730 <HAL_RCC_GetSysClockFreq+0x2e8>
 81025d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81025d6:	4b51      	ldr	r3, [pc, #324]	; (810271c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81025da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81025de:	ee07 3a90 	vmov	s15, r3
 81025e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81025e6:	ed97 6a02 	vldr	s12, [r7, #8]
 81025ea:	eddf 5a50 	vldr	s11, [pc, #320]	; 810272c <HAL_RCC_GetSysClockFreq+0x2e4>
 81025ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81025f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81025f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81025fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81025fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102602:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102606:	e065      	b.n	81026d4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102608:	693b      	ldr	r3, [r7, #16]
 810260a:	ee07 3a90 	vmov	s15, r3
 810260e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102612:	eddf 6a48 	vldr	s13, [pc, #288]	; 8102734 <HAL_RCC_GetSysClockFreq+0x2ec>
 8102616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810261a:	4b40      	ldr	r3, [pc, #256]	; (810271c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810261e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102622:	ee07 3a90 	vmov	s15, r3
 8102626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810262a:	ed97 6a02 	vldr	s12, [r7, #8]
 810262e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 810272c <HAL_RCC_GetSysClockFreq+0x2e4>
 8102632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810263a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810263e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102646:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810264a:	e043      	b.n	81026d4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810264c:	693b      	ldr	r3, [r7, #16]
 810264e:	ee07 3a90 	vmov	s15, r3
 8102652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102656:	eddf 6a38 	vldr	s13, [pc, #224]	; 8102738 <HAL_RCC_GetSysClockFreq+0x2f0>
 810265a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810265e:	4b2f      	ldr	r3, [pc, #188]	; (810271c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102666:	ee07 3a90 	vmov	s15, r3
 810266a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810266e:	ed97 6a02 	vldr	s12, [r7, #8]
 8102672:	eddf 5a2e 	vldr	s11, [pc, #184]	; 810272c <HAL_RCC_GetSysClockFreq+0x2e4>
 8102676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810267a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810267e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102686:	ee67 7a27 	vmul.f32	s15, s14, s15
 810268a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810268e:	e021      	b.n	81026d4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102690:	693b      	ldr	r3, [r7, #16]
 8102692:	ee07 3a90 	vmov	s15, r3
 8102696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810269a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8102734 <HAL_RCC_GetSysClockFreq+0x2ec>
 810269e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81026a2:	4b1e      	ldr	r3, [pc, #120]	; (810271c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81026a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81026aa:	ee07 3a90 	vmov	s15, r3
 81026ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81026b2:	ed97 6a02 	vldr	s12, [r7, #8]
 81026b6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 810272c <HAL_RCC_GetSysClockFreq+0x2e4>
 81026ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81026be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81026c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81026c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81026ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 81026ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81026d2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 81026d4:	4b11      	ldr	r3, [pc, #68]	; (810271c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81026d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81026d8:	0a5b      	lsrs	r3, r3, #9
 81026da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81026de:	3301      	adds	r3, #1
 81026e0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 81026e2:	683b      	ldr	r3, [r7, #0]
 81026e4:	ee07 3a90 	vmov	s15, r3
 81026e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81026ec:	edd7 6a07 	vldr	s13, [r7, #28]
 81026f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81026f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81026f8:	ee17 3a90 	vmov	r3, s15
 81026fc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 81026fe:	e005      	b.n	810270c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8102700:	2300      	movs	r3, #0
 8102702:	61bb      	str	r3, [r7, #24]
    break;
 8102704:	e002      	b.n	810270c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8102706:	4b07      	ldr	r3, [pc, #28]	; (8102724 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102708:	61bb      	str	r3, [r7, #24]
    break;
 810270a:	bf00      	nop
  }

  return sysclockfreq;
 810270c:	69bb      	ldr	r3, [r7, #24]
}
 810270e:	4618      	mov	r0, r3
 8102710:	3724      	adds	r7, #36	; 0x24
 8102712:	46bd      	mov	sp, r7
 8102714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102718:	4770      	bx	lr
 810271a:	bf00      	nop
 810271c:	58024400 	.word	0x58024400
 8102720:	03d09000 	.word	0x03d09000
 8102724:	003d0900 	.word	0x003d0900
 8102728:	007a1200 	.word	0x007a1200
 810272c:	46000000 	.word	0x46000000
 8102730:	4c742400 	.word	0x4c742400
 8102734:	4a742400 	.word	0x4a742400
 8102738:	4af42400 	.word	0x4af42400

0810273c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 810273c:	b580      	push	{r7, lr}
 810273e:	b086      	sub	sp, #24
 8102740:	af00      	add	r7, sp, #0
 8102742:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8102744:	2300      	movs	r3, #0
 8102746:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8102748:	2300      	movs	r3, #0
 810274a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 810274c:	687b      	ldr	r3, [r7, #4]
 810274e:	681b      	ldr	r3, [r3, #0]
 8102750:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8102754:	2b00      	cmp	r3, #0
 8102756:	d03f      	beq.n	81027d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8102758:	687b      	ldr	r3, [r7, #4]
 810275a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810275c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102760:	d02a      	beq.n	81027b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8102762:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102766:	d824      	bhi.n	81027b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8102768:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810276c:	d018      	beq.n	81027a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 810276e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102772:	d81e      	bhi.n	81027b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8102774:	2b00      	cmp	r3, #0
 8102776:	d003      	beq.n	8102780 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8102778:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810277c:	d007      	beq.n	810278e <HAL_RCCEx_PeriphCLKConfig+0x52>
 810277e:	e018      	b.n	81027b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102780:	4ba3      	ldr	r3, [pc, #652]	; (8102a10 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102784:	4aa2      	ldr	r2, [pc, #648]	; (8102a10 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102786:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810278a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 810278c:	e015      	b.n	81027ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810278e:	687b      	ldr	r3, [r7, #4]
 8102790:	3304      	adds	r3, #4
 8102792:	2102      	movs	r1, #2
 8102794:	4618      	mov	r0, r3
 8102796:	f000 ff17 	bl	81035c8 <RCCEx_PLL2_Config>
 810279a:	4603      	mov	r3, r0
 810279c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 810279e:	e00c      	b.n	81027ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81027a0:	687b      	ldr	r3, [r7, #4]
 81027a2:	3324      	adds	r3, #36	; 0x24
 81027a4:	2102      	movs	r1, #2
 81027a6:	4618      	mov	r0, r3
 81027a8:	f000 ffc0 	bl	810372c <RCCEx_PLL3_Config>
 81027ac:	4603      	mov	r3, r0
 81027ae:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81027b0:	e003      	b.n	81027ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81027b2:	2301      	movs	r3, #1
 81027b4:	75fb      	strb	r3, [r7, #23]
      break;
 81027b6:	e000      	b.n	81027ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 81027b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 81027ba:	7dfb      	ldrb	r3, [r7, #23]
 81027bc:	2b00      	cmp	r3, #0
 81027be:	d109      	bne.n	81027d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 81027c0:	4b93      	ldr	r3, [pc, #588]	; (8102a10 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81027c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81027c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 81027c8:	687b      	ldr	r3, [r7, #4]
 81027ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81027cc:	4990      	ldr	r1, [pc, #576]	; (8102a10 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81027ce:	4313      	orrs	r3, r2
 81027d0:	650b      	str	r3, [r1, #80]	; 0x50
 81027d2:	e001      	b.n	81027d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81027d4:	7dfb      	ldrb	r3, [r7, #23]
 81027d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 81027d8:	687b      	ldr	r3, [r7, #4]
 81027da:	681b      	ldr	r3, [r3, #0]
 81027dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81027e0:	2b00      	cmp	r3, #0
 81027e2:	d03d      	beq.n	8102860 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 81027e4:	687b      	ldr	r3, [r7, #4]
 81027e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81027e8:	2b04      	cmp	r3, #4
 81027ea:	d826      	bhi.n	810283a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 81027ec:	a201      	add	r2, pc, #4	; (adr r2, 81027f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 81027ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81027f2:	bf00      	nop
 81027f4:	08102809 	.word	0x08102809
 81027f8:	08102817 	.word	0x08102817
 81027fc:	08102829 	.word	0x08102829
 8102800:	08102841 	.word	0x08102841
 8102804:	08102841 	.word	0x08102841
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102808:	4b81      	ldr	r3, [pc, #516]	; (8102a10 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810280a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810280c:	4a80      	ldr	r2, [pc, #512]	; (8102a10 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810280e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102812:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102814:	e015      	b.n	8102842 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102816:	687b      	ldr	r3, [r7, #4]
 8102818:	3304      	adds	r3, #4
 810281a:	2100      	movs	r1, #0
 810281c:	4618      	mov	r0, r3
 810281e:	f000 fed3 	bl	81035c8 <RCCEx_PLL2_Config>
 8102822:	4603      	mov	r3, r0
 8102824:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102826:	e00c      	b.n	8102842 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102828:	687b      	ldr	r3, [r7, #4]
 810282a:	3324      	adds	r3, #36	; 0x24
 810282c:	2100      	movs	r1, #0
 810282e:	4618      	mov	r0, r3
 8102830:	f000 ff7c 	bl	810372c <RCCEx_PLL3_Config>
 8102834:	4603      	mov	r3, r0
 8102836:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102838:	e003      	b.n	8102842 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810283a:	2301      	movs	r3, #1
 810283c:	75fb      	strb	r3, [r7, #23]
      break;
 810283e:	e000      	b.n	8102842 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8102840:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102842:	7dfb      	ldrb	r3, [r7, #23]
 8102844:	2b00      	cmp	r3, #0
 8102846:	d109      	bne.n	810285c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8102848:	4b71      	ldr	r3, [pc, #452]	; (8102a10 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810284a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810284c:	f023 0207 	bic.w	r2, r3, #7
 8102850:	687b      	ldr	r3, [r7, #4]
 8102852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102854:	496e      	ldr	r1, [pc, #440]	; (8102a10 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102856:	4313      	orrs	r3, r2
 8102858:	650b      	str	r3, [r1, #80]	; 0x50
 810285a:	e001      	b.n	8102860 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810285c:	7dfb      	ldrb	r3, [r7, #23]
 810285e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8102860:	687b      	ldr	r3, [r7, #4]
 8102862:	681b      	ldr	r3, [r3, #0]
 8102864:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8102868:	2b00      	cmp	r3, #0
 810286a:	d042      	beq.n	81028f2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 810286c:	687b      	ldr	r3, [r7, #4]
 810286e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102870:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102874:	d02b      	beq.n	81028ce <HAL_RCCEx_PeriphCLKConfig+0x192>
 8102876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810287a:	d825      	bhi.n	81028c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 810287c:	2bc0      	cmp	r3, #192	; 0xc0
 810287e:	d028      	beq.n	81028d2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8102880:	2bc0      	cmp	r3, #192	; 0xc0
 8102882:	d821      	bhi.n	81028c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8102884:	2b80      	cmp	r3, #128	; 0x80
 8102886:	d016      	beq.n	81028b6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8102888:	2b80      	cmp	r3, #128	; 0x80
 810288a:	d81d      	bhi.n	81028c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 810288c:	2b00      	cmp	r3, #0
 810288e:	d002      	beq.n	8102896 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8102890:	2b40      	cmp	r3, #64	; 0x40
 8102892:	d007      	beq.n	81028a4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8102894:	e018      	b.n	81028c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102896:	4b5e      	ldr	r3, [pc, #376]	; (8102a10 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810289a:	4a5d      	ldr	r2, [pc, #372]	; (8102a10 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810289c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81028a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81028a2:	e017      	b.n	81028d4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81028a4:	687b      	ldr	r3, [r7, #4]
 81028a6:	3304      	adds	r3, #4
 81028a8:	2100      	movs	r1, #0
 81028aa:	4618      	mov	r0, r3
 81028ac:	f000 fe8c 	bl	81035c8 <RCCEx_PLL2_Config>
 81028b0:	4603      	mov	r3, r0
 81028b2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81028b4:	e00e      	b.n	81028d4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81028b6:	687b      	ldr	r3, [r7, #4]
 81028b8:	3324      	adds	r3, #36	; 0x24
 81028ba:	2100      	movs	r1, #0
 81028bc:	4618      	mov	r0, r3
 81028be:	f000 ff35 	bl	810372c <RCCEx_PLL3_Config>
 81028c2:	4603      	mov	r3, r0
 81028c4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81028c6:	e005      	b.n	81028d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81028c8:	2301      	movs	r3, #1
 81028ca:	75fb      	strb	r3, [r7, #23]
      break;
 81028cc:	e002      	b.n	81028d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 81028ce:	bf00      	nop
 81028d0:	e000      	b.n	81028d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 81028d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81028d4:	7dfb      	ldrb	r3, [r7, #23]
 81028d6:	2b00      	cmp	r3, #0
 81028d8:	d109      	bne.n	81028ee <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 81028da:	4b4d      	ldr	r3, [pc, #308]	; (8102a10 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81028dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81028de:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 81028e2:	687b      	ldr	r3, [r7, #4]
 81028e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81028e6:	494a      	ldr	r1, [pc, #296]	; (8102a10 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81028e8:	4313      	orrs	r3, r2
 81028ea:	650b      	str	r3, [r1, #80]	; 0x50
 81028ec:	e001      	b.n	81028f2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81028ee:	7dfb      	ldrb	r3, [r7, #23]
 81028f0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 81028f2:	687b      	ldr	r3, [r7, #4]
 81028f4:	681b      	ldr	r3, [r3, #0]
 81028f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 81028fa:	2b00      	cmp	r3, #0
 81028fc:	d049      	beq.n	8102992 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 81028fe:	687b      	ldr	r3, [r7, #4]
 8102900:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8102904:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8102908:	d030      	beq.n	810296c <HAL_RCCEx_PeriphCLKConfig+0x230>
 810290a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810290e:	d82a      	bhi.n	8102966 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8102910:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8102914:	d02c      	beq.n	8102970 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8102916:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810291a:	d824      	bhi.n	8102966 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 810291c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8102920:	d018      	beq.n	8102954 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8102922:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8102926:	d81e      	bhi.n	8102966 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8102928:	2b00      	cmp	r3, #0
 810292a:	d003      	beq.n	8102934 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 810292c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102930:	d007      	beq.n	8102942 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8102932:	e018      	b.n	8102966 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102934:	4b36      	ldr	r3, [pc, #216]	; (8102a10 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102938:	4a35      	ldr	r2, [pc, #212]	; (8102a10 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810293a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810293e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102940:	e017      	b.n	8102972 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102942:	687b      	ldr	r3, [r7, #4]
 8102944:	3304      	adds	r3, #4
 8102946:	2100      	movs	r1, #0
 8102948:	4618      	mov	r0, r3
 810294a:	f000 fe3d 	bl	81035c8 <RCCEx_PLL2_Config>
 810294e:	4603      	mov	r3, r0
 8102950:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8102952:	e00e      	b.n	8102972 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102954:	687b      	ldr	r3, [r7, #4]
 8102956:	3324      	adds	r3, #36	; 0x24
 8102958:	2100      	movs	r1, #0
 810295a:	4618      	mov	r0, r3
 810295c:	f000 fee6 	bl	810372c <RCCEx_PLL3_Config>
 8102960:	4603      	mov	r3, r0
 8102962:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102964:	e005      	b.n	8102972 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8102966:	2301      	movs	r3, #1
 8102968:	75fb      	strb	r3, [r7, #23]
      break;
 810296a:	e002      	b.n	8102972 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 810296c:	bf00      	nop
 810296e:	e000      	b.n	8102972 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8102970:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102972:	7dfb      	ldrb	r3, [r7, #23]
 8102974:	2b00      	cmp	r3, #0
 8102976:	d10a      	bne.n	810298e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8102978:	4b25      	ldr	r3, [pc, #148]	; (8102a10 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810297a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810297c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8102980:	687b      	ldr	r3, [r7, #4]
 8102982:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8102986:	4922      	ldr	r1, [pc, #136]	; (8102a10 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102988:	4313      	orrs	r3, r2
 810298a:	658b      	str	r3, [r1, #88]	; 0x58
 810298c:	e001      	b.n	8102992 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810298e:	7dfb      	ldrb	r3, [r7, #23]
 8102990:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8102992:	687b      	ldr	r3, [r7, #4]
 8102994:	681b      	ldr	r3, [r3, #0]
 8102996:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810299a:	2b00      	cmp	r3, #0
 810299c:	d04b      	beq.n	8102a36 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 810299e:	687b      	ldr	r3, [r7, #4]
 81029a0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 81029a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81029a8:	d030      	beq.n	8102a0c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 81029aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81029ae:	d82a      	bhi.n	8102a06 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81029b0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81029b4:	d02e      	beq.n	8102a14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 81029b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81029ba:	d824      	bhi.n	8102a06 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81029bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81029c0:	d018      	beq.n	81029f4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 81029c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81029c6:	d81e      	bhi.n	8102a06 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81029c8:	2b00      	cmp	r3, #0
 81029ca:	d003      	beq.n	81029d4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 81029cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81029d0:	d007      	beq.n	81029e2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 81029d2:	e018      	b.n	8102a06 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81029d4:	4b0e      	ldr	r3, [pc, #56]	; (8102a10 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81029d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81029d8:	4a0d      	ldr	r2, [pc, #52]	; (8102a10 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81029da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81029de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81029e0:	e019      	b.n	8102a16 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81029e2:	687b      	ldr	r3, [r7, #4]
 81029e4:	3304      	adds	r3, #4
 81029e6:	2100      	movs	r1, #0
 81029e8:	4618      	mov	r0, r3
 81029ea:	f000 fded 	bl	81035c8 <RCCEx_PLL2_Config>
 81029ee:	4603      	mov	r3, r0
 81029f0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 81029f2:	e010      	b.n	8102a16 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81029f4:	687b      	ldr	r3, [r7, #4]
 81029f6:	3324      	adds	r3, #36	; 0x24
 81029f8:	2100      	movs	r1, #0
 81029fa:	4618      	mov	r0, r3
 81029fc:	f000 fe96 	bl	810372c <RCCEx_PLL3_Config>
 8102a00:	4603      	mov	r3, r0
 8102a02:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102a04:	e007      	b.n	8102a16 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8102a06:	2301      	movs	r3, #1
 8102a08:	75fb      	strb	r3, [r7, #23]
      break;
 8102a0a:	e004      	b.n	8102a16 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8102a0c:	bf00      	nop
 8102a0e:	e002      	b.n	8102a16 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8102a10:	58024400 	.word	0x58024400
      break;
 8102a14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102a16:	7dfb      	ldrb	r3, [r7, #23]
 8102a18:	2b00      	cmp	r3, #0
 8102a1a:	d10a      	bne.n	8102a32 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8102a1c:	4b99      	ldr	r3, [pc, #612]	; (8102c84 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102a20:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8102a24:	687b      	ldr	r3, [r7, #4]
 8102a26:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8102a2a:	4996      	ldr	r1, [pc, #600]	; (8102c84 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102a2c:	4313      	orrs	r3, r2
 8102a2e:	658b      	str	r3, [r1, #88]	; 0x58
 8102a30:	e001      	b.n	8102a36 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102a32:	7dfb      	ldrb	r3, [r7, #23]
 8102a34:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8102a36:	687b      	ldr	r3, [r7, #4]
 8102a38:	681b      	ldr	r3, [r3, #0]
 8102a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8102a3e:	2b00      	cmp	r3, #0
 8102a40:	d032      	beq.n	8102aa8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8102a42:	687b      	ldr	r3, [r7, #4]
 8102a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102a46:	2b30      	cmp	r3, #48	; 0x30
 8102a48:	d01c      	beq.n	8102a84 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8102a4a:	2b30      	cmp	r3, #48	; 0x30
 8102a4c:	d817      	bhi.n	8102a7e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8102a4e:	2b20      	cmp	r3, #32
 8102a50:	d00c      	beq.n	8102a6c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8102a52:	2b20      	cmp	r3, #32
 8102a54:	d813      	bhi.n	8102a7e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8102a56:	2b00      	cmp	r3, #0
 8102a58:	d016      	beq.n	8102a88 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8102a5a:	2b10      	cmp	r3, #16
 8102a5c:	d10f      	bne.n	8102a7e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102a5e:	4b89      	ldr	r3, [pc, #548]	; (8102c84 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102a62:	4a88      	ldr	r2, [pc, #544]	; (8102c84 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102a68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8102a6a:	e00e      	b.n	8102a8a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8102a6c:	687b      	ldr	r3, [r7, #4]
 8102a6e:	3304      	adds	r3, #4
 8102a70:	2102      	movs	r1, #2
 8102a72:	4618      	mov	r0, r3
 8102a74:	f000 fda8 	bl	81035c8 <RCCEx_PLL2_Config>
 8102a78:	4603      	mov	r3, r0
 8102a7a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8102a7c:	e005      	b.n	8102a8a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8102a7e:	2301      	movs	r3, #1
 8102a80:	75fb      	strb	r3, [r7, #23]
      break;
 8102a82:	e002      	b.n	8102a8a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8102a84:	bf00      	nop
 8102a86:	e000      	b.n	8102a8a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8102a88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102a8a:	7dfb      	ldrb	r3, [r7, #23]
 8102a8c:	2b00      	cmp	r3, #0
 8102a8e:	d109      	bne.n	8102aa4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8102a90:	4b7c      	ldr	r3, [pc, #496]	; (8102c84 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102a94:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8102a98:	687b      	ldr	r3, [r7, #4]
 8102a9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102a9c:	4979      	ldr	r1, [pc, #484]	; (8102c84 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102a9e:	4313      	orrs	r3, r2
 8102aa0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8102aa2:	e001      	b.n	8102aa8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102aa4:	7dfb      	ldrb	r3, [r7, #23]
 8102aa6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8102aa8:	687b      	ldr	r3, [r7, #4]
 8102aaa:	681b      	ldr	r3, [r3, #0]
 8102aac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8102ab0:	2b00      	cmp	r3, #0
 8102ab2:	d047      	beq.n	8102b44 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8102ab4:	687b      	ldr	r3, [r7, #4]
 8102ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102ab8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8102abc:	d030      	beq.n	8102b20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8102abe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8102ac2:	d82a      	bhi.n	8102b1a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8102ac4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8102ac8:	d02c      	beq.n	8102b24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8102aca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8102ace:	d824      	bhi.n	8102b1a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8102ad0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8102ad4:	d018      	beq.n	8102b08 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8102ad6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8102ada:	d81e      	bhi.n	8102b1a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8102adc:	2b00      	cmp	r3, #0
 8102ade:	d003      	beq.n	8102ae8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8102ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102ae4:	d007      	beq.n	8102af6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8102ae6:	e018      	b.n	8102b1a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102ae8:	4b66      	ldr	r3, [pc, #408]	; (8102c84 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102aec:	4a65      	ldr	r2, [pc, #404]	; (8102c84 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102aee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102af2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8102af4:	e017      	b.n	8102b26 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102af6:	687b      	ldr	r3, [r7, #4]
 8102af8:	3304      	adds	r3, #4
 8102afa:	2100      	movs	r1, #0
 8102afc:	4618      	mov	r0, r3
 8102afe:	f000 fd63 	bl	81035c8 <RCCEx_PLL2_Config>
 8102b02:	4603      	mov	r3, r0
 8102b04:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8102b06:	e00e      	b.n	8102b26 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102b08:	687b      	ldr	r3, [r7, #4]
 8102b0a:	3324      	adds	r3, #36	; 0x24
 8102b0c:	2100      	movs	r1, #0
 8102b0e:	4618      	mov	r0, r3
 8102b10:	f000 fe0c 	bl	810372c <RCCEx_PLL3_Config>
 8102b14:	4603      	mov	r3, r0
 8102b16:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8102b18:	e005      	b.n	8102b26 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102b1a:	2301      	movs	r3, #1
 8102b1c:	75fb      	strb	r3, [r7, #23]
      break;
 8102b1e:	e002      	b.n	8102b26 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8102b20:	bf00      	nop
 8102b22:	e000      	b.n	8102b26 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8102b24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102b26:	7dfb      	ldrb	r3, [r7, #23]
 8102b28:	2b00      	cmp	r3, #0
 8102b2a:	d109      	bne.n	8102b40 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8102b2c:	4b55      	ldr	r3, [pc, #340]	; (8102c84 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102b30:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8102b34:	687b      	ldr	r3, [r7, #4]
 8102b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102b38:	4952      	ldr	r1, [pc, #328]	; (8102c84 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102b3a:	4313      	orrs	r3, r2
 8102b3c:	650b      	str	r3, [r1, #80]	; 0x50
 8102b3e:	e001      	b.n	8102b44 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102b40:	7dfb      	ldrb	r3, [r7, #23]
 8102b42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8102b44:	687b      	ldr	r3, [r7, #4]
 8102b46:	681b      	ldr	r3, [r3, #0]
 8102b48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8102b4c:	2b00      	cmp	r3, #0
 8102b4e:	d049      	beq.n	8102be4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8102b50:	687b      	ldr	r3, [r7, #4]
 8102b52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102b54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8102b58:	d02e      	beq.n	8102bb8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8102b5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8102b5e:	d828      	bhi.n	8102bb2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8102b60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8102b64:	d02a      	beq.n	8102bbc <HAL_RCCEx_PeriphCLKConfig+0x480>
 8102b66:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8102b6a:	d822      	bhi.n	8102bb2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8102b6c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8102b70:	d026      	beq.n	8102bc0 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8102b72:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8102b76:	d81c      	bhi.n	8102bb2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8102b78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8102b7c:	d010      	beq.n	8102ba0 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8102b7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8102b82:	d816      	bhi.n	8102bb2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8102b84:	2b00      	cmp	r3, #0
 8102b86:	d01d      	beq.n	8102bc4 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8102b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8102b8c:	d111      	bne.n	8102bb2 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8102b8e:	687b      	ldr	r3, [r7, #4]
 8102b90:	3304      	adds	r3, #4
 8102b92:	2101      	movs	r1, #1
 8102b94:	4618      	mov	r0, r3
 8102b96:	f000 fd17 	bl	81035c8 <RCCEx_PLL2_Config>
 8102b9a:	4603      	mov	r3, r0
 8102b9c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8102b9e:	e012      	b.n	8102bc6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102ba0:	687b      	ldr	r3, [r7, #4]
 8102ba2:	3324      	adds	r3, #36	; 0x24
 8102ba4:	2101      	movs	r1, #1
 8102ba6:	4618      	mov	r0, r3
 8102ba8:	f000 fdc0 	bl	810372c <RCCEx_PLL3_Config>
 8102bac:	4603      	mov	r3, r0
 8102bae:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8102bb0:	e009      	b.n	8102bc6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102bb2:	2301      	movs	r3, #1
 8102bb4:	75fb      	strb	r3, [r7, #23]
      break;
 8102bb6:	e006      	b.n	8102bc6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8102bb8:	bf00      	nop
 8102bba:	e004      	b.n	8102bc6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8102bbc:	bf00      	nop
 8102bbe:	e002      	b.n	8102bc6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8102bc0:	bf00      	nop
 8102bc2:	e000      	b.n	8102bc6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8102bc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102bc6:	7dfb      	ldrb	r3, [r7, #23]
 8102bc8:	2b00      	cmp	r3, #0
 8102bca:	d109      	bne.n	8102be0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8102bcc:	4b2d      	ldr	r3, [pc, #180]	; (8102c84 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102bd0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8102bd4:	687b      	ldr	r3, [r7, #4]
 8102bd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102bd8:	492a      	ldr	r1, [pc, #168]	; (8102c84 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102bda:	4313      	orrs	r3, r2
 8102bdc:	650b      	str	r3, [r1, #80]	; 0x50
 8102bde:	e001      	b.n	8102be4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102be0:	7dfb      	ldrb	r3, [r7, #23]
 8102be2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8102be4:	687b      	ldr	r3, [r7, #4]
 8102be6:	681b      	ldr	r3, [r3, #0]
 8102be8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102bec:	2b00      	cmp	r3, #0
 8102bee:	d04d      	beq.n	8102c8c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8102bf0:	687b      	ldr	r3, [r7, #4]
 8102bf2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8102bf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8102bfa:	d02e      	beq.n	8102c5a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8102bfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8102c00:	d828      	bhi.n	8102c54 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8102c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102c06:	d02a      	beq.n	8102c5e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8102c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102c0c:	d822      	bhi.n	8102c54 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8102c0e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8102c12:	d026      	beq.n	8102c62 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8102c14:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8102c18:	d81c      	bhi.n	8102c54 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8102c1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102c1e:	d010      	beq.n	8102c42 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8102c20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102c24:	d816      	bhi.n	8102c54 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8102c26:	2b00      	cmp	r3, #0
 8102c28:	d01d      	beq.n	8102c66 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8102c2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102c2e:	d111      	bne.n	8102c54 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8102c30:	687b      	ldr	r3, [r7, #4]
 8102c32:	3304      	adds	r3, #4
 8102c34:	2101      	movs	r1, #1
 8102c36:	4618      	mov	r0, r3
 8102c38:	f000 fcc6 	bl	81035c8 <RCCEx_PLL2_Config>
 8102c3c:	4603      	mov	r3, r0
 8102c3e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8102c40:	e012      	b.n	8102c68 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102c42:	687b      	ldr	r3, [r7, #4]
 8102c44:	3324      	adds	r3, #36	; 0x24
 8102c46:	2101      	movs	r1, #1
 8102c48:	4618      	mov	r0, r3
 8102c4a:	f000 fd6f 	bl	810372c <RCCEx_PLL3_Config>
 8102c4e:	4603      	mov	r3, r0
 8102c50:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8102c52:	e009      	b.n	8102c68 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8102c54:	2301      	movs	r3, #1
 8102c56:	75fb      	strb	r3, [r7, #23]
      break;
 8102c58:	e006      	b.n	8102c68 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8102c5a:	bf00      	nop
 8102c5c:	e004      	b.n	8102c68 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8102c5e:	bf00      	nop
 8102c60:	e002      	b.n	8102c68 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8102c62:	bf00      	nop
 8102c64:	e000      	b.n	8102c68 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8102c66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102c68:	7dfb      	ldrb	r3, [r7, #23]
 8102c6a:	2b00      	cmp	r3, #0
 8102c6c:	d10c      	bne.n	8102c88 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8102c6e:	4b05      	ldr	r3, [pc, #20]	; (8102c84 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102c72:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8102c76:	687b      	ldr	r3, [r7, #4]
 8102c78:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8102c7c:	4901      	ldr	r1, [pc, #4]	; (8102c84 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102c7e:	4313      	orrs	r3, r2
 8102c80:	658b      	str	r3, [r1, #88]	; 0x58
 8102c82:	e003      	b.n	8102c8c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8102c84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102c88:	7dfb      	ldrb	r3, [r7, #23]
 8102c8a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8102c8c:	687b      	ldr	r3, [r7, #4]
 8102c8e:	681b      	ldr	r3, [r3, #0]
 8102c90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8102c94:	2b00      	cmp	r3, #0
 8102c96:	d02f      	beq.n	8102cf8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8102c98:	687b      	ldr	r3, [r7, #4]
 8102c9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102c9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102ca0:	d00e      	beq.n	8102cc0 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8102ca2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102ca6:	d814      	bhi.n	8102cd2 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8102ca8:	2b00      	cmp	r3, #0
 8102caa:	d015      	beq.n	8102cd8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8102cac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102cb0:	d10f      	bne.n	8102cd2 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102cb2:	4bb0      	ldr	r3, [pc, #704]	; (8102f74 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102cb6:	4aaf      	ldr	r2, [pc, #700]	; (8102f74 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102cbc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8102cbe:	e00c      	b.n	8102cda <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8102cc0:	687b      	ldr	r3, [r7, #4]
 8102cc2:	3304      	adds	r3, #4
 8102cc4:	2101      	movs	r1, #1
 8102cc6:	4618      	mov	r0, r3
 8102cc8:	f000 fc7e 	bl	81035c8 <RCCEx_PLL2_Config>
 8102ccc:	4603      	mov	r3, r0
 8102cce:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8102cd0:	e003      	b.n	8102cda <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102cd2:	2301      	movs	r3, #1
 8102cd4:	75fb      	strb	r3, [r7, #23]
      break;
 8102cd6:	e000      	b.n	8102cda <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8102cd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102cda:	7dfb      	ldrb	r3, [r7, #23]
 8102cdc:	2b00      	cmp	r3, #0
 8102cde:	d109      	bne.n	8102cf4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8102ce0:	4ba4      	ldr	r3, [pc, #656]	; (8102f74 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102ce4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8102ce8:	687b      	ldr	r3, [r7, #4]
 8102cea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102cec:	49a1      	ldr	r1, [pc, #644]	; (8102f74 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102cee:	4313      	orrs	r3, r2
 8102cf0:	650b      	str	r3, [r1, #80]	; 0x50
 8102cf2:	e001      	b.n	8102cf8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102cf4:	7dfb      	ldrb	r3, [r7, #23]
 8102cf6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8102cf8:	687b      	ldr	r3, [r7, #4]
 8102cfa:	681b      	ldr	r3, [r3, #0]
 8102cfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8102d00:	2b00      	cmp	r3, #0
 8102d02:	d032      	beq.n	8102d6a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8102d04:	687b      	ldr	r3, [r7, #4]
 8102d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102d08:	2b03      	cmp	r3, #3
 8102d0a:	d81b      	bhi.n	8102d44 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8102d0c:	a201      	add	r2, pc, #4	; (adr r2, 8102d14 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8102d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102d12:	bf00      	nop
 8102d14:	08102d4b 	.word	0x08102d4b
 8102d18:	08102d25 	.word	0x08102d25
 8102d1c:	08102d33 	.word	0x08102d33
 8102d20:	08102d4b 	.word	0x08102d4b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102d24:	4b93      	ldr	r3, [pc, #588]	; (8102f74 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102d28:	4a92      	ldr	r2, [pc, #584]	; (8102f74 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102d2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102d2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8102d30:	e00c      	b.n	8102d4c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8102d32:	687b      	ldr	r3, [r7, #4]
 8102d34:	3304      	adds	r3, #4
 8102d36:	2102      	movs	r1, #2
 8102d38:	4618      	mov	r0, r3
 8102d3a:	f000 fc45 	bl	81035c8 <RCCEx_PLL2_Config>
 8102d3e:	4603      	mov	r3, r0
 8102d40:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8102d42:	e003      	b.n	8102d4c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8102d44:	2301      	movs	r3, #1
 8102d46:	75fb      	strb	r3, [r7, #23]
      break;
 8102d48:	e000      	b.n	8102d4c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8102d4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102d4c:	7dfb      	ldrb	r3, [r7, #23]
 8102d4e:	2b00      	cmp	r3, #0
 8102d50:	d109      	bne.n	8102d66 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8102d52:	4b88      	ldr	r3, [pc, #544]	; (8102f74 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102d56:	f023 0203 	bic.w	r2, r3, #3
 8102d5a:	687b      	ldr	r3, [r7, #4]
 8102d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102d5e:	4985      	ldr	r1, [pc, #532]	; (8102f74 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102d60:	4313      	orrs	r3, r2
 8102d62:	64cb      	str	r3, [r1, #76]	; 0x4c
 8102d64:	e001      	b.n	8102d6a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102d66:	7dfb      	ldrb	r3, [r7, #23]
 8102d68:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8102d6a:	687b      	ldr	r3, [r7, #4]
 8102d6c:	681b      	ldr	r3, [r3, #0]
 8102d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8102d72:	2b00      	cmp	r3, #0
 8102d74:	f000 8088 	beq.w	8102e88 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8102d78:	4b7f      	ldr	r3, [pc, #508]	; (8102f78 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8102d7a:	681b      	ldr	r3, [r3, #0]
 8102d7c:	4a7e      	ldr	r2, [pc, #504]	; (8102f78 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8102d7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8102d82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8102d84:	f7fe faa8 	bl	81012d8 <HAL_GetTick>
 8102d88:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8102d8a:	e009      	b.n	8102da0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8102d8c:	f7fe faa4 	bl	81012d8 <HAL_GetTick>
 8102d90:	4602      	mov	r2, r0
 8102d92:	693b      	ldr	r3, [r7, #16]
 8102d94:	1ad3      	subs	r3, r2, r3
 8102d96:	2b64      	cmp	r3, #100	; 0x64
 8102d98:	d902      	bls.n	8102da0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8102d9a:	2303      	movs	r3, #3
 8102d9c:	75fb      	strb	r3, [r7, #23]
        break;
 8102d9e:	e005      	b.n	8102dac <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8102da0:	4b75      	ldr	r3, [pc, #468]	; (8102f78 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8102da2:	681b      	ldr	r3, [r3, #0]
 8102da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102da8:	2b00      	cmp	r3, #0
 8102daa:	d0ef      	beq.n	8102d8c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8102dac:	7dfb      	ldrb	r3, [r7, #23]
 8102dae:	2b00      	cmp	r3, #0
 8102db0:	d168      	bne.n	8102e84 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8102db2:	4b70      	ldr	r3, [pc, #448]	; (8102f74 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102db4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8102db6:	687b      	ldr	r3, [r7, #4]
 8102db8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8102dbc:	4053      	eors	r3, r2
 8102dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8102dc2:	2b00      	cmp	r3, #0
 8102dc4:	d013      	beq.n	8102dee <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8102dc6:	4b6b      	ldr	r3, [pc, #428]	; (8102f74 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102dca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8102dce:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8102dd0:	4b68      	ldr	r3, [pc, #416]	; (8102f74 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102dd4:	4a67      	ldr	r2, [pc, #412]	; (8102f74 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102dd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8102dda:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8102ddc:	4b65      	ldr	r3, [pc, #404]	; (8102f74 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102de0:	4a64      	ldr	r2, [pc, #400]	; (8102f74 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102de2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8102de6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8102de8:	4a62      	ldr	r2, [pc, #392]	; (8102f74 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102dea:	68fb      	ldr	r3, [r7, #12]
 8102dec:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8102dee:	687b      	ldr	r3, [r7, #4]
 8102df0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8102df4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102df8:	d115      	bne.n	8102e26 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8102dfa:	f7fe fa6d 	bl	81012d8 <HAL_GetTick>
 8102dfe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8102e00:	e00b      	b.n	8102e1a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8102e02:	f7fe fa69 	bl	81012d8 <HAL_GetTick>
 8102e06:	4602      	mov	r2, r0
 8102e08:	693b      	ldr	r3, [r7, #16]
 8102e0a:	1ad3      	subs	r3, r2, r3
 8102e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8102e10:	4293      	cmp	r3, r2
 8102e12:	d902      	bls.n	8102e1a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8102e14:	2303      	movs	r3, #3
 8102e16:	75fb      	strb	r3, [r7, #23]
            break;
 8102e18:	e005      	b.n	8102e26 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8102e1a:	4b56      	ldr	r3, [pc, #344]	; (8102f74 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102e1e:	f003 0302 	and.w	r3, r3, #2
 8102e22:	2b00      	cmp	r3, #0
 8102e24:	d0ed      	beq.n	8102e02 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8102e26:	7dfb      	ldrb	r3, [r7, #23]
 8102e28:	2b00      	cmp	r3, #0
 8102e2a:	d128      	bne.n	8102e7e <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8102e2c:	687b      	ldr	r3, [r7, #4]
 8102e2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8102e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8102e36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8102e3a:	d10f      	bne.n	8102e5c <HAL_RCCEx_PeriphCLKConfig+0x720>
 8102e3c:	4b4d      	ldr	r3, [pc, #308]	; (8102f74 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102e3e:	691b      	ldr	r3, [r3, #16]
 8102e40:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8102e44:	687b      	ldr	r3, [r7, #4]
 8102e46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8102e4a:	091b      	lsrs	r3, r3, #4
 8102e4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8102e50:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8102e54:	4947      	ldr	r1, [pc, #284]	; (8102f74 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102e56:	4313      	orrs	r3, r2
 8102e58:	610b      	str	r3, [r1, #16]
 8102e5a:	e005      	b.n	8102e68 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8102e5c:	4b45      	ldr	r3, [pc, #276]	; (8102f74 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102e5e:	691b      	ldr	r3, [r3, #16]
 8102e60:	4a44      	ldr	r2, [pc, #272]	; (8102f74 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102e62:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8102e66:	6113      	str	r3, [r2, #16]
 8102e68:	4b42      	ldr	r3, [pc, #264]	; (8102f74 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102e6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8102e6c:	687b      	ldr	r3, [r7, #4]
 8102e6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8102e72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8102e76:	493f      	ldr	r1, [pc, #252]	; (8102f74 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102e78:	4313      	orrs	r3, r2
 8102e7a:	670b      	str	r3, [r1, #112]	; 0x70
 8102e7c:	e004      	b.n	8102e88 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8102e7e:	7dfb      	ldrb	r3, [r7, #23]
 8102e80:	75bb      	strb	r3, [r7, #22]
 8102e82:	e001      	b.n	8102e88 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102e84:	7dfb      	ldrb	r3, [r7, #23]
 8102e86:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8102e88:	687b      	ldr	r3, [r7, #4]
 8102e8a:	681b      	ldr	r3, [r3, #0]
 8102e8c:	f003 0301 	and.w	r3, r3, #1
 8102e90:	2b00      	cmp	r3, #0
 8102e92:	f000 8083 	beq.w	8102f9c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8102e96:	687b      	ldr	r3, [r7, #4]
 8102e98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8102e9a:	2b28      	cmp	r3, #40	; 0x28
 8102e9c:	d866      	bhi.n	8102f6c <HAL_RCCEx_PeriphCLKConfig+0x830>
 8102e9e:	a201      	add	r2, pc, #4	; (adr r2, 8102ea4 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8102ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102ea4:	08102f7d 	.word	0x08102f7d
 8102ea8:	08102f6d 	.word	0x08102f6d
 8102eac:	08102f6d 	.word	0x08102f6d
 8102eb0:	08102f6d 	.word	0x08102f6d
 8102eb4:	08102f6d 	.word	0x08102f6d
 8102eb8:	08102f6d 	.word	0x08102f6d
 8102ebc:	08102f6d 	.word	0x08102f6d
 8102ec0:	08102f6d 	.word	0x08102f6d
 8102ec4:	08102f49 	.word	0x08102f49
 8102ec8:	08102f6d 	.word	0x08102f6d
 8102ecc:	08102f6d 	.word	0x08102f6d
 8102ed0:	08102f6d 	.word	0x08102f6d
 8102ed4:	08102f6d 	.word	0x08102f6d
 8102ed8:	08102f6d 	.word	0x08102f6d
 8102edc:	08102f6d 	.word	0x08102f6d
 8102ee0:	08102f6d 	.word	0x08102f6d
 8102ee4:	08102f5b 	.word	0x08102f5b
 8102ee8:	08102f6d 	.word	0x08102f6d
 8102eec:	08102f6d 	.word	0x08102f6d
 8102ef0:	08102f6d 	.word	0x08102f6d
 8102ef4:	08102f6d 	.word	0x08102f6d
 8102ef8:	08102f6d 	.word	0x08102f6d
 8102efc:	08102f6d 	.word	0x08102f6d
 8102f00:	08102f6d 	.word	0x08102f6d
 8102f04:	08102f7d 	.word	0x08102f7d
 8102f08:	08102f6d 	.word	0x08102f6d
 8102f0c:	08102f6d 	.word	0x08102f6d
 8102f10:	08102f6d 	.word	0x08102f6d
 8102f14:	08102f6d 	.word	0x08102f6d
 8102f18:	08102f6d 	.word	0x08102f6d
 8102f1c:	08102f6d 	.word	0x08102f6d
 8102f20:	08102f6d 	.word	0x08102f6d
 8102f24:	08102f7d 	.word	0x08102f7d
 8102f28:	08102f6d 	.word	0x08102f6d
 8102f2c:	08102f6d 	.word	0x08102f6d
 8102f30:	08102f6d 	.word	0x08102f6d
 8102f34:	08102f6d 	.word	0x08102f6d
 8102f38:	08102f6d 	.word	0x08102f6d
 8102f3c:	08102f6d 	.word	0x08102f6d
 8102f40:	08102f6d 	.word	0x08102f6d
 8102f44:	08102f7d 	.word	0x08102f7d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8102f48:	687b      	ldr	r3, [r7, #4]
 8102f4a:	3304      	adds	r3, #4
 8102f4c:	2101      	movs	r1, #1
 8102f4e:	4618      	mov	r0, r3
 8102f50:	f000 fb3a 	bl	81035c8 <RCCEx_PLL2_Config>
 8102f54:	4603      	mov	r3, r0
 8102f56:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8102f58:	e011      	b.n	8102f7e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102f5a:	687b      	ldr	r3, [r7, #4]
 8102f5c:	3324      	adds	r3, #36	; 0x24
 8102f5e:	2101      	movs	r1, #1
 8102f60:	4618      	mov	r0, r3
 8102f62:	f000 fbe3 	bl	810372c <RCCEx_PLL3_Config>
 8102f66:	4603      	mov	r3, r0
 8102f68:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8102f6a:	e008      	b.n	8102f7e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102f6c:	2301      	movs	r3, #1
 8102f6e:	75fb      	strb	r3, [r7, #23]
      break;
 8102f70:	e005      	b.n	8102f7e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8102f72:	bf00      	nop
 8102f74:	58024400 	.word	0x58024400
 8102f78:	58024800 	.word	0x58024800
      break;
 8102f7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102f7e:	7dfb      	ldrb	r3, [r7, #23]
 8102f80:	2b00      	cmp	r3, #0
 8102f82:	d109      	bne.n	8102f98 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8102f84:	4b96      	ldr	r3, [pc, #600]	; (81031e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8102f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102f88:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8102f8c:	687b      	ldr	r3, [r7, #4]
 8102f8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8102f90:	4993      	ldr	r1, [pc, #588]	; (81031e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8102f92:	4313      	orrs	r3, r2
 8102f94:	654b      	str	r3, [r1, #84]	; 0x54
 8102f96:	e001      	b.n	8102f9c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102f98:	7dfb      	ldrb	r3, [r7, #23]
 8102f9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8102f9c:	687b      	ldr	r3, [r7, #4]
 8102f9e:	681b      	ldr	r3, [r3, #0]
 8102fa0:	f003 0302 	and.w	r3, r3, #2
 8102fa4:	2b00      	cmp	r3, #0
 8102fa6:	d038      	beq.n	810301a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8102fa8:	687b      	ldr	r3, [r7, #4]
 8102faa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8102fac:	2b05      	cmp	r3, #5
 8102fae:	d821      	bhi.n	8102ff4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8102fb0:	a201      	add	r2, pc, #4	; (adr r2, 8102fb8 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8102fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102fb6:	bf00      	nop
 8102fb8:	08102ffb 	.word	0x08102ffb
 8102fbc:	08102fd1 	.word	0x08102fd1
 8102fc0:	08102fe3 	.word	0x08102fe3
 8102fc4:	08102ffb 	.word	0x08102ffb
 8102fc8:	08102ffb 	.word	0x08102ffb
 8102fcc:	08102ffb 	.word	0x08102ffb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8102fd0:	687b      	ldr	r3, [r7, #4]
 8102fd2:	3304      	adds	r3, #4
 8102fd4:	2101      	movs	r1, #1
 8102fd6:	4618      	mov	r0, r3
 8102fd8:	f000 faf6 	bl	81035c8 <RCCEx_PLL2_Config>
 8102fdc:	4603      	mov	r3, r0
 8102fde:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8102fe0:	e00c      	b.n	8102ffc <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102fe2:	687b      	ldr	r3, [r7, #4]
 8102fe4:	3324      	adds	r3, #36	; 0x24
 8102fe6:	2101      	movs	r1, #1
 8102fe8:	4618      	mov	r0, r3
 8102fea:	f000 fb9f 	bl	810372c <RCCEx_PLL3_Config>
 8102fee:	4603      	mov	r3, r0
 8102ff0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8102ff2:	e003      	b.n	8102ffc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102ff4:	2301      	movs	r3, #1
 8102ff6:	75fb      	strb	r3, [r7, #23]
      break;
 8102ff8:	e000      	b.n	8102ffc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8102ffa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102ffc:	7dfb      	ldrb	r3, [r7, #23]
 8102ffe:	2b00      	cmp	r3, #0
 8103000:	d109      	bne.n	8103016 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8103002:	4b77      	ldr	r3, [pc, #476]	; (81031e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8103004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103006:	f023 0207 	bic.w	r2, r3, #7
 810300a:	687b      	ldr	r3, [r7, #4]
 810300c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810300e:	4974      	ldr	r1, [pc, #464]	; (81031e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8103010:	4313      	orrs	r3, r2
 8103012:	654b      	str	r3, [r1, #84]	; 0x54
 8103014:	e001      	b.n	810301a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103016:	7dfb      	ldrb	r3, [r7, #23]
 8103018:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 810301a:	687b      	ldr	r3, [r7, #4]
 810301c:	681b      	ldr	r3, [r3, #0]
 810301e:	f003 0304 	and.w	r3, r3, #4
 8103022:	2b00      	cmp	r3, #0
 8103024:	d03a      	beq.n	810309c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8103026:	687b      	ldr	r3, [r7, #4]
 8103028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810302c:	2b05      	cmp	r3, #5
 810302e:	d821      	bhi.n	8103074 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8103030:	a201      	add	r2, pc, #4	; (adr r2, 8103038 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8103032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103036:	bf00      	nop
 8103038:	0810307b 	.word	0x0810307b
 810303c:	08103051 	.word	0x08103051
 8103040:	08103063 	.word	0x08103063
 8103044:	0810307b 	.word	0x0810307b
 8103048:	0810307b 	.word	0x0810307b
 810304c:	0810307b 	.word	0x0810307b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103050:	687b      	ldr	r3, [r7, #4]
 8103052:	3304      	adds	r3, #4
 8103054:	2101      	movs	r1, #1
 8103056:	4618      	mov	r0, r3
 8103058:	f000 fab6 	bl	81035c8 <RCCEx_PLL2_Config>
 810305c:	4603      	mov	r3, r0
 810305e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8103060:	e00c      	b.n	810307c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103062:	687b      	ldr	r3, [r7, #4]
 8103064:	3324      	adds	r3, #36	; 0x24
 8103066:	2101      	movs	r1, #1
 8103068:	4618      	mov	r0, r3
 810306a:	f000 fb5f 	bl	810372c <RCCEx_PLL3_Config>
 810306e:	4603      	mov	r3, r0
 8103070:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8103072:	e003      	b.n	810307c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103074:	2301      	movs	r3, #1
 8103076:	75fb      	strb	r3, [r7, #23]
      break;
 8103078:	e000      	b.n	810307c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 810307a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810307c:	7dfb      	ldrb	r3, [r7, #23]
 810307e:	2b00      	cmp	r3, #0
 8103080:	d10a      	bne.n	8103098 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8103082:	4b57      	ldr	r3, [pc, #348]	; (81031e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8103084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103086:	f023 0207 	bic.w	r2, r3, #7
 810308a:	687b      	ldr	r3, [r7, #4]
 810308c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8103090:	4953      	ldr	r1, [pc, #332]	; (81031e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8103092:	4313      	orrs	r3, r2
 8103094:	658b      	str	r3, [r1, #88]	; 0x58
 8103096:	e001      	b.n	810309c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103098:	7dfb      	ldrb	r3, [r7, #23]
 810309a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 810309c:	687b      	ldr	r3, [r7, #4]
 810309e:	681b      	ldr	r3, [r3, #0]
 81030a0:	f003 0320 	and.w	r3, r3, #32
 81030a4:	2b00      	cmp	r3, #0
 81030a6:	d04b      	beq.n	8103140 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 81030a8:	687b      	ldr	r3, [r7, #4]
 81030aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81030ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81030b2:	d02e      	beq.n	8103112 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 81030b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81030b8:	d828      	bhi.n	810310c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 81030ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81030be:	d02a      	beq.n	8103116 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 81030c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81030c4:	d822      	bhi.n	810310c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 81030c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81030ca:	d026      	beq.n	810311a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 81030cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81030d0:	d81c      	bhi.n	810310c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 81030d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81030d6:	d010      	beq.n	81030fa <HAL_RCCEx_PeriphCLKConfig+0x9be>
 81030d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81030dc:	d816      	bhi.n	810310c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 81030de:	2b00      	cmp	r3, #0
 81030e0:	d01d      	beq.n	810311e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 81030e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81030e6:	d111      	bne.n	810310c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81030e8:	687b      	ldr	r3, [r7, #4]
 81030ea:	3304      	adds	r3, #4
 81030ec:	2100      	movs	r1, #0
 81030ee:	4618      	mov	r0, r3
 81030f0:	f000 fa6a 	bl	81035c8 <RCCEx_PLL2_Config>
 81030f4:	4603      	mov	r3, r0
 81030f6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 81030f8:	e012      	b.n	8103120 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81030fa:	687b      	ldr	r3, [r7, #4]
 81030fc:	3324      	adds	r3, #36	; 0x24
 81030fe:	2102      	movs	r1, #2
 8103100:	4618      	mov	r0, r3
 8103102:	f000 fb13 	bl	810372c <RCCEx_PLL3_Config>
 8103106:	4603      	mov	r3, r0
 8103108:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 810310a:	e009      	b.n	8103120 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810310c:	2301      	movs	r3, #1
 810310e:	75fb      	strb	r3, [r7, #23]
      break;
 8103110:	e006      	b.n	8103120 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8103112:	bf00      	nop
 8103114:	e004      	b.n	8103120 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8103116:	bf00      	nop
 8103118:	e002      	b.n	8103120 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 810311a:	bf00      	nop
 810311c:	e000      	b.n	8103120 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 810311e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103120:	7dfb      	ldrb	r3, [r7, #23]
 8103122:	2b00      	cmp	r3, #0
 8103124:	d10a      	bne.n	810313c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8103126:	4b2e      	ldr	r3, [pc, #184]	; (81031e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8103128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810312a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 810312e:	687b      	ldr	r3, [r7, #4]
 8103130:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8103134:	492a      	ldr	r1, [pc, #168]	; (81031e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8103136:	4313      	orrs	r3, r2
 8103138:	654b      	str	r3, [r1, #84]	; 0x54
 810313a:	e001      	b.n	8103140 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810313c:	7dfb      	ldrb	r3, [r7, #23]
 810313e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8103140:	687b      	ldr	r3, [r7, #4]
 8103142:	681b      	ldr	r3, [r3, #0]
 8103144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103148:	2b00      	cmp	r3, #0
 810314a:	d04d      	beq.n	81031e8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 810314c:	687b      	ldr	r3, [r7, #4]
 810314e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8103152:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8103156:	d02e      	beq.n	81031b6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8103158:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 810315c:	d828      	bhi.n	81031b0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 810315e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103162:	d02a      	beq.n	81031ba <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8103164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103168:	d822      	bhi.n	81031b0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 810316a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810316e:	d026      	beq.n	81031be <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8103170:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8103174:	d81c      	bhi.n	81031b0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8103176:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810317a:	d010      	beq.n	810319e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 810317c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8103180:	d816      	bhi.n	81031b0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8103182:	2b00      	cmp	r3, #0
 8103184:	d01d      	beq.n	81031c2 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8103186:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810318a:	d111      	bne.n	81031b0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810318c:	687b      	ldr	r3, [r7, #4]
 810318e:	3304      	adds	r3, #4
 8103190:	2100      	movs	r1, #0
 8103192:	4618      	mov	r0, r3
 8103194:	f000 fa18 	bl	81035c8 <RCCEx_PLL2_Config>
 8103198:	4603      	mov	r3, r0
 810319a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 810319c:	e012      	b.n	81031c4 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810319e:	687b      	ldr	r3, [r7, #4]
 81031a0:	3324      	adds	r3, #36	; 0x24
 81031a2:	2102      	movs	r1, #2
 81031a4:	4618      	mov	r0, r3
 81031a6:	f000 fac1 	bl	810372c <RCCEx_PLL3_Config>
 81031aa:	4603      	mov	r3, r0
 81031ac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 81031ae:	e009      	b.n	81031c4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81031b0:	2301      	movs	r3, #1
 81031b2:	75fb      	strb	r3, [r7, #23]
      break;
 81031b4:	e006      	b.n	81031c4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 81031b6:	bf00      	nop
 81031b8:	e004      	b.n	81031c4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 81031ba:	bf00      	nop
 81031bc:	e002      	b.n	81031c4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 81031be:	bf00      	nop
 81031c0:	e000      	b.n	81031c4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 81031c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81031c4:	7dfb      	ldrb	r3, [r7, #23]
 81031c6:	2b00      	cmp	r3, #0
 81031c8:	d10c      	bne.n	81031e4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 81031ca:	4b05      	ldr	r3, [pc, #20]	; (81031e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81031cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81031ce:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 81031d2:	687b      	ldr	r3, [r7, #4]
 81031d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81031d8:	4901      	ldr	r1, [pc, #4]	; (81031e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81031da:	4313      	orrs	r3, r2
 81031dc:	658b      	str	r3, [r1, #88]	; 0x58
 81031de:	e003      	b.n	81031e8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 81031e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81031e4:	7dfb      	ldrb	r3, [r7, #23]
 81031e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81031e8:	687b      	ldr	r3, [r7, #4]
 81031ea:	681b      	ldr	r3, [r3, #0]
 81031ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81031f0:	2b00      	cmp	r3, #0
 81031f2:	d04b      	beq.n	810328c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 81031f4:	687b      	ldr	r3, [r7, #4]
 81031f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81031fa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81031fe:	d02e      	beq.n	810325e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8103200:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8103204:	d828      	bhi.n	8103258 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8103206:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810320a:	d02a      	beq.n	8103262 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 810320c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8103210:	d822      	bhi.n	8103258 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8103212:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8103216:	d026      	beq.n	8103266 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8103218:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 810321c:	d81c      	bhi.n	8103258 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 810321e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103222:	d010      	beq.n	8103246 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8103224:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103228:	d816      	bhi.n	8103258 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 810322a:	2b00      	cmp	r3, #0
 810322c:	d01d      	beq.n	810326a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 810322e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103232:	d111      	bne.n	8103258 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103234:	687b      	ldr	r3, [r7, #4]
 8103236:	3304      	adds	r3, #4
 8103238:	2100      	movs	r1, #0
 810323a:	4618      	mov	r0, r3
 810323c:	f000 f9c4 	bl	81035c8 <RCCEx_PLL2_Config>
 8103240:	4603      	mov	r3, r0
 8103242:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8103244:	e012      	b.n	810326c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103246:	687b      	ldr	r3, [r7, #4]
 8103248:	3324      	adds	r3, #36	; 0x24
 810324a:	2102      	movs	r1, #2
 810324c:	4618      	mov	r0, r3
 810324e:	f000 fa6d 	bl	810372c <RCCEx_PLL3_Config>
 8103252:	4603      	mov	r3, r0
 8103254:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8103256:	e009      	b.n	810326c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103258:	2301      	movs	r3, #1
 810325a:	75fb      	strb	r3, [r7, #23]
      break;
 810325c:	e006      	b.n	810326c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810325e:	bf00      	nop
 8103260:	e004      	b.n	810326c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8103262:	bf00      	nop
 8103264:	e002      	b.n	810326c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8103266:	bf00      	nop
 8103268:	e000      	b.n	810326c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810326a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810326c:	7dfb      	ldrb	r3, [r7, #23]
 810326e:	2b00      	cmp	r3, #0
 8103270:	d10a      	bne.n	8103288 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8103272:	4b9d      	ldr	r3, [pc, #628]	; (81034e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103276:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 810327a:	687b      	ldr	r3, [r7, #4]
 810327c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8103280:	4999      	ldr	r1, [pc, #612]	; (81034e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103282:	4313      	orrs	r3, r2
 8103284:	658b      	str	r3, [r1, #88]	; 0x58
 8103286:	e001      	b.n	810328c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103288:	7dfb      	ldrb	r3, [r7, #23]
 810328a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 810328c:	687b      	ldr	r3, [r7, #4]
 810328e:	681b      	ldr	r3, [r3, #0]
 8103290:	f003 0308 	and.w	r3, r3, #8
 8103294:	2b00      	cmp	r3, #0
 8103296:	d01a      	beq.n	81032ce <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8103298:	687b      	ldr	r3, [r7, #4]
 810329a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810329e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81032a2:	d10a      	bne.n	81032ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 81032a4:	687b      	ldr	r3, [r7, #4]
 81032a6:	3324      	adds	r3, #36	; 0x24
 81032a8:	2102      	movs	r1, #2
 81032aa:	4618      	mov	r0, r3
 81032ac:	f000 fa3e 	bl	810372c <RCCEx_PLL3_Config>
 81032b0:	4603      	mov	r3, r0
 81032b2:	2b00      	cmp	r3, #0
 81032b4:	d001      	beq.n	81032ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 81032b6:	2301      	movs	r3, #1
 81032b8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81032ba:	4b8b      	ldr	r3, [pc, #556]	; (81034e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81032bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81032be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 81032c2:	687b      	ldr	r3, [r7, #4]
 81032c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81032c8:	4987      	ldr	r1, [pc, #540]	; (81034e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81032ca:	4313      	orrs	r3, r2
 81032cc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81032ce:	687b      	ldr	r3, [r7, #4]
 81032d0:	681b      	ldr	r3, [r3, #0]
 81032d2:	f003 0310 	and.w	r3, r3, #16
 81032d6:	2b00      	cmp	r3, #0
 81032d8:	d01a      	beq.n	8103310 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 81032da:	687b      	ldr	r3, [r7, #4]
 81032dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81032e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81032e4:	d10a      	bne.n	81032fc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 81032e6:	687b      	ldr	r3, [r7, #4]
 81032e8:	3324      	adds	r3, #36	; 0x24
 81032ea:	2102      	movs	r1, #2
 81032ec:	4618      	mov	r0, r3
 81032ee:	f000 fa1d 	bl	810372c <RCCEx_PLL3_Config>
 81032f2:	4603      	mov	r3, r0
 81032f4:	2b00      	cmp	r3, #0
 81032f6:	d001      	beq.n	81032fc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 81032f8:	2301      	movs	r3, #1
 81032fa:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 81032fc:	4b7a      	ldr	r3, [pc, #488]	; (81034e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81032fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103300:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8103304:	687b      	ldr	r3, [r7, #4]
 8103306:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810330a:	4977      	ldr	r1, [pc, #476]	; (81034e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810330c:	4313      	orrs	r3, r2
 810330e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8103310:	687b      	ldr	r3, [r7, #4]
 8103312:	681b      	ldr	r3, [r3, #0]
 8103314:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8103318:	2b00      	cmp	r3, #0
 810331a:	d034      	beq.n	8103386 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 810331c:	687b      	ldr	r3, [r7, #4]
 810331e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8103322:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103326:	d01d      	beq.n	8103364 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8103328:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810332c:	d817      	bhi.n	810335e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 810332e:	2b00      	cmp	r3, #0
 8103330:	d003      	beq.n	810333a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8103332:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103336:	d009      	beq.n	810334c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8103338:	e011      	b.n	810335e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810333a:	687b      	ldr	r3, [r7, #4]
 810333c:	3304      	adds	r3, #4
 810333e:	2100      	movs	r1, #0
 8103340:	4618      	mov	r0, r3
 8103342:	f000 f941 	bl	81035c8 <RCCEx_PLL2_Config>
 8103346:	4603      	mov	r3, r0
 8103348:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 810334a:	e00c      	b.n	8103366 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810334c:	687b      	ldr	r3, [r7, #4]
 810334e:	3324      	adds	r3, #36	; 0x24
 8103350:	2102      	movs	r1, #2
 8103352:	4618      	mov	r0, r3
 8103354:	f000 f9ea 	bl	810372c <RCCEx_PLL3_Config>
 8103358:	4603      	mov	r3, r0
 810335a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 810335c:	e003      	b.n	8103366 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810335e:	2301      	movs	r3, #1
 8103360:	75fb      	strb	r3, [r7, #23]
      break;
 8103362:	e000      	b.n	8103366 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8103364:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103366:	7dfb      	ldrb	r3, [r7, #23]
 8103368:	2b00      	cmp	r3, #0
 810336a:	d10a      	bne.n	8103382 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 810336c:	4b5e      	ldr	r3, [pc, #376]	; (81034e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810336e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103370:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8103374:	687b      	ldr	r3, [r7, #4]
 8103376:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810337a:	495b      	ldr	r1, [pc, #364]	; (81034e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810337c:	4313      	orrs	r3, r2
 810337e:	658b      	str	r3, [r1, #88]	; 0x58
 8103380:	e001      	b.n	8103386 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103382:	7dfb      	ldrb	r3, [r7, #23]
 8103384:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8103386:	687b      	ldr	r3, [r7, #4]
 8103388:	681b      	ldr	r3, [r3, #0]
 810338a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810338e:	2b00      	cmp	r3, #0
 8103390:	d033      	beq.n	81033fa <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8103392:	687b      	ldr	r3, [r7, #4]
 8103394:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103398:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810339c:	d01c      	beq.n	81033d8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 810339e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81033a2:	d816      	bhi.n	81033d2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 81033a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81033a8:	d003      	beq.n	81033b2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 81033aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81033ae:	d007      	beq.n	81033c0 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 81033b0:	e00f      	b.n	81033d2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81033b2:	4b4d      	ldr	r3, [pc, #308]	; (81034e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81033b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81033b6:	4a4c      	ldr	r2, [pc, #304]	; (81034e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81033b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81033bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 81033be:	e00c      	b.n	81033da <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81033c0:	687b      	ldr	r3, [r7, #4]
 81033c2:	3324      	adds	r3, #36	; 0x24
 81033c4:	2101      	movs	r1, #1
 81033c6:	4618      	mov	r0, r3
 81033c8:	f000 f9b0 	bl	810372c <RCCEx_PLL3_Config>
 81033cc:	4603      	mov	r3, r0
 81033ce:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 81033d0:	e003      	b.n	81033da <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81033d2:	2301      	movs	r3, #1
 81033d4:	75fb      	strb	r3, [r7, #23]
      break;
 81033d6:	e000      	b.n	81033da <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 81033d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 81033da:	7dfb      	ldrb	r3, [r7, #23]
 81033dc:	2b00      	cmp	r3, #0
 81033de:	d10a      	bne.n	81033f6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 81033e0:	4b41      	ldr	r3, [pc, #260]	; (81034e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81033e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81033e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 81033e8:	687b      	ldr	r3, [r7, #4]
 81033ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81033ee:	493e      	ldr	r1, [pc, #248]	; (81034e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81033f0:	4313      	orrs	r3, r2
 81033f2:	654b      	str	r3, [r1, #84]	; 0x54
 81033f4:	e001      	b.n	81033fa <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81033f6:	7dfb      	ldrb	r3, [r7, #23]
 81033f8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 81033fa:	687b      	ldr	r3, [r7, #4]
 81033fc:	681b      	ldr	r3, [r3, #0]
 81033fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103402:	2b00      	cmp	r3, #0
 8103404:	d029      	beq.n	810345a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8103406:	687b      	ldr	r3, [r7, #4]
 8103408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810340a:	2b00      	cmp	r3, #0
 810340c:	d003      	beq.n	8103416 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 810340e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103412:	d007      	beq.n	8103424 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8103414:	e00f      	b.n	8103436 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103416:	4b34      	ldr	r3, [pc, #208]	; (81034e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810341a:	4a33      	ldr	r2, [pc, #204]	; (81034e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810341c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103420:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8103422:	e00b      	b.n	810343c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103424:	687b      	ldr	r3, [r7, #4]
 8103426:	3304      	adds	r3, #4
 8103428:	2102      	movs	r1, #2
 810342a:	4618      	mov	r0, r3
 810342c:	f000 f8cc 	bl	81035c8 <RCCEx_PLL2_Config>
 8103430:	4603      	mov	r3, r0
 8103432:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8103434:	e002      	b.n	810343c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8103436:	2301      	movs	r3, #1
 8103438:	75fb      	strb	r3, [r7, #23]
      break;
 810343a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810343c:	7dfb      	ldrb	r3, [r7, #23]
 810343e:	2b00      	cmp	r3, #0
 8103440:	d109      	bne.n	8103456 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8103442:	4b29      	ldr	r3, [pc, #164]	; (81034e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103446:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810344a:	687b      	ldr	r3, [r7, #4]
 810344c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810344e:	4926      	ldr	r1, [pc, #152]	; (81034e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103450:	4313      	orrs	r3, r2
 8103452:	64cb      	str	r3, [r1, #76]	; 0x4c
 8103454:	e001      	b.n	810345a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103456:	7dfb      	ldrb	r3, [r7, #23]
 8103458:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 810345a:	687b      	ldr	r3, [r7, #4]
 810345c:	681b      	ldr	r3, [r3, #0]
 810345e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8103462:	2b00      	cmp	r3, #0
 8103464:	d00a      	beq.n	810347c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8103466:	687b      	ldr	r3, [r7, #4]
 8103468:	3324      	adds	r3, #36	; 0x24
 810346a:	2102      	movs	r1, #2
 810346c:	4618      	mov	r0, r3
 810346e:	f000 f95d 	bl	810372c <RCCEx_PLL3_Config>
 8103472:	4603      	mov	r3, r0
 8103474:	2b00      	cmp	r3, #0
 8103476:	d001      	beq.n	810347c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8103478:	2301      	movs	r3, #1
 810347a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 810347c:	687b      	ldr	r3, [r7, #4]
 810347e:	681b      	ldr	r3, [r3, #0]
 8103480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8103484:	2b00      	cmp	r3, #0
 8103486:	d033      	beq.n	81034f0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8103488:	687b      	ldr	r3, [r7, #4]
 810348a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810348c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103490:	d017      	beq.n	81034c2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8103492:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103496:	d811      	bhi.n	81034bc <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8103498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810349c:	d013      	beq.n	81034c6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 810349e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81034a2:	d80b      	bhi.n	81034bc <HAL_RCCEx_PeriphCLKConfig+0xd80>
 81034a4:	2b00      	cmp	r3, #0
 81034a6:	d010      	beq.n	81034ca <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 81034a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81034ac:	d106      	bne.n	81034bc <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81034ae:	4b0e      	ldr	r3, [pc, #56]	; (81034e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81034b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81034b2:	4a0d      	ldr	r2, [pc, #52]	; (81034e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81034b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81034b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 81034ba:	e007      	b.n	81034cc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81034bc:	2301      	movs	r3, #1
 81034be:	75fb      	strb	r3, [r7, #23]
      break;
 81034c0:	e004      	b.n	81034cc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 81034c2:	bf00      	nop
 81034c4:	e002      	b.n	81034cc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 81034c6:	bf00      	nop
 81034c8:	e000      	b.n	81034cc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 81034ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 81034cc:	7dfb      	ldrb	r3, [r7, #23]
 81034ce:	2b00      	cmp	r3, #0
 81034d0:	d10c      	bne.n	81034ec <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81034d2:	4b05      	ldr	r3, [pc, #20]	; (81034e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81034d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81034d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81034da:	687b      	ldr	r3, [r7, #4]
 81034dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81034de:	4902      	ldr	r1, [pc, #8]	; (81034e8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81034e0:	4313      	orrs	r3, r2
 81034e2:	654b      	str	r3, [r1, #84]	; 0x54
 81034e4:	e004      	b.n	81034f0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 81034e6:	bf00      	nop
 81034e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81034ec:	7dfb      	ldrb	r3, [r7, #23]
 81034ee:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81034f0:	687b      	ldr	r3, [r7, #4]
 81034f2:	681b      	ldr	r3, [r3, #0]
 81034f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81034f8:	2b00      	cmp	r3, #0
 81034fa:	d008      	beq.n	810350e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 81034fc:	4b31      	ldr	r3, [pc, #196]	; (81035c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81034fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103500:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8103504:	687b      	ldr	r3, [r7, #4]
 8103506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103508:	492e      	ldr	r1, [pc, #184]	; (81035c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810350a:	4313      	orrs	r3, r2
 810350c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 810350e:	687b      	ldr	r3, [r7, #4]
 8103510:	681b      	ldr	r3, [r3, #0]
 8103512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8103516:	2b00      	cmp	r3, #0
 8103518:	d009      	beq.n	810352e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 810351a:	4b2a      	ldr	r3, [pc, #168]	; (81035c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810351c:	691b      	ldr	r3, [r3, #16]
 810351e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8103522:	687b      	ldr	r3, [r7, #4]
 8103524:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8103528:	4926      	ldr	r1, [pc, #152]	; (81035c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810352a:	4313      	orrs	r3, r2
 810352c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 810352e:	687b      	ldr	r3, [r7, #4]
 8103530:	681b      	ldr	r3, [r3, #0]
 8103532:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8103536:	2b00      	cmp	r3, #0
 8103538:	d008      	beq.n	810354c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810353a:	4b22      	ldr	r3, [pc, #136]	; (81035c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810353c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810353e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8103542:	687b      	ldr	r3, [r7, #4]
 8103544:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8103546:	491f      	ldr	r1, [pc, #124]	; (81035c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103548:	4313      	orrs	r3, r2
 810354a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810354c:	687b      	ldr	r3, [r7, #4]
 810354e:	681b      	ldr	r3, [r3, #0]
 8103550:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8103554:	2b00      	cmp	r3, #0
 8103556:	d00d      	beq.n	8103574 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8103558:	4b1a      	ldr	r3, [pc, #104]	; (81035c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810355a:	691b      	ldr	r3, [r3, #16]
 810355c:	4a19      	ldr	r2, [pc, #100]	; (81035c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810355e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8103562:	6113      	str	r3, [r2, #16]
 8103564:	4b17      	ldr	r3, [pc, #92]	; (81035c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103566:	691a      	ldr	r2, [r3, #16]
 8103568:	687b      	ldr	r3, [r7, #4]
 810356a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 810356e:	4915      	ldr	r1, [pc, #84]	; (81035c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103570:	4313      	orrs	r3, r2
 8103572:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8103574:	687b      	ldr	r3, [r7, #4]
 8103576:	681b      	ldr	r3, [r3, #0]
 8103578:	2b00      	cmp	r3, #0
 810357a:	da08      	bge.n	810358e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 810357c:	4b11      	ldr	r3, [pc, #68]	; (81035c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810357e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103580:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8103584:	687b      	ldr	r3, [r7, #4]
 8103586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103588:	490e      	ldr	r1, [pc, #56]	; (81035c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810358a:	4313      	orrs	r3, r2
 810358c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 810358e:	687b      	ldr	r3, [r7, #4]
 8103590:	681b      	ldr	r3, [r3, #0]
 8103592:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8103596:	2b00      	cmp	r3, #0
 8103598:	d009      	beq.n	81035ae <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 810359a:	4b0a      	ldr	r3, [pc, #40]	; (81035c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810359c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810359e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 81035a2:	687b      	ldr	r3, [r7, #4]
 81035a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81035a8:	4906      	ldr	r1, [pc, #24]	; (81035c4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81035aa:	4313      	orrs	r3, r2
 81035ac:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 81035ae:	7dbb      	ldrb	r3, [r7, #22]
 81035b0:	2b00      	cmp	r3, #0
 81035b2:	d101      	bne.n	81035b8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 81035b4:	2300      	movs	r3, #0
 81035b6:	e000      	b.n	81035ba <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 81035b8:	2301      	movs	r3, #1
}
 81035ba:	4618      	mov	r0, r3
 81035bc:	3718      	adds	r7, #24
 81035be:	46bd      	mov	sp, r7
 81035c0:	bd80      	pop	{r7, pc}
 81035c2:	bf00      	nop
 81035c4:	58024400 	.word	0x58024400

081035c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 81035c8:	b580      	push	{r7, lr}
 81035ca:	b084      	sub	sp, #16
 81035cc:	af00      	add	r7, sp, #0
 81035ce:	6078      	str	r0, [r7, #4]
 81035d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81035d2:	2300      	movs	r3, #0
 81035d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81035d6:	4b54      	ldr	r3, [pc, #336]	; (8103728 <RCCEx_PLL2_Config+0x160>)
 81035d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81035da:	f003 0303 	and.w	r3, r3, #3
 81035de:	2b03      	cmp	r3, #3
 81035e0:	d101      	bne.n	81035e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 81035e2:	2301      	movs	r3, #1
 81035e4:	e09b      	b.n	810371e <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 81035e6:	4b50      	ldr	r3, [pc, #320]	; (8103728 <RCCEx_PLL2_Config+0x160>)
 81035e8:	681b      	ldr	r3, [r3, #0]
 81035ea:	4a4f      	ldr	r2, [pc, #316]	; (8103728 <RCCEx_PLL2_Config+0x160>)
 81035ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 81035f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81035f2:	f7fd fe71 	bl	81012d8 <HAL_GetTick>
 81035f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81035f8:	e008      	b.n	810360c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 81035fa:	f7fd fe6d 	bl	81012d8 <HAL_GetTick>
 81035fe:	4602      	mov	r2, r0
 8103600:	68bb      	ldr	r3, [r7, #8]
 8103602:	1ad3      	subs	r3, r2, r3
 8103604:	2b02      	cmp	r3, #2
 8103606:	d901      	bls.n	810360c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8103608:	2303      	movs	r3, #3
 810360a:	e088      	b.n	810371e <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810360c:	4b46      	ldr	r3, [pc, #280]	; (8103728 <RCCEx_PLL2_Config+0x160>)
 810360e:	681b      	ldr	r3, [r3, #0]
 8103610:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8103614:	2b00      	cmp	r3, #0
 8103616:	d1f0      	bne.n	81035fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8103618:	4b43      	ldr	r3, [pc, #268]	; (8103728 <RCCEx_PLL2_Config+0x160>)
 810361a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810361c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8103620:	687b      	ldr	r3, [r7, #4]
 8103622:	681b      	ldr	r3, [r3, #0]
 8103624:	031b      	lsls	r3, r3, #12
 8103626:	4940      	ldr	r1, [pc, #256]	; (8103728 <RCCEx_PLL2_Config+0x160>)
 8103628:	4313      	orrs	r3, r2
 810362a:	628b      	str	r3, [r1, #40]	; 0x28
 810362c:	687b      	ldr	r3, [r7, #4]
 810362e:	685b      	ldr	r3, [r3, #4]
 8103630:	3b01      	subs	r3, #1
 8103632:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8103636:	687b      	ldr	r3, [r7, #4]
 8103638:	689b      	ldr	r3, [r3, #8]
 810363a:	3b01      	subs	r3, #1
 810363c:	025b      	lsls	r3, r3, #9
 810363e:	b29b      	uxth	r3, r3
 8103640:	431a      	orrs	r2, r3
 8103642:	687b      	ldr	r3, [r7, #4]
 8103644:	68db      	ldr	r3, [r3, #12]
 8103646:	3b01      	subs	r3, #1
 8103648:	041b      	lsls	r3, r3, #16
 810364a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810364e:	431a      	orrs	r2, r3
 8103650:	687b      	ldr	r3, [r7, #4]
 8103652:	691b      	ldr	r3, [r3, #16]
 8103654:	3b01      	subs	r3, #1
 8103656:	061b      	lsls	r3, r3, #24
 8103658:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 810365c:	4932      	ldr	r1, [pc, #200]	; (8103728 <RCCEx_PLL2_Config+0x160>)
 810365e:	4313      	orrs	r3, r2
 8103660:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8103662:	4b31      	ldr	r3, [pc, #196]	; (8103728 <RCCEx_PLL2_Config+0x160>)
 8103664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103666:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 810366a:	687b      	ldr	r3, [r7, #4]
 810366c:	695b      	ldr	r3, [r3, #20]
 810366e:	492e      	ldr	r1, [pc, #184]	; (8103728 <RCCEx_PLL2_Config+0x160>)
 8103670:	4313      	orrs	r3, r2
 8103672:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8103674:	4b2c      	ldr	r3, [pc, #176]	; (8103728 <RCCEx_PLL2_Config+0x160>)
 8103676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103678:	f023 0220 	bic.w	r2, r3, #32
 810367c:	687b      	ldr	r3, [r7, #4]
 810367e:	699b      	ldr	r3, [r3, #24]
 8103680:	4929      	ldr	r1, [pc, #164]	; (8103728 <RCCEx_PLL2_Config+0x160>)
 8103682:	4313      	orrs	r3, r2
 8103684:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8103686:	4b28      	ldr	r3, [pc, #160]	; (8103728 <RCCEx_PLL2_Config+0x160>)
 8103688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810368a:	4a27      	ldr	r2, [pc, #156]	; (8103728 <RCCEx_PLL2_Config+0x160>)
 810368c:	f023 0310 	bic.w	r3, r3, #16
 8103690:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8103692:	4b25      	ldr	r3, [pc, #148]	; (8103728 <RCCEx_PLL2_Config+0x160>)
 8103694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103696:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810369a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810369e:	687a      	ldr	r2, [r7, #4]
 81036a0:	69d2      	ldr	r2, [r2, #28]
 81036a2:	00d2      	lsls	r2, r2, #3
 81036a4:	4920      	ldr	r1, [pc, #128]	; (8103728 <RCCEx_PLL2_Config+0x160>)
 81036a6:	4313      	orrs	r3, r2
 81036a8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 81036aa:	4b1f      	ldr	r3, [pc, #124]	; (8103728 <RCCEx_PLL2_Config+0x160>)
 81036ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81036ae:	4a1e      	ldr	r2, [pc, #120]	; (8103728 <RCCEx_PLL2_Config+0x160>)
 81036b0:	f043 0310 	orr.w	r3, r3, #16
 81036b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 81036b6:	683b      	ldr	r3, [r7, #0]
 81036b8:	2b00      	cmp	r3, #0
 81036ba:	d106      	bne.n	81036ca <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 81036bc:	4b1a      	ldr	r3, [pc, #104]	; (8103728 <RCCEx_PLL2_Config+0x160>)
 81036be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81036c0:	4a19      	ldr	r2, [pc, #100]	; (8103728 <RCCEx_PLL2_Config+0x160>)
 81036c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 81036c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 81036c8:	e00f      	b.n	81036ea <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 81036ca:	683b      	ldr	r3, [r7, #0]
 81036cc:	2b01      	cmp	r3, #1
 81036ce:	d106      	bne.n	81036de <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 81036d0:	4b15      	ldr	r3, [pc, #84]	; (8103728 <RCCEx_PLL2_Config+0x160>)
 81036d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81036d4:	4a14      	ldr	r2, [pc, #80]	; (8103728 <RCCEx_PLL2_Config+0x160>)
 81036d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81036da:	62d3      	str	r3, [r2, #44]	; 0x2c
 81036dc:	e005      	b.n	81036ea <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 81036de:	4b12      	ldr	r3, [pc, #72]	; (8103728 <RCCEx_PLL2_Config+0x160>)
 81036e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81036e2:	4a11      	ldr	r2, [pc, #68]	; (8103728 <RCCEx_PLL2_Config+0x160>)
 81036e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81036e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 81036ea:	4b0f      	ldr	r3, [pc, #60]	; (8103728 <RCCEx_PLL2_Config+0x160>)
 81036ec:	681b      	ldr	r3, [r3, #0]
 81036ee:	4a0e      	ldr	r2, [pc, #56]	; (8103728 <RCCEx_PLL2_Config+0x160>)
 81036f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 81036f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81036f6:	f7fd fdef 	bl	81012d8 <HAL_GetTick>
 81036fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81036fc:	e008      	b.n	8103710 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 81036fe:	f7fd fdeb 	bl	81012d8 <HAL_GetTick>
 8103702:	4602      	mov	r2, r0
 8103704:	68bb      	ldr	r3, [r7, #8]
 8103706:	1ad3      	subs	r3, r2, r3
 8103708:	2b02      	cmp	r3, #2
 810370a:	d901      	bls.n	8103710 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 810370c:	2303      	movs	r3, #3
 810370e:	e006      	b.n	810371e <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8103710:	4b05      	ldr	r3, [pc, #20]	; (8103728 <RCCEx_PLL2_Config+0x160>)
 8103712:	681b      	ldr	r3, [r3, #0]
 8103714:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8103718:	2b00      	cmp	r3, #0
 810371a:	d0f0      	beq.n	81036fe <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 810371c:	7bfb      	ldrb	r3, [r7, #15]
}
 810371e:	4618      	mov	r0, r3
 8103720:	3710      	adds	r7, #16
 8103722:	46bd      	mov	sp, r7
 8103724:	bd80      	pop	{r7, pc}
 8103726:	bf00      	nop
 8103728:	58024400 	.word	0x58024400

0810372c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 810372c:	b580      	push	{r7, lr}
 810372e:	b084      	sub	sp, #16
 8103730:	af00      	add	r7, sp, #0
 8103732:	6078      	str	r0, [r7, #4]
 8103734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8103736:	2300      	movs	r3, #0
 8103738:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810373a:	4b54      	ldr	r3, [pc, #336]	; (810388c <RCCEx_PLL3_Config+0x160>)
 810373c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810373e:	f003 0303 	and.w	r3, r3, #3
 8103742:	2b03      	cmp	r3, #3
 8103744:	d101      	bne.n	810374a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8103746:	2301      	movs	r3, #1
 8103748:	e09b      	b.n	8103882 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810374a:	4b50      	ldr	r3, [pc, #320]	; (810388c <RCCEx_PLL3_Config+0x160>)
 810374c:	681b      	ldr	r3, [r3, #0]
 810374e:	4a4f      	ldr	r2, [pc, #316]	; (810388c <RCCEx_PLL3_Config+0x160>)
 8103750:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8103754:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103756:	f7fd fdbf 	bl	81012d8 <HAL_GetTick>
 810375a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810375c:	e008      	b.n	8103770 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 810375e:	f7fd fdbb 	bl	81012d8 <HAL_GetTick>
 8103762:	4602      	mov	r2, r0
 8103764:	68bb      	ldr	r3, [r7, #8]
 8103766:	1ad3      	subs	r3, r2, r3
 8103768:	2b02      	cmp	r3, #2
 810376a:	d901      	bls.n	8103770 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 810376c:	2303      	movs	r3, #3
 810376e:	e088      	b.n	8103882 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8103770:	4b46      	ldr	r3, [pc, #280]	; (810388c <RCCEx_PLL3_Config+0x160>)
 8103772:	681b      	ldr	r3, [r3, #0]
 8103774:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8103778:	2b00      	cmp	r3, #0
 810377a:	d1f0      	bne.n	810375e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 810377c:	4b43      	ldr	r3, [pc, #268]	; (810388c <RCCEx_PLL3_Config+0x160>)
 810377e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103780:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8103784:	687b      	ldr	r3, [r7, #4]
 8103786:	681b      	ldr	r3, [r3, #0]
 8103788:	051b      	lsls	r3, r3, #20
 810378a:	4940      	ldr	r1, [pc, #256]	; (810388c <RCCEx_PLL3_Config+0x160>)
 810378c:	4313      	orrs	r3, r2
 810378e:	628b      	str	r3, [r1, #40]	; 0x28
 8103790:	687b      	ldr	r3, [r7, #4]
 8103792:	685b      	ldr	r3, [r3, #4]
 8103794:	3b01      	subs	r3, #1
 8103796:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810379a:	687b      	ldr	r3, [r7, #4]
 810379c:	689b      	ldr	r3, [r3, #8]
 810379e:	3b01      	subs	r3, #1
 81037a0:	025b      	lsls	r3, r3, #9
 81037a2:	b29b      	uxth	r3, r3
 81037a4:	431a      	orrs	r2, r3
 81037a6:	687b      	ldr	r3, [r7, #4]
 81037a8:	68db      	ldr	r3, [r3, #12]
 81037aa:	3b01      	subs	r3, #1
 81037ac:	041b      	lsls	r3, r3, #16
 81037ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 81037b2:	431a      	orrs	r2, r3
 81037b4:	687b      	ldr	r3, [r7, #4]
 81037b6:	691b      	ldr	r3, [r3, #16]
 81037b8:	3b01      	subs	r3, #1
 81037ba:	061b      	lsls	r3, r3, #24
 81037bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 81037c0:	4932      	ldr	r1, [pc, #200]	; (810388c <RCCEx_PLL3_Config+0x160>)
 81037c2:	4313      	orrs	r3, r2
 81037c4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 81037c6:	4b31      	ldr	r3, [pc, #196]	; (810388c <RCCEx_PLL3_Config+0x160>)
 81037c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81037ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 81037ce:	687b      	ldr	r3, [r7, #4]
 81037d0:	695b      	ldr	r3, [r3, #20]
 81037d2:	492e      	ldr	r1, [pc, #184]	; (810388c <RCCEx_PLL3_Config+0x160>)
 81037d4:	4313      	orrs	r3, r2
 81037d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 81037d8:	4b2c      	ldr	r3, [pc, #176]	; (810388c <RCCEx_PLL3_Config+0x160>)
 81037da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81037dc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 81037e0:	687b      	ldr	r3, [r7, #4]
 81037e2:	699b      	ldr	r3, [r3, #24]
 81037e4:	4929      	ldr	r1, [pc, #164]	; (810388c <RCCEx_PLL3_Config+0x160>)
 81037e6:	4313      	orrs	r3, r2
 81037e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 81037ea:	4b28      	ldr	r3, [pc, #160]	; (810388c <RCCEx_PLL3_Config+0x160>)
 81037ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81037ee:	4a27      	ldr	r2, [pc, #156]	; (810388c <RCCEx_PLL3_Config+0x160>)
 81037f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81037f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 81037f6:	4b25      	ldr	r3, [pc, #148]	; (810388c <RCCEx_PLL3_Config+0x160>)
 81037f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81037fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81037fe:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8103802:	687a      	ldr	r2, [r7, #4]
 8103804:	69d2      	ldr	r2, [r2, #28]
 8103806:	00d2      	lsls	r2, r2, #3
 8103808:	4920      	ldr	r1, [pc, #128]	; (810388c <RCCEx_PLL3_Config+0x160>)
 810380a:	4313      	orrs	r3, r2
 810380c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810380e:	4b1f      	ldr	r3, [pc, #124]	; (810388c <RCCEx_PLL3_Config+0x160>)
 8103810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103812:	4a1e      	ldr	r2, [pc, #120]	; (810388c <RCCEx_PLL3_Config+0x160>)
 8103814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8103818:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810381a:	683b      	ldr	r3, [r7, #0]
 810381c:	2b00      	cmp	r3, #0
 810381e:	d106      	bne.n	810382e <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8103820:	4b1a      	ldr	r3, [pc, #104]	; (810388c <RCCEx_PLL3_Config+0x160>)
 8103822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103824:	4a19      	ldr	r2, [pc, #100]	; (810388c <RCCEx_PLL3_Config+0x160>)
 8103826:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810382a:	62d3      	str	r3, [r2, #44]	; 0x2c
 810382c:	e00f      	b.n	810384e <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810382e:	683b      	ldr	r3, [r7, #0]
 8103830:	2b01      	cmp	r3, #1
 8103832:	d106      	bne.n	8103842 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8103834:	4b15      	ldr	r3, [pc, #84]	; (810388c <RCCEx_PLL3_Config+0x160>)
 8103836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103838:	4a14      	ldr	r2, [pc, #80]	; (810388c <RCCEx_PLL3_Config+0x160>)
 810383a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 810383e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8103840:	e005      	b.n	810384e <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8103842:	4b12      	ldr	r3, [pc, #72]	; (810388c <RCCEx_PLL3_Config+0x160>)
 8103844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103846:	4a11      	ldr	r2, [pc, #68]	; (810388c <RCCEx_PLL3_Config+0x160>)
 8103848:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 810384c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810384e:	4b0f      	ldr	r3, [pc, #60]	; (810388c <RCCEx_PLL3_Config+0x160>)
 8103850:	681b      	ldr	r3, [r3, #0]
 8103852:	4a0e      	ldr	r2, [pc, #56]	; (810388c <RCCEx_PLL3_Config+0x160>)
 8103854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8103858:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810385a:	f7fd fd3d 	bl	81012d8 <HAL_GetTick>
 810385e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8103860:	e008      	b.n	8103874 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8103862:	f7fd fd39 	bl	81012d8 <HAL_GetTick>
 8103866:	4602      	mov	r2, r0
 8103868:	68bb      	ldr	r3, [r7, #8]
 810386a:	1ad3      	subs	r3, r2, r3
 810386c:	2b02      	cmp	r3, #2
 810386e:	d901      	bls.n	8103874 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8103870:	2303      	movs	r3, #3
 8103872:	e006      	b.n	8103882 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8103874:	4b05      	ldr	r3, [pc, #20]	; (810388c <RCCEx_PLL3_Config+0x160>)
 8103876:	681b      	ldr	r3, [r3, #0]
 8103878:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810387c:	2b00      	cmp	r3, #0
 810387e:	d0f0      	beq.n	8103862 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8103880:	7bfb      	ldrb	r3, [r7, #15]
}
 8103882:	4618      	mov	r0, r3
 8103884:	3710      	adds	r7, #16
 8103886:	46bd      	mov	sp, r7
 8103888:	bd80      	pop	{r7, pc}
 810388a:	bf00      	nop
 810388c:	58024400 	.word	0x58024400

08103890 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8103890:	b580      	push	{r7, lr}
 8103892:	b084      	sub	sp, #16
 8103894:	af00      	add	r7, sp, #0
 8103896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8103898:	2301      	movs	r3, #1
 810389a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 810389c:	687b      	ldr	r3, [r7, #4]
 810389e:	2b00      	cmp	r3, #0
 81038a0:	d069      	beq.n	8103976 <HAL_RTC_Init+0xe6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 81038a2:	687b      	ldr	r3, [r7, #4]
 81038a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 81038a8:	b2db      	uxtb	r3, r3
 81038aa:	2b00      	cmp	r3, #0
 81038ac:	d106      	bne.n	81038bc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 81038ae:	687b      	ldr	r3, [r7, #4]
 81038b0:	2200      	movs	r2, #0
 81038b2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 81038b6:	6878      	ldr	r0, [r7, #4]
 81038b8:	f7fd fb16 	bl	8100ee8 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 81038bc:	687b      	ldr	r3, [r7, #4]
 81038be:	2202      	movs	r2, #2
 81038c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 81038c4:	687b      	ldr	r3, [r7, #4]
 81038c6:	681b      	ldr	r3, [r3, #0]
 81038c8:	22ca      	movs	r2, #202	; 0xca
 81038ca:	625a      	str	r2, [r3, #36]	; 0x24
 81038cc:	687b      	ldr	r3, [r7, #4]
 81038ce:	681b      	ldr	r3, [r3, #0]
 81038d0:	2253      	movs	r2, #83	; 0x53
 81038d2:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 81038d4:	6878      	ldr	r0, [r7, #4]
 81038d6:	f000 fa46 	bl	8103d66 <RTC_EnterInitMode>
 81038da:	4603      	mov	r3, r0
 81038dc:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 81038de:	7bfb      	ldrb	r3, [r7, #15]
 81038e0:	2b00      	cmp	r3, #0
 81038e2:	d13d      	bne.n	8103960 <HAL_RTC_Init+0xd0>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 81038e4:	687b      	ldr	r3, [r7, #4]
 81038e6:	681b      	ldr	r3, [r3, #0]
 81038e8:	689b      	ldr	r3, [r3, #8]
 81038ea:	687a      	ldr	r2, [r7, #4]
 81038ec:	6812      	ldr	r2, [r2, #0]
 81038ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 81038f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 81038f6:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 81038f8:	687b      	ldr	r3, [r7, #4]
 81038fa:	681b      	ldr	r3, [r3, #0]
 81038fc:	6899      	ldr	r1, [r3, #8]
 81038fe:	687b      	ldr	r3, [r7, #4]
 8103900:	685a      	ldr	r2, [r3, #4]
 8103902:	687b      	ldr	r3, [r7, #4]
 8103904:	691b      	ldr	r3, [r3, #16]
 8103906:	431a      	orrs	r2, r3
 8103908:	687b      	ldr	r3, [r7, #4]
 810390a:	699b      	ldr	r3, [r3, #24]
 810390c:	431a      	orrs	r2, r3
 810390e:	687b      	ldr	r3, [r7, #4]
 8103910:	681b      	ldr	r3, [r3, #0]
 8103912:	430a      	orrs	r2, r1
 8103914:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8103916:	687b      	ldr	r3, [r7, #4]
 8103918:	689b      	ldr	r3, [r3, #8]
 810391a:	0419      	lsls	r1, r3, #16
 810391c:	687b      	ldr	r3, [r7, #4]
 810391e:	68da      	ldr	r2, [r3, #12]
 8103920:	687b      	ldr	r3, [r7, #4]
 8103922:	681b      	ldr	r3, [r3, #0]
 8103924:	430a      	orrs	r2, r1
 8103926:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8103928:	6878      	ldr	r0, [r7, #4]
 810392a:	f000 fa4f 	bl	8103dcc <RTC_ExitInitMode>
 810392e:	4603      	mov	r3, r0
 8103930:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 8103932:	7bfb      	ldrb	r3, [r7, #15]
 8103934:	2b00      	cmp	r3, #0
 8103936:	d113      	bne.n	8103960 <HAL_RTC_Init+0xd0>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8103938:	687b      	ldr	r3, [r7, #4]
 810393a:	681b      	ldr	r3, [r3, #0]
 810393c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810393e:	687b      	ldr	r3, [r7, #4]
 8103940:	681b      	ldr	r3, [r3, #0]
 8103942:	f022 0203 	bic.w	r2, r2, #3
 8103946:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8103948:	687b      	ldr	r3, [r7, #4]
 810394a:	681b      	ldr	r3, [r3, #0]
 810394c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 810394e:	687b      	ldr	r3, [r7, #4]
 8103950:	69da      	ldr	r2, [r3, #28]
 8103952:	687b      	ldr	r3, [r7, #4]
 8103954:	695b      	ldr	r3, [r3, #20]
 8103956:	431a      	orrs	r2, r3
 8103958:	687b      	ldr	r3, [r7, #4]
 810395a:	681b      	ldr	r3, [r3, #0]
 810395c:	430a      	orrs	r2, r1
 810395e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8103960:	687b      	ldr	r3, [r7, #4]
 8103962:	681b      	ldr	r3, [r3, #0]
 8103964:	22ff      	movs	r2, #255	; 0xff
 8103966:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8103968:	7bfb      	ldrb	r3, [r7, #15]
 810396a:	2b00      	cmp	r3, #0
 810396c:	d103      	bne.n	8103976 <HAL_RTC_Init+0xe6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 810396e:	687b      	ldr	r3, [r7, #4]
 8103970:	2201      	movs	r2, #1
 8103972:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8103976:	7bfb      	ldrb	r3, [r7, #15]
}
 8103978:	4618      	mov	r0, r3
 810397a:	3710      	adds	r7, #16
 810397c:	46bd      	mov	sp, r7
 810397e:	bd80      	pop	{r7, pc}

08103980 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8103980:	b590      	push	{r4, r7, lr}
 8103982:	b087      	sub	sp, #28
 8103984:	af00      	add	r7, sp, #0
 8103986:	60f8      	str	r0, [r7, #12]
 8103988:	60b9      	str	r1, [r7, #8]
 810398a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 810398c:	68fb      	ldr	r3, [r7, #12]
 810398e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8103992:	2b01      	cmp	r3, #1
 8103994:	d101      	bne.n	810399a <HAL_RTC_SetTime+0x1a>
 8103996:	2302      	movs	r3, #2
 8103998:	e08b      	b.n	8103ab2 <HAL_RTC_SetTime+0x132>
 810399a:	68fb      	ldr	r3, [r7, #12]
 810399c:	2201      	movs	r2, #1
 810399e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 81039a2:	68fb      	ldr	r3, [r7, #12]
 81039a4:	2202      	movs	r2, #2
 81039a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 81039aa:	68fb      	ldr	r3, [r7, #12]
 81039ac:	681b      	ldr	r3, [r3, #0]
 81039ae:	22ca      	movs	r2, #202	; 0xca
 81039b0:	625a      	str	r2, [r3, #36]	; 0x24
 81039b2:	68fb      	ldr	r3, [r7, #12]
 81039b4:	681b      	ldr	r3, [r3, #0]
 81039b6:	2253      	movs	r2, #83	; 0x53
 81039b8:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 81039ba:	68f8      	ldr	r0, [r7, #12]
 81039bc:	f000 f9d3 	bl	8103d66 <RTC_EnterInitMode>
 81039c0:	4603      	mov	r3, r0
 81039c2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 81039c4:	7cfb      	ldrb	r3, [r7, #19]
 81039c6:	2b00      	cmp	r3, #0
 81039c8:	d163      	bne.n	8103a92 <HAL_RTC_SetTime+0x112>
  {
    if(Format == RTC_FORMAT_BIN)
 81039ca:	687b      	ldr	r3, [r7, #4]
 81039cc:	2b00      	cmp	r3, #0
 81039ce:	d126      	bne.n	8103a1e <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 81039d0:	68fb      	ldr	r3, [r7, #12]
 81039d2:	681b      	ldr	r3, [r3, #0]
 81039d4:	689b      	ldr	r3, [r3, #8]
 81039d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81039da:	2b00      	cmp	r3, #0
 81039dc:	d102      	bne.n	81039e4 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 81039de:	68bb      	ldr	r3, [r7, #8]
 81039e0:	2200      	movs	r2, #0
 81039e2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 81039e4:	68bb      	ldr	r3, [r7, #8]
 81039e6:	781b      	ldrb	r3, [r3, #0]
 81039e8:	4618      	mov	r0, r3
 81039ea:	f000 fa2d 	bl	8103e48 <RTC_ByteToBcd2>
 81039ee:	4603      	mov	r3, r0
 81039f0:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 81039f2:	68bb      	ldr	r3, [r7, #8]
 81039f4:	785b      	ldrb	r3, [r3, #1]
 81039f6:	4618      	mov	r0, r3
 81039f8:	f000 fa26 	bl	8103e48 <RTC_ByteToBcd2>
 81039fc:	4603      	mov	r3, r0
 81039fe:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8103a00:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8103a02:	68bb      	ldr	r3, [r7, #8]
 8103a04:	789b      	ldrb	r3, [r3, #2]
 8103a06:	4618      	mov	r0, r3
 8103a08:	f000 fa1e 	bl	8103e48 <RTC_ByteToBcd2>
 8103a0c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8103a0e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8103a12:	68bb      	ldr	r3, [r7, #8]
 8103a14:	78db      	ldrb	r3, [r3, #3]
 8103a16:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8103a18:	4313      	orrs	r3, r2
 8103a1a:	617b      	str	r3, [r7, #20]
 8103a1c:	e018      	b.n	8103a50 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8103a1e:	68fb      	ldr	r3, [r7, #12]
 8103a20:	681b      	ldr	r3, [r3, #0]
 8103a22:	689b      	ldr	r3, [r3, #8]
 8103a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103a28:	2b00      	cmp	r3, #0
 8103a2a:	d102      	bne.n	8103a32 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8103a2c:	68bb      	ldr	r3, [r7, #8]
 8103a2e:	2200      	movs	r2, #0
 8103a30:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8103a32:	68bb      	ldr	r3, [r7, #8]
 8103a34:	781b      	ldrb	r3, [r3, #0]
 8103a36:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8103a38:	68bb      	ldr	r3, [r7, #8]
 8103a3a:	785b      	ldrb	r3, [r3, #1]
 8103a3c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8103a3e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8103a40:	68ba      	ldr	r2, [r7, #8]
 8103a42:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8103a44:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8103a46:	68bb      	ldr	r3, [r7, #8]
 8103a48:	78db      	ldrb	r3, [r3, #3]
 8103a4a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8103a4c:	4313      	orrs	r3, r2
 8103a4e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8103a50:	68fb      	ldr	r3, [r7, #12]
 8103a52:	681a      	ldr	r2, [r3, #0]
 8103a54:	697b      	ldr	r3, [r7, #20]
 8103a56:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8103a5a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8103a5e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8103a60:	68fb      	ldr	r3, [r7, #12]
 8103a62:	681b      	ldr	r3, [r3, #0]
 8103a64:	689a      	ldr	r2, [r3, #8]
 8103a66:	68fb      	ldr	r3, [r7, #12]
 8103a68:	681b      	ldr	r3, [r3, #0]
 8103a6a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8103a6e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8103a70:	68fb      	ldr	r3, [r7, #12]
 8103a72:	681b      	ldr	r3, [r3, #0]
 8103a74:	6899      	ldr	r1, [r3, #8]
 8103a76:	68bb      	ldr	r3, [r7, #8]
 8103a78:	68da      	ldr	r2, [r3, #12]
 8103a7a:	68bb      	ldr	r3, [r7, #8]
 8103a7c:	691b      	ldr	r3, [r3, #16]
 8103a7e:	431a      	orrs	r2, r3
 8103a80:	68fb      	ldr	r3, [r7, #12]
 8103a82:	681b      	ldr	r3, [r3, #0]
 8103a84:	430a      	orrs	r2, r1
 8103a86:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8103a88:	68f8      	ldr	r0, [r7, #12]
 8103a8a:	f000 f99f 	bl	8103dcc <RTC_ExitInitMode>
 8103a8e:	4603      	mov	r3, r0
 8103a90:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8103a92:	68fb      	ldr	r3, [r7, #12]
 8103a94:	681b      	ldr	r3, [r3, #0]
 8103a96:	22ff      	movs	r2, #255	; 0xff
 8103a98:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8103a9a:	7cfb      	ldrb	r3, [r7, #19]
 8103a9c:	2b00      	cmp	r3, #0
 8103a9e:	d103      	bne.n	8103aa8 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8103aa0:	68fb      	ldr	r3, [r7, #12]
 8103aa2:	2201      	movs	r2, #1
 8103aa4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8103aa8:	68fb      	ldr	r3, [r7, #12]
 8103aaa:	2200      	movs	r2, #0
 8103aac:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8103ab0:	7cfb      	ldrb	r3, [r7, #19]
}
 8103ab2:	4618      	mov	r0, r3
 8103ab4:	371c      	adds	r7, #28
 8103ab6:	46bd      	mov	sp, r7
 8103ab8:	bd90      	pop	{r4, r7, pc}

08103aba <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8103aba:	b580      	push	{r7, lr}
 8103abc:	b086      	sub	sp, #24
 8103abe:	af00      	add	r7, sp, #0
 8103ac0:	60f8      	str	r0, [r7, #12]
 8103ac2:	60b9      	str	r1, [r7, #8]
 8103ac4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8103ac6:	68fb      	ldr	r3, [r7, #12]
 8103ac8:	681b      	ldr	r3, [r3, #0]
 8103aca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8103acc:	68bb      	ldr	r3, [r7, #8]
 8103ace:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8103ad0:	68fb      	ldr	r3, [r7, #12]
 8103ad2:	681b      	ldr	r3, [r3, #0]
 8103ad4:	691b      	ldr	r3, [r3, #16]
 8103ad6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8103ada:	68bb      	ldr	r3, [r7, #8]
 8103adc:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8103ade:	68fb      	ldr	r3, [r7, #12]
 8103ae0:	681b      	ldr	r3, [r3, #0]
 8103ae2:	681b      	ldr	r3, [r3, #0]
 8103ae4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8103ae8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8103aec:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8103aee:	697b      	ldr	r3, [r7, #20]
 8103af0:	0c1b      	lsrs	r3, r3, #16
 8103af2:	b2db      	uxtb	r3, r3
 8103af4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8103af8:	b2da      	uxtb	r2, r3
 8103afa:	68bb      	ldr	r3, [r7, #8]
 8103afc:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8103afe:	697b      	ldr	r3, [r7, #20]
 8103b00:	0a1b      	lsrs	r3, r3, #8
 8103b02:	b2db      	uxtb	r3, r3
 8103b04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103b08:	b2da      	uxtb	r2, r3
 8103b0a:	68bb      	ldr	r3, [r7, #8]
 8103b0c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8103b0e:	697b      	ldr	r3, [r7, #20]
 8103b10:	b2db      	uxtb	r3, r3
 8103b12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103b16:	b2da      	uxtb	r2, r3
 8103b18:	68bb      	ldr	r3, [r7, #8]
 8103b1a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8103b1c:	697b      	ldr	r3, [r7, #20]
 8103b1e:	0d9b      	lsrs	r3, r3, #22
 8103b20:	b2db      	uxtb	r3, r3
 8103b22:	f003 0301 	and.w	r3, r3, #1
 8103b26:	b2da      	uxtb	r2, r3
 8103b28:	68bb      	ldr	r3, [r7, #8]
 8103b2a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8103b2c:	687b      	ldr	r3, [r7, #4]
 8103b2e:	2b00      	cmp	r3, #0
 8103b30:	d11a      	bne.n	8103b68 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8103b32:	68bb      	ldr	r3, [r7, #8]
 8103b34:	781b      	ldrb	r3, [r3, #0]
 8103b36:	4618      	mov	r0, r3
 8103b38:	f000 f9a6 	bl	8103e88 <RTC_Bcd2ToByte>
 8103b3c:	4603      	mov	r3, r0
 8103b3e:	461a      	mov	r2, r3
 8103b40:	68bb      	ldr	r3, [r7, #8]
 8103b42:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8103b44:	68bb      	ldr	r3, [r7, #8]
 8103b46:	785b      	ldrb	r3, [r3, #1]
 8103b48:	4618      	mov	r0, r3
 8103b4a:	f000 f99d 	bl	8103e88 <RTC_Bcd2ToByte>
 8103b4e:	4603      	mov	r3, r0
 8103b50:	461a      	mov	r2, r3
 8103b52:	68bb      	ldr	r3, [r7, #8]
 8103b54:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8103b56:	68bb      	ldr	r3, [r7, #8]
 8103b58:	789b      	ldrb	r3, [r3, #2]
 8103b5a:	4618      	mov	r0, r3
 8103b5c:	f000 f994 	bl	8103e88 <RTC_Bcd2ToByte>
 8103b60:	4603      	mov	r3, r0
 8103b62:	461a      	mov	r2, r3
 8103b64:	68bb      	ldr	r3, [r7, #8]
 8103b66:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8103b68:	2300      	movs	r3, #0
}
 8103b6a:	4618      	mov	r0, r3
 8103b6c:	3718      	adds	r7, #24
 8103b6e:	46bd      	mov	sp, r7
 8103b70:	bd80      	pop	{r7, pc}

08103b72 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8103b72:	b590      	push	{r4, r7, lr}
 8103b74:	b087      	sub	sp, #28
 8103b76:	af00      	add	r7, sp, #0
 8103b78:	60f8      	str	r0, [r7, #12]
 8103b7a:	60b9      	str	r1, [r7, #8]
 8103b7c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8103b7e:	68fb      	ldr	r3, [r7, #12]
 8103b80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8103b84:	2b01      	cmp	r3, #1
 8103b86:	d101      	bne.n	8103b8c <HAL_RTC_SetDate+0x1a>
 8103b88:	2302      	movs	r3, #2
 8103b8a:	e075      	b.n	8103c78 <HAL_RTC_SetDate+0x106>
 8103b8c:	68fb      	ldr	r3, [r7, #12]
 8103b8e:	2201      	movs	r2, #1
 8103b90:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8103b94:	68fb      	ldr	r3, [r7, #12]
 8103b96:	2202      	movs	r2, #2
 8103b98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8103b9c:	687b      	ldr	r3, [r7, #4]
 8103b9e:	2b00      	cmp	r3, #0
 8103ba0:	d10e      	bne.n	8103bc0 <HAL_RTC_SetDate+0x4e>
 8103ba2:	68bb      	ldr	r3, [r7, #8]
 8103ba4:	785b      	ldrb	r3, [r3, #1]
 8103ba6:	f003 0310 	and.w	r3, r3, #16
 8103baa:	2b00      	cmp	r3, #0
 8103bac:	d008      	beq.n	8103bc0 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8103bae:	68bb      	ldr	r3, [r7, #8]
 8103bb0:	785b      	ldrb	r3, [r3, #1]
 8103bb2:	f023 0310 	bic.w	r3, r3, #16
 8103bb6:	b2db      	uxtb	r3, r3
 8103bb8:	330a      	adds	r3, #10
 8103bba:	b2da      	uxtb	r2, r3
 8103bbc:	68bb      	ldr	r3, [r7, #8]
 8103bbe:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8103bc0:	687b      	ldr	r3, [r7, #4]
 8103bc2:	2b00      	cmp	r3, #0
 8103bc4:	d11c      	bne.n	8103c00 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8103bc6:	68bb      	ldr	r3, [r7, #8]
 8103bc8:	78db      	ldrb	r3, [r3, #3]
 8103bca:	4618      	mov	r0, r3
 8103bcc:	f000 f93c 	bl	8103e48 <RTC_ByteToBcd2>
 8103bd0:	4603      	mov	r3, r0
 8103bd2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8103bd4:	68bb      	ldr	r3, [r7, #8]
 8103bd6:	785b      	ldrb	r3, [r3, #1]
 8103bd8:	4618      	mov	r0, r3
 8103bda:	f000 f935 	bl	8103e48 <RTC_ByteToBcd2>
 8103bde:	4603      	mov	r3, r0
 8103be0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8103be2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8103be4:	68bb      	ldr	r3, [r7, #8]
 8103be6:	789b      	ldrb	r3, [r3, #2]
 8103be8:	4618      	mov	r0, r3
 8103bea:	f000 f92d 	bl	8103e48 <RTC_ByteToBcd2>
 8103bee:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8103bf0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8103bf4:	68bb      	ldr	r3, [r7, #8]
 8103bf6:	781b      	ldrb	r3, [r3, #0]
 8103bf8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8103bfa:	4313      	orrs	r3, r2
 8103bfc:	617b      	str	r3, [r7, #20]
 8103bfe:	e00e      	b.n	8103c1e <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8103c00:	68bb      	ldr	r3, [r7, #8]
 8103c02:	78db      	ldrb	r3, [r3, #3]
 8103c04:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8103c06:	68bb      	ldr	r3, [r7, #8]
 8103c08:	785b      	ldrb	r3, [r3, #1]
 8103c0a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8103c0c:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8103c0e:	68ba      	ldr	r2, [r7, #8]
 8103c10:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8103c12:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8103c14:	68bb      	ldr	r3, [r7, #8]
 8103c16:	781b      	ldrb	r3, [r3, #0]
 8103c18:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8103c1a:	4313      	orrs	r3, r2
 8103c1c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8103c1e:	68fb      	ldr	r3, [r7, #12]
 8103c20:	681b      	ldr	r3, [r3, #0]
 8103c22:	22ca      	movs	r2, #202	; 0xca
 8103c24:	625a      	str	r2, [r3, #36]	; 0x24
 8103c26:	68fb      	ldr	r3, [r7, #12]
 8103c28:	681b      	ldr	r3, [r3, #0]
 8103c2a:	2253      	movs	r2, #83	; 0x53
 8103c2c:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8103c2e:	68f8      	ldr	r0, [r7, #12]
 8103c30:	f000 f899 	bl	8103d66 <RTC_EnterInitMode>
 8103c34:	4603      	mov	r3, r0
 8103c36:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8103c38:	7cfb      	ldrb	r3, [r7, #19]
 8103c3a:	2b00      	cmp	r3, #0
 8103c3c:	d10c      	bne.n	8103c58 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8103c3e:	68fb      	ldr	r3, [r7, #12]
 8103c40:	681a      	ldr	r2, [r3, #0]
 8103c42:	697b      	ldr	r3, [r7, #20]
 8103c44:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8103c48:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8103c4c:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8103c4e:	68f8      	ldr	r0, [r7, #12]
 8103c50:	f000 f8bc 	bl	8103dcc <RTC_ExitInitMode>
 8103c54:	4603      	mov	r3, r0
 8103c56:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8103c58:	68fb      	ldr	r3, [r7, #12]
 8103c5a:	681b      	ldr	r3, [r3, #0]
 8103c5c:	22ff      	movs	r2, #255	; 0xff
 8103c5e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8103c60:	7cfb      	ldrb	r3, [r7, #19]
 8103c62:	2b00      	cmp	r3, #0
 8103c64:	d103      	bne.n	8103c6e <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8103c66:	68fb      	ldr	r3, [r7, #12]
 8103c68:	2201      	movs	r2, #1
 8103c6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8103c6e:	68fb      	ldr	r3, [r7, #12]
 8103c70:	2200      	movs	r2, #0
 8103c72:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8103c76:	7cfb      	ldrb	r3, [r7, #19]


}
 8103c78:	4618      	mov	r0, r3
 8103c7a:	371c      	adds	r7, #28
 8103c7c:	46bd      	mov	sp, r7
 8103c7e:	bd90      	pop	{r4, r7, pc}

08103c80 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8103c80:	b580      	push	{r7, lr}
 8103c82:	b086      	sub	sp, #24
 8103c84:	af00      	add	r7, sp, #0
 8103c86:	60f8      	str	r0, [r7, #12]
 8103c88:	60b9      	str	r1, [r7, #8]
 8103c8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8103c8c:	68fb      	ldr	r3, [r7, #12]
 8103c8e:	681b      	ldr	r3, [r3, #0]
 8103c90:	685b      	ldr	r3, [r3, #4]
 8103c92:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8103c96:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8103c9a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8103c9c:	697b      	ldr	r3, [r7, #20]
 8103c9e:	0c1b      	lsrs	r3, r3, #16
 8103ca0:	b2da      	uxtb	r2, r3
 8103ca2:	68bb      	ldr	r3, [r7, #8]
 8103ca4:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8103ca6:	697b      	ldr	r3, [r7, #20]
 8103ca8:	0a1b      	lsrs	r3, r3, #8
 8103caa:	b2db      	uxtb	r3, r3
 8103cac:	f003 031f 	and.w	r3, r3, #31
 8103cb0:	b2da      	uxtb	r2, r3
 8103cb2:	68bb      	ldr	r3, [r7, #8]
 8103cb4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8103cb6:	697b      	ldr	r3, [r7, #20]
 8103cb8:	b2db      	uxtb	r3, r3
 8103cba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8103cbe:	b2da      	uxtb	r2, r3
 8103cc0:	68bb      	ldr	r3, [r7, #8]
 8103cc2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8103cc4:	697b      	ldr	r3, [r7, #20]
 8103cc6:	0b5b      	lsrs	r3, r3, #13
 8103cc8:	b2db      	uxtb	r3, r3
 8103cca:	f003 0307 	and.w	r3, r3, #7
 8103cce:	b2da      	uxtb	r2, r3
 8103cd0:	68bb      	ldr	r3, [r7, #8]
 8103cd2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8103cd4:	687b      	ldr	r3, [r7, #4]
 8103cd6:	2b00      	cmp	r3, #0
 8103cd8:	d11a      	bne.n	8103d10 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8103cda:	68bb      	ldr	r3, [r7, #8]
 8103cdc:	78db      	ldrb	r3, [r3, #3]
 8103cde:	4618      	mov	r0, r3
 8103ce0:	f000 f8d2 	bl	8103e88 <RTC_Bcd2ToByte>
 8103ce4:	4603      	mov	r3, r0
 8103ce6:	461a      	mov	r2, r3
 8103ce8:	68bb      	ldr	r3, [r7, #8]
 8103cea:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8103cec:	68bb      	ldr	r3, [r7, #8]
 8103cee:	785b      	ldrb	r3, [r3, #1]
 8103cf0:	4618      	mov	r0, r3
 8103cf2:	f000 f8c9 	bl	8103e88 <RTC_Bcd2ToByte>
 8103cf6:	4603      	mov	r3, r0
 8103cf8:	461a      	mov	r2, r3
 8103cfa:	68bb      	ldr	r3, [r7, #8]
 8103cfc:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8103cfe:	68bb      	ldr	r3, [r7, #8]
 8103d00:	789b      	ldrb	r3, [r3, #2]
 8103d02:	4618      	mov	r0, r3
 8103d04:	f000 f8c0 	bl	8103e88 <RTC_Bcd2ToByte>
 8103d08:	4603      	mov	r3, r0
 8103d0a:	461a      	mov	r2, r3
 8103d0c:	68bb      	ldr	r3, [r7, #8]
 8103d0e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8103d10:	2300      	movs	r3, #0
}
 8103d12:	4618      	mov	r0, r3
 8103d14:	3718      	adds	r7, #24
 8103d16:	46bd      	mov	sp, r7
 8103d18:	bd80      	pop	{r7, pc}

08103d1a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8103d1a:	b580      	push	{r7, lr}
 8103d1c:	b084      	sub	sp, #16
 8103d1e:	af00      	add	r7, sp, #0
 8103d20:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8103d22:	687b      	ldr	r3, [r7, #4]
 8103d24:	681b      	ldr	r3, [r3, #0]
 8103d26:	68da      	ldr	r2, [r3, #12]
 8103d28:	687b      	ldr	r3, [r7, #4]
 8103d2a:	681b      	ldr	r3, [r3, #0]
 8103d2c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8103d30:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8103d32:	f7fd fad1 	bl	81012d8 <HAL_GetTick>
 8103d36:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8103d38:	e009      	b.n	8103d4e <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8103d3a:	f7fd facd 	bl	81012d8 <HAL_GetTick>
 8103d3e:	4602      	mov	r2, r0
 8103d40:	68fb      	ldr	r3, [r7, #12]
 8103d42:	1ad3      	subs	r3, r2, r3
 8103d44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8103d48:	d901      	bls.n	8103d4e <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8103d4a:	2303      	movs	r3, #3
 8103d4c:	e007      	b.n	8103d5e <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8103d4e:	687b      	ldr	r3, [r7, #4]
 8103d50:	681b      	ldr	r3, [r3, #0]
 8103d52:	68db      	ldr	r3, [r3, #12]
 8103d54:	f003 0320 	and.w	r3, r3, #32
 8103d58:	2b00      	cmp	r3, #0
 8103d5a:	d0ee      	beq.n	8103d3a <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8103d5c:	2300      	movs	r3, #0
}
 8103d5e:	4618      	mov	r0, r3
 8103d60:	3710      	adds	r7, #16
 8103d62:	46bd      	mov	sp, r7
 8103d64:	bd80      	pop	{r7, pc}

08103d66 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8103d66:	b580      	push	{r7, lr}
 8103d68:	b084      	sub	sp, #16
 8103d6a:	af00      	add	r7, sp, #0
 8103d6c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8103d6e:	2300      	movs	r3, #0
 8103d70:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8103d72:	687b      	ldr	r3, [r7, #4]
 8103d74:	681b      	ldr	r3, [r3, #0]
 8103d76:	68db      	ldr	r3, [r3, #12]
 8103d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103d7c:	2b00      	cmp	r3, #0
 8103d7e:	d120      	bne.n	8103dc2 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8103d80:	687b      	ldr	r3, [r7, #4]
 8103d82:	681b      	ldr	r3, [r3, #0]
 8103d84:	f04f 32ff 	mov.w	r2, #4294967295
 8103d88:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8103d8a:	f7fd faa5 	bl	81012d8 <HAL_GetTick>
 8103d8e:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8103d90:	e00d      	b.n	8103dae <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8103d92:	f7fd faa1 	bl	81012d8 <HAL_GetTick>
 8103d96:	4602      	mov	r2, r0
 8103d98:	68bb      	ldr	r3, [r7, #8]
 8103d9a:	1ad3      	subs	r3, r2, r3
 8103d9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8103da0:	d905      	bls.n	8103dae <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8103da2:	2303      	movs	r3, #3
 8103da4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8103da6:	687b      	ldr	r3, [r7, #4]
 8103da8:	2203      	movs	r2, #3
 8103daa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8103dae:	687b      	ldr	r3, [r7, #4]
 8103db0:	681b      	ldr	r3, [r3, #0]
 8103db2:	68db      	ldr	r3, [r3, #12]
 8103db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103db8:	2b00      	cmp	r3, #0
 8103dba:	d102      	bne.n	8103dc2 <RTC_EnterInitMode+0x5c>
 8103dbc:	7bfb      	ldrb	r3, [r7, #15]
 8103dbe:	2b03      	cmp	r3, #3
 8103dc0:	d1e7      	bne.n	8103d92 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 8103dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8103dc4:	4618      	mov	r0, r3
 8103dc6:	3710      	adds	r7, #16
 8103dc8:	46bd      	mov	sp, r7
 8103dca:	bd80      	pop	{r7, pc}

08103dcc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8103dcc:	b580      	push	{r7, lr}
 8103dce:	b084      	sub	sp, #16
 8103dd0:	af00      	add	r7, sp, #0
 8103dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8103dd4:	2300      	movs	r3, #0
 8103dd6:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8103dd8:	4b1a      	ldr	r3, [pc, #104]	; (8103e44 <RTC_ExitInitMode+0x78>)
 8103dda:	68db      	ldr	r3, [r3, #12]
 8103ddc:	4a19      	ldr	r2, [pc, #100]	; (8103e44 <RTC_ExitInitMode+0x78>)
 8103dde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8103de2:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8103de4:	4b17      	ldr	r3, [pc, #92]	; (8103e44 <RTC_ExitInitMode+0x78>)
 8103de6:	689b      	ldr	r3, [r3, #8]
 8103de8:	f003 0320 	and.w	r3, r3, #32
 8103dec:	2b00      	cmp	r3, #0
 8103dee:	d10c      	bne.n	8103e0a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8103df0:	6878      	ldr	r0, [r7, #4]
 8103df2:	f7ff ff92 	bl	8103d1a <HAL_RTC_WaitForSynchro>
 8103df6:	4603      	mov	r3, r0
 8103df8:	2b00      	cmp	r3, #0
 8103dfa:	d01e      	beq.n	8103e3a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8103dfc:	687b      	ldr	r3, [r7, #4]
 8103dfe:	2203      	movs	r2, #3
 8103e00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8103e04:	2303      	movs	r3, #3
 8103e06:	73fb      	strb	r3, [r7, #15]
 8103e08:	e017      	b.n	8103e3a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8103e0a:	4b0e      	ldr	r3, [pc, #56]	; (8103e44 <RTC_ExitInitMode+0x78>)
 8103e0c:	689b      	ldr	r3, [r3, #8]
 8103e0e:	4a0d      	ldr	r2, [pc, #52]	; (8103e44 <RTC_ExitInitMode+0x78>)
 8103e10:	f023 0320 	bic.w	r3, r3, #32
 8103e14:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8103e16:	6878      	ldr	r0, [r7, #4]
 8103e18:	f7ff ff7f 	bl	8103d1a <HAL_RTC_WaitForSynchro>
 8103e1c:	4603      	mov	r3, r0
 8103e1e:	2b00      	cmp	r3, #0
 8103e20:	d005      	beq.n	8103e2e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8103e22:	687b      	ldr	r3, [r7, #4]
 8103e24:	2203      	movs	r2, #3
 8103e26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8103e2a:	2303      	movs	r3, #3
 8103e2c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8103e2e:	4b05      	ldr	r3, [pc, #20]	; (8103e44 <RTC_ExitInitMode+0x78>)
 8103e30:	689b      	ldr	r3, [r3, #8]
 8103e32:	4a04      	ldr	r2, [pc, #16]	; (8103e44 <RTC_ExitInitMode+0x78>)
 8103e34:	f043 0320 	orr.w	r3, r3, #32
 8103e38:	6093      	str	r3, [r2, #8]
  }

  return status;
 8103e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8103e3c:	4618      	mov	r0, r3
 8103e3e:	3710      	adds	r7, #16
 8103e40:	46bd      	mov	sp, r7
 8103e42:	bd80      	pop	{r7, pc}
 8103e44:	58004000 	.word	0x58004000

08103e48 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8103e48:	b480      	push	{r7}
 8103e4a:	b085      	sub	sp, #20
 8103e4c:	af00      	add	r7, sp, #0
 8103e4e:	4603      	mov	r3, r0
 8103e50:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8103e52:	2300      	movs	r3, #0
 8103e54:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8103e56:	79fb      	ldrb	r3, [r7, #7]
 8103e58:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8103e5a:	e005      	b.n	8103e68 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8103e5c:	68fb      	ldr	r3, [r7, #12]
 8103e5e:	3301      	adds	r3, #1
 8103e60:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8103e62:	7afb      	ldrb	r3, [r7, #11]
 8103e64:	3b0a      	subs	r3, #10
 8103e66:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8103e68:	7afb      	ldrb	r3, [r7, #11]
 8103e6a:	2b09      	cmp	r3, #9
 8103e6c:	d8f6      	bhi.n	8103e5c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8103e6e:	68fb      	ldr	r3, [r7, #12]
 8103e70:	b2db      	uxtb	r3, r3
 8103e72:	011b      	lsls	r3, r3, #4
 8103e74:	b2da      	uxtb	r2, r3
 8103e76:	7afb      	ldrb	r3, [r7, #11]
 8103e78:	4313      	orrs	r3, r2
 8103e7a:	b2db      	uxtb	r3, r3
}
 8103e7c:	4618      	mov	r0, r3
 8103e7e:	3714      	adds	r7, #20
 8103e80:	46bd      	mov	sp, r7
 8103e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e86:	4770      	bx	lr

08103e88 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8103e88:	b480      	push	{r7}
 8103e8a:	b085      	sub	sp, #20
 8103e8c:	af00      	add	r7, sp, #0
 8103e8e:	4603      	mov	r3, r0
 8103e90:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8103e92:	79fb      	ldrb	r3, [r7, #7]
 8103e94:	091b      	lsrs	r3, r3, #4
 8103e96:	b2db      	uxtb	r3, r3
 8103e98:	461a      	mov	r2, r3
 8103e9a:	0092      	lsls	r2, r2, #2
 8103e9c:	4413      	add	r3, r2
 8103e9e:	005b      	lsls	r3, r3, #1
 8103ea0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8103ea2:	79fb      	ldrb	r3, [r7, #7]
 8103ea4:	f003 030f 	and.w	r3, r3, #15
 8103ea8:	b2da      	uxtb	r2, r3
 8103eaa:	7bfb      	ldrb	r3, [r7, #15]
 8103eac:	4413      	add	r3, r2
 8103eae:	b2db      	uxtb	r3, r3
}
 8103eb0:	4618      	mov	r0, r3
 8103eb2:	3714      	adds	r7, #20
 8103eb4:	46bd      	mov	sp, r7
 8103eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103eba:	4770      	bx	lr

08103ebc <HAL_RTCEx_SetRefClock>:
  * @brief  Enable the RTC reference clock detection.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetRefClock(RTC_HandleTypeDef * hrtc)
{
 8103ebc:	b580      	push	{r7, lr}
 8103ebe:	b084      	sub	sp, #16
 8103ec0:	af00      	add	r7, sp, #0
 8103ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8103ec4:	687b      	ldr	r3, [r7, #4]
 8103ec6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8103eca:	2b01      	cmp	r3, #1
 8103ecc:	d101      	bne.n	8103ed2 <HAL_RTCEx_SetRefClock+0x16>
 8103ece:	2302      	movs	r3, #2
 8103ed0:	e034      	b.n	8103f3c <HAL_RTCEx_SetRefClock+0x80>
 8103ed2:	687b      	ldr	r3, [r7, #4]
 8103ed4:	2201      	movs	r2, #1
 8103ed6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8103eda:	687b      	ldr	r3, [r7, #4]
 8103edc:	2202      	movs	r2, #2
 8103ede:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8103ee2:	687b      	ldr	r3, [r7, #4]
 8103ee4:	681b      	ldr	r3, [r3, #0]
 8103ee6:	22ca      	movs	r2, #202	; 0xca
 8103ee8:	625a      	str	r2, [r3, #36]	; 0x24
 8103eea:	687b      	ldr	r3, [r7, #4]
 8103eec:	681b      	ldr	r3, [r3, #0]
 8103eee:	2253      	movs	r2, #83	; 0x53
 8103ef0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8103ef2:	6878      	ldr	r0, [r7, #4]
 8103ef4:	f7ff ff37 	bl	8103d66 <RTC_EnterInitMode>
 8103ef8:	4603      	mov	r3, r0
 8103efa:	73fb      	strb	r3, [r7, #15]
  if (status == HAL_OK)
 8103efc:	7bfb      	ldrb	r3, [r7, #15]
 8103efe:	2b00      	cmp	r3, #0
 8103f00:	d10c      	bne.n	8103f1c <HAL_RTCEx_SetRefClock+0x60>
  {
    __HAL_RTC_CLOCKREF_DETECTION_ENABLE(hrtc);
 8103f02:	687b      	ldr	r3, [r7, #4]
 8103f04:	681b      	ldr	r3, [r3, #0]
 8103f06:	689a      	ldr	r2, [r3, #8]
 8103f08:	687b      	ldr	r3, [r7, #4]
 8103f0a:	681b      	ldr	r3, [r3, #0]
 8103f0c:	f042 0210 	orr.w	r2, r2, #16
 8103f10:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8103f12:	6878      	ldr	r0, [r7, #4]
 8103f14:	f7ff ff5a 	bl	8103dcc <RTC_ExitInitMode>
 8103f18:	4603      	mov	r3, r0
 8103f1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8103f1c:	687b      	ldr	r3, [r7, #4]
 8103f1e:	681b      	ldr	r3, [r3, #0]
 8103f20:	22ff      	movs	r2, #255	; 0xff
 8103f22:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 8103f24:	7bfb      	ldrb	r3, [r7, #15]
 8103f26:	2b00      	cmp	r3, #0
 8103f28:	d103      	bne.n	8103f32 <HAL_RTCEx_SetRefClock+0x76>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8103f2a:	687b      	ldr	r3, [r7, #4]
 8103f2c:	2201      	movs	r2, #1
 8103f2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8103f32:	687b      	ldr	r3, [r7, #4]
 8103f34:	2200      	movs	r2, #0
 8103f36:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8103f3a:	2300      	movs	r3, #0
}
 8103f3c:	4618      	mov	r0, r3
 8103f3e:	3710      	adds	r7, #16
 8103f40:	46bd      	mov	sp, r7
 8103f42:	bd80      	pop	{r7, pc}

08103f44 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8103f44:	b580      	push	{r7, lr}
 8103f46:	b084      	sub	sp, #16
 8103f48:	af00      	add	r7, sp, #0
 8103f4a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8103f4c:	687b      	ldr	r3, [r7, #4]
 8103f4e:	2b00      	cmp	r3, #0
 8103f50:	d101      	bne.n	8103f56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8103f52:	2301      	movs	r3, #1
 8103f54:	e0f1      	b.n	810413a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8103f56:	687b      	ldr	r3, [r7, #4]
 8103f58:	2200      	movs	r2, #0
 8103f5a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8103f5c:	687b      	ldr	r3, [r7, #4]
 8103f5e:	681b      	ldr	r3, [r3, #0]
 8103f60:	4a78      	ldr	r2, [pc, #480]	; (8104144 <HAL_SPI_Init+0x200>)
 8103f62:	4293      	cmp	r3, r2
 8103f64:	d00f      	beq.n	8103f86 <HAL_SPI_Init+0x42>
 8103f66:	687b      	ldr	r3, [r7, #4]
 8103f68:	681b      	ldr	r3, [r3, #0]
 8103f6a:	4a77      	ldr	r2, [pc, #476]	; (8104148 <HAL_SPI_Init+0x204>)
 8103f6c:	4293      	cmp	r3, r2
 8103f6e:	d00a      	beq.n	8103f86 <HAL_SPI_Init+0x42>
 8103f70:	687b      	ldr	r3, [r7, #4]
 8103f72:	681b      	ldr	r3, [r3, #0]
 8103f74:	4a75      	ldr	r2, [pc, #468]	; (810414c <HAL_SPI_Init+0x208>)
 8103f76:	4293      	cmp	r3, r2
 8103f78:	d005      	beq.n	8103f86 <HAL_SPI_Init+0x42>
 8103f7a:	687b      	ldr	r3, [r7, #4]
 8103f7c:	68db      	ldr	r3, [r3, #12]
 8103f7e:	2b0f      	cmp	r3, #15
 8103f80:	d901      	bls.n	8103f86 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8103f82:	2301      	movs	r3, #1
 8103f84:	e0d9      	b.n	810413a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8103f86:	6878      	ldr	r0, [r7, #4]
 8103f88:	f000 ff5d 	bl	8104e46 <SPI_GetPacketSize>
 8103f8c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8103f8e:	687b      	ldr	r3, [r7, #4]
 8103f90:	681b      	ldr	r3, [r3, #0]
 8103f92:	4a6c      	ldr	r2, [pc, #432]	; (8104144 <HAL_SPI_Init+0x200>)
 8103f94:	4293      	cmp	r3, r2
 8103f96:	d00c      	beq.n	8103fb2 <HAL_SPI_Init+0x6e>
 8103f98:	687b      	ldr	r3, [r7, #4]
 8103f9a:	681b      	ldr	r3, [r3, #0]
 8103f9c:	4a6a      	ldr	r2, [pc, #424]	; (8104148 <HAL_SPI_Init+0x204>)
 8103f9e:	4293      	cmp	r3, r2
 8103fa0:	d007      	beq.n	8103fb2 <HAL_SPI_Init+0x6e>
 8103fa2:	687b      	ldr	r3, [r7, #4]
 8103fa4:	681b      	ldr	r3, [r3, #0]
 8103fa6:	4a69      	ldr	r2, [pc, #420]	; (810414c <HAL_SPI_Init+0x208>)
 8103fa8:	4293      	cmp	r3, r2
 8103faa:	d002      	beq.n	8103fb2 <HAL_SPI_Init+0x6e>
 8103fac:	68fb      	ldr	r3, [r7, #12]
 8103fae:	2b08      	cmp	r3, #8
 8103fb0:	d811      	bhi.n	8103fd6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8103fb2:	687b      	ldr	r3, [r7, #4]
 8103fb4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8103fb6:	4a63      	ldr	r2, [pc, #396]	; (8104144 <HAL_SPI_Init+0x200>)
 8103fb8:	4293      	cmp	r3, r2
 8103fba:	d009      	beq.n	8103fd0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8103fbc:	687b      	ldr	r3, [r7, #4]
 8103fbe:	681b      	ldr	r3, [r3, #0]
 8103fc0:	4a61      	ldr	r2, [pc, #388]	; (8104148 <HAL_SPI_Init+0x204>)
 8103fc2:	4293      	cmp	r3, r2
 8103fc4:	d004      	beq.n	8103fd0 <HAL_SPI_Init+0x8c>
 8103fc6:	687b      	ldr	r3, [r7, #4]
 8103fc8:	681b      	ldr	r3, [r3, #0]
 8103fca:	4a60      	ldr	r2, [pc, #384]	; (810414c <HAL_SPI_Init+0x208>)
 8103fcc:	4293      	cmp	r3, r2
 8103fce:	d104      	bne.n	8103fda <HAL_SPI_Init+0x96>
 8103fd0:	68fb      	ldr	r3, [r7, #12]
 8103fd2:	2b10      	cmp	r3, #16
 8103fd4:	d901      	bls.n	8103fda <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8103fd6:	2301      	movs	r3, #1
 8103fd8:	e0af      	b.n	810413a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8103fda:	687b      	ldr	r3, [r7, #4]
 8103fdc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8103fe0:	b2db      	uxtb	r3, r3
 8103fe2:	2b00      	cmp	r3, #0
 8103fe4:	d106      	bne.n	8103ff4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8103fe6:	687b      	ldr	r3, [r7, #4]
 8103fe8:	2200      	movs	r2, #0
 8103fea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8103fee:	6878      	ldr	r0, [r7, #4]
 8103ff0:	f7fc ffd8 	bl	8100fa4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8103ff4:	687b      	ldr	r3, [r7, #4]
 8103ff6:	2202      	movs	r2, #2
 8103ff8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8103ffc:	687b      	ldr	r3, [r7, #4]
 8103ffe:	681b      	ldr	r3, [r3, #0]
 8104000:	681a      	ldr	r2, [r3, #0]
 8104002:	687b      	ldr	r3, [r7, #4]
 8104004:	681b      	ldr	r3, [r3, #0]
 8104006:	f022 0201 	bic.w	r2, r2, #1
 810400a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 810400c:	687b      	ldr	r3, [r7, #4]
 810400e:	681b      	ldr	r3, [r3, #0]
 8104010:	689b      	ldr	r3, [r3, #8]
 8104012:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8104016:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8104018:	687b      	ldr	r3, [r7, #4]
 810401a:	699b      	ldr	r3, [r3, #24]
 810401c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8104020:	d119      	bne.n	8104056 <HAL_SPI_Init+0x112>
 8104022:	687b      	ldr	r3, [r7, #4]
 8104024:	685b      	ldr	r3, [r3, #4]
 8104026:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810402a:	d103      	bne.n	8104034 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 810402c:	687b      	ldr	r3, [r7, #4]
 810402e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8104030:	2b00      	cmp	r3, #0
 8104032:	d008      	beq.n	8104046 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8104034:	687b      	ldr	r3, [r7, #4]
 8104036:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8104038:	2b00      	cmp	r3, #0
 810403a:	d10c      	bne.n	8104056 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 810403c:	687b      	ldr	r3, [r7, #4]
 810403e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8104040:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104044:	d107      	bne.n	8104056 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8104046:	687b      	ldr	r3, [r7, #4]
 8104048:	681b      	ldr	r3, [r3, #0]
 810404a:	681a      	ldr	r2, [r3, #0]
 810404c:	687b      	ldr	r3, [r7, #4]
 810404e:	681b      	ldr	r3, [r3, #0]
 8104050:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8104054:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8104056:	687b      	ldr	r3, [r7, #4]
 8104058:	69da      	ldr	r2, [r3, #28]
 810405a:	687b      	ldr	r3, [r7, #4]
 810405c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810405e:	431a      	orrs	r2, r3
 8104060:	68bb      	ldr	r3, [r7, #8]
 8104062:	431a      	orrs	r2, r3
 8104064:	687b      	ldr	r3, [r7, #4]
 8104066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104068:	ea42 0103 	orr.w	r1, r2, r3
 810406c:	687b      	ldr	r3, [r7, #4]
 810406e:	68da      	ldr	r2, [r3, #12]
 8104070:	687b      	ldr	r3, [r7, #4]
 8104072:	681b      	ldr	r3, [r3, #0]
 8104074:	430a      	orrs	r2, r1
 8104076:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8104078:	687b      	ldr	r3, [r7, #4]
 810407a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810407c:	687b      	ldr	r3, [r7, #4]
 810407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104080:	431a      	orrs	r2, r3
 8104082:	687b      	ldr	r3, [r7, #4]
 8104084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104086:	431a      	orrs	r2, r3
 8104088:	687b      	ldr	r3, [r7, #4]
 810408a:	699b      	ldr	r3, [r3, #24]
 810408c:	431a      	orrs	r2, r3
 810408e:	687b      	ldr	r3, [r7, #4]
 8104090:	691b      	ldr	r3, [r3, #16]
 8104092:	431a      	orrs	r2, r3
 8104094:	687b      	ldr	r3, [r7, #4]
 8104096:	695b      	ldr	r3, [r3, #20]
 8104098:	431a      	orrs	r2, r3
 810409a:	687b      	ldr	r3, [r7, #4]
 810409c:	6a1b      	ldr	r3, [r3, #32]
 810409e:	431a      	orrs	r2, r3
 81040a0:	687b      	ldr	r3, [r7, #4]
 81040a2:	685b      	ldr	r3, [r3, #4]
 81040a4:	431a      	orrs	r2, r3
 81040a6:	687b      	ldr	r3, [r7, #4]
 81040a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81040aa:	431a      	orrs	r2, r3
 81040ac:	687b      	ldr	r3, [r7, #4]
 81040ae:	689b      	ldr	r3, [r3, #8]
 81040b0:	431a      	orrs	r2, r3
 81040b2:	687b      	ldr	r3, [r7, #4]
 81040b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81040b6:	ea42 0103 	orr.w	r1, r2, r3
 81040ba:	687b      	ldr	r3, [r7, #4]
 81040bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 81040be:	687b      	ldr	r3, [r7, #4]
 81040c0:	681b      	ldr	r3, [r3, #0]
 81040c2:	430a      	orrs	r2, r1
 81040c4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 81040c6:	687b      	ldr	r3, [r7, #4]
 81040c8:	685b      	ldr	r3, [r3, #4]
 81040ca:	2b00      	cmp	r3, #0
 81040cc:	d113      	bne.n	81040f6 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 81040ce:	687b      	ldr	r3, [r7, #4]
 81040d0:	681b      	ldr	r3, [r3, #0]
 81040d2:	689b      	ldr	r3, [r3, #8]
 81040d4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 81040d8:	687b      	ldr	r3, [r7, #4]
 81040da:	681b      	ldr	r3, [r3, #0]
 81040dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81040e0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 81040e2:	687b      	ldr	r3, [r7, #4]
 81040e4:	681b      	ldr	r3, [r3, #0]
 81040e6:	689b      	ldr	r3, [r3, #8]
 81040e8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 81040ec:	687b      	ldr	r3, [r7, #4]
 81040ee:	681b      	ldr	r3, [r3, #0]
 81040f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 81040f4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 81040f6:	687b      	ldr	r3, [r7, #4]
 81040f8:	681b      	ldr	r3, [r3, #0]
 81040fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 81040fc:	687b      	ldr	r3, [r7, #4]
 81040fe:	681b      	ldr	r3, [r3, #0]
 8104100:	f022 0201 	bic.w	r2, r2, #1
 8104104:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8104106:	687b      	ldr	r3, [r7, #4]
 8104108:	685b      	ldr	r3, [r3, #4]
 810410a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810410e:	2b00      	cmp	r3, #0
 8104110:	d00a      	beq.n	8104128 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8104112:	687b      	ldr	r3, [r7, #4]
 8104114:	681b      	ldr	r3, [r3, #0]
 8104116:	68db      	ldr	r3, [r3, #12]
 8104118:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 810411c:	687b      	ldr	r3, [r7, #4]
 810411e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8104120:	687b      	ldr	r3, [r7, #4]
 8104122:	681b      	ldr	r3, [r3, #0]
 8104124:	430a      	orrs	r2, r1
 8104126:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8104128:	687b      	ldr	r3, [r7, #4]
 810412a:	2200      	movs	r2, #0
 810412c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8104130:	687b      	ldr	r3, [r7, #4]
 8104132:	2201      	movs	r2, #1
 8104134:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8104138:	2300      	movs	r3, #0
}
 810413a:	4618      	mov	r0, r3
 810413c:	3710      	adds	r7, #16
 810413e:	46bd      	mov	sp, r7
 8104140:	bd80      	pop	{r7, pc}
 8104142:	bf00      	nop
 8104144:	40013000 	.word	0x40013000
 8104148:	40003800 	.word	0x40003800
 810414c:	40003c00 	.word	0x40003c00

08104150 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8104150:	b580      	push	{r7, lr}
 8104152:	b08a      	sub	sp, #40	; 0x28
 8104154:	af02      	add	r7, sp, #8
 8104156:	60f8      	str	r0, [r7, #12]
 8104158:	60b9      	str	r1, [r7, #8]
 810415a:	603b      	str	r3, [r7, #0]
 810415c:	4613      	mov	r3, r2
 810415e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8104160:	68fb      	ldr	r3, [r7, #12]
 8104162:	681b      	ldr	r3, [r3, #0]
 8104164:	3320      	adds	r3, #32
 8104166:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8104168:	2300      	movs	r3, #0
 810416a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 810416c:	68fb      	ldr	r3, [r7, #12]
 810416e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8104172:	2b01      	cmp	r3, #1
 8104174:	d101      	bne.n	810417a <HAL_SPI_Transmit+0x2a>
 8104176:	2302      	movs	r3, #2
 8104178:	e1d4      	b.n	8104524 <HAL_SPI_Transmit+0x3d4>
 810417a:	68fb      	ldr	r3, [r7, #12]
 810417c:	2201      	movs	r2, #1
 810417e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8104182:	f7fd f8a9 	bl	81012d8 <HAL_GetTick>
 8104186:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8104188:	68fb      	ldr	r3, [r7, #12]
 810418a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810418e:	b2db      	uxtb	r3, r3
 8104190:	2b01      	cmp	r3, #1
 8104192:	d007      	beq.n	81041a4 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8104194:	2302      	movs	r3, #2
 8104196:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8104198:	68fb      	ldr	r3, [r7, #12]
 810419a:	2200      	movs	r2, #0
 810419c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 81041a0:	7efb      	ldrb	r3, [r7, #27]
 81041a2:	e1bf      	b.n	8104524 <HAL_SPI_Transmit+0x3d4>
  }

  if ((pData == NULL) || (Size == 0UL))
 81041a4:	68bb      	ldr	r3, [r7, #8]
 81041a6:	2b00      	cmp	r3, #0
 81041a8:	d002      	beq.n	81041b0 <HAL_SPI_Transmit+0x60>
 81041aa:	88fb      	ldrh	r3, [r7, #6]
 81041ac:	2b00      	cmp	r3, #0
 81041ae:	d107      	bne.n	81041c0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 81041b0:	2301      	movs	r3, #1
 81041b2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 81041b4:	68fb      	ldr	r3, [r7, #12]
 81041b6:	2200      	movs	r2, #0
 81041b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 81041bc:	7efb      	ldrb	r3, [r7, #27]
 81041be:	e1b1      	b.n	8104524 <HAL_SPI_Transmit+0x3d4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 81041c0:	68fb      	ldr	r3, [r7, #12]
 81041c2:	2203      	movs	r2, #3
 81041c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 81041c8:	68fb      	ldr	r3, [r7, #12]
 81041ca:	2200      	movs	r2, #0
 81041cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 81041d0:	68fb      	ldr	r3, [r7, #12]
 81041d2:	68ba      	ldr	r2, [r7, #8]
 81041d4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 81041d6:	68fb      	ldr	r3, [r7, #12]
 81041d8:	88fa      	ldrh	r2, [r7, #6]
 81041da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 81041de:	68fb      	ldr	r3, [r7, #12]
 81041e0:	88fa      	ldrh	r2, [r7, #6]
 81041e2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 81041e6:	68fb      	ldr	r3, [r7, #12]
 81041e8:	2200      	movs	r2, #0
 81041ea:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 81041ec:	68fb      	ldr	r3, [r7, #12]
 81041ee:	2200      	movs	r2, #0
 81041f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 81041f4:	68fb      	ldr	r3, [r7, #12]
 81041f6:	2200      	movs	r2, #0
 81041f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 81041fc:	68fb      	ldr	r3, [r7, #12]
 81041fe:	2200      	movs	r2, #0
 8104200:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8104202:	68fb      	ldr	r3, [r7, #12]
 8104204:	2200      	movs	r2, #0
 8104206:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8104208:	68fb      	ldr	r3, [r7, #12]
 810420a:	689b      	ldr	r3, [r3, #8]
 810420c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8104210:	d107      	bne.n	8104222 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8104212:	68fb      	ldr	r3, [r7, #12]
 8104214:	681b      	ldr	r3, [r3, #0]
 8104216:	681a      	ldr	r2, [r3, #0]
 8104218:	68fb      	ldr	r3, [r7, #12]
 810421a:	681b      	ldr	r3, [r3, #0]
 810421c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8104220:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8104222:	68fb      	ldr	r3, [r7, #12]
 8104224:	681b      	ldr	r3, [r3, #0]
 8104226:	685b      	ldr	r3, [r3, #4]
 8104228:	0c1b      	lsrs	r3, r3, #16
 810422a:	041b      	lsls	r3, r3, #16
 810422c:	88f9      	ldrh	r1, [r7, #6]
 810422e:	68fa      	ldr	r2, [r7, #12]
 8104230:	6812      	ldr	r2, [r2, #0]
 8104232:	430b      	orrs	r3, r1
 8104234:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8104236:	68fb      	ldr	r3, [r7, #12]
 8104238:	681b      	ldr	r3, [r3, #0]
 810423a:	681a      	ldr	r2, [r3, #0]
 810423c:	68fb      	ldr	r3, [r7, #12]
 810423e:	681b      	ldr	r3, [r3, #0]
 8104240:	f042 0201 	orr.w	r2, r2, #1
 8104244:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8104246:	68fb      	ldr	r3, [r7, #12]
 8104248:	685b      	ldr	r3, [r3, #4]
 810424a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810424e:	d107      	bne.n	8104260 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8104250:	68fb      	ldr	r3, [r7, #12]
 8104252:	681b      	ldr	r3, [r3, #0]
 8104254:	681a      	ldr	r2, [r3, #0]
 8104256:	68fb      	ldr	r3, [r7, #12]
 8104258:	681b      	ldr	r3, [r3, #0]
 810425a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810425e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8104260:	68fb      	ldr	r3, [r7, #12]
 8104262:	68db      	ldr	r3, [r3, #12]
 8104264:	2b0f      	cmp	r3, #15
 8104266:	d947      	bls.n	81042f8 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8104268:	e03f      	b.n	81042ea <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 810426a:	68fb      	ldr	r3, [r7, #12]
 810426c:	681b      	ldr	r3, [r3, #0]
 810426e:	695b      	ldr	r3, [r3, #20]
 8104270:	f003 0302 	and.w	r3, r3, #2
 8104274:	2b02      	cmp	r3, #2
 8104276:	d114      	bne.n	81042a2 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8104278:	68fb      	ldr	r3, [r7, #12]
 810427a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810427c:	68fb      	ldr	r3, [r7, #12]
 810427e:	681b      	ldr	r3, [r3, #0]
 8104280:	6812      	ldr	r2, [r2, #0]
 8104282:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8104284:	68fb      	ldr	r3, [r7, #12]
 8104286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104288:	1d1a      	adds	r2, r3, #4
 810428a:	68fb      	ldr	r3, [r7, #12]
 810428c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 810428e:	68fb      	ldr	r3, [r7, #12]
 8104290:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104294:	b29b      	uxth	r3, r3
 8104296:	3b01      	subs	r3, #1
 8104298:	b29a      	uxth	r2, r3
 810429a:	68fb      	ldr	r3, [r7, #12]
 810429c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 81042a0:	e023      	b.n	81042ea <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81042a2:	f7fd f819 	bl	81012d8 <HAL_GetTick>
 81042a6:	4602      	mov	r2, r0
 81042a8:	697b      	ldr	r3, [r7, #20]
 81042aa:	1ad3      	subs	r3, r2, r3
 81042ac:	683a      	ldr	r2, [r7, #0]
 81042ae:	429a      	cmp	r2, r3
 81042b0:	d803      	bhi.n	81042ba <HAL_SPI_Transmit+0x16a>
 81042b2:	683b      	ldr	r3, [r7, #0]
 81042b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81042b8:	d102      	bne.n	81042c0 <HAL_SPI_Transmit+0x170>
 81042ba:	683b      	ldr	r3, [r7, #0]
 81042bc:	2b00      	cmp	r3, #0
 81042be:	d114      	bne.n	81042ea <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 81042c0:	68f8      	ldr	r0, [r7, #12]
 81042c2:	f000 fcf2 	bl	8104caa <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 81042c6:	68fb      	ldr	r3, [r7, #12]
 81042c8:	2200      	movs	r2, #0
 81042ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81042ce:	68fb      	ldr	r3, [r7, #12]
 81042d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81042d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81042d8:	68fb      	ldr	r3, [r7, #12]
 81042da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 81042de:	68fb      	ldr	r3, [r7, #12]
 81042e0:	2201      	movs	r2, #1
 81042e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 81042e6:	2303      	movs	r3, #3
 81042e8:	e11c      	b.n	8104524 <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 81042ea:	68fb      	ldr	r3, [r7, #12]
 81042ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81042f0:	b29b      	uxth	r3, r3
 81042f2:	2b00      	cmp	r3, #0
 81042f4:	d1b9      	bne.n	810426a <HAL_SPI_Transmit+0x11a>
 81042f6:	e0ef      	b.n	81044d8 <HAL_SPI_Transmit+0x388>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 81042f8:	68fb      	ldr	r3, [r7, #12]
 81042fa:	68db      	ldr	r3, [r3, #12]
 81042fc:	2b07      	cmp	r3, #7
 81042fe:	f240 80e4 	bls.w	81044ca <HAL_SPI_Transmit+0x37a>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8104302:	e05d      	b.n	81043c0 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8104304:	68fb      	ldr	r3, [r7, #12]
 8104306:	681b      	ldr	r3, [r3, #0]
 8104308:	695b      	ldr	r3, [r3, #20]
 810430a:	f003 0302 	and.w	r3, r3, #2
 810430e:	2b02      	cmp	r3, #2
 8104310:	d132      	bne.n	8104378 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8104312:	68fb      	ldr	r3, [r7, #12]
 8104314:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104318:	b29b      	uxth	r3, r3
 810431a:	2b01      	cmp	r3, #1
 810431c:	d918      	bls.n	8104350 <HAL_SPI_Transmit+0x200>
 810431e:	68fb      	ldr	r3, [r7, #12]
 8104320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104322:	2b00      	cmp	r3, #0
 8104324:	d014      	beq.n	8104350 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8104326:	68fb      	ldr	r3, [r7, #12]
 8104328:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810432a:	68fb      	ldr	r3, [r7, #12]
 810432c:	681b      	ldr	r3, [r3, #0]
 810432e:	6812      	ldr	r2, [r2, #0]
 8104330:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8104332:	68fb      	ldr	r3, [r7, #12]
 8104334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104336:	1d1a      	adds	r2, r3, #4
 8104338:	68fb      	ldr	r3, [r7, #12]
 810433a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 810433c:	68fb      	ldr	r3, [r7, #12]
 810433e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104342:	b29b      	uxth	r3, r3
 8104344:	3b02      	subs	r3, #2
 8104346:	b29a      	uxth	r2, r3
 8104348:	68fb      	ldr	r3, [r7, #12]
 810434a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 810434e:	e037      	b.n	81043c0 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8104350:	68fb      	ldr	r3, [r7, #12]
 8104352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104354:	881a      	ldrh	r2, [r3, #0]
 8104356:	69fb      	ldr	r3, [r7, #28]
 8104358:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 810435a:	68fb      	ldr	r3, [r7, #12]
 810435c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810435e:	1c9a      	adds	r2, r3, #2
 8104360:	68fb      	ldr	r3, [r7, #12]
 8104362:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8104364:	68fb      	ldr	r3, [r7, #12]
 8104366:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810436a:	b29b      	uxth	r3, r3
 810436c:	3b01      	subs	r3, #1
 810436e:	b29a      	uxth	r2, r3
 8104370:	68fb      	ldr	r3, [r7, #12]
 8104372:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8104376:	e023      	b.n	81043c0 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104378:	f7fc ffae 	bl	81012d8 <HAL_GetTick>
 810437c:	4602      	mov	r2, r0
 810437e:	697b      	ldr	r3, [r7, #20]
 8104380:	1ad3      	subs	r3, r2, r3
 8104382:	683a      	ldr	r2, [r7, #0]
 8104384:	429a      	cmp	r2, r3
 8104386:	d803      	bhi.n	8104390 <HAL_SPI_Transmit+0x240>
 8104388:	683b      	ldr	r3, [r7, #0]
 810438a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810438e:	d102      	bne.n	8104396 <HAL_SPI_Transmit+0x246>
 8104390:	683b      	ldr	r3, [r7, #0]
 8104392:	2b00      	cmp	r3, #0
 8104394:	d114      	bne.n	81043c0 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8104396:	68f8      	ldr	r0, [r7, #12]
 8104398:	f000 fc87 	bl	8104caa <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 810439c:	68fb      	ldr	r3, [r7, #12]
 810439e:	2200      	movs	r2, #0
 81043a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81043a4:	68fb      	ldr	r3, [r7, #12]
 81043a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81043aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81043ae:	68fb      	ldr	r3, [r7, #12]
 81043b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 81043b4:	68fb      	ldr	r3, [r7, #12]
 81043b6:	2201      	movs	r2, #1
 81043b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 81043bc:	2303      	movs	r3, #3
 81043be:	e0b1      	b.n	8104524 <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 81043c0:	68fb      	ldr	r3, [r7, #12]
 81043c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81043c6:	b29b      	uxth	r3, r3
 81043c8:	2b00      	cmp	r3, #0
 81043ca:	d19b      	bne.n	8104304 <HAL_SPI_Transmit+0x1b4>
 81043cc:	e084      	b.n	81044d8 <HAL_SPI_Transmit+0x388>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 81043ce:	68fb      	ldr	r3, [r7, #12]
 81043d0:	681b      	ldr	r3, [r3, #0]
 81043d2:	695b      	ldr	r3, [r3, #20]
 81043d4:	f003 0302 	and.w	r3, r3, #2
 81043d8:	2b02      	cmp	r3, #2
 81043da:	d152      	bne.n	8104482 <HAL_SPI_Transmit+0x332>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 81043dc:	68fb      	ldr	r3, [r7, #12]
 81043de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81043e2:	b29b      	uxth	r3, r3
 81043e4:	2b03      	cmp	r3, #3
 81043e6:	d918      	bls.n	810441a <HAL_SPI_Transmit+0x2ca>
 81043e8:	68fb      	ldr	r3, [r7, #12]
 81043ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81043ec:	2b40      	cmp	r3, #64	; 0x40
 81043ee:	d914      	bls.n	810441a <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 81043f0:	68fb      	ldr	r3, [r7, #12]
 81043f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 81043f4:	68fb      	ldr	r3, [r7, #12]
 81043f6:	681b      	ldr	r3, [r3, #0]
 81043f8:	6812      	ldr	r2, [r2, #0]
 81043fa:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 81043fc:	68fb      	ldr	r3, [r7, #12]
 81043fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104400:	1d1a      	adds	r2, r3, #4
 8104402:	68fb      	ldr	r3, [r7, #12]
 8104404:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8104406:	68fb      	ldr	r3, [r7, #12]
 8104408:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810440c:	b29b      	uxth	r3, r3
 810440e:	3b04      	subs	r3, #4
 8104410:	b29a      	uxth	r2, r3
 8104412:	68fb      	ldr	r3, [r7, #12]
 8104414:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8104418:	e057      	b.n	81044ca <HAL_SPI_Transmit+0x37a>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 810441a:	68fb      	ldr	r3, [r7, #12]
 810441c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104420:	b29b      	uxth	r3, r3
 8104422:	2b01      	cmp	r3, #1
 8104424:	d917      	bls.n	8104456 <HAL_SPI_Transmit+0x306>
 8104426:	68fb      	ldr	r3, [r7, #12]
 8104428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810442a:	2b00      	cmp	r3, #0
 810442c:	d013      	beq.n	8104456 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 810442e:	68fb      	ldr	r3, [r7, #12]
 8104430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104432:	881a      	ldrh	r2, [r3, #0]
 8104434:	69fb      	ldr	r3, [r7, #28]
 8104436:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8104438:	68fb      	ldr	r3, [r7, #12]
 810443a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810443c:	1c9a      	adds	r2, r3, #2
 810443e:	68fb      	ldr	r3, [r7, #12]
 8104440:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8104442:	68fb      	ldr	r3, [r7, #12]
 8104444:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104448:	b29b      	uxth	r3, r3
 810444a:	3b02      	subs	r3, #2
 810444c:	b29a      	uxth	r2, r3
 810444e:	68fb      	ldr	r3, [r7, #12]
 8104450:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8104454:	e039      	b.n	81044ca <HAL_SPI_Transmit+0x37a>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8104456:	68fb      	ldr	r3, [r7, #12]
 8104458:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810445a:	68fb      	ldr	r3, [r7, #12]
 810445c:	681b      	ldr	r3, [r3, #0]
 810445e:	3320      	adds	r3, #32
 8104460:	7812      	ldrb	r2, [r2, #0]
 8104462:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8104464:	68fb      	ldr	r3, [r7, #12]
 8104466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104468:	1c5a      	adds	r2, r3, #1
 810446a:	68fb      	ldr	r3, [r7, #12]
 810446c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 810446e:	68fb      	ldr	r3, [r7, #12]
 8104470:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104474:	b29b      	uxth	r3, r3
 8104476:	3b01      	subs	r3, #1
 8104478:	b29a      	uxth	r2, r3
 810447a:	68fb      	ldr	r3, [r7, #12]
 810447c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8104480:	e023      	b.n	81044ca <HAL_SPI_Transmit+0x37a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104482:	f7fc ff29 	bl	81012d8 <HAL_GetTick>
 8104486:	4602      	mov	r2, r0
 8104488:	697b      	ldr	r3, [r7, #20]
 810448a:	1ad3      	subs	r3, r2, r3
 810448c:	683a      	ldr	r2, [r7, #0]
 810448e:	429a      	cmp	r2, r3
 8104490:	d803      	bhi.n	810449a <HAL_SPI_Transmit+0x34a>
 8104492:	683b      	ldr	r3, [r7, #0]
 8104494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104498:	d102      	bne.n	81044a0 <HAL_SPI_Transmit+0x350>
 810449a:	683b      	ldr	r3, [r7, #0]
 810449c:	2b00      	cmp	r3, #0
 810449e:	d114      	bne.n	81044ca <HAL_SPI_Transmit+0x37a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 81044a0:	68f8      	ldr	r0, [r7, #12]
 81044a2:	f000 fc02 	bl	8104caa <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 81044a6:	68fb      	ldr	r3, [r7, #12]
 81044a8:	2200      	movs	r2, #0
 81044aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81044ae:	68fb      	ldr	r3, [r7, #12]
 81044b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81044b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81044b8:	68fb      	ldr	r3, [r7, #12]
 81044ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 81044be:	68fb      	ldr	r3, [r7, #12]
 81044c0:	2201      	movs	r2, #1
 81044c2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 81044c6:	2303      	movs	r3, #3
 81044c8:	e02c      	b.n	8104524 <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 81044ca:	68fb      	ldr	r3, [r7, #12]
 81044cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81044d0:	b29b      	uxth	r3, r3
 81044d2:	2b00      	cmp	r3, #0
 81044d4:	f47f af7b 	bne.w	81043ce <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 81044d8:	683b      	ldr	r3, [r7, #0]
 81044da:	9300      	str	r3, [sp, #0]
 81044dc:	697b      	ldr	r3, [r7, #20]
 81044de:	2200      	movs	r2, #0
 81044e0:	2108      	movs	r1, #8
 81044e2:	68f8      	ldr	r0, [r7, #12]
 81044e4:	f000 fc81 	bl	8104dea <SPI_WaitOnFlagUntilTimeout>
 81044e8:	4603      	mov	r3, r0
 81044ea:	2b00      	cmp	r3, #0
 81044ec:	d007      	beq.n	81044fe <HAL_SPI_Transmit+0x3ae>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 81044ee:	68fb      	ldr	r3, [r7, #12]
 81044f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81044f4:	f043 0220 	orr.w	r2, r3, #32
 81044f8:	68fb      	ldr	r3, [r7, #12]
 81044fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 81044fe:	68f8      	ldr	r0, [r7, #12]
 8104500:	f000 fbd3 	bl	8104caa <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8104504:	68fb      	ldr	r3, [r7, #12]
 8104506:	2200      	movs	r2, #0
 8104508:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 810450c:	68fb      	ldr	r3, [r7, #12]
 810450e:	2201      	movs	r2, #1
 8104510:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8104514:	68fb      	ldr	r3, [r7, #12]
 8104516:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810451a:	2b00      	cmp	r3, #0
 810451c:	d001      	beq.n	8104522 <HAL_SPI_Transmit+0x3d2>
  {
    return HAL_ERROR;
 810451e:	2301      	movs	r3, #1
 8104520:	e000      	b.n	8104524 <HAL_SPI_Transmit+0x3d4>
  }
  return errorcode;
 8104522:	7efb      	ldrb	r3, [r7, #27]
}
 8104524:	4618      	mov	r0, r3
 8104526:	3720      	adds	r7, #32
 8104528:	46bd      	mov	sp, r7
 810452a:	bd80      	pop	{r7, pc}

0810452c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810452c:	b580      	push	{r7, lr}
 810452e:	b08a      	sub	sp, #40	; 0x28
 8104530:	af02      	add	r7, sp, #8
 8104532:	60f8      	str	r0, [r7, #12]
 8104534:	60b9      	str	r1, [r7, #8]
 8104536:	603b      	str	r3, [r7, #0]
 8104538:	4613      	mov	r3, r2
 810453a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 810453c:	2300      	movs	r3, #0
 810453e:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8104540:	68fb      	ldr	r3, [r7, #12]
 8104542:	681b      	ldr	r3, [r3, #0]
 8104544:	3330      	adds	r3, #48	; 0x30
 8104546:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8104548:	68fb      	ldr	r3, [r7, #12]
 810454a:	685b      	ldr	r3, [r3, #4]
 810454c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104550:	d112      	bne.n	8104578 <HAL_SPI_Receive+0x4c>
 8104552:	68fb      	ldr	r3, [r7, #12]
 8104554:	689b      	ldr	r3, [r3, #8]
 8104556:	2b00      	cmp	r3, #0
 8104558:	d10e      	bne.n	8104578 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 810455a:	68fb      	ldr	r3, [r7, #12]
 810455c:	2204      	movs	r2, #4
 810455e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8104562:	88fa      	ldrh	r2, [r7, #6]
 8104564:	683b      	ldr	r3, [r7, #0]
 8104566:	9300      	str	r3, [sp, #0]
 8104568:	4613      	mov	r3, r2
 810456a:	68ba      	ldr	r2, [r7, #8]
 810456c:	68b9      	ldr	r1, [r7, #8]
 810456e:	68f8      	ldr	r0, [r7, #12]
 8104570:	f000 f976 	bl	8104860 <HAL_SPI_TransmitReceive>
 8104574:	4603      	mov	r3, r0
 8104576:	e16f      	b.n	8104858 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8104578:	68fb      	ldr	r3, [r7, #12]
 810457a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810457e:	2b01      	cmp	r3, #1
 8104580:	d101      	bne.n	8104586 <HAL_SPI_Receive+0x5a>
 8104582:	2302      	movs	r3, #2
 8104584:	e168      	b.n	8104858 <HAL_SPI_Receive+0x32c>
 8104586:	68fb      	ldr	r3, [r7, #12]
 8104588:	2201      	movs	r2, #1
 810458a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 810458e:	f7fc fea3 	bl	81012d8 <HAL_GetTick>
 8104592:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8104594:	68fb      	ldr	r3, [r7, #12]
 8104596:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810459a:	b2db      	uxtb	r3, r3
 810459c:	2b01      	cmp	r3, #1
 810459e:	d007      	beq.n	81045b0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 81045a0:	2302      	movs	r3, #2
 81045a2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 81045a4:	68fb      	ldr	r3, [r7, #12]
 81045a6:	2200      	movs	r2, #0
 81045a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 81045ac:	7ffb      	ldrb	r3, [r7, #31]
 81045ae:	e153      	b.n	8104858 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 81045b0:	68bb      	ldr	r3, [r7, #8]
 81045b2:	2b00      	cmp	r3, #0
 81045b4:	d002      	beq.n	81045bc <HAL_SPI_Receive+0x90>
 81045b6:	88fb      	ldrh	r3, [r7, #6]
 81045b8:	2b00      	cmp	r3, #0
 81045ba:	d107      	bne.n	81045cc <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 81045bc:	2301      	movs	r3, #1
 81045be:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 81045c0:	68fb      	ldr	r3, [r7, #12]
 81045c2:	2200      	movs	r2, #0
 81045c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 81045c8:	7ffb      	ldrb	r3, [r7, #31]
 81045ca:	e145      	b.n	8104858 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 81045cc:	68fb      	ldr	r3, [r7, #12]
 81045ce:	2204      	movs	r2, #4
 81045d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 81045d4:	68fb      	ldr	r3, [r7, #12]
 81045d6:	2200      	movs	r2, #0
 81045d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 81045dc:	68fb      	ldr	r3, [r7, #12]
 81045de:	68ba      	ldr	r2, [r7, #8]
 81045e0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 81045e2:	68fb      	ldr	r3, [r7, #12]
 81045e4:	88fa      	ldrh	r2, [r7, #6]
 81045e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 81045ea:	68fb      	ldr	r3, [r7, #12]
 81045ec:	88fa      	ldrh	r2, [r7, #6]
 81045ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 81045f2:	68fb      	ldr	r3, [r7, #12]
 81045f4:	2200      	movs	r2, #0
 81045f6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 81045f8:	68fb      	ldr	r3, [r7, #12]
 81045fa:	2200      	movs	r2, #0
 81045fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8104600:	68fb      	ldr	r3, [r7, #12]
 8104602:	2200      	movs	r2, #0
 8104604:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8104608:	68fb      	ldr	r3, [r7, #12]
 810460a:	2200      	movs	r2, #0
 810460c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 810460e:	68fb      	ldr	r3, [r7, #12]
 8104610:	2200      	movs	r2, #0
 8104612:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8104614:	68fb      	ldr	r3, [r7, #12]
 8104616:	689b      	ldr	r3, [r3, #8]
 8104618:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 810461c:	d107      	bne.n	810462e <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 810461e:	68fb      	ldr	r3, [r7, #12]
 8104620:	681b      	ldr	r3, [r3, #0]
 8104622:	681a      	ldr	r2, [r3, #0]
 8104624:	68fb      	ldr	r3, [r7, #12]
 8104626:	681b      	ldr	r3, [r3, #0]
 8104628:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 810462c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 810462e:	68fb      	ldr	r3, [r7, #12]
 8104630:	681b      	ldr	r3, [r3, #0]
 8104632:	685b      	ldr	r3, [r3, #4]
 8104634:	0c1b      	lsrs	r3, r3, #16
 8104636:	041b      	lsls	r3, r3, #16
 8104638:	88f9      	ldrh	r1, [r7, #6]
 810463a:	68fa      	ldr	r2, [r7, #12]
 810463c:	6812      	ldr	r2, [r2, #0]
 810463e:	430b      	orrs	r3, r1
 8104640:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8104642:	68fb      	ldr	r3, [r7, #12]
 8104644:	681b      	ldr	r3, [r3, #0]
 8104646:	681a      	ldr	r2, [r3, #0]
 8104648:	68fb      	ldr	r3, [r7, #12]
 810464a:	681b      	ldr	r3, [r3, #0]
 810464c:	f042 0201 	orr.w	r2, r2, #1
 8104650:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8104652:	68fb      	ldr	r3, [r7, #12]
 8104654:	685b      	ldr	r3, [r3, #4]
 8104656:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810465a:	d107      	bne.n	810466c <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 810465c:	68fb      	ldr	r3, [r7, #12]
 810465e:	681b      	ldr	r3, [r3, #0]
 8104660:	681a      	ldr	r2, [r3, #0]
 8104662:	68fb      	ldr	r3, [r7, #12]
 8104664:	681b      	ldr	r3, [r3, #0]
 8104666:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810466a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 810466c:	68fb      	ldr	r3, [r7, #12]
 810466e:	68db      	ldr	r3, [r3, #12]
 8104670:	2b0f      	cmp	r3, #15
 8104672:	d948      	bls.n	8104706 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8104674:	e040      	b.n	81046f8 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8104676:	68fb      	ldr	r3, [r7, #12]
 8104678:	681b      	ldr	r3, [r3, #0]
 810467a:	695a      	ldr	r2, [r3, #20]
 810467c:	f248 0308 	movw	r3, #32776	; 0x8008
 8104680:	4013      	ands	r3, r2
 8104682:	2b00      	cmp	r3, #0
 8104684:	d014      	beq.n	81046b0 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8104686:	68fb      	ldr	r3, [r7, #12]
 8104688:	681a      	ldr	r2, [r3, #0]
 810468a:	68fb      	ldr	r3, [r7, #12]
 810468c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810468e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8104690:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8104692:	68fb      	ldr	r3, [r7, #12]
 8104694:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104696:	1d1a      	adds	r2, r3, #4
 8104698:	68fb      	ldr	r3, [r7, #12]
 810469a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 810469c:	68fb      	ldr	r3, [r7, #12]
 810469e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81046a2:	b29b      	uxth	r3, r3
 81046a4:	3b01      	subs	r3, #1
 81046a6:	b29a      	uxth	r2, r3
 81046a8:	68fb      	ldr	r3, [r7, #12]
 81046aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 81046ae:	e023      	b.n	81046f8 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81046b0:	f7fc fe12 	bl	81012d8 <HAL_GetTick>
 81046b4:	4602      	mov	r2, r0
 81046b6:	697b      	ldr	r3, [r7, #20]
 81046b8:	1ad3      	subs	r3, r2, r3
 81046ba:	683a      	ldr	r2, [r7, #0]
 81046bc:	429a      	cmp	r2, r3
 81046be:	d803      	bhi.n	81046c8 <HAL_SPI_Receive+0x19c>
 81046c0:	683b      	ldr	r3, [r7, #0]
 81046c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 81046c6:	d102      	bne.n	81046ce <HAL_SPI_Receive+0x1a2>
 81046c8:	683b      	ldr	r3, [r7, #0]
 81046ca:	2b00      	cmp	r3, #0
 81046cc:	d114      	bne.n	81046f8 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 81046ce:	68f8      	ldr	r0, [r7, #12]
 81046d0:	f000 faeb 	bl	8104caa <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 81046d4:	68fb      	ldr	r3, [r7, #12]
 81046d6:	2200      	movs	r2, #0
 81046d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81046dc:	68fb      	ldr	r3, [r7, #12]
 81046de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81046e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81046e6:	68fb      	ldr	r3, [r7, #12]
 81046e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 81046ec:	68fb      	ldr	r3, [r7, #12]
 81046ee:	2201      	movs	r2, #1
 81046f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 81046f4:	2303      	movs	r3, #3
 81046f6:	e0af      	b.n	8104858 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 81046f8:	68fb      	ldr	r3, [r7, #12]
 81046fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81046fe:	b29b      	uxth	r3, r3
 8104700:	2b00      	cmp	r3, #0
 8104702:	d1b8      	bne.n	8104676 <HAL_SPI_Receive+0x14a>
 8104704:	e095      	b.n	8104832 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8104706:	68fb      	ldr	r3, [r7, #12]
 8104708:	68db      	ldr	r3, [r3, #12]
 810470a:	2b07      	cmp	r3, #7
 810470c:	f240 808b 	bls.w	8104826 <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8104710:	e03f      	b.n	8104792 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8104712:	68fb      	ldr	r3, [r7, #12]
 8104714:	681b      	ldr	r3, [r3, #0]
 8104716:	695b      	ldr	r3, [r3, #20]
 8104718:	f003 0301 	and.w	r3, r3, #1
 810471c:	2b01      	cmp	r3, #1
 810471e:	d114      	bne.n	810474a <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8104720:	68fb      	ldr	r3, [r7, #12]
 8104722:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104724:	69ba      	ldr	r2, [r7, #24]
 8104726:	8812      	ldrh	r2, [r2, #0]
 8104728:	b292      	uxth	r2, r2
 810472a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 810472c:	68fb      	ldr	r3, [r7, #12]
 810472e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104730:	1c9a      	adds	r2, r3, #2
 8104732:	68fb      	ldr	r3, [r7, #12]
 8104734:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8104736:	68fb      	ldr	r3, [r7, #12]
 8104738:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810473c:	b29b      	uxth	r3, r3
 810473e:	3b01      	subs	r3, #1
 8104740:	b29a      	uxth	r2, r3
 8104742:	68fb      	ldr	r3, [r7, #12]
 8104744:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8104748:	e023      	b.n	8104792 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810474a:	f7fc fdc5 	bl	81012d8 <HAL_GetTick>
 810474e:	4602      	mov	r2, r0
 8104750:	697b      	ldr	r3, [r7, #20]
 8104752:	1ad3      	subs	r3, r2, r3
 8104754:	683a      	ldr	r2, [r7, #0]
 8104756:	429a      	cmp	r2, r3
 8104758:	d803      	bhi.n	8104762 <HAL_SPI_Receive+0x236>
 810475a:	683b      	ldr	r3, [r7, #0]
 810475c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104760:	d102      	bne.n	8104768 <HAL_SPI_Receive+0x23c>
 8104762:	683b      	ldr	r3, [r7, #0]
 8104764:	2b00      	cmp	r3, #0
 8104766:	d114      	bne.n	8104792 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8104768:	68f8      	ldr	r0, [r7, #12]
 810476a:	f000 fa9e 	bl	8104caa <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 810476e:	68fb      	ldr	r3, [r7, #12]
 8104770:	2200      	movs	r2, #0
 8104772:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8104776:	68fb      	ldr	r3, [r7, #12]
 8104778:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810477c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8104780:	68fb      	ldr	r3, [r7, #12]
 8104782:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8104786:	68fb      	ldr	r3, [r7, #12]
 8104788:	2201      	movs	r2, #1
 810478a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 810478e:	2303      	movs	r3, #3
 8104790:	e062      	b.n	8104858 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8104792:	68fb      	ldr	r3, [r7, #12]
 8104794:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104798:	b29b      	uxth	r3, r3
 810479a:	2b00      	cmp	r3, #0
 810479c:	d1b9      	bne.n	8104712 <HAL_SPI_Receive+0x1e6>
 810479e:	e048      	b.n	8104832 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 81047a0:	68fb      	ldr	r3, [r7, #12]
 81047a2:	681b      	ldr	r3, [r3, #0]
 81047a4:	695b      	ldr	r3, [r3, #20]
 81047a6:	f003 0301 	and.w	r3, r3, #1
 81047aa:	2b01      	cmp	r3, #1
 81047ac:	d117      	bne.n	81047de <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 81047ae:	68fb      	ldr	r3, [r7, #12]
 81047b0:	681b      	ldr	r3, [r3, #0]
 81047b2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 81047b6:	68fb      	ldr	r3, [r7, #12]
 81047b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81047ba:	7812      	ldrb	r2, [r2, #0]
 81047bc:	b2d2      	uxtb	r2, r2
 81047be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 81047c0:	68fb      	ldr	r3, [r7, #12]
 81047c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81047c4:	1c5a      	adds	r2, r3, #1
 81047c6:	68fb      	ldr	r3, [r7, #12]
 81047c8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 81047ca:	68fb      	ldr	r3, [r7, #12]
 81047cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81047d0:	b29b      	uxth	r3, r3
 81047d2:	3b01      	subs	r3, #1
 81047d4:	b29a      	uxth	r2, r3
 81047d6:	68fb      	ldr	r3, [r7, #12]
 81047d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 81047dc:	e023      	b.n	8104826 <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81047de:	f7fc fd7b 	bl	81012d8 <HAL_GetTick>
 81047e2:	4602      	mov	r2, r0
 81047e4:	697b      	ldr	r3, [r7, #20]
 81047e6:	1ad3      	subs	r3, r2, r3
 81047e8:	683a      	ldr	r2, [r7, #0]
 81047ea:	429a      	cmp	r2, r3
 81047ec:	d803      	bhi.n	81047f6 <HAL_SPI_Receive+0x2ca>
 81047ee:	683b      	ldr	r3, [r7, #0]
 81047f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 81047f4:	d102      	bne.n	81047fc <HAL_SPI_Receive+0x2d0>
 81047f6:	683b      	ldr	r3, [r7, #0]
 81047f8:	2b00      	cmp	r3, #0
 81047fa:	d114      	bne.n	8104826 <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 81047fc:	68f8      	ldr	r0, [r7, #12]
 81047fe:	f000 fa54 	bl	8104caa <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8104802:	68fb      	ldr	r3, [r7, #12]
 8104804:	2200      	movs	r2, #0
 8104806:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810480a:	68fb      	ldr	r3, [r7, #12]
 810480c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104810:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8104814:	68fb      	ldr	r3, [r7, #12]
 8104816:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 810481a:	68fb      	ldr	r3, [r7, #12]
 810481c:	2201      	movs	r2, #1
 810481e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8104822:	2303      	movs	r3, #3
 8104824:	e018      	b.n	8104858 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8104826:	68fb      	ldr	r3, [r7, #12]
 8104828:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810482c:	b29b      	uxth	r3, r3
 810482e:	2b00      	cmp	r3, #0
 8104830:	d1b6      	bne.n	81047a0 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8104832:	68f8      	ldr	r0, [r7, #12]
 8104834:	f000 fa39 	bl	8104caa <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8104838:	68fb      	ldr	r3, [r7, #12]
 810483a:	2200      	movs	r2, #0
 810483c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8104840:	68fb      	ldr	r3, [r7, #12]
 8104842:	2201      	movs	r2, #1
 8104844:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8104848:	68fb      	ldr	r3, [r7, #12]
 810484a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810484e:	2b00      	cmp	r3, #0
 8104850:	d001      	beq.n	8104856 <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 8104852:	2301      	movs	r3, #1
 8104854:	e000      	b.n	8104858 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 8104856:	7ffb      	ldrb	r3, [r7, #31]
}
 8104858:	4618      	mov	r0, r3
 810485a:	3720      	adds	r7, #32
 810485c:	46bd      	mov	sp, r7
 810485e:	bd80      	pop	{r7, pc}

08104860 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8104860:	b580      	push	{r7, lr}
 8104862:	b08e      	sub	sp, #56	; 0x38
 8104864:	af02      	add	r7, sp, #8
 8104866:	60f8      	str	r0, [r7, #12]
 8104868:	60b9      	str	r1, [r7, #8]
 810486a:	607a      	str	r2, [r7, #4]
 810486c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 810486e:	2300      	movs	r3, #0
 8104870:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8104874:	68fb      	ldr	r3, [r7, #12]
 8104876:	681b      	ldr	r3, [r3, #0]
 8104878:	3320      	adds	r3, #32
 810487a:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 810487c:	68fb      	ldr	r3, [r7, #12]
 810487e:	681b      	ldr	r3, [r3, #0]
 8104880:	3330      	adds	r3, #48	; 0x30
 8104882:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8104884:	68fb      	ldr	r3, [r7, #12]
 8104886:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810488a:	2b01      	cmp	r3, #1
 810488c:	d101      	bne.n	8104892 <HAL_SPI_TransmitReceive+0x32>
 810488e:	2302      	movs	r3, #2
 8104890:	e207      	b.n	8104ca2 <HAL_SPI_TransmitReceive+0x442>
 8104892:	68fb      	ldr	r3, [r7, #12]
 8104894:	2201      	movs	r2, #1
 8104896:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 810489a:	f7fc fd1d 	bl	81012d8 <HAL_GetTick>
 810489e:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 81048a0:	887b      	ldrh	r3, [r7, #2]
 81048a2:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 81048a4:	887b      	ldrh	r3, [r7, #2]
 81048a6:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 81048a8:	68fb      	ldr	r3, [r7, #12]
 81048aa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 81048ae:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 81048b0:	68fb      	ldr	r3, [r7, #12]
 81048b2:	685b      	ldr	r3, [r3, #4]
 81048b4:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 81048b6:	7efb      	ldrb	r3, [r7, #27]
 81048b8:	2b01      	cmp	r3, #1
 81048ba:	d014      	beq.n	81048e6 <HAL_SPI_TransmitReceive+0x86>
 81048bc:	697b      	ldr	r3, [r7, #20]
 81048be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81048c2:	d106      	bne.n	81048d2 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 81048c4:	68fb      	ldr	r3, [r7, #12]
 81048c6:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 81048c8:	2b00      	cmp	r3, #0
 81048ca:	d102      	bne.n	81048d2 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 81048cc:	7efb      	ldrb	r3, [r7, #27]
 81048ce:	2b04      	cmp	r3, #4
 81048d0:	d009      	beq.n	81048e6 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 81048d2:	2302      	movs	r3, #2
 81048d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 81048d8:	68fb      	ldr	r3, [r7, #12]
 81048da:	2200      	movs	r2, #0
 81048dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 81048e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 81048e4:	e1dd      	b.n	8104ca2 <HAL_SPI_TransmitReceive+0x442>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 81048e6:	68bb      	ldr	r3, [r7, #8]
 81048e8:	2b00      	cmp	r3, #0
 81048ea:	d005      	beq.n	81048f8 <HAL_SPI_TransmitReceive+0x98>
 81048ec:	687b      	ldr	r3, [r7, #4]
 81048ee:	2b00      	cmp	r3, #0
 81048f0:	d002      	beq.n	81048f8 <HAL_SPI_TransmitReceive+0x98>
 81048f2:	887b      	ldrh	r3, [r7, #2]
 81048f4:	2b00      	cmp	r3, #0
 81048f6:	d109      	bne.n	810490c <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 81048f8:	2301      	movs	r3, #1
 81048fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 81048fe:	68fb      	ldr	r3, [r7, #12]
 8104900:	2200      	movs	r2, #0
 8104902:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8104906:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 810490a:	e1ca      	b.n	8104ca2 <HAL_SPI_TransmitReceive+0x442>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 810490c:	68fb      	ldr	r3, [r7, #12]
 810490e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8104912:	b2db      	uxtb	r3, r3
 8104914:	2b04      	cmp	r3, #4
 8104916:	d003      	beq.n	8104920 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8104918:	68fb      	ldr	r3, [r7, #12]
 810491a:	2205      	movs	r2, #5
 810491c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8104920:	68fb      	ldr	r3, [r7, #12]
 8104922:	2200      	movs	r2, #0
 8104924:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8104928:	68fb      	ldr	r3, [r7, #12]
 810492a:	687a      	ldr	r2, [r7, #4]
 810492c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 810492e:	68fb      	ldr	r3, [r7, #12]
 8104930:	887a      	ldrh	r2, [r7, #2]
 8104932:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8104936:	68fb      	ldr	r3, [r7, #12]
 8104938:	887a      	ldrh	r2, [r7, #2]
 810493a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 810493e:	68fb      	ldr	r3, [r7, #12]
 8104940:	68ba      	ldr	r2, [r7, #8]
 8104942:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8104944:	68fb      	ldr	r3, [r7, #12]
 8104946:	887a      	ldrh	r2, [r7, #2]
 8104948:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 810494c:	68fb      	ldr	r3, [r7, #12]
 810494e:	887a      	ldrh	r2, [r7, #2]
 8104950:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8104954:	68fb      	ldr	r3, [r7, #12]
 8104956:	2200      	movs	r2, #0
 8104958:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 810495a:	68fb      	ldr	r3, [r7, #12]
 810495c:	2200      	movs	r2, #0
 810495e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8104960:	68fb      	ldr	r3, [r7, #12]
 8104962:	681b      	ldr	r3, [r3, #0]
 8104964:	685b      	ldr	r3, [r3, #4]
 8104966:	0c1b      	lsrs	r3, r3, #16
 8104968:	041b      	lsls	r3, r3, #16
 810496a:	8879      	ldrh	r1, [r7, #2]
 810496c:	68fa      	ldr	r2, [r7, #12]
 810496e:	6812      	ldr	r2, [r2, #0]
 8104970:	430b      	orrs	r3, r1
 8104972:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8104974:	68fb      	ldr	r3, [r7, #12]
 8104976:	681b      	ldr	r3, [r3, #0]
 8104978:	681a      	ldr	r2, [r3, #0]
 810497a:	68fb      	ldr	r3, [r7, #12]
 810497c:	681b      	ldr	r3, [r3, #0]
 810497e:	f042 0201 	orr.w	r2, r2, #1
 8104982:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8104984:	68fb      	ldr	r3, [r7, #12]
 8104986:	685b      	ldr	r3, [r3, #4]
 8104988:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810498c:	d107      	bne.n	810499e <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 810498e:	68fb      	ldr	r3, [r7, #12]
 8104990:	681b      	ldr	r3, [r3, #0]
 8104992:	681a      	ldr	r2, [r3, #0]
 8104994:	68fb      	ldr	r3, [r7, #12]
 8104996:	681b      	ldr	r3, [r3, #0]
 8104998:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810499c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 810499e:	68fb      	ldr	r3, [r7, #12]
 81049a0:	68db      	ldr	r3, [r3, #12]
 81049a2:	2b0f      	cmp	r3, #15
 81049a4:	d970      	bls.n	8104a88 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 81049a6:	e068      	b.n	8104a7a <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 81049a8:	68fb      	ldr	r3, [r7, #12]
 81049aa:	681b      	ldr	r3, [r3, #0]
 81049ac:	695b      	ldr	r3, [r3, #20]
 81049ae:	f003 0302 	and.w	r3, r3, #2
 81049b2:	2b02      	cmp	r3, #2
 81049b4:	d11a      	bne.n	81049ec <HAL_SPI_TransmitReceive+0x18c>
 81049b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 81049b8:	2b00      	cmp	r3, #0
 81049ba:	d017      	beq.n	81049ec <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 81049bc:	68fb      	ldr	r3, [r7, #12]
 81049be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 81049c0:	68fb      	ldr	r3, [r7, #12]
 81049c2:	681b      	ldr	r3, [r3, #0]
 81049c4:	6812      	ldr	r2, [r2, #0]
 81049c6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 81049c8:	68fb      	ldr	r3, [r7, #12]
 81049ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81049cc:	1d1a      	adds	r2, r3, #4
 81049ce:	68fb      	ldr	r3, [r7, #12]
 81049d0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 81049d2:	68fb      	ldr	r3, [r7, #12]
 81049d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81049d8:	b29b      	uxth	r3, r3
 81049da:	3b01      	subs	r3, #1
 81049dc:	b29a      	uxth	r2, r3
 81049de:	68fb      	ldr	r3, [r7, #12]
 81049e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 81049e4:	68fb      	ldr	r3, [r7, #12]
 81049e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81049ea:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 81049ec:	68fb      	ldr	r3, [r7, #12]
 81049ee:	681b      	ldr	r3, [r3, #0]
 81049f0:	695a      	ldr	r2, [r3, #20]
 81049f2:	f248 0308 	movw	r3, #32776	; 0x8008
 81049f6:	4013      	ands	r3, r2
 81049f8:	2b00      	cmp	r3, #0
 81049fa:	d01a      	beq.n	8104a32 <HAL_SPI_TransmitReceive+0x1d2>
 81049fc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 81049fe:	2b00      	cmp	r3, #0
 8104a00:	d017      	beq.n	8104a32 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8104a02:	68fb      	ldr	r3, [r7, #12]
 8104a04:	681a      	ldr	r2, [r3, #0]
 8104a06:	68fb      	ldr	r3, [r7, #12]
 8104a08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104a0a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8104a0c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8104a0e:	68fb      	ldr	r3, [r7, #12]
 8104a10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104a12:	1d1a      	adds	r2, r3, #4
 8104a14:	68fb      	ldr	r3, [r7, #12]
 8104a16:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8104a18:	68fb      	ldr	r3, [r7, #12]
 8104a1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104a1e:	b29b      	uxth	r3, r3
 8104a20:	3b01      	subs	r3, #1
 8104a22:	b29a      	uxth	r2, r3
 8104a24:	68fb      	ldr	r3, [r7, #12]
 8104a26:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8104a2a:	68fb      	ldr	r3, [r7, #12]
 8104a2c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104a30:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104a32:	f7fc fc51 	bl	81012d8 <HAL_GetTick>
 8104a36:	4602      	mov	r2, r0
 8104a38:	69fb      	ldr	r3, [r7, #28]
 8104a3a:	1ad3      	subs	r3, r2, r3
 8104a3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8104a3e:	429a      	cmp	r2, r3
 8104a40:	d803      	bhi.n	8104a4a <HAL_SPI_TransmitReceive+0x1ea>
 8104a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104a48:	d102      	bne.n	8104a50 <HAL_SPI_TransmitReceive+0x1f0>
 8104a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104a4c:	2b00      	cmp	r3, #0
 8104a4e:	d114      	bne.n	8104a7a <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8104a50:	68f8      	ldr	r0, [r7, #12]
 8104a52:	f000 f92a 	bl	8104caa <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8104a56:	68fb      	ldr	r3, [r7, #12]
 8104a58:	2200      	movs	r2, #0
 8104a5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8104a5e:	68fb      	ldr	r3, [r7, #12]
 8104a60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104a64:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8104a68:	68fb      	ldr	r3, [r7, #12]
 8104a6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8104a6e:	68fb      	ldr	r3, [r7, #12]
 8104a70:	2201      	movs	r2, #1
 8104a72:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8104a76:	2303      	movs	r3, #3
 8104a78:	e113      	b.n	8104ca2 <HAL_SPI_TransmitReceive+0x442>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8104a7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8104a7c:	2b00      	cmp	r3, #0
 8104a7e:	d193      	bne.n	81049a8 <HAL_SPI_TransmitReceive+0x148>
 8104a80:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8104a82:	2b00      	cmp	r3, #0
 8104a84:	d190      	bne.n	81049a8 <HAL_SPI_TransmitReceive+0x148>
 8104a86:	e0e5      	b.n	8104c54 <HAL_SPI_TransmitReceive+0x3f4>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8104a88:	68fb      	ldr	r3, [r7, #12]
 8104a8a:	68db      	ldr	r3, [r3, #12]
 8104a8c:	2b07      	cmp	r3, #7
 8104a8e:	f240 80db 	bls.w	8104c48 <HAL_SPI_TransmitReceive+0x3e8>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8104a92:	e066      	b.n	8104b62 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8104a94:	68fb      	ldr	r3, [r7, #12]
 8104a96:	681b      	ldr	r3, [r3, #0]
 8104a98:	695b      	ldr	r3, [r3, #20]
 8104a9a:	f003 0302 	and.w	r3, r3, #2
 8104a9e:	2b02      	cmp	r3, #2
 8104aa0:	d119      	bne.n	8104ad6 <HAL_SPI_TransmitReceive+0x276>
 8104aa2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8104aa4:	2b00      	cmp	r3, #0
 8104aa6:	d016      	beq.n	8104ad6 <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8104aa8:	68fb      	ldr	r3, [r7, #12]
 8104aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104aac:	881a      	ldrh	r2, [r3, #0]
 8104aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104ab0:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8104ab2:	68fb      	ldr	r3, [r7, #12]
 8104ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104ab6:	1c9a      	adds	r2, r3, #2
 8104ab8:	68fb      	ldr	r3, [r7, #12]
 8104aba:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8104abc:	68fb      	ldr	r3, [r7, #12]
 8104abe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104ac2:	b29b      	uxth	r3, r3
 8104ac4:	3b01      	subs	r3, #1
 8104ac6:	b29a      	uxth	r2, r3
 8104ac8:	68fb      	ldr	r3, [r7, #12]
 8104aca:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8104ace:	68fb      	ldr	r3, [r7, #12]
 8104ad0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104ad4:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8104ad6:	68fb      	ldr	r3, [r7, #12]
 8104ad8:	681b      	ldr	r3, [r3, #0]
 8104ada:	695b      	ldr	r3, [r3, #20]
 8104adc:	f003 0301 	and.w	r3, r3, #1
 8104ae0:	2b01      	cmp	r3, #1
 8104ae2:	d11a      	bne.n	8104b1a <HAL_SPI_TransmitReceive+0x2ba>
 8104ae4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8104ae6:	2b00      	cmp	r3, #0
 8104ae8:	d017      	beq.n	8104b1a <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8104aea:	68fb      	ldr	r3, [r7, #12]
 8104aec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104aee:	6a3a      	ldr	r2, [r7, #32]
 8104af0:	8812      	ldrh	r2, [r2, #0]
 8104af2:	b292      	uxth	r2, r2
 8104af4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8104af6:	68fb      	ldr	r3, [r7, #12]
 8104af8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104afa:	1c9a      	adds	r2, r3, #2
 8104afc:	68fb      	ldr	r3, [r7, #12]
 8104afe:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8104b00:	68fb      	ldr	r3, [r7, #12]
 8104b02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104b06:	b29b      	uxth	r3, r3
 8104b08:	3b01      	subs	r3, #1
 8104b0a:	b29a      	uxth	r2, r3
 8104b0c:	68fb      	ldr	r3, [r7, #12]
 8104b0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8104b12:	68fb      	ldr	r3, [r7, #12]
 8104b14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104b18:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104b1a:	f7fc fbdd 	bl	81012d8 <HAL_GetTick>
 8104b1e:	4602      	mov	r2, r0
 8104b20:	69fb      	ldr	r3, [r7, #28]
 8104b22:	1ad3      	subs	r3, r2, r3
 8104b24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8104b26:	429a      	cmp	r2, r3
 8104b28:	d803      	bhi.n	8104b32 <HAL_SPI_TransmitReceive+0x2d2>
 8104b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104b30:	d102      	bne.n	8104b38 <HAL_SPI_TransmitReceive+0x2d8>
 8104b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104b34:	2b00      	cmp	r3, #0
 8104b36:	d114      	bne.n	8104b62 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8104b38:	68f8      	ldr	r0, [r7, #12]
 8104b3a:	f000 f8b6 	bl	8104caa <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8104b3e:	68fb      	ldr	r3, [r7, #12]
 8104b40:	2200      	movs	r2, #0
 8104b42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8104b46:	68fb      	ldr	r3, [r7, #12]
 8104b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104b4c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8104b50:	68fb      	ldr	r3, [r7, #12]
 8104b52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8104b56:	68fb      	ldr	r3, [r7, #12]
 8104b58:	2201      	movs	r2, #1
 8104b5a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8104b5e:	2303      	movs	r3, #3
 8104b60:	e09f      	b.n	8104ca2 <HAL_SPI_TransmitReceive+0x442>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8104b62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8104b64:	2b00      	cmp	r3, #0
 8104b66:	d195      	bne.n	8104a94 <HAL_SPI_TransmitReceive+0x234>
 8104b68:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8104b6a:	2b00      	cmp	r3, #0
 8104b6c:	d192      	bne.n	8104a94 <HAL_SPI_TransmitReceive+0x234>
 8104b6e:	e071      	b.n	8104c54 <HAL_SPI_TransmitReceive+0x3f4>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8104b70:	68fb      	ldr	r3, [r7, #12]
 8104b72:	681b      	ldr	r3, [r3, #0]
 8104b74:	695b      	ldr	r3, [r3, #20]
 8104b76:	f003 0302 	and.w	r3, r3, #2
 8104b7a:	2b02      	cmp	r3, #2
 8104b7c:	d11b      	bne.n	8104bb6 <HAL_SPI_TransmitReceive+0x356>
 8104b7e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8104b80:	2b00      	cmp	r3, #0
 8104b82:	d018      	beq.n	8104bb6 <HAL_SPI_TransmitReceive+0x356>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8104b84:	68fb      	ldr	r3, [r7, #12]
 8104b86:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8104b88:	68fb      	ldr	r3, [r7, #12]
 8104b8a:	681b      	ldr	r3, [r3, #0]
 8104b8c:	3320      	adds	r3, #32
 8104b8e:	7812      	ldrb	r2, [r2, #0]
 8104b90:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8104b92:	68fb      	ldr	r3, [r7, #12]
 8104b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104b96:	1c5a      	adds	r2, r3, #1
 8104b98:	68fb      	ldr	r3, [r7, #12]
 8104b9a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8104b9c:	68fb      	ldr	r3, [r7, #12]
 8104b9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104ba2:	b29b      	uxth	r3, r3
 8104ba4:	3b01      	subs	r3, #1
 8104ba6:	b29a      	uxth	r2, r3
 8104ba8:	68fb      	ldr	r3, [r7, #12]
 8104baa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8104bae:	68fb      	ldr	r3, [r7, #12]
 8104bb0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104bb4:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8104bb6:	68fb      	ldr	r3, [r7, #12]
 8104bb8:	681b      	ldr	r3, [r3, #0]
 8104bba:	695b      	ldr	r3, [r3, #20]
 8104bbc:	f003 0301 	and.w	r3, r3, #1
 8104bc0:	2b01      	cmp	r3, #1
 8104bc2:	d11d      	bne.n	8104c00 <HAL_SPI_TransmitReceive+0x3a0>
 8104bc4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8104bc6:	2b00      	cmp	r3, #0
 8104bc8:	d01a      	beq.n	8104c00 <HAL_SPI_TransmitReceive+0x3a0>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8104bca:	68fb      	ldr	r3, [r7, #12]
 8104bcc:	681b      	ldr	r3, [r3, #0]
 8104bce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8104bd2:	68fb      	ldr	r3, [r7, #12]
 8104bd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104bd6:	7812      	ldrb	r2, [r2, #0]
 8104bd8:	b2d2      	uxtb	r2, r2
 8104bda:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8104bdc:	68fb      	ldr	r3, [r7, #12]
 8104bde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104be0:	1c5a      	adds	r2, r3, #1
 8104be2:	68fb      	ldr	r3, [r7, #12]
 8104be4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8104be6:	68fb      	ldr	r3, [r7, #12]
 8104be8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104bec:	b29b      	uxth	r3, r3
 8104bee:	3b01      	subs	r3, #1
 8104bf0:	b29a      	uxth	r2, r3
 8104bf2:	68fb      	ldr	r3, [r7, #12]
 8104bf4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8104bf8:	68fb      	ldr	r3, [r7, #12]
 8104bfa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104bfe:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104c00:	f7fc fb6a 	bl	81012d8 <HAL_GetTick>
 8104c04:	4602      	mov	r2, r0
 8104c06:	69fb      	ldr	r3, [r7, #28]
 8104c08:	1ad3      	subs	r3, r2, r3
 8104c0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8104c0c:	429a      	cmp	r2, r3
 8104c0e:	d803      	bhi.n	8104c18 <HAL_SPI_TransmitReceive+0x3b8>
 8104c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104c16:	d102      	bne.n	8104c1e <HAL_SPI_TransmitReceive+0x3be>
 8104c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104c1a:	2b00      	cmp	r3, #0
 8104c1c:	d114      	bne.n	8104c48 <HAL_SPI_TransmitReceive+0x3e8>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8104c1e:	68f8      	ldr	r0, [r7, #12]
 8104c20:	f000 f843 	bl	8104caa <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8104c24:	68fb      	ldr	r3, [r7, #12]
 8104c26:	2200      	movs	r2, #0
 8104c28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8104c2c:	68fb      	ldr	r3, [r7, #12]
 8104c2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104c32:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8104c36:	68fb      	ldr	r3, [r7, #12]
 8104c38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8104c3c:	68fb      	ldr	r3, [r7, #12]
 8104c3e:	2201      	movs	r2, #1
 8104c40:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8104c44:	2303      	movs	r3, #3
 8104c46:	e02c      	b.n	8104ca2 <HAL_SPI_TransmitReceive+0x442>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8104c48:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8104c4a:	2b00      	cmp	r3, #0
 8104c4c:	d190      	bne.n	8104b70 <HAL_SPI_TransmitReceive+0x310>
 8104c4e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8104c50:	2b00      	cmp	r3, #0
 8104c52:	d18d      	bne.n	8104b70 <HAL_SPI_TransmitReceive+0x310>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8104c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104c56:	9300      	str	r3, [sp, #0]
 8104c58:	69fb      	ldr	r3, [r7, #28]
 8104c5a:	2200      	movs	r2, #0
 8104c5c:	2108      	movs	r1, #8
 8104c5e:	68f8      	ldr	r0, [r7, #12]
 8104c60:	f000 f8c3 	bl	8104dea <SPI_WaitOnFlagUntilTimeout>
 8104c64:	4603      	mov	r3, r0
 8104c66:	2b00      	cmp	r3, #0
 8104c68:	d007      	beq.n	8104c7a <HAL_SPI_TransmitReceive+0x41a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8104c6a:	68fb      	ldr	r3, [r7, #12]
 8104c6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104c70:	f043 0220 	orr.w	r2, r3, #32
 8104c74:	68fb      	ldr	r3, [r7, #12]
 8104c76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8104c7a:	68f8      	ldr	r0, [r7, #12]
 8104c7c:	f000 f815 	bl	8104caa <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8104c80:	68fb      	ldr	r3, [r7, #12]
 8104c82:	2200      	movs	r2, #0
 8104c84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8104c88:	68fb      	ldr	r3, [r7, #12]
 8104c8a:	2201      	movs	r2, #1
 8104c8c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8104c90:	68fb      	ldr	r3, [r7, #12]
 8104c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104c96:	2b00      	cmp	r3, #0
 8104c98:	d001      	beq.n	8104c9e <HAL_SPI_TransmitReceive+0x43e>
  {
    return HAL_ERROR;
 8104c9a:	2301      	movs	r3, #1
 8104c9c:	e001      	b.n	8104ca2 <HAL_SPI_TransmitReceive+0x442>
  }
  return errorcode;
 8104c9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8104ca2:	4618      	mov	r0, r3
 8104ca4:	3730      	adds	r7, #48	; 0x30
 8104ca6:	46bd      	mov	sp, r7
 8104ca8:	bd80      	pop	{r7, pc}

08104caa <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8104caa:	b480      	push	{r7}
 8104cac:	b085      	sub	sp, #20
 8104cae:	af00      	add	r7, sp, #0
 8104cb0:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8104cb2:	687b      	ldr	r3, [r7, #4]
 8104cb4:	681b      	ldr	r3, [r3, #0]
 8104cb6:	695b      	ldr	r3, [r3, #20]
 8104cb8:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8104cba:	687b      	ldr	r3, [r7, #4]
 8104cbc:	681b      	ldr	r3, [r3, #0]
 8104cbe:	699a      	ldr	r2, [r3, #24]
 8104cc0:	687b      	ldr	r3, [r7, #4]
 8104cc2:	681b      	ldr	r3, [r3, #0]
 8104cc4:	f042 0208 	orr.w	r2, r2, #8
 8104cc8:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8104cca:	687b      	ldr	r3, [r7, #4]
 8104ccc:	681b      	ldr	r3, [r3, #0]
 8104cce:	699a      	ldr	r2, [r3, #24]
 8104cd0:	687b      	ldr	r3, [r7, #4]
 8104cd2:	681b      	ldr	r3, [r3, #0]
 8104cd4:	f042 0210 	orr.w	r2, r2, #16
 8104cd8:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8104cda:	687b      	ldr	r3, [r7, #4]
 8104cdc:	681b      	ldr	r3, [r3, #0]
 8104cde:	681a      	ldr	r2, [r3, #0]
 8104ce0:	687b      	ldr	r3, [r7, #4]
 8104ce2:	681b      	ldr	r3, [r3, #0]
 8104ce4:	f022 0201 	bic.w	r2, r2, #1
 8104ce8:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8104cea:	687b      	ldr	r3, [r7, #4]
 8104cec:	681b      	ldr	r3, [r3, #0]
 8104cee:	691b      	ldr	r3, [r3, #16]
 8104cf0:	687a      	ldr	r2, [r7, #4]
 8104cf2:	6812      	ldr	r2, [r2, #0]
 8104cf4:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8104cf8:	f023 0303 	bic.w	r3, r3, #3
 8104cfc:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8104cfe:	687b      	ldr	r3, [r7, #4]
 8104d00:	681b      	ldr	r3, [r3, #0]
 8104d02:	689a      	ldr	r2, [r3, #8]
 8104d04:	687b      	ldr	r3, [r7, #4]
 8104d06:	681b      	ldr	r3, [r3, #0]
 8104d08:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8104d0c:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8104d0e:	687b      	ldr	r3, [r7, #4]
 8104d10:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8104d14:	b2db      	uxtb	r3, r3
 8104d16:	2b04      	cmp	r3, #4
 8104d18:	d014      	beq.n	8104d44 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8104d1a:	68fb      	ldr	r3, [r7, #12]
 8104d1c:	f003 0320 	and.w	r3, r3, #32
 8104d20:	2b00      	cmp	r3, #0
 8104d22:	d00f      	beq.n	8104d44 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8104d24:	687b      	ldr	r3, [r7, #4]
 8104d26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104d2a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8104d2e:	687b      	ldr	r3, [r7, #4]
 8104d30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8104d34:	687b      	ldr	r3, [r7, #4]
 8104d36:	681b      	ldr	r3, [r3, #0]
 8104d38:	699a      	ldr	r2, [r3, #24]
 8104d3a:	687b      	ldr	r3, [r7, #4]
 8104d3c:	681b      	ldr	r3, [r3, #0]
 8104d3e:	f042 0220 	orr.w	r2, r2, #32
 8104d42:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8104d44:	687b      	ldr	r3, [r7, #4]
 8104d46:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8104d4a:	b2db      	uxtb	r3, r3
 8104d4c:	2b03      	cmp	r3, #3
 8104d4e:	d014      	beq.n	8104d7a <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8104d50:	68fb      	ldr	r3, [r7, #12]
 8104d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104d56:	2b00      	cmp	r3, #0
 8104d58:	d00f      	beq.n	8104d7a <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8104d5a:	687b      	ldr	r3, [r7, #4]
 8104d5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104d60:	f043 0204 	orr.w	r2, r3, #4
 8104d64:	687b      	ldr	r3, [r7, #4]
 8104d66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8104d6a:	687b      	ldr	r3, [r7, #4]
 8104d6c:	681b      	ldr	r3, [r3, #0]
 8104d6e:	699a      	ldr	r2, [r3, #24]
 8104d70:	687b      	ldr	r3, [r7, #4]
 8104d72:	681b      	ldr	r3, [r3, #0]
 8104d74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8104d78:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8104d7a:	68fb      	ldr	r3, [r7, #12]
 8104d7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8104d80:	2b00      	cmp	r3, #0
 8104d82:	d00f      	beq.n	8104da4 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8104d84:	687b      	ldr	r3, [r7, #4]
 8104d86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104d8a:	f043 0201 	orr.w	r2, r3, #1
 8104d8e:	687b      	ldr	r3, [r7, #4]
 8104d90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8104d94:	687b      	ldr	r3, [r7, #4]
 8104d96:	681b      	ldr	r3, [r3, #0]
 8104d98:	699a      	ldr	r2, [r3, #24]
 8104d9a:	687b      	ldr	r3, [r7, #4]
 8104d9c:	681b      	ldr	r3, [r3, #0]
 8104d9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8104da2:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8104da4:	68fb      	ldr	r3, [r7, #12]
 8104da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104daa:	2b00      	cmp	r3, #0
 8104dac:	d00f      	beq.n	8104dce <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8104dae:	687b      	ldr	r3, [r7, #4]
 8104db0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104db4:	f043 0208 	orr.w	r2, r3, #8
 8104db8:	687b      	ldr	r3, [r7, #4]
 8104dba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8104dbe:	687b      	ldr	r3, [r7, #4]
 8104dc0:	681b      	ldr	r3, [r3, #0]
 8104dc2:	699a      	ldr	r2, [r3, #24]
 8104dc4:	687b      	ldr	r3, [r7, #4]
 8104dc6:	681b      	ldr	r3, [r3, #0]
 8104dc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8104dcc:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8104dce:	687b      	ldr	r3, [r7, #4]
 8104dd0:	2200      	movs	r2, #0
 8104dd2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8104dd6:	687b      	ldr	r3, [r7, #4]
 8104dd8:	2200      	movs	r2, #0
 8104dda:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8104dde:	bf00      	nop
 8104de0:	3714      	adds	r7, #20
 8104de2:	46bd      	mov	sp, r7
 8104de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104de8:	4770      	bx	lr

08104dea <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8104dea:	b580      	push	{r7, lr}
 8104dec:	b084      	sub	sp, #16
 8104dee:	af00      	add	r7, sp, #0
 8104df0:	60f8      	str	r0, [r7, #12]
 8104df2:	60b9      	str	r1, [r7, #8]
 8104df4:	603b      	str	r3, [r7, #0]
 8104df6:	4613      	mov	r3, r2
 8104df8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8104dfa:	e010      	b.n	8104e1e <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104dfc:	f7fc fa6c 	bl	81012d8 <HAL_GetTick>
 8104e00:	4602      	mov	r2, r0
 8104e02:	683b      	ldr	r3, [r7, #0]
 8104e04:	1ad3      	subs	r3, r2, r3
 8104e06:	69ba      	ldr	r2, [r7, #24]
 8104e08:	429a      	cmp	r2, r3
 8104e0a:	d803      	bhi.n	8104e14 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8104e0c:	69bb      	ldr	r3, [r7, #24]
 8104e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104e12:	d102      	bne.n	8104e1a <SPI_WaitOnFlagUntilTimeout+0x30>
 8104e14:	69bb      	ldr	r3, [r7, #24]
 8104e16:	2b00      	cmp	r3, #0
 8104e18:	d101      	bne.n	8104e1e <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8104e1a:	2303      	movs	r3, #3
 8104e1c:	e00f      	b.n	8104e3e <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8104e1e:	68fb      	ldr	r3, [r7, #12]
 8104e20:	681b      	ldr	r3, [r3, #0]
 8104e22:	695a      	ldr	r2, [r3, #20]
 8104e24:	68bb      	ldr	r3, [r7, #8]
 8104e26:	4013      	ands	r3, r2
 8104e28:	68ba      	ldr	r2, [r7, #8]
 8104e2a:	429a      	cmp	r2, r3
 8104e2c:	bf0c      	ite	eq
 8104e2e:	2301      	moveq	r3, #1
 8104e30:	2300      	movne	r3, #0
 8104e32:	b2db      	uxtb	r3, r3
 8104e34:	461a      	mov	r2, r3
 8104e36:	79fb      	ldrb	r3, [r7, #7]
 8104e38:	429a      	cmp	r2, r3
 8104e3a:	d0df      	beq.n	8104dfc <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8104e3c:	2300      	movs	r3, #0
}
 8104e3e:	4618      	mov	r0, r3
 8104e40:	3710      	adds	r7, #16
 8104e42:	46bd      	mov	sp, r7
 8104e44:	bd80      	pop	{r7, pc}

08104e46 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8104e46:	b480      	push	{r7}
 8104e48:	b085      	sub	sp, #20
 8104e4a:	af00      	add	r7, sp, #0
 8104e4c:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8104e4e:	687b      	ldr	r3, [r7, #4]
 8104e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104e52:	095b      	lsrs	r3, r3, #5
 8104e54:	3301      	adds	r3, #1
 8104e56:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8104e58:	687b      	ldr	r3, [r7, #4]
 8104e5a:	68db      	ldr	r3, [r3, #12]
 8104e5c:	3301      	adds	r3, #1
 8104e5e:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8104e60:	68bb      	ldr	r3, [r7, #8]
 8104e62:	3307      	adds	r3, #7
 8104e64:	08db      	lsrs	r3, r3, #3
 8104e66:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8104e68:	68bb      	ldr	r3, [r7, #8]
 8104e6a:	68fa      	ldr	r2, [r7, #12]
 8104e6c:	fb02 f303 	mul.w	r3, r2, r3
}
 8104e70:	4618      	mov	r0, r3
 8104e72:	3714      	adds	r7, #20
 8104e74:	46bd      	mov	sp, r7
 8104e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e7a:	4770      	bx	lr

08104e7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8104e7c:	b580      	push	{r7, lr}
 8104e7e:	b082      	sub	sp, #8
 8104e80:	af00      	add	r7, sp, #0
 8104e82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8104e84:	687b      	ldr	r3, [r7, #4]
 8104e86:	2b00      	cmp	r3, #0
 8104e88:	d101      	bne.n	8104e8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8104e8a:	2301      	movs	r3, #1
 8104e8c:	e049      	b.n	8104f22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8104e8e:	687b      	ldr	r3, [r7, #4]
 8104e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8104e94:	b2db      	uxtb	r3, r3
 8104e96:	2b00      	cmp	r3, #0
 8104e98:	d106      	bne.n	8104ea8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8104e9a:	687b      	ldr	r3, [r7, #4]
 8104e9c:	2200      	movs	r2, #0
 8104e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8104ea2:	6878      	ldr	r0, [r7, #4]
 8104ea4:	f7fc f8e2 	bl	810106c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8104ea8:	687b      	ldr	r3, [r7, #4]
 8104eaa:	2202      	movs	r2, #2
 8104eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8104eb0:	687b      	ldr	r3, [r7, #4]
 8104eb2:	681a      	ldr	r2, [r3, #0]
 8104eb4:	687b      	ldr	r3, [r7, #4]
 8104eb6:	3304      	adds	r3, #4
 8104eb8:	4619      	mov	r1, r3
 8104eba:	4610      	mov	r0, r2
 8104ebc:	f000 f97c 	bl	81051b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8104ec0:	687b      	ldr	r3, [r7, #4]
 8104ec2:	2201      	movs	r2, #1
 8104ec4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8104ec8:	687b      	ldr	r3, [r7, #4]
 8104eca:	2201      	movs	r2, #1
 8104ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8104ed0:	687b      	ldr	r3, [r7, #4]
 8104ed2:	2201      	movs	r2, #1
 8104ed4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8104ed8:	687b      	ldr	r3, [r7, #4]
 8104eda:	2201      	movs	r2, #1
 8104edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8104ee0:	687b      	ldr	r3, [r7, #4]
 8104ee2:	2201      	movs	r2, #1
 8104ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8104ee8:	687b      	ldr	r3, [r7, #4]
 8104eea:	2201      	movs	r2, #1
 8104eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8104ef0:	687b      	ldr	r3, [r7, #4]
 8104ef2:	2201      	movs	r2, #1
 8104ef4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8104ef8:	687b      	ldr	r3, [r7, #4]
 8104efa:	2201      	movs	r2, #1
 8104efc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8104f00:	687b      	ldr	r3, [r7, #4]
 8104f02:	2201      	movs	r2, #1
 8104f04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8104f08:	687b      	ldr	r3, [r7, #4]
 8104f0a:	2201      	movs	r2, #1
 8104f0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8104f10:	687b      	ldr	r3, [r7, #4]
 8104f12:	2201      	movs	r2, #1
 8104f14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8104f18:	687b      	ldr	r3, [r7, #4]
 8104f1a:	2201      	movs	r2, #1
 8104f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8104f20:	2300      	movs	r3, #0
}
 8104f22:	4618      	mov	r0, r3
 8104f24:	3708      	adds	r7, #8
 8104f26:	46bd      	mov	sp, r7
 8104f28:	bd80      	pop	{r7, pc}

08104f2a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8104f2a:	b580      	push	{r7, lr}
 8104f2c:	b082      	sub	sp, #8
 8104f2e:	af00      	add	r7, sp, #0
 8104f30:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8104f32:	687b      	ldr	r3, [r7, #4]
 8104f34:	681b      	ldr	r3, [r3, #0]
 8104f36:	691b      	ldr	r3, [r3, #16]
 8104f38:	f003 0302 	and.w	r3, r3, #2
 8104f3c:	2b02      	cmp	r3, #2
 8104f3e:	d122      	bne.n	8104f86 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8104f40:	687b      	ldr	r3, [r7, #4]
 8104f42:	681b      	ldr	r3, [r3, #0]
 8104f44:	68db      	ldr	r3, [r3, #12]
 8104f46:	f003 0302 	and.w	r3, r3, #2
 8104f4a:	2b02      	cmp	r3, #2
 8104f4c:	d11b      	bne.n	8104f86 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8104f4e:	687b      	ldr	r3, [r7, #4]
 8104f50:	681b      	ldr	r3, [r3, #0]
 8104f52:	f06f 0202 	mvn.w	r2, #2
 8104f56:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8104f58:	687b      	ldr	r3, [r7, #4]
 8104f5a:	2201      	movs	r2, #1
 8104f5c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8104f5e:	687b      	ldr	r3, [r7, #4]
 8104f60:	681b      	ldr	r3, [r3, #0]
 8104f62:	699b      	ldr	r3, [r3, #24]
 8104f64:	f003 0303 	and.w	r3, r3, #3
 8104f68:	2b00      	cmp	r3, #0
 8104f6a:	d003      	beq.n	8104f74 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8104f6c:	6878      	ldr	r0, [r7, #4]
 8104f6e:	f000 f905 	bl	810517c <HAL_TIM_IC_CaptureCallback>
 8104f72:	e005      	b.n	8104f80 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8104f74:	6878      	ldr	r0, [r7, #4]
 8104f76:	f000 f8f7 	bl	8105168 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8104f7a:	6878      	ldr	r0, [r7, #4]
 8104f7c:	f000 f908 	bl	8105190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8104f80:	687b      	ldr	r3, [r7, #4]
 8104f82:	2200      	movs	r2, #0
 8104f84:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8104f86:	687b      	ldr	r3, [r7, #4]
 8104f88:	681b      	ldr	r3, [r3, #0]
 8104f8a:	691b      	ldr	r3, [r3, #16]
 8104f8c:	f003 0304 	and.w	r3, r3, #4
 8104f90:	2b04      	cmp	r3, #4
 8104f92:	d122      	bne.n	8104fda <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8104f94:	687b      	ldr	r3, [r7, #4]
 8104f96:	681b      	ldr	r3, [r3, #0]
 8104f98:	68db      	ldr	r3, [r3, #12]
 8104f9a:	f003 0304 	and.w	r3, r3, #4
 8104f9e:	2b04      	cmp	r3, #4
 8104fa0:	d11b      	bne.n	8104fda <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8104fa2:	687b      	ldr	r3, [r7, #4]
 8104fa4:	681b      	ldr	r3, [r3, #0]
 8104fa6:	f06f 0204 	mvn.w	r2, #4
 8104faa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8104fac:	687b      	ldr	r3, [r7, #4]
 8104fae:	2202      	movs	r2, #2
 8104fb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8104fb2:	687b      	ldr	r3, [r7, #4]
 8104fb4:	681b      	ldr	r3, [r3, #0]
 8104fb6:	699b      	ldr	r3, [r3, #24]
 8104fb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8104fbc:	2b00      	cmp	r3, #0
 8104fbe:	d003      	beq.n	8104fc8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8104fc0:	6878      	ldr	r0, [r7, #4]
 8104fc2:	f000 f8db 	bl	810517c <HAL_TIM_IC_CaptureCallback>
 8104fc6:	e005      	b.n	8104fd4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8104fc8:	6878      	ldr	r0, [r7, #4]
 8104fca:	f000 f8cd 	bl	8105168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8104fce:	6878      	ldr	r0, [r7, #4]
 8104fd0:	f000 f8de 	bl	8105190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8104fd4:	687b      	ldr	r3, [r7, #4]
 8104fd6:	2200      	movs	r2, #0
 8104fd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8104fda:	687b      	ldr	r3, [r7, #4]
 8104fdc:	681b      	ldr	r3, [r3, #0]
 8104fde:	691b      	ldr	r3, [r3, #16]
 8104fe0:	f003 0308 	and.w	r3, r3, #8
 8104fe4:	2b08      	cmp	r3, #8
 8104fe6:	d122      	bne.n	810502e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8104fe8:	687b      	ldr	r3, [r7, #4]
 8104fea:	681b      	ldr	r3, [r3, #0]
 8104fec:	68db      	ldr	r3, [r3, #12]
 8104fee:	f003 0308 	and.w	r3, r3, #8
 8104ff2:	2b08      	cmp	r3, #8
 8104ff4:	d11b      	bne.n	810502e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8104ff6:	687b      	ldr	r3, [r7, #4]
 8104ff8:	681b      	ldr	r3, [r3, #0]
 8104ffa:	f06f 0208 	mvn.w	r2, #8
 8104ffe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8105000:	687b      	ldr	r3, [r7, #4]
 8105002:	2204      	movs	r2, #4
 8105004:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8105006:	687b      	ldr	r3, [r7, #4]
 8105008:	681b      	ldr	r3, [r3, #0]
 810500a:	69db      	ldr	r3, [r3, #28]
 810500c:	f003 0303 	and.w	r3, r3, #3
 8105010:	2b00      	cmp	r3, #0
 8105012:	d003      	beq.n	810501c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8105014:	6878      	ldr	r0, [r7, #4]
 8105016:	f000 f8b1 	bl	810517c <HAL_TIM_IC_CaptureCallback>
 810501a:	e005      	b.n	8105028 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810501c:	6878      	ldr	r0, [r7, #4]
 810501e:	f000 f8a3 	bl	8105168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8105022:	6878      	ldr	r0, [r7, #4]
 8105024:	f000 f8b4 	bl	8105190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8105028:	687b      	ldr	r3, [r7, #4]
 810502a:	2200      	movs	r2, #0
 810502c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 810502e:	687b      	ldr	r3, [r7, #4]
 8105030:	681b      	ldr	r3, [r3, #0]
 8105032:	691b      	ldr	r3, [r3, #16]
 8105034:	f003 0310 	and.w	r3, r3, #16
 8105038:	2b10      	cmp	r3, #16
 810503a:	d122      	bne.n	8105082 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 810503c:	687b      	ldr	r3, [r7, #4]
 810503e:	681b      	ldr	r3, [r3, #0]
 8105040:	68db      	ldr	r3, [r3, #12]
 8105042:	f003 0310 	and.w	r3, r3, #16
 8105046:	2b10      	cmp	r3, #16
 8105048:	d11b      	bne.n	8105082 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 810504a:	687b      	ldr	r3, [r7, #4]
 810504c:	681b      	ldr	r3, [r3, #0]
 810504e:	f06f 0210 	mvn.w	r2, #16
 8105052:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8105054:	687b      	ldr	r3, [r7, #4]
 8105056:	2208      	movs	r2, #8
 8105058:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 810505a:	687b      	ldr	r3, [r7, #4]
 810505c:	681b      	ldr	r3, [r3, #0]
 810505e:	69db      	ldr	r3, [r3, #28]
 8105060:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8105064:	2b00      	cmp	r3, #0
 8105066:	d003      	beq.n	8105070 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8105068:	6878      	ldr	r0, [r7, #4]
 810506a:	f000 f887 	bl	810517c <HAL_TIM_IC_CaptureCallback>
 810506e:	e005      	b.n	810507c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8105070:	6878      	ldr	r0, [r7, #4]
 8105072:	f000 f879 	bl	8105168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8105076:	6878      	ldr	r0, [r7, #4]
 8105078:	f000 f88a 	bl	8105190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810507c:	687b      	ldr	r3, [r7, #4]
 810507e:	2200      	movs	r2, #0
 8105080:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8105082:	687b      	ldr	r3, [r7, #4]
 8105084:	681b      	ldr	r3, [r3, #0]
 8105086:	691b      	ldr	r3, [r3, #16]
 8105088:	f003 0301 	and.w	r3, r3, #1
 810508c:	2b01      	cmp	r3, #1
 810508e:	d10e      	bne.n	81050ae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8105090:	687b      	ldr	r3, [r7, #4]
 8105092:	681b      	ldr	r3, [r3, #0]
 8105094:	68db      	ldr	r3, [r3, #12]
 8105096:	f003 0301 	and.w	r3, r3, #1
 810509a:	2b01      	cmp	r3, #1
 810509c:	d107      	bne.n	81050ae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 810509e:	687b      	ldr	r3, [r7, #4]
 81050a0:	681b      	ldr	r3, [r3, #0]
 81050a2:	f06f 0201 	mvn.w	r2, #1
 81050a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 81050a8:	6878      	ldr	r0, [r7, #4]
 81050aa:	f7fb fe7b 	bl	8100da4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 81050ae:	687b      	ldr	r3, [r7, #4]
 81050b0:	681b      	ldr	r3, [r3, #0]
 81050b2:	691b      	ldr	r3, [r3, #16]
 81050b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81050b8:	2b80      	cmp	r3, #128	; 0x80
 81050ba:	d10e      	bne.n	81050da <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 81050bc:	687b      	ldr	r3, [r7, #4]
 81050be:	681b      	ldr	r3, [r3, #0]
 81050c0:	68db      	ldr	r3, [r3, #12]
 81050c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81050c6:	2b80      	cmp	r3, #128	; 0x80
 81050c8:	d107      	bne.n	81050da <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 81050ca:	687b      	ldr	r3, [r7, #4]
 81050cc:	681b      	ldr	r3, [r3, #0]
 81050ce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 81050d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 81050d4:	6878      	ldr	r0, [r7, #4]
 81050d6:	f000 f913 	bl	8105300 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 81050da:	687b      	ldr	r3, [r7, #4]
 81050dc:	681b      	ldr	r3, [r3, #0]
 81050de:	691b      	ldr	r3, [r3, #16]
 81050e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81050e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81050e8:	d10e      	bne.n	8105108 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 81050ea:	687b      	ldr	r3, [r7, #4]
 81050ec:	681b      	ldr	r3, [r3, #0]
 81050ee:	68db      	ldr	r3, [r3, #12]
 81050f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81050f4:	2b80      	cmp	r3, #128	; 0x80
 81050f6:	d107      	bne.n	8105108 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 81050f8:	687b      	ldr	r3, [r7, #4]
 81050fa:	681b      	ldr	r3, [r3, #0]
 81050fc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8105100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8105102:	6878      	ldr	r0, [r7, #4]
 8105104:	f000 f906 	bl	8105314 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8105108:	687b      	ldr	r3, [r7, #4]
 810510a:	681b      	ldr	r3, [r3, #0]
 810510c:	691b      	ldr	r3, [r3, #16]
 810510e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105112:	2b40      	cmp	r3, #64	; 0x40
 8105114:	d10e      	bne.n	8105134 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8105116:	687b      	ldr	r3, [r7, #4]
 8105118:	681b      	ldr	r3, [r3, #0]
 810511a:	68db      	ldr	r3, [r3, #12]
 810511c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105120:	2b40      	cmp	r3, #64	; 0x40
 8105122:	d107      	bne.n	8105134 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8105124:	687b      	ldr	r3, [r7, #4]
 8105126:	681b      	ldr	r3, [r3, #0]
 8105128:	f06f 0240 	mvn.w	r2, #64	; 0x40
 810512c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 810512e:	6878      	ldr	r0, [r7, #4]
 8105130:	f000 f838 	bl	81051a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8105134:	687b      	ldr	r3, [r7, #4]
 8105136:	681b      	ldr	r3, [r3, #0]
 8105138:	691b      	ldr	r3, [r3, #16]
 810513a:	f003 0320 	and.w	r3, r3, #32
 810513e:	2b20      	cmp	r3, #32
 8105140:	d10e      	bne.n	8105160 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8105142:	687b      	ldr	r3, [r7, #4]
 8105144:	681b      	ldr	r3, [r3, #0]
 8105146:	68db      	ldr	r3, [r3, #12]
 8105148:	f003 0320 	and.w	r3, r3, #32
 810514c:	2b20      	cmp	r3, #32
 810514e:	d107      	bne.n	8105160 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8105150:	687b      	ldr	r3, [r7, #4]
 8105152:	681b      	ldr	r3, [r3, #0]
 8105154:	f06f 0220 	mvn.w	r2, #32
 8105158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 810515a:	6878      	ldr	r0, [r7, #4]
 810515c:	f000 f8c6 	bl	81052ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8105160:	bf00      	nop
 8105162:	3708      	adds	r7, #8
 8105164:	46bd      	mov	sp, r7
 8105166:	bd80      	pop	{r7, pc}

08105168 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8105168:	b480      	push	{r7}
 810516a:	b083      	sub	sp, #12
 810516c:	af00      	add	r7, sp, #0
 810516e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8105170:	bf00      	nop
 8105172:	370c      	adds	r7, #12
 8105174:	46bd      	mov	sp, r7
 8105176:	f85d 7b04 	ldr.w	r7, [sp], #4
 810517a:	4770      	bx	lr

0810517c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 810517c:	b480      	push	{r7}
 810517e:	b083      	sub	sp, #12
 8105180:	af00      	add	r7, sp, #0
 8105182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8105184:	bf00      	nop
 8105186:	370c      	adds	r7, #12
 8105188:	46bd      	mov	sp, r7
 810518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810518e:	4770      	bx	lr

08105190 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8105190:	b480      	push	{r7}
 8105192:	b083      	sub	sp, #12
 8105194:	af00      	add	r7, sp, #0
 8105196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8105198:	bf00      	nop
 810519a:	370c      	adds	r7, #12
 810519c:	46bd      	mov	sp, r7
 810519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81051a2:	4770      	bx	lr

081051a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 81051a4:	b480      	push	{r7}
 81051a6:	b083      	sub	sp, #12
 81051a8:	af00      	add	r7, sp, #0
 81051aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 81051ac:	bf00      	nop
 81051ae:	370c      	adds	r7, #12
 81051b0:	46bd      	mov	sp, r7
 81051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81051b6:	4770      	bx	lr

081051b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 81051b8:	b480      	push	{r7}
 81051ba:	b085      	sub	sp, #20
 81051bc:	af00      	add	r7, sp, #0
 81051be:	6078      	str	r0, [r7, #4]
 81051c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 81051c2:	687b      	ldr	r3, [r7, #4]
 81051c4:	681b      	ldr	r3, [r3, #0]
 81051c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 81051c8:	687b      	ldr	r3, [r7, #4]
 81051ca:	4a40      	ldr	r2, [pc, #256]	; (81052cc <TIM_Base_SetConfig+0x114>)
 81051cc:	4293      	cmp	r3, r2
 81051ce:	d013      	beq.n	81051f8 <TIM_Base_SetConfig+0x40>
 81051d0:	687b      	ldr	r3, [r7, #4]
 81051d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81051d6:	d00f      	beq.n	81051f8 <TIM_Base_SetConfig+0x40>
 81051d8:	687b      	ldr	r3, [r7, #4]
 81051da:	4a3d      	ldr	r2, [pc, #244]	; (81052d0 <TIM_Base_SetConfig+0x118>)
 81051dc:	4293      	cmp	r3, r2
 81051de:	d00b      	beq.n	81051f8 <TIM_Base_SetConfig+0x40>
 81051e0:	687b      	ldr	r3, [r7, #4]
 81051e2:	4a3c      	ldr	r2, [pc, #240]	; (81052d4 <TIM_Base_SetConfig+0x11c>)
 81051e4:	4293      	cmp	r3, r2
 81051e6:	d007      	beq.n	81051f8 <TIM_Base_SetConfig+0x40>
 81051e8:	687b      	ldr	r3, [r7, #4]
 81051ea:	4a3b      	ldr	r2, [pc, #236]	; (81052d8 <TIM_Base_SetConfig+0x120>)
 81051ec:	4293      	cmp	r3, r2
 81051ee:	d003      	beq.n	81051f8 <TIM_Base_SetConfig+0x40>
 81051f0:	687b      	ldr	r3, [r7, #4]
 81051f2:	4a3a      	ldr	r2, [pc, #232]	; (81052dc <TIM_Base_SetConfig+0x124>)
 81051f4:	4293      	cmp	r3, r2
 81051f6:	d108      	bne.n	810520a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 81051f8:	68fb      	ldr	r3, [r7, #12]
 81051fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81051fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8105200:	683b      	ldr	r3, [r7, #0]
 8105202:	685b      	ldr	r3, [r3, #4]
 8105204:	68fa      	ldr	r2, [r7, #12]
 8105206:	4313      	orrs	r3, r2
 8105208:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810520a:	687b      	ldr	r3, [r7, #4]
 810520c:	4a2f      	ldr	r2, [pc, #188]	; (81052cc <TIM_Base_SetConfig+0x114>)
 810520e:	4293      	cmp	r3, r2
 8105210:	d01f      	beq.n	8105252 <TIM_Base_SetConfig+0x9a>
 8105212:	687b      	ldr	r3, [r7, #4]
 8105214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105218:	d01b      	beq.n	8105252 <TIM_Base_SetConfig+0x9a>
 810521a:	687b      	ldr	r3, [r7, #4]
 810521c:	4a2c      	ldr	r2, [pc, #176]	; (81052d0 <TIM_Base_SetConfig+0x118>)
 810521e:	4293      	cmp	r3, r2
 8105220:	d017      	beq.n	8105252 <TIM_Base_SetConfig+0x9a>
 8105222:	687b      	ldr	r3, [r7, #4]
 8105224:	4a2b      	ldr	r2, [pc, #172]	; (81052d4 <TIM_Base_SetConfig+0x11c>)
 8105226:	4293      	cmp	r3, r2
 8105228:	d013      	beq.n	8105252 <TIM_Base_SetConfig+0x9a>
 810522a:	687b      	ldr	r3, [r7, #4]
 810522c:	4a2a      	ldr	r2, [pc, #168]	; (81052d8 <TIM_Base_SetConfig+0x120>)
 810522e:	4293      	cmp	r3, r2
 8105230:	d00f      	beq.n	8105252 <TIM_Base_SetConfig+0x9a>
 8105232:	687b      	ldr	r3, [r7, #4]
 8105234:	4a29      	ldr	r2, [pc, #164]	; (81052dc <TIM_Base_SetConfig+0x124>)
 8105236:	4293      	cmp	r3, r2
 8105238:	d00b      	beq.n	8105252 <TIM_Base_SetConfig+0x9a>
 810523a:	687b      	ldr	r3, [r7, #4]
 810523c:	4a28      	ldr	r2, [pc, #160]	; (81052e0 <TIM_Base_SetConfig+0x128>)
 810523e:	4293      	cmp	r3, r2
 8105240:	d007      	beq.n	8105252 <TIM_Base_SetConfig+0x9a>
 8105242:	687b      	ldr	r3, [r7, #4]
 8105244:	4a27      	ldr	r2, [pc, #156]	; (81052e4 <TIM_Base_SetConfig+0x12c>)
 8105246:	4293      	cmp	r3, r2
 8105248:	d003      	beq.n	8105252 <TIM_Base_SetConfig+0x9a>
 810524a:	687b      	ldr	r3, [r7, #4]
 810524c:	4a26      	ldr	r2, [pc, #152]	; (81052e8 <TIM_Base_SetConfig+0x130>)
 810524e:	4293      	cmp	r3, r2
 8105250:	d108      	bne.n	8105264 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8105252:	68fb      	ldr	r3, [r7, #12]
 8105254:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8105258:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810525a:	683b      	ldr	r3, [r7, #0]
 810525c:	68db      	ldr	r3, [r3, #12]
 810525e:	68fa      	ldr	r2, [r7, #12]
 8105260:	4313      	orrs	r3, r2
 8105262:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8105264:	68fb      	ldr	r3, [r7, #12]
 8105266:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 810526a:	683b      	ldr	r3, [r7, #0]
 810526c:	695b      	ldr	r3, [r3, #20]
 810526e:	4313      	orrs	r3, r2
 8105270:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8105272:	687b      	ldr	r3, [r7, #4]
 8105274:	68fa      	ldr	r2, [r7, #12]
 8105276:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8105278:	683b      	ldr	r3, [r7, #0]
 810527a:	689a      	ldr	r2, [r3, #8]
 810527c:	687b      	ldr	r3, [r7, #4]
 810527e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8105280:	683b      	ldr	r3, [r7, #0]
 8105282:	681a      	ldr	r2, [r3, #0]
 8105284:	687b      	ldr	r3, [r7, #4]
 8105286:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8105288:	687b      	ldr	r3, [r7, #4]
 810528a:	4a10      	ldr	r2, [pc, #64]	; (81052cc <TIM_Base_SetConfig+0x114>)
 810528c:	4293      	cmp	r3, r2
 810528e:	d00f      	beq.n	81052b0 <TIM_Base_SetConfig+0xf8>
 8105290:	687b      	ldr	r3, [r7, #4]
 8105292:	4a12      	ldr	r2, [pc, #72]	; (81052dc <TIM_Base_SetConfig+0x124>)
 8105294:	4293      	cmp	r3, r2
 8105296:	d00b      	beq.n	81052b0 <TIM_Base_SetConfig+0xf8>
 8105298:	687b      	ldr	r3, [r7, #4]
 810529a:	4a11      	ldr	r2, [pc, #68]	; (81052e0 <TIM_Base_SetConfig+0x128>)
 810529c:	4293      	cmp	r3, r2
 810529e:	d007      	beq.n	81052b0 <TIM_Base_SetConfig+0xf8>
 81052a0:	687b      	ldr	r3, [r7, #4]
 81052a2:	4a10      	ldr	r2, [pc, #64]	; (81052e4 <TIM_Base_SetConfig+0x12c>)
 81052a4:	4293      	cmp	r3, r2
 81052a6:	d003      	beq.n	81052b0 <TIM_Base_SetConfig+0xf8>
 81052a8:	687b      	ldr	r3, [r7, #4]
 81052aa:	4a0f      	ldr	r2, [pc, #60]	; (81052e8 <TIM_Base_SetConfig+0x130>)
 81052ac:	4293      	cmp	r3, r2
 81052ae:	d103      	bne.n	81052b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 81052b0:	683b      	ldr	r3, [r7, #0]
 81052b2:	691a      	ldr	r2, [r3, #16]
 81052b4:	687b      	ldr	r3, [r7, #4]
 81052b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 81052b8:	687b      	ldr	r3, [r7, #4]
 81052ba:	2201      	movs	r2, #1
 81052bc:	615a      	str	r2, [r3, #20]
}
 81052be:	bf00      	nop
 81052c0:	3714      	adds	r7, #20
 81052c2:	46bd      	mov	sp, r7
 81052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81052c8:	4770      	bx	lr
 81052ca:	bf00      	nop
 81052cc:	40010000 	.word	0x40010000
 81052d0:	40000400 	.word	0x40000400
 81052d4:	40000800 	.word	0x40000800
 81052d8:	40000c00 	.word	0x40000c00
 81052dc:	40010400 	.word	0x40010400
 81052e0:	40014000 	.word	0x40014000
 81052e4:	40014400 	.word	0x40014400
 81052e8:	40014800 	.word	0x40014800

081052ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 81052ec:	b480      	push	{r7}
 81052ee:	b083      	sub	sp, #12
 81052f0:	af00      	add	r7, sp, #0
 81052f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 81052f4:	bf00      	nop
 81052f6:	370c      	adds	r7, #12
 81052f8:	46bd      	mov	sp, r7
 81052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81052fe:	4770      	bx	lr

08105300 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8105300:	b480      	push	{r7}
 8105302:	b083      	sub	sp, #12
 8105304:	af00      	add	r7, sp, #0
 8105306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8105308:	bf00      	nop
 810530a:	370c      	adds	r7, #12
 810530c:	46bd      	mov	sp, r7
 810530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105312:	4770      	bx	lr

08105314 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8105314:	b480      	push	{r7}
 8105316:	b083      	sub	sp, #12
 8105318:	af00      	add	r7, sp, #0
 810531a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 810531c:	bf00      	nop
 810531e:	370c      	adds	r7, #12
 8105320:	46bd      	mov	sp, r7
 8105322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105326:	4770      	bx	lr

08105328 <__libc_init_array>:
 8105328:	b570      	push	{r4, r5, r6, lr}
 810532a:	4d0d      	ldr	r5, [pc, #52]	; (8105360 <__libc_init_array+0x38>)
 810532c:	4c0d      	ldr	r4, [pc, #52]	; (8105364 <__libc_init_array+0x3c>)
 810532e:	1b64      	subs	r4, r4, r5
 8105330:	10a4      	asrs	r4, r4, #2
 8105332:	2600      	movs	r6, #0
 8105334:	42a6      	cmp	r6, r4
 8105336:	d109      	bne.n	810534c <__libc_init_array+0x24>
 8105338:	4d0b      	ldr	r5, [pc, #44]	; (8105368 <__libc_init_array+0x40>)
 810533a:	4c0c      	ldr	r4, [pc, #48]	; (810536c <__libc_init_array+0x44>)
 810533c:	f000 f820 	bl	8105380 <_init>
 8105340:	1b64      	subs	r4, r4, r5
 8105342:	10a4      	asrs	r4, r4, #2
 8105344:	2600      	movs	r6, #0
 8105346:	42a6      	cmp	r6, r4
 8105348:	d105      	bne.n	8105356 <__libc_init_array+0x2e>
 810534a:	bd70      	pop	{r4, r5, r6, pc}
 810534c:	f855 3b04 	ldr.w	r3, [r5], #4
 8105350:	4798      	blx	r3
 8105352:	3601      	adds	r6, #1
 8105354:	e7ee      	b.n	8105334 <__libc_init_array+0xc>
 8105356:	f855 3b04 	ldr.w	r3, [r5], #4
 810535a:	4798      	blx	r3
 810535c:	3601      	adds	r6, #1
 810535e:	e7f2      	b.n	8105346 <__libc_init_array+0x1e>
 8105360:	081053a8 	.word	0x081053a8
 8105364:	081053a8 	.word	0x081053a8
 8105368:	081053a8 	.word	0x081053a8
 810536c:	081053ac 	.word	0x081053ac

08105370 <memset>:
 8105370:	4402      	add	r2, r0
 8105372:	4603      	mov	r3, r0
 8105374:	4293      	cmp	r3, r2
 8105376:	d100      	bne.n	810537a <memset+0xa>
 8105378:	4770      	bx	lr
 810537a:	f803 1b01 	strb.w	r1, [r3], #1
 810537e:	e7f9      	b.n	8105374 <memset+0x4>

08105380 <_init>:
 8105380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8105382:	bf00      	nop
 8105384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8105386:	bc08      	pop	{r3}
 8105388:	469e      	mov	lr, r3
 810538a:	4770      	bx	lr

0810538c <_fini>:
 810538c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810538e:	bf00      	nop
 8105390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8105392:	bc08      	pop	{r3}
 8105394:	469e      	mov	lr, r3
 8105396:	4770      	bx	lr
