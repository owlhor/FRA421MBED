
H745_STAMPR_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f78  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08103210  08103210  00013210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08103220  08103220  00013220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08103224  08103224  00013224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  10000000  08103228  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000b4  10000010  08103238  00020010  2**3
                  ALLOC
  7 ._user_heap_stack 00000604  100000c4  08103238  000200c4  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00014260  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000229a  00000000  00000000  000342a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000ff8  00000000  00000000  00036540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000f00  00000000  00000000  00037538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003af56  00000000  00000000  00038438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001274c  00000000  00000000  0007338e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0018eb57  00000000  00000000  00085ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00214631  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004338  00000000  00000000  00214684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000010 	.word	0x10000010
 81002b4:	00000000 	.word	0x00000000
 81002b8:	081031f8 	.word	0x081031f8

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000014 	.word	0x10000014
 81002d4:	081031f8 	.word	0x081031f8

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b09      	ldr	r3, [pc, #36]	; (8100304 <SystemInit+0x2c>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81002e2:	4a08      	ldr	r2, [pc, #32]	; (8100304 <SystemInit+0x2c>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b05      	ldr	r3, [pc, #20]	; (8100304 <SystemInit+0x2c>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a04      	ldr	r2, [pc, #16]	; (8100304 <SystemInit+0x2c>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81002f8:	bf00      	nop
 81002fa:	46bd      	mov	sp, r7
 81002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100300:	4770      	bx	lr
 8100302:	bf00      	nop
 8100304:	e000ed00 	.word	0xe000ed00

08100308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100308:	b5b0      	push	{r4, r5, r7, lr}
 810030a:	b082      	sub	sp, #8
 810030c:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810030e:	4b38      	ldr	r3, [pc, #224]	; (81003f0 <main+0xe8>)
 8100310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100314:	4a36      	ldr	r2, [pc, #216]	; (81003f0 <main+0xe8>)
 8100316:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810031a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810031e:	4b34      	ldr	r3, [pc, #208]	; (81003f0 <main+0xe8>)
 8100320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100328:	607b      	str	r3, [r7, #4]
 810032a:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810032c:	2001      	movs	r0, #1
 810032e:	f000 fe57 	bl	8100fe0 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100332:	f000 fee1 	bl	81010f8 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100336:	2201      	movs	r2, #1
 8100338:	2102      	movs	r1, #2
 810033a:	2000      	movs	r0, #0
 810033c:	f000 fe62 	bl	8101004 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100340:	4b2c      	ldr	r3, [pc, #176]	; (81003f4 <main+0xec>)
 8100342:	681b      	ldr	r3, [r3, #0]
 8100344:	091b      	lsrs	r3, r3, #4
 8100346:	f003 030f 	and.w	r3, r3, #15
 810034a:	2b07      	cmp	r3, #7
 810034c:	d108      	bne.n	8100360 <main+0x58>
 810034e:	4b2a      	ldr	r3, [pc, #168]	; (81003f8 <main+0xf0>)
 8100350:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100354:	4a28      	ldr	r2, [pc, #160]	; (81003f8 <main+0xf0>)
 8100356:	f043 0301 	orr.w	r3, r3, #1
 810035a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810035e:	e007      	b.n	8100370 <main+0x68>
 8100360:	4b25      	ldr	r3, [pc, #148]	; (81003f8 <main+0xf0>)
 8100362:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100366:	4a24      	ldr	r2, [pc, #144]	; (81003f8 <main+0xf0>)
 8100368:	f043 0301 	orr.w	r3, r3, #1
 810036c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100370:	f000 fa42 	bl	81007f8 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100374:	f000 f8dc 	bl	8100530 <MX_GPIO_Init>
  MX_TIM17_Init();
 8100378:	f000 f8b2 	bl	81004e0 <MX_TIM17_Init>
  MX_RTC_Init();
 810037c:	f000 f84a 	bl	8100414 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim17);
 8100380:	481e      	ldr	r0, [pc, #120]	; (81003fc <main+0xf4>)
 8100382:	f002 fc9d 	bl	8102cc0 <HAL_TIM_Base_Start>
	  //SRAM4->state1 = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
	  //chk2 = SRAM4->state1;
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GetTick() - timestamp_one >= 250){
 8100386:	f000 fadf 	bl	8100948 <HAL_GetTick>
 810038a:	4602      	mov	r2, r0
 810038c:	4b1c      	ldr	r3, [pc, #112]	; (8100400 <main+0xf8>)
 810038e:	681b      	ldr	r3, [r3, #0]
 8100390:	1ad3      	subs	r3, r2, r3
 8100392:	2bf9      	cmp	r3, #249	; 0xf9
 8100394:	d9f7      	bls.n	8100386 <main+0x7e>
		  timestamp_one = HAL_GetTick();
 8100396:	f000 fad7 	bl	8100948 <HAL_GetTick>
 810039a:	4603      	mov	r3, r0
 810039c:	4a18      	ldr	r2, [pc, #96]	; (8100400 <main+0xf8>)
 810039e:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 81003a0:	2102      	movs	r1, #2
 81003a2:	4818      	ldr	r0, [pc, #96]	; (8100404 <main+0xfc>)
 81003a4:	f000 fdc9 	bl	8100f3a <HAL_GPIO_TogglePin>

		  if(HAL_HSEM_Take(1, 1) == HAL_OK){
 81003a8:	2101      	movs	r1, #1
 81003aa:	2001      	movs	r0, #1
 81003ac:	f000 fde0 	bl	8100f70 <HAL_HSEM_Take>
 81003b0:	4603      	mov	r3, r0
 81003b2:	2b00      	cmp	r3, #0
 81003b4:	d1e7      	bne.n	8100386 <main+0x7e>
		  		//read RTC NEED TO READ BOTH IN OTHER
		  HAL_RTC_GetTime(&hrtc, &NowTime, RTC_FORMAT_BCD);
 81003b6:	2201      	movs	r2, #1
 81003b8:	4913      	ldr	r1, [pc, #76]	; (8100408 <main+0x100>)
 81003ba:	4814      	ldr	r0, [pc, #80]	; (810040c <main+0x104>)
 81003bc:	f002 f9e3 	bl	8102786 <HAL_RTC_GetTime>
		  HAL_RTC_GetDate(&hrtc, &NowDate, RTC_FORMAT_BCD);
 81003c0:	2201      	movs	r2, #1
 81003c2:	4913      	ldr	r1, [pc, #76]	; (8100410 <main+0x108>)
 81003c4:	4811      	ldr	r0, [pc, #68]	; (810040c <main+0x104>)
 81003c6:	f002 fac1 	bl	810294c <HAL_RTC_GetDate>
		  SRAM4->NowTimes = NowTime;
 81003ca:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 81003ce:	4a0e      	ldr	r2, [pc, #56]	; (8100408 <main+0x100>)
 81003d0:	1d1c      	adds	r4, r3, #4
 81003d2:	4615      	mov	r5, r2
 81003d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81003d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81003d8:	682b      	ldr	r3, [r5, #0]
 81003da:	6023      	str	r3, [r4, #0]
		  SRAM4->NowDates = NowDate;
 81003dc:	f04f 5260 	mov.w	r2, #939524096	; 0x38000000
 81003e0:	4b0b      	ldr	r3, [pc, #44]	; (8100410 <main+0x108>)
 81003e2:	681b      	ldr	r3, [r3, #0]
 81003e4:	6193      	str	r3, [r2, #24]

		  HAL_HSEM_Release(1, 1);
 81003e6:	2101      	movs	r1, #1
 81003e8:	2001      	movs	r0, #1
 81003ea:	f000 fde5 	bl	8100fb8 <HAL_HSEM_Release>
	  if(HAL_GetTick() - timestamp_one >= 250){
 81003ee:	e7ca      	b.n	8100386 <main+0x7e>
 81003f0:	58024400 	.word	0x58024400
 81003f4:	e000ed00 	.word	0xe000ed00
 81003f8:	58026400 	.word	0x58026400
 81003fc:	10000050 	.word	0x10000050
 8100400:	1000009c 	.word	0x1000009c
 8100404:	58021000 	.word	0x58021000
 8100408:	100000a0 	.word	0x100000a0
 810040c:	1000002c 	.word	0x1000002c
 8100410:	100000b4 	.word	0x100000b4

08100414 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8100414:	b580      	push	{r7, lr}
 8100416:	b086      	sub	sp, #24
 8100418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 810041a:	1d3b      	adds	r3, r7, #4
 810041c:	2200      	movs	r2, #0
 810041e:	601a      	str	r2, [r3, #0]
 8100420:	605a      	str	r2, [r3, #4]
 8100422:	609a      	str	r2, [r3, #8]
 8100424:	60da      	str	r2, [r3, #12]
 8100426:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8100428:	2300      	movs	r3, #0
 810042a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 810042c:	4b2a      	ldr	r3, [pc, #168]	; (81004d8 <MX_RTC_Init+0xc4>)
 810042e:	4a2b      	ldr	r2, [pc, #172]	; (81004dc <MX_RTC_Init+0xc8>)
 8100430:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8100432:	4b29      	ldr	r3, [pc, #164]	; (81004d8 <MX_RTC_Init+0xc4>)
 8100434:	2200      	movs	r2, #0
 8100436:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8100438:	4b27      	ldr	r3, [pc, #156]	; (81004d8 <MX_RTC_Init+0xc4>)
 810043a:	227f      	movs	r2, #127	; 0x7f
 810043c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 810043e:	4b26      	ldr	r3, [pc, #152]	; (81004d8 <MX_RTC_Init+0xc4>)
 8100440:	22ff      	movs	r2, #255	; 0xff
 8100442:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8100444:	4b24      	ldr	r3, [pc, #144]	; (81004d8 <MX_RTC_Init+0xc4>)
 8100446:	2200      	movs	r2, #0
 8100448:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 810044a:	4b23      	ldr	r3, [pc, #140]	; (81004d8 <MX_RTC_Init+0xc4>)
 810044c:	2200      	movs	r2, #0
 810044e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8100450:	4b21      	ldr	r3, [pc, #132]	; (81004d8 <MX_RTC_Init+0xc4>)
 8100452:	2200      	movs	r2, #0
 8100454:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8100456:	4b20      	ldr	r3, [pc, #128]	; (81004d8 <MX_RTC_Init+0xc4>)
 8100458:	2200      	movs	r2, #0
 810045a:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 810045c:	481e      	ldr	r0, [pc, #120]	; (81004d8 <MX_RTC_Init+0xc4>)
 810045e:	f002 f87d 	bl	810255c <HAL_RTC_Init>
 8100462:	4603      	mov	r3, r0
 8100464:	2b00      	cmp	r3, #0
 8100466:	d001      	beq.n	810046c <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8100468:	f000 f8c2 	bl	81005f0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 810046c:	2300      	movs	r3, #0
 810046e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x30;
 8100470:	2330      	movs	r3, #48	; 0x30
 8100472:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8100474:	2300      	movs	r3, #0
 8100476:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8100478:	2300      	movs	r3, #0
 810047a:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_SET;
 810047c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8100480:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8100482:	1d3b      	adds	r3, r7, #4
 8100484:	2201      	movs	r2, #1
 8100486:	4619      	mov	r1, r3
 8100488:	4813      	ldr	r0, [pc, #76]	; (81004d8 <MX_RTC_Init+0xc4>)
 810048a:	f002 f8df 	bl	810264c <HAL_RTC_SetTime>
 810048e:	4603      	mov	r3, r0
 8100490:	2b00      	cmp	r3, #0
 8100492:	d001      	beq.n	8100498 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8100494:	f000 f8ac 	bl	81005f0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8100498:	2306      	movs	r3, #6
 810049a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 810049c:	2311      	movs	r3, #17
 810049e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x12;
 81004a0:	2312      	movs	r3, #18
 81004a2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 81004a4:	2322      	movs	r3, #34	; 0x22
 81004a6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 81004a8:	463b      	mov	r3, r7
 81004aa:	2201      	movs	r2, #1
 81004ac:	4619      	mov	r1, r3
 81004ae:	480a      	ldr	r0, [pc, #40]	; (81004d8 <MX_RTC_Init+0xc4>)
 81004b0:	f002 f9c5 	bl	810283e <HAL_RTC_SetDate>
 81004b4:	4603      	mov	r3, r0
 81004b6:	2b00      	cmp	r3, #0
 81004b8:	d001      	beq.n	81004be <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 81004ba:	f000 f899 	bl	81005f0 <Error_Handler>
  }

  /** Enable the reference Clock input
  */
  if (HAL_RTCEx_SetRefClock(&hrtc) != HAL_OK)
 81004be:	4806      	ldr	r0, [pc, #24]	; (81004d8 <MX_RTC_Init+0xc4>)
 81004c0:	f002 fb62 	bl	8102b88 <HAL_RTCEx_SetRefClock>
 81004c4:	4603      	mov	r3, r0
 81004c6:	2b00      	cmp	r3, #0
 81004c8:	d001      	beq.n	81004ce <MX_RTC_Init+0xba>
  {
    Error_Handler();
 81004ca:	f000 f891 	bl	81005f0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 81004ce:	bf00      	nop
 81004d0:	3718      	adds	r7, #24
 81004d2:	46bd      	mov	sp, r7
 81004d4:	bd80      	pop	{r7, pc}
 81004d6:	bf00      	nop
 81004d8:	1000002c 	.word	0x1000002c
 81004dc:	58004000 	.word	0x58004000

081004e0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 81004e0:	b580      	push	{r7, lr}
 81004e2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 81004e4:	4b10      	ldr	r3, [pc, #64]	; (8100528 <MX_TIM17_Init+0x48>)
 81004e6:	4a11      	ldr	r2, [pc, #68]	; (810052c <MX_TIM17_Init+0x4c>)
 81004e8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 479;
 81004ea:	4b0f      	ldr	r3, [pc, #60]	; (8100528 <MX_TIM17_Init+0x48>)
 81004ec:	f240 12df 	movw	r2, #479	; 0x1df
 81004f0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 81004f2:	4b0d      	ldr	r3, [pc, #52]	; (8100528 <MX_TIM17_Init+0x48>)
 81004f4:	2200      	movs	r2, #0
 81004f6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 81004f8:	4b0b      	ldr	r3, [pc, #44]	; (8100528 <MX_TIM17_Init+0x48>)
 81004fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 81004fe:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8100500:	4b09      	ldr	r3, [pc, #36]	; (8100528 <MX_TIM17_Init+0x48>)
 8100502:	2200      	movs	r2, #0
 8100504:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8100506:	4b08      	ldr	r3, [pc, #32]	; (8100528 <MX_TIM17_Init+0x48>)
 8100508:	2200      	movs	r2, #0
 810050a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 810050c:	4b06      	ldr	r3, [pc, #24]	; (8100528 <MX_TIM17_Init+0x48>)
 810050e:	2200      	movs	r2, #0
 8100510:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8100512:	4805      	ldr	r0, [pc, #20]	; (8100528 <MX_TIM17_Init+0x48>)
 8100514:	f002 fb7c 	bl	8102c10 <HAL_TIM_Base_Init>
 8100518:	4603      	mov	r3, r0
 810051a:	2b00      	cmp	r3, #0
 810051c:	d001      	beq.n	8100522 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 810051e:	f000 f867 	bl	81005f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8100522:	bf00      	nop
 8100524:	bd80      	pop	{r7, pc}
 8100526:	bf00      	nop
 8100528:	10000050 	.word	0x10000050
 810052c:	40014800 	.word	0x40014800

08100530 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100530:	b580      	push	{r7, lr}
 8100532:	b088      	sub	sp, #32
 8100534:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100536:	f107 030c 	add.w	r3, r7, #12
 810053a:	2200      	movs	r2, #0
 810053c:	601a      	str	r2, [r3, #0]
 810053e:	605a      	str	r2, [r3, #4]
 8100540:	609a      	str	r2, [r3, #8]
 8100542:	60da      	str	r2, [r3, #12]
 8100544:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100546:	4b1a      	ldr	r3, [pc, #104]	; (81005b0 <MX_GPIO_Init+0x80>)
 8100548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810054c:	4a18      	ldr	r2, [pc, #96]	; (81005b0 <MX_GPIO_Init+0x80>)
 810054e:	f043 0302 	orr.w	r3, r3, #2
 8100552:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100556:	4b16      	ldr	r3, [pc, #88]	; (81005b0 <MX_GPIO_Init+0x80>)
 8100558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810055c:	f003 0302 	and.w	r3, r3, #2
 8100560:	60bb      	str	r3, [r7, #8]
 8100562:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8100564:	4b12      	ldr	r3, [pc, #72]	; (81005b0 <MX_GPIO_Init+0x80>)
 8100566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810056a:	4a11      	ldr	r2, [pc, #68]	; (81005b0 <MX_GPIO_Init+0x80>)
 810056c:	f043 0310 	orr.w	r3, r3, #16
 8100570:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100574:	4b0e      	ldr	r3, [pc, #56]	; (81005b0 <MX_GPIO_Init+0x80>)
 8100576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810057a:	f003 0310 	and.w	r3, r3, #16
 810057e:	607b      	str	r3, [r7, #4]
 8100580:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8100582:	2200      	movs	r2, #0
 8100584:	2102      	movs	r1, #2
 8100586:	480b      	ldr	r0, [pc, #44]	; (81005b4 <MX_GPIO_Init+0x84>)
 8100588:	f000 fcbe 	bl	8100f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 810058c:	2302      	movs	r3, #2
 810058e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100590:	2301      	movs	r3, #1
 8100592:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100594:	2300      	movs	r3, #0
 8100596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100598:	2300      	movs	r3, #0
 810059a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 810059c:	f107 030c 	add.w	r3, r7, #12
 81005a0:	4619      	mov	r1, r3
 81005a2:	4804      	ldr	r0, [pc, #16]	; (81005b4 <MX_GPIO_Init+0x84>)
 81005a4:	f000 fb00 	bl	8100ba8 <HAL_GPIO_Init>

}
 81005a8:	bf00      	nop
 81005aa:	3720      	adds	r7, #32
 81005ac:	46bd      	mov	sp, r7
 81005ae:	bd80      	pop	{r7, pc}
 81005b0:	58024400 	.word	0x58024400
 81005b4:	58021000 	.word	0x58021000

081005b8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
uint64_t micros()
{return _micros + htim17.Instance->CNT;}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 81005b8:	b4b0      	push	{r4, r5, r7}
 81005ba:	b083      	sub	sp, #12
 81005bc:	af00      	add	r7, sp, #0
 81005be:	6078      	str	r0, [r7, #4]
 if(htim == &htim17)
 81005c0:	687b      	ldr	r3, [r7, #4]
 81005c2:	4a09      	ldr	r2, [pc, #36]	; (81005e8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 81005c4:	4293      	cmp	r3, r2
 81005c6:	d10a      	bne.n	81005de <HAL_TIM_PeriodElapsedCallback+0x26>
 {_micros += 65535;}
 81005c8:	4b08      	ldr	r3, [pc, #32]	; (81005ec <HAL_TIM_PeriodElapsedCallback+0x34>)
 81005ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 81005ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 81005d2:	1854      	adds	r4, r2, r1
 81005d4:	f143 0500 	adc.w	r5, r3, #0
 81005d8:	4b04      	ldr	r3, [pc, #16]	; (81005ec <HAL_TIM_PeriodElapsedCallback+0x34>)
 81005da:	e9c3 4500 	strd	r4, r5, [r3]
}
 81005de:	bf00      	nop
 81005e0:	370c      	adds	r7, #12
 81005e2:	46bd      	mov	sp, r7
 81005e4:	bcb0      	pop	{r4, r5, r7}
 81005e6:	4770      	bx	lr
 81005e8:	10000050 	.word	0x10000050
 81005ec:	100000b8 	.word	0x100000b8

081005f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81005f0:	b480      	push	{r7}
 81005f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81005f4:	b672      	cpsid	i
}
 81005f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81005f8:	e7fe      	b.n	81005f8 <Error_Handler+0x8>
	...

081005fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81005fc:	b480      	push	{r7}
 81005fe:	b083      	sub	sp, #12
 8100600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100602:	4b0a      	ldr	r3, [pc, #40]	; (810062c <HAL_MspInit+0x30>)
 8100604:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100608:	4a08      	ldr	r2, [pc, #32]	; (810062c <HAL_MspInit+0x30>)
 810060a:	f043 0302 	orr.w	r3, r3, #2
 810060e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100612:	4b06      	ldr	r3, [pc, #24]	; (810062c <HAL_MspInit+0x30>)
 8100614:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100618:	f003 0302 	and.w	r3, r3, #2
 810061c:	607b      	str	r3, [r7, #4]
 810061e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100620:	bf00      	nop
 8100622:	370c      	adds	r7, #12
 8100624:	46bd      	mov	sp, r7
 8100626:	f85d 7b04 	ldr.w	r7, [sp], #4
 810062a:	4770      	bx	lr
 810062c:	58024400 	.word	0x58024400

08100630 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8100630:	b580      	push	{r7, lr}
 8100632:	b0b8      	sub	sp, #224	; 0xe0
 8100634:	af00      	add	r7, sp, #0
 8100636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100638:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 810063c:	2200      	movs	r2, #0
 810063e:	601a      	str	r2, [r3, #0]
 8100640:	605a      	str	r2, [r3, #4]
 8100642:	609a      	str	r2, [r3, #8]
 8100644:	60da      	str	r2, [r3, #12]
 8100646:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100648:	f107 0310 	add.w	r3, r7, #16
 810064c:	22bc      	movs	r2, #188	; 0xbc
 810064e:	2100      	movs	r1, #0
 8100650:	4618      	mov	r0, r3
 8100652:	f002 fdc9 	bl	81031e8 <memset>
  if(hrtc->Instance==RTC)
 8100656:	687b      	ldr	r3, [r7, #4]
 8100658:	681b      	ldr	r3, [r3, #0]
 810065a:	4a21      	ldr	r2, [pc, #132]	; (81006e0 <HAL_RTC_MspInit+0xb0>)
 810065c:	4293      	cmp	r3, r2
 810065e:	d13b      	bne.n	81006d8 <HAL_RTC_MspInit+0xa8>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8100660:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8100664:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8100666:	f44f 7300 	mov.w	r3, #512	; 0x200
 810066a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810066e:	f107 0310 	add.w	r3, r7, #16
 8100672:	4618      	mov	r0, r3
 8100674:	f000 fec8 	bl	8101408 <HAL_RCCEx_PeriphCLKConfig>
 8100678:	4603      	mov	r3, r0
 810067a:	2b00      	cmp	r3, #0
 810067c:	d001      	beq.n	8100682 <HAL_RTC_MspInit+0x52>
    {
      Error_Handler();
 810067e:	f7ff ffb7 	bl	81005f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8100682:	4b18      	ldr	r3, [pc, #96]	; (81006e4 <HAL_RTC_MspInit+0xb4>)
 8100684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8100686:	4a17      	ldr	r2, [pc, #92]	; (81006e4 <HAL_RTC_MspInit+0xb4>)
 8100688:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 810068c:	6713      	str	r3, [r2, #112]	; 0x70

    __HAL_RCC_GPIOB_CLK_ENABLE();
 810068e:	4b15      	ldr	r3, [pc, #84]	; (81006e4 <HAL_RTC_MspInit+0xb4>)
 8100690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100694:	4a13      	ldr	r2, [pc, #76]	; (81006e4 <HAL_RTC_MspInit+0xb4>)
 8100696:	f043 0302 	orr.w	r3, r3, #2
 810069a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810069e:	4b11      	ldr	r3, [pc, #68]	; (81006e4 <HAL_RTC_MspInit+0xb4>)
 81006a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81006a4:	f003 0302 	and.w	r3, r3, #2
 81006a8:	60fb      	str	r3, [r7, #12]
 81006aa:	68fb      	ldr	r3, [r7, #12]
    /**RTC GPIO Configuration
    PB15     ------> RTC_REFIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 81006ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81006b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81006b4:	2302      	movs	r3, #2
 81006b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81006ba:	2300      	movs	r3, #0
 81006bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81006c0:	2300      	movs	r3, #0
 81006c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF0_RTC_50Hz;
 81006c6:	2300      	movs	r3, #0
 81006c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81006cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81006d0:	4619      	mov	r1, r3
 81006d2:	4805      	ldr	r0, [pc, #20]	; (81006e8 <HAL_RTC_MspInit+0xb8>)
 81006d4:	f000 fa68 	bl	8100ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 81006d8:	bf00      	nop
 81006da:	37e0      	adds	r7, #224	; 0xe0
 81006dc:	46bd      	mov	sp, r7
 81006de:	bd80      	pop	{r7, pc}
 81006e0:	58004000 	.word	0x58004000
 81006e4:	58024400 	.word	0x58024400
 81006e8:	58020400 	.word	0x58020400

081006ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 81006ec:	b580      	push	{r7, lr}
 81006ee:	b084      	sub	sp, #16
 81006f0:	af00      	add	r7, sp, #0
 81006f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 81006f4:	687b      	ldr	r3, [r7, #4]
 81006f6:	681b      	ldr	r3, [r3, #0]
 81006f8:	4a0e      	ldr	r2, [pc, #56]	; (8100734 <HAL_TIM_Base_MspInit+0x48>)
 81006fa:	4293      	cmp	r3, r2
 81006fc:	d116      	bne.n	810072c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 81006fe:	4b0e      	ldr	r3, [pc, #56]	; (8100738 <HAL_TIM_Base_MspInit+0x4c>)
 8100700:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8100704:	4a0c      	ldr	r2, [pc, #48]	; (8100738 <HAL_TIM_Base_MspInit+0x4c>)
 8100706:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 810070a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 810070e:	4b0a      	ldr	r3, [pc, #40]	; (8100738 <HAL_TIM_Base_MspInit+0x4c>)
 8100710:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8100714:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8100718:	60fb      	str	r3, [r7, #12]
 810071a:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 810071c:	2200      	movs	r2, #0
 810071e:	2100      	movs	r1, #0
 8100720:	2076      	movs	r0, #118	; 0x76
 8100722:	f000 f9f8 	bl	8100b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8100726:	2076      	movs	r0, #118	; 0x76
 8100728:	f000 fa0f 	bl	8100b4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 810072c:	bf00      	nop
 810072e:	3710      	adds	r7, #16
 8100730:	46bd      	mov	sp, r7
 8100732:	bd80      	pop	{r7, pc}
 8100734:	40014800 	.word	0x40014800
 8100738:	58024400 	.word	0x58024400

0810073c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 810073c:	b480      	push	{r7}
 810073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8100740:	e7fe      	b.n	8100740 <NMI_Handler+0x4>

08100742 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100742:	b480      	push	{r7}
 8100744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100746:	e7fe      	b.n	8100746 <HardFault_Handler+0x4>

08100748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100748:	b480      	push	{r7}
 810074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 810074c:	e7fe      	b.n	810074c <MemManage_Handler+0x4>

0810074e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810074e:	b480      	push	{r7}
 8100750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100752:	e7fe      	b.n	8100752 <BusFault_Handler+0x4>

08100754 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100754:	b480      	push	{r7}
 8100756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100758:	e7fe      	b.n	8100758 <UsageFault_Handler+0x4>

0810075a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810075a:	b480      	push	{r7}
 810075c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810075e:	bf00      	nop
 8100760:	46bd      	mov	sp, r7
 8100762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100766:	4770      	bx	lr

08100768 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100768:	b480      	push	{r7}
 810076a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810076c:	bf00      	nop
 810076e:	46bd      	mov	sp, r7
 8100770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100774:	4770      	bx	lr

08100776 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8100776:	b480      	push	{r7}
 8100778:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 810077a:	bf00      	nop
 810077c:	46bd      	mov	sp, r7
 810077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100782:	4770      	bx	lr

08100784 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8100784:	b580      	push	{r7, lr}
 8100786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8100788:	f000 f8ca 	bl	8100920 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 810078c:	bf00      	nop
 810078e:	bd80      	pop	{r7, pc}

08100790 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8100790:	b580      	push	{r7, lr}
 8100792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8100794:	4802      	ldr	r0, [pc, #8]	; (81007a0 <TIM17_IRQHandler+0x10>)
 8100796:	f002 fb03 	bl	8102da0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 810079a:	bf00      	nop
 810079c:	bd80      	pop	{r7, pc}
 810079e:	bf00      	nop
 81007a0:	10000050 	.word	0x10000050

081007a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81007a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 81007dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81007a8:	f7ff fd96 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81007ac:	480c      	ldr	r0, [pc, #48]	; (81007e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81007ae:	490d      	ldr	r1, [pc, #52]	; (81007e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81007b0:	4a0d      	ldr	r2, [pc, #52]	; (81007e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81007b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81007b4:	e002      	b.n	81007bc <LoopCopyDataInit>

081007b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81007b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81007b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81007ba:	3304      	adds	r3, #4

081007bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81007bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81007be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81007c0:	d3f9      	bcc.n	81007b6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81007c2:	4a0a      	ldr	r2, [pc, #40]	; (81007ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81007c4:	4c0a      	ldr	r4, [pc, #40]	; (81007f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 81007c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 81007c8:	e001      	b.n	81007ce <LoopFillZerobss>

081007ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81007ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81007cc:	3204      	adds	r2, #4

081007ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81007ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81007d0:	d3fb      	bcc.n	81007ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81007d2:	f002 fce5 	bl	81031a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81007d6:	f7ff fd97 	bl	8100308 <main>
  bx  lr
 81007da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81007dc:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81007e0:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81007e4:	10000010 	.word	0x10000010
  ldr r2, =_sidata
 81007e8:	08103228 	.word	0x08103228
  ldr r2, =_sbss
 81007ec:	10000010 	.word	0x10000010
  ldr r4, =_ebss
 81007f0:	100000c4 	.word	0x100000c4

081007f4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81007f4:	e7fe      	b.n	81007f4 <ADC3_IRQHandler>
	...

081007f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81007f8:	b580      	push	{r7, lr}
 81007fa:	b082      	sub	sp, #8
 81007fc:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81007fe:	4b28      	ldr	r3, [pc, #160]	; (81008a0 <HAL_Init+0xa8>)
 8100800:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100804:	4a26      	ldr	r2, [pc, #152]	; (81008a0 <HAL_Init+0xa8>)
 8100806:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 810080a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810080e:	4b24      	ldr	r3, [pc, #144]	; (81008a0 <HAL_Init+0xa8>)
 8100810:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100814:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8100818:	603b      	str	r3, [r7, #0]
 810081a:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 810081c:	4b21      	ldr	r3, [pc, #132]	; (81008a4 <HAL_Init+0xac>)
 810081e:	681b      	ldr	r3, [r3, #0]
 8100820:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8100824:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8100828:	4a1e      	ldr	r2, [pc, #120]	; (81008a4 <HAL_Init+0xac>)
 810082a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 810082e:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100830:	4b1c      	ldr	r3, [pc, #112]	; (81008a4 <HAL_Init+0xac>)
 8100832:	681b      	ldr	r3, [r3, #0]
 8100834:	4a1b      	ldr	r2, [pc, #108]	; (81008a4 <HAL_Init+0xac>)
 8100836:	f043 0301 	orr.w	r3, r3, #1
 810083a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 810083c:	2003      	movs	r0, #3
 810083e:	f000 f95f 	bl	8100b00 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100842:	f000 fc67 	bl	8101114 <HAL_RCC_GetSysClockFreq>
 8100846:	4602      	mov	r2, r0
 8100848:	4b15      	ldr	r3, [pc, #84]	; (81008a0 <HAL_Init+0xa8>)
 810084a:	699b      	ldr	r3, [r3, #24]
 810084c:	0a1b      	lsrs	r3, r3, #8
 810084e:	f003 030f 	and.w	r3, r3, #15
 8100852:	4915      	ldr	r1, [pc, #84]	; (81008a8 <HAL_Init+0xb0>)
 8100854:	5ccb      	ldrb	r3, [r1, r3]
 8100856:	f003 031f 	and.w	r3, r3, #31
 810085a:	fa22 f303 	lsr.w	r3, r2, r3
 810085e:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100860:	4b0f      	ldr	r3, [pc, #60]	; (81008a0 <HAL_Init+0xa8>)
 8100862:	699b      	ldr	r3, [r3, #24]
 8100864:	f003 030f 	and.w	r3, r3, #15
 8100868:	4a0f      	ldr	r2, [pc, #60]	; (81008a8 <HAL_Init+0xb0>)
 810086a:	5cd3      	ldrb	r3, [r2, r3]
 810086c:	f003 031f 	and.w	r3, r3, #31
 8100870:	687a      	ldr	r2, [r7, #4]
 8100872:	fa22 f303 	lsr.w	r3, r2, r3
 8100876:	4a0d      	ldr	r2, [pc, #52]	; (81008ac <HAL_Init+0xb4>)
 8100878:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810087a:	4b0c      	ldr	r3, [pc, #48]	; (81008ac <HAL_Init+0xb4>)
 810087c:	681b      	ldr	r3, [r3, #0]
 810087e:	4a0c      	ldr	r2, [pc, #48]	; (81008b0 <HAL_Init+0xb8>)
 8100880:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100882:	2000      	movs	r0, #0
 8100884:	f000 f816 	bl	81008b4 <HAL_InitTick>
 8100888:	4603      	mov	r3, r0
 810088a:	2b00      	cmp	r3, #0
 810088c:	d001      	beq.n	8100892 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810088e:	2301      	movs	r3, #1
 8100890:	e002      	b.n	8100898 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100892:	f7ff feb3 	bl	81005fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8100896:	2300      	movs	r3, #0
}
 8100898:	4618      	mov	r0, r3
 810089a:	3708      	adds	r7, #8
 810089c:	46bd      	mov	sp, r7
 810089e:	bd80      	pop	{r7, pc}
 81008a0:	58024400 	.word	0x58024400
 81008a4:	40024400 	.word	0x40024400
 81008a8:	08103210 	.word	0x08103210
 81008ac:	10000004 	.word	0x10000004
 81008b0:	10000000 	.word	0x10000000

081008b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81008b4:	b580      	push	{r7, lr}
 81008b6:	b082      	sub	sp, #8
 81008b8:	af00      	add	r7, sp, #0
 81008ba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81008bc:	4b15      	ldr	r3, [pc, #84]	; (8100914 <HAL_InitTick+0x60>)
 81008be:	781b      	ldrb	r3, [r3, #0]
 81008c0:	2b00      	cmp	r3, #0
 81008c2:	d101      	bne.n	81008c8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81008c4:	2301      	movs	r3, #1
 81008c6:	e021      	b.n	810090c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 81008c8:	4b13      	ldr	r3, [pc, #76]	; (8100918 <HAL_InitTick+0x64>)
 81008ca:	681a      	ldr	r2, [r3, #0]
 81008cc:	4b11      	ldr	r3, [pc, #68]	; (8100914 <HAL_InitTick+0x60>)
 81008ce:	781b      	ldrb	r3, [r3, #0]
 81008d0:	4619      	mov	r1, r3
 81008d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81008d6:	fbb3 f3f1 	udiv	r3, r3, r1
 81008da:	fbb2 f3f3 	udiv	r3, r2, r3
 81008de:	4618      	mov	r0, r3
 81008e0:	f000 f941 	bl	8100b66 <HAL_SYSTICK_Config>
 81008e4:	4603      	mov	r3, r0
 81008e6:	2b00      	cmp	r3, #0
 81008e8:	d001      	beq.n	81008ee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 81008ea:	2301      	movs	r3, #1
 81008ec:	e00e      	b.n	810090c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81008ee:	687b      	ldr	r3, [r7, #4]
 81008f0:	2b0f      	cmp	r3, #15
 81008f2:	d80a      	bhi.n	810090a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 81008f4:	2200      	movs	r2, #0
 81008f6:	6879      	ldr	r1, [r7, #4]
 81008f8:	f04f 30ff 	mov.w	r0, #4294967295
 81008fc:	f000 f90b 	bl	8100b16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8100900:	4a06      	ldr	r2, [pc, #24]	; (810091c <HAL_InitTick+0x68>)
 8100902:	687b      	ldr	r3, [r7, #4]
 8100904:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8100906:	2300      	movs	r3, #0
 8100908:	e000      	b.n	810090c <HAL_InitTick+0x58>
    return HAL_ERROR;
 810090a:	2301      	movs	r3, #1
}
 810090c:	4618      	mov	r0, r3
 810090e:	3708      	adds	r7, #8
 8100910:	46bd      	mov	sp, r7
 8100912:	bd80      	pop	{r7, pc}
 8100914:	1000000c 	.word	0x1000000c
 8100918:	10000000 	.word	0x10000000
 810091c:	10000008 	.word	0x10000008

08100920 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100920:	b480      	push	{r7}
 8100922:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100924:	4b06      	ldr	r3, [pc, #24]	; (8100940 <HAL_IncTick+0x20>)
 8100926:	781b      	ldrb	r3, [r3, #0]
 8100928:	461a      	mov	r2, r3
 810092a:	4b06      	ldr	r3, [pc, #24]	; (8100944 <HAL_IncTick+0x24>)
 810092c:	681b      	ldr	r3, [r3, #0]
 810092e:	4413      	add	r3, r2
 8100930:	4a04      	ldr	r2, [pc, #16]	; (8100944 <HAL_IncTick+0x24>)
 8100932:	6013      	str	r3, [r2, #0]
}
 8100934:	bf00      	nop
 8100936:	46bd      	mov	sp, r7
 8100938:	f85d 7b04 	ldr.w	r7, [sp], #4
 810093c:	4770      	bx	lr
 810093e:	bf00      	nop
 8100940:	1000000c 	.word	0x1000000c
 8100944:	100000c0 	.word	0x100000c0

08100948 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8100948:	b480      	push	{r7}
 810094a:	af00      	add	r7, sp, #0
  return uwTick;
 810094c:	4b03      	ldr	r3, [pc, #12]	; (810095c <HAL_GetTick+0x14>)
 810094e:	681b      	ldr	r3, [r3, #0]
}
 8100950:	4618      	mov	r0, r3
 8100952:	46bd      	mov	sp, r7
 8100954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100958:	4770      	bx	lr
 810095a:	bf00      	nop
 810095c:	100000c0 	.word	0x100000c0

08100960 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100960:	b480      	push	{r7}
 8100962:	b085      	sub	sp, #20
 8100964:	af00      	add	r7, sp, #0
 8100966:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100968:	687b      	ldr	r3, [r7, #4]
 810096a:	f003 0307 	and.w	r3, r3, #7
 810096e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100970:	4b0c      	ldr	r3, [pc, #48]	; (81009a4 <__NVIC_SetPriorityGrouping+0x44>)
 8100972:	68db      	ldr	r3, [r3, #12]
 8100974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100976:	68ba      	ldr	r2, [r7, #8]
 8100978:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 810097c:	4013      	ands	r3, r2
 810097e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100980:	68fb      	ldr	r3, [r7, #12]
 8100982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100984:	68bb      	ldr	r3, [r7, #8]
 8100986:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100988:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 810098c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8100990:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8100992:	4a04      	ldr	r2, [pc, #16]	; (81009a4 <__NVIC_SetPriorityGrouping+0x44>)
 8100994:	68bb      	ldr	r3, [r7, #8]
 8100996:	60d3      	str	r3, [r2, #12]
}
 8100998:	bf00      	nop
 810099a:	3714      	adds	r7, #20
 810099c:	46bd      	mov	sp, r7
 810099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009a2:	4770      	bx	lr
 81009a4:	e000ed00 	.word	0xe000ed00

081009a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81009a8:	b480      	push	{r7}
 81009aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81009ac:	4b04      	ldr	r3, [pc, #16]	; (81009c0 <__NVIC_GetPriorityGrouping+0x18>)
 81009ae:	68db      	ldr	r3, [r3, #12]
 81009b0:	0a1b      	lsrs	r3, r3, #8
 81009b2:	f003 0307 	and.w	r3, r3, #7
}
 81009b6:	4618      	mov	r0, r3
 81009b8:	46bd      	mov	sp, r7
 81009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009be:	4770      	bx	lr
 81009c0:	e000ed00 	.word	0xe000ed00

081009c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81009c4:	b480      	push	{r7}
 81009c6:	b083      	sub	sp, #12
 81009c8:	af00      	add	r7, sp, #0
 81009ca:	4603      	mov	r3, r0
 81009cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81009ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81009d2:	2b00      	cmp	r3, #0
 81009d4:	db0b      	blt.n	81009ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81009d6:	88fb      	ldrh	r3, [r7, #6]
 81009d8:	f003 021f 	and.w	r2, r3, #31
 81009dc:	4907      	ldr	r1, [pc, #28]	; (81009fc <__NVIC_EnableIRQ+0x38>)
 81009de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81009e2:	095b      	lsrs	r3, r3, #5
 81009e4:	2001      	movs	r0, #1
 81009e6:	fa00 f202 	lsl.w	r2, r0, r2
 81009ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81009ee:	bf00      	nop
 81009f0:	370c      	adds	r7, #12
 81009f2:	46bd      	mov	sp, r7
 81009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009f8:	4770      	bx	lr
 81009fa:	bf00      	nop
 81009fc:	e000e100 	.word	0xe000e100

08100a00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8100a00:	b480      	push	{r7}
 8100a02:	b083      	sub	sp, #12
 8100a04:	af00      	add	r7, sp, #0
 8100a06:	4603      	mov	r3, r0
 8100a08:	6039      	str	r1, [r7, #0]
 8100a0a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100a0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100a10:	2b00      	cmp	r3, #0
 8100a12:	db0a      	blt.n	8100a2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100a14:	683b      	ldr	r3, [r7, #0]
 8100a16:	b2da      	uxtb	r2, r3
 8100a18:	490c      	ldr	r1, [pc, #48]	; (8100a4c <__NVIC_SetPriority+0x4c>)
 8100a1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100a1e:	0112      	lsls	r2, r2, #4
 8100a20:	b2d2      	uxtb	r2, r2
 8100a22:	440b      	add	r3, r1
 8100a24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100a28:	e00a      	b.n	8100a40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100a2a:	683b      	ldr	r3, [r7, #0]
 8100a2c:	b2da      	uxtb	r2, r3
 8100a2e:	4908      	ldr	r1, [pc, #32]	; (8100a50 <__NVIC_SetPriority+0x50>)
 8100a30:	88fb      	ldrh	r3, [r7, #6]
 8100a32:	f003 030f 	and.w	r3, r3, #15
 8100a36:	3b04      	subs	r3, #4
 8100a38:	0112      	lsls	r2, r2, #4
 8100a3a:	b2d2      	uxtb	r2, r2
 8100a3c:	440b      	add	r3, r1
 8100a3e:	761a      	strb	r2, [r3, #24]
}
 8100a40:	bf00      	nop
 8100a42:	370c      	adds	r7, #12
 8100a44:	46bd      	mov	sp, r7
 8100a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a4a:	4770      	bx	lr
 8100a4c:	e000e100 	.word	0xe000e100
 8100a50:	e000ed00 	.word	0xe000ed00

08100a54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100a54:	b480      	push	{r7}
 8100a56:	b089      	sub	sp, #36	; 0x24
 8100a58:	af00      	add	r7, sp, #0
 8100a5a:	60f8      	str	r0, [r7, #12]
 8100a5c:	60b9      	str	r1, [r7, #8]
 8100a5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8100a60:	68fb      	ldr	r3, [r7, #12]
 8100a62:	f003 0307 	and.w	r3, r3, #7
 8100a66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100a68:	69fb      	ldr	r3, [r7, #28]
 8100a6a:	f1c3 0307 	rsb	r3, r3, #7
 8100a6e:	2b04      	cmp	r3, #4
 8100a70:	bf28      	it	cs
 8100a72:	2304      	movcs	r3, #4
 8100a74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8100a76:	69fb      	ldr	r3, [r7, #28]
 8100a78:	3304      	adds	r3, #4
 8100a7a:	2b06      	cmp	r3, #6
 8100a7c:	d902      	bls.n	8100a84 <NVIC_EncodePriority+0x30>
 8100a7e:	69fb      	ldr	r3, [r7, #28]
 8100a80:	3b03      	subs	r3, #3
 8100a82:	e000      	b.n	8100a86 <NVIC_EncodePriority+0x32>
 8100a84:	2300      	movs	r3, #0
 8100a86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100a88:	f04f 32ff 	mov.w	r2, #4294967295
 8100a8c:	69bb      	ldr	r3, [r7, #24]
 8100a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8100a92:	43da      	mvns	r2, r3
 8100a94:	68bb      	ldr	r3, [r7, #8]
 8100a96:	401a      	ands	r2, r3
 8100a98:	697b      	ldr	r3, [r7, #20]
 8100a9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8100aa0:	697b      	ldr	r3, [r7, #20]
 8100aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8100aa6:	43d9      	mvns	r1, r3
 8100aa8:	687b      	ldr	r3, [r7, #4]
 8100aaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100aac:	4313      	orrs	r3, r2
         );
}
 8100aae:	4618      	mov	r0, r3
 8100ab0:	3724      	adds	r7, #36	; 0x24
 8100ab2:	46bd      	mov	sp, r7
 8100ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ab8:	4770      	bx	lr
	...

08100abc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8100abc:	b580      	push	{r7, lr}
 8100abe:	b082      	sub	sp, #8
 8100ac0:	af00      	add	r7, sp, #0
 8100ac2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8100ac4:	687b      	ldr	r3, [r7, #4]
 8100ac6:	3b01      	subs	r3, #1
 8100ac8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8100acc:	d301      	bcc.n	8100ad2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8100ace:	2301      	movs	r3, #1
 8100ad0:	e00f      	b.n	8100af2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8100ad2:	4a0a      	ldr	r2, [pc, #40]	; (8100afc <SysTick_Config+0x40>)
 8100ad4:	687b      	ldr	r3, [r7, #4]
 8100ad6:	3b01      	subs	r3, #1
 8100ad8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8100ada:	210f      	movs	r1, #15
 8100adc:	f04f 30ff 	mov.w	r0, #4294967295
 8100ae0:	f7ff ff8e 	bl	8100a00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8100ae4:	4b05      	ldr	r3, [pc, #20]	; (8100afc <SysTick_Config+0x40>)
 8100ae6:	2200      	movs	r2, #0
 8100ae8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8100aea:	4b04      	ldr	r3, [pc, #16]	; (8100afc <SysTick_Config+0x40>)
 8100aec:	2207      	movs	r2, #7
 8100aee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8100af0:	2300      	movs	r3, #0
}
 8100af2:	4618      	mov	r0, r3
 8100af4:	3708      	adds	r7, #8
 8100af6:	46bd      	mov	sp, r7
 8100af8:	bd80      	pop	{r7, pc}
 8100afa:	bf00      	nop
 8100afc:	e000e010 	.word	0xe000e010

08100b00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100b00:	b580      	push	{r7, lr}
 8100b02:	b082      	sub	sp, #8
 8100b04:	af00      	add	r7, sp, #0
 8100b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100b08:	6878      	ldr	r0, [r7, #4]
 8100b0a:	f7ff ff29 	bl	8100960 <__NVIC_SetPriorityGrouping>
}
 8100b0e:	bf00      	nop
 8100b10:	3708      	adds	r7, #8
 8100b12:	46bd      	mov	sp, r7
 8100b14:	bd80      	pop	{r7, pc}

08100b16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100b16:	b580      	push	{r7, lr}
 8100b18:	b086      	sub	sp, #24
 8100b1a:	af00      	add	r7, sp, #0
 8100b1c:	4603      	mov	r3, r0
 8100b1e:	60b9      	str	r1, [r7, #8]
 8100b20:	607a      	str	r2, [r7, #4]
 8100b22:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8100b24:	f7ff ff40 	bl	81009a8 <__NVIC_GetPriorityGrouping>
 8100b28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100b2a:	687a      	ldr	r2, [r7, #4]
 8100b2c:	68b9      	ldr	r1, [r7, #8]
 8100b2e:	6978      	ldr	r0, [r7, #20]
 8100b30:	f7ff ff90 	bl	8100a54 <NVIC_EncodePriority>
 8100b34:	4602      	mov	r2, r0
 8100b36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100b3a:	4611      	mov	r1, r2
 8100b3c:	4618      	mov	r0, r3
 8100b3e:	f7ff ff5f 	bl	8100a00 <__NVIC_SetPriority>
}
 8100b42:	bf00      	nop
 8100b44:	3718      	adds	r7, #24
 8100b46:	46bd      	mov	sp, r7
 8100b48:	bd80      	pop	{r7, pc}

08100b4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100b4a:	b580      	push	{r7, lr}
 8100b4c:	b082      	sub	sp, #8
 8100b4e:	af00      	add	r7, sp, #0
 8100b50:	4603      	mov	r3, r0
 8100b52:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8100b54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100b58:	4618      	mov	r0, r3
 8100b5a:	f7ff ff33 	bl	81009c4 <__NVIC_EnableIRQ>
}
 8100b5e:	bf00      	nop
 8100b60:	3708      	adds	r7, #8
 8100b62:	46bd      	mov	sp, r7
 8100b64:	bd80      	pop	{r7, pc}

08100b66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8100b66:	b580      	push	{r7, lr}
 8100b68:	b082      	sub	sp, #8
 8100b6a:	af00      	add	r7, sp, #0
 8100b6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8100b6e:	6878      	ldr	r0, [r7, #4]
 8100b70:	f7ff ffa4 	bl	8100abc <SysTick_Config>
 8100b74:	4603      	mov	r3, r0
}
 8100b76:	4618      	mov	r0, r3
 8100b78:	3708      	adds	r7, #8
 8100b7a:	46bd      	mov	sp, r7
 8100b7c:	bd80      	pop	{r7, pc}
	...

08100b80 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8100b80:	b480      	push	{r7}
 8100b82:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100b84:	4b07      	ldr	r3, [pc, #28]	; (8100ba4 <HAL_GetCurrentCPUID+0x24>)
 8100b86:	681b      	ldr	r3, [r3, #0]
 8100b88:	091b      	lsrs	r3, r3, #4
 8100b8a:	f003 030f 	and.w	r3, r3, #15
 8100b8e:	2b07      	cmp	r3, #7
 8100b90:	d101      	bne.n	8100b96 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8100b92:	2303      	movs	r3, #3
 8100b94:	e000      	b.n	8100b98 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8100b96:	2301      	movs	r3, #1
  }
}
 8100b98:	4618      	mov	r0, r3
 8100b9a:	46bd      	mov	sp, r7
 8100b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ba0:	4770      	bx	lr
 8100ba2:	bf00      	nop
 8100ba4:	e000ed00 	.word	0xe000ed00

08100ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8100ba8:	b480      	push	{r7}
 8100baa:	b089      	sub	sp, #36	; 0x24
 8100bac:	af00      	add	r7, sp, #0
 8100bae:	6078      	str	r0, [r7, #4]
 8100bb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8100bb2:	2300      	movs	r3, #0
 8100bb4:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8100bb6:	4b89      	ldr	r3, [pc, #548]	; (8100ddc <HAL_GPIO_Init+0x234>)
 8100bb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100bba:	e194      	b.n	8100ee6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8100bbc:	683b      	ldr	r3, [r7, #0]
 8100bbe:	681a      	ldr	r2, [r3, #0]
 8100bc0:	2101      	movs	r1, #1
 8100bc2:	69fb      	ldr	r3, [r7, #28]
 8100bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8100bc8:	4013      	ands	r3, r2
 8100bca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8100bcc:	693b      	ldr	r3, [r7, #16]
 8100bce:	2b00      	cmp	r3, #0
 8100bd0:	f000 8186 	beq.w	8100ee0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8100bd4:	683b      	ldr	r3, [r7, #0]
 8100bd6:	685b      	ldr	r3, [r3, #4]
 8100bd8:	f003 0303 	and.w	r3, r3, #3
 8100bdc:	2b01      	cmp	r3, #1
 8100bde:	d005      	beq.n	8100bec <HAL_GPIO_Init+0x44>
 8100be0:	683b      	ldr	r3, [r7, #0]
 8100be2:	685b      	ldr	r3, [r3, #4]
 8100be4:	f003 0303 	and.w	r3, r3, #3
 8100be8:	2b02      	cmp	r3, #2
 8100bea:	d130      	bne.n	8100c4e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8100bec:	687b      	ldr	r3, [r7, #4]
 8100bee:	689b      	ldr	r3, [r3, #8]
 8100bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8100bf2:	69fb      	ldr	r3, [r7, #28]
 8100bf4:	005b      	lsls	r3, r3, #1
 8100bf6:	2203      	movs	r2, #3
 8100bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8100bfc:	43db      	mvns	r3, r3
 8100bfe:	69ba      	ldr	r2, [r7, #24]
 8100c00:	4013      	ands	r3, r2
 8100c02:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8100c04:	683b      	ldr	r3, [r7, #0]
 8100c06:	68da      	ldr	r2, [r3, #12]
 8100c08:	69fb      	ldr	r3, [r7, #28]
 8100c0a:	005b      	lsls	r3, r3, #1
 8100c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8100c10:	69ba      	ldr	r2, [r7, #24]
 8100c12:	4313      	orrs	r3, r2
 8100c14:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8100c16:	687b      	ldr	r3, [r7, #4]
 8100c18:	69ba      	ldr	r2, [r7, #24]
 8100c1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8100c1c:	687b      	ldr	r3, [r7, #4]
 8100c1e:	685b      	ldr	r3, [r3, #4]
 8100c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8100c22:	2201      	movs	r2, #1
 8100c24:	69fb      	ldr	r3, [r7, #28]
 8100c26:	fa02 f303 	lsl.w	r3, r2, r3
 8100c2a:	43db      	mvns	r3, r3
 8100c2c:	69ba      	ldr	r2, [r7, #24]
 8100c2e:	4013      	ands	r3, r2
 8100c30:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8100c32:	683b      	ldr	r3, [r7, #0]
 8100c34:	685b      	ldr	r3, [r3, #4]
 8100c36:	091b      	lsrs	r3, r3, #4
 8100c38:	f003 0201 	and.w	r2, r3, #1
 8100c3c:	69fb      	ldr	r3, [r7, #28]
 8100c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8100c42:	69ba      	ldr	r2, [r7, #24]
 8100c44:	4313      	orrs	r3, r2
 8100c46:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8100c48:	687b      	ldr	r3, [r7, #4]
 8100c4a:	69ba      	ldr	r2, [r7, #24]
 8100c4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8100c4e:	683b      	ldr	r3, [r7, #0]
 8100c50:	685b      	ldr	r3, [r3, #4]
 8100c52:	f003 0303 	and.w	r3, r3, #3
 8100c56:	2b03      	cmp	r3, #3
 8100c58:	d017      	beq.n	8100c8a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8100c5a:	687b      	ldr	r3, [r7, #4]
 8100c5c:	68db      	ldr	r3, [r3, #12]
 8100c5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8100c60:	69fb      	ldr	r3, [r7, #28]
 8100c62:	005b      	lsls	r3, r3, #1
 8100c64:	2203      	movs	r2, #3
 8100c66:	fa02 f303 	lsl.w	r3, r2, r3
 8100c6a:	43db      	mvns	r3, r3
 8100c6c:	69ba      	ldr	r2, [r7, #24]
 8100c6e:	4013      	ands	r3, r2
 8100c70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8100c72:	683b      	ldr	r3, [r7, #0]
 8100c74:	689a      	ldr	r2, [r3, #8]
 8100c76:	69fb      	ldr	r3, [r7, #28]
 8100c78:	005b      	lsls	r3, r3, #1
 8100c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8100c7e:	69ba      	ldr	r2, [r7, #24]
 8100c80:	4313      	orrs	r3, r2
 8100c82:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8100c84:	687b      	ldr	r3, [r7, #4]
 8100c86:	69ba      	ldr	r2, [r7, #24]
 8100c88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8100c8a:	683b      	ldr	r3, [r7, #0]
 8100c8c:	685b      	ldr	r3, [r3, #4]
 8100c8e:	f003 0303 	and.w	r3, r3, #3
 8100c92:	2b02      	cmp	r3, #2
 8100c94:	d123      	bne.n	8100cde <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8100c96:	69fb      	ldr	r3, [r7, #28]
 8100c98:	08da      	lsrs	r2, r3, #3
 8100c9a:	687b      	ldr	r3, [r7, #4]
 8100c9c:	3208      	adds	r2, #8
 8100c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8100ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8100ca4:	69fb      	ldr	r3, [r7, #28]
 8100ca6:	f003 0307 	and.w	r3, r3, #7
 8100caa:	009b      	lsls	r3, r3, #2
 8100cac:	220f      	movs	r2, #15
 8100cae:	fa02 f303 	lsl.w	r3, r2, r3
 8100cb2:	43db      	mvns	r3, r3
 8100cb4:	69ba      	ldr	r2, [r7, #24]
 8100cb6:	4013      	ands	r3, r2
 8100cb8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8100cba:	683b      	ldr	r3, [r7, #0]
 8100cbc:	691a      	ldr	r2, [r3, #16]
 8100cbe:	69fb      	ldr	r3, [r7, #28]
 8100cc0:	f003 0307 	and.w	r3, r3, #7
 8100cc4:	009b      	lsls	r3, r3, #2
 8100cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8100cca:	69ba      	ldr	r2, [r7, #24]
 8100ccc:	4313      	orrs	r3, r2
 8100cce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8100cd0:	69fb      	ldr	r3, [r7, #28]
 8100cd2:	08da      	lsrs	r2, r3, #3
 8100cd4:	687b      	ldr	r3, [r7, #4]
 8100cd6:	3208      	adds	r2, #8
 8100cd8:	69b9      	ldr	r1, [r7, #24]
 8100cda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8100cde:	687b      	ldr	r3, [r7, #4]
 8100ce0:	681b      	ldr	r3, [r3, #0]
 8100ce2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8100ce4:	69fb      	ldr	r3, [r7, #28]
 8100ce6:	005b      	lsls	r3, r3, #1
 8100ce8:	2203      	movs	r2, #3
 8100cea:	fa02 f303 	lsl.w	r3, r2, r3
 8100cee:	43db      	mvns	r3, r3
 8100cf0:	69ba      	ldr	r2, [r7, #24]
 8100cf2:	4013      	ands	r3, r2
 8100cf4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8100cf6:	683b      	ldr	r3, [r7, #0]
 8100cf8:	685b      	ldr	r3, [r3, #4]
 8100cfa:	f003 0203 	and.w	r2, r3, #3
 8100cfe:	69fb      	ldr	r3, [r7, #28]
 8100d00:	005b      	lsls	r3, r3, #1
 8100d02:	fa02 f303 	lsl.w	r3, r2, r3
 8100d06:	69ba      	ldr	r2, [r7, #24]
 8100d08:	4313      	orrs	r3, r2
 8100d0a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8100d0c:	687b      	ldr	r3, [r7, #4]
 8100d0e:	69ba      	ldr	r2, [r7, #24]
 8100d10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8100d12:	683b      	ldr	r3, [r7, #0]
 8100d14:	685b      	ldr	r3, [r3, #4]
 8100d16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8100d1a:	2b00      	cmp	r3, #0
 8100d1c:	f000 80e0 	beq.w	8100ee0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100d20:	4b2f      	ldr	r3, [pc, #188]	; (8100de0 <HAL_GPIO_Init+0x238>)
 8100d22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100d26:	4a2e      	ldr	r2, [pc, #184]	; (8100de0 <HAL_GPIO_Init+0x238>)
 8100d28:	f043 0302 	orr.w	r3, r3, #2
 8100d2c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100d30:	4b2b      	ldr	r3, [pc, #172]	; (8100de0 <HAL_GPIO_Init+0x238>)
 8100d32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100d36:	f003 0302 	and.w	r3, r3, #2
 8100d3a:	60fb      	str	r3, [r7, #12]
 8100d3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8100d3e:	4a29      	ldr	r2, [pc, #164]	; (8100de4 <HAL_GPIO_Init+0x23c>)
 8100d40:	69fb      	ldr	r3, [r7, #28]
 8100d42:	089b      	lsrs	r3, r3, #2
 8100d44:	3302      	adds	r3, #2
 8100d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8100d4c:	69fb      	ldr	r3, [r7, #28]
 8100d4e:	f003 0303 	and.w	r3, r3, #3
 8100d52:	009b      	lsls	r3, r3, #2
 8100d54:	220f      	movs	r2, #15
 8100d56:	fa02 f303 	lsl.w	r3, r2, r3
 8100d5a:	43db      	mvns	r3, r3
 8100d5c:	69ba      	ldr	r2, [r7, #24]
 8100d5e:	4013      	ands	r3, r2
 8100d60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8100d62:	687b      	ldr	r3, [r7, #4]
 8100d64:	4a20      	ldr	r2, [pc, #128]	; (8100de8 <HAL_GPIO_Init+0x240>)
 8100d66:	4293      	cmp	r3, r2
 8100d68:	d052      	beq.n	8100e10 <HAL_GPIO_Init+0x268>
 8100d6a:	687b      	ldr	r3, [r7, #4]
 8100d6c:	4a1f      	ldr	r2, [pc, #124]	; (8100dec <HAL_GPIO_Init+0x244>)
 8100d6e:	4293      	cmp	r3, r2
 8100d70:	d031      	beq.n	8100dd6 <HAL_GPIO_Init+0x22e>
 8100d72:	687b      	ldr	r3, [r7, #4]
 8100d74:	4a1e      	ldr	r2, [pc, #120]	; (8100df0 <HAL_GPIO_Init+0x248>)
 8100d76:	4293      	cmp	r3, r2
 8100d78:	d02b      	beq.n	8100dd2 <HAL_GPIO_Init+0x22a>
 8100d7a:	687b      	ldr	r3, [r7, #4]
 8100d7c:	4a1d      	ldr	r2, [pc, #116]	; (8100df4 <HAL_GPIO_Init+0x24c>)
 8100d7e:	4293      	cmp	r3, r2
 8100d80:	d025      	beq.n	8100dce <HAL_GPIO_Init+0x226>
 8100d82:	687b      	ldr	r3, [r7, #4]
 8100d84:	4a1c      	ldr	r2, [pc, #112]	; (8100df8 <HAL_GPIO_Init+0x250>)
 8100d86:	4293      	cmp	r3, r2
 8100d88:	d01f      	beq.n	8100dca <HAL_GPIO_Init+0x222>
 8100d8a:	687b      	ldr	r3, [r7, #4]
 8100d8c:	4a1b      	ldr	r2, [pc, #108]	; (8100dfc <HAL_GPIO_Init+0x254>)
 8100d8e:	4293      	cmp	r3, r2
 8100d90:	d019      	beq.n	8100dc6 <HAL_GPIO_Init+0x21e>
 8100d92:	687b      	ldr	r3, [r7, #4]
 8100d94:	4a1a      	ldr	r2, [pc, #104]	; (8100e00 <HAL_GPIO_Init+0x258>)
 8100d96:	4293      	cmp	r3, r2
 8100d98:	d013      	beq.n	8100dc2 <HAL_GPIO_Init+0x21a>
 8100d9a:	687b      	ldr	r3, [r7, #4]
 8100d9c:	4a19      	ldr	r2, [pc, #100]	; (8100e04 <HAL_GPIO_Init+0x25c>)
 8100d9e:	4293      	cmp	r3, r2
 8100da0:	d00d      	beq.n	8100dbe <HAL_GPIO_Init+0x216>
 8100da2:	687b      	ldr	r3, [r7, #4]
 8100da4:	4a18      	ldr	r2, [pc, #96]	; (8100e08 <HAL_GPIO_Init+0x260>)
 8100da6:	4293      	cmp	r3, r2
 8100da8:	d007      	beq.n	8100dba <HAL_GPIO_Init+0x212>
 8100daa:	687b      	ldr	r3, [r7, #4]
 8100dac:	4a17      	ldr	r2, [pc, #92]	; (8100e0c <HAL_GPIO_Init+0x264>)
 8100dae:	4293      	cmp	r3, r2
 8100db0:	d101      	bne.n	8100db6 <HAL_GPIO_Init+0x20e>
 8100db2:	2309      	movs	r3, #9
 8100db4:	e02d      	b.n	8100e12 <HAL_GPIO_Init+0x26a>
 8100db6:	230a      	movs	r3, #10
 8100db8:	e02b      	b.n	8100e12 <HAL_GPIO_Init+0x26a>
 8100dba:	2308      	movs	r3, #8
 8100dbc:	e029      	b.n	8100e12 <HAL_GPIO_Init+0x26a>
 8100dbe:	2307      	movs	r3, #7
 8100dc0:	e027      	b.n	8100e12 <HAL_GPIO_Init+0x26a>
 8100dc2:	2306      	movs	r3, #6
 8100dc4:	e025      	b.n	8100e12 <HAL_GPIO_Init+0x26a>
 8100dc6:	2305      	movs	r3, #5
 8100dc8:	e023      	b.n	8100e12 <HAL_GPIO_Init+0x26a>
 8100dca:	2304      	movs	r3, #4
 8100dcc:	e021      	b.n	8100e12 <HAL_GPIO_Init+0x26a>
 8100dce:	2303      	movs	r3, #3
 8100dd0:	e01f      	b.n	8100e12 <HAL_GPIO_Init+0x26a>
 8100dd2:	2302      	movs	r3, #2
 8100dd4:	e01d      	b.n	8100e12 <HAL_GPIO_Init+0x26a>
 8100dd6:	2301      	movs	r3, #1
 8100dd8:	e01b      	b.n	8100e12 <HAL_GPIO_Init+0x26a>
 8100dda:	bf00      	nop
 8100ddc:	580000c0 	.word	0x580000c0
 8100de0:	58024400 	.word	0x58024400
 8100de4:	58000400 	.word	0x58000400
 8100de8:	58020000 	.word	0x58020000
 8100dec:	58020400 	.word	0x58020400
 8100df0:	58020800 	.word	0x58020800
 8100df4:	58020c00 	.word	0x58020c00
 8100df8:	58021000 	.word	0x58021000
 8100dfc:	58021400 	.word	0x58021400
 8100e00:	58021800 	.word	0x58021800
 8100e04:	58021c00 	.word	0x58021c00
 8100e08:	58022000 	.word	0x58022000
 8100e0c:	58022400 	.word	0x58022400
 8100e10:	2300      	movs	r3, #0
 8100e12:	69fa      	ldr	r2, [r7, #28]
 8100e14:	f002 0203 	and.w	r2, r2, #3
 8100e18:	0092      	lsls	r2, r2, #2
 8100e1a:	4093      	lsls	r3, r2
 8100e1c:	69ba      	ldr	r2, [r7, #24]
 8100e1e:	4313      	orrs	r3, r2
 8100e20:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8100e22:	4938      	ldr	r1, [pc, #224]	; (8100f04 <HAL_GPIO_Init+0x35c>)
 8100e24:	69fb      	ldr	r3, [r7, #28]
 8100e26:	089b      	lsrs	r3, r3, #2
 8100e28:	3302      	adds	r3, #2
 8100e2a:	69ba      	ldr	r2, [r7, #24]
 8100e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8100e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100e34:	681b      	ldr	r3, [r3, #0]
 8100e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100e38:	693b      	ldr	r3, [r7, #16]
 8100e3a:	43db      	mvns	r3, r3
 8100e3c:	69ba      	ldr	r2, [r7, #24]
 8100e3e:	4013      	ands	r3, r2
 8100e40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8100e42:	683b      	ldr	r3, [r7, #0]
 8100e44:	685b      	ldr	r3, [r3, #4]
 8100e46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8100e4a:	2b00      	cmp	r3, #0
 8100e4c:	d003      	beq.n	8100e56 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8100e4e:	69ba      	ldr	r2, [r7, #24]
 8100e50:	693b      	ldr	r3, [r7, #16]
 8100e52:	4313      	orrs	r3, r2
 8100e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8100e56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8100e5a:	69bb      	ldr	r3, [r7, #24]
 8100e5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8100e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100e62:	685b      	ldr	r3, [r3, #4]
 8100e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100e66:	693b      	ldr	r3, [r7, #16]
 8100e68:	43db      	mvns	r3, r3
 8100e6a:	69ba      	ldr	r2, [r7, #24]
 8100e6c:	4013      	ands	r3, r2
 8100e6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8100e70:	683b      	ldr	r3, [r7, #0]
 8100e72:	685b      	ldr	r3, [r3, #4]
 8100e74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8100e78:	2b00      	cmp	r3, #0
 8100e7a:	d003      	beq.n	8100e84 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8100e7c:	69ba      	ldr	r2, [r7, #24]
 8100e7e:	693b      	ldr	r3, [r7, #16]
 8100e80:	4313      	orrs	r3, r2
 8100e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8100e84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8100e88:	69bb      	ldr	r3, [r7, #24]
 8100e8a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8100e8c:	697b      	ldr	r3, [r7, #20]
 8100e8e:	685b      	ldr	r3, [r3, #4]
 8100e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100e92:	693b      	ldr	r3, [r7, #16]
 8100e94:	43db      	mvns	r3, r3
 8100e96:	69ba      	ldr	r2, [r7, #24]
 8100e98:	4013      	ands	r3, r2
 8100e9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8100e9c:	683b      	ldr	r3, [r7, #0]
 8100e9e:	685b      	ldr	r3, [r3, #4]
 8100ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8100ea4:	2b00      	cmp	r3, #0
 8100ea6:	d003      	beq.n	8100eb0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8100ea8:	69ba      	ldr	r2, [r7, #24]
 8100eaa:	693b      	ldr	r3, [r7, #16]
 8100eac:	4313      	orrs	r3, r2
 8100eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8100eb0:	697b      	ldr	r3, [r7, #20]
 8100eb2:	69ba      	ldr	r2, [r7, #24]
 8100eb4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8100eb6:	697b      	ldr	r3, [r7, #20]
 8100eb8:	681b      	ldr	r3, [r3, #0]
 8100eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100ebc:	693b      	ldr	r3, [r7, #16]
 8100ebe:	43db      	mvns	r3, r3
 8100ec0:	69ba      	ldr	r2, [r7, #24]
 8100ec2:	4013      	ands	r3, r2
 8100ec4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8100ec6:	683b      	ldr	r3, [r7, #0]
 8100ec8:	685b      	ldr	r3, [r3, #4]
 8100eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8100ece:	2b00      	cmp	r3, #0
 8100ed0:	d003      	beq.n	8100eda <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8100ed2:	69ba      	ldr	r2, [r7, #24]
 8100ed4:	693b      	ldr	r3, [r7, #16]
 8100ed6:	4313      	orrs	r3, r2
 8100ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8100eda:	697b      	ldr	r3, [r7, #20]
 8100edc:	69ba      	ldr	r2, [r7, #24]
 8100ede:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8100ee0:	69fb      	ldr	r3, [r7, #28]
 8100ee2:	3301      	adds	r3, #1
 8100ee4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100ee6:	683b      	ldr	r3, [r7, #0]
 8100ee8:	681a      	ldr	r2, [r3, #0]
 8100eea:	69fb      	ldr	r3, [r7, #28]
 8100eec:	fa22 f303 	lsr.w	r3, r2, r3
 8100ef0:	2b00      	cmp	r3, #0
 8100ef2:	f47f ae63 	bne.w	8100bbc <HAL_GPIO_Init+0x14>
  }
}
 8100ef6:	bf00      	nop
 8100ef8:	bf00      	nop
 8100efa:	3724      	adds	r7, #36	; 0x24
 8100efc:	46bd      	mov	sp, r7
 8100efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f02:	4770      	bx	lr
 8100f04:	58000400 	.word	0x58000400

08100f08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8100f08:	b480      	push	{r7}
 8100f0a:	b083      	sub	sp, #12
 8100f0c:	af00      	add	r7, sp, #0
 8100f0e:	6078      	str	r0, [r7, #4]
 8100f10:	460b      	mov	r3, r1
 8100f12:	807b      	strh	r3, [r7, #2]
 8100f14:	4613      	mov	r3, r2
 8100f16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8100f18:	787b      	ldrb	r3, [r7, #1]
 8100f1a:	2b00      	cmp	r3, #0
 8100f1c:	d003      	beq.n	8100f26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8100f1e:	887a      	ldrh	r2, [r7, #2]
 8100f20:	687b      	ldr	r3, [r7, #4]
 8100f22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8100f24:	e003      	b.n	8100f2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8100f26:	887b      	ldrh	r3, [r7, #2]
 8100f28:	041a      	lsls	r2, r3, #16
 8100f2a:	687b      	ldr	r3, [r7, #4]
 8100f2c:	619a      	str	r2, [r3, #24]
}
 8100f2e:	bf00      	nop
 8100f30:	370c      	adds	r7, #12
 8100f32:	46bd      	mov	sp, r7
 8100f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f38:	4770      	bx	lr

08100f3a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8100f3a:	b480      	push	{r7}
 8100f3c:	b085      	sub	sp, #20
 8100f3e:	af00      	add	r7, sp, #0
 8100f40:	6078      	str	r0, [r7, #4]
 8100f42:	460b      	mov	r3, r1
 8100f44:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8100f46:	687b      	ldr	r3, [r7, #4]
 8100f48:	695b      	ldr	r3, [r3, #20]
 8100f4a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8100f4c:	887a      	ldrh	r2, [r7, #2]
 8100f4e:	68fb      	ldr	r3, [r7, #12]
 8100f50:	4013      	ands	r3, r2
 8100f52:	041a      	lsls	r2, r3, #16
 8100f54:	68fb      	ldr	r3, [r7, #12]
 8100f56:	43d9      	mvns	r1, r3
 8100f58:	887b      	ldrh	r3, [r7, #2]
 8100f5a:	400b      	ands	r3, r1
 8100f5c:	431a      	orrs	r2, r3
 8100f5e:	687b      	ldr	r3, [r7, #4]
 8100f60:	619a      	str	r2, [r3, #24]
}
 8100f62:	bf00      	nop
 8100f64:	3714      	adds	r7, #20
 8100f66:	46bd      	mov	sp, r7
 8100f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f6c:	4770      	bx	lr
	...

08100f70 <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
 8100f70:	b480      	push	{r7}
 8100f72:	b083      	sub	sp, #12
 8100f74:	af00      	add	r7, sp, #0
 8100f76:	6078      	str	r0, [r7, #4]
 8100f78:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
 8100f7a:	490e      	ldr	r1, [pc, #56]	; (8100fb4 <HAL_HSEM_Take+0x44>)
 8100f7c:	683b      	ldr	r3, [r7, #0]
 8100f7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8100f86:	687a      	ldr	r2, [r7, #4]
 8100f88:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
 8100f8c:	4a09      	ldr	r2, [pc, #36]	; (8100fb4 <HAL_HSEM_Take+0x44>)
 8100f8e:	687b      	ldr	r3, [r7, #4]
 8100f90:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8100f94:	683b      	ldr	r3, [r7, #0]
 8100f96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8100f9e:	429a      	cmp	r2, r3
 8100fa0:	d101      	bne.n	8100fa6 <HAL_HSEM_Take+0x36>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
 8100fa2:	2300      	movs	r3, #0
 8100fa4:	e000      	b.n	8100fa8 <HAL_HSEM_Take+0x38>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
 8100fa6:	2301      	movs	r3, #1
}
 8100fa8:	4618      	mov	r0, r3
 8100faa:	370c      	adds	r7, #12
 8100fac:	46bd      	mov	sp, r7
 8100fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100fb2:	4770      	bx	lr
 8100fb4:	58026400 	.word	0x58026400

08100fb8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8100fb8:	b480      	push	{r7}
 8100fba:	b083      	sub	sp, #12
 8100fbc:	af00      	add	r7, sp, #0
 8100fbe:	6078      	str	r0, [r7, #4]
 8100fc0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8100fc2:	4906      	ldr	r1, [pc, #24]	; (8100fdc <HAL_HSEM_Release+0x24>)
 8100fc4:	683b      	ldr	r3, [r7, #0]
 8100fc6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8100fca:	687b      	ldr	r3, [r7, #4]
 8100fcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8100fd0:	bf00      	nop
 8100fd2:	370c      	adds	r7, #12
 8100fd4:	46bd      	mov	sp, r7
 8100fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100fda:	4770      	bx	lr
 8100fdc:	58026400 	.word	0x58026400

08100fe0 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8100fe0:	b480      	push	{r7}
 8100fe2:	b083      	sub	sp, #12
 8100fe4:	af00      	add	r7, sp, #0
 8100fe6:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8100fe8:	4b05      	ldr	r3, [pc, #20]	; (8101000 <HAL_HSEM_ActivateNotification+0x20>)
 8100fea:	681a      	ldr	r2, [r3, #0]
 8100fec:	4904      	ldr	r1, [pc, #16]	; (8101000 <HAL_HSEM_ActivateNotification+0x20>)
 8100fee:	687b      	ldr	r3, [r7, #4]
 8100ff0:	4313      	orrs	r3, r2
 8100ff2:	600b      	str	r3, [r1, #0]
#endif
}
 8100ff4:	bf00      	nop
 8100ff6:	370c      	adds	r7, #12
 8100ff8:	46bd      	mov	sp, r7
 8100ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ffe:	4770      	bx	lr
 8101000:	58026510 	.word	0x58026510

08101004 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8101004:	b580      	push	{r7, lr}
 8101006:	b084      	sub	sp, #16
 8101008:	af00      	add	r7, sp, #0
 810100a:	60f8      	str	r0, [r7, #12]
 810100c:	460b      	mov	r3, r1
 810100e:	607a      	str	r2, [r7, #4]
 8101010:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8101012:	4b37      	ldr	r3, [pc, #220]	; (81010f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101014:	681b      	ldr	r3, [r3, #0]
 8101016:	f023 0201 	bic.w	r2, r3, #1
 810101a:	4935      	ldr	r1, [pc, #212]	; (81010f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 810101c:	68fb      	ldr	r3, [r7, #12]
 810101e:	4313      	orrs	r3, r2
 8101020:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8101022:	687b      	ldr	r3, [r7, #4]
 8101024:	2b00      	cmp	r3, #0
 8101026:	d123      	bne.n	8101070 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8101028:	f7ff fdaa 	bl	8100b80 <HAL_GetCurrentCPUID>
 810102c:	4603      	mov	r3, r0
 810102e:	2b03      	cmp	r3, #3
 8101030:	d158      	bne.n	81010e4 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8101032:	4b2f      	ldr	r3, [pc, #188]	; (81010f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101034:	691b      	ldr	r3, [r3, #16]
 8101036:	4a2e      	ldr	r2, [pc, #184]	; (81010f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101038:	f023 0301 	bic.w	r3, r3, #1
 810103c:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810103e:	4b2d      	ldr	r3, [pc, #180]	; (81010f4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101040:	691b      	ldr	r3, [r3, #16]
 8101042:	4a2c      	ldr	r2, [pc, #176]	; (81010f4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101044:	f043 0304 	orr.w	r3, r3, #4
 8101048:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 810104a:	f3bf 8f4f 	dsb	sy
}
 810104e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101050:	f3bf 8f6f 	isb	sy
}
 8101054:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101056:	7afb      	ldrb	r3, [r7, #11]
 8101058:	2b01      	cmp	r3, #1
 810105a:	d101      	bne.n	8101060 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810105c:	bf30      	wfi
 810105e:	e000      	b.n	8101062 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101060:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101062:	4b24      	ldr	r3, [pc, #144]	; (81010f4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101064:	691b      	ldr	r3, [r3, #16]
 8101066:	4a23      	ldr	r2, [pc, #140]	; (81010f4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101068:	f023 0304 	bic.w	r3, r3, #4
 810106c:	6113      	str	r3, [r2, #16]
 810106e:	e03c      	b.n	81010ea <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8101070:	687b      	ldr	r3, [r7, #4]
 8101072:	2b01      	cmp	r3, #1
 8101074:	d123      	bne.n	81010be <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8101076:	f7ff fd83 	bl	8100b80 <HAL_GetCurrentCPUID>
 810107a:	4603      	mov	r3, r0
 810107c:	2b01      	cmp	r3, #1
 810107e:	d133      	bne.n	81010e8 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8101080:	4b1b      	ldr	r3, [pc, #108]	; (81010f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101082:	695b      	ldr	r3, [r3, #20]
 8101084:	4a1a      	ldr	r2, [pc, #104]	; (81010f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101086:	f023 0302 	bic.w	r3, r3, #2
 810108a:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810108c:	4b19      	ldr	r3, [pc, #100]	; (81010f4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810108e:	691b      	ldr	r3, [r3, #16]
 8101090:	4a18      	ldr	r2, [pc, #96]	; (81010f4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101092:	f043 0304 	orr.w	r3, r3, #4
 8101096:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8101098:	f3bf 8f4f 	dsb	sy
}
 810109c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810109e:	f3bf 8f6f 	isb	sy
}
 81010a2:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81010a4:	7afb      	ldrb	r3, [r7, #11]
 81010a6:	2b01      	cmp	r3, #1
 81010a8:	d101      	bne.n	81010ae <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81010aa:	bf30      	wfi
 81010ac:	e000      	b.n	81010b0 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81010ae:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81010b0:	4b10      	ldr	r3, [pc, #64]	; (81010f4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81010b2:	691b      	ldr	r3, [r3, #16]
 81010b4:	4a0f      	ldr	r2, [pc, #60]	; (81010f4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81010b6:	f023 0304 	bic.w	r3, r3, #4
 81010ba:	6113      	str	r3, [r2, #16]
 81010bc:	e015      	b.n	81010ea <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81010be:	f7ff fd5f 	bl	8100b80 <HAL_GetCurrentCPUID>
 81010c2:	4603      	mov	r3, r0
 81010c4:	2b03      	cmp	r3, #3
 81010c6:	d106      	bne.n	81010d6 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81010c8:	4b09      	ldr	r3, [pc, #36]	; (81010f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81010ca:	691b      	ldr	r3, [r3, #16]
 81010cc:	4a08      	ldr	r2, [pc, #32]	; (81010f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81010ce:	f023 0304 	bic.w	r3, r3, #4
 81010d2:	6113      	str	r3, [r2, #16]
 81010d4:	e009      	b.n	81010ea <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81010d6:	4b06      	ldr	r3, [pc, #24]	; (81010f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81010d8:	695b      	ldr	r3, [r3, #20]
 81010da:	4a05      	ldr	r2, [pc, #20]	; (81010f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81010dc:	f023 0304 	bic.w	r3, r3, #4
 81010e0:	6153      	str	r3, [r2, #20]
 81010e2:	e002      	b.n	81010ea <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81010e4:	bf00      	nop
 81010e6:	e000      	b.n	81010ea <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81010e8:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81010ea:	3710      	adds	r7, #16
 81010ec:	46bd      	mov	sp, r7
 81010ee:	bd80      	pop	{r7, pc}
 81010f0:	58024800 	.word	0x58024800
 81010f4:	e000ed00 	.word	0xe000ed00

081010f8 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81010f8:	b580      	push	{r7, lr}
 81010fa:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81010fc:	f7ff fd40 	bl	8100b80 <HAL_GetCurrentCPUID>
 8101100:	4603      	mov	r3, r0
 8101102:	2b03      	cmp	r3, #3
 8101104:	d101      	bne.n	810110a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8101106:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8101108:	e001      	b.n	810110e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810110a:	bf40      	sev
    __WFE ();
 810110c:	bf20      	wfe
}
 810110e:	bf00      	nop
 8101110:	bd80      	pop	{r7, pc}
	...

08101114 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8101114:	b480      	push	{r7}
 8101116:	b089      	sub	sp, #36	; 0x24
 8101118:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810111a:	4bb3      	ldr	r3, [pc, #716]	; (81013e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810111c:	691b      	ldr	r3, [r3, #16]
 810111e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8101122:	2b18      	cmp	r3, #24
 8101124:	f200 8155 	bhi.w	81013d2 <HAL_RCC_GetSysClockFreq+0x2be>
 8101128:	a201      	add	r2, pc, #4	; (adr r2, 8101130 <HAL_RCC_GetSysClockFreq+0x1c>)
 810112a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810112e:	bf00      	nop
 8101130:	08101195 	.word	0x08101195
 8101134:	081013d3 	.word	0x081013d3
 8101138:	081013d3 	.word	0x081013d3
 810113c:	081013d3 	.word	0x081013d3
 8101140:	081013d3 	.word	0x081013d3
 8101144:	081013d3 	.word	0x081013d3
 8101148:	081013d3 	.word	0x081013d3
 810114c:	081013d3 	.word	0x081013d3
 8101150:	081011bb 	.word	0x081011bb
 8101154:	081013d3 	.word	0x081013d3
 8101158:	081013d3 	.word	0x081013d3
 810115c:	081013d3 	.word	0x081013d3
 8101160:	081013d3 	.word	0x081013d3
 8101164:	081013d3 	.word	0x081013d3
 8101168:	081013d3 	.word	0x081013d3
 810116c:	081013d3 	.word	0x081013d3
 8101170:	081011c1 	.word	0x081011c1
 8101174:	081013d3 	.word	0x081013d3
 8101178:	081013d3 	.word	0x081013d3
 810117c:	081013d3 	.word	0x081013d3
 8101180:	081013d3 	.word	0x081013d3
 8101184:	081013d3 	.word	0x081013d3
 8101188:	081013d3 	.word	0x081013d3
 810118c:	081013d3 	.word	0x081013d3
 8101190:	081011c7 	.word	0x081011c7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101194:	4b94      	ldr	r3, [pc, #592]	; (81013e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101196:	681b      	ldr	r3, [r3, #0]
 8101198:	f003 0320 	and.w	r3, r3, #32
 810119c:	2b00      	cmp	r3, #0
 810119e:	d009      	beq.n	81011b4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81011a0:	4b91      	ldr	r3, [pc, #580]	; (81013e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81011a2:	681b      	ldr	r3, [r3, #0]
 81011a4:	08db      	lsrs	r3, r3, #3
 81011a6:	f003 0303 	and.w	r3, r3, #3
 81011aa:	4a90      	ldr	r2, [pc, #576]	; (81013ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 81011ac:	fa22 f303 	lsr.w	r3, r2, r3
 81011b0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 81011b2:	e111      	b.n	81013d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81011b4:	4b8d      	ldr	r3, [pc, #564]	; (81013ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 81011b6:	61bb      	str	r3, [r7, #24]
    break;
 81011b8:	e10e      	b.n	81013d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 81011ba:	4b8d      	ldr	r3, [pc, #564]	; (81013f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81011bc:	61bb      	str	r3, [r7, #24]
    break;
 81011be:	e10b      	b.n	81013d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 81011c0:	4b8c      	ldr	r3, [pc, #560]	; (81013f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81011c2:	61bb      	str	r3, [r7, #24]
    break;
 81011c4:	e108      	b.n	81013d8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81011c6:	4b88      	ldr	r3, [pc, #544]	; (81013e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81011c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81011ca:	f003 0303 	and.w	r3, r3, #3
 81011ce:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 81011d0:	4b85      	ldr	r3, [pc, #532]	; (81013e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81011d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81011d4:	091b      	lsrs	r3, r3, #4
 81011d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81011da:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 81011dc:	4b82      	ldr	r3, [pc, #520]	; (81013e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81011de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81011e0:	f003 0301 	and.w	r3, r3, #1
 81011e4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 81011e6:	4b80      	ldr	r3, [pc, #512]	; (81013e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81011e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81011ea:	08db      	lsrs	r3, r3, #3
 81011ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81011f0:	68fa      	ldr	r2, [r7, #12]
 81011f2:	fb02 f303 	mul.w	r3, r2, r3
 81011f6:	ee07 3a90 	vmov	s15, r3
 81011fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81011fe:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8101202:	693b      	ldr	r3, [r7, #16]
 8101204:	2b00      	cmp	r3, #0
 8101206:	f000 80e1 	beq.w	81013cc <HAL_RCC_GetSysClockFreq+0x2b8>
 810120a:	697b      	ldr	r3, [r7, #20]
 810120c:	2b02      	cmp	r3, #2
 810120e:	f000 8083 	beq.w	8101318 <HAL_RCC_GetSysClockFreq+0x204>
 8101212:	697b      	ldr	r3, [r7, #20]
 8101214:	2b02      	cmp	r3, #2
 8101216:	f200 80a1 	bhi.w	810135c <HAL_RCC_GetSysClockFreq+0x248>
 810121a:	697b      	ldr	r3, [r7, #20]
 810121c:	2b00      	cmp	r3, #0
 810121e:	d003      	beq.n	8101228 <HAL_RCC_GetSysClockFreq+0x114>
 8101220:	697b      	ldr	r3, [r7, #20]
 8101222:	2b01      	cmp	r3, #1
 8101224:	d056      	beq.n	81012d4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8101226:	e099      	b.n	810135c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101228:	4b6f      	ldr	r3, [pc, #444]	; (81013e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810122a:	681b      	ldr	r3, [r3, #0]
 810122c:	f003 0320 	and.w	r3, r3, #32
 8101230:	2b00      	cmp	r3, #0
 8101232:	d02d      	beq.n	8101290 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8101234:	4b6c      	ldr	r3, [pc, #432]	; (81013e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101236:	681b      	ldr	r3, [r3, #0]
 8101238:	08db      	lsrs	r3, r3, #3
 810123a:	f003 0303 	and.w	r3, r3, #3
 810123e:	4a6b      	ldr	r2, [pc, #428]	; (81013ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101240:	fa22 f303 	lsr.w	r3, r2, r3
 8101244:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101246:	687b      	ldr	r3, [r7, #4]
 8101248:	ee07 3a90 	vmov	s15, r3
 810124c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101250:	693b      	ldr	r3, [r7, #16]
 8101252:	ee07 3a90 	vmov	s15, r3
 8101256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810125a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810125e:	4b62      	ldr	r3, [pc, #392]	; (81013e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101266:	ee07 3a90 	vmov	s15, r3
 810126a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810126e:	ed97 6a02 	vldr	s12, [r7, #8]
 8101272:	eddf 5a61 	vldr	s11, [pc, #388]	; 81013f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810127a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810127e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101286:	ee67 7a27 	vmul.f32	s15, s14, s15
 810128a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 810128e:	e087      	b.n	81013a0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101290:	693b      	ldr	r3, [r7, #16]
 8101292:	ee07 3a90 	vmov	s15, r3
 8101296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810129a:	eddf 6a58 	vldr	s13, [pc, #352]	; 81013fc <HAL_RCC_GetSysClockFreq+0x2e8>
 810129e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81012a2:	4b51      	ldr	r3, [pc, #324]	; (81013e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81012a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81012aa:	ee07 3a90 	vmov	s15, r3
 81012ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81012b2:	ed97 6a02 	vldr	s12, [r7, #8]
 81012b6:	eddf 5a50 	vldr	s11, [pc, #320]	; 81013f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 81012ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81012be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81012c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81012c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81012ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 81012ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81012d2:	e065      	b.n	81013a0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81012d4:	693b      	ldr	r3, [r7, #16]
 81012d6:	ee07 3a90 	vmov	s15, r3
 81012da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81012de:	eddf 6a48 	vldr	s13, [pc, #288]	; 8101400 <HAL_RCC_GetSysClockFreq+0x2ec>
 81012e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81012e6:	4b40      	ldr	r3, [pc, #256]	; (81013e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81012ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81012ee:	ee07 3a90 	vmov	s15, r3
 81012f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81012f6:	ed97 6a02 	vldr	s12, [r7, #8]
 81012fa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 81013f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 81012fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101306:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810130a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810130e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101312:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101316:	e043      	b.n	81013a0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101318:	693b      	ldr	r3, [r7, #16]
 810131a:	ee07 3a90 	vmov	s15, r3
 810131e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101322:	eddf 6a38 	vldr	s13, [pc, #224]	; 8101404 <HAL_RCC_GetSysClockFreq+0x2f0>
 8101326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810132a:	4b2f      	ldr	r3, [pc, #188]	; (81013e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810132e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101332:	ee07 3a90 	vmov	s15, r3
 8101336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810133a:	ed97 6a02 	vldr	s12, [r7, #8]
 810133e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 81013f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810134a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810134e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101356:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810135a:	e021      	b.n	81013a0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810135c:	693b      	ldr	r3, [r7, #16]
 810135e:	ee07 3a90 	vmov	s15, r3
 8101362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101366:	eddf 6a26 	vldr	s13, [pc, #152]	; 8101400 <HAL_RCC_GetSysClockFreq+0x2ec>
 810136a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810136e:	4b1e      	ldr	r3, [pc, #120]	; (81013e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101376:	ee07 3a90 	vmov	s15, r3
 810137a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810137e:	ed97 6a02 	vldr	s12, [r7, #8]
 8101382:	eddf 5a1d 	vldr	s11, [pc, #116]	; 81013f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810138a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810138e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101396:	ee67 7a27 	vmul.f32	s15, s14, s15
 810139a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810139e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 81013a0:	4b11      	ldr	r3, [pc, #68]	; (81013e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81013a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81013a4:	0a5b      	lsrs	r3, r3, #9
 81013a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81013aa:	3301      	adds	r3, #1
 81013ac:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 81013ae:	683b      	ldr	r3, [r7, #0]
 81013b0:	ee07 3a90 	vmov	s15, r3
 81013b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81013b8:	edd7 6a07 	vldr	s13, [r7, #28]
 81013bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81013c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81013c4:	ee17 3a90 	vmov	r3, s15
 81013c8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 81013ca:	e005      	b.n	81013d8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 81013cc:	2300      	movs	r3, #0
 81013ce:	61bb      	str	r3, [r7, #24]
    break;
 81013d0:	e002      	b.n	81013d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 81013d2:	4b07      	ldr	r3, [pc, #28]	; (81013f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81013d4:	61bb      	str	r3, [r7, #24]
    break;
 81013d6:	bf00      	nop
  }

  return sysclockfreq;
 81013d8:	69bb      	ldr	r3, [r7, #24]
}
 81013da:	4618      	mov	r0, r3
 81013dc:	3724      	adds	r7, #36	; 0x24
 81013de:	46bd      	mov	sp, r7
 81013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013e4:	4770      	bx	lr
 81013e6:	bf00      	nop
 81013e8:	58024400 	.word	0x58024400
 81013ec:	03d09000 	.word	0x03d09000
 81013f0:	003d0900 	.word	0x003d0900
 81013f4:	007a1200 	.word	0x007a1200
 81013f8:	46000000 	.word	0x46000000
 81013fc:	4c742400 	.word	0x4c742400
 8101400:	4a742400 	.word	0x4a742400
 8101404:	4af42400 	.word	0x4af42400

08101408 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8101408:	b580      	push	{r7, lr}
 810140a:	b086      	sub	sp, #24
 810140c:	af00      	add	r7, sp, #0
 810140e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8101410:	2300      	movs	r3, #0
 8101412:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8101414:	2300      	movs	r3, #0
 8101416:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8101418:	687b      	ldr	r3, [r7, #4]
 810141a:	681b      	ldr	r3, [r3, #0]
 810141c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8101420:	2b00      	cmp	r3, #0
 8101422:	d03f      	beq.n	81014a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8101424:	687b      	ldr	r3, [r7, #4]
 8101426:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8101428:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810142c:	d02a      	beq.n	8101484 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 810142e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8101432:	d824      	bhi.n	810147e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8101434:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8101438:	d018      	beq.n	810146c <HAL_RCCEx_PeriphCLKConfig+0x64>
 810143a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810143e:	d81e      	bhi.n	810147e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8101440:	2b00      	cmp	r3, #0
 8101442:	d003      	beq.n	810144c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8101444:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8101448:	d007      	beq.n	810145a <HAL_RCCEx_PeriphCLKConfig+0x52>
 810144a:	e018      	b.n	810147e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810144c:	4ba3      	ldr	r3, [pc, #652]	; (81016dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810144e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101450:	4aa2      	ldr	r2, [pc, #648]	; (81016dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101452:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101456:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8101458:	e015      	b.n	8101486 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810145a:	687b      	ldr	r3, [r7, #4]
 810145c:	3304      	adds	r3, #4
 810145e:	2102      	movs	r1, #2
 8101460:	4618      	mov	r0, r3
 8101462:	f000 ff17 	bl	8102294 <RCCEx_PLL2_Config>
 8101466:	4603      	mov	r3, r0
 8101468:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 810146a:	e00c      	b.n	8101486 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810146c:	687b      	ldr	r3, [r7, #4]
 810146e:	3324      	adds	r3, #36	; 0x24
 8101470:	2102      	movs	r1, #2
 8101472:	4618      	mov	r0, r3
 8101474:	f000 ffc0 	bl	81023f8 <RCCEx_PLL3_Config>
 8101478:	4603      	mov	r3, r0
 810147a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 810147c:	e003      	b.n	8101486 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810147e:	2301      	movs	r3, #1
 8101480:	75fb      	strb	r3, [r7, #23]
      break;
 8101482:	e000      	b.n	8101486 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8101484:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101486:	7dfb      	ldrb	r3, [r7, #23]
 8101488:	2b00      	cmp	r3, #0
 810148a:	d109      	bne.n	81014a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 810148c:	4b93      	ldr	r3, [pc, #588]	; (81016dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810148e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101490:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8101494:	687b      	ldr	r3, [r7, #4]
 8101496:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8101498:	4990      	ldr	r1, [pc, #576]	; (81016dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810149a:	4313      	orrs	r3, r2
 810149c:	650b      	str	r3, [r1, #80]	; 0x50
 810149e:	e001      	b.n	81014a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81014a0:	7dfb      	ldrb	r3, [r7, #23]
 81014a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 81014a4:	687b      	ldr	r3, [r7, #4]
 81014a6:	681b      	ldr	r3, [r3, #0]
 81014a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81014ac:	2b00      	cmp	r3, #0
 81014ae:	d03d      	beq.n	810152c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 81014b0:	687b      	ldr	r3, [r7, #4]
 81014b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81014b4:	2b04      	cmp	r3, #4
 81014b6:	d826      	bhi.n	8101506 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 81014b8:	a201      	add	r2, pc, #4	; (adr r2, 81014c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 81014ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81014be:	bf00      	nop
 81014c0:	081014d5 	.word	0x081014d5
 81014c4:	081014e3 	.word	0x081014e3
 81014c8:	081014f5 	.word	0x081014f5
 81014cc:	0810150d 	.word	0x0810150d
 81014d0:	0810150d 	.word	0x0810150d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81014d4:	4b81      	ldr	r3, [pc, #516]	; (81016dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81014d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81014d8:	4a80      	ldr	r2, [pc, #512]	; (81016dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81014da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81014de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81014e0:	e015      	b.n	810150e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81014e2:	687b      	ldr	r3, [r7, #4]
 81014e4:	3304      	adds	r3, #4
 81014e6:	2100      	movs	r1, #0
 81014e8:	4618      	mov	r0, r3
 81014ea:	f000 fed3 	bl	8102294 <RCCEx_PLL2_Config>
 81014ee:	4603      	mov	r3, r0
 81014f0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81014f2:	e00c      	b.n	810150e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81014f4:	687b      	ldr	r3, [r7, #4]
 81014f6:	3324      	adds	r3, #36	; 0x24
 81014f8:	2100      	movs	r1, #0
 81014fa:	4618      	mov	r0, r3
 81014fc:	f000 ff7c 	bl	81023f8 <RCCEx_PLL3_Config>
 8101500:	4603      	mov	r3, r0
 8101502:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101504:	e003      	b.n	810150e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101506:	2301      	movs	r3, #1
 8101508:	75fb      	strb	r3, [r7, #23]
      break;
 810150a:	e000      	b.n	810150e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 810150c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810150e:	7dfb      	ldrb	r3, [r7, #23]
 8101510:	2b00      	cmp	r3, #0
 8101512:	d109      	bne.n	8101528 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8101514:	4b71      	ldr	r3, [pc, #452]	; (81016dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101518:	f023 0207 	bic.w	r2, r3, #7
 810151c:	687b      	ldr	r3, [r7, #4]
 810151e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101520:	496e      	ldr	r1, [pc, #440]	; (81016dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101522:	4313      	orrs	r3, r2
 8101524:	650b      	str	r3, [r1, #80]	; 0x50
 8101526:	e001      	b.n	810152c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101528:	7dfb      	ldrb	r3, [r7, #23]
 810152a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 810152c:	687b      	ldr	r3, [r7, #4]
 810152e:	681b      	ldr	r3, [r3, #0]
 8101530:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8101534:	2b00      	cmp	r3, #0
 8101536:	d042      	beq.n	81015be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8101538:	687b      	ldr	r3, [r7, #4]
 810153a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810153c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8101540:	d02b      	beq.n	810159a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8101542:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8101546:	d825      	bhi.n	8101594 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8101548:	2bc0      	cmp	r3, #192	; 0xc0
 810154a:	d028      	beq.n	810159e <HAL_RCCEx_PeriphCLKConfig+0x196>
 810154c:	2bc0      	cmp	r3, #192	; 0xc0
 810154e:	d821      	bhi.n	8101594 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8101550:	2b80      	cmp	r3, #128	; 0x80
 8101552:	d016      	beq.n	8101582 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8101554:	2b80      	cmp	r3, #128	; 0x80
 8101556:	d81d      	bhi.n	8101594 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8101558:	2b00      	cmp	r3, #0
 810155a:	d002      	beq.n	8101562 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 810155c:	2b40      	cmp	r3, #64	; 0x40
 810155e:	d007      	beq.n	8101570 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8101560:	e018      	b.n	8101594 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101562:	4b5e      	ldr	r3, [pc, #376]	; (81016dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101566:	4a5d      	ldr	r2, [pc, #372]	; (81016dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810156c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 810156e:	e017      	b.n	81015a0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8101570:	687b      	ldr	r3, [r7, #4]
 8101572:	3304      	adds	r3, #4
 8101574:	2100      	movs	r1, #0
 8101576:	4618      	mov	r0, r3
 8101578:	f000 fe8c 	bl	8102294 <RCCEx_PLL2_Config>
 810157c:	4603      	mov	r3, r0
 810157e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8101580:	e00e      	b.n	81015a0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8101582:	687b      	ldr	r3, [r7, #4]
 8101584:	3324      	adds	r3, #36	; 0x24
 8101586:	2100      	movs	r1, #0
 8101588:	4618      	mov	r0, r3
 810158a:	f000 ff35 	bl	81023f8 <RCCEx_PLL3_Config>
 810158e:	4603      	mov	r3, r0
 8101590:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8101592:	e005      	b.n	81015a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101594:	2301      	movs	r3, #1
 8101596:	75fb      	strb	r3, [r7, #23]
      break;
 8101598:	e002      	b.n	81015a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 810159a:	bf00      	nop
 810159c:	e000      	b.n	81015a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 810159e:	bf00      	nop
    }

    if(ret == HAL_OK)
 81015a0:	7dfb      	ldrb	r3, [r7, #23]
 81015a2:	2b00      	cmp	r3, #0
 81015a4:	d109      	bne.n	81015ba <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 81015a6:	4b4d      	ldr	r3, [pc, #308]	; (81016dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81015a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81015aa:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 81015ae:	687b      	ldr	r3, [r7, #4]
 81015b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81015b2:	494a      	ldr	r1, [pc, #296]	; (81016dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81015b4:	4313      	orrs	r3, r2
 81015b6:	650b      	str	r3, [r1, #80]	; 0x50
 81015b8:	e001      	b.n	81015be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81015ba:	7dfb      	ldrb	r3, [r7, #23]
 81015bc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 81015be:	687b      	ldr	r3, [r7, #4]
 81015c0:	681b      	ldr	r3, [r3, #0]
 81015c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 81015c6:	2b00      	cmp	r3, #0
 81015c8:	d049      	beq.n	810165e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 81015ca:	687b      	ldr	r3, [r7, #4]
 81015cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 81015d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 81015d4:	d030      	beq.n	8101638 <HAL_RCCEx_PeriphCLKConfig+0x230>
 81015d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 81015da:	d82a      	bhi.n	8101632 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 81015dc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 81015e0:	d02c      	beq.n	810163c <HAL_RCCEx_PeriphCLKConfig+0x234>
 81015e2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 81015e6:	d824      	bhi.n	8101632 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 81015e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81015ec:	d018      	beq.n	8101620 <HAL_RCCEx_PeriphCLKConfig+0x218>
 81015ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81015f2:	d81e      	bhi.n	8101632 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 81015f4:	2b00      	cmp	r3, #0
 81015f6:	d003      	beq.n	8101600 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 81015f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81015fc:	d007      	beq.n	810160e <HAL_RCCEx_PeriphCLKConfig+0x206>
 81015fe:	e018      	b.n	8101632 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101600:	4b36      	ldr	r3, [pc, #216]	; (81016dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101604:	4a35      	ldr	r2, [pc, #212]	; (81016dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810160a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810160c:	e017      	b.n	810163e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810160e:	687b      	ldr	r3, [r7, #4]
 8101610:	3304      	adds	r3, #4
 8101612:	2100      	movs	r1, #0
 8101614:	4618      	mov	r0, r3
 8101616:	f000 fe3d 	bl	8102294 <RCCEx_PLL2_Config>
 810161a:	4603      	mov	r3, r0
 810161c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 810161e:	e00e      	b.n	810163e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8101620:	687b      	ldr	r3, [r7, #4]
 8101622:	3324      	adds	r3, #36	; 0x24
 8101624:	2100      	movs	r1, #0
 8101626:	4618      	mov	r0, r3
 8101628:	f000 fee6 	bl	81023f8 <RCCEx_PLL3_Config>
 810162c:	4603      	mov	r3, r0
 810162e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101630:	e005      	b.n	810163e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8101632:	2301      	movs	r3, #1
 8101634:	75fb      	strb	r3, [r7, #23]
      break;
 8101636:	e002      	b.n	810163e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8101638:	bf00      	nop
 810163a:	e000      	b.n	810163e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 810163c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810163e:	7dfb      	ldrb	r3, [r7, #23]
 8101640:	2b00      	cmp	r3, #0
 8101642:	d10a      	bne.n	810165a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8101644:	4b25      	ldr	r3, [pc, #148]	; (81016dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101648:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 810164c:	687b      	ldr	r3, [r7, #4]
 810164e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8101652:	4922      	ldr	r1, [pc, #136]	; (81016dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101654:	4313      	orrs	r3, r2
 8101656:	658b      	str	r3, [r1, #88]	; 0x58
 8101658:	e001      	b.n	810165e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810165a:	7dfb      	ldrb	r3, [r7, #23]
 810165c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 810165e:	687b      	ldr	r3, [r7, #4]
 8101660:	681b      	ldr	r3, [r3, #0]
 8101662:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8101666:	2b00      	cmp	r3, #0
 8101668:	d04b      	beq.n	8101702 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 810166a:	687b      	ldr	r3, [r7, #4]
 810166c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8101670:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8101674:	d030      	beq.n	81016d8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8101676:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810167a:	d82a      	bhi.n	81016d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 810167c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8101680:	d02e      	beq.n	81016e0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8101682:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8101686:	d824      	bhi.n	81016d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8101688:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810168c:	d018      	beq.n	81016c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 810168e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8101692:	d81e      	bhi.n	81016d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8101694:	2b00      	cmp	r3, #0
 8101696:	d003      	beq.n	81016a0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8101698:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 810169c:	d007      	beq.n	81016ae <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 810169e:	e018      	b.n	81016d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81016a0:	4b0e      	ldr	r3, [pc, #56]	; (81016dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81016a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81016a4:	4a0d      	ldr	r2, [pc, #52]	; (81016dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81016a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81016aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81016ac:	e019      	b.n	81016e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81016ae:	687b      	ldr	r3, [r7, #4]
 81016b0:	3304      	adds	r3, #4
 81016b2:	2100      	movs	r1, #0
 81016b4:	4618      	mov	r0, r3
 81016b6:	f000 fded 	bl	8102294 <RCCEx_PLL2_Config>
 81016ba:	4603      	mov	r3, r0
 81016bc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 81016be:	e010      	b.n	81016e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81016c0:	687b      	ldr	r3, [r7, #4]
 81016c2:	3324      	adds	r3, #36	; 0x24
 81016c4:	2100      	movs	r1, #0
 81016c6:	4618      	mov	r0, r3
 81016c8:	f000 fe96 	bl	81023f8 <RCCEx_PLL3_Config>
 81016cc:	4603      	mov	r3, r0
 81016ce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81016d0:	e007      	b.n	81016e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 81016d2:	2301      	movs	r3, #1
 81016d4:	75fb      	strb	r3, [r7, #23]
      break;
 81016d6:	e004      	b.n	81016e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 81016d8:	bf00      	nop
 81016da:	e002      	b.n	81016e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 81016dc:	58024400 	.word	0x58024400
      break;
 81016e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 81016e2:	7dfb      	ldrb	r3, [r7, #23]
 81016e4:	2b00      	cmp	r3, #0
 81016e6:	d10a      	bne.n	81016fe <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 81016e8:	4b99      	ldr	r3, [pc, #612]	; (8101950 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81016ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81016ec:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 81016f0:	687b      	ldr	r3, [r7, #4]
 81016f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 81016f6:	4996      	ldr	r1, [pc, #600]	; (8101950 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81016f8:	4313      	orrs	r3, r2
 81016fa:	658b      	str	r3, [r1, #88]	; 0x58
 81016fc:	e001      	b.n	8101702 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81016fe:	7dfb      	ldrb	r3, [r7, #23]
 8101700:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8101702:	687b      	ldr	r3, [r7, #4]
 8101704:	681b      	ldr	r3, [r3, #0]
 8101706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810170a:	2b00      	cmp	r3, #0
 810170c:	d032      	beq.n	8101774 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 810170e:	687b      	ldr	r3, [r7, #4]
 8101710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8101712:	2b30      	cmp	r3, #48	; 0x30
 8101714:	d01c      	beq.n	8101750 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8101716:	2b30      	cmp	r3, #48	; 0x30
 8101718:	d817      	bhi.n	810174a <HAL_RCCEx_PeriphCLKConfig+0x342>
 810171a:	2b20      	cmp	r3, #32
 810171c:	d00c      	beq.n	8101738 <HAL_RCCEx_PeriphCLKConfig+0x330>
 810171e:	2b20      	cmp	r3, #32
 8101720:	d813      	bhi.n	810174a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8101722:	2b00      	cmp	r3, #0
 8101724:	d016      	beq.n	8101754 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8101726:	2b10      	cmp	r3, #16
 8101728:	d10f      	bne.n	810174a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810172a:	4b89      	ldr	r3, [pc, #548]	; (8101950 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810172c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810172e:	4a88      	ldr	r2, [pc, #544]	; (8101950 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101734:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8101736:	e00e      	b.n	8101756 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8101738:	687b      	ldr	r3, [r7, #4]
 810173a:	3304      	adds	r3, #4
 810173c:	2102      	movs	r1, #2
 810173e:	4618      	mov	r0, r3
 8101740:	f000 fda8 	bl	8102294 <RCCEx_PLL2_Config>
 8101744:	4603      	mov	r3, r0
 8101746:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8101748:	e005      	b.n	8101756 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 810174a:	2301      	movs	r3, #1
 810174c:	75fb      	strb	r3, [r7, #23]
      break;
 810174e:	e002      	b.n	8101756 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8101750:	bf00      	nop
 8101752:	e000      	b.n	8101756 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8101754:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101756:	7dfb      	ldrb	r3, [r7, #23]
 8101758:	2b00      	cmp	r3, #0
 810175a:	d109      	bne.n	8101770 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 810175c:	4b7c      	ldr	r3, [pc, #496]	; (8101950 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810175e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8101760:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8101764:	687b      	ldr	r3, [r7, #4]
 8101766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8101768:	4979      	ldr	r1, [pc, #484]	; (8101950 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810176a:	4313      	orrs	r3, r2
 810176c:	64cb      	str	r3, [r1, #76]	; 0x4c
 810176e:	e001      	b.n	8101774 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101770:	7dfb      	ldrb	r3, [r7, #23]
 8101772:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8101774:	687b      	ldr	r3, [r7, #4]
 8101776:	681b      	ldr	r3, [r3, #0]
 8101778:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 810177c:	2b00      	cmp	r3, #0
 810177e:	d047      	beq.n	8101810 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8101780:	687b      	ldr	r3, [r7, #4]
 8101782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101784:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8101788:	d030      	beq.n	81017ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 810178a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810178e:	d82a      	bhi.n	81017e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8101790:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8101794:	d02c      	beq.n	81017f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8101796:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810179a:	d824      	bhi.n	81017e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 810179c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81017a0:	d018      	beq.n	81017d4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 81017a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81017a6:	d81e      	bhi.n	81017e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 81017a8:	2b00      	cmp	r3, #0
 81017aa:	d003      	beq.n	81017b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 81017ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81017b0:	d007      	beq.n	81017c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 81017b2:	e018      	b.n	81017e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81017b4:	4b66      	ldr	r3, [pc, #408]	; (8101950 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81017b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81017b8:	4a65      	ldr	r2, [pc, #404]	; (8101950 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81017ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81017be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81017c0:	e017      	b.n	81017f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81017c2:	687b      	ldr	r3, [r7, #4]
 81017c4:	3304      	adds	r3, #4
 81017c6:	2100      	movs	r1, #0
 81017c8:	4618      	mov	r0, r3
 81017ca:	f000 fd63 	bl	8102294 <RCCEx_PLL2_Config>
 81017ce:	4603      	mov	r3, r0
 81017d0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81017d2:	e00e      	b.n	81017f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81017d4:	687b      	ldr	r3, [r7, #4]
 81017d6:	3324      	adds	r3, #36	; 0x24
 81017d8:	2100      	movs	r1, #0
 81017da:	4618      	mov	r0, r3
 81017dc:	f000 fe0c 	bl	81023f8 <RCCEx_PLL3_Config>
 81017e0:	4603      	mov	r3, r0
 81017e2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81017e4:	e005      	b.n	81017f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81017e6:	2301      	movs	r3, #1
 81017e8:	75fb      	strb	r3, [r7, #23]
      break;
 81017ea:	e002      	b.n	81017f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 81017ec:	bf00      	nop
 81017ee:	e000      	b.n	81017f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 81017f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 81017f2:	7dfb      	ldrb	r3, [r7, #23]
 81017f4:	2b00      	cmp	r3, #0
 81017f6:	d109      	bne.n	810180c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 81017f8:	4b55      	ldr	r3, [pc, #340]	; (8101950 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81017fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81017fc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8101800:	687b      	ldr	r3, [r7, #4]
 8101802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101804:	4952      	ldr	r1, [pc, #328]	; (8101950 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101806:	4313      	orrs	r3, r2
 8101808:	650b      	str	r3, [r1, #80]	; 0x50
 810180a:	e001      	b.n	8101810 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810180c:	7dfb      	ldrb	r3, [r7, #23]
 810180e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8101810:	687b      	ldr	r3, [r7, #4]
 8101812:	681b      	ldr	r3, [r3, #0]
 8101814:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8101818:	2b00      	cmp	r3, #0
 810181a:	d049      	beq.n	81018b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 810181c:	687b      	ldr	r3, [r7, #4]
 810181e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8101820:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8101824:	d02e      	beq.n	8101884 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8101826:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 810182a:	d828      	bhi.n	810187e <HAL_RCCEx_PeriphCLKConfig+0x476>
 810182c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8101830:	d02a      	beq.n	8101888 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8101832:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8101836:	d822      	bhi.n	810187e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8101838:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810183c:	d026      	beq.n	810188c <HAL_RCCEx_PeriphCLKConfig+0x484>
 810183e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8101842:	d81c      	bhi.n	810187e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8101844:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8101848:	d010      	beq.n	810186c <HAL_RCCEx_PeriphCLKConfig+0x464>
 810184a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810184e:	d816      	bhi.n	810187e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8101850:	2b00      	cmp	r3, #0
 8101852:	d01d      	beq.n	8101890 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8101854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8101858:	d111      	bne.n	810187e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810185a:	687b      	ldr	r3, [r7, #4]
 810185c:	3304      	adds	r3, #4
 810185e:	2101      	movs	r1, #1
 8101860:	4618      	mov	r0, r3
 8101862:	f000 fd17 	bl	8102294 <RCCEx_PLL2_Config>
 8101866:	4603      	mov	r3, r0
 8101868:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 810186a:	e012      	b.n	8101892 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810186c:	687b      	ldr	r3, [r7, #4]
 810186e:	3324      	adds	r3, #36	; 0x24
 8101870:	2101      	movs	r1, #1
 8101872:	4618      	mov	r0, r3
 8101874:	f000 fdc0 	bl	81023f8 <RCCEx_PLL3_Config>
 8101878:	4603      	mov	r3, r0
 810187a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 810187c:	e009      	b.n	8101892 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810187e:	2301      	movs	r3, #1
 8101880:	75fb      	strb	r3, [r7, #23]
      break;
 8101882:	e006      	b.n	8101892 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8101884:	bf00      	nop
 8101886:	e004      	b.n	8101892 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8101888:	bf00      	nop
 810188a:	e002      	b.n	8101892 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 810188c:	bf00      	nop
 810188e:	e000      	b.n	8101892 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8101890:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101892:	7dfb      	ldrb	r3, [r7, #23]
 8101894:	2b00      	cmp	r3, #0
 8101896:	d109      	bne.n	81018ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8101898:	4b2d      	ldr	r3, [pc, #180]	; (8101950 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810189a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810189c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 81018a0:	687b      	ldr	r3, [r7, #4]
 81018a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81018a4:	492a      	ldr	r1, [pc, #168]	; (8101950 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81018a6:	4313      	orrs	r3, r2
 81018a8:	650b      	str	r3, [r1, #80]	; 0x50
 81018aa:	e001      	b.n	81018b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81018ac:	7dfb      	ldrb	r3, [r7, #23]
 81018ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81018b0:	687b      	ldr	r3, [r7, #4]
 81018b2:	681b      	ldr	r3, [r3, #0]
 81018b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81018b8:	2b00      	cmp	r3, #0
 81018ba:	d04d      	beq.n	8101958 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 81018bc:	687b      	ldr	r3, [r7, #4]
 81018be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 81018c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81018c6:	d02e      	beq.n	8101926 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 81018c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81018cc:	d828      	bhi.n	8101920 <HAL_RCCEx_PeriphCLKConfig+0x518>
 81018ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81018d2:	d02a      	beq.n	810192a <HAL_RCCEx_PeriphCLKConfig+0x522>
 81018d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81018d8:	d822      	bhi.n	8101920 <HAL_RCCEx_PeriphCLKConfig+0x518>
 81018da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81018de:	d026      	beq.n	810192e <HAL_RCCEx_PeriphCLKConfig+0x526>
 81018e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81018e4:	d81c      	bhi.n	8101920 <HAL_RCCEx_PeriphCLKConfig+0x518>
 81018e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81018ea:	d010      	beq.n	810190e <HAL_RCCEx_PeriphCLKConfig+0x506>
 81018ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81018f0:	d816      	bhi.n	8101920 <HAL_RCCEx_PeriphCLKConfig+0x518>
 81018f2:	2b00      	cmp	r3, #0
 81018f4:	d01d      	beq.n	8101932 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 81018f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81018fa:	d111      	bne.n	8101920 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81018fc:	687b      	ldr	r3, [r7, #4]
 81018fe:	3304      	adds	r3, #4
 8101900:	2101      	movs	r1, #1
 8101902:	4618      	mov	r0, r3
 8101904:	f000 fcc6 	bl	8102294 <RCCEx_PLL2_Config>
 8101908:	4603      	mov	r3, r0
 810190a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 810190c:	e012      	b.n	8101934 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810190e:	687b      	ldr	r3, [r7, #4]
 8101910:	3324      	adds	r3, #36	; 0x24
 8101912:	2101      	movs	r1, #1
 8101914:	4618      	mov	r0, r3
 8101916:	f000 fd6f 	bl	81023f8 <RCCEx_PLL3_Config>
 810191a:	4603      	mov	r3, r0
 810191c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 810191e:	e009      	b.n	8101934 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8101920:	2301      	movs	r3, #1
 8101922:	75fb      	strb	r3, [r7, #23]
      break;
 8101924:	e006      	b.n	8101934 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8101926:	bf00      	nop
 8101928:	e004      	b.n	8101934 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 810192a:	bf00      	nop
 810192c:	e002      	b.n	8101934 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 810192e:	bf00      	nop
 8101930:	e000      	b.n	8101934 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8101932:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101934:	7dfb      	ldrb	r3, [r7, #23]
 8101936:	2b00      	cmp	r3, #0
 8101938:	d10c      	bne.n	8101954 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 810193a:	4b05      	ldr	r3, [pc, #20]	; (8101950 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810193c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810193e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8101942:	687b      	ldr	r3, [r7, #4]
 8101944:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8101948:	4901      	ldr	r1, [pc, #4]	; (8101950 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810194a:	4313      	orrs	r3, r2
 810194c:	658b      	str	r3, [r1, #88]	; 0x58
 810194e:	e003      	b.n	8101958 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8101950:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101954:	7dfb      	ldrb	r3, [r7, #23]
 8101956:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8101958:	687b      	ldr	r3, [r7, #4]
 810195a:	681b      	ldr	r3, [r3, #0]
 810195c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8101960:	2b00      	cmp	r3, #0
 8101962:	d02f      	beq.n	81019c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8101964:	687b      	ldr	r3, [r7, #4]
 8101966:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8101968:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810196c:	d00e      	beq.n	810198c <HAL_RCCEx_PeriphCLKConfig+0x584>
 810196e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101972:	d814      	bhi.n	810199e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8101974:	2b00      	cmp	r3, #0
 8101976:	d015      	beq.n	81019a4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8101978:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810197c:	d10f      	bne.n	810199e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810197e:	4bb0      	ldr	r3, [pc, #704]	; (8101c40 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101982:	4aaf      	ldr	r2, [pc, #700]	; (8101c40 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101988:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 810198a:	e00c      	b.n	81019a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810198c:	687b      	ldr	r3, [r7, #4]
 810198e:	3304      	adds	r3, #4
 8101990:	2101      	movs	r1, #1
 8101992:	4618      	mov	r0, r3
 8101994:	f000 fc7e 	bl	8102294 <RCCEx_PLL2_Config>
 8101998:	4603      	mov	r3, r0
 810199a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 810199c:	e003      	b.n	81019a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810199e:	2301      	movs	r3, #1
 81019a0:	75fb      	strb	r3, [r7, #23]
      break;
 81019a2:	e000      	b.n	81019a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 81019a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 81019a6:	7dfb      	ldrb	r3, [r7, #23]
 81019a8:	2b00      	cmp	r3, #0
 81019aa:	d109      	bne.n	81019c0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 81019ac:	4ba4      	ldr	r3, [pc, #656]	; (8101c40 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81019ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81019b0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 81019b4:	687b      	ldr	r3, [r7, #4]
 81019b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81019b8:	49a1      	ldr	r1, [pc, #644]	; (8101c40 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81019ba:	4313      	orrs	r3, r2
 81019bc:	650b      	str	r3, [r1, #80]	; 0x50
 81019be:	e001      	b.n	81019c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81019c0:	7dfb      	ldrb	r3, [r7, #23]
 81019c2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 81019c4:	687b      	ldr	r3, [r7, #4]
 81019c6:	681b      	ldr	r3, [r3, #0]
 81019c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81019cc:	2b00      	cmp	r3, #0
 81019ce:	d032      	beq.n	8101a36 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 81019d0:	687b      	ldr	r3, [r7, #4]
 81019d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81019d4:	2b03      	cmp	r3, #3
 81019d6:	d81b      	bhi.n	8101a10 <HAL_RCCEx_PeriphCLKConfig+0x608>
 81019d8:	a201      	add	r2, pc, #4	; (adr r2, 81019e0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 81019da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81019de:	bf00      	nop
 81019e0:	08101a17 	.word	0x08101a17
 81019e4:	081019f1 	.word	0x081019f1
 81019e8:	081019ff 	.word	0x081019ff
 81019ec:	08101a17 	.word	0x08101a17
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81019f0:	4b93      	ldr	r3, [pc, #588]	; (8101c40 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81019f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81019f4:	4a92      	ldr	r2, [pc, #584]	; (8101c40 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81019f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81019fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 81019fc:	e00c      	b.n	8101a18 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81019fe:	687b      	ldr	r3, [r7, #4]
 8101a00:	3304      	adds	r3, #4
 8101a02:	2102      	movs	r1, #2
 8101a04:	4618      	mov	r0, r3
 8101a06:	f000 fc45 	bl	8102294 <RCCEx_PLL2_Config>
 8101a0a:	4603      	mov	r3, r0
 8101a0c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8101a0e:	e003      	b.n	8101a18 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8101a10:	2301      	movs	r3, #1
 8101a12:	75fb      	strb	r3, [r7, #23]
      break;
 8101a14:	e000      	b.n	8101a18 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8101a16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101a18:	7dfb      	ldrb	r3, [r7, #23]
 8101a1a:	2b00      	cmp	r3, #0
 8101a1c:	d109      	bne.n	8101a32 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8101a1e:	4b88      	ldr	r3, [pc, #544]	; (8101c40 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8101a22:	f023 0203 	bic.w	r2, r3, #3
 8101a26:	687b      	ldr	r3, [r7, #4]
 8101a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8101a2a:	4985      	ldr	r1, [pc, #532]	; (8101c40 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101a2c:	4313      	orrs	r3, r2
 8101a2e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8101a30:	e001      	b.n	8101a36 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101a32:	7dfb      	ldrb	r3, [r7, #23]
 8101a34:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8101a36:	687b      	ldr	r3, [r7, #4]
 8101a38:	681b      	ldr	r3, [r3, #0]
 8101a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8101a3e:	2b00      	cmp	r3, #0
 8101a40:	f000 8088 	beq.w	8101b54 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8101a44:	4b7f      	ldr	r3, [pc, #508]	; (8101c44 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8101a46:	681b      	ldr	r3, [r3, #0]
 8101a48:	4a7e      	ldr	r2, [pc, #504]	; (8101c44 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8101a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8101a4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8101a50:	f7fe ff7a 	bl	8100948 <HAL_GetTick>
 8101a54:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8101a56:	e009      	b.n	8101a6c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8101a58:	f7fe ff76 	bl	8100948 <HAL_GetTick>
 8101a5c:	4602      	mov	r2, r0
 8101a5e:	693b      	ldr	r3, [r7, #16]
 8101a60:	1ad3      	subs	r3, r2, r3
 8101a62:	2b64      	cmp	r3, #100	; 0x64
 8101a64:	d902      	bls.n	8101a6c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8101a66:	2303      	movs	r3, #3
 8101a68:	75fb      	strb	r3, [r7, #23]
        break;
 8101a6a:	e005      	b.n	8101a78 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8101a6c:	4b75      	ldr	r3, [pc, #468]	; (8101c44 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8101a6e:	681b      	ldr	r3, [r3, #0]
 8101a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8101a74:	2b00      	cmp	r3, #0
 8101a76:	d0ef      	beq.n	8101a58 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8101a78:	7dfb      	ldrb	r3, [r7, #23]
 8101a7a:	2b00      	cmp	r3, #0
 8101a7c:	d168      	bne.n	8101b50 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8101a7e:	4b70      	ldr	r3, [pc, #448]	; (8101c40 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101a80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8101a82:	687b      	ldr	r3, [r7, #4]
 8101a84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8101a88:	4053      	eors	r3, r2
 8101a8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8101a8e:	2b00      	cmp	r3, #0
 8101a90:	d013      	beq.n	8101aba <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8101a92:	4b6b      	ldr	r3, [pc, #428]	; (8101c40 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8101a96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8101a9a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8101a9c:	4b68      	ldr	r3, [pc, #416]	; (8101c40 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8101aa0:	4a67      	ldr	r2, [pc, #412]	; (8101c40 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101aa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8101aa6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8101aa8:	4b65      	ldr	r3, [pc, #404]	; (8101c40 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8101aac:	4a64      	ldr	r2, [pc, #400]	; (8101c40 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101aae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8101ab2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8101ab4:	4a62      	ldr	r2, [pc, #392]	; (8101c40 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101ab6:	68fb      	ldr	r3, [r7, #12]
 8101ab8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8101aba:	687b      	ldr	r3, [r7, #4]
 8101abc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8101ac0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8101ac4:	d115      	bne.n	8101af2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8101ac6:	f7fe ff3f 	bl	8100948 <HAL_GetTick>
 8101aca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8101acc:	e00b      	b.n	8101ae6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8101ace:	f7fe ff3b 	bl	8100948 <HAL_GetTick>
 8101ad2:	4602      	mov	r2, r0
 8101ad4:	693b      	ldr	r3, [r7, #16]
 8101ad6:	1ad3      	subs	r3, r2, r3
 8101ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8101adc:	4293      	cmp	r3, r2
 8101ade:	d902      	bls.n	8101ae6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8101ae0:	2303      	movs	r3, #3
 8101ae2:	75fb      	strb	r3, [r7, #23]
            break;
 8101ae4:	e005      	b.n	8101af2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8101ae6:	4b56      	ldr	r3, [pc, #344]	; (8101c40 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8101aea:	f003 0302 	and.w	r3, r3, #2
 8101aee:	2b00      	cmp	r3, #0
 8101af0:	d0ed      	beq.n	8101ace <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8101af2:	7dfb      	ldrb	r3, [r7, #23]
 8101af4:	2b00      	cmp	r3, #0
 8101af6:	d128      	bne.n	8101b4a <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8101af8:	687b      	ldr	r3, [r7, #4]
 8101afa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8101afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8101b02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8101b06:	d10f      	bne.n	8101b28 <HAL_RCCEx_PeriphCLKConfig+0x720>
 8101b08:	4b4d      	ldr	r3, [pc, #308]	; (8101c40 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101b0a:	691b      	ldr	r3, [r3, #16]
 8101b0c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8101b10:	687b      	ldr	r3, [r7, #4]
 8101b12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8101b16:	091b      	lsrs	r3, r3, #4
 8101b18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8101b1c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8101b20:	4947      	ldr	r1, [pc, #284]	; (8101c40 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101b22:	4313      	orrs	r3, r2
 8101b24:	610b      	str	r3, [r1, #16]
 8101b26:	e005      	b.n	8101b34 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8101b28:	4b45      	ldr	r3, [pc, #276]	; (8101c40 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101b2a:	691b      	ldr	r3, [r3, #16]
 8101b2c:	4a44      	ldr	r2, [pc, #272]	; (8101c40 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101b2e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8101b32:	6113      	str	r3, [r2, #16]
 8101b34:	4b42      	ldr	r3, [pc, #264]	; (8101c40 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101b36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8101b38:	687b      	ldr	r3, [r7, #4]
 8101b3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8101b3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8101b42:	493f      	ldr	r1, [pc, #252]	; (8101c40 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101b44:	4313      	orrs	r3, r2
 8101b46:	670b      	str	r3, [r1, #112]	; 0x70
 8101b48:	e004      	b.n	8101b54 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8101b4a:	7dfb      	ldrb	r3, [r7, #23]
 8101b4c:	75bb      	strb	r3, [r7, #22]
 8101b4e:	e001      	b.n	8101b54 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101b50:	7dfb      	ldrb	r3, [r7, #23]
 8101b52:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8101b54:	687b      	ldr	r3, [r7, #4]
 8101b56:	681b      	ldr	r3, [r3, #0]
 8101b58:	f003 0301 	and.w	r3, r3, #1
 8101b5c:	2b00      	cmp	r3, #0
 8101b5e:	f000 8083 	beq.w	8101c68 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8101b62:	687b      	ldr	r3, [r7, #4]
 8101b64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8101b66:	2b28      	cmp	r3, #40	; 0x28
 8101b68:	d866      	bhi.n	8101c38 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8101b6a:	a201      	add	r2, pc, #4	; (adr r2, 8101b70 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8101b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101b70:	08101c49 	.word	0x08101c49
 8101b74:	08101c39 	.word	0x08101c39
 8101b78:	08101c39 	.word	0x08101c39
 8101b7c:	08101c39 	.word	0x08101c39
 8101b80:	08101c39 	.word	0x08101c39
 8101b84:	08101c39 	.word	0x08101c39
 8101b88:	08101c39 	.word	0x08101c39
 8101b8c:	08101c39 	.word	0x08101c39
 8101b90:	08101c15 	.word	0x08101c15
 8101b94:	08101c39 	.word	0x08101c39
 8101b98:	08101c39 	.word	0x08101c39
 8101b9c:	08101c39 	.word	0x08101c39
 8101ba0:	08101c39 	.word	0x08101c39
 8101ba4:	08101c39 	.word	0x08101c39
 8101ba8:	08101c39 	.word	0x08101c39
 8101bac:	08101c39 	.word	0x08101c39
 8101bb0:	08101c27 	.word	0x08101c27
 8101bb4:	08101c39 	.word	0x08101c39
 8101bb8:	08101c39 	.word	0x08101c39
 8101bbc:	08101c39 	.word	0x08101c39
 8101bc0:	08101c39 	.word	0x08101c39
 8101bc4:	08101c39 	.word	0x08101c39
 8101bc8:	08101c39 	.word	0x08101c39
 8101bcc:	08101c39 	.word	0x08101c39
 8101bd0:	08101c49 	.word	0x08101c49
 8101bd4:	08101c39 	.word	0x08101c39
 8101bd8:	08101c39 	.word	0x08101c39
 8101bdc:	08101c39 	.word	0x08101c39
 8101be0:	08101c39 	.word	0x08101c39
 8101be4:	08101c39 	.word	0x08101c39
 8101be8:	08101c39 	.word	0x08101c39
 8101bec:	08101c39 	.word	0x08101c39
 8101bf0:	08101c49 	.word	0x08101c49
 8101bf4:	08101c39 	.word	0x08101c39
 8101bf8:	08101c39 	.word	0x08101c39
 8101bfc:	08101c39 	.word	0x08101c39
 8101c00:	08101c39 	.word	0x08101c39
 8101c04:	08101c39 	.word	0x08101c39
 8101c08:	08101c39 	.word	0x08101c39
 8101c0c:	08101c39 	.word	0x08101c39
 8101c10:	08101c49 	.word	0x08101c49
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8101c14:	687b      	ldr	r3, [r7, #4]
 8101c16:	3304      	adds	r3, #4
 8101c18:	2101      	movs	r1, #1
 8101c1a:	4618      	mov	r0, r3
 8101c1c:	f000 fb3a 	bl	8102294 <RCCEx_PLL2_Config>
 8101c20:	4603      	mov	r3, r0
 8101c22:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8101c24:	e011      	b.n	8101c4a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8101c26:	687b      	ldr	r3, [r7, #4]
 8101c28:	3324      	adds	r3, #36	; 0x24
 8101c2a:	2101      	movs	r1, #1
 8101c2c:	4618      	mov	r0, r3
 8101c2e:	f000 fbe3 	bl	81023f8 <RCCEx_PLL3_Config>
 8101c32:	4603      	mov	r3, r0
 8101c34:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8101c36:	e008      	b.n	8101c4a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101c38:	2301      	movs	r3, #1
 8101c3a:	75fb      	strb	r3, [r7, #23]
      break;
 8101c3c:	e005      	b.n	8101c4a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8101c3e:	bf00      	nop
 8101c40:	58024400 	.word	0x58024400
 8101c44:	58024800 	.word	0x58024800
      break;
 8101c48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101c4a:	7dfb      	ldrb	r3, [r7, #23]
 8101c4c:	2b00      	cmp	r3, #0
 8101c4e:	d109      	bne.n	8101c64 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8101c50:	4b96      	ldr	r3, [pc, #600]	; (8101eac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8101c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101c54:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8101c58:	687b      	ldr	r3, [r7, #4]
 8101c5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8101c5c:	4993      	ldr	r1, [pc, #588]	; (8101eac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8101c5e:	4313      	orrs	r3, r2
 8101c60:	654b      	str	r3, [r1, #84]	; 0x54
 8101c62:	e001      	b.n	8101c68 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101c64:	7dfb      	ldrb	r3, [r7, #23]
 8101c66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8101c68:	687b      	ldr	r3, [r7, #4]
 8101c6a:	681b      	ldr	r3, [r3, #0]
 8101c6c:	f003 0302 	and.w	r3, r3, #2
 8101c70:	2b00      	cmp	r3, #0
 8101c72:	d038      	beq.n	8101ce6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8101c74:	687b      	ldr	r3, [r7, #4]
 8101c76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8101c78:	2b05      	cmp	r3, #5
 8101c7a:	d821      	bhi.n	8101cc0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8101c7c:	a201      	add	r2, pc, #4	; (adr r2, 8101c84 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8101c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101c82:	bf00      	nop
 8101c84:	08101cc7 	.word	0x08101cc7
 8101c88:	08101c9d 	.word	0x08101c9d
 8101c8c:	08101caf 	.word	0x08101caf
 8101c90:	08101cc7 	.word	0x08101cc7
 8101c94:	08101cc7 	.word	0x08101cc7
 8101c98:	08101cc7 	.word	0x08101cc7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8101c9c:	687b      	ldr	r3, [r7, #4]
 8101c9e:	3304      	adds	r3, #4
 8101ca0:	2101      	movs	r1, #1
 8101ca2:	4618      	mov	r0, r3
 8101ca4:	f000 faf6 	bl	8102294 <RCCEx_PLL2_Config>
 8101ca8:	4603      	mov	r3, r0
 8101caa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8101cac:	e00c      	b.n	8101cc8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8101cae:	687b      	ldr	r3, [r7, #4]
 8101cb0:	3324      	adds	r3, #36	; 0x24
 8101cb2:	2101      	movs	r1, #1
 8101cb4:	4618      	mov	r0, r3
 8101cb6:	f000 fb9f 	bl	81023f8 <RCCEx_PLL3_Config>
 8101cba:	4603      	mov	r3, r0
 8101cbc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8101cbe:	e003      	b.n	8101cc8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101cc0:	2301      	movs	r3, #1
 8101cc2:	75fb      	strb	r3, [r7, #23]
      break;
 8101cc4:	e000      	b.n	8101cc8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8101cc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101cc8:	7dfb      	ldrb	r3, [r7, #23]
 8101cca:	2b00      	cmp	r3, #0
 8101ccc:	d109      	bne.n	8101ce2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8101cce:	4b77      	ldr	r3, [pc, #476]	; (8101eac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8101cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101cd2:	f023 0207 	bic.w	r2, r3, #7
 8101cd6:	687b      	ldr	r3, [r7, #4]
 8101cd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8101cda:	4974      	ldr	r1, [pc, #464]	; (8101eac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8101cdc:	4313      	orrs	r3, r2
 8101cde:	654b      	str	r3, [r1, #84]	; 0x54
 8101ce0:	e001      	b.n	8101ce6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101ce2:	7dfb      	ldrb	r3, [r7, #23]
 8101ce4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8101ce6:	687b      	ldr	r3, [r7, #4]
 8101ce8:	681b      	ldr	r3, [r3, #0]
 8101cea:	f003 0304 	and.w	r3, r3, #4
 8101cee:	2b00      	cmp	r3, #0
 8101cf0:	d03a      	beq.n	8101d68 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8101cf2:	687b      	ldr	r3, [r7, #4]
 8101cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8101cf8:	2b05      	cmp	r3, #5
 8101cfa:	d821      	bhi.n	8101d40 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8101cfc:	a201      	add	r2, pc, #4	; (adr r2, 8101d04 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8101cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101d02:	bf00      	nop
 8101d04:	08101d47 	.word	0x08101d47
 8101d08:	08101d1d 	.word	0x08101d1d
 8101d0c:	08101d2f 	.word	0x08101d2f
 8101d10:	08101d47 	.word	0x08101d47
 8101d14:	08101d47 	.word	0x08101d47
 8101d18:	08101d47 	.word	0x08101d47
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8101d1c:	687b      	ldr	r3, [r7, #4]
 8101d1e:	3304      	adds	r3, #4
 8101d20:	2101      	movs	r1, #1
 8101d22:	4618      	mov	r0, r3
 8101d24:	f000 fab6 	bl	8102294 <RCCEx_PLL2_Config>
 8101d28:	4603      	mov	r3, r0
 8101d2a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8101d2c:	e00c      	b.n	8101d48 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8101d2e:	687b      	ldr	r3, [r7, #4]
 8101d30:	3324      	adds	r3, #36	; 0x24
 8101d32:	2101      	movs	r1, #1
 8101d34:	4618      	mov	r0, r3
 8101d36:	f000 fb5f 	bl	81023f8 <RCCEx_PLL3_Config>
 8101d3a:	4603      	mov	r3, r0
 8101d3c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8101d3e:	e003      	b.n	8101d48 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101d40:	2301      	movs	r3, #1
 8101d42:	75fb      	strb	r3, [r7, #23]
      break;
 8101d44:	e000      	b.n	8101d48 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8101d46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101d48:	7dfb      	ldrb	r3, [r7, #23]
 8101d4a:	2b00      	cmp	r3, #0
 8101d4c:	d10a      	bne.n	8101d64 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8101d4e:	4b57      	ldr	r3, [pc, #348]	; (8101eac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8101d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101d52:	f023 0207 	bic.w	r2, r3, #7
 8101d56:	687b      	ldr	r3, [r7, #4]
 8101d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8101d5c:	4953      	ldr	r1, [pc, #332]	; (8101eac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8101d5e:	4313      	orrs	r3, r2
 8101d60:	658b      	str	r3, [r1, #88]	; 0x58
 8101d62:	e001      	b.n	8101d68 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101d64:	7dfb      	ldrb	r3, [r7, #23]
 8101d66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8101d68:	687b      	ldr	r3, [r7, #4]
 8101d6a:	681b      	ldr	r3, [r3, #0]
 8101d6c:	f003 0320 	and.w	r3, r3, #32
 8101d70:	2b00      	cmp	r3, #0
 8101d72:	d04b      	beq.n	8101e0c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8101d74:	687b      	ldr	r3, [r7, #4]
 8101d76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8101d7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8101d7e:	d02e      	beq.n	8101dde <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8101d80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8101d84:	d828      	bhi.n	8101dd8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8101d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101d8a:	d02a      	beq.n	8101de2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8101d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101d90:	d822      	bhi.n	8101dd8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8101d92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8101d96:	d026      	beq.n	8101de6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8101d98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8101d9c:	d81c      	bhi.n	8101dd8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8101d9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101da2:	d010      	beq.n	8101dc6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8101da4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101da8:	d816      	bhi.n	8101dd8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8101daa:	2b00      	cmp	r3, #0
 8101dac:	d01d      	beq.n	8101dea <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8101dae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8101db2:	d111      	bne.n	8101dd8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8101db4:	687b      	ldr	r3, [r7, #4]
 8101db6:	3304      	adds	r3, #4
 8101db8:	2100      	movs	r1, #0
 8101dba:	4618      	mov	r0, r3
 8101dbc:	f000 fa6a 	bl	8102294 <RCCEx_PLL2_Config>
 8101dc0:	4603      	mov	r3, r0
 8101dc2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8101dc4:	e012      	b.n	8101dec <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8101dc6:	687b      	ldr	r3, [r7, #4]
 8101dc8:	3324      	adds	r3, #36	; 0x24
 8101dca:	2102      	movs	r1, #2
 8101dcc:	4618      	mov	r0, r3
 8101dce:	f000 fb13 	bl	81023f8 <RCCEx_PLL3_Config>
 8101dd2:	4603      	mov	r3, r0
 8101dd4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8101dd6:	e009      	b.n	8101dec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101dd8:	2301      	movs	r3, #1
 8101dda:	75fb      	strb	r3, [r7, #23]
      break;
 8101ddc:	e006      	b.n	8101dec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8101dde:	bf00      	nop
 8101de0:	e004      	b.n	8101dec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8101de2:	bf00      	nop
 8101de4:	e002      	b.n	8101dec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8101de6:	bf00      	nop
 8101de8:	e000      	b.n	8101dec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8101dea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101dec:	7dfb      	ldrb	r3, [r7, #23]
 8101dee:	2b00      	cmp	r3, #0
 8101df0:	d10a      	bne.n	8101e08 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8101df2:	4b2e      	ldr	r3, [pc, #184]	; (8101eac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8101df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101df6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8101dfa:	687b      	ldr	r3, [r7, #4]
 8101dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8101e00:	492a      	ldr	r1, [pc, #168]	; (8101eac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8101e02:	4313      	orrs	r3, r2
 8101e04:	654b      	str	r3, [r1, #84]	; 0x54
 8101e06:	e001      	b.n	8101e0c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101e08:	7dfb      	ldrb	r3, [r7, #23]
 8101e0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8101e0c:	687b      	ldr	r3, [r7, #4]
 8101e0e:	681b      	ldr	r3, [r3, #0]
 8101e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8101e14:	2b00      	cmp	r3, #0
 8101e16:	d04d      	beq.n	8101eb4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8101e18:	687b      	ldr	r3, [r7, #4]
 8101e1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8101e1e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8101e22:	d02e      	beq.n	8101e82 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8101e24:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8101e28:	d828      	bhi.n	8101e7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8101e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8101e2e:	d02a      	beq.n	8101e86 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8101e30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8101e34:	d822      	bhi.n	8101e7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8101e36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8101e3a:	d026      	beq.n	8101e8a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8101e3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8101e40:	d81c      	bhi.n	8101e7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8101e42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8101e46:	d010      	beq.n	8101e6a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8101e48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8101e4c:	d816      	bhi.n	8101e7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8101e4e:	2b00      	cmp	r3, #0
 8101e50:	d01d      	beq.n	8101e8e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8101e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8101e56:	d111      	bne.n	8101e7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8101e58:	687b      	ldr	r3, [r7, #4]
 8101e5a:	3304      	adds	r3, #4
 8101e5c:	2100      	movs	r1, #0
 8101e5e:	4618      	mov	r0, r3
 8101e60:	f000 fa18 	bl	8102294 <RCCEx_PLL2_Config>
 8101e64:	4603      	mov	r3, r0
 8101e66:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8101e68:	e012      	b.n	8101e90 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8101e6a:	687b      	ldr	r3, [r7, #4]
 8101e6c:	3324      	adds	r3, #36	; 0x24
 8101e6e:	2102      	movs	r1, #2
 8101e70:	4618      	mov	r0, r3
 8101e72:	f000 fac1 	bl	81023f8 <RCCEx_PLL3_Config>
 8101e76:	4603      	mov	r3, r0
 8101e78:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8101e7a:	e009      	b.n	8101e90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101e7c:	2301      	movs	r3, #1
 8101e7e:	75fb      	strb	r3, [r7, #23]
      break;
 8101e80:	e006      	b.n	8101e90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8101e82:	bf00      	nop
 8101e84:	e004      	b.n	8101e90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8101e86:	bf00      	nop
 8101e88:	e002      	b.n	8101e90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8101e8a:	bf00      	nop
 8101e8c:	e000      	b.n	8101e90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8101e8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101e90:	7dfb      	ldrb	r3, [r7, #23]
 8101e92:	2b00      	cmp	r3, #0
 8101e94:	d10c      	bne.n	8101eb0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8101e96:	4b05      	ldr	r3, [pc, #20]	; (8101eac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8101e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101e9a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8101e9e:	687b      	ldr	r3, [r7, #4]
 8101ea0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8101ea4:	4901      	ldr	r1, [pc, #4]	; (8101eac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8101ea6:	4313      	orrs	r3, r2
 8101ea8:	658b      	str	r3, [r1, #88]	; 0x58
 8101eaa:	e003      	b.n	8101eb4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8101eac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101eb0:	7dfb      	ldrb	r3, [r7, #23]
 8101eb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8101eb4:	687b      	ldr	r3, [r7, #4]
 8101eb6:	681b      	ldr	r3, [r3, #0]
 8101eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101ebc:	2b00      	cmp	r3, #0
 8101ebe:	d04b      	beq.n	8101f58 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8101ec0:	687b      	ldr	r3, [r7, #4]
 8101ec2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8101ec6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8101eca:	d02e      	beq.n	8101f2a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8101ecc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8101ed0:	d828      	bhi.n	8101f24 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8101ed2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8101ed6:	d02a      	beq.n	8101f2e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8101ed8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8101edc:	d822      	bhi.n	8101f24 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8101ede:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8101ee2:	d026      	beq.n	8101f32 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8101ee4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8101ee8:	d81c      	bhi.n	8101f24 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8101eea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8101eee:	d010      	beq.n	8101f12 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8101ef0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8101ef4:	d816      	bhi.n	8101f24 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8101ef6:	2b00      	cmp	r3, #0
 8101ef8:	d01d      	beq.n	8101f36 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8101efa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8101efe:	d111      	bne.n	8101f24 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8101f00:	687b      	ldr	r3, [r7, #4]
 8101f02:	3304      	adds	r3, #4
 8101f04:	2100      	movs	r1, #0
 8101f06:	4618      	mov	r0, r3
 8101f08:	f000 f9c4 	bl	8102294 <RCCEx_PLL2_Config>
 8101f0c:	4603      	mov	r3, r0
 8101f0e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8101f10:	e012      	b.n	8101f38 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8101f12:	687b      	ldr	r3, [r7, #4]
 8101f14:	3324      	adds	r3, #36	; 0x24
 8101f16:	2102      	movs	r1, #2
 8101f18:	4618      	mov	r0, r3
 8101f1a:	f000 fa6d 	bl	81023f8 <RCCEx_PLL3_Config>
 8101f1e:	4603      	mov	r3, r0
 8101f20:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8101f22:	e009      	b.n	8101f38 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101f24:	2301      	movs	r3, #1
 8101f26:	75fb      	strb	r3, [r7, #23]
      break;
 8101f28:	e006      	b.n	8101f38 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8101f2a:	bf00      	nop
 8101f2c:	e004      	b.n	8101f38 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8101f2e:	bf00      	nop
 8101f30:	e002      	b.n	8101f38 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8101f32:	bf00      	nop
 8101f34:	e000      	b.n	8101f38 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8101f36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101f38:	7dfb      	ldrb	r3, [r7, #23]
 8101f3a:	2b00      	cmp	r3, #0
 8101f3c:	d10a      	bne.n	8101f54 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8101f3e:	4b9d      	ldr	r3, [pc, #628]	; (81021b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8101f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101f42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8101f46:	687b      	ldr	r3, [r7, #4]
 8101f48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8101f4c:	4999      	ldr	r1, [pc, #612]	; (81021b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8101f4e:	4313      	orrs	r3, r2
 8101f50:	658b      	str	r3, [r1, #88]	; 0x58
 8101f52:	e001      	b.n	8101f58 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101f54:	7dfb      	ldrb	r3, [r7, #23]
 8101f56:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8101f58:	687b      	ldr	r3, [r7, #4]
 8101f5a:	681b      	ldr	r3, [r3, #0]
 8101f5c:	f003 0308 	and.w	r3, r3, #8
 8101f60:	2b00      	cmp	r3, #0
 8101f62:	d01a      	beq.n	8101f9a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8101f64:	687b      	ldr	r3, [r7, #4]
 8101f66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8101f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8101f6e:	d10a      	bne.n	8101f86 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8101f70:	687b      	ldr	r3, [r7, #4]
 8101f72:	3324      	adds	r3, #36	; 0x24
 8101f74:	2102      	movs	r1, #2
 8101f76:	4618      	mov	r0, r3
 8101f78:	f000 fa3e 	bl	81023f8 <RCCEx_PLL3_Config>
 8101f7c:	4603      	mov	r3, r0
 8101f7e:	2b00      	cmp	r3, #0
 8101f80:	d001      	beq.n	8101f86 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8101f82:	2301      	movs	r3, #1
 8101f84:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8101f86:	4b8b      	ldr	r3, [pc, #556]	; (81021b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8101f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101f8a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8101f8e:	687b      	ldr	r3, [r7, #4]
 8101f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8101f94:	4987      	ldr	r1, [pc, #540]	; (81021b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8101f96:	4313      	orrs	r3, r2
 8101f98:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8101f9a:	687b      	ldr	r3, [r7, #4]
 8101f9c:	681b      	ldr	r3, [r3, #0]
 8101f9e:	f003 0310 	and.w	r3, r3, #16
 8101fa2:	2b00      	cmp	r3, #0
 8101fa4:	d01a      	beq.n	8101fdc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8101fa6:	687b      	ldr	r3, [r7, #4]
 8101fa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8101fac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8101fb0:	d10a      	bne.n	8101fc8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8101fb2:	687b      	ldr	r3, [r7, #4]
 8101fb4:	3324      	adds	r3, #36	; 0x24
 8101fb6:	2102      	movs	r1, #2
 8101fb8:	4618      	mov	r0, r3
 8101fba:	f000 fa1d 	bl	81023f8 <RCCEx_PLL3_Config>
 8101fbe:	4603      	mov	r3, r0
 8101fc0:	2b00      	cmp	r3, #0
 8101fc2:	d001      	beq.n	8101fc8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8101fc4:	2301      	movs	r3, #1
 8101fc6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8101fc8:	4b7a      	ldr	r3, [pc, #488]	; (81021b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8101fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101fcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8101fd0:	687b      	ldr	r3, [r7, #4]
 8101fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8101fd6:	4977      	ldr	r1, [pc, #476]	; (81021b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8101fd8:	4313      	orrs	r3, r2
 8101fda:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8101fdc:	687b      	ldr	r3, [r7, #4]
 8101fde:	681b      	ldr	r3, [r3, #0]
 8101fe0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8101fe4:	2b00      	cmp	r3, #0
 8101fe6:	d034      	beq.n	8102052 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8101fe8:	687b      	ldr	r3, [r7, #4]
 8101fea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8101fee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8101ff2:	d01d      	beq.n	8102030 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8101ff4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8101ff8:	d817      	bhi.n	810202a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8101ffa:	2b00      	cmp	r3, #0
 8101ffc:	d003      	beq.n	8102006 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8101ffe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8102002:	d009      	beq.n	8102018 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8102004:	e011      	b.n	810202a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102006:	687b      	ldr	r3, [r7, #4]
 8102008:	3304      	adds	r3, #4
 810200a:	2100      	movs	r1, #0
 810200c:	4618      	mov	r0, r3
 810200e:	f000 f941 	bl	8102294 <RCCEx_PLL2_Config>
 8102012:	4603      	mov	r3, r0
 8102014:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8102016:	e00c      	b.n	8102032 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102018:	687b      	ldr	r3, [r7, #4]
 810201a:	3324      	adds	r3, #36	; 0x24
 810201c:	2102      	movs	r1, #2
 810201e:	4618      	mov	r0, r3
 8102020:	f000 f9ea 	bl	81023f8 <RCCEx_PLL3_Config>
 8102024:	4603      	mov	r3, r0
 8102026:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8102028:	e003      	b.n	8102032 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810202a:	2301      	movs	r3, #1
 810202c:	75fb      	strb	r3, [r7, #23]
      break;
 810202e:	e000      	b.n	8102032 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8102030:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102032:	7dfb      	ldrb	r3, [r7, #23]
 8102034:	2b00      	cmp	r3, #0
 8102036:	d10a      	bne.n	810204e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8102038:	4b5e      	ldr	r3, [pc, #376]	; (81021b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810203a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810203c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8102040:	687b      	ldr	r3, [r7, #4]
 8102042:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8102046:	495b      	ldr	r1, [pc, #364]	; (81021b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102048:	4313      	orrs	r3, r2
 810204a:	658b      	str	r3, [r1, #88]	; 0x58
 810204c:	e001      	b.n	8102052 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810204e:	7dfb      	ldrb	r3, [r7, #23]
 8102050:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8102052:	687b      	ldr	r3, [r7, #4]
 8102054:	681b      	ldr	r3, [r3, #0]
 8102056:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810205a:	2b00      	cmp	r3, #0
 810205c:	d033      	beq.n	81020c6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 810205e:	687b      	ldr	r3, [r7, #4]
 8102060:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8102064:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102068:	d01c      	beq.n	81020a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 810206a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810206e:	d816      	bhi.n	810209e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8102070:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8102074:	d003      	beq.n	810207e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8102076:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810207a:	d007      	beq.n	810208c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 810207c:	e00f      	b.n	810209e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810207e:	4b4d      	ldr	r3, [pc, #308]	; (81021b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102082:	4a4c      	ldr	r2, [pc, #304]	; (81021b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102088:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 810208a:	e00c      	b.n	81020a6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810208c:	687b      	ldr	r3, [r7, #4]
 810208e:	3324      	adds	r3, #36	; 0x24
 8102090:	2101      	movs	r1, #1
 8102092:	4618      	mov	r0, r3
 8102094:	f000 f9b0 	bl	81023f8 <RCCEx_PLL3_Config>
 8102098:	4603      	mov	r3, r0
 810209a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 810209c:	e003      	b.n	81020a6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810209e:	2301      	movs	r3, #1
 81020a0:	75fb      	strb	r3, [r7, #23]
      break;
 81020a2:	e000      	b.n	81020a6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 81020a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 81020a6:	7dfb      	ldrb	r3, [r7, #23]
 81020a8:	2b00      	cmp	r3, #0
 81020aa:	d10a      	bne.n	81020c2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 81020ac:	4b41      	ldr	r3, [pc, #260]	; (81021b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81020ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81020b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 81020b4:	687b      	ldr	r3, [r7, #4]
 81020b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81020ba:	493e      	ldr	r1, [pc, #248]	; (81021b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81020bc:	4313      	orrs	r3, r2
 81020be:	654b      	str	r3, [r1, #84]	; 0x54
 81020c0:	e001      	b.n	81020c6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81020c2:	7dfb      	ldrb	r3, [r7, #23]
 81020c4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 81020c6:	687b      	ldr	r3, [r7, #4]
 81020c8:	681b      	ldr	r3, [r3, #0]
 81020ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81020ce:	2b00      	cmp	r3, #0
 81020d0:	d029      	beq.n	8102126 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 81020d2:	687b      	ldr	r3, [r7, #4]
 81020d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81020d6:	2b00      	cmp	r3, #0
 81020d8:	d003      	beq.n	81020e2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 81020da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81020de:	d007      	beq.n	81020f0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 81020e0:	e00f      	b.n	8102102 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81020e2:	4b34      	ldr	r3, [pc, #208]	; (81021b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81020e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81020e6:	4a33      	ldr	r2, [pc, #204]	; (81021b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81020e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81020ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81020ee:	e00b      	b.n	8102108 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81020f0:	687b      	ldr	r3, [r7, #4]
 81020f2:	3304      	adds	r3, #4
 81020f4:	2102      	movs	r1, #2
 81020f6:	4618      	mov	r0, r3
 81020f8:	f000 f8cc 	bl	8102294 <RCCEx_PLL2_Config>
 81020fc:	4603      	mov	r3, r0
 81020fe:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8102100:	e002      	b.n	8102108 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8102102:	2301      	movs	r3, #1
 8102104:	75fb      	strb	r3, [r7, #23]
      break;
 8102106:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102108:	7dfb      	ldrb	r3, [r7, #23]
 810210a:	2b00      	cmp	r3, #0
 810210c:	d109      	bne.n	8102122 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810210e:	4b29      	ldr	r3, [pc, #164]	; (81021b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102112:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8102116:	687b      	ldr	r3, [r7, #4]
 8102118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810211a:	4926      	ldr	r1, [pc, #152]	; (81021b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810211c:	4313      	orrs	r3, r2
 810211e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8102120:	e001      	b.n	8102126 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102122:	7dfb      	ldrb	r3, [r7, #23]
 8102124:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8102126:	687b      	ldr	r3, [r7, #4]
 8102128:	681b      	ldr	r3, [r3, #0]
 810212a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810212e:	2b00      	cmp	r3, #0
 8102130:	d00a      	beq.n	8102148 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8102132:	687b      	ldr	r3, [r7, #4]
 8102134:	3324      	adds	r3, #36	; 0x24
 8102136:	2102      	movs	r1, #2
 8102138:	4618      	mov	r0, r3
 810213a:	f000 f95d 	bl	81023f8 <RCCEx_PLL3_Config>
 810213e:	4603      	mov	r3, r0
 8102140:	2b00      	cmp	r3, #0
 8102142:	d001      	beq.n	8102148 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8102144:	2301      	movs	r3, #1
 8102146:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8102148:	687b      	ldr	r3, [r7, #4]
 810214a:	681b      	ldr	r3, [r3, #0]
 810214c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8102150:	2b00      	cmp	r3, #0
 8102152:	d033      	beq.n	81021bc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8102154:	687b      	ldr	r3, [r7, #4]
 8102156:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8102158:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810215c:	d017      	beq.n	810218e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 810215e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8102162:	d811      	bhi.n	8102188 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8102164:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8102168:	d013      	beq.n	8102192 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 810216a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810216e:	d80b      	bhi.n	8102188 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8102170:	2b00      	cmp	r3, #0
 8102172:	d010      	beq.n	8102196 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8102174:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102178:	d106      	bne.n	8102188 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810217a:	4b0e      	ldr	r3, [pc, #56]	; (81021b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810217c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810217e:	4a0d      	ldr	r2, [pc, #52]	; (81021b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102184:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8102186:	e007      	b.n	8102198 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102188:	2301      	movs	r3, #1
 810218a:	75fb      	strb	r3, [r7, #23]
      break;
 810218c:	e004      	b.n	8102198 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 810218e:	bf00      	nop
 8102190:	e002      	b.n	8102198 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8102192:	bf00      	nop
 8102194:	e000      	b.n	8102198 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8102196:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102198:	7dfb      	ldrb	r3, [r7, #23]
 810219a:	2b00      	cmp	r3, #0
 810219c:	d10c      	bne.n	81021b8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 810219e:	4b05      	ldr	r3, [pc, #20]	; (81021b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81021a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81021a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81021a6:	687b      	ldr	r3, [r7, #4]
 81021a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81021aa:	4902      	ldr	r1, [pc, #8]	; (81021b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81021ac:	4313      	orrs	r3, r2
 81021ae:	654b      	str	r3, [r1, #84]	; 0x54
 81021b0:	e004      	b.n	81021bc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 81021b2:	bf00      	nop
 81021b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81021b8:	7dfb      	ldrb	r3, [r7, #23]
 81021ba:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81021bc:	687b      	ldr	r3, [r7, #4]
 81021be:	681b      	ldr	r3, [r3, #0]
 81021c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81021c4:	2b00      	cmp	r3, #0
 81021c6:	d008      	beq.n	81021da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 81021c8:	4b31      	ldr	r3, [pc, #196]	; (8102290 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81021ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81021cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 81021d0:	687b      	ldr	r3, [r7, #4]
 81021d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81021d4:	492e      	ldr	r1, [pc, #184]	; (8102290 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81021d6:	4313      	orrs	r3, r2
 81021d8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 81021da:	687b      	ldr	r3, [r7, #4]
 81021dc:	681b      	ldr	r3, [r3, #0]
 81021de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81021e2:	2b00      	cmp	r3, #0
 81021e4:	d009      	beq.n	81021fa <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 81021e6:	4b2a      	ldr	r3, [pc, #168]	; (8102290 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81021e8:	691b      	ldr	r3, [r3, #16]
 81021ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 81021ee:	687b      	ldr	r3, [r7, #4]
 81021f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81021f4:	4926      	ldr	r1, [pc, #152]	; (8102290 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81021f6:	4313      	orrs	r3, r2
 81021f8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 81021fa:	687b      	ldr	r3, [r7, #4]
 81021fc:	681b      	ldr	r3, [r3, #0]
 81021fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8102202:	2b00      	cmp	r3, #0
 8102204:	d008      	beq.n	8102218 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8102206:	4b22      	ldr	r3, [pc, #136]	; (8102290 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8102208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810220a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 810220e:	687b      	ldr	r3, [r7, #4]
 8102210:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8102212:	491f      	ldr	r1, [pc, #124]	; (8102290 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8102214:	4313      	orrs	r3, r2
 8102216:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8102218:	687b      	ldr	r3, [r7, #4]
 810221a:	681b      	ldr	r3, [r3, #0]
 810221c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8102220:	2b00      	cmp	r3, #0
 8102222:	d00d      	beq.n	8102240 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8102224:	4b1a      	ldr	r3, [pc, #104]	; (8102290 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8102226:	691b      	ldr	r3, [r3, #16]
 8102228:	4a19      	ldr	r2, [pc, #100]	; (8102290 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810222a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 810222e:	6113      	str	r3, [r2, #16]
 8102230:	4b17      	ldr	r3, [pc, #92]	; (8102290 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8102232:	691a      	ldr	r2, [r3, #16]
 8102234:	687b      	ldr	r3, [r7, #4]
 8102236:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 810223a:	4915      	ldr	r1, [pc, #84]	; (8102290 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810223c:	4313      	orrs	r3, r2
 810223e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8102240:	687b      	ldr	r3, [r7, #4]
 8102242:	681b      	ldr	r3, [r3, #0]
 8102244:	2b00      	cmp	r3, #0
 8102246:	da08      	bge.n	810225a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8102248:	4b11      	ldr	r3, [pc, #68]	; (8102290 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810224a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810224c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8102250:	687b      	ldr	r3, [r7, #4]
 8102252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102254:	490e      	ldr	r1, [pc, #56]	; (8102290 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8102256:	4313      	orrs	r3, r2
 8102258:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 810225a:	687b      	ldr	r3, [r7, #4]
 810225c:	681b      	ldr	r3, [r3, #0]
 810225e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8102262:	2b00      	cmp	r3, #0
 8102264:	d009      	beq.n	810227a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8102266:	4b0a      	ldr	r3, [pc, #40]	; (8102290 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8102268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810226a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 810226e:	687b      	ldr	r3, [r7, #4]
 8102270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8102274:	4906      	ldr	r1, [pc, #24]	; (8102290 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8102276:	4313      	orrs	r3, r2
 8102278:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 810227a:	7dbb      	ldrb	r3, [r7, #22]
 810227c:	2b00      	cmp	r3, #0
 810227e:	d101      	bne.n	8102284 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8102280:	2300      	movs	r3, #0
 8102282:	e000      	b.n	8102286 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8102284:	2301      	movs	r3, #1
}
 8102286:	4618      	mov	r0, r3
 8102288:	3718      	adds	r7, #24
 810228a:	46bd      	mov	sp, r7
 810228c:	bd80      	pop	{r7, pc}
 810228e:	bf00      	nop
 8102290:	58024400 	.word	0x58024400

08102294 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8102294:	b580      	push	{r7, lr}
 8102296:	b084      	sub	sp, #16
 8102298:	af00      	add	r7, sp, #0
 810229a:	6078      	str	r0, [r7, #4]
 810229c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810229e:	2300      	movs	r3, #0
 81022a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81022a2:	4b54      	ldr	r3, [pc, #336]	; (81023f4 <RCCEx_PLL2_Config+0x160>)
 81022a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81022a6:	f003 0303 	and.w	r3, r3, #3
 81022aa:	2b03      	cmp	r3, #3
 81022ac:	d101      	bne.n	81022b2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 81022ae:	2301      	movs	r3, #1
 81022b0:	e09b      	b.n	81023ea <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 81022b2:	4b50      	ldr	r3, [pc, #320]	; (81023f4 <RCCEx_PLL2_Config+0x160>)
 81022b4:	681b      	ldr	r3, [r3, #0]
 81022b6:	4a4f      	ldr	r2, [pc, #316]	; (81023f4 <RCCEx_PLL2_Config+0x160>)
 81022b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 81022bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81022be:	f7fe fb43 	bl	8100948 <HAL_GetTick>
 81022c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81022c4:	e008      	b.n	81022d8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 81022c6:	f7fe fb3f 	bl	8100948 <HAL_GetTick>
 81022ca:	4602      	mov	r2, r0
 81022cc:	68bb      	ldr	r3, [r7, #8]
 81022ce:	1ad3      	subs	r3, r2, r3
 81022d0:	2b02      	cmp	r3, #2
 81022d2:	d901      	bls.n	81022d8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 81022d4:	2303      	movs	r3, #3
 81022d6:	e088      	b.n	81023ea <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81022d8:	4b46      	ldr	r3, [pc, #280]	; (81023f4 <RCCEx_PLL2_Config+0x160>)
 81022da:	681b      	ldr	r3, [r3, #0]
 81022dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81022e0:	2b00      	cmp	r3, #0
 81022e2:	d1f0      	bne.n	81022c6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 81022e4:	4b43      	ldr	r3, [pc, #268]	; (81023f4 <RCCEx_PLL2_Config+0x160>)
 81022e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81022e8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 81022ec:	687b      	ldr	r3, [r7, #4]
 81022ee:	681b      	ldr	r3, [r3, #0]
 81022f0:	031b      	lsls	r3, r3, #12
 81022f2:	4940      	ldr	r1, [pc, #256]	; (81023f4 <RCCEx_PLL2_Config+0x160>)
 81022f4:	4313      	orrs	r3, r2
 81022f6:	628b      	str	r3, [r1, #40]	; 0x28
 81022f8:	687b      	ldr	r3, [r7, #4]
 81022fa:	685b      	ldr	r3, [r3, #4]
 81022fc:	3b01      	subs	r3, #1
 81022fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8102302:	687b      	ldr	r3, [r7, #4]
 8102304:	689b      	ldr	r3, [r3, #8]
 8102306:	3b01      	subs	r3, #1
 8102308:	025b      	lsls	r3, r3, #9
 810230a:	b29b      	uxth	r3, r3
 810230c:	431a      	orrs	r2, r3
 810230e:	687b      	ldr	r3, [r7, #4]
 8102310:	68db      	ldr	r3, [r3, #12]
 8102312:	3b01      	subs	r3, #1
 8102314:	041b      	lsls	r3, r3, #16
 8102316:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810231a:	431a      	orrs	r2, r3
 810231c:	687b      	ldr	r3, [r7, #4]
 810231e:	691b      	ldr	r3, [r3, #16]
 8102320:	3b01      	subs	r3, #1
 8102322:	061b      	lsls	r3, r3, #24
 8102324:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8102328:	4932      	ldr	r1, [pc, #200]	; (81023f4 <RCCEx_PLL2_Config+0x160>)
 810232a:	4313      	orrs	r3, r2
 810232c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810232e:	4b31      	ldr	r3, [pc, #196]	; (81023f4 <RCCEx_PLL2_Config+0x160>)
 8102330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102332:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8102336:	687b      	ldr	r3, [r7, #4]
 8102338:	695b      	ldr	r3, [r3, #20]
 810233a:	492e      	ldr	r1, [pc, #184]	; (81023f4 <RCCEx_PLL2_Config+0x160>)
 810233c:	4313      	orrs	r3, r2
 810233e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8102340:	4b2c      	ldr	r3, [pc, #176]	; (81023f4 <RCCEx_PLL2_Config+0x160>)
 8102342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102344:	f023 0220 	bic.w	r2, r3, #32
 8102348:	687b      	ldr	r3, [r7, #4]
 810234a:	699b      	ldr	r3, [r3, #24]
 810234c:	4929      	ldr	r1, [pc, #164]	; (81023f4 <RCCEx_PLL2_Config+0x160>)
 810234e:	4313      	orrs	r3, r2
 8102350:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8102352:	4b28      	ldr	r3, [pc, #160]	; (81023f4 <RCCEx_PLL2_Config+0x160>)
 8102354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102356:	4a27      	ldr	r2, [pc, #156]	; (81023f4 <RCCEx_PLL2_Config+0x160>)
 8102358:	f023 0310 	bic.w	r3, r3, #16
 810235c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810235e:	4b25      	ldr	r3, [pc, #148]	; (81023f4 <RCCEx_PLL2_Config+0x160>)
 8102360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102362:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8102366:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810236a:	687a      	ldr	r2, [r7, #4]
 810236c:	69d2      	ldr	r2, [r2, #28]
 810236e:	00d2      	lsls	r2, r2, #3
 8102370:	4920      	ldr	r1, [pc, #128]	; (81023f4 <RCCEx_PLL2_Config+0x160>)
 8102372:	4313      	orrs	r3, r2
 8102374:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8102376:	4b1f      	ldr	r3, [pc, #124]	; (81023f4 <RCCEx_PLL2_Config+0x160>)
 8102378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810237a:	4a1e      	ldr	r2, [pc, #120]	; (81023f4 <RCCEx_PLL2_Config+0x160>)
 810237c:	f043 0310 	orr.w	r3, r3, #16
 8102380:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8102382:	683b      	ldr	r3, [r7, #0]
 8102384:	2b00      	cmp	r3, #0
 8102386:	d106      	bne.n	8102396 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8102388:	4b1a      	ldr	r3, [pc, #104]	; (81023f4 <RCCEx_PLL2_Config+0x160>)
 810238a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810238c:	4a19      	ldr	r2, [pc, #100]	; (81023f4 <RCCEx_PLL2_Config+0x160>)
 810238e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8102392:	62d3      	str	r3, [r2, #44]	; 0x2c
 8102394:	e00f      	b.n	81023b6 <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8102396:	683b      	ldr	r3, [r7, #0]
 8102398:	2b01      	cmp	r3, #1
 810239a:	d106      	bne.n	81023aa <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 810239c:	4b15      	ldr	r3, [pc, #84]	; (81023f4 <RCCEx_PLL2_Config+0x160>)
 810239e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81023a0:	4a14      	ldr	r2, [pc, #80]	; (81023f4 <RCCEx_PLL2_Config+0x160>)
 81023a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81023a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 81023a8:	e005      	b.n	81023b6 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 81023aa:	4b12      	ldr	r3, [pc, #72]	; (81023f4 <RCCEx_PLL2_Config+0x160>)
 81023ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81023ae:	4a11      	ldr	r2, [pc, #68]	; (81023f4 <RCCEx_PLL2_Config+0x160>)
 81023b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81023b4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 81023b6:	4b0f      	ldr	r3, [pc, #60]	; (81023f4 <RCCEx_PLL2_Config+0x160>)
 81023b8:	681b      	ldr	r3, [r3, #0]
 81023ba:	4a0e      	ldr	r2, [pc, #56]	; (81023f4 <RCCEx_PLL2_Config+0x160>)
 81023bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 81023c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81023c2:	f7fe fac1 	bl	8100948 <HAL_GetTick>
 81023c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81023c8:	e008      	b.n	81023dc <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 81023ca:	f7fe fabd 	bl	8100948 <HAL_GetTick>
 81023ce:	4602      	mov	r2, r0
 81023d0:	68bb      	ldr	r3, [r7, #8]
 81023d2:	1ad3      	subs	r3, r2, r3
 81023d4:	2b02      	cmp	r3, #2
 81023d6:	d901      	bls.n	81023dc <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 81023d8:	2303      	movs	r3, #3
 81023da:	e006      	b.n	81023ea <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81023dc:	4b05      	ldr	r3, [pc, #20]	; (81023f4 <RCCEx_PLL2_Config+0x160>)
 81023de:	681b      	ldr	r3, [r3, #0]
 81023e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81023e4:	2b00      	cmp	r3, #0
 81023e6:	d0f0      	beq.n	81023ca <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 81023e8:	7bfb      	ldrb	r3, [r7, #15]
}
 81023ea:	4618      	mov	r0, r3
 81023ec:	3710      	adds	r7, #16
 81023ee:	46bd      	mov	sp, r7
 81023f0:	bd80      	pop	{r7, pc}
 81023f2:	bf00      	nop
 81023f4:	58024400 	.word	0x58024400

081023f8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 81023f8:	b580      	push	{r7, lr}
 81023fa:	b084      	sub	sp, #16
 81023fc:	af00      	add	r7, sp, #0
 81023fe:	6078      	str	r0, [r7, #4]
 8102400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8102402:	2300      	movs	r3, #0
 8102404:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8102406:	4b54      	ldr	r3, [pc, #336]	; (8102558 <RCCEx_PLL3_Config+0x160>)
 8102408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810240a:	f003 0303 	and.w	r3, r3, #3
 810240e:	2b03      	cmp	r3, #3
 8102410:	d101      	bne.n	8102416 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8102412:	2301      	movs	r3, #1
 8102414:	e09b      	b.n	810254e <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8102416:	4b50      	ldr	r3, [pc, #320]	; (8102558 <RCCEx_PLL3_Config+0x160>)
 8102418:	681b      	ldr	r3, [r3, #0]
 810241a:	4a4f      	ldr	r2, [pc, #316]	; (8102558 <RCCEx_PLL3_Config+0x160>)
 810241c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8102420:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102422:	f7fe fa91 	bl	8100948 <HAL_GetTick>
 8102426:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8102428:	e008      	b.n	810243c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 810242a:	f7fe fa8d 	bl	8100948 <HAL_GetTick>
 810242e:	4602      	mov	r2, r0
 8102430:	68bb      	ldr	r3, [r7, #8]
 8102432:	1ad3      	subs	r3, r2, r3
 8102434:	2b02      	cmp	r3, #2
 8102436:	d901      	bls.n	810243c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8102438:	2303      	movs	r3, #3
 810243a:	e088      	b.n	810254e <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810243c:	4b46      	ldr	r3, [pc, #280]	; (8102558 <RCCEx_PLL3_Config+0x160>)
 810243e:	681b      	ldr	r3, [r3, #0]
 8102440:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8102444:	2b00      	cmp	r3, #0
 8102446:	d1f0      	bne.n	810242a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8102448:	4b43      	ldr	r3, [pc, #268]	; (8102558 <RCCEx_PLL3_Config+0x160>)
 810244a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810244c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8102450:	687b      	ldr	r3, [r7, #4]
 8102452:	681b      	ldr	r3, [r3, #0]
 8102454:	051b      	lsls	r3, r3, #20
 8102456:	4940      	ldr	r1, [pc, #256]	; (8102558 <RCCEx_PLL3_Config+0x160>)
 8102458:	4313      	orrs	r3, r2
 810245a:	628b      	str	r3, [r1, #40]	; 0x28
 810245c:	687b      	ldr	r3, [r7, #4]
 810245e:	685b      	ldr	r3, [r3, #4]
 8102460:	3b01      	subs	r3, #1
 8102462:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8102466:	687b      	ldr	r3, [r7, #4]
 8102468:	689b      	ldr	r3, [r3, #8]
 810246a:	3b01      	subs	r3, #1
 810246c:	025b      	lsls	r3, r3, #9
 810246e:	b29b      	uxth	r3, r3
 8102470:	431a      	orrs	r2, r3
 8102472:	687b      	ldr	r3, [r7, #4]
 8102474:	68db      	ldr	r3, [r3, #12]
 8102476:	3b01      	subs	r3, #1
 8102478:	041b      	lsls	r3, r3, #16
 810247a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810247e:	431a      	orrs	r2, r3
 8102480:	687b      	ldr	r3, [r7, #4]
 8102482:	691b      	ldr	r3, [r3, #16]
 8102484:	3b01      	subs	r3, #1
 8102486:	061b      	lsls	r3, r3, #24
 8102488:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 810248c:	4932      	ldr	r1, [pc, #200]	; (8102558 <RCCEx_PLL3_Config+0x160>)
 810248e:	4313      	orrs	r3, r2
 8102490:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8102492:	4b31      	ldr	r3, [pc, #196]	; (8102558 <RCCEx_PLL3_Config+0x160>)
 8102494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102496:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 810249a:	687b      	ldr	r3, [r7, #4]
 810249c:	695b      	ldr	r3, [r3, #20]
 810249e:	492e      	ldr	r1, [pc, #184]	; (8102558 <RCCEx_PLL3_Config+0x160>)
 81024a0:	4313      	orrs	r3, r2
 81024a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 81024a4:	4b2c      	ldr	r3, [pc, #176]	; (8102558 <RCCEx_PLL3_Config+0x160>)
 81024a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81024a8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 81024ac:	687b      	ldr	r3, [r7, #4]
 81024ae:	699b      	ldr	r3, [r3, #24]
 81024b0:	4929      	ldr	r1, [pc, #164]	; (8102558 <RCCEx_PLL3_Config+0x160>)
 81024b2:	4313      	orrs	r3, r2
 81024b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 81024b6:	4b28      	ldr	r3, [pc, #160]	; (8102558 <RCCEx_PLL3_Config+0x160>)
 81024b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81024ba:	4a27      	ldr	r2, [pc, #156]	; (8102558 <RCCEx_PLL3_Config+0x160>)
 81024bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81024c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 81024c2:	4b25      	ldr	r3, [pc, #148]	; (8102558 <RCCEx_PLL3_Config+0x160>)
 81024c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81024c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81024ca:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 81024ce:	687a      	ldr	r2, [r7, #4]
 81024d0:	69d2      	ldr	r2, [r2, #28]
 81024d2:	00d2      	lsls	r2, r2, #3
 81024d4:	4920      	ldr	r1, [pc, #128]	; (8102558 <RCCEx_PLL3_Config+0x160>)
 81024d6:	4313      	orrs	r3, r2
 81024d8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 81024da:	4b1f      	ldr	r3, [pc, #124]	; (8102558 <RCCEx_PLL3_Config+0x160>)
 81024dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81024de:	4a1e      	ldr	r2, [pc, #120]	; (8102558 <RCCEx_PLL3_Config+0x160>)
 81024e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81024e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 81024e6:	683b      	ldr	r3, [r7, #0]
 81024e8:	2b00      	cmp	r3, #0
 81024ea:	d106      	bne.n	81024fa <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 81024ec:	4b1a      	ldr	r3, [pc, #104]	; (8102558 <RCCEx_PLL3_Config+0x160>)
 81024ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81024f0:	4a19      	ldr	r2, [pc, #100]	; (8102558 <RCCEx_PLL3_Config+0x160>)
 81024f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 81024f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 81024f8:	e00f      	b.n	810251a <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 81024fa:	683b      	ldr	r3, [r7, #0]
 81024fc:	2b01      	cmp	r3, #1
 81024fe:	d106      	bne.n	810250e <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8102500:	4b15      	ldr	r3, [pc, #84]	; (8102558 <RCCEx_PLL3_Config+0x160>)
 8102502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102504:	4a14      	ldr	r2, [pc, #80]	; (8102558 <RCCEx_PLL3_Config+0x160>)
 8102506:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 810250a:	62d3      	str	r3, [r2, #44]	; 0x2c
 810250c:	e005      	b.n	810251a <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810250e:	4b12      	ldr	r3, [pc, #72]	; (8102558 <RCCEx_PLL3_Config+0x160>)
 8102510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102512:	4a11      	ldr	r2, [pc, #68]	; (8102558 <RCCEx_PLL3_Config+0x160>)
 8102514:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8102518:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810251a:	4b0f      	ldr	r3, [pc, #60]	; (8102558 <RCCEx_PLL3_Config+0x160>)
 810251c:	681b      	ldr	r3, [r3, #0]
 810251e:	4a0e      	ldr	r2, [pc, #56]	; (8102558 <RCCEx_PLL3_Config+0x160>)
 8102520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8102524:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102526:	f7fe fa0f 	bl	8100948 <HAL_GetTick>
 810252a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810252c:	e008      	b.n	8102540 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 810252e:	f7fe fa0b 	bl	8100948 <HAL_GetTick>
 8102532:	4602      	mov	r2, r0
 8102534:	68bb      	ldr	r3, [r7, #8]
 8102536:	1ad3      	subs	r3, r2, r3
 8102538:	2b02      	cmp	r3, #2
 810253a:	d901      	bls.n	8102540 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 810253c:	2303      	movs	r3, #3
 810253e:	e006      	b.n	810254e <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8102540:	4b05      	ldr	r3, [pc, #20]	; (8102558 <RCCEx_PLL3_Config+0x160>)
 8102542:	681b      	ldr	r3, [r3, #0]
 8102544:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8102548:	2b00      	cmp	r3, #0
 810254a:	d0f0      	beq.n	810252e <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 810254c:	7bfb      	ldrb	r3, [r7, #15]
}
 810254e:	4618      	mov	r0, r3
 8102550:	3710      	adds	r7, #16
 8102552:	46bd      	mov	sp, r7
 8102554:	bd80      	pop	{r7, pc}
 8102556:	bf00      	nop
 8102558:	58024400 	.word	0x58024400

0810255c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 810255c:	b580      	push	{r7, lr}
 810255e:	b084      	sub	sp, #16
 8102560:	af00      	add	r7, sp, #0
 8102562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8102564:	2301      	movs	r3, #1
 8102566:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8102568:	687b      	ldr	r3, [r7, #4]
 810256a:	2b00      	cmp	r3, #0
 810256c:	d069      	beq.n	8102642 <HAL_RTC_Init+0xe6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 810256e:	687b      	ldr	r3, [r7, #4]
 8102570:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8102574:	b2db      	uxtb	r3, r3
 8102576:	2b00      	cmp	r3, #0
 8102578:	d106      	bne.n	8102588 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 810257a:	687b      	ldr	r3, [r7, #4]
 810257c:	2200      	movs	r2, #0
 810257e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8102582:	6878      	ldr	r0, [r7, #4]
 8102584:	f7fe f854 	bl	8100630 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8102588:	687b      	ldr	r3, [r7, #4]
 810258a:	2202      	movs	r2, #2
 810258c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8102590:	687b      	ldr	r3, [r7, #4]
 8102592:	681b      	ldr	r3, [r3, #0]
 8102594:	22ca      	movs	r2, #202	; 0xca
 8102596:	625a      	str	r2, [r3, #36]	; 0x24
 8102598:	687b      	ldr	r3, [r7, #4]
 810259a:	681b      	ldr	r3, [r3, #0]
 810259c:	2253      	movs	r2, #83	; 0x53
 810259e:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 81025a0:	6878      	ldr	r0, [r7, #4]
 81025a2:	f000 fa46 	bl	8102a32 <RTC_EnterInitMode>
 81025a6:	4603      	mov	r3, r0
 81025a8:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 81025aa:	7bfb      	ldrb	r3, [r7, #15]
 81025ac:	2b00      	cmp	r3, #0
 81025ae:	d13d      	bne.n	810262c <HAL_RTC_Init+0xd0>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 81025b0:	687b      	ldr	r3, [r7, #4]
 81025b2:	681b      	ldr	r3, [r3, #0]
 81025b4:	689b      	ldr	r3, [r3, #8]
 81025b6:	687a      	ldr	r2, [r7, #4]
 81025b8:	6812      	ldr	r2, [r2, #0]
 81025ba:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 81025be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 81025c2:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 81025c4:	687b      	ldr	r3, [r7, #4]
 81025c6:	681b      	ldr	r3, [r3, #0]
 81025c8:	6899      	ldr	r1, [r3, #8]
 81025ca:	687b      	ldr	r3, [r7, #4]
 81025cc:	685a      	ldr	r2, [r3, #4]
 81025ce:	687b      	ldr	r3, [r7, #4]
 81025d0:	691b      	ldr	r3, [r3, #16]
 81025d2:	431a      	orrs	r2, r3
 81025d4:	687b      	ldr	r3, [r7, #4]
 81025d6:	699b      	ldr	r3, [r3, #24]
 81025d8:	431a      	orrs	r2, r3
 81025da:	687b      	ldr	r3, [r7, #4]
 81025dc:	681b      	ldr	r3, [r3, #0]
 81025de:	430a      	orrs	r2, r1
 81025e0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 81025e2:	687b      	ldr	r3, [r7, #4]
 81025e4:	689b      	ldr	r3, [r3, #8]
 81025e6:	0419      	lsls	r1, r3, #16
 81025e8:	687b      	ldr	r3, [r7, #4]
 81025ea:	68da      	ldr	r2, [r3, #12]
 81025ec:	687b      	ldr	r3, [r7, #4]
 81025ee:	681b      	ldr	r3, [r3, #0]
 81025f0:	430a      	orrs	r2, r1
 81025f2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 81025f4:	6878      	ldr	r0, [r7, #4]
 81025f6:	f000 fa4f 	bl	8102a98 <RTC_ExitInitMode>
 81025fa:	4603      	mov	r3, r0
 81025fc:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 81025fe:	7bfb      	ldrb	r3, [r7, #15]
 8102600:	2b00      	cmp	r3, #0
 8102602:	d113      	bne.n	810262c <HAL_RTC_Init+0xd0>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8102604:	687b      	ldr	r3, [r7, #4]
 8102606:	681b      	ldr	r3, [r3, #0]
 8102608:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810260a:	687b      	ldr	r3, [r7, #4]
 810260c:	681b      	ldr	r3, [r3, #0]
 810260e:	f022 0203 	bic.w	r2, r2, #3
 8102612:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8102614:	687b      	ldr	r3, [r7, #4]
 8102616:	681b      	ldr	r3, [r3, #0]
 8102618:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 810261a:	687b      	ldr	r3, [r7, #4]
 810261c:	69da      	ldr	r2, [r3, #28]
 810261e:	687b      	ldr	r3, [r7, #4]
 8102620:	695b      	ldr	r3, [r3, #20]
 8102622:	431a      	orrs	r2, r3
 8102624:	687b      	ldr	r3, [r7, #4]
 8102626:	681b      	ldr	r3, [r3, #0]
 8102628:	430a      	orrs	r2, r1
 810262a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 810262c:	687b      	ldr	r3, [r7, #4]
 810262e:	681b      	ldr	r3, [r3, #0]
 8102630:	22ff      	movs	r2, #255	; 0xff
 8102632:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8102634:	7bfb      	ldrb	r3, [r7, #15]
 8102636:	2b00      	cmp	r3, #0
 8102638:	d103      	bne.n	8102642 <HAL_RTC_Init+0xe6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 810263a:	687b      	ldr	r3, [r7, #4]
 810263c:	2201      	movs	r2, #1
 810263e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8102642:	7bfb      	ldrb	r3, [r7, #15]
}
 8102644:	4618      	mov	r0, r3
 8102646:	3710      	adds	r7, #16
 8102648:	46bd      	mov	sp, r7
 810264a:	bd80      	pop	{r7, pc}

0810264c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 810264c:	b590      	push	{r4, r7, lr}
 810264e:	b087      	sub	sp, #28
 8102650:	af00      	add	r7, sp, #0
 8102652:	60f8      	str	r0, [r7, #12]
 8102654:	60b9      	str	r1, [r7, #8]
 8102656:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8102658:	68fb      	ldr	r3, [r7, #12]
 810265a:	f893 3020 	ldrb.w	r3, [r3, #32]
 810265e:	2b01      	cmp	r3, #1
 8102660:	d101      	bne.n	8102666 <HAL_RTC_SetTime+0x1a>
 8102662:	2302      	movs	r3, #2
 8102664:	e08b      	b.n	810277e <HAL_RTC_SetTime+0x132>
 8102666:	68fb      	ldr	r3, [r7, #12]
 8102668:	2201      	movs	r2, #1
 810266a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 810266e:	68fb      	ldr	r3, [r7, #12]
 8102670:	2202      	movs	r2, #2
 8102672:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8102676:	68fb      	ldr	r3, [r7, #12]
 8102678:	681b      	ldr	r3, [r3, #0]
 810267a:	22ca      	movs	r2, #202	; 0xca
 810267c:	625a      	str	r2, [r3, #36]	; 0x24
 810267e:	68fb      	ldr	r3, [r7, #12]
 8102680:	681b      	ldr	r3, [r3, #0]
 8102682:	2253      	movs	r2, #83	; 0x53
 8102684:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8102686:	68f8      	ldr	r0, [r7, #12]
 8102688:	f000 f9d3 	bl	8102a32 <RTC_EnterInitMode>
 810268c:	4603      	mov	r3, r0
 810268e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8102690:	7cfb      	ldrb	r3, [r7, #19]
 8102692:	2b00      	cmp	r3, #0
 8102694:	d163      	bne.n	810275e <HAL_RTC_SetTime+0x112>
  {
    if(Format == RTC_FORMAT_BIN)
 8102696:	687b      	ldr	r3, [r7, #4]
 8102698:	2b00      	cmp	r3, #0
 810269a:	d126      	bne.n	81026ea <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 810269c:	68fb      	ldr	r3, [r7, #12]
 810269e:	681b      	ldr	r3, [r3, #0]
 81026a0:	689b      	ldr	r3, [r3, #8]
 81026a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81026a6:	2b00      	cmp	r3, #0
 81026a8:	d102      	bne.n	81026b0 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 81026aa:	68bb      	ldr	r3, [r7, #8]
 81026ac:	2200      	movs	r2, #0
 81026ae:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 81026b0:	68bb      	ldr	r3, [r7, #8]
 81026b2:	781b      	ldrb	r3, [r3, #0]
 81026b4:	4618      	mov	r0, r3
 81026b6:	f000 fa2d 	bl	8102b14 <RTC_ByteToBcd2>
 81026ba:	4603      	mov	r3, r0
 81026bc:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 81026be:	68bb      	ldr	r3, [r7, #8]
 81026c0:	785b      	ldrb	r3, [r3, #1]
 81026c2:	4618      	mov	r0, r3
 81026c4:	f000 fa26 	bl	8102b14 <RTC_ByteToBcd2>
 81026c8:	4603      	mov	r3, r0
 81026ca:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 81026cc:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 81026ce:	68bb      	ldr	r3, [r7, #8]
 81026d0:	789b      	ldrb	r3, [r3, #2]
 81026d2:	4618      	mov	r0, r3
 81026d4:	f000 fa1e 	bl	8102b14 <RTC_ByteToBcd2>
 81026d8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 81026da:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 81026de:	68bb      	ldr	r3, [r7, #8]
 81026e0:	78db      	ldrb	r3, [r3, #3]
 81026e2:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 81026e4:	4313      	orrs	r3, r2
 81026e6:	617b      	str	r3, [r7, #20]
 81026e8:	e018      	b.n	810271c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 81026ea:	68fb      	ldr	r3, [r7, #12]
 81026ec:	681b      	ldr	r3, [r3, #0]
 81026ee:	689b      	ldr	r3, [r3, #8]
 81026f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81026f4:	2b00      	cmp	r3, #0
 81026f6:	d102      	bne.n	81026fe <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 81026f8:	68bb      	ldr	r3, [r7, #8]
 81026fa:	2200      	movs	r2, #0
 81026fc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 81026fe:	68bb      	ldr	r3, [r7, #8]
 8102700:	781b      	ldrb	r3, [r3, #0]
 8102702:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8102704:	68bb      	ldr	r3, [r7, #8]
 8102706:	785b      	ldrb	r3, [r3, #1]
 8102708:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 810270a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 810270c:	68ba      	ldr	r2, [r7, #8]
 810270e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8102710:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8102712:	68bb      	ldr	r3, [r7, #8]
 8102714:	78db      	ldrb	r3, [r3, #3]
 8102716:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8102718:	4313      	orrs	r3, r2
 810271a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 810271c:	68fb      	ldr	r3, [r7, #12]
 810271e:	681a      	ldr	r2, [r3, #0]
 8102720:	697b      	ldr	r3, [r7, #20]
 8102722:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8102726:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 810272a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 810272c:	68fb      	ldr	r3, [r7, #12]
 810272e:	681b      	ldr	r3, [r3, #0]
 8102730:	689a      	ldr	r2, [r3, #8]
 8102732:	68fb      	ldr	r3, [r7, #12]
 8102734:	681b      	ldr	r3, [r3, #0]
 8102736:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 810273a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 810273c:	68fb      	ldr	r3, [r7, #12]
 810273e:	681b      	ldr	r3, [r3, #0]
 8102740:	6899      	ldr	r1, [r3, #8]
 8102742:	68bb      	ldr	r3, [r7, #8]
 8102744:	68da      	ldr	r2, [r3, #12]
 8102746:	68bb      	ldr	r3, [r7, #8]
 8102748:	691b      	ldr	r3, [r3, #16]
 810274a:	431a      	orrs	r2, r3
 810274c:	68fb      	ldr	r3, [r7, #12]
 810274e:	681b      	ldr	r3, [r3, #0]
 8102750:	430a      	orrs	r2, r1
 8102752:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8102754:	68f8      	ldr	r0, [r7, #12]
 8102756:	f000 f99f 	bl	8102a98 <RTC_ExitInitMode>
 810275a:	4603      	mov	r3, r0
 810275c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 810275e:	68fb      	ldr	r3, [r7, #12]
 8102760:	681b      	ldr	r3, [r3, #0]
 8102762:	22ff      	movs	r2, #255	; 0xff
 8102764:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8102766:	7cfb      	ldrb	r3, [r7, #19]
 8102768:	2b00      	cmp	r3, #0
 810276a:	d103      	bne.n	8102774 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 810276c:	68fb      	ldr	r3, [r7, #12]
 810276e:	2201      	movs	r2, #1
 8102770:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8102774:	68fb      	ldr	r3, [r7, #12]
 8102776:	2200      	movs	r2, #0
 8102778:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 810277c:	7cfb      	ldrb	r3, [r7, #19]
}
 810277e:	4618      	mov	r0, r3
 8102780:	371c      	adds	r7, #28
 8102782:	46bd      	mov	sp, r7
 8102784:	bd90      	pop	{r4, r7, pc}

08102786 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8102786:	b580      	push	{r7, lr}
 8102788:	b086      	sub	sp, #24
 810278a:	af00      	add	r7, sp, #0
 810278c:	60f8      	str	r0, [r7, #12]
 810278e:	60b9      	str	r1, [r7, #8]
 8102790:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8102792:	68fb      	ldr	r3, [r7, #12]
 8102794:	681b      	ldr	r3, [r3, #0]
 8102796:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8102798:	68bb      	ldr	r3, [r7, #8]
 810279a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 810279c:	68fb      	ldr	r3, [r7, #12]
 810279e:	681b      	ldr	r3, [r3, #0]
 81027a0:	691b      	ldr	r3, [r3, #16]
 81027a2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 81027a6:	68bb      	ldr	r3, [r7, #8]
 81027a8:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 81027aa:	68fb      	ldr	r3, [r7, #12]
 81027ac:	681b      	ldr	r3, [r3, #0]
 81027ae:	681b      	ldr	r3, [r3, #0]
 81027b0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 81027b4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 81027b8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 81027ba:	697b      	ldr	r3, [r7, #20]
 81027bc:	0c1b      	lsrs	r3, r3, #16
 81027be:	b2db      	uxtb	r3, r3
 81027c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81027c4:	b2da      	uxtb	r2, r3
 81027c6:	68bb      	ldr	r3, [r7, #8]
 81027c8:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 81027ca:	697b      	ldr	r3, [r7, #20]
 81027cc:	0a1b      	lsrs	r3, r3, #8
 81027ce:	b2db      	uxtb	r3, r3
 81027d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81027d4:	b2da      	uxtb	r2, r3
 81027d6:	68bb      	ldr	r3, [r7, #8]
 81027d8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 81027da:	697b      	ldr	r3, [r7, #20]
 81027dc:	b2db      	uxtb	r3, r3
 81027de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81027e2:	b2da      	uxtb	r2, r3
 81027e4:	68bb      	ldr	r3, [r7, #8]
 81027e6:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 81027e8:	697b      	ldr	r3, [r7, #20]
 81027ea:	0d9b      	lsrs	r3, r3, #22
 81027ec:	b2db      	uxtb	r3, r3
 81027ee:	f003 0301 	and.w	r3, r3, #1
 81027f2:	b2da      	uxtb	r2, r3
 81027f4:	68bb      	ldr	r3, [r7, #8]
 81027f6:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 81027f8:	687b      	ldr	r3, [r7, #4]
 81027fa:	2b00      	cmp	r3, #0
 81027fc:	d11a      	bne.n	8102834 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 81027fe:	68bb      	ldr	r3, [r7, #8]
 8102800:	781b      	ldrb	r3, [r3, #0]
 8102802:	4618      	mov	r0, r3
 8102804:	f000 f9a6 	bl	8102b54 <RTC_Bcd2ToByte>
 8102808:	4603      	mov	r3, r0
 810280a:	461a      	mov	r2, r3
 810280c:	68bb      	ldr	r3, [r7, #8]
 810280e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8102810:	68bb      	ldr	r3, [r7, #8]
 8102812:	785b      	ldrb	r3, [r3, #1]
 8102814:	4618      	mov	r0, r3
 8102816:	f000 f99d 	bl	8102b54 <RTC_Bcd2ToByte>
 810281a:	4603      	mov	r3, r0
 810281c:	461a      	mov	r2, r3
 810281e:	68bb      	ldr	r3, [r7, #8]
 8102820:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8102822:	68bb      	ldr	r3, [r7, #8]
 8102824:	789b      	ldrb	r3, [r3, #2]
 8102826:	4618      	mov	r0, r3
 8102828:	f000 f994 	bl	8102b54 <RTC_Bcd2ToByte>
 810282c:	4603      	mov	r3, r0
 810282e:	461a      	mov	r2, r3
 8102830:	68bb      	ldr	r3, [r7, #8]
 8102832:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8102834:	2300      	movs	r3, #0
}
 8102836:	4618      	mov	r0, r3
 8102838:	3718      	adds	r7, #24
 810283a:	46bd      	mov	sp, r7
 810283c:	bd80      	pop	{r7, pc}

0810283e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 810283e:	b590      	push	{r4, r7, lr}
 8102840:	b087      	sub	sp, #28
 8102842:	af00      	add	r7, sp, #0
 8102844:	60f8      	str	r0, [r7, #12]
 8102846:	60b9      	str	r1, [r7, #8]
 8102848:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 810284a:	68fb      	ldr	r3, [r7, #12]
 810284c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8102850:	2b01      	cmp	r3, #1
 8102852:	d101      	bne.n	8102858 <HAL_RTC_SetDate+0x1a>
 8102854:	2302      	movs	r3, #2
 8102856:	e075      	b.n	8102944 <HAL_RTC_SetDate+0x106>
 8102858:	68fb      	ldr	r3, [r7, #12]
 810285a:	2201      	movs	r2, #1
 810285c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8102860:	68fb      	ldr	r3, [r7, #12]
 8102862:	2202      	movs	r2, #2
 8102864:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8102868:	687b      	ldr	r3, [r7, #4]
 810286a:	2b00      	cmp	r3, #0
 810286c:	d10e      	bne.n	810288c <HAL_RTC_SetDate+0x4e>
 810286e:	68bb      	ldr	r3, [r7, #8]
 8102870:	785b      	ldrb	r3, [r3, #1]
 8102872:	f003 0310 	and.w	r3, r3, #16
 8102876:	2b00      	cmp	r3, #0
 8102878:	d008      	beq.n	810288c <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 810287a:	68bb      	ldr	r3, [r7, #8]
 810287c:	785b      	ldrb	r3, [r3, #1]
 810287e:	f023 0310 	bic.w	r3, r3, #16
 8102882:	b2db      	uxtb	r3, r3
 8102884:	330a      	adds	r3, #10
 8102886:	b2da      	uxtb	r2, r3
 8102888:	68bb      	ldr	r3, [r7, #8]
 810288a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 810288c:	687b      	ldr	r3, [r7, #4]
 810288e:	2b00      	cmp	r3, #0
 8102890:	d11c      	bne.n	81028cc <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8102892:	68bb      	ldr	r3, [r7, #8]
 8102894:	78db      	ldrb	r3, [r3, #3]
 8102896:	4618      	mov	r0, r3
 8102898:	f000 f93c 	bl	8102b14 <RTC_ByteToBcd2>
 810289c:	4603      	mov	r3, r0
 810289e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 81028a0:	68bb      	ldr	r3, [r7, #8]
 81028a2:	785b      	ldrb	r3, [r3, #1]
 81028a4:	4618      	mov	r0, r3
 81028a6:	f000 f935 	bl	8102b14 <RTC_ByteToBcd2>
 81028aa:	4603      	mov	r3, r0
 81028ac:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 81028ae:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 81028b0:	68bb      	ldr	r3, [r7, #8]
 81028b2:	789b      	ldrb	r3, [r3, #2]
 81028b4:	4618      	mov	r0, r3
 81028b6:	f000 f92d 	bl	8102b14 <RTC_ByteToBcd2>
 81028ba:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 81028bc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 81028c0:	68bb      	ldr	r3, [r7, #8]
 81028c2:	781b      	ldrb	r3, [r3, #0]
 81028c4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 81028c6:	4313      	orrs	r3, r2
 81028c8:	617b      	str	r3, [r7, #20]
 81028ca:	e00e      	b.n	81028ea <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 81028cc:	68bb      	ldr	r3, [r7, #8]
 81028ce:	78db      	ldrb	r3, [r3, #3]
 81028d0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 81028d2:	68bb      	ldr	r3, [r7, #8]
 81028d4:	785b      	ldrb	r3, [r3, #1]
 81028d6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 81028d8:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 81028da:	68ba      	ldr	r2, [r7, #8]
 81028dc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 81028de:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 81028e0:	68bb      	ldr	r3, [r7, #8]
 81028e2:	781b      	ldrb	r3, [r3, #0]
 81028e4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 81028e6:	4313      	orrs	r3, r2
 81028e8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 81028ea:	68fb      	ldr	r3, [r7, #12]
 81028ec:	681b      	ldr	r3, [r3, #0]
 81028ee:	22ca      	movs	r2, #202	; 0xca
 81028f0:	625a      	str	r2, [r3, #36]	; 0x24
 81028f2:	68fb      	ldr	r3, [r7, #12]
 81028f4:	681b      	ldr	r3, [r3, #0]
 81028f6:	2253      	movs	r2, #83	; 0x53
 81028f8:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 81028fa:	68f8      	ldr	r0, [r7, #12]
 81028fc:	f000 f899 	bl	8102a32 <RTC_EnterInitMode>
 8102900:	4603      	mov	r3, r0
 8102902:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8102904:	7cfb      	ldrb	r3, [r7, #19]
 8102906:	2b00      	cmp	r3, #0
 8102908:	d10c      	bne.n	8102924 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 810290a:	68fb      	ldr	r3, [r7, #12]
 810290c:	681a      	ldr	r2, [r3, #0]
 810290e:	697b      	ldr	r3, [r7, #20]
 8102910:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8102914:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8102918:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 810291a:	68f8      	ldr	r0, [r7, #12]
 810291c:	f000 f8bc 	bl	8102a98 <RTC_ExitInitMode>
 8102920:	4603      	mov	r3, r0
 8102922:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8102924:	68fb      	ldr	r3, [r7, #12]
 8102926:	681b      	ldr	r3, [r3, #0]
 8102928:	22ff      	movs	r2, #255	; 0xff
 810292a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 810292c:	7cfb      	ldrb	r3, [r7, #19]
 810292e:	2b00      	cmp	r3, #0
 8102930:	d103      	bne.n	810293a <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8102932:	68fb      	ldr	r3, [r7, #12]
 8102934:	2201      	movs	r2, #1
 8102936:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 810293a:	68fb      	ldr	r3, [r7, #12]
 810293c:	2200      	movs	r2, #0
 810293e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8102942:	7cfb      	ldrb	r3, [r7, #19]


}
 8102944:	4618      	mov	r0, r3
 8102946:	371c      	adds	r7, #28
 8102948:	46bd      	mov	sp, r7
 810294a:	bd90      	pop	{r4, r7, pc}

0810294c <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 810294c:	b580      	push	{r7, lr}
 810294e:	b086      	sub	sp, #24
 8102950:	af00      	add	r7, sp, #0
 8102952:	60f8      	str	r0, [r7, #12]
 8102954:	60b9      	str	r1, [r7, #8]
 8102956:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8102958:	68fb      	ldr	r3, [r7, #12]
 810295a:	681b      	ldr	r3, [r3, #0]
 810295c:	685b      	ldr	r3, [r3, #4]
 810295e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8102962:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8102966:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8102968:	697b      	ldr	r3, [r7, #20]
 810296a:	0c1b      	lsrs	r3, r3, #16
 810296c:	b2da      	uxtb	r2, r3
 810296e:	68bb      	ldr	r3, [r7, #8]
 8102970:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8102972:	697b      	ldr	r3, [r7, #20]
 8102974:	0a1b      	lsrs	r3, r3, #8
 8102976:	b2db      	uxtb	r3, r3
 8102978:	f003 031f 	and.w	r3, r3, #31
 810297c:	b2da      	uxtb	r2, r3
 810297e:	68bb      	ldr	r3, [r7, #8]
 8102980:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8102982:	697b      	ldr	r3, [r7, #20]
 8102984:	b2db      	uxtb	r3, r3
 8102986:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810298a:	b2da      	uxtb	r2, r3
 810298c:	68bb      	ldr	r3, [r7, #8]
 810298e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8102990:	697b      	ldr	r3, [r7, #20]
 8102992:	0b5b      	lsrs	r3, r3, #13
 8102994:	b2db      	uxtb	r3, r3
 8102996:	f003 0307 	and.w	r3, r3, #7
 810299a:	b2da      	uxtb	r2, r3
 810299c:	68bb      	ldr	r3, [r7, #8]
 810299e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 81029a0:	687b      	ldr	r3, [r7, #4]
 81029a2:	2b00      	cmp	r3, #0
 81029a4:	d11a      	bne.n	81029dc <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 81029a6:	68bb      	ldr	r3, [r7, #8]
 81029a8:	78db      	ldrb	r3, [r3, #3]
 81029aa:	4618      	mov	r0, r3
 81029ac:	f000 f8d2 	bl	8102b54 <RTC_Bcd2ToByte>
 81029b0:	4603      	mov	r3, r0
 81029b2:	461a      	mov	r2, r3
 81029b4:	68bb      	ldr	r3, [r7, #8]
 81029b6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 81029b8:	68bb      	ldr	r3, [r7, #8]
 81029ba:	785b      	ldrb	r3, [r3, #1]
 81029bc:	4618      	mov	r0, r3
 81029be:	f000 f8c9 	bl	8102b54 <RTC_Bcd2ToByte>
 81029c2:	4603      	mov	r3, r0
 81029c4:	461a      	mov	r2, r3
 81029c6:	68bb      	ldr	r3, [r7, #8]
 81029c8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 81029ca:	68bb      	ldr	r3, [r7, #8]
 81029cc:	789b      	ldrb	r3, [r3, #2]
 81029ce:	4618      	mov	r0, r3
 81029d0:	f000 f8c0 	bl	8102b54 <RTC_Bcd2ToByte>
 81029d4:	4603      	mov	r3, r0
 81029d6:	461a      	mov	r2, r3
 81029d8:	68bb      	ldr	r3, [r7, #8]
 81029da:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 81029dc:	2300      	movs	r3, #0
}
 81029de:	4618      	mov	r0, r3
 81029e0:	3718      	adds	r7, #24
 81029e2:	46bd      	mov	sp, r7
 81029e4:	bd80      	pop	{r7, pc}

081029e6 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 81029e6:	b580      	push	{r7, lr}
 81029e8:	b084      	sub	sp, #16
 81029ea:	af00      	add	r7, sp, #0
 81029ec:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 81029ee:	687b      	ldr	r3, [r7, #4]
 81029f0:	681b      	ldr	r3, [r3, #0]
 81029f2:	68da      	ldr	r2, [r3, #12]
 81029f4:	687b      	ldr	r3, [r7, #4]
 81029f6:	681b      	ldr	r3, [r3, #0]
 81029f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 81029fc:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 81029fe:	f7fd ffa3 	bl	8100948 <HAL_GetTick>
 8102a02:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8102a04:	e009      	b.n	8102a1a <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8102a06:	f7fd ff9f 	bl	8100948 <HAL_GetTick>
 8102a0a:	4602      	mov	r2, r0
 8102a0c:	68fb      	ldr	r3, [r7, #12]
 8102a0e:	1ad3      	subs	r3, r2, r3
 8102a10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8102a14:	d901      	bls.n	8102a1a <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8102a16:	2303      	movs	r3, #3
 8102a18:	e007      	b.n	8102a2a <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8102a1a:	687b      	ldr	r3, [r7, #4]
 8102a1c:	681b      	ldr	r3, [r3, #0]
 8102a1e:	68db      	ldr	r3, [r3, #12]
 8102a20:	f003 0320 	and.w	r3, r3, #32
 8102a24:	2b00      	cmp	r3, #0
 8102a26:	d0ee      	beq.n	8102a06 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8102a28:	2300      	movs	r3, #0
}
 8102a2a:	4618      	mov	r0, r3
 8102a2c:	3710      	adds	r7, #16
 8102a2e:	46bd      	mov	sp, r7
 8102a30:	bd80      	pop	{r7, pc}

08102a32 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8102a32:	b580      	push	{r7, lr}
 8102a34:	b084      	sub	sp, #16
 8102a36:	af00      	add	r7, sp, #0
 8102a38:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8102a3a:	2300      	movs	r3, #0
 8102a3c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8102a3e:	687b      	ldr	r3, [r7, #4]
 8102a40:	681b      	ldr	r3, [r3, #0]
 8102a42:	68db      	ldr	r3, [r3, #12]
 8102a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8102a48:	2b00      	cmp	r3, #0
 8102a4a:	d120      	bne.n	8102a8e <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8102a4c:	687b      	ldr	r3, [r7, #4]
 8102a4e:	681b      	ldr	r3, [r3, #0]
 8102a50:	f04f 32ff 	mov.w	r2, #4294967295
 8102a54:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8102a56:	f7fd ff77 	bl	8100948 <HAL_GetTick>
 8102a5a:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8102a5c:	e00d      	b.n	8102a7a <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8102a5e:	f7fd ff73 	bl	8100948 <HAL_GetTick>
 8102a62:	4602      	mov	r2, r0
 8102a64:	68bb      	ldr	r3, [r7, #8]
 8102a66:	1ad3      	subs	r3, r2, r3
 8102a68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8102a6c:	d905      	bls.n	8102a7a <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8102a6e:	2303      	movs	r3, #3
 8102a70:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8102a72:	687b      	ldr	r3, [r7, #4]
 8102a74:	2203      	movs	r2, #3
 8102a76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8102a7a:	687b      	ldr	r3, [r7, #4]
 8102a7c:	681b      	ldr	r3, [r3, #0]
 8102a7e:	68db      	ldr	r3, [r3, #12]
 8102a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8102a84:	2b00      	cmp	r3, #0
 8102a86:	d102      	bne.n	8102a8e <RTC_EnterInitMode+0x5c>
 8102a88:	7bfb      	ldrb	r3, [r7, #15]
 8102a8a:	2b03      	cmp	r3, #3
 8102a8c:	d1e7      	bne.n	8102a5e <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 8102a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8102a90:	4618      	mov	r0, r3
 8102a92:	3710      	adds	r7, #16
 8102a94:	46bd      	mov	sp, r7
 8102a96:	bd80      	pop	{r7, pc}

08102a98 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8102a98:	b580      	push	{r7, lr}
 8102a9a:	b084      	sub	sp, #16
 8102a9c:	af00      	add	r7, sp, #0
 8102a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8102aa0:	2300      	movs	r3, #0
 8102aa2:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8102aa4:	4b1a      	ldr	r3, [pc, #104]	; (8102b10 <RTC_ExitInitMode+0x78>)
 8102aa6:	68db      	ldr	r3, [r3, #12]
 8102aa8:	4a19      	ldr	r2, [pc, #100]	; (8102b10 <RTC_ExitInitMode+0x78>)
 8102aaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8102aae:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8102ab0:	4b17      	ldr	r3, [pc, #92]	; (8102b10 <RTC_ExitInitMode+0x78>)
 8102ab2:	689b      	ldr	r3, [r3, #8]
 8102ab4:	f003 0320 	and.w	r3, r3, #32
 8102ab8:	2b00      	cmp	r3, #0
 8102aba:	d10c      	bne.n	8102ad6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8102abc:	6878      	ldr	r0, [r7, #4]
 8102abe:	f7ff ff92 	bl	81029e6 <HAL_RTC_WaitForSynchro>
 8102ac2:	4603      	mov	r3, r0
 8102ac4:	2b00      	cmp	r3, #0
 8102ac6:	d01e      	beq.n	8102b06 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8102ac8:	687b      	ldr	r3, [r7, #4]
 8102aca:	2203      	movs	r2, #3
 8102acc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8102ad0:	2303      	movs	r3, #3
 8102ad2:	73fb      	strb	r3, [r7, #15]
 8102ad4:	e017      	b.n	8102b06 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8102ad6:	4b0e      	ldr	r3, [pc, #56]	; (8102b10 <RTC_ExitInitMode+0x78>)
 8102ad8:	689b      	ldr	r3, [r3, #8]
 8102ada:	4a0d      	ldr	r2, [pc, #52]	; (8102b10 <RTC_ExitInitMode+0x78>)
 8102adc:	f023 0320 	bic.w	r3, r3, #32
 8102ae0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8102ae2:	6878      	ldr	r0, [r7, #4]
 8102ae4:	f7ff ff7f 	bl	81029e6 <HAL_RTC_WaitForSynchro>
 8102ae8:	4603      	mov	r3, r0
 8102aea:	2b00      	cmp	r3, #0
 8102aec:	d005      	beq.n	8102afa <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8102aee:	687b      	ldr	r3, [r7, #4]
 8102af0:	2203      	movs	r2, #3
 8102af2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8102af6:	2303      	movs	r3, #3
 8102af8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8102afa:	4b05      	ldr	r3, [pc, #20]	; (8102b10 <RTC_ExitInitMode+0x78>)
 8102afc:	689b      	ldr	r3, [r3, #8]
 8102afe:	4a04      	ldr	r2, [pc, #16]	; (8102b10 <RTC_ExitInitMode+0x78>)
 8102b00:	f043 0320 	orr.w	r3, r3, #32
 8102b04:	6093      	str	r3, [r2, #8]
  }

  return status;
 8102b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8102b08:	4618      	mov	r0, r3
 8102b0a:	3710      	adds	r7, #16
 8102b0c:	46bd      	mov	sp, r7
 8102b0e:	bd80      	pop	{r7, pc}
 8102b10:	58004000 	.word	0x58004000

08102b14 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8102b14:	b480      	push	{r7}
 8102b16:	b085      	sub	sp, #20
 8102b18:	af00      	add	r7, sp, #0
 8102b1a:	4603      	mov	r3, r0
 8102b1c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8102b1e:	2300      	movs	r3, #0
 8102b20:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8102b22:	79fb      	ldrb	r3, [r7, #7]
 8102b24:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8102b26:	e005      	b.n	8102b34 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8102b28:	68fb      	ldr	r3, [r7, #12]
 8102b2a:	3301      	adds	r3, #1
 8102b2c:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8102b2e:	7afb      	ldrb	r3, [r7, #11]
 8102b30:	3b0a      	subs	r3, #10
 8102b32:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8102b34:	7afb      	ldrb	r3, [r7, #11]
 8102b36:	2b09      	cmp	r3, #9
 8102b38:	d8f6      	bhi.n	8102b28 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8102b3a:	68fb      	ldr	r3, [r7, #12]
 8102b3c:	b2db      	uxtb	r3, r3
 8102b3e:	011b      	lsls	r3, r3, #4
 8102b40:	b2da      	uxtb	r2, r3
 8102b42:	7afb      	ldrb	r3, [r7, #11]
 8102b44:	4313      	orrs	r3, r2
 8102b46:	b2db      	uxtb	r3, r3
}
 8102b48:	4618      	mov	r0, r3
 8102b4a:	3714      	adds	r7, #20
 8102b4c:	46bd      	mov	sp, r7
 8102b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b52:	4770      	bx	lr

08102b54 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8102b54:	b480      	push	{r7}
 8102b56:	b085      	sub	sp, #20
 8102b58:	af00      	add	r7, sp, #0
 8102b5a:	4603      	mov	r3, r0
 8102b5c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8102b5e:	79fb      	ldrb	r3, [r7, #7]
 8102b60:	091b      	lsrs	r3, r3, #4
 8102b62:	b2db      	uxtb	r3, r3
 8102b64:	461a      	mov	r2, r3
 8102b66:	0092      	lsls	r2, r2, #2
 8102b68:	4413      	add	r3, r2
 8102b6a:	005b      	lsls	r3, r3, #1
 8102b6c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8102b6e:	79fb      	ldrb	r3, [r7, #7]
 8102b70:	f003 030f 	and.w	r3, r3, #15
 8102b74:	b2da      	uxtb	r2, r3
 8102b76:	7bfb      	ldrb	r3, [r7, #15]
 8102b78:	4413      	add	r3, r2
 8102b7a:	b2db      	uxtb	r3, r3
}
 8102b7c:	4618      	mov	r0, r3
 8102b7e:	3714      	adds	r7, #20
 8102b80:	46bd      	mov	sp, r7
 8102b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b86:	4770      	bx	lr

08102b88 <HAL_RTCEx_SetRefClock>:
  * @brief  Enable the RTC reference clock detection.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetRefClock(RTC_HandleTypeDef * hrtc)
{
 8102b88:	b580      	push	{r7, lr}
 8102b8a:	b084      	sub	sp, #16
 8102b8c:	af00      	add	r7, sp, #0
 8102b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8102b90:	687b      	ldr	r3, [r7, #4]
 8102b92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8102b96:	2b01      	cmp	r3, #1
 8102b98:	d101      	bne.n	8102b9e <HAL_RTCEx_SetRefClock+0x16>
 8102b9a:	2302      	movs	r3, #2
 8102b9c:	e034      	b.n	8102c08 <HAL_RTCEx_SetRefClock+0x80>
 8102b9e:	687b      	ldr	r3, [r7, #4]
 8102ba0:	2201      	movs	r2, #1
 8102ba2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8102ba6:	687b      	ldr	r3, [r7, #4]
 8102ba8:	2202      	movs	r2, #2
 8102baa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8102bae:	687b      	ldr	r3, [r7, #4]
 8102bb0:	681b      	ldr	r3, [r3, #0]
 8102bb2:	22ca      	movs	r2, #202	; 0xca
 8102bb4:	625a      	str	r2, [r3, #36]	; 0x24
 8102bb6:	687b      	ldr	r3, [r7, #4]
 8102bb8:	681b      	ldr	r3, [r3, #0]
 8102bba:	2253      	movs	r2, #83	; 0x53
 8102bbc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8102bbe:	6878      	ldr	r0, [r7, #4]
 8102bc0:	f7ff ff37 	bl	8102a32 <RTC_EnterInitMode>
 8102bc4:	4603      	mov	r3, r0
 8102bc6:	73fb      	strb	r3, [r7, #15]
  if (status == HAL_OK)
 8102bc8:	7bfb      	ldrb	r3, [r7, #15]
 8102bca:	2b00      	cmp	r3, #0
 8102bcc:	d10c      	bne.n	8102be8 <HAL_RTCEx_SetRefClock+0x60>
  {
    __HAL_RTC_CLOCKREF_DETECTION_ENABLE(hrtc);
 8102bce:	687b      	ldr	r3, [r7, #4]
 8102bd0:	681b      	ldr	r3, [r3, #0]
 8102bd2:	689a      	ldr	r2, [r3, #8]
 8102bd4:	687b      	ldr	r3, [r7, #4]
 8102bd6:	681b      	ldr	r3, [r3, #0]
 8102bd8:	f042 0210 	orr.w	r2, r2, #16
 8102bdc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8102bde:	6878      	ldr	r0, [r7, #4]
 8102be0:	f7ff ff5a 	bl	8102a98 <RTC_ExitInitMode>
 8102be4:	4603      	mov	r3, r0
 8102be6:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8102be8:	687b      	ldr	r3, [r7, #4]
 8102bea:	681b      	ldr	r3, [r3, #0]
 8102bec:	22ff      	movs	r2, #255	; 0xff
 8102bee:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 8102bf0:	7bfb      	ldrb	r3, [r7, #15]
 8102bf2:	2b00      	cmp	r3, #0
 8102bf4:	d103      	bne.n	8102bfe <HAL_RTCEx_SetRefClock+0x76>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8102bf6:	687b      	ldr	r3, [r7, #4]
 8102bf8:	2201      	movs	r2, #1
 8102bfa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8102bfe:	687b      	ldr	r3, [r7, #4]
 8102c00:	2200      	movs	r2, #0
 8102c02:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8102c06:	2300      	movs	r3, #0
}
 8102c08:	4618      	mov	r0, r3
 8102c0a:	3710      	adds	r7, #16
 8102c0c:	46bd      	mov	sp, r7
 8102c0e:	bd80      	pop	{r7, pc}

08102c10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8102c10:	b580      	push	{r7, lr}
 8102c12:	b082      	sub	sp, #8
 8102c14:	af00      	add	r7, sp, #0
 8102c16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8102c18:	687b      	ldr	r3, [r7, #4]
 8102c1a:	2b00      	cmp	r3, #0
 8102c1c:	d101      	bne.n	8102c22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8102c1e:	2301      	movs	r3, #1
 8102c20:	e049      	b.n	8102cb6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8102c22:	687b      	ldr	r3, [r7, #4]
 8102c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8102c28:	b2db      	uxtb	r3, r3
 8102c2a:	2b00      	cmp	r3, #0
 8102c2c:	d106      	bne.n	8102c3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8102c2e:	687b      	ldr	r3, [r7, #4]
 8102c30:	2200      	movs	r2, #0
 8102c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8102c36:	6878      	ldr	r0, [r7, #4]
 8102c38:	f7fd fd58 	bl	81006ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8102c3c:	687b      	ldr	r3, [r7, #4]
 8102c3e:	2202      	movs	r2, #2
 8102c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8102c44:	687b      	ldr	r3, [r7, #4]
 8102c46:	681a      	ldr	r2, [r3, #0]
 8102c48:	687b      	ldr	r3, [r7, #4]
 8102c4a:	3304      	adds	r3, #4
 8102c4c:	4619      	mov	r1, r3
 8102c4e:	4610      	mov	r0, r2
 8102c50:	f000 f9ee 	bl	8103030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8102c54:	687b      	ldr	r3, [r7, #4]
 8102c56:	2201      	movs	r2, #1
 8102c58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8102c5c:	687b      	ldr	r3, [r7, #4]
 8102c5e:	2201      	movs	r2, #1
 8102c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8102c64:	687b      	ldr	r3, [r7, #4]
 8102c66:	2201      	movs	r2, #1
 8102c68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8102c6c:	687b      	ldr	r3, [r7, #4]
 8102c6e:	2201      	movs	r2, #1
 8102c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8102c74:	687b      	ldr	r3, [r7, #4]
 8102c76:	2201      	movs	r2, #1
 8102c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8102c7c:	687b      	ldr	r3, [r7, #4]
 8102c7e:	2201      	movs	r2, #1
 8102c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8102c84:	687b      	ldr	r3, [r7, #4]
 8102c86:	2201      	movs	r2, #1
 8102c88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8102c8c:	687b      	ldr	r3, [r7, #4]
 8102c8e:	2201      	movs	r2, #1
 8102c90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8102c94:	687b      	ldr	r3, [r7, #4]
 8102c96:	2201      	movs	r2, #1
 8102c98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8102c9c:	687b      	ldr	r3, [r7, #4]
 8102c9e:	2201      	movs	r2, #1
 8102ca0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8102ca4:	687b      	ldr	r3, [r7, #4]
 8102ca6:	2201      	movs	r2, #1
 8102ca8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8102cac:	687b      	ldr	r3, [r7, #4]
 8102cae:	2201      	movs	r2, #1
 8102cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8102cb4:	2300      	movs	r3, #0
}
 8102cb6:	4618      	mov	r0, r3
 8102cb8:	3708      	adds	r7, #8
 8102cba:	46bd      	mov	sp, r7
 8102cbc:	bd80      	pop	{r7, pc}
	...

08102cc0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8102cc0:	b480      	push	{r7}
 8102cc2:	b085      	sub	sp, #20
 8102cc4:	af00      	add	r7, sp, #0
 8102cc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8102cc8:	687b      	ldr	r3, [r7, #4]
 8102cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8102cce:	b2db      	uxtb	r3, r3
 8102cd0:	2b01      	cmp	r3, #1
 8102cd2:	d001      	beq.n	8102cd8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8102cd4:	2301      	movs	r3, #1
 8102cd6:	e04c      	b.n	8102d72 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8102cd8:	687b      	ldr	r3, [r7, #4]
 8102cda:	2202      	movs	r2, #2
 8102cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8102ce0:	687b      	ldr	r3, [r7, #4]
 8102ce2:	681b      	ldr	r3, [r3, #0]
 8102ce4:	4a26      	ldr	r2, [pc, #152]	; (8102d80 <HAL_TIM_Base_Start+0xc0>)
 8102ce6:	4293      	cmp	r3, r2
 8102ce8:	d022      	beq.n	8102d30 <HAL_TIM_Base_Start+0x70>
 8102cea:	687b      	ldr	r3, [r7, #4]
 8102cec:	681b      	ldr	r3, [r3, #0]
 8102cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102cf2:	d01d      	beq.n	8102d30 <HAL_TIM_Base_Start+0x70>
 8102cf4:	687b      	ldr	r3, [r7, #4]
 8102cf6:	681b      	ldr	r3, [r3, #0]
 8102cf8:	4a22      	ldr	r2, [pc, #136]	; (8102d84 <HAL_TIM_Base_Start+0xc4>)
 8102cfa:	4293      	cmp	r3, r2
 8102cfc:	d018      	beq.n	8102d30 <HAL_TIM_Base_Start+0x70>
 8102cfe:	687b      	ldr	r3, [r7, #4]
 8102d00:	681b      	ldr	r3, [r3, #0]
 8102d02:	4a21      	ldr	r2, [pc, #132]	; (8102d88 <HAL_TIM_Base_Start+0xc8>)
 8102d04:	4293      	cmp	r3, r2
 8102d06:	d013      	beq.n	8102d30 <HAL_TIM_Base_Start+0x70>
 8102d08:	687b      	ldr	r3, [r7, #4]
 8102d0a:	681b      	ldr	r3, [r3, #0]
 8102d0c:	4a1f      	ldr	r2, [pc, #124]	; (8102d8c <HAL_TIM_Base_Start+0xcc>)
 8102d0e:	4293      	cmp	r3, r2
 8102d10:	d00e      	beq.n	8102d30 <HAL_TIM_Base_Start+0x70>
 8102d12:	687b      	ldr	r3, [r7, #4]
 8102d14:	681b      	ldr	r3, [r3, #0]
 8102d16:	4a1e      	ldr	r2, [pc, #120]	; (8102d90 <HAL_TIM_Base_Start+0xd0>)
 8102d18:	4293      	cmp	r3, r2
 8102d1a:	d009      	beq.n	8102d30 <HAL_TIM_Base_Start+0x70>
 8102d1c:	687b      	ldr	r3, [r7, #4]
 8102d1e:	681b      	ldr	r3, [r3, #0]
 8102d20:	4a1c      	ldr	r2, [pc, #112]	; (8102d94 <HAL_TIM_Base_Start+0xd4>)
 8102d22:	4293      	cmp	r3, r2
 8102d24:	d004      	beq.n	8102d30 <HAL_TIM_Base_Start+0x70>
 8102d26:	687b      	ldr	r3, [r7, #4]
 8102d28:	681b      	ldr	r3, [r3, #0]
 8102d2a:	4a1b      	ldr	r2, [pc, #108]	; (8102d98 <HAL_TIM_Base_Start+0xd8>)
 8102d2c:	4293      	cmp	r3, r2
 8102d2e:	d115      	bne.n	8102d5c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8102d30:	687b      	ldr	r3, [r7, #4]
 8102d32:	681b      	ldr	r3, [r3, #0]
 8102d34:	689a      	ldr	r2, [r3, #8]
 8102d36:	4b19      	ldr	r3, [pc, #100]	; (8102d9c <HAL_TIM_Base_Start+0xdc>)
 8102d38:	4013      	ands	r3, r2
 8102d3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8102d3c:	68fb      	ldr	r3, [r7, #12]
 8102d3e:	2b06      	cmp	r3, #6
 8102d40:	d015      	beq.n	8102d6e <HAL_TIM_Base_Start+0xae>
 8102d42:	68fb      	ldr	r3, [r7, #12]
 8102d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8102d48:	d011      	beq.n	8102d6e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8102d4a:	687b      	ldr	r3, [r7, #4]
 8102d4c:	681b      	ldr	r3, [r3, #0]
 8102d4e:	681a      	ldr	r2, [r3, #0]
 8102d50:	687b      	ldr	r3, [r7, #4]
 8102d52:	681b      	ldr	r3, [r3, #0]
 8102d54:	f042 0201 	orr.w	r2, r2, #1
 8102d58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8102d5a:	e008      	b.n	8102d6e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8102d5c:	687b      	ldr	r3, [r7, #4]
 8102d5e:	681b      	ldr	r3, [r3, #0]
 8102d60:	681a      	ldr	r2, [r3, #0]
 8102d62:	687b      	ldr	r3, [r7, #4]
 8102d64:	681b      	ldr	r3, [r3, #0]
 8102d66:	f042 0201 	orr.w	r2, r2, #1
 8102d6a:	601a      	str	r2, [r3, #0]
 8102d6c:	e000      	b.n	8102d70 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8102d6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8102d70:	2300      	movs	r3, #0
}
 8102d72:	4618      	mov	r0, r3
 8102d74:	3714      	adds	r7, #20
 8102d76:	46bd      	mov	sp, r7
 8102d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d7c:	4770      	bx	lr
 8102d7e:	bf00      	nop
 8102d80:	40010000 	.word	0x40010000
 8102d84:	40000400 	.word	0x40000400
 8102d88:	40000800 	.word	0x40000800
 8102d8c:	40000c00 	.word	0x40000c00
 8102d90:	40010400 	.word	0x40010400
 8102d94:	40001800 	.word	0x40001800
 8102d98:	40014000 	.word	0x40014000
 8102d9c:	00010007 	.word	0x00010007

08102da0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8102da0:	b580      	push	{r7, lr}
 8102da2:	b082      	sub	sp, #8
 8102da4:	af00      	add	r7, sp, #0
 8102da6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8102da8:	687b      	ldr	r3, [r7, #4]
 8102daa:	681b      	ldr	r3, [r3, #0]
 8102dac:	691b      	ldr	r3, [r3, #16]
 8102dae:	f003 0302 	and.w	r3, r3, #2
 8102db2:	2b02      	cmp	r3, #2
 8102db4:	d122      	bne.n	8102dfc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8102db6:	687b      	ldr	r3, [r7, #4]
 8102db8:	681b      	ldr	r3, [r3, #0]
 8102dba:	68db      	ldr	r3, [r3, #12]
 8102dbc:	f003 0302 	and.w	r3, r3, #2
 8102dc0:	2b02      	cmp	r3, #2
 8102dc2:	d11b      	bne.n	8102dfc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8102dc4:	687b      	ldr	r3, [r7, #4]
 8102dc6:	681b      	ldr	r3, [r3, #0]
 8102dc8:	f06f 0202 	mvn.w	r2, #2
 8102dcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8102dce:	687b      	ldr	r3, [r7, #4]
 8102dd0:	2201      	movs	r2, #1
 8102dd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8102dd4:	687b      	ldr	r3, [r7, #4]
 8102dd6:	681b      	ldr	r3, [r3, #0]
 8102dd8:	699b      	ldr	r3, [r3, #24]
 8102dda:	f003 0303 	and.w	r3, r3, #3
 8102dde:	2b00      	cmp	r3, #0
 8102de0:	d003      	beq.n	8102dea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8102de2:	6878      	ldr	r0, [r7, #4]
 8102de4:	f000 f905 	bl	8102ff2 <HAL_TIM_IC_CaptureCallback>
 8102de8:	e005      	b.n	8102df6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8102dea:	6878      	ldr	r0, [r7, #4]
 8102dec:	f000 f8f7 	bl	8102fde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8102df0:	6878      	ldr	r0, [r7, #4]
 8102df2:	f000 f908 	bl	8103006 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8102df6:	687b      	ldr	r3, [r7, #4]
 8102df8:	2200      	movs	r2, #0
 8102dfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8102dfc:	687b      	ldr	r3, [r7, #4]
 8102dfe:	681b      	ldr	r3, [r3, #0]
 8102e00:	691b      	ldr	r3, [r3, #16]
 8102e02:	f003 0304 	and.w	r3, r3, #4
 8102e06:	2b04      	cmp	r3, #4
 8102e08:	d122      	bne.n	8102e50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8102e0a:	687b      	ldr	r3, [r7, #4]
 8102e0c:	681b      	ldr	r3, [r3, #0]
 8102e0e:	68db      	ldr	r3, [r3, #12]
 8102e10:	f003 0304 	and.w	r3, r3, #4
 8102e14:	2b04      	cmp	r3, #4
 8102e16:	d11b      	bne.n	8102e50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8102e18:	687b      	ldr	r3, [r7, #4]
 8102e1a:	681b      	ldr	r3, [r3, #0]
 8102e1c:	f06f 0204 	mvn.w	r2, #4
 8102e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8102e22:	687b      	ldr	r3, [r7, #4]
 8102e24:	2202      	movs	r2, #2
 8102e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8102e28:	687b      	ldr	r3, [r7, #4]
 8102e2a:	681b      	ldr	r3, [r3, #0]
 8102e2c:	699b      	ldr	r3, [r3, #24]
 8102e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8102e32:	2b00      	cmp	r3, #0
 8102e34:	d003      	beq.n	8102e3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8102e36:	6878      	ldr	r0, [r7, #4]
 8102e38:	f000 f8db 	bl	8102ff2 <HAL_TIM_IC_CaptureCallback>
 8102e3c:	e005      	b.n	8102e4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8102e3e:	6878      	ldr	r0, [r7, #4]
 8102e40:	f000 f8cd 	bl	8102fde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8102e44:	6878      	ldr	r0, [r7, #4]
 8102e46:	f000 f8de 	bl	8103006 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8102e4a:	687b      	ldr	r3, [r7, #4]
 8102e4c:	2200      	movs	r2, #0
 8102e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8102e50:	687b      	ldr	r3, [r7, #4]
 8102e52:	681b      	ldr	r3, [r3, #0]
 8102e54:	691b      	ldr	r3, [r3, #16]
 8102e56:	f003 0308 	and.w	r3, r3, #8
 8102e5a:	2b08      	cmp	r3, #8
 8102e5c:	d122      	bne.n	8102ea4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8102e5e:	687b      	ldr	r3, [r7, #4]
 8102e60:	681b      	ldr	r3, [r3, #0]
 8102e62:	68db      	ldr	r3, [r3, #12]
 8102e64:	f003 0308 	and.w	r3, r3, #8
 8102e68:	2b08      	cmp	r3, #8
 8102e6a:	d11b      	bne.n	8102ea4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8102e6c:	687b      	ldr	r3, [r7, #4]
 8102e6e:	681b      	ldr	r3, [r3, #0]
 8102e70:	f06f 0208 	mvn.w	r2, #8
 8102e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8102e76:	687b      	ldr	r3, [r7, #4]
 8102e78:	2204      	movs	r2, #4
 8102e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8102e7c:	687b      	ldr	r3, [r7, #4]
 8102e7e:	681b      	ldr	r3, [r3, #0]
 8102e80:	69db      	ldr	r3, [r3, #28]
 8102e82:	f003 0303 	and.w	r3, r3, #3
 8102e86:	2b00      	cmp	r3, #0
 8102e88:	d003      	beq.n	8102e92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8102e8a:	6878      	ldr	r0, [r7, #4]
 8102e8c:	f000 f8b1 	bl	8102ff2 <HAL_TIM_IC_CaptureCallback>
 8102e90:	e005      	b.n	8102e9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8102e92:	6878      	ldr	r0, [r7, #4]
 8102e94:	f000 f8a3 	bl	8102fde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8102e98:	6878      	ldr	r0, [r7, #4]
 8102e9a:	f000 f8b4 	bl	8103006 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8102e9e:	687b      	ldr	r3, [r7, #4]
 8102ea0:	2200      	movs	r2, #0
 8102ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8102ea4:	687b      	ldr	r3, [r7, #4]
 8102ea6:	681b      	ldr	r3, [r3, #0]
 8102ea8:	691b      	ldr	r3, [r3, #16]
 8102eaa:	f003 0310 	and.w	r3, r3, #16
 8102eae:	2b10      	cmp	r3, #16
 8102eb0:	d122      	bne.n	8102ef8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8102eb2:	687b      	ldr	r3, [r7, #4]
 8102eb4:	681b      	ldr	r3, [r3, #0]
 8102eb6:	68db      	ldr	r3, [r3, #12]
 8102eb8:	f003 0310 	and.w	r3, r3, #16
 8102ebc:	2b10      	cmp	r3, #16
 8102ebe:	d11b      	bne.n	8102ef8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8102ec0:	687b      	ldr	r3, [r7, #4]
 8102ec2:	681b      	ldr	r3, [r3, #0]
 8102ec4:	f06f 0210 	mvn.w	r2, #16
 8102ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8102eca:	687b      	ldr	r3, [r7, #4]
 8102ecc:	2208      	movs	r2, #8
 8102ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8102ed0:	687b      	ldr	r3, [r7, #4]
 8102ed2:	681b      	ldr	r3, [r3, #0]
 8102ed4:	69db      	ldr	r3, [r3, #28]
 8102ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8102eda:	2b00      	cmp	r3, #0
 8102edc:	d003      	beq.n	8102ee6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8102ede:	6878      	ldr	r0, [r7, #4]
 8102ee0:	f000 f887 	bl	8102ff2 <HAL_TIM_IC_CaptureCallback>
 8102ee4:	e005      	b.n	8102ef2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8102ee6:	6878      	ldr	r0, [r7, #4]
 8102ee8:	f000 f879 	bl	8102fde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8102eec:	6878      	ldr	r0, [r7, #4]
 8102eee:	f000 f88a 	bl	8103006 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8102ef2:	687b      	ldr	r3, [r7, #4]
 8102ef4:	2200      	movs	r2, #0
 8102ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8102ef8:	687b      	ldr	r3, [r7, #4]
 8102efa:	681b      	ldr	r3, [r3, #0]
 8102efc:	691b      	ldr	r3, [r3, #16]
 8102efe:	f003 0301 	and.w	r3, r3, #1
 8102f02:	2b01      	cmp	r3, #1
 8102f04:	d10e      	bne.n	8102f24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8102f06:	687b      	ldr	r3, [r7, #4]
 8102f08:	681b      	ldr	r3, [r3, #0]
 8102f0a:	68db      	ldr	r3, [r3, #12]
 8102f0c:	f003 0301 	and.w	r3, r3, #1
 8102f10:	2b01      	cmp	r3, #1
 8102f12:	d107      	bne.n	8102f24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8102f14:	687b      	ldr	r3, [r7, #4]
 8102f16:	681b      	ldr	r3, [r3, #0]
 8102f18:	f06f 0201 	mvn.w	r2, #1
 8102f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8102f1e:	6878      	ldr	r0, [r7, #4]
 8102f20:	f7fd fb4a 	bl	81005b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8102f24:	687b      	ldr	r3, [r7, #4]
 8102f26:	681b      	ldr	r3, [r3, #0]
 8102f28:	691b      	ldr	r3, [r3, #16]
 8102f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8102f2e:	2b80      	cmp	r3, #128	; 0x80
 8102f30:	d10e      	bne.n	8102f50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8102f32:	687b      	ldr	r3, [r7, #4]
 8102f34:	681b      	ldr	r3, [r3, #0]
 8102f36:	68db      	ldr	r3, [r3, #12]
 8102f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8102f3c:	2b80      	cmp	r3, #128	; 0x80
 8102f3e:	d107      	bne.n	8102f50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8102f40:	687b      	ldr	r3, [r7, #4]
 8102f42:	681b      	ldr	r3, [r3, #0]
 8102f44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8102f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8102f4a:	6878      	ldr	r0, [r7, #4]
 8102f4c:	f000 f914 	bl	8103178 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8102f50:	687b      	ldr	r3, [r7, #4]
 8102f52:	681b      	ldr	r3, [r3, #0]
 8102f54:	691b      	ldr	r3, [r3, #16]
 8102f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102f5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102f5e:	d10e      	bne.n	8102f7e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8102f60:	687b      	ldr	r3, [r7, #4]
 8102f62:	681b      	ldr	r3, [r3, #0]
 8102f64:	68db      	ldr	r3, [r3, #12]
 8102f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8102f6a:	2b80      	cmp	r3, #128	; 0x80
 8102f6c:	d107      	bne.n	8102f7e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8102f6e:	687b      	ldr	r3, [r7, #4]
 8102f70:	681b      	ldr	r3, [r3, #0]
 8102f72:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8102f76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8102f78:	6878      	ldr	r0, [r7, #4]
 8102f7a:	f000 f907 	bl	810318c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8102f7e:	687b      	ldr	r3, [r7, #4]
 8102f80:	681b      	ldr	r3, [r3, #0]
 8102f82:	691b      	ldr	r3, [r3, #16]
 8102f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8102f88:	2b40      	cmp	r3, #64	; 0x40
 8102f8a:	d10e      	bne.n	8102faa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8102f8c:	687b      	ldr	r3, [r7, #4]
 8102f8e:	681b      	ldr	r3, [r3, #0]
 8102f90:	68db      	ldr	r3, [r3, #12]
 8102f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8102f96:	2b40      	cmp	r3, #64	; 0x40
 8102f98:	d107      	bne.n	8102faa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8102f9a:	687b      	ldr	r3, [r7, #4]
 8102f9c:	681b      	ldr	r3, [r3, #0]
 8102f9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8102fa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8102fa4:	6878      	ldr	r0, [r7, #4]
 8102fa6:	f000 f838 	bl	810301a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8102faa:	687b      	ldr	r3, [r7, #4]
 8102fac:	681b      	ldr	r3, [r3, #0]
 8102fae:	691b      	ldr	r3, [r3, #16]
 8102fb0:	f003 0320 	and.w	r3, r3, #32
 8102fb4:	2b20      	cmp	r3, #32
 8102fb6:	d10e      	bne.n	8102fd6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8102fb8:	687b      	ldr	r3, [r7, #4]
 8102fba:	681b      	ldr	r3, [r3, #0]
 8102fbc:	68db      	ldr	r3, [r3, #12]
 8102fbe:	f003 0320 	and.w	r3, r3, #32
 8102fc2:	2b20      	cmp	r3, #32
 8102fc4:	d107      	bne.n	8102fd6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8102fc6:	687b      	ldr	r3, [r7, #4]
 8102fc8:	681b      	ldr	r3, [r3, #0]
 8102fca:	f06f 0220 	mvn.w	r2, #32
 8102fce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8102fd0:	6878      	ldr	r0, [r7, #4]
 8102fd2:	f000 f8c7 	bl	8103164 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8102fd6:	bf00      	nop
 8102fd8:	3708      	adds	r7, #8
 8102fda:	46bd      	mov	sp, r7
 8102fdc:	bd80      	pop	{r7, pc}

08102fde <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8102fde:	b480      	push	{r7}
 8102fe0:	b083      	sub	sp, #12
 8102fe2:	af00      	add	r7, sp, #0
 8102fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8102fe6:	bf00      	nop
 8102fe8:	370c      	adds	r7, #12
 8102fea:	46bd      	mov	sp, r7
 8102fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ff0:	4770      	bx	lr

08102ff2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8102ff2:	b480      	push	{r7}
 8102ff4:	b083      	sub	sp, #12
 8102ff6:	af00      	add	r7, sp, #0
 8102ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8102ffa:	bf00      	nop
 8102ffc:	370c      	adds	r7, #12
 8102ffe:	46bd      	mov	sp, r7
 8103000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103004:	4770      	bx	lr

08103006 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8103006:	b480      	push	{r7}
 8103008:	b083      	sub	sp, #12
 810300a:	af00      	add	r7, sp, #0
 810300c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 810300e:	bf00      	nop
 8103010:	370c      	adds	r7, #12
 8103012:	46bd      	mov	sp, r7
 8103014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103018:	4770      	bx	lr

0810301a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 810301a:	b480      	push	{r7}
 810301c:	b083      	sub	sp, #12
 810301e:	af00      	add	r7, sp, #0
 8103020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8103022:	bf00      	nop
 8103024:	370c      	adds	r7, #12
 8103026:	46bd      	mov	sp, r7
 8103028:	f85d 7b04 	ldr.w	r7, [sp], #4
 810302c:	4770      	bx	lr
	...

08103030 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8103030:	b480      	push	{r7}
 8103032:	b085      	sub	sp, #20
 8103034:	af00      	add	r7, sp, #0
 8103036:	6078      	str	r0, [r7, #4]
 8103038:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 810303a:	687b      	ldr	r3, [r7, #4]
 810303c:	681b      	ldr	r3, [r3, #0]
 810303e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8103040:	687b      	ldr	r3, [r7, #4]
 8103042:	4a40      	ldr	r2, [pc, #256]	; (8103144 <TIM_Base_SetConfig+0x114>)
 8103044:	4293      	cmp	r3, r2
 8103046:	d013      	beq.n	8103070 <TIM_Base_SetConfig+0x40>
 8103048:	687b      	ldr	r3, [r7, #4]
 810304a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810304e:	d00f      	beq.n	8103070 <TIM_Base_SetConfig+0x40>
 8103050:	687b      	ldr	r3, [r7, #4]
 8103052:	4a3d      	ldr	r2, [pc, #244]	; (8103148 <TIM_Base_SetConfig+0x118>)
 8103054:	4293      	cmp	r3, r2
 8103056:	d00b      	beq.n	8103070 <TIM_Base_SetConfig+0x40>
 8103058:	687b      	ldr	r3, [r7, #4]
 810305a:	4a3c      	ldr	r2, [pc, #240]	; (810314c <TIM_Base_SetConfig+0x11c>)
 810305c:	4293      	cmp	r3, r2
 810305e:	d007      	beq.n	8103070 <TIM_Base_SetConfig+0x40>
 8103060:	687b      	ldr	r3, [r7, #4]
 8103062:	4a3b      	ldr	r2, [pc, #236]	; (8103150 <TIM_Base_SetConfig+0x120>)
 8103064:	4293      	cmp	r3, r2
 8103066:	d003      	beq.n	8103070 <TIM_Base_SetConfig+0x40>
 8103068:	687b      	ldr	r3, [r7, #4]
 810306a:	4a3a      	ldr	r2, [pc, #232]	; (8103154 <TIM_Base_SetConfig+0x124>)
 810306c:	4293      	cmp	r3, r2
 810306e:	d108      	bne.n	8103082 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8103070:	68fb      	ldr	r3, [r7, #12]
 8103072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8103076:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8103078:	683b      	ldr	r3, [r7, #0]
 810307a:	685b      	ldr	r3, [r3, #4]
 810307c:	68fa      	ldr	r2, [r7, #12]
 810307e:	4313      	orrs	r3, r2
 8103080:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8103082:	687b      	ldr	r3, [r7, #4]
 8103084:	4a2f      	ldr	r2, [pc, #188]	; (8103144 <TIM_Base_SetConfig+0x114>)
 8103086:	4293      	cmp	r3, r2
 8103088:	d01f      	beq.n	81030ca <TIM_Base_SetConfig+0x9a>
 810308a:	687b      	ldr	r3, [r7, #4]
 810308c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103090:	d01b      	beq.n	81030ca <TIM_Base_SetConfig+0x9a>
 8103092:	687b      	ldr	r3, [r7, #4]
 8103094:	4a2c      	ldr	r2, [pc, #176]	; (8103148 <TIM_Base_SetConfig+0x118>)
 8103096:	4293      	cmp	r3, r2
 8103098:	d017      	beq.n	81030ca <TIM_Base_SetConfig+0x9a>
 810309a:	687b      	ldr	r3, [r7, #4]
 810309c:	4a2b      	ldr	r2, [pc, #172]	; (810314c <TIM_Base_SetConfig+0x11c>)
 810309e:	4293      	cmp	r3, r2
 81030a0:	d013      	beq.n	81030ca <TIM_Base_SetConfig+0x9a>
 81030a2:	687b      	ldr	r3, [r7, #4]
 81030a4:	4a2a      	ldr	r2, [pc, #168]	; (8103150 <TIM_Base_SetConfig+0x120>)
 81030a6:	4293      	cmp	r3, r2
 81030a8:	d00f      	beq.n	81030ca <TIM_Base_SetConfig+0x9a>
 81030aa:	687b      	ldr	r3, [r7, #4]
 81030ac:	4a29      	ldr	r2, [pc, #164]	; (8103154 <TIM_Base_SetConfig+0x124>)
 81030ae:	4293      	cmp	r3, r2
 81030b0:	d00b      	beq.n	81030ca <TIM_Base_SetConfig+0x9a>
 81030b2:	687b      	ldr	r3, [r7, #4]
 81030b4:	4a28      	ldr	r2, [pc, #160]	; (8103158 <TIM_Base_SetConfig+0x128>)
 81030b6:	4293      	cmp	r3, r2
 81030b8:	d007      	beq.n	81030ca <TIM_Base_SetConfig+0x9a>
 81030ba:	687b      	ldr	r3, [r7, #4]
 81030bc:	4a27      	ldr	r2, [pc, #156]	; (810315c <TIM_Base_SetConfig+0x12c>)
 81030be:	4293      	cmp	r3, r2
 81030c0:	d003      	beq.n	81030ca <TIM_Base_SetConfig+0x9a>
 81030c2:	687b      	ldr	r3, [r7, #4]
 81030c4:	4a26      	ldr	r2, [pc, #152]	; (8103160 <TIM_Base_SetConfig+0x130>)
 81030c6:	4293      	cmp	r3, r2
 81030c8:	d108      	bne.n	81030dc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 81030ca:	68fb      	ldr	r3, [r7, #12]
 81030cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81030d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 81030d2:	683b      	ldr	r3, [r7, #0]
 81030d4:	68db      	ldr	r3, [r3, #12]
 81030d6:	68fa      	ldr	r2, [r7, #12]
 81030d8:	4313      	orrs	r3, r2
 81030da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 81030dc:	68fb      	ldr	r3, [r7, #12]
 81030de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 81030e2:	683b      	ldr	r3, [r7, #0]
 81030e4:	695b      	ldr	r3, [r3, #20]
 81030e6:	4313      	orrs	r3, r2
 81030e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 81030ea:	687b      	ldr	r3, [r7, #4]
 81030ec:	68fa      	ldr	r2, [r7, #12]
 81030ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 81030f0:	683b      	ldr	r3, [r7, #0]
 81030f2:	689a      	ldr	r2, [r3, #8]
 81030f4:	687b      	ldr	r3, [r7, #4]
 81030f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 81030f8:	683b      	ldr	r3, [r7, #0]
 81030fa:	681a      	ldr	r2, [r3, #0]
 81030fc:	687b      	ldr	r3, [r7, #4]
 81030fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8103100:	687b      	ldr	r3, [r7, #4]
 8103102:	4a10      	ldr	r2, [pc, #64]	; (8103144 <TIM_Base_SetConfig+0x114>)
 8103104:	4293      	cmp	r3, r2
 8103106:	d00f      	beq.n	8103128 <TIM_Base_SetConfig+0xf8>
 8103108:	687b      	ldr	r3, [r7, #4]
 810310a:	4a12      	ldr	r2, [pc, #72]	; (8103154 <TIM_Base_SetConfig+0x124>)
 810310c:	4293      	cmp	r3, r2
 810310e:	d00b      	beq.n	8103128 <TIM_Base_SetConfig+0xf8>
 8103110:	687b      	ldr	r3, [r7, #4]
 8103112:	4a11      	ldr	r2, [pc, #68]	; (8103158 <TIM_Base_SetConfig+0x128>)
 8103114:	4293      	cmp	r3, r2
 8103116:	d007      	beq.n	8103128 <TIM_Base_SetConfig+0xf8>
 8103118:	687b      	ldr	r3, [r7, #4]
 810311a:	4a10      	ldr	r2, [pc, #64]	; (810315c <TIM_Base_SetConfig+0x12c>)
 810311c:	4293      	cmp	r3, r2
 810311e:	d003      	beq.n	8103128 <TIM_Base_SetConfig+0xf8>
 8103120:	687b      	ldr	r3, [r7, #4]
 8103122:	4a0f      	ldr	r2, [pc, #60]	; (8103160 <TIM_Base_SetConfig+0x130>)
 8103124:	4293      	cmp	r3, r2
 8103126:	d103      	bne.n	8103130 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8103128:	683b      	ldr	r3, [r7, #0]
 810312a:	691a      	ldr	r2, [r3, #16]
 810312c:	687b      	ldr	r3, [r7, #4]
 810312e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8103130:	687b      	ldr	r3, [r7, #4]
 8103132:	2201      	movs	r2, #1
 8103134:	615a      	str	r2, [r3, #20]
}
 8103136:	bf00      	nop
 8103138:	3714      	adds	r7, #20
 810313a:	46bd      	mov	sp, r7
 810313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103140:	4770      	bx	lr
 8103142:	bf00      	nop
 8103144:	40010000 	.word	0x40010000
 8103148:	40000400 	.word	0x40000400
 810314c:	40000800 	.word	0x40000800
 8103150:	40000c00 	.word	0x40000c00
 8103154:	40010400 	.word	0x40010400
 8103158:	40014000 	.word	0x40014000
 810315c:	40014400 	.word	0x40014400
 8103160:	40014800 	.word	0x40014800

08103164 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8103164:	b480      	push	{r7}
 8103166:	b083      	sub	sp, #12
 8103168:	af00      	add	r7, sp, #0
 810316a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 810316c:	bf00      	nop
 810316e:	370c      	adds	r7, #12
 8103170:	46bd      	mov	sp, r7
 8103172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103176:	4770      	bx	lr

08103178 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8103178:	b480      	push	{r7}
 810317a:	b083      	sub	sp, #12
 810317c:	af00      	add	r7, sp, #0
 810317e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8103180:	bf00      	nop
 8103182:	370c      	adds	r7, #12
 8103184:	46bd      	mov	sp, r7
 8103186:	f85d 7b04 	ldr.w	r7, [sp], #4
 810318a:	4770      	bx	lr

0810318c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 810318c:	b480      	push	{r7}
 810318e:	b083      	sub	sp, #12
 8103190:	af00      	add	r7, sp, #0
 8103192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8103194:	bf00      	nop
 8103196:	370c      	adds	r7, #12
 8103198:	46bd      	mov	sp, r7
 810319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810319e:	4770      	bx	lr

081031a0 <__libc_init_array>:
 81031a0:	b570      	push	{r4, r5, r6, lr}
 81031a2:	4d0d      	ldr	r5, [pc, #52]	; (81031d8 <__libc_init_array+0x38>)
 81031a4:	4c0d      	ldr	r4, [pc, #52]	; (81031dc <__libc_init_array+0x3c>)
 81031a6:	1b64      	subs	r4, r4, r5
 81031a8:	10a4      	asrs	r4, r4, #2
 81031aa:	2600      	movs	r6, #0
 81031ac:	42a6      	cmp	r6, r4
 81031ae:	d109      	bne.n	81031c4 <__libc_init_array+0x24>
 81031b0:	4d0b      	ldr	r5, [pc, #44]	; (81031e0 <__libc_init_array+0x40>)
 81031b2:	4c0c      	ldr	r4, [pc, #48]	; (81031e4 <__libc_init_array+0x44>)
 81031b4:	f000 f820 	bl	81031f8 <_init>
 81031b8:	1b64      	subs	r4, r4, r5
 81031ba:	10a4      	asrs	r4, r4, #2
 81031bc:	2600      	movs	r6, #0
 81031be:	42a6      	cmp	r6, r4
 81031c0:	d105      	bne.n	81031ce <__libc_init_array+0x2e>
 81031c2:	bd70      	pop	{r4, r5, r6, pc}
 81031c4:	f855 3b04 	ldr.w	r3, [r5], #4
 81031c8:	4798      	blx	r3
 81031ca:	3601      	adds	r6, #1
 81031cc:	e7ee      	b.n	81031ac <__libc_init_array+0xc>
 81031ce:	f855 3b04 	ldr.w	r3, [r5], #4
 81031d2:	4798      	blx	r3
 81031d4:	3601      	adds	r6, #1
 81031d6:	e7f2      	b.n	81031be <__libc_init_array+0x1e>
 81031d8:	08103220 	.word	0x08103220
 81031dc:	08103220 	.word	0x08103220
 81031e0:	08103220 	.word	0x08103220
 81031e4:	08103224 	.word	0x08103224

081031e8 <memset>:
 81031e8:	4402      	add	r2, r0
 81031ea:	4603      	mov	r3, r0
 81031ec:	4293      	cmp	r3, r2
 81031ee:	d100      	bne.n	81031f2 <memset+0xa>
 81031f0:	4770      	bx	lr
 81031f2:	f803 1b01 	strb.w	r1, [r3], #1
 81031f6:	e7f9      	b.n	81031ec <memset+0x4>

081031f8 <_init>:
 81031f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81031fa:	bf00      	nop
 81031fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81031fe:	bc08      	pop	{r3}
 8103200:	469e      	mov	lr, r3
 8103202:	4770      	bx	lr

08103204 <_fini>:
 8103204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8103206:	bf00      	nop
 8103208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810320a:	bc08      	pop	{r3}
 810320c:	469e      	mov	lr, r3
 810320e:	4770      	bx	lr
