
H745_STAMPR_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f88  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08106228  08106228  00016228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  081062c0  081062c0  000162c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  081062c4  081062c4  000162c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000009c  10000000  081062c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000238  100000a0  08106364  000200a0  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  100002d8  08106364  000202d8  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001bd9c  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002f38  00000000  00000000  0003be68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001598  00000000  00000000  0003eda0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001440  00000000  00000000  00040338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003dc79  00000000  00000000  00041778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001b03f  00000000  00000000  0007f3f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00196e56  00000000  00000000  0009a430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00231286  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005fac  00000000  00000000  002312d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	100000a0 	.word	0x100000a0
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08106210 	.word	0x08106210

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	100000a4 	.word	0x100000a4
 81002dc:	08106210 	.word	0x08106210

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100380:	b480      	push	{r7}
 8100382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100384:	4b09      	ldr	r3, [pc, #36]	; (81003ac <SystemInit+0x2c>)
 8100386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810038a:	4a08      	ldr	r2, [pc, #32]	; (81003ac <SystemInit+0x2c>)
 810038c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100394:	4b05      	ldr	r3, [pc, #20]	; (81003ac <SystemInit+0x2c>)
 8100396:	691b      	ldr	r3, [r3, #16]
 8100398:	4a04      	ldr	r2, [pc, #16]	; (81003ac <SystemInit+0x2c>)
 810039a:	f043 0310 	orr.w	r3, r3, #16
 810039e:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81003a0:	bf00      	nop
 81003a2:	46bd      	mov	sp, r7
 81003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81003a8:	4770      	bx	lr
 81003aa:	bf00      	nop
 81003ac:	e000ed00 	.word	0xe000ed00

081003b0 <DS3231_Read>:

#ifdef ExRTC_IS_DS3231

DS3231_RG_Strc ERTC_lg;

void DS3231_Read(I2C_HandleTypeDef *hi2c){
 81003b0:	b580      	push	{r7, lr}
 81003b2:	b086      	sub	sp, #24
 81003b4:	af04      	add	r7, sp, #16
 81003b6:	6078      	str	r0, [r7, #4]
	/* Check by use "ERTC_lg" in live expression
	 * ex. S3231_Read(&hi2c2);
	 * */
	if(hi2c->State == HAL_I2C_STATE_READY){
 81003b8:	687b      	ldr	r3, [r7, #4]
 81003ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81003be:	b2db      	uxtb	r3, r3
 81003c0:	2b20      	cmp	r3, #32
 81003c2:	d10b      	bne.n	81003dc <DS3231_Read+0x2c>
		HAL_I2C_Mem_Read(hi2c, DS_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT,
 81003c4:	2364      	movs	r3, #100	; 0x64
 81003c6:	9302      	str	r3, [sp, #8]
 81003c8:	2313      	movs	r3, #19
 81003ca:	9301      	str	r3, [sp, #4]
 81003cc:	4b05      	ldr	r3, [pc, #20]	; (81003e4 <DS3231_Read+0x34>)
 81003ce:	9300      	str	r3, [sp, #0]
 81003d0:	2301      	movs	r3, #1
 81003d2:	2200      	movs	r2, #0
 81003d4:	21d0      	movs	r1, #208	; 0xd0
 81003d6:	6878      	ldr	r0, [r7, #4]
 81003d8:	f001 fe7e 	bl	81020d8 <HAL_I2C_Mem_Read>
				&ERTC_lg.D8[0], 19, 100);
	}

}
 81003dc:	bf00      	nop
 81003de:	3708      	adds	r7, #8
 81003e0:	46bd      	mov	sp, r7
 81003e2:	bd80      	pop	{r7, pc}
 81003e4:	100000bc 	.word	0x100000bc

081003e8 <EXIN_RTC_SYNC>:


//// Sync timevalue when boot(in case Vbat is not powered)
void EXIN_RTC_SYNC(I2C_HandleTypeDef *hi2c, RTC_HandleTypeDef *hrtc){
 81003e8:	b580      	push	{r7, lr}
 81003ea:	b088      	sub	sp, #32
 81003ec:	af00      	add	r7, sp, #0
 81003ee:	6078      	str	r0, [r7, #4]
 81003f0:	6039      	str	r1, [r7, #0]
	DS3231_Read(hi2c);
 81003f2:	6878      	ldr	r0, [r7, #4]
 81003f4:	f7ff ffdc 	bl	81003b0 <DS3231_Read>

	RTC_TimeTypeDef sTime={0};
 81003f8:	f107 030c 	add.w	r3, r7, #12
 81003fc:	2200      	movs	r2, #0
 81003fe:	601a      	str	r2, [r3, #0]
 8100400:	605a      	str	r2, [r3, #4]
 8100402:	609a      	str	r2, [r3, #8]
 8100404:	60da      	str	r2, [r3, #12]
 8100406:	611a      	str	r2, [r3, #16]
	sTime.Hours = ERTC_lg.DS3231RG.hour; //
 8100408:	4b18      	ldr	r3, [pc, #96]	; (810046c <EXIN_RTC_SYNC+0x84>)
 810040a:	789b      	ldrb	r3, [r3, #2]
 810040c:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8100410:	b2db      	uxtb	r3, r3
 8100412:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = ERTC_lg.DS3231RG.min;
 8100414:	4b15      	ldr	r3, [pc, #84]	; (810046c <EXIN_RTC_SYNC+0x84>)
 8100416:	785b      	ldrb	r3, [r3, #1]
 8100418:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = ERTC_lg.DS3231RG.sec;
 810041a:	4b14      	ldr	r3, [pc, #80]	; (810046c <EXIN_RTC_SYNC+0x84>)
 810041c:	781b      	ldrb	r3, [r3, #0]
 810041e:	73bb      	strb	r3, [r7, #14]

	HAL_RTC_SetTime(hrtc, &sTime, RTC_FORMAT_BCD);
 8100420:	f107 030c 	add.w	r3, r7, #12
 8100424:	2201      	movs	r2, #1
 8100426:	4619      	mov	r1, r3
 8100428:	6838      	ldr	r0, [r7, #0]
 810042a:	f003 fd7d 	bl	8103f28 <HAL_RTC_SetTime>

	RTC_DateTypeDef sDate ={0};
 810042e:	2300      	movs	r3, #0
 8100430:	60bb      	str	r3, [r7, #8]
	sDate.Date = ERTC_lg.DS3231RG.date;
 8100432:	4b0e      	ldr	r3, [pc, #56]	; (810046c <EXIN_RTC_SYNC+0x84>)
 8100434:	791b      	ldrb	r3, [r3, #4]
 8100436:	72bb      	strb	r3, [r7, #10]
	sDate.Month = ERTC_lg.DS3231RG.month;
 8100438:	4b0c      	ldr	r3, [pc, #48]	; (810046c <EXIN_RTC_SYNC+0x84>)
 810043a:	795b      	ldrb	r3, [r3, #5]
 810043c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8100440:	b2db      	uxtb	r3, r3
 8100442:	727b      	strb	r3, [r7, #9]
	sDate.WeekDay = ERTC_lg.DS3231RG.wkday;
 8100444:	4b09      	ldr	r3, [pc, #36]	; (810046c <EXIN_RTC_SYNC+0x84>)
 8100446:	78db      	ldrb	r3, [r3, #3]
 8100448:	f3c3 0302 	ubfx	r3, r3, #0, #3
 810044c:	b2db      	uxtb	r3, r3
 810044e:	723b      	strb	r3, [r7, #8]
	sDate.Year = ERTC_lg.DS3231RG.year;
 8100450:	4b06      	ldr	r3, [pc, #24]	; (810046c <EXIN_RTC_SYNC+0x84>)
 8100452:	799b      	ldrb	r3, [r3, #6]
 8100454:	72fb      	strb	r3, [r7, #11]

	HAL_RTC_SetDate(hrtc, &sDate, RTC_FORMAT_BCD);
 8100456:	f107 0308 	add.w	r3, r7, #8
 810045a:	2201      	movs	r2, #1
 810045c:	4619      	mov	r1, r3
 810045e:	6838      	ldr	r0, [r7, #0]
 8100460:	f003 fe5b 	bl	810411a <HAL_RTC_SetDate>
}
 8100464:	bf00      	nop
 8100466:	3720      	adds	r7, #32
 8100468:	46bd      	mov	sp, r7
 810046a:	bd80      	pop	{r7, pc}
 810046c:	100000bc 	.word	0x100000bc

08100470 <Write_MFRC522>:
 * Function Nameï¼šWrite_MFRC5200
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parametersï¼šaddr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(u_char addr, u_char val) {
 8100470:	b580      	push	{r7, lr}
 8100472:	b084      	sub	sp, #16
 8100474:	af00      	add	r7, sp, #0
 8100476:	4603      	mov	r3, r0
 8100478:	460a      	mov	r2, r1
 810047a:	71fb      	strb	r3, [r7, #7]
 810047c:	4613      	mov	r3, r2
 810047e:	71bb      	strb	r3, [r7, #6]
  //uint32_t rx_bits;
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8100480:	79fb      	ldrb	r3, [r7, #7]
 8100482:	005b      	lsls	r3, r3, #1
 8100484:	b2db      	uxtb	r3, r3
 8100486:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 810048a:	b2db      	uxtb	r3, r3
 810048c:	73fb      	strb	r3, [r7, #15]
   - bottom 8 bits are the data bits being sent for that address, we send
     them as is
   */
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, (((addr << 1) & 0x7E) << 8) |  val );
  //HAL_SPI_TransmitReceive(&hspi2, (((addr << 1) & 0x7E) << 8) |  val , rx_bits, 1, 500);
  HAL_SPI_Transmit(&MFRC522_SPI_PORT, &addr_bits, 1, 500);
 810048e:	f107 010f 	add.w	r1, r7, #15
 8100492:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8100496:	2201      	movs	r2, #1
 8100498:	4806      	ldr	r0, [pc, #24]	; (81004b4 <Write_MFRC522+0x44>)
 810049a:	f004 f92d 	bl	81046f8 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&MFRC522_SPI_PORT, &val, 1, 500);
 810049e:	1db9      	adds	r1, r7, #6
 81004a0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 81004a4:	2201      	movs	r2, #1
 81004a6:	4803      	ldr	r0, [pc, #12]	; (81004b4 <Write_MFRC522+0x44>)
 81004a8:	f004 f926 	bl	81046f8 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
#endif
  //// burn some time
  // volatile uint32_t ticks;
  // for(ticks=0; ticks < 5000; ++ticks);
}
 81004ac:	bf00      	nop
 81004ae:	3710      	adds	r7, #16
 81004b0:	46bd      	mov	sp, r7
 81004b2:	bd80      	pop	{r7, pc}
 81004b4:	10000140 	.word	0x10000140

081004b8 <Read_MFRC522>:
 * Function Name: Read_MFRC522
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the
 */
u_char Read_MFRC522(u_char addr) {
 81004b8:	b580      	push	{r7, lr}
 81004ba:	b084      	sub	sp, #16
 81004bc:	af00      	add	r7, sp, #0
 81004be:	4603      	mov	r3, r0
 81004c0:	71fb      	strb	r3, [r7, #7]
  //uint32_t rx_bits;
  u_char rx_bits;
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 81004c2:	79fb      	ldrb	r3, [r7, #7]
 81004c4:	005b      	lsls	r3, r3, #1
 81004c6:	b25b      	sxtb	r3, r3
 81004c8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 81004cc:	b25b      	sxtb	r3, r3
 81004ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 81004d2:	b25b      	sxtb	r3, r3
 81004d4:	b2db      	uxtb	r3, r3
 81004d6:	73bb      	strb	r3, [r7, #14]
  //// - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
  */
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 );
  //HAL_SPI_TransmitReceive(&hspi2, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 , rx_bits, 1, 500);
//HAL_SPI_Transmit(&hspi2, (unsigned char*) ((((addr<<1) & 0x7E) | 0x80)), 1, 500);
  HAL_SPI_Transmit(&MFRC522_SPI_PORT, &addr_bits, 1, 500);
 81004d8:	f107 010e 	add.w	r1, r7, #14
 81004dc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 81004e0:	2201      	movs	r2, #1
 81004e2:	4808      	ldr	r0, [pc, #32]	; (8100504 <Read_MFRC522+0x4c>)
 81004e4:	f004 f908 	bl	81046f8 <HAL_SPI_Transmit>

  HAL_SPI_Receive(&MFRC522_SPI_PORT, &rx_bits, 1, 500);
 81004e8:	f107 010f 	add.w	r1, r7, #15
 81004ec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 81004f0:	2201      	movs	r2, #1
 81004f2:	4804      	ldr	r0, [pc, #16]	; (8100504 <Read_MFRC522+0x4c>)
 81004f4:	f004 faee 	bl	8104ad4 <HAL_SPI_Receive>
  // for(ticks=0; ticks < 5000; ++ticks);
#ifdef MFRC522_SPI_HWOUT_NSS_DIS
  //// NSS pin trig using Hardware output NSS signal / setting at ioc
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
#endif
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 81004f8:	7bfb      	ldrb	r3, [r7, #15]
}
 81004fa:	4618      	mov	r0, r3
 81004fc:	3710      	adds	r7, #16
 81004fe:	46bd      	mov	sp, r7
 8100500:	bd80      	pop	{r7, pc}
 8100502:	bf00      	nop
 8100504:	10000140 	.word	0x10000140

08100508 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(u_char reg, u_char mask)
{
 8100508:	b580      	push	{r7, lr}
 810050a:	b084      	sub	sp, #16
 810050c:	af00      	add	r7, sp, #0
 810050e:	4603      	mov	r3, r0
 8100510:	460a      	mov	r2, r1
 8100512:	71fb      	strb	r3, [r7, #7]
 8100514:	4613      	mov	r3, r2
 8100516:	71bb      	strb	r3, [r7, #6]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 8100518:	79fb      	ldrb	r3, [r7, #7]
 810051a:	4618      	mov	r0, r3
 810051c:	f7ff ffcc 	bl	81004b8 <Read_MFRC522>
 8100520:	4603      	mov	r3, r0
 8100522:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8100524:	7bfa      	ldrb	r2, [r7, #15]
 8100526:	79bb      	ldrb	r3, [r7, #6]
 8100528:	4313      	orrs	r3, r2
 810052a:	b2da      	uxtb	r2, r3
 810052c:	79fb      	ldrb	r3, [r7, #7]
 810052e:	4611      	mov	r1, r2
 8100530:	4618      	mov	r0, r3
 8100532:	f7ff ff9d 	bl	8100470 <Write_MFRC522>
}
 8100536:	bf00      	nop
 8100538:	3710      	adds	r7, #16
 810053a:	46bd      	mov	sp, r7
 810053c:	bd80      	pop	{r7, pc}

0810053e <ClearBitMask>:
 * 				read current bit then add preferred bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(u_char reg, u_char mask)
{
 810053e:	b580      	push	{r7, lr}
 8100540:	b084      	sub	sp, #16
 8100542:	af00      	add	r7, sp, #0
 8100544:	4603      	mov	r3, r0
 8100546:	460a      	mov	r2, r1
 8100548:	71fb      	strb	r3, [r7, #7]
 810054a:	4613      	mov	r3, r2
 810054c:	71bb      	strb	r3, [r7, #6]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 810054e:	79fb      	ldrb	r3, [r7, #7]
 8100550:	4618      	mov	r0, r3
 8100552:	f7ff ffb1 	bl	81004b8 <Read_MFRC522>
 8100556:	4603      	mov	r3, r0
 8100558:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 810055a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 810055e:	43db      	mvns	r3, r3
 8100560:	b25a      	sxtb	r2, r3
 8100562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8100566:	4013      	ands	r3, r2
 8100568:	b25b      	sxtb	r3, r3
 810056a:	b2da      	uxtb	r2, r3
 810056c:	79fb      	ldrb	r3, [r7, #7]
 810056e:	4611      	mov	r1, r2
 8100570:	4618      	mov	r0, r3
 8100572:	f7ff ff7d 	bl	8100470 <Write_MFRC522>
}
 8100576:	bf00      	nop
 8100578:	3710      	adds	r7, #16
 810057a:	46bd      	mov	sp, r7
 810057c:	bd80      	pop	{r7, pc}

0810057e <AntennaOn>:
 * 				Set 1 to Tx1RFEn, Tx2RFEn
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 810057e:	b580      	push	{r7, lr}
 8100580:	af00      	add	r7, sp, #0
  SetBitMask(TxControlReg, 0x03);
 8100582:	2103      	movs	r1, #3
 8100584:	2014      	movs	r0, #20
 8100586:	f7ff ffbf 	bl	8100508 <SetBitMask>
}
 810058a:	bf00      	nop
 810058c:	bd80      	pop	{r7, pc}

0810058e <MFRC522_Reset>:
 * 				Soft reset, 10.3 Table 149
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 810058e:	b580      	push	{r7, lr}
 8100590:	af00      	add	r7, sp, #0
  Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8100592:	210f      	movs	r1, #15
 8100594:	2001      	movs	r0, #1
 8100596:	f7ff ff6b 	bl	8100470 <Write_MFRC522>
}
 810059a:	bf00      	nop
 810059c:	bd80      	pop	{r7, pc}

0810059e <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 810059e:	b580      	push	{r7, lr}
 81005a0:	af00      	add	r7, sp, #0
//  MSS_GPIO_set_output( MSS_GPIO_1, 1 );
  MFRC522_Reset();
 81005a2:	f7ff fff4 	bl	810058e <MFRC522_Reset>

  // Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
  Write_MFRC522(TModeReg, 0x80); // 0x8D);      // Tauto = 1; f(Timer) = 6.78MHz/TPreScaler
 81005a6:	2180      	movs	r1, #128	; 0x80
 81005a8:	202a      	movs	r0, #42	; 0x2a
 81005aa:	f7ff ff61 	bl	8100470 <Write_MFRC522>
  Write_MFRC522(TPrescalerReg, 0xA9); //0x34); // TModeReg[3..0] + TPrescalerReg
 81005ae:	21a9      	movs	r1, #169	; 0xa9
 81005b0:	202b      	movs	r0, #43	; 0x2b
 81005b2:	f7ff ff5d 	bl	8100470 <Write_MFRC522>
  Write_MFRC522(TReloadRegL, 0x03); //30);
 81005b6:	2103      	movs	r1, #3
 81005b8:	202d      	movs	r0, #45	; 0x2d
 81005ba:	f7ff ff59 	bl	8100470 <Write_MFRC522>
  Write_MFRC522(TReloadRegH, 0xE8); //0);
 81005be:	21e8      	movs	r1, #232	; 0xe8
 81005c0:	202c      	movs	r0, #44	; 0x2c
 81005c2:	f7ff ff55 	bl	8100470 <Write_MFRC522>
  Write_MFRC522(TxAutoReg, 0x40);     // force 100% ASK modulation
 81005c6:	2140      	movs	r1, #64	; 0x40
 81005c8:	2015      	movs	r0, #21
 81005ca:	f7ff ff51 	bl	8100470 <Write_MFRC522>
  Write_MFRC522(ModeReg, 0x3D);       // CRC Initial value 0x6363
 81005ce:	213d      	movs	r1, #61	; 0x3d
 81005d0:	2011      	movs	r0, #17
 81005d2:	f7ff ff4d 	bl	8100470 <Write_MFRC522>
  // interrupts, still playing with these
  // Write_MFRC522(CommIEnReg, 0xFF);
  // Write_MFRC522(DivlEnReg, 0xFF);

  // turn antenna on
  AntennaOn();
 81005d6:	f7ff ffd2 	bl	810057e <AntennaOn>
}
 81005da:	bf00      	nop
 81005dc:	bd80      	pop	{r7, pc}

081005de <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Request(u_char reqMode, u_char *TagType)
{
 81005de:	b580      	push	{r7, lr}
 81005e0:	b086      	sub	sp, #24
 81005e2:	af02      	add	r7, sp, #8
 81005e4:	4603      	mov	r3, r0
 81005e6:	6039      	str	r1, [r7, #0]
 81005e8:	71fb      	strb	r3, [r7, #7]
  u_char status;
  uint backBits; // The received data bits

  Write_MFRC522(BitFramingReg, 0x07);   // TxLastBists = BitFramingReg[2..0]
 81005ea:	2107      	movs	r1, #7
 81005ec:	200d      	movs	r0, #13
 81005ee:	f7ff ff3f 	bl	8100470 <Write_MFRC522>

  TagType[0] = reqMode;
 81005f2:	683b      	ldr	r3, [r7, #0]
 81005f4:	79fa      	ldrb	r2, [r7, #7]
 81005f6:	701a      	strb	r2, [r3, #0]

  status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 81005f8:	f107 0308 	add.w	r3, r7, #8
 81005fc:	9300      	str	r3, [sp, #0]
 81005fe:	683b      	ldr	r3, [r7, #0]
 8100600:	2201      	movs	r2, #1
 8100602:	6839      	ldr	r1, [r7, #0]
 8100604:	200c      	movs	r0, #12
 8100606:	f000 f80f 	bl	8100628 <MFRC522_ToCard>
 810060a:	4603      	mov	r3, r0
 810060c:	73fb      	strb	r3, [r7, #15]
  if ((status != MI_OK) || (backBits != 0x10)) {
 810060e:	7bfb      	ldrb	r3, [r7, #15]
 8100610:	2b00      	cmp	r3, #0
 8100612:	d102      	bne.n	810061a <MFRC522_Request+0x3c>
 8100614:	68bb      	ldr	r3, [r7, #8]
 8100616:	2b10      	cmp	r3, #16
 8100618:	d001      	beq.n	810061e <MFRC522_Request+0x40>
    status = MI_ERR;
 810061a:	2302      	movs	r3, #2
 810061c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 810061e:	7bfb      	ldrb	r3, [r7, #15]
}
 8100620:	4618      	mov	r0, r3
 8100622:	3710      	adds	r7, #16
 8100624:	46bd      	mov	sp, r7
 8100626:	bd80      	pop	{r7, pc}

08100628 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
u_char MFRC522_ToCard(u_char command, u_char *sendData, u_char sendLen, u_char *backData, uint *backLen)
{
 8100628:	b590      	push	{r4, r7, lr}
 810062a:	b089      	sub	sp, #36	; 0x24
 810062c:	af00      	add	r7, sp, #0
 810062e:	60b9      	str	r1, [r7, #8]
 8100630:	607b      	str	r3, [r7, #4]
 8100632:	4603      	mov	r3, r0
 8100634:	73fb      	strb	r3, [r7, #15]
 8100636:	4613      	mov	r3, r2
 8100638:	73bb      	strb	r3, [r7, #14]
  u_char status = MI_ERR;
 810063a:	2302      	movs	r3, #2
 810063c:	77fb      	strb	r3, [r7, #31]
  u_char irqEn = 0x00;
 810063e:	2300      	movs	r3, #0
 8100640:	77bb      	strb	r3, [r7, #30]
  u_char waitIRq = 0x00;
 8100642:	2300      	movs	r3, #0
 8100644:	777b      	strb	r3, [r7, #29]
  u_char lastBits;
  u_char n;
  uint i;

  switch (command)
 8100646:	7bfb      	ldrb	r3, [r7, #15]
 8100648:	2b0c      	cmp	r3, #12
 810064a:	d006      	beq.n	810065a <MFRC522_ToCard+0x32>
 810064c:	2b0e      	cmp	r3, #14
 810064e:	d109      	bne.n	8100664 <MFRC522_ToCard+0x3c>
  {
    case PCD_AUTHENT:     // Certification cards close
      {
        irqEn = 0x12;
 8100650:	2312      	movs	r3, #18
 8100652:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x10;
 8100654:	2310      	movs	r3, #16
 8100656:	777b      	strb	r3, [r7, #29]
        break;
 8100658:	e005      	b.n	8100666 <MFRC522_ToCard+0x3e>
      }
    case PCD_TRANSCEIVE:  // Transmit FIFO data
      {
        irqEn = 0x77;
 810065a:	2377      	movs	r3, #119	; 0x77
 810065c:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x30;
 810065e:	2330      	movs	r3, #48	; 0x30
 8100660:	777b      	strb	r3, [r7, #29]
        break;
 8100662:	e000      	b.n	8100666 <MFRC522_ToCard+0x3e>
      }
    default:
      break;
 8100664:	bf00      	nop
  }

  Write_MFRC522(CommIEnReg, irqEn|0x80);  // Interrupt request
 8100666:	7fbb      	ldrb	r3, [r7, #30]
 8100668:	f063 037f 	orn	r3, r3, #127	; 0x7f
 810066c:	b2db      	uxtb	r3, r3
 810066e:	4619      	mov	r1, r3
 8100670:	2002      	movs	r0, #2
 8100672:	f7ff fefd 	bl	8100470 <Write_MFRC522>
  ClearBitMask(CommIrqReg, 0x80);         // Clear all interrupt request bit
 8100676:	2180      	movs	r1, #128	; 0x80
 8100678:	2004      	movs	r0, #4
 810067a:	f7ff ff60 	bl	810053e <ClearBitMask>
  SetBitMask(FIFOLevelReg, 0x80);         // FlushBuffer=1, FIFO Initialization
 810067e:	2180      	movs	r1, #128	; 0x80
 8100680:	200a      	movs	r0, #10
 8100682:	f7ff ff41 	bl	8100508 <SetBitMask>

  Write_MFRC522(CommandReg, PCD_IDLE);    // NO action; Cancel the current command
 8100686:	2100      	movs	r1, #0
 8100688:	2001      	movs	r0, #1
 810068a:	f7ff fef1 	bl	8100470 <Write_MFRC522>

  // Writing data to the FIFO
  for (i=0; i<sendLen; i++)
 810068e:	2300      	movs	r3, #0
 8100690:	61bb      	str	r3, [r7, #24]
 8100692:	e00a      	b.n	81006aa <MFRC522_ToCard+0x82>
  {
    Write_MFRC522(FIFODataReg, sendData[i]);
 8100694:	68ba      	ldr	r2, [r7, #8]
 8100696:	69bb      	ldr	r3, [r7, #24]
 8100698:	4413      	add	r3, r2
 810069a:	781b      	ldrb	r3, [r3, #0]
 810069c:	4619      	mov	r1, r3
 810069e:	2009      	movs	r0, #9
 81006a0:	f7ff fee6 	bl	8100470 <Write_MFRC522>
  for (i=0; i<sendLen; i++)
 81006a4:	69bb      	ldr	r3, [r7, #24]
 81006a6:	3301      	adds	r3, #1
 81006a8:	61bb      	str	r3, [r7, #24]
 81006aa:	7bbb      	ldrb	r3, [r7, #14]
 81006ac:	69ba      	ldr	r2, [r7, #24]
 81006ae:	429a      	cmp	r2, r3
 81006b0:	d3f0      	bcc.n	8100694 <MFRC522_ToCard+0x6c>
  }

  // Execute the command
  Write_MFRC522(CommandReg, command);
 81006b2:	7bfb      	ldrb	r3, [r7, #15]
 81006b4:	4619      	mov	r1, r3
 81006b6:	2001      	movs	r0, #1
 81006b8:	f7ff feda 	bl	8100470 <Write_MFRC522>
  if (command == PCD_TRANSCEIVE)
 81006bc:	7bfb      	ldrb	r3, [r7, #15]
 81006be:	2b0c      	cmp	r3, #12
 81006c0:	d103      	bne.n	81006ca <MFRC522_ToCard+0xa2>
  {
    SetBitMask(BitFramingReg, 0x80);      // StartSend=1,transmission of data starts
 81006c2:	2180      	movs	r1, #128	; 0x80
 81006c4:	200d      	movs	r0, #13
 81006c6:	f7ff ff1f 	bl	8100508 <SetBitMask>
  }

  // Waiting to receive data to complete
  i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 81006ca:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 81006ce:	61bb      	str	r3, [r7, #24]
  do
  {
    // CommIrqReg[7..0]
    // Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
    n = Read_MFRC522(CommIrqReg);
 81006d0:	2004      	movs	r0, #4
 81006d2:	f7ff fef1 	bl	81004b8 <Read_MFRC522>
 81006d6:	4603      	mov	r3, r0
 81006d8:	773b      	strb	r3, [r7, #28]
    i--;
 81006da:	69bb      	ldr	r3, [r7, #24]
 81006dc:	3b01      	subs	r3, #1
 81006de:	61bb      	str	r3, [r7, #24]
  }
  while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 81006e0:	69bb      	ldr	r3, [r7, #24]
 81006e2:	2b00      	cmp	r3, #0
 81006e4:	d00a      	beq.n	81006fc <MFRC522_ToCard+0xd4>
 81006e6:	7f3b      	ldrb	r3, [r7, #28]
 81006e8:	f003 0301 	and.w	r3, r3, #1
 81006ec:	2b00      	cmp	r3, #0
 81006ee:	d105      	bne.n	81006fc <MFRC522_ToCard+0xd4>
 81006f0:	7f3a      	ldrb	r2, [r7, #28]
 81006f2:	7f7b      	ldrb	r3, [r7, #29]
 81006f4:	4013      	ands	r3, r2
 81006f6:	b2db      	uxtb	r3, r3
 81006f8:	2b00      	cmp	r3, #0
 81006fa:	d0e9      	beq.n	81006d0 <MFRC522_ToCard+0xa8>

  ClearBitMask(BitFramingReg, 0x80);      // StartSend=0
 81006fc:	2180      	movs	r1, #128	; 0x80
 81006fe:	200d      	movs	r0, #13
 8100700:	f7ff ff1d 	bl	810053e <ClearBitMask>

  if (i != 0)
 8100704:	69bb      	ldr	r3, [r7, #24]
 8100706:	2b00      	cmp	r3, #0
 8100708:	d052      	beq.n	81007b0 <MFRC522_ToCard+0x188>
  {
    if(!(Read_MFRC522(ErrorReg) & 0x1B))  // BufferOvfl Collerr CRCErr ProtecolErr
 810070a:	2006      	movs	r0, #6
 810070c:	f7ff fed4 	bl	81004b8 <Read_MFRC522>
 8100710:	4603      	mov	r3, r0
 8100712:	f003 031b 	and.w	r3, r3, #27
 8100716:	2b00      	cmp	r3, #0
 8100718:	d148      	bne.n	81007ac <MFRC522_ToCard+0x184>
    {
      status = MI_OK;
 810071a:	2300      	movs	r3, #0
 810071c:	77fb      	strb	r3, [r7, #31]
      if (n & irqEn & 0x01)
 810071e:	7f3a      	ldrb	r2, [r7, #28]
 8100720:	7fbb      	ldrb	r3, [r7, #30]
 8100722:	4013      	ands	r3, r2
 8100724:	b2db      	uxtb	r3, r3
 8100726:	f003 0301 	and.w	r3, r3, #1
 810072a:	2b00      	cmp	r3, #0
 810072c:	d001      	beq.n	8100732 <MFRC522_ToCard+0x10a>
      {
        status = MI_NOTAGERR;             // ??
 810072e:	2301      	movs	r3, #1
 8100730:	77fb      	strb	r3, [r7, #31]
      }

      if (command == PCD_TRANSCEIVE)
 8100732:	7bfb      	ldrb	r3, [r7, #15]
 8100734:	2b0c      	cmp	r3, #12
 8100736:	d13b      	bne.n	81007b0 <MFRC522_ToCard+0x188>
      {
        n = Read_MFRC522(FIFOLevelReg);
 8100738:	200a      	movs	r0, #10
 810073a:	f7ff febd 	bl	81004b8 <Read_MFRC522>
 810073e:	4603      	mov	r3, r0
 8100740:	773b      	strb	r3, [r7, #28]
        lastBits = Read_MFRC522(ControlReg) & 0x07;
 8100742:	200c      	movs	r0, #12
 8100744:	f7ff feb8 	bl	81004b8 <Read_MFRC522>
 8100748:	4603      	mov	r3, r0
 810074a:	f003 0307 	and.w	r3, r3, #7
 810074e:	75fb      	strb	r3, [r7, #23]
        if (lastBits)
 8100750:	7dfb      	ldrb	r3, [r7, #23]
 8100752:	2b00      	cmp	r3, #0
 8100754:	d008      	beq.n	8100768 <MFRC522_ToCard+0x140>
        {
          *backLen = (n-1)*8 + lastBits;
 8100756:	7f3b      	ldrb	r3, [r7, #28]
 8100758:	3b01      	subs	r3, #1
 810075a:	00da      	lsls	r2, r3, #3
 810075c:	7dfb      	ldrb	r3, [r7, #23]
 810075e:	4413      	add	r3, r2
 8100760:	461a      	mov	r2, r3
 8100762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8100764:	601a      	str	r2, [r3, #0]
 8100766:	e004      	b.n	8100772 <MFRC522_ToCard+0x14a>
        }
        else
        {
          *backLen = n*8;
 8100768:	7f3b      	ldrb	r3, [r7, #28]
 810076a:	00db      	lsls	r3, r3, #3
 810076c:	461a      	mov	r2, r3
 810076e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8100770:	601a      	str	r2, [r3, #0]
        }

        if (n == 0)
 8100772:	7f3b      	ldrb	r3, [r7, #28]
 8100774:	2b00      	cmp	r3, #0
 8100776:	d101      	bne.n	810077c <MFRC522_ToCard+0x154>
        {
          n = 1;
 8100778:	2301      	movs	r3, #1
 810077a:	773b      	strb	r3, [r7, #28]
        }
        if (n > MAX_LEN)
 810077c:	7f3b      	ldrb	r3, [r7, #28]
 810077e:	2b10      	cmp	r3, #16
 8100780:	d901      	bls.n	8100786 <MFRC522_ToCard+0x15e>
        {
          n = MAX_LEN;
 8100782:	2310      	movs	r3, #16
 8100784:	773b      	strb	r3, [r7, #28]
        }

        // Reading the received data in FIFO
        for (i=0; i<n; i++)
 8100786:	2300      	movs	r3, #0
 8100788:	61bb      	str	r3, [r7, #24]
 810078a:	e00a      	b.n	81007a2 <MFRC522_ToCard+0x17a>
        {
          backData[i] = Read_MFRC522(FIFODataReg);
 810078c:	687a      	ldr	r2, [r7, #4]
 810078e:	69bb      	ldr	r3, [r7, #24]
 8100790:	18d4      	adds	r4, r2, r3
 8100792:	2009      	movs	r0, #9
 8100794:	f7ff fe90 	bl	81004b8 <Read_MFRC522>
 8100798:	4603      	mov	r3, r0
 810079a:	7023      	strb	r3, [r4, #0]
        for (i=0; i<n; i++)
 810079c:	69bb      	ldr	r3, [r7, #24]
 810079e:	3301      	adds	r3, #1
 81007a0:	61bb      	str	r3, [r7, #24]
 81007a2:	7f3b      	ldrb	r3, [r7, #28]
 81007a4:	69ba      	ldr	r2, [r7, #24]
 81007a6:	429a      	cmp	r2, r3
 81007a8:	d3f0      	bcc.n	810078c <MFRC522_ToCard+0x164>
 81007aa:	e001      	b.n	81007b0 <MFRC522_ToCard+0x188>
        }
      }
    }
    else {
      //printf("~~~ buffer overflow, collerr, crcerr, or protecolerr\r\n");
      status = MI_ERR;
 81007ac:	2302      	movs	r3, #2
 81007ae:	77fb      	strb	r3, [r7, #31]
  }
  else {
    //printf("~~~ request timed out\r\n");
  }

  return status;
 81007b0:	7ffb      	ldrb	r3, [r7, #31]
}
 81007b2:	4618      	mov	r0, r3
 81007b4:	3724      	adds	r7, #36	; 0x24
 81007b6:	46bd      	mov	sp, r7
 81007b8:	bd90      	pop	{r4, r7, pc}

081007ba <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Anticoll(u_char *serNum)
{
 81007ba:	b580      	push	{r7, lr}
 81007bc:	b086      	sub	sp, #24
 81007be:	af02      	add	r7, sp, #8
 81007c0:	6078      	str	r0, [r7, #4]
  u_char status;
  u_char i;
  u_char serNumCheck=0;
 81007c2:	2300      	movs	r3, #0
 81007c4:	737b      	strb	r3, [r7, #13]
  uint unLen;


  //ClearBitMask(Status2Reg, 0x08);		//TempSensclear
  //ClearBitMask(CollReg,0x80);			//ValuesAfterColl
  Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 81007c6:	2100      	movs	r1, #0
 81007c8:	200d      	movs	r0, #13
 81007ca:	f7ff fe51 	bl	8100470 <Write_MFRC522>

  serNum[0] = PICC_ANTICOLL;
 81007ce:	687b      	ldr	r3, [r7, #4]
 81007d0:	2293      	movs	r2, #147	; 0x93
 81007d2:	701a      	strb	r2, [r3, #0]
  serNum[1] = 0x20;
 81007d4:	687b      	ldr	r3, [r7, #4]
 81007d6:	3301      	adds	r3, #1
 81007d8:	2220      	movs	r2, #32
 81007da:	701a      	strb	r2, [r3, #0]
  status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 81007dc:	f107 0308 	add.w	r3, r7, #8
 81007e0:	9300      	str	r3, [sp, #0]
 81007e2:	687b      	ldr	r3, [r7, #4]
 81007e4:	2202      	movs	r2, #2
 81007e6:	6879      	ldr	r1, [r7, #4]
 81007e8:	200c      	movs	r0, #12
 81007ea:	f7ff ff1d 	bl	8100628 <MFRC522_ToCard>
 81007ee:	4603      	mov	r3, r0
 81007f0:	73fb      	strb	r3, [r7, #15]

  if (status == MI_OK)
 81007f2:	7bfb      	ldrb	r3, [r7, #15]
 81007f4:	2b00      	cmp	r3, #0
 81007f6:	d118      	bne.n	810082a <MFRC522_Anticoll+0x70>
  {
    //Check card serial number
    for (i=0; i<4; i++)
 81007f8:	2300      	movs	r3, #0
 81007fa:	73bb      	strb	r3, [r7, #14]
 81007fc:	e009      	b.n	8100812 <MFRC522_Anticoll+0x58>
    {
      serNumCheck ^= serNum[i];
 81007fe:	7bbb      	ldrb	r3, [r7, #14]
 8100800:	687a      	ldr	r2, [r7, #4]
 8100802:	4413      	add	r3, r2
 8100804:	781a      	ldrb	r2, [r3, #0]
 8100806:	7b7b      	ldrb	r3, [r7, #13]
 8100808:	4053      	eors	r3, r2
 810080a:	737b      	strb	r3, [r7, #13]
    for (i=0; i<4; i++)
 810080c:	7bbb      	ldrb	r3, [r7, #14]
 810080e:	3301      	adds	r3, #1
 8100810:	73bb      	strb	r3, [r7, #14]
 8100812:	7bbb      	ldrb	r3, [r7, #14]
 8100814:	2b03      	cmp	r3, #3
 8100816:	d9f2      	bls.n	81007fe <MFRC522_Anticoll+0x44>
    }
    if (serNumCheck != serNum[i])
 8100818:	7bbb      	ldrb	r3, [r7, #14]
 810081a:	687a      	ldr	r2, [r7, #4]
 810081c:	4413      	add	r3, r2
 810081e:	781b      	ldrb	r3, [r3, #0]
 8100820:	7b7a      	ldrb	r2, [r7, #13]
 8100822:	429a      	cmp	r2, r3
 8100824:	d001      	beq.n	810082a <MFRC522_Anticoll+0x70>
    {
      status = MI_ERR;
 8100826:	2302      	movs	r3, #2
 8100828:	73fb      	strb	r3, [r7, #15]
    }
  }

  //SetBitMask(CollReg, 0x80);		//ValuesAfterColl=1

  return status;
 810082a:	7bfb      	ldrb	r3, [r7, #15]
}
 810082c:	4618      	mov	r0, r3
 810082e:	3710      	adds	r7, #16
 8100830:	46bd      	mov	sp, r7
 8100832:	bd80      	pop	{r7, pc}

08100834 <CalulateCRC>:
 * Description: CRC calculation with MF522
 * Input parameters: pIndata - To read the CRC data, len - the data length, pOutData - CRC calculation results
 * Return value: None
 */
void CalulateCRC(u_char *pIndata, u_char len, u_char *pOutData)
{
 8100834:	b590      	push	{r4, r7, lr}
 8100836:	b087      	sub	sp, #28
 8100838:	af00      	add	r7, sp, #0
 810083a:	60f8      	str	r0, [r7, #12]
 810083c:	460b      	mov	r3, r1
 810083e:	607a      	str	r2, [r7, #4]
 8100840:	72fb      	strb	r3, [r7, #11]
  u_char i, n;

  ClearBitMask(DivIrqReg, 0x04);			//CRCIrq = 0
 8100842:	2104      	movs	r1, #4
 8100844:	2005      	movs	r0, #5
 8100846:	f7ff fe7a 	bl	810053e <ClearBitMask>
  SetBitMask(FIFOLevelReg, 0x80);			//Clear the FIFO pointer
 810084a:	2180      	movs	r1, #128	; 0x80
 810084c:	200a      	movs	r0, #10
 810084e:	f7ff fe5b 	bl	8100508 <SetBitMask>
  //Write_MFRC522(CommandReg, PCD_IDLE);

  //Writing data to the FIFO
  for (i=0; i<len; i++)
 8100852:	2300      	movs	r3, #0
 8100854:	75fb      	strb	r3, [r7, #23]
 8100856:	e00a      	b.n	810086e <CalulateCRC+0x3a>
  {
    Write_MFRC522(FIFODataReg, *(pIndata+i));
 8100858:	7dfb      	ldrb	r3, [r7, #23]
 810085a:	68fa      	ldr	r2, [r7, #12]
 810085c:	4413      	add	r3, r2
 810085e:	781b      	ldrb	r3, [r3, #0]
 8100860:	4619      	mov	r1, r3
 8100862:	2009      	movs	r0, #9
 8100864:	f7ff fe04 	bl	8100470 <Write_MFRC522>
  for (i=0; i<len; i++)
 8100868:	7dfb      	ldrb	r3, [r7, #23]
 810086a:	3301      	adds	r3, #1
 810086c:	75fb      	strb	r3, [r7, #23]
 810086e:	7dfa      	ldrb	r2, [r7, #23]
 8100870:	7afb      	ldrb	r3, [r7, #11]
 8100872:	429a      	cmp	r2, r3
 8100874:	d3f0      	bcc.n	8100858 <CalulateCRC+0x24>
  }
  Write_MFRC522(CommandReg, PCD_CALCCRC);
 8100876:	2103      	movs	r1, #3
 8100878:	2001      	movs	r0, #1
 810087a:	f7ff fdf9 	bl	8100470 <Write_MFRC522>

  //Wait CRC calculation is complete
  i = 0xFF;
 810087e:	23ff      	movs	r3, #255	; 0xff
 8100880:	75fb      	strb	r3, [r7, #23]
  do
  {
    n = Read_MFRC522(DivIrqReg);
 8100882:	2005      	movs	r0, #5
 8100884:	f7ff fe18 	bl	81004b8 <Read_MFRC522>
 8100888:	4603      	mov	r3, r0
 810088a:	75bb      	strb	r3, [r7, #22]
    i--;
 810088c:	7dfb      	ldrb	r3, [r7, #23]
 810088e:	3b01      	subs	r3, #1
 8100890:	75fb      	strb	r3, [r7, #23]
  }
  while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 8100892:	7dfb      	ldrb	r3, [r7, #23]
 8100894:	2b00      	cmp	r3, #0
 8100896:	d004      	beq.n	81008a2 <CalulateCRC+0x6e>
 8100898:	7dbb      	ldrb	r3, [r7, #22]
 810089a:	f003 0304 	and.w	r3, r3, #4
 810089e:	2b00      	cmp	r3, #0
 81008a0:	d0ef      	beq.n	8100882 <CalulateCRC+0x4e>

  //Read CRC calculation result
  pOutData[0] = Read_MFRC522(CRCResultRegL);
 81008a2:	2022      	movs	r0, #34	; 0x22
 81008a4:	f7ff fe08 	bl	81004b8 <Read_MFRC522>
 81008a8:	4603      	mov	r3, r0
 81008aa:	461a      	mov	r2, r3
 81008ac:	687b      	ldr	r3, [r7, #4]
 81008ae:	701a      	strb	r2, [r3, #0]
  pOutData[1] = Read_MFRC522(CRCResultRegM);
 81008b0:	687b      	ldr	r3, [r7, #4]
 81008b2:	1c5c      	adds	r4, r3, #1
 81008b4:	2021      	movs	r0, #33	; 0x21
 81008b6:	f7ff fdff 	bl	81004b8 <Read_MFRC522>
 81008ba:	4603      	mov	r3, r0
 81008bc:	7023      	strb	r3, [r4, #0]
}
 81008be:	bf00      	nop
 81008c0:	371c      	adds	r7, #28
 81008c2:	46bd      	mov	sp, r7
 81008c4:	bd90      	pop	{r4, r7, pc}

081008c6 <MFRC522_Auth>:
             Sectorkey--Sector password
             serNum--Card serial number, 4-byte
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Auth(u_char authMode, u_char BlockAddr, u_char *Sectorkey, u_char *serNum)
{
 81008c6:	b580      	push	{r7, lr}
 81008c8:	b08c      	sub	sp, #48	; 0x30
 81008ca:	af02      	add	r7, sp, #8
 81008cc:	60ba      	str	r2, [r7, #8]
 81008ce:	607b      	str	r3, [r7, #4]
 81008d0:	4603      	mov	r3, r0
 81008d2:	73fb      	strb	r3, [r7, #15]
 81008d4:	460b      	mov	r3, r1
 81008d6:	73bb      	strb	r3, [r7, #14]
  uint recvBits;
  u_char i;
  u_char buff[12];

  //Verify the command block address + sector + password + card serial number
  buff[0] = authMode;
 81008d8:	7bfb      	ldrb	r3, [r7, #15]
 81008da:	753b      	strb	r3, [r7, #20]
  buff[1] = BlockAddr;
 81008dc:	7bbb      	ldrb	r3, [r7, #14]
 81008de:	757b      	strb	r3, [r7, #21]
  for (i=0; i<6; i++)
 81008e0:	2300      	movs	r3, #0
 81008e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 81008e6:	e010      	b.n	810090a <MFRC522_Auth+0x44>
  {
    buff[i+2] = *(Sectorkey+i);
 81008e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 81008ec:	68ba      	ldr	r2, [r7, #8]
 81008ee:	441a      	add	r2, r3
 81008f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 81008f4:	3302      	adds	r3, #2
 81008f6:	7812      	ldrb	r2, [r2, #0]
 81008f8:	3328      	adds	r3, #40	; 0x28
 81008fa:	443b      	add	r3, r7
 81008fc:	f803 2c14 	strb.w	r2, [r3, #-20]
  for (i=0; i<6; i++)
 8100900:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8100904:	3301      	adds	r3, #1
 8100906:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 810090a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 810090e:	2b05      	cmp	r3, #5
 8100910:	d9ea      	bls.n	81008e8 <MFRC522_Auth+0x22>
  }
  for (i=0; i<4; i++)
 8100912:	2300      	movs	r3, #0
 8100914:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8100918:	e010      	b.n	810093c <MFRC522_Auth+0x76>
  {
    buff[i+8] = *(serNum+i);
 810091a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 810091e:	687a      	ldr	r2, [r7, #4]
 8100920:	441a      	add	r2, r3
 8100922:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8100926:	3308      	adds	r3, #8
 8100928:	7812      	ldrb	r2, [r2, #0]
 810092a:	3328      	adds	r3, #40	; 0x28
 810092c:	443b      	add	r3, r7
 810092e:	f803 2c14 	strb.w	r2, [r3, #-20]
  for (i=0; i<4; i++)
 8100932:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8100936:	3301      	adds	r3, #1
 8100938:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 810093c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8100940:	2b03      	cmp	r3, #3
 8100942:	d9ea      	bls.n	810091a <MFRC522_Auth+0x54>
  }
  status = MFRC522_ToCard(PCD_AUTHENT, buff, 12, buff, &recvBits);
 8100944:	f107 0214 	add.w	r2, r7, #20
 8100948:	f107 0114 	add.w	r1, r7, #20
 810094c:	f107 0320 	add.w	r3, r7, #32
 8100950:	9300      	str	r3, [sp, #0]
 8100952:	4613      	mov	r3, r2
 8100954:	220c      	movs	r2, #12
 8100956:	200e      	movs	r0, #14
 8100958:	f7ff fe66 	bl	8100628 <MFRC522_ToCard>
 810095c:	4603      	mov	r3, r0
 810095e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if ((status != MI_OK) || (!(Read_MFRC522(Status2Reg) & 0x08)))
 8100962:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8100966:	2b00      	cmp	r3, #0
 8100968:	d107      	bne.n	810097a <MFRC522_Auth+0xb4>
 810096a:	2008      	movs	r0, #8
 810096c:	f7ff fda4 	bl	81004b8 <Read_MFRC522>
 8100970:	4603      	mov	r3, r0
 8100972:	f003 0308 	and.w	r3, r3, #8
 8100976:	2b00      	cmp	r3, #0
 8100978:	d102      	bne.n	8100980 <MFRC522_Auth+0xba>
  {
    status = MI_ERR;
 810097a:	2302      	movs	r3, #2
 810097c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return status;
 8100980:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8100984:	4618      	mov	r0, r3
 8100986:	3728      	adds	r7, #40	; 0x28
 8100988:	46bd      	mov	sp, r7
 810098a:	bd80      	pop	{r7, pc}

0810098c <MFRC522_SelectTag>:
 * Description: election card, read the card memory capacity
 * Input parameters: serNum - Incoming card serial number
 * Return value: the successful return of card capacity
 */
u_char MFRC522_SelectTag(u_char *serNum)
{
 810098c:	b580      	push	{r7, lr}
 810098e:	b08a      	sub	sp, #40	; 0x28
 8100990:	af02      	add	r7, sp, #8
 8100992:	6078      	str	r0, [r7, #4]
  uint recvBits;
  u_char buffer[9];

  //ClearBitMask(Status2Reg, 0x08);			//MFCrypto1On=0

  buffer[0] = PICC_SElECTTAG;
 8100994:	2393      	movs	r3, #147	; 0x93
 8100996:	733b      	strb	r3, [r7, #12]
  buffer[1] = 0x70;
 8100998:	2370      	movs	r3, #112	; 0x70
 810099a:	737b      	strb	r3, [r7, #13]
  for (i=0; i<5; i++)
 810099c:	2300      	movs	r3, #0
 810099e:	77fb      	strb	r3, [r7, #31]
 81009a0:	e00c      	b.n	81009bc <MFRC522_SelectTag+0x30>
  {
    buffer[i+2] = *(serNum+i);
 81009a2:	7ffb      	ldrb	r3, [r7, #31]
 81009a4:	687a      	ldr	r2, [r7, #4]
 81009a6:	441a      	add	r2, r3
 81009a8:	7ffb      	ldrb	r3, [r7, #31]
 81009aa:	3302      	adds	r3, #2
 81009ac:	7812      	ldrb	r2, [r2, #0]
 81009ae:	3320      	adds	r3, #32
 81009b0:	443b      	add	r3, r7
 81009b2:	f803 2c14 	strb.w	r2, [r3, #-20]
  for (i=0; i<5; i++)
 81009b6:	7ffb      	ldrb	r3, [r7, #31]
 81009b8:	3301      	adds	r3, #1
 81009ba:	77fb      	strb	r3, [r7, #31]
 81009bc:	7ffb      	ldrb	r3, [r7, #31]
 81009be:	2b04      	cmp	r3, #4
 81009c0:	d9ef      	bls.n	81009a2 <MFRC522_SelectTag+0x16>
  }
  CalulateCRC(buffer, 7, &buffer[7]);		//??
 81009c2:	f107 030c 	add.w	r3, r7, #12
 81009c6:	1dda      	adds	r2, r3, #7
 81009c8:	f107 030c 	add.w	r3, r7, #12
 81009cc:	2107      	movs	r1, #7
 81009ce:	4618      	mov	r0, r3
 81009d0:	f7ff ff30 	bl	8100834 <CalulateCRC>
  status = MFRC522_ToCard(PCD_TRANSCEIVE, buffer, 9, buffer, &recvBits);
 81009d4:	f107 020c 	add.w	r2, r7, #12
 81009d8:	f107 010c 	add.w	r1, r7, #12
 81009dc:	f107 0318 	add.w	r3, r7, #24
 81009e0:	9300      	str	r3, [sp, #0]
 81009e2:	4613      	mov	r3, r2
 81009e4:	2209      	movs	r2, #9
 81009e6:	200c      	movs	r0, #12
 81009e8:	f7ff fe1e 	bl	8100628 <MFRC522_ToCard>
 81009ec:	4603      	mov	r3, r0
 81009ee:	777b      	strb	r3, [r7, #29]

  if ((status == MI_OK) && (recvBits == 0x18))
 81009f0:	7f7b      	ldrb	r3, [r7, #29]
 81009f2:	2b00      	cmp	r3, #0
 81009f4:	d105      	bne.n	8100a02 <MFRC522_SelectTag+0x76>
 81009f6:	69bb      	ldr	r3, [r7, #24]
 81009f8:	2b18      	cmp	r3, #24
 81009fa:	d102      	bne.n	8100a02 <MFRC522_SelectTag+0x76>
  {
    size = buffer[0];
 81009fc:	7b3b      	ldrb	r3, [r7, #12]
 81009fe:	77bb      	strb	r3, [r7, #30]
 8100a00:	e001      	b.n	8100a06 <MFRC522_SelectTag+0x7a>
  }
  else
  {
    size = 0;
 8100a02:	2300      	movs	r3, #0
 8100a04:	77bb      	strb	r3, [r7, #30]
  }

  return size;
 8100a06:	7fbb      	ldrb	r3, [r7, #30]
}
 8100a08:	4618      	mov	r0, r3
 8100a0a:	3720      	adds	r7, #32
 8100a0c:	46bd      	mov	sp, r7
 8100a0e:	bd80      	pop	{r7, pc}

08100a10 <MFRC522_Halt>:
 * Description: Command card into hibernation
 * Input: None
 * Return value: None
 */
void MFRC522_Halt(void)
{
 8100a10:	b580      	push	{r7, lr}
 8100a12:	b086      	sub	sp, #24
 8100a14:	af02      	add	r7, sp, #8
  u_char status;
  uint unLen;
  u_char buff[4];

  buff[0] = PICC_HALT;
 8100a16:	2350      	movs	r3, #80	; 0x50
 8100a18:	713b      	strb	r3, [r7, #4]
  buff[1] = 0;
 8100a1a:	2300      	movs	r3, #0
 8100a1c:	717b      	strb	r3, [r7, #5]
  CalulateCRC(buff, 2, &buff[2]);
 8100a1e:	1d3b      	adds	r3, r7, #4
 8100a20:	1c9a      	adds	r2, r3, #2
 8100a22:	1d3b      	adds	r3, r7, #4
 8100a24:	2102      	movs	r1, #2
 8100a26:	4618      	mov	r0, r3
 8100a28:	f7ff ff04 	bl	8100834 <CalulateCRC>

  status = MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff,&unLen);
 8100a2c:	1d3a      	adds	r2, r7, #4
 8100a2e:	1d39      	adds	r1, r7, #4
 8100a30:	f107 0308 	add.w	r3, r7, #8
 8100a34:	9300      	str	r3, [sp, #0]
 8100a36:	4613      	mov	r3, r2
 8100a38:	2204      	movs	r2, #4
 8100a3a:	200c      	movs	r0, #12
 8100a3c:	f7ff fdf4 	bl	8100628 <MFRC522_ToCard>
 8100a40:	4603      	mov	r3, r0
 8100a42:	73fb      	strb	r3, [r7, #15]
  //return status;
}
 8100a44:	bf00      	nop
 8100a46:	3710      	adds	r7, #16
 8100a48:	46bd      	mov	sp, r7
 8100a4a:	bd80      	pop	{r7, pc}

08100a4c <MFRC522_StopCrypto1>:
//--------------------------------------
void MFRC522_StopCrypto1(void) {
 8100a4c:	b580      	push	{r7, lr}
 8100a4e:	af00      	add	r7, sp, #0
	// Clear MFCrypto1On bit
	ClearBitMask(Status2Reg, 0x08); // Status2Reg[7..0] bits are: TempSensClear I2CForceHS reserved reserved   MFCrypto1On ModemState[2:0]
 8100a50:	2108      	movs	r1, #8
 8100a52:	2008      	movs	r0, #8
 8100a54:	f7ff fd73 	bl	810053e <ClearBitMask>
} // End PCD_StopCrypto1()
 8100a58:	bf00      	nop
 8100a5a:	bd80      	pop	{r7, pc}

08100a5c <MFRC522_HardResetSet>:

////------------------------------------
void MFRC522_HardResetSet(void){
 8100a5c:	b580      	push	{r7, lr}
 8100a5e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RC522_Rst_GPIO_Port, RC522_Rst_Pin, GPIO_PIN_RESET);
 8100a60:	2200      	movs	r2, #0
 8100a62:	2108      	movs	r1, #8
 8100a64:	4806      	ldr	r0, [pc, #24]	; (8100a80 <MFRC522_HardResetSet+0x24>)
 8100a66:	f001 fa29 	bl	8101ebc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8100a6a:	2001      	movs	r0, #1
 8100a6c:	f000 ff2e 	bl	81018cc <HAL_Delay>
	HAL_GPIO_WritePin(RC522_Rst_GPIO_Port, RC522_Rst_Pin, GPIO_PIN_SET);
 8100a70:	2201      	movs	r2, #1
 8100a72:	2108      	movs	r1, #8
 8100a74:	4802      	ldr	r0, [pc, #8]	; (8100a80 <MFRC522_HardResetSet+0x24>)
 8100a76:	f001 fa21 	bl	8101ebc <HAL_GPIO_WritePin>
}
 8100a7a:	bf00      	nop
 8100a7c:	bd80      	pop	{r7, pc}
 8100a7e:	bf00      	nop
 8100a80:	58021000 	.word	0x58021000

08100a84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100a84:	b5b0      	push	{r4, r5, r7, lr}
 8100a86:	b086      	sub	sp, #24
 8100a88:	af02      	add	r7, sp, #8

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100a8a:	4b48      	ldr	r3, [pc, #288]	; (8100bac <main+0x128>)
 8100a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100a90:	4a46      	ldr	r2, [pc, #280]	; (8100bac <main+0x128>)
 8100a92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8100a96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100a9a:	4b44      	ldr	r3, [pc, #272]	; (8100bac <main+0x128>)
 8100a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100aa4:	607b      	str	r3, [r7, #4]
 8100aa6:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100aa8:	2001      	movs	r0, #1
 8100aaa:	f001 fa73 	bl	8101f94 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100aae:	f001 ff91 	bl	81029d4 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100ab2:	2201      	movs	r2, #1
 8100ab4:	2102      	movs	r1, #2
 8100ab6:	2000      	movs	r0, #0
 8100ab8:	f001 ff12 	bl	81028e0 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100abc:	4b3c      	ldr	r3, [pc, #240]	; (8100bb0 <main+0x12c>)
 8100abe:	681b      	ldr	r3, [r3, #0]
 8100ac0:	091b      	lsrs	r3, r3, #4
 8100ac2:	f003 030f 	and.w	r3, r3, #15
 8100ac6:	2b07      	cmp	r3, #7
 8100ac8:	d108      	bne.n	8100adc <main+0x58>
 8100aca:	4b3a      	ldr	r3, [pc, #232]	; (8100bb4 <main+0x130>)
 8100acc:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100ad0:	4a38      	ldr	r2, [pc, #224]	; (8100bb4 <main+0x130>)
 8100ad2:	f043 0301 	orr.w	r3, r3, #1
 8100ad6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8100ada:	e007      	b.n	8100aec <main+0x68>
 8100adc:	4b35      	ldr	r3, [pc, #212]	; (8100bb4 <main+0x130>)
 8100ade:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100ae2:	4a34      	ldr	r2, [pc, #208]	; (8100bb4 <main+0x130>)
 8100ae4:	f043 0301 	orr.w	r3, r3, #1
 8100ae8:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100aec:	f000 fe3a 	bl	8101764 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100af0:	f000 fbba 	bl	8101268 <MX_GPIO_Init>
  MX_TIM17_Init();
 8100af4:	f000 fb90 	bl	8101218 <MX_TIM17_Init>
  MX_RTC_Init();
 8100af8:	f000 fad2 	bl	81010a0 <MX_RTC_Init>
  MX_I2C2_Init();
 8100afc:	f000 fa90 	bl	8101020 <MX_I2C2_Init>
  MX_SPI4_Init();
 8100b00:	f000 fb34 	bl	810116c <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */

  //HAL_TIM_Base_Start_IT(&htim17);

  //// Start sync EXIN RTC
  EXIN_RTC_SYNC(&hi2c2,&hrtc);
 8100b04:	492c      	ldr	r1, [pc, #176]	; (8100bb8 <main+0x134>)
 8100b06:	482d      	ldr	r0, [pc, #180]	; (8100bbc <main+0x138>)
 8100b08:	f7ff fc6e 	bl	81003e8 <EXIN_RTC_SYNC>
  MFRC522_HardResetSet();
 8100b0c:	f7ff ffa6 	bl	8100a5c <MFRC522_HardResetSet>
  MFRC522_Init();
 8100b10:	f7ff fd45 	bl	810059e <MFRC522_Init>
  //// MFRC522 version 2.0 software version is: 92h
  rc522_version = Read_MFRC522(VersionReg);
 8100b14:	2037      	movs	r0, #55	; 0x37
 8100b16:	f7ff fccf 	bl	81004b8 <Read_MFRC522>
 8100b1a:	4603      	mov	r3, r0
 8100b1c:	461a      	mov	r2, r3
 8100b1e:	4b28      	ldr	r3, [pc, #160]	; (8100bc0 <main+0x13c>)
 8100b20:	701a      	strb	r2, [r3, #0]
	  //SRAM4->state1 = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
	  //chk2 = SRAM4->state1;
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GetTick() - timestamp_one >= 500){
 8100b22:	f000 fec7 	bl	81018b4 <HAL_GetTick>
 8100b26:	4602      	mov	r2, r0
 8100b28:	4b26      	ldr	r3, [pc, #152]	; (8100bc4 <main+0x140>)
 8100b2a:	681b      	ldr	r3, [r3, #0]
 8100b2c:	1ad3      	subs	r3, r2, r3
 8100b2e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8100b32:	d32e      	bcc.n	8100b92 <main+0x10e>
		  timestamp_one = HAL_GetTick();
 8100b34:	f000 febe 	bl	81018b4 <HAL_GetTick>
 8100b38:	4603      	mov	r3, r0
 8100b3a:	4a22      	ldr	r2, [pc, #136]	; (8100bc4 <main+0x140>)
 8100b3c:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8100b3e:	2102      	movs	r1, #2
 8100b40:	4821      	ldr	r0, [pc, #132]	; (8100bc8 <main+0x144>)
 8100b42:	f001 f9d4 	bl	8101eee <HAL_GPIO_TogglePin>

		  DS3231_Read(&hi2c2);
 8100b46:	481d      	ldr	r0, [pc, #116]	; (8100bbc <main+0x138>)
 8100b48:	f7ff fc32 	bl	81003b0 <DS3231_Read>

		  if(HAL_HSEM_Take(1, 1) == HAL_OK){
 8100b4c:	2101      	movs	r1, #1
 8100b4e:	2001      	movs	r0, #1
 8100b50:	f001 f9e8 	bl	8101f24 <HAL_HSEM_Take>
 8100b54:	4603      	mov	r3, r0
 8100b56:	2b00      	cmp	r3, #0
 8100b58:	d11b      	bne.n	8100b92 <main+0x10e>
		  //read RTC NEED TO READ BOTH IN OTHER
		  HAL_RTC_GetTime(&hrtc, &NowTime, RTC_FORMAT_BCD);
 8100b5a:	2201      	movs	r2, #1
 8100b5c:	491b      	ldr	r1, [pc, #108]	; (8100bcc <main+0x148>)
 8100b5e:	4816      	ldr	r0, [pc, #88]	; (8100bb8 <main+0x134>)
 8100b60:	f003 fa7f 	bl	8104062 <HAL_RTC_GetTime>
		  HAL_RTC_GetDate(&hrtc, &NowDate, RTC_FORMAT_BCD);
 8100b64:	2201      	movs	r2, #1
 8100b66:	491a      	ldr	r1, [pc, #104]	; (8100bd0 <main+0x14c>)
 8100b68:	4813      	ldr	r0, [pc, #76]	; (8100bb8 <main+0x134>)
 8100b6a:	f003 fb5d 	bl	8104228 <HAL_RTC_GetDate>
		  SRAM4->NowTimes = NowTime;
 8100b6e:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8100b72:	4a16      	ldr	r2, [pc, #88]	; (8100bcc <main+0x148>)
 8100b74:	1d1c      	adds	r4, r3, #4
 8100b76:	4615      	mov	r5, r2
 8100b78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8100b7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8100b7c:	682b      	ldr	r3, [r5, #0]
 8100b7e:	6023      	str	r3, [r4, #0]
		  SRAM4->NowDates = NowDate;
 8100b80:	f04f 5260 	mov.w	r2, #939524096	; 0x38000000
 8100b84:	4b12      	ldr	r3, [pc, #72]	; (8100bd0 <main+0x14c>)
 8100b86:	681b      	ldr	r3, [r3, #0]
 8100b88:	6193      	str	r3, [r2, #24]

		  HAL_HSEM_Release(1, 1);
 8100b8a:	2101      	movs	r1, #1
 8100b8c:	2001      	movs	r0, #1
 8100b8e:	f001 f9ed 	bl	8101f6c <HAL_HSEM_Release>
		  	  }

	  }

	  if(HAL_GetTick() - timestamp_two >= 5000){
 8100b92:	f000 fe8f 	bl	81018b4 <HAL_GetTick>
 8100b96:	4602      	mov	r2, r0
 8100b98:	4b0e      	ldr	r3, [pc, #56]	; (8100bd4 <main+0x150>)
 8100b9a:	681b      	ldr	r3, [r3, #0]
 8100b9c:	1ad3      	subs	r3, r2, r3
 8100b9e:	f241 3287 	movw	r2, #4999	; 0x1387
 8100ba2:	4293      	cmp	r3, r2
 8100ba4:	d9bd      	bls.n	8100b22 <main+0x9e>
//		  //HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
//		  }
//		  HAL_Delay(500);
//		  //// test-------------------------

		  for (int i = 0; i < 16; i++) {
 8100ba6:	2300      	movs	r3, #0
 8100ba8:	60fb      	str	r3, [r7, #12]
 8100baa:	e01d      	b.n	8100be8 <main+0x164>
 8100bac:	58024400 	.word	0x58024400
 8100bb0:	e000ed00 	.word	0xe000ed00
 8100bb4:	58026400 	.word	0x58026400
 8100bb8:	1000011c 	.word	0x1000011c
 8100bbc:	100000d0 	.word	0x100000d0
 8100bc0:	10000240 	.word	0x10000240
 8100bc4:	10000220 	.word	0x10000220
 8100bc8:	58021000 	.word	0x58021000
 8100bcc:	10000228 	.word	0x10000228
 8100bd0:	1000023c 	.word	0x1000023c
 8100bd4:	10000224 	.word	0x10000224
			  cardstr[i] = 0;
 8100bd8:	4a97      	ldr	r2, [pc, #604]	; (8100e38 <main+0x3b4>)
 8100bda:	68fb      	ldr	r3, [r7, #12]
 8100bdc:	4413      	add	r3, r2
 8100bde:	2200      	movs	r2, #0
 8100be0:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < 16; i++) {
 8100be2:	68fb      	ldr	r3, [r7, #12]
 8100be4:	3301      	adds	r3, #1
 8100be6:	60fb      	str	r3, [r7, #12]
 8100be8:	68fb      	ldr	r3, [r7, #12]
 8100bea:	2b0f      	cmp	r3, #15
 8100bec:	ddf4      	ble.n	8100bd8 <main+0x154>
		  }
		  status_522 = 0;
 8100bee:	4b93      	ldr	r3, [pc, #588]	; (8100e3c <main+0x3b8>)
 8100bf0:	2200      	movs	r2, #0
 8100bf2:	701a      	strb	r2, [r3, #0]
		  // Find cards
		  stcnt[0]++;
 8100bf4:	4b92      	ldr	r3, [pc, #584]	; (8100e40 <main+0x3bc>)
 8100bf6:	781b      	ldrb	r3, [r3, #0]
 8100bf8:	3301      	adds	r3, #1
 8100bfa:	b2da      	uxtb	r2, r3
 8100bfc:	4b90      	ldr	r3, [pc, #576]	; (8100e40 <main+0x3bc>)
 8100bfe:	701a      	strb	r2, [r3, #0]
		  status_522 = MFRC522_Request(PICC_REQIDL, cardstr);
 8100c00:	498d      	ldr	r1, [pc, #564]	; (8100e38 <main+0x3b4>)
 8100c02:	2026      	movs	r0, #38	; 0x26
 8100c04:	f7ff fceb 	bl	81005de <MFRC522_Request>
 8100c08:	4603      	mov	r3, r0
 8100c0a:	461a      	mov	r2, r3
 8100c0c:	4b8b      	ldr	r3, [pc, #556]	; (8100e3c <main+0x3b8>)
 8100c0e:	701a      	strb	r2, [r3, #0]
		  if(status_522 == MI_OK) {
 8100c10:	4b8a      	ldr	r3, [pc, #552]	; (8100e3c <main+0x3b8>)
 8100c12:	781b      	ldrb	r3, [r3, #0]
 8100c14:	2b00      	cmp	r3, #0
 8100c16:	d184      	bne.n	8100b22 <main+0x9e>
			  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8100c18:	2101      	movs	r1, #1
 8100c1a:	488a      	ldr	r0, [pc, #552]	; (8100e44 <main+0x3c0>)
 8100c1c:	f001 f967 	bl	8101eee <HAL_GPIO_TogglePin>
			  //LED2_GPIO_Port -> BSRR = LED2_Pin;
			  result = 0;
 8100c20:	4b89      	ldr	r3, [pc, #548]	; (8100e48 <main+0x3c4>)
 8100c22:	2200      	movs	r2, #0
 8100c24:	801a      	strh	r2, [r3, #0]
			  result++;
 8100c26:	4b88      	ldr	r3, [pc, #544]	; (8100e48 <main+0x3c4>)
 8100c28:	881b      	ldrh	r3, [r3, #0]
 8100c2a:	3301      	adds	r3, #1
 8100c2c:	b29a      	uxth	r2, r3
 8100c2e:	4b86      	ldr	r3, [pc, #536]	; (8100e48 <main+0x3c4>)
 8100c30:	801a      	strh	r2, [r3, #0]
			  sprintf(str1,"Card:%x,%x,%x", cardstr[0], cardstr[1], cardstr[2]);
 8100c32:	4b81      	ldr	r3, [pc, #516]	; (8100e38 <main+0x3b4>)
 8100c34:	781b      	ldrb	r3, [r3, #0]
 8100c36:	461a      	mov	r2, r3
 8100c38:	4b7f      	ldr	r3, [pc, #508]	; (8100e38 <main+0x3b4>)
 8100c3a:	785b      	ldrb	r3, [r3, #1]
 8100c3c:	4619      	mov	r1, r3
 8100c3e:	4b7e      	ldr	r3, [pc, #504]	; (8100e38 <main+0x3b4>)
 8100c40:	789b      	ldrb	r3, [r3, #2]
 8100c42:	9300      	str	r3, [sp, #0]
 8100c44:	460b      	mov	r3, r1
 8100c46:	4981      	ldr	r1, [pc, #516]	; (8100e4c <main+0x3c8>)
 8100c48:	4881      	ldr	r0, [pc, #516]	; (8100e50 <main+0x3cc>)
 8100c4a:	f004 fe73 	bl	8105934 <siprintf>
			  //
			  // Anti-collision, return card serial number == 4 bytes
			  //DWT_Delay_ms(1);
			  HAL_Delay(1);
 8100c4e:	2001      	movs	r0, #1
 8100c50:	f000 fe3c 	bl	81018cc <HAL_Delay>

			  stcnt[1]++;
 8100c54:	4b7a      	ldr	r3, [pc, #488]	; (8100e40 <main+0x3bc>)
 8100c56:	785b      	ldrb	r3, [r3, #1]
 8100c58:	3301      	adds	r3, #1
 8100c5a:	b2da      	uxtb	r2, r3
 8100c5c:	4b78      	ldr	r3, [pc, #480]	; (8100e40 <main+0x3bc>)
 8100c5e:	705a      	strb	r2, [r3, #1]
			  status_5221 = MFRC522_Anticoll(cardstr);
 8100c60:	4875      	ldr	r0, [pc, #468]	; (8100e38 <main+0x3b4>)
 8100c62:	f7ff fdaa 	bl	81007ba <MFRC522_Anticoll>
 8100c66:	4603      	mov	r3, r0
 8100c68:	461a      	mov	r2, r3
 8100c6a:	4b7a      	ldr	r3, [pc, #488]	; (8100e54 <main+0x3d0>)
 8100c6c:	701a      	strb	r2, [r3, #0]
			  if(status_5221 == MI_OK) {
 8100c6e:	4b79      	ldr	r3, [pc, #484]	; (8100e54 <main+0x3d0>)
 8100c70:	781b      	ldrb	r3, [r3, #0]
 8100c72:	2b00      	cmp	r3, #0
 8100c74:	f040 81b3 	bne.w	8100fde <main+0x55a>

				  result++;
 8100c78:	4b73      	ldr	r3, [pc, #460]	; (8100e48 <main+0x3c4>)
 8100c7a:	881b      	ldrh	r3, [r3, #0]
 8100c7c:	3301      	adds	r3, #1
 8100c7e:	b29a      	uxth	r2, r3
 8100c80:	4b71      	ldr	r3, [pc, #452]	; (8100e48 <main+0x3c4>)
 8100c82:	801a      	strh	r2, [r3, #0]
				  sprintf(str2,"UID:%x %x %x %x", cardstr[0], cardstr[1], cardstr[2], cardstr[3]);
 8100c84:	4b6c      	ldr	r3, [pc, #432]	; (8100e38 <main+0x3b4>)
 8100c86:	781b      	ldrb	r3, [r3, #0]
 8100c88:	4619      	mov	r1, r3
 8100c8a:	4b6b      	ldr	r3, [pc, #428]	; (8100e38 <main+0x3b4>)
 8100c8c:	785b      	ldrb	r3, [r3, #1]
 8100c8e:	4618      	mov	r0, r3
 8100c90:	4b69      	ldr	r3, [pc, #420]	; (8100e38 <main+0x3b4>)
 8100c92:	789b      	ldrb	r3, [r3, #2]
 8100c94:	461a      	mov	r2, r3
 8100c96:	4b68      	ldr	r3, [pc, #416]	; (8100e38 <main+0x3b4>)
 8100c98:	78db      	ldrb	r3, [r3, #3]
 8100c9a:	9301      	str	r3, [sp, #4]
 8100c9c:	9200      	str	r2, [sp, #0]
 8100c9e:	4603      	mov	r3, r0
 8100ca0:	460a      	mov	r2, r1
 8100ca2:	496d      	ldr	r1, [pc, #436]	; (8100e58 <main+0x3d4>)
 8100ca4:	486d      	ldr	r0, [pc, #436]	; (8100e5c <main+0x3d8>)
 8100ca6:	f004 fe45 	bl	8105934 <siprintf>
				  UID[0] = cardstr[0];
 8100caa:	4b63      	ldr	r3, [pc, #396]	; (8100e38 <main+0x3b4>)
 8100cac:	781a      	ldrb	r2, [r3, #0]
 8100cae:	4b6c      	ldr	r3, [pc, #432]	; (8100e60 <main+0x3dc>)
 8100cb0:	701a      	strb	r2, [r3, #0]
				  UID[1] = cardstr[1];
 8100cb2:	4b61      	ldr	r3, [pc, #388]	; (8100e38 <main+0x3b4>)
 8100cb4:	785a      	ldrb	r2, [r3, #1]
 8100cb6:	4b6a      	ldr	r3, [pc, #424]	; (8100e60 <main+0x3dc>)
 8100cb8:	705a      	strb	r2, [r3, #1]
				  UID[2] = cardstr[2];
 8100cba:	4b5f      	ldr	r3, [pc, #380]	; (8100e38 <main+0x3b4>)
 8100cbc:	789a      	ldrb	r2, [r3, #2]
 8100cbe:	4b68      	ldr	r3, [pc, #416]	; (8100e60 <main+0x3dc>)
 8100cc0:	709a      	strb	r2, [r3, #2]
				  UID[3] = cardstr[3];
 8100cc2:	4b5d      	ldr	r3, [pc, #372]	; (8100e38 <main+0x3b4>)
 8100cc4:	78da      	ldrb	r2, [r3, #3]
 8100cc6:	4b66      	ldr	r3, [pc, #408]	; (8100e60 <main+0x3dc>)
 8100cc8:	70da      	strb	r2, [r3, #3]
				  UID[4] = cardstr[4];
 8100cca:	4b5b      	ldr	r3, [pc, #364]	; (8100e38 <main+0x3b4>)
 8100ccc:	791a      	ldrb	r2, [r3, #4]
 8100cce:	4b64      	ldr	r3, [pc, #400]	; (8100e60 <main+0x3dc>)
 8100cd0:	711a      	strb	r2, [r3, #4]

				  stcnt[2]++;
 8100cd2:	4b5b      	ldr	r3, [pc, #364]	; (8100e40 <main+0x3bc>)
 8100cd4:	789b      	ldrb	r3, [r3, #2]
 8100cd6:	3301      	adds	r3, #1
 8100cd8:	b2da      	uxtb	r2, r3
 8100cda:	4b59      	ldr	r3, [pc, #356]	; (8100e40 <main+0x3bc>)
 8100cdc:	709a      	strb	r2, [r3, #2]
				  //DWT_Delay_ms(1);
				  HAL_Delay(1);
 8100cde:	2001      	movs	r0, #1
 8100ce0:	f000 fdf4 	bl	81018cc <HAL_Delay>
				  status_522 = MFRC522_SelectTag(cardstr);
 8100ce4:	4854      	ldr	r0, [pc, #336]	; (8100e38 <main+0x3b4>)
 8100ce6:	f7ff fe51 	bl	810098c <MFRC522_SelectTag>
 8100cea:	4603      	mov	r3, r0
 8100cec:	461a      	mov	r2, r3
 8100cee:	4b53      	ldr	r3, [pc, #332]	; (8100e3c <main+0x3b8>)
 8100cf0:	701a      	strb	r2, [r3, #0]
				  if (status_522 > 0){
 8100cf2:	4b52      	ldr	r3, [pc, #328]	; (8100e3c <main+0x3b8>)
 8100cf4:	781b      	ldrb	r3, [r3, #0]
 8100cf6:	2b00      	cmp	r3, #0
 8100cf8:	f000 8152 	beq.w	8100fa0 <main+0x51c>
					  result++;
 8100cfc:	4b52      	ldr	r3, [pc, #328]	; (8100e48 <main+0x3c4>)
 8100cfe:	881b      	ldrh	r3, [r3, #0]
 8100d00:	3301      	adds	r3, #1
 8100d02:	b29a      	uxth	r2, r3
 8100d04:	4b50      	ldr	r3, [pc, #320]	; (8100e48 <main+0x3c4>)
 8100d06:	801a      	strh	r2, [r3, #0]
					  //
					  SectorKey[0] = ((Mx1[0][0])^(UID[0])) + ((Mx1[0][1])^(UID[1])) + ((Mx1[0][2])^(UID[2])) + ((Mx1[0][3])^(UID[3]));// 0x11; //KeyA[0]
 8100d08:	4b56      	ldr	r3, [pc, #344]	; (8100e64 <main+0x3e0>)
 8100d0a:	781a      	ldrb	r2, [r3, #0]
 8100d0c:	4b54      	ldr	r3, [pc, #336]	; (8100e60 <main+0x3dc>)
 8100d0e:	781b      	ldrb	r3, [r3, #0]
 8100d10:	4053      	eors	r3, r2
 8100d12:	b2da      	uxtb	r2, r3
 8100d14:	4b53      	ldr	r3, [pc, #332]	; (8100e64 <main+0x3e0>)
 8100d16:	7859      	ldrb	r1, [r3, #1]
 8100d18:	4b51      	ldr	r3, [pc, #324]	; (8100e60 <main+0x3dc>)
 8100d1a:	785b      	ldrb	r3, [r3, #1]
 8100d1c:	404b      	eors	r3, r1
 8100d1e:	b2db      	uxtb	r3, r3
 8100d20:	4413      	add	r3, r2
 8100d22:	b2da      	uxtb	r2, r3
 8100d24:	4b4f      	ldr	r3, [pc, #316]	; (8100e64 <main+0x3e0>)
 8100d26:	7899      	ldrb	r1, [r3, #2]
 8100d28:	4b4d      	ldr	r3, [pc, #308]	; (8100e60 <main+0x3dc>)
 8100d2a:	789b      	ldrb	r3, [r3, #2]
 8100d2c:	404b      	eors	r3, r1
 8100d2e:	b2db      	uxtb	r3, r3
 8100d30:	4413      	add	r3, r2
 8100d32:	b2da      	uxtb	r2, r3
 8100d34:	4b4b      	ldr	r3, [pc, #300]	; (8100e64 <main+0x3e0>)
 8100d36:	78d9      	ldrb	r1, [r3, #3]
 8100d38:	4b49      	ldr	r3, [pc, #292]	; (8100e60 <main+0x3dc>)
 8100d3a:	78db      	ldrb	r3, [r3, #3]
 8100d3c:	404b      	eors	r3, r1
 8100d3e:	b2db      	uxtb	r3, r3
 8100d40:	4413      	add	r3, r2
 8100d42:	b2da      	uxtb	r2, r3
 8100d44:	4b48      	ldr	r3, [pc, #288]	; (8100e68 <main+0x3e4>)
 8100d46:	701a      	strb	r2, [r3, #0]
					  SectorKey[1] = ((Mx1[1][0])^(UID[0])) + ((Mx1[1][1])^(UID[1])) + ((Mx1[1][2])^(UID[2])) + ((Mx1[1][3])^(UID[3]));// 0x11; //KeyA[0]
 8100d48:	4b46      	ldr	r3, [pc, #280]	; (8100e64 <main+0x3e0>)
 8100d4a:	795a      	ldrb	r2, [r3, #5]
 8100d4c:	4b44      	ldr	r3, [pc, #272]	; (8100e60 <main+0x3dc>)
 8100d4e:	781b      	ldrb	r3, [r3, #0]
 8100d50:	4053      	eors	r3, r2
 8100d52:	b2da      	uxtb	r2, r3
 8100d54:	4b43      	ldr	r3, [pc, #268]	; (8100e64 <main+0x3e0>)
 8100d56:	7999      	ldrb	r1, [r3, #6]
 8100d58:	4b41      	ldr	r3, [pc, #260]	; (8100e60 <main+0x3dc>)
 8100d5a:	785b      	ldrb	r3, [r3, #1]
 8100d5c:	404b      	eors	r3, r1
 8100d5e:	b2db      	uxtb	r3, r3
 8100d60:	4413      	add	r3, r2
 8100d62:	b2da      	uxtb	r2, r3
 8100d64:	4b3f      	ldr	r3, [pc, #252]	; (8100e64 <main+0x3e0>)
 8100d66:	79d9      	ldrb	r1, [r3, #7]
 8100d68:	4b3d      	ldr	r3, [pc, #244]	; (8100e60 <main+0x3dc>)
 8100d6a:	789b      	ldrb	r3, [r3, #2]
 8100d6c:	404b      	eors	r3, r1
 8100d6e:	b2db      	uxtb	r3, r3
 8100d70:	4413      	add	r3, r2
 8100d72:	b2da      	uxtb	r2, r3
 8100d74:	4b3b      	ldr	r3, [pc, #236]	; (8100e64 <main+0x3e0>)
 8100d76:	7a19      	ldrb	r1, [r3, #8]
 8100d78:	4b39      	ldr	r3, [pc, #228]	; (8100e60 <main+0x3dc>)
 8100d7a:	78db      	ldrb	r3, [r3, #3]
 8100d7c:	404b      	eors	r3, r1
 8100d7e:	b2db      	uxtb	r3, r3
 8100d80:	4413      	add	r3, r2
 8100d82:	b2da      	uxtb	r2, r3
 8100d84:	4b38      	ldr	r3, [pc, #224]	; (8100e68 <main+0x3e4>)
 8100d86:	705a      	strb	r2, [r3, #1]
					  SectorKey[2] = ((Mx1[2][0])^(UID[0])) + ((Mx1[2][1])^(UID[1])) + ((Mx1[2][2])^(UID[2])) + ((Mx1[2][3])^(UID[3]));// 0x11; //KeyA[0]
 8100d88:	4b36      	ldr	r3, [pc, #216]	; (8100e64 <main+0x3e0>)
 8100d8a:	7a9a      	ldrb	r2, [r3, #10]
 8100d8c:	4b34      	ldr	r3, [pc, #208]	; (8100e60 <main+0x3dc>)
 8100d8e:	781b      	ldrb	r3, [r3, #0]
 8100d90:	4053      	eors	r3, r2
 8100d92:	b2da      	uxtb	r2, r3
 8100d94:	4b33      	ldr	r3, [pc, #204]	; (8100e64 <main+0x3e0>)
 8100d96:	7ad9      	ldrb	r1, [r3, #11]
 8100d98:	4b31      	ldr	r3, [pc, #196]	; (8100e60 <main+0x3dc>)
 8100d9a:	785b      	ldrb	r3, [r3, #1]
 8100d9c:	404b      	eors	r3, r1
 8100d9e:	b2db      	uxtb	r3, r3
 8100da0:	4413      	add	r3, r2
 8100da2:	b2da      	uxtb	r2, r3
 8100da4:	4b2f      	ldr	r3, [pc, #188]	; (8100e64 <main+0x3e0>)
 8100da6:	7b19      	ldrb	r1, [r3, #12]
 8100da8:	4b2d      	ldr	r3, [pc, #180]	; (8100e60 <main+0x3dc>)
 8100daa:	789b      	ldrb	r3, [r3, #2]
 8100dac:	404b      	eors	r3, r1
 8100dae:	b2db      	uxtb	r3, r3
 8100db0:	4413      	add	r3, r2
 8100db2:	b2da      	uxtb	r2, r3
 8100db4:	4b2b      	ldr	r3, [pc, #172]	; (8100e64 <main+0x3e0>)
 8100db6:	7b59      	ldrb	r1, [r3, #13]
 8100db8:	4b29      	ldr	r3, [pc, #164]	; (8100e60 <main+0x3dc>)
 8100dba:	78db      	ldrb	r3, [r3, #3]
 8100dbc:	404b      	eors	r3, r1
 8100dbe:	b2db      	uxtb	r3, r3
 8100dc0:	4413      	add	r3, r2
 8100dc2:	b2da      	uxtb	r2, r3
 8100dc4:	4b28      	ldr	r3, [pc, #160]	; (8100e68 <main+0x3e4>)
 8100dc6:	709a      	strb	r2, [r3, #2]
					  SectorKey[3] = ((Mx1[3][0])^(UID[0])) + ((Mx1[3][1])^(UID[1])) + ((Mx1[3][2])^(UID[2])) + ((Mx1[3][3])^(UID[3]));// 0x11; //KeyA[0]
 8100dc8:	4b26      	ldr	r3, [pc, #152]	; (8100e64 <main+0x3e0>)
 8100dca:	7bda      	ldrb	r2, [r3, #15]
 8100dcc:	4b24      	ldr	r3, [pc, #144]	; (8100e60 <main+0x3dc>)
 8100dce:	781b      	ldrb	r3, [r3, #0]
 8100dd0:	4053      	eors	r3, r2
 8100dd2:	b2da      	uxtb	r2, r3
 8100dd4:	4b23      	ldr	r3, [pc, #140]	; (8100e64 <main+0x3e0>)
 8100dd6:	7c19      	ldrb	r1, [r3, #16]
 8100dd8:	4b21      	ldr	r3, [pc, #132]	; (8100e60 <main+0x3dc>)
 8100dda:	785b      	ldrb	r3, [r3, #1]
 8100ddc:	404b      	eors	r3, r1
 8100dde:	b2db      	uxtb	r3, r3
 8100de0:	4413      	add	r3, r2
 8100de2:	b2da      	uxtb	r2, r3
 8100de4:	4b1f      	ldr	r3, [pc, #124]	; (8100e64 <main+0x3e0>)
 8100de6:	7c59      	ldrb	r1, [r3, #17]
 8100de8:	4b1d      	ldr	r3, [pc, #116]	; (8100e60 <main+0x3dc>)
 8100dea:	789b      	ldrb	r3, [r3, #2]
 8100dec:	404b      	eors	r3, r1
 8100dee:	b2db      	uxtb	r3, r3
 8100df0:	4413      	add	r3, r2
 8100df2:	b2da      	uxtb	r2, r3
 8100df4:	4b1b      	ldr	r3, [pc, #108]	; (8100e64 <main+0x3e0>)
 8100df6:	7c99      	ldrb	r1, [r3, #18]
 8100df8:	4b19      	ldr	r3, [pc, #100]	; (8100e60 <main+0x3dc>)
 8100dfa:	78db      	ldrb	r3, [r3, #3]
 8100dfc:	404b      	eors	r3, r1
 8100dfe:	b2db      	uxtb	r3, r3
 8100e00:	4413      	add	r3, r2
 8100e02:	b2da      	uxtb	r2, r3
 8100e04:	4b18      	ldr	r3, [pc, #96]	; (8100e68 <main+0x3e4>)
 8100e06:	70da      	strb	r2, [r3, #3]
					  SectorKey[4] = ((Mx1[4][0])^(UID[0])) + ((Mx1[4][1])^(UID[1])) + ((Mx1[4][2])^(UID[2])) + ((Mx1[4][3])^(UID[3]));// 0x11; //KeyA[0]
 8100e08:	4b16      	ldr	r3, [pc, #88]	; (8100e64 <main+0x3e0>)
 8100e0a:	7d1a      	ldrb	r2, [r3, #20]
 8100e0c:	4b14      	ldr	r3, [pc, #80]	; (8100e60 <main+0x3dc>)
 8100e0e:	781b      	ldrb	r3, [r3, #0]
 8100e10:	4053      	eors	r3, r2
 8100e12:	b2da      	uxtb	r2, r3
 8100e14:	4b13      	ldr	r3, [pc, #76]	; (8100e64 <main+0x3e0>)
 8100e16:	7d59      	ldrb	r1, [r3, #21]
 8100e18:	4b11      	ldr	r3, [pc, #68]	; (8100e60 <main+0x3dc>)
 8100e1a:	785b      	ldrb	r3, [r3, #1]
 8100e1c:	404b      	eors	r3, r1
 8100e1e:	b2db      	uxtb	r3, r3
 8100e20:	4413      	add	r3, r2
 8100e22:	b2da      	uxtb	r2, r3
 8100e24:	4b0f      	ldr	r3, [pc, #60]	; (8100e64 <main+0x3e0>)
 8100e26:	7d99      	ldrb	r1, [r3, #22]
 8100e28:	4b0d      	ldr	r3, [pc, #52]	; (8100e60 <main+0x3dc>)
 8100e2a:	789b      	ldrb	r3, [r3, #2]
 8100e2c:	404b      	eors	r3, r1
 8100e2e:	b2db      	uxtb	r3, r3
 8100e30:	4413      	add	r3, r2
 8100e32:	b2da      	uxtb	r2, r3
 8100e34:	e01a      	b.n	8100e6c <main+0x3e8>
 8100e36:	bf00      	nop
 8100e38:	10000254 	.word	0x10000254
 8100e3c:	10000251 	.word	0x10000251
 8100e40:	10000244 	.word	0x10000244
 8100e44:	58020400 	.word	0x58020400
 8100e48:	10000266 	.word	0x10000266
 8100e4c:	08106228 	.word	0x08106228
 8100e50:	10000268 	.word	0x10000268
 8100e54:	10000241 	.word	0x10000241
 8100e58:	08106238 	.word	0x08106238
 8100e5c:	1000027c 	.word	0x1000027c
 8100e60:	1000024c 	.word	0x1000024c
 8100e64:	1000000c 	.word	0x1000000c
 8100e68:	100002b8 	.word	0x100002b8
 8100e6c:	4b5e      	ldr	r3, [pc, #376]	; (8100fe8 <main+0x564>)
 8100e6e:	7dd9      	ldrb	r1, [r3, #23]
 8100e70:	4b5e      	ldr	r3, [pc, #376]	; (8100fec <main+0x568>)
 8100e72:	78db      	ldrb	r3, [r3, #3]
 8100e74:	404b      	eors	r3, r1
 8100e76:	b2db      	uxtb	r3, r3
 8100e78:	4413      	add	r3, r2
 8100e7a:	b2da      	uxtb	r2, r3
 8100e7c:	4b5c      	ldr	r3, [pc, #368]	; (8100ff0 <main+0x56c>)
 8100e7e:	711a      	strb	r2, [r3, #4]
					  SectorKey[5] = ((Mx1[5][0])^(UID[0])) + ((Mx1[5][1])^(UID[1])) + ((Mx1[5][2])^(UID[2])) + ((Mx1[5][3])^(UID[3]));// 0x11; //KeyA[0]
 8100e80:	4b59      	ldr	r3, [pc, #356]	; (8100fe8 <main+0x564>)
 8100e82:	7e5a      	ldrb	r2, [r3, #25]
 8100e84:	4b59      	ldr	r3, [pc, #356]	; (8100fec <main+0x568>)
 8100e86:	781b      	ldrb	r3, [r3, #0]
 8100e88:	4053      	eors	r3, r2
 8100e8a:	b2da      	uxtb	r2, r3
 8100e8c:	4b56      	ldr	r3, [pc, #344]	; (8100fe8 <main+0x564>)
 8100e8e:	7e99      	ldrb	r1, [r3, #26]
 8100e90:	4b56      	ldr	r3, [pc, #344]	; (8100fec <main+0x568>)
 8100e92:	785b      	ldrb	r3, [r3, #1]
 8100e94:	404b      	eors	r3, r1
 8100e96:	b2db      	uxtb	r3, r3
 8100e98:	4413      	add	r3, r2
 8100e9a:	b2da      	uxtb	r2, r3
 8100e9c:	4b52      	ldr	r3, [pc, #328]	; (8100fe8 <main+0x564>)
 8100e9e:	7ed9      	ldrb	r1, [r3, #27]
 8100ea0:	4b52      	ldr	r3, [pc, #328]	; (8100fec <main+0x568>)
 8100ea2:	789b      	ldrb	r3, [r3, #2]
 8100ea4:	404b      	eors	r3, r1
 8100ea6:	b2db      	uxtb	r3, r3
 8100ea8:	4413      	add	r3, r2
 8100eaa:	b2da      	uxtb	r2, r3
 8100eac:	4b4e      	ldr	r3, [pc, #312]	; (8100fe8 <main+0x564>)
 8100eae:	7f19      	ldrb	r1, [r3, #28]
 8100eb0:	4b4e      	ldr	r3, [pc, #312]	; (8100fec <main+0x568>)
 8100eb2:	78db      	ldrb	r3, [r3, #3]
 8100eb4:	404b      	eors	r3, r1
 8100eb6:	b2db      	uxtb	r3, r3
 8100eb8:	4413      	add	r3, r2
 8100eba:	b2da      	uxtb	r2, r3
 8100ebc:	4b4c      	ldr	r3, [pc, #304]	; (8100ff0 <main+0x56c>)
 8100ebe:	715a      	strb	r2, [r3, #5]
					  //DWT_Delay_ms(1);
					  HAL_Delay(1);
 8100ec0:	2001      	movs	r0, #1
 8100ec2:	f000 fd03 	bl	81018cc <HAL_Delay>
					  status_522 = MFRC522_Auth(0x60, 3, SectorKey, cardstr);
 8100ec6:	4b4b      	ldr	r3, [pc, #300]	; (8100ff4 <main+0x570>)
 8100ec8:	4a49      	ldr	r2, [pc, #292]	; (8100ff0 <main+0x56c>)
 8100eca:	2103      	movs	r1, #3
 8100ecc:	2060      	movs	r0, #96	; 0x60
 8100ece:	f7ff fcfa 	bl	81008c6 <MFRC522_Auth>
 8100ed2:	4603      	mov	r3, r0
 8100ed4:	461a      	mov	r2, r3
 8100ed6:	4b48      	ldr	r3, [pc, #288]	; (8100ff8 <main+0x574>)
 8100ed8:	701a      	strb	r2, [r3, #0]
					  if (status_522 == MI_OK){
 8100eda:	4b47      	ldr	r3, [pc, #284]	; (8100ff8 <main+0x574>)
 8100edc:	781b      	ldrb	r3, [r3, #0]
 8100ede:	2b00      	cmp	r3, #0
 8100ee0:	d10a      	bne.n	8100ef8 <main+0x474>
						  result++;
 8100ee2:	4b46      	ldr	r3, [pc, #280]	; (8100ffc <main+0x578>)
 8100ee4:	881b      	ldrh	r3, [r3, #0]
 8100ee6:	3301      	adds	r3, #1
 8100ee8:	b29a      	uxth	r2, r3
 8100eea:	4b44      	ldr	r3, [pc, #272]	; (8100ffc <main+0x578>)
 8100eec:	801a      	strh	r2, [r3, #0]
						  sprintf(str3, "Auth. OK");
 8100eee:	4944      	ldr	r1, [pc, #272]	; (8101000 <main+0x57c>)
 8100ef0:	4844      	ldr	r0, [pc, #272]	; (8101004 <main+0x580>)
 8100ef2:	f004 fd1f 	bl	8105934 <siprintf>
 8100ef6:	e053      	b.n	8100fa0 <main+0x51c>
//							  }
//
//						  }
					  }
					  else{
						  for (int i = 0; i < 16; i++) {cardstr[i] = 0;}
 8100ef8:	2300      	movs	r3, #0
 8100efa:	60bb      	str	r3, [r7, #8]
 8100efc:	e007      	b.n	8100f0e <main+0x48a>
 8100efe:	4a3d      	ldr	r2, [pc, #244]	; (8100ff4 <main+0x570>)
 8100f00:	68bb      	ldr	r3, [r7, #8]
 8100f02:	4413      	add	r3, r2
 8100f04:	2200      	movs	r2, #0
 8100f06:	701a      	strb	r2, [r3, #0]
 8100f08:	68bb      	ldr	r3, [r7, #8]
 8100f0a:	3301      	adds	r3, #1
 8100f0c:	60bb      	str	r3, [r7, #8]
 8100f0e:	68bb      	ldr	r3, [r7, #8]
 8100f10:	2b0f      	cmp	r3, #15
 8100f12:	ddf4      	ble.n	8100efe <main+0x47a>
						  status_522 = 0;
 8100f14:	4b38      	ldr	r3, [pc, #224]	; (8100ff8 <main+0x574>)
 8100f16:	2200      	movs	r2, #0
 8100f18:	701a      	strb	r2, [r3, #0]
						  // Find cards
						  //DWT_Delay_ms(1);
						  HAL_Delay(1);
 8100f1a:	2001      	movs	r0, #1
 8100f1c:	f000 fcd6 	bl	81018cc <HAL_Delay>
						  status_522 = MFRC522_Request(PICC_REQIDL, cardstr);
 8100f20:	4934      	ldr	r1, [pc, #208]	; (8100ff4 <main+0x570>)
 8100f22:	2026      	movs	r0, #38	; 0x26
 8100f24:	f7ff fb5b 	bl	81005de <MFRC522_Request>
 8100f28:	4603      	mov	r3, r0
 8100f2a:	461a      	mov	r2, r3
 8100f2c:	4b32      	ldr	r3, [pc, #200]	; (8100ff8 <main+0x574>)
 8100f2e:	701a      	strb	r2, [r3, #0]
						  //DWT_Delay_ms(1);
						  HAL_Delay(1);
 8100f30:	2001      	movs	r0, #1
 8100f32:	f000 fccb 	bl	81018cc <HAL_Delay>
						  status_522 = MFRC522_Anticoll(cardstr);
 8100f36:	482f      	ldr	r0, [pc, #188]	; (8100ff4 <main+0x570>)
 8100f38:	f7ff fc3f 	bl	81007ba <MFRC522_Anticoll>
 8100f3c:	4603      	mov	r3, r0
 8100f3e:	461a      	mov	r2, r3
 8100f40:	4b2d      	ldr	r3, [pc, #180]	; (8100ff8 <main+0x574>)
 8100f42:	701a      	strb	r2, [r3, #0]
						  //DWT_Delay_ms(1);
						  HAL_Delay(1);
 8100f44:	2001      	movs	r0, #1
 8100f46:	f000 fcc1 	bl	81018cc <HAL_Delay>
						  status_522 = MFRC522_SelectTag(cardstr);
 8100f4a:	482a      	ldr	r0, [pc, #168]	; (8100ff4 <main+0x570>)
 8100f4c:	f7ff fd1e 	bl	810098c <MFRC522_SelectTag>
 8100f50:	4603      	mov	r3, r0
 8100f52:	461a      	mov	r2, r3
 8100f54:	4b28      	ldr	r3, [pc, #160]	; (8100ff8 <main+0x574>)
 8100f56:	701a      	strb	r2, [r3, #0]
						  SectorKey[0] = 0xFF;
 8100f58:	4b25      	ldr	r3, [pc, #148]	; (8100ff0 <main+0x56c>)
 8100f5a:	22ff      	movs	r2, #255	; 0xff
 8100f5c:	701a      	strb	r2, [r3, #0]
						  SectorKey[1] = 0xFF;
 8100f5e:	4b24      	ldr	r3, [pc, #144]	; (8100ff0 <main+0x56c>)
 8100f60:	22ff      	movs	r2, #255	; 0xff
 8100f62:	705a      	strb	r2, [r3, #1]
						  SectorKey[2] = 0xFF;
 8100f64:	4b22      	ldr	r3, [pc, #136]	; (8100ff0 <main+0x56c>)
 8100f66:	22ff      	movs	r2, #255	; 0xff
 8100f68:	709a      	strb	r2, [r3, #2]
						  SectorKey[3] = 0xFF;
 8100f6a:	4b21      	ldr	r3, [pc, #132]	; (8100ff0 <main+0x56c>)
 8100f6c:	22ff      	movs	r2, #255	; 0xff
 8100f6e:	70da      	strb	r2, [r3, #3]
						  SectorKey[4] = 0xFF;
 8100f70:	4b1f      	ldr	r3, [pc, #124]	; (8100ff0 <main+0x56c>)
 8100f72:	22ff      	movs	r2, #255	; 0xff
 8100f74:	711a      	strb	r2, [r3, #4]
						  SectorKey[5] = 0xFF;
 8100f76:	4b1e      	ldr	r3, [pc, #120]	; (8100ff0 <main+0x56c>)
 8100f78:	22ff      	movs	r2, #255	; 0xff
 8100f7a:	715a      	strb	r2, [r3, #5]
						  //DWT_Delay_ms(1);
						  HAL_Delay(1);
 8100f7c:	2001      	movs	r0, #1
 8100f7e:	f000 fca5 	bl	81018cc <HAL_Delay>
						  status_522 = MFRC522_Auth(0x60, 3, SectorKey, cardstr);
 8100f82:	4b1c      	ldr	r3, [pc, #112]	; (8100ff4 <main+0x570>)
 8100f84:	4a1a      	ldr	r2, [pc, #104]	; (8100ff0 <main+0x56c>)
 8100f86:	2103      	movs	r1, #3
 8100f88:	2060      	movs	r0, #96	; 0x60
 8100f8a:	f7ff fc9c 	bl	81008c6 <MFRC522_Auth>
 8100f8e:	4603      	mov	r3, r0
 8100f90:	461a      	mov	r2, r3
 8100f92:	4b19      	ldr	r3, [pc, #100]	; (8100ff8 <main+0x574>)
 8100f94:	701a      	strb	r2, [r3, #0]
//						  else if (status_522  != MI_OK){
//							  sprintf(str3, "Auth. Error");
//						  }
//					  }
					  //DWT_Delay_ms(1);
					  HAL_Delay(1);
 8100f96:	2001      	movs	r0, #1
 8100f98:	f000 fc98 	bl	81018cc <HAL_Delay>
					  MFRC522_StopCrypto1();
 8100f9c:	f7ff fd56 	bl	8100a4c <MFRC522_StopCrypto1>
				  }
			  }
			  //DWT_Delay_ms(1);
			  HAL_Delay(1);
 8100fa0:	2001      	movs	r0, #1
 8100fa2:	f000 fc93 	bl	81018cc <HAL_Delay>
			  MFRC522_Halt();
 8100fa6:	f7ff fd33 	bl	8100a10 <MFRC522_Halt>
//			  LED2_GPIO_Port -> BRR = LED2_Pin;

			  //DWT_Delay_ms(delay_val);
			  HAL_Delay(delay_val);
 8100faa:	4b17      	ldr	r3, [pc, #92]	; (8101008 <main+0x584>)
 8100fac:	681b      	ldr	r3, [r3, #0]
 8100fae:	4618      	mov	r0, r3
 8100fb0:	f000 fc8c 	bl	81018cc <HAL_Delay>
			  delay_val = 1000;
 8100fb4:	4b14      	ldr	r3, [pc, #80]	; (8101008 <main+0x584>)
 8100fb6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8100fba:	601a      	str	r2, [r3, #0]
			  sprintf(str1, "                ");
 8100fbc:	4913      	ldr	r1, [pc, #76]	; (810100c <main+0x588>)
 8100fbe:	4814      	ldr	r0, [pc, #80]	; (8101010 <main+0x58c>)
 8100fc0:	f004 fcb8 	bl	8105934 <siprintf>
			  sprintf(str2, "                ");
 8100fc4:	4911      	ldr	r1, [pc, #68]	; (810100c <main+0x588>)
 8100fc6:	4813      	ldr	r0, [pc, #76]	; (8101014 <main+0x590>)
 8100fc8:	f004 fcb4 	bl	8105934 <siprintf>
			  sprintf(str3, "                ");
 8100fcc:	490f      	ldr	r1, [pc, #60]	; (810100c <main+0x588>)
 8100fce:	480d      	ldr	r0, [pc, #52]	; (8101004 <main+0x580>)
 8100fd0:	f004 fcb0 	bl	8105934 <siprintf>
			  sprintf(str4, "                ");
 8100fd4:	490d      	ldr	r1, [pc, #52]	; (810100c <main+0x588>)
 8100fd6:	4810      	ldr	r0, [pc, #64]	; (8101018 <main+0x594>)
 8100fd8:	f004 fcac 	bl	8105934 <siprintf>
 8100fdc:	e5a1      	b.n	8100b22 <main+0x9e>
		  }
		  else{
			  sprintf(str1, "Waiting for Card");
 8100fde:	490f      	ldr	r1, [pc, #60]	; (810101c <main+0x598>)
 8100fe0:	480b      	ldr	r0, [pc, #44]	; (8101010 <main+0x58c>)
 8100fe2:	f004 fca7 	bl	8105934 <siprintf>
	  if(HAL_GetTick() - timestamp_one >= 500){
 8100fe6:	e59c      	b.n	8100b22 <main+0x9e>
 8100fe8:	1000000c 	.word	0x1000000c
 8100fec:	1000024c 	.word	0x1000024c
 8100ff0:	100002b8 	.word	0x100002b8
 8100ff4:	10000254 	.word	0x10000254
 8100ff8:	10000251 	.word	0x10000251
 8100ffc:	10000266 	.word	0x10000266
 8101000:	08106248 	.word	0x08106248
 8101004:	10000290 	.word	0x10000290
 8101008:	10000008 	.word	0x10000008
 810100c:	08106254 	.word	0x08106254
 8101010:	10000268 	.word	0x10000268
 8101014:	1000027c 	.word	0x1000027c
 8101018:	100002a4 	.word	0x100002a4
 810101c:	08106268 	.word	0x08106268

08101020 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8101020:	b580      	push	{r7, lr}
 8101022:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8101024:	4b1b      	ldr	r3, [pc, #108]	; (8101094 <MX_I2C2_Init+0x74>)
 8101026:	4a1c      	ldr	r2, [pc, #112]	; (8101098 <MX_I2C2_Init+0x78>)
 8101028:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 810102a:	4b1a      	ldr	r3, [pc, #104]	; (8101094 <MX_I2C2_Init+0x74>)
 810102c:	4a1b      	ldr	r2, [pc, #108]	; (810109c <MX_I2C2_Init+0x7c>)
 810102e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8101030:	4b18      	ldr	r3, [pc, #96]	; (8101094 <MX_I2C2_Init+0x74>)
 8101032:	2200      	movs	r2, #0
 8101034:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8101036:	4b17      	ldr	r3, [pc, #92]	; (8101094 <MX_I2C2_Init+0x74>)
 8101038:	2201      	movs	r2, #1
 810103a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 810103c:	4b15      	ldr	r3, [pc, #84]	; (8101094 <MX_I2C2_Init+0x74>)
 810103e:	2200      	movs	r2, #0
 8101040:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8101042:	4b14      	ldr	r3, [pc, #80]	; (8101094 <MX_I2C2_Init+0x74>)
 8101044:	2200      	movs	r2, #0
 8101046:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8101048:	4b12      	ldr	r3, [pc, #72]	; (8101094 <MX_I2C2_Init+0x74>)
 810104a:	2200      	movs	r2, #0
 810104c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 810104e:	4b11      	ldr	r3, [pc, #68]	; (8101094 <MX_I2C2_Init+0x74>)
 8101050:	2200      	movs	r2, #0
 8101052:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8101054:	4b0f      	ldr	r3, [pc, #60]	; (8101094 <MX_I2C2_Init+0x74>)
 8101056:	2200      	movs	r2, #0
 8101058:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 810105a:	480e      	ldr	r0, [pc, #56]	; (8101094 <MX_I2C2_Init+0x74>)
 810105c:	f000 ffac 	bl	8101fb8 <HAL_I2C_Init>
 8101060:	4603      	mov	r3, r0
 8101062:	2b00      	cmp	r3, #0
 8101064:	d001      	beq.n	810106a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8101066:	f000 f979 	bl	810135c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 810106a:	2100      	movs	r1, #0
 810106c:	4809      	ldr	r0, [pc, #36]	; (8101094 <MX_I2C2_Init+0x74>)
 810106e:	f001 fb9f 	bl	81027b0 <HAL_I2CEx_ConfigAnalogFilter>
 8101072:	4603      	mov	r3, r0
 8101074:	2b00      	cmp	r3, #0
 8101076:	d001      	beq.n	810107c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8101078:	f000 f970 	bl	810135c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 810107c:	2100      	movs	r1, #0
 810107e:	4805      	ldr	r0, [pc, #20]	; (8101094 <MX_I2C2_Init+0x74>)
 8101080:	f001 fbe1 	bl	8102846 <HAL_I2CEx_ConfigDigitalFilter>
 8101084:	4603      	mov	r3, r0
 8101086:	2b00      	cmp	r3, #0
 8101088:	d001      	beq.n	810108e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 810108a:	f000 f967 	bl	810135c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 810108e:	bf00      	nop
 8101090:	bd80      	pop	{r7, pc}
 8101092:	bf00      	nop
 8101094:	100000d0 	.word	0x100000d0
 8101098:	40005800 	.word	0x40005800
 810109c:	00b03fdb 	.word	0x00b03fdb

081010a0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 81010a0:	b580      	push	{r7, lr}
 81010a2:	b086      	sub	sp, #24
 81010a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 81010a6:	1d3b      	adds	r3, r7, #4
 81010a8:	2200      	movs	r2, #0
 81010aa:	601a      	str	r2, [r3, #0]
 81010ac:	605a      	str	r2, [r3, #4]
 81010ae:	609a      	str	r2, [r3, #8]
 81010b0:	60da      	str	r2, [r3, #12]
 81010b2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 81010b4:	2300      	movs	r3, #0
 81010b6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 81010b8:	4b2a      	ldr	r3, [pc, #168]	; (8101164 <MX_RTC_Init+0xc4>)
 81010ba:	4a2b      	ldr	r2, [pc, #172]	; (8101168 <MX_RTC_Init+0xc8>)
 81010bc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 81010be:	4b29      	ldr	r3, [pc, #164]	; (8101164 <MX_RTC_Init+0xc4>)
 81010c0:	2200      	movs	r2, #0
 81010c2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 81010c4:	4b27      	ldr	r3, [pc, #156]	; (8101164 <MX_RTC_Init+0xc4>)
 81010c6:	227f      	movs	r2, #127	; 0x7f
 81010c8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 81010ca:	4b26      	ldr	r3, [pc, #152]	; (8101164 <MX_RTC_Init+0xc4>)
 81010cc:	22ff      	movs	r2, #255	; 0xff
 81010ce:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 81010d0:	4b24      	ldr	r3, [pc, #144]	; (8101164 <MX_RTC_Init+0xc4>)
 81010d2:	2200      	movs	r2, #0
 81010d4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 81010d6:	4b23      	ldr	r3, [pc, #140]	; (8101164 <MX_RTC_Init+0xc4>)
 81010d8:	2200      	movs	r2, #0
 81010da:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 81010dc:	4b21      	ldr	r3, [pc, #132]	; (8101164 <MX_RTC_Init+0xc4>)
 81010de:	2200      	movs	r2, #0
 81010e0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 81010e2:	4b20      	ldr	r3, [pc, #128]	; (8101164 <MX_RTC_Init+0xc4>)
 81010e4:	2200      	movs	r2, #0
 81010e6:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 81010e8:	481e      	ldr	r0, [pc, #120]	; (8101164 <MX_RTC_Init+0xc4>)
 81010ea:	f002 fea5 	bl	8103e38 <HAL_RTC_Init>
 81010ee:	4603      	mov	r3, r0
 81010f0:	2b00      	cmp	r3, #0
 81010f2:	d001      	beq.n	81010f8 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 81010f4:	f000 f932 	bl	810135c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 81010f8:	2300      	movs	r3, #0
 81010fa:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x30;
 81010fc:	2330      	movs	r3, #48	; 0x30
 81010fe:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8101100:	2300      	movs	r3, #0
 8101102:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8101104:	2300      	movs	r3, #0
 8101106:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_SET;
 8101108:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 810110c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 810110e:	1d3b      	adds	r3, r7, #4
 8101110:	2201      	movs	r2, #1
 8101112:	4619      	mov	r1, r3
 8101114:	4813      	ldr	r0, [pc, #76]	; (8101164 <MX_RTC_Init+0xc4>)
 8101116:	f002 ff07 	bl	8103f28 <HAL_RTC_SetTime>
 810111a:	4603      	mov	r3, r0
 810111c:	2b00      	cmp	r3, #0
 810111e:	d001      	beq.n	8101124 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8101120:	f000 f91c 	bl	810135c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8101124:	2306      	movs	r3, #6
 8101126:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 8101128:	2311      	movs	r3, #17
 810112a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x12;
 810112c:	2312      	movs	r3, #18
 810112e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 8101130:	2322      	movs	r3, #34	; 0x22
 8101132:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8101134:	463b      	mov	r3, r7
 8101136:	2201      	movs	r2, #1
 8101138:	4619      	mov	r1, r3
 810113a:	480a      	ldr	r0, [pc, #40]	; (8101164 <MX_RTC_Init+0xc4>)
 810113c:	f002 ffed 	bl	810411a <HAL_RTC_SetDate>
 8101140:	4603      	mov	r3, r0
 8101142:	2b00      	cmp	r3, #0
 8101144:	d001      	beq.n	810114a <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8101146:	f000 f909 	bl	810135c <Error_Handler>
  }

  /** Enable the reference Clock input
  */
  if (HAL_RTCEx_SetRefClock(&hrtc) != HAL_OK)
 810114a:	4806      	ldr	r0, [pc, #24]	; (8101164 <MX_RTC_Init+0xc4>)
 810114c:	f003 f98a 	bl	8104464 <HAL_RTCEx_SetRefClock>
 8101150:	4603      	mov	r3, r0
 8101152:	2b00      	cmp	r3, #0
 8101154:	d001      	beq.n	810115a <MX_RTC_Init+0xba>
  {
    Error_Handler();
 8101156:	f000 f901 	bl	810135c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 810115a:	bf00      	nop
 810115c:	3718      	adds	r7, #24
 810115e:	46bd      	mov	sp, r7
 8101160:	bd80      	pop	{r7, pc}
 8101162:	bf00      	nop
 8101164:	1000011c 	.word	0x1000011c
 8101168:	58004000 	.word	0x58004000

0810116c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 810116c:	b580      	push	{r7, lr}
 810116e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8101170:	4b27      	ldr	r3, [pc, #156]	; (8101210 <MX_SPI4_Init+0xa4>)
 8101172:	4a28      	ldr	r2, [pc, #160]	; (8101214 <MX_SPI4_Init+0xa8>)
 8101174:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8101176:	4b26      	ldr	r3, [pc, #152]	; (8101210 <MX_SPI4_Init+0xa4>)
 8101178:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 810117c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 810117e:	4b24      	ldr	r3, [pc, #144]	; (8101210 <MX_SPI4_Init+0xa4>)
 8101180:	2200      	movs	r2, #0
 8101182:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8101184:	4b22      	ldr	r3, [pc, #136]	; (8101210 <MX_SPI4_Init+0xa4>)
 8101186:	2207      	movs	r2, #7
 8101188:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 810118a:	4b21      	ldr	r3, [pc, #132]	; (8101210 <MX_SPI4_Init+0xa4>)
 810118c:	2200      	movs	r2, #0
 810118e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8101190:	4b1f      	ldr	r3, [pc, #124]	; (8101210 <MX_SPI4_Init+0xa4>)
 8101192:	2200      	movs	r2, #0
 8101194:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8101196:	4b1e      	ldr	r3, [pc, #120]	; (8101210 <MX_SPI4_Init+0xa4>)
 8101198:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 810119c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 810119e:	4b1c      	ldr	r3, [pc, #112]	; (8101210 <MX_SPI4_Init+0xa4>)
 81011a0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 81011a4:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 81011a6:	4b1a      	ldr	r3, [pc, #104]	; (8101210 <MX_SPI4_Init+0xa4>)
 81011a8:	2200      	movs	r2, #0
 81011aa:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 81011ac:	4b18      	ldr	r3, [pc, #96]	; (8101210 <MX_SPI4_Init+0xa4>)
 81011ae:	2200      	movs	r2, #0
 81011b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 81011b2:	4b17      	ldr	r3, [pc, #92]	; (8101210 <MX_SPI4_Init+0xa4>)
 81011b4:	2200      	movs	r2, #0
 81011b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 81011b8:	4b15      	ldr	r3, [pc, #84]	; (8101210 <MX_SPI4_Init+0xa4>)
 81011ba:	2200      	movs	r2, #0
 81011bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 81011be:	4b14      	ldr	r3, [pc, #80]	; (8101210 <MX_SPI4_Init+0xa4>)
 81011c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 81011c4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 81011c6:	4b12      	ldr	r3, [pc, #72]	; (8101210 <MX_SPI4_Init+0xa4>)
 81011c8:	2200      	movs	r2, #0
 81011ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 81011cc:	4b10      	ldr	r3, [pc, #64]	; (8101210 <MX_SPI4_Init+0xa4>)
 81011ce:	2200      	movs	r2, #0
 81011d0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 81011d2:	4b0f      	ldr	r3, [pc, #60]	; (8101210 <MX_SPI4_Init+0xa4>)
 81011d4:	2200      	movs	r2, #0
 81011d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 81011d8:	4b0d      	ldr	r3, [pc, #52]	; (8101210 <MX_SPI4_Init+0xa4>)
 81011da:	2200      	movs	r2, #0
 81011dc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 81011de:	4b0c      	ldr	r3, [pc, #48]	; (8101210 <MX_SPI4_Init+0xa4>)
 81011e0:	2200      	movs	r2, #0
 81011e2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 81011e4:	4b0a      	ldr	r3, [pc, #40]	; (8101210 <MX_SPI4_Init+0xa4>)
 81011e6:	2200      	movs	r2, #0
 81011e8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 81011ea:	4b09      	ldr	r3, [pc, #36]	; (8101210 <MX_SPI4_Init+0xa4>)
 81011ec:	2200      	movs	r2, #0
 81011ee:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 81011f0:	4b07      	ldr	r3, [pc, #28]	; (8101210 <MX_SPI4_Init+0xa4>)
 81011f2:	2200      	movs	r2, #0
 81011f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 81011f6:	4b06      	ldr	r3, [pc, #24]	; (8101210 <MX_SPI4_Init+0xa4>)
 81011f8:	2200      	movs	r2, #0
 81011fa:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 81011fc:	4804      	ldr	r0, [pc, #16]	; (8101210 <MX_SPI4_Init+0xa4>)
 81011fe:	f003 f975 	bl	81044ec <HAL_SPI_Init>
 8101202:	4603      	mov	r3, r0
 8101204:	2b00      	cmp	r3, #0
 8101206:	d001      	beq.n	810120c <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8101208:	f000 f8a8 	bl	810135c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 810120c:	bf00      	nop
 810120e:	bd80      	pop	{r7, pc}
 8101210:	10000140 	.word	0x10000140
 8101214:	40013400 	.word	0x40013400

08101218 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8101218:	b580      	push	{r7, lr}
 810121a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 810121c:	4b10      	ldr	r3, [pc, #64]	; (8101260 <MX_TIM17_Init+0x48>)
 810121e:	4a11      	ldr	r2, [pc, #68]	; (8101264 <MX_TIM17_Init+0x4c>)
 8101220:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 479;
 8101222:	4b0f      	ldr	r3, [pc, #60]	; (8101260 <MX_TIM17_Init+0x48>)
 8101224:	f240 12df 	movw	r2, #479	; 0x1df
 8101228:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 810122a:	4b0d      	ldr	r3, [pc, #52]	; (8101260 <MX_TIM17_Init+0x48>)
 810122c:	2200      	movs	r2, #0
 810122e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8101230:	4b0b      	ldr	r3, [pc, #44]	; (8101260 <MX_TIM17_Init+0x48>)
 8101232:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8101236:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8101238:	4b09      	ldr	r3, [pc, #36]	; (8101260 <MX_TIM17_Init+0x48>)
 810123a:	2200      	movs	r2, #0
 810123c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 810123e:	4b08      	ldr	r3, [pc, #32]	; (8101260 <MX_TIM17_Init+0x48>)
 8101240:	2200      	movs	r2, #0
 8101242:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8101244:	4b06      	ldr	r3, [pc, #24]	; (8101260 <MX_TIM17_Init+0x48>)
 8101246:	2200      	movs	r2, #0
 8101248:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 810124a:	4805      	ldr	r0, [pc, #20]	; (8101260 <MX_TIM17_Init+0x48>)
 810124c:	f004 f8ea 	bl	8105424 <HAL_TIM_Base_Init>
 8101250:	4603      	mov	r3, r0
 8101252:	2b00      	cmp	r3, #0
 8101254:	d001      	beq.n	810125a <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8101256:	f000 f881 	bl	810135c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 810125a:	bf00      	nop
 810125c:	bd80      	pop	{r7, pc}
 810125e:	bf00      	nop
 8101260:	100001c8 	.word	0x100001c8
 8101264:	40014800 	.word	0x40014800

08101268 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8101268:	b580      	push	{r7, lr}
 810126a:	b088      	sub	sp, #32
 810126c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810126e:	f107 030c 	add.w	r3, r7, #12
 8101272:	2200      	movs	r2, #0
 8101274:	601a      	str	r2, [r3, #0]
 8101276:	605a      	str	r2, [r3, #4]
 8101278:	609a      	str	r2, [r3, #8]
 810127a:	60da      	str	r2, [r3, #12]
 810127c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 810127e:	4b26      	ldr	r3, [pc, #152]	; (8101318 <MX_GPIO_Init+0xb0>)
 8101280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101284:	4a24      	ldr	r2, [pc, #144]	; (8101318 <MX_GPIO_Init+0xb0>)
 8101286:	f043 0310 	orr.w	r3, r3, #16
 810128a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810128e:	4b22      	ldr	r3, [pc, #136]	; (8101318 <MX_GPIO_Init+0xb0>)
 8101290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101294:	f003 0310 	and.w	r3, r3, #16
 8101298:	60bb      	str	r3, [r7, #8]
 810129a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 810129c:	4b1e      	ldr	r3, [pc, #120]	; (8101318 <MX_GPIO_Init+0xb0>)
 810129e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012a2:	4a1d      	ldr	r2, [pc, #116]	; (8101318 <MX_GPIO_Init+0xb0>)
 81012a4:	f043 0302 	orr.w	r3, r3, #2
 81012a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012ac:	4b1a      	ldr	r3, [pc, #104]	; (8101318 <MX_GPIO_Init+0xb0>)
 81012ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012b2:	f003 0302 	and.w	r3, r3, #2
 81012b6:	607b      	str	r3, [r7, #4]
 81012b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RC522_Rst_GPIO_Port, RC522_Rst_Pin, GPIO_PIN_SET);
 81012ba:	2201      	movs	r2, #1
 81012bc:	2108      	movs	r1, #8
 81012be:	4817      	ldr	r0, [pc, #92]	; (810131c <MX_GPIO_Init+0xb4>)
 81012c0:	f000 fdfc 	bl	8101ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 81012c4:	2200      	movs	r2, #0
 81012c6:	2101      	movs	r1, #1
 81012c8:	4815      	ldr	r0, [pc, #84]	; (8101320 <MX_GPIO_Init+0xb8>)
 81012ca:	f000 fdf7 	bl	8101ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 81012ce:	2200      	movs	r2, #0
 81012d0:	2102      	movs	r1, #2
 81012d2:	4812      	ldr	r0, [pc, #72]	; (810131c <MX_GPIO_Init+0xb4>)
 81012d4:	f000 fdf2 	bl	8101ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RC522_Rst_Pin LD2_Pin */
  GPIO_InitStruct.Pin = RC522_Rst_Pin|LD2_Pin;
 81012d8:	230a      	movs	r3, #10
 81012da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81012dc:	2301      	movs	r3, #1
 81012de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81012e0:	2300      	movs	r3, #0
 81012e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81012e4:	2300      	movs	r3, #0
 81012e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 81012e8:	f107 030c 	add.w	r3, r7, #12
 81012ec:	4619      	mov	r1, r3
 81012ee:	480b      	ldr	r0, [pc, #44]	; (810131c <MX_GPIO_Init+0xb4>)
 81012f0:	f000 fc34 	bl	8101b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 81012f4:	2301      	movs	r3, #1
 81012f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81012f8:	2301      	movs	r3, #1
 81012fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81012fc:	2300      	movs	r3, #0
 81012fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101300:	2300      	movs	r3, #0
 8101302:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8101304:	f107 030c 	add.w	r3, r7, #12
 8101308:	4619      	mov	r1, r3
 810130a:	4805      	ldr	r0, [pc, #20]	; (8101320 <MX_GPIO_Init+0xb8>)
 810130c:	f000 fc26 	bl	8101b5c <HAL_GPIO_Init>

}
 8101310:	bf00      	nop
 8101312:	3720      	adds	r7, #32
 8101314:	46bd      	mov	sp, r7
 8101316:	bd80      	pop	{r7, pc}
 8101318:	58024400 	.word	0x58024400
 810131c:	58021000 	.word	0x58021000
 8101320:	58020400 	.word	0x58020400

08101324 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
uint64_t micros()
{return _micros + htim17.Instance->CNT;}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8101324:	b4b0      	push	{r4, r5, r7}
 8101326:	b083      	sub	sp, #12
 8101328:	af00      	add	r7, sp, #0
 810132a:	6078      	str	r0, [r7, #4]
 if(htim == &htim17)
 810132c:	687b      	ldr	r3, [r7, #4]
 810132e:	4a09      	ldr	r2, [pc, #36]	; (8101354 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8101330:	4293      	cmp	r3, r2
 8101332:	d10a      	bne.n	810134a <HAL_TIM_PeriodElapsedCallback+0x26>
 {_micros += 65535;}
 8101334:	4b08      	ldr	r3, [pc, #32]	; (8101358 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8101336:	e9d3 2300 	ldrd	r2, r3, [r3]
 810133a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 810133e:	1854      	adds	r4, r2, r1
 8101340:	f143 0500 	adc.w	r5, r3, #0
 8101344:	4b04      	ldr	r3, [pc, #16]	; (8101358 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8101346:	e9c3 4500 	strd	r4, r5, [r3]
}
 810134a:	bf00      	nop
 810134c:	370c      	adds	r7, #12
 810134e:	46bd      	mov	sp, r7
 8101350:	bcb0      	pop	{r4, r5, r7}
 8101352:	4770      	bx	lr
 8101354:	100001c8 	.word	0x100001c8
 8101358:	10000218 	.word	0x10000218

0810135c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 810135c:	b480      	push	{r7}
 810135e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101360:	b672      	cpsid	i
}
 8101362:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8101364:	e7fe      	b.n	8101364 <Error_Handler+0x8>
	...

08101368 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101368:	b480      	push	{r7}
 810136a:	b083      	sub	sp, #12
 810136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810136e:	4b0a      	ldr	r3, [pc, #40]	; (8101398 <HAL_MspInit+0x30>)
 8101370:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101374:	4a08      	ldr	r2, [pc, #32]	; (8101398 <HAL_MspInit+0x30>)
 8101376:	f043 0302 	orr.w	r3, r3, #2
 810137a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810137e:	4b06      	ldr	r3, [pc, #24]	; (8101398 <HAL_MspInit+0x30>)
 8101380:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101384:	f003 0302 	and.w	r3, r3, #2
 8101388:	607b      	str	r3, [r7, #4]
 810138a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 810138c:	bf00      	nop
 810138e:	370c      	adds	r7, #12
 8101390:	46bd      	mov	sp, r7
 8101392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101396:	4770      	bx	lr
 8101398:	58024400 	.word	0x58024400

0810139c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 810139c:	b580      	push	{r7, lr}
 810139e:	b0b8      	sub	sp, #224	; 0xe0
 81013a0:	af00      	add	r7, sp, #0
 81013a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81013a4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81013a8:	2200      	movs	r2, #0
 81013aa:	601a      	str	r2, [r3, #0]
 81013ac:	605a      	str	r2, [r3, #4]
 81013ae:	609a      	str	r2, [r3, #8]
 81013b0:	60da      	str	r2, [r3, #12]
 81013b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81013b4:	f107 0310 	add.w	r3, r7, #16
 81013b8:	22bc      	movs	r2, #188	; 0xbc
 81013ba:	2100      	movs	r1, #0
 81013bc:	4618      	mov	r0, r3
 81013be:	f004 fab1 	bl	8105924 <memset>
  if(hi2c->Instance==I2C2)
 81013c2:	687b      	ldr	r3, [r7, #4]
 81013c4:	681b      	ldr	r3, [r3, #0]
 81013c6:	4a25      	ldr	r2, [pc, #148]	; (810145c <HAL_I2C_MspInit+0xc0>)
 81013c8:	4293      	cmp	r3, r2
 81013ca:	d142      	bne.n	8101452 <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 81013cc:	2308      	movs	r3, #8
 81013ce:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 81013d0:	2300      	movs	r3, #0
 81013d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81013d6:	f107 0310 	add.w	r3, r7, #16
 81013da:	4618      	mov	r0, r3
 81013dc:	f001 fc82 	bl	8102ce4 <HAL_RCCEx_PeriphCLKConfig>
 81013e0:	4603      	mov	r3, r0
 81013e2:	2b00      	cmp	r3, #0
 81013e4:	d001      	beq.n	81013ea <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 81013e6:	f7ff ffb9 	bl	810135c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81013ea:	4b1d      	ldr	r3, [pc, #116]	; (8101460 <HAL_I2C_MspInit+0xc4>)
 81013ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013f0:	4a1b      	ldr	r2, [pc, #108]	; (8101460 <HAL_I2C_MspInit+0xc4>)
 81013f2:	f043 0302 	orr.w	r3, r3, #2
 81013f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81013fa:	4b19      	ldr	r3, [pc, #100]	; (8101460 <HAL_I2C_MspInit+0xc4>)
 81013fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101400:	f003 0302 	and.w	r3, r3, #2
 8101404:	60fb      	str	r3, [r7, #12]
 8101406:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8101408:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 810140c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8101410:	2312      	movs	r3, #18
 8101412:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101416:	2300      	movs	r3, #0
 8101418:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810141c:	2300      	movs	r3, #0
 810141e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8101422:	2304      	movs	r3, #4
 8101424:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101428:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 810142c:	4619      	mov	r1, r3
 810142e:	480d      	ldr	r0, [pc, #52]	; (8101464 <HAL_I2C_MspInit+0xc8>)
 8101430:	f000 fb94 	bl	8101b5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8101434:	4b0a      	ldr	r3, [pc, #40]	; (8101460 <HAL_I2C_MspInit+0xc4>)
 8101436:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810143a:	4a09      	ldr	r2, [pc, #36]	; (8101460 <HAL_I2C_MspInit+0xc4>)
 810143c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8101440:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101444:	4b06      	ldr	r3, [pc, #24]	; (8101460 <HAL_I2C_MspInit+0xc4>)
 8101446:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810144a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810144e:	60bb      	str	r3, [r7, #8]
 8101450:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8101452:	bf00      	nop
 8101454:	37e0      	adds	r7, #224	; 0xe0
 8101456:	46bd      	mov	sp, r7
 8101458:	bd80      	pop	{r7, pc}
 810145a:	bf00      	nop
 810145c:	40005800 	.word	0x40005800
 8101460:	58024400 	.word	0x58024400
 8101464:	58020400 	.word	0x58020400

08101468 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8101468:	b580      	push	{r7, lr}
 810146a:	b0b8      	sub	sp, #224	; 0xe0
 810146c:	af00      	add	r7, sp, #0
 810146e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101470:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101474:	2200      	movs	r2, #0
 8101476:	601a      	str	r2, [r3, #0]
 8101478:	605a      	str	r2, [r3, #4]
 810147a:	609a      	str	r2, [r3, #8]
 810147c:	60da      	str	r2, [r3, #12]
 810147e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101480:	f107 0310 	add.w	r3, r7, #16
 8101484:	22bc      	movs	r2, #188	; 0xbc
 8101486:	2100      	movs	r1, #0
 8101488:	4618      	mov	r0, r3
 810148a:	f004 fa4b 	bl	8105924 <memset>
  if(hrtc->Instance==RTC)
 810148e:	687b      	ldr	r3, [r7, #4]
 8101490:	681b      	ldr	r3, [r3, #0]
 8101492:	4a21      	ldr	r2, [pc, #132]	; (8101518 <HAL_RTC_MspInit+0xb0>)
 8101494:	4293      	cmp	r3, r2
 8101496:	d13b      	bne.n	8101510 <HAL_RTC_MspInit+0xa8>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8101498:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 810149c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 810149e:	f44f 7300 	mov.w	r3, #512	; 0x200
 81014a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81014a6:	f107 0310 	add.w	r3, r7, #16
 81014aa:	4618      	mov	r0, r3
 81014ac:	f001 fc1a 	bl	8102ce4 <HAL_RCCEx_PeriphCLKConfig>
 81014b0:	4603      	mov	r3, r0
 81014b2:	2b00      	cmp	r3, #0
 81014b4:	d001      	beq.n	81014ba <HAL_RTC_MspInit+0x52>
    {
      Error_Handler();
 81014b6:	f7ff ff51 	bl	810135c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 81014ba:	4b18      	ldr	r3, [pc, #96]	; (810151c <HAL_RTC_MspInit+0xb4>)
 81014bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81014be:	4a17      	ldr	r2, [pc, #92]	; (810151c <HAL_RTC_MspInit+0xb4>)
 81014c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 81014c4:	6713      	str	r3, [r2, #112]	; 0x70

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81014c6:	4b15      	ldr	r3, [pc, #84]	; (810151c <HAL_RTC_MspInit+0xb4>)
 81014c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81014cc:	4a13      	ldr	r2, [pc, #76]	; (810151c <HAL_RTC_MspInit+0xb4>)
 81014ce:	f043 0302 	orr.w	r3, r3, #2
 81014d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81014d6:	4b11      	ldr	r3, [pc, #68]	; (810151c <HAL_RTC_MspInit+0xb4>)
 81014d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81014dc:	f003 0302 	and.w	r3, r3, #2
 81014e0:	60fb      	str	r3, [r7, #12]
 81014e2:	68fb      	ldr	r3, [r7, #12]
    /**RTC GPIO Configuration
    PB15     ------> RTC_REFIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 81014e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81014e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81014ec:	2302      	movs	r3, #2
 81014ee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81014f2:	2300      	movs	r3, #0
 81014f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81014f8:	2300      	movs	r3, #0
 81014fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF0_RTC_50Hz;
 81014fe:	2300      	movs	r3, #0
 8101500:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101504:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101508:	4619      	mov	r1, r3
 810150a:	4805      	ldr	r0, [pc, #20]	; (8101520 <HAL_RTC_MspInit+0xb8>)
 810150c:	f000 fb26 	bl	8101b5c <HAL_GPIO_Init>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8101510:	bf00      	nop
 8101512:	37e0      	adds	r7, #224	; 0xe0
 8101514:	46bd      	mov	sp, r7
 8101516:	bd80      	pop	{r7, pc}
 8101518:	58004000 	.word	0x58004000
 810151c:	58024400 	.word	0x58024400
 8101520:	58020400 	.word	0x58020400

08101524 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8101524:	b580      	push	{r7, lr}
 8101526:	b0b8      	sub	sp, #224	; 0xe0
 8101528:	af00      	add	r7, sp, #0
 810152a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810152c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101530:	2200      	movs	r2, #0
 8101532:	601a      	str	r2, [r3, #0]
 8101534:	605a      	str	r2, [r3, #4]
 8101536:	609a      	str	r2, [r3, #8]
 8101538:	60da      	str	r2, [r3, #12]
 810153a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 810153c:	f107 0310 	add.w	r3, r7, #16
 8101540:	22bc      	movs	r2, #188	; 0xbc
 8101542:	2100      	movs	r1, #0
 8101544:	4618      	mov	r0, r3
 8101546:	f004 f9ed 	bl	8105924 <memset>
  if(hspi->Instance==SPI4)
 810154a:	687b      	ldr	r3, [r7, #4]
 810154c:	681b      	ldr	r3, [r3, #0]
 810154e:	4a24      	ldr	r2, [pc, #144]	; (81015e0 <HAL_SPI_MspInit+0xbc>)
 8101550:	4293      	cmp	r3, r2
 8101552:	d141      	bne.n	81015d8 <HAL_SPI_MspInit+0xb4>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8101554:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8101558:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 810155a:	2300      	movs	r3, #0
 810155c:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810155e:	f107 0310 	add.w	r3, r7, #16
 8101562:	4618      	mov	r0, r3
 8101564:	f001 fbbe 	bl	8102ce4 <HAL_RCCEx_PeriphCLKConfig>
 8101568:	4603      	mov	r3, r0
 810156a:	2b00      	cmp	r3, #0
 810156c:	d001      	beq.n	8101572 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 810156e:	f7ff fef5 	bl	810135c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8101572:	4b1c      	ldr	r3, [pc, #112]	; (81015e4 <HAL_SPI_MspInit+0xc0>)
 8101574:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101578:	4a1a      	ldr	r2, [pc, #104]	; (81015e4 <HAL_SPI_MspInit+0xc0>)
 810157a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 810157e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101582:	4b18      	ldr	r3, [pc, #96]	; (81015e4 <HAL_SPI_MspInit+0xc0>)
 8101584:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101588:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 810158c:	60fb      	str	r3, [r7, #12]
 810158e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8101590:	4b14      	ldr	r3, [pc, #80]	; (81015e4 <HAL_SPI_MspInit+0xc0>)
 8101592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101596:	4a13      	ldr	r2, [pc, #76]	; (81015e4 <HAL_SPI_MspInit+0xc0>)
 8101598:	f043 0310 	orr.w	r3, r3, #16
 810159c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81015a0:	4b10      	ldr	r3, [pc, #64]	; (81015e4 <HAL_SPI_MspInit+0xc0>)
 81015a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81015a6:	f003 0310 	and.w	r3, r3, #16
 81015aa:	60bb      	str	r3, [r7, #8]
 81015ac:	68bb      	ldr	r3, [r7, #8]
    PE2     ------> SPI4_SCK
    PE4     ------> SPI4_NSS
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 81015ae:	2374      	movs	r3, #116	; 0x74
 81015b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81015b4:	2302      	movs	r3, #2
 81015b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81015ba:	2300      	movs	r3, #0
 81015bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81015c0:	2300      	movs	r3, #0
 81015c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 81015c6:	2305      	movs	r3, #5
 81015c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 81015cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81015d0:	4619      	mov	r1, r3
 81015d2:	4805      	ldr	r0, [pc, #20]	; (81015e8 <HAL_SPI_MspInit+0xc4>)
 81015d4:	f000 fac2 	bl	8101b5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 81015d8:	bf00      	nop
 81015da:	37e0      	adds	r7, #224	; 0xe0
 81015dc:	46bd      	mov	sp, r7
 81015de:	bd80      	pop	{r7, pc}
 81015e0:	40013400 	.word	0x40013400
 81015e4:	58024400 	.word	0x58024400
 81015e8:	58021000 	.word	0x58021000

081015ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 81015ec:	b580      	push	{r7, lr}
 81015ee:	b084      	sub	sp, #16
 81015f0:	af00      	add	r7, sp, #0
 81015f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 81015f4:	687b      	ldr	r3, [r7, #4]
 81015f6:	681b      	ldr	r3, [r3, #0]
 81015f8:	4a0e      	ldr	r2, [pc, #56]	; (8101634 <HAL_TIM_Base_MspInit+0x48>)
 81015fa:	4293      	cmp	r3, r2
 81015fc:	d116      	bne.n	810162c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 81015fe:	4b0e      	ldr	r3, [pc, #56]	; (8101638 <HAL_TIM_Base_MspInit+0x4c>)
 8101600:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101604:	4a0c      	ldr	r2, [pc, #48]	; (8101638 <HAL_TIM_Base_MspInit+0x4c>)
 8101606:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 810160a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 810160e:	4b0a      	ldr	r3, [pc, #40]	; (8101638 <HAL_TIM_Base_MspInit+0x4c>)
 8101610:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101614:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8101618:	60fb      	str	r3, [r7, #12]
 810161a:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 810161c:	2200      	movs	r2, #0
 810161e:	2100      	movs	r1, #0
 8101620:	2076      	movs	r0, #118	; 0x76
 8101622:	f000 fa52 	bl	8101aca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8101626:	2076      	movs	r0, #118	; 0x76
 8101628:	f000 fa69 	bl	8101afe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 810162c:	bf00      	nop
 810162e:	3710      	adds	r7, #16
 8101630:	46bd      	mov	sp, r7
 8101632:	bd80      	pop	{r7, pc}
 8101634:	40014800 	.word	0x40014800
 8101638:	58024400 	.word	0x58024400

0810163c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 810163c:	b480      	push	{r7}
 810163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101640:	e7fe      	b.n	8101640 <NMI_Handler+0x4>

08101642 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101642:	b480      	push	{r7}
 8101644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101646:	e7fe      	b.n	8101646 <HardFault_Handler+0x4>

08101648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101648:	b480      	push	{r7}
 810164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 810164c:	e7fe      	b.n	810164c <MemManage_Handler+0x4>

0810164e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810164e:	b480      	push	{r7}
 8101650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101652:	e7fe      	b.n	8101652 <BusFault_Handler+0x4>

08101654 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101654:	b480      	push	{r7}
 8101656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101658:	e7fe      	b.n	8101658 <UsageFault_Handler+0x4>

0810165a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810165a:	b480      	push	{r7}
 810165c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810165e:	bf00      	nop
 8101660:	46bd      	mov	sp, r7
 8101662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101666:	4770      	bx	lr

08101668 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101668:	b480      	push	{r7}
 810166a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810166c:	bf00      	nop
 810166e:	46bd      	mov	sp, r7
 8101670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101674:	4770      	bx	lr

08101676 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101676:	b480      	push	{r7}
 8101678:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 810167a:	bf00      	nop
 810167c:	46bd      	mov	sp, r7
 810167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101682:	4770      	bx	lr

08101684 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101684:	b580      	push	{r7, lr}
 8101686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101688:	f000 f900 	bl	810188c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 810168c:	bf00      	nop
 810168e:	bd80      	pop	{r7, pc}

08101690 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8101690:	b580      	push	{r7, lr}
 8101692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8101694:	4802      	ldr	r0, [pc, #8]	; (81016a0 <TIM17_IRQHandler+0x10>)
 8101696:	f003 ff1c 	bl	81054d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 810169a:	bf00      	nop
 810169c:	bd80      	pop	{r7, pc}
 810169e:	bf00      	nop
 81016a0:	100001c8 	.word	0x100001c8

081016a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 81016a4:	b580      	push	{r7, lr}
 81016a6:	b086      	sub	sp, #24
 81016a8:	af00      	add	r7, sp, #0
 81016aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 81016ac:	4a14      	ldr	r2, [pc, #80]	; (8101700 <_sbrk+0x5c>)
 81016ae:	4b15      	ldr	r3, [pc, #84]	; (8101704 <_sbrk+0x60>)
 81016b0:	1ad3      	subs	r3, r2, r3
 81016b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 81016b4:	697b      	ldr	r3, [r7, #20]
 81016b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 81016b8:	4b13      	ldr	r3, [pc, #76]	; (8101708 <_sbrk+0x64>)
 81016ba:	681b      	ldr	r3, [r3, #0]
 81016bc:	2b00      	cmp	r3, #0
 81016be:	d102      	bne.n	81016c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 81016c0:	4b11      	ldr	r3, [pc, #68]	; (8101708 <_sbrk+0x64>)
 81016c2:	4a12      	ldr	r2, [pc, #72]	; (810170c <_sbrk+0x68>)
 81016c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 81016c6:	4b10      	ldr	r3, [pc, #64]	; (8101708 <_sbrk+0x64>)
 81016c8:	681a      	ldr	r2, [r3, #0]
 81016ca:	687b      	ldr	r3, [r7, #4]
 81016cc:	4413      	add	r3, r2
 81016ce:	693a      	ldr	r2, [r7, #16]
 81016d0:	429a      	cmp	r2, r3
 81016d2:	d207      	bcs.n	81016e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 81016d4:	f004 f8fc 	bl	81058d0 <__errno>
 81016d8:	4603      	mov	r3, r0
 81016da:	220c      	movs	r2, #12
 81016dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 81016de:	f04f 33ff 	mov.w	r3, #4294967295
 81016e2:	e009      	b.n	81016f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 81016e4:	4b08      	ldr	r3, [pc, #32]	; (8101708 <_sbrk+0x64>)
 81016e6:	681b      	ldr	r3, [r3, #0]
 81016e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 81016ea:	4b07      	ldr	r3, [pc, #28]	; (8101708 <_sbrk+0x64>)
 81016ec:	681a      	ldr	r2, [r3, #0]
 81016ee:	687b      	ldr	r3, [r7, #4]
 81016f0:	4413      	add	r3, r2
 81016f2:	4a05      	ldr	r2, [pc, #20]	; (8101708 <_sbrk+0x64>)
 81016f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 81016f6:	68fb      	ldr	r3, [r7, #12]
}
 81016f8:	4618      	mov	r0, r3
 81016fa:	3718      	adds	r7, #24
 81016fc:	46bd      	mov	sp, r7
 81016fe:	bd80      	pop	{r7, pc}
 8101700:	10048000 	.word	0x10048000
 8101704:	00000400 	.word	0x00000400
 8101708:	100002c0 	.word	0x100002c0
 810170c:	100002d8 	.word	0x100002d8

08101710 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101710:	f8df d034 	ldr.w	sp, [pc, #52]	; 8101748 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8101714:	f7fe fe34 	bl	8100380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101718:	480c      	ldr	r0, [pc, #48]	; (810174c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 810171a:	490d      	ldr	r1, [pc, #52]	; (8101750 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 810171c:	4a0d      	ldr	r2, [pc, #52]	; (8101754 <LoopFillZerobss+0x1a>)
  movs r3, #0
 810171e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101720:	e002      	b.n	8101728 <LoopCopyDataInit>

08101722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8101722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8101726:	3304      	adds	r3, #4

08101728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 810172a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 810172c:	d3f9      	bcc.n	8101722 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 810172e:	4a0a      	ldr	r2, [pc, #40]	; (8101758 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101730:	4c0a      	ldr	r4, [pc, #40]	; (810175c <LoopFillZerobss+0x22>)
  movs r3, #0
 8101732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101734:	e001      	b.n	810173a <LoopFillZerobss>

08101736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8101736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101738:	3204      	adds	r2, #4

0810173a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810173a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 810173c:	d3fb      	bcc.n	8101736 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 810173e:	f004 f8cd 	bl	81058dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101742:	f7ff f99f 	bl	8100a84 <main>
  bx  lr
 8101746:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101748:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 810174c:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101750:	1000009c 	.word	0x1000009c
  ldr r2, =_sidata
 8101754:	081062c8 	.word	0x081062c8
  ldr r2, =_sbss
 8101758:	100000a0 	.word	0x100000a0
  ldr r4, =_ebss
 810175c:	100002d8 	.word	0x100002d8

08101760 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101760:	e7fe      	b.n	8101760 <ADC3_IRQHandler>
	...

08101764 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101764:	b580      	push	{r7, lr}
 8101766:	b082      	sub	sp, #8
 8101768:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810176a:	4b28      	ldr	r3, [pc, #160]	; (810180c <HAL_Init+0xa8>)
 810176c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101770:	4a26      	ldr	r2, [pc, #152]	; (810180c <HAL_Init+0xa8>)
 8101772:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101776:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810177a:	4b24      	ldr	r3, [pc, #144]	; (810180c <HAL_Init+0xa8>)
 810177c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101780:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101784:	603b      	str	r3, [r7, #0]
 8101786:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101788:	4b21      	ldr	r3, [pc, #132]	; (8101810 <HAL_Init+0xac>)
 810178a:	681b      	ldr	r3, [r3, #0]
 810178c:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8101790:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101794:	4a1e      	ldr	r2, [pc, #120]	; (8101810 <HAL_Init+0xac>)
 8101796:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 810179a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 810179c:	4b1c      	ldr	r3, [pc, #112]	; (8101810 <HAL_Init+0xac>)
 810179e:	681b      	ldr	r3, [r3, #0]
 81017a0:	4a1b      	ldr	r2, [pc, #108]	; (8101810 <HAL_Init+0xac>)
 81017a2:	f043 0301 	orr.w	r3, r3, #1
 81017a6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81017a8:	2003      	movs	r0, #3
 81017aa:	f000 f983 	bl	8101ab4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81017ae:	f001 f91f 	bl	81029f0 <HAL_RCC_GetSysClockFreq>
 81017b2:	4602      	mov	r2, r0
 81017b4:	4b15      	ldr	r3, [pc, #84]	; (810180c <HAL_Init+0xa8>)
 81017b6:	699b      	ldr	r3, [r3, #24]
 81017b8:	0a1b      	lsrs	r3, r3, #8
 81017ba:	f003 030f 	and.w	r3, r3, #15
 81017be:	4915      	ldr	r1, [pc, #84]	; (8101814 <HAL_Init+0xb0>)
 81017c0:	5ccb      	ldrb	r3, [r1, r3]
 81017c2:	f003 031f 	and.w	r3, r3, #31
 81017c6:	fa22 f303 	lsr.w	r3, r2, r3
 81017ca:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81017cc:	4b0f      	ldr	r3, [pc, #60]	; (810180c <HAL_Init+0xa8>)
 81017ce:	699b      	ldr	r3, [r3, #24]
 81017d0:	f003 030f 	and.w	r3, r3, #15
 81017d4:	4a0f      	ldr	r2, [pc, #60]	; (8101814 <HAL_Init+0xb0>)
 81017d6:	5cd3      	ldrb	r3, [r2, r3]
 81017d8:	f003 031f 	and.w	r3, r3, #31
 81017dc:	687a      	ldr	r2, [r7, #4]
 81017de:	fa22 f303 	lsr.w	r3, r2, r3
 81017e2:	4a0d      	ldr	r2, [pc, #52]	; (8101818 <HAL_Init+0xb4>)
 81017e4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81017e6:	4b0c      	ldr	r3, [pc, #48]	; (8101818 <HAL_Init+0xb4>)
 81017e8:	681b      	ldr	r3, [r3, #0]
 81017ea:	4a0c      	ldr	r2, [pc, #48]	; (810181c <HAL_Init+0xb8>)
 81017ec:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81017ee:	2000      	movs	r0, #0
 81017f0:	f000 f816 	bl	8101820 <HAL_InitTick>
 81017f4:	4603      	mov	r3, r0
 81017f6:	2b00      	cmp	r3, #0
 81017f8:	d001      	beq.n	81017fe <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81017fa:	2301      	movs	r3, #1
 81017fc:	e002      	b.n	8101804 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81017fe:	f7ff fdb3 	bl	8101368 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101802:	2300      	movs	r3, #0
}
 8101804:	4618      	mov	r0, r3
 8101806:	3708      	adds	r7, #8
 8101808:	46bd      	mov	sp, r7
 810180a:	bd80      	pop	{r7, pc}
 810180c:	58024400 	.word	0x58024400
 8101810:	40024400 	.word	0x40024400
 8101814:	0810627c 	.word	0x0810627c
 8101818:	10000004 	.word	0x10000004
 810181c:	10000000 	.word	0x10000000

08101820 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101820:	b580      	push	{r7, lr}
 8101822:	b082      	sub	sp, #8
 8101824:	af00      	add	r7, sp, #0
 8101826:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8101828:	4b15      	ldr	r3, [pc, #84]	; (8101880 <HAL_InitTick+0x60>)
 810182a:	781b      	ldrb	r3, [r3, #0]
 810182c:	2b00      	cmp	r3, #0
 810182e:	d101      	bne.n	8101834 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101830:	2301      	movs	r3, #1
 8101832:	e021      	b.n	8101878 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8101834:	4b13      	ldr	r3, [pc, #76]	; (8101884 <HAL_InitTick+0x64>)
 8101836:	681a      	ldr	r2, [r3, #0]
 8101838:	4b11      	ldr	r3, [pc, #68]	; (8101880 <HAL_InitTick+0x60>)
 810183a:	781b      	ldrb	r3, [r3, #0]
 810183c:	4619      	mov	r1, r3
 810183e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101842:	fbb3 f3f1 	udiv	r3, r3, r1
 8101846:	fbb2 f3f3 	udiv	r3, r2, r3
 810184a:	4618      	mov	r0, r3
 810184c:	f000 f965 	bl	8101b1a <HAL_SYSTICK_Config>
 8101850:	4603      	mov	r3, r0
 8101852:	2b00      	cmp	r3, #0
 8101854:	d001      	beq.n	810185a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8101856:	2301      	movs	r3, #1
 8101858:	e00e      	b.n	8101878 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 810185a:	687b      	ldr	r3, [r7, #4]
 810185c:	2b0f      	cmp	r3, #15
 810185e:	d80a      	bhi.n	8101876 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8101860:	2200      	movs	r2, #0
 8101862:	6879      	ldr	r1, [r7, #4]
 8101864:	f04f 30ff 	mov.w	r0, #4294967295
 8101868:	f000 f92f 	bl	8101aca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 810186c:	4a06      	ldr	r2, [pc, #24]	; (8101888 <HAL_InitTick+0x68>)
 810186e:	687b      	ldr	r3, [r7, #4]
 8101870:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8101872:	2300      	movs	r3, #0
 8101874:	e000      	b.n	8101878 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8101876:	2301      	movs	r3, #1
}
 8101878:	4618      	mov	r0, r3
 810187a:	3708      	adds	r7, #8
 810187c:	46bd      	mov	sp, r7
 810187e:	bd80      	pop	{r7, pc}
 8101880:	10000034 	.word	0x10000034
 8101884:	10000000 	.word	0x10000000
 8101888:	10000030 	.word	0x10000030

0810188c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 810188c:	b480      	push	{r7}
 810188e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101890:	4b06      	ldr	r3, [pc, #24]	; (81018ac <HAL_IncTick+0x20>)
 8101892:	781b      	ldrb	r3, [r3, #0]
 8101894:	461a      	mov	r2, r3
 8101896:	4b06      	ldr	r3, [pc, #24]	; (81018b0 <HAL_IncTick+0x24>)
 8101898:	681b      	ldr	r3, [r3, #0]
 810189a:	4413      	add	r3, r2
 810189c:	4a04      	ldr	r2, [pc, #16]	; (81018b0 <HAL_IncTick+0x24>)
 810189e:	6013      	str	r3, [r2, #0]
}
 81018a0:	bf00      	nop
 81018a2:	46bd      	mov	sp, r7
 81018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018a8:	4770      	bx	lr
 81018aa:	bf00      	nop
 81018ac:	10000034 	.word	0x10000034
 81018b0:	100002c4 	.word	0x100002c4

081018b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81018b4:	b480      	push	{r7}
 81018b6:	af00      	add	r7, sp, #0
  return uwTick;
 81018b8:	4b03      	ldr	r3, [pc, #12]	; (81018c8 <HAL_GetTick+0x14>)
 81018ba:	681b      	ldr	r3, [r3, #0]
}
 81018bc:	4618      	mov	r0, r3
 81018be:	46bd      	mov	sp, r7
 81018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018c4:	4770      	bx	lr
 81018c6:	bf00      	nop
 81018c8:	100002c4 	.word	0x100002c4

081018cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 81018cc:	b580      	push	{r7, lr}
 81018ce:	b084      	sub	sp, #16
 81018d0:	af00      	add	r7, sp, #0
 81018d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 81018d4:	f7ff ffee 	bl	81018b4 <HAL_GetTick>
 81018d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 81018da:	687b      	ldr	r3, [r7, #4]
 81018dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 81018de:	68fb      	ldr	r3, [r7, #12]
 81018e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 81018e4:	d005      	beq.n	81018f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 81018e6:	4b0a      	ldr	r3, [pc, #40]	; (8101910 <HAL_Delay+0x44>)
 81018e8:	781b      	ldrb	r3, [r3, #0]
 81018ea:	461a      	mov	r2, r3
 81018ec:	68fb      	ldr	r3, [r7, #12]
 81018ee:	4413      	add	r3, r2
 81018f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 81018f2:	bf00      	nop
 81018f4:	f7ff ffde 	bl	81018b4 <HAL_GetTick>
 81018f8:	4602      	mov	r2, r0
 81018fa:	68bb      	ldr	r3, [r7, #8]
 81018fc:	1ad3      	subs	r3, r2, r3
 81018fe:	68fa      	ldr	r2, [r7, #12]
 8101900:	429a      	cmp	r2, r3
 8101902:	d8f7      	bhi.n	81018f4 <HAL_Delay+0x28>
  {
  }
}
 8101904:	bf00      	nop
 8101906:	bf00      	nop
 8101908:	3710      	adds	r7, #16
 810190a:	46bd      	mov	sp, r7
 810190c:	bd80      	pop	{r7, pc}
 810190e:	bf00      	nop
 8101910:	10000034 	.word	0x10000034

08101914 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101914:	b480      	push	{r7}
 8101916:	b085      	sub	sp, #20
 8101918:	af00      	add	r7, sp, #0
 810191a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 810191c:	687b      	ldr	r3, [r7, #4]
 810191e:	f003 0307 	and.w	r3, r3, #7
 8101922:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101924:	4b0c      	ldr	r3, [pc, #48]	; (8101958 <__NVIC_SetPriorityGrouping+0x44>)
 8101926:	68db      	ldr	r3, [r3, #12]
 8101928:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810192a:	68ba      	ldr	r2, [r7, #8]
 810192c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8101930:	4013      	ands	r3, r2
 8101932:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101934:	68fb      	ldr	r3, [r7, #12]
 8101936:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101938:	68bb      	ldr	r3, [r7, #8]
 810193a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 810193c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8101940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101944:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8101946:	4a04      	ldr	r2, [pc, #16]	; (8101958 <__NVIC_SetPriorityGrouping+0x44>)
 8101948:	68bb      	ldr	r3, [r7, #8]
 810194a:	60d3      	str	r3, [r2, #12]
}
 810194c:	bf00      	nop
 810194e:	3714      	adds	r7, #20
 8101950:	46bd      	mov	sp, r7
 8101952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101956:	4770      	bx	lr
 8101958:	e000ed00 	.word	0xe000ed00

0810195c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 810195c:	b480      	push	{r7}
 810195e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101960:	4b04      	ldr	r3, [pc, #16]	; (8101974 <__NVIC_GetPriorityGrouping+0x18>)
 8101962:	68db      	ldr	r3, [r3, #12]
 8101964:	0a1b      	lsrs	r3, r3, #8
 8101966:	f003 0307 	and.w	r3, r3, #7
}
 810196a:	4618      	mov	r0, r3
 810196c:	46bd      	mov	sp, r7
 810196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101972:	4770      	bx	lr
 8101974:	e000ed00 	.word	0xe000ed00

08101978 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101978:	b480      	push	{r7}
 810197a:	b083      	sub	sp, #12
 810197c:	af00      	add	r7, sp, #0
 810197e:	4603      	mov	r3, r0
 8101980:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101982:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101986:	2b00      	cmp	r3, #0
 8101988:	db0b      	blt.n	81019a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810198a:	88fb      	ldrh	r3, [r7, #6]
 810198c:	f003 021f 	and.w	r2, r3, #31
 8101990:	4907      	ldr	r1, [pc, #28]	; (81019b0 <__NVIC_EnableIRQ+0x38>)
 8101992:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101996:	095b      	lsrs	r3, r3, #5
 8101998:	2001      	movs	r0, #1
 810199a:	fa00 f202 	lsl.w	r2, r0, r2
 810199e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81019a2:	bf00      	nop
 81019a4:	370c      	adds	r7, #12
 81019a6:	46bd      	mov	sp, r7
 81019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019ac:	4770      	bx	lr
 81019ae:	bf00      	nop
 81019b0:	e000e100 	.word	0xe000e100

081019b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81019b4:	b480      	push	{r7}
 81019b6:	b083      	sub	sp, #12
 81019b8:	af00      	add	r7, sp, #0
 81019ba:	4603      	mov	r3, r0
 81019bc:	6039      	str	r1, [r7, #0]
 81019be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81019c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81019c4:	2b00      	cmp	r3, #0
 81019c6:	db0a      	blt.n	81019de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81019c8:	683b      	ldr	r3, [r7, #0]
 81019ca:	b2da      	uxtb	r2, r3
 81019cc:	490c      	ldr	r1, [pc, #48]	; (8101a00 <__NVIC_SetPriority+0x4c>)
 81019ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81019d2:	0112      	lsls	r2, r2, #4
 81019d4:	b2d2      	uxtb	r2, r2
 81019d6:	440b      	add	r3, r1
 81019d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81019dc:	e00a      	b.n	81019f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81019de:	683b      	ldr	r3, [r7, #0]
 81019e0:	b2da      	uxtb	r2, r3
 81019e2:	4908      	ldr	r1, [pc, #32]	; (8101a04 <__NVIC_SetPriority+0x50>)
 81019e4:	88fb      	ldrh	r3, [r7, #6]
 81019e6:	f003 030f 	and.w	r3, r3, #15
 81019ea:	3b04      	subs	r3, #4
 81019ec:	0112      	lsls	r2, r2, #4
 81019ee:	b2d2      	uxtb	r2, r2
 81019f0:	440b      	add	r3, r1
 81019f2:	761a      	strb	r2, [r3, #24]
}
 81019f4:	bf00      	nop
 81019f6:	370c      	adds	r7, #12
 81019f8:	46bd      	mov	sp, r7
 81019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019fe:	4770      	bx	lr
 8101a00:	e000e100 	.word	0xe000e100
 8101a04:	e000ed00 	.word	0xe000ed00

08101a08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101a08:	b480      	push	{r7}
 8101a0a:	b089      	sub	sp, #36	; 0x24
 8101a0c:	af00      	add	r7, sp, #0
 8101a0e:	60f8      	str	r0, [r7, #12]
 8101a10:	60b9      	str	r1, [r7, #8]
 8101a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101a14:	68fb      	ldr	r3, [r7, #12]
 8101a16:	f003 0307 	and.w	r3, r3, #7
 8101a1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101a1c:	69fb      	ldr	r3, [r7, #28]
 8101a1e:	f1c3 0307 	rsb	r3, r3, #7
 8101a22:	2b04      	cmp	r3, #4
 8101a24:	bf28      	it	cs
 8101a26:	2304      	movcs	r3, #4
 8101a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101a2a:	69fb      	ldr	r3, [r7, #28]
 8101a2c:	3304      	adds	r3, #4
 8101a2e:	2b06      	cmp	r3, #6
 8101a30:	d902      	bls.n	8101a38 <NVIC_EncodePriority+0x30>
 8101a32:	69fb      	ldr	r3, [r7, #28]
 8101a34:	3b03      	subs	r3, #3
 8101a36:	e000      	b.n	8101a3a <NVIC_EncodePriority+0x32>
 8101a38:	2300      	movs	r3, #0
 8101a3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8101a40:	69bb      	ldr	r3, [r7, #24]
 8101a42:	fa02 f303 	lsl.w	r3, r2, r3
 8101a46:	43da      	mvns	r2, r3
 8101a48:	68bb      	ldr	r3, [r7, #8]
 8101a4a:	401a      	ands	r2, r3
 8101a4c:	697b      	ldr	r3, [r7, #20]
 8101a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101a50:	f04f 31ff 	mov.w	r1, #4294967295
 8101a54:	697b      	ldr	r3, [r7, #20]
 8101a56:	fa01 f303 	lsl.w	r3, r1, r3
 8101a5a:	43d9      	mvns	r1, r3
 8101a5c:	687b      	ldr	r3, [r7, #4]
 8101a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101a60:	4313      	orrs	r3, r2
         );
}
 8101a62:	4618      	mov	r0, r3
 8101a64:	3724      	adds	r7, #36	; 0x24
 8101a66:	46bd      	mov	sp, r7
 8101a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a6c:	4770      	bx	lr
	...

08101a70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8101a70:	b580      	push	{r7, lr}
 8101a72:	b082      	sub	sp, #8
 8101a74:	af00      	add	r7, sp, #0
 8101a76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8101a78:	687b      	ldr	r3, [r7, #4]
 8101a7a:	3b01      	subs	r3, #1
 8101a7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8101a80:	d301      	bcc.n	8101a86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8101a82:	2301      	movs	r3, #1
 8101a84:	e00f      	b.n	8101aa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8101a86:	4a0a      	ldr	r2, [pc, #40]	; (8101ab0 <SysTick_Config+0x40>)
 8101a88:	687b      	ldr	r3, [r7, #4]
 8101a8a:	3b01      	subs	r3, #1
 8101a8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8101a8e:	210f      	movs	r1, #15
 8101a90:	f04f 30ff 	mov.w	r0, #4294967295
 8101a94:	f7ff ff8e 	bl	81019b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8101a98:	4b05      	ldr	r3, [pc, #20]	; (8101ab0 <SysTick_Config+0x40>)
 8101a9a:	2200      	movs	r2, #0
 8101a9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8101a9e:	4b04      	ldr	r3, [pc, #16]	; (8101ab0 <SysTick_Config+0x40>)
 8101aa0:	2207      	movs	r2, #7
 8101aa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8101aa4:	2300      	movs	r3, #0
}
 8101aa6:	4618      	mov	r0, r3
 8101aa8:	3708      	adds	r7, #8
 8101aaa:	46bd      	mov	sp, r7
 8101aac:	bd80      	pop	{r7, pc}
 8101aae:	bf00      	nop
 8101ab0:	e000e010 	.word	0xe000e010

08101ab4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101ab4:	b580      	push	{r7, lr}
 8101ab6:	b082      	sub	sp, #8
 8101ab8:	af00      	add	r7, sp, #0
 8101aba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8101abc:	6878      	ldr	r0, [r7, #4]
 8101abe:	f7ff ff29 	bl	8101914 <__NVIC_SetPriorityGrouping>
}
 8101ac2:	bf00      	nop
 8101ac4:	3708      	adds	r7, #8
 8101ac6:	46bd      	mov	sp, r7
 8101ac8:	bd80      	pop	{r7, pc}

08101aca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101aca:	b580      	push	{r7, lr}
 8101acc:	b086      	sub	sp, #24
 8101ace:	af00      	add	r7, sp, #0
 8101ad0:	4603      	mov	r3, r0
 8101ad2:	60b9      	str	r1, [r7, #8]
 8101ad4:	607a      	str	r2, [r7, #4]
 8101ad6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8101ad8:	f7ff ff40 	bl	810195c <__NVIC_GetPriorityGrouping>
 8101adc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8101ade:	687a      	ldr	r2, [r7, #4]
 8101ae0:	68b9      	ldr	r1, [r7, #8]
 8101ae2:	6978      	ldr	r0, [r7, #20]
 8101ae4:	f7ff ff90 	bl	8101a08 <NVIC_EncodePriority>
 8101ae8:	4602      	mov	r2, r0
 8101aea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8101aee:	4611      	mov	r1, r2
 8101af0:	4618      	mov	r0, r3
 8101af2:	f7ff ff5f 	bl	81019b4 <__NVIC_SetPriority>
}
 8101af6:	bf00      	nop
 8101af8:	3718      	adds	r7, #24
 8101afa:	46bd      	mov	sp, r7
 8101afc:	bd80      	pop	{r7, pc}

08101afe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101afe:	b580      	push	{r7, lr}
 8101b00:	b082      	sub	sp, #8
 8101b02:	af00      	add	r7, sp, #0
 8101b04:	4603      	mov	r3, r0
 8101b06:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8101b08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101b0c:	4618      	mov	r0, r3
 8101b0e:	f7ff ff33 	bl	8101978 <__NVIC_EnableIRQ>
}
 8101b12:	bf00      	nop
 8101b14:	3708      	adds	r7, #8
 8101b16:	46bd      	mov	sp, r7
 8101b18:	bd80      	pop	{r7, pc}

08101b1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8101b1a:	b580      	push	{r7, lr}
 8101b1c:	b082      	sub	sp, #8
 8101b1e:	af00      	add	r7, sp, #0
 8101b20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8101b22:	6878      	ldr	r0, [r7, #4]
 8101b24:	f7ff ffa4 	bl	8101a70 <SysTick_Config>
 8101b28:	4603      	mov	r3, r0
}
 8101b2a:	4618      	mov	r0, r3
 8101b2c:	3708      	adds	r7, #8
 8101b2e:	46bd      	mov	sp, r7
 8101b30:	bd80      	pop	{r7, pc}
	...

08101b34 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101b34:	b480      	push	{r7}
 8101b36:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8101b38:	4b07      	ldr	r3, [pc, #28]	; (8101b58 <HAL_GetCurrentCPUID+0x24>)
 8101b3a:	681b      	ldr	r3, [r3, #0]
 8101b3c:	091b      	lsrs	r3, r3, #4
 8101b3e:	f003 030f 	and.w	r3, r3, #15
 8101b42:	2b07      	cmp	r3, #7
 8101b44:	d101      	bne.n	8101b4a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8101b46:	2303      	movs	r3, #3
 8101b48:	e000      	b.n	8101b4c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8101b4a:	2301      	movs	r3, #1
  }
}
 8101b4c:	4618      	mov	r0, r3
 8101b4e:	46bd      	mov	sp, r7
 8101b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b54:	4770      	bx	lr
 8101b56:	bf00      	nop
 8101b58:	e000ed00 	.word	0xe000ed00

08101b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8101b5c:	b480      	push	{r7}
 8101b5e:	b089      	sub	sp, #36	; 0x24
 8101b60:	af00      	add	r7, sp, #0
 8101b62:	6078      	str	r0, [r7, #4]
 8101b64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8101b66:	2300      	movs	r3, #0
 8101b68:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8101b6a:	4b89      	ldr	r3, [pc, #548]	; (8101d90 <HAL_GPIO_Init+0x234>)
 8101b6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101b6e:	e194      	b.n	8101e9a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8101b70:	683b      	ldr	r3, [r7, #0]
 8101b72:	681a      	ldr	r2, [r3, #0]
 8101b74:	2101      	movs	r1, #1
 8101b76:	69fb      	ldr	r3, [r7, #28]
 8101b78:	fa01 f303 	lsl.w	r3, r1, r3
 8101b7c:	4013      	ands	r3, r2
 8101b7e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8101b80:	693b      	ldr	r3, [r7, #16]
 8101b82:	2b00      	cmp	r3, #0
 8101b84:	f000 8186 	beq.w	8101e94 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8101b88:	683b      	ldr	r3, [r7, #0]
 8101b8a:	685b      	ldr	r3, [r3, #4]
 8101b8c:	f003 0303 	and.w	r3, r3, #3
 8101b90:	2b01      	cmp	r3, #1
 8101b92:	d005      	beq.n	8101ba0 <HAL_GPIO_Init+0x44>
 8101b94:	683b      	ldr	r3, [r7, #0]
 8101b96:	685b      	ldr	r3, [r3, #4]
 8101b98:	f003 0303 	and.w	r3, r3, #3
 8101b9c:	2b02      	cmp	r3, #2
 8101b9e:	d130      	bne.n	8101c02 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8101ba0:	687b      	ldr	r3, [r7, #4]
 8101ba2:	689b      	ldr	r3, [r3, #8]
 8101ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8101ba6:	69fb      	ldr	r3, [r7, #28]
 8101ba8:	005b      	lsls	r3, r3, #1
 8101baa:	2203      	movs	r2, #3
 8101bac:	fa02 f303 	lsl.w	r3, r2, r3
 8101bb0:	43db      	mvns	r3, r3
 8101bb2:	69ba      	ldr	r2, [r7, #24]
 8101bb4:	4013      	ands	r3, r2
 8101bb6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8101bb8:	683b      	ldr	r3, [r7, #0]
 8101bba:	68da      	ldr	r2, [r3, #12]
 8101bbc:	69fb      	ldr	r3, [r7, #28]
 8101bbe:	005b      	lsls	r3, r3, #1
 8101bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8101bc4:	69ba      	ldr	r2, [r7, #24]
 8101bc6:	4313      	orrs	r3, r2
 8101bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8101bca:	687b      	ldr	r3, [r7, #4]
 8101bcc:	69ba      	ldr	r2, [r7, #24]
 8101bce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8101bd0:	687b      	ldr	r3, [r7, #4]
 8101bd2:	685b      	ldr	r3, [r3, #4]
 8101bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8101bd6:	2201      	movs	r2, #1
 8101bd8:	69fb      	ldr	r3, [r7, #28]
 8101bda:	fa02 f303 	lsl.w	r3, r2, r3
 8101bde:	43db      	mvns	r3, r3
 8101be0:	69ba      	ldr	r2, [r7, #24]
 8101be2:	4013      	ands	r3, r2
 8101be4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8101be6:	683b      	ldr	r3, [r7, #0]
 8101be8:	685b      	ldr	r3, [r3, #4]
 8101bea:	091b      	lsrs	r3, r3, #4
 8101bec:	f003 0201 	and.w	r2, r3, #1
 8101bf0:	69fb      	ldr	r3, [r7, #28]
 8101bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8101bf6:	69ba      	ldr	r2, [r7, #24]
 8101bf8:	4313      	orrs	r3, r2
 8101bfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8101bfc:	687b      	ldr	r3, [r7, #4]
 8101bfe:	69ba      	ldr	r2, [r7, #24]
 8101c00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8101c02:	683b      	ldr	r3, [r7, #0]
 8101c04:	685b      	ldr	r3, [r3, #4]
 8101c06:	f003 0303 	and.w	r3, r3, #3
 8101c0a:	2b03      	cmp	r3, #3
 8101c0c:	d017      	beq.n	8101c3e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8101c0e:	687b      	ldr	r3, [r7, #4]
 8101c10:	68db      	ldr	r3, [r3, #12]
 8101c12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8101c14:	69fb      	ldr	r3, [r7, #28]
 8101c16:	005b      	lsls	r3, r3, #1
 8101c18:	2203      	movs	r2, #3
 8101c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8101c1e:	43db      	mvns	r3, r3
 8101c20:	69ba      	ldr	r2, [r7, #24]
 8101c22:	4013      	ands	r3, r2
 8101c24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8101c26:	683b      	ldr	r3, [r7, #0]
 8101c28:	689a      	ldr	r2, [r3, #8]
 8101c2a:	69fb      	ldr	r3, [r7, #28]
 8101c2c:	005b      	lsls	r3, r3, #1
 8101c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8101c32:	69ba      	ldr	r2, [r7, #24]
 8101c34:	4313      	orrs	r3, r2
 8101c36:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8101c38:	687b      	ldr	r3, [r7, #4]
 8101c3a:	69ba      	ldr	r2, [r7, #24]
 8101c3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8101c3e:	683b      	ldr	r3, [r7, #0]
 8101c40:	685b      	ldr	r3, [r3, #4]
 8101c42:	f003 0303 	and.w	r3, r3, #3
 8101c46:	2b02      	cmp	r3, #2
 8101c48:	d123      	bne.n	8101c92 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8101c4a:	69fb      	ldr	r3, [r7, #28]
 8101c4c:	08da      	lsrs	r2, r3, #3
 8101c4e:	687b      	ldr	r3, [r7, #4]
 8101c50:	3208      	adds	r2, #8
 8101c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8101c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8101c58:	69fb      	ldr	r3, [r7, #28]
 8101c5a:	f003 0307 	and.w	r3, r3, #7
 8101c5e:	009b      	lsls	r3, r3, #2
 8101c60:	220f      	movs	r2, #15
 8101c62:	fa02 f303 	lsl.w	r3, r2, r3
 8101c66:	43db      	mvns	r3, r3
 8101c68:	69ba      	ldr	r2, [r7, #24]
 8101c6a:	4013      	ands	r3, r2
 8101c6c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8101c6e:	683b      	ldr	r3, [r7, #0]
 8101c70:	691a      	ldr	r2, [r3, #16]
 8101c72:	69fb      	ldr	r3, [r7, #28]
 8101c74:	f003 0307 	and.w	r3, r3, #7
 8101c78:	009b      	lsls	r3, r3, #2
 8101c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8101c7e:	69ba      	ldr	r2, [r7, #24]
 8101c80:	4313      	orrs	r3, r2
 8101c82:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8101c84:	69fb      	ldr	r3, [r7, #28]
 8101c86:	08da      	lsrs	r2, r3, #3
 8101c88:	687b      	ldr	r3, [r7, #4]
 8101c8a:	3208      	adds	r2, #8
 8101c8c:	69b9      	ldr	r1, [r7, #24]
 8101c8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8101c92:	687b      	ldr	r3, [r7, #4]
 8101c94:	681b      	ldr	r3, [r3, #0]
 8101c96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8101c98:	69fb      	ldr	r3, [r7, #28]
 8101c9a:	005b      	lsls	r3, r3, #1
 8101c9c:	2203      	movs	r2, #3
 8101c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8101ca2:	43db      	mvns	r3, r3
 8101ca4:	69ba      	ldr	r2, [r7, #24]
 8101ca6:	4013      	ands	r3, r2
 8101ca8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8101caa:	683b      	ldr	r3, [r7, #0]
 8101cac:	685b      	ldr	r3, [r3, #4]
 8101cae:	f003 0203 	and.w	r2, r3, #3
 8101cb2:	69fb      	ldr	r3, [r7, #28]
 8101cb4:	005b      	lsls	r3, r3, #1
 8101cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8101cba:	69ba      	ldr	r2, [r7, #24]
 8101cbc:	4313      	orrs	r3, r2
 8101cbe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8101cc0:	687b      	ldr	r3, [r7, #4]
 8101cc2:	69ba      	ldr	r2, [r7, #24]
 8101cc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8101cc6:	683b      	ldr	r3, [r7, #0]
 8101cc8:	685b      	ldr	r3, [r3, #4]
 8101cca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8101cce:	2b00      	cmp	r3, #0
 8101cd0:	f000 80e0 	beq.w	8101e94 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101cd4:	4b2f      	ldr	r3, [pc, #188]	; (8101d94 <HAL_GPIO_Init+0x238>)
 8101cd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101cda:	4a2e      	ldr	r2, [pc, #184]	; (8101d94 <HAL_GPIO_Init+0x238>)
 8101cdc:	f043 0302 	orr.w	r3, r3, #2
 8101ce0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101ce4:	4b2b      	ldr	r3, [pc, #172]	; (8101d94 <HAL_GPIO_Init+0x238>)
 8101ce6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101cea:	f003 0302 	and.w	r3, r3, #2
 8101cee:	60fb      	str	r3, [r7, #12]
 8101cf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8101cf2:	4a29      	ldr	r2, [pc, #164]	; (8101d98 <HAL_GPIO_Init+0x23c>)
 8101cf4:	69fb      	ldr	r3, [r7, #28]
 8101cf6:	089b      	lsrs	r3, r3, #2
 8101cf8:	3302      	adds	r3, #2
 8101cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8101cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8101d00:	69fb      	ldr	r3, [r7, #28]
 8101d02:	f003 0303 	and.w	r3, r3, #3
 8101d06:	009b      	lsls	r3, r3, #2
 8101d08:	220f      	movs	r2, #15
 8101d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8101d0e:	43db      	mvns	r3, r3
 8101d10:	69ba      	ldr	r2, [r7, #24]
 8101d12:	4013      	ands	r3, r2
 8101d14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8101d16:	687b      	ldr	r3, [r7, #4]
 8101d18:	4a20      	ldr	r2, [pc, #128]	; (8101d9c <HAL_GPIO_Init+0x240>)
 8101d1a:	4293      	cmp	r3, r2
 8101d1c:	d052      	beq.n	8101dc4 <HAL_GPIO_Init+0x268>
 8101d1e:	687b      	ldr	r3, [r7, #4]
 8101d20:	4a1f      	ldr	r2, [pc, #124]	; (8101da0 <HAL_GPIO_Init+0x244>)
 8101d22:	4293      	cmp	r3, r2
 8101d24:	d031      	beq.n	8101d8a <HAL_GPIO_Init+0x22e>
 8101d26:	687b      	ldr	r3, [r7, #4]
 8101d28:	4a1e      	ldr	r2, [pc, #120]	; (8101da4 <HAL_GPIO_Init+0x248>)
 8101d2a:	4293      	cmp	r3, r2
 8101d2c:	d02b      	beq.n	8101d86 <HAL_GPIO_Init+0x22a>
 8101d2e:	687b      	ldr	r3, [r7, #4]
 8101d30:	4a1d      	ldr	r2, [pc, #116]	; (8101da8 <HAL_GPIO_Init+0x24c>)
 8101d32:	4293      	cmp	r3, r2
 8101d34:	d025      	beq.n	8101d82 <HAL_GPIO_Init+0x226>
 8101d36:	687b      	ldr	r3, [r7, #4]
 8101d38:	4a1c      	ldr	r2, [pc, #112]	; (8101dac <HAL_GPIO_Init+0x250>)
 8101d3a:	4293      	cmp	r3, r2
 8101d3c:	d01f      	beq.n	8101d7e <HAL_GPIO_Init+0x222>
 8101d3e:	687b      	ldr	r3, [r7, #4]
 8101d40:	4a1b      	ldr	r2, [pc, #108]	; (8101db0 <HAL_GPIO_Init+0x254>)
 8101d42:	4293      	cmp	r3, r2
 8101d44:	d019      	beq.n	8101d7a <HAL_GPIO_Init+0x21e>
 8101d46:	687b      	ldr	r3, [r7, #4]
 8101d48:	4a1a      	ldr	r2, [pc, #104]	; (8101db4 <HAL_GPIO_Init+0x258>)
 8101d4a:	4293      	cmp	r3, r2
 8101d4c:	d013      	beq.n	8101d76 <HAL_GPIO_Init+0x21a>
 8101d4e:	687b      	ldr	r3, [r7, #4]
 8101d50:	4a19      	ldr	r2, [pc, #100]	; (8101db8 <HAL_GPIO_Init+0x25c>)
 8101d52:	4293      	cmp	r3, r2
 8101d54:	d00d      	beq.n	8101d72 <HAL_GPIO_Init+0x216>
 8101d56:	687b      	ldr	r3, [r7, #4]
 8101d58:	4a18      	ldr	r2, [pc, #96]	; (8101dbc <HAL_GPIO_Init+0x260>)
 8101d5a:	4293      	cmp	r3, r2
 8101d5c:	d007      	beq.n	8101d6e <HAL_GPIO_Init+0x212>
 8101d5e:	687b      	ldr	r3, [r7, #4]
 8101d60:	4a17      	ldr	r2, [pc, #92]	; (8101dc0 <HAL_GPIO_Init+0x264>)
 8101d62:	4293      	cmp	r3, r2
 8101d64:	d101      	bne.n	8101d6a <HAL_GPIO_Init+0x20e>
 8101d66:	2309      	movs	r3, #9
 8101d68:	e02d      	b.n	8101dc6 <HAL_GPIO_Init+0x26a>
 8101d6a:	230a      	movs	r3, #10
 8101d6c:	e02b      	b.n	8101dc6 <HAL_GPIO_Init+0x26a>
 8101d6e:	2308      	movs	r3, #8
 8101d70:	e029      	b.n	8101dc6 <HAL_GPIO_Init+0x26a>
 8101d72:	2307      	movs	r3, #7
 8101d74:	e027      	b.n	8101dc6 <HAL_GPIO_Init+0x26a>
 8101d76:	2306      	movs	r3, #6
 8101d78:	e025      	b.n	8101dc6 <HAL_GPIO_Init+0x26a>
 8101d7a:	2305      	movs	r3, #5
 8101d7c:	e023      	b.n	8101dc6 <HAL_GPIO_Init+0x26a>
 8101d7e:	2304      	movs	r3, #4
 8101d80:	e021      	b.n	8101dc6 <HAL_GPIO_Init+0x26a>
 8101d82:	2303      	movs	r3, #3
 8101d84:	e01f      	b.n	8101dc6 <HAL_GPIO_Init+0x26a>
 8101d86:	2302      	movs	r3, #2
 8101d88:	e01d      	b.n	8101dc6 <HAL_GPIO_Init+0x26a>
 8101d8a:	2301      	movs	r3, #1
 8101d8c:	e01b      	b.n	8101dc6 <HAL_GPIO_Init+0x26a>
 8101d8e:	bf00      	nop
 8101d90:	580000c0 	.word	0x580000c0
 8101d94:	58024400 	.word	0x58024400
 8101d98:	58000400 	.word	0x58000400
 8101d9c:	58020000 	.word	0x58020000
 8101da0:	58020400 	.word	0x58020400
 8101da4:	58020800 	.word	0x58020800
 8101da8:	58020c00 	.word	0x58020c00
 8101dac:	58021000 	.word	0x58021000
 8101db0:	58021400 	.word	0x58021400
 8101db4:	58021800 	.word	0x58021800
 8101db8:	58021c00 	.word	0x58021c00
 8101dbc:	58022000 	.word	0x58022000
 8101dc0:	58022400 	.word	0x58022400
 8101dc4:	2300      	movs	r3, #0
 8101dc6:	69fa      	ldr	r2, [r7, #28]
 8101dc8:	f002 0203 	and.w	r2, r2, #3
 8101dcc:	0092      	lsls	r2, r2, #2
 8101dce:	4093      	lsls	r3, r2
 8101dd0:	69ba      	ldr	r2, [r7, #24]
 8101dd2:	4313      	orrs	r3, r2
 8101dd4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8101dd6:	4938      	ldr	r1, [pc, #224]	; (8101eb8 <HAL_GPIO_Init+0x35c>)
 8101dd8:	69fb      	ldr	r3, [r7, #28]
 8101dda:	089b      	lsrs	r3, r3, #2
 8101ddc:	3302      	adds	r3, #2
 8101dde:	69ba      	ldr	r2, [r7, #24]
 8101de0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8101de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101de8:	681b      	ldr	r3, [r3, #0]
 8101dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101dec:	693b      	ldr	r3, [r7, #16]
 8101dee:	43db      	mvns	r3, r3
 8101df0:	69ba      	ldr	r2, [r7, #24]
 8101df2:	4013      	ands	r3, r2
 8101df4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8101df6:	683b      	ldr	r3, [r7, #0]
 8101df8:	685b      	ldr	r3, [r3, #4]
 8101dfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8101dfe:	2b00      	cmp	r3, #0
 8101e00:	d003      	beq.n	8101e0a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8101e02:	69ba      	ldr	r2, [r7, #24]
 8101e04:	693b      	ldr	r3, [r7, #16]
 8101e06:	4313      	orrs	r3, r2
 8101e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8101e0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101e0e:	69bb      	ldr	r3, [r7, #24]
 8101e10:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8101e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101e16:	685b      	ldr	r3, [r3, #4]
 8101e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101e1a:	693b      	ldr	r3, [r7, #16]
 8101e1c:	43db      	mvns	r3, r3
 8101e1e:	69ba      	ldr	r2, [r7, #24]
 8101e20:	4013      	ands	r3, r2
 8101e22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8101e24:	683b      	ldr	r3, [r7, #0]
 8101e26:	685b      	ldr	r3, [r3, #4]
 8101e28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101e2c:	2b00      	cmp	r3, #0
 8101e2e:	d003      	beq.n	8101e38 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8101e30:	69ba      	ldr	r2, [r7, #24]
 8101e32:	693b      	ldr	r3, [r7, #16]
 8101e34:	4313      	orrs	r3, r2
 8101e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8101e38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101e3c:	69bb      	ldr	r3, [r7, #24]
 8101e3e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8101e40:	697b      	ldr	r3, [r7, #20]
 8101e42:	685b      	ldr	r3, [r3, #4]
 8101e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101e46:	693b      	ldr	r3, [r7, #16]
 8101e48:	43db      	mvns	r3, r3
 8101e4a:	69ba      	ldr	r2, [r7, #24]
 8101e4c:	4013      	ands	r3, r2
 8101e4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8101e50:	683b      	ldr	r3, [r7, #0]
 8101e52:	685b      	ldr	r3, [r3, #4]
 8101e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8101e58:	2b00      	cmp	r3, #0
 8101e5a:	d003      	beq.n	8101e64 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8101e5c:	69ba      	ldr	r2, [r7, #24]
 8101e5e:	693b      	ldr	r3, [r7, #16]
 8101e60:	4313      	orrs	r3, r2
 8101e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8101e64:	697b      	ldr	r3, [r7, #20]
 8101e66:	69ba      	ldr	r2, [r7, #24]
 8101e68:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8101e6a:	697b      	ldr	r3, [r7, #20]
 8101e6c:	681b      	ldr	r3, [r3, #0]
 8101e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101e70:	693b      	ldr	r3, [r7, #16]
 8101e72:	43db      	mvns	r3, r3
 8101e74:	69ba      	ldr	r2, [r7, #24]
 8101e76:	4013      	ands	r3, r2
 8101e78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8101e7a:	683b      	ldr	r3, [r7, #0]
 8101e7c:	685b      	ldr	r3, [r3, #4]
 8101e7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8101e82:	2b00      	cmp	r3, #0
 8101e84:	d003      	beq.n	8101e8e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8101e86:	69ba      	ldr	r2, [r7, #24]
 8101e88:	693b      	ldr	r3, [r7, #16]
 8101e8a:	4313      	orrs	r3, r2
 8101e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8101e8e:	697b      	ldr	r3, [r7, #20]
 8101e90:	69ba      	ldr	r2, [r7, #24]
 8101e92:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8101e94:	69fb      	ldr	r3, [r7, #28]
 8101e96:	3301      	adds	r3, #1
 8101e98:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101e9a:	683b      	ldr	r3, [r7, #0]
 8101e9c:	681a      	ldr	r2, [r3, #0]
 8101e9e:	69fb      	ldr	r3, [r7, #28]
 8101ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8101ea4:	2b00      	cmp	r3, #0
 8101ea6:	f47f ae63 	bne.w	8101b70 <HAL_GPIO_Init+0x14>
  }
}
 8101eaa:	bf00      	nop
 8101eac:	bf00      	nop
 8101eae:	3724      	adds	r7, #36	; 0x24
 8101eb0:	46bd      	mov	sp, r7
 8101eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101eb6:	4770      	bx	lr
 8101eb8:	58000400 	.word	0x58000400

08101ebc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8101ebc:	b480      	push	{r7}
 8101ebe:	b083      	sub	sp, #12
 8101ec0:	af00      	add	r7, sp, #0
 8101ec2:	6078      	str	r0, [r7, #4]
 8101ec4:	460b      	mov	r3, r1
 8101ec6:	807b      	strh	r3, [r7, #2]
 8101ec8:	4613      	mov	r3, r2
 8101eca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8101ecc:	787b      	ldrb	r3, [r7, #1]
 8101ece:	2b00      	cmp	r3, #0
 8101ed0:	d003      	beq.n	8101eda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8101ed2:	887a      	ldrh	r2, [r7, #2]
 8101ed4:	687b      	ldr	r3, [r7, #4]
 8101ed6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8101ed8:	e003      	b.n	8101ee2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8101eda:	887b      	ldrh	r3, [r7, #2]
 8101edc:	041a      	lsls	r2, r3, #16
 8101ede:	687b      	ldr	r3, [r7, #4]
 8101ee0:	619a      	str	r2, [r3, #24]
}
 8101ee2:	bf00      	nop
 8101ee4:	370c      	adds	r7, #12
 8101ee6:	46bd      	mov	sp, r7
 8101ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101eec:	4770      	bx	lr

08101eee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8101eee:	b480      	push	{r7}
 8101ef0:	b085      	sub	sp, #20
 8101ef2:	af00      	add	r7, sp, #0
 8101ef4:	6078      	str	r0, [r7, #4]
 8101ef6:	460b      	mov	r3, r1
 8101ef8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8101efa:	687b      	ldr	r3, [r7, #4]
 8101efc:	695b      	ldr	r3, [r3, #20]
 8101efe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8101f00:	887a      	ldrh	r2, [r7, #2]
 8101f02:	68fb      	ldr	r3, [r7, #12]
 8101f04:	4013      	ands	r3, r2
 8101f06:	041a      	lsls	r2, r3, #16
 8101f08:	68fb      	ldr	r3, [r7, #12]
 8101f0a:	43d9      	mvns	r1, r3
 8101f0c:	887b      	ldrh	r3, [r7, #2]
 8101f0e:	400b      	ands	r3, r1
 8101f10:	431a      	orrs	r2, r3
 8101f12:	687b      	ldr	r3, [r7, #4]
 8101f14:	619a      	str	r2, [r3, #24]
}
 8101f16:	bf00      	nop
 8101f18:	3714      	adds	r7, #20
 8101f1a:	46bd      	mov	sp, r7
 8101f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f20:	4770      	bx	lr
	...

08101f24 <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
 8101f24:	b480      	push	{r7}
 8101f26:	b083      	sub	sp, #12
 8101f28:	af00      	add	r7, sp, #0
 8101f2a:	6078      	str	r0, [r7, #4]
 8101f2c:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
 8101f2e:	490e      	ldr	r1, [pc, #56]	; (8101f68 <HAL_HSEM_Take+0x44>)
 8101f30:	683b      	ldr	r3, [r7, #0]
 8101f32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8101f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8101f3a:	687a      	ldr	r2, [r7, #4]
 8101f3c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
 8101f40:	4a09      	ldr	r2, [pc, #36]	; (8101f68 <HAL_HSEM_Take+0x44>)
 8101f42:	687b      	ldr	r3, [r7, #4]
 8101f44:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8101f48:	683b      	ldr	r3, [r7, #0]
 8101f4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8101f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8101f52:	429a      	cmp	r2, r3
 8101f54:	d101      	bne.n	8101f5a <HAL_HSEM_Take+0x36>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
 8101f56:	2300      	movs	r3, #0
 8101f58:	e000      	b.n	8101f5c <HAL_HSEM_Take+0x38>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
 8101f5a:	2301      	movs	r3, #1
}
 8101f5c:	4618      	mov	r0, r3
 8101f5e:	370c      	adds	r7, #12
 8101f60:	46bd      	mov	sp, r7
 8101f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f66:	4770      	bx	lr
 8101f68:	58026400 	.word	0x58026400

08101f6c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8101f6c:	b480      	push	{r7}
 8101f6e:	b083      	sub	sp, #12
 8101f70:	af00      	add	r7, sp, #0
 8101f72:	6078      	str	r0, [r7, #4]
 8101f74:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8101f76:	4906      	ldr	r1, [pc, #24]	; (8101f90 <HAL_HSEM_Release+0x24>)
 8101f78:	683b      	ldr	r3, [r7, #0]
 8101f7a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8101f7e:	687b      	ldr	r3, [r7, #4]
 8101f80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8101f84:	bf00      	nop
 8101f86:	370c      	adds	r7, #12
 8101f88:	46bd      	mov	sp, r7
 8101f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f8e:	4770      	bx	lr
 8101f90:	58026400 	.word	0x58026400

08101f94 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8101f94:	b480      	push	{r7}
 8101f96:	b083      	sub	sp, #12
 8101f98:	af00      	add	r7, sp, #0
 8101f9a:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8101f9c:	4b05      	ldr	r3, [pc, #20]	; (8101fb4 <HAL_HSEM_ActivateNotification+0x20>)
 8101f9e:	681a      	ldr	r2, [r3, #0]
 8101fa0:	4904      	ldr	r1, [pc, #16]	; (8101fb4 <HAL_HSEM_ActivateNotification+0x20>)
 8101fa2:	687b      	ldr	r3, [r7, #4]
 8101fa4:	4313      	orrs	r3, r2
 8101fa6:	600b      	str	r3, [r1, #0]
#endif
}
 8101fa8:	bf00      	nop
 8101faa:	370c      	adds	r7, #12
 8101fac:	46bd      	mov	sp, r7
 8101fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fb2:	4770      	bx	lr
 8101fb4:	58026510 	.word	0x58026510

08101fb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8101fb8:	b580      	push	{r7, lr}
 8101fba:	b082      	sub	sp, #8
 8101fbc:	af00      	add	r7, sp, #0
 8101fbe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8101fc0:	687b      	ldr	r3, [r7, #4]
 8101fc2:	2b00      	cmp	r3, #0
 8101fc4:	d101      	bne.n	8101fca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8101fc6:	2301      	movs	r3, #1
 8101fc8:	e081      	b.n	81020ce <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8101fca:	687b      	ldr	r3, [r7, #4]
 8101fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8101fd0:	b2db      	uxtb	r3, r3
 8101fd2:	2b00      	cmp	r3, #0
 8101fd4:	d106      	bne.n	8101fe4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8101fd6:	687b      	ldr	r3, [r7, #4]
 8101fd8:	2200      	movs	r2, #0
 8101fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8101fde:	6878      	ldr	r0, [r7, #4]
 8101fe0:	f7ff f9dc 	bl	810139c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8101fe4:	687b      	ldr	r3, [r7, #4]
 8101fe6:	2224      	movs	r2, #36	; 0x24
 8101fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8101fec:	687b      	ldr	r3, [r7, #4]
 8101fee:	681b      	ldr	r3, [r3, #0]
 8101ff0:	681a      	ldr	r2, [r3, #0]
 8101ff2:	687b      	ldr	r3, [r7, #4]
 8101ff4:	681b      	ldr	r3, [r3, #0]
 8101ff6:	f022 0201 	bic.w	r2, r2, #1
 8101ffa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8101ffc:	687b      	ldr	r3, [r7, #4]
 8101ffe:	685a      	ldr	r2, [r3, #4]
 8102000:	687b      	ldr	r3, [r7, #4]
 8102002:	681b      	ldr	r3, [r3, #0]
 8102004:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8102008:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 810200a:	687b      	ldr	r3, [r7, #4]
 810200c:	681b      	ldr	r3, [r3, #0]
 810200e:	689a      	ldr	r2, [r3, #8]
 8102010:	687b      	ldr	r3, [r7, #4]
 8102012:	681b      	ldr	r3, [r3, #0]
 8102014:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8102018:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 810201a:	687b      	ldr	r3, [r7, #4]
 810201c:	68db      	ldr	r3, [r3, #12]
 810201e:	2b01      	cmp	r3, #1
 8102020:	d107      	bne.n	8102032 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8102022:	687b      	ldr	r3, [r7, #4]
 8102024:	689a      	ldr	r2, [r3, #8]
 8102026:	687b      	ldr	r3, [r7, #4]
 8102028:	681b      	ldr	r3, [r3, #0]
 810202a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 810202e:	609a      	str	r2, [r3, #8]
 8102030:	e006      	b.n	8102040 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8102032:	687b      	ldr	r3, [r7, #4]
 8102034:	689a      	ldr	r2, [r3, #8]
 8102036:	687b      	ldr	r3, [r7, #4]
 8102038:	681b      	ldr	r3, [r3, #0]
 810203a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 810203e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8102040:	687b      	ldr	r3, [r7, #4]
 8102042:	68db      	ldr	r3, [r3, #12]
 8102044:	2b02      	cmp	r3, #2
 8102046:	d104      	bne.n	8102052 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8102048:	687b      	ldr	r3, [r7, #4]
 810204a:	681b      	ldr	r3, [r3, #0]
 810204c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8102050:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8102052:	687b      	ldr	r3, [r7, #4]
 8102054:	681b      	ldr	r3, [r3, #0]
 8102056:	685b      	ldr	r3, [r3, #4]
 8102058:	687a      	ldr	r2, [r7, #4]
 810205a:	6812      	ldr	r2, [r2, #0]
 810205c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8102060:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8102064:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8102066:	687b      	ldr	r3, [r7, #4]
 8102068:	681b      	ldr	r3, [r3, #0]
 810206a:	68da      	ldr	r2, [r3, #12]
 810206c:	687b      	ldr	r3, [r7, #4]
 810206e:	681b      	ldr	r3, [r3, #0]
 8102070:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8102074:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8102076:	687b      	ldr	r3, [r7, #4]
 8102078:	691a      	ldr	r2, [r3, #16]
 810207a:	687b      	ldr	r3, [r7, #4]
 810207c:	695b      	ldr	r3, [r3, #20]
 810207e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8102082:	687b      	ldr	r3, [r7, #4]
 8102084:	699b      	ldr	r3, [r3, #24]
 8102086:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8102088:	687b      	ldr	r3, [r7, #4]
 810208a:	681b      	ldr	r3, [r3, #0]
 810208c:	430a      	orrs	r2, r1
 810208e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8102090:	687b      	ldr	r3, [r7, #4]
 8102092:	69d9      	ldr	r1, [r3, #28]
 8102094:	687b      	ldr	r3, [r7, #4]
 8102096:	6a1a      	ldr	r2, [r3, #32]
 8102098:	687b      	ldr	r3, [r7, #4]
 810209a:	681b      	ldr	r3, [r3, #0]
 810209c:	430a      	orrs	r2, r1
 810209e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 81020a0:	687b      	ldr	r3, [r7, #4]
 81020a2:	681b      	ldr	r3, [r3, #0]
 81020a4:	681a      	ldr	r2, [r3, #0]
 81020a6:	687b      	ldr	r3, [r7, #4]
 81020a8:	681b      	ldr	r3, [r3, #0]
 81020aa:	f042 0201 	orr.w	r2, r2, #1
 81020ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81020b0:	687b      	ldr	r3, [r7, #4]
 81020b2:	2200      	movs	r2, #0
 81020b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 81020b6:	687b      	ldr	r3, [r7, #4]
 81020b8:	2220      	movs	r2, #32
 81020ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 81020be:	687b      	ldr	r3, [r7, #4]
 81020c0:	2200      	movs	r2, #0
 81020c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 81020c4:	687b      	ldr	r3, [r7, #4]
 81020c6:	2200      	movs	r2, #0
 81020c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 81020cc:	2300      	movs	r3, #0
}
 81020ce:	4618      	mov	r0, r3
 81020d0:	3708      	adds	r7, #8
 81020d2:	46bd      	mov	sp, r7
 81020d4:	bd80      	pop	{r7, pc}
	...

081020d8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81020d8:	b580      	push	{r7, lr}
 81020da:	b088      	sub	sp, #32
 81020dc:	af02      	add	r7, sp, #8
 81020de:	60f8      	str	r0, [r7, #12]
 81020e0:	4608      	mov	r0, r1
 81020e2:	4611      	mov	r1, r2
 81020e4:	461a      	mov	r2, r3
 81020e6:	4603      	mov	r3, r0
 81020e8:	817b      	strh	r3, [r7, #10]
 81020ea:	460b      	mov	r3, r1
 81020ec:	813b      	strh	r3, [r7, #8]
 81020ee:	4613      	mov	r3, r2
 81020f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81020f2:	68fb      	ldr	r3, [r7, #12]
 81020f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81020f8:	b2db      	uxtb	r3, r3
 81020fa:	2b20      	cmp	r3, #32
 81020fc:	f040 80fd 	bne.w	81022fa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8102100:	6a3b      	ldr	r3, [r7, #32]
 8102102:	2b00      	cmp	r3, #0
 8102104:	d002      	beq.n	810210c <HAL_I2C_Mem_Read+0x34>
 8102106:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8102108:	2b00      	cmp	r3, #0
 810210a:	d105      	bne.n	8102118 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 810210c:	68fb      	ldr	r3, [r7, #12]
 810210e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8102112:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8102114:	2301      	movs	r3, #1
 8102116:	e0f1      	b.n	81022fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102118:	68fb      	ldr	r3, [r7, #12]
 810211a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810211e:	2b01      	cmp	r3, #1
 8102120:	d101      	bne.n	8102126 <HAL_I2C_Mem_Read+0x4e>
 8102122:	2302      	movs	r3, #2
 8102124:	e0ea      	b.n	81022fc <HAL_I2C_Mem_Read+0x224>
 8102126:	68fb      	ldr	r3, [r7, #12]
 8102128:	2201      	movs	r2, #1
 810212a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 810212e:	f7ff fbc1 	bl	81018b4 <HAL_GetTick>
 8102132:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8102134:	697b      	ldr	r3, [r7, #20]
 8102136:	9300      	str	r3, [sp, #0]
 8102138:	2319      	movs	r3, #25
 810213a:	2201      	movs	r2, #1
 810213c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8102140:	68f8      	ldr	r0, [r7, #12]
 8102142:	f000 f95b 	bl	81023fc <I2C_WaitOnFlagUntilTimeout>
 8102146:	4603      	mov	r3, r0
 8102148:	2b00      	cmp	r3, #0
 810214a:	d001      	beq.n	8102150 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 810214c:	2301      	movs	r3, #1
 810214e:	e0d5      	b.n	81022fc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8102150:	68fb      	ldr	r3, [r7, #12]
 8102152:	2222      	movs	r2, #34	; 0x22
 8102154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8102158:	68fb      	ldr	r3, [r7, #12]
 810215a:	2240      	movs	r2, #64	; 0x40
 810215c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8102160:	68fb      	ldr	r3, [r7, #12]
 8102162:	2200      	movs	r2, #0
 8102164:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8102166:	68fb      	ldr	r3, [r7, #12]
 8102168:	6a3a      	ldr	r2, [r7, #32]
 810216a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 810216c:	68fb      	ldr	r3, [r7, #12]
 810216e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8102170:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8102172:	68fb      	ldr	r3, [r7, #12]
 8102174:	2200      	movs	r2, #0
 8102176:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8102178:	88f8      	ldrh	r0, [r7, #6]
 810217a:	893a      	ldrh	r2, [r7, #8]
 810217c:	8979      	ldrh	r1, [r7, #10]
 810217e:	697b      	ldr	r3, [r7, #20]
 8102180:	9301      	str	r3, [sp, #4]
 8102182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102184:	9300      	str	r3, [sp, #0]
 8102186:	4603      	mov	r3, r0
 8102188:	68f8      	ldr	r0, [r7, #12]
 810218a:	f000 f8bf 	bl	810230c <I2C_RequestMemoryRead>
 810218e:	4603      	mov	r3, r0
 8102190:	2b00      	cmp	r3, #0
 8102192:	d005      	beq.n	81021a0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8102194:	68fb      	ldr	r3, [r7, #12]
 8102196:	2200      	movs	r2, #0
 8102198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 810219c:	2301      	movs	r3, #1
 810219e:	e0ad      	b.n	81022fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81021a0:	68fb      	ldr	r3, [r7, #12]
 81021a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81021a4:	b29b      	uxth	r3, r3
 81021a6:	2bff      	cmp	r3, #255	; 0xff
 81021a8:	d90e      	bls.n	81021c8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 81021aa:	68fb      	ldr	r3, [r7, #12]
 81021ac:	22ff      	movs	r2, #255	; 0xff
 81021ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 81021b0:	68fb      	ldr	r3, [r7, #12]
 81021b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81021b4:	b2da      	uxtb	r2, r3
 81021b6:	8979      	ldrh	r1, [r7, #10]
 81021b8:	4b52      	ldr	r3, [pc, #328]	; (8102304 <HAL_I2C_Mem_Read+0x22c>)
 81021ba:	9300      	str	r3, [sp, #0]
 81021bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81021c0:	68f8      	ldr	r0, [r7, #12]
 81021c2:	f000 fac3 	bl	810274c <I2C_TransferConfig>
 81021c6:	e00f      	b.n	81021e8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 81021c8:	68fb      	ldr	r3, [r7, #12]
 81021ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81021cc:	b29a      	uxth	r2, r3
 81021ce:	68fb      	ldr	r3, [r7, #12]
 81021d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 81021d2:	68fb      	ldr	r3, [r7, #12]
 81021d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81021d6:	b2da      	uxtb	r2, r3
 81021d8:	8979      	ldrh	r1, [r7, #10]
 81021da:	4b4a      	ldr	r3, [pc, #296]	; (8102304 <HAL_I2C_Mem_Read+0x22c>)
 81021dc:	9300      	str	r3, [sp, #0]
 81021de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81021e2:	68f8      	ldr	r0, [r7, #12]
 81021e4:	f000 fab2 	bl	810274c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 81021e8:	697b      	ldr	r3, [r7, #20]
 81021ea:	9300      	str	r3, [sp, #0]
 81021ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81021ee:	2200      	movs	r2, #0
 81021f0:	2104      	movs	r1, #4
 81021f2:	68f8      	ldr	r0, [r7, #12]
 81021f4:	f000 f902 	bl	81023fc <I2C_WaitOnFlagUntilTimeout>
 81021f8:	4603      	mov	r3, r0
 81021fa:	2b00      	cmp	r3, #0
 81021fc:	d001      	beq.n	8102202 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 81021fe:	2301      	movs	r3, #1
 8102200:	e07c      	b.n	81022fc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8102202:	68fb      	ldr	r3, [r7, #12]
 8102204:	681b      	ldr	r3, [r3, #0]
 8102206:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8102208:	68fb      	ldr	r3, [r7, #12]
 810220a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810220c:	b2d2      	uxtb	r2, r2
 810220e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8102210:	68fb      	ldr	r3, [r7, #12]
 8102212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102214:	1c5a      	adds	r2, r3, #1
 8102216:	68fb      	ldr	r3, [r7, #12]
 8102218:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 810221a:	68fb      	ldr	r3, [r7, #12]
 810221c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810221e:	3b01      	subs	r3, #1
 8102220:	b29a      	uxth	r2, r3
 8102222:	68fb      	ldr	r3, [r7, #12]
 8102224:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8102226:	68fb      	ldr	r3, [r7, #12]
 8102228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810222a:	b29b      	uxth	r3, r3
 810222c:	3b01      	subs	r3, #1
 810222e:	b29a      	uxth	r2, r3
 8102230:	68fb      	ldr	r3, [r7, #12]
 8102232:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8102234:	68fb      	ldr	r3, [r7, #12]
 8102236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102238:	b29b      	uxth	r3, r3
 810223a:	2b00      	cmp	r3, #0
 810223c:	d034      	beq.n	81022a8 <HAL_I2C_Mem_Read+0x1d0>
 810223e:	68fb      	ldr	r3, [r7, #12]
 8102240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102242:	2b00      	cmp	r3, #0
 8102244:	d130      	bne.n	81022a8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8102246:	697b      	ldr	r3, [r7, #20]
 8102248:	9300      	str	r3, [sp, #0]
 810224a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810224c:	2200      	movs	r2, #0
 810224e:	2180      	movs	r1, #128	; 0x80
 8102250:	68f8      	ldr	r0, [r7, #12]
 8102252:	f000 f8d3 	bl	81023fc <I2C_WaitOnFlagUntilTimeout>
 8102256:	4603      	mov	r3, r0
 8102258:	2b00      	cmp	r3, #0
 810225a:	d001      	beq.n	8102260 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 810225c:	2301      	movs	r3, #1
 810225e:	e04d      	b.n	81022fc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102260:	68fb      	ldr	r3, [r7, #12]
 8102262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102264:	b29b      	uxth	r3, r3
 8102266:	2bff      	cmp	r3, #255	; 0xff
 8102268:	d90e      	bls.n	8102288 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 810226a:	68fb      	ldr	r3, [r7, #12]
 810226c:	22ff      	movs	r2, #255	; 0xff
 810226e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8102270:	68fb      	ldr	r3, [r7, #12]
 8102272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102274:	b2da      	uxtb	r2, r3
 8102276:	8979      	ldrh	r1, [r7, #10]
 8102278:	2300      	movs	r3, #0
 810227a:	9300      	str	r3, [sp, #0]
 810227c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102280:	68f8      	ldr	r0, [r7, #12]
 8102282:	f000 fa63 	bl	810274c <I2C_TransferConfig>
 8102286:	e00f      	b.n	81022a8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8102288:	68fb      	ldr	r3, [r7, #12]
 810228a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810228c:	b29a      	uxth	r2, r3
 810228e:	68fb      	ldr	r3, [r7, #12]
 8102290:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8102292:	68fb      	ldr	r3, [r7, #12]
 8102294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102296:	b2da      	uxtb	r2, r3
 8102298:	8979      	ldrh	r1, [r7, #10]
 810229a:	2300      	movs	r3, #0
 810229c:	9300      	str	r3, [sp, #0]
 810229e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81022a2:	68f8      	ldr	r0, [r7, #12]
 81022a4:	f000 fa52 	bl	810274c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 81022a8:	68fb      	ldr	r3, [r7, #12]
 81022aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81022ac:	b29b      	uxth	r3, r3
 81022ae:	2b00      	cmp	r3, #0
 81022b0:	d19a      	bne.n	81021e8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81022b2:	697a      	ldr	r2, [r7, #20]
 81022b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 81022b6:	68f8      	ldr	r0, [r7, #12]
 81022b8:	f000 f920 	bl	81024fc <I2C_WaitOnSTOPFlagUntilTimeout>
 81022bc:	4603      	mov	r3, r0
 81022be:	2b00      	cmp	r3, #0
 81022c0:	d001      	beq.n	81022c6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 81022c2:	2301      	movs	r3, #1
 81022c4:	e01a      	b.n	81022fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81022c6:	68fb      	ldr	r3, [r7, #12]
 81022c8:	681b      	ldr	r3, [r3, #0]
 81022ca:	2220      	movs	r2, #32
 81022cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81022ce:	68fb      	ldr	r3, [r7, #12]
 81022d0:	681b      	ldr	r3, [r3, #0]
 81022d2:	6859      	ldr	r1, [r3, #4]
 81022d4:	68fb      	ldr	r3, [r7, #12]
 81022d6:	681a      	ldr	r2, [r3, #0]
 81022d8:	4b0b      	ldr	r3, [pc, #44]	; (8102308 <HAL_I2C_Mem_Read+0x230>)
 81022da:	400b      	ands	r3, r1
 81022dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 81022de:	68fb      	ldr	r3, [r7, #12]
 81022e0:	2220      	movs	r2, #32
 81022e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 81022e6:	68fb      	ldr	r3, [r7, #12]
 81022e8:	2200      	movs	r2, #0
 81022ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81022ee:	68fb      	ldr	r3, [r7, #12]
 81022f0:	2200      	movs	r2, #0
 81022f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81022f6:	2300      	movs	r3, #0
 81022f8:	e000      	b.n	81022fc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 81022fa:	2302      	movs	r3, #2
  }
}
 81022fc:	4618      	mov	r0, r3
 81022fe:	3718      	adds	r7, #24
 8102300:	46bd      	mov	sp, r7
 8102302:	bd80      	pop	{r7, pc}
 8102304:	80002400 	.word	0x80002400
 8102308:	fe00e800 	.word	0xfe00e800

0810230c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 810230c:	b580      	push	{r7, lr}
 810230e:	b086      	sub	sp, #24
 8102310:	af02      	add	r7, sp, #8
 8102312:	60f8      	str	r0, [r7, #12]
 8102314:	4608      	mov	r0, r1
 8102316:	4611      	mov	r1, r2
 8102318:	461a      	mov	r2, r3
 810231a:	4603      	mov	r3, r0
 810231c:	817b      	strh	r3, [r7, #10]
 810231e:	460b      	mov	r3, r1
 8102320:	813b      	strh	r3, [r7, #8]
 8102322:	4613      	mov	r3, r2
 8102324:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8102326:	88fb      	ldrh	r3, [r7, #6]
 8102328:	b2da      	uxtb	r2, r3
 810232a:	8979      	ldrh	r1, [r7, #10]
 810232c:	4b20      	ldr	r3, [pc, #128]	; (81023b0 <I2C_RequestMemoryRead+0xa4>)
 810232e:	9300      	str	r3, [sp, #0]
 8102330:	2300      	movs	r3, #0
 8102332:	68f8      	ldr	r0, [r7, #12]
 8102334:	f000 fa0a 	bl	810274c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8102338:	69fa      	ldr	r2, [r7, #28]
 810233a:	69b9      	ldr	r1, [r7, #24]
 810233c:	68f8      	ldr	r0, [r7, #12]
 810233e:	f000 f89d 	bl	810247c <I2C_WaitOnTXISFlagUntilTimeout>
 8102342:	4603      	mov	r3, r0
 8102344:	2b00      	cmp	r3, #0
 8102346:	d001      	beq.n	810234c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8102348:	2301      	movs	r3, #1
 810234a:	e02c      	b.n	81023a6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 810234c:	88fb      	ldrh	r3, [r7, #6]
 810234e:	2b01      	cmp	r3, #1
 8102350:	d105      	bne.n	810235e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8102352:	893b      	ldrh	r3, [r7, #8]
 8102354:	b2da      	uxtb	r2, r3
 8102356:	68fb      	ldr	r3, [r7, #12]
 8102358:	681b      	ldr	r3, [r3, #0]
 810235a:	629a      	str	r2, [r3, #40]	; 0x28
 810235c:	e015      	b.n	810238a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 810235e:	893b      	ldrh	r3, [r7, #8]
 8102360:	0a1b      	lsrs	r3, r3, #8
 8102362:	b29b      	uxth	r3, r3
 8102364:	b2da      	uxtb	r2, r3
 8102366:	68fb      	ldr	r3, [r7, #12]
 8102368:	681b      	ldr	r3, [r3, #0]
 810236a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 810236c:	69fa      	ldr	r2, [r7, #28]
 810236e:	69b9      	ldr	r1, [r7, #24]
 8102370:	68f8      	ldr	r0, [r7, #12]
 8102372:	f000 f883 	bl	810247c <I2C_WaitOnTXISFlagUntilTimeout>
 8102376:	4603      	mov	r3, r0
 8102378:	2b00      	cmp	r3, #0
 810237a:	d001      	beq.n	8102380 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 810237c:	2301      	movs	r3, #1
 810237e:	e012      	b.n	81023a6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8102380:	893b      	ldrh	r3, [r7, #8]
 8102382:	b2da      	uxtb	r2, r3
 8102384:	68fb      	ldr	r3, [r7, #12]
 8102386:	681b      	ldr	r3, [r3, #0]
 8102388:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 810238a:	69fb      	ldr	r3, [r7, #28]
 810238c:	9300      	str	r3, [sp, #0]
 810238e:	69bb      	ldr	r3, [r7, #24]
 8102390:	2200      	movs	r2, #0
 8102392:	2140      	movs	r1, #64	; 0x40
 8102394:	68f8      	ldr	r0, [r7, #12]
 8102396:	f000 f831 	bl	81023fc <I2C_WaitOnFlagUntilTimeout>
 810239a:	4603      	mov	r3, r0
 810239c:	2b00      	cmp	r3, #0
 810239e:	d001      	beq.n	81023a4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 81023a0:	2301      	movs	r3, #1
 81023a2:	e000      	b.n	81023a6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 81023a4:	2300      	movs	r3, #0
}
 81023a6:	4618      	mov	r0, r3
 81023a8:	3710      	adds	r7, #16
 81023aa:	46bd      	mov	sp, r7
 81023ac:	bd80      	pop	{r7, pc}
 81023ae:	bf00      	nop
 81023b0:	80002000 	.word	0x80002000

081023b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 81023b4:	b480      	push	{r7}
 81023b6:	b083      	sub	sp, #12
 81023b8:	af00      	add	r7, sp, #0
 81023ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 81023bc:	687b      	ldr	r3, [r7, #4]
 81023be:	681b      	ldr	r3, [r3, #0]
 81023c0:	699b      	ldr	r3, [r3, #24]
 81023c2:	f003 0302 	and.w	r3, r3, #2
 81023c6:	2b02      	cmp	r3, #2
 81023c8:	d103      	bne.n	81023d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 81023ca:	687b      	ldr	r3, [r7, #4]
 81023cc:	681b      	ldr	r3, [r3, #0]
 81023ce:	2200      	movs	r2, #0
 81023d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 81023d2:	687b      	ldr	r3, [r7, #4]
 81023d4:	681b      	ldr	r3, [r3, #0]
 81023d6:	699b      	ldr	r3, [r3, #24]
 81023d8:	f003 0301 	and.w	r3, r3, #1
 81023dc:	2b01      	cmp	r3, #1
 81023de:	d007      	beq.n	81023f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 81023e0:	687b      	ldr	r3, [r7, #4]
 81023e2:	681b      	ldr	r3, [r3, #0]
 81023e4:	699a      	ldr	r2, [r3, #24]
 81023e6:	687b      	ldr	r3, [r7, #4]
 81023e8:	681b      	ldr	r3, [r3, #0]
 81023ea:	f042 0201 	orr.w	r2, r2, #1
 81023ee:	619a      	str	r2, [r3, #24]
  }
}
 81023f0:	bf00      	nop
 81023f2:	370c      	adds	r7, #12
 81023f4:	46bd      	mov	sp, r7
 81023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023fa:	4770      	bx	lr

081023fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 81023fc:	b580      	push	{r7, lr}
 81023fe:	b084      	sub	sp, #16
 8102400:	af00      	add	r7, sp, #0
 8102402:	60f8      	str	r0, [r7, #12]
 8102404:	60b9      	str	r1, [r7, #8]
 8102406:	603b      	str	r3, [r7, #0]
 8102408:	4613      	mov	r3, r2
 810240a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 810240c:	e022      	b.n	8102454 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810240e:	683b      	ldr	r3, [r7, #0]
 8102410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102414:	d01e      	beq.n	8102454 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102416:	f7ff fa4d 	bl	81018b4 <HAL_GetTick>
 810241a:	4602      	mov	r2, r0
 810241c:	69bb      	ldr	r3, [r7, #24]
 810241e:	1ad3      	subs	r3, r2, r3
 8102420:	683a      	ldr	r2, [r7, #0]
 8102422:	429a      	cmp	r2, r3
 8102424:	d302      	bcc.n	810242c <I2C_WaitOnFlagUntilTimeout+0x30>
 8102426:	683b      	ldr	r3, [r7, #0]
 8102428:	2b00      	cmp	r3, #0
 810242a:	d113      	bne.n	8102454 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810242c:	68fb      	ldr	r3, [r7, #12]
 810242e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102430:	f043 0220 	orr.w	r2, r3, #32
 8102434:	68fb      	ldr	r3, [r7, #12]
 8102436:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8102438:	68fb      	ldr	r3, [r7, #12]
 810243a:	2220      	movs	r2, #32
 810243c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8102440:	68fb      	ldr	r3, [r7, #12]
 8102442:	2200      	movs	r2, #0
 8102444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8102448:	68fb      	ldr	r3, [r7, #12]
 810244a:	2200      	movs	r2, #0
 810244c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8102450:	2301      	movs	r3, #1
 8102452:	e00f      	b.n	8102474 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8102454:	68fb      	ldr	r3, [r7, #12]
 8102456:	681b      	ldr	r3, [r3, #0]
 8102458:	699a      	ldr	r2, [r3, #24]
 810245a:	68bb      	ldr	r3, [r7, #8]
 810245c:	4013      	ands	r3, r2
 810245e:	68ba      	ldr	r2, [r7, #8]
 8102460:	429a      	cmp	r2, r3
 8102462:	bf0c      	ite	eq
 8102464:	2301      	moveq	r3, #1
 8102466:	2300      	movne	r3, #0
 8102468:	b2db      	uxtb	r3, r3
 810246a:	461a      	mov	r2, r3
 810246c:	79fb      	ldrb	r3, [r7, #7]
 810246e:	429a      	cmp	r2, r3
 8102470:	d0cd      	beq.n	810240e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8102472:	2300      	movs	r3, #0
}
 8102474:	4618      	mov	r0, r3
 8102476:	3710      	adds	r7, #16
 8102478:	46bd      	mov	sp, r7
 810247a:	bd80      	pop	{r7, pc}

0810247c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 810247c:	b580      	push	{r7, lr}
 810247e:	b084      	sub	sp, #16
 8102480:	af00      	add	r7, sp, #0
 8102482:	60f8      	str	r0, [r7, #12]
 8102484:	60b9      	str	r1, [r7, #8]
 8102486:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8102488:	e02c      	b.n	81024e4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 810248a:	687a      	ldr	r2, [r7, #4]
 810248c:	68b9      	ldr	r1, [r7, #8]
 810248e:	68f8      	ldr	r0, [r7, #12]
 8102490:	f000 f870 	bl	8102574 <I2C_IsErrorOccurred>
 8102494:	4603      	mov	r3, r0
 8102496:	2b00      	cmp	r3, #0
 8102498:	d001      	beq.n	810249e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 810249a:	2301      	movs	r3, #1
 810249c:	e02a      	b.n	81024f4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810249e:	68bb      	ldr	r3, [r7, #8]
 81024a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 81024a4:	d01e      	beq.n	81024e4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81024a6:	f7ff fa05 	bl	81018b4 <HAL_GetTick>
 81024aa:	4602      	mov	r2, r0
 81024ac:	687b      	ldr	r3, [r7, #4]
 81024ae:	1ad3      	subs	r3, r2, r3
 81024b0:	68ba      	ldr	r2, [r7, #8]
 81024b2:	429a      	cmp	r2, r3
 81024b4:	d302      	bcc.n	81024bc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 81024b6:	68bb      	ldr	r3, [r7, #8]
 81024b8:	2b00      	cmp	r3, #0
 81024ba:	d113      	bne.n	81024e4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81024bc:	68fb      	ldr	r3, [r7, #12]
 81024be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81024c0:	f043 0220 	orr.w	r2, r3, #32
 81024c4:	68fb      	ldr	r3, [r7, #12]
 81024c6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 81024c8:	68fb      	ldr	r3, [r7, #12]
 81024ca:	2220      	movs	r2, #32
 81024cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 81024d0:	68fb      	ldr	r3, [r7, #12]
 81024d2:	2200      	movs	r2, #0
 81024d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 81024d8:	68fb      	ldr	r3, [r7, #12]
 81024da:	2200      	movs	r2, #0
 81024dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 81024e0:	2301      	movs	r3, #1
 81024e2:	e007      	b.n	81024f4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 81024e4:	68fb      	ldr	r3, [r7, #12]
 81024e6:	681b      	ldr	r3, [r3, #0]
 81024e8:	699b      	ldr	r3, [r3, #24]
 81024ea:	f003 0302 	and.w	r3, r3, #2
 81024ee:	2b02      	cmp	r3, #2
 81024f0:	d1cb      	bne.n	810248a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 81024f2:	2300      	movs	r3, #0
}
 81024f4:	4618      	mov	r0, r3
 81024f6:	3710      	adds	r7, #16
 81024f8:	46bd      	mov	sp, r7
 81024fa:	bd80      	pop	{r7, pc}

081024fc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 81024fc:	b580      	push	{r7, lr}
 81024fe:	b084      	sub	sp, #16
 8102500:	af00      	add	r7, sp, #0
 8102502:	60f8      	str	r0, [r7, #12]
 8102504:	60b9      	str	r1, [r7, #8]
 8102506:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102508:	e028      	b.n	810255c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 810250a:	687a      	ldr	r2, [r7, #4]
 810250c:	68b9      	ldr	r1, [r7, #8]
 810250e:	68f8      	ldr	r0, [r7, #12]
 8102510:	f000 f830 	bl	8102574 <I2C_IsErrorOccurred>
 8102514:	4603      	mov	r3, r0
 8102516:	2b00      	cmp	r3, #0
 8102518:	d001      	beq.n	810251e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 810251a:	2301      	movs	r3, #1
 810251c:	e026      	b.n	810256c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810251e:	f7ff f9c9 	bl	81018b4 <HAL_GetTick>
 8102522:	4602      	mov	r2, r0
 8102524:	687b      	ldr	r3, [r7, #4]
 8102526:	1ad3      	subs	r3, r2, r3
 8102528:	68ba      	ldr	r2, [r7, #8]
 810252a:	429a      	cmp	r2, r3
 810252c:	d302      	bcc.n	8102534 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 810252e:	68bb      	ldr	r3, [r7, #8]
 8102530:	2b00      	cmp	r3, #0
 8102532:	d113      	bne.n	810255c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102534:	68fb      	ldr	r3, [r7, #12]
 8102536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102538:	f043 0220 	orr.w	r2, r3, #32
 810253c:	68fb      	ldr	r3, [r7, #12]
 810253e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8102540:	68fb      	ldr	r3, [r7, #12]
 8102542:	2220      	movs	r2, #32
 8102544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8102548:	68fb      	ldr	r3, [r7, #12]
 810254a:	2200      	movs	r2, #0
 810254c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8102550:	68fb      	ldr	r3, [r7, #12]
 8102552:	2200      	movs	r2, #0
 8102554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8102558:	2301      	movs	r3, #1
 810255a:	e007      	b.n	810256c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810255c:	68fb      	ldr	r3, [r7, #12]
 810255e:	681b      	ldr	r3, [r3, #0]
 8102560:	699b      	ldr	r3, [r3, #24]
 8102562:	f003 0320 	and.w	r3, r3, #32
 8102566:	2b20      	cmp	r3, #32
 8102568:	d1cf      	bne.n	810250a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 810256a:	2300      	movs	r3, #0
}
 810256c:	4618      	mov	r0, r3
 810256e:	3710      	adds	r7, #16
 8102570:	46bd      	mov	sp, r7
 8102572:	bd80      	pop	{r7, pc}

08102574 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8102574:	b580      	push	{r7, lr}
 8102576:	b08a      	sub	sp, #40	; 0x28
 8102578:	af00      	add	r7, sp, #0
 810257a:	60f8      	str	r0, [r7, #12]
 810257c:	60b9      	str	r1, [r7, #8]
 810257e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8102580:	2300      	movs	r3, #0
 8102582:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8102586:	68fb      	ldr	r3, [r7, #12]
 8102588:	681b      	ldr	r3, [r3, #0]
 810258a:	699b      	ldr	r3, [r3, #24]
 810258c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 810258e:	2300      	movs	r3, #0
 8102590:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8102592:	687b      	ldr	r3, [r7, #4]
 8102594:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8102596:	69bb      	ldr	r3, [r7, #24]
 8102598:	f003 0310 	and.w	r3, r3, #16
 810259c:	2b00      	cmp	r3, #0
 810259e:	d075      	beq.n	810268c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81025a0:	68fb      	ldr	r3, [r7, #12]
 81025a2:	681b      	ldr	r3, [r3, #0]
 81025a4:	2210      	movs	r2, #16
 81025a6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 81025a8:	e056      	b.n	8102658 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 81025aa:	68bb      	ldr	r3, [r7, #8]
 81025ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 81025b0:	d052      	beq.n	8102658 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 81025b2:	f7ff f97f 	bl	81018b4 <HAL_GetTick>
 81025b6:	4602      	mov	r2, r0
 81025b8:	69fb      	ldr	r3, [r7, #28]
 81025ba:	1ad3      	subs	r3, r2, r3
 81025bc:	68ba      	ldr	r2, [r7, #8]
 81025be:	429a      	cmp	r2, r3
 81025c0:	d302      	bcc.n	81025c8 <I2C_IsErrorOccurred+0x54>
 81025c2:	68bb      	ldr	r3, [r7, #8]
 81025c4:	2b00      	cmp	r3, #0
 81025c6:	d147      	bne.n	8102658 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 81025c8:	68fb      	ldr	r3, [r7, #12]
 81025ca:	681b      	ldr	r3, [r3, #0]
 81025cc:	685b      	ldr	r3, [r3, #4]
 81025ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81025d2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 81025d4:	68fb      	ldr	r3, [r7, #12]
 81025d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 81025da:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 81025dc:	68fb      	ldr	r3, [r7, #12]
 81025de:	681b      	ldr	r3, [r3, #0]
 81025e0:	699b      	ldr	r3, [r3, #24]
 81025e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81025e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81025ea:	d12e      	bne.n	810264a <I2C_IsErrorOccurred+0xd6>
 81025ec:	697b      	ldr	r3, [r7, #20]
 81025ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81025f2:	d02a      	beq.n	810264a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 81025f4:	7cfb      	ldrb	r3, [r7, #19]
 81025f6:	2b20      	cmp	r3, #32
 81025f8:	d027      	beq.n	810264a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 81025fa:	68fb      	ldr	r3, [r7, #12]
 81025fc:	681b      	ldr	r3, [r3, #0]
 81025fe:	685a      	ldr	r2, [r3, #4]
 8102600:	68fb      	ldr	r3, [r7, #12]
 8102602:	681b      	ldr	r3, [r3, #0]
 8102604:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8102608:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 810260a:	f7ff f953 	bl	81018b4 <HAL_GetTick>
 810260e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102610:	e01b      	b.n	810264a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8102612:	f7ff f94f 	bl	81018b4 <HAL_GetTick>
 8102616:	4602      	mov	r2, r0
 8102618:	69fb      	ldr	r3, [r7, #28]
 810261a:	1ad3      	subs	r3, r2, r3
 810261c:	2b19      	cmp	r3, #25
 810261e:	d914      	bls.n	810264a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102620:	68fb      	ldr	r3, [r7, #12]
 8102622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102624:	f043 0220 	orr.w	r2, r3, #32
 8102628:	68fb      	ldr	r3, [r7, #12]
 810262a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 810262c:	68fb      	ldr	r3, [r7, #12]
 810262e:	2220      	movs	r2, #32
 8102630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8102634:	68fb      	ldr	r3, [r7, #12]
 8102636:	2200      	movs	r2, #0
 8102638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 810263c:	68fb      	ldr	r3, [r7, #12]
 810263e:	2200      	movs	r2, #0
 8102640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8102644:	2301      	movs	r3, #1
 8102646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810264a:	68fb      	ldr	r3, [r7, #12]
 810264c:	681b      	ldr	r3, [r3, #0]
 810264e:	699b      	ldr	r3, [r3, #24]
 8102650:	f003 0320 	and.w	r3, r3, #32
 8102654:	2b20      	cmp	r3, #32
 8102656:	d1dc      	bne.n	8102612 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8102658:	68fb      	ldr	r3, [r7, #12]
 810265a:	681b      	ldr	r3, [r3, #0]
 810265c:	699b      	ldr	r3, [r3, #24]
 810265e:	f003 0320 	and.w	r3, r3, #32
 8102662:	2b20      	cmp	r3, #32
 8102664:	d003      	beq.n	810266e <I2C_IsErrorOccurred+0xfa>
 8102666:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810266a:	2b00      	cmp	r3, #0
 810266c:	d09d      	beq.n	81025aa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 810266e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8102672:	2b00      	cmp	r3, #0
 8102674:	d103      	bne.n	810267e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102676:	68fb      	ldr	r3, [r7, #12]
 8102678:	681b      	ldr	r3, [r3, #0]
 810267a:	2220      	movs	r2, #32
 810267c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 810267e:	6a3b      	ldr	r3, [r7, #32]
 8102680:	f043 0304 	orr.w	r3, r3, #4
 8102684:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8102686:	2301      	movs	r3, #1
 8102688:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 810268c:	68fb      	ldr	r3, [r7, #12]
 810268e:	681b      	ldr	r3, [r3, #0]
 8102690:	699b      	ldr	r3, [r3, #24]
 8102692:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8102694:	69bb      	ldr	r3, [r7, #24]
 8102696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810269a:	2b00      	cmp	r3, #0
 810269c:	d00b      	beq.n	81026b6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 810269e:	6a3b      	ldr	r3, [r7, #32]
 81026a0:	f043 0301 	orr.w	r3, r3, #1
 81026a4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 81026a6:	68fb      	ldr	r3, [r7, #12]
 81026a8:	681b      	ldr	r3, [r3, #0]
 81026aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 81026ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 81026b0:	2301      	movs	r3, #1
 81026b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 81026b6:	69bb      	ldr	r3, [r7, #24]
 81026b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 81026bc:	2b00      	cmp	r3, #0
 81026be:	d00b      	beq.n	81026d8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 81026c0:	6a3b      	ldr	r3, [r7, #32]
 81026c2:	f043 0308 	orr.w	r3, r3, #8
 81026c6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 81026c8:	68fb      	ldr	r3, [r7, #12]
 81026ca:	681b      	ldr	r3, [r3, #0]
 81026cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81026d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 81026d2:	2301      	movs	r3, #1
 81026d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 81026d8:	69bb      	ldr	r3, [r7, #24]
 81026da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81026de:	2b00      	cmp	r3, #0
 81026e0:	d00b      	beq.n	81026fa <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 81026e2:	6a3b      	ldr	r3, [r7, #32]
 81026e4:	f043 0302 	orr.w	r3, r3, #2
 81026e8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 81026ea:	68fb      	ldr	r3, [r7, #12]
 81026ec:	681b      	ldr	r3, [r3, #0]
 81026ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 81026f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 81026f4:	2301      	movs	r3, #1
 81026f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 81026fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81026fe:	2b00      	cmp	r3, #0
 8102700:	d01c      	beq.n	810273c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8102702:	68f8      	ldr	r0, [r7, #12]
 8102704:	f7ff fe56 	bl	81023b4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8102708:	68fb      	ldr	r3, [r7, #12]
 810270a:	681b      	ldr	r3, [r3, #0]
 810270c:	6859      	ldr	r1, [r3, #4]
 810270e:	68fb      	ldr	r3, [r7, #12]
 8102710:	681a      	ldr	r2, [r3, #0]
 8102712:	4b0d      	ldr	r3, [pc, #52]	; (8102748 <I2C_IsErrorOccurred+0x1d4>)
 8102714:	400b      	ands	r3, r1
 8102716:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8102718:	68fb      	ldr	r3, [r7, #12]
 810271a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810271c:	6a3b      	ldr	r3, [r7, #32]
 810271e:	431a      	orrs	r2, r3
 8102720:	68fb      	ldr	r3, [r7, #12]
 8102722:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8102724:	68fb      	ldr	r3, [r7, #12]
 8102726:	2220      	movs	r2, #32
 8102728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 810272c:	68fb      	ldr	r3, [r7, #12]
 810272e:	2200      	movs	r2, #0
 8102730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102734:	68fb      	ldr	r3, [r7, #12]
 8102736:	2200      	movs	r2, #0
 8102738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 810273c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8102740:	4618      	mov	r0, r3
 8102742:	3728      	adds	r7, #40	; 0x28
 8102744:	46bd      	mov	sp, r7
 8102746:	bd80      	pop	{r7, pc}
 8102748:	fe00e800 	.word	0xfe00e800

0810274c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 810274c:	b480      	push	{r7}
 810274e:	b087      	sub	sp, #28
 8102750:	af00      	add	r7, sp, #0
 8102752:	60f8      	str	r0, [r7, #12]
 8102754:	607b      	str	r3, [r7, #4]
 8102756:	460b      	mov	r3, r1
 8102758:	817b      	strh	r3, [r7, #10]
 810275a:	4613      	mov	r3, r2
 810275c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 810275e:	897b      	ldrh	r3, [r7, #10]
 8102760:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8102764:	7a7b      	ldrb	r3, [r7, #9]
 8102766:	041b      	lsls	r3, r3, #16
 8102768:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 810276c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 810276e:	687b      	ldr	r3, [r7, #4]
 8102770:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8102772:	6a3b      	ldr	r3, [r7, #32]
 8102774:	4313      	orrs	r3, r2
 8102776:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810277a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 810277c:	68fb      	ldr	r3, [r7, #12]
 810277e:	681b      	ldr	r3, [r3, #0]
 8102780:	685a      	ldr	r2, [r3, #4]
 8102782:	6a3b      	ldr	r3, [r7, #32]
 8102784:	0d5b      	lsrs	r3, r3, #21
 8102786:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 810278a:	4b08      	ldr	r3, [pc, #32]	; (81027ac <I2C_TransferConfig+0x60>)
 810278c:	430b      	orrs	r3, r1
 810278e:	43db      	mvns	r3, r3
 8102790:	ea02 0103 	and.w	r1, r2, r3
 8102794:	68fb      	ldr	r3, [r7, #12]
 8102796:	681b      	ldr	r3, [r3, #0]
 8102798:	697a      	ldr	r2, [r7, #20]
 810279a:	430a      	orrs	r2, r1
 810279c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 810279e:	bf00      	nop
 81027a0:	371c      	adds	r7, #28
 81027a2:	46bd      	mov	sp, r7
 81027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027a8:	4770      	bx	lr
 81027aa:	bf00      	nop
 81027ac:	03ff63ff 	.word	0x03ff63ff

081027b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 81027b0:	b480      	push	{r7}
 81027b2:	b083      	sub	sp, #12
 81027b4:	af00      	add	r7, sp, #0
 81027b6:	6078      	str	r0, [r7, #4]
 81027b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81027ba:	687b      	ldr	r3, [r7, #4]
 81027bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81027c0:	b2db      	uxtb	r3, r3
 81027c2:	2b20      	cmp	r3, #32
 81027c4:	d138      	bne.n	8102838 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81027c6:	687b      	ldr	r3, [r7, #4]
 81027c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81027cc:	2b01      	cmp	r3, #1
 81027ce:	d101      	bne.n	81027d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 81027d0:	2302      	movs	r3, #2
 81027d2:	e032      	b.n	810283a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 81027d4:	687b      	ldr	r3, [r7, #4]
 81027d6:	2201      	movs	r2, #1
 81027d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 81027dc:	687b      	ldr	r3, [r7, #4]
 81027de:	2224      	movs	r2, #36	; 0x24
 81027e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 81027e4:	687b      	ldr	r3, [r7, #4]
 81027e6:	681b      	ldr	r3, [r3, #0]
 81027e8:	681a      	ldr	r2, [r3, #0]
 81027ea:	687b      	ldr	r3, [r7, #4]
 81027ec:	681b      	ldr	r3, [r3, #0]
 81027ee:	f022 0201 	bic.w	r2, r2, #1
 81027f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 81027f4:	687b      	ldr	r3, [r7, #4]
 81027f6:	681b      	ldr	r3, [r3, #0]
 81027f8:	681a      	ldr	r2, [r3, #0]
 81027fa:	687b      	ldr	r3, [r7, #4]
 81027fc:	681b      	ldr	r3, [r3, #0]
 81027fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8102802:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8102804:	687b      	ldr	r3, [r7, #4]
 8102806:	681b      	ldr	r3, [r3, #0]
 8102808:	6819      	ldr	r1, [r3, #0]
 810280a:	687b      	ldr	r3, [r7, #4]
 810280c:	681b      	ldr	r3, [r3, #0]
 810280e:	683a      	ldr	r2, [r7, #0]
 8102810:	430a      	orrs	r2, r1
 8102812:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8102814:	687b      	ldr	r3, [r7, #4]
 8102816:	681b      	ldr	r3, [r3, #0]
 8102818:	681a      	ldr	r2, [r3, #0]
 810281a:	687b      	ldr	r3, [r7, #4]
 810281c:	681b      	ldr	r3, [r3, #0]
 810281e:	f042 0201 	orr.w	r2, r2, #1
 8102822:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8102824:	687b      	ldr	r3, [r7, #4]
 8102826:	2220      	movs	r2, #32
 8102828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810282c:	687b      	ldr	r3, [r7, #4]
 810282e:	2200      	movs	r2, #0
 8102830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8102834:	2300      	movs	r3, #0
 8102836:	e000      	b.n	810283a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8102838:	2302      	movs	r3, #2
  }
}
 810283a:	4618      	mov	r0, r3
 810283c:	370c      	adds	r7, #12
 810283e:	46bd      	mov	sp, r7
 8102840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102844:	4770      	bx	lr

08102846 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8102846:	b480      	push	{r7}
 8102848:	b085      	sub	sp, #20
 810284a:	af00      	add	r7, sp, #0
 810284c:	6078      	str	r0, [r7, #4]
 810284e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102850:	687b      	ldr	r3, [r7, #4]
 8102852:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102856:	b2db      	uxtb	r3, r3
 8102858:	2b20      	cmp	r3, #32
 810285a:	d139      	bne.n	81028d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810285c:	687b      	ldr	r3, [r7, #4]
 810285e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8102862:	2b01      	cmp	r3, #1
 8102864:	d101      	bne.n	810286a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8102866:	2302      	movs	r3, #2
 8102868:	e033      	b.n	81028d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 810286a:	687b      	ldr	r3, [r7, #4]
 810286c:	2201      	movs	r2, #1
 810286e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8102872:	687b      	ldr	r3, [r7, #4]
 8102874:	2224      	movs	r2, #36	; 0x24
 8102876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 810287a:	687b      	ldr	r3, [r7, #4]
 810287c:	681b      	ldr	r3, [r3, #0]
 810287e:	681a      	ldr	r2, [r3, #0]
 8102880:	687b      	ldr	r3, [r7, #4]
 8102882:	681b      	ldr	r3, [r3, #0]
 8102884:	f022 0201 	bic.w	r2, r2, #1
 8102888:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 810288a:	687b      	ldr	r3, [r7, #4]
 810288c:	681b      	ldr	r3, [r3, #0]
 810288e:	681b      	ldr	r3, [r3, #0]
 8102890:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8102892:	68fb      	ldr	r3, [r7, #12]
 8102894:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102898:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 810289a:	683b      	ldr	r3, [r7, #0]
 810289c:	021b      	lsls	r3, r3, #8
 810289e:	68fa      	ldr	r2, [r7, #12]
 81028a0:	4313      	orrs	r3, r2
 81028a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 81028a4:	687b      	ldr	r3, [r7, #4]
 81028a6:	681b      	ldr	r3, [r3, #0]
 81028a8:	68fa      	ldr	r2, [r7, #12]
 81028aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 81028ac:	687b      	ldr	r3, [r7, #4]
 81028ae:	681b      	ldr	r3, [r3, #0]
 81028b0:	681a      	ldr	r2, [r3, #0]
 81028b2:	687b      	ldr	r3, [r7, #4]
 81028b4:	681b      	ldr	r3, [r3, #0]
 81028b6:	f042 0201 	orr.w	r2, r2, #1
 81028ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 81028bc:	687b      	ldr	r3, [r7, #4]
 81028be:	2220      	movs	r2, #32
 81028c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81028c4:	687b      	ldr	r3, [r7, #4]
 81028c6:	2200      	movs	r2, #0
 81028c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81028cc:	2300      	movs	r3, #0
 81028ce:	e000      	b.n	81028d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 81028d0:	2302      	movs	r3, #2
  }
}
 81028d2:	4618      	mov	r0, r3
 81028d4:	3714      	adds	r7, #20
 81028d6:	46bd      	mov	sp, r7
 81028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81028dc:	4770      	bx	lr
	...

081028e0 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81028e0:	b580      	push	{r7, lr}
 81028e2:	b084      	sub	sp, #16
 81028e4:	af00      	add	r7, sp, #0
 81028e6:	60f8      	str	r0, [r7, #12]
 81028e8:	460b      	mov	r3, r1
 81028ea:	607a      	str	r2, [r7, #4]
 81028ec:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81028ee:	4b37      	ldr	r3, [pc, #220]	; (81029cc <HAL_PWREx_EnterSTOPMode+0xec>)
 81028f0:	681b      	ldr	r3, [r3, #0]
 81028f2:	f023 0201 	bic.w	r2, r3, #1
 81028f6:	4935      	ldr	r1, [pc, #212]	; (81029cc <HAL_PWREx_EnterSTOPMode+0xec>)
 81028f8:	68fb      	ldr	r3, [r7, #12]
 81028fa:	4313      	orrs	r3, r2
 81028fc:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81028fe:	687b      	ldr	r3, [r7, #4]
 8102900:	2b00      	cmp	r3, #0
 8102902:	d123      	bne.n	810294c <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8102904:	f7ff f916 	bl	8101b34 <HAL_GetCurrentCPUID>
 8102908:	4603      	mov	r3, r0
 810290a:	2b03      	cmp	r3, #3
 810290c:	d158      	bne.n	81029c0 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810290e:	4b2f      	ldr	r3, [pc, #188]	; (81029cc <HAL_PWREx_EnterSTOPMode+0xec>)
 8102910:	691b      	ldr	r3, [r3, #16]
 8102912:	4a2e      	ldr	r2, [pc, #184]	; (81029cc <HAL_PWREx_EnterSTOPMode+0xec>)
 8102914:	f023 0301 	bic.w	r3, r3, #1
 8102918:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810291a:	4b2d      	ldr	r3, [pc, #180]	; (81029d0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810291c:	691b      	ldr	r3, [r3, #16]
 810291e:	4a2c      	ldr	r2, [pc, #176]	; (81029d0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102920:	f043 0304 	orr.w	r3, r3, #4
 8102924:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8102926:	f3bf 8f4f 	dsb	sy
}
 810292a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810292c:	f3bf 8f6f 	isb	sy
}
 8102930:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102932:	7afb      	ldrb	r3, [r7, #11]
 8102934:	2b01      	cmp	r3, #1
 8102936:	d101      	bne.n	810293c <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102938:	bf30      	wfi
 810293a:	e000      	b.n	810293e <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810293c:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810293e:	4b24      	ldr	r3, [pc, #144]	; (81029d0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102940:	691b      	ldr	r3, [r3, #16]
 8102942:	4a23      	ldr	r2, [pc, #140]	; (81029d0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102944:	f023 0304 	bic.w	r3, r3, #4
 8102948:	6113      	str	r3, [r2, #16]
 810294a:	e03c      	b.n	81029c6 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 810294c:	687b      	ldr	r3, [r7, #4]
 810294e:	2b01      	cmp	r3, #1
 8102950:	d123      	bne.n	810299a <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8102952:	f7ff f8ef 	bl	8101b34 <HAL_GetCurrentCPUID>
 8102956:	4603      	mov	r3, r0
 8102958:	2b01      	cmp	r3, #1
 810295a:	d133      	bne.n	81029c4 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 810295c:	4b1b      	ldr	r3, [pc, #108]	; (81029cc <HAL_PWREx_EnterSTOPMode+0xec>)
 810295e:	695b      	ldr	r3, [r3, #20]
 8102960:	4a1a      	ldr	r2, [pc, #104]	; (81029cc <HAL_PWREx_EnterSTOPMode+0xec>)
 8102962:	f023 0302 	bic.w	r3, r3, #2
 8102966:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102968:	4b19      	ldr	r3, [pc, #100]	; (81029d0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810296a:	691b      	ldr	r3, [r3, #16]
 810296c:	4a18      	ldr	r2, [pc, #96]	; (81029d0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810296e:	f043 0304 	orr.w	r3, r3, #4
 8102972:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8102974:	f3bf 8f4f 	dsb	sy
}
 8102978:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810297a:	f3bf 8f6f 	isb	sy
}
 810297e:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102980:	7afb      	ldrb	r3, [r7, #11]
 8102982:	2b01      	cmp	r3, #1
 8102984:	d101      	bne.n	810298a <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102986:	bf30      	wfi
 8102988:	e000      	b.n	810298c <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810298a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810298c:	4b10      	ldr	r3, [pc, #64]	; (81029d0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810298e:	691b      	ldr	r3, [r3, #16]
 8102990:	4a0f      	ldr	r2, [pc, #60]	; (81029d0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102992:	f023 0304 	bic.w	r3, r3, #4
 8102996:	6113      	str	r3, [r2, #16]
 8102998:	e015      	b.n	81029c6 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810299a:	f7ff f8cb 	bl	8101b34 <HAL_GetCurrentCPUID>
 810299e:	4603      	mov	r3, r0
 81029a0:	2b03      	cmp	r3, #3
 81029a2:	d106      	bne.n	81029b2 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81029a4:	4b09      	ldr	r3, [pc, #36]	; (81029cc <HAL_PWREx_EnterSTOPMode+0xec>)
 81029a6:	691b      	ldr	r3, [r3, #16]
 81029a8:	4a08      	ldr	r2, [pc, #32]	; (81029cc <HAL_PWREx_EnterSTOPMode+0xec>)
 81029aa:	f023 0304 	bic.w	r3, r3, #4
 81029ae:	6113      	str	r3, [r2, #16]
 81029b0:	e009      	b.n	81029c6 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81029b2:	4b06      	ldr	r3, [pc, #24]	; (81029cc <HAL_PWREx_EnterSTOPMode+0xec>)
 81029b4:	695b      	ldr	r3, [r3, #20]
 81029b6:	4a05      	ldr	r2, [pc, #20]	; (81029cc <HAL_PWREx_EnterSTOPMode+0xec>)
 81029b8:	f023 0304 	bic.w	r3, r3, #4
 81029bc:	6153      	str	r3, [r2, #20]
 81029be:	e002      	b.n	81029c6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81029c0:	bf00      	nop
 81029c2:	e000      	b.n	81029c6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81029c4:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81029c6:	3710      	adds	r7, #16
 81029c8:	46bd      	mov	sp, r7
 81029ca:	bd80      	pop	{r7, pc}
 81029cc:	58024800 	.word	0x58024800
 81029d0:	e000ed00 	.word	0xe000ed00

081029d4 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81029d4:	b580      	push	{r7, lr}
 81029d6:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81029d8:	f7ff f8ac 	bl	8101b34 <HAL_GetCurrentCPUID>
 81029dc:	4603      	mov	r3, r0
 81029de:	2b03      	cmp	r3, #3
 81029e0:	d101      	bne.n	81029e6 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81029e2:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81029e4:	e001      	b.n	81029ea <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81029e6:	bf40      	sev
    __WFE ();
 81029e8:	bf20      	wfe
}
 81029ea:	bf00      	nop
 81029ec:	bd80      	pop	{r7, pc}
	...

081029f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81029f0:	b480      	push	{r7}
 81029f2:	b089      	sub	sp, #36	; 0x24
 81029f4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81029f6:	4bb3      	ldr	r3, [pc, #716]	; (8102cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81029f8:	691b      	ldr	r3, [r3, #16]
 81029fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81029fe:	2b18      	cmp	r3, #24
 8102a00:	f200 8155 	bhi.w	8102cae <HAL_RCC_GetSysClockFreq+0x2be>
 8102a04:	a201      	add	r2, pc, #4	; (adr r2, 8102a0c <HAL_RCC_GetSysClockFreq+0x1c>)
 8102a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102a0a:	bf00      	nop
 8102a0c:	08102a71 	.word	0x08102a71
 8102a10:	08102caf 	.word	0x08102caf
 8102a14:	08102caf 	.word	0x08102caf
 8102a18:	08102caf 	.word	0x08102caf
 8102a1c:	08102caf 	.word	0x08102caf
 8102a20:	08102caf 	.word	0x08102caf
 8102a24:	08102caf 	.word	0x08102caf
 8102a28:	08102caf 	.word	0x08102caf
 8102a2c:	08102a97 	.word	0x08102a97
 8102a30:	08102caf 	.word	0x08102caf
 8102a34:	08102caf 	.word	0x08102caf
 8102a38:	08102caf 	.word	0x08102caf
 8102a3c:	08102caf 	.word	0x08102caf
 8102a40:	08102caf 	.word	0x08102caf
 8102a44:	08102caf 	.word	0x08102caf
 8102a48:	08102caf 	.word	0x08102caf
 8102a4c:	08102a9d 	.word	0x08102a9d
 8102a50:	08102caf 	.word	0x08102caf
 8102a54:	08102caf 	.word	0x08102caf
 8102a58:	08102caf 	.word	0x08102caf
 8102a5c:	08102caf 	.word	0x08102caf
 8102a60:	08102caf 	.word	0x08102caf
 8102a64:	08102caf 	.word	0x08102caf
 8102a68:	08102caf 	.word	0x08102caf
 8102a6c:	08102aa3 	.word	0x08102aa3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102a70:	4b94      	ldr	r3, [pc, #592]	; (8102cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102a72:	681b      	ldr	r3, [r3, #0]
 8102a74:	f003 0320 	and.w	r3, r3, #32
 8102a78:	2b00      	cmp	r3, #0
 8102a7a:	d009      	beq.n	8102a90 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8102a7c:	4b91      	ldr	r3, [pc, #580]	; (8102cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102a7e:	681b      	ldr	r3, [r3, #0]
 8102a80:	08db      	lsrs	r3, r3, #3
 8102a82:	f003 0303 	and.w	r3, r3, #3
 8102a86:	4a90      	ldr	r2, [pc, #576]	; (8102cc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102a88:	fa22 f303 	lsr.w	r3, r2, r3
 8102a8c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8102a8e:	e111      	b.n	8102cb4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8102a90:	4b8d      	ldr	r3, [pc, #564]	; (8102cc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102a92:	61bb      	str	r3, [r7, #24]
    break;
 8102a94:	e10e      	b.n	8102cb4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8102a96:	4b8d      	ldr	r3, [pc, #564]	; (8102ccc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102a98:	61bb      	str	r3, [r7, #24]
    break;
 8102a9a:	e10b      	b.n	8102cb4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8102a9c:	4b8c      	ldr	r3, [pc, #560]	; (8102cd0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8102a9e:	61bb      	str	r3, [r7, #24]
    break;
 8102aa0:	e108      	b.n	8102cb4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8102aa2:	4b88      	ldr	r3, [pc, #544]	; (8102cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102aa6:	f003 0303 	and.w	r3, r3, #3
 8102aaa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8102aac:	4b85      	ldr	r3, [pc, #532]	; (8102cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102ab0:	091b      	lsrs	r3, r3, #4
 8102ab2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8102ab6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8102ab8:	4b82      	ldr	r3, [pc, #520]	; (8102cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102abc:	f003 0301 	and.w	r3, r3, #1
 8102ac0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8102ac2:	4b80      	ldr	r3, [pc, #512]	; (8102cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8102ac6:	08db      	lsrs	r3, r3, #3
 8102ac8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8102acc:	68fa      	ldr	r2, [r7, #12]
 8102ace:	fb02 f303 	mul.w	r3, r2, r3
 8102ad2:	ee07 3a90 	vmov	s15, r3
 8102ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102ada:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8102ade:	693b      	ldr	r3, [r7, #16]
 8102ae0:	2b00      	cmp	r3, #0
 8102ae2:	f000 80e1 	beq.w	8102ca8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8102ae6:	697b      	ldr	r3, [r7, #20]
 8102ae8:	2b02      	cmp	r3, #2
 8102aea:	f000 8083 	beq.w	8102bf4 <HAL_RCC_GetSysClockFreq+0x204>
 8102aee:	697b      	ldr	r3, [r7, #20]
 8102af0:	2b02      	cmp	r3, #2
 8102af2:	f200 80a1 	bhi.w	8102c38 <HAL_RCC_GetSysClockFreq+0x248>
 8102af6:	697b      	ldr	r3, [r7, #20]
 8102af8:	2b00      	cmp	r3, #0
 8102afa:	d003      	beq.n	8102b04 <HAL_RCC_GetSysClockFreq+0x114>
 8102afc:	697b      	ldr	r3, [r7, #20]
 8102afe:	2b01      	cmp	r3, #1
 8102b00:	d056      	beq.n	8102bb0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8102b02:	e099      	b.n	8102c38 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102b04:	4b6f      	ldr	r3, [pc, #444]	; (8102cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102b06:	681b      	ldr	r3, [r3, #0]
 8102b08:	f003 0320 	and.w	r3, r3, #32
 8102b0c:	2b00      	cmp	r3, #0
 8102b0e:	d02d      	beq.n	8102b6c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8102b10:	4b6c      	ldr	r3, [pc, #432]	; (8102cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102b12:	681b      	ldr	r3, [r3, #0]
 8102b14:	08db      	lsrs	r3, r3, #3
 8102b16:	f003 0303 	and.w	r3, r3, #3
 8102b1a:	4a6b      	ldr	r2, [pc, #428]	; (8102cc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8102b20:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102b22:	687b      	ldr	r3, [r7, #4]
 8102b24:	ee07 3a90 	vmov	s15, r3
 8102b28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102b2c:	693b      	ldr	r3, [r7, #16]
 8102b2e:	ee07 3a90 	vmov	s15, r3
 8102b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102b3a:	4b62      	ldr	r3, [pc, #392]	; (8102cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102b42:	ee07 3a90 	vmov	s15, r3
 8102b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102b4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8102b4e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8102cd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102b5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102b66:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8102b6a:	e087      	b.n	8102c7c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102b6c:	693b      	ldr	r3, [r7, #16]
 8102b6e:	ee07 3a90 	vmov	s15, r3
 8102b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102b76:	eddf 6a58 	vldr	s13, [pc, #352]	; 8102cd8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8102b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102b7e:	4b51      	ldr	r3, [pc, #324]	; (8102cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102b86:	ee07 3a90 	vmov	s15, r3
 8102b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102b8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8102b92:	eddf 5a50 	vldr	s11, [pc, #320]	; 8102cd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102b9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102baa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102bae:	e065      	b.n	8102c7c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102bb0:	693b      	ldr	r3, [r7, #16]
 8102bb2:	ee07 3a90 	vmov	s15, r3
 8102bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102bba:	eddf 6a48 	vldr	s13, [pc, #288]	; 8102cdc <HAL_RCC_GetSysClockFreq+0x2ec>
 8102bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102bc2:	4b40      	ldr	r3, [pc, #256]	; (8102cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102bca:	ee07 3a90 	vmov	s15, r3
 8102bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102bd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8102bd6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8102cd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102be2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102bee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102bf2:	e043      	b.n	8102c7c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102bf4:	693b      	ldr	r3, [r7, #16]
 8102bf6:	ee07 3a90 	vmov	s15, r3
 8102bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102bfe:	eddf 6a38 	vldr	s13, [pc, #224]	; 8102ce0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8102c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102c06:	4b2f      	ldr	r3, [pc, #188]	; (8102cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102c0e:	ee07 3a90 	vmov	s15, r3
 8102c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102c16:	ed97 6a02 	vldr	s12, [r7, #8]
 8102c1a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8102cd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102c26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102c32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102c36:	e021      	b.n	8102c7c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102c38:	693b      	ldr	r3, [r7, #16]
 8102c3a:	ee07 3a90 	vmov	s15, r3
 8102c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102c42:	eddf 6a26 	vldr	s13, [pc, #152]	; 8102cdc <HAL_RCC_GetSysClockFreq+0x2ec>
 8102c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102c4a:	4b1e      	ldr	r3, [pc, #120]	; (8102cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102c52:	ee07 3a90 	vmov	s15, r3
 8102c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102c5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8102c5e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8102cd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102c6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102c76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102c7a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8102c7c:	4b11      	ldr	r3, [pc, #68]	; (8102cc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102c80:	0a5b      	lsrs	r3, r3, #9
 8102c82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102c86:	3301      	adds	r3, #1
 8102c88:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8102c8a:	683b      	ldr	r3, [r7, #0]
 8102c8c:	ee07 3a90 	vmov	s15, r3
 8102c90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8102c94:	edd7 6a07 	vldr	s13, [r7, #28]
 8102c98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102c9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102ca0:	ee17 3a90 	vmov	r3, s15
 8102ca4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8102ca6:	e005      	b.n	8102cb4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8102ca8:	2300      	movs	r3, #0
 8102caa:	61bb      	str	r3, [r7, #24]
    break;
 8102cac:	e002      	b.n	8102cb4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8102cae:	4b07      	ldr	r3, [pc, #28]	; (8102ccc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102cb0:	61bb      	str	r3, [r7, #24]
    break;
 8102cb2:	bf00      	nop
  }

  return sysclockfreq;
 8102cb4:	69bb      	ldr	r3, [r7, #24]
}
 8102cb6:	4618      	mov	r0, r3
 8102cb8:	3724      	adds	r7, #36	; 0x24
 8102cba:	46bd      	mov	sp, r7
 8102cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cc0:	4770      	bx	lr
 8102cc2:	bf00      	nop
 8102cc4:	58024400 	.word	0x58024400
 8102cc8:	03d09000 	.word	0x03d09000
 8102ccc:	003d0900 	.word	0x003d0900
 8102cd0:	007a1200 	.word	0x007a1200
 8102cd4:	46000000 	.word	0x46000000
 8102cd8:	4c742400 	.word	0x4c742400
 8102cdc:	4a742400 	.word	0x4a742400
 8102ce0:	4af42400 	.word	0x4af42400

08102ce4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8102ce4:	b580      	push	{r7, lr}
 8102ce6:	b086      	sub	sp, #24
 8102ce8:	af00      	add	r7, sp, #0
 8102cea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8102cec:	2300      	movs	r3, #0
 8102cee:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8102cf0:	2300      	movs	r3, #0
 8102cf2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8102cf4:	687b      	ldr	r3, [r7, #4]
 8102cf6:	681b      	ldr	r3, [r3, #0]
 8102cf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8102cfc:	2b00      	cmp	r3, #0
 8102cfe:	d03f      	beq.n	8102d80 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8102d00:	687b      	ldr	r3, [r7, #4]
 8102d02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102d04:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102d08:	d02a      	beq.n	8102d60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8102d0a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102d0e:	d824      	bhi.n	8102d5a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8102d10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102d14:	d018      	beq.n	8102d48 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8102d16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102d1a:	d81e      	bhi.n	8102d5a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8102d1c:	2b00      	cmp	r3, #0
 8102d1e:	d003      	beq.n	8102d28 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8102d20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8102d24:	d007      	beq.n	8102d36 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8102d26:	e018      	b.n	8102d5a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102d28:	4ba3      	ldr	r3, [pc, #652]	; (8102fb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102d2c:	4aa2      	ldr	r2, [pc, #648]	; (8102fb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102d2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102d32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8102d34:	e015      	b.n	8102d62 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8102d36:	687b      	ldr	r3, [r7, #4]
 8102d38:	3304      	adds	r3, #4
 8102d3a:	2102      	movs	r1, #2
 8102d3c:	4618      	mov	r0, r3
 8102d3e:	f000 ff17 	bl	8103b70 <RCCEx_PLL2_Config>
 8102d42:	4603      	mov	r3, r0
 8102d44:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8102d46:	e00c      	b.n	8102d62 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102d48:	687b      	ldr	r3, [r7, #4]
 8102d4a:	3324      	adds	r3, #36	; 0x24
 8102d4c:	2102      	movs	r1, #2
 8102d4e:	4618      	mov	r0, r3
 8102d50:	f000 ffc0 	bl	8103cd4 <RCCEx_PLL3_Config>
 8102d54:	4603      	mov	r3, r0
 8102d56:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8102d58:	e003      	b.n	8102d62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102d5a:	2301      	movs	r3, #1
 8102d5c:	75fb      	strb	r3, [r7, #23]
      break;
 8102d5e:	e000      	b.n	8102d62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8102d60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102d62:	7dfb      	ldrb	r3, [r7, #23]
 8102d64:	2b00      	cmp	r3, #0
 8102d66:	d109      	bne.n	8102d7c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8102d68:	4b93      	ldr	r3, [pc, #588]	; (8102fb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102d6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8102d70:	687b      	ldr	r3, [r7, #4]
 8102d72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102d74:	4990      	ldr	r1, [pc, #576]	; (8102fb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102d76:	4313      	orrs	r3, r2
 8102d78:	650b      	str	r3, [r1, #80]	; 0x50
 8102d7a:	e001      	b.n	8102d80 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102d7c:	7dfb      	ldrb	r3, [r7, #23]
 8102d7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8102d80:	687b      	ldr	r3, [r7, #4]
 8102d82:	681b      	ldr	r3, [r3, #0]
 8102d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102d88:	2b00      	cmp	r3, #0
 8102d8a:	d03d      	beq.n	8102e08 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8102d8c:	687b      	ldr	r3, [r7, #4]
 8102d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102d90:	2b04      	cmp	r3, #4
 8102d92:	d826      	bhi.n	8102de2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8102d94:	a201      	add	r2, pc, #4	; (adr r2, 8102d9c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8102d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102d9a:	bf00      	nop
 8102d9c:	08102db1 	.word	0x08102db1
 8102da0:	08102dbf 	.word	0x08102dbf
 8102da4:	08102dd1 	.word	0x08102dd1
 8102da8:	08102de9 	.word	0x08102de9
 8102dac:	08102de9 	.word	0x08102de9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102db0:	4b81      	ldr	r3, [pc, #516]	; (8102fb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102db4:	4a80      	ldr	r2, [pc, #512]	; (8102fb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102db6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102dba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102dbc:	e015      	b.n	8102dea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102dbe:	687b      	ldr	r3, [r7, #4]
 8102dc0:	3304      	adds	r3, #4
 8102dc2:	2100      	movs	r1, #0
 8102dc4:	4618      	mov	r0, r3
 8102dc6:	f000 fed3 	bl	8103b70 <RCCEx_PLL2_Config>
 8102dca:	4603      	mov	r3, r0
 8102dcc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102dce:	e00c      	b.n	8102dea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102dd0:	687b      	ldr	r3, [r7, #4]
 8102dd2:	3324      	adds	r3, #36	; 0x24
 8102dd4:	2100      	movs	r1, #0
 8102dd6:	4618      	mov	r0, r3
 8102dd8:	f000 ff7c 	bl	8103cd4 <RCCEx_PLL3_Config>
 8102ddc:	4603      	mov	r3, r0
 8102dde:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102de0:	e003      	b.n	8102dea <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102de2:	2301      	movs	r3, #1
 8102de4:	75fb      	strb	r3, [r7, #23]
      break;
 8102de6:	e000      	b.n	8102dea <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8102de8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102dea:	7dfb      	ldrb	r3, [r7, #23]
 8102dec:	2b00      	cmp	r3, #0
 8102dee:	d109      	bne.n	8102e04 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8102df0:	4b71      	ldr	r3, [pc, #452]	; (8102fb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102df4:	f023 0207 	bic.w	r2, r3, #7
 8102df8:	687b      	ldr	r3, [r7, #4]
 8102dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102dfc:	496e      	ldr	r1, [pc, #440]	; (8102fb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102dfe:	4313      	orrs	r3, r2
 8102e00:	650b      	str	r3, [r1, #80]	; 0x50
 8102e02:	e001      	b.n	8102e08 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102e04:	7dfb      	ldrb	r3, [r7, #23]
 8102e06:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8102e08:	687b      	ldr	r3, [r7, #4]
 8102e0a:	681b      	ldr	r3, [r3, #0]
 8102e0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8102e10:	2b00      	cmp	r3, #0
 8102e12:	d042      	beq.n	8102e9a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8102e14:	687b      	ldr	r3, [r7, #4]
 8102e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102e18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102e1c:	d02b      	beq.n	8102e76 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8102e1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102e22:	d825      	bhi.n	8102e70 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8102e24:	2bc0      	cmp	r3, #192	; 0xc0
 8102e26:	d028      	beq.n	8102e7a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8102e28:	2bc0      	cmp	r3, #192	; 0xc0
 8102e2a:	d821      	bhi.n	8102e70 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8102e2c:	2b80      	cmp	r3, #128	; 0x80
 8102e2e:	d016      	beq.n	8102e5e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8102e30:	2b80      	cmp	r3, #128	; 0x80
 8102e32:	d81d      	bhi.n	8102e70 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8102e34:	2b00      	cmp	r3, #0
 8102e36:	d002      	beq.n	8102e3e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8102e38:	2b40      	cmp	r3, #64	; 0x40
 8102e3a:	d007      	beq.n	8102e4c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8102e3c:	e018      	b.n	8102e70 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102e3e:	4b5e      	ldr	r3, [pc, #376]	; (8102fb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102e42:	4a5d      	ldr	r2, [pc, #372]	; (8102fb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102e48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8102e4a:	e017      	b.n	8102e7c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102e4c:	687b      	ldr	r3, [r7, #4]
 8102e4e:	3304      	adds	r3, #4
 8102e50:	2100      	movs	r1, #0
 8102e52:	4618      	mov	r0, r3
 8102e54:	f000 fe8c 	bl	8103b70 <RCCEx_PLL2_Config>
 8102e58:	4603      	mov	r3, r0
 8102e5a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8102e5c:	e00e      	b.n	8102e7c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102e5e:	687b      	ldr	r3, [r7, #4]
 8102e60:	3324      	adds	r3, #36	; 0x24
 8102e62:	2100      	movs	r1, #0
 8102e64:	4618      	mov	r0, r3
 8102e66:	f000 ff35 	bl	8103cd4 <RCCEx_PLL3_Config>
 8102e6a:	4603      	mov	r3, r0
 8102e6c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8102e6e:	e005      	b.n	8102e7c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102e70:	2301      	movs	r3, #1
 8102e72:	75fb      	strb	r3, [r7, #23]
      break;
 8102e74:	e002      	b.n	8102e7c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8102e76:	bf00      	nop
 8102e78:	e000      	b.n	8102e7c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8102e7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102e7c:	7dfb      	ldrb	r3, [r7, #23]
 8102e7e:	2b00      	cmp	r3, #0
 8102e80:	d109      	bne.n	8102e96 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8102e82:	4b4d      	ldr	r3, [pc, #308]	; (8102fb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102e86:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8102e8a:	687b      	ldr	r3, [r7, #4]
 8102e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102e8e:	494a      	ldr	r1, [pc, #296]	; (8102fb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102e90:	4313      	orrs	r3, r2
 8102e92:	650b      	str	r3, [r1, #80]	; 0x50
 8102e94:	e001      	b.n	8102e9a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102e96:	7dfb      	ldrb	r3, [r7, #23]
 8102e98:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8102e9a:	687b      	ldr	r3, [r7, #4]
 8102e9c:	681b      	ldr	r3, [r3, #0]
 8102e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8102ea2:	2b00      	cmp	r3, #0
 8102ea4:	d049      	beq.n	8102f3a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8102ea6:	687b      	ldr	r3, [r7, #4]
 8102ea8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8102eac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8102eb0:	d030      	beq.n	8102f14 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8102eb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8102eb6:	d82a      	bhi.n	8102f0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8102eb8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8102ebc:	d02c      	beq.n	8102f18 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8102ebe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8102ec2:	d824      	bhi.n	8102f0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8102ec4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8102ec8:	d018      	beq.n	8102efc <HAL_RCCEx_PeriphCLKConfig+0x218>
 8102eca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8102ece:	d81e      	bhi.n	8102f0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8102ed0:	2b00      	cmp	r3, #0
 8102ed2:	d003      	beq.n	8102edc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8102ed4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102ed8:	d007      	beq.n	8102eea <HAL_RCCEx_PeriphCLKConfig+0x206>
 8102eda:	e018      	b.n	8102f0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102edc:	4b36      	ldr	r3, [pc, #216]	; (8102fb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102ee0:	4a35      	ldr	r2, [pc, #212]	; (8102fb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102ee2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102ee6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102ee8:	e017      	b.n	8102f1a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102eea:	687b      	ldr	r3, [r7, #4]
 8102eec:	3304      	adds	r3, #4
 8102eee:	2100      	movs	r1, #0
 8102ef0:	4618      	mov	r0, r3
 8102ef2:	f000 fe3d 	bl	8103b70 <RCCEx_PLL2_Config>
 8102ef6:	4603      	mov	r3, r0
 8102ef8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8102efa:	e00e      	b.n	8102f1a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102efc:	687b      	ldr	r3, [r7, #4]
 8102efe:	3324      	adds	r3, #36	; 0x24
 8102f00:	2100      	movs	r1, #0
 8102f02:	4618      	mov	r0, r3
 8102f04:	f000 fee6 	bl	8103cd4 <RCCEx_PLL3_Config>
 8102f08:	4603      	mov	r3, r0
 8102f0a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102f0c:	e005      	b.n	8102f1a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8102f0e:	2301      	movs	r3, #1
 8102f10:	75fb      	strb	r3, [r7, #23]
      break;
 8102f12:	e002      	b.n	8102f1a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8102f14:	bf00      	nop
 8102f16:	e000      	b.n	8102f1a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8102f18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102f1a:	7dfb      	ldrb	r3, [r7, #23]
 8102f1c:	2b00      	cmp	r3, #0
 8102f1e:	d10a      	bne.n	8102f36 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8102f20:	4b25      	ldr	r3, [pc, #148]	; (8102fb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102f24:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8102f28:	687b      	ldr	r3, [r7, #4]
 8102f2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8102f2e:	4922      	ldr	r1, [pc, #136]	; (8102fb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102f30:	4313      	orrs	r3, r2
 8102f32:	658b      	str	r3, [r1, #88]	; 0x58
 8102f34:	e001      	b.n	8102f3a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102f36:	7dfb      	ldrb	r3, [r7, #23]
 8102f38:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8102f3a:	687b      	ldr	r3, [r7, #4]
 8102f3c:	681b      	ldr	r3, [r3, #0]
 8102f3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8102f42:	2b00      	cmp	r3, #0
 8102f44:	d04b      	beq.n	8102fde <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8102f46:	687b      	ldr	r3, [r7, #4]
 8102f48:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8102f4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8102f50:	d030      	beq.n	8102fb4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8102f52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8102f56:	d82a      	bhi.n	8102fae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8102f58:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8102f5c:	d02e      	beq.n	8102fbc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8102f5e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8102f62:	d824      	bhi.n	8102fae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8102f64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8102f68:	d018      	beq.n	8102f9c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8102f6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8102f6e:	d81e      	bhi.n	8102fae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8102f70:	2b00      	cmp	r3, #0
 8102f72:	d003      	beq.n	8102f7c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8102f74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8102f78:	d007      	beq.n	8102f8a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8102f7a:	e018      	b.n	8102fae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102f7c:	4b0e      	ldr	r3, [pc, #56]	; (8102fb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102f80:	4a0d      	ldr	r2, [pc, #52]	; (8102fb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102f82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102f86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102f88:	e019      	b.n	8102fbe <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102f8a:	687b      	ldr	r3, [r7, #4]
 8102f8c:	3304      	adds	r3, #4
 8102f8e:	2100      	movs	r1, #0
 8102f90:	4618      	mov	r0, r3
 8102f92:	f000 fded 	bl	8103b70 <RCCEx_PLL2_Config>
 8102f96:	4603      	mov	r3, r0
 8102f98:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8102f9a:	e010      	b.n	8102fbe <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102f9c:	687b      	ldr	r3, [r7, #4]
 8102f9e:	3324      	adds	r3, #36	; 0x24
 8102fa0:	2100      	movs	r1, #0
 8102fa2:	4618      	mov	r0, r3
 8102fa4:	f000 fe96 	bl	8103cd4 <RCCEx_PLL3_Config>
 8102fa8:	4603      	mov	r3, r0
 8102faa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102fac:	e007      	b.n	8102fbe <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8102fae:	2301      	movs	r3, #1
 8102fb0:	75fb      	strb	r3, [r7, #23]
      break;
 8102fb2:	e004      	b.n	8102fbe <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8102fb4:	bf00      	nop
 8102fb6:	e002      	b.n	8102fbe <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8102fb8:	58024400 	.word	0x58024400
      break;
 8102fbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102fbe:	7dfb      	ldrb	r3, [r7, #23]
 8102fc0:	2b00      	cmp	r3, #0
 8102fc2:	d10a      	bne.n	8102fda <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8102fc4:	4b99      	ldr	r3, [pc, #612]	; (810322c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102fc8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8102fcc:	687b      	ldr	r3, [r7, #4]
 8102fce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8102fd2:	4996      	ldr	r1, [pc, #600]	; (810322c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102fd4:	4313      	orrs	r3, r2
 8102fd6:	658b      	str	r3, [r1, #88]	; 0x58
 8102fd8:	e001      	b.n	8102fde <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102fda:	7dfb      	ldrb	r3, [r7, #23]
 8102fdc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8102fde:	687b      	ldr	r3, [r7, #4]
 8102fe0:	681b      	ldr	r3, [r3, #0]
 8102fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8102fe6:	2b00      	cmp	r3, #0
 8102fe8:	d032      	beq.n	8103050 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8102fea:	687b      	ldr	r3, [r7, #4]
 8102fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102fee:	2b30      	cmp	r3, #48	; 0x30
 8102ff0:	d01c      	beq.n	810302c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8102ff2:	2b30      	cmp	r3, #48	; 0x30
 8102ff4:	d817      	bhi.n	8103026 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8102ff6:	2b20      	cmp	r3, #32
 8102ff8:	d00c      	beq.n	8103014 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8102ffa:	2b20      	cmp	r3, #32
 8102ffc:	d813      	bhi.n	8103026 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8102ffe:	2b00      	cmp	r3, #0
 8103000:	d016      	beq.n	8103030 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8103002:	2b10      	cmp	r3, #16
 8103004:	d10f      	bne.n	8103026 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103006:	4b89      	ldr	r3, [pc, #548]	; (810322c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810300a:	4a88      	ldr	r2, [pc, #544]	; (810322c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810300c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103010:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8103012:	e00e      	b.n	8103032 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103014:	687b      	ldr	r3, [r7, #4]
 8103016:	3304      	adds	r3, #4
 8103018:	2102      	movs	r1, #2
 810301a:	4618      	mov	r0, r3
 810301c:	f000 fda8 	bl	8103b70 <RCCEx_PLL2_Config>
 8103020:	4603      	mov	r3, r0
 8103022:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8103024:	e005      	b.n	8103032 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8103026:	2301      	movs	r3, #1
 8103028:	75fb      	strb	r3, [r7, #23]
      break;
 810302a:	e002      	b.n	8103032 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 810302c:	bf00      	nop
 810302e:	e000      	b.n	8103032 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8103030:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103032:	7dfb      	ldrb	r3, [r7, #23]
 8103034:	2b00      	cmp	r3, #0
 8103036:	d109      	bne.n	810304c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8103038:	4b7c      	ldr	r3, [pc, #496]	; (810322c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810303a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810303c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8103040:	687b      	ldr	r3, [r7, #4]
 8103042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103044:	4979      	ldr	r1, [pc, #484]	; (810322c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103046:	4313      	orrs	r3, r2
 8103048:	64cb      	str	r3, [r1, #76]	; 0x4c
 810304a:	e001      	b.n	8103050 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810304c:	7dfb      	ldrb	r3, [r7, #23]
 810304e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8103050:	687b      	ldr	r3, [r7, #4]
 8103052:	681b      	ldr	r3, [r3, #0]
 8103054:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8103058:	2b00      	cmp	r3, #0
 810305a:	d047      	beq.n	81030ec <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 810305c:	687b      	ldr	r3, [r7, #4]
 810305e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103060:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103064:	d030      	beq.n	81030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8103066:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810306a:	d82a      	bhi.n	81030c2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 810306c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8103070:	d02c      	beq.n	81030cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8103072:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8103076:	d824      	bhi.n	81030c2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8103078:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810307c:	d018      	beq.n	81030b0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 810307e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103082:	d81e      	bhi.n	81030c2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8103084:	2b00      	cmp	r3, #0
 8103086:	d003      	beq.n	8103090 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8103088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810308c:	d007      	beq.n	810309e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 810308e:	e018      	b.n	81030c2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103090:	4b66      	ldr	r3, [pc, #408]	; (810322c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103094:	4a65      	ldr	r2, [pc, #404]	; (810322c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103096:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810309a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 810309c:	e017      	b.n	81030ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810309e:	687b      	ldr	r3, [r7, #4]
 81030a0:	3304      	adds	r3, #4
 81030a2:	2100      	movs	r1, #0
 81030a4:	4618      	mov	r0, r3
 81030a6:	f000 fd63 	bl	8103b70 <RCCEx_PLL2_Config>
 81030aa:	4603      	mov	r3, r0
 81030ac:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81030ae:	e00e      	b.n	81030ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81030b0:	687b      	ldr	r3, [r7, #4]
 81030b2:	3324      	adds	r3, #36	; 0x24
 81030b4:	2100      	movs	r1, #0
 81030b6:	4618      	mov	r0, r3
 81030b8:	f000 fe0c 	bl	8103cd4 <RCCEx_PLL3_Config>
 81030bc:	4603      	mov	r3, r0
 81030be:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81030c0:	e005      	b.n	81030ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81030c2:	2301      	movs	r3, #1
 81030c4:	75fb      	strb	r3, [r7, #23]
      break;
 81030c6:	e002      	b.n	81030ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 81030c8:	bf00      	nop
 81030ca:	e000      	b.n	81030ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 81030cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 81030ce:	7dfb      	ldrb	r3, [r7, #23]
 81030d0:	2b00      	cmp	r3, #0
 81030d2:	d109      	bne.n	81030e8 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 81030d4:	4b55      	ldr	r3, [pc, #340]	; (810322c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81030d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81030d8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 81030dc:	687b      	ldr	r3, [r7, #4]
 81030de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81030e0:	4952      	ldr	r1, [pc, #328]	; (810322c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81030e2:	4313      	orrs	r3, r2
 81030e4:	650b      	str	r3, [r1, #80]	; 0x50
 81030e6:	e001      	b.n	81030ec <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81030e8:	7dfb      	ldrb	r3, [r7, #23]
 81030ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 81030ec:	687b      	ldr	r3, [r7, #4]
 81030ee:	681b      	ldr	r3, [r3, #0]
 81030f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 81030f4:	2b00      	cmp	r3, #0
 81030f6:	d049      	beq.n	810318c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 81030f8:	687b      	ldr	r3, [r7, #4]
 81030fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81030fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8103100:	d02e      	beq.n	8103160 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8103102:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8103106:	d828      	bhi.n	810315a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8103108:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810310c:	d02a      	beq.n	8103164 <HAL_RCCEx_PeriphCLKConfig+0x480>
 810310e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103112:	d822      	bhi.n	810315a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8103114:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103118:	d026      	beq.n	8103168 <HAL_RCCEx_PeriphCLKConfig+0x484>
 810311a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810311e:	d81c      	bhi.n	810315a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8103120:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103124:	d010      	beq.n	8103148 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8103126:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810312a:	d816      	bhi.n	810315a <HAL_RCCEx_PeriphCLKConfig+0x476>
 810312c:	2b00      	cmp	r3, #0
 810312e:	d01d      	beq.n	810316c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8103130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103134:	d111      	bne.n	810315a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103136:	687b      	ldr	r3, [r7, #4]
 8103138:	3304      	adds	r3, #4
 810313a:	2101      	movs	r1, #1
 810313c:	4618      	mov	r0, r3
 810313e:	f000 fd17 	bl	8103b70 <RCCEx_PLL2_Config>
 8103142:	4603      	mov	r3, r0
 8103144:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8103146:	e012      	b.n	810316e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103148:	687b      	ldr	r3, [r7, #4]
 810314a:	3324      	adds	r3, #36	; 0x24
 810314c:	2101      	movs	r1, #1
 810314e:	4618      	mov	r0, r3
 8103150:	f000 fdc0 	bl	8103cd4 <RCCEx_PLL3_Config>
 8103154:	4603      	mov	r3, r0
 8103156:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8103158:	e009      	b.n	810316e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810315a:	2301      	movs	r3, #1
 810315c:	75fb      	strb	r3, [r7, #23]
      break;
 810315e:	e006      	b.n	810316e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8103160:	bf00      	nop
 8103162:	e004      	b.n	810316e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8103164:	bf00      	nop
 8103166:	e002      	b.n	810316e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8103168:	bf00      	nop
 810316a:	e000      	b.n	810316e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 810316c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810316e:	7dfb      	ldrb	r3, [r7, #23]
 8103170:	2b00      	cmp	r3, #0
 8103172:	d109      	bne.n	8103188 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8103174:	4b2d      	ldr	r3, [pc, #180]	; (810322c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103178:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 810317c:	687b      	ldr	r3, [r7, #4]
 810317e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103180:	492a      	ldr	r1, [pc, #168]	; (810322c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103182:	4313      	orrs	r3, r2
 8103184:	650b      	str	r3, [r1, #80]	; 0x50
 8103186:	e001      	b.n	810318c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103188:	7dfb      	ldrb	r3, [r7, #23]
 810318a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 810318c:	687b      	ldr	r3, [r7, #4]
 810318e:	681b      	ldr	r3, [r3, #0]
 8103190:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8103194:	2b00      	cmp	r3, #0
 8103196:	d04d      	beq.n	8103234 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8103198:	687b      	ldr	r3, [r7, #4]
 810319a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 810319e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81031a2:	d02e      	beq.n	8103202 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 81031a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81031a8:	d828      	bhi.n	81031fc <HAL_RCCEx_PeriphCLKConfig+0x518>
 81031aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81031ae:	d02a      	beq.n	8103206 <HAL_RCCEx_PeriphCLKConfig+0x522>
 81031b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81031b4:	d822      	bhi.n	81031fc <HAL_RCCEx_PeriphCLKConfig+0x518>
 81031b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81031ba:	d026      	beq.n	810320a <HAL_RCCEx_PeriphCLKConfig+0x526>
 81031bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81031c0:	d81c      	bhi.n	81031fc <HAL_RCCEx_PeriphCLKConfig+0x518>
 81031c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81031c6:	d010      	beq.n	81031ea <HAL_RCCEx_PeriphCLKConfig+0x506>
 81031c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81031cc:	d816      	bhi.n	81031fc <HAL_RCCEx_PeriphCLKConfig+0x518>
 81031ce:	2b00      	cmp	r3, #0
 81031d0:	d01d      	beq.n	810320e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 81031d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81031d6:	d111      	bne.n	81031fc <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81031d8:	687b      	ldr	r3, [r7, #4]
 81031da:	3304      	adds	r3, #4
 81031dc:	2101      	movs	r1, #1
 81031de:	4618      	mov	r0, r3
 81031e0:	f000 fcc6 	bl	8103b70 <RCCEx_PLL2_Config>
 81031e4:	4603      	mov	r3, r0
 81031e6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 81031e8:	e012      	b.n	8103210 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81031ea:	687b      	ldr	r3, [r7, #4]
 81031ec:	3324      	adds	r3, #36	; 0x24
 81031ee:	2101      	movs	r1, #1
 81031f0:	4618      	mov	r0, r3
 81031f2:	f000 fd6f 	bl	8103cd4 <RCCEx_PLL3_Config>
 81031f6:	4603      	mov	r3, r0
 81031f8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 81031fa:	e009      	b.n	8103210 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 81031fc:	2301      	movs	r3, #1
 81031fe:	75fb      	strb	r3, [r7, #23]
      break;
 8103200:	e006      	b.n	8103210 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8103202:	bf00      	nop
 8103204:	e004      	b.n	8103210 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8103206:	bf00      	nop
 8103208:	e002      	b.n	8103210 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 810320a:	bf00      	nop
 810320c:	e000      	b.n	8103210 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 810320e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103210:	7dfb      	ldrb	r3, [r7, #23]
 8103212:	2b00      	cmp	r3, #0
 8103214:	d10c      	bne.n	8103230 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8103216:	4b05      	ldr	r3, [pc, #20]	; (810322c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810321a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 810321e:	687b      	ldr	r3, [r7, #4]
 8103220:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8103224:	4901      	ldr	r1, [pc, #4]	; (810322c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103226:	4313      	orrs	r3, r2
 8103228:	658b      	str	r3, [r1, #88]	; 0x58
 810322a:	e003      	b.n	8103234 <HAL_RCCEx_PeriphCLKConfig+0x550>
 810322c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103230:	7dfb      	ldrb	r3, [r7, #23]
 8103232:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8103234:	687b      	ldr	r3, [r7, #4]
 8103236:	681b      	ldr	r3, [r3, #0]
 8103238:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810323c:	2b00      	cmp	r3, #0
 810323e:	d02f      	beq.n	81032a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8103240:	687b      	ldr	r3, [r7, #4]
 8103242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103244:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103248:	d00e      	beq.n	8103268 <HAL_RCCEx_PeriphCLKConfig+0x584>
 810324a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810324e:	d814      	bhi.n	810327a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8103250:	2b00      	cmp	r3, #0
 8103252:	d015      	beq.n	8103280 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8103254:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103258:	d10f      	bne.n	810327a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810325a:	4bb0      	ldr	r3, [pc, #704]	; (810351c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810325c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810325e:	4aaf      	ldr	r2, [pc, #700]	; (810351c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103264:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8103266:	e00c      	b.n	8103282 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103268:	687b      	ldr	r3, [r7, #4]
 810326a:	3304      	adds	r3, #4
 810326c:	2101      	movs	r1, #1
 810326e:	4618      	mov	r0, r3
 8103270:	f000 fc7e 	bl	8103b70 <RCCEx_PLL2_Config>
 8103274:	4603      	mov	r3, r0
 8103276:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8103278:	e003      	b.n	8103282 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810327a:	2301      	movs	r3, #1
 810327c:	75fb      	strb	r3, [r7, #23]
      break;
 810327e:	e000      	b.n	8103282 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8103280:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103282:	7dfb      	ldrb	r3, [r7, #23]
 8103284:	2b00      	cmp	r3, #0
 8103286:	d109      	bne.n	810329c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8103288:	4ba4      	ldr	r3, [pc, #656]	; (810351c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810328a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810328c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8103290:	687b      	ldr	r3, [r7, #4]
 8103292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103294:	49a1      	ldr	r1, [pc, #644]	; (810351c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103296:	4313      	orrs	r3, r2
 8103298:	650b      	str	r3, [r1, #80]	; 0x50
 810329a:	e001      	b.n	81032a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810329c:	7dfb      	ldrb	r3, [r7, #23]
 810329e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 81032a0:	687b      	ldr	r3, [r7, #4]
 81032a2:	681b      	ldr	r3, [r3, #0]
 81032a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81032a8:	2b00      	cmp	r3, #0
 81032aa:	d032      	beq.n	8103312 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 81032ac:	687b      	ldr	r3, [r7, #4]
 81032ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81032b0:	2b03      	cmp	r3, #3
 81032b2:	d81b      	bhi.n	81032ec <HAL_RCCEx_PeriphCLKConfig+0x608>
 81032b4:	a201      	add	r2, pc, #4	; (adr r2, 81032bc <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 81032b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81032ba:	bf00      	nop
 81032bc:	081032f3 	.word	0x081032f3
 81032c0:	081032cd 	.word	0x081032cd
 81032c4:	081032db 	.word	0x081032db
 81032c8:	081032f3 	.word	0x081032f3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81032cc:	4b93      	ldr	r3, [pc, #588]	; (810351c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81032ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81032d0:	4a92      	ldr	r2, [pc, #584]	; (810351c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81032d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81032d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 81032d8:	e00c      	b.n	81032f4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81032da:	687b      	ldr	r3, [r7, #4]
 81032dc:	3304      	adds	r3, #4
 81032de:	2102      	movs	r1, #2
 81032e0:	4618      	mov	r0, r3
 81032e2:	f000 fc45 	bl	8103b70 <RCCEx_PLL2_Config>
 81032e6:	4603      	mov	r3, r0
 81032e8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 81032ea:	e003      	b.n	81032f4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 81032ec:	2301      	movs	r3, #1
 81032ee:	75fb      	strb	r3, [r7, #23]
      break;
 81032f0:	e000      	b.n	81032f4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 81032f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81032f4:	7dfb      	ldrb	r3, [r7, #23]
 81032f6:	2b00      	cmp	r3, #0
 81032f8:	d109      	bne.n	810330e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 81032fa:	4b88      	ldr	r3, [pc, #544]	; (810351c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81032fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81032fe:	f023 0203 	bic.w	r2, r3, #3
 8103302:	687b      	ldr	r3, [r7, #4]
 8103304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103306:	4985      	ldr	r1, [pc, #532]	; (810351c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103308:	4313      	orrs	r3, r2
 810330a:	64cb      	str	r3, [r1, #76]	; 0x4c
 810330c:	e001      	b.n	8103312 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810330e:	7dfb      	ldrb	r3, [r7, #23]
 8103310:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8103312:	687b      	ldr	r3, [r7, #4]
 8103314:	681b      	ldr	r3, [r3, #0]
 8103316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810331a:	2b00      	cmp	r3, #0
 810331c:	f000 8088 	beq.w	8103430 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8103320:	4b7f      	ldr	r3, [pc, #508]	; (8103520 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8103322:	681b      	ldr	r3, [r3, #0]
 8103324:	4a7e      	ldr	r2, [pc, #504]	; (8103520 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8103326:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810332a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 810332c:	f7fe fac2 	bl	81018b4 <HAL_GetTick>
 8103330:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103332:	e009      	b.n	8103348 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8103334:	f7fe fabe 	bl	81018b4 <HAL_GetTick>
 8103338:	4602      	mov	r2, r0
 810333a:	693b      	ldr	r3, [r7, #16]
 810333c:	1ad3      	subs	r3, r2, r3
 810333e:	2b64      	cmp	r3, #100	; 0x64
 8103340:	d902      	bls.n	8103348 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8103342:	2303      	movs	r3, #3
 8103344:	75fb      	strb	r3, [r7, #23]
        break;
 8103346:	e005      	b.n	8103354 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103348:	4b75      	ldr	r3, [pc, #468]	; (8103520 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 810334a:	681b      	ldr	r3, [r3, #0]
 810334c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103350:	2b00      	cmp	r3, #0
 8103352:	d0ef      	beq.n	8103334 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8103354:	7dfb      	ldrb	r3, [r7, #23]
 8103356:	2b00      	cmp	r3, #0
 8103358:	d168      	bne.n	810342c <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 810335a:	4b70      	ldr	r3, [pc, #448]	; (810351c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810335c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 810335e:	687b      	ldr	r3, [r7, #4]
 8103360:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103364:	4053      	eors	r3, r2
 8103366:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810336a:	2b00      	cmp	r3, #0
 810336c:	d013      	beq.n	8103396 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 810336e:	4b6b      	ldr	r3, [pc, #428]	; (810351c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8103376:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8103378:	4b68      	ldr	r3, [pc, #416]	; (810351c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810337a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810337c:	4a67      	ldr	r2, [pc, #412]	; (810351c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810337e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8103382:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8103384:	4b65      	ldr	r3, [pc, #404]	; (810351c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103388:	4a64      	ldr	r2, [pc, #400]	; (810351c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810338a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810338e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8103390:	4a62      	ldr	r2, [pc, #392]	; (810351c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103392:	68fb      	ldr	r3, [r7, #12]
 8103394:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8103396:	687b      	ldr	r3, [r7, #4]
 8103398:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810339c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81033a0:	d115      	bne.n	81033ce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81033a2:	f7fe fa87 	bl	81018b4 <HAL_GetTick>
 81033a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81033a8:	e00b      	b.n	81033c2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81033aa:	f7fe fa83 	bl	81018b4 <HAL_GetTick>
 81033ae:	4602      	mov	r2, r0
 81033b0:	693b      	ldr	r3, [r7, #16]
 81033b2:	1ad3      	subs	r3, r2, r3
 81033b4:	f241 3288 	movw	r2, #5000	; 0x1388
 81033b8:	4293      	cmp	r3, r2
 81033ba:	d902      	bls.n	81033c2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 81033bc:	2303      	movs	r3, #3
 81033be:	75fb      	strb	r3, [r7, #23]
            break;
 81033c0:	e005      	b.n	81033ce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81033c2:	4b56      	ldr	r3, [pc, #344]	; (810351c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81033c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81033c6:	f003 0302 	and.w	r3, r3, #2
 81033ca:	2b00      	cmp	r3, #0
 81033cc:	d0ed      	beq.n	81033aa <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 81033ce:	7dfb      	ldrb	r3, [r7, #23]
 81033d0:	2b00      	cmp	r3, #0
 81033d2:	d128      	bne.n	8103426 <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81033d4:	687b      	ldr	r3, [r7, #4]
 81033d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81033da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81033de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81033e2:	d10f      	bne.n	8103404 <HAL_RCCEx_PeriphCLKConfig+0x720>
 81033e4:	4b4d      	ldr	r3, [pc, #308]	; (810351c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81033e6:	691b      	ldr	r3, [r3, #16]
 81033e8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 81033ec:	687b      	ldr	r3, [r7, #4]
 81033ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81033f2:	091b      	lsrs	r3, r3, #4
 81033f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 81033f8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 81033fc:	4947      	ldr	r1, [pc, #284]	; (810351c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81033fe:	4313      	orrs	r3, r2
 8103400:	610b      	str	r3, [r1, #16]
 8103402:	e005      	b.n	8103410 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8103404:	4b45      	ldr	r3, [pc, #276]	; (810351c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103406:	691b      	ldr	r3, [r3, #16]
 8103408:	4a44      	ldr	r2, [pc, #272]	; (810351c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810340a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 810340e:	6113      	str	r3, [r2, #16]
 8103410:	4b42      	ldr	r3, [pc, #264]	; (810351c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103412:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8103414:	687b      	ldr	r3, [r7, #4]
 8103416:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810341a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810341e:	493f      	ldr	r1, [pc, #252]	; (810351c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103420:	4313      	orrs	r3, r2
 8103422:	670b      	str	r3, [r1, #112]	; 0x70
 8103424:	e004      	b.n	8103430 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8103426:	7dfb      	ldrb	r3, [r7, #23]
 8103428:	75bb      	strb	r3, [r7, #22]
 810342a:	e001      	b.n	8103430 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 810342c:	7dfb      	ldrb	r3, [r7, #23]
 810342e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8103430:	687b      	ldr	r3, [r7, #4]
 8103432:	681b      	ldr	r3, [r3, #0]
 8103434:	f003 0301 	and.w	r3, r3, #1
 8103438:	2b00      	cmp	r3, #0
 810343a:	f000 8083 	beq.w	8103544 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 810343e:	687b      	ldr	r3, [r7, #4]
 8103440:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8103442:	2b28      	cmp	r3, #40	; 0x28
 8103444:	d866      	bhi.n	8103514 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8103446:	a201      	add	r2, pc, #4	; (adr r2, 810344c <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8103448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810344c:	08103525 	.word	0x08103525
 8103450:	08103515 	.word	0x08103515
 8103454:	08103515 	.word	0x08103515
 8103458:	08103515 	.word	0x08103515
 810345c:	08103515 	.word	0x08103515
 8103460:	08103515 	.word	0x08103515
 8103464:	08103515 	.word	0x08103515
 8103468:	08103515 	.word	0x08103515
 810346c:	081034f1 	.word	0x081034f1
 8103470:	08103515 	.word	0x08103515
 8103474:	08103515 	.word	0x08103515
 8103478:	08103515 	.word	0x08103515
 810347c:	08103515 	.word	0x08103515
 8103480:	08103515 	.word	0x08103515
 8103484:	08103515 	.word	0x08103515
 8103488:	08103515 	.word	0x08103515
 810348c:	08103503 	.word	0x08103503
 8103490:	08103515 	.word	0x08103515
 8103494:	08103515 	.word	0x08103515
 8103498:	08103515 	.word	0x08103515
 810349c:	08103515 	.word	0x08103515
 81034a0:	08103515 	.word	0x08103515
 81034a4:	08103515 	.word	0x08103515
 81034a8:	08103515 	.word	0x08103515
 81034ac:	08103525 	.word	0x08103525
 81034b0:	08103515 	.word	0x08103515
 81034b4:	08103515 	.word	0x08103515
 81034b8:	08103515 	.word	0x08103515
 81034bc:	08103515 	.word	0x08103515
 81034c0:	08103515 	.word	0x08103515
 81034c4:	08103515 	.word	0x08103515
 81034c8:	08103515 	.word	0x08103515
 81034cc:	08103525 	.word	0x08103525
 81034d0:	08103515 	.word	0x08103515
 81034d4:	08103515 	.word	0x08103515
 81034d8:	08103515 	.word	0x08103515
 81034dc:	08103515 	.word	0x08103515
 81034e0:	08103515 	.word	0x08103515
 81034e4:	08103515 	.word	0x08103515
 81034e8:	08103515 	.word	0x08103515
 81034ec:	08103525 	.word	0x08103525
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81034f0:	687b      	ldr	r3, [r7, #4]
 81034f2:	3304      	adds	r3, #4
 81034f4:	2101      	movs	r1, #1
 81034f6:	4618      	mov	r0, r3
 81034f8:	f000 fb3a 	bl	8103b70 <RCCEx_PLL2_Config>
 81034fc:	4603      	mov	r3, r0
 81034fe:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8103500:	e011      	b.n	8103526 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103502:	687b      	ldr	r3, [r7, #4]
 8103504:	3324      	adds	r3, #36	; 0x24
 8103506:	2101      	movs	r1, #1
 8103508:	4618      	mov	r0, r3
 810350a:	f000 fbe3 	bl	8103cd4 <RCCEx_PLL3_Config>
 810350e:	4603      	mov	r3, r0
 8103510:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8103512:	e008      	b.n	8103526 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103514:	2301      	movs	r3, #1
 8103516:	75fb      	strb	r3, [r7, #23]
      break;
 8103518:	e005      	b.n	8103526 <HAL_RCCEx_PeriphCLKConfig+0x842>
 810351a:	bf00      	nop
 810351c:	58024400 	.word	0x58024400
 8103520:	58024800 	.word	0x58024800
      break;
 8103524:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103526:	7dfb      	ldrb	r3, [r7, #23]
 8103528:	2b00      	cmp	r3, #0
 810352a:	d109      	bne.n	8103540 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 810352c:	4b96      	ldr	r3, [pc, #600]	; (8103788 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810352e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103530:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8103534:	687b      	ldr	r3, [r7, #4]
 8103536:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8103538:	4993      	ldr	r1, [pc, #588]	; (8103788 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810353a:	4313      	orrs	r3, r2
 810353c:	654b      	str	r3, [r1, #84]	; 0x54
 810353e:	e001      	b.n	8103544 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103540:	7dfb      	ldrb	r3, [r7, #23]
 8103542:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8103544:	687b      	ldr	r3, [r7, #4]
 8103546:	681b      	ldr	r3, [r3, #0]
 8103548:	f003 0302 	and.w	r3, r3, #2
 810354c:	2b00      	cmp	r3, #0
 810354e:	d038      	beq.n	81035c2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8103550:	687b      	ldr	r3, [r7, #4]
 8103552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8103554:	2b05      	cmp	r3, #5
 8103556:	d821      	bhi.n	810359c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8103558:	a201      	add	r2, pc, #4	; (adr r2, 8103560 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 810355a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810355e:	bf00      	nop
 8103560:	081035a3 	.word	0x081035a3
 8103564:	08103579 	.word	0x08103579
 8103568:	0810358b 	.word	0x0810358b
 810356c:	081035a3 	.word	0x081035a3
 8103570:	081035a3 	.word	0x081035a3
 8103574:	081035a3 	.word	0x081035a3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103578:	687b      	ldr	r3, [r7, #4]
 810357a:	3304      	adds	r3, #4
 810357c:	2101      	movs	r1, #1
 810357e:	4618      	mov	r0, r3
 8103580:	f000 faf6 	bl	8103b70 <RCCEx_PLL2_Config>
 8103584:	4603      	mov	r3, r0
 8103586:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8103588:	e00c      	b.n	81035a4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810358a:	687b      	ldr	r3, [r7, #4]
 810358c:	3324      	adds	r3, #36	; 0x24
 810358e:	2101      	movs	r1, #1
 8103590:	4618      	mov	r0, r3
 8103592:	f000 fb9f 	bl	8103cd4 <RCCEx_PLL3_Config>
 8103596:	4603      	mov	r3, r0
 8103598:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 810359a:	e003      	b.n	81035a4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810359c:	2301      	movs	r3, #1
 810359e:	75fb      	strb	r3, [r7, #23]
      break;
 81035a0:	e000      	b.n	81035a4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 81035a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81035a4:	7dfb      	ldrb	r3, [r7, #23]
 81035a6:	2b00      	cmp	r3, #0
 81035a8:	d109      	bne.n	81035be <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 81035aa:	4b77      	ldr	r3, [pc, #476]	; (8103788 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81035ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81035ae:	f023 0207 	bic.w	r2, r3, #7
 81035b2:	687b      	ldr	r3, [r7, #4]
 81035b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81035b6:	4974      	ldr	r1, [pc, #464]	; (8103788 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81035b8:	4313      	orrs	r3, r2
 81035ba:	654b      	str	r3, [r1, #84]	; 0x54
 81035bc:	e001      	b.n	81035c2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81035be:	7dfb      	ldrb	r3, [r7, #23]
 81035c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81035c2:	687b      	ldr	r3, [r7, #4]
 81035c4:	681b      	ldr	r3, [r3, #0]
 81035c6:	f003 0304 	and.w	r3, r3, #4
 81035ca:	2b00      	cmp	r3, #0
 81035cc:	d03a      	beq.n	8103644 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 81035ce:	687b      	ldr	r3, [r7, #4]
 81035d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81035d4:	2b05      	cmp	r3, #5
 81035d6:	d821      	bhi.n	810361c <HAL_RCCEx_PeriphCLKConfig+0x938>
 81035d8:	a201      	add	r2, pc, #4	; (adr r2, 81035e0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 81035da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81035de:	bf00      	nop
 81035e0:	08103623 	.word	0x08103623
 81035e4:	081035f9 	.word	0x081035f9
 81035e8:	0810360b 	.word	0x0810360b
 81035ec:	08103623 	.word	0x08103623
 81035f0:	08103623 	.word	0x08103623
 81035f4:	08103623 	.word	0x08103623
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81035f8:	687b      	ldr	r3, [r7, #4]
 81035fa:	3304      	adds	r3, #4
 81035fc:	2101      	movs	r1, #1
 81035fe:	4618      	mov	r0, r3
 8103600:	f000 fab6 	bl	8103b70 <RCCEx_PLL2_Config>
 8103604:	4603      	mov	r3, r0
 8103606:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8103608:	e00c      	b.n	8103624 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810360a:	687b      	ldr	r3, [r7, #4]
 810360c:	3324      	adds	r3, #36	; 0x24
 810360e:	2101      	movs	r1, #1
 8103610:	4618      	mov	r0, r3
 8103612:	f000 fb5f 	bl	8103cd4 <RCCEx_PLL3_Config>
 8103616:	4603      	mov	r3, r0
 8103618:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 810361a:	e003      	b.n	8103624 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810361c:	2301      	movs	r3, #1
 810361e:	75fb      	strb	r3, [r7, #23]
      break;
 8103620:	e000      	b.n	8103624 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8103622:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103624:	7dfb      	ldrb	r3, [r7, #23]
 8103626:	2b00      	cmp	r3, #0
 8103628:	d10a      	bne.n	8103640 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810362a:	4b57      	ldr	r3, [pc, #348]	; (8103788 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810362c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810362e:	f023 0207 	bic.w	r2, r3, #7
 8103632:	687b      	ldr	r3, [r7, #4]
 8103634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8103638:	4953      	ldr	r1, [pc, #332]	; (8103788 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810363a:	4313      	orrs	r3, r2
 810363c:	658b      	str	r3, [r1, #88]	; 0x58
 810363e:	e001      	b.n	8103644 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103640:	7dfb      	ldrb	r3, [r7, #23]
 8103642:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8103644:	687b      	ldr	r3, [r7, #4]
 8103646:	681b      	ldr	r3, [r3, #0]
 8103648:	f003 0320 	and.w	r3, r3, #32
 810364c:	2b00      	cmp	r3, #0
 810364e:	d04b      	beq.n	81036e8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8103650:	687b      	ldr	r3, [r7, #4]
 8103652:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8103656:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810365a:	d02e      	beq.n	81036ba <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 810365c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103660:	d828      	bhi.n	81036b4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8103662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103666:	d02a      	beq.n	81036be <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8103668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810366c:	d822      	bhi.n	81036b4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 810366e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103672:	d026      	beq.n	81036c2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8103674:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103678:	d81c      	bhi.n	81036b4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 810367a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810367e:	d010      	beq.n	81036a2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8103680:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103684:	d816      	bhi.n	81036b4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8103686:	2b00      	cmp	r3, #0
 8103688:	d01d      	beq.n	81036c6 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 810368a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810368e:	d111      	bne.n	81036b4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103690:	687b      	ldr	r3, [r7, #4]
 8103692:	3304      	adds	r3, #4
 8103694:	2100      	movs	r1, #0
 8103696:	4618      	mov	r0, r3
 8103698:	f000 fa6a 	bl	8103b70 <RCCEx_PLL2_Config>
 810369c:	4603      	mov	r3, r0
 810369e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 81036a0:	e012      	b.n	81036c8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81036a2:	687b      	ldr	r3, [r7, #4]
 81036a4:	3324      	adds	r3, #36	; 0x24
 81036a6:	2102      	movs	r1, #2
 81036a8:	4618      	mov	r0, r3
 81036aa:	f000 fb13 	bl	8103cd4 <RCCEx_PLL3_Config>
 81036ae:	4603      	mov	r3, r0
 81036b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 81036b2:	e009      	b.n	81036c8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81036b4:	2301      	movs	r3, #1
 81036b6:	75fb      	strb	r3, [r7, #23]
      break;
 81036b8:	e006      	b.n	81036c8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81036ba:	bf00      	nop
 81036bc:	e004      	b.n	81036c8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81036be:	bf00      	nop
 81036c0:	e002      	b.n	81036c8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81036c2:	bf00      	nop
 81036c4:	e000      	b.n	81036c8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81036c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81036c8:	7dfb      	ldrb	r3, [r7, #23]
 81036ca:	2b00      	cmp	r3, #0
 81036cc:	d10a      	bne.n	81036e4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81036ce:	4b2e      	ldr	r3, [pc, #184]	; (8103788 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81036d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81036d2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 81036d6:	687b      	ldr	r3, [r7, #4]
 81036d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81036dc:	492a      	ldr	r1, [pc, #168]	; (8103788 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81036de:	4313      	orrs	r3, r2
 81036e0:	654b      	str	r3, [r1, #84]	; 0x54
 81036e2:	e001      	b.n	81036e8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81036e4:	7dfb      	ldrb	r3, [r7, #23]
 81036e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81036e8:	687b      	ldr	r3, [r7, #4]
 81036ea:	681b      	ldr	r3, [r3, #0]
 81036ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81036f0:	2b00      	cmp	r3, #0
 81036f2:	d04d      	beq.n	8103790 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 81036f4:	687b      	ldr	r3, [r7, #4]
 81036f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81036fa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81036fe:	d02e      	beq.n	810375e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8103700:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8103704:	d828      	bhi.n	8103758 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8103706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810370a:	d02a      	beq.n	8103762 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 810370c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103710:	d822      	bhi.n	8103758 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8103712:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8103716:	d026      	beq.n	8103766 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8103718:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810371c:	d81c      	bhi.n	8103758 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 810371e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8103722:	d010      	beq.n	8103746 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8103724:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8103728:	d816      	bhi.n	8103758 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 810372a:	2b00      	cmp	r3, #0
 810372c:	d01d      	beq.n	810376a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 810372e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8103732:	d111      	bne.n	8103758 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103734:	687b      	ldr	r3, [r7, #4]
 8103736:	3304      	adds	r3, #4
 8103738:	2100      	movs	r1, #0
 810373a:	4618      	mov	r0, r3
 810373c:	f000 fa18 	bl	8103b70 <RCCEx_PLL2_Config>
 8103740:	4603      	mov	r3, r0
 8103742:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8103744:	e012      	b.n	810376c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103746:	687b      	ldr	r3, [r7, #4]
 8103748:	3324      	adds	r3, #36	; 0x24
 810374a:	2102      	movs	r1, #2
 810374c:	4618      	mov	r0, r3
 810374e:	f000 fac1 	bl	8103cd4 <RCCEx_PLL3_Config>
 8103752:	4603      	mov	r3, r0
 8103754:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8103756:	e009      	b.n	810376c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103758:	2301      	movs	r3, #1
 810375a:	75fb      	strb	r3, [r7, #23]
      break;
 810375c:	e006      	b.n	810376c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 810375e:	bf00      	nop
 8103760:	e004      	b.n	810376c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8103762:	bf00      	nop
 8103764:	e002      	b.n	810376c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8103766:	bf00      	nop
 8103768:	e000      	b.n	810376c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 810376a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810376c:	7dfb      	ldrb	r3, [r7, #23]
 810376e:	2b00      	cmp	r3, #0
 8103770:	d10c      	bne.n	810378c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8103772:	4b05      	ldr	r3, [pc, #20]	; (8103788 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8103774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103776:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 810377a:	687b      	ldr	r3, [r7, #4]
 810377c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8103780:	4901      	ldr	r1, [pc, #4]	; (8103788 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8103782:	4313      	orrs	r3, r2
 8103784:	658b      	str	r3, [r1, #88]	; 0x58
 8103786:	e003      	b.n	8103790 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8103788:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810378c:	7dfb      	ldrb	r3, [r7, #23]
 810378e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8103790:	687b      	ldr	r3, [r7, #4]
 8103792:	681b      	ldr	r3, [r3, #0]
 8103794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103798:	2b00      	cmp	r3, #0
 810379a:	d04b      	beq.n	8103834 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 810379c:	687b      	ldr	r3, [r7, #4]
 810379e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81037a2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81037a6:	d02e      	beq.n	8103806 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 81037a8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81037ac:	d828      	bhi.n	8103800 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81037ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81037b2:	d02a      	beq.n	810380a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 81037b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81037b8:	d822      	bhi.n	8103800 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81037ba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81037be:	d026      	beq.n	810380e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 81037c0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81037c4:	d81c      	bhi.n	8103800 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81037c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81037ca:	d010      	beq.n	81037ee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 81037cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81037d0:	d816      	bhi.n	8103800 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81037d2:	2b00      	cmp	r3, #0
 81037d4:	d01d      	beq.n	8103812 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 81037d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81037da:	d111      	bne.n	8103800 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81037dc:	687b      	ldr	r3, [r7, #4]
 81037de:	3304      	adds	r3, #4
 81037e0:	2100      	movs	r1, #0
 81037e2:	4618      	mov	r0, r3
 81037e4:	f000 f9c4 	bl	8103b70 <RCCEx_PLL2_Config>
 81037e8:	4603      	mov	r3, r0
 81037ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 81037ec:	e012      	b.n	8103814 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81037ee:	687b      	ldr	r3, [r7, #4]
 81037f0:	3324      	adds	r3, #36	; 0x24
 81037f2:	2102      	movs	r1, #2
 81037f4:	4618      	mov	r0, r3
 81037f6:	f000 fa6d 	bl	8103cd4 <RCCEx_PLL3_Config>
 81037fa:	4603      	mov	r3, r0
 81037fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 81037fe:	e009      	b.n	8103814 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103800:	2301      	movs	r3, #1
 8103802:	75fb      	strb	r3, [r7, #23]
      break;
 8103804:	e006      	b.n	8103814 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8103806:	bf00      	nop
 8103808:	e004      	b.n	8103814 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810380a:	bf00      	nop
 810380c:	e002      	b.n	8103814 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810380e:	bf00      	nop
 8103810:	e000      	b.n	8103814 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8103812:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103814:	7dfb      	ldrb	r3, [r7, #23]
 8103816:	2b00      	cmp	r3, #0
 8103818:	d10a      	bne.n	8103830 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810381a:	4b9d      	ldr	r3, [pc, #628]	; (8103a90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810381c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810381e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8103822:	687b      	ldr	r3, [r7, #4]
 8103824:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8103828:	4999      	ldr	r1, [pc, #612]	; (8103a90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810382a:	4313      	orrs	r3, r2
 810382c:	658b      	str	r3, [r1, #88]	; 0x58
 810382e:	e001      	b.n	8103834 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103830:	7dfb      	ldrb	r3, [r7, #23]
 8103832:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8103834:	687b      	ldr	r3, [r7, #4]
 8103836:	681b      	ldr	r3, [r3, #0]
 8103838:	f003 0308 	and.w	r3, r3, #8
 810383c:	2b00      	cmp	r3, #0
 810383e:	d01a      	beq.n	8103876 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8103840:	687b      	ldr	r3, [r7, #4]
 8103842:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8103846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810384a:	d10a      	bne.n	8103862 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 810384c:	687b      	ldr	r3, [r7, #4]
 810384e:	3324      	adds	r3, #36	; 0x24
 8103850:	2102      	movs	r1, #2
 8103852:	4618      	mov	r0, r3
 8103854:	f000 fa3e 	bl	8103cd4 <RCCEx_PLL3_Config>
 8103858:	4603      	mov	r3, r0
 810385a:	2b00      	cmp	r3, #0
 810385c:	d001      	beq.n	8103862 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 810385e:	2301      	movs	r3, #1
 8103860:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8103862:	4b8b      	ldr	r3, [pc, #556]	; (8103a90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103866:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 810386a:	687b      	ldr	r3, [r7, #4]
 810386c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8103870:	4987      	ldr	r1, [pc, #540]	; (8103a90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103872:	4313      	orrs	r3, r2
 8103874:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8103876:	687b      	ldr	r3, [r7, #4]
 8103878:	681b      	ldr	r3, [r3, #0]
 810387a:	f003 0310 	and.w	r3, r3, #16
 810387e:	2b00      	cmp	r3, #0
 8103880:	d01a      	beq.n	81038b8 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8103882:	687b      	ldr	r3, [r7, #4]
 8103884:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8103888:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810388c:	d10a      	bne.n	81038a4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 810388e:	687b      	ldr	r3, [r7, #4]
 8103890:	3324      	adds	r3, #36	; 0x24
 8103892:	2102      	movs	r1, #2
 8103894:	4618      	mov	r0, r3
 8103896:	f000 fa1d 	bl	8103cd4 <RCCEx_PLL3_Config>
 810389a:	4603      	mov	r3, r0
 810389c:	2b00      	cmp	r3, #0
 810389e:	d001      	beq.n	81038a4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 81038a0:	2301      	movs	r3, #1
 81038a2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 81038a4:	4b7a      	ldr	r3, [pc, #488]	; (8103a90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81038a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81038a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81038ac:	687b      	ldr	r3, [r7, #4]
 81038ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81038b2:	4977      	ldr	r1, [pc, #476]	; (8103a90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81038b4:	4313      	orrs	r3, r2
 81038b6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 81038b8:	687b      	ldr	r3, [r7, #4]
 81038ba:	681b      	ldr	r3, [r3, #0]
 81038bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 81038c0:	2b00      	cmp	r3, #0
 81038c2:	d034      	beq.n	810392e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 81038c4:	687b      	ldr	r3, [r7, #4]
 81038c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81038ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81038ce:	d01d      	beq.n	810390c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 81038d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81038d4:	d817      	bhi.n	8103906 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 81038d6:	2b00      	cmp	r3, #0
 81038d8:	d003      	beq.n	81038e2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 81038da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81038de:	d009      	beq.n	81038f4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 81038e0:	e011      	b.n	8103906 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81038e2:	687b      	ldr	r3, [r7, #4]
 81038e4:	3304      	adds	r3, #4
 81038e6:	2100      	movs	r1, #0
 81038e8:	4618      	mov	r0, r3
 81038ea:	f000 f941 	bl	8103b70 <RCCEx_PLL2_Config>
 81038ee:	4603      	mov	r3, r0
 81038f0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 81038f2:	e00c      	b.n	810390e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81038f4:	687b      	ldr	r3, [r7, #4]
 81038f6:	3324      	adds	r3, #36	; 0x24
 81038f8:	2102      	movs	r1, #2
 81038fa:	4618      	mov	r0, r3
 81038fc:	f000 f9ea 	bl	8103cd4 <RCCEx_PLL3_Config>
 8103900:	4603      	mov	r3, r0
 8103902:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8103904:	e003      	b.n	810390e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103906:	2301      	movs	r3, #1
 8103908:	75fb      	strb	r3, [r7, #23]
      break;
 810390a:	e000      	b.n	810390e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 810390c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810390e:	7dfb      	ldrb	r3, [r7, #23]
 8103910:	2b00      	cmp	r3, #0
 8103912:	d10a      	bne.n	810392a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8103914:	4b5e      	ldr	r3, [pc, #376]	; (8103a90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103918:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 810391c:	687b      	ldr	r3, [r7, #4]
 810391e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8103922:	495b      	ldr	r1, [pc, #364]	; (8103a90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103924:	4313      	orrs	r3, r2
 8103926:	658b      	str	r3, [r1, #88]	; 0x58
 8103928:	e001      	b.n	810392e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810392a:	7dfb      	ldrb	r3, [r7, #23]
 810392c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810392e:	687b      	ldr	r3, [r7, #4]
 8103930:	681b      	ldr	r3, [r3, #0]
 8103932:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8103936:	2b00      	cmp	r3, #0
 8103938:	d033      	beq.n	81039a2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 810393a:	687b      	ldr	r3, [r7, #4]
 810393c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103940:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103944:	d01c      	beq.n	8103980 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8103946:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810394a:	d816      	bhi.n	810397a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 810394c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103950:	d003      	beq.n	810395a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8103952:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103956:	d007      	beq.n	8103968 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8103958:	e00f      	b.n	810397a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810395a:	4b4d      	ldr	r3, [pc, #308]	; (8103a90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810395c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810395e:	4a4c      	ldr	r2, [pc, #304]	; (8103a90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103964:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8103966:	e00c      	b.n	8103982 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103968:	687b      	ldr	r3, [r7, #4]
 810396a:	3324      	adds	r3, #36	; 0x24
 810396c:	2101      	movs	r1, #1
 810396e:	4618      	mov	r0, r3
 8103970:	f000 f9b0 	bl	8103cd4 <RCCEx_PLL3_Config>
 8103974:	4603      	mov	r3, r0
 8103976:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8103978:	e003      	b.n	8103982 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810397a:	2301      	movs	r3, #1
 810397c:	75fb      	strb	r3, [r7, #23]
      break;
 810397e:	e000      	b.n	8103982 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8103980:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103982:	7dfb      	ldrb	r3, [r7, #23]
 8103984:	2b00      	cmp	r3, #0
 8103986:	d10a      	bne.n	810399e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8103988:	4b41      	ldr	r3, [pc, #260]	; (8103a90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810398a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810398c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8103990:	687b      	ldr	r3, [r7, #4]
 8103992:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103996:	493e      	ldr	r1, [pc, #248]	; (8103a90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103998:	4313      	orrs	r3, r2
 810399a:	654b      	str	r3, [r1, #84]	; 0x54
 810399c:	e001      	b.n	81039a2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810399e:	7dfb      	ldrb	r3, [r7, #23]
 81039a0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 81039a2:	687b      	ldr	r3, [r7, #4]
 81039a4:	681b      	ldr	r3, [r3, #0]
 81039a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81039aa:	2b00      	cmp	r3, #0
 81039ac:	d029      	beq.n	8103a02 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 81039ae:	687b      	ldr	r3, [r7, #4]
 81039b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81039b2:	2b00      	cmp	r3, #0
 81039b4:	d003      	beq.n	81039be <HAL_RCCEx_PeriphCLKConfig+0xcda>
 81039b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81039ba:	d007      	beq.n	81039cc <HAL_RCCEx_PeriphCLKConfig+0xce8>
 81039bc:	e00f      	b.n	81039de <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81039be:	4b34      	ldr	r3, [pc, #208]	; (8103a90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81039c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81039c2:	4a33      	ldr	r2, [pc, #204]	; (8103a90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81039c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81039c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81039ca:	e00b      	b.n	81039e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81039cc:	687b      	ldr	r3, [r7, #4]
 81039ce:	3304      	adds	r3, #4
 81039d0:	2102      	movs	r1, #2
 81039d2:	4618      	mov	r0, r3
 81039d4:	f000 f8cc 	bl	8103b70 <RCCEx_PLL2_Config>
 81039d8:	4603      	mov	r3, r0
 81039da:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81039dc:	e002      	b.n	81039e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 81039de:	2301      	movs	r3, #1
 81039e0:	75fb      	strb	r3, [r7, #23]
      break;
 81039e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81039e4:	7dfb      	ldrb	r3, [r7, #23]
 81039e6:	2b00      	cmp	r3, #0
 81039e8:	d109      	bne.n	81039fe <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 81039ea:	4b29      	ldr	r3, [pc, #164]	; (8103a90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81039ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81039ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 81039f2:	687b      	ldr	r3, [r7, #4]
 81039f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81039f6:	4926      	ldr	r1, [pc, #152]	; (8103a90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81039f8:	4313      	orrs	r3, r2
 81039fa:	64cb      	str	r3, [r1, #76]	; 0x4c
 81039fc:	e001      	b.n	8103a02 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81039fe:	7dfb      	ldrb	r3, [r7, #23]
 8103a00:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8103a02:	687b      	ldr	r3, [r7, #4]
 8103a04:	681b      	ldr	r3, [r3, #0]
 8103a06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8103a0a:	2b00      	cmp	r3, #0
 8103a0c:	d00a      	beq.n	8103a24 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8103a0e:	687b      	ldr	r3, [r7, #4]
 8103a10:	3324      	adds	r3, #36	; 0x24
 8103a12:	2102      	movs	r1, #2
 8103a14:	4618      	mov	r0, r3
 8103a16:	f000 f95d 	bl	8103cd4 <RCCEx_PLL3_Config>
 8103a1a:	4603      	mov	r3, r0
 8103a1c:	2b00      	cmp	r3, #0
 8103a1e:	d001      	beq.n	8103a24 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8103a20:	2301      	movs	r3, #1
 8103a22:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8103a24:	687b      	ldr	r3, [r7, #4]
 8103a26:	681b      	ldr	r3, [r3, #0]
 8103a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8103a2c:	2b00      	cmp	r3, #0
 8103a2e:	d033      	beq.n	8103a98 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8103a30:	687b      	ldr	r3, [r7, #4]
 8103a32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8103a34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103a38:	d017      	beq.n	8103a6a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8103a3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103a3e:	d811      	bhi.n	8103a64 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8103a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8103a44:	d013      	beq.n	8103a6e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8103a46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8103a4a:	d80b      	bhi.n	8103a64 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8103a4c:	2b00      	cmp	r3, #0
 8103a4e:	d010      	beq.n	8103a72 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8103a50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103a54:	d106      	bne.n	8103a64 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103a56:	4b0e      	ldr	r3, [pc, #56]	; (8103a90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103a5a:	4a0d      	ldr	r2, [pc, #52]	; (8103a90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103a60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8103a62:	e007      	b.n	8103a74 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103a64:	2301      	movs	r3, #1
 8103a66:	75fb      	strb	r3, [r7, #23]
      break;
 8103a68:	e004      	b.n	8103a74 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8103a6a:	bf00      	nop
 8103a6c:	e002      	b.n	8103a74 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8103a6e:	bf00      	nop
 8103a70:	e000      	b.n	8103a74 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8103a72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103a74:	7dfb      	ldrb	r3, [r7, #23]
 8103a76:	2b00      	cmp	r3, #0
 8103a78:	d10c      	bne.n	8103a94 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8103a7a:	4b05      	ldr	r3, [pc, #20]	; (8103a90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103a7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8103a82:	687b      	ldr	r3, [r7, #4]
 8103a84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8103a86:	4902      	ldr	r1, [pc, #8]	; (8103a90 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103a88:	4313      	orrs	r3, r2
 8103a8a:	654b      	str	r3, [r1, #84]	; 0x54
 8103a8c:	e004      	b.n	8103a98 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8103a8e:	bf00      	nop
 8103a90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103a94:	7dfb      	ldrb	r3, [r7, #23]
 8103a96:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8103a98:	687b      	ldr	r3, [r7, #4]
 8103a9a:	681b      	ldr	r3, [r3, #0]
 8103a9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8103aa0:	2b00      	cmp	r3, #0
 8103aa2:	d008      	beq.n	8103ab6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8103aa4:	4b31      	ldr	r3, [pc, #196]	; (8103b6c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103aa8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8103aac:	687b      	ldr	r3, [r7, #4]
 8103aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103ab0:	492e      	ldr	r1, [pc, #184]	; (8103b6c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103ab2:	4313      	orrs	r3, r2
 8103ab4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8103ab6:	687b      	ldr	r3, [r7, #4]
 8103ab8:	681b      	ldr	r3, [r3, #0]
 8103aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8103abe:	2b00      	cmp	r3, #0
 8103ac0:	d009      	beq.n	8103ad6 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8103ac2:	4b2a      	ldr	r3, [pc, #168]	; (8103b6c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103ac4:	691b      	ldr	r3, [r3, #16]
 8103ac6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8103aca:	687b      	ldr	r3, [r7, #4]
 8103acc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8103ad0:	4926      	ldr	r1, [pc, #152]	; (8103b6c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103ad2:	4313      	orrs	r3, r2
 8103ad4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8103ad6:	687b      	ldr	r3, [r7, #4]
 8103ad8:	681b      	ldr	r3, [r3, #0]
 8103ada:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8103ade:	2b00      	cmp	r3, #0
 8103ae0:	d008      	beq.n	8103af4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8103ae2:	4b22      	ldr	r3, [pc, #136]	; (8103b6c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103ae6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8103aea:	687b      	ldr	r3, [r7, #4]
 8103aec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8103aee:	491f      	ldr	r1, [pc, #124]	; (8103b6c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103af0:	4313      	orrs	r3, r2
 8103af2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8103af4:	687b      	ldr	r3, [r7, #4]
 8103af6:	681b      	ldr	r3, [r3, #0]
 8103af8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8103afc:	2b00      	cmp	r3, #0
 8103afe:	d00d      	beq.n	8103b1c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8103b00:	4b1a      	ldr	r3, [pc, #104]	; (8103b6c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103b02:	691b      	ldr	r3, [r3, #16]
 8103b04:	4a19      	ldr	r2, [pc, #100]	; (8103b6c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103b06:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8103b0a:	6113      	str	r3, [r2, #16]
 8103b0c:	4b17      	ldr	r3, [pc, #92]	; (8103b6c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103b0e:	691a      	ldr	r2, [r3, #16]
 8103b10:	687b      	ldr	r3, [r7, #4]
 8103b12:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8103b16:	4915      	ldr	r1, [pc, #84]	; (8103b6c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103b18:	4313      	orrs	r3, r2
 8103b1a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8103b1c:	687b      	ldr	r3, [r7, #4]
 8103b1e:	681b      	ldr	r3, [r3, #0]
 8103b20:	2b00      	cmp	r3, #0
 8103b22:	da08      	bge.n	8103b36 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8103b24:	4b11      	ldr	r3, [pc, #68]	; (8103b6c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103b28:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8103b2c:	687b      	ldr	r3, [r7, #4]
 8103b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103b30:	490e      	ldr	r1, [pc, #56]	; (8103b6c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103b32:	4313      	orrs	r3, r2
 8103b34:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8103b36:	687b      	ldr	r3, [r7, #4]
 8103b38:	681b      	ldr	r3, [r3, #0]
 8103b3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8103b3e:	2b00      	cmp	r3, #0
 8103b40:	d009      	beq.n	8103b56 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8103b42:	4b0a      	ldr	r3, [pc, #40]	; (8103b6c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103b46:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8103b4a:	687b      	ldr	r3, [r7, #4]
 8103b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8103b50:	4906      	ldr	r1, [pc, #24]	; (8103b6c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103b52:	4313      	orrs	r3, r2
 8103b54:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8103b56:	7dbb      	ldrb	r3, [r7, #22]
 8103b58:	2b00      	cmp	r3, #0
 8103b5a:	d101      	bne.n	8103b60 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8103b5c:	2300      	movs	r3, #0
 8103b5e:	e000      	b.n	8103b62 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8103b60:	2301      	movs	r3, #1
}
 8103b62:	4618      	mov	r0, r3
 8103b64:	3718      	adds	r7, #24
 8103b66:	46bd      	mov	sp, r7
 8103b68:	bd80      	pop	{r7, pc}
 8103b6a:	bf00      	nop
 8103b6c:	58024400 	.word	0x58024400

08103b70 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8103b70:	b580      	push	{r7, lr}
 8103b72:	b084      	sub	sp, #16
 8103b74:	af00      	add	r7, sp, #0
 8103b76:	6078      	str	r0, [r7, #4]
 8103b78:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8103b7a:	2300      	movs	r3, #0
 8103b7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8103b7e:	4b54      	ldr	r3, [pc, #336]	; (8103cd0 <RCCEx_PLL2_Config+0x160>)
 8103b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103b82:	f003 0303 	and.w	r3, r3, #3
 8103b86:	2b03      	cmp	r3, #3
 8103b88:	d101      	bne.n	8103b8e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8103b8a:	2301      	movs	r3, #1
 8103b8c:	e09b      	b.n	8103cc6 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8103b8e:	4b50      	ldr	r3, [pc, #320]	; (8103cd0 <RCCEx_PLL2_Config+0x160>)
 8103b90:	681b      	ldr	r3, [r3, #0]
 8103b92:	4a4f      	ldr	r2, [pc, #316]	; (8103cd0 <RCCEx_PLL2_Config+0x160>)
 8103b94:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8103b98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103b9a:	f7fd fe8b 	bl	81018b4 <HAL_GetTick>
 8103b9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8103ba0:	e008      	b.n	8103bb4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8103ba2:	f7fd fe87 	bl	81018b4 <HAL_GetTick>
 8103ba6:	4602      	mov	r2, r0
 8103ba8:	68bb      	ldr	r3, [r7, #8]
 8103baa:	1ad3      	subs	r3, r2, r3
 8103bac:	2b02      	cmp	r3, #2
 8103bae:	d901      	bls.n	8103bb4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8103bb0:	2303      	movs	r3, #3
 8103bb2:	e088      	b.n	8103cc6 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8103bb4:	4b46      	ldr	r3, [pc, #280]	; (8103cd0 <RCCEx_PLL2_Config+0x160>)
 8103bb6:	681b      	ldr	r3, [r3, #0]
 8103bb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8103bbc:	2b00      	cmp	r3, #0
 8103bbe:	d1f0      	bne.n	8103ba2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8103bc0:	4b43      	ldr	r3, [pc, #268]	; (8103cd0 <RCCEx_PLL2_Config+0x160>)
 8103bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103bc4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8103bc8:	687b      	ldr	r3, [r7, #4]
 8103bca:	681b      	ldr	r3, [r3, #0]
 8103bcc:	031b      	lsls	r3, r3, #12
 8103bce:	4940      	ldr	r1, [pc, #256]	; (8103cd0 <RCCEx_PLL2_Config+0x160>)
 8103bd0:	4313      	orrs	r3, r2
 8103bd2:	628b      	str	r3, [r1, #40]	; 0x28
 8103bd4:	687b      	ldr	r3, [r7, #4]
 8103bd6:	685b      	ldr	r3, [r3, #4]
 8103bd8:	3b01      	subs	r3, #1
 8103bda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8103bde:	687b      	ldr	r3, [r7, #4]
 8103be0:	689b      	ldr	r3, [r3, #8]
 8103be2:	3b01      	subs	r3, #1
 8103be4:	025b      	lsls	r3, r3, #9
 8103be6:	b29b      	uxth	r3, r3
 8103be8:	431a      	orrs	r2, r3
 8103bea:	687b      	ldr	r3, [r7, #4]
 8103bec:	68db      	ldr	r3, [r3, #12]
 8103bee:	3b01      	subs	r3, #1
 8103bf0:	041b      	lsls	r3, r3, #16
 8103bf2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8103bf6:	431a      	orrs	r2, r3
 8103bf8:	687b      	ldr	r3, [r7, #4]
 8103bfa:	691b      	ldr	r3, [r3, #16]
 8103bfc:	3b01      	subs	r3, #1
 8103bfe:	061b      	lsls	r3, r3, #24
 8103c00:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8103c04:	4932      	ldr	r1, [pc, #200]	; (8103cd0 <RCCEx_PLL2_Config+0x160>)
 8103c06:	4313      	orrs	r3, r2
 8103c08:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8103c0a:	4b31      	ldr	r3, [pc, #196]	; (8103cd0 <RCCEx_PLL2_Config+0x160>)
 8103c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103c0e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8103c12:	687b      	ldr	r3, [r7, #4]
 8103c14:	695b      	ldr	r3, [r3, #20]
 8103c16:	492e      	ldr	r1, [pc, #184]	; (8103cd0 <RCCEx_PLL2_Config+0x160>)
 8103c18:	4313      	orrs	r3, r2
 8103c1a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8103c1c:	4b2c      	ldr	r3, [pc, #176]	; (8103cd0 <RCCEx_PLL2_Config+0x160>)
 8103c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103c20:	f023 0220 	bic.w	r2, r3, #32
 8103c24:	687b      	ldr	r3, [r7, #4]
 8103c26:	699b      	ldr	r3, [r3, #24]
 8103c28:	4929      	ldr	r1, [pc, #164]	; (8103cd0 <RCCEx_PLL2_Config+0x160>)
 8103c2a:	4313      	orrs	r3, r2
 8103c2c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8103c2e:	4b28      	ldr	r3, [pc, #160]	; (8103cd0 <RCCEx_PLL2_Config+0x160>)
 8103c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103c32:	4a27      	ldr	r2, [pc, #156]	; (8103cd0 <RCCEx_PLL2_Config+0x160>)
 8103c34:	f023 0310 	bic.w	r3, r3, #16
 8103c38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8103c3a:	4b25      	ldr	r3, [pc, #148]	; (8103cd0 <RCCEx_PLL2_Config+0x160>)
 8103c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103c3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8103c42:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8103c46:	687a      	ldr	r2, [r7, #4]
 8103c48:	69d2      	ldr	r2, [r2, #28]
 8103c4a:	00d2      	lsls	r2, r2, #3
 8103c4c:	4920      	ldr	r1, [pc, #128]	; (8103cd0 <RCCEx_PLL2_Config+0x160>)
 8103c4e:	4313      	orrs	r3, r2
 8103c50:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8103c52:	4b1f      	ldr	r3, [pc, #124]	; (8103cd0 <RCCEx_PLL2_Config+0x160>)
 8103c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103c56:	4a1e      	ldr	r2, [pc, #120]	; (8103cd0 <RCCEx_PLL2_Config+0x160>)
 8103c58:	f043 0310 	orr.w	r3, r3, #16
 8103c5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8103c5e:	683b      	ldr	r3, [r7, #0]
 8103c60:	2b00      	cmp	r3, #0
 8103c62:	d106      	bne.n	8103c72 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8103c64:	4b1a      	ldr	r3, [pc, #104]	; (8103cd0 <RCCEx_PLL2_Config+0x160>)
 8103c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103c68:	4a19      	ldr	r2, [pc, #100]	; (8103cd0 <RCCEx_PLL2_Config+0x160>)
 8103c6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8103c6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8103c70:	e00f      	b.n	8103c92 <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8103c72:	683b      	ldr	r3, [r7, #0]
 8103c74:	2b01      	cmp	r3, #1
 8103c76:	d106      	bne.n	8103c86 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8103c78:	4b15      	ldr	r3, [pc, #84]	; (8103cd0 <RCCEx_PLL2_Config+0x160>)
 8103c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103c7c:	4a14      	ldr	r2, [pc, #80]	; (8103cd0 <RCCEx_PLL2_Config+0x160>)
 8103c7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8103c82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8103c84:	e005      	b.n	8103c92 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8103c86:	4b12      	ldr	r3, [pc, #72]	; (8103cd0 <RCCEx_PLL2_Config+0x160>)
 8103c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103c8a:	4a11      	ldr	r2, [pc, #68]	; (8103cd0 <RCCEx_PLL2_Config+0x160>)
 8103c8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8103c90:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8103c92:	4b0f      	ldr	r3, [pc, #60]	; (8103cd0 <RCCEx_PLL2_Config+0x160>)
 8103c94:	681b      	ldr	r3, [r3, #0]
 8103c96:	4a0e      	ldr	r2, [pc, #56]	; (8103cd0 <RCCEx_PLL2_Config+0x160>)
 8103c98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8103c9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103c9e:	f7fd fe09 	bl	81018b4 <HAL_GetTick>
 8103ca2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8103ca4:	e008      	b.n	8103cb8 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8103ca6:	f7fd fe05 	bl	81018b4 <HAL_GetTick>
 8103caa:	4602      	mov	r2, r0
 8103cac:	68bb      	ldr	r3, [r7, #8]
 8103cae:	1ad3      	subs	r3, r2, r3
 8103cb0:	2b02      	cmp	r3, #2
 8103cb2:	d901      	bls.n	8103cb8 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8103cb4:	2303      	movs	r3, #3
 8103cb6:	e006      	b.n	8103cc6 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8103cb8:	4b05      	ldr	r3, [pc, #20]	; (8103cd0 <RCCEx_PLL2_Config+0x160>)
 8103cba:	681b      	ldr	r3, [r3, #0]
 8103cbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8103cc0:	2b00      	cmp	r3, #0
 8103cc2:	d0f0      	beq.n	8103ca6 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8103cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8103cc6:	4618      	mov	r0, r3
 8103cc8:	3710      	adds	r7, #16
 8103cca:	46bd      	mov	sp, r7
 8103ccc:	bd80      	pop	{r7, pc}
 8103cce:	bf00      	nop
 8103cd0:	58024400 	.word	0x58024400

08103cd4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8103cd4:	b580      	push	{r7, lr}
 8103cd6:	b084      	sub	sp, #16
 8103cd8:	af00      	add	r7, sp, #0
 8103cda:	6078      	str	r0, [r7, #4]
 8103cdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8103cde:	2300      	movs	r3, #0
 8103ce0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8103ce2:	4b54      	ldr	r3, [pc, #336]	; (8103e34 <RCCEx_PLL3_Config+0x160>)
 8103ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103ce6:	f003 0303 	and.w	r3, r3, #3
 8103cea:	2b03      	cmp	r3, #3
 8103cec:	d101      	bne.n	8103cf2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8103cee:	2301      	movs	r3, #1
 8103cf0:	e09b      	b.n	8103e2a <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8103cf2:	4b50      	ldr	r3, [pc, #320]	; (8103e34 <RCCEx_PLL3_Config+0x160>)
 8103cf4:	681b      	ldr	r3, [r3, #0]
 8103cf6:	4a4f      	ldr	r2, [pc, #316]	; (8103e34 <RCCEx_PLL3_Config+0x160>)
 8103cf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8103cfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103cfe:	f7fd fdd9 	bl	81018b4 <HAL_GetTick>
 8103d02:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8103d04:	e008      	b.n	8103d18 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8103d06:	f7fd fdd5 	bl	81018b4 <HAL_GetTick>
 8103d0a:	4602      	mov	r2, r0
 8103d0c:	68bb      	ldr	r3, [r7, #8]
 8103d0e:	1ad3      	subs	r3, r2, r3
 8103d10:	2b02      	cmp	r3, #2
 8103d12:	d901      	bls.n	8103d18 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8103d14:	2303      	movs	r3, #3
 8103d16:	e088      	b.n	8103e2a <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8103d18:	4b46      	ldr	r3, [pc, #280]	; (8103e34 <RCCEx_PLL3_Config+0x160>)
 8103d1a:	681b      	ldr	r3, [r3, #0]
 8103d1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8103d20:	2b00      	cmp	r3, #0
 8103d22:	d1f0      	bne.n	8103d06 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8103d24:	4b43      	ldr	r3, [pc, #268]	; (8103e34 <RCCEx_PLL3_Config+0x160>)
 8103d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103d28:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8103d2c:	687b      	ldr	r3, [r7, #4]
 8103d2e:	681b      	ldr	r3, [r3, #0]
 8103d30:	051b      	lsls	r3, r3, #20
 8103d32:	4940      	ldr	r1, [pc, #256]	; (8103e34 <RCCEx_PLL3_Config+0x160>)
 8103d34:	4313      	orrs	r3, r2
 8103d36:	628b      	str	r3, [r1, #40]	; 0x28
 8103d38:	687b      	ldr	r3, [r7, #4]
 8103d3a:	685b      	ldr	r3, [r3, #4]
 8103d3c:	3b01      	subs	r3, #1
 8103d3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8103d42:	687b      	ldr	r3, [r7, #4]
 8103d44:	689b      	ldr	r3, [r3, #8]
 8103d46:	3b01      	subs	r3, #1
 8103d48:	025b      	lsls	r3, r3, #9
 8103d4a:	b29b      	uxth	r3, r3
 8103d4c:	431a      	orrs	r2, r3
 8103d4e:	687b      	ldr	r3, [r7, #4]
 8103d50:	68db      	ldr	r3, [r3, #12]
 8103d52:	3b01      	subs	r3, #1
 8103d54:	041b      	lsls	r3, r3, #16
 8103d56:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8103d5a:	431a      	orrs	r2, r3
 8103d5c:	687b      	ldr	r3, [r7, #4]
 8103d5e:	691b      	ldr	r3, [r3, #16]
 8103d60:	3b01      	subs	r3, #1
 8103d62:	061b      	lsls	r3, r3, #24
 8103d64:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8103d68:	4932      	ldr	r1, [pc, #200]	; (8103e34 <RCCEx_PLL3_Config+0x160>)
 8103d6a:	4313      	orrs	r3, r2
 8103d6c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8103d6e:	4b31      	ldr	r3, [pc, #196]	; (8103e34 <RCCEx_PLL3_Config+0x160>)
 8103d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103d72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8103d76:	687b      	ldr	r3, [r7, #4]
 8103d78:	695b      	ldr	r3, [r3, #20]
 8103d7a:	492e      	ldr	r1, [pc, #184]	; (8103e34 <RCCEx_PLL3_Config+0x160>)
 8103d7c:	4313      	orrs	r3, r2
 8103d7e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8103d80:	4b2c      	ldr	r3, [pc, #176]	; (8103e34 <RCCEx_PLL3_Config+0x160>)
 8103d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103d84:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8103d88:	687b      	ldr	r3, [r7, #4]
 8103d8a:	699b      	ldr	r3, [r3, #24]
 8103d8c:	4929      	ldr	r1, [pc, #164]	; (8103e34 <RCCEx_PLL3_Config+0x160>)
 8103d8e:	4313      	orrs	r3, r2
 8103d90:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8103d92:	4b28      	ldr	r3, [pc, #160]	; (8103e34 <RCCEx_PLL3_Config+0x160>)
 8103d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103d96:	4a27      	ldr	r2, [pc, #156]	; (8103e34 <RCCEx_PLL3_Config+0x160>)
 8103d98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8103d9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8103d9e:	4b25      	ldr	r3, [pc, #148]	; (8103e34 <RCCEx_PLL3_Config+0x160>)
 8103da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103da2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8103da6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8103daa:	687a      	ldr	r2, [r7, #4]
 8103dac:	69d2      	ldr	r2, [r2, #28]
 8103dae:	00d2      	lsls	r2, r2, #3
 8103db0:	4920      	ldr	r1, [pc, #128]	; (8103e34 <RCCEx_PLL3_Config+0x160>)
 8103db2:	4313      	orrs	r3, r2
 8103db4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8103db6:	4b1f      	ldr	r3, [pc, #124]	; (8103e34 <RCCEx_PLL3_Config+0x160>)
 8103db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103dba:	4a1e      	ldr	r2, [pc, #120]	; (8103e34 <RCCEx_PLL3_Config+0x160>)
 8103dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8103dc0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8103dc2:	683b      	ldr	r3, [r7, #0]
 8103dc4:	2b00      	cmp	r3, #0
 8103dc6:	d106      	bne.n	8103dd6 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8103dc8:	4b1a      	ldr	r3, [pc, #104]	; (8103e34 <RCCEx_PLL3_Config+0x160>)
 8103dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103dcc:	4a19      	ldr	r2, [pc, #100]	; (8103e34 <RCCEx_PLL3_Config+0x160>)
 8103dce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8103dd2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8103dd4:	e00f      	b.n	8103df6 <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8103dd6:	683b      	ldr	r3, [r7, #0]
 8103dd8:	2b01      	cmp	r3, #1
 8103dda:	d106      	bne.n	8103dea <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8103ddc:	4b15      	ldr	r3, [pc, #84]	; (8103e34 <RCCEx_PLL3_Config+0x160>)
 8103dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103de0:	4a14      	ldr	r2, [pc, #80]	; (8103e34 <RCCEx_PLL3_Config+0x160>)
 8103de2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8103de6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8103de8:	e005      	b.n	8103df6 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8103dea:	4b12      	ldr	r3, [pc, #72]	; (8103e34 <RCCEx_PLL3_Config+0x160>)
 8103dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103dee:	4a11      	ldr	r2, [pc, #68]	; (8103e34 <RCCEx_PLL3_Config+0x160>)
 8103df0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8103df4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8103df6:	4b0f      	ldr	r3, [pc, #60]	; (8103e34 <RCCEx_PLL3_Config+0x160>)
 8103df8:	681b      	ldr	r3, [r3, #0]
 8103dfa:	4a0e      	ldr	r2, [pc, #56]	; (8103e34 <RCCEx_PLL3_Config+0x160>)
 8103dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8103e00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103e02:	f7fd fd57 	bl	81018b4 <HAL_GetTick>
 8103e06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8103e08:	e008      	b.n	8103e1c <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8103e0a:	f7fd fd53 	bl	81018b4 <HAL_GetTick>
 8103e0e:	4602      	mov	r2, r0
 8103e10:	68bb      	ldr	r3, [r7, #8]
 8103e12:	1ad3      	subs	r3, r2, r3
 8103e14:	2b02      	cmp	r3, #2
 8103e16:	d901      	bls.n	8103e1c <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8103e18:	2303      	movs	r3, #3
 8103e1a:	e006      	b.n	8103e2a <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8103e1c:	4b05      	ldr	r3, [pc, #20]	; (8103e34 <RCCEx_PLL3_Config+0x160>)
 8103e1e:	681b      	ldr	r3, [r3, #0]
 8103e20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8103e24:	2b00      	cmp	r3, #0
 8103e26:	d0f0      	beq.n	8103e0a <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8103e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8103e2a:	4618      	mov	r0, r3
 8103e2c:	3710      	adds	r7, #16
 8103e2e:	46bd      	mov	sp, r7
 8103e30:	bd80      	pop	{r7, pc}
 8103e32:	bf00      	nop
 8103e34:	58024400 	.word	0x58024400

08103e38 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8103e38:	b580      	push	{r7, lr}
 8103e3a:	b084      	sub	sp, #16
 8103e3c:	af00      	add	r7, sp, #0
 8103e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8103e40:	2301      	movs	r3, #1
 8103e42:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8103e44:	687b      	ldr	r3, [r7, #4]
 8103e46:	2b00      	cmp	r3, #0
 8103e48:	d069      	beq.n	8103f1e <HAL_RTC_Init+0xe6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8103e4a:	687b      	ldr	r3, [r7, #4]
 8103e4c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8103e50:	b2db      	uxtb	r3, r3
 8103e52:	2b00      	cmp	r3, #0
 8103e54:	d106      	bne.n	8103e64 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8103e56:	687b      	ldr	r3, [r7, #4]
 8103e58:	2200      	movs	r2, #0
 8103e5a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8103e5e:	6878      	ldr	r0, [r7, #4]
 8103e60:	f7fd fb02 	bl	8101468 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8103e64:	687b      	ldr	r3, [r7, #4]
 8103e66:	2202      	movs	r2, #2
 8103e68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8103e6c:	687b      	ldr	r3, [r7, #4]
 8103e6e:	681b      	ldr	r3, [r3, #0]
 8103e70:	22ca      	movs	r2, #202	; 0xca
 8103e72:	625a      	str	r2, [r3, #36]	; 0x24
 8103e74:	687b      	ldr	r3, [r7, #4]
 8103e76:	681b      	ldr	r3, [r3, #0]
 8103e78:	2253      	movs	r2, #83	; 0x53
 8103e7a:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8103e7c:	6878      	ldr	r0, [r7, #4]
 8103e7e:	f000 fa46 	bl	810430e <RTC_EnterInitMode>
 8103e82:	4603      	mov	r3, r0
 8103e84:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8103e86:	7bfb      	ldrb	r3, [r7, #15]
 8103e88:	2b00      	cmp	r3, #0
 8103e8a:	d13d      	bne.n	8103f08 <HAL_RTC_Init+0xd0>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8103e8c:	687b      	ldr	r3, [r7, #4]
 8103e8e:	681b      	ldr	r3, [r3, #0]
 8103e90:	689b      	ldr	r3, [r3, #8]
 8103e92:	687a      	ldr	r2, [r7, #4]
 8103e94:	6812      	ldr	r2, [r2, #0]
 8103e96:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8103e9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8103e9e:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8103ea0:	687b      	ldr	r3, [r7, #4]
 8103ea2:	681b      	ldr	r3, [r3, #0]
 8103ea4:	6899      	ldr	r1, [r3, #8]
 8103ea6:	687b      	ldr	r3, [r7, #4]
 8103ea8:	685a      	ldr	r2, [r3, #4]
 8103eaa:	687b      	ldr	r3, [r7, #4]
 8103eac:	691b      	ldr	r3, [r3, #16]
 8103eae:	431a      	orrs	r2, r3
 8103eb0:	687b      	ldr	r3, [r7, #4]
 8103eb2:	699b      	ldr	r3, [r3, #24]
 8103eb4:	431a      	orrs	r2, r3
 8103eb6:	687b      	ldr	r3, [r7, #4]
 8103eb8:	681b      	ldr	r3, [r3, #0]
 8103eba:	430a      	orrs	r2, r1
 8103ebc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8103ebe:	687b      	ldr	r3, [r7, #4]
 8103ec0:	689b      	ldr	r3, [r3, #8]
 8103ec2:	0419      	lsls	r1, r3, #16
 8103ec4:	687b      	ldr	r3, [r7, #4]
 8103ec6:	68da      	ldr	r2, [r3, #12]
 8103ec8:	687b      	ldr	r3, [r7, #4]
 8103eca:	681b      	ldr	r3, [r3, #0]
 8103ecc:	430a      	orrs	r2, r1
 8103ece:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8103ed0:	6878      	ldr	r0, [r7, #4]
 8103ed2:	f000 fa4f 	bl	8104374 <RTC_ExitInitMode>
 8103ed6:	4603      	mov	r3, r0
 8103ed8:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 8103eda:	7bfb      	ldrb	r3, [r7, #15]
 8103edc:	2b00      	cmp	r3, #0
 8103ede:	d113      	bne.n	8103f08 <HAL_RTC_Init+0xd0>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8103ee0:	687b      	ldr	r3, [r7, #4]
 8103ee2:	681b      	ldr	r3, [r3, #0]
 8103ee4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8103ee6:	687b      	ldr	r3, [r7, #4]
 8103ee8:	681b      	ldr	r3, [r3, #0]
 8103eea:	f022 0203 	bic.w	r2, r2, #3
 8103eee:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8103ef0:	687b      	ldr	r3, [r7, #4]
 8103ef2:	681b      	ldr	r3, [r3, #0]
 8103ef4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8103ef6:	687b      	ldr	r3, [r7, #4]
 8103ef8:	69da      	ldr	r2, [r3, #28]
 8103efa:	687b      	ldr	r3, [r7, #4]
 8103efc:	695b      	ldr	r3, [r3, #20]
 8103efe:	431a      	orrs	r2, r3
 8103f00:	687b      	ldr	r3, [r7, #4]
 8103f02:	681b      	ldr	r3, [r3, #0]
 8103f04:	430a      	orrs	r2, r1
 8103f06:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8103f08:	687b      	ldr	r3, [r7, #4]
 8103f0a:	681b      	ldr	r3, [r3, #0]
 8103f0c:	22ff      	movs	r2, #255	; 0xff
 8103f0e:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8103f10:	7bfb      	ldrb	r3, [r7, #15]
 8103f12:	2b00      	cmp	r3, #0
 8103f14:	d103      	bne.n	8103f1e <HAL_RTC_Init+0xe6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8103f16:	687b      	ldr	r3, [r7, #4]
 8103f18:	2201      	movs	r2, #1
 8103f1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8103f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8103f20:	4618      	mov	r0, r3
 8103f22:	3710      	adds	r7, #16
 8103f24:	46bd      	mov	sp, r7
 8103f26:	bd80      	pop	{r7, pc}

08103f28 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8103f28:	b590      	push	{r4, r7, lr}
 8103f2a:	b087      	sub	sp, #28
 8103f2c:	af00      	add	r7, sp, #0
 8103f2e:	60f8      	str	r0, [r7, #12]
 8103f30:	60b9      	str	r1, [r7, #8]
 8103f32:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8103f34:	68fb      	ldr	r3, [r7, #12]
 8103f36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8103f3a:	2b01      	cmp	r3, #1
 8103f3c:	d101      	bne.n	8103f42 <HAL_RTC_SetTime+0x1a>
 8103f3e:	2302      	movs	r3, #2
 8103f40:	e08b      	b.n	810405a <HAL_RTC_SetTime+0x132>
 8103f42:	68fb      	ldr	r3, [r7, #12]
 8103f44:	2201      	movs	r2, #1
 8103f46:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8103f4a:	68fb      	ldr	r3, [r7, #12]
 8103f4c:	2202      	movs	r2, #2
 8103f4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8103f52:	68fb      	ldr	r3, [r7, #12]
 8103f54:	681b      	ldr	r3, [r3, #0]
 8103f56:	22ca      	movs	r2, #202	; 0xca
 8103f58:	625a      	str	r2, [r3, #36]	; 0x24
 8103f5a:	68fb      	ldr	r3, [r7, #12]
 8103f5c:	681b      	ldr	r3, [r3, #0]
 8103f5e:	2253      	movs	r2, #83	; 0x53
 8103f60:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8103f62:	68f8      	ldr	r0, [r7, #12]
 8103f64:	f000 f9d3 	bl	810430e <RTC_EnterInitMode>
 8103f68:	4603      	mov	r3, r0
 8103f6a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8103f6c:	7cfb      	ldrb	r3, [r7, #19]
 8103f6e:	2b00      	cmp	r3, #0
 8103f70:	d163      	bne.n	810403a <HAL_RTC_SetTime+0x112>
  {
    if(Format == RTC_FORMAT_BIN)
 8103f72:	687b      	ldr	r3, [r7, #4]
 8103f74:	2b00      	cmp	r3, #0
 8103f76:	d126      	bne.n	8103fc6 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8103f78:	68fb      	ldr	r3, [r7, #12]
 8103f7a:	681b      	ldr	r3, [r3, #0]
 8103f7c:	689b      	ldr	r3, [r3, #8]
 8103f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103f82:	2b00      	cmp	r3, #0
 8103f84:	d102      	bne.n	8103f8c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8103f86:	68bb      	ldr	r3, [r7, #8]
 8103f88:	2200      	movs	r2, #0
 8103f8a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8103f8c:	68bb      	ldr	r3, [r7, #8]
 8103f8e:	781b      	ldrb	r3, [r3, #0]
 8103f90:	4618      	mov	r0, r3
 8103f92:	f000 fa2d 	bl	81043f0 <RTC_ByteToBcd2>
 8103f96:	4603      	mov	r3, r0
 8103f98:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8103f9a:	68bb      	ldr	r3, [r7, #8]
 8103f9c:	785b      	ldrb	r3, [r3, #1]
 8103f9e:	4618      	mov	r0, r3
 8103fa0:	f000 fa26 	bl	81043f0 <RTC_ByteToBcd2>
 8103fa4:	4603      	mov	r3, r0
 8103fa6:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8103fa8:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8103faa:	68bb      	ldr	r3, [r7, #8]
 8103fac:	789b      	ldrb	r3, [r3, #2]
 8103fae:	4618      	mov	r0, r3
 8103fb0:	f000 fa1e 	bl	81043f0 <RTC_ByteToBcd2>
 8103fb4:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8103fb6:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8103fba:	68bb      	ldr	r3, [r7, #8]
 8103fbc:	78db      	ldrb	r3, [r3, #3]
 8103fbe:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8103fc0:	4313      	orrs	r3, r2
 8103fc2:	617b      	str	r3, [r7, #20]
 8103fc4:	e018      	b.n	8103ff8 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8103fc6:	68fb      	ldr	r3, [r7, #12]
 8103fc8:	681b      	ldr	r3, [r3, #0]
 8103fca:	689b      	ldr	r3, [r3, #8]
 8103fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103fd0:	2b00      	cmp	r3, #0
 8103fd2:	d102      	bne.n	8103fda <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8103fd4:	68bb      	ldr	r3, [r7, #8]
 8103fd6:	2200      	movs	r2, #0
 8103fd8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8103fda:	68bb      	ldr	r3, [r7, #8]
 8103fdc:	781b      	ldrb	r3, [r3, #0]
 8103fde:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8103fe0:	68bb      	ldr	r3, [r7, #8]
 8103fe2:	785b      	ldrb	r3, [r3, #1]
 8103fe4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8103fe6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8103fe8:	68ba      	ldr	r2, [r7, #8]
 8103fea:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8103fec:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8103fee:	68bb      	ldr	r3, [r7, #8]
 8103ff0:	78db      	ldrb	r3, [r3, #3]
 8103ff2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8103ff4:	4313      	orrs	r3, r2
 8103ff6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8103ff8:	68fb      	ldr	r3, [r7, #12]
 8103ffa:	681a      	ldr	r2, [r3, #0]
 8103ffc:	697b      	ldr	r3, [r7, #20]
 8103ffe:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8104002:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8104006:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8104008:	68fb      	ldr	r3, [r7, #12]
 810400a:	681b      	ldr	r3, [r3, #0]
 810400c:	689a      	ldr	r2, [r3, #8]
 810400e:	68fb      	ldr	r3, [r7, #12]
 8104010:	681b      	ldr	r3, [r3, #0]
 8104012:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8104016:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8104018:	68fb      	ldr	r3, [r7, #12]
 810401a:	681b      	ldr	r3, [r3, #0]
 810401c:	6899      	ldr	r1, [r3, #8]
 810401e:	68bb      	ldr	r3, [r7, #8]
 8104020:	68da      	ldr	r2, [r3, #12]
 8104022:	68bb      	ldr	r3, [r7, #8]
 8104024:	691b      	ldr	r3, [r3, #16]
 8104026:	431a      	orrs	r2, r3
 8104028:	68fb      	ldr	r3, [r7, #12]
 810402a:	681b      	ldr	r3, [r3, #0]
 810402c:	430a      	orrs	r2, r1
 810402e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8104030:	68f8      	ldr	r0, [r7, #12]
 8104032:	f000 f99f 	bl	8104374 <RTC_ExitInitMode>
 8104036:	4603      	mov	r3, r0
 8104038:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 810403a:	68fb      	ldr	r3, [r7, #12]
 810403c:	681b      	ldr	r3, [r3, #0]
 810403e:	22ff      	movs	r2, #255	; 0xff
 8104040:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8104042:	7cfb      	ldrb	r3, [r7, #19]
 8104044:	2b00      	cmp	r3, #0
 8104046:	d103      	bne.n	8104050 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8104048:	68fb      	ldr	r3, [r7, #12]
 810404a:	2201      	movs	r2, #1
 810404c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8104050:	68fb      	ldr	r3, [r7, #12]
 8104052:	2200      	movs	r2, #0
 8104054:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8104058:	7cfb      	ldrb	r3, [r7, #19]
}
 810405a:	4618      	mov	r0, r3
 810405c:	371c      	adds	r7, #28
 810405e:	46bd      	mov	sp, r7
 8104060:	bd90      	pop	{r4, r7, pc}

08104062 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8104062:	b580      	push	{r7, lr}
 8104064:	b086      	sub	sp, #24
 8104066:	af00      	add	r7, sp, #0
 8104068:	60f8      	str	r0, [r7, #12]
 810406a:	60b9      	str	r1, [r7, #8]
 810406c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 810406e:	68fb      	ldr	r3, [r7, #12]
 8104070:	681b      	ldr	r3, [r3, #0]
 8104072:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8104074:	68bb      	ldr	r3, [r7, #8]
 8104076:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8104078:	68fb      	ldr	r3, [r7, #12]
 810407a:	681b      	ldr	r3, [r3, #0]
 810407c:	691b      	ldr	r3, [r3, #16]
 810407e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8104082:	68bb      	ldr	r3, [r7, #8]
 8104084:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8104086:	68fb      	ldr	r3, [r7, #12]
 8104088:	681b      	ldr	r3, [r3, #0]
 810408a:	681b      	ldr	r3, [r3, #0]
 810408c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8104090:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8104094:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8104096:	697b      	ldr	r3, [r7, #20]
 8104098:	0c1b      	lsrs	r3, r3, #16
 810409a:	b2db      	uxtb	r3, r3
 810409c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81040a0:	b2da      	uxtb	r2, r3
 81040a2:	68bb      	ldr	r3, [r7, #8]
 81040a4:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 81040a6:	697b      	ldr	r3, [r7, #20]
 81040a8:	0a1b      	lsrs	r3, r3, #8
 81040aa:	b2db      	uxtb	r3, r3
 81040ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81040b0:	b2da      	uxtb	r2, r3
 81040b2:	68bb      	ldr	r3, [r7, #8]
 81040b4:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 81040b6:	697b      	ldr	r3, [r7, #20]
 81040b8:	b2db      	uxtb	r3, r3
 81040ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81040be:	b2da      	uxtb	r2, r3
 81040c0:	68bb      	ldr	r3, [r7, #8]
 81040c2:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 81040c4:	697b      	ldr	r3, [r7, #20]
 81040c6:	0d9b      	lsrs	r3, r3, #22
 81040c8:	b2db      	uxtb	r3, r3
 81040ca:	f003 0301 	and.w	r3, r3, #1
 81040ce:	b2da      	uxtb	r2, r3
 81040d0:	68bb      	ldr	r3, [r7, #8]
 81040d2:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 81040d4:	687b      	ldr	r3, [r7, #4]
 81040d6:	2b00      	cmp	r3, #0
 81040d8:	d11a      	bne.n	8104110 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 81040da:	68bb      	ldr	r3, [r7, #8]
 81040dc:	781b      	ldrb	r3, [r3, #0]
 81040de:	4618      	mov	r0, r3
 81040e0:	f000 f9a6 	bl	8104430 <RTC_Bcd2ToByte>
 81040e4:	4603      	mov	r3, r0
 81040e6:	461a      	mov	r2, r3
 81040e8:	68bb      	ldr	r3, [r7, #8]
 81040ea:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 81040ec:	68bb      	ldr	r3, [r7, #8]
 81040ee:	785b      	ldrb	r3, [r3, #1]
 81040f0:	4618      	mov	r0, r3
 81040f2:	f000 f99d 	bl	8104430 <RTC_Bcd2ToByte>
 81040f6:	4603      	mov	r3, r0
 81040f8:	461a      	mov	r2, r3
 81040fa:	68bb      	ldr	r3, [r7, #8]
 81040fc:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 81040fe:	68bb      	ldr	r3, [r7, #8]
 8104100:	789b      	ldrb	r3, [r3, #2]
 8104102:	4618      	mov	r0, r3
 8104104:	f000 f994 	bl	8104430 <RTC_Bcd2ToByte>
 8104108:	4603      	mov	r3, r0
 810410a:	461a      	mov	r2, r3
 810410c:	68bb      	ldr	r3, [r7, #8]
 810410e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8104110:	2300      	movs	r3, #0
}
 8104112:	4618      	mov	r0, r3
 8104114:	3718      	adds	r7, #24
 8104116:	46bd      	mov	sp, r7
 8104118:	bd80      	pop	{r7, pc}

0810411a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 810411a:	b590      	push	{r4, r7, lr}
 810411c:	b087      	sub	sp, #28
 810411e:	af00      	add	r7, sp, #0
 8104120:	60f8      	str	r0, [r7, #12]
 8104122:	60b9      	str	r1, [r7, #8]
 8104124:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8104126:	68fb      	ldr	r3, [r7, #12]
 8104128:	f893 3020 	ldrb.w	r3, [r3, #32]
 810412c:	2b01      	cmp	r3, #1
 810412e:	d101      	bne.n	8104134 <HAL_RTC_SetDate+0x1a>
 8104130:	2302      	movs	r3, #2
 8104132:	e075      	b.n	8104220 <HAL_RTC_SetDate+0x106>
 8104134:	68fb      	ldr	r3, [r7, #12]
 8104136:	2201      	movs	r2, #1
 8104138:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 810413c:	68fb      	ldr	r3, [r7, #12]
 810413e:	2202      	movs	r2, #2
 8104140:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8104144:	687b      	ldr	r3, [r7, #4]
 8104146:	2b00      	cmp	r3, #0
 8104148:	d10e      	bne.n	8104168 <HAL_RTC_SetDate+0x4e>
 810414a:	68bb      	ldr	r3, [r7, #8]
 810414c:	785b      	ldrb	r3, [r3, #1]
 810414e:	f003 0310 	and.w	r3, r3, #16
 8104152:	2b00      	cmp	r3, #0
 8104154:	d008      	beq.n	8104168 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8104156:	68bb      	ldr	r3, [r7, #8]
 8104158:	785b      	ldrb	r3, [r3, #1]
 810415a:	f023 0310 	bic.w	r3, r3, #16
 810415e:	b2db      	uxtb	r3, r3
 8104160:	330a      	adds	r3, #10
 8104162:	b2da      	uxtb	r2, r3
 8104164:	68bb      	ldr	r3, [r7, #8]
 8104166:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8104168:	687b      	ldr	r3, [r7, #4]
 810416a:	2b00      	cmp	r3, #0
 810416c:	d11c      	bne.n	81041a8 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 810416e:	68bb      	ldr	r3, [r7, #8]
 8104170:	78db      	ldrb	r3, [r3, #3]
 8104172:	4618      	mov	r0, r3
 8104174:	f000 f93c 	bl	81043f0 <RTC_ByteToBcd2>
 8104178:	4603      	mov	r3, r0
 810417a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 810417c:	68bb      	ldr	r3, [r7, #8]
 810417e:	785b      	ldrb	r3, [r3, #1]
 8104180:	4618      	mov	r0, r3
 8104182:	f000 f935 	bl	81043f0 <RTC_ByteToBcd2>
 8104186:	4603      	mov	r3, r0
 8104188:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 810418a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 810418c:	68bb      	ldr	r3, [r7, #8]
 810418e:	789b      	ldrb	r3, [r3, #2]
 8104190:	4618      	mov	r0, r3
 8104192:	f000 f92d 	bl	81043f0 <RTC_ByteToBcd2>
 8104196:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8104198:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 810419c:	68bb      	ldr	r3, [r7, #8]
 810419e:	781b      	ldrb	r3, [r3, #0]
 81041a0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 81041a2:	4313      	orrs	r3, r2
 81041a4:	617b      	str	r3, [r7, #20]
 81041a6:	e00e      	b.n	81041c6 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 81041a8:	68bb      	ldr	r3, [r7, #8]
 81041aa:	78db      	ldrb	r3, [r3, #3]
 81041ac:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 81041ae:	68bb      	ldr	r3, [r7, #8]
 81041b0:	785b      	ldrb	r3, [r3, #1]
 81041b2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 81041b4:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 81041b6:	68ba      	ldr	r2, [r7, #8]
 81041b8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 81041ba:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 81041bc:	68bb      	ldr	r3, [r7, #8]
 81041be:	781b      	ldrb	r3, [r3, #0]
 81041c0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 81041c2:	4313      	orrs	r3, r2
 81041c4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 81041c6:	68fb      	ldr	r3, [r7, #12]
 81041c8:	681b      	ldr	r3, [r3, #0]
 81041ca:	22ca      	movs	r2, #202	; 0xca
 81041cc:	625a      	str	r2, [r3, #36]	; 0x24
 81041ce:	68fb      	ldr	r3, [r7, #12]
 81041d0:	681b      	ldr	r3, [r3, #0]
 81041d2:	2253      	movs	r2, #83	; 0x53
 81041d4:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 81041d6:	68f8      	ldr	r0, [r7, #12]
 81041d8:	f000 f899 	bl	810430e <RTC_EnterInitMode>
 81041dc:	4603      	mov	r3, r0
 81041de:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 81041e0:	7cfb      	ldrb	r3, [r7, #19]
 81041e2:	2b00      	cmp	r3, #0
 81041e4:	d10c      	bne.n	8104200 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 81041e6:	68fb      	ldr	r3, [r7, #12]
 81041e8:	681a      	ldr	r2, [r3, #0]
 81041ea:	697b      	ldr	r3, [r7, #20]
 81041ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 81041f0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 81041f4:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 81041f6:	68f8      	ldr	r0, [r7, #12]
 81041f8:	f000 f8bc 	bl	8104374 <RTC_ExitInitMode>
 81041fc:	4603      	mov	r3, r0
 81041fe:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8104200:	68fb      	ldr	r3, [r7, #12]
 8104202:	681b      	ldr	r3, [r3, #0]
 8104204:	22ff      	movs	r2, #255	; 0xff
 8104206:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8104208:	7cfb      	ldrb	r3, [r7, #19]
 810420a:	2b00      	cmp	r3, #0
 810420c:	d103      	bne.n	8104216 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 810420e:	68fb      	ldr	r3, [r7, #12]
 8104210:	2201      	movs	r2, #1
 8104212:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8104216:	68fb      	ldr	r3, [r7, #12]
 8104218:	2200      	movs	r2, #0
 810421a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 810421e:	7cfb      	ldrb	r3, [r7, #19]


}
 8104220:	4618      	mov	r0, r3
 8104222:	371c      	adds	r7, #28
 8104224:	46bd      	mov	sp, r7
 8104226:	bd90      	pop	{r4, r7, pc}

08104228 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8104228:	b580      	push	{r7, lr}
 810422a:	b086      	sub	sp, #24
 810422c:	af00      	add	r7, sp, #0
 810422e:	60f8      	str	r0, [r7, #12]
 8104230:	60b9      	str	r1, [r7, #8]
 8104232:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8104234:	68fb      	ldr	r3, [r7, #12]
 8104236:	681b      	ldr	r3, [r3, #0]
 8104238:	685b      	ldr	r3, [r3, #4]
 810423a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 810423e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8104242:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8104244:	697b      	ldr	r3, [r7, #20]
 8104246:	0c1b      	lsrs	r3, r3, #16
 8104248:	b2da      	uxtb	r2, r3
 810424a:	68bb      	ldr	r3, [r7, #8]
 810424c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 810424e:	697b      	ldr	r3, [r7, #20]
 8104250:	0a1b      	lsrs	r3, r3, #8
 8104252:	b2db      	uxtb	r3, r3
 8104254:	f003 031f 	and.w	r3, r3, #31
 8104258:	b2da      	uxtb	r2, r3
 810425a:	68bb      	ldr	r3, [r7, #8]
 810425c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 810425e:	697b      	ldr	r3, [r7, #20]
 8104260:	b2db      	uxtb	r3, r3
 8104262:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8104266:	b2da      	uxtb	r2, r3
 8104268:	68bb      	ldr	r3, [r7, #8]
 810426a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 810426c:	697b      	ldr	r3, [r7, #20]
 810426e:	0b5b      	lsrs	r3, r3, #13
 8104270:	b2db      	uxtb	r3, r3
 8104272:	f003 0307 	and.w	r3, r3, #7
 8104276:	b2da      	uxtb	r2, r3
 8104278:	68bb      	ldr	r3, [r7, #8]
 810427a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 810427c:	687b      	ldr	r3, [r7, #4]
 810427e:	2b00      	cmp	r3, #0
 8104280:	d11a      	bne.n	81042b8 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8104282:	68bb      	ldr	r3, [r7, #8]
 8104284:	78db      	ldrb	r3, [r3, #3]
 8104286:	4618      	mov	r0, r3
 8104288:	f000 f8d2 	bl	8104430 <RTC_Bcd2ToByte>
 810428c:	4603      	mov	r3, r0
 810428e:	461a      	mov	r2, r3
 8104290:	68bb      	ldr	r3, [r7, #8]
 8104292:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8104294:	68bb      	ldr	r3, [r7, #8]
 8104296:	785b      	ldrb	r3, [r3, #1]
 8104298:	4618      	mov	r0, r3
 810429a:	f000 f8c9 	bl	8104430 <RTC_Bcd2ToByte>
 810429e:	4603      	mov	r3, r0
 81042a0:	461a      	mov	r2, r3
 81042a2:	68bb      	ldr	r3, [r7, #8]
 81042a4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 81042a6:	68bb      	ldr	r3, [r7, #8]
 81042a8:	789b      	ldrb	r3, [r3, #2]
 81042aa:	4618      	mov	r0, r3
 81042ac:	f000 f8c0 	bl	8104430 <RTC_Bcd2ToByte>
 81042b0:	4603      	mov	r3, r0
 81042b2:	461a      	mov	r2, r3
 81042b4:	68bb      	ldr	r3, [r7, #8]
 81042b6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 81042b8:	2300      	movs	r3, #0
}
 81042ba:	4618      	mov	r0, r3
 81042bc:	3718      	adds	r7, #24
 81042be:	46bd      	mov	sp, r7
 81042c0:	bd80      	pop	{r7, pc}

081042c2 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 81042c2:	b580      	push	{r7, lr}
 81042c4:	b084      	sub	sp, #16
 81042c6:	af00      	add	r7, sp, #0
 81042c8:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 81042ca:	687b      	ldr	r3, [r7, #4]
 81042cc:	681b      	ldr	r3, [r3, #0]
 81042ce:	68da      	ldr	r2, [r3, #12]
 81042d0:	687b      	ldr	r3, [r7, #4]
 81042d2:	681b      	ldr	r3, [r3, #0]
 81042d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 81042d8:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 81042da:	f7fd faeb 	bl	81018b4 <HAL_GetTick>
 81042de:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 81042e0:	e009      	b.n	81042f6 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 81042e2:	f7fd fae7 	bl	81018b4 <HAL_GetTick>
 81042e6:	4602      	mov	r2, r0
 81042e8:	68fb      	ldr	r3, [r7, #12]
 81042ea:	1ad3      	subs	r3, r2, r3
 81042ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 81042f0:	d901      	bls.n	81042f6 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 81042f2:	2303      	movs	r3, #3
 81042f4:	e007      	b.n	8104306 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 81042f6:	687b      	ldr	r3, [r7, #4]
 81042f8:	681b      	ldr	r3, [r3, #0]
 81042fa:	68db      	ldr	r3, [r3, #12]
 81042fc:	f003 0320 	and.w	r3, r3, #32
 8104300:	2b00      	cmp	r3, #0
 8104302:	d0ee      	beq.n	81042e2 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8104304:	2300      	movs	r3, #0
}
 8104306:	4618      	mov	r0, r3
 8104308:	3710      	adds	r7, #16
 810430a:	46bd      	mov	sp, r7
 810430c:	bd80      	pop	{r7, pc}

0810430e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 810430e:	b580      	push	{r7, lr}
 8104310:	b084      	sub	sp, #16
 8104312:	af00      	add	r7, sp, #0
 8104314:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8104316:	2300      	movs	r3, #0
 8104318:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 810431a:	687b      	ldr	r3, [r7, #4]
 810431c:	681b      	ldr	r3, [r3, #0]
 810431e:	68db      	ldr	r3, [r3, #12]
 8104320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104324:	2b00      	cmp	r3, #0
 8104326:	d120      	bne.n	810436a <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8104328:	687b      	ldr	r3, [r7, #4]
 810432a:	681b      	ldr	r3, [r3, #0]
 810432c:	f04f 32ff 	mov.w	r2, #4294967295
 8104330:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8104332:	f7fd fabf 	bl	81018b4 <HAL_GetTick>
 8104336:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8104338:	e00d      	b.n	8104356 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 810433a:	f7fd fabb 	bl	81018b4 <HAL_GetTick>
 810433e:	4602      	mov	r2, r0
 8104340:	68bb      	ldr	r3, [r7, #8]
 8104342:	1ad3      	subs	r3, r2, r3
 8104344:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8104348:	d905      	bls.n	8104356 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 810434a:	2303      	movs	r3, #3
 810434c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 810434e:	687b      	ldr	r3, [r7, #4]
 8104350:	2203      	movs	r2, #3
 8104352:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8104356:	687b      	ldr	r3, [r7, #4]
 8104358:	681b      	ldr	r3, [r3, #0]
 810435a:	68db      	ldr	r3, [r3, #12]
 810435c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104360:	2b00      	cmp	r3, #0
 8104362:	d102      	bne.n	810436a <RTC_EnterInitMode+0x5c>
 8104364:	7bfb      	ldrb	r3, [r7, #15]
 8104366:	2b03      	cmp	r3, #3
 8104368:	d1e7      	bne.n	810433a <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 810436a:	7bfb      	ldrb	r3, [r7, #15]
}
 810436c:	4618      	mov	r0, r3
 810436e:	3710      	adds	r7, #16
 8104370:	46bd      	mov	sp, r7
 8104372:	bd80      	pop	{r7, pc}

08104374 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8104374:	b580      	push	{r7, lr}
 8104376:	b084      	sub	sp, #16
 8104378:	af00      	add	r7, sp, #0
 810437a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 810437c:	2300      	movs	r3, #0
 810437e:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8104380:	4b1a      	ldr	r3, [pc, #104]	; (81043ec <RTC_ExitInitMode+0x78>)
 8104382:	68db      	ldr	r3, [r3, #12]
 8104384:	4a19      	ldr	r2, [pc, #100]	; (81043ec <RTC_ExitInitMode+0x78>)
 8104386:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 810438a:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 810438c:	4b17      	ldr	r3, [pc, #92]	; (81043ec <RTC_ExitInitMode+0x78>)
 810438e:	689b      	ldr	r3, [r3, #8]
 8104390:	f003 0320 	and.w	r3, r3, #32
 8104394:	2b00      	cmp	r3, #0
 8104396:	d10c      	bne.n	81043b2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8104398:	6878      	ldr	r0, [r7, #4]
 810439a:	f7ff ff92 	bl	81042c2 <HAL_RTC_WaitForSynchro>
 810439e:	4603      	mov	r3, r0
 81043a0:	2b00      	cmp	r3, #0
 81043a2:	d01e      	beq.n	81043e2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 81043a4:	687b      	ldr	r3, [r7, #4]
 81043a6:	2203      	movs	r2, #3
 81043a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 81043ac:	2303      	movs	r3, #3
 81043ae:	73fb      	strb	r3, [r7, #15]
 81043b0:	e017      	b.n	81043e2 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 81043b2:	4b0e      	ldr	r3, [pc, #56]	; (81043ec <RTC_ExitInitMode+0x78>)
 81043b4:	689b      	ldr	r3, [r3, #8]
 81043b6:	4a0d      	ldr	r2, [pc, #52]	; (81043ec <RTC_ExitInitMode+0x78>)
 81043b8:	f023 0320 	bic.w	r3, r3, #32
 81043bc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 81043be:	6878      	ldr	r0, [r7, #4]
 81043c0:	f7ff ff7f 	bl	81042c2 <HAL_RTC_WaitForSynchro>
 81043c4:	4603      	mov	r3, r0
 81043c6:	2b00      	cmp	r3, #0
 81043c8:	d005      	beq.n	81043d6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 81043ca:	687b      	ldr	r3, [r7, #4]
 81043cc:	2203      	movs	r2, #3
 81043ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 81043d2:	2303      	movs	r3, #3
 81043d4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 81043d6:	4b05      	ldr	r3, [pc, #20]	; (81043ec <RTC_ExitInitMode+0x78>)
 81043d8:	689b      	ldr	r3, [r3, #8]
 81043da:	4a04      	ldr	r2, [pc, #16]	; (81043ec <RTC_ExitInitMode+0x78>)
 81043dc:	f043 0320 	orr.w	r3, r3, #32
 81043e0:	6093      	str	r3, [r2, #8]
  }

  return status;
 81043e2:	7bfb      	ldrb	r3, [r7, #15]
}
 81043e4:	4618      	mov	r0, r3
 81043e6:	3710      	adds	r7, #16
 81043e8:	46bd      	mov	sp, r7
 81043ea:	bd80      	pop	{r7, pc}
 81043ec:	58004000 	.word	0x58004000

081043f0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 81043f0:	b480      	push	{r7}
 81043f2:	b085      	sub	sp, #20
 81043f4:	af00      	add	r7, sp, #0
 81043f6:	4603      	mov	r3, r0
 81043f8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 81043fa:	2300      	movs	r3, #0
 81043fc:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 81043fe:	79fb      	ldrb	r3, [r7, #7]
 8104400:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8104402:	e005      	b.n	8104410 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8104404:	68fb      	ldr	r3, [r7, #12]
 8104406:	3301      	adds	r3, #1
 8104408:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 810440a:	7afb      	ldrb	r3, [r7, #11]
 810440c:	3b0a      	subs	r3, #10
 810440e:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8104410:	7afb      	ldrb	r3, [r7, #11]
 8104412:	2b09      	cmp	r3, #9
 8104414:	d8f6      	bhi.n	8104404 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8104416:	68fb      	ldr	r3, [r7, #12]
 8104418:	b2db      	uxtb	r3, r3
 810441a:	011b      	lsls	r3, r3, #4
 810441c:	b2da      	uxtb	r2, r3
 810441e:	7afb      	ldrb	r3, [r7, #11]
 8104420:	4313      	orrs	r3, r2
 8104422:	b2db      	uxtb	r3, r3
}
 8104424:	4618      	mov	r0, r3
 8104426:	3714      	adds	r7, #20
 8104428:	46bd      	mov	sp, r7
 810442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810442e:	4770      	bx	lr

08104430 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8104430:	b480      	push	{r7}
 8104432:	b085      	sub	sp, #20
 8104434:	af00      	add	r7, sp, #0
 8104436:	4603      	mov	r3, r0
 8104438:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 810443a:	79fb      	ldrb	r3, [r7, #7]
 810443c:	091b      	lsrs	r3, r3, #4
 810443e:	b2db      	uxtb	r3, r3
 8104440:	461a      	mov	r2, r3
 8104442:	0092      	lsls	r2, r2, #2
 8104444:	4413      	add	r3, r2
 8104446:	005b      	lsls	r3, r3, #1
 8104448:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 810444a:	79fb      	ldrb	r3, [r7, #7]
 810444c:	f003 030f 	and.w	r3, r3, #15
 8104450:	b2da      	uxtb	r2, r3
 8104452:	7bfb      	ldrb	r3, [r7, #15]
 8104454:	4413      	add	r3, r2
 8104456:	b2db      	uxtb	r3, r3
}
 8104458:	4618      	mov	r0, r3
 810445a:	3714      	adds	r7, #20
 810445c:	46bd      	mov	sp, r7
 810445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104462:	4770      	bx	lr

08104464 <HAL_RTCEx_SetRefClock>:
  * @brief  Enable the RTC reference clock detection.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetRefClock(RTC_HandleTypeDef * hrtc)
{
 8104464:	b580      	push	{r7, lr}
 8104466:	b084      	sub	sp, #16
 8104468:	af00      	add	r7, sp, #0
 810446a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  /* Process Locked */
  __HAL_LOCK(hrtc);
 810446c:	687b      	ldr	r3, [r7, #4]
 810446e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8104472:	2b01      	cmp	r3, #1
 8104474:	d101      	bne.n	810447a <HAL_RTCEx_SetRefClock+0x16>
 8104476:	2302      	movs	r3, #2
 8104478:	e034      	b.n	81044e4 <HAL_RTCEx_SetRefClock+0x80>
 810447a:	687b      	ldr	r3, [r7, #4]
 810447c:	2201      	movs	r2, #1
 810447e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8104482:	687b      	ldr	r3, [r7, #4]
 8104484:	2202      	movs	r2, #2
 8104486:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 810448a:	687b      	ldr	r3, [r7, #4]
 810448c:	681b      	ldr	r3, [r3, #0]
 810448e:	22ca      	movs	r2, #202	; 0xca
 8104490:	625a      	str	r2, [r3, #36]	; 0x24
 8104492:	687b      	ldr	r3, [r7, #4]
 8104494:	681b      	ldr	r3, [r3, #0]
 8104496:	2253      	movs	r2, #83	; 0x53
 8104498:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 810449a:	6878      	ldr	r0, [r7, #4]
 810449c:	f7ff ff37 	bl	810430e <RTC_EnterInitMode>
 81044a0:	4603      	mov	r3, r0
 81044a2:	73fb      	strb	r3, [r7, #15]
  if (status == HAL_OK)
 81044a4:	7bfb      	ldrb	r3, [r7, #15]
 81044a6:	2b00      	cmp	r3, #0
 81044a8:	d10c      	bne.n	81044c4 <HAL_RTCEx_SetRefClock+0x60>
  {
    __HAL_RTC_CLOCKREF_DETECTION_ENABLE(hrtc);
 81044aa:	687b      	ldr	r3, [r7, #4]
 81044ac:	681b      	ldr	r3, [r3, #0]
 81044ae:	689a      	ldr	r2, [r3, #8]
 81044b0:	687b      	ldr	r3, [r7, #4]
 81044b2:	681b      	ldr	r3, [r3, #0]
 81044b4:	f042 0210 	orr.w	r2, r2, #16
 81044b8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 81044ba:	6878      	ldr	r0, [r7, #4]
 81044bc:	f7ff ff5a 	bl	8104374 <RTC_ExitInitMode>
 81044c0:	4603      	mov	r3, r0
 81044c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 81044c4:	687b      	ldr	r3, [r7, #4]
 81044c6:	681b      	ldr	r3, [r3, #0]
 81044c8:	22ff      	movs	r2, #255	; 0xff
 81044ca:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 81044cc:	7bfb      	ldrb	r3, [r7, #15]
 81044ce:	2b00      	cmp	r3, #0
 81044d0:	d103      	bne.n	81044da <HAL_RTCEx_SetRefClock+0x76>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 81044d2:	687b      	ldr	r3, [r7, #4]
 81044d4:	2201      	movs	r2, #1
 81044d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 81044da:	687b      	ldr	r3, [r7, #4]
 81044dc:	2200      	movs	r2, #0
 81044de:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 81044e2:	2300      	movs	r3, #0
}
 81044e4:	4618      	mov	r0, r3
 81044e6:	3710      	adds	r7, #16
 81044e8:	46bd      	mov	sp, r7
 81044ea:	bd80      	pop	{r7, pc}

081044ec <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 81044ec:	b580      	push	{r7, lr}
 81044ee:	b084      	sub	sp, #16
 81044f0:	af00      	add	r7, sp, #0
 81044f2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 81044f4:	687b      	ldr	r3, [r7, #4]
 81044f6:	2b00      	cmp	r3, #0
 81044f8:	d101      	bne.n	81044fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 81044fa:	2301      	movs	r3, #1
 81044fc:	e0f1      	b.n	81046e2 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 81044fe:	687b      	ldr	r3, [r7, #4]
 8104500:	2200      	movs	r2, #0
 8104502:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8104504:	687b      	ldr	r3, [r7, #4]
 8104506:	681b      	ldr	r3, [r3, #0]
 8104508:	4a78      	ldr	r2, [pc, #480]	; (81046ec <HAL_SPI_Init+0x200>)
 810450a:	4293      	cmp	r3, r2
 810450c:	d00f      	beq.n	810452e <HAL_SPI_Init+0x42>
 810450e:	687b      	ldr	r3, [r7, #4]
 8104510:	681b      	ldr	r3, [r3, #0]
 8104512:	4a77      	ldr	r2, [pc, #476]	; (81046f0 <HAL_SPI_Init+0x204>)
 8104514:	4293      	cmp	r3, r2
 8104516:	d00a      	beq.n	810452e <HAL_SPI_Init+0x42>
 8104518:	687b      	ldr	r3, [r7, #4]
 810451a:	681b      	ldr	r3, [r3, #0]
 810451c:	4a75      	ldr	r2, [pc, #468]	; (81046f4 <HAL_SPI_Init+0x208>)
 810451e:	4293      	cmp	r3, r2
 8104520:	d005      	beq.n	810452e <HAL_SPI_Init+0x42>
 8104522:	687b      	ldr	r3, [r7, #4]
 8104524:	68db      	ldr	r3, [r3, #12]
 8104526:	2b0f      	cmp	r3, #15
 8104528:	d901      	bls.n	810452e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 810452a:	2301      	movs	r3, #1
 810452c:	e0d9      	b.n	81046e2 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 810452e:	6878      	ldr	r0, [r7, #4]
 8104530:	f000 ff5d 	bl	81053ee <SPI_GetPacketSize>
 8104534:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8104536:	687b      	ldr	r3, [r7, #4]
 8104538:	681b      	ldr	r3, [r3, #0]
 810453a:	4a6c      	ldr	r2, [pc, #432]	; (81046ec <HAL_SPI_Init+0x200>)
 810453c:	4293      	cmp	r3, r2
 810453e:	d00c      	beq.n	810455a <HAL_SPI_Init+0x6e>
 8104540:	687b      	ldr	r3, [r7, #4]
 8104542:	681b      	ldr	r3, [r3, #0]
 8104544:	4a6a      	ldr	r2, [pc, #424]	; (81046f0 <HAL_SPI_Init+0x204>)
 8104546:	4293      	cmp	r3, r2
 8104548:	d007      	beq.n	810455a <HAL_SPI_Init+0x6e>
 810454a:	687b      	ldr	r3, [r7, #4]
 810454c:	681b      	ldr	r3, [r3, #0]
 810454e:	4a69      	ldr	r2, [pc, #420]	; (81046f4 <HAL_SPI_Init+0x208>)
 8104550:	4293      	cmp	r3, r2
 8104552:	d002      	beq.n	810455a <HAL_SPI_Init+0x6e>
 8104554:	68fb      	ldr	r3, [r7, #12]
 8104556:	2b08      	cmp	r3, #8
 8104558:	d811      	bhi.n	810457e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 810455a:	687b      	ldr	r3, [r7, #4]
 810455c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810455e:	4a63      	ldr	r2, [pc, #396]	; (81046ec <HAL_SPI_Init+0x200>)
 8104560:	4293      	cmp	r3, r2
 8104562:	d009      	beq.n	8104578 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8104564:	687b      	ldr	r3, [r7, #4]
 8104566:	681b      	ldr	r3, [r3, #0]
 8104568:	4a61      	ldr	r2, [pc, #388]	; (81046f0 <HAL_SPI_Init+0x204>)
 810456a:	4293      	cmp	r3, r2
 810456c:	d004      	beq.n	8104578 <HAL_SPI_Init+0x8c>
 810456e:	687b      	ldr	r3, [r7, #4]
 8104570:	681b      	ldr	r3, [r3, #0]
 8104572:	4a60      	ldr	r2, [pc, #384]	; (81046f4 <HAL_SPI_Init+0x208>)
 8104574:	4293      	cmp	r3, r2
 8104576:	d104      	bne.n	8104582 <HAL_SPI_Init+0x96>
 8104578:	68fb      	ldr	r3, [r7, #12]
 810457a:	2b10      	cmp	r3, #16
 810457c:	d901      	bls.n	8104582 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 810457e:	2301      	movs	r3, #1
 8104580:	e0af      	b.n	81046e2 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8104582:	687b      	ldr	r3, [r7, #4]
 8104584:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8104588:	b2db      	uxtb	r3, r3
 810458a:	2b00      	cmp	r3, #0
 810458c:	d106      	bne.n	810459c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 810458e:	687b      	ldr	r3, [r7, #4]
 8104590:	2200      	movs	r2, #0
 8104592:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8104596:	6878      	ldr	r0, [r7, #4]
 8104598:	f7fc ffc4 	bl	8101524 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 810459c:	687b      	ldr	r3, [r7, #4]
 810459e:	2202      	movs	r2, #2
 81045a0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 81045a4:	687b      	ldr	r3, [r7, #4]
 81045a6:	681b      	ldr	r3, [r3, #0]
 81045a8:	681a      	ldr	r2, [r3, #0]
 81045aa:	687b      	ldr	r3, [r7, #4]
 81045ac:	681b      	ldr	r3, [r3, #0]
 81045ae:	f022 0201 	bic.w	r2, r2, #1
 81045b2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 81045b4:	687b      	ldr	r3, [r7, #4]
 81045b6:	681b      	ldr	r3, [r3, #0]
 81045b8:	689b      	ldr	r3, [r3, #8]
 81045ba:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 81045be:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 81045c0:	687b      	ldr	r3, [r7, #4]
 81045c2:	699b      	ldr	r3, [r3, #24]
 81045c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81045c8:	d119      	bne.n	81045fe <HAL_SPI_Init+0x112>
 81045ca:	687b      	ldr	r3, [r7, #4]
 81045cc:	685b      	ldr	r3, [r3, #4]
 81045ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81045d2:	d103      	bne.n	81045dc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 81045d4:	687b      	ldr	r3, [r7, #4]
 81045d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 81045d8:	2b00      	cmp	r3, #0
 81045da:	d008      	beq.n	81045ee <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 81045dc:	687b      	ldr	r3, [r7, #4]
 81045de:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 81045e0:	2b00      	cmp	r3, #0
 81045e2:	d10c      	bne.n	81045fe <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 81045e4:	687b      	ldr	r3, [r7, #4]
 81045e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 81045e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81045ec:	d107      	bne.n	81045fe <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 81045ee:	687b      	ldr	r3, [r7, #4]
 81045f0:	681b      	ldr	r3, [r3, #0]
 81045f2:	681a      	ldr	r2, [r3, #0]
 81045f4:	687b      	ldr	r3, [r7, #4]
 81045f6:	681b      	ldr	r3, [r3, #0]
 81045f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 81045fc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 81045fe:	687b      	ldr	r3, [r7, #4]
 8104600:	69da      	ldr	r2, [r3, #28]
 8104602:	687b      	ldr	r3, [r7, #4]
 8104604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104606:	431a      	orrs	r2, r3
 8104608:	68bb      	ldr	r3, [r7, #8]
 810460a:	431a      	orrs	r2, r3
 810460c:	687b      	ldr	r3, [r7, #4]
 810460e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104610:	ea42 0103 	orr.w	r1, r2, r3
 8104614:	687b      	ldr	r3, [r7, #4]
 8104616:	68da      	ldr	r2, [r3, #12]
 8104618:	687b      	ldr	r3, [r7, #4]
 810461a:	681b      	ldr	r3, [r3, #0]
 810461c:	430a      	orrs	r2, r1
 810461e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8104620:	687b      	ldr	r3, [r7, #4]
 8104622:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8104624:	687b      	ldr	r3, [r7, #4]
 8104626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104628:	431a      	orrs	r2, r3
 810462a:	687b      	ldr	r3, [r7, #4]
 810462c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810462e:	431a      	orrs	r2, r3
 8104630:	687b      	ldr	r3, [r7, #4]
 8104632:	699b      	ldr	r3, [r3, #24]
 8104634:	431a      	orrs	r2, r3
 8104636:	687b      	ldr	r3, [r7, #4]
 8104638:	691b      	ldr	r3, [r3, #16]
 810463a:	431a      	orrs	r2, r3
 810463c:	687b      	ldr	r3, [r7, #4]
 810463e:	695b      	ldr	r3, [r3, #20]
 8104640:	431a      	orrs	r2, r3
 8104642:	687b      	ldr	r3, [r7, #4]
 8104644:	6a1b      	ldr	r3, [r3, #32]
 8104646:	431a      	orrs	r2, r3
 8104648:	687b      	ldr	r3, [r7, #4]
 810464a:	685b      	ldr	r3, [r3, #4]
 810464c:	431a      	orrs	r2, r3
 810464e:	687b      	ldr	r3, [r7, #4]
 8104650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104652:	431a      	orrs	r2, r3
 8104654:	687b      	ldr	r3, [r7, #4]
 8104656:	689b      	ldr	r3, [r3, #8]
 8104658:	431a      	orrs	r2, r3
 810465a:	687b      	ldr	r3, [r7, #4]
 810465c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810465e:	ea42 0103 	orr.w	r1, r2, r3
 8104662:	687b      	ldr	r3, [r7, #4]
 8104664:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8104666:	687b      	ldr	r3, [r7, #4]
 8104668:	681b      	ldr	r3, [r3, #0]
 810466a:	430a      	orrs	r2, r1
 810466c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 810466e:	687b      	ldr	r3, [r7, #4]
 8104670:	685b      	ldr	r3, [r3, #4]
 8104672:	2b00      	cmp	r3, #0
 8104674:	d113      	bne.n	810469e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8104676:	687b      	ldr	r3, [r7, #4]
 8104678:	681b      	ldr	r3, [r3, #0]
 810467a:	689b      	ldr	r3, [r3, #8]
 810467c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8104680:	687b      	ldr	r3, [r7, #4]
 8104682:	681b      	ldr	r3, [r3, #0]
 8104684:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8104688:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 810468a:	687b      	ldr	r3, [r7, #4]
 810468c:	681b      	ldr	r3, [r3, #0]
 810468e:	689b      	ldr	r3, [r3, #8]
 8104690:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8104694:	687b      	ldr	r3, [r7, #4]
 8104696:	681b      	ldr	r3, [r3, #0]
 8104698:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 810469c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 810469e:	687b      	ldr	r3, [r7, #4]
 81046a0:	681b      	ldr	r3, [r3, #0]
 81046a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 81046a4:	687b      	ldr	r3, [r7, #4]
 81046a6:	681b      	ldr	r3, [r3, #0]
 81046a8:	f022 0201 	bic.w	r2, r2, #1
 81046ac:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 81046ae:	687b      	ldr	r3, [r7, #4]
 81046b0:	685b      	ldr	r3, [r3, #4]
 81046b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 81046b6:	2b00      	cmp	r3, #0
 81046b8:	d00a      	beq.n	81046d0 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 81046ba:	687b      	ldr	r3, [r7, #4]
 81046bc:	681b      	ldr	r3, [r3, #0]
 81046be:	68db      	ldr	r3, [r3, #12]
 81046c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 81046c4:	687b      	ldr	r3, [r7, #4]
 81046c6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 81046c8:	687b      	ldr	r3, [r7, #4]
 81046ca:	681b      	ldr	r3, [r3, #0]
 81046cc:	430a      	orrs	r2, r1
 81046ce:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 81046d0:	687b      	ldr	r3, [r7, #4]
 81046d2:	2200      	movs	r2, #0
 81046d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 81046d8:	687b      	ldr	r3, [r7, #4]
 81046da:	2201      	movs	r2, #1
 81046dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 81046e0:	2300      	movs	r3, #0
}
 81046e2:	4618      	mov	r0, r3
 81046e4:	3710      	adds	r7, #16
 81046e6:	46bd      	mov	sp, r7
 81046e8:	bd80      	pop	{r7, pc}
 81046ea:	bf00      	nop
 81046ec:	40013000 	.word	0x40013000
 81046f0:	40003800 	.word	0x40003800
 81046f4:	40003c00 	.word	0x40003c00

081046f8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81046f8:	b580      	push	{r7, lr}
 81046fa:	b08a      	sub	sp, #40	; 0x28
 81046fc:	af02      	add	r7, sp, #8
 81046fe:	60f8      	str	r0, [r7, #12]
 8104700:	60b9      	str	r1, [r7, #8]
 8104702:	603b      	str	r3, [r7, #0]
 8104704:	4613      	mov	r3, r2
 8104706:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8104708:	68fb      	ldr	r3, [r7, #12]
 810470a:	681b      	ldr	r3, [r3, #0]
 810470c:	3320      	adds	r3, #32
 810470e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8104710:	2300      	movs	r3, #0
 8104712:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8104714:	68fb      	ldr	r3, [r7, #12]
 8104716:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810471a:	2b01      	cmp	r3, #1
 810471c:	d101      	bne.n	8104722 <HAL_SPI_Transmit+0x2a>
 810471e:	2302      	movs	r3, #2
 8104720:	e1d4      	b.n	8104acc <HAL_SPI_Transmit+0x3d4>
 8104722:	68fb      	ldr	r3, [r7, #12]
 8104724:	2201      	movs	r2, #1
 8104726:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 810472a:	f7fd f8c3 	bl	81018b4 <HAL_GetTick>
 810472e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8104730:	68fb      	ldr	r3, [r7, #12]
 8104732:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8104736:	b2db      	uxtb	r3, r3
 8104738:	2b01      	cmp	r3, #1
 810473a:	d007      	beq.n	810474c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 810473c:	2302      	movs	r3, #2
 810473e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8104740:	68fb      	ldr	r3, [r7, #12]
 8104742:	2200      	movs	r2, #0
 8104744:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8104748:	7efb      	ldrb	r3, [r7, #27]
 810474a:	e1bf      	b.n	8104acc <HAL_SPI_Transmit+0x3d4>
  }

  if ((pData == NULL) || (Size == 0UL))
 810474c:	68bb      	ldr	r3, [r7, #8]
 810474e:	2b00      	cmp	r3, #0
 8104750:	d002      	beq.n	8104758 <HAL_SPI_Transmit+0x60>
 8104752:	88fb      	ldrh	r3, [r7, #6]
 8104754:	2b00      	cmp	r3, #0
 8104756:	d107      	bne.n	8104768 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8104758:	2301      	movs	r3, #1
 810475a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 810475c:	68fb      	ldr	r3, [r7, #12]
 810475e:	2200      	movs	r2, #0
 8104760:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8104764:	7efb      	ldrb	r3, [r7, #27]
 8104766:	e1b1      	b.n	8104acc <HAL_SPI_Transmit+0x3d4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8104768:	68fb      	ldr	r3, [r7, #12]
 810476a:	2203      	movs	r2, #3
 810476c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8104770:	68fb      	ldr	r3, [r7, #12]
 8104772:	2200      	movs	r2, #0
 8104774:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8104778:	68fb      	ldr	r3, [r7, #12]
 810477a:	68ba      	ldr	r2, [r7, #8]
 810477c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 810477e:	68fb      	ldr	r3, [r7, #12]
 8104780:	88fa      	ldrh	r2, [r7, #6]
 8104782:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8104786:	68fb      	ldr	r3, [r7, #12]
 8104788:	88fa      	ldrh	r2, [r7, #6]
 810478a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 810478e:	68fb      	ldr	r3, [r7, #12]
 8104790:	2200      	movs	r2, #0
 8104792:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8104794:	68fb      	ldr	r3, [r7, #12]
 8104796:	2200      	movs	r2, #0
 8104798:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 810479c:	68fb      	ldr	r3, [r7, #12]
 810479e:	2200      	movs	r2, #0
 81047a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 81047a4:	68fb      	ldr	r3, [r7, #12]
 81047a6:	2200      	movs	r2, #0
 81047a8:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 81047aa:	68fb      	ldr	r3, [r7, #12]
 81047ac:	2200      	movs	r2, #0
 81047ae:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 81047b0:	68fb      	ldr	r3, [r7, #12]
 81047b2:	689b      	ldr	r3, [r3, #8]
 81047b4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 81047b8:	d107      	bne.n	81047ca <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 81047ba:	68fb      	ldr	r3, [r7, #12]
 81047bc:	681b      	ldr	r3, [r3, #0]
 81047be:	681a      	ldr	r2, [r3, #0]
 81047c0:	68fb      	ldr	r3, [r7, #12]
 81047c2:	681b      	ldr	r3, [r3, #0]
 81047c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81047c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 81047ca:	68fb      	ldr	r3, [r7, #12]
 81047cc:	681b      	ldr	r3, [r3, #0]
 81047ce:	685b      	ldr	r3, [r3, #4]
 81047d0:	0c1b      	lsrs	r3, r3, #16
 81047d2:	041b      	lsls	r3, r3, #16
 81047d4:	88f9      	ldrh	r1, [r7, #6]
 81047d6:	68fa      	ldr	r2, [r7, #12]
 81047d8:	6812      	ldr	r2, [r2, #0]
 81047da:	430b      	orrs	r3, r1
 81047dc:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 81047de:	68fb      	ldr	r3, [r7, #12]
 81047e0:	681b      	ldr	r3, [r3, #0]
 81047e2:	681a      	ldr	r2, [r3, #0]
 81047e4:	68fb      	ldr	r3, [r7, #12]
 81047e6:	681b      	ldr	r3, [r3, #0]
 81047e8:	f042 0201 	orr.w	r2, r2, #1
 81047ec:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 81047ee:	68fb      	ldr	r3, [r7, #12]
 81047f0:	685b      	ldr	r3, [r3, #4]
 81047f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81047f6:	d107      	bne.n	8104808 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 81047f8:	68fb      	ldr	r3, [r7, #12]
 81047fa:	681b      	ldr	r3, [r3, #0]
 81047fc:	681a      	ldr	r2, [r3, #0]
 81047fe:	68fb      	ldr	r3, [r7, #12]
 8104800:	681b      	ldr	r3, [r3, #0]
 8104802:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8104806:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8104808:	68fb      	ldr	r3, [r7, #12]
 810480a:	68db      	ldr	r3, [r3, #12]
 810480c:	2b0f      	cmp	r3, #15
 810480e:	d947      	bls.n	81048a0 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8104810:	e03f      	b.n	8104892 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8104812:	68fb      	ldr	r3, [r7, #12]
 8104814:	681b      	ldr	r3, [r3, #0]
 8104816:	695b      	ldr	r3, [r3, #20]
 8104818:	f003 0302 	and.w	r3, r3, #2
 810481c:	2b02      	cmp	r3, #2
 810481e:	d114      	bne.n	810484a <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8104820:	68fb      	ldr	r3, [r7, #12]
 8104822:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8104824:	68fb      	ldr	r3, [r7, #12]
 8104826:	681b      	ldr	r3, [r3, #0]
 8104828:	6812      	ldr	r2, [r2, #0]
 810482a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 810482c:	68fb      	ldr	r3, [r7, #12]
 810482e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104830:	1d1a      	adds	r2, r3, #4
 8104832:	68fb      	ldr	r3, [r7, #12]
 8104834:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8104836:	68fb      	ldr	r3, [r7, #12]
 8104838:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810483c:	b29b      	uxth	r3, r3
 810483e:	3b01      	subs	r3, #1
 8104840:	b29a      	uxth	r2, r3
 8104842:	68fb      	ldr	r3, [r7, #12]
 8104844:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8104848:	e023      	b.n	8104892 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810484a:	f7fd f833 	bl	81018b4 <HAL_GetTick>
 810484e:	4602      	mov	r2, r0
 8104850:	697b      	ldr	r3, [r7, #20]
 8104852:	1ad3      	subs	r3, r2, r3
 8104854:	683a      	ldr	r2, [r7, #0]
 8104856:	429a      	cmp	r2, r3
 8104858:	d803      	bhi.n	8104862 <HAL_SPI_Transmit+0x16a>
 810485a:	683b      	ldr	r3, [r7, #0]
 810485c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104860:	d102      	bne.n	8104868 <HAL_SPI_Transmit+0x170>
 8104862:	683b      	ldr	r3, [r7, #0]
 8104864:	2b00      	cmp	r3, #0
 8104866:	d114      	bne.n	8104892 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8104868:	68f8      	ldr	r0, [r7, #12]
 810486a:	f000 fcf2 	bl	8105252 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 810486e:	68fb      	ldr	r3, [r7, #12]
 8104870:	2200      	movs	r2, #0
 8104872:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8104876:	68fb      	ldr	r3, [r7, #12]
 8104878:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810487c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8104880:	68fb      	ldr	r3, [r7, #12]
 8104882:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8104886:	68fb      	ldr	r3, [r7, #12]
 8104888:	2201      	movs	r2, #1
 810488a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 810488e:	2303      	movs	r3, #3
 8104890:	e11c      	b.n	8104acc <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 8104892:	68fb      	ldr	r3, [r7, #12]
 8104894:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104898:	b29b      	uxth	r3, r3
 810489a:	2b00      	cmp	r3, #0
 810489c:	d1b9      	bne.n	8104812 <HAL_SPI_Transmit+0x11a>
 810489e:	e0ef      	b.n	8104a80 <HAL_SPI_Transmit+0x388>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 81048a0:	68fb      	ldr	r3, [r7, #12]
 81048a2:	68db      	ldr	r3, [r3, #12]
 81048a4:	2b07      	cmp	r3, #7
 81048a6:	f240 80e4 	bls.w	8104a72 <HAL_SPI_Transmit+0x37a>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 81048aa:	e05d      	b.n	8104968 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 81048ac:	68fb      	ldr	r3, [r7, #12]
 81048ae:	681b      	ldr	r3, [r3, #0]
 81048b0:	695b      	ldr	r3, [r3, #20]
 81048b2:	f003 0302 	and.w	r3, r3, #2
 81048b6:	2b02      	cmp	r3, #2
 81048b8:	d132      	bne.n	8104920 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 81048ba:	68fb      	ldr	r3, [r7, #12]
 81048bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81048c0:	b29b      	uxth	r3, r3
 81048c2:	2b01      	cmp	r3, #1
 81048c4:	d918      	bls.n	81048f8 <HAL_SPI_Transmit+0x200>
 81048c6:	68fb      	ldr	r3, [r7, #12]
 81048c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81048ca:	2b00      	cmp	r3, #0
 81048cc:	d014      	beq.n	81048f8 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 81048ce:	68fb      	ldr	r3, [r7, #12]
 81048d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 81048d2:	68fb      	ldr	r3, [r7, #12]
 81048d4:	681b      	ldr	r3, [r3, #0]
 81048d6:	6812      	ldr	r2, [r2, #0]
 81048d8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 81048da:	68fb      	ldr	r3, [r7, #12]
 81048dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81048de:	1d1a      	adds	r2, r3, #4
 81048e0:	68fb      	ldr	r3, [r7, #12]
 81048e2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 81048e4:	68fb      	ldr	r3, [r7, #12]
 81048e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81048ea:	b29b      	uxth	r3, r3
 81048ec:	3b02      	subs	r3, #2
 81048ee:	b29a      	uxth	r2, r3
 81048f0:	68fb      	ldr	r3, [r7, #12]
 81048f2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 81048f6:	e037      	b.n	8104968 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 81048f8:	68fb      	ldr	r3, [r7, #12]
 81048fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81048fc:	881a      	ldrh	r2, [r3, #0]
 81048fe:	69fb      	ldr	r3, [r7, #28]
 8104900:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8104902:	68fb      	ldr	r3, [r7, #12]
 8104904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104906:	1c9a      	adds	r2, r3, #2
 8104908:	68fb      	ldr	r3, [r7, #12]
 810490a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 810490c:	68fb      	ldr	r3, [r7, #12]
 810490e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104912:	b29b      	uxth	r3, r3
 8104914:	3b01      	subs	r3, #1
 8104916:	b29a      	uxth	r2, r3
 8104918:	68fb      	ldr	r3, [r7, #12]
 810491a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 810491e:	e023      	b.n	8104968 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104920:	f7fc ffc8 	bl	81018b4 <HAL_GetTick>
 8104924:	4602      	mov	r2, r0
 8104926:	697b      	ldr	r3, [r7, #20]
 8104928:	1ad3      	subs	r3, r2, r3
 810492a:	683a      	ldr	r2, [r7, #0]
 810492c:	429a      	cmp	r2, r3
 810492e:	d803      	bhi.n	8104938 <HAL_SPI_Transmit+0x240>
 8104930:	683b      	ldr	r3, [r7, #0]
 8104932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104936:	d102      	bne.n	810493e <HAL_SPI_Transmit+0x246>
 8104938:	683b      	ldr	r3, [r7, #0]
 810493a:	2b00      	cmp	r3, #0
 810493c:	d114      	bne.n	8104968 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 810493e:	68f8      	ldr	r0, [r7, #12]
 8104940:	f000 fc87 	bl	8105252 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8104944:	68fb      	ldr	r3, [r7, #12]
 8104946:	2200      	movs	r2, #0
 8104948:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810494c:	68fb      	ldr	r3, [r7, #12]
 810494e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104952:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8104956:	68fb      	ldr	r3, [r7, #12]
 8104958:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 810495c:	68fb      	ldr	r3, [r7, #12]
 810495e:	2201      	movs	r2, #1
 8104960:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8104964:	2303      	movs	r3, #3
 8104966:	e0b1      	b.n	8104acc <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 8104968:	68fb      	ldr	r3, [r7, #12]
 810496a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810496e:	b29b      	uxth	r3, r3
 8104970:	2b00      	cmp	r3, #0
 8104972:	d19b      	bne.n	81048ac <HAL_SPI_Transmit+0x1b4>
 8104974:	e084      	b.n	8104a80 <HAL_SPI_Transmit+0x388>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8104976:	68fb      	ldr	r3, [r7, #12]
 8104978:	681b      	ldr	r3, [r3, #0]
 810497a:	695b      	ldr	r3, [r3, #20]
 810497c:	f003 0302 	and.w	r3, r3, #2
 8104980:	2b02      	cmp	r3, #2
 8104982:	d152      	bne.n	8104a2a <HAL_SPI_Transmit+0x332>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8104984:	68fb      	ldr	r3, [r7, #12]
 8104986:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810498a:	b29b      	uxth	r3, r3
 810498c:	2b03      	cmp	r3, #3
 810498e:	d918      	bls.n	81049c2 <HAL_SPI_Transmit+0x2ca>
 8104990:	68fb      	ldr	r3, [r7, #12]
 8104992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104994:	2b40      	cmp	r3, #64	; 0x40
 8104996:	d914      	bls.n	81049c2 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8104998:	68fb      	ldr	r3, [r7, #12]
 810499a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810499c:	68fb      	ldr	r3, [r7, #12]
 810499e:	681b      	ldr	r3, [r3, #0]
 81049a0:	6812      	ldr	r2, [r2, #0]
 81049a2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 81049a4:	68fb      	ldr	r3, [r7, #12]
 81049a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81049a8:	1d1a      	adds	r2, r3, #4
 81049aa:	68fb      	ldr	r3, [r7, #12]
 81049ac:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 81049ae:	68fb      	ldr	r3, [r7, #12]
 81049b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81049b4:	b29b      	uxth	r3, r3
 81049b6:	3b04      	subs	r3, #4
 81049b8:	b29a      	uxth	r2, r3
 81049ba:	68fb      	ldr	r3, [r7, #12]
 81049bc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 81049c0:	e057      	b.n	8104a72 <HAL_SPI_Transmit+0x37a>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 81049c2:	68fb      	ldr	r3, [r7, #12]
 81049c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81049c8:	b29b      	uxth	r3, r3
 81049ca:	2b01      	cmp	r3, #1
 81049cc:	d917      	bls.n	81049fe <HAL_SPI_Transmit+0x306>
 81049ce:	68fb      	ldr	r3, [r7, #12]
 81049d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81049d2:	2b00      	cmp	r3, #0
 81049d4:	d013      	beq.n	81049fe <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 81049d6:	68fb      	ldr	r3, [r7, #12]
 81049d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81049da:	881a      	ldrh	r2, [r3, #0]
 81049dc:	69fb      	ldr	r3, [r7, #28]
 81049de:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 81049e0:	68fb      	ldr	r3, [r7, #12]
 81049e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81049e4:	1c9a      	adds	r2, r3, #2
 81049e6:	68fb      	ldr	r3, [r7, #12]
 81049e8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 81049ea:	68fb      	ldr	r3, [r7, #12]
 81049ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81049f0:	b29b      	uxth	r3, r3
 81049f2:	3b02      	subs	r3, #2
 81049f4:	b29a      	uxth	r2, r3
 81049f6:	68fb      	ldr	r3, [r7, #12]
 81049f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 81049fc:	e039      	b.n	8104a72 <HAL_SPI_Transmit+0x37a>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 81049fe:	68fb      	ldr	r3, [r7, #12]
 8104a00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8104a02:	68fb      	ldr	r3, [r7, #12]
 8104a04:	681b      	ldr	r3, [r3, #0]
 8104a06:	3320      	adds	r3, #32
 8104a08:	7812      	ldrb	r2, [r2, #0]
 8104a0a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8104a0c:	68fb      	ldr	r3, [r7, #12]
 8104a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104a10:	1c5a      	adds	r2, r3, #1
 8104a12:	68fb      	ldr	r3, [r7, #12]
 8104a14:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8104a16:	68fb      	ldr	r3, [r7, #12]
 8104a18:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104a1c:	b29b      	uxth	r3, r3
 8104a1e:	3b01      	subs	r3, #1
 8104a20:	b29a      	uxth	r2, r3
 8104a22:	68fb      	ldr	r3, [r7, #12]
 8104a24:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8104a28:	e023      	b.n	8104a72 <HAL_SPI_Transmit+0x37a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104a2a:	f7fc ff43 	bl	81018b4 <HAL_GetTick>
 8104a2e:	4602      	mov	r2, r0
 8104a30:	697b      	ldr	r3, [r7, #20]
 8104a32:	1ad3      	subs	r3, r2, r3
 8104a34:	683a      	ldr	r2, [r7, #0]
 8104a36:	429a      	cmp	r2, r3
 8104a38:	d803      	bhi.n	8104a42 <HAL_SPI_Transmit+0x34a>
 8104a3a:	683b      	ldr	r3, [r7, #0]
 8104a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104a40:	d102      	bne.n	8104a48 <HAL_SPI_Transmit+0x350>
 8104a42:	683b      	ldr	r3, [r7, #0]
 8104a44:	2b00      	cmp	r3, #0
 8104a46:	d114      	bne.n	8104a72 <HAL_SPI_Transmit+0x37a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8104a48:	68f8      	ldr	r0, [r7, #12]
 8104a4a:	f000 fc02 	bl	8105252 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8104a4e:	68fb      	ldr	r3, [r7, #12]
 8104a50:	2200      	movs	r2, #0
 8104a52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8104a56:	68fb      	ldr	r3, [r7, #12]
 8104a58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104a5c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8104a60:	68fb      	ldr	r3, [r7, #12]
 8104a62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8104a66:	68fb      	ldr	r3, [r7, #12]
 8104a68:	2201      	movs	r2, #1
 8104a6a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8104a6e:	2303      	movs	r3, #3
 8104a70:	e02c      	b.n	8104acc <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 8104a72:	68fb      	ldr	r3, [r7, #12]
 8104a74:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104a78:	b29b      	uxth	r3, r3
 8104a7a:	2b00      	cmp	r3, #0
 8104a7c:	f47f af7b 	bne.w	8104976 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8104a80:	683b      	ldr	r3, [r7, #0]
 8104a82:	9300      	str	r3, [sp, #0]
 8104a84:	697b      	ldr	r3, [r7, #20]
 8104a86:	2200      	movs	r2, #0
 8104a88:	2108      	movs	r1, #8
 8104a8a:	68f8      	ldr	r0, [r7, #12]
 8104a8c:	f000 fc81 	bl	8105392 <SPI_WaitOnFlagUntilTimeout>
 8104a90:	4603      	mov	r3, r0
 8104a92:	2b00      	cmp	r3, #0
 8104a94:	d007      	beq.n	8104aa6 <HAL_SPI_Transmit+0x3ae>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8104a96:	68fb      	ldr	r3, [r7, #12]
 8104a98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104a9c:	f043 0220 	orr.w	r2, r3, #32
 8104aa0:	68fb      	ldr	r3, [r7, #12]
 8104aa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8104aa6:	68f8      	ldr	r0, [r7, #12]
 8104aa8:	f000 fbd3 	bl	8105252 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8104aac:	68fb      	ldr	r3, [r7, #12]
 8104aae:	2200      	movs	r2, #0
 8104ab0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8104ab4:	68fb      	ldr	r3, [r7, #12]
 8104ab6:	2201      	movs	r2, #1
 8104ab8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8104abc:	68fb      	ldr	r3, [r7, #12]
 8104abe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104ac2:	2b00      	cmp	r3, #0
 8104ac4:	d001      	beq.n	8104aca <HAL_SPI_Transmit+0x3d2>
  {
    return HAL_ERROR;
 8104ac6:	2301      	movs	r3, #1
 8104ac8:	e000      	b.n	8104acc <HAL_SPI_Transmit+0x3d4>
  }
  return errorcode;
 8104aca:	7efb      	ldrb	r3, [r7, #27]
}
 8104acc:	4618      	mov	r0, r3
 8104ace:	3720      	adds	r7, #32
 8104ad0:	46bd      	mov	sp, r7
 8104ad2:	bd80      	pop	{r7, pc}

08104ad4 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8104ad4:	b580      	push	{r7, lr}
 8104ad6:	b08a      	sub	sp, #40	; 0x28
 8104ad8:	af02      	add	r7, sp, #8
 8104ada:	60f8      	str	r0, [r7, #12]
 8104adc:	60b9      	str	r1, [r7, #8]
 8104ade:	603b      	str	r3, [r7, #0]
 8104ae0:	4613      	mov	r3, r2
 8104ae2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8104ae4:	2300      	movs	r3, #0
 8104ae6:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8104ae8:	68fb      	ldr	r3, [r7, #12]
 8104aea:	681b      	ldr	r3, [r3, #0]
 8104aec:	3330      	adds	r3, #48	; 0x30
 8104aee:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8104af0:	68fb      	ldr	r3, [r7, #12]
 8104af2:	685b      	ldr	r3, [r3, #4]
 8104af4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104af8:	d112      	bne.n	8104b20 <HAL_SPI_Receive+0x4c>
 8104afa:	68fb      	ldr	r3, [r7, #12]
 8104afc:	689b      	ldr	r3, [r3, #8]
 8104afe:	2b00      	cmp	r3, #0
 8104b00:	d10e      	bne.n	8104b20 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8104b02:	68fb      	ldr	r3, [r7, #12]
 8104b04:	2204      	movs	r2, #4
 8104b06:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8104b0a:	88fa      	ldrh	r2, [r7, #6]
 8104b0c:	683b      	ldr	r3, [r7, #0]
 8104b0e:	9300      	str	r3, [sp, #0]
 8104b10:	4613      	mov	r3, r2
 8104b12:	68ba      	ldr	r2, [r7, #8]
 8104b14:	68b9      	ldr	r1, [r7, #8]
 8104b16:	68f8      	ldr	r0, [r7, #12]
 8104b18:	f000 f976 	bl	8104e08 <HAL_SPI_TransmitReceive>
 8104b1c:	4603      	mov	r3, r0
 8104b1e:	e16f      	b.n	8104e00 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8104b20:	68fb      	ldr	r3, [r7, #12]
 8104b22:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8104b26:	2b01      	cmp	r3, #1
 8104b28:	d101      	bne.n	8104b2e <HAL_SPI_Receive+0x5a>
 8104b2a:	2302      	movs	r3, #2
 8104b2c:	e168      	b.n	8104e00 <HAL_SPI_Receive+0x32c>
 8104b2e:	68fb      	ldr	r3, [r7, #12]
 8104b30:	2201      	movs	r2, #1
 8104b32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8104b36:	f7fc febd 	bl	81018b4 <HAL_GetTick>
 8104b3a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8104b3c:	68fb      	ldr	r3, [r7, #12]
 8104b3e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8104b42:	b2db      	uxtb	r3, r3
 8104b44:	2b01      	cmp	r3, #1
 8104b46:	d007      	beq.n	8104b58 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8104b48:	2302      	movs	r3, #2
 8104b4a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8104b4c:	68fb      	ldr	r3, [r7, #12]
 8104b4e:	2200      	movs	r2, #0
 8104b50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8104b54:	7ffb      	ldrb	r3, [r7, #31]
 8104b56:	e153      	b.n	8104e00 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8104b58:	68bb      	ldr	r3, [r7, #8]
 8104b5a:	2b00      	cmp	r3, #0
 8104b5c:	d002      	beq.n	8104b64 <HAL_SPI_Receive+0x90>
 8104b5e:	88fb      	ldrh	r3, [r7, #6]
 8104b60:	2b00      	cmp	r3, #0
 8104b62:	d107      	bne.n	8104b74 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8104b64:	2301      	movs	r3, #1
 8104b66:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8104b68:	68fb      	ldr	r3, [r7, #12]
 8104b6a:	2200      	movs	r2, #0
 8104b6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8104b70:	7ffb      	ldrb	r3, [r7, #31]
 8104b72:	e145      	b.n	8104e00 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8104b74:	68fb      	ldr	r3, [r7, #12]
 8104b76:	2204      	movs	r2, #4
 8104b78:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8104b7c:	68fb      	ldr	r3, [r7, #12]
 8104b7e:	2200      	movs	r2, #0
 8104b80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8104b84:	68fb      	ldr	r3, [r7, #12]
 8104b86:	68ba      	ldr	r2, [r7, #8]
 8104b88:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8104b8a:	68fb      	ldr	r3, [r7, #12]
 8104b8c:	88fa      	ldrh	r2, [r7, #6]
 8104b8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8104b92:	68fb      	ldr	r3, [r7, #12]
 8104b94:	88fa      	ldrh	r2, [r7, #6]
 8104b96:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8104b9a:	68fb      	ldr	r3, [r7, #12]
 8104b9c:	2200      	movs	r2, #0
 8104b9e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8104ba0:	68fb      	ldr	r3, [r7, #12]
 8104ba2:	2200      	movs	r2, #0
 8104ba4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8104ba8:	68fb      	ldr	r3, [r7, #12]
 8104baa:	2200      	movs	r2, #0
 8104bac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8104bb0:	68fb      	ldr	r3, [r7, #12]
 8104bb2:	2200      	movs	r2, #0
 8104bb4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8104bb6:	68fb      	ldr	r3, [r7, #12]
 8104bb8:	2200      	movs	r2, #0
 8104bba:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8104bbc:	68fb      	ldr	r3, [r7, #12]
 8104bbe:	689b      	ldr	r3, [r3, #8]
 8104bc0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8104bc4:	d107      	bne.n	8104bd6 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8104bc6:	68fb      	ldr	r3, [r7, #12]
 8104bc8:	681b      	ldr	r3, [r3, #0]
 8104bca:	681a      	ldr	r2, [r3, #0]
 8104bcc:	68fb      	ldr	r3, [r7, #12]
 8104bce:	681b      	ldr	r3, [r3, #0]
 8104bd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8104bd4:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8104bd6:	68fb      	ldr	r3, [r7, #12]
 8104bd8:	681b      	ldr	r3, [r3, #0]
 8104bda:	685b      	ldr	r3, [r3, #4]
 8104bdc:	0c1b      	lsrs	r3, r3, #16
 8104bde:	041b      	lsls	r3, r3, #16
 8104be0:	88f9      	ldrh	r1, [r7, #6]
 8104be2:	68fa      	ldr	r2, [r7, #12]
 8104be4:	6812      	ldr	r2, [r2, #0]
 8104be6:	430b      	orrs	r3, r1
 8104be8:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8104bea:	68fb      	ldr	r3, [r7, #12]
 8104bec:	681b      	ldr	r3, [r3, #0]
 8104bee:	681a      	ldr	r2, [r3, #0]
 8104bf0:	68fb      	ldr	r3, [r7, #12]
 8104bf2:	681b      	ldr	r3, [r3, #0]
 8104bf4:	f042 0201 	orr.w	r2, r2, #1
 8104bf8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8104bfa:	68fb      	ldr	r3, [r7, #12]
 8104bfc:	685b      	ldr	r3, [r3, #4]
 8104bfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104c02:	d107      	bne.n	8104c14 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8104c04:	68fb      	ldr	r3, [r7, #12]
 8104c06:	681b      	ldr	r3, [r3, #0]
 8104c08:	681a      	ldr	r2, [r3, #0]
 8104c0a:	68fb      	ldr	r3, [r7, #12]
 8104c0c:	681b      	ldr	r3, [r3, #0]
 8104c0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8104c12:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8104c14:	68fb      	ldr	r3, [r7, #12]
 8104c16:	68db      	ldr	r3, [r3, #12]
 8104c18:	2b0f      	cmp	r3, #15
 8104c1a:	d948      	bls.n	8104cae <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8104c1c:	e040      	b.n	8104ca0 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8104c1e:	68fb      	ldr	r3, [r7, #12]
 8104c20:	681b      	ldr	r3, [r3, #0]
 8104c22:	695a      	ldr	r2, [r3, #20]
 8104c24:	f248 0308 	movw	r3, #32776	; 0x8008
 8104c28:	4013      	ands	r3, r2
 8104c2a:	2b00      	cmp	r3, #0
 8104c2c:	d014      	beq.n	8104c58 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8104c2e:	68fb      	ldr	r3, [r7, #12]
 8104c30:	681a      	ldr	r2, [r3, #0]
 8104c32:	68fb      	ldr	r3, [r7, #12]
 8104c34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104c36:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8104c38:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8104c3a:	68fb      	ldr	r3, [r7, #12]
 8104c3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104c3e:	1d1a      	adds	r2, r3, #4
 8104c40:	68fb      	ldr	r3, [r7, #12]
 8104c42:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8104c44:	68fb      	ldr	r3, [r7, #12]
 8104c46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104c4a:	b29b      	uxth	r3, r3
 8104c4c:	3b01      	subs	r3, #1
 8104c4e:	b29a      	uxth	r2, r3
 8104c50:	68fb      	ldr	r3, [r7, #12]
 8104c52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8104c56:	e023      	b.n	8104ca0 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104c58:	f7fc fe2c 	bl	81018b4 <HAL_GetTick>
 8104c5c:	4602      	mov	r2, r0
 8104c5e:	697b      	ldr	r3, [r7, #20]
 8104c60:	1ad3      	subs	r3, r2, r3
 8104c62:	683a      	ldr	r2, [r7, #0]
 8104c64:	429a      	cmp	r2, r3
 8104c66:	d803      	bhi.n	8104c70 <HAL_SPI_Receive+0x19c>
 8104c68:	683b      	ldr	r3, [r7, #0]
 8104c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104c6e:	d102      	bne.n	8104c76 <HAL_SPI_Receive+0x1a2>
 8104c70:	683b      	ldr	r3, [r7, #0]
 8104c72:	2b00      	cmp	r3, #0
 8104c74:	d114      	bne.n	8104ca0 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8104c76:	68f8      	ldr	r0, [r7, #12]
 8104c78:	f000 faeb 	bl	8105252 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8104c7c:	68fb      	ldr	r3, [r7, #12]
 8104c7e:	2200      	movs	r2, #0
 8104c80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8104c84:	68fb      	ldr	r3, [r7, #12]
 8104c86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104c8a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8104c8e:	68fb      	ldr	r3, [r7, #12]
 8104c90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8104c94:	68fb      	ldr	r3, [r7, #12]
 8104c96:	2201      	movs	r2, #1
 8104c98:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8104c9c:	2303      	movs	r3, #3
 8104c9e:	e0af      	b.n	8104e00 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8104ca0:	68fb      	ldr	r3, [r7, #12]
 8104ca2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104ca6:	b29b      	uxth	r3, r3
 8104ca8:	2b00      	cmp	r3, #0
 8104caa:	d1b8      	bne.n	8104c1e <HAL_SPI_Receive+0x14a>
 8104cac:	e095      	b.n	8104dda <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8104cae:	68fb      	ldr	r3, [r7, #12]
 8104cb0:	68db      	ldr	r3, [r3, #12]
 8104cb2:	2b07      	cmp	r3, #7
 8104cb4:	f240 808b 	bls.w	8104dce <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8104cb8:	e03f      	b.n	8104d3a <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8104cba:	68fb      	ldr	r3, [r7, #12]
 8104cbc:	681b      	ldr	r3, [r3, #0]
 8104cbe:	695b      	ldr	r3, [r3, #20]
 8104cc0:	f003 0301 	and.w	r3, r3, #1
 8104cc4:	2b01      	cmp	r3, #1
 8104cc6:	d114      	bne.n	8104cf2 <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8104cc8:	68fb      	ldr	r3, [r7, #12]
 8104cca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104ccc:	69ba      	ldr	r2, [r7, #24]
 8104cce:	8812      	ldrh	r2, [r2, #0]
 8104cd0:	b292      	uxth	r2, r2
 8104cd2:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8104cd4:	68fb      	ldr	r3, [r7, #12]
 8104cd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104cd8:	1c9a      	adds	r2, r3, #2
 8104cda:	68fb      	ldr	r3, [r7, #12]
 8104cdc:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8104cde:	68fb      	ldr	r3, [r7, #12]
 8104ce0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104ce4:	b29b      	uxth	r3, r3
 8104ce6:	3b01      	subs	r3, #1
 8104ce8:	b29a      	uxth	r2, r3
 8104cea:	68fb      	ldr	r3, [r7, #12]
 8104cec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8104cf0:	e023      	b.n	8104d3a <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104cf2:	f7fc fddf 	bl	81018b4 <HAL_GetTick>
 8104cf6:	4602      	mov	r2, r0
 8104cf8:	697b      	ldr	r3, [r7, #20]
 8104cfa:	1ad3      	subs	r3, r2, r3
 8104cfc:	683a      	ldr	r2, [r7, #0]
 8104cfe:	429a      	cmp	r2, r3
 8104d00:	d803      	bhi.n	8104d0a <HAL_SPI_Receive+0x236>
 8104d02:	683b      	ldr	r3, [r7, #0]
 8104d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104d08:	d102      	bne.n	8104d10 <HAL_SPI_Receive+0x23c>
 8104d0a:	683b      	ldr	r3, [r7, #0]
 8104d0c:	2b00      	cmp	r3, #0
 8104d0e:	d114      	bne.n	8104d3a <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8104d10:	68f8      	ldr	r0, [r7, #12]
 8104d12:	f000 fa9e 	bl	8105252 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8104d16:	68fb      	ldr	r3, [r7, #12]
 8104d18:	2200      	movs	r2, #0
 8104d1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8104d1e:	68fb      	ldr	r3, [r7, #12]
 8104d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104d24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8104d28:	68fb      	ldr	r3, [r7, #12]
 8104d2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8104d2e:	68fb      	ldr	r3, [r7, #12]
 8104d30:	2201      	movs	r2, #1
 8104d32:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8104d36:	2303      	movs	r3, #3
 8104d38:	e062      	b.n	8104e00 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8104d3a:	68fb      	ldr	r3, [r7, #12]
 8104d3c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104d40:	b29b      	uxth	r3, r3
 8104d42:	2b00      	cmp	r3, #0
 8104d44:	d1b9      	bne.n	8104cba <HAL_SPI_Receive+0x1e6>
 8104d46:	e048      	b.n	8104dda <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8104d48:	68fb      	ldr	r3, [r7, #12]
 8104d4a:	681b      	ldr	r3, [r3, #0]
 8104d4c:	695b      	ldr	r3, [r3, #20]
 8104d4e:	f003 0301 	and.w	r3, r3, #1
 8104d52:	2b01      	cmp	r3, #1
 8104d54:	d117      	bne.n	8104d86 <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8104d56:	68fb      	ldr	r3, [r7, #12]
 8104d58:	681b      	ldr	r3, [r3, #0]
 8104d5a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8104d5e:	68fb      	ldr	r3, [r7, #12]
 8104d60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104d62:	7812      	ldrb	r2, [r2, #0]
 8104d64:	b2d2      	uxtb	r2, r2
 8104d66:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8104d68:	68fb      	ldr	r3, [r7, #12]
 8104d6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104d6c:	1c5a      	adds	r2, r3, #1
 8104d6e:	68fb      	ldr	r3, [r7, #12]
 8104d70:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8104d72:	68fb      	ldr	r3, [r7, #12]
 8104d74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104d78:	b29b      	uxth	r3, r3
 8104d7a:	3b01      	subs	r3, #1
 8104d7c:	b29a      	uxth	r2, r3
 8104d7e:	68fb      	ldr	r3, [r7, #12]
 8104d80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8104d84:	e023      	b.n	8104dce <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104d86:	f7fc fd95 	bl	81018b4 <HAL_GetTick>
 8104d8a:	4602      	mov	r2, r0
 8104d8c:	697b      	ldr	r3, [r7, #20]
 8104d8e:	1ad3      	subs	r3, r2, r3
 8104d90:	683a      	ldr	r2, [r7, #0]
 8104d92:	429a      	cmp	r2, r3
 8104d94:	d803      	bhi.n	8104d9e <HAL_SPI_Receive+0x2ca>
 8104d96:	683b      	ldr	r3, [r7, #0]
 8104d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104d9c:	d102      	bne.n	8104da4 <HAL_SPI_Receive+0x2d0>
 8104d9e:	683b      	ldr	r3, [r7, #0]
 8104da0:	2b00      	cmp	r3, #0
 8104da2:	d114      	bne.n	8104dce <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8104da4:	68f8      	ldr	r0, [r7, #12]
 8104da6:	f000 fa54 	bl	8105252 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8104daa:	68fb      	ldr	r3, [r7, #12]
 8104dac:	2200      	movs	r2, #0
 8104dae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8104db2:	68fb      	ldr	r3, [r7, #12]
 8104db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104db8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8104dbc:	68fb      	ldr	r3, [r7, #12]
 8104dbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8104dc2:	68fb      	ldr	r3, [r7, #12]
 8104dc4:	2201      	movs	r2, #1
 8104dc6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8104dca:	2303      	movs	r3, #3
 8104dcc:	e018      	b.n	8104e00 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8104dce:	68fb      	ldr	r3, [r7, #12]
 8104dd0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104dd4:	b29b      	uxth	r3, r3
 8104dd6:	2b00      	cmp	r3, #0
 8104dd8:	d1b6      	bne.n	8104d48 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8104dda:	68f8      	ldr	r0, [r7, #12]
 8104ddc:	f000 fa39 	bl	8105252 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8104de0:	68fb      	ldr	r3, [r7, #12]
 8104de2:	2200      	movs	r2, #0
 8104de4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8104de8:	68fb      	ldr	r3, [r7, #12]
 8104dea:	2201      	movs	r2, #1
 8104dec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8104df0:	68fb      	ldr	r3, [r7, #12]
 8104df2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104df6:	2b00      	cmp	r3, #0
 8104df8:	d001      	beq.n	8104dfe <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 8104dfa:	2301      	movs	r3, #1
 8104dfc:	e000      	b.n	8104e00 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 8104dfe:	7ffb      	ldrb	r3, [r7, #31]
}
 8104e00:	4618      	mov	r0, r3
 8104e02:	3720      	adds	r7, #32
 8104e04:	46bd      	mov	sp, r7
 8104e06:	bd80      	pop	{r7, pc}

08104e08 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8104e08:	b580      	push	{r7, lr}
 8104e0a:	b08e      	sub	sp, #56	; 0x38
 8104e0c:	af02      	add	r7, sp, #8
 8104e0e:	60f8      	str	r0, [r7, #12]
 8104e10:	60b9      	str	r1, [r7, #8]
 8104e12:	607a      	str	r2, [r7, #4]
 8104e14:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8104e16:	2300      	movs	r3, #0
 8104e18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8104e1c:	68fb      	ldr	r3, [r7, #12]
 8104e1e:	681b      	ldr	r3, [r3, #0]
 8104e20:	3320      	adds	r3, #32
 8104e22:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8104e24:	68fb      	ldr	r3, [r7, #12]
 8104e26:	681b      	ldr	r3, [r3, #0]
 8104e28:	3330      	adds	r3, #48	; 0x30
 8104e2a:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8104e2c:	68fb      	ldr	r3, [r7, #12]
 8104e2e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8104e32:	2b01      	cmp	r3, #1
 8104e34:	d101      	bne.n	8104e3a <HAL_SPI_TransmitReceive+0x32>
 8104e36:	2302      	movs	r3, #2
 8104e38:	e207      	b.n	810524a <HAL_SPI_TransmitReceive+0x442>
 8104e3a:	68fb      	ldr	r3, [r7, #12]
 8104e3c:	2201      	movs	r2, #1
 8104e3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8104e42:	f7fc fd37 	bl	81018b4 <HAL_GetTick>
 8104e46:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8104e48:	887b      	ldrh	r3, [r7, #2]
 8104e4a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8104e4c:	887b      	ldrh	r3, [r7, #2]
 8104e4e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8104e50:	68fb      	ldr	r3, [r7, #12]
 8104e52:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8104e56:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8104e58:	68fb      	ldr	r3, [r7, #12]
 8104e5a:	685b      	ldr	r3, [r3, #4]
 8104e5c:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8104e5e:	7efb      	ldrb	r3, [r7, #27]
 8104e60:	2b01      	cmp	r3, #1
 8104e62:	d014      	beq.n	8104e8e <HAL_SPI_TransmitReceive+0x86>
 8104e64:	697b      	ldr	r3, [r7, #20]
 8104e66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104e6a:	d106      	bne.n	8104e7a <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8104e6c:	68fb      	ldr	r3, [r7, #12]
 8104e6e:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8104e70:	2b00      	cmp	r3, #0
 8104e72:	d102      	bne.n	8104e7a <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8104e74:	7efb      	ldrb	r3, [r7, #27]
 8104e76:	2b04      	cmp	r3, #4
 8104e78:	d009      	beq.n	8104e8e <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8104e7a:	2302      	movs	r3, #2
 8104e7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8104e80:	68fb      	ldr	r3, [r7, #12]
 8104e82:	2200      	movs	r2, #0
 8104e84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8104e88:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8104e8c:	e1dd      	b.n	810524a <HAL_SPI_TransmitReceive+0x442>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8104e8e:	68bb      	ldr	r3, [r7, #8]
 8104e90:	2b00      	cmp	r3, #0
 8104e92:	d005      	beq.n	8104ea0 <HAL_SPI_TransmitReceive+0x98>
 8104e94:	687b      	ldr	r3, [r7, #4]
 8104e96:	2b00      	cmp	r3, #0
 8104e98:	d002      	beq.n	8104ea0 <HAL_SPI_TransmitReceive+0x98>
 8104e9a:	887b      	ldrh	r3, [r7, #2]
 8104e9c:	2b00      	cmp	r3, #0
 8104e9e:	d109      	bne.n	8104eb4 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8104ea0:	2301      	movs	r3, #1
 8104ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8104ea6:	68fb      	ldr	r3, [r7, #12]
 8104ea8:	2200      	movs	r2, #0
 8104eaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8104eae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8104eb2:	e1ca      	b.n	810524a <HAL_SPI_TransmitReceive+0x442>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8104eb4:	68fb      	ldr	r3, [r7, #12]
 8104eb6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8104eba:	b2db      	uxtb	r3, r3
 8104ebc:	2b04      	cmp	r3, #4
 8104ebe:	d003      	beq.n	8104ec8 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8104ec0:	68fb      	ldr	r3, [r7, #12]
 8104ec2:	2205      	movs	r2, #5
 8104ec4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8104ec8:	68fb      	ldr	r3, [r7, #12]
 8104eca:	2200      	movs	r2, #0
 8104ecc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8104ed0:	68fb      	ldr	r3, [r7, #12]
 8104ed2:	687a      	ldr	r2, [r7, #4]
 8104ed4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8104ed6:	68fb      	ldr	r3, [r7, #12]
 8104ed8:	887a      	ldrh	r2, [r7, #2]
 8104eda:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8104ede:	68fb      	ldr	r3, [r7, #12]
 8104ee0:	887a      	ldrh	r2, [r7, #2]
 8104ee2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8104ee6:	68fb      	ldr	r3, [r7, #12]
 8104ee8:	68ba      	ldr	r2, [r7, #8]
 8104eea:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8104eec:	68fb      	ldr	r3, [r7, #12]
 8104eee:	887a      	ldrh	r2, [r7, #2]
 8104ef0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8104ef4:	68fb      	ldr	r3, [r7, #12]
 8104ef6:	887a      	ldrh	r2, [r7, #2]
 8104ef8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8104efc:	68fb      	ldr	r3, [r7, #12]
 8104efe:	2200      	movs	r2, #0
 8104f00:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8104f02:	68fb      	ldr	r3, [r7, #12]
 8104f04:	2200      	movs	r2, #0
 8104f06:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8104f08:	68fb      	ldr	r3, [r7, #12]
 8104f0a:	681b      	ldr	r3, [r3, #0]
 8104f0c:	685b      	ldr	r3, [r3, #4]
 8104f0e:	0c1b      	lsrs	r3, r3, #16
 8104f10:	041b      	lsls	r3, r3, #16
 8104f12:	8879      	ldrh	r1, [r7, #2]
 8104f14:	68fa      	ldr	r2, [r7, #12]
 8104f16:	6812      	ldr	r2, [r2, #0]
 8104f18:	430b      	orrs	r3, r1
 8104f1a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8104f1c:	68fb      	ldr	r3, [r7, #12]
 8104f1e:	681b      	ldr	r3, [r3, #0]
 8104f20:	681a      	ldr	r2, [r3, #0]
 8104f22:	68fb      	ldr	r3, [r7, #12]
 8104f24:	681b      	ldr	r3, [r3, #0]
 8104f26:	f042 0201 	orr.w	r2, r2, #1
 8104f2a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8104f2c:	68fb      	ldr	r3, [r7, #12]
 8104f2e:	685b      	ldr	r3, [r3, #4]
 8104f30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104f34:	d107      	bne.n	8104f46 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8104f36:	68fb      	ldr	r3, [r7, #12]
 8104f38:	681b      	ldr	r3, [r3, #0]
 8104f3a:	681a      	ldr	r2, [r3, #0]
 8104f3c:	68fb      	ldr	r3, [r7, #12]
 8104f3e:	681b      	ldr	r3, [r3, #0]
 8104f40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8104f44:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8104f46:	68fb      	ldr	r3, [r7, #12]
 8104f48:	68db      	ldr	r3, [r3, #12]
 8104f4a:	2b0f      	cmp	r3, #15
 8104f4c:	d970      	bls.n	8105030 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8104f4e:	e068      	b.n	8105022 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8104f50:	68fb      	ldr	r3, [r7, #12]
 8104f52:	681b      	ldr	r3, [r3, #0]
 8104f54:	695b      	ldr	r3, [r3, #20]
 8104f56:	f003 0302 	and.w	r3, r3, #2
 8104f5a:	2b02      	cmp	r3, #2
 8104f5c:	d11a      	bne.n	8104f94 <HAL_SPI_TransmitReceive+0x18c>
 8104f5e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8104f60:	2b00      	cmp	r3, #0
 8104f62:	d017      	beq.n	8104f94 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8104f64:	68fb      	ldr	r3, [r7, #12]
 8104f66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8104f68:	68fb      	ldr	r3, [r7, #12]
 8104f6a:	681b      	ldr	r3, [r3, #0]
 8104f6c:	6812      	ldr	r2, [r2, #0]
 8104f6e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8104f70:	68fb      	ldr	r3, [r7, #12]
 8104f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104f74:	1d1a      	adds	r2, r3, #4
 8104f76:	68fb      	ldr	r3, [r7, #12]
 8104f78:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8104f7a:	68fb      	ldr	r3, [r7, #12]
 8104f7c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104f80:	b29b      	uxth	r3, r3
 8104f82:	3b01      	subs	r3, #1
 8104f84:	b29a      	uxth	r2, r3
 8104f86:	68fb      	ldr	r3, [r7, #12]
 8104f88:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8104f8c:	68fb      	ldr	r3, [r7, #12]
 8104f8e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104f92:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8104f94:	68fb      	ldr	r3, [r7, #12]
 8104f96:	681b      	ldr	r3, [r3, #0]
 8104f98:	695a      	ldr	r2, [r3, #20]
 8104f9a:	f248 0308 	movw	r3, #32776	; 0x8008
 8104f9e:	4013      	ands	r3, r2
 8104fa0:	2b00      	cmp	r3, #0
 8104fa2:	d01a      	beq.n	8104fda <HAL_SPI_TransmitReceive+0x1d2>
 8104fa4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8104fa6:	2b00      	cmp	r3, #0
 8104fa8:	d017      	beq.n	8104fda <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8104faa:	68fb      	ldr	r3, [r7, #12]
 8104fac:	681a      	ldr	r2, [r3, #0]
 8104fae:	68fb      	ldr	r3, [r7, #12]
 8104fb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104fb2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8104fb4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8104fb6:	68fb      	ldr	r3, [r7, #12]
 8104fb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104fba:	1d1a      	adds	r2, r3, #4
 8104fbc:	68fb      	ldr	r3, [r7, #12]
 8104fbe:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8104fc0:	68fb      	ldr	r3, [r7, #12]
 8104fc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104fc6:	b29b      	uxth	r3, r3
 8104fc8:	3b01      	subs	r3, #1
 8104fca:	b29a      	uxth	r2, r3
 8104fcc:	68fb      	ldr	r3, [r7, #12]
 8104fce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8104fd2:	68fb      	ldr	r3, [r7, #12]
 8104fd4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104fd8:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104fda:	f7fc fc6b 	bl	81018b4 <HAL_GetTick>
 8104fde:	4602      	mov	r2, r0
 8104fe0:	69fb      	ldr	r3, [r7, #28]
 8104fe2:	1ad3      	subs	r3, r2, r3
 8104fe4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8104fe6:	429a      	cmp	r2, r3
 8104fe8:	d803      	bhi.n	8104ff2 <HAL_SPI_TransmitReceive+0x1ea>
 8104fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104ff0:	d102      	bne.n	8104ff8 <HAL_SPI_TransmitReceive+0x1f0>
 8104ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104ff4:	2b00      	cmp	r3, #0
 8104ff6:	d114      	bne.n	8105022 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8104ff8:	68f8      	ldr	r0, [r7, #12]
 8104ffa:	f000 f92a 	bl	8105252 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8104ffe:	68fb      	ldr	r3, [r7, #12]
 8105000:	2200      	movs	r2, #0
 8105002:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8105006:	68fb      	ldr	r3, [r7, #12]
 8105008:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810500c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8105010:	68fb      	ldr	r3, [r7, #12]
 8105012:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8105016:	68fb      	ldr	r3, [r7, #12]
 8105018:	2201      	movs	r2, #1
 810501a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 810501e:	2303      	movs	r3, #3
 8105020:	e113      	b.n	810524a <HAL_SPI_TransmitReceive+0x442>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8105022:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8105024:	2b00      	cmp	r3, #0
 8105026:	d193      	bne.n	8104f50 <HAL_SPI_TransmitReceive+0x148>
 8105028:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 810502a:	2b00      	cmp	r3, #0
 810502c:	d190      	bne.n	8104f50 <HAL_SPI_TransmitReceive+0x148>
 810502e:	e0e5      	b.n	81051fc <HAL_SPI_TransmitReceive+0x3f4>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8105030:	68fb      	ldr	r3, [r7, #12]
 8105032:	68db      	ldr	r3, [r3, #12]
 8105034:	2b07      	cmp	r3, #7
 8105036:	f240 80db 	bls.w	81051f0 <HAL_SPI_TransmitReceive+0x3e8>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 810503a:	e066      	b.n	810510a <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 810503c:	68fb      	ldr	r3, [r7, #12]
 810503e:	681b      	ldr	r3, [r3, #0]
 8105040:	695b      	ldr	r3, [r3, #20]
 8105042:	f003 0302 	and.w	r3, r3, #2
 8105046:	2b02      	cmp	r3, #2
 8105048:	d119      	bne.n	810507e <HAL_SPI_TransmitReceive+0x276>
 810504a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 810504c:	2b00      	cmp	r3, #0
 810504e:	d016      	beq.n	810507e <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8105050:	68fb      	ldr	r3, [r7, #12]
 8105052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105054:	881a      	ldrh	r2, [r3, #0]
 8105056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105058:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 810505a:	68fb      	ldr	r3, [r7, #12]
 810505c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810505e:	1c9a      	adds	r2, r3, #2
 8105060:	68fb      	ldr	r3, [r7, #12]
 8105062:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8105064:	68fb      	ldr	r3, [r7, #12]
 8105066:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810506a:	b29b      	uxth	r3, r3
 810506c:	3b01      	subs	r3, #1
 810506e:	b29a      	uxth	r2, r3
 8105070:	68fb      	ldr	r3, [r7, #12]
 8105072:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8105076:	68fb      	ldr	r3, [r7, #12]
 8105078:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810507c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 810507e:	68fb      	ldr	r3, [r7, #12]
 8105080:	681b      	ldr	r3, [r3, #0]
 8105082:	695b      	ldr	r3, [r3, #20]
 8105084:	f003 0301 	and.w	r3, r3, #1
 8105088:	2b01      	cmp	r3, #1
 810508a:	d11a      	bne.n	81050c2 <HAL_SPI_TransmitReceive+0x2ba>
 810508c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 810508e:	2b00      	cmp	r3, #0
 8105090:	d017      	beq.n	81050c2 <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8105092:	68fb      	ldr	r3, [r7, #12]
 8105094:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105096:	6a3a      	ldr	r2, [r7, #32]
 8105098:	8812      	ldrh	r2, [r2, #0]
 810509a:	b292      	uxth	r2, r2
 810509c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 810509e:	68fb      	ldr	r3, [r7, #12]
 81050a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81050a2:	1c9a      	adds	r2, r3, #2
 81050a4:	68fb      	ldr	r3, [r7, #12]
 81050a6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 81050a8:	68fb      	ldr	r3, [r7, #12]
 81050aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81050ae:	b29b      	uxth	r3, r3
 81050b0:	3b01      	subs	r3, #1
 81050b2:	b29a      	uxth	r2, r3
 81050b4:	68fb      	ldr	r3, [r7, #12]
 81050b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 81050ba:	68fb      	ldr	r3, [r7, #12]
 81050bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81050c0:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81050c2:	f7fc fbf7 	bl	81018b4 <HAL_GetTick>
 81050c6:	4602      	mov	r2, r0
 81050c8:	69fb      	ldr	r3, [r7, #28]
 81050ca:	1ad3      	subs	r3, r2, r3
 81050cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 81050ce:	429a      	cmp	r2, r3
 81050d0:	d803      	bhi.n	81050da <HAL_SPI_TransmitReceive+0x2d2>
 81050d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81050d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81050d8:	d102      	bne.n	81050e0 <HAL_SPI_TransmitReceive+0x2d8>
 81050da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81050dc:	2b00      	cmp	r3, #0
 81050de:	d114      	bne.n	810510a <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 81050e0:	68f8      	ldr	r0, [r7, #12]
 81050e2:	f000 f8b6 	bl	8105252 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 81050e6:	68fb      	ldr	r3, [r7, #12]
 81050e8:	2200      	movs	r2, #0
 81050ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81050ee:	68fb      	ldr	r3, [r7, #12]
 81050f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81050f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81050f8:	68fb      	ldr	r3, [r7, #12]
 81050fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 81050fe:	68fb      	ldr	r3, [r7, #12]
 8105100:	2201      	movs	r2, #1
 8105102:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8105106:	2303      	movs	r3, #3
 8105108:	e09f      	b.n	810524a <HAL_SPI_TransmitReceive+0x442>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 810510a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 810510c:	2b00      	cmp	r3, #0
 810510e:	d195      	bne.n	810503c <HAL_SPI_TransmitReceive+0x234>
 8105110:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8105112:	2b00      	cmp	r3, #0
 8105114:	d192      	bne.n	810503c <HAL_SPI_TransmitReceive+0x234>
 8105116:	e071      	b.n	81051fc <HAL_SPI_TransmitReceive+0x3f4>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8105118:	68fb      	ldr	r3, [r7, #12]
 810511a:	681b      	ldr	r3, [r3, #0]
 810511c:	695b      	ldr	r3, [r3, #20]
 810511e:	f003 0302 	and.w	r3, r3, #2
 8105122:	2b02      	cmp	r3, #2
 8105124:	d11b      	bne.n	810515e <HAL_SPI_TransmitReceive+0x356>
 8105126:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8105128:	2b00      	cmp	r3, #0
 810512a:	d018      	beq.n	810515e <HAL_SPI_TransmitReceive+0x356>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 810512c:	68fb      	ldr	r3, [r7, #12]
 810512e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8105130:	68fb      	ldr	r3, [r7, #12]
 8105132:	681b      	ldr	r3, [r3, #0]
 8105134:	3320      	adds	r3, #32
 8105136:	7812      	ldrb	r2, [r2, #0]
 8105138:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 810513a:	68fb      	ldr	r3, [r7, #12]
 810513c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810513e:	1c5a      	adds	r2, r3, #1
 8105140:	68fb      	ldr	r3, [r7, #12]
 8105142:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8105144:	68fb      	ldr	r3, [r7, #12]
 8105146:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810514a:	b29b      	uxth	r3, r3
 810514c:	3b01      	subs	r3, #1
 810514e:	b29a      	uxth	r2, r3
 8105150:	68fb      	ldr	r3, [r7, #12]
 8105152:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8105156:	68fb      	ldr	r3, [r7, #12]
 8105158:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810515c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 810515e:	68fb      	ldr	r3, [r7, #12]
 8105160:	681b      	ldr	r3, [r3, #0]
 8105162:	695b      	ldr	r3, [r3, #20]
 8105164:	f003 0301 	and.w	r3, r3, #1
 8105168:	2b01      	cmp	r3, #1
 810516a:	d11d      	bne.n	81051a8 <HAL_SPI_TransmitReceive+0x3a0>
 810516c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 810516e:	2b00      	cmp	r3, #0
 8105170:	d01a      	beq.n	81051a8 <HAL_SPI_TransmitReceive+0x3a0>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8105172:	68fb      	ldr	r3, [r7, #12]
 8105174:	681b      	ldr	r3, [r3, #0]
 8105176:	f103 0230 	add.w	r2, r3, #48	; 0x30
 810517a:	68fb      	ldr	r3, [r7, #12]
 810517c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810517e:	7812      	ldrb	r2, [r2, #0]
 8105180:	b2d2      	uxtb	r2, r2
 8105182:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8105184:	68fb      	ldr	r3, [r7, #12]
 8105186:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105188:	1c5a      	adds	r2, r3, #1
 810518a:	68fb      	ldr	r3, [r7, #12]
 810518c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 810518e:	68fb      	ldr	r3, [r7, #12]
 8105190:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105194:	b29b      	uxth	r3, r3
 8105196:	3b01      	subs	r3, #1
 8105198:	b29a      	uxth	r2, r3
 810519a:	68fb      	ldr	r3, [r7, #12]
 810519c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 81051a0:	68fb      	ldr	r3, [r7, #12]
 81051a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81051a6:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81051a8:	f7fc fb84 	bl	81018b4 <HAL_GetTick>
 81051ac:	4602      	mov	r2, r0
 81051ae:	69fb      	ldr	r3, [r7, #28]
 81051b0:	1ad3      	subs	r3, r2, r3
 81051b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 81051b4:	429a      	cmp	r2, r3
 81051b6:	d803      	bhi.n	81051c0 <HAL_SPI_TransmitReceive+0x3b8>
 81051b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81051ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 81051be:	d102      	bne.n	81051c6 <HAL_SPI_TransmitReceive+0x3be>
 81051c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81051c2:	2b00      	cmp	r3, #0
 81051c4:	d114      	bne.n	81051f0 <HAL_SPI_TransmitReceive+0x3e8>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 81051c6:	68f8      	ldr	r0, [r7, #12]
 81051c8:	f000 f843 	bl	8105252 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 81051cc:	68fb      	ldr	r3, [r7, #12]
 81051ce:	2200      	movs	r2, #0
 81051d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81051d4:	68fb      	ldr	r3, [r7, #12]
 81051d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81051da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81051de:	68fb      	ldr	r3, [r7, #12]
 81051e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 81051e4:	68fb      	ldr	r3, [r7, #12]
 81051e6:	2201      	movs	r2, #1
 81051e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 81051ec:	2303      	movs	r3, #3
 81051ee:	e02c      	b.n	810524a <HAL_SPI_TransmitReceive+0x442>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 81051f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 81051f2:	2b00      	cmp	r3, #0
 81051f4:	d190      	bne.n	8105118 <HAL_SPI_TransmitReceive+0x310>
 81051f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 81051f8:	2b00      	cmp	r3, #0
 81051fa:	d18d      	bne.n	8105118 <HAL_SPI_TransmitReceive+0x310>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 81051fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81051fe:	9300      	str	r3, [sp, #0]
 8105200:	69fb      	ldr	r3, [r7, #28]
 8105202:	2200      	movs	r2, #0
 8105204:	2108      	movs	r1, #8
 8105206:	68f8      	ldr	r0, [r7, #12]
 8105208:	f000 f8c3 	bl	8105392 <SPI_WaitOnFlagUntilTimeout>
 810520c:	4603      	mov	r3, r0
 810520e:	2b00      	cmp	r3, #0
 8105210:	d007      	beq.n	8105222 <HAL_SPI_TransmitReceive+0x41a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8105212:	68fb      	ldr	r3, [r7, #12]
 8105214:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105218:	f043 0220 	orr.w	r2, r3, #32
 810521c:	68fb      	ldr	r3, [r7, #12]
 810521e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8105222:	68f8      	ldr	r0, [r7, #12]
 8105224:	f000 f815 	bl	8105252 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8105228:	68fb      	ldr	r3, [r7, #12]
 810522a:	2200      	movs	r2, #0
 810522c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8105230:	68fb      	ldr	r3, [r7, #12]
 8105232:	2201      	movs	r2, #1
 8105234:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8105238:	68fb      	ldr	r3, [r7, #12]
 810523a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810523e:	2b00      	cmp	r3, #0
 8105240:	d001      	beq.n	8105246 <HAL_SPI_TransmitReceive+0x43e>
  {
    return HAL_ERROR;
 8105242:	2301      	movs	r3, #1
 8105244:	e001      	b.n	810524a <HAL_SPI_TransmitReceive+0x442>
  }
  return errorcode;
 8105246:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 810524a:	4618      	mov	r0, r3
 810524c:	3730      	adds	r7, #48	; 0x30
 810524e:	46bd      	mov	sp, r7
 8105250:	bd80      	pop	{r7, pc}

08105252 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8105252:	b480      	push	{r7}
 8105254:	b085      	sub	sp, #20
 8105256:	af00      	add	r7, sp, #0
 8105258:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 810525a:	687b      	ldr	r3, [r7, #4]
 810525c:	681b      	ldr	r3, [r3, #0]
 810525e:	695b      	ldr	r3, [r3, #20]
 8105260:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8105262:	687b      	ldr	r3, [r7, #4]
 8105264:	681b      	ldr	r3, [r3, #0]
 8105266:	699a      	ldr	r2, [r3, #24]
 8105268:	687b      	ldr	r3, [r7, #4]
 810526a:	681b      	ldr	r3, [r3, #0]
 810526c:	f042 0208 	orr.w	r2, r2, #8
 8105270:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8105272:	687b      	ldr	r3, [r7, #4]
 8105274:	681b      	ldr	r3, [r3, #0]
 8105276:	699a      	ldr	r2, [r3, #24]
 8105278:	687b      	ldr	r3, [r7, #4]
 810527a:	681b      	ldr	r3, [r3, #0]
 810527c:	f042 0210 	orr.w	r2, r2, #16
 8105280:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8105282:	687b      	ldr	r3, [r7, #4]
 8105284:	681b      	ldr	r3, [r3, #0]
 8105286:	681a      	ldr	r2, [r3, #0]
 8105288:	687b      	ldr	r3, [r7, #4]
 810528a:	681b      	ldr	r3, [r3, #0]
 810528c:	f022 0201 	bic.w	r2, r2, #1
 8105290:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8105292:	687b      	ldr	r3, [r7, #4]
 8105294:	681b      	ldr	r3, [r3, #0]
 8105296:	691b      	ldr	r3, [r3, #16]
 8105298:	687a      	ldr	r2, [r7, #4]
 810529a:	6812      	ldr	r2, [r2, #0]
 810529c:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 81052a0:	f023 0303 	bic.w	r3, r3, #3
 81052a4:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 81052a6:	687b      	ldr	r3, [r7, #4]
 81052a8:	681b      	ldr	r3, [r3, #0]
 81052aa:	689a      	ldr	r2, [r3, #8]
 81052ac:	687b      	ldr	r3, [r7, #4]
 81052ae:	681b      	ldr	r3, [r3, #0]
 81052b0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 81052b4:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 81052b6:	687b      	ldr	r3, [r7, #4]
 81052b8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 81052bc:	b2db      	uxtb	r3, r3
 81052be:	2b04      	cmp	r3, #4
 81052c0:	d014      	beq.n	81052ec <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 81052c2:	68fb      	ldr	r3, [r7, #12]
 81052c4:	f003 0320 	and.w	r3, r3, #32
 81052c8:	2b00      	cmp	r3, #0
 81052ca:	d00f      	beq.n	81052ec <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 81052cc:	687b      	ldr	r3, [r7, #4]
 81052ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81052d2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 81052d6:	687b      	ldr	r3, [r7, #4]
 81052d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 81052dc:	687b      	ldr	r3, [r7, #4]
 81052de:	681b      	ldr	r3, [r3, #0]
 81052e0:	699a      	ldr	r2, [r3, #24]
 81052e2:	687b      	ldr	r3, [r7, #4]
 81052e4:	681b      	ldr	r3, [r3, #0]
 81052e6:	f042 0220 	orr.w	r2, r2, #32
 81052ea:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 81052ec:	687b      	ldr	r3, [r7, #4]
 81052ee:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 81052f2:	b2db      	uxtb	r3, r3
 81052f4:	2b03      	cmp	r3, #3
 81052f6:	d014      	beq.n	8105322 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 81052f8:	68fb      	ldr	r3, [r7, #12]
 81052fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81052fe:	2b00      	cmp	r3, #0
 8105300:	d00f      	beq.n	8105322 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8105302:	687b      	ldr	r3, [r7, #4]
 8105304:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105308:	f043 0204 	orr.w	r2, r3, #4
 810530c:	687b      	ldr	r3, [r7, #4]
 810530e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8105312:	687b      	ldr	r3, [r7, #4]
 8105314:	681b      	ldr	r3, [r3, #0]
 8105316:	699a      	ldr	r2, [r3, #24]
 8105318:	687b      	ldr	r3, [r7, #4]
 810531a:	681b      	ldr	r3, [r3, #0]
 810531c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8105320:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8105322:	68fb      	ldr	r3, [r7, #12]
 8105324:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8105328:	2b00      	cmp	r3, #0
 810532a:	d00f      	beq.n	810534c <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 810532c:	687b      	ldr	r3, [r7, #4]
 810532e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105332:	f043 0201 	orr.w	r2, r3, #1
 8105336:	687b      	ldr	r3, [r7, #4]
 8105338:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 810533c:	687b      	ldr	r3, [r7, #4]
 810533e:	681b      	ldr	r3, [r3, #0]
 8105340:	699a      	ldr	r2, [r3, #24]
 8105342:	687b      	ldr	r3, [r7, #4]
 8105344:	681b      	ldr	r3, [r3, #0]
 8105346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810534a:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 810534c:	68fb      	ldr	r3, [r7, #12]
 810534e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105352:	2b00      	cmp	r3, #0
 8105354:	d00f      	beq.n	8105376 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8105356:	687b      	ldr	r3, [r7, #4]
 8105358:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810535c:	f043 0208 	orr.w	r2, r3, #8
 8105360:	687b      	ldr	r3, [r7, #4]
 8105362:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8105366:	687b      	ldr	r3, [r7, #4]
 8105368:	681b      	ldr	r3, [r3, #0]
 810536a:	699a      	ldr	r2, [r3, #24]
 810536c:	687b      	ldr	r3, [r7, #4]
 810536e:	681b      	ldr	r3, [r3, #0]
 8105370:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8105374:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8105376:	687b      	ldr	r3, [r7, #4]
 8105378:	2200      	movs	r2, #0
 810537a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 810537e:	687b      	ldr	r3, [r7, #4]
 8105380:	2200      	movs	r2, #0
 8105382:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8105386:	bf00      	nop
 8105388:	3714      	adds	r7, #20
 810538a:	46bd      	mov	sp, r7
 810538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105390:	4770      	bx	lr

08105392 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8105392:	b580      	push	{r7, lr}
 8105394:	b084      	sub	sp, #16
 8105396:	af00      	add	r7, sp, #0
 8105398:	60f8      	str	r0, [r7, #12]
 810539a:	60b9      	str	r1, [r7, #8]
 810539c:	603b      	str	r3, [r7, #0]
 810539e:	4613      	mov	r3, r2
 81053a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 81053a2:	e010      	b.n	81053c6 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81053a4:	f7fc fa86 	bl	81018b4 <HAL_GetTick>
 81053a8:	4602      	mov	r2, r0
 81053aa:	683b      	ldr	r3, [r7, #0]
 81053ac:	1ad3      	subs	r3, r2, r3
 81053ae:	69ba      	ldr	r2, [r7, #24]
 81053b0:	429a      	cmp	r2, r3
 81053b2:	d803      	bhi.n	81053bc <SPI_WaitOnFlagUntilTimeout+0x2a>
 81053b4:	69bb      	ldr	r3, [r7, #24]
 81053b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 81053ba:	d102      	bne.n	81053c2 <SPI_WaitOnFlagUntilTimeout+0x30>
 81053bc:	69bb      	ldr	r3, [r7, #24]
 81053be:	2b00      	cmp	r3, #0
 81053c0:	d101      	bne.n	81053c6 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 81053c2:	2303      	movs	r3, #3
 81053c4:	e00f      	b.n	81053e6 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 81053c6:	68fb      	ldr	r3, [r7, #12]
 81053c8:	681b      	ldr	r3, [r3, #0]
 81053ca:	695a      	ldr	r2, [r3, #20]
 81053cc:	68bb      	ldr	r3, [r7, #8]
 81053ce:	4013      	ands	r3, r2
 81053d0:	68ba      	ldr	r2, [r7, #8]
 81053d2:	429a      	cmp	r2, r3
 81053d4:	bf0c      	ite	eq
 81053d6:	2301      	moveq	r3, #1
 81053d8:	2300      	movne	r3, #0
 81053da:	b2db      	uxtb	r3, r3
 81053dc:	461a      	mov	r2, r3
 81053de:	79fb      	ldrb	r3, [r7, #7]
 81053e0:	429a      	cmp	r2, r3
 81053e2:	d0df      	beq.n	81053a4 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 81053e4:	2300      	movs	r3, #0
}
 81053e6:	4618      	mov	r0, r3
 81053e8:	3710      	adds	r7, #16
 81053ea:	46bd      	mov	sp, r7
 81053ec:	bd80      	pop	{r7, pc}

081053ee <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 81053ee:	b480      	push	{r7}
 81053f0:	b085      	sub	sp, #20
 81053f2:	af00      	add	r7, sp, #0
 81053f4:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 81053f6:	687b      	ldr	r3, [r7, #4]
 81053f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81053fa:	095b      	lsrs	r3, r3, #5
 81053fc:	3301      	adds	r3, #1
 81053fe:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8105400:	687b      	ldr	r3, [r7, #4]
 8105402:	68db      	ldr	r3, [r3, #12]
 8105404:	3301      	adds	r3, #1
 8105406:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8105408:	68bb      	ldr	r3, [r7, #8]
 810540a:	3307      	adds	r3, #7
 810540c:	08db      	lsrs	r3, r3, #3
 810540e:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8105410:	68bb      	ldr	r3, [r7, #8]
 8105412:	68fa      	ldr	r2, [r7, #12]
 8105414:	fb02 f303 	mul.w	r3, r2, r3
}
 8105418:	4618      	mov	r0, r3
 810541a:	3714      	adds	r7, #20
 810541c:	46bd      	mov	sp, r7
 810541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105422:	4770      	bx	lr

08105424 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8105424:	b580      	push	{r7, lr}
 8105426:	b082      	sub	sp, #8
 8105428:	af00      	add	r7, sp, #0
 810542a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810542c:	687b      	ldr	r3, [r7, #4]
 810542e:	2b00      	cmp	r3, #0
 8105430:	d101      	bne.n	8105436 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8105432:	2301      	movs	r3, #1
 8105434:	e049      	b.n	81054ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8105436:	687b      	ldr	r3, [r7, #4]
 8105438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810543c:	b2db      	uxtb	r3, r3
 810543e:	2b00      	cmp	r3, #0
 8105440:	d106      	bne.n	8105450 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8105442:	687b      	ldr	r3, [r7, #4]
 8105444:	2200      	movs	r2, #0
 8105446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 810544a:	6878      	ldr	r0, [r7, #4]
 810544c:	f7fc f8ce 	bl	81015ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8105450:	687b      	ldr	r3, [r7, #4]
 8105452:	2202      	movs	r2, #2
 8105454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8105458:	687b      	ldr	r3, [r7, #4]
 810545a:	681a      	ldr	r2, [r3, #0]
 810545c:	687b      	ldr	r3, [r7, #4]
 810545e:	3304      	adds	r3, #4
 8105460:	4619      	mov	r1, r3
 8105462:	4610      	mov	r0, r2
 8105464:	f000 f97c 	bl	8105760 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8105468:	687b      	ldr	r3, [r7, #4]
 810546a:	2201      	movs	r2, #1
 810546c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8105470:	687b      	ldr	r3, [r7, #4]
 8105472:	2201      	movs	r2, #1
 8105474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8105478:	687b      	ldr	r3, [r7, #4]
 810547a:	2201      	movs	r2, #1
 810547c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8105480:	687b      	ldr	r3, [r7, #4]
 8105482:	2201      	movs	r2, #1
 8105484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8105488:	687b      	ldr	r3, [r7, #4]
 810548a:	2201      	movs	r2, #1
 810548c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8105490:	687b      	ldr	r3, [r7, #4]
 8105492:	2201      	movs	r2, #1
 8105494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8105498:	687b      	ldr	r3, [r7, #4]
 810549a:	2201      	movs	r2, #1
 810549c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81054a0:	687b      	ldr	r3, [r7, #4]
 81054a2:	2201      	movs	r2, #1
 81054a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81054a8:	687b      	ldr	r3, [r7, #4]
 81054aa:	2201      	movs	r2, #1
 81054ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81054b0:	687b      	ldr	r3, [r7, #4]
 81054b2:	2201      	movs	r2, #1
 81054b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 81054b8:	687b      	ldr	r3, [r7, #4]
 81054ba:	2201      	movs	r2, #1
 81054bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81054c0:	687b      	ldr	r3, [r7, #4]
 81054c2:	2201      	movs	r2, #1
 81054c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 81054c8:	2300      	movs	r3, #0
}
 81054ca:	4618      	mov	r0, r3
 81054cc:	3708      	adds	r7, #8
 81054ce:	46bd      	mov	sp, r7
 81054d0:	bd80      	pop	{r7, pc}

081054d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 81054d2:	b580      	push	{r7, lr}
 81054d4:	b082      	sub	sp, #8
 81054d6:	af00      	add	r7, sp, #0
 81054d8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 81054da:	687b      	ldr	r3, [r7, #4]
 81054dc:	681b      	ldr	r3, [r3, #0]
 81054de:	691b      	ldr	r3, [r3, #16]
 81054e0:	f003 0302 	and.w	r3, r3, #2
 81054e4:	2b02      	cmp	r3, #2
 81054e6:	d122      	bne.n	810552e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 81054e8:	687b      	ldr	r3, [r7, #4]
 81054ea:	681b      	ldr	r3, [r3, #0]
 81054ec:	68db      	ldr	r3, [r3, #12]
 81054ee:	f003 0302 	and.w	r3, r3, #2
 81054f2:	2b02      	cmp	r3, #2
 81054f4:	d11b      	bne.n	810552e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 81054f6:	687b      	ldr	r3, [r7, #4]
 81054f8:	681b      	ldr	r3, [r3, #0]
 81054fa:	f06f 0202 	mvn.w	r2, #2
 81054fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8105500:	687b      	ldr	r3, [r7, #4]
 8105502:	2201      	movs	r2, #1
 8105504:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8105506:	687b      	ldr	r3, [r7, #4]
 8105508:	681b      	ldr	r3, [r3, #0]
 810550a:	699b      	ldr	r3, [r3, #24]
 810550c:	f003 0303 	and.w	r3, r3, #3
 8105510:	2b00      	cmp	r3, #0
 8105512:	d003      	beq.n	810551c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8105514:	6878      	ldr	r0, [r7, #4]
 8105516:	f000 f905 	bl	8105724 <HAL_TIM_IC_CaptureCallback>
 810551a:	e005      	b.n	8105528 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 810551c:	6878      	ldr	r0, [r7, #4]
 810551e:	f000 f8f7 	bl	8105710 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8105522:	6878      	ldr	r0, [r7, #4]
 8105524:	f000 f908 	bl	8105738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8105528:	687b      	ldr	r3, [r7, #4]
 810552a:	2200      	movs	r2, #0
 810552c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 810552e:	687b      	ldr	r3, [r7, #4]
 8105530:	681b      	ldr	r3, [r3, #0]
 8105532:	691b      	ldr	r3, [r3, #16]
 8105534:	f003 0304 	and.w	r3, r3, #4
 8105538:	2b04      	cmp	r3, #4
 810553a:	d122      	bne.n	8105582 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 810553c:	687b      	ldr	r3, [r7, #4]
 810553e:	681b      	ldr	r3, [r3, #0]
 8105540:	68db      	ldr	r3, [r3, #12]
 8105542:	f003 0304 	and.w	r3, r3, #4
 8105546:	2b04      	cmp	r3, #4
 8105548:	d11b      	bne.n	8105582 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 810554a:	687b      	ldr	r3, [r7, #4]
 810554c:	681b      	ldr	r3, [r3, #0]
 810554e:	f06f 0204 	mvn.w	r2, #4
 8105552:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8105554:	687b      	ldr	r3, [r7, #4]
 8105556:	2202      	movs	r2, #2
 8105558:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 810555a:	687b      	ldr	r3, [r7, #4]
 810555c:	681b      	ldr	r3, [r3, #0]
 810555e:	699b      	ldr	r3, [r3, #24]
 8105560:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8105564:	2b00      	cmp	r3, #0
 8105566:	d003      	beq.n	8105570 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8105568:	6878      	ldr	r0, [r7, #4]
 810556a:	f000 f8db 	bl	8105724 <HAL_TIM_IC_CaptureCallback>
 810556e:	e005      	b.n	810557c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8105570:	6878      	ldr	r0, [r7, #4]
 8105572:	f000 f8cd 	bl	8105710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8105576:	6878      	ldr	r0, [r7, #4]
 8105578:	f000 f8de 	bl	8105738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810557c:	687b      	ldr	r3, [r7, #4]
 810557e:	2200      	movs	r2, #0
 8105580:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8105582:	687b      	ldr	r3, [r7, #4]
 8105584:	681b      	ldr	r3, [r3, #0]
 8105586:	691b      	ldr	r3, [r3, #16]
 8105588:	f003 0308 	and.w	r3, r3, #8
 810558c:	2b08      	cmp	r3, #8
 810558e:	d122      	bne.n	81055d6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8105590:	687b      	ldr	r3, [r7, #4]
 8105592:	681b      	ldr	r3, [r3, #0]
 8105594:	68db      	ldr	r3, [r3, #12]
 8105596:	f003 0308 	and.w	r3, r3, #8
 810559a:	2b08      	cmp	r3, #8
 810559c:	d11b      	bne.n	81055d6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 810559e:	687b      	ldr	r3, [r7, #4]
 81055a0:	681b      	ldr	r3, [r3, #0]
 81055a2:	f06f 0208 	mvn.w	r2, #8
 81055a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 81055a8:	687b      	ldr	r3, [r7, #4]
 81055aa:	2204      	movs	r2, #4
 81055ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 81055ae:	687b      	ldr	r3, [r7, #4]
 81055b0:	681b      	ldr	r3, [r3, #0]
 81055b2:	69db      	ldr	r3, [r3, #28]
 81055b4:	f003 0303 	and.w	r3, r3, #3
 81055b8:	2b00      	cmp	r3, #0
 81055ba:	d003      	beq.n	81055c4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81055bc:	6878      	ldr	r0, [r7, #4]
 81055be:	f000 f8b1 	bl	8105724 <HAL_TIM_IC_CaptureCallback>
 81055c2:	e005      	b.n	81055d0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81055c4:	6878      	ldr	r0, [r7, #4]
 81055c6:	f000 f8a3 	bl	8105710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81055ca:	6878      	ldr	r0, [r7, #4]
 81055cc:	f000 f8b4 	bl	8105738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81055d0:	687b      	ldr	r3, [r7, #4]
 81055d2:	2200      	movs	r2, #0
 81055d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 81055d6:	687b      	ldr	r3, [r7, #4]
 81055d8:	681b      	ldr	r3, [r3, #0]
 81055da:	691b      	ldr	r3, [r3, #16]
 81055dc:	f003 0310 	and.w	r3, r3, #16
 81055e0:	2b10      	cmp	r3, #16
 81055e2:	d122      	bne.n	810562a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 81055e4:	687b      	ldr	r3, [r7, #4]
 81055e6:	681b      	ldr	r3, [r3, #0]
 81055e8:	68db      	ldr	r3, [r3, #12]
 81055ea:	f003 0310 	and.w	r3, r3, #16
 81055ee:	2b10      	cmp	r3, #16
 81055f0:	d11b      	bne.n	810562a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 81055f2:	687b      	ldr	r3, [r7, #4]
 81055f4:	681b      	ldr	r3, [r3, #0]
 81055f6:	f06f 0210 	mvn.w	r2, #16
 81055fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 81055fc:	687b      	ldr	r3, [r7, #4]
 81055fe:	2208      	movs	r2, #8
 8105600:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8105602:	687b      	ldr	r3, [r7, #4]
 8105604:	681b      	ldr	r3, [r3, #0]
 8105606:	69db      	ldr	r3, [r3, #28]
 8105608:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810560c:	2b00      	cmp	r3, #0
 810560e:	d003      	beq.n	8105618 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8105610:	6878      	ldr	r0, [r7, #4]
 8105612:	f000 f887 	bl	8105724 <HAL_TIM_IC_CaptureCallback>
 8105616:	e005      	b.n	8105624 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8105618:	6878      	ldr	r0, [r7, #4]
 810561a:	f000 f879 	bl	8105710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810561e:	6878      	ldr	r0, [r7, #4]
 8105620:	f000 f88a 	bl	8105738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8105624:	687b      	ldr	r3, [r7, #4]
 8105626:	2200      	movs	r2, #0
 8105628:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 810562a:	687b      	ldr	r3, [r7, #4]
 810562c:	681b      	ldr	r3, [r3, #0]
 810562e:	691b      	ldr	r3, [r3, #16]
 8105630:	f003 0301 	and.w	r3, r3, #1
 8105634:	2b01      	cmp	r3, #1
 8105636:	d10e      	bne.n	8105656 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8105638:	687b      	ldr	r3, [r7, #4]
 810563a:	681b      	ldr	r3, [r3, #0]
 810563c:	68db      	ldr	r3, [r3, #12]
 810563e:	f003 0301 	and.w	r3, r3, #1
 8105642:	2b01      	cmp	r3, #1
 8105644:	d107      	bne.n	8105656 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8105646:	687b      	ldr	r3, [r7, #4]
 8105648:	681b      	ldr	r3, [r3, #0]
 810564a:	f06f 0201 	mvn.w	r2, #1
 810564e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8105650:	6878      	ldr	r0, [r7, #4]
 8105652:	f7fb fe67 	bl	8101324 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8105656:	687b      	ldr	r3, [r7, #4]
 8105658:	681b      	ldr	r3, [r3, #0]
 810565a:	691b      	ldr	r3, [r3, #16]
 810565c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8105660:	2b80      	cmp	r3, #128	; 0x80
 8105662:	d10e      	bne.n	8105682 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8105664:	687b      	ldr	r3, [r7, #4]
 8105666:	681b      	ldr	r3, [r3, #0]
 8105668:	68db      	ldr	r3, [r3, #12]
 810566a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810566e:	2b80      	cmp	r3, #128	; 0x80
 8105670:	d107      	bne.n	8105682 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8105672:	687b      	ldr	r3, [r7, #4]
 8105674:	681b      	ldr	r3, [r3, #0]
 8105676:	f06f 0280 	mvn.w	r2, #128	; 0x80
 810567a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 810567c:	6878      	ldr	r0, [r7, #4]
 810567e:	f000 f913 	bl	81058a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8105682:	687b      	ldr	r3, [r7, #4]
 8105684:	681b      	ldr	r3, [r3, #0]
 8105686:	691b      	ldr	r3, [r3, #16]
 8105688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810568c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105690:	d10e      	bne.n	81056b0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8105692:	687b      	ldr	r3, [r7, #4]
 8105694:	681b      	ldr	r3, [r3, #0]
 8105696:	68db      	ldr	r3, [r3, #12]
 8105698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810569c:	2b80      	cmp	r3, #128	; 0x80
 810569e:	d107      	bne.n	81056b0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 81056a0:	687b      	ldr	r3, [r7, #4]
 81056a2:	681b      	ldr	r3, [r3, #0]
 81056a4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 81056a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 81056aa:	6878      	ldr	r0, [r7, #4]
 81056ac:	f000 f906 	bl	81058bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 81056b0:	687b      	ldr	r3, [r7, #4]
 81056b2:	681b      	ldr	r3, [r3, #0]
 81056b4:	691b      	ldr	r3, [r3, #16]
 81056b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81056ba:	2b40      	cmp	r3, #64	; 0x40
 81056bc:	d10e      	bne.n	81056dc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 81056be:	687b      	ldr	r3, [r7, #4]
 81056c0:	681b      	ldr	r3, [r3, #0]
 81056c2:	68db      	ldr	r3, [r3, #12]
 81056c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81056c8:	2b40      	cmp	r3, #64	; 0x40
 81056ca:	d107      	bne.n	81056dc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 81056cc:	687b      	ldr	r3, [r7, #4]
 81056ce:	681b      	ldr	r3, [r3, #0]
 81056d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 81056d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 81056d6:	6878      	ldr	r0, [r7, #4]
 81056d8:	f000 f838 	bl	810574c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 81056dc:	687b      	ldr	r3, [r7, #4]
 81056de:	681b      	ldr	r3, [r3, #0]
 81056e0:	691b      	ldr	r3, [r3, #16]
 81056e2:	f003 0320 	and.w	r3, r3, #32
 81056e6:	2b20      	cmp	r3, #32
 81056e8:	d10e      	bne.n	8105708 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 81056ea:	687b      	ldr	r3, [r7, #4]
 81056ec:	681b      	ldr	r3, [r3, #0]
 81056ee:	68db      	ldr	r3, [r3, #12]
 81056f0:	f003 0320 	and.w	r3, r3, #32
 81056f4:	2b20      	cmp	r3, #32
 81056f6:	d107      	bne.n	8105708 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 81056f8:	687b      	ldr	r3, [r7, #4]
 81056fa:	681b      	ldr	r3, [r3, #0]
 81056fc:	f06f 0220 	mvn.w	r2, #32
 8105700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8105702:	6878      	ldr	r0, [r7, #4]
 8105704:	f000 f8c6 	bl	8105894 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8105708:	bf00      	nop
 810570a:	3708      	adds	r7, #8
 810570c:	46bd      	mov	sp, r7
 810570e:	bd80      	pop	{r7, pc}

08105710 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8105710:	b480      	push	{r7}
 8105712:	b083      	sub	sp, #12
 8105714:	af00      	add	r7, sp, #0
 8105716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8105718:	bf00      	nop
 810571a:	370c      	adds	r7, #12
 810571c:	46bd      	mov	sp, r7
 810571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105722:	4770      	bx	lr

08105724 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8105724:	b480      	push	{r7}
 8105726:	b083      	sub	sp, #12
 8105728:	af00      	add	r7, sp, #0
 810572a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 810572c:	bf00      	nop
 810572e:	370c      	adds	r7, #12
 8105730:	46bd      	mov	sp, r7
 8105732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105736:	4770      	bx	lr

08105738 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8105738:	b480      	push	{r7}
 810573a:	b083      	sub	sp, #12
 810573c:	af00      	add	r7, sp, #0
 810573e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8105740:	bf00      	nop
 8105742:	370c      	adds	r7, #12
 8105744:	46bd      	mov	sp, r7
 8105746:	f85d 7b04 	ldr.w	r7, [sp], #4
 810574a:	4770      	bx	lr

0810574c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 810574c:	b480      	push	{r7}
 810574e:	b083      	sub	sp, #12
 8105750:	af00      	add	r7, sp, #0
 8105752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8105754:	bf00      	nop
 8105756:	370c      	adds	r7, #12
 8105758:	46bd      	mov	sp, r7
 810575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810575e:	4770      	bx	lr

08105760 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8105760:	b480      	push	{r7}
 8105762:	b085      	sub	sp, #20
 8105764:	af00      	add	r7, sp, #0
 8105766:	6078      	str	r0, [r7, #4]
 8105768:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 810576a:	687b      	ldr	r3, [r7, #4]
 810576c:	681b      	ldr	r3, [r3, #0]
 810576e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8105770:	687b      	ldr	r3, [r7, #4]
 8105772:	4a40      	ldr	r2, [pc, #256]	; (8105874 <TIM_Base_SetConfig+0x114>)
 8105774:	4293      	cmp	r3, r2
 8105776:	d013      	beq.n	81057a0 <TIM_Base_SetConfig+0x40>
 8105778:	687b      	ldr	r3, [r7, #4]
 810577a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810577e:	d00f      	beq.n	81057a0 <TIM_Base_SetConfig+0x40>
 8105780:	687b      	ldr	r3, [r7, #4]
 8105782:	4a3d      	ldr	r2, [pc, #244]	; (8105878 <TIM_Base_SetConfig+0x118>)
 8105784:	4293      	cmp	r3, r2
 8105786:	d00b      	beq.n	81057a0 <TIM_Base_SetConfig+0x40>
 8105788:	687b      	ldr	r3, [r7, #4]
 810578a:	4a3c      	ldr	r2, [pc, #240]	; (810587c <TIM_Base_SetConfig+0x11c>)
 810578c:	4293      	cmp	r3, r2
 810578e:	d007      	beq.n	81057a0 <TIM_Base_SetConfig+0x40>
 8105790:	687b      	ldr	r3, [r7, #4]
 8105792:	4a3b      	ldr	r2, [pc, #236]	; (8105880 <TIM_Base_SetConfig+0x120>)
 8105794:	4293      	cmp	r3, r2
 8105796:	d003      	beq.n	81057a0 <TIM_Base_SetConfig+0x40>
 8105798:	687b      	ldr	r3, [r7, #4]
 810579a:	4a3a      	ldr	r2, [pc, #232]	; (8105884 <TIM_Base_SetConfig+0x124>)
 810579c:	4293      	cmp	r3, r2
 810579e:	d108      	bne.n	81057b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 81057a0:	68fb      	ldr	r3, [r7, #12]
 81057a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81057a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 81057a8:	683b      	ldr	r3, [r7, #0]
 81057aa:	685b      	ldr	r3, [r3, #4]
 81057ac:	68fa      	ldr	r2, [r7, #12]
 81057ae:	4313      	orrs	r3, r2
 81057b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 81057b2:	687b      	ldr	r3, [r7, #4]
 81057b4:	4a2f      	ldr	r2, [pc, #188]	; (8105874 <TIM_Base_SetConfig+0x114>)
 81057b6:	4293      	cmp	r3, r2
 81057b8:	d01f      	beq.n	81057fa <TIM_Base_SetConfig+0x9a>
 81057ba:	687b      	ldr	r3, [r7, #4]
 81057bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81057c0:	d01b      	beq.n	81057fa <TIM_Base_SetConfig+0x9a>
 81057c2:	687b      	ldr	r3, [r7, #4]
 81057c4:	4a2c      	ldr	r2, [pc, #176]	; (8105878 <TIM_Base_SetConfig+0x118>)
 81057c6:	4293      	cmp	r3, r2
 81057c8:	d017      	beq.n	81057fa <TIM_Base_SetConfig+0x9a>
 81057ca:	687b      	ldr	r3, [r7, #4]
 81057cc:	4a2b      	ldr	r2, [pc, #172]	; (810587c <TIM_Base_SetConfig+0x11c>)
 81057ce:	4293      	cmp	r3, r2
 81057d0:	d013      	beq.n	81057fa <TIM_Base_SetConfig+0x9a>
 81057d2:	687b      	ldr	r3, [r7, #4]
 81057d4:	4a2a      	ldr	r2, [pc, #168]	; (8105880 <TIM_Base_SetConfig+0x120>)
 81057d6:	4293      	cmp	r3, r2
 81057d8:	d00f      	beq.n	81057fa <TIM_Base_SetConfig+0x9a>
 81057da:	687b      	ldr	r3, [r7, #4]
 81057dc:	4a29      	ldr	r2, [pc, #164]	; (8105884 <TIM_Base_SetConfig+0x124>)
 81057de:	4293      	cmp	r3, r2
 81057e0:	d00b      	beq.n	81057fa <TIM_Base_SetConfig+0x9a>
 81057e2:	687b      	ldr	r3, [r7, #4]
 81057e4:	4a28      	ldr	r2, [pc, #160]	; (8105888 <TIM_Base_SetConfig+0x128>)
 81057e6:	4293      	cmp	r3, r2
 81057e8:	d007      	beq.n	81057fa <TIM_Base_SetConfig+0x9a>
 81057ea:	687b      	ldr	r3, [r7, #4]
 81057ec:	4a27      	ldr	r2, [pc, #156]	; (810588c <TIM_Base_SetConfig+0x12c>)
 81057ee:	4293      	cmp	r3, r2
 81057f0:	d003      	beq.n	81057fa <TIM_Base_SetConfig+0x9a>
 81057f2:	687b      	ldr	r3, [r7, #4]
 81057f4:	4a26      	ldr	r2, [pc, #152]	; (8105890 <TIM_Base_SetConfig+0x130>)
 81057f6:	4293      	cmp	r3, r2
 81057f8:	d108      	bne.n	810580c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 81057fa:	68fb      	ldr	r3, [r7, #12]
 81057fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8105800:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8105802:	683b      	ldr	r3, [r7, #0]
 8105804:	68db      	ldr	r3, [r3, #12]
 8105806:	68fa      	ldr	r2, [r7, #12]
 8105808:	4313      	orrs	r3, r2
 810580a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 810580c:	68fb      	ldr	r3, [r7, #12]
 810580e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8105812:	683b      	ldr	r3, [r7, #0]
 8105814:	695b      	ldr	r3, [r3, #20]
 8105816:	4313      	orrs	r3, r2
 8105818:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 810581a:	687b      	ldr	r3, [r7, #4]
 810581c:	68fa      	ldr	r2, [r7, #12]
 810581e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8105820:	683b      	ldr	r3, [r7, #0]
 8105822:	689a      	ldr	r2, [r3, #8]
 8105824:	687b      	ldr	r3, [r7, #4]
 8105826:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8105828:	683b      	ldr	r3, [r7, #0]
 810582a:	681a      	ldr	r2, [r3, #0]
 810582c:	687b      	ldr	r3, [r7, #4]
 810582e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8105830:	687b      	ldr	r3, [r7, #4]
 8105832:	4a10      	ldr	r2, [pc, #64]	; (8105874 <TIM_Base_SetConfig+0x114>)
 8105834:	4293      	cmp	r3, r2
 8105836:	d00f      	beq.n	8105858 <TIM_Base_SetConfig+0xf8>
 8105838:	687b      	ldr	r3, [r7, #4]
 810583a:	4a12      	ldr	r2, [pc, #72]	; (8105884 <TIM_Base_SetConfig+0x124>)
 810583c:	4293      	cmp	r3, r2
 810583e:	d00b      	beq.n	8105858 <TIM_Base_SetConfig+0xf8>
 8105840:	687b      	ldr	r3, [r7, #4]
 8105842:	4a11      	ldr	r2, [pc, #68]	; (8105888 <TIM_Base_SetConfig+0x128>)
 8105844:	4293      	cmp	r3, r2
 8105846:	d007      	beq.n	8105858 <TIM_Base_SetConfig+0xf8>
 8105848:	687b      	ldr	r3, [r7, #4]
 810584a:	4a10      	ldr	r2, [pc, #64]	; (810588c <TIM_Base_SetConfig+0x12c>)
 810584c:	4293      	cmp	r3, r2
 810584e:	d003      	beq.n	8105858 <TIM_Base_SetConfig+0xf8>
 8105850:	687b      	ldr	r3, [r7, #4]
 8105852:	4a0f      	ldr	r2, [pc, #60]	; (8105890 <TIM_Base_SetConfig+0x130>)
 8105854:	4293      	cmp	r3, r2
 8105856:	d103      	bne.n	8105860 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8105858:	683b      	ldr	r3, [r7, #0]
 810585a:	691a      	ldr	r2, [r3, #16]
 810585c:	687b      	ldr	r3, [r7, #4]
 810585e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8105860:	687b      	ldr	r3, [r7, #4]
 8105862:	2201      	movs	r2, #1
 8105864:	615a      	str	r2, [r3, #20]
}
 8105866:	bf00      	nop
 8105868:	3714      	adds	r7, #20
 810586a:	46bd      	mov	sp, r7
 810586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105870:	4770      	bx	lr
 8105872:	bf00      	nop
 8105874:	40010000 	.word	0x40010000
 8105878:	40000400 	.word	0x40000400
 810587c:	40000800 	.word	0x40000800
 8105880:	40000c00 	.word	0x40000c00
 8105884:	40010400 	.word	0x40010400
 8105888:	40014000 	.word	0x40014000
 810588c:	40014400 	.word	0x40014400
 8105890:	40014800 	.word	0x40014800

08105894 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8105894:	b480      	push	{r7}
 8105896:	b083      	sub	sp, #12
 8105898:	af00      	add	r7, sp, #0
 810589a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 810589c:	bf00      	nop
 810589e:	370c      	adds	r7, #12
 81058a0:	46bd      	mov	sp, r7
 81058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81058a6:	4770      	bx	lr

081058a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 81058a8:	b480      	push	{r7}
 81058aa:	b083      	sub	sp, #12
 81058ac:	af00      	add	r7, sp, #0
 81058ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 81058b0:	bf00      	nop
 81058b2:	370c      	adds	r7, #12
 81058b4:	46bd      	mov	sp, r7
 81058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81058ba:	4770      	bx	lr

081058bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 81058bc:	b480      	push	{r7}
 81058be:	b083      	sub	sp, #12
 81058c0:	af00      	add	r7, sp, #0
 81058c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 81058c4:	bf00      	nop
 81058c6:	370c      	adds	r7, #12
 81058c8:	46bd      	mov	sp, r7
 81058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81058ce:	4770      	bx	lr

081058d0 <__errno>:
 81058d0:	4b01      	ldr	r3, [pc, #4]	; (81058d8 <__errno+0x8>)
 81058d2:	6818      	ldr	r0, [r3, #0]
 81058d4:	4770      	bx	lr
 81058d6:	bf00      	nop
 81058d8:	10000038 	.word	0x10000038

081058dc <__libc_init_array>:
 81058dc:	b570      	push	{r4, r5, r6, lr}
 81058de:	4d0d      	ldr	r5, [pc, #52]	; (8105914 <__libc_init_array+0x38>)
 81058e0:	4c0d      	ldr	r4, [pc, #52]	; (8105918 <__libc_init_array+0x3c>)
 81058e2:	1b64      	subs	r4, r4, r5
 81058e4:	10a4      	asrs	r4, r4, #2
 81058e6:	2600      	movs	r6, #0
 81058e8:	42a6      	cmp	r6, r4
 81058ea:	d109      	bne.n	8105900 <__libc_init_array+0x24>
 81058ec:	4d0b      	ldr	r5, [pc, #44]	; (810591c <__libc_init_array+0x40>)
 81058ee:	4c0c      	ldr	r4, [pc, #48]	; (8105920 <__libc_init_array+0x44>)
 81058f0:	f000 fc8e 	bl	8106210 <_init>
 81058f4:	1b64      	subs	r4, r4, r5
 81058f6:	10a4      	asrs	r4, r4, #2
 81058f8:	2600      	movs	r6, #0
 81058fa:	42a6      	cmp	r6, r4
 81058fc:	d105      	bne.n	810590a <__libc_init_array+0x2e>
 81058fe:	bd70      	pop	{r4, r5, r6, pc}
 8105900:	f855 3b04 	ldr.w	r3, [r5], #4
 8105904:	4798      	blx	r3
 8105906:	3601      	adds	r6, #1
 8105908:	e7ee      	b.n	81058e8 <__libc_init_array+0xc>
 810590a:	f855 3b04 	ldr.w	r3, [r5], #4
 810590e:	4798      	blx	r3
 8105910:	3601      	adds	r6, #1
 8105912:	e7f2      	b.n	81058fa <__libc_init_array+0x1e>
 8105914:	081062c0 	.word	0x081062c0
 8105918:	081062c0 	.word	0x081062c0
 810591c:	081062c0 	.word	0x081062c0
 8105920:	081062c4 	.word	0x081062c4

08105924 <memset>:
 8105924:	4402      	add	r2, r0
 8105926:	4603      	mov	r3, r0
 8105928:	4293      	cmp	r3, r2
 810592a:	d100      	bne.n	810592e <memset+0xa>
 810592c:	4770      	bx	lr
 810592e:	f803 1b01 	strb.w	r1, [r3], #1
 8105932:	e7f9      	b.n	8105928 <memset+0x4>

08105934 <siprintf>:
 8105934:	b40e      	push	{r1, r2, r3}
 8105936:	b500      	push	{lr}
 8105938:	b09c      	sub	sp, #112	; 0x70
 810593a:	ab1d      	add	r3, sp, #116	; 0x74
 810593c:	9002      	str	r0, [sp, #8]
 810593e:	9006      	str	r0, [sp, #24]
 8105940:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8105944:	4809      	ldr	r0, [pc, #36]	; (810596c <siprintf+0x38>)
 8105946:	9107      	str	r1, [sp, #28]
 8105948:	9104      	str	r1, [sp, #16]
 810594a:	4909      	ldr	r1, [pc, #36]	; (8105970 <siprintf+0x3c>)
 810594c:	f853 2b04 	ldr.w	r2, [r3], #4
 8105950:	9105      	str	r1, [sp, #20]
 8105952:	6800      	ldr	r0, [r0, #0]
 8105954:	9301      	str	r3, [sp, #4]
 8105956:	a902      	add	r1, sp, #8
 8105958:	f000 f868 	bl	8105a2c <_svfiprintf_r>
 810595c:	9b02      	ldr	r3, [sp, #8]
 810595e:	2200      	movs	r2, #0
 8105960:	701a      	strb	r2, [r3, #0]
 8105962:	b01c      	add	sp, #112	; 0x70
 8105964:	f85d eb04 	ldr.w	lr, [sp], #4
 8105968:	b003      	add	sp, #12
 810596a:	4770      	bx	lr
 810596c:	10000038 	.word	0x10000038
 8105970:	ffff0208 	.word	0xffff0208

08105974 <__ssputs_r>:
 8105974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8105978:	688e      	ldr	r6, [r1, #8]
 810597a:	429e      	cmp	r6, r3
 810597c:	4682      	mov	sl, r0
 810597e:	460c      	mov	r4, r1
 8105980:	4690      	mov	r8, r2
 8105982:	461f      	mov	r7, r3
 8105984:	d838      	bhi.n	81059f8 <__ssputs_r+0x84>
 8105986:	898a      	ldrh	r2, [r1, #12]
 8105988:	f412 6f90 	tst.w	r2, #1152	; 0x480
 810598c:	d032      	beq.n	81059f4 <__ssputs_r+0x80>
 810598e:	6825      	ldr	r5, [r4, #0]
 8105990:	6909      	ldr	r1, [r1, #16]
 8105992:	eba5 0901 	sub.w	r9, r5, r1
 8105996:	6965      	ldr	r5, [r4, #20]
 8105998:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810599c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 81059a0:	3301      	adds	r3, #1
 81059a2:	444b      	add	r3, r9
 81059a4:	106d      	asrs	r5, r5, #1
 81059a6:	429d      	cmp	r5, r3
 81059a8:	bf38      	it	cc
 81059aa:	461d      	movcc	r5, r3
 81059ac:	0553      	lsls	r3, r2, #21
 81059ae:	d531      	bpl.n	8105a14 <__ssputs_r+0xa0>
 81059b0:	4629      	mov	r1, r5
 81059b2:	f000 fb63 	bl	810607c <_malloc_r>
 81059b6:	4606      	mov	r6, r0
 81059b8:	b950      	cbnz	r0, 81059d0 <__ssputs_r+0x5c>
 81059ba:	230c      	movs	r3, #12
 81059bc:	f8ca 3000 	str.w	r3, [sl]
 81059c0:	89a3      	ldrh	r3, [r4, #12]
 81059c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81059c6:	81a3      	strh	r3, [r4, #12]
 81059c8:	f04f 30ff 	mov.w	r0, #4294967295
 81059cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81059d0:	6921      	ldr	r1, [r4, #16]
 81059d2:	464a      	mov	r2, r9
 81059d4:	f000 fabe 	bl	8105f54 <memcpy>
 81059d8:	89a3      	ldrh	r3, [r4, #12]
 81059da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 81059de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 81059e2:	81a3      	strh	r3, [r4, #12]
 81059e4:	6126      	str	r6, [r4, #16]
 81059e6:	6165      	str	r5, [r4, #20]
 81059e8:	444e      	add	r6, r9
 81059ea:	eba5 0509 	sub.w	r5, r5, r9
 81059ee:	6026      	str	r6, [r4, #0]
 81059f0:	60a5      	str	r5, [r4, #8]
 81059f2:	463e      	mov	r6, r7
 81059f4:	42be      	cmp	r6, r7
 81059f6:	d900      	bls.n	81059fa <__ssputs_r+0x86>
 81059f8:	463e      	mov	r6, r7
 81059fa:	6820      	ldr	r0, [r4, #0]
 81059fc:	4632      	mov	r2, r6
 81059fe:	4641      	mov	r1, r8
 8105a00:	f000 fab6 	bl	8105f70 <memmove>
 8105a04:	68a3      	ldr	r3, [r4, #8]
 8105a06:	1b9b      	subs	r3, r3, r6
 8105a08:	60a3      	str	r3, [r4, #8]
 8105a0a:	6823      	ldr	r3, [r4, #0]
 8105a0c:	4433      	add	r3, r6
 8105a0e:	6023      	str	r3, [r4, #0]
 8105a10:	2000      	movs	r0, #0
 8105a12:	e7db      	b.n	81059cc <__ssputs_r+0x58>
 8105a14:	462a      	mov	r2, r5
 8105a16:	f000 fba5 	bl	8106164 <_realloc_r>
 8105a1a:	4606      	mov	r6, r0
 8105a1c:	2800      	cmp	r0, #0
 8105a1e:	d1e1      	bne.n	81059e4 <__ssputs_r+0x70>
 8105a20:	6921      	ldr	r1, [r4, #16]
 8105a22:	4650      	mov	r0, sl
 8105a24:	f000 fabe 	bl	8105fa4 <_free_r>
 8105a28:	e7c7      	b.n	81059ba <__ssputs_r+0x46>
	...

08105a2c <_svfiprintf_r>:
 8105a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8105a30:	4698      	mov	r8, r3
 8105a32:	898b      	ldrh	r3, [r1, #12]
 8105a34:	061b      	lsls	r3, r3, #24
 8105a36:	b09d      	sub	sp, #116	; 0x74
 8105a38:	4607      	mov	r7, r0
 8105a3a:	460d      	mov	r5, r1
 8105a3c:	4614      	mov	r4, r2
 8105a3e:	d50e      	bpl.n	8105a5e <_svfiprintf_r+0x32>
 8105a40:	690b      	ldr	r3, [r1, #16]
 8105a42:	b963      	cbnz	r3, 8105a5e <_svfiprintf_r+0x32>
 8105a44:	2140      	movs	r1, #64	; 0x40
 8105a46:	f000 fb19 	bl	810607c <_malloc_r>
 8105a4a:	6028      	str	r0, [r5, #0]
 8105a4c:	6128      	str	r0, [r5, #16]
 8105a4e:	b920      	cbnz	r0, 8105a5a <_svfiprintf_r+0x2e>
 8105a50:	230c      	movs	r3, #12
 8105a52:	603b      	str	r3, [r7, #0]
 8105a54:	f04f 30ff 	mov.w	r0, #4294967295
 8105a58:	e0d1      	b.n	8105bfe <_svfiprintf_r+0x1d2>
 8105a5a:	2340      	movs	r3, #64	; 0x40
 8105a5c:	616b      	str	r3, [r5, #20]
 8105a5e:	2300      	movs	r3, #0
 8105a60:	9309      	str	r3, [sp, #36]	; 0x24
 8105a62:	2320      	movs	r3, #32
 8105a64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8105a68:	f8cd 800c 	str.w	r8, [sp, #12]
 8105a6c:	2330      	movs	r3, #48	; 0x30
 8105a6e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8105c18 <_svfiprintf_r+0x1ec>
 8105a72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8105a76:	f04f 0901 	mov.w	r9, #1
 8105a7a:	4623      	mov	r3, r4
 8105a7c:	469a      	mov	sl, r3
 8105a7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8105a82:	b10a      	cbz	r2, 8105a88 <_svfiprintf_r+0x5c>
 8105a84:	2a25      	cmp	r2, #37	; 0x25
 8105a86:	d1f9      	bne.n	8105a7c <_svfiprintf_r+0x50>
 8105a88:	ebba 0b04 	subs.w	fp, sl, r4
 8105a8c:	d00b      	beq.n	8105aa6 <_svfiprintf_r+0x7a>
 8105a8e:	465b      	mov	r3, fp
 8105a90:	4622      	mov	r2, r4
 8105a92:	4629      	mov	r1, r5
 8105a94:	4638      	mov	r0, r7
 8105a96:	f7ff ff6d 	bl	8105974 <__ssputs_r>
 8105a9a:	3001      	adds	r0, #1
 8105a9c:	f000 80aa 	beq.w	8105bf4 <_svfiprintf_r+0x1c8>
 8105aa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8105aa2:	445a      	add	r2, fp
 8105aa4:	9209      	str	r2, [sp, #36]	; 0x24
 8105aa6:	f89a 3000 	ldrb.w	r3, [sl]
 8105aaa:	2b00      	cmp	r3, #0
 8105aac:	f000 80a2 	beq.w	8105bf4 <_svfiprintf_r+0x1c8>
 8105ab0:	2300      	movs	r3, #0
 8105ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8105ab6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8105aba:	f10a 0a01 	add.w	sl, sl, #1
 8105abe:	9304      	str	r3, [sp, #16]
 8105ac0:	9307      	str	r3, [sp, #28]
 8105ac2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8105ac6:	931a      	str	r3, [sp, #104]	; 0x68
 8105ac8:	4654      	mov	r4, sl
 8105aca:	2205      	movs	r2, #5
 8105acc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8105ad0:	4851      	ldr	r0, [pc, #324]	; (8105c18 <_svfiprintf_r+0x1ec>)
 8105ad2:	f7fa fc05 	bl	81002e0 <memchr>
 8105ad6:	9a04      	ldr	r2, [sp, #16]
 8105ad8:	b9d8      	cbnz	r0, 8105b12 <_svfiprintf_r+0xe6>
 8105ada:	06d0      	lsls	r0, r2, #27
 8105adc:	bf44      	itt	mi
 8105ade:	2320      	movmi	r3, #32
 8105ae0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8105ae4:	0711      	lsls	r1, r2, #28
 8105ae6:	bf44      	itt	mi
 8105ae8:	232b      	movmi	r3, #43	; 0x2b
 8105aea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8105aee:	f89a 3000 	ldrb.w	r3, [sl]
 8105af2:	2b2a      	cmp	r3, #42	; 0x2a
 8105af4:	d015      	beq.n	8105b22 <_svfiprintf_r+0xf6>
 8105af6:	9a07      	ldr	r2, [sp, #28]
 8105af8:	4654      	mov	r4, sl
 8105afa:	2000      	movs	r0, #0
 8105afc:	f04f 0c0a 	mov.w	ip, #10
 8105b00:	4621      	mov	r1, r4
 8105b02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8105b06:	3b30      	subs	r3, #48	; 0x30
 8105b08:	2b09      	cmp	r3, #9
 8105b0a:	d94e      	bls.n	8105baa <_svfiprintf_r+0x17e>
 8105b0c:	b1b0      	cbz	r0, 8105b3c <_svfiprintf_r+0x110>
 8105b0e:	9207      	str	r2, [sp, #28]
 8105b10:	e014      	b.n	8105b3c <_svfiprintf_r+0x110>
 8105b12:	eba0 0308 	sub.w	r3, r0, r8
 8105b16:	fa09 f303 	lsl.w	r3, r9, r3
 8105b1a:	4313      	orrs	r3, r2
 8105b1c:	9304      	str	r3, [sp, #16]
 8105b1e:	46a2      	mov	sl, r4
 8105b20:	e7d2      	b.n	8105ac8 <_svfiprintf_r+0x9c>
 8105b22:	9b03      	ldr	r3, [sp, #12]
 8105b24:	1d19      	adds	r1, r3, #4
 8105b26:	681b      	ldr	r3, [r3, #0]
 8105b28:	9103      	str	r1, [sp, #12]
 8105b2a:	2b00      	cmp	r3, #0
 8105b2c:	bfbb      	ittet	lt
 8105b2e:	425b      	neglt	r3, r3
 8105b30:	f042 0202 	orrlt.w	r2, r2, #2
 8105b34:	9307      	strge	r3, [sp, #28]
 8105b36:	9307      	strlt	r3, [sp, #28]
 8105b38:	bfb8      	it	lt
 8105b3a:	9204      	strlt	r2, [sp, #16]
 8105b3c:	7823      	ldrb	r3, [r4, #0]
 8105b3e:	2b2e      	cmp	r3, #46	; 0x2e
 8105b40:	d10c      	bne.n	8105b5c <_svfiprintf_r+0x130>
 8105b42:	7863      	ldrb	r3, [r4, #1]
 8105b44:	2b2a      	cmp	r3, #42	; 0x2a
 8105b46:	d135      	bne.n	8105bb4 <_svfiprintf_r+0x188>
 8105b48:	9b03      	ldr	r3, [sp, #12]
 8105b4a:	1d1a      	adds	r2, r3, #4
 8105b4c:	681b      	ldr	r3, [r3, #0]
 8105b4e:	9203      	str	r2, [sp, #12]
 8105b50:	2b00      	cmp	r3, #0
 8105b52:	bfb8      	it	lt
 8105b54:	f04f 33ff 	movlt.w	r3, #4294967295
 8105b58:	3402      	adds	r4, #2
 8105b5a:	9305      	str	r3, [sp, #20]
 8105b5c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8105c28 <_svfiprintf_r+0x1fc>
 8105b60:	7821      	ldrb	r1, [r4, #0]
 8105b62:	2203      	movs	r2, #3
 8105b64:	4650      	mov	r0, sl
 8105b66:	f7fa fbbb 	bl	81002e0 <memchr>
 8105b6a:	b140      	cbz	r0, 8105b7e <_svfiprintf_r+0x152>
 8105b6c:	2340      	movs	r3, #64	; 0x40
 8105b6e:	eba0 000a 	sub.w	r0, r0, sl
 8105b72:	fa03 f000 	lsl.w	r0, r3, r0
 8105b76:	9b04      	ldr	r3, [sp, #16]
 8105b78:	4303      	orrs	r3, r0
 8105b7a:	3401      	adds	r4, #1
 8105b7c:	9304      	str	r3, [sp, #16]
 8105b7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8105b82:	4826      	ldr	r0, [pc, #152]	; (8105c1c <_svfiprintf_r+0x1f0>)
 8105b84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8105b88:	2206      	movs	r2, #6
 8105b8a:	f7fa fba9 	bl	81002e0 <memchr>
 8105b8e:	2800      	cmp	r0, #0
 8105b90:	d038      	beq.n	8105c04 <_svfiprintf_r+0x1d8>
 8105b92:	4b23      	ldr	r3, [pc, #140]	; (8105c20 <_svfiprintf_r+0x1f4>)
 8105b94:	bb1b      	cbnz	r3, 8105bde <_svfiprintf_r+0x1b2>
 8105b96:	9b03      	ldr	r3, [sp, #12]
 8105b98:	3307      	adds	r3, #7
 8105b9a:	f023 0307 	bic.w	r3, r3, #7
 8105b9e:	3308      	adds	r3, #8
 8105ba0:	9303      	str	r3, [sp, #12]
 8105ba2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8105ba4:	4433      	add	r3, r6
 8105ba6:	9309      	str	r3, [sp, #36]	; 0x24
 8105ba8:	e767      	b.n	8105a7a <_svfiprintf_r+0x4e>
 8105baa:	fb0c 3202 	mla	r2, ip, r2, r3
 8105bae:	460c      	mov	r4, r1
 8105bb0:	2001      	movs	r0, #1
 8105bb2:	e7a5      	b.n	8105b00 <_svfiprintf_r+0xd4>
 8105bb4:	2300      	movs	r3, #0
 8105bb6:	3401      	adds	r4, #1
 8105bb8:	9305      	str	r3, [sp, #20]
 8105bba:	4619      	mov	r1, r3
 8105bbc:	f04f 0c0a 	mov.w	ip, #10
 8105bc0:	4620      	mov	r0, r4
 8105bc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8105bc6:	3a30      	subs	r2, #48	; 0x30
 8105bc8:	2a09      	cmp	r2, #9
 8105bca:	d903      	bls.n	8105bd4 <_svfiprintf_r+0x1a8>
 8105bcc:	2b00      	cmp	r3, #0
 8105bce:	d0c5      	beq.n	8105b5c <_svfiprintf_r+0x130>
 8105bd0:	9105      	str	r1, [sp, #20]
 8105bd2:	e7c3      	b.n	8105b5c <_svfiprintf_r+0x130>
 8105bd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8105bd8:	4604      	mov	r4, r0
 8105bda:	2301      	movs	r3, #1
 8105bdc:	e7f0      	b.n	8105bc0 <_svfiprintf_r+0x194>
 8105bde:	ab03      	add	r3, sp, #12
 8105be0:	9300      	str	r3, [sp, #0]
 8105be2:	462a      	mov	r2, r5
 8105be4:	4b0f      	ldr	r3, [pc, #60]	; (8105c24 <_svfiprintf_r+0x1f8>)
 8105be6:	a904      	add	r1, sp, #16
 8105be8:	4638      	mov	r0, r7
 8105bea:	f3af 8000 	nop.w
 8105bee:	1c42      	adds	r2, r0, #1
 8105bf0:	4606      	mov	r6, r0
 8105bf2:	d1d6      	bne.n	8105ba2 <_svfiprintf_r+0x176>
 8105bf4:	89ab      	ldrh	r3, [r5, #12]
 8105bf6:	065b      	lsls	r3, r3, #25
 8105bf8:	f53f af2c 	bmi.w	8105a54 <_svfiprintf_r+0x28>
 8105bfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8105bfe:	b01d      	add	sp, #116	; 0x74
 8105c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8105c04:	ab03      	add	r3, sp, #12
 8105c06:	9300      	str	r3, [sp, #0]
 8105c08:	462a      	mov	r2, r5
 8105c0a:	4b06      	ldr	r3, [pc, #24]	; (8105c24 <_svfiprintf_r+0x1f8>)
 8105c0c:	a904      	add	r1, sp, #16
 8105c0e:	4638      	mov	r0, r7
 8105c10:	f000 f87a 	bl	8105d08 <_printf_i>
 8105c14:	e7eb      	b.n	8105bee <_svfiprintf_r+0x1c2>
 8105c16:	bf00      	nop
 8105c18:	0810628c 	.word	0x0810628c
 8105c1c:	08106296 	.word	0x08106296
 8105c20:	00000000 	.word	0x00000000
 8105c24:	08105975 	.word	0x08105975
 8105c28:	08106292 	.word	0x08106292

08105c2c <_printf_common>:
 8105c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8105c30:	4616      	mov	r6, r2
 8105c32:	4699      	mov	r9, r3
 8105c34:	688a      	ldr	r2, [r1, #8]
 8105c36:	690b      	ldr	r3, [r1, #16]
 8105c38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8105c3c:	4293      	cmp	r3, r2
 8105c3e:	bfb8      	it	lt
 8105c40:	4613      	movlt	r3, r2
 8105c42:	6033      	str	r3, [r6, #0]
 8105c44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8105c48:	4607      	mov	r7, r0
 8105c4a:	460c      	mov	r4, r1
 8105c4c:	b10a      	cbz	r2, 8105c52 <_printf_common+0x26>
 8105c4e:	3301      	adds	r3, #1
 8105c50:	6033      	str	r3, [r6, #0]
 8105c52:	6823      	ldr	r3, [r4, #0]
 8105c54:	0699      	lsls	r1, r3, #26
 8105c56:	bf42      	ittt	mi
 8105c58:	6833      	ldrmi	r3, [r6, #0]
 8105c5a:	3302      	addmi	r3, #2
 8105c5c:	6033      	strmi	r3, [r6, #0]
 8105c5e:	6825      	ldr	r5, [r4, #0]
 8105c60:	f015 0506 	ands.w	r5, r5, #6
 8105c64:	d106      	bne.n	8105c74 <_printf_common+0x48>
 8105c66:	f104 0a19 	add.w	sl, r4, #25
 8105c6a:	68e3      	ldr	r3, [r4, #12]
 8105c6c:	6832      	ldr	r2, [r6, #0]
 8105c6e:	1a9b      	subs	r3, r3, r2
 8105c70:	42ab      	cmp	r3, r5
 8105c72:	dc26      	bgt.n	8105cc2 <_printf_common+0x96>
 8105c74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8105c78:	1e13      	subs	r3, r2, #0
 8105c7a:	6822      	ldr	r2, [r4, #0]
 8105c7c:	bf18      	it	ne
 8105c7e:	2301      	movne	r3, #1
 8105c80:	0692      	lsls	r2, r2, #26
 8105c82:	d42b      	bmi.n	8105cdc <_printf_common+0xb0>
 8105c84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8105c88:	4649      	mov	r1, r9
 8105c8a:	4638      	mov	r0, r7
 8105c8c:	47c0      	blx	r8
 8105c8e:	3001      	adds	r0, #1
 8105c90:	d01e      	beq.n	8105cd0 <_printf_common+0xa4>
 8105c92:	6823      	ldr	r3, [r4, #0]
 8105c94:	68e5      	ldr	r5, [r4, #12]
 8105c96:	6832      	ldr	r2, [r6, #0]
 8105c98:	f003 0306 	and.w	r3, r3, #6
 8105c9c:	2b04      	cmp	r3, #4
 8105c9e:	bf08      	it	eq
 8105ca0:	1aad      	subeq	r5, r5, r2
 8105ca2:	68a3      	ldr	r3, [r4, #8]
 8105ca4:	6922      	ldr	r2, [r4, #16]
 8105ca6:	bf0c      	ite	eq
 8105ca8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8105cac:	2500      	movne	r5, #0
 8105cae:	4293      	cmp	r3, r2
 8105cb0:	bfc4      	itt	gt
 8105cb2:	1a9b      	subgt	r3, r3, r2
 8105cb4:	18ed      	addgt	r5, r5, r3
 8105cb6:	2600      	movs	r6, #0
 8105cb8:	341a      	adds	r4, #26
 8105cba:	42b5      	cmp	r5, r6
 8105cbc:	d11a      	bne.n	8105cf4 <_printf_common+0xc8>
 8105cbe:	2000      	movs	r0, #0
 8105cc0:	e008      	b.n	8105cd4 <_printf_common+0xa8>
 8105cc2:	2301      	movs	r3, #1
 8105cc4:	4652      	mov	r2, sl
 8105cc6:	4649      	mov	r1, r9
 8105cc8:	4638      	mov	r0, r7
 8105cca:	47c0      	blx	r8
 8105ccc:	3001      	adds	r0, #1
 8105cce:	d103      	bne.n	8105cd8 <_printf_common+0xac>
 8105cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8105cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8105cd8:	3501      	adds	r5, #1
 8105cda:	e7c6      	b.n	8105c6a <_printf_common+0x3e>
 8105cdc:	18e1      	adds	r1, r4, r3
 8105cde:	1c5a      	adds	r2, r3, #1
 8105ce0:	2030      	movs	r0, #48	; 0x30
 8105ce2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8105ce6:	4422      	add	r2, r4
 8105ce8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8105cec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8105cf0:	3302      	adds	r3, #2
 8105cf2:	e7c7      	b.n	8105c84 <_printf_common+0x58>
 8105cf4:	2301      	movs	r3, #1
 8105cf6:	4622      	mov	r2, r4
 8105cf8:	4649      	mov	r1, r9
 8105cfa:	4638      	mov	r0, r7
 8105cfc:	47c0      	blx	r8
 8105cfe:	3001      	adds	r0, #1
 8105d00:	d0e6      	beq.n	8105cd0 <_printf_common+0xa4>
 8105d02:	3601      	adds	r6, #1
 8105d04:	e7d9      	b.n	8105cba <_printf_common+0x8e>
	...

08105d08 <_printf_i>:
 8105d08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8105d0c:	7e0f      	ldrb	r7, [r1, #24]
 8105d0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8105d10:	2f78      	cmp	r7, #120	; 0x78
 8105d12:	4691      	mov	r9, r2
 8105d14:	4680      	mov	r8, r0
 8105d16:	460c      	mov	r4, r1
 8105d18:	469a      	mov	sl, r3
 8105d1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8105d1e:	d807      	bhi.n	8105d30 <_printf_i+0x28>
 8105d20:	2f62      	cmp	r7, #98	; 0x62
 8105d22:	d80a      	bhi.n	8105d3a <_printf_i+0x32>
 8105d24:	2f00      	cmp	r7, #0
 8105d26:	f000 80d8 	beq.w	8105eda <_printf_i+0x1d2>
 8105d2a:	2f58      	cmp	r7, #88	; 0x58
 8105d2c:	f000 80a3 	beq.w	8105e76 <_printf_i+0x16e>
 8105d30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8105d34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8105d38:	e03a      	b.n	8105db0 <_printf_i+0xa8>
 8105d3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8105d3e:	2b15      	cmp	r3, #21
 8105d40:	d8f6      	bhi.n	8105d30 <_printf_i+0x28>
 8105d42:	a101      	add	r1, pc, #4	; (adr r1, 8105d48 <_printf_i+0x40>)
 8105d44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8105d48:	08105da1 	.word	0x08105da1
 8105d4c:	08105db5 	.word	0x08105db5
 8105d50:	08105d31 	.word	0x08105d31
 8105d54:	08105d31 	.word	0x08105d31
 8105d58:	08105d31 	.word	0x08105d31
 8105d5c:	08105d31 	.word	0x08105d31
 8105d60:	08105db5 	.word	0x08105db5
 8105d64:	08105d31 	.word	0x08105d31
 8105d68:	08105d31 	.word	0x08105d31
 8105d6c:	08105d31 	.word	0x08105d31
 8105d70:	08105d31 	.word	0x08105d31
 8105d74:	08105ec1 	.word	0x08105ec1
 8105d78:	08105de5 	.word	0x08105de5
 8105d7c:	08105ea3 	.word	0x08105ea3
 8105d80:	08105d31 	.word	0x08105d31
 8105d84:	08105d31 	.word	0x08105d31
 8105d88:	08105ee3 	.word	0x08105ee3
 8105d8c:	08105d31 	.word	0x08105d31
 8105d90:	08105de5 	.word	0x08105de5
 8105d94:	08105d31 	.word	0x08105d31
 8105d98:	08105d31 	.word	0x08105d31
 8105d9c:	08105eab 	.word	0x08105eab
 8105da0:	682b      	ldr	r3, [r5, #0]
 8105da2:	1d1a      	adds	r2, r3, #4
 8105da4:	681b      	ldr	r3, [r3, #0]
 8105da6:	602a      	str	r2, [r5, #0]
 8105da8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8105dac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8105db0:	2301      	movs	r3, #1
 8105db2:	e0a3      	b.n	8105efc <_printf_i+0x1f4>
 8105db4:	6820      	ldr	r0, [r4, #0]
 8105db6:	6829      	ldr	r1, [r5, #0]
 8105db8:	0606      	lsls	r6, r0, #24
 8105dba:	f101 0304 	add.w	r3, r1, #4
 8105dbe:	d50a      	bpl.n	8105dd6 <_printf_i+0xce>
 8105dc0:	680e      	ldr	r6, [r1, #0]
 8105dc2:	602b      	str	r3, [r5, #0]
 8105dc4:	2e00      	cmp	r6, #0
 8105dc6:	da03      	bge.n	8105dd0 <_printf_i+0xc8>
 8105dc8:	232d      	movs	r3, #45	; 0x2d
 8105dca:	4276      	negs	r6, r6
 8105dcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8105dd0:	485e      	ldr	r0, [pc, #376]	; (8105f4c <_printf_i+0x244>)
 8105dd2:	230a      	movs	r3, #10
 8105dd4:	e019      	b.n	8105e0a <_printf_i+0x102>
 8105dd6:	680e      	ldr	r6, [r1, #0]
 8105dd8:	602b      	str	r3, [r5, #0]
 8105dda:	f010 0f40 	tst.w	r0, #64	; 0x40
 8105dde:	bf18      	it	ne
 8105de0:	b236      	sxthne	r6, r6
 8105de2:	e7ef      	b.n	8105dc4 <_printf_i+0xbc>
 8105de4:	682b      	ldr	r3, [r5, #0]
 8105de6:	6820      	ldr	r0, [r4, #0]
 8105de8:	1d19      	adds	r1, r3, #4
 8105dea:	6029      	str	r1, [r5, #0]
 8105dec:	0601      	lsls	r1, r0, #24
 8105dee:	d501      	bpl.n	8105df4 <_printf_i+0xec>
 8105df0:	681e      	ldr	r6, [r3, #0]
 8105df2:	e002      	b.n	8105dfa <_printf_i+0xf2>
 8105df4:	0646      	lsls	r6, r0, #25
 8105df6:	d5fb      	bpl.n	8105df0 <_printf_i+0xe8>
 8105df8:	881e      	ldrh	r6, [r3, #0]
 8105dfa:	4854      	ldr	r0, [pc, #336]	; (8105f4c <_printf_i+0x244>)
 8105dfc:	2f6f      	cmp	r7, #111	; 0x6f
 8105dfe:	bf0c      	ite	eq
 8105e00:	2308      	moveq	r3, #8
 8105e02:	230a      	movne	r3, #10
 8105e04:	2100      	movs	r1, #0
 8105e06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8105e0a:	6865      	ldr	r5, [r4, #4]
 8105e0c:	60a5      	str	r5, [r4, #8]
 8105e0e:	2d00      	cmp	r5, #0
 8105e10:	bfa2      	ittt	ge
 8105e12:	6821      	ldrge	r1, [r4, #0]
 8105e14:	f021 0104 	bicge.w	r1, r1, #4
 8105e18:	6021      	strge	r1, [r4, #0]
 8105e1a:	b90e      	cbnz	r6, 8105e20 <_printf_i+0x118>
 8105e1c:	2d00      	cmp	r5, #0
 8105e1e:	d04d      	beq.n	8105ebc <_printf_i+0x1b4>
 8105e20:	4615      	mov	r5, r2
 8105e22:	fbb6 f1f3 	udiv	r1, r6, r3
 8105e26:	fb03 6711 	mls	r7, r3, r1, r6
 8105e2a:	5dc7      	ldrb	r7, [r0, r7]
 8105e2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8105e30:	4637      	mov	r7, r6
 8105e32:	42bb      	cmp	r3, r7
 8105e34:	460e      	mov	r6, r1
 8105e36:	d9f4      	bls.n	8105e22 <_printf_i+0x11a>
 8105e38:	2b08      	cmp	r3, #8
 8105e3a:	d10b      	bne.n	8105e54 <_printf_i+0x14c>
 8105e3c:	6823      	ldr	r3, [r4, #0]
 8105e3e:	07de      	lsls	r6, r3, #31
 8105e40:	d508      	bpl.n	8105e54 <_printf_i+0x14c>
 8105e42:	6923      	ldr	r3, [r4, #16]
 8105e44:	6861      	ldr	r1, [r4, #4]
 8105e46:	4299      	cmp	r1, r3
 8105e48:	bfde      	ittt	le
 8105e4a:	2330      	movle	r3, #48	; 0x30
 8105e4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8105e50:	f105 35ff 	addle.w	r5, r5, #4294967295
 8105e54:	1b52      	subs	r2, r2, r5
 8105e56:	6122      	str	r2, [r4, #16]
 8105e58:	f8cd a000 	str.w	sl, [sp]
 8105e5c:	464b      	mov	r3, r9
 8105e5e:	aa03      	add	r2, sp, #12
 8105e60:	4621      	mov	r1, r4
 8105e62:	4640      	mov	r0, r8
 8105e64:	f7ff fee2 	bl	8105c2c <_printf_common>
 8105e68:	3001      	adds	r0, #1
 8105e6a:	d14c      	bne.n	8105f06 <_printf_i+0x1fe>
 8105e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8105e70:	b004      	add	sp, #16
 8105e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8105e76:	4835      	ldr	r0, [pc, #212]	; (8105f4c <_printf_i+0x244>)
 8105e78:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8105e7c:	6829      	ldr	r1, [r5, #0]
 8105e7e:	6823      	ldr	r3, [r4, #0]
 8105e80:	f851 6b04 	ldr.w	r6, [r1], #4
 8105e84:	6029      	str	r1, [r5, #0]
 8105e86:	061d      	lsls	r5, r3, #24
 8105e88:	d514      	bpl.n	8105eb4 <_printf_i+0x1ac>
 8105e8a:	07df      	lsls	r7, r3, #31
 8105e8c:	bf44      	itt	mi
 8105e8e:	f043 0320 	orrmi.w	r3, r3, #32
 8105e92:	6023      	strmi	r3, [r4, #0]
 8105e94:	b91e      	cbnz	r6, 8105e9e <_printf_i+0x196>
 8105e96:	6823      	ldr	r3, [r4, #0]
 8105e98:	f023 0320 	bic.w	r3, r3, #32
 8105e9c:	6023      	str	r3, [r4, #0]
 8105e9e:	2310      	movs	r3, #16
 8105ea0:	e7b0      	b.n	8105e04 <_printf_i+0xfc>
 8105ea2:	6823      	ldr	r3, [r4, #0]
 8105ea4:	f043 0320 	orr.w	r3, r3, #32
 8105ea8:	6023      	str	r3, [r4, #0]
 8105eaa:	2378      	movs	r3, #120	; 0x78
 8105eac:	4828      	ldr	r0, [pc, #160]	; (8105f50 <_printf_i+0x248>)
 8105eae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8105eb2:	e7e3      	b.n	8105e7c <_printf_i+0x174>
 8105eb4:	0659      	lsls	r1, r3, #25
 8105eb6:	bf48      	it	mi
 8105eb8:	b2b6      	uxthmi	r6, r6
 8105eba:	e7e6      	b.n	8105e8a <_printf_i+0x182>
 8105ebc:	4615      	mov	r5, r2
 8105ebe:	e7bb      	b.n	8105e38 <_printf_i+0x130>
 8105ec0:	682b      	ldr	r3, [r5, #0]
 8105ec2:	6826      	ldr	r6, [r4, #0]
 8105ec4:	6961      	ldr	r1, [r4, #20]
 8105ec6:	1d18      	adds	r0, r3, #4
 8105ec8:	6028      	str	r0, [r5, #0]
 8105eca:	0635      	lsls	r5, r6, #24
 8105ecc:	681b      	ldr	r3, [r3, #0]
 8105ece:	d501      	bpl.n	8105ed4 <_printf_i+0x1cc>
 8105ed0:	6019      	str	r1, [r3, #0]
 8105ed2:	e002      	b.n	8105eda <_printf_i+0x1d2>
 8105ed4:	0670      	lsls	r0, r6, #25
 8105ed6:	d5fb      	bpl.n	8105ed0 <_printf_i+0x1c8>
 8105ed8:	8019      	strh	r1, [r3, #0]
 8105eda:	2300      	movs	r3, #0
 8105edc:	6123      	str	r3, [r4, #16]
 8105ede:	4615      	mov	r5, r2
 8105ee0:	e7ba      	b.n	8105e58 <_printf_i+0x150>
 8105ee2:	682b      	ldr	r3, [r5, #0]
 8105ee4:	1d1a      	adds	r2, r3, #4
 8105ee6:	602a      	str	r2, [r5, #0]
 8105ee8:	681d      	ldr	r5, [r3, #0]
 8105eea:	6862      	ldr	r2, [r4, #4]
 8105eec:	2100      	movs	r1, #0
 8105eee:	4628      	mov	r0, r5
 8105ef0:	f7fa f9f6 	bl	81002e0 <memchr>
 8105ef4:	b108      	cbz	r0, 8105efa <_printf_i+0x1f2>
 8105ef6:	1b40      	subs	r0, r0, r5
 8105ef8:	6060      	str	r0, [r4, #4]
 8105efa:	6863      	ldr	r3, [r4, #4]
 8105efc:	6123      	str	r3, [r4, #16]
 8105efe:	2300      	movs	r3, #0
 8105f00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8105f04:	e7a8      	b.n	8105e58 <_printf_i+0x150>
 8105f06:	6923      	ldr	r3, [r4, #16]
 8105f08:	462a      	mov	r2, r5
 8105f0a:	4649      	mov	r1, r9
 8105f0c:	4640      	mov	r0, r8
 8105f0e:	47d0      	blx	sl
 8105f10:	3001      	adds	r0, #1
 8105f12:	d0ab      	beq.n	8105e6c <_printf_i+0x164>
 8105f14:	6823      	ldr	r3, [r4, #0]
 8105f16:	079b      	lsls	r3, r3, #30
 8105f18:	d413      	bmi.n	8105f42 <_printf_i+0x23a>
 8105f1a:	68e0      	ldr	r0, [r4, #12]
 8105f1c:	9b03      	ldr	r3, [sp, #12]
 8105f1e:	4298      	cmp	r0, r3
 8105f20:	bfb8      	it	lt
 8105f22:	4618      	movlt	r0, r3
 8105f24:	e7a4      	b.n	8105e70 <_printf_i+0x168>
 8105f26:	2301      	movs	r3, #1
 8105f28:	4632      	mov	r2, r6
 8105f2a:	4649      	mov	r1, r9
 8105f2c:	4640      	mov	r0, r8
 8105f2e:	47d0      	blx	sl
 8105f30:	3001      	adds	r0, #1
 8105f32:	d09b      	beq.n	8105e6c <_printf_i+0x164>
 8105f34:	3501      	adds	r5, #1
 8105f36:	68e3      	ldr	r3, [r4, #12]
 8105f38:	9903      	ldr	r1, [sp, #12]
 8105f3a:	1a5b      	subs	r3, r3, r1
 8105f3c:	42ab      	cmp	r3, r5
 8105f3e:	dcf2      	bgt.n	8105f26 <_printf_i+0x21e>
 8105f40:	e7eb      	b.n	8105f1a <_printf_i+0x212>
 8105f42:	2500      	movs	r5, #0
 8105f44:	f104 0619 	add.w	r6, r4, #25
 8105f48:	e7f5      	b.n	8105f36 <_printf_i+0x22e>
 8105f4a:	bf00      	nop
 8105f4c:	0810629d 	.word	0x0810629d
 8105f50:	081062ae 	.word	0x081062ae

08105f54 <memcpy>:
 8105f54:	440a      	add	r2, r1
 8105f56:	4291      	cmp	r1, r2
 8105f58:	f100 33ff 	add.w	r3, r0, #4294967295
 8105f5c:	d100      	bne.n	8105f60 <memcpy+0xc>
 8105f5e:	4770      	bx	lr
 8105f60:	b510      	push	{r4, lr}
 8105f62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8105f66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8105f6a:	4291      	cmp	r1, r2
 8105f6c:	d1f9      	bne.n	8105f62 <memcpy+0xe>
 8105f6e:	bd10      	pop	{r4, pc}

08105f70 <memmove>:
 8105f70:	4288      	cmp	r0, r1
 8105f72:	b510      	push	{r4, lr}
 8105f74:	eb01 0402 	add.w	r4, r1, r2
 8105f78:	d902      	bls.n	8105f80 <memmove+0x10>
 8105f7a:	4284      	cmp	r4, r0
 8105f7c:	4623      	mov	r3, r4
 8105f7e:	d807      	bhi.n	8105f90 <memmove+0x20>
 8105f80:	1e43      	subs	r3, r0, #1
 8105f82:	42a1      	cmp	r1, r4
 8105f84:	d008      	beq.n	8105f98 <memmove+0x28>
 8105f86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8105f8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8105f8e:	e7f8      	b.n	8105f82 <memmove+0x12>
 8105f90:	4402      	add	r2, r0
 8105f92:	4601      	mov	r1, r0
 8105f94:	428a      	cmp	r2, r1
 8105f96:	d100      	bne.n	8105f9a <memmove+0x2a>
 8105f98:	bd10      	pop	{r4, pc}
 8105f9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8105f9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8105fa2:	e7f7      	b.n	8105f94 <memmove+0x24>

08105fa4 <_free_r>:
 8105fa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8105fa6:	2900      	cmp	r1, #0
 8105fa8:	d044      	beq.n	8106034 <_free_r+0x90>
 8105faa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8105fae:	9001      	str	r0, [sp, #4]
 8105fb0:	2b00      	cmp	r3, #0
 8105fb2:	f1a1 0404 	sub.w	r4, r1, #4
 8105fb6:	bfb8      	it	lt
 8105fb8:	18e4      	addlt	r4, r4, r3
 8105fba:	f000 f913 	bl	81061e4 <__malloc_lock>
 8105fbe:	4a1e      	ldr	r2, [pc, #120]	; (8106038 <_free_r+0x94>)
 8105fc0:	9801      	ldr	r0, [sp, #4]
 8105fc2:	6813      	ldr	r3, [r2, #0]
 8105fc4:	b933      	cbnz	r3, 8105fd4 <_free_r+0x30>
 8105fc6:	6063      	str	r3, [r4, #4]
 8105fc8:	6014      	str	r4, [r2, #0]
 8105fca:	b003      	add	sp, #12
 8105fcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8105fd0:	f000 b90e 	b.w	81061f0 <__malloc_unlock>
 8105fd4:	42a3      	cmp	r3, r4
 8105fd6:	d908      	bls.n	8105fea <_free_r+0x46>
 8105fd8:	6825      	ldr	r5, [r4, #0]
 8105fda:	1961      	adds	r1, r4, r5
 8105fdc:	428b      	cmp	r3, r1
 8105fde:	bf01      	itttt	eq
 8105fe0:	6819      	ldreq	r1, [r3, #0]
 8105fe2:	685b      	ldreq	r3, [r3, #4]
 8105fe4:	1949      	addeq	r1, r1, r5
 8105fe6:	6021      	streq	r1, [r4, #0]
 8105fe8:	e7ed      	b.n	8105fc6 <_free_r+0x22>
 8105fea:	461a      	mov	r2, r3
 8105fec:	685b      	ldr	r3, [r3, #4]
 8105fee:	b10b      	cbz	r3, 8105ff4 <_free_r+0x50>
 8105ff0:	42a3      	cmp	r3, r4
 8105ff2:	d9fa      	bls.n	8105fea <_free_r+0x46>
 8105ff4:	6811      	ldr	r1, [r2, #0]
 8105ff6:	1855      	adds	r5, r2, r1
 8105ff8:	42a5      	cmp	r5, r4
 8105ffa:	d10b      	bne.n	8106014 <_free_r+0x70>
 8105ffc:	6824      	ldr	r4, [r4, #0]
 8105ffe:	4421      	add	r1, r4
 8106000:	1854      	adds	r4, r2, r1
 8106002:	42a3      	cmp	r3, r4
 8106004:	6011      	str	r1, [r2, #0]
 8106006:	d1e0      	bne.n	8105fca <_free_r+0x26>
 8106008:	681c      	ldr	r4, [r3, #0]
 810600a:	685b      	ldr	r3, [r3, #4]
 810600c:	6053      	str	r3, [r2, #4]
 810600e:	4421      	add	r1, r4
 8106010:	6011      	str	r1, [r2, #0]
 8106012:	e7da      	b.n	8105fca <_free_r+0x26>
 8106014:	d902      	bls.n	810601c <_free_r+0x78>
 8106016:	230c      	movs	r3, #12
 8106018:	6003      	str	r3, [r0, #0]
 810601a:	e7d6      	b.n	8105fca <_free_r+0x26>
 810601c:	6825      	ldr	r5, [r4, #0]
 810601e:	1961      	adds	r1, r4, r5
 8106020:	428b      	cmp	r3, r1
 8106022:	bf04      	itt	eq
 8106024:	6819      	ldreq	r1, [r3, #0]
 8106026:	685b      	ldreq	r3, [r3, #4]
 8106028:	6063      	str	r3, [r4, #4]
 810602a:	bf04      	itt	eq
 810602c:	1949      	addeq	r1, r1, r5
 810602e:	6021      	streq	r1, [r4, #0]
 8106030:	6054      	str	r4, [r2, #4]
 8106032:	e7ca      	b.n	8105fca <_free_r+0x26>
 8106034:	b003      	add	sp, #12
 8106036:	bd30      	pop	{r4, r5, pc}
 8106038:	100002c8 	.word	0x100002c8

0810603c <sbrk_aligned>:
 810603c:	b570      	push	{r4, r5, r6, lr}
 810603e:	4e0e      	ldr	r6, [pc, #56]	; (8106078 <sbrk_aligned+0x3c>)
 8106040:	460c      	mov	r4, r1
 8106042:	6831      	ldr	r1, [r6, #0]
 8106044:	4605      	mov	r5, r0
 8106046:	b911      	cbnz	r1, 810604e <sbrk_aligned+0x12>
 8106048:	f000 f8bc 	bl	81061c4 <_sbrk_r>
 810604c:	6030      	str	r0, [r6, #0]
 810604e:	4621      	mov	r1, r4
 8106050:	4628      	mov	r0, r5
 8106052:	f000 f8b7 	bl	81061c4 <_sbrk_r>
 8106056:	1c43      	adds	r3, r0, #1
 8106058:	d00a      	beq.n	8106070 <sbrk_aligned+0x34>
 810605a:	1cc4      	adds	r4, r0, #3
 810605c:	f024 0403 	bic.w	r4, r4, #3
 8106060:	42a0      	cmp	r0, r4
 8106062:	d007      	beq.n	8106074 <sbrk_aligned+0x38>
 8106064:	1a21      	subs	r1, r4, r0
 8106066:	4628      	mov	r0, r5
 8106068:	f000 f8ac 	bl	81061c4 <_sbrk_r>
 810606c:	3001      	adds	r0, #1
 810606e:	d101      	bne.n	8106074 <sbrk_aligned+0x38>
 8106070:	f04f 34ff 	mov.w	r4, #4294967295
 8106074:	4620      	mov	r0, r4
 8106076:	bd70      	pop	{r4, r5, r6, pc}
 8106078:	100002cc 	.word	0x100002cc

0810607c <_malloc_r>:
 810607c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8106080:	1ccd      	adds	r5, r1, #3
 8106082:	f025 0503 	bic.w	r5, r5, #3
 8106086:	3508      	adds	r5, #8
 8106088:	2d0c      	cmp	r5, #12
 810608a:	bf38      	it	cc
 810608c:	250c      	movcc	r5, #12
 810608e:	2d00      	cmp	r5, #0
 8106090:	4607      	mov	r7, r0
 8106092:	db01      	blt.n	8106098 <_malloc_r+0x1c>
 8106094:	42a9      	cmp	r1, r5
 8106096:	d905      	bls.n	81060a4 <_malloc_r+0x28>
 8106098:	230c      	movs	r3, #12
 810609a:	603b      	str	r3, [r7, #0]
 810609c:	2600      	movs	r6, #0
 810609e:	4630      	mov	r0, r6
 81060a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 81060a4:	4e2e      	ldr	r6, [pc, #184]	; (8106160 <_malloc_r+0xe4>)
 81060a6:	f000 f89d 	bl	81061e4 <__malloc_lock>
 81060aa:	6833      	ldr	r3, [r6, #0]
 81060ac:	461c      	mov	r4, r3
 81060ae:	bb34      	cbnz	r4, 81060fe <_malloc_r+0x82>
 81060b0:	4629      	mov	r1, r5
 81060b2:	4638      	mov	r0, r7
 81060b4:	f7ff ffc2 	bl	810603c <sbrk_aligned>
 81060b8:	1c43      	adds	r3, r0, #1
 81060ba:	4604      	mov	r4, r0
 81060bc:	d14d      	bne.n	810615a <_malloc_r+0xde>
 81060be:	6834      	ldr	r4, [r6, #0]
 81060c0:	4626      	mov	r6, r4
 81060c2:	2e00      	cmp	r6, #0
 81060c4:	d140      	bne.n	8106148 <_malloc_r+0xcc>
 81060c6:	6823      	ldr	r3, [r4, #0]
 81060c8:	4631      	mov	r1, r6
 81060ca:	4638      	mov	r0, r7
 81060cc:	eb04 0803 	add.w	r8, r4, r3
 81060d0:	f000 f878 	bl	81061c4 <_sbrk_r>
 81060d4:	4580      	cmp	r8, r0
 81060d6:	d13a      	bne.n	810614e <_malloc_r+0xd2>
 81060d8:	6821      	ldr	r1, [r4, #0]
 81060da:	3503      	adds	r5, #3
 81060dc:	1a6d      	subs	r5, r5, r1
 81060de:	f025 0503 	bic.w	r5, r5, #3
 81060e2:	3508      	adds	r5, #8
 81060e4:	2d0c      	cmp	r5, #12
 81060e6:	bf38      	it	cc
 81060e8:	250c      	movcc	r5, #12
 81060ea:	4629      	mov	r1, r5
 81060ec:	4638      	mov	r0, r7
 81060ee:	f7ff ffa5 	bl	810603c <sbrk_aligned>
 81060f2:	3001      	adds	r0, #1
 81060f4:	d02b      	beq.n	810614e <_malloc_r+0xd2>
 81060f6:	6823      	ldr	r3, [r4, #0]
 81060f8:	442b      	add	r3, r5
 81060fa:	6023      	str	r3, [r4, #0]
 81060fc:	e00e      	b.n	810611c <_malloc_r+0xa0>
 81060fe:	6822      	ldr	r2, [r4, #0]
 8106100:	1b52      	subs	r2, r2, r5
 8106102:	d41e      	bmi.n	8106142 <_malloc_r+0xc6>
 8106104:	2a0b      	cmp	r2, #11
 8106106:	d916      	bls.n	8106136 <_malloc_r+0xba>
 8106108:	1961      	adds	r1, r4, r5
 810610a:	42a3      	cmp	r3, r4
 810610c:	6025      	str	r5, [r4, #0]
 810610e:	bf18      	it	ne
 8106110:	6059      	strne	r1, [r3, #4]
 8106112:	6863      	ldr	r3, [r4, #4]
 8106114:	bf08      	it	eq
 8106116:	6031      	streq	r1, [r6, #0]
 8106118:	5162      	str	r2, [r4, r5]
 810611a:	604b      	str	r3, [r1, #4]
 810611c:	4638      	mov	r0, r7
 810611e:	f104 060b 	add.w	r6, r4, #11
 8106122:	f000 f865 	bl	81061f0 <__malloc_unlock>
 8106126:	f026 0607 	bic.w	r6, r6, #7
 810612a:	1d23      	adds	r3, r4, #4
 810612c:	1af2      	subs	r2, r6, r3
 810612e:	d0b6      	beq.n	810609e <_malloc_r+0x22>
 8106130:	1b9b      	subs	r3, r3, r6
 8106132:	50a3      	str	r3, [r4, r2]
 8106134:	e7b3      	b.n	810609e <_malloc_r+0x22>
 8106136:	6862      	ldr	r2, [r4, #4]
 8106138:	42a3      	cmp	r3, r4
 810613a:	bf0c      	ite	eq
 810613c:	6032      	streq	r2, [r6, #0]
 810613e:	605a      	strne	r2, [r3, #4]
 8106140:	e7ec      	b.n	810611c <_malloc_r+0xa0>
 8106142:	4623      	mov	r3, r4
 8106144:	6864      	ldr	r4, [r4, #4]
 8106146:	e7b2      	b.n	81060ae <_malloc_r+0x32>
 8106148:	4634      	mov	r4, r6
 810614a:	6876      	ldr	r6, [r6, #4]
 810614c:	e7b9      	b.n	81060c2 <_malloc_r+0x46>
 810614e:	230c      	movs	r3, #12
 8106150:	603b      	str	r3, [r7, #0]
 8106152:	4638      	mov	r0, r7
 8106154:	f000 f84c 	bl	81061f0 <__malloc_unlock>
 8106158:	e7a1      	b.n	810609e <_malloc_r+0x22>
 810615a:	6025      	str	r5, [r4, #0]
 810615c:	e7de      	b.n	810611c <_malloc_r+0xa0>
 810615e:	bf00      	nop
 8106160:	100002c8 	.word	0x100002c8

08106164 <_realloc_r>:
 8106164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8106168:	4680      	mov	r8, r0
 810616a:	4614      	mov	r4, r2
 810616c:	460e      	mov	r6, r1
 810616e:	b921      	cbnz	r1, 810617a <_realloc_r+0x16>
 8106170:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8106174:	4611      	mov	r1, r2
 8106176:	f7ff bf81 	b.w	810607c <_malloc_r>
 810617a:	b92a      	cbnz	r2, 8106188 <_realloc_r+0x24>
 810617c:	f7ff ff12 	bl	8105fa4 <_free_r>
 8106180:	4625      	mov	r5, r4
 8106182:	4628      	mov	r0, r5
 8106184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8106188:	f000 f838 	bl	81061fc <_malloc_usable_size_r>
 810618c:	4284      	cmp	r4, r0
 810618e:	4607      	mov	r7, r0
 8106190:	d802      	bhi.n	8106198 <_realloc_r+0x34>
 8106192:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8106196:	d812      	bhi.n	81061be <_realloc_r+0x5a>
 8106198:	4621      	mov	r1, r4
 810619a:	4640      	mov	r0, r8
 810619c:	f7ff ff6e 	bl	810607c <_malloc_r>
 81061a0:	4605      	mov	r5, r0
 81061a2:	2800      	cmp	r0, #0
 81061a4:	d0ed      	beq.n	8106182 <_realloc_r+0x1e>
 81061a6:	42bc      	cmp	r4, r7
 81061a8:	4622      	mov	r2, r4
 81061aa:	4631      	mov	r1, r6
 81061ac:	bf28      	it	cs
 81061ae:	463a      	movcs	r2, r7
 81061b0:	f7ff fed0 	bl	8105f54 <memcpy>
 81061b4:	4631      	mov	r1, r6
 81061b6:	4640      	mov	r0, r8
 81061b8:	f7ff fef4 	bl	8105fa4 <_free_r>
 81061bc:	e7e1      	b.n	8106182 <_realloc_r+0x1e>
 81061be:	4635      	mov	r5, r6
 81061c0:	e7df      	b.n	8106182 <_realloc_r+0x1e>
	...

081061c4 <_sbrk_r>:
 81061c4:	b538      	push	{r3, r4, r5, lr}
 81061c6:	4d06      	ldr	r5, [pc, #24]	; (81061e0 <_sbrk_r+0x1c>)
 81061c8:	2300      	movs	r3, #0
 81061ca:	4604      	mov	r4, r0
 81061cc:	4608      	mov	r0, r1
 81061ce:	602b      	str	r3, [r5, #0]
 81061d0:	f7fb fa68 	bl	81016a4 <_sbrk>
 81061d4:	1c43      	adds	r3, r0, #1
 81061d6:	d102      	bne.n	81061de <_sbrk_r+0x1a>
 81061d8:	682b      	ldr	r3, [r5, #0]
 81061da:	b103      	cbz	r3, 81061de <_sbrk_r+0x1a>
 81061dc:	6023      	str	r3, [r4, #0]
 81061de:	bd38      	pop	{r3, r4, r5, pc}
 81061e0:	100002d0 	.word	0x100002d0

081061e4 <__malloc_lock>:
 81061e4:	4801      	ldr	r0, [pc, #4]	; (81061ec <__malloc_lock+0x8>)
 81061e6:	f000 b811 	b.w	810620c <__retarget_lock_acquire_recursive>
 81061ea:	bf00      	nop
 81061ec:	100002d4 	.word	0x100002d4

081061f0 <__malloc_unlock>:
 81061f0:	4801      	ldr	r0, [pc, #4]	; (81061f8 <__malloc_unlock+0x8>)
 81061f2:	f000 b80c 	b.w	810620e <__retarget_lock_release_recursive>
 81061f6:	bf00      	nop
 81061f8:	100002d4 	.word	0x100002d4

081061fc <_malloc_usable_size_r>:
 81061fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8106200:	1f18      	subs	r0, r3, #4
 8106202:	2b00      	cmp	r3, #0
 8106204:	bfbc      	itt	lt
 8106206:	580b      	ldrlt	r3, [r1, r0]
 8106208:	18c0      	addlt	r0, r0, r3
 810620a:	4770      	bx	lr

0810620c <__retarget_lock_acquire_recursive>:
 810620c:	4770      	bx	lr

0810620e <__retarget_lock_release_recursive>:
 810620e:	4770      	bx	lr

08106210 <_init>:
 8106210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8106212:	bf00      	nop
 8106214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8106216:	bc08      	pop	{r3}
 8106218:	469e      	mov	lr, r3
 810621a:	4770      	bx	lr

0810621c <_fini>:
 810621c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810621e:	bf00      	nop
 8106220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8106222:	bc08      	pop	{r3}
 8106224:	469e      	mov	lr, r3
 8106226:	4770      	bx	lr
