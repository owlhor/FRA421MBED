
H745_STAMPR_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006eb0  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08107150  08107150  00017150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0810725c  0810725c  0001725c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08107260  08107260  00017260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  10000000  08107264  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000410  10000078  081072d8  00020078  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  10000488  081072d8  00020488  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  9 .debug_info   00021d84  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000349b  00000000  00000000  00041e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000018b8  00000000  00000000  000452c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001770  00000000  00000000  00046b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003e306  00000000  00000000  000482f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0002177c  00000000  00000000  000865f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001981ae  00000000  00000000  000a7d72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0023ff20  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006de0  00000000  00000000  0023ff70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000078 	.word	0x10000078
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08107138 	.word	0x08107138

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	1000007c 	.word	0x1000007c
 81002dc:	08107138 	.word	0x08107138

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100390:	b480      	push	{r7}
 8100392:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100394:	4b09      	ldr	r3, [pc, #36]	; (81003bc <SystemInit+0x2c>)
 8100396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810039a:	4a08      	ldr	r2, [pc, #32]	; (81003bc <SystemInit+0x2c>)
 810039c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81003a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81003a4:	4b05      	ldr	r3, [pc, #20]	; (81003bc <SystemInit+0x2c>)
 81003a6:	691b      	ldr	r3, [r3, #16]
 81003a8:	4a04      	ldr	r2, [pc, #16]	; (81003bc <SystemInit+0x2c>)
 81003aa:	f043 0310 	orr.w	r3, r3, #16
 81003ae:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81003b0:	bf00      	nop
 81003b2:	46bd      	mov	sp, r7
 81003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81003b8:	4770      	bx	lr
 81003ba:	bf00      	nop
 81003bc:	e000ed00 	.word	0xe000ed00

081003c0 <DS3231_Read>:
#ifdef ExRTC_IS_DS3231

DS3231_RG_Strc ERTC_lg;


void DS3231_Read(I2C_HandleTypeDef *hi2c){
 81003c0:	b580      	push	{r7, lr}
 81003c2:	b086      	sub	sp, #24
 81003c4:	af04      	add	r7, sp, #16
 81003c6:	6078      	str	r0, [r7, #4]
	/* Check by use "ERTC_lg" in live expression
	 * ex. S3231_Read(&hi2c2);
	 * */
	if(hi2c->State == HAL_I2C_STATE_READY){
 81003c8:	687b      	ldr	r3, [r7, #4]
 81003ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81003ce:	b2db      	uxtb	r3, r3
 81003d0:	2b20      	cmp	r3, #32
 81003d2:	d10b      	bne.n	81003ec <DS3231_Read+0x2c>
		HAL_I2C_Mem_Read(hi2c, DS_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT,
 81003d4:	2364      	movs	r3, #100	; 0x64
 81003d6:	9302      	str	r3, [sp, #8]
 81003d8:	2313      	movs	r3, #19
 81003da:	9301      	str	r3, [sp, #4]
 81003dc:	4b05      	ldr	r3, [pc, #20]	; (81003f4 <DS3231_Read+0x34>)
 81003de:	9300      	str	r3, [sp, #0]
 81003e0:	2301      	movs	r3, #1
 81003e2:	2200      	movs	r2, #0
 81003e4:	21d0      	movs	r1, #208	; 0xd0
 81003e6:	6878      	ldr	r0, [r7, #4]
 81003e8:	f002 fcac 	bl	8102d44 <HAL_I2C_Mem_Read>
				&ERTC_lg.D8[0], 19, 100);
	}

}
 81003ec:	bf00      	nop
 81003ee:	3708      	adds	r7, #8
 81003f0:	46bd      	mov	sp, r7
 81003f2:	bd80      	pop	{r7, pc}
 81003f4:	10000094 	.word	0x10000094

081003f8 <EXIN_RTC_SYNC>:


//// Sync timevalue when boot(in case Vbat is not powered)
void EXIN_RTC_SYNC(I2C_HandleTypeDef *hi2c, RTC_HandleTypeDef *hrtc){
 81003f8:	b580      	push	{r7, lr}
 81003fa:	b088      	sub	sp, #32
 81003fc:	af00      	add	r7, sp, #0
 81003fe:	6078      	str	r0, [r7, #4]
 8100400:	6039      	str	r1, [r7, #0]
	DS3231_Read(hi2c);
 8100402:	6878      	ldr	r0, [r7, #4]
 8100404:	f7ff ffdc 	bl	81003c0 <DS3231_Read>

	RTC_TimeTypeDef sTime={0};
 8100408:	f107 030c 	add.w	r3, r7, #12
 810040c:	2200      	movs	r2, #0
 810040e:	601a      	str	r2, [r3, #0]
 8100410:	605a      	str	r2, [r3, #4]
 8100412:	609a      	str	r2, [r3, #8]
 8100414:	60da      	str	r2, [r3, #12]
 8100416:	611a      	str	r2, [r3, #16]
	sTime.Hours = ERTC_lg.DS3231RG.hour; //
 8100418:	4b18      	ldr	r3, [pc, #96]	; (810047c <EXIN_RTC_SYNC+0x84>)
 810041a:	789b      	ldrb	r3, [r3, #2]
 810041c:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8100420:	b2db      	uxtb	r3, r3
 8100422:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = ERTC_lg.DS3231RG.min;
 8100424:	4b15      	ldr	r3, [pc, #84]	; (810047c <EXIN_RTC_SYNC+0x84>)
 8100426:	785b      	ldrb	r3, [r3, #1]
 8100428:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = ERTC_lg.DS3231RG.sec;
 810042a:	4b14      	ldr	r3, [pc, #80]	; (810047c <EXIN_RTC_SYNC+0x84>)
 810042c:	781b      	ldrb	r3, [r3, #0]
 810042e:	73bb      	strb	r3, [r7, #14]

	HAL_RTC_SetTime(hrtc, &sTime, RTC_FORMAT_BCD);
 8100430:	f107 030c 	add.w	r3, r7, #12
 8100434:	2201      	movs	r2, #1
 8100436:	4619      	mov	r1, r3
 8100438:	6838      	ldr	r0, [r7, #0]
 810043a:	f004 fbab 	bl	8104b94 <HAL_RTC_SetTime>

	RTC_DateTypeDef sDate ={0};
 810043e:	2300      	movs	r3, #0
 8100440:	60bb      	str	r3, [r7, #8]
	sDate.Date = ERTC_lg.DS3231RG.date;
 8100442:	4b0e      	ldr	r3, [pc, #56]	; (810047c <EXIN_RTC_SYNC+0x84>)
 8100444:	791b      	ldrb	r3, [r3, #4]
 8100446:	72bb      	strb	r3, [r7, #10]
	sDate.Month = ERTC_lg.DS3231RG.month;
 8100448:	4b0c      	ldr	r3, [pc, #48]	; (810047c <EXIN_RTC_SYNC+0x84>)
 810044a:	795b      	ldrb	r3, [r3, #5]
 810044c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8100450:	b2db      	uxtb	r3, r3
 8100452:	727b      	strb	r3, [r7, #9]
	sDate.WeekDay = ERTC_lg.DS3231RG.wkday;
 8100454:	4b09      	ldr	r3, [pc, #36]	; (810047c <EXIN_RTC_SYNC+0x84>)
 8100456:	78db      	ldrb	r3, [r3, #3]
 8100458:	f3c3 0302 	ubfx	r3, r3, #0, #3
 810045c:	b2db      	uxtb	r3, r3
 810045e:	723b      	strb	r3, [r7, #8]
	sDate.Year = ERTC_lg.DS3231RG.year;
 8100460:	4b06      	ldr	r3, [pc, #24]	; (810047c <EXIN_RTC_SYNC+0x84>)
 8100462:	799b      	ldrb	r3, [r3, #6]
 8100464:	72fb      	strb	r3, [r7, #11]

	HAL_RTC_SetDate(hrtc, &sDate, RTC_FORMAT_BCD);
 8100466:	f107 0308 	add.w	r3, r7, #8
 810046a:	2201      	movs	r2, #1
 810046c:	4619      	mov	r1, r3
 810046e:	6838      	ldr	r0, [r7, #0]
 8100470:	f004 fc89 	bl	8104d86 <HAL_RTC_SetDate>
}
 8100474:	bf00      	nop
 8100476:	3720      	adds	r7, #32
 8100478:	46bd      	mov	sp, r7
 810047a:	bd80      	pop	{r7, pc}
 810047c:	10000094 	.word	0x10000094

08100480 <Write_MFRC522>:
 * Function Nameï¼šWrite_MFRC5200
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parametersï¼šaddr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(u_char addr, u_char val) {
 8100480:	b580      	push	{r7, lr}
 8100482:	b084      	sub	sp, #16
 8100484:	af00      	add	r7, sp, #0
 8100486:	4603      	mov	r3, r0
 8100488:	460a      	mov	r2, r1
 810048a:	71fb      	strb	r3, [r7, #7]
 810048c:	4613      	mov	r3, r2
 810048e:	71bb      	strb	r3, [r7, #6]
  //uint32_t rx_bits;
	  u_char addr_bits = (((addr<<1) & 0x7E)); //// 8.1.2.3 read = 1/ write = 0[1] + addr[6] + 0[1]
 8100490:	79fb      	ldrb	r3, [r7, #7]
 8100492:	005b      	lsls	r3, r3, #1
 8100494:	b2db      	uxtb	r3, r3
 8100496:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 810049a:	b2db      	uxtb	r3, r3
 810049c:	73fb      	strb	r3, [r7, #15]
  //u_char rx_bits;

#ifdef MFRC522_SPI_HWOUT_NSS_DIS
////  set the select line so we can start transferring
////  MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 810049e:	2200      	movs	r2, #0
 81004a0:	2110      	movs	r1, #16
 81004a2:	480d      	ldr	r0, [pc, #52]	; (81004d8 <Write_MFRC522+0x58>)
 81004a4:	f002 fb26 	bl	8102af4 <HAL_GPIO_WritePin>
   - bottom 8 bits are the data bits being sent for that address, we send
     them as is
   */
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, (((addr << 1) & 0x7E) << 8) |  val );
  //HAL_SPI_TransmitReceive(&hspi2, (((addr << 1) & 0x7E) << 8) |  val , rx_bits, 1, 500);
  HAL_SPI_Transmit(&MFRC522_SPI_PORT, &addr_bits, 1, 500);
 81004a8:	f107 010f 	add.w	r1, r7, #15
 81004ac:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 81004b0:	2201      	movs	r2, #1
 81004b2:	480a      	ldr	r0, [pc, #40]	; (81004dc <Write_MFRC522+0x5c>)
 81004b4:	f004 ff56 	bl	8105364 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&MFRC522_SPI_PORT, &val, 1, 500);
 81004b8:	1db9      	adds	r1, r7, #6
 81004ba:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 81004be:	2201      	movs	r2, #1
 81004c0:	4806      	ldr	r0, [pc, #24]	; (81004dc <Write_MFRC522+0x5c>)
 81004c2:	f004 ff4f 	bl	8105364 <HAL_SPI_Transmit>
  //HAL_SPI_TransmitReceive(&MFRC522_SPI_PORT, pTxData, pRxData, Size, Timeout);

#ifdef MFRC522_SPI_HWOUT_NSS_DIS
  //// clear the select line-- we are done here
//  MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 81004c6:	2201      	movs	r2, #1
 81004c8:	2110      	movs	r1, #16
 81004ca:	4803      	ldr	r0, [pc, #12]	; (81004d8 <Write_MFRC522+0x58>)
 81004cc:	f002 fb12 	bl	8102af4 <HAL_GPIO_WritePin>
#endif
  //// burn some time
  // volatile uint32_t ticks;
  // for(ticks=0; ticks < 5000; ++ticks);
}
 81004d0:	bf00      	nop
 81004d2:	3710      	adds	r7, #16
 81004d4:	46bd      	mov	sp, r7
 81004d6:	bd80      	pop	{r7, pc}
 81004d8:	58021000 	.word	0x58021000
 81004dc:	10000164 	.word	0x10000164

081004e0 <Read_MFRC522>:
 * Function Name: Read_MFRC522
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the
 */
u_char Read_MFRC522(u_char addr) {
 81004e0:	b580      	push	{r7, lr}
 81004e2:	b084      	sub	sp, #16
 81004e4:	af00      	add	r7, sp, #0
 81004e6:	4603      	mov	r3, r0
 81004e8:	71fb      	strb	r3, [r7, #7]
  //uint32_t rx_bits;
  u_char rx_bits;
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80); ////  8.1.2.3  read = 1/ write = 0[1] + addr[6] + 0[1]
 81004ea:	79fb      	ldrb	r3, [r7, #7]
 81004ec:	005b      	lsls	r3, r3, #1
 81004ee:	b25b      	sxtb	r3, r3
 81004f0:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 81004f4:	b25b      	sxtb	r3, r3
 81004f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 81004fa:	b25b      	sxtb	r3, r3
 81004fc:	b2db      	uxtb	r3, r3
 81004fe:	73bb      	strb	r3, [r7, #14]

#ifdef MFRC522_SPI_HWOUT_NSS_DIS
  // set the select line so we can start transferring
//  MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8100500:	2200      	movs	r2, #0
 8100502:	2110      	movs	r1, #16
 8100504:	480e      	ldr	r0, [pc, #56]	; (8100540 <Read_MFRC522+0x60>)
 8100506:	f002 faf5 	bl	8102af4 <HAL_GPIO_WritePin>
  //// - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
  */
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 );
  //HAL_SPI_TransmitReceive(&hspi2, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 , rx_bits, 1, 500);
//HAL_SPI_Transmit(&hspi2, (unsigned char*) ((((addr<<1) & 0x7E) | 0x80)), 1, 500);
  HAL_SPI_Transmit(&MFRC522_SPI_PORT, &addr_bits, 1, 500);
 810050a:	f107 010e 	add.w	r1, r7, #14
 810050e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8100512:	2201      	movs	r2, #1
 8100514:	480b      	ldr	r0, [pc, #44]	; (8100544 <Read_MFRC522+0x64>)
 8100516:	f004 ff25 	bl	8105364 <HAL_SPI_Transmit>

  HAL_SPI_Receive(&MFRC522_SPI_PORT, &rx_bits, 1, 500);
 810051a:	f107 010f 	add.w	r1, r7, #15
 810051e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8100522:	2201      	movs	r2, #1
 8100524:	4807      	ldr	r0, [pc, #28]	; (8100544 <Read_MFRC522+0x64>)
 8100526:	f005 f90b 	bl	8105740 <HAL_SPI_Receive>
  // burn some time
  // volatile uint32_t ticks;
  // for(ticks=0; ticks < 5000; ++ticks);
#ifdef MFRC522_SPI_HWOUT_NSS_DIS
  //// NSS pin trig using Hardware output NSS signal / setting at ioc
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 810052a:	2201      	movs	r2, #1
 810052c:	2110      	movs	r1, #16
 810052e:	4804      	ldr	r0, [pc, #16]	; (8100540 <Read_MFRC522+0x60>)
 8100530:	f002 fae0 	bl	8102af4 <HAL_GPIO_WritePin>
#endif
	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8100534:	7bfb      	ldrb	r3, [r7, #15]
}
 8100536:	4618      	mov	r0, r3
 8100538:	3710      	adds	r7, #16
 810053a:	46bd      	mov	sp, r7
 810053c:	bd80      	pop	{r7, pc}
 810053e:	bf00      	nop
 8100540:	58021000 	.word	0x58021000
 8100544:	10000164 	.word	0x10000164

08100548 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(u_char reg, u_char mask)
{
 8100548:	b580      	push	{r7, lr}
 810054a:	b084      	sub	sp, #16
 810054c:	af00      	add	r7, sp, #0
 810054e:	4603      	mov	r3, r0
 8100550:	460a      	mov	r2, r1
 8100552:	71fb      	strb	r3, [r7, #7]
 8100554:	4613      	mov	r3, r2
 8100556:	71bb      	strb	r3, [r7, #6]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 8100558:	79fb      	ldrb	r3, [r7, #7]
 810055a:	4618      	mov	r0, r3
 810055c:	f7ff ffc0 	bl	81004e0 <Read_MFRC522>
 8100560:	4603      	mov	r3, r0
 8100562:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8100564:	7bfa      	ldrb	r2, [r7, #15]
 8100566:	79bb      	ldrb	r3, [r7, #6]
 8100568:	4313      	orrs	r3, r2
 810056a:	b2da      	uxtb	r2, r3
 810056c:	79fb      	ldrb	r3, [r7, #7]
 810056e:	4611      	mov	r1, r2
 8100570:	4618      	mov	r0, r3
 8100572:	f7ff ff85 	bl	8100480 <Write_MFRC522>
}
 8100576:	bf00      	nop
 8100578:	3710      	adds	r7, #16
 810057a:	46bd      	mov	sp, r7
 810057c:	bd80      	pop	{r7, pc}

0810057e <ClearBitMask>:
 * 				read current bit then add preferred bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(u_char reg, u_char mask)
{
 810057e:	b580      	push	{r7, lr}
 8100580:	b084      	sub	sp, #16
 8100582:	af00      	add	r7, sp, #0
 8100584:	4603      	mov	r3, r0
 8100586:	460a      	mov	r2, r1
 8100588:	71fb      	strb	r3, [r7, #7]
 810058a:	4613      	mov	r3, r2
 810058c:	71bb      	strb	r3, [r7, #6]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 810058e:	79fb      	ldrb	r3, [r7, #7]
 8100590:	4618      	mov	r0, r3
 8100592:	f7ff ffa5 	bl	81004e0 <Read_MFRC522>
 8100596:	4603      	mov	r3, r0
 8100598:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 810059a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 810059e:	43db      	mvns	r3, r3
 81005a0:	b25a      	sxtb	r2, r3
 81005a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81005a6:	4013      	ands	r3, r2
 81005a8:	b25b      	sxtb	r3, r3
 81005aa:	b2da      	uxtb	r2, r3
 81005ac:	79fb      	ldrb	r3, [r7, #7]
 81005ae:	4611      	mov	r1, r2
 81005b0:	4618      	mov	r0, r3
 81005b2:	f7ff ff65 	bl	8100480 <Write_MFRC522>
}
 81005b6:	bf00      	nop
 81005b8:	3710      	adds	r7, #16
 81005ba:	46bd      	mov	sp, r7
 81005bc:	bd80      	pop	{r7, pc}

081005be <AntennaOn>:
 * 				Set 1 to Tx1RFEn, Tx2RFEn
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 81005be:	b580      	push	{r7, lr}
 81005c0:	af00      	add	r7, sp, #0
  SetBitMask(TxControlReg, 0x03);
 81005c2:	2103      	movs	r1, #3
 81005c4:	2014      	movs	r0, #20
 81005c6:	f7ff ffbf 	bl	8100548 <SetBitMask>
}
 81005ca:	bf00      	nop
 81005cc:	bd80      	pop	{r7, pc}

081005ce <MFRC522_Reset>:
 * 				Soft reset, 10.3 Table 149
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 81005ce:	b580      	push	{r7, lr}
 81005d0:	af00      	add	r7, sp, #0
  Write_MFRC522(CommandReg, PCD_RESETPHASE);
 81005d2:	210f      	movs	r1, #15
 81005d4:	2001      	movs	r0, #1
 81005d6:	f7ff ff53 	bl	8100480 <Write_MFRC522>
}
 81005da:	bf00      	nop
 81005dc:	bd80      	pop	{r7, pc}

081005de <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 81005de:	b580      	push	{r7, lr}
 81005e0:	af00      	add	r7, sp, #0
//  MSS_GPIO_set_output( MSS_GPIO_1, 1 );
  MFRC522_Reset();
 81005e2:	f7ff fff4 	bl	81005ce <MFRC522_Reset>

  // Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
  Write_MFRC522(TModeReg, 0x80); // 0x8D);      // Tauto = 1; f(Timer) = 6.78MHz/TPreScaler
 81005e6:	2180      	movs	r1, #128	; 0x80
 81005e8:	202a      	movs	r0, #42	; 0x2a
 81005ea:	f7ff ff49 	bl	8100480 <Write_MFRC522>
  Write_MFRC522(TPrescalerReg, 0xA9); //0x34); // TModeReg[3..0] + TPrescalerReg
 81005ee:	21a9      	movs	r1, #169	; 0xa9
 81005f0:	202b      	movs	r0, #43	; 0x2b
 81005f2:	f7ff ff45 	bl	8100480 <Write_MFRC522>
  Write_MFRC522(TReloadRegL, 0x03); //30);
 81005f6:	2103      	movs	r1, #3
 81005f8:	202d      	movs	r0, #45	; 0x2d
 81005fa:	f7ff ff41 	bl	8100480 <Write_MFRC522>
  Write_MFRC522(TReloadRegH, 0xE8); //0);
 81005fe:	21e8      	movs	r1, #232	; 0xe8
 8100600:	202c      	movs	r0, #44	; 0x2c
 8100602:	f7ff ff3d 	bl	8100480 <Write_MFRC522>
  Write_MFRC522(TxAutoReg, 0x40);     // force 100% ASK modulation
 8100606:	2140      	movs	r1, #64	; 0x40
 8100608:	2015      	movs	r0, #21
 810060a:	f7ff ff39 	bl	8100480 <Write_MFRC522>
  Write_MFRC522(ModeReg, 0x3D);       // CRC Initial value 0x6363
 810060e:	213d      	movs	r1, #61	; 0x3d
 8100610:	2011      	movs	r0, #17
 8100612:	f7ff ff35 	bl	8100480 <Write_MFRC522>
  // interrupts, still playing with these
  // Write_MFRC522(CommIEnReg, 0xFF);
  // Write_MFRC522(DivlEnReg, 0xFF);

  // turn antenna on
  AntennaOn();
 8100616:	f7ff ffd2 	bl	81005be <AntennaOn>
}
 810061a:	bf00      	nop
 810061c:	bd80      	pop	{r7, pc}

0810061e <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Request(u_char reqMode, u_char *TagType)
{
 810061e:	b580      	push	{r7, lr}
 8100620:	b086      	sub	sp, #24
 8100622:	af02      	add	r7, sp, #8
 8100624:	4603      	mov	r3, r0
 8100626:	6039      	str	r1, [r7, #0]
 8100628:	71fb      	strb	r3, [r7, #7]
  u_char status;
  uint backBits; // The received data bits

  Write_MFRC522(BitFramingReg, 0x07);   // TxLastBists = BitFramingReg[2..0]
 810062a:	2107      	movs	r1, #7
 810062c:	200d      	movs	r0, #13
 810062e:	f7ff ff27 	bl	8100480 <Write_MFRC522>

  TagType[0] = reqMode;
 8100632:	683b      	ldr	r3, [r7, #0]
 8100634:	79fa      	ldrb	r2, [r7, #7]
 8100636:	701a      	strb	r2, [r3, #0]

  status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8100638:	f107 0308 	add.w	r3, r7, #8
 810063c:	9300      	str	r3, [sp, #0]
 810063e:	683b      	ldr	r3, [r7, #0]
 8100640:	2201      	movs	r2, #1
 8100642:	6839      	ldr	r1, [r7, #0]
 8100644:	200c      	movs	r0, #12
 8100646:	f000 f80f 	bl	8100668 <MFRC522_ToCard>
 810064a:	4603      	mov	r3, r0
 810064c:	73fb      	strb	r3, [r7, #15]
  if ((status != MI_OK) || (backBits != 0x10)) {
 810064e:	7bfb      	ldrb	r3, [r7, #15]
 8100650:	2b00      	cmp	r3, #0
 8100652:	d102      	bne.n	810065a <MFRC522_Request+0x3c>
 8100654:	68bb      	ldr	r3, [r7, #8]
 8100656:	2b10      	cmp	r3, #16
 8100658:	d001      	beq.n	810065e <MFRC522_Request+0x40>
    status = MI_ERR;
 810065a:	2302      	movs	r3, #2
 810065c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 810065e:	7bfb      	ldrb	r3, [r7, #15]
}
 8100660:	4618      	mov	r0, r3
 8100662:	3710      	adds	r7, #16
 8100664:	46bd      	mov	sp, r7
 8100666:	bd80      	pop	{r7, pc}

08100668 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
u_char MFRC522_ToCard(u_char command, u_char *sendData, u_char sendLen, u_char *backData, uint *backLen)
{
 8100668:	b590      	push	{r4, r7, lr}
 810066a:	b089      	sub	sp, #36	; 0x24
 810066c:	af00      	add	r7, sp, #0
 810066e:	60b9      	str	r1, [r7, #8]
 8100670:	607b      	str	r3, [r7, #4]
 8100672:	4603      	mov	r3, r0
 8100674:	73fb      	strb	r3, [r7, #15]
 8100676:	4613      	mov	r3, r2
 8100678:	73bb      	strb	r3, [r7, #14]
  u_char status = MI_ERR;
 810067a:	2302      	movs	r3, #2
 810067c:	77fb      	strb	r3, [r7, #31]
  u_char irqEn = 0x00;
 810067e:	2300      	movs	r3, #0
 8100680:	77bb      	strb	r3, [r7, #30]
  u_char waitIRq = 0x00;
 8100682:	2300      	movs	r3, #0
 8100684:	777b      	strb	r3, [r7, #29]
  u_char lastBits;
  u_char n;
  uint i;

  switch (command)
 8100686:	7bfb      	ldrb	r3, [r7, #15]
 8100688:	2b0c      	cmp	r3, #12
 810068a:	d006      	beq.n	810069a <MFRC522_ToCard+0x32>
 810068c:	2b0e      	cmp	r3, #14
 810068e:	d109      	bne.n	81006a4 <MFRC522_ToCard+0x3c>
  {
    case PCD_AUTHENT:     // Certification cards close
      {
        irqEn = 0x12;
 8100690:	2312      	movs	r3, #18
 8100692:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x10;
 8100694:	2310      	movs	r3, #16
 8100696:	777b      	strb	r3, [r7, #29]
        break;
 8100698:	e005      	b.n	81006a6 <MFRC522_ToCard+0x3e>
      }
    case PCD_TRANSCEIVE:  // Transmit FIFO data
      {
        irqEn = 0x77;
 810069a:	2377      	movs	r3, #119	; 0x77
 810069c:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x30;
 810069e:	2330      	movs	r3, #48	; 0x30
 81006a0:	777b      	strb	r3, [r7, #29]
        break;
 81006a2:	e000      	b.n	81006a6 <MFRC522_ToCard+0x3e>
      }
    default:
      break;
 81006a4:	bf00      	nop
  }

  Write_MFRC522(CommIEnReg, irqEn|0x80);  // Interrupt request
 81006a6:	7fbb      	ldrb	r3, [r7, #30]
 81006a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 81006ac:	b2db      	uxtb	r3, r3
 81006ae:	4619      	mov	r1, r3
 81006b0:	2002      	movs	r0, #2
 81006b2:	f7ff fee5 	bl	8100480 <Write_MFRC522>
  ClearBitMask(CommIrqReg, 0x80);         // Clear all interrupt request bit
 81006b6:	2180      	movs	r1, #128	; 0x80
 81006b8:	2004      	movs	r0, #4
 81006ba:	f7ff ff60 	bl	810057e <ClearBitMask>
  SetBitMask(FIFOLevelReg, 0x80);         // FlushBuffer=1, FIFO Initialization
 81006be:	2180      	movs	r1, #128	; 0x80
 81006c0:	200a      	movs	r0, #10
 81006c2:	f7ff ff41 	bl	8100548 <SetBitMask>

  Write_MFRC522(CommandReg, PCD_IDLE);    // NO action; Cancel the current command
 81006c6:	2100      	movs	r1, #0
 81006c8:	2001      	movs	r0, #1
 81006ca:	f7ff fed9 	bl	8100480 <Write_MFRC522>

  // Writing data to the FIFO
  for (i=0; i<sendLen; i++)
 81006ce:	2300      	movs	r3, #0
 81006d0:	61bb      	str	r3, [r7, #24]
 81006d2:	e00a      	b.n	81006ea <MFRC522_ToCard+0x82>
  {
    Write_MFRC522(FIFODataReg, sendData[i]);
 81006d4:	68ba      	ldr	r2, [r7, #8]
 81006d6:	69bb      	ldr	r3, [r7, #24]
 81006d8:	4413      	add	r3, r2
 81006da:	781b      	ldrb	r3, [r3, #0]
 81006dc:	4619      	mov	r1, r3
 81006de:	2009      	movs	r0, #9
 81006e0:	f7ff fece 	bl	8100480 <Write_MFRC522>
  for (i=0; i<sendLen; i++)
 81006e4:	69bb      	ldr	r3, [r7, #24]
 81006e6:	3301      	adds	r3, #1
 81006e8:	61bb      	str	r3, [r7, #24]
 81006ea:	7bbb      	ldrb	r3, [r7, #14]
 81006ec:	69ba      	ldr	r2, [r7, #24]
 81006ee:	429a      	cmp	r2, r3
 81006f0:	d3f0      	bcc.n	81006d4 <MFRC522_ToCard+0x6c>
  }

  // Execute the command
  Write_MFRC522(CommandReg, command);
 81006f2:	7bfb      	ldrb	r3, [r7, #15]
 81006f4:	4619      	mov	r1, r3
 81006f6:	2001      	movs	r0, #1
 81006f8:	f7ff fec2 	bl	8100480 <Write_MFRC522>
  if (command == PCD_TRANSCEIVE)
 81006fc:	7bfb      	ldrb	r3, [r7, #15]
 81006fe:	2b0c      	cmp	r3, #12
 8100700:	d103      	bne.n	810070a <MFRC522_ToCard+0xa2>
  {
    SetBitMask(BitFramingReg, 0x80);      // StartSend=1,transmission of data starts
 8100702:	2180      	movs	r1, #128	; 0x80
 8100704:	200d      	movs	r0, #13
 8100706:	f7ff ff1f 	bl	8100548 <SetBitMask>
  }

  // Waiting to receive data to complete
  i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 810070a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 810070e:	61bb      	str	r3, [r7, #24]
  do
  {
    // CommIrqReg[7..0]
    // Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
    n = Read_MFRC522(CommIrqReg);
 8100710:	2004      	movs	r0, #4
 8100712:	f7ff fee5 	bl	81004e0 <Read_MFRC522>
 8100716:	4603      	mov	r3, r0
 8100718:	773b      	strb	r3, [r7, #28]
    i--;
 810071a:	69bb      	ldr	r3, [r7, #24]
 810071c:	3b01      	subs	r3, #1
 810071e:	61bb      	str	r3, [r7, #24]
  }
  while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8100720:	69bb      	ldr	r3, [r7, #24]
 8100722:	2b00      	cmp	r3, #0
 8100724:	d00a      	beq.n	810073c <MFRC522_ToCard+0xd4>
 8100726:	7f3b      	ldrb	r3, [r7, #28]
 8100728:	f003 0301 	and.w	r3, r3, #1
 810072c:	2b00      	cmp	r3, #0
 810072e:	d105      	bne.n	810073c <MFRC522_ToCard+0xd4>
 8100730:	7f3a      	ldrb	r2, [r7, #28]
 8100732:	7f7b      	ldrb	r3, [r7, #29]
 8100734:	4013      	ands	r3, r2
 8100736:	b2db      	uxtb	r3, r3
 8100738:	2b00      	cmp	r3, #0
 810073a:	d0e9      	beq.n	8100710 <MFRC522_ToCard+0xa8>

  ClearBitMask(BitFramingReg, 0x80);      // StartSend=0
 810073c:	2180      	movs	r1, #128	; 0x80
 810073e:	200d      	movs	r0, #13
 8100740:	f7ff ff1d 	bl	810057e <ClearBitMask>

  if (i != 0)
 8100744:	69bb      	ldr	r3, [r7, #24]
 8100746:	2b00      	cmp	r3, #0
 8100748:	d052      	beq.n	81007f0 <MFRC522_ToCard+0x188>
  {
    if(!(Read_MFRC522(ErrorReg) & 0x1B))  // BufferOvfl Collerr CRCErr ProtecolErr
 810074a:	2006      	movs	r0, #6
 810074c:	f7ff fec8 	bl	81004e0 <Read_MFRC522>
 8100750:	4603      	mov	r3, r0
 8100752:	f003 031b 	and.w	r3, r3, #27
 8100756:	2b00      	cmp	r3, #0
 8100758:	d148      	bne.n	81007ec <MFRC522_ToCard+0x184>
    {
      status = MI_OK;
 810075a:	2300      	movs	r3, #0
 810075c:	77fb      	strb	r3, [r7, #31]
      if (n & irqEn & 0x01)
 810075e:	7f3a      	ldrb	r2, [r7, #28]
 8100760:	7fbb      	ldrb	r3, [r7, #30]
 8100762:	4013      	ands	r3, r2
 8100764:	b2db      	uxtb	r3, r3
 8100766:	f003 0301 	and.w	r3, r3, #1
 810076a:	2b00      	cmp	r3, #0
 810076c:	d001      	beq.n	8100772 <MFRC522_ToCard+0x10a>
      {
        status = MI_NOTAGERR;             // ??
 810076e:	2301      	movs	r3, #1
 8100770:	77fb      	strb	r3, [r7, #31]
      }

      if (command == PCD_TRANSCEIVE)
 8100772:	7bfb      	ldrb	r3, [r7, #15]
 8100774:	2b0c      	cmp	r3, #12
 8100776:	d13b      	bne.n	81007f0 <MFRC522_ToCard+0x188>
      {
        n = Read_MFRC522(FIFOLevelReg);
 8100778:	200a      	movs	r0, #10
 810077a:	f7ff feb1 	bl	81004e0 <Read_MFRC522>
 810077e:	4603      	mov	r3, r0
 8100780:	773b      	strb	r3, [r7, #28]
        lastBits = Read_MFRC522(ControlReg) & 0x07;
 8100782:	200c      	movs	r0, #12
 8100784:	f7ff feac 	bl	81004e0 <Read_MFRC522>
 8100788:	4603      	mov	r3, r0
 810078a:	f003 0307 	and.w	r3, r3, #7
 810078e:	75fb      	strb	r3, [r7, #23]
        if (lastBits)
 8100790:	7dfb      	ldrb	r3, [r7, #23]
 8100792:	2b00      	cmp	r3, #0
 8100794:	d008      	beq.n	81007a8 <MFRC522_ToCard+0x140>
        {
          *backLen = (n-1)*8 + lastBits;
 8100796:	7f3b      	ldrb	r3, [r7, #28]
 8100798:	3b01      	subs	r3, #1
 810079a:	00da      	lsls	r2, r3, #3
 810079c:	7dfb      	ldrb	r3, [r7, #23]
 810079e:	4413      	add	r3, r2
 81007a0:	461a      	mov	r2, r3
 81007a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81007a4:	601a      	str	r2, [r3, #0]
 81007a6:	e004      	b.n	81007b2 <MFRC522_ToCard+0x14a>
        }
        else
        {
          *backLen = n*8;
 81007a8:	7f3b      	ldrb	r3, [r7, #28]
 81007aa:	00db      	lsls	r3, r3, #3
 81007ac:	461a      	mov	r2, r3
 81007ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81007b0:	601a      	str	r2, [r3, #0]
        }

        if (n == 0)
 81007b2:	7f3b      	ldrb	r3, [r7, #28]
 81007b4:	2b00      	cmp	r3, #0
 81007b6:	d101      	bne.n	81007bc <MFRC522_ToCard+0x154>
        {
          n = 1;
 81007b8:	2301      	movs	r3, #1
 81007ba:	773b      	strb	r3, [r7, #28]
        }
        if (n > MAX_LEN)
 81007bc:	7f3b      	ldrb	r3, [r7, #28]
 81007be:	2b10      	cmp	r3, #16
 81007c0:	d901      	bls.n	81007c6 <MFRC522_ToCard+0x15e>
        {
          n = MAX_LEN;
 81007c2:	2310      	movs	r3, #16
 81007c4:	773b      	strb	r3, [r7, #28]
        }

        // Reading the received data in FIFO
        for (i=0; i<n; i++)
 81007c6:	2300      	movs	r3, #0
 81007c8:	61bb      	str	r3, [r7, #24]
 81007ca:	e00a      	b.n	81007e2 <MFRC522_ToCard+0x17a>
        {
          backData[i] = Read_MFRC522(FIFODataReg);
 81007cc:	687a      	ldr	r2, [r7, #4]
 81007ce:	69bb      	ldr	r3, [r7, #24]
 81007d0:	18d4      	adds	r4, r2, r3
 81007d2:	2009      	movs	r0, #9
 81007d4:	f7ff fe84 	bl	81004e0 <Read_MFRC522>
 81007d8:	4603      	mov	r3, r0
 81007da:	7023      	strb	r3, [r4, #0]
        for (i=0; i<n; i++)
 81007dc:	69bb      	ldr	r3, [r7, #24]
 81007de:	3301      	adds	r3, #1
 81007e0:	61bb      	str	r3, [r7, #24]
 81007e2:	7f3b      	ldrb	r3, [r7, #28]
 81007e4:	69ba      	ldr	r2, [r7, #24]
 81007e6:	429a      	cmp	r2, r3
 81007e8:	d3f0      	bcc.n	81007cc <MFRC522_ToCard+0x164>
 81007ea:	e001      	b.n	81007f0 <MFRC522_ToCard+0x188>
        }
      }
    }
    else {
      //printf("~~~ buffer overflow, collerr, crcerr, or protecolerr\r\n");
      status = MI_ERR;
 81007ec:	2302      	movs	r3, #2
 81007ee:	77fb      	strb	r3, [r7, #31]
  }
  else {
    //printf("~~~ request timed out\r\n");
  }

  return status;
 81007f0:	7ffb      	ldrb	r3, [r7, #31]
}
 81007f2:	4618      	mov	r0, r3
 81007f4:	3724      	adds	r7, #36	; 0x24
 81007f6:	46bd      	mov	sp, r7
 81007f8:	bd90      	pop	{r4, r7, pc}

081007fa <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Anticoll(u_char *serNum)
{
 81007fa:	b580      	push	{r7, lr}
 81007fc:	b086      	sub	sp, #24
 81007fe:	af02      	add	r7, sp, #8
 8100800:	6078      	str	r0, [r7, #4]
  u_char status;
  u_char i;
  u_char serNumCheck=0;
 8100802:	2300      	movs	r3, #0
 8100804:	737b      	strb	r3, [r7, #13]
  uint unLen;


  //ClearBitMask(Status2Reg, 0x08);		//TempSensclear
  //ClearBitMask(CollReg,0x80);			//ValuesAfterColl
  Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8100806:	2100      	movs	r1, #0
 8100808:	200d      	movs	r0, #13
 810080a:	f7ff fe39 	bl	8100480 <Write_MFRC522>

  serNum[0] = PICC_ANTICOLL;
 810080e:	687b      	ldr	r3, [r7, #4]
 8100810:	2293      	movs	r2, #147	; 0x93
 8100812:	701a      	strb	r2, [r3, #0]
  serNum[1] = 0x20;
 8100814:	687b      	ldr	r3, [r7, #4]
 8100816:	3301      	adds	r3, #1
 8100818:	2220      	movs	r2, #32
 810081a:	701a      	strb	r2, [r3, #0]
  status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 810081c:	f107 0308 	add.w	r3, r7, #8
 8100820:	9300      	str	r3, [sp, #0]
 8100822:	687b      	ldr	r3, [r7, #4]
 8100824:	2202      	movs	r2, #2
 8100826:	6879      	ldr	r1, [r7, #4]
 8100828:	200c      	movs	r0, #12
 810082a:	f7ff ff1d 	bl	8100668 <MFRC522_ToCard>
 810082e:	4603      	mov	r3, r0
 8100830:	73fb      	strb	r3, [r7, #15]

  if (status == MI_OK)
 8100832:	7bfb      	ldrb	r3, [r7, #15]
 8100834:	2b00      	cmp	r3, #0
 8100836:	d118      	bne.n	810086a <MFRC522_Anticoll+0x70>
  {
    //Check card serial number
    for (i=0; i<4; i++)
 8100838:	2300      	movs	r3, #0
 810083a:	73bb      	strb	r3, [r7, #14]
 810083c:	e009      	b.n	8100852 <MFRC522_Anticoll+0x58>
    {
      serNumCheck ^= serNum[i];
 810083e:	7bbb      	ldrb	r3, [r7, #14]
 8100840:	687a      	ldr	r2, [r7, #4]
 8100842:	4413      	add	r3, r2
 8100844:	781a      	ldrb	r2, [r3, #0]
 8100846:	7b7b      	ldrb	r3, [r7, #13]
 8100848:	4053      	eors	r3, r2
 810084a:	737b      	strb	r3, [r7, #13]
    for (i=0; i<4; i++)
 810084c:	7bbb      	ldrb	r3, [r7, #14]
 810084e:	3301      	adds	r3, #1
 8100850:	73bb      	strb	r3, [r7, #14]
 8100852:	7bbb      	ldrb	r3, [r7, #14]
 8100854:	2b03      	cmp	r3, #3
 8100856:	d9f2      	bls.n	810083e <MFRC522_Anticoll+0x44>
    }
    if (serNumCheck != serNum[i])
 8100858:	7bbb      	ldrb	r3, [r7, #14]
 810085a:	687a      	ldr	r2, [r7, #4]
 810085c:	4413      	add	r3, r2
 810085e:	781b      	ldrb	r3, [r3, #0]
 8100860:	7b7a      	ldrb	r2, [r7, #13]
 8100862:	429a      	cmp	r2, r3
 8100864:	d001      	beq.n	810086a <MFRC522_Anticoll+0x70>
    {
      status = MI_ERR;
 8100866:	2302      	movs	r3, #2
 8100868:	73fb      	strb	r3, [r7, #15]
    }
  }

  //SetBitMask(CollReg, 0x80);		//ValuesAfterColl=1

  return status;
 810086a:	7bfb      	ldrb	r3, [r7, #15]
}
 810086c:	4618      	mov	r0, r3
 810086e:	3710      	adds	r7, #16
 8100870:	46bd      	mov	sp, r7
 8100872:	bd80      	pop	{r7, pc}

08100874 <MFRC522_HardResetSet>:
	// Clear MFCrypto1On bit
	ClearBitMask(Status2Reg, 0x08); // Status2Reg[7..0] bits are: TempSensClear I2CForceHS reserved reserved   MFCrypto1On ModemState[2:0]
} // End PCD_StopCrypto1()

////------------owl_hor-------owl_hor---------owl_hor----------
void MFRC522_HardResetSet(void){
 8100874:	b580      	push	{r7, lr}
 8100876:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RC522_Rst_GPIO_Port, RC522_Rst_Pin, GPIO_PIN_RESET);
 8100878:	2200      	movs	r2, #0
 810087a:	2108      	movs	r1, #8
 810087c:	4806      	ldr	r0, [pc, #24]	; (8100898 <MFRC522_HardResetSet+0x24>)
 810087e:	f002 f939 	bl	8102af4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8100882:	2001      	movs	r0, #1
 8100884:	f000 ff14 	bl	81016b0 <HAL_Delay>
	HAL_GPIO_WritePin(RC522_Rst_GPIO_Port, RC522_Rst_Pin, GPIO_PIN_SET);
 8100888:	2201      	movs	r2, #1
 810088a:	2108      	movs	r1, #8
 810088c:	4802      	ldr	r0, [pc, #8]	; (8100898 <MFRC522_HardResetSet+0x24>)
 810088e:	f002 f931 	bl	8102af4 <HAL_GPIO_WritePin>
}
 8100892:	bf00      	nop
 8100894:	bd80      	pop	{r7, pc}
 8100896:	bf00      	nop
 8100898:	58021000 	.word	0x58021000

0810089c <MFRC522_SelfTest>:

uint8_t FIFOBuffex522[75]; //// Read FIFO buffer test
void MFRC522_SelfTest(void){
 810089c:	b580      	push	{r7, lr}
 810089e:	b082      	sub	sp, #8
 81008a0:	af00      	add	r7, sp, #0
			5Dh, 48h, 76h, D5h, 71h, 061h, 21h, A9h,
			86h, 96h, 83h, 38h, CFh, 9Dh, 5Bh, 6Dh,
			DCh, 15h, BAh, 3Eh, 7Dh, 95h, 03Bh, 2Fh
	 * */
	//// 1. Soft reset -> send 1111 to 01h
	Write_MFRC522(CommandReg, PCD_RESETPHASE);
 81008a2:	210f      	movs	r1, #15
 81008a4:	2001      	movs	r0, #1
 81008a6:	f7ff fdeb 	bl	8100480 <Write_MFRC522>

	//// 2. Write 00h to FIFO 25x times
	for(int i = 0;i < 25; i++){
 81008aa:	2300      	movs	r3, #0
 81008ac:	607b      	str	r3, [r7, #4]
 81008ae:	e002      	b.n	81008b6 <MFRC522_SelfTest+0x1a>
 81008b0:	687b      	ldr	r3, [r7, #4]
 81008b2:	3301      	adds	r3, #1
 81008b4:	607b      	str	r3, [r7, #4]
 81008b6:	687b      	ldr	r3, [r7, #4]
 81008b8:	2b18      	cmp	r3, #24
 81008ba:	ddf9      	ble.n	81008b0 <MFRC522_SelfTest+0x14>
		//Write_MFRC522(FIFODataReg, Reserved00); // use reserved bc it equals to 00h
	}
	//// 3. write 09h to AutoTest
	Write_MFRC522(AutoTestReg, PCD_SELFTSTEN);
 81008bc:	2109      	movs	r1, #9
 81008be:	2036      	movs	r0, #54	; 0x36
 81008c0:	f7ff fdde 	bl	8100480 <Write_MFRC522>

	//// 4. Write 00h to the FIFO buffer again
	Write_MFRC522(FIFODataReg, Reserved00);
 81008c4:	2100      	movs	r1, #0
 81008c6:	2009      	movs	r0, #9
 81008c8:	f7ff fdda 	bl	8100480 <Write_MFRC522>

	FIFOBuffex522[0] = Read_MFRC522(FIFOLevelReg); //// FIFO Check
 81008cc:	200a      	movs	r0, #10
 81008ce:	f7ff fe07 	bl	81004e0 <Read_MFRC522>
 81008d2:	4603      	mov	r3, r0
 81008d4:	461a      	mov	r2, r3
 81008d6:	4b14      	ldr	r3, [pc, #80]	; (8100928 <MFRC522_SelfTest+0x8c>)
 81008d8:	701a      	strb	r2, [r3, #0]
	//// 5. CalcCRC -> Write 0011 to 01h
	Write_MFRC522(CommandReg, PCD_CALCCRC);
 81008da:	2103      	movs	r1, #3
 81008dc:	2001      	movs	r0, #1
 81008de:	f7ff fdcf 	bl	8100480 <Write_MFRC522>

	//// 6. Self test enable, wait for calculation/ must have!!!
	HAL_Delay(1);
 81008e2:	2001      	movs	r0, #1
 81008e4:	f000 fee4 	bl	81016b0 <HAL_Delay>

	FIFOBuffex522[1] = Read_MFRC522(FIFOLevelReg);  //// FIFO Check
 81008e8:	200a      	movs	r0, #10
 81008ea:	f7ff fdf9 	bl	81004e0 <Read_MFRC522>
 81008ee:	4603      	mov	r3, r0
 81008f0:	461a      	mov	r2, r3
 81008f2:	4b0d      	ldr	r3, [pc, #52]	; (8100928 <MFRC522_SelfTest+0x8c>)
 81008f4:	705a      	strb	r2, [r3, #1]

	//// 7. Read 64 buffer FIFO
	for(uint j = 2;j < 73; j++){
 81008f6:	2302      	movs	r3, #2
 81008f8:	603b      	str	r3, [r7, #0]
 81008fa:	e00c      	b.n	8100916 <MFRC522_SelfTest+0x7a>
	FIFOBuffex522[j] = Read_MFRC522(FIFODataReg);
 81008fc:	2009      	movs	r0, #9
 81008fe:	f7ff fdef 	bl	81004e0 <Read_MFRC522>
 8100902:	4603      	mov	r3, r0
 8100904:	4619      	mov	r1, r3
 8100906:	4a08      	ldr	r2, [pc, #32]	; (8100928 <MFRC522_SelfTest+0x8c>)
 8100908:	683b      	ldr	r3, [r7, #0]
 810090a:	4413      	add	r3, r2
 810090c:	460a      	mov	r2, r1
 810090e:	701a      	strb	r2, [r3, #0]
	for(uint j = 2;j < 73; j++){
 8100910:	683b      	ldr	r3, [r7, #0]
 8100912:	3301      	adds	r3, #1
 8100914:	603b      	str	r3, [r7, #0]
 8100916:	683b      	ldr	r3, [r7, #0]
 8100918:	2b48      	cmp	r3, #72	; 0x48
 810091a:	d9ef      	bls.n	81008fc <MFRC522_SelfTest+0x60>
	}
}
 810091c:	bf00      	nop
 810091e:	bf00      	nop
 8100920:	3708      	adds	r7, #8
 8100922:	46bd      	mov	sp, r7
 8100924:	bd80      	pop	{r7, pc}
 8100926:	bf00      	nop
 8100928:	100000a8 	.word	0x100000a8

0810092c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 810092c:	b5f0      	push	{r4, r5, r6, r7, lr}
 810092e:	b0af      	sub	sp, #188	; 0xbc
 8100930:	af04      	add	r7, sp, #16

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100932:	4b14      	ldr	r3, [pc, #80]	; (8100984 <main+0x58>)
 8100934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100938:	4a12      	ldr	r2, [pc, #72]	; (8100984 <main+0x58>)
 810093a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810093e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100942:	4b10      	ldr	r3, [pc, #64]	; (8100984 <main+0x58>)
 8100944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810094c:	607b      	str	r3, [r7, #4]
 810094e:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100950:	2001      	movs	r0, #1
 8100952:	f002 f955 	bl	8102c00 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100956:	f002 fe73 	bl	8103640 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810095a:	2201      	movs	r2, #1
 810095c:	2102      	movs	r1, #2
 810095e:	2000      	movs	r0, #0
 8100960:	f002 fdf4 	bl	810354c <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100964:	4b08      	ldr	r3, [pc, #32]	; (8100988 <main+0x5c>)
 8100966:	681b      	ldr	r3, [r3, #0]
 8100968:	091b      	lsrs	r3, r3, #4
 810096a:	f003 030f 	and.w	r3, r3, #15
 810096e:	2b07      	cmp	r3, #7
 8100970:	d10e      	bne.n	8100990 <main+0x64>
 8100972:	4b06      	ldr	r3, [pc, #24]	; (810098c <main+0x60>)
 8100974:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100978:	4a04      	ldr	r2, [pc, #16]	; (810098c <main+0x60>)
 810097a:	f043 0301 	orr.w	r3, r3, #1
 810097e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8100982:	e00d      	b.n	81009a0 <main+0x74>
 8100984:	58024400 	.word	0x58024400
 8100988:	e000ed00 	.word	0xe000ed00
 810098c:	58026400 	.word	0x58026400
 8100990:	4bac      	ldr	r3, [pc, #688]	; (8100c44 <main+0x318>)
 8100992:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100996:	4aab      	ldr	r2, [pc, #684]	; (8100c44 <main+0x318>)
 8100998:	f043 0301 	orr.w	r3, r3, #1
 810099c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81009a0:	f000 fdd2 	bl	8101548 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81009a4:	f000 fad0 	bl	8100f48 <MX_GPIO_Init>
  MX_TIM17_Init();
 81009a8:	f000 fa7e 	bl	8100ea8 <MX_TIM17_Init>
  MX_RTC_Init();
 81009ac:	f000 f9c0 	bl	8100d30 <MX_RTC_Init>
  MX_I2C2_Init();
 81009b0:	f000 f97e 	bl	8100cb0 <MX_I2C2_Init>
  MX_DMA_Init();
 81009b4:	f000 faa0 	bl	8100ef8 <MX_DMA_Init>
  MX_SPI4_Init();
 81009b8:	f000 fa20 	bl	8100dfc <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */

  //HAL_TIM_Base_Start_IT(&htim17);

  //// Start sync EXIN RTC
  DS3231_Read(&hi2c2);
 81009bc:	48a2      	ldr	r0, [pc, #648]	; (8100c48 <main+0x31c>)
 81009be:	f7ff fcff 	bl	81003c0 <DS3231_Read>
  EXIN_RTC_SYNC(&hi2c2,&hrtc);
 81009c2:	49a2      	ldr	r1, [pc, #648]	; (8100c4c <main+0x320>)
 81009c4:	48a0      	ldr	r0, [pc, #640]	; (8100c48 <main+0x31c>)
 81009c6:	f7ff fd17 	bl	81003f8 <EXIN_RTC_SYNC>
  MFRC522_HardResetSet();
 81009ca:	f7ff ff53 	bl	8100874 <MFRC522_HardResetSet>
  MFRC522_Init();
 81009ce:	f7ff fe06 	bl	81005de <MFRC522_Init>
  //// MFRC522 version 2.0 software version is: 92h
  rc522_version = Read_MFRC522(VersionReg);
 81009d2:	2037      	movs	r0, #55	; 0x37
 81009d4:	f7ff fd84 	bl	81004e0 <Read_MFRC522>
 81009d8:	4603      	mov	r3, r0
 81009da:	461a      	mov	r2, r3
 81009dc:	4b9c      	ldr	r3, [pc, #624]	; (8100c50 <main+0x324>)
 81009de:	701a      	strb	r2, [r3, #0]

#define Huart3
#ifdef Huart3
  HAL_RTC_GetTime(&hrtc, &NowTime, RTC_FORMAT_BCD);
 81009e0:	2201      	movs	r2, #1
 81009e2:	499c      	ldr	r1, [pc, #624]	; (8100c54 <main+0x328>)
 81009e4:	4899      	ldr	r0, [pc, #612]	; (8100c4c <main+0x320>)
 81009e6:	f004 f972 	bl	8104cce <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &NowDate, RTC_FORMAT_BCD);
 81009ea:	2201      	movs	r2, #1
 81009ec:	499a      	ldr	r1, [pc, #616]	; (8100c58 <main+0x32c>)
 81009ee:	4897      	ldr	r0, [pc, #604]	; (8100c4c <main+0x320>)
 81009f0:	f004 fa50 	bl	8104e94 <HAL_RTC_GetDate>

  char temp[]="----------------- H745_STAMPR_CM4 --------------------\r\n";
 81009f4:	4b99      	ldr	r3, [pc, #612]	; (8100c5c <main+0x330>)
 81009f6:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 81009fa:	461d      	mov	r5, r3
 81009fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81009fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8100a00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8100a02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8100a04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8100a06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8100a08:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8100a0c:	c403      	stmia	r4!, {r0, r1}
 8100a0e:	7022      	strb	r2, [r4, #0]
  HAL_UART_Transmit(&huart3, (uint8_t*)temp, strlen(temp),10); // strlen = length of str -> config length of data
 8100a10:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8100a14:	4618      	mov	r0, r3
 8100a16:	f7ff fc63 	bl	81002e0 <strlen>
 8100a1a:	4603      	mov	r3, r0
 8100a1c:	b29a      	uxth	r2, r3
 8100a1e:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8100a22:	230a      	movs	r3, #10
 8100a24:	488e      	ldr	r0, [pc, #568]	; (8100c60 <main+0x334>)
 8100a26:	f005 fd89 	bl	810653c <HAL_UART_Transmit>
  char temp2[100];
  sprintf(temp2, "Date: %x/%x/%x  Time: %x:%x:%x \r\n",
		  NowDate.Date, NowDate.Month, NowDate.Year,
 8100a2a:	4b8b      	ldr	r3, [pc, #556]	; (8100c58 <main+0x32c>)
 8100a2c:	789b      	ldrb	r3, [r3, #2]
  sprintf(temp2, "Date: %x/%x/%x  Time: %x:%x:%x \r\n",
 8100a2e:	461d      	mov	r5, r3
		  NowDate.Date, NowDate.Month, NowDate.Year,
 8100a30:	4b89      	ldr	r3, [pc, #548]	; (8100c58 <main+0x32c>)
 8100a32:	785b      	ldrb	r3, [r3, #1]
  sprintf(temp2, "Date: %x/%x/%x  Time: %x:%x:%x \r\n",
 8100a34:	461e      	mov	r6, r3
		  NowDate.Date, NowDate.Month, NowDate.Year,
 8100a36:	4b88      	ldr	r3, [pc, #544]	; (8100c58 <main+0x32c>)
 8100a38:	78db      	ldrb	r3, [r3, #3]
  sprintf(temp2, "Date: %x/%x/%x  Time: %x:%x:%x \r\n",
 8100a3a:	461a      	mov	r2, r3
		  NowTime.Hours,NowTime.Minutes, NowTime.Seconds);
 8100a3c:	4b85      	ldr	r3, [pc, #532]	; (8100c54 <main+0x328>)
 8100a3e:	781b      	ldrb	r3, [r3, #0]
  sprintf(temp2, "Date: %x/%x/%x  Time: %x:%x:%x \r\n",
 8100a40:	4619      	mov	r1, r3
		  NowTime.Hours,NowTime.Minutes, NowTime.Seconds);
 8100a42:	4b84      	ldr	r3, [pc, #528]	; (8100c54 <main+0x328>)
 8100a44:	785b      	ldrb	r3, [r3, #1]
  sprintf(temp2, "Date: %x/%x/%x  Time: %x:%x:%x \r\n",
 8100a46:	461c      	mov	r4, r3
		  NowTime.Hours,NowTime.Minutes, NowTime.Seconds);
 8100a48:	4b82      	ldr	r3, [pc, #520]	; (8100c54 <main+0x328>)
 8100a4a:	789b      	ldrb	r3, [r3, #2]
  sprintf(temp2, "Date: %x/%x/%x  Time: %x:%x:%x \r\n",
 8100a4c:	f107 0008 	add.w	r0, r7, #8
 8100a50:	9303      	str	r3, [sp, #12]
 8100a52:	9402      	str	r4, [sp, #8]
 8100a54:	9101      	str	r1, [sp, #4]
 8100a56:	9200      	str	r2, [sp, #0]
 8100a58:	4633      	mov	r3, r6
 8100a5a:	462a      	mov	r2, r5
 8100a5c:	4981      	ldr	r1, [pc, #516]	; (8100c64 <main+0x338>)
 8100a5e:	f005 fefd 	bl	810685c <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)temp2, strlen(temp2),30);
 8100a62:	f107 0308 	add.w	r3, r7, #8
 8100a66:	4618      	mov	r0, r3
 8100a68:	f7ff fc3a 	bl	81002e0 <strlen>
 8100a6c:	4603      	mov	r3, r0
 8100a6e:	b29a      	uxth	r2, r3
 8100a70:	f107 0108 	add.w	r1, r7, #8
 8100a74:	231e      	movs	r3, #30
 8100a76:	487a      	ldr	r0, [pc, #488]	; (8100c60 <main+0x334>)
 8100a78:	f005 fd60 	bl	810653c <HAL_UART_Transmit>

  status_522 = Read_MFRC522(VersionReg);
 8100a7c:	2037      	movs	r0, #55	; 0x37
 8100a7e:	f7ff fd2f 	bl	81004e0 <Read_MFRC522>
 8100a82:	4603      	mov	r3, r0
 8100a84:	461a      	mov	r2, r3
 8100a86:	4b78      	ldr	r3, [pc, #480]	; (8100c68 <main+0x33c>)
 8100a88:	701a      	strb	r2, [r3, #0]
  sprintf(txtUARTBF, "Version  %xh \r\n",status_522);
 8100a8a:	4b77      	ldr	r3, [pc, #476]	; (8100c68 <main+0x33c>)
 8100a8c:	781b      	ldrb	r3, [r3, #0]
 8100a8e:	461a      	mov	r2, r3
 8100a90:	4976      	ldr	r1, [pc, #472]	; (8100c6c <main+0x340>)
 8100a92:	4877      	ldr	r0, [pc, #476]	; (8100c70 <main+0x344>)
 8100a94:	f005 fee2 	bl	810685c <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)txtUARTBF, strlen(txtUARTBF),10);
 8100a98:	4875      	ldr	r0, [pc, #468]	; (8100c70 <main+0x344>)
 8100a9a:	f7ff fc21 	bl	81002e0 <strlen>
 8100a9e:	4603      	mov	r3, r0
 8100aa0:	b29a      	uxth	r2, r3
 8100aa2:	230a      	movs	r3, #10
 8100aa4:	4972      	ldr	r1, [pc, #456]	; (8100c70 <main+0x344>)
 8100aa6:	486e      	ldr	r0, [pc, #440]	; (8100c60 <main+0x334>)
 8100aa8:	f005 fd48 	bl	810653c <HAL_UART_Transmit>
	  //SRAM4->state1 = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
	  //chk2 = SRAM4->state1;
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GetTick() - timestamp_one >= 500){
 8100aac:	f000 fdf4 	bl	8101698 <HAL_GetTick>
 8100ab0:	4602      	mov	r2, r0
 8100ab2:	4b70      	ldr	r3, [pc, #448]	; (8100c74 <main+0x348>)
 8100ab4:	681b      	ldr	r3, [r3, #0]
 8100ab6:	1ad3      	subs	r3, r2, r3
 8100ab8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8100abc:	d32e      	bcc.n	8100b1c <main+0x1f0>
		  timestamp_one = HAL_GetTick();
 8100abe:	f000 fdeb 	bl	8101698 <HAL_GetTick>
 8100ac2:	4603      	mov	r3, r0
 8100ac4:	4a6b      	ldr	r2, [pc, #428]	; (8100c74 <main+0x348>)
 8100ac6:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8100ac8:	2102      	movs	r1, #2
 8100aca:	486b      	ldr	r0, [pc, #428]	; (8100c78 <main+0x34c>)
 8100acc:	f002 f82b 	bl	8102b26 <HAL_GPIO_TogglePin>

		  DS3231_Read(&hi2c2);
 8100ad0:	485d      	ldr	r0, [pc, #372]	; (8100c48 <main+0x31c>)
 8100ad2:	f7ff fc75 	bl	81003c0 <DS3231_Read>
		  if(HAL_HSEM_Take(1, 1) == HAL_OK){
 8100ad6:	2101      	movs	r1, #1
 8100ad8:	2001      	movs	r0, #1
 8100ada:	f002 f859 	bl	8102b90 <HAL_HSEM_Take>
 8100ade:	4603      	mov	r3, r0
 8100ae0:	2b00      	cmp	r3, #0
 8100ae2:	d11b      	bne.n	8100b1c <main+0x1f0>
		  //read RTC NEED TO READ BOTH IN OTHER
		  HAL_RTC_GetTime(&hrtc, &NowTime, RTC_FORMAT_BCD);
 8100ae4:	2201      	movs	r2, #1
 8100ae6:	495b      	ldr	r1, [pc, #364]	; (8100c54 <main+0x328>)
 8100ae8:	4858      	ldr	r0, [pc, #352]	; (8100c4c <main+0x320>)
 8100aea:	f004 f8f0 	bl	8104cce <HAL_RTC_GetTime>
		  HAL_RTC_GetDate(&hrtc, &NowDate, RTC_FORMAT_BCD);
 8100aee:	2201      	movs	r2, #1
 8100af0:	4959      	ldr	r1, [pc, #356]	; (8100c58 <main+0x32c>)
 8100af2:	4856      	ldr	r0, [pc, #344]	; (8100c4c <main+0x320>)
 8100af4:	f004 f9ce 	bl	8104e94 <HAL_RTC_GetDate>
		  SRAM4->NowTimes = NowTime;
 8100af8:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8100afc:	4a55      	ldr	r2, [pc, #340]	; (8100c54 <main+0x328>)
 8100afe:	1d1c      	adds	r4, r3, #4
 8100b00:	4615      	mov	r5, r2
 8100b02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8100b04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8100b06:	682b      	ldr	r3, [r5, #0]
 8100b08:	6023      	str	r3, [r4, #0]
		  SRAM4->NowDates = NowDate;
 8100b0a:	f04f 5260 	mov.w	r2, #939524096	; 0x38000000
 8100b0e:	4b52      	ldr	r3, [pc, #328]	; (8100c58 <main+0x32c>)
 8100b10:	681b      	ldr	r3, [r3, #0]
 8100b12:	6193      	str	r3, [r2, #24]

		  HAL_HSEM_Release(1, 1);
 8100b14:	2101      	movs	r1, #1
 8100b16:	2001      	movs	r0, #1
 8100b18:	f002 f85e 	bl	8102bd8 <HAL_HSEM_Release>
		  	  }
	  }

	  if(HAL_GetTick() - timestamp_two >= 2000){
 8100b1c:	f000 fdbc 	bl	8101698 <HAL_GetTick>
 8100b20:	4602      	mov	r2, r0
 8100b22:	4b56      	ldr	r3, [pc, #344]	; (8100c7c <main+0x350>)
 8100b24:	681b      	ldr	r3, [r3, #0]
 8100b26:	1ad3      	subs	r3, r2, r3
 8100b28:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8100b2c:	d37a      	bcc.n	8100c24 <main+0x2f8>
		  timestamp_two = HAL_GetTick();
 8100b2e:	f000 fdb3 	bl	8101698 <HAL_GetTick>
 8100b32:	4603      	mov	r3, r0
 8100b34:	4a51      	ldr	r2, [pc, #324]	; (8100c7c <main+0x350>)
 8100b36:	6013      	str	r3, [r2, #0]
//		  HAL_Delay(500);
//		  //// SPI test-------------------------


		  // Find cards
		  status_5221 = MFRC522_Request(PICC_REQIDL, &bufferMM[1]);//bufferMM
 8100b38:	4951      	ldr	r1, [pc, #324]	; (8100c80 <main+0x354>)
 8100b3a:	2026      	movs	r0, #38	; 0x26
 8100b3c:	f7ff fd6f 	bl	810061e <MFRC522_Request>
 8100b40:	4603      	mov	r3, r0
 8100b42:	b29a      	uxth	r2, r3
 8100b44:	4b4f      	ldr	r3, [pc, #316]	; (8100c84 <main+0x358>)
 8100b46:	801a      	strh	r2, [r3, #0]
		  //bufferMM[3] = Read_MFRC522(FIFODataReg);
		  status_522 = MFRC522_Anticoll(&cardstr[0]);
 8100b48:	484f      	ldr	r0, [pc, #316]	; (8100c88 <main+0x35c>)
 8100b4a:	f7ff fe56 	bl	81007fa <MFRC522_Anticoll>
 8100b4e:	4603      	mov	r3, r0
 8100b50:	461a      	mov	r2, r3
 8100b52:	4b45      	ldr	r3, [pc, #276]	; (8100c68 <main+0x33c>)
 8100b54:	701a      	strb	r2, [r3, #0]

		  sprintf(txtUARTBF, "Find Cards %x  %x  %x  %x \r\n",status_5221 ,status_522, bufferMM[1], bufferMM[3]);
 8100b56:	4b4b      	ldr	r3, [pc, #300]	; (8100c84 <main+0x358>)
 8100b58:	881b      	ldrh	r3, [r3, #0]
 8100b5a:	4619      	mov	r1, r3
 8100b5c:	4b42      	ldr	r3, [pc, #264]	; (8100c68 <main+0x33c>)
 8100b5e:	781b      	ldrb	r3, [r3, #0]
 8100b60:	4618      	mov	r0, r3
 8100b62:	4b4a      	ldr	r3, [pc, #296]	; (8100c8c <main+0x360>)
 8100b64:	785b      	ldrb	r3, [r3, #1]
 8100b66:	461a      	mov	r2, r3
 8100b68:	4b48      	ldr	r3, [pc, #288]	; (8100c8c <main+0x360>)
 8100b6a:	78db      	ldrb	r3, [r3, #3]
 8100b6c:	9301      	str	r3, [sp, #4]
 8100b6e:	9200      	str	r2, [sp, #0]
 8100b70:	4603      	mov	r3, r0
 8100b72:	460a      	mov	r2, r1
 8100b74:	4946      	ldr	r1, [pc, #280]	; (8100c90 <main+0x364>)
 8100b76:	483e      	ldr	r0, [pc, #248]	; (8100c70 <main+0x344>)
 8100b78:	f005 fe70 	bl	810685c <siprintf>
		  HAL_UART_Transmit(&huart3, (uint8_t*)txtUARTBF, strlen(txtUARTBF),10);
 8100b7c:	483c      	ldr	r0, [pc, #240]	; (8100c70 <main+0x344>)
 8100b7e:	f7ff fbaf 	bl	81002e0 <strlen>
 8100b82:	4603      	mov	r3, r0
 8100b84:	b29a      	uxth	r2, r3
 8100b86:	230a      	movs	r3, #10
 8100b88:	4939      	ldr	r1, [pc, #228]	; (8100c70 <main+0x344>)
 8100b8a:	4835      	ldr	r0, [pc, #212]	; (8100c60 <main+0x334>)
 8100b8c:	f005 fcd6 	bl	810653c <HAL_UART_Transmit>

		  if(status_522 == MI_OK) {
 8100b90:	4b35      	ldr	r3, [pc, #212]	; (8100c68 <main+0x33c>)
 8100b92:	781b      	ldrb	r3, [r3, #0]
 8100b94:	2b00      	cmp	r3, #0
 8100b96:	d140      	bne.n	8100c1a <main+0x2ee>
			  printUART("Anticoll OK \r\n", 10);
 8100b98:	210a      	movs	r1, #10
 8100b9a:	483e      	ldr	r0, [pc, #248]	; (8100c94 <main+0x368>)
 8100b9c:	f000 fa68 	bl	8101070 <printUART>
			  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8100ba0:	2201      	movs	r2, #1
 8100ba2:	2101      	movs	r1, #1
 8100ba4:	483c      	ldr	r0, [pc, #240]	; (8100c98 <main+0x36c>)
 8100ba6:	f001 ffa5 	bl	8102af4 <HAL_GPIO_WritePin>
			  result++;
 8100baa:	4b3c      	ldr	r3, [pc, #240]	; (8100c9c <main+0x370>)
 8100bac:	881b      	ldrh	r3, [r3, #0]
 8100bae:	3301      	adds	r3, #1
 8100bb0:	b29a      	uxth	r2, r3
 8100bb2:	4b3a      	ldr	r3, [pc, #232]	; (8100c9c <main+0x370>)
 8100bb4:	801a      	strh	r2, [r3, #0]
			  sprintf(txtUARTBF,"UID: %x %x %x %x \r\n", cardstr[0], cardstr[1], cardstr[2], cardstr[3]);
 8100bb6:	4b34      	ldr	r3, [pc, #208]	; (8100c88 <main+0x35c>)
 8100bb8:	781b      	ldrb	r3, [r3, #0]
 8100bba:	4619      	mov	r1, r3
 8100bbc:	4b32      	ldr	r3, [pc, #200]	; (8100c88 <main+0x35c>)
 8100bbe:	785b      	ldrb	r3, [r3, #1]
 8100bc0:	4618      	mov	r0, r3
 8100bc2:	4b31      	ldr	r3, [pc, #196]	; (8100c88 <main+0x35c>)
 8100bc4:	789b      	ldrb	r3, [r3, #2]
 8100bc6:	461a      	mov	r2, r3
 8100bc8:	4b2f      	ldr	r3, [pc, #188]	; (8100c88 <main+0x35c>)
 8100bca:	78db      	ldrb	r3, [r3, #3]
 8100bcc:	9301      	str	r3, [sp, #4]
 8100bce:	9200      	str	r2, [sp, #0]
 8100bd0:	4603      	mov	r3, r0
 8100bd2:	460a      	mov	r2, r1
 8100bd4:	4932      	ldr	r1, [pc, #200]	; (8100ca0 <main+0x374>)
 8100bd6:	4826      	ldr	r0, [pc, #152]	; (8100c70 <main+0x344>)
 8100bd8:	f005 fe40 	bl	810685c <siprintf>
			  HAL_UART_Transmit(&huart3, (uint8_t*)txtUARTBF, strlen(txtUARTBF),10);
 8100bdc:	4824      	ldr	r0, [pc, #144]	; (8100c70 <main+0x344>)
 8100bde:	f7ff fb7f 	bl	81002e0 <strlen>
 8100be2:	4603      	mov	r3, r0
 8100be4:	b29a      	uxth	r2, r3
 8100be6:	230a      	movs	r3, #10
 8100be8:	4921      	ldr	r1, [pc, #132]	; (8100c70 <main+0x344>)
 8100bea:	481d      	ldr	r0, [pc, #116]	; (8100c60 <main+0x334>)
 8100bec:	f005 fca6 	bl	810653c <HAL_UART_Transmit>
			  UID[0] = cardstr[0];
 8100bf0:	4b25      	ldr	r3, [pc, #148]	; (8100c88 <main+0x35c>)
 8100bf2:	781a      	ldrb	r2, [r3, #0]
 8100bf4:	4b2b      	ldr	r3, [pc, #172]	; (8100ca4 <main+0x378>)
 8100bf6:	701a      	strb	r2, [r3, #0]
			  UID[1] = cardstr[1];
 8100bf8:	4b23      	ldr	r3, [pc, #140]	; (8100c88 <main+0x35c>)
 8100bfa:	785a      	ldrb	r2, [r3, #1]
 8100bfc:	4b29      	ldr	r3, [pc, #164]	; (8100ca4 <main+0x378>)
 8100bfe:	705a      	strb	r2, [r3, #1]
			  UID[2] = cardstr[2];
 8100c00:	4b21      	ldr	r3, [pc, #132]	; (8100c88 <main+0x35c>)
 8100c02:	789a      	ldrb	r2, [r3, #2]
 8100c04:	4b27      	ldr	r3, [pc, #156]	; (8100ca4 <main+0x378>)
 8100c06:	709a      	strb	r2, [r3, #2]
			  UID[3] = cardstr[3];
 8100c08:	4b1f      	ldr	r3, [pc, #124]	; (8100c88 <main+0x35c>)
 8100c0a:	78da      	ldrb	r2, [r3, #3]
 8100c0c:	4b25      	ldr	r3, [pc, #148]	; (8100ca4 <main+0x378>)
 8100c0e:	70da      	strb	r2, [r3, #3]
			  UID[4] = cardstr[4];
 8100c10:	4b1d      	ldr	r3, [pc, #116]	; (8100c88 <main+0x35c>)
 8100c12:	791a      	ldrb	r2, [r3, #4]
 8100c14:	4b23      	ldr	r3, [pc, #140]	; (8100ca4 <main+0x378>)
 8100c16:	711a      	strb	r2, [r3, #4]
 8100c18:	e004      	b.n	8100c24 <main+0x2f8>
		  }else{
			  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8100c1a:	2200      	movs	r2, #0
 8100c1c:	2101      	movs	r1, #1
 8100c1e:	481e      	ldr	r0, [pc, #120]	; (8100c98 <main+0x36c>)
 8100c20:	f001 ff68 	bl	8102af4 <HAL_GPIO_WritePin>
		  }

	  } //// timestamp_two loop

	  if(flag_one == 3){
 8100c24:	4b20      	ldr	r3, [pc, #128]	; (8100ca8 <main+0x37c>)
 8100c26:	781b      	ldrb	r3, [r3, #0]
 8100c28:	2b03      	cmp	r3, #3
 8100c2a:	f47f af3f 	bne.w	8100aac <main+0x180>

		  MFRC522_SelfTest();
 8100c2e:	f7ff fe35 	bl	810089c <MFRC522_SelfTest>
		  printUART("RC522 Self test\r\n", 10);
 8100c32:	210a      	movs	r1, #10
 8100c34:	481d      	ldr	r0, [pc, #116]	; (8100cac <main+0x380>)
 8100c36:	f000 fa1b 	bl	8101070 <printUART>
		  flag_one = 0;
 8100c3a:	4b1b      	ldr	r3, [pc, #108]	; (8100ca8 <main+0x37c>)
 8100c3c:	2200      	movs	r2, #0
 8100c3e:	701a      	strb	r2, [r3, #0]
	  if(HAL_GetTick() - timestamp_one >= 500){
 8100c40:	e734      	b.n	8100aac <main+0x180>
 8100c42:	bf00      	nop
 8100c44:	58026400 	.word	0x58026400
 8100c48:	100000f4 	.word	0x100000f4
 8100c4c:	10000140 	.word	0x10000140
 8100c50:	1000044c 	.word	0x1000044c
 8100c54:	100003c8 	.word	0x100003c8
 8100c58:	100003dc 	.word	0x100003dc
 8100c5c:	081071dc 	.word	0x081071dc
 8100c60:	10000238 	.word	0x10000238
 8100c64:	08107150 	.word	0x08107150
 8100c68:	10000459 	.word	0x10000459
 8100c6c:	08107174 	.word	0x08107174
 8100c70:	100003e0 	.word	0x100003e0
 8100c74:	100003c0 	.word	0x100003c0
 8100c78:	58021000 	.word	0x58021000
 8100c7c:	100003c4 	.word	0x100003c4
 8100c80:	10000445 	.word	0x10000445
 8100c84:	1000044e 	.word	0x1000044e
 8100c88:	1000045c 	.word	0x1000045c
 8100c8c:	10000444 	.word	0x10000444
 8100c90:	08107184 	.word	0x08107184
 8100c94:	081071a4 	.word	0x081071a4
 8100c98:	58020400 	.word	0x58020400
 8100c9c:	1000046e 	.word	0x1000046e
 8100ca0:	081071b4 	.word	0x081071b4
 8100ca4:	10000454 	.word	0x10000454
 8100ca8:	10000450 	.word	0x10000450
 8100cac:	081071c8 	.word	0x081071c8

08100cb0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8100cb0:	b580      	push	{r7, lr}
 8100cb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8100cb4:	4b1b      	ldr	r3, [pc, #108]	; (8100d24 <MX_I2C2_Init+0x74>)
 8100cb6:	4a1c      	ldr	r2, [pc, #112]	; (8100d28 <MX_I2C2_Init+0x78>)
 8100cb8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 8100cba:	4b1a      	ldr	r3, [pc, #104]	; (8100d24 <MX_I2C2_Init+0x74>)
 8100cbc:	4a1b      	ldr	r2, [pc, #108]	; (8100d2c <MX_I2C2_Init+0x7c>)
 8100cbe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8100cc0:	4b18      	ldr	r3, [pc, #96]	; (8100d24 <MX_I2C2_Init+0x74>)
 8100cc2:	2200      	movs	r2, #0
 8100cc4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8100cc6:	4b17      	ldr	r3, [pc, #92]	; (8100d24 <MX_I2C2_Init+0x74>)
 8100cc8:	2201      	movs	r2, #1
 8100cca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8100ccc:	4b15      	ldr	r3, [pc, #84]	; (8100d24 <MX_I2C2_Init+0x74>)
 8100cce:	2200      	movs	r2, #0
 8100cd0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8100cd2:	4b14      	ldr	r3, [pc, #80]	; (8100d24 <MX_I2C2_Init+0x74>)
 8100cd4:	2200      	movs	r2, #0
 8100cd6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8100cd8:	4b12      	ldr	r3, [pc, #72]	; (8100d24 <MX_I2C2_Init+0x74>)
 8100cda:	2200      	movs	r2, #0
 8100cdc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8100cde:	4b11      	ldr	r3, [pc, #68]	; (8100d24 <MX_I2C2_Init+0x74>)
 8100ce0:	2200      	movs	r2, #0
 8100ce2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8100ce4:	4b0f      	ldr	r3, [pc, #60]	; (8100d24 <MX_I2C2_Init+0x74>)
 8100ce6:	2200      	movs	r2, #0
 8100ce8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8100cea:	480e      	ldr	r0, [pc, #56]	; (8100d24 <MX_I2C2_Init+0x74>)
 8100cec:	f001 ff9a 	bl	8102c24 <HAL_I2C_Init>
 8100cf0:	4603      	mov	r3, r0
 8100cf2:	2b00      	cmp	r3, #0
 8100cf4:	d001      	beq.n	8100cfa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8100cf6:	f000 fa07 	bl	8101108 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8100cfa:	2100      	movs	r1, #0
 8100cfc:	4809      	ldr	r0, [pc, #36]	; (8100d24 <MX_I2C2_Init+0x74>)
 8100cfe:	f002 fb8d 	bl	810341c <HAL_I2CEx_ConfigAnalogFilter>
 8100d02:	4603      	mov	r3, r0
 8100d04:	2b00      	cmp	r3, #0
 8100d06:	d001      	beq.n	8100d0c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8100d08:	f000 f9fe 	bl	8101108 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8100d0c:	2100      	movs	r1, #0
 8100d0e:	4805      	ldr	r0, [pc, #20]	; (8100d24 <MX_I2C2_Init+0x74>)
 8100d10:	f002 fbcf 	bl	81034b2 <HAL_I2CEx_ConfigDigitalFilter>
 8100d14:	4603      	mov	r3, r0
 8100d16:	2b00      	cmp	r3, #0
 8100d18:	d001      	beq.n	8100d1e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8100d1a:	f000 f9f5 	bl	8101108 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8100d1e:	bf00      	nop
 8100d20:	bd80      	pop	{r7, pc}
 8100d22:	bf00      	nop
 8100d24:	100000f4 	.word	0x100000f4
 8100d28:	40005800 	.word	0x40005800
 8100d2c:	00b03fdb 	.word	0x00b03fdb

08100d30 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8100d30:	b580      	push	{r7, lr}
 8100d32:	b086      	sub	sp, #24
 8100d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8100d36:	1d3b      	adds	r3, r7, #4
 8100d38:	2200      	movs	r2, #0
 8100d3a:	601a      	str	r2, [r3, #0]
 8100d3c:	605a      	str	r2, [r3, #4]
 8100d3e:	609a      	str	r2, [r3, #8]
 8100d40:	60da      	str	r2, [r3, #12]
 8100d42:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8100d44:	2300      	movs	r3, #0
 8100d46:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8100d48:	4b2a      	ldr	r3, [pc, #168]	; (8100df4 <MX_RTC_Init+0xc4>)
 8100d4a:	4a2b      	ldr	r2, [pc, #172]	; (8100df8 <MX_RTC_Init+0xc8>)
 8100d4c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8100d4e:	4b29      	ldr	r3, [pc, #164]	; (8100df4 <MX_RTC_Init+0xc4>)
 8100d50:	2200      	movs	r2, #0
 8100d52:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8100d54:	4b27      	ldr	r3, [pc, #156]	; (8100df4 <MX_RTC_Init+0xc4>)
 8100d56:	227f      	movs	r2, #127	; 0x7f
 8100d58:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8100d5a:	4b26      	ldr	r3, [pc, #152]	; (8100df4 <MX_RTC_Init+0xc4>)
 8100d5c:	22ff      	movs	r2, #255	; 0xff
 8100d5e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8100d60:	4b24      	ldr	r3, [pc, #144]	; (8100df4 <MX_RTC_Init+0xc4>)
 8100d62:	2200      	movs	r2, #0
 8100d64:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8100d66:	4b23      	ldr	r3, [pc, #140]	; (8100df4 <MX_RTC_Init+0xc4>)
 8100d68:	2200      	movs	r2, #0
 8100d6a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8100d6c:	4b21      	ldr	r3, [pc, #132]	; (8100df4 <MX_RTC_Init+0xc4>)
 8100d6e:	2200      	movs	r2, #0
 8100d70:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8100d72:	4b20      	ldr	r3, [pc, #128]	; (8100df4 <MX_RTC_Init+0xc4>)
 8100d74:	2200      	movs	r2, #0
 8100d76:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8100d78:	481e      	ldr	r0, [pc, #120]	; (8100df4 <MX_RTC_Init+0xc4>)
 8100d7a:	f003 fe93 	bl	8104aa4 <HAL_RTC_Init>
 8100d7e:	4603      	mov	r3, r0
 8100d80:	2b00      	cmp	r3, #0
 8100d82:	d001      	beq.n	8100d88 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8100d84:	f000 f9c0 	bl	8101108 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8100d88:	2300      	movs	r3, #0
 8100d8a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x30;
 8100d8c:	2330      	movs	r3, #48	; 0x30
 8100d8e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8100d90:	2300      	movs	r3, #0
 8100d92:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8100d94:	2300      	movs	r3, #0
 8100d96:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_SET;
 8100d98:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8100d9c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8100d9e:	1d3b      	adds	r3, r7, #4
 8100da0:	2201      	movs	r2, #1
 8100da2:	4619      	mov	r1, r3
 8100da4:	4813      	ldr	r0, [pc, #76]	; (8100df4 <MX_RTC_Init+0xc4>)
 8100da6:	f003 fef5 	bl	8104b94 <HAL_RTC_SetTime>
 8100daa:	4603      	mov	r3, r0
 8100dac:	2b00      	cmp	r3, #0
 8100dae:	d001      	beq.n	8100db4 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8100db0:	f000 f9aa 	bl	8101108 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8100db4:	2306      	movs	r3, #6
 8100db6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 8100db8:	2311      	movs	r3, #17
 8100dba:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x12;
 8100dbc:	2312      	movs	r3, #18
 8100dbe:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 8100dc0:	2322      	movs	r3, #34	; 0x22
 8100dc2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8100dc4:	463b      	mov	r3, r7
 8100dc6:	2201      	movs	r2, #1
 8100dc8:	4619      	mov	r1, r3
 8100dca:	480a      	ldr	r0, [pc, #40]	; (8100df4 <MX_RTC_Init+0xc4>)
 8100dcc:	f003 ffdb 	bl	8104d86 <HAL_RTC_SetDate>
 8100dd0:	4603      	mov	r3, r0
 8100dd2:	2b00      	cmp	r3, #0
 8100dd4:	d001      	beq.n	8100dda <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8100dd6:	f000 f997 	bl	8101108 <Error_Handler>
  }

  /** Enable the reference Clock input
  */
  if (HAL_RTCEx_SetRefClock(&hrtc) != HAL_OK)
 8100dda:	4806      	ldr	r0, [pc, #24]	; (8100df4 <MX_RTC_Init+0xc4>)
 8100ddc:	f004 f978 	bl	81050d0 <HAL_RTCEx_SetRefClock>
 8100de0:	4603      	mov	r3, r0
 8100de2:	2b00      	cmp	r3, #0
 8100de4:	d001      	beq.n	8100dea <MX_RTC_Init+0xba>
  {
    Error_Handler();
 8100de6:	f000 f98f 	bl	8101108 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8100dea:	bf00      	nop
 8100dec:	3718      	adds	r7, #24
 8100dee:	46bd      	mov	sp, r7
 8100df0:	bd80      	pop	{r7, pc}
 8100df2:	bf00      	nop
 8100df4:	10000140 	.word	0x10000140
 8100df8:	58004000 	.word	0x58004000

08100dfc <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8100dfc:	b580      	push	{r7, lr}
 8100dfe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8100e00:	4b27      	ldr	r3, [pc, #156]	; (8100ea0 <MX_SPI4_Init+0xa4>)
 8100e02:	4a28      	ldr	r2, [pc, #160]	; (8100ea4 <MX_SPI4_Init+0xa8>)
 8100e04:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8100e06:	4b26      	ldr	r3, [pc, #152]	; (8100ea0 <MX_SPI4_Init+0xa4>)
 8100e08:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8100e0c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8100e0e:	4b24      	ldr	r3, [pc, #144]	; (8100ea0 <MX_SPI4_Init+0xa4>)
 8100e10:	2200      	movs	r2, #0
 8100e12:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8100e14:	4b22      	ldr	r3, [pc, #136]	; (8100ea0 <MX_SPI4_Init+0xa4>)
 8100e16:	2207      	movs	r2, #7
 8100e18:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8100e1a:	4b21      	ldr	r3, [pc, #132]	; (8100ea0 <MX_SPI4_Init+0xa4>)
 8100e1c:	2200      	movs	r2, #0
 8100e1e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8100e20:	4b1f      	ldr	r3, [pc, #124]	; (8100ea0 <MX_SPI4_Init+0xa4>)
 8100e22:	2200      	movs	r2, #0
 8100e24:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8100e26:	4b1e      	ldr	r3, [pc, #120]	; (8100ea0 <MX_SPI4_Init+0xa4>)
 8100e28:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8100e2c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8100e2e:	4b1c      	ldr	r3, [pc, #112]	; (8100ea0 <MX_SPI4_Init+0xa4>)
 8100e30:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8100e34:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8100e36:	4b1a      	ldr	r3, [pc, #104]	; (8100ea0 <MX_SPI4_Init+0xa4>)
 8100e38:	2200      	movs	r2, #0
 8100e3a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8100e3c:	4b18      	ldr	r3, [pc, #96]	; (8100ea0 <MX_SPI4_Init+0xa4>)
 8100e3e:	2200      	movs	r2, #0
 8100e40:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8100e42:	4b17      	ldr	r3, [pc, #92]	; (8100ea0 <MX_SPI4_Init+0xa4>)
 8100e44:	2200      	movs	r2, #0
 8100e46:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8100e48:	4b15      	ldr	r3, [pc, #84]	; (8100ea0 <MX_SPI4_Init+0xa4>)
 8100e4a:	2200      	movs	r2, #0
 8100e4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8100e4e:	4b14      	ldr	r3, [pc, #80]	; (8100ea0 <MX_SPI4_Init+0xa4>)
 8100e50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8100e54:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8100e56:	4b12      	ldr	r3, [pc, #72]	; (8100ea0 <MX_SPI4_Init+0xa4>)
 8100e58:	2200      	movs	r2, #0
 8100e5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8100e5c:	4b10      	ldr	r3, [pc, #64]	; (8100ea0 <MX_SPI4_Init+0xa4>)
 8100e5e:	2200      	movs	r2, #0
 8100e60:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100e62:	4b0f      	ldr	r3, [pc, #60]	; (8100ea0 <MX_SPI4_Init+0xa4>)
 8100e64:	2200      	movs	r2, #0
 8100e66:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100e68:	4b0d      	ldr	r3, [pc, #52]	; (8100ea0 <MX_SPI4_Init+0xa4>)
 8100e6a:	2200      	movs	r2, #0
 8100e6c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8100e6e:	4b0c      	ldr	r3, [pc, #48]	; (8100ea0 <MX_SPI4_Init+0xa4>)
 8100e70:	2200      	movs	r2, #0
 8100e72:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8100e74:	4b0a      	ldr	r3, [pc, #40]	; (8100ea0 <MX_SPI4_Init+0xa4>)
 8100e76:	2200      	movs	r2, #0
 8100e78:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8100e7a:	4b09      	ldr	r3, [pc, #36]	; (8100ea0 <MX_SPI4_Init+0xa4>)
 8100e7c:	2200      	movs	r2, #0
 8100e7e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8100e80:	4b07      	ldr	r3, [pc, #28]	; (8100ea0 <MX_SPI4_Init+0xa4>)
 8100e82:	2200      	movs	r2, #0
 8100e84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8100e86:	4b06      	ldr	r3, [pc, #24]	; (8100ea0 <MX_SPI4_Init+0xa4>)
 8100e88:	2200      	movs	r2, #0
 8100e8a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8100e8c:	4804      	ldr	r0, [pc, #16]	; (8100ea0 <MX_SPI4_Init+0xa4>)
 8100e8e:	f004 f963 	bl	8105158 <HAL_SPI_Init>
 8100e92:	4603      	mov	r3, r0
 8100e94:	2b00      	cmp	r3, #0
 8100e96:	d001      	beq.n	8100e9c <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8100e98:	f000 f936 	bl	8101108 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8100e9c:	bf00      	nop
 8100e9e:	bd80      	pop	{r7, pc}
 8100ea0:	10000164 	.word	0x10000164
 8100ea4:	40013400 	.word	0x40013400

08100ea8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8100ea8:	b580      	push	{r7, lr}
 8100eaa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8100eac:	4b10      	ldr	r3, [pc, #64]	; (8100ef0 <MX_TIM17_Init+0x48>)
 8100eae:	4a11      	ldr	r2, [pc, #68]	; (8100ef4 <MX_TIM17_Init+0x4c>)
 8100eb0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 479;
 8100eb2:	4b0f      	ldr	r3, [pc, #60]	; (8100ef0 <MX_TIM17_Init+0x48>)
 8100eb4:	f240 12df 	movw	r2, #479	; 0x1df
 8100eb8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100eba:	4b0d      	ldr	r3, [pc, #52]	; (8100ef0 <MX_TIM17_Init+0x48>)
 8100ebc:	2200      	movs	r2, #0
 8100ebe:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8100ec0:	4b0b      	ldr	r3, [pc, #44]	; (8100ef0 <MX_TIM17_Init+0x48>)
 8100ec2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8100ec6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8100ec8:	4b09      	ldr	r3, [pc, #36]	; (8100ef0 <MX_TIM17_Init+0x48>)
 8100eca:	2200      	movs	r2, #0
 8100ecc:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8100ece:	4b08      	ldr	r3, [pc, #32]	; (8100ef0 <MX_TIM17_Init+0x48>)
 8100ed0:	2200      	movs	r2, #0
 8100ed2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8100ed4:	4b06      	ldr	r3, [pc, #24]	; (8100ef0 <MX_TIM17_Init+0x48>)
 8100ed6:	2200      	movs	r2, #0
 8100ed8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8100eda:	4805      	ldr	r0, [pc, #20]	; (8100ef0 <MX_TIM17_Init+0x48>)
 8100edc:	f005 f8d8 	bl	8106090 <HAL_TIM_Base_Init>
 8100ee0:	4603      	mov	r3, r0
 8100ee2:	2b00      	cmp	r3, #0
 8100ee4:	d001      	beq.n	8100eea <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8100ee6:	f000 f90f 	bl	8101108 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8100eea:	bf00      	nop
 8100eec:	bd80      	pop	{r7, pc}
 8100eee:	bf00      	nop
 8100ef0:	100001ec 	.word	0x100001ec
 8100ef4:	40014800 	.word	0x40014800

08100ef8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8100ef8:	b580      	push	{r7, lr}
 8100efa:	b082      	sub	sp, #8
 8100efc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8100efe:	4b11      	ldr	r3, [pc, #68]	; (8100f44 <MX_DMA_Init+0x4c>)
 8100f00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100f04:	4a0f      	ldr	r2, [pc, #60]	; (8100f44 <MX_DMA_Init+0x4c>)
 8100f06:	f043 0301 	orr.w	r3, r3, #1
 8100f0a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100f0e:	4b0d      	ldr	r3, [pc, #52]	; (8100f44 <MX_DMA_Init+0x4c>)
 8100f10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100f14:	f003 0301 	and.w	r3, r3, #1
 8100f18:	607b      	str	r3, [r7, #4]
 8100f1a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8100f1c:	2200      	movs	r2, #0
 8100f1e:	2100      	movs	r1, #0
 8100f20:	200b      	movs	r0, #11
 8100f22:	f000 fcc4 	bl	81018ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8100f26:	200b      	movs	r0, #11
 8100f28:	f000 fcdb 	bl	81018e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8100f2c:	2200      	movs	r2, #0
 8100f2e:	2100      	movs	r1, #0
 8100f30:	200c      	movs	r0, #12
 8100f32:	f000 fcbc 	bl	81018ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8100f36:	200c      	movs	r0, #12
 8100f38:	f000 fcd3 	bl	81018e2 <HAL_NVIC_EnableIRQ>

}
 8100f3c:	bf00      	nop
 8100f3e:	3708      	adds	r7, #8
 8100f40:	46bd      	mov	sp, r7
 8100f42:	bd80      	pop	{r7, pc}
 8100f44:	58024400 	.word	0x58024400

08100f48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100f48:	b580      	push	{r7, lr}
 8100f4a:	b08a      	sub	sp, #40	; 0x28
 8100f4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100f4e:	f107 0314 	add.w	r3, r7, #20
 8100f52:	2200      	movs	r2, #0
 8100f54:	601a      	str	r2, [r3, #0]
 8100f56:	605a      	str	r2, [r3, #4]
 8100f58:	609a      	str	r2, [r3, #8]
 8100f5a:	60da      	str	r2, [r3, #12]
 8100f5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8100f5e:	4b40      	ldr	r3, [pc, #256]	; (8101060 <MX_GPIO_Init+0x118>)
 8100f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f64:	4a3e      	ldr	r2, [pc, #248]	; (8101060 <MX_GPIO_Init+0x118>)
 8100f66:	f043 0310 	orr.w	r3, r3, #16
 8100f6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100f6e:	4b3c      	ldr	r3, [pc, #240]	; (8101060 <MX_GPIO_Init+0x118>)
 8100f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f74:	f003 0310 	and.w	r3, r3, #16
 8100f78:	613b      	str	r3, [r7, #16]
 8100f7a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8100f7c:	4b38      	ldr	r3, [pc, #224]	; (8101060 <MX_GPIO_Init+0x118>)
 8100f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f82:	4a37      	ldr	r2, [pc, #220]	; (8101060 <MX_GPIO_Init+0x118>)
 8100f84:	f043 0304 	orr.w	r3, r3, #4
 8100f88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100f8c:	4b34      	ldr	r3, [pc, #208]	; (8101060 <MX_GPIO_Init+0x118>)
 8100f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f92:	f003 0304 	and.w	r3, r3, #4
 8100f96:	60fb      	str	r3, [r7, #12]
 8100f98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100f9a:	4b31      	ldr	r3, [pc, #196]	; (8101060 <MX_GPIO_Init+0x118>)
 8100f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100fa0:	4a2f      	ldr	r2, [pc, #188]	; (8101060 <MX_GPIO_Init+0x118>)
 8100fa2:	f043 0302 	orr.w	r3, r3, #2
 8100fa6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100faa:	4b2d      	ldr	r3, [pc, #180]	; (8101060 <MX_GPIO_Init+0x118>)
 8100fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100fb0:	f003 0302 	and.w	r3, r3, #2
 8100fb4:	60bb      	str	r3, [r7, #8]
 8100fb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8100fb8:	4b29      	ldr	r3, [pc, #164]	; (8101060 <MX_GPIO_Init+0x118>)
 8100fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100fbe:	4a28      	ldr	r2, [pc, #160]	; (8101060 <MX_GPIO_Init+0x118>)
 8100fc0:	f043 0308 	orr.w	r3, r3, #8
 8100fc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100fc8:	4b25      	ldr	r3, [pc, #148]	; (8101060 <MX_GPIO_Init+0x118>)
 8100fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100fce:	f003 0308 	and.w	r3, r3, #8
 8100fd2:	607b      	str	r3, [r7, #4]
 8100fd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RC522_Rst_Pin|RC522_SPI4_NSS_Pin, GPIO_PIN_SET);
 8100fd6:	2201      	movs	r2, #1
 8100fd8:	2118      	movs	r1, #24
 8100fda:	4822      	ldr	r0, [pc, #136]	; (8101064 <MX_GPIO_Init+0x11c>)
 8100fdc:	f001 fd8a 	bl	8102af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8100fe0:	2200      	movs	r2, #0
 8100fe2:	2101      	movs	r1, #1
 8100fe4:	4820      	ldr	r0, [pc, #128]	; (8101068 <MX_GPIO_Init+0x120>)
 8100fe6:	f001 fd85 	bl	8102af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8100fea:	2200      	movs	r2, #0
 8100fec:	2102      	movs	r1, #2
 8100fee:	481d      	ldr	r0, [pc, #116]	; (8101064 <MX_GPIO_Init+0x11c>)
 8100ff0:	f001 fd80 	bl	8102af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RC522_Rst_Pin RC522_SPI4_NSS_Pin LD2_Pin */
  GPIO_InitStruct.Pin = RC522_Rst_Pin|RC522_SPI4_NSS_Pin|LD2_Pin;
 8100ff4:	231a      	movs	r3, #26
 8100ff6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100ff8:	2301      	movs	r3, #1
 8100ffa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100ffc:	2300      	movs	r3, #0
 8100ffe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101000:	2300      	movs	r3, #0
 8101002:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101004:	f107 0314 	add.w	r3, r7, #20
 8101008:	4619      	mov	r1, r3
 810100a:	4816      	ldr	r0, [pc, #88]	; (8101064 <MX_GPIO_Init+0x11c>)
 810100c:	f001 fbc2 	bl	8102794 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8101010:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8101014:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8101016:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 810101a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810101c:	2300      	movs	r3, #0
 810101e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8101020:	f107 0314 	add.w	r3, r7, #20
 8101024:	4619      	mov	r1, r3
 8101026:	4811      	ldr	r0, [pc, #68]	; (810106c <MX_GPIO_Init+0x124>)
 8101028:	f001 fbb4 	bl	8102794 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 810102c:	2301      	movs	r3, #1
 810102e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101030:	2301      	movs	r3, #1
 8101032:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101034:	2300      	movs	r3, #0
 8101036:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101038:	2300      	movs	r3, #0
 810103a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 810103c:	f107 0314 	add.w	r3, r7, #20
 8101040:	4619      	mov	r1, r3
 8101042:	4809      	ldr	r0, [pc, #36]	; (8101068 <MX_GPIO_Init+0x120>)
 8101044:	f001 fba6 	bl	8102794 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8101048:	2200      	movs	r2, #0
 810104a:	2100      	movs	r1, #0
 810104c:	2028      	movs	r0, #40	; 0x28
 810104e:	f000 fc2e 	bl	81018ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8101052:	2028      	movs	r0, #40	; 0x28
 8101054:	f000 fc45 	bl	81018e2 <HAL_NVIC_EnableIRQ>

}
 8101058:	bf00      	nop
 810105a:	3728      	adds	r7, #40	; 0x28
 810105c:	46bd      	mov	sp, r7
 810105e:	bd80      	pop	{r7, pc}
 8101060:	58024400 	.word	0x58024400
 8101064:	58021000 	.word	0x58021000
 8101068:	58020400 	.word	0x58020400
 810106c:	58020800 	.word	0x58020800

08101070 <printUART>:

/* USER CODE BEGIN 4 */
void printUART(char* texts, uint8_t timeoutc){
 8101070:	b580      	push	{r7, lr}
 8101072:	b082      	sub	sp, #8
 8101074:	af00      	add	r7, sp, #0
 8101076:	6078      	str	r0, [r7, #4]
 8101078:	460b      	mov	r3, r1
 810107a:	70fb      	strb	r3, [r7, #3]
	sprintf(txtUARTBF, texts);
 810107c:	6879      	ldr	r1, [r7, #4]
 810107e:	4808      	ldr	r0, [pc, #32]	; (81010a0 <printUART+0x30>)
 8101080:	f005 fbec 	bl	810685c <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)txtUARTBF, strlen(txtUARTBF),timeoutc);
 8101084:	4806      	ldr	r0, [pc, #24]	; (81010a0 <printUART+0x30>)
 8101086:	f7ff f92b 	bl	81002e0 <strlen>
 810108a:	4603      	mov	r3, r0
 810108c:	b29a      	uxth	r2, r3
 810108e:	78fb      	ldrb	r3, [r7, #3]
 8101090:	4903      	ldr	r1, [pc, #12]	; (81010a0 <printUART+0x30>)
 8101092:	4804      	ldr	r0, [pc, #16]	; (81010a4 <printUART+0x34>)
 8101094:	f005 fa52 	bl	810653c <HAL_UART_Transmit>
}
 8101098:	bf00      	nop
 810109a:	3708      	adds	r7, #8
 810109c:	46bd      	mov	sp, r7
 810109e:	bd80      	pop	{r7, pc}
 81010a0:	100003e0 	.word	0x100003e0
 81010a4:	10000238 	.word	0x10000238

081010a8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 81010a8:	b480      	push	{r7}
 81010aa:	b083      	sub	sp, #12
 81010ac:	af00      	add	r7, sp, #0
 81010ae:	4603      	mov	r3, r0
 81010b0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 81010b2:	88fb      	ldrh	r3, [r7, #6]
 81010b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81010b8:	d102      	bne.n	81010c0 <HAL_GPIO_EXTI_Callback+0x18>
		flag_one = 3;   ////MFRC522_SelfTest();
 81010ba:	4b04      	ldr	r3, [pc, #16]	; (81010cc <HAL_GPIO_EXTI_Callback+0x24>)
 81010bc:	2203      	movs	r2, #3
 81010be:	701a      	strb	r2, [r3, #0]

		}
}
 81010c0:	bf00      	nop
 81010c2:	370c      	adds	r7, #12
 81010c4:	46bd      	mov	sp, r7
 81010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010ca:	4770      	bx	lr
 81010cc:	10000450 	.word	0x10000450

081010d0 <HAL_TIM_PeriodElapsedCallback>:

uint64_t micros()
{return _micros + htim17.Instance->CNT;}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 81010d0:	b4b0      	push	{r4, r5, r7}
 81010d2:	b083      	sub	sp, #12
 81010d4:	af00      	add	r7, sp, #0
 81010d6:	6078      	str	r0, [r7, #4]
 if(htim == &htim17)
 81010d8:	687b      	ldr	r3, [r7, #4]
 81010da:	4a09      	ldr	r2, [pc, #36]	; (8101100 <HAL_TIM_PeriodElapsedCallback+0x30>)
 81010dc:	4293      	cmp	r3, r2
 81010de:	d10a      	bne.n	81010f6 <HAL_TIM_PeriodElapsedCallback+0x26>
 {_micros += 65535;}
 81010e0:	4b08      	ldr	r3, [pc, #32]	; (8101104 <HAL_TIM_PeriodElapsedCallback+0x34>)
 81010e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81010e6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 81010ea:	1854      	adds	r4, r2, r1
 81010ec:	f143 0500 	adc.w	r5, r3, #0
 81010f0:	4b04      	ldr	r3, [pc, #16]	; (8101104 <HAL_TIM_PeriodElapsedCallback+0x34>)
 81010f2:	e9c3 4500 	strd	r4, r5, [r3]
}
 81010f6:	bf00      	nop
 81010f8:	370c      	adds	r7, #12
 81010fa:	46bd      	mov	sp, r7
 81010fc:	bcb0      	pop	{r4, r5, r7}
 81010fe:	4770      	bx	lr
 8101100:	100001ec 	.word	0x100001ec
 8101104:	100003b8 	.word	0x100003b8

08101108 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101108:	b480      	push	{r7}
 810110a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 810110c:	b672      	cpsid	i
}
 810110e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8101110:	e7fe      	b.n	8101110 <Error_Handler+0x8>
	...

08101114 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101114:	b480      	push	{r7}
 8101116:	b083      	sub	sp, #12
 8101118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810111a:	4b0a      	ldr	r3, [pc, #40]	; (8101144 <HAL_MspInit+0x30>)
 810111c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101120:	4a08      	ldr	r2, [pc, #32]	; (8101144 <HAL_MspInit+0x30>)
 8101122:	f043 0302 	orr.w	r3, r3, #2
 8101126:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810112a:	4b06      	ldr	r3, [pc, #24]	; (8101144 <HAL_MspInit+0x30>)
 810112c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101130:	f003 0302 	and.w	r3, r3, #2
 8101134:	607b      	str	r3, [r7, #4]
 8101136:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101138:	bf00      	nop
 810113a:	370c      	adds	r7, #12
 810113c:	46bd      	mov	sp, r7
 810113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101142:	4770      	bx	lr
 8101144:	58024400 	.word	0x58024400

08101148 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8101148:	b580      	push	{r7, lr}
 810114a:	b0b8      	sub	sp, #224	; 0xe0
 810114c:	af00      	add	r7, sp, #0
 810114e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101150:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101154:	2200      	movs	r2, #0
 8101156:	601a      	str	r2, [r3, #0]
 8101158:	605a      	str	r2, [r3, #4]
 810115a:	609a      	str	r2, [r3, #8]
 810115c:	60da      	str	r2, [r3, #12]
 810115e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101160:	f107 0310 	add.w	r3, r7, #16
 8101164:	22bc      	movs	r2, #188	; 0xbc
 8101166:	2100      	movs	r1, #0
 8101168:	4618      	mov	r0, r3
 810116a:	f005 fb6f 	bl	810684c <memset>
  if(hi2c->Instance==I2C2)
 810116e:	687b      	ldr	r3, [r7, #4]
 8101170:	681b      	ldr	r3, [r3, #0]
 8101172:	4a25      	ldr	r2, [pc, #148]	; (8101208 <HAL_I2C_MspInit+0xc0>)
 8101174:	4293      	cmp	r3, r2
 8101176:	d142      	bne.n	81011fe <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8101178:	2308      	movs	r3, #8
 810117a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 810117c:	2300      	movs	r3, #0
 810117e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101182:	f107 0310 	add.w	r3, r7, #16
 8101186:	4618      	mov	r0, r3
 8101188:	f002 fbe2 	bl	8103950 <HAL_RCCEx_PeriphCLKConfig>
 810118c:	4603      	mov	r3, r0
 810118e:	2b00      	cmp	r3, #0
 8101190:	d001      	beq.n	8101196 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8101192:	f7ff ffb9 	bl	8101108 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101196:	4b1d      	ldr	r3, [pc, #116]	; (810120c <HAL_I2C_MspInit+0xc4>)
 8101198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810119c:	4a1b      	ldr	r2, [pc, #108]	; (810120c <HAL_I2C_MspInit+0xc4>)
 810119e:	f043 0302 	orr.w	r3, r3, #2
 81011a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81011a6:	4b19      	ldr	r3, [pc, #100]	; (810120c <HAL_I2C_MspInit+0xc4>)
 81011a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81011ac:	f003 0302 	and.w	r3, r3, #2
 81011b0:	60fb      	str	r3, [r7, #12]
 81011b2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 81011b4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 81011b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 81011bc:	2312      	movs	r3, #18
 81011be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81011c2:	2300      	movs	r3, #0
 81011c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81011c8:	2300      	movs	r3, #0
 81011ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 81011ce:	2304      	movs	r3, #4
 81011d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81011d4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81011d8:	4619      	mov	r1, r3
 81011da:	480d      	ldr	r0, [pc, #52]	; (8101210 <HAL_I2C_MspInit+0xc8>)
 81011dc:	f001 fada 	bl	8102794 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 81011e0:	4b0a      	ldr	r3, [pc, #40]	; (810120c <HAL_I2C_MspInit+0xc4>)
 81011e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81011e6:	4a09      	ldr	r2, [pc, #36]	; (810120c <HAL_I2C_MspInit+0xc4>)
 81011e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 81011ec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81011f0:	4b06      	ldr	r3, [pc, #24]	; (810120c <HAL_I2C_MspInit+0xc4>)
 81011f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81011f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 81011fa:	60bb      	str	r3, [r7, #8]
 81011fc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 81011fe:	bf00      	nop
 8101200:	37e0      	adds	r7, #224	; 0xe0
 8101202:	46bd      	mov	sp, r7
 8101204:	bd80      	pop	{r7, pc}
 8101206:	bf00      	nop
 8101208:	40005800 	.word	0x40005800
 810120c:	58024400 	.word	0x58024400
 8101210:	58020400 	.word	0x58020400

08101214 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8101214:	b580      	push	{r7, lr}
 8101216:	b0b8      	sub	sp, #224	; 0xe0
 8101218:	af00      	add	r7, sp, #0
 810121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810121c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101220:	2200      	movs	r2, #0
 8101222:	601a      	str	r2, [r3, #0]
 8101224:	605a      	str	r2, [r3, #4]
 8101226:	609a      	str	r2, [r3, #8]
 8101228:	60da      	str	r2, [r3, #12]
 810122a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 810122c:	f107 0310 	add.w	r3, r7, #16
 8101230:	22bc      	movs	r2, #188	; 0xbc
 8101232:	2100      	movs	r1, #0
 8101234:	4618      	mov	r0, r3
 8101236:	f005 fb09 	bl	810684c <memset>
  if(hrtc->Instance==RTC)
 810123a:	687b      	ldr	r3, [r7, #4]
 810123c:	681b      	ldr	r3, [r3, #0]
 810123e:	4a21      	ldr	r2, [pc, #132]	; (81012c4 <HAL_RTC_MspInit+0xb0>)
 8101240:	4293      	cmp	r3, r2
 8101242:	d13b      	bne.n	81012bc <HAL_RTC_MspInit+0xa8>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8101244:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8101248:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 810124a:	f44f 7300 	mov.w	r3, #512	; 0x200
 810124e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101252:	f107 0310 	add.w	r3, r7, #16
 8101256:	4618      	mov	r0, r3
 8101258:	f002 fb7a 	bl	8103950 <HAL_RCCEx_PeriphCLKConfig>
 810125c:	4603      	mov	r3, r0
 810125e:	2b00      	cmp	r3, #0
 8101260:	d001      	beq.n	8101266 <HAL_RTC_MspInit+0x52>
    {
      Error_Handler();
 8101262:	f7ff ff51 	bl	8101108 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8101266:	4b18      	ldr	r3, [pc, #96]	; (81012c8 <HAL_RTC_MspInit+0xb4>)
 8101268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810126a:	4a17      	ldr	r2, [pc, #92]	; (81012c8 <HAL_RTC_MspInit+0xb4>)
 810126c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8101270:	6713      	str	r3, [r2, #112]	; 0x70

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101272:	4b15      	ldr	r3, [pc, #84]	; (81012c8 <HAL_RTC_MspInit+0xb4>)
 8101274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101278:	4a13      	ldr	r2, [pc, #76]	; (81012c8 <HAL_RTC_MspInit+0xb4>)
 810127a:	f043 0302 	orr.w	r3, r3, #2
 810127e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101282:	4b11      	ldr	r3, [pc, #68]	; (81012c8 <HAL_RTC_MspInit+0xb4>)
 8101284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101288:	f003 0302 	and.w	r3, r3, #2
 810128c:	60fb      	str	r3, [r7, #12]
 810128e:	68fb      	ldr	r3, [r7, #12]
    /**RTC GPIO Configuration
    PB15     ------> RTC_REFIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8101290:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8101294:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101298:	2302      	movs	r3, #2
 810129a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810129e:	2300      	movs	r3, #0
 81012a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81012a4:	2300      	movs	r3, #0
 81012a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF0_RTC_50Hz;
 81012aa:	2300      	movs	r3, #0
 81012ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81012b0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81012b4:	4619      	mov	r1, r3
 81012b6:	4805      	ldr	r0, [pc, #20]	; (81012cc <HAL_RTC_MspInit+0xb8>)
 81012b8:	f001 fa6c 	bl	8102794 <HAL_GPIO_Init>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 81012bc:	bf00      	nop
 81012be:	37e0      	adds	r7, #224	; 0xe0
 81012c0:	46bd      	mov	sp, r7
 81012c2:	bd80      	pop	{r7, pc}
 81012c4:	58004000 	.word	0x58004000
 81012c8:	58024400 	.word	0x58024400
 81012cc:	58020400 	.word	0x58020400

081012d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 81012d0:	b580      	push	{r7, lr}
 81012d2:	b0b8      	sub	sp, #224	; 0xe0
 81012d4:	af00      	add	r7, sp, #0
 81012d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81012d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81012dc:	2200      	movs	r2, #0
 81012de:	601a      	str	r2, [r3, #0]
 81012e0:	605a      	str	r2, [r3, #4]
 81012e2:	609a      	str	r2, [r3, #8]
 81012e4:	60da      	str	r2, [r3, #12]
 81012e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81012e8:	f107 0310 	add.w	r3, r7, #16
 81012ec:	22bc      	movs	r2, #188	; 0xbc
 81012ee:	2100      	movs	r1, #0
 81012f0:	4618      	mov	r0, r3
 81012f2:	f005 faab 	bl	810684c <memset>
  if(hspi->Instance==SPI4)
 81012f6:	687b      	ldr	r3, [r7, #4]
 81012f8:	681b      	ldr	r3, [r3, #0]
 81012fa:	4a24      	ldr	r2, [pc, #144]	; (810138c <HAL_SPI_MspInit+0xbc>)
 81012fc:	4293      	cmp	r3, r2
 81012fe:	d141      	bne.n	8101384 <HAL_SPI_MspInit+0xb4>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8101300:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8101304:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8101306:	2300      	movs	r3, #0
 8101308:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810130a:	f107 0310 	add.w	r3, r7, #16
 810130e:	4618      	mov	r0, r3
 8101310:	f002 fb1e 	bl	8103950 <HAL_RCCEx_PeriphCLKConfig>
 8101314:	4603      	mov	r3, r0
 8101316:	2b00      	cmp	r3, #0
 8101318:	d001      	beq.n	810131e <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 810131a:	f7ff fef5 	bl	8101108 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 810131e:	4b1c      	ldr	r3, [pc, #112]	; (8101390 <HAL_SPI_MspInit+0xc0>)
 8101320:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101324:	4a1a      	ldr	r2, [pc, #104]	; (8101390 <HAL_SPI_MspInit+0xc0>)
 8101326:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 810132a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 810132e:	4b18      	ldr	r3, [pc, #96]	; (8101390 <HAL_SPI_MspInit+0xc0>)
 8101330:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101334:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8101338:	60fb      	str	r3, [r7, #12]
 810133a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 810133c:	4b14      	ldr	r3, [pc, #80]	; (8101390 <HAL_SPI_MspInit+0xc0>)
 810133e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101342:	4a13      	ldr	r2, [pc, #76]	; (8101390 <HAL_SPI_MspInit+0xc0>)
 8101344:	f043 0310 	orr.w	r3, r3, #16
 8101348:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810134c:	4b10      	ldr	r3, [pc, #64]	; (8101390 <HAL_SPI_MspInit+0xc0>)
 810134e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101352:	f003 0310 	and.w	r3, r3, #16
 8101356:	60bb      	str	r3, [r7, #8]
 8101358:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 810135a:	2364      	movs	r3, #100	; 0x64
 810135c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101360:	2302      	movs	r3, #2
 8101362:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101366:	2300      	movs	r3, #0
 8101368:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810136c:	2300      	movs	r3, #0
 810136e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8101372:	2305      	movs	r3, #5
 8101374:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101378:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 810137c:	4619      	mov	r1, r3
 810137e:	4805      	ldr	r0, [pc, #20]	; (8101394 <HAL_SPI_MspInit+0xc4>)
 8101380:	f001 fa08 	bl	8102794 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8101384:	bf00      	nop
 8101386:	37e0      	adds	r7, #224	; 0xe0
 8101388:	46bd      	mov	sp, r7
 810138a:	bd80      	pop	{r7, pc}
 810138c:	40013400 	.word	0x40013400
 8101390:	58024400 	.word	0x58024400
 8101394:	58021000 	.word	0x58021000

08101398 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8101398:	b580      	push	{r7, lr}
 810139a:	b084      	sub	sp, #16
 810139c:	af00      	add	r7, sp, #0
 810139e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 81013a0:	687b      	ldr	r3, [r7, #4]
 81013a2:	681b      	ldr	r3, [r3, #0]
 81013a4:	4a0e      	ldr	r2, [pc, #56]	; (81013e0 <HAL_TIM_Base_MspInit+0x48>)
 81013a6:	4293      	cmp	r3, r2
 81013a8:	d116      	bne.n	81013d8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 81013aa:	4b0e      	ldr	r3, [pc, #56]	; (81013e4 <HAL_TIM_Base_MspInit+0x4c>)
 81013ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81013b0:	4a0c      	ldr	r2, [pc, #48]	; (81013e4 <HAL_TIM_Base_MspInit+0x4c>)
 81013b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 81013b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 81013ba:	4b0a      	ldr	r3, [pc, #40]	; (81013e4 <HAL_TIM_Base_MspInit+0x4c>)
 81013bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81013c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81013c4:	60fb      	str	r3, [r7, #12]
 81013c6:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 81013c8:	2200      	movs	r2, #0
 81013ca:	2100      	movs	r1, #0
 81013cc:	2076      	movs	r0, #118	; 0x76
 81013ce:	f000 fa6e 	bl	81018ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 81013d2:	2076      	movs	r0, #118	; 0x76
 81013d4:	f000 fa85 	bl	81018e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 81013d8:	bf00      	nop
 81013da:	3710      	adds	r7, #16
 81013dc:	46bd      	mov	sp, r7
 81013de:	bd80      	pop	{r7, pc}
 81013e0:	40014800 	.word	0x40014800
 81013e4:	58024400 	.word	0x58024400

081013e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81013e8:	b480      	push	{r7}
 81013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 81013ec:	e7fe      	b.n	81013ec <NMI_Handler+0x4>

081013ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81013ee:	b480      	push	{r7}
 81013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81013f2:	e7fe      	b.n	81013f2 <HardFault_Handler+0x4>

081013f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81013f4:	b480      	push	{r7}
 81013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81013f8:	e7fe      	b.n	81013f8 <MemManage_Handler+0x4>

081013fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81013fa:	b480      	push	{r7}
 81013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81013fe:	e7fe      	b.n	81013fe <BusFault_Handler+0x4>

08101400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101400:	b480      	push	{r7}
 8101402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101404:	e7fe      	b.n	8101404 <UsageFault_Handler+0x4>

08101406 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8101406:	b480      	push	{r7}
 8101408:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810140a:	bf00      	nop
 810140c:	46bd      	mov	sp, r7
 810140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101412:	4770      	bx	lr

08101414 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101414:	b480      	push	{r7}
 8101416:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101418:	bf00      	nop
 810141a:	46bd      	mov	sp, r7
 810141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101420:	4770      	bx	lr

08101422 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101422:	b480      	push	{r7}
 8101424:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8101426:	bf00      	nop
 8101428:	46bd      	mov	sp, r7
 810142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810142e:	4770      	bx	lr

08101430 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101430:	b580      	push	{r7, lr}
 8101432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101434:	f000 f91c 	bl	8101670 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8101438:	bf00      	nop
 810143a:	bd80      	pop	{r7, pc}

0810143c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 810143c:	b580      	push	{r7, lr}
 810143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8101440:	4802      	ldr	r0, [pc, #8]	; (810144c <DMA1_Stream0_IRQHandler+0x10>)
 8101442:	f000 fa7d 	bl	8101940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8101446:	bf00      	nop
 8101448:	bd80      	pop	{r7, pc}
 810144a:	bf00      	nop
 810144c:	100002c8 	.word	0x100002c8

08101450 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8101450:	b580      	push	{r7, lr}
 8101452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8101454:	4802      	ldr	r0, [pc, #8]	; (8101460 <DMA1_Stream1_IRQHandler+0x10>)
 8101456:	f000 fa73 	bl	8101940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 810145a:	bf00      	nop
 810145c:	bd80      	pop	{r7, pc}
 810145e:	bf00      	nop
 8101460:	10000340 	.word	0x10000340

08101464 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8101464:	b580      	push	{r7, lr}
 8101466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8101468:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 810146c:	f001 fb75 	bl	8102b5a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8101470:	bf00      	nop
 8101472:	bd80      	pop	{r7, pc}

08101474 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8101474:	b580      	push	{r7, lr}
 8101476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8101478:	4802      	ldr	r0, [pc, #8]	; (8101484 <TIM17_IRQHandler+0x10>)
 810147a:	f004 fe60 	bl	810613e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 810147e:	bf00      	nop
 8101480:	bd80      	pop	{r7, pc}
 8101482:	bf00      	nop
 8101484:	100001ec 	.word	0x100001ec

08101488 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8101488:	b580      	push	{r7, lr}
 810148a:	b086      	sub	sp, #24
 810148c:	af00      	add	r7, sp, #0
 810148e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8101490:	4a14      	ldr	r2, [pc, #80]	; (81014e4 <_sbrk+0x5c>)
 8101492:	4b15      	ldr	r3, [pc, #84]	; (81014e8 <_sbrk+0x60>)
 8101494:	1ad3      	subs	r3, r2, r3
 8101496:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8101498:	697b      	ldr	r3, [r7, #20]
 810149a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 810149c:	4b13      	ldr	r3, [pc, #76]	; (81014ec <_sbrk+0x64>)
 810149e:	681b      	ldr	r3, [r3, #0]
 81014a0:	2b00      	cmp	r3, #0
 81014a2:	d102      	bne.n	81014aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 81014a4:	4b11      	ldr	r3, [pc, #68]	; (81014ec <_sbrk+0x64>)
 81014a6:	4a12      	ldr	r2, [pc, #72]	; (81014f0 <_sbrk+0x68>)
 81014a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 81014aa:	4b10      	ldr	r3, [pc, #64]	; (81014ec <_sbrk+0x64>)
 81014ac:	681a      	ldr	r2, [r3, #0]
 81014ae:	687b      	ldr	r3, [r7, #4]
 81014b0:	4413      	add	r3, r2
 81014b2:	693a      	ldr	r2, [r7, #16]
 81014b4:	429a      	cmp	r2, r3
 81014b6:	d207      	bcs.n	81014c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 81014b8:	f005 f99e 	bl	81067f8 <__errno>
 81014bc:	4603      	mov	r3, r0
 81014be:	220c      	movs	r2, #12
 81014c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 81014c2:	f04f 33ff 	mov.w	r3, #4294967295
 81014c6:	e009      	b.n	81014dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 81014c8:	4b08      	ldr	r3, [pc, #32]	; (81014ec <_sbrk+0x64>)
 81014ca:	681b      	ldr	r3, [r3, #0]
 81014cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 81014ce:	4b07      	ldr	r3, [pc, #28]	; (81014ec <_sbrk+0x64>)
 81014d0:	681a      	ldr	r2, [r3, #0]
 81014d2:	687b      	ldr	r3, [r7, #4]
 81014d4:	4413      	add	r3, r2
 81014d6:	4a05      	ldr	r2, [pc, #20]	; (81014ec <_sbrk+0x64>)
 81014d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 81014da:	68fb      	ldr	r3, [r7, #12]
}
 81014dc:	4618      	mov	r0, r3
 81014de:	3718      	adds	r7, #24
 81014e0:	46bd      	mov	sp, r7
 81014e2:	bd80      	pop	{r7, pc}
 81014e4:	10048000 	.word	0x10048000
 81014e8:	00000400 	.word	0x00000400
 81014ec:	10000470 	.word	0x10000470
 81014f0:	10000488 	.word	0x10000488

081014f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81014f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 810152c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81014f8:	f7fe ff4a 	bl	8100390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81014fc:	480c      	ldr	r0, [pc, #48]	; (8101530 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81014fe:	490d      	ldr	r1, [pc, #52]	; (8101534 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101500:	4a0d      	ldr	r2, [pc, #52]	; (8101538 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101502:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101504:	e002      	b.n	810150c <LoopCopyDataInit>

08101506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8101506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810150a:	3304      	adds	r3, #4

0810150c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 810150c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 810150e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101510:	d3f9      	bcc.n	8101506 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101512:	4a0a      	ldr	r2, [pc, #40]	; (810153c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101514:	4c0a      	ldr	r4, [pc, #40]	; (8101540 <LoopFillZerobss+0x22>)
  movs r3, #0
 8101516:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101518:	e001      	b.n	810151e <LoopFillZerobss>

0810151a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810151a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 810151c:	3204      	adds	r2, #4

0810151e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810151e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101520:	d3fb      	bcc.n	810151a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101522:	f005 f96f 	bl	8106804 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101526:	f7ff fa01 	bl	810092c <main>
  bx  lr
 810152a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 810152c:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101530:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101534:	10000074 	.word	0x10000074
  ldr r2, =_sidata
 8101538:	08107264 	.word	0x08107264
  ldr r2, =_sbss
 810153c:	10000078 	.word	0x10000078
  ldr r4, =_ebss
 8101540:	10000488 	.word	0x10000488

08101544 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101544:	e7fe      	b.n	8101544 <ADC3_IRQHandler>
	...

08101548 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101548:	b580      	push	{r7, lr}
 810154a:	b082      	sub	sp, #8
 810154c:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810154e:	4b28      	ldr	r3, [pc, #160]	; (81015f0 <HAL_Init+0xa8>)
 8101550:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101554:	4a26      	ldr	r2, [pc, #152]	; (81015f0 <HAL_Init+0xa8>)
 8101556:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 810155a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810155e:	4b24      	ldr	r3, [pc, #144]	; (81015f0 <HAL_Init+0xa8>)
 8101560:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101564:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101568:	603b      	str	r3, [r7, #0]
 810156a:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 810156c:	4b21      	ldr	r3, [pc, #132]	; (81015f4 <HAL_Init+0xac>)
 810156e:	681b      	ldr	r3, [r3, #0]
 8101570:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8101574:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101578:	4a1e      	ldr	r2, [pc, #120]	; (81015f4 <HAL_Init+0xac>)
 810157a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 810157e:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101580:	4b1c      	ldr	r3, [pc, #112]	; (81015f4 <HAL_Init+0xac>)
 8101582:	681b      	ldr	r3, [r3, #0]
 8101584:	4a1b      	ldr	r2, [pc, #108]	; (81015f4 <HAL_Init+0xac>)
 8101586:	f043 0301 	orr.w	r3, r3, #1
 810158a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 810158c:	2003      	movs	r0, #3
 810158e:	f000 f983 	bl	8101898 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8101592:	f002 f863 	bl	810365c <HAL_RCC_GetSysClockFreq>
 8101596:	4602      	mov	r2, r0
 8101598:	4b15      	ldr	r3, [pc, #84]	; (81015f0 <HAL_Init+0xa8>)
 810159a:	699b      	ldr	r3, [r3, #24]
 810159c:	0a1b      	lsrs	r3, r3, #8
 810159e:	f003 030f 	and.w	r3, r3, #15
 81015a2:	4915      	ldr	r1, [pc, #84]	; (81015f8 <HAL_Init+0xb0>)
 81015a4:	5ccb      	ldrb	r3, [r1, r3]
 81015a6:	f003 031f 	and.w	r3, r3, #31
 81015aa:	fa22 f303 	lsr.w	r3, r2, r3
 81015ae:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81015b0:	4b0f      	ldr	r3, [pc, #60]	; (81015f0 <HAL_Init+0xa8>)
 81015b2:	699b      	ldr	r3, [r3, #24]
 81015b4:	f003 030f 	and.w	r3, r3, #15
 81015b8:	4a0f      	ldr	r2, [pc, #60]	; (81015f8 <HAL_Init+0xb0>)
 81015ba:	5cd3      	ldrb	r3, [r2, r3]
 81015bc:	f003 031f 	and.w	r3, r3, #31
 81015c0:	687a      	ldr	r2, [r7, #4]
 81015c2:	fa22 f303 	lsr.w	r3, r2, r3
 81015c6:	4a0d      	ldr	r2, [pc, #52]	; (81015fc <HAL_Init+0xb4>)
 81015c8:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81015ca:	4b0c      	ldr	r3, [pc, #48]	; (81015fc <HAL_Init+0xb4>)
 81015cc:	681b      	ldr	r3, [r3, #0]
 81015ce:	4a0c      	ldr	r2, [pc, #48]	; (8101600 <HAL_Init+0xb8>)
 81015d0:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81015d2:	2000      	movs	r0, #0
 81015d4:	f000 f816 	bl	8101604 <HAL_InitTick>
 81015d8:	4603      	mov	r3, r0
 81015da:	2b00      	cmp	r3, #0
 81015dc:	d001      	beq.n	81015e2 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81015de:	2301      	movs	r3, #1
 81015e0:	e002      	b.n	81015e8 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81015e2:	f7ff fd97 	bl	8101114 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81015e6:	2300      	movs	r3, #0
}
 81015e8:	4618      	mov	r0, r3
 81015ea:	3708      	adds	r7, #8
 81015ec:	46bd      	mov	sp, r7
 81015ee:	bd80      	pop	{r7, pc}
 81015f0:	58024400 	.word	0x58024400
 81015f4:	40024400 	.word	0x40024400
 81015f8:	08107218 	.word	0x08107218
 81015fc:	10000004 	.word	0x10000004
 8101600:	10000000 	.word	0x10000000

08101604 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101604:	b580      	push	{r7, lr}
 8101606:	b082      	sub	sp, #8
 8101608:	af00      	add	r7, sp, #0
 810160a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 810160c:	4b15      	ldr	r3, [pc, #84]	; (8101664 <HAL_InitTick+0x60>)
 810160e:	781b      	ldrb	r3, [r3, #0]
 8101610:	2b00      	cmp	r3, #0
 8101612:	d101      	bne.n	8101618 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101614:	2301      	movs	r3, #1
 8101616:	e021      	b.n	810165c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8101618:	4b13      	ldr	r3, [pc, #76]	; (8101668 <HAL_InitTick+0x64>)
 810161a:	681a      	ldr	r2, [r3, #0]
 810161c:	4b11      	ldr	r3, [pc, #68]	; (8101664 <HAL_InitTick+0x60>)
 810161e:	781b      	ldrb	r3, [r3, #0]
 8101620:	4619      	mov	r1, r3
 8101622:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101626:	fbb3 f3f1 	udiv	r3, r3, r1
 810162a:	fbb2 f3f3 	udiv	r3, r2, r3
 810162e:	4618      	mov	r0, r3
 8101630:	f000 f965 	bl	81018fe <HAL_SYSTICK_Config>
 8101634:	4603      	mov	r3, r0
 8101636:	2b00      	cmp	r3, #0
 8101638:	d001      	beq.n	810163e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 810163a:	2301      	movs	r3, #1
 810163c:	e00e      	b.n	810165c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 810163e:	687b      	ldr	r3, [r7, #4]
 8101640:	2b0f      	cmp	r3, #15
 8101642:	d80a      	bhi.n	810165a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8101644:	2200      	movs	r2, #0
 8101646:	6879      	ldr	r1, [r7, #4]
 8101648:	f04f 30ff 	mov.w	r0, #4294967295
 810164c:	f000 f92f 	bl	81018ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8101650:	4a06      	ldr	r2, [pc, #24]	; (810166c <HAL_InitTick+0x68>)
 8101652:	687b      	ldr	r3, [r7, #4]
 8101654:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8101656:	2300      	movs	r3, #0
 8101658:	e000      	b.n	810165c <HAL_InitTick+0x58>
    return HAL_ERROR;
 810165a:	2301      	movs	r3, #1
}
 810165c:	4618      	mov	r0, r3
 810165e:	3708      	adds	r7, #8
 8101660:	46bd      	mov	sp, r7
 8101662:	bd80      	pop	{r7, pc}
 8101664:	1000000c 	.word	0x1000000c
 8101668:	10000000 	.word	0x10000000
 810166c:	10000008 	.word	0x10000008

08101670 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101670:	b480      	push	{r7}
 8101672:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101674:	4b06      	ldr	r3, [pc, #24]	; (8101690 <HAL_IncTick+0x20>)
 8101676:	781b      	ldrb	r3, [r3, #0]
 8101678:	461a      	mov	r2, r3
 810167a:	4b06      	ldr	r3, [pc, #24]	; (8101694 <HAL_IncTick+0x24>)
 810167c:	681b      	ldr	r3, [r3, #0]
 810167e:	4413      	add	r3, r2
 8101680:	4a04      	ldr	r2, [pc, #16]	; (8101694 <HAL_IncTick+0x24>)
 8101682:	6013      	str	r3, [r2, #0]
}
 8101684:	bf00      	nop
 8101686:	46bd      	mov	sp, r7
 8101688:	f85d 7b04 	ldr.w	r7, [sp], #4
 810168c:	4770      	bx	lr
 810168e:	bf00      	nop
 8101690:	1000000c 	.word	0x1000000c
 8101694:	10000474 	.word	0x10000474

08101698 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101698:	b480      	push	{r7}
 810169a:	af00      	add	r7, sp, #0
  return uwTick;
 810169c:	4b03      	ldr	r3, [pc, #12]	; (81016ac <HAL_GetTick+0x14>)
 810169e:	681b      	ldr	r3, [r3, #0]
}
 81016a0:	4618      	mov	r0, r3
 81016a2:	46bd      	mov	sp, r7
 81016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016a8:	4770      	bx	lr
 81016aa:	bf00      	nop
 81016ac:	10000474 	.word	0x10000474

081016b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 81016b0:	b580      	push	{r7, lr}
 81016b2:	b084      	sub	sp, #16
 81016b4:	af00      	add	r7, sp, #0
 81016b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 81016b8:	f7ff ffee 	bl	8101698 <HAL_GetTick>
 81016bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 81016be:	687b      	ldr	r3, [r7, #4]
 81016c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 81016c2:	68fb      	ldr	r3, [r7, #12]
 81016c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81016c8:	d005      	beq.n	81016d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 81016ca:	4b0a      	ldr	r3, [pc, #40]	; (81016f4 <HAL_Delay+0x44>)
 81016cc:	781b      	ldrb	r3, [r3, #0]
 81016ce:	461a      	mov	r2, r3
 81016d0:	68fb      	ldr	r3, [r7, #12]
 81016d2:	4413      	add	r3, r2
 81016d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 81016d6:	bf00      	nop
 81016d8:	f7ff ffde 	bl	8101698 <HAL_GetTick>
 81016dc:	4602      	mov	r2, r0
 81016de:	68bb      	ldr	r3, [r7, #8]
 81016e0:	1ad3      	subs	r3, r2, r3
 81016e2:	68fa      	ldr	r2, [r7, #12]
 81016e4:	429a      	cmp	r2, r3
 81016e6:	d8f7      	bhi.n	81016d8 <HAL_Delay+0x28>
  {
  }
}
 81016e8:	bf00      	nop
 81016ea:	bf00      	nop
 81016ec:	3710      	adds	r7, #16
 81016ee:	46bd      	mov	sp, r7
 81016f0:	bd80      	pop	{r7, pc}
 81016f2:	bf00      	nop
 81016f4:	1000000c 	.word	0x1000000c

081016f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81016f8:	b480      	push	{r7}
 81016fa:	b085      	sub	sp, #20
 81016fc:	af00      	add	r7, sp, #0
 81016fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101700:	687b      	ldr	r3, [r7, #4]
 8101702:	f003 0307 	and.w	r3, r3, #7
 8101706:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101708:	4b0c      	ldr	r3, [pc, #48]	; (810173c <__NVIC_SetPriorityGrouping+0x44>)
 810170a:	68db      	ldr	r3, [r3, #12]
 810170c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810170e:	68ba      	ldr	r2, [r7, #8]
 8101710:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8101714:	4013      	ands	r3, r2
 8101716:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101718:	68fb      	ldr	r3, [r7, #12]
 810171a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 810171c:	68bb      	ldr	r3, [r7, #8]
 810171e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101720:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8101724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810172a:	4a04      	ldr	r2, [pc, #16]	; (810173c <__NVIC_SetPriorityGrouping+0x44>)
 810172c:	68bb      	ldr	r3, [r7, #8]
 810172e:	60d3      	str	r3, [r2, #12]
}
 8101730:	bf00      	nop
 8101732:	3714      	adds	r7, #20
 8101734:	46bd      	mov	sp, r7
 8101736:	f85d 7b04 	ldr.w	r7, [sp], #4
 810173a:	4770      	bx	lr
 810173c:	e000ed00 	.word	0xe000ed00

08101740 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101740:	b480      	push	{r7}
 8101742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101744:	4b04      	ldr	r3, [pc, #16]	; (8101758 <__NVIC_GetPriorityGrouping+0x18>)
 8101746:	68db      	ldr	r3, [r3, #12]
 8101748:	0a1b      	lsrs	r3, r3, #8
 810174a:	f003 0307 	and.w	r3, r3, #7
}
 810174e:	4618      	mov	r0, r3
 8101750:	46bd      	mov	sp, r7
 8101752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101756:	4770      	bx	lr
 8101758:	e000ed00 	.word	0xe000ed00

0810175c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810175c:	b480      	push	{r7}
 810175e:	b083      	sub	sp, #12
 8101760:	af00      	add	r7, sp, #0
 8101762:	4603      	mov	r3, r0
 8101764:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101766:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810176a:	2b00      	cmp	r3, #0
 810176c:	db0b      	blt.n	8101786 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810176e:	88fb      	ldrh	r3, [r7, #6]
 8101770:	f003 021f 	and.w	r2, r3, #31
 8101774:	4907      	ldr	r1, [pc, #28]	; (8101794 <__NVIC_EnableIRQ+0x38>)
 8101776:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810177a:	095b      	lsrs	r3, r3, #5
 810177c:	2001      	movs	r0, #1
 810177e:	fa00 f202 	lsl.w	r2, r0, r2
 8101782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8101786:	bf00      	nop
 8101788:	370c      	adds	r7, #12
 810178a:	46bd      	mov	sp, r7
 810178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101790:	4770      	bx	lr
 8101792:	bf00      	nop
 8101794:	e000e100 	.word	0xe000e100

08101798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101798:	b480      	push	{r7}
 810179a:	b083      	sub	sp, #12
 810179c:	af00      	add	r7, sp, #0
 810179e:	4603      	mov	r3, r0
 81017a0:	6039      	str	r1, [r7, #0]
 81017a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81017a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81017a8:	2b00      	cmp	r3, #0
 81017aa:	db0a      	blt.n	81017c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81017ac:	683b      	ldr	r3, [r7, #0]
 81017ae:	b2da      	uxtb	r2, r3
 81017b0:	490c      	ldr	r1, [pc, #48]	; (81017e4 <__NVIC_SetPriority+0x4c>)
 81017b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81017b6:	0112      	lsls	r2, r2, #4
 81017b8:	b2d2      	uxtb	r2, r2
 81017ba:	440b      	add	r3, r1
 81017bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81017c0:	e00a      	b.n	81017d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81017c2:	683b      	ldr	r3, [r7, #0]
 81017c4:	b2da      	uxtb	r2, r3
 81017c6:	4908      	ldr	r1, [pc, #32]	; (81017e8 <__NVIC_SetPriority+0x50>)
 81017c8:	88fb      	ldrh	r3, [r7, #6]
 81017ca:	f003 030f 	and.w	r3, r3, #15
 81017ce:	3b04      	subs	r3, #4
 81017d0:	0112      	lsls	r2, r2, #4
 81017d2:	b2d2      	uxtb	r2, r2
 81017d4:	440b      	add	r3, r1
 81017d6:	761a      	strb	r2, [r3, #24]
}
 81017d8:	bf00      	nop
 81017da:	370c      	adds	r7, #12
 81017dc:	46bd      	mov	sp, r7
 81017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017e2:	4770      	bx	lr
 81017e4:	e000e100 	.word	0xe000e100
 81017e8:	e000ed00 	.word	0xe000ed00

081017ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81017ec:	b480      	push	{r7}
 81017ee:	b089      	sub	sp, #36	; 0x24
 81017f0:	af00      	add	r7, sp, #0
 81017f2:	60f8      	str	r0, [r7, #12]
 81017f4:	60b9      	str	r1, [r7, #8]
 81017f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81017f8:	68fb      	ldr	r3, [r7, #12]
 81017fa:	f003 0307 	and.w	r3, r3, #7
 81017fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101800:	69fb      	ldr	r3, [r7, #28]
 8101802:	f1c3 0307 	rsb	r3, r3, #7
 8101806:	2b04      	cmp	r3, #4
 8101808:	bf28      	it	cs
 810180a:	2304      	movcs	r3, #4
 810180c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810180e:	69fb      	ldr	r3, [r7, #28]
 8101810:	3304      	adds	r3, #4
 8101812:	2b06      	cmp	r3, #6
 8101814:	d902      	bls.n	810181c <NVIC_EncodePriority+0x30>
 8101816:	69fb      	ldr	r3, [r7, #28]
 8101818:	3b03      	subs	r3, #3
 810181a:	e000      	b.n	810181e <NVIC_EncodePriority+0x32>
 810181c:	2300      	movs	r3, #0
 810181e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101820:	f04f 32ff 	mov.w	r2, #4294967295
 8101824:	69bb      	ldr	r3, [r7, #24]
 8101826:	fa02 f303 	lsl.w	r3, r2, r3
 810182a:	43da      	mvns	r2, r3
 810182c:	68bb      	ldr	r3, [r7, #8]
 810182e:	401a      	ands	r2, r3
 8101830:	697b      	ldr	r3, [r7, #20]
 8101832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101834:	f04f 31ff 	mov.w	r1, #4294967295
 8101838:	697b      	ldr	r3, [r7, #20]
 810183a:	fa01 f303 	lsl.w	r3, r1, r3
 810183e:	43d9      	mvns	r1, r3
 8101840:	687b      	ldr	r3, [r7, #4]
 8101842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101844:	4313      	orrs	r3, r2
         );
}
 8101846:	4618      	mov	r0, r3
 8101848:	3724      	adds	r7, #36	; 0x24
 810184a:	46bd      	mov	sp, r7
 810184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101850:	4770      	bx	lr
	...

08101854 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8101854:	b580      	push	{r7, lr}
 8101856:	b082      	sub	sp, #8
 8101858:	af00      	add	r7, sp, #0
 810185a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 810185c:	687b      	ldr	r3, [r7, #4]
 810185e:	3b01      	subs	r3, #1
 8101860:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8101864:	d301      	bcc.n	810186a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8101866:	2301      	movs	r3, #1
 8101868:	e00f      	b.n	810188a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 810186a:	4a0a      	ldr	r2, [pc, #40]	; (8101894 <SysTick_Config+0x40>)
 810186c:	687b      	ldr	r3, [r7, #4]
 810186e:	3b01      	subs	r3, #1
 8101870:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8101872:	210f      	movs	r1, #15
 8101874:	f04f 30ff 	mov.w	r0, #4294967295
 8101878:	f7ff ff8e 	bl	8101798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 810187c:	4b05      	ldr	r3, [pc, #20]	; (8101894 <SysTick_Config+0x40>)
 810187e:	2200      	movs	r2, #0
 8101880:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8101882:	4b04      	ldr	r3, [pc, #16]	; (8101894 <SysTick_Config+0x40>)
 8101884:	2207      	movs	r2, #7
 8101886:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8101888:	2300      	movs	r3, #0
}
 810188a:	4618      	mov	r0, r3
 810188c:	3708      	adds	r7, #8
 810188e:	46bd      	mov	sp, r7
 8101890:	bd80      	pop	{r7, pc}
 8101892:	bf00      	nop
 8101894:	e000e010 	.word	0xe000e010

08101898 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101898:	b580      	push	{r7, lr}
 810189a:	b082      	sub	sp, #8
 810189c:	af00      	add	r7, sp, #0
 810189e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81018a0:	6878      	ldr	r0, [r7, #4]
 81018a2:	f7ff ff29 	bl	81016f8 <__NVIC_SetPriorityGrouping>
}
 81018a6:	bf00      	nop
 81018a8:	3708      	adds	r7, #8
 81018aa:	46bd      	mov	sp, r7
 81018ac:	bd80      	pop	{r7, pc}

081018ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81018ae:	b580      	push	{r7, lr}
 81018b0:	b086      	sub	sp, #24
 81018b2:	af00      	add	r7, sp, #0
 81018b4:	4603      	mov	r3, r0
 81018b6:	60b9      	str	r1, [r7, #8]
 81018b8:	607a      	str	r2, [r7, #4]
 81018ba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81018bc:	f7ff ff40 	bl	8101740 <__NVIC_GetPriorityGrouping>
 81018c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81018c2:	687a      	ldr	r2, [r7, #4]
 81018c4:	68b9      	ldr	r1, [r7, #8]
 81018c6:	6978      	ldr	r0, [r7, #20]
 81018c8:	f7ff ff90 	bl	81017ec <NVIC_EncodePriority>
 81018cc:	4602      	mov	r2, r0
 81018ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81018d2:	4611      	mov	r1, r2
 81018d4:	4618      	mov	r0, r3
 81018d6:	f7ff ff5f 	bl	8101798 <__NVIC_SetPriority>
}
 81018da:	bf00      	nop
 81018dc:	3718      	adds	r7, #24
 81018de:	46bd      	mov	sp, r7
 81018e0:	bd80      	pop	{r7, pc}

081018e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81018e2:	b580      	push	{r7, lr}
 81018e4:	b082      	sub	sp, #8
 81018e6:	af00      	add	r7, sp, #0
 81018e8:	4603      	mov	r3, r0
 81018ea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81018ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81018f0:	4618      	mov	r0, r3
 81018f2:	f7ff ff33 	bl	810175c <__NVIC_EnableIRQ>
}
 81018f6:	bf00      	nop
 81018f8:	3708      	adds	r7, #8
 81018fa:	46bd      	mov	sp, r7
 81018fc:	bd80      	pop	{r7, pc}

081018fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81018fe:	b580      	push	{r7, lr}
 8101900:	b082      	sub	sp, #8
 8101902:	af00      	add	r7, sp, #0
 8101904:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8101906:	6878      	ldr	r0, [r7, #4]
 8101908:	f7ff ffa4 	bl	8101854 <SysTick_Config>
 810190c:	4603      	mov	r3, r0
}
 810190e:	4618      	mov	r0, r3
 8101910:	3708      	adds	r7, #8
 8101912:	46bd      	mov	sp, r7
 8101914:	bd80      	pop	{r7, pc}
	...

08101918 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101918:	b480      	push	{r7}
 810191a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 810191c:	4b07      	ldr	r3, [pc, #28]	; (810193c <HAL_GetCurrentCPUID+0x24>)
 810191e:	681b      	ldr	r3, [r3, #0]
 8101920:	091b      	lsrs	r3, r3, #4
 8101922:	f003 030f 	and.w	r3, r3, #15
 8101926:	2b07      	cmp	r3, #7
 8101928:	d101      	bne.n	810192e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810192a:	2303      	movs	r3, #3
 810192c:	e000      	b.n	8101930 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810192e:	2301      	movs	r3, #1
  }
}
 8101930:	4618      	mov	r0, r3
 8101932:	46bd      	mov	sp, r7
 8101934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101938:	4770      	bx	lr
 810193a:	bf00      	nop
 810193c:	e000ed00 	.word	0xe000ed00

08101940 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8101940:	b580      	push	{r7, lr}
 8101942:	b08a      	sub	sp, #40	; 0x28
 8101944:	af00      	add	r7, sp, #0
 8101946:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8101948:	2300      	movs	r3, #0
 810194a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 810194c:	4b67      	ldr	r3, [pc, #412]	; (8101aec <HAL_DMA_IRQHandler+0x1ac>)
 810194e:	681b      	ldr	r3, [r3, #0]
 8101950:	4a67      	ldr	r2, [pc, #412]	; (8101af0 <HAL_DMA_IRQHandler+0x1b0>)
 8101952:	fba2 2303 	umull	r2, r3, r2, r3
 8101956:	0a9b      	lsrs	r3, r3, #10
 8101958:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 810195a:	687b      	ldr	r3, [r7, #4]
 810195c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810195e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8101960:	687b      	ldr	r3, [r7, #4]
 8101962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101964:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8101966:	6a3b      	ldr	r3, [r7, #32]
 8101968:	681b      	ldr	r3, [r3, #0]
 810196a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 810196c:	69fb      	ldr	r3, [r7, #28]
 810196e:	681b      	ldr	r3, [r3, #0]
 8101970:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8101972:	687b      	ldr	r3, [r7, #4]
 8101974:	681b      	ldr	r3, [r3, #0]
 8101976:	4a5f      	ldr	r2, [pc, #380]	; (8101af4 <HAL_DMA_IRQHandler+0x1b4>)
 8101978:	4293      	cmp	r3, r2
 810197a:	d04a      	beq.n	8101a12 <HAL_DMA_IRQHandler+0xd2>
 810197c:	687b      	ldr	r3, [r7, #4]
 810197e:	681b      	ldr	r3, [r3, #0]
 8101980:	4a5d      	ldr	r2, [pc, #372]	; (8101af8 <HAL_DMA_IRQHandler+0x1b8>)
 8101982:	4293      	cmp	r3, r2
 8101984:	d045      	beq.n	8101a12 <HAL_DMA_IRQHandler+0xd2>
 8101986:	687b      	ldr	r3, [r7, #4]
 8101988:	681b      	ldr	r3, [r3, #0]
 810198a:	4a5c      	ldr	r2, [pc, #368]	; (8101afc <HAL_DMA_IRQHandler+0x1bc>)
 810198c:	4293      	cmp	r3, r2
 810198e:	d040      	beq.n	8101a12 <HAL_DMA_IRQHandler+0xd2>
 8101990:	687b      	ldr	r3, [r7, #4]
 8101992:	681b      	ldr	r3, [r3, #0]
 8101994:	4a5a      	ldr	r2, [pc, #360]	; (8101b00 <HAL_DMA_IRQHandler+0x1c0>)
 8101996:	4293      	cmp	r3, r2
 8101998:	d03b      	beq.n	8101a12 <HAL_DMA_IRQHandler+0xd2>
 810199a:	687b      	ldr	r3, [r7, #4]
 810199c:	681b      	ldr	r3, [r3, #0]
 810199e:	4a59      	ldr	r2, [pc, #356]	; (8101b04 <HAL_DMA_IRQHandler+0x1c4>)
 81019a0:	4293      	cmp	r3, r2
 81019a2:	d036      	beq.n	8101a12 <HAL_DMA_IRQHandler+0xd2>
 81019a4:	687b      	ldr	r3, [r7, #4]
 81019a6:	681b      	ldr	r3, [r3, #0]
 81019a8:	4a57      	ldr	r2, [pc, #348]	; (8101b08 <HAL_DMA_IRQHandler+0x1c8>)
 81019aa:	4293      	cmp	r3, r2
 81019ac:	d031      	beq.n	8101a12 <HAL_DMA_IRQHandler+0xd2>
 81019ae:	687b      	ldr	r3, [r7, #4]
 81019b0:	681b      	ldr	r3, [r3, #0]
 81019b2:	4a56      	ldr	r2, [pc, #344]	; (8101b0c <HAL_DMA_IRQHandler+0x1cc>)
 81019b4:	4293      	cmp	r3, r2
 81019b6:	d02c      	beq.n	8101a12 <HAL_DMA_IRQHandler+0xd2>
 81019b8:	687b      	ldr	r3, [r7, #4]
 81019ba:	681b      	ldr	r3, [r3, #0]
 81019bc:	4a54      	ldr	r2, [pc, #336]	; (8101b10 <HAL_DMA_IRQHandler+0x1d0>)
 81019be:	4293      	cmp	r3, r2
 81019c0:	d027      	beq.n	8101a12 <HAL_DMA_IRQHandler+0xd2>
 81019c2:	687b      	ldr	r3, [r7, #4]
 81019c4:	681b      	ldr	r3, [r3, #0]
 81019c6:	4a53      	ldr	r2, [pc, #332]	; (8101b14 <HAL_DMA_IRQHandler+0x1d4>)
 81019c8:	4293      	cmp	r3, r2
 81019ca:	d022      	beq.n	8101a12 <HAL_DMA_IRQHandler+0xd2>
 81019cc:	687b      	ldr	r3, [r7, #4]
 81019ce:	681b      	ldr	r3, [r3, #0]
 81019d0:	4a51      	ldr	r2, [pc, #324]	; (8101b18 <HAL_DMA_IRQHandler+0x1d8>)
 81019d2:	4293      	cmp	r3, r2
 81019d4:	d01d      	beq.n	8101a12 <HAL_DMA_IRQHandler+0xd2>
 81019d6:	687b      	ldr	r3, [r7, #4]
 81019d8:	681b      	ldr	r3, [r3, #0]
 81019da:	4a50      	ldr	r2, [pc, #320]	; (8101b1c <HAL_DMA_IRQHandler+0x1dc>)
 81019dc:	4293      	cmp	r3, r2
 81019de:	d018      	beq.n	8101a12 <HAL_DMA_IRQHandler+0xd2>
 81019e0:	687b      	ldr	r3, [r7, #4]
 81019e2:	681b      	ldr	r3, [r3, #0]
 81019e4:	4a4e      	ldr	r2, [pc, #312]	; (8101b20 <HAL_DMA_IRQHandler+0x1e0>)
 81019e6:	4293      	cmp	r3, r2
 81019e8:	d013      	beq.n	8101a12 <HAL_DMA_IRQHandler+0xd2>
 81019ea:	687b      	ldr	r3, [r7, #4]
 81019ec:	681b      	ldr	r3, [r3, #0]
 81019ee:	4a4d      	ldr	r2, [pc, #308]	; (8101b24 <HAL_DMA_IRQHandler+0x1e4>)
 81019f0:	4293      	cmp	r3, r2
 81019f2:	d00e      	beq.n	8101a12 <HAL_DMA_IRQHandler+0xd2>
 81019f4:	687b      	ldr	r3, [r7, #4]
 81019f6:	681b      	ldr	r3, [r3, #0]
 81019f8:	4a4b      	ldr	r2, [pc, #300]	; (8101b28 <HAL_DMA_IRQHandler+0x1e8>)
 81019fa:	4293      	cmp	r3, r2
 81019fc:	d009      	beq.n	8101a12 <HAL_DMA_IRQHandler+0xd2>
 81019fe:	687b      	ldr	r3, [r7, #4]
 8101a00:	681b      	ldr	r3, [r3, #0]
 8101a02:	4a4a      	ldr	r2, [pc, #296]	; (8101b2c <HAL_DMA_IRQHandler+0x1ec>)
 8101a04:	4293      	cmp	r3, r2
 8101a06:	d004      	beq.n	8101a12 <HAL_DMA_IRQHandler+0xd2>
 8101a08:	687b      	ldr	r3, [r7, #4]
 8101a0a:	681b      	ldr	r3, [r3, #0]
 8101a0c:	4a48      	ldr	r2, [pc, #288]	; (8101b30 <HAL_DMA_IRQHandler+0x1f0>)
 8101a0e:	4293      	cmp	r3, r2
 8101a10:	d101      	bne.n	8101a16 <HAL_DMA_IRQHandler+0xd6>
 8101a12:	2301      	movs	r3, #1
 8101a14:	e000      	b.n	8101a18 <HAL_DMA_IRQHandler+0xd8>
 8101a16:	2300      	movs	r3, #0
 8101a18:	2b00      	cmp	r3, #0
 8101a1a:	f000 842b 	beq.w	8102274 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8101a1e:	687b      	ldr	r3, [r7, #4]
 8101a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101a22:	f003 031f 	and.w	r3, r3, #31
 8101a26:	2208      	movs	r2, #8
 8101a28:	409a      	lsls	r2, r3
 8101a2a:	69bb      	ldr	r3, [r7, #24]
 8101a2c:	4013      	ands	r3, r2
 8101a2e:	2b00      	cmp	r3, #0
 8101a30:	f000 80a2 	beq.w	8101b78 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8101a34:	687b      	ldr	r3, [r7, #4]
 8101a36:	681b      	ldr	r3, [r3, #0]
 8101a38:	4a2e      	ldr	r2, [pc, #184]	; (8101af4 <HAL_DMA_IRQHandler+0x1b4>)
 8101a3a:	4293      	cmp	r3, r2
 8101a3c:	d04a      	beq.n	8101ad4 <HAL_DMA_IRQHandler+0x194>
 8101a3e:	687b      	ldr	r3, [r7, #4]
 8101a40:	681b      	ldr	r3, [r3, #0]
 8101a42:	4a2d      	ldr	r2, [pc, #180]	; (8101af8 <HAL_DMA_IRQHandler+0x1b8>)
 8101a44:	4293      	cmp	r3, r2
 8101a46:	d045      	beq.n	8101ad4 <HAL_DMA_IRQHandler+0x194>
 8101a48:	687b      	ldr	r3, [r7, #4]
 8101a4a:	681b      	ldr	r3, [r3, #0]
 8101a4c:	4a2b      	ldr	r2, [pc, #172]	; (8101afc <HAL_DMA_IRQHandler+0x1bc>)
 8101a4e:	4293      	cmp	r3, r2
 8101a50:	d040      	beq.n	8101ad4 <HAL_DMA_IRQHandler+0x194>
 8101a52:	687b      	ldr	r3, [r7, #4]
 8101a54:	681b      	ldr	r3, [r3, #0]
 8101a56:	4a2a      	ldr	r2, [pc, #168]	; (8101b00 <HAL_DMA_IRQHandler+0x1c0>)
 8101a58:	4293      	cmp	r3, r2
 8101a5a:	d03b      	beq.n	8101ad4 <HAL_DMA_IRQHandler+0x194>
 8101a5c:	687b      	ldr	r3, [r7, #4]
 8101a5e:	681b      	ldr	r3, [r3, #0]
 8101a60:	4a28      	ldr	r2, [pc, #160]	; (8101b04 <HAL_DMA_IRQHandler+0x1c4>)
 8101a62:	4293      	cmp	r3, r2
 8101a64:	d036      	beq.n	8101ad4 <HAL_DMA_IRQHandler+0x194>
 8101a66:	687b      	ldr	r3, [r7, #4]
 8101a68:	681b      	ldr	r3, [r3, #0]
 8101a6a:	4a27      	ldr	r2, [pc, #156]	; (8101b08 <HAL_DMA_IRQHandler+0x1c8>)
 8101a6c:	4293      	cmp	r3, r2
 8101a6e:	d031      	beq.n	8101ad4 <HAL_DMA_IRQHandler+0x194>
 8101a70:	687b      	ldr	r3, [r7, #4]
 8101a72:	681b      	ldr	r3, [r3, #0]
 8101a74:	4a25      	ldr	r2, [pc, #148]	; (8101b0c <HAL_DMA_IRQHandler+0x1cc>)
 8101a76:	4293      	cmp	r3, r2
 8101a78:	d02c      	beq.n	8101ad4 <HAL_DMA_IRQHandler+0x194>
 8101a7a:	687b      	ldr	r3, [r7, #4]
 8101a7c:	681b      	ldr	r3, [r3, #0]
 8101a7e:	4a24      	ldr	r2, [pc, #144]	; (8101b10 <HAL_DMA_IRQHandler+0x1d0>)
 8101a80:	4293      	cmp	r3, r2
 8101a82:	d027      	beq.n	8101ad4 <HAL_DMA_IRQHandler+0x194>
 8101a84:	687b      	ldr	r3, [r7, #4]
 8101a86:	681b      	ldr	r3, [r3, #0]
 8101a88:	4a22      	ldr	r2, [pc, #136]	; (8101b14 <HAL_DMA_IRQHandler+0x1d4>)
 8101a8a:	4293      	cmp	r3, r2
 8101a8c:	d022      	beq.n	8101ad4 <HAL_DMA_IRQHandler+0x194>
 8101a8e:	687b      	ldr	r3, [r7, #4]
 8101a90:	681b      	ldr	r3, [r3, #0]
 8101a92:	4a21      	ldr	r2, [pc, #132]	; (8101b18 <HAL_DMA_IRQHandler+0x1d8>)
 8101a94:	4293      	cmp	r3, r2
 8101a96:	d01d      	beq.n	8101ad4 <HAL_DMA_IRQHandler+0x194>
 8101a98:	687b      	ldr	r3, [r7, #4]
 8101a9a:	681b      	ldr	r3, [r3, #0]
 8101a9c:	4a1f      	ldr	r2, [pc, #124]	; (8101b1c <HAL_DMA_IRQHandler+0x1dc>)
 8101a9e:	4293      	cmp	r3, r2
 8101aa0:	d018      	beq.n	8101ad4 <HAL_DMA_IRQHandler+0x194>
 8101aa2:	687b      	ldr	r3, [r7, #4]
 8101aa4:	681b      	ldr	r3, [r3, #0]
 8101aa6:	4a1e      	ldr	r2, [pc, #120]	; (8101b20 <HAL_DMA_IRQHandler+0x1e0>)
 8101aa8:	4293      	cmp	r3, r2
 8101aaa:	d013      	beq.n	8101ad4 <HAL_DMA_IRQHandler+0x194>
 8101aac:	687b      	ldr	r3, [r7, #4]
 8101aae:	681b      	ldr	r3, [r3, #0]
 8101ab0:	4a1c      	ldr	r2, [pc, #112]	; (8101b24 <HAL_DMA_IRQHandler+0x1e4>)
 8101ab2:	4293      	cmp	r3, r2
 8101ab4:	d00e      	beq.n	8101ad4 <HAL_DMA_IRQHandler+0x194>
 8101ab6:	687b      	ldr	r3, [r7, #4]
 8101ab8:	681b      	ldr	r3, [r3, #0]
 8101aba:	4a1b      	ldr	r2, [pc, #108]	; (8101b28 <HAL_DMA_IRQHandler+0x1e8>)
 8101abc:	4293      	cmp	r3, r2
 8101abe:	d009      	beq.n	8101ad4 <HAL_DMA_IRQHandler+0x194>
 8101ac0:	687b      	ldr	r3, [r7, #4]
 8101ac2:	681b      	ldr	r3, [r3, #0]
 8101ac4:	4a19      	ldr	r2, [pc, #100]	; (8101b2c <HAL_DMA_IRQHandler+0x1ec>)
 8101ac6:	4293      	cmp	r3, r2
 8101ac8:	d004      	beq.n	8101ad4 <HAL_DMA_IRQHandler+0x194>
 8101aca:	687b      	ldr	r3, [r7, #4]
 8101acc:	681b      	ldr	r3, [r3, #0]
 8101ace:	4a18      	ldr	r2, [pc, #96]	; (8101b30 <HAL_DMA_IRQHandler+0x1f0>)
 8101ad0:	4293      	cmp	r3, r2
 8101ad2:	d12f      	bne.n	8101b34 <HAL_DMA_IRQHandler+0x1f4>
 8101ad4:	687b      	ldr	r3, [r7, #4]
 8101ad6:	681b      	ldr	r3, [r3, #0]
 8101ad8:	681b      	ldr	r3, [r3, #0]
 8101ada:	f003 0304 	and.w	r3, r3, #4
 8101ade:	2b00      	cmp	r3, #0
 8101ae0:	bf14      	ite	ne
 8101ae2:	2301      	movne	r3, #1
 8101ae4:	2300      	moveq	r3, #0
 8101ae6:	b2db      	uxtb	r3, r3
 8101ae8:	e02e      	b.n	8101b48 <HAL_DMA_IRQHandler+0x208>
 8101aea:	bf00      	nop
 8101aec:	10000000 	.word	0x10000000
 8101af0:	1b4e81b5 	.word	0x1b4e81b5
 8101af4:	40020010 	.word	0x40020010
 8101af8:	40020028 	.word	0x40020028
 8101afc:	40020040 	.word	0x40020040
 8101b00:	40020058 	.word	0x40020058
 8101b04:	40020070 	.word	0x40020070
 8101b08:	40020088 	.word	0x40020088
 8101b0c:	400200a0 	.word	0x400200a0
 8101b10:	400200b8 	.word	0x400200b8
 8101b14:	40020410 	.word	0x40020410
 8101b18:	40020428 	.word	0x40020428
 8101b1c:	40020440 	.word	0x40020440
 8101b20:	40020458 	.word	0x40020458
 8101b24:	40020470 	.word	0x40020470
 8101b28:	40020488 	.word	0x40020488
 8101b2c:	400204a0 	.word	0x400204a0
 8101b30:	400204b8 	.word	0x400204b8
 8101b34:	687b      	ldr	r3, [r7, #4]
 8101b36:	681b      	ldr	r3, [r3, #0]
 8101b38:	681b      	ldr	r3, [r3, #0]
 8101b3a:	f003 0308 	and.w	r3, r3, #8
 8101b3e:	2b00      	cmp	r3, #0
 8101b40:	bf14      	ite	ne
 8101b42:	2301      	movne	r3, #1
 8101b44:	2300      	moveq	r3, #0
 8101b46:	b2db      	uxtb	r3, r3
 8101b48:	2b00      	cmp	r3, #0
 8101b4a:	d015      	beq.n	8101b78 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8101b4c:	687b      	ldr	r3, [r7, #4]
 8101b4e:	681b      	ldr	r3, [r3, #0]
 8101b50:	681a      	ldr	r2, [r3, #0]
 8101b52:	687b      	ldr	r3, [r7, #4]
 8101b54:	681b      	ldr	r3, [r3, #0]
 8101b56:	f022 0204 	bic.w	r2, r2, #4
 8101b5a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8101b5c:	687b      	ldr	r3, [r7, #4]
 8101b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101b60:	f003 031f 	and.w	r3, r3, #31
 8101b64:	2208      	movs	r2, #8
 8101b66:	409a      	lsls	r2, r3
 8101b68:	6a3b      	ldr	r3, [r7, #32]
 8101b6a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8101b6c:	687b      	ldr	r3, [r7, #4]
 8101b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101b70:	f043 0201 	orr.w	r2, r3, #1
 8101b74:	687b      	ldr	r3, [r7, #4]
 8101b76:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8101b78:	687b      	ldr	r3, [r7, #4]
 8101b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101b7c:	f003 031f 	and.w	r3, r3, #31
 8101b80:	69ba      	ldr	r2, [r7, #24]
 8101b82:	fa22 f303 	lsr.w	r3, r2, r3
 8101b86:	f003 0301 	and.w	r3, r3, #1
 8101b8a:	2b00      	cmp	r3, #0
 8101b8c:	d06e      	beq.n	8101c6c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8101b8e:	687b      	ldr	r3, [r7, #4]
 8101b90:	681b      	ldr	r3, [r3, #0]
 8101b92:	4a69      	ldr	r2, [pc, #420]	; (8101d38 <HAL_DMA_IRQHandler+0x3f8>)
 8101b94:	4293      	cmp	r3, r2
 8101b96:	d04a      	beq.n	8101c2e <HAL_DMA_IRQHandler+0x2ee>
 8101b98:	687b      	ldr	r3, [r7, #4]
 8101b9a:	681b      	ldr	r3, [r3, #0]
 8101b9c:	4a67      	ldr	r2, [pc, #412]	; (8101d3c <HAL_DMA_IRQHandler+0x3fc>)
 8101b9e:	4293      	cmp	r3, r2
 8101ba0:	d045      	beq.n	8101c2e <HAL_DMA_IRQHandler+0x2ee>
 8101ba2:	687b      	ldr	r3, [r7, #4]
 8101ba4:	681b      	ldr	r3, [r3, #0]
 8101ba6:	4a66      	ldr	r2, [pc, #408]	; (8101d40 <HAL_DMA_IRQHandler+0x400>)
 8101ba8:	4293      	cmp	r3, r2
 8101baa:	d040      	beq.n	8101c2e <HAL_DMA_IRQHandler+0x2ee>
 8101bac:	687b      	ldr	r3, [r7, #4]
 8101bae:	681b      	ldr	r3, [r3, #0]
 8101bb0:	4a64      	ldr	r2, [pc, #400]	; (8101d44 <HAL_DMA_IRQHandler+0x404>)
 8101bb2:	4293      	cmp	r3, r2
 8101bb4:	d03b      	beq.n	8101c2e <HAL_DMA_IRQHandler+0x2ee>
 8101bb6:	687b      	ldr	r3, [r7, #4]
 8101bb8:	681b      	ldr	r3, [r3, #0]
 8101bba:	4a63      	ldr	r2, [pc, #396]	; (8101d48 <HAL_DMA_IRQHandler+0x408>)
 8101bbc:	4293      	cmp	r3, r2
 8101bbe:	d036      	beq.n	8101c2e <HAL_DMA_IRQHandler+0x2ee>
 8101bc0:	687b      	ldr	r3, [r7, #4]
 8101bc2:	681b      	ldr	r3, [r3, #0]
 8101bc4:	4a61      	ldr	r2, [pc, #388]	; (8101d4c <HAL_DMA_IRQHandler+0x40c>)
 8101bc6:	4293      	cmp	r3, r2
 8101bc8:	d031      	beq.n	8101c2e <HAL_DMA_IRQHandler+0x2ee>
 8101bca:	687b      	ldr	r3, [r7, #4]
 8101bcc:	681b      	ldr	r3, [r3, #0]
 8101bce:	4a60      	ldr	r2, [pc, #384]	; (8101d50 <HAL_DMA_IRQHandler+0x410>)
 8101bd0:	4293      	cmp	r3, r2
 8101bd2:	d02c      	beq.n	8101c2e <HAL_DMA_IRQHandler+0x2ee>
 8101bd4:	687b      	ldr	r3, [r7, #4]
 8101bd6:	681b      	ldr	r3, [r3, #0]
 8101bd8:	4a5e      	ldr	r2, [pc, #376]	; (8101d54 <HAL_DMA_IRQHandler+0x414>)
 8101bda:	4293      	cmp	r3, r2
 8101bdc:	d027      	beq.n	8101c2e <HAL_DMA_IRQHandler+0x2ee>
 8101bde:	687b      	ldr	r3, [r7, #4]
 8101be0:	681b      	ldr	r3, [r3, #0]
 8101be2:	4a5d      	ldr	r2, [pc, #372]	; (8101d58 <HAL_DMA_IRQHandler+0x418>)
 8101be4:	4293      	cmp	r3, r2
 8101be6:	d022      	beq.n	8101c2e <HAL_DMA_IRQHandler+0x2ee>
 8101be8:	687b      	ldr	r3, [r7, #4]
 8101bea:	681b      	ldr	r3, [r3, #0]
 8101bec:	4a5b      	ldr	r2, [pc, #364]	; (8101d5c <HAL_DMA_IRQHandler+0x41c>)
 8101bee:	4293      	cmp	r3, r2
 8101bf0:	d01d      	beq.n	8101c2e <HAL_DMA_IRQHandler+0x2ee>
 8101bf2:	687b      	ldr	r3, [r7, #4]
 8101bf4:	681b      	ldr	r3, [r3, #0]
 8101bf6:	4a5a      	ldr	r2, [pc, #360]	; (8101d60 <HAL_DMA_IRQHandler+0x420>)
 8101bf8:	4293      	cmp	r3, r2
 8101bfa:	d018      	beq.n	8101c2e <HAL_DMA_IRQHandler+0x2ee>
 8101bfc:	687b      	ldr	r3, [r7, #4]
 8101bfe:	681b      	ldr	r3, [r3, #0]
 8101c00:	4a58      	ldr	r2, [pc, #352]	; (8101d64 <HAL_DMA_IRQHandler+0x424>)
 8101c02:	4293      	cmp	r3, r2
 8101c04:	d013      	beq.n	8101c2e <HAL_DMA_IRQHandler+0x2ee>
 8101c06:	687b      	ldr	r3, [r7, #4]
 8101c08:	681b      	ldr	r3, [r3, #0]
 8101c0a:	4a57      	ldr	r2, [pc, #348]	; (8101d68 <HAL_DMA_IRQHandler+0x428>)
 8101c0c:	4293      	cmp	r3, r2
 8101c0e:	d00e      	beq.n	8101c2e <HAL_DMA_IRQHandler+0x2ee>
 8101c10:	687b      	ldr	r3, [r7, #4]
 8101c12:	681b      	ldr	r3, [r3, #0]
 8101c14:	4a55      	ldr	r2, [pc, #340]	; (8101d6c <HAL_DMA_IRQHandler+0x42c>)
 8101c16:	4293      	cmp	r3, r2
 8101c18:	d009      	beq.n	8101c2e <HAL_DMA_IRQHandler+0x2ee>
 8101c1a:	687b      	ldr	r3, [r7, #4]
 8101c1c:	681b      	ldr	r3, [r3, #0]
 8101c1e:	4a54      	ldr	r2, [pc, #336]	; (8101d70 <HAL_DMA_IRQHandler+0x430>)
 8101c20:	4293      	cmp	r3, r2
 8101c22:	d004      	beq.n	8101c2e <HAL_DMA_IRQHandler+0x2ee>
 8101c24:	687b      	ldr	r3, [r7, #4]
 8101c26:	681b      	ldr	r3, [r3, #0]
 8101c28:	4a52      	ldr	r2, [pc, #328]	; (8101d74 <HAL_DMA_IRQHandler+0x434>)
 8101c2a:	4293      	cmp	r3, r2
 8101c2c:	d10a      	bne.n	8101c44 <HAL_DMA_IRQHandler+0x304>
 8101c2e:	687b      	ldr	r3, [r7, #4]
 8101c30:	681b      	ldr	r3, [r3, #0]
 8101c32:	695b      	ldr	r3, [r3, #20]
 8101c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101c38:	2b00      	cmp	r3, #0
 8101c3a:	bf14      	ite	ne
 8101c3c:	2301      	movne	r3, #1
 8101c3e:	2300      	moveq	r3, #0
 8101c40:	b2db      	uxtb	r3, r3
 8101c42:	e003      	b.n	8101c4c <HAL_DMA_IRQHandler+0x30c>
 8101c44:	687b      	ldr	r3, [r7, #4]
 8101c46:	681b      	ldr	r3, [r3, #0]
 8101c48:	681b      	ldr	r3, [r3, #0]
 8101c4a:	2300      	movs	r3, #0
 8101c4c:	2b00      	cmp	r3, #0
 8101c4e:	d00d      	beq.n	8101c6c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8101c50:	687b      	ldr	r3, [r7, #4]
 8101c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101c54:	f003 031f 	and.w	r3, r3, #31
 8101c58:	2201      	movs	r2, #1
 8101c5a:	409a      	lsls	r2, r3
 8101c5c:	6a3b      	ldr	r3, [r7, #32]
 8101c5e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8101c60:	687b      	ldr	r3, [r7, #4]
 8101c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101c64:	f043 0202 	orr.w	r2, r3, #2
 8101c68:	687b      	ldr	r3, [r7, #4]
 8101c6a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8101c6c:	687b      	ldr	r3, [r7, #4]
 8101c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101c70:	f003 031f 	and.w	r3, r3, #31
 8101c74:	2204      	movs	r2, #4
 8101c76:	409a      	lsls	r2, r3
 8101c78:	69bb      	ldr	r3, [r7, #24]
 8101c7a:	4013      	ands	r3, r2
 8101c7c:	2b00      	cmp	r3, #0
 8101c7e:	f000 808f 	beq.w	8101da0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8101c82:	687b      	ldr	r3, [r7, #4]
 8101c84:	681b      	ldr	r3, [r3, #0]
 8101c86:	4a2c      	ldr	r2, [pc, #176]	; (8101d38 <HAL_DMA_IRQHandler+0x3f8>)
 8101c88:	4293      	cmp	r3, r2
 8101c8a:	d04a      	beq.n	8101d22 <HAL_DMA_IRQHandler+0x3e2>
 8101c8c:	687b      	ldr	r3, [r7, #4]
 8101c8e:	681b      	ldr	r3, [r3, #0]
 8101c90:	4a2a      	ldr	r2, [pc, #168]	; (8101d3c <HAL_DMA_IRQHandler+0x3fc>)
 8101c92:	4293      	cmp	r3, r2
 8101c94:	d045      	beq.n	8101d22 <HAL_DMA_IRQHandler+0x3e2>
 8101c96:	687b      	ldr	r3, [r7, #4]
 8101c98:	681b      	ldr	r3, [r3, #0]
 8101c9a:	4a29      	ldr	r2, [pc, #164]	; (8101d40 <HAL_DMA_IRQHandler+0x400>)
 8101c9c:	4293      	cmp	r3, r2
 8101c9e:	d040      	beq.n	8101d22 <HAL_DMA_IRQHandler+0x3e2>
 8101ca0:	687b      	ldr	r3, [r7, #4]
 8101ca2:	681b      	ldr	r3, [r3, #0]
 8101ca4:	4a27      	ldr	r2, [pc, #156]	; (8101d44 <HAL_DMA_IRQHandler+0x404>)
 8101ca6:	4293      	cmp	r3, r2
 8101ca8:	d03b      	beq.n	8101d22 <HAL_DMA_IRQHandler+0x3e2>
 8101caa:	687b      	ldr	r3, [r7, #4]
 8101cac:	681b      	ldr	r3, [r3, #0]
 8101cae:	4a26      	ldr	r2, [pc, #152]	; (8101d48 <HAL_DMA_IRQHandler+0x408>)
 8101cb0:	4293      	cmp	r3, r2
 8101cb2:	d036      	beq.n	8101d22 <HAL_DMA_IRQHandler+0x3e2>
 8101cb4:	687b      	ldr	r3, [r7, #4]
 8101cb6:	681b      	ldr	r3, [r3, #0]
 8101cb8:	4a24      	ldr	r2, [pc, #144]	; (8101d4c <HAL_DMA_IRQHandler+0x40c>)
 8101cba:	4293      	cmp	r3, r2
 8101cbc:	d031      	beq.n	8101d22 <HAL_DMA_IRQHandler+0x3e2>
 8101cbe:	687b      	ldr	r3, [r7, #4]
 8101cc0:	681b      	ldr	r3, [r3, #0]
 8101cc2:	4a23      	ldr	r2, [pc, #140]	; (8101d50 <HAL_DMA_IRQHandler+0x410>)
 8101cc4:	4293      	cmp	r3, r2
 8101cc6:	d02c      	beq.n	8101d22 <HAL_DMA_IRQHandler+0x3e2>
 8101cc8:	687b      	ldr	r3, [r7, #4]
 8101cca:	681b      	ldr	r3, [r3, #0]
 8101ccc:	4a21      	ldr	r2, [pc, #132]	; (8101d54 <HAL_DMA_IRQHandler+0x414>)
 8101cce:	4293      	cmp	r3, r2
 8101cd0:	d027      	beq.n	8101d22 <HAL_DMA_IRQHandler+0x3e2>
 8101cd2:	687b      	ldr	r3, [r7, #4]
 8101cd4:	681b      	ldr	r3, [r3, #0]
 8101cd6:	4a20      	ldr	r2, [pc, #128]	; (8101d58 <HAL_DMA_IRQHandler+0x418>)
 8101cd8:	4293      	cmp	r3, r2
 8101cda:	d022      	beq.n	8101d22 <HAL_DMA_IRQHandler+0x3e2>
 8101cdc:	687b      	ldr	r3, [r7, #4]
 8101cde:	681b      	ldr	r3, [r3, #0]
 8101ce0:	4a1e      	ldr	r2, [pc, #120]	; (8101d5c <HAL_DMA_IRQHandler+0x41c>)
 8101ce2:	4293      	cmp	r3, r2
 8101ce4:	d01d      	beq.n	8101d22 <HAL_DMA_IRQHandler+0x3e2>
 8101ce6:	687b      	ldr	r3, [r7, #4]
 8101ce8:	681b      	ldr	r3, [r3, #0]
 8101cea:	4a1d      	ldr	r2, [pc, #116]	; (8101d60 <HAL_DMA_IRQHandler+0x420>)
 8101cec:	4293      	cmp	r3, r2
 8101cee:	d018      	beq.n	8101d22 <HAL_DMA_IRQHandler+0x3e2>
 8101cf0:	687b      	ldr	r3, [r7, #4]
 8101cf2:	681b      	ldr	r3, [r3, #0]
 8101cf4:	4a1b      	ldr	r2, [pc, #108]	; (8101d64 <HAL_DMA_IRQHandler+0x424>)
 8101cf6:	4293      	cmp	r3, r2
 8101cf8:	d013      	beq.n	8101d22 <HAL_DMA_IRQHandler+0x3e2>
 8101cfa:	687b      	ldr	r3, [r7, #4]
 8101cfc:	681b      	ldr	r3, [r3, #0]
 8101cfe:	4a1a      	ldr	r2, [pc, #104]	; (8101d68 <HAL_DMA_IRQHandler+0x428>)
 8101d00:	4293      	cmp	r3, r2
 8101d02:	d00e      	beq.n	8101d22 <HAL_DMA_IRQHandler+0x3e2>
 8101d04:	687b      	ldr	r3, [r7, #4]
 8101d06:	681b      	ldr	r3, [r3, #0]
 8101d08:	4a18      	ldr	r2, [pc, #96]	; (8101d6c <HAL_DMA_IRQHandler+0x42c>)
 8101d0a:	4293      	cmp	r3, r2
 8101d0c:	d009      	beq.n	8101d22 <HAL_DMA_IRQHandler+0x3e2>
 8101d0e:	687b      	ldr	r3, [r7, #4]
 8101d10:	681b      	ldr	r3, [r3, #0]
 8101d12:	4a17      	ldr	r2, [pc, #92]	; (8101d70 <HAL_DMA_IRQHandler+0x430>)
 8101d14:	4293      	cmp	r3, r2
 8101d16:	d004      	beq.n	8101d22 <HAL_DMA_IRQHandler+0x3e2>
 8101d18:	687b      	ldr	r3, [r7, #4]
 8101d1a:	681b      	ldr	r3, [r3, #0]
 8101d1c:	4a15      	ldr	r2, [pc, #84]	; (8101d74 <HAL_DMA_IRQHandler+0x434>)
 8101d1e:	4293      	cmp	r3, r2
 8101d20:	d12a      	bne.n	8101d78 <HAL_DMA_IRQHandler+0x438>
 8101d22:	687b      	ldr	r3, [r7, #4]
 8101d24:	681b      	ldr	r3, [r3, #0]
 8101d26:	681b      	ldr	r3, [r3, #0]
 8101d28:	f003 0302 	and.w	r3, r3, #2
 8101d2c:	2b00      	cmp	r3, #0
 8101d2e:	bf14      	ite	ne
 8101d30:	2301      	movne	r3, #1
 8101d32:	2300      	moveq	r3, #0
 8101d34:	b2db      	uxtb	r3, r3
 8101d36:	e023      	b.n	8101d80 <HAL_DMA_IRQHandler+0x440>
 8101d38:	40020010 	.word	0x40020010
 8101d3c:	40020028 	.word	0x40020028
 8101d40:	40020040 	.word	0x40020040
 8101d44:	40020058 	.word	0x40020058
 8101d48:	40020070 	.word	0x40020070
 8101d4c:	40020088 	.word	0x40020088
 8101d50:	400200a0 	.word	0x400200a0
 8101d54:	400200b8 	.word	0x400200b8
 8101d58:	40020410 	.word	0x40020410
 8101d5c:	40020428 	.word	0x40020428
 8101d60:	40020440 	.word	0x40020440
 8101d64:	40020458 	.word	0x40020458
 8101d68:	40020470 	.word	0x40020470
 8101d6c:	40020488 	.word	0x40020488
 8101d70:	400204a0 	.word	0x400204a0
 8101d74:	400204b8 	.word	0x400204b8
 8101d78:	687b      	ldr	r3, [r7, #4]
 8101d7a:	681b      	ldr	r3, [r3, #0]
 8101d7c:	681b      	ldr	r3, [r3, #0]
 8101d7e:	2300      	movs	r3, #0
 8101d80:	2b00      	cmp	r3, #0
 8101d82:	d00d      	beq.n	8101da0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8101d84:	687b      	ldr	r3, [r7, #4]
 8101d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101d88:	f003 031f 	and.w	r3, r3, #31
 8101d8c:	2204      	movs	r2, #4
 8101d8e:	409a      	lsls	r2, r3
 8101d90:	6a3b      	ldr	r3, [r7, #32]
 8101d92:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8101d94:	687b      	ldr	r3, [r7, #4]
 8101d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101d98:	f043 0204 	orr.w	r2, r3, #4
 8101d9c:	687b      	ldr	r3, [r7, #4]
 8101d9e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8101da0:	687b      	ldr	r3, [r7, #4]
 8101da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101da4:	f003 031f 	and.w	r3, r3, #31
 8101da8:	2210      	movs	r2, #16
 8101daa:	409a      	lsls	r2, r3
 8101dac:	69bb      	ldr	r3, [r7, #24]
 8101dae:	4013      	ands	r3, r2
 8101db0:	2b00      	cmp	r3, #0
 8101db2:	f000 80a6 	beq.w	8101f02 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8101db6:	687b      	ldr	r3, [r7, #4]
 8101db8:	681b      	ldr	r3, [r3, #0]
 8101dba:	4a85      	ldr	r2, [pc, #532]	; (8101fd0 <HAL_DMA_IRQHandler+0x690>)
 8101dbc:	4293      	cmp	r3, r2
 8101dbe:	d04a      	beq.n	8101e56 <HAL_DMA_IRQHandler+0x516>
 8101dc0:	687b      	ldr	r3, [r7, #4]
 8101dc2:	681b      	ldr	r3, [r3, #0]
 8101dc4:	4a83      	ldr	r2, [pc, #524]	; (8101fd4 <HAL_DMA_IRQHandler+0x694>)
 8101dc6:	4293      	cmp	r3, r2
 8101dc8:	d045      	beq.n	8101e56 <HAL_DMA_IRQHandler+0x516>
 8101dca:	687b      	ldr	r3, [r7, #4]
 8101dcc:	681b      	ldr	r3, [r3, #0]
 8101dce:	4a82      	ldr	r2, [pc, #520]	; (8101fd8 <HAL_DMA_IRQHandler+0x698>)
 8101dd0:	4293      	cmp	r3, r2
 8101dd2:	d040      	beq.n	8101e56 <HAL_DMA_IRQHandler+0x516>
 8101dd4:	687b      	ldr	r3, [r7, #4]
 8101dd6:	681b      	ldr	r3, [r3, #0]
 8101dd8:	4a80      	ldr	r2, [pc, #512]	; (8101fdc <HAL_DMA_IRQHandler+0x69c>)
 8101dda:	4293      	cmp	r3, r2
 8101ddc:	d03b      	beq.n	8101e56 <HAL_DMA_IRQHandler+0x516>
 8101dde:	687b      	ldr	r3, [r7, #4]
 8101de0:	681b      	ldr	r3, [r3, #0]
 8101de2:	4a7f      	ldr	r2, [pc, #508]	; (8101fe0 <HAL_DMA_IRQHandler+0x6a0>)
 8101de4:	4293      	cmp	r3, r2
 8101de6:	d036      	beq.n	8101e56 <HAL_DMA_IRQHandler+0x516>
 8101de8:	687b      	ldr	r3, [r7, #4]
 8101dea:	681b      	ldr	r3, [r3, #0]
 8101dec:	4a7d      	ldr	r2, [pc, #500]	; (8101fe4 <HAL_DMA_IRQHandler+0x6a4>)
 8101dee:	4293      	cmp	r3, r2
 8101df0:	d031      	beq.n	8101e56 <HAL_DMA_IRQHandler+0x516>
 8101df2:	687b      	ldr	r3, [r7, #4]
 8101df4:	681b      	ldr	r3, [r3, #0]
 8101df6:	4a7c      	ldr	r2, [pc, #496]	; (8101fe8 <HAL_DMA_IRQHandler+0x6a8>)
 8101df8:	4293      	cmp	r3, r2
 8101dfa:	d02c      	beq.n	8101e56 <HAL_DMA_IRQHandler+0x516>
 8101dfc:	687b      	ldr	r3, [r7, #4]
 8101dfe:	681b      	ldr	r3, [r3, #0]
 8101e00:	4a7a      	ldr	r2, [pc, #488]	; (8101fec <HAL_DMA_IRQHandler+0x6ac>)
 8101e02:	4293      	cmp	r3, r2
 8101e04:	d027      	beq.n	8101e56 <HAL_DMA_IRQHandler+0x516>
 8101e06:	687b      	ldr	r3, [r7, #4]
 8101e08:	681b      	ldr	r3, [r3, #0]
 8101e0a:	4a79      	ldr	r2, [pc, #484]	; (8101ff0 <HAL_DMA_IRQHandler+0x6b0>)
 8101e0c:	4293      	cmp	r3, r2
 8101e0e:	d022      	beq.n	8101e56 <HAL_DMA_IRQHandler+0x516>
 8101e10:	687b      	ldr	r3, [r7, #4]
 8101e12:	681b      	ldr	r3, [r3, #0]
 8101e14:	4a77      	ldr	r2, [pc, #476]	; (8101ff4 <HAL_DMA_IRQHandler+0x6b4>)
 8101e16:	4293      	cmp	r3, r2
 8101e18:	d01d      	beq.n	8101e56 <HAL_DMA_IRQHandler+0x516>
 8101e1a:	687b      	ldr	r3, [r7, #4]
 8101e1c:	681b      	ldr	r3, [r3, #0]
 8101e1e:	4a76      	ldr	r2, [pc, #472]	; (8101ff8 <HAL_DMA_IRQHandler+0x6b8>)
 8101e20:	4293      	cmp	r3, r2
 8101e22:	d018      	beq.n	8101e56 <HAL_DMA_IRQHandler+0x516>
 8101e24:	687b      	ldr	r3, [r7, #4]
 8101e26:	681b      	ldr	r3, [r3, #0]
 8101e28:	4a74      	ldr	r2, [pc, #464]	; (8101ffc <HAL_DMA_IRQHandler+0x6bc>)
 8101e2a:	4293      	cmp	r3, r2
 8101e2c:	d013      	beq.n	8101e56 <HAL_DMA_IRQHandler+0x516>
 8101e2e:	687b      	ldr	r3, [r7, #4]
 8101e30:	681b      	ldr	r3, [r3, #0]
 8101e32:	4a73      	ldr	r2, [pc, #460]	; (8102000 <HAL_DMA_IRQHandler+0x6c0>)
 8101e34:	4293      	cmp	r3, r2
 8101e36:	d00e      	beq.n	8101e56 <HAL_DMA_IRQHandler+0x516>
 8101e38:	687b      	ldr	r3, [r7, #4]
 8101e3a:	681b      	ldr	r3, [r3, #0]
 8101e3c:	4a71      	ldr	r2, [pc, #452]	; (8102004 <HAL_DMA_IRQHandler+0x6c4>)
 8101e3e:	4293      	cmp	r3, r2
 8101e40:	d009      	beq.n	8101e56 <HAL_DMA_IRQHandler+0x516>
 8101e42:	687b      	ldr	r3, [r7, #4]
 8101e44:	681b      	ldr	r3, [r3, #0]
 8101e46:	4a70      	ldr	r2, [pc, #448]	; (8102008 <HAL_DMA_IRQHandler+0x6c8>)
 8101e48:	4293      	cmp	r3, r2
 8101e4a:	d004      	beq.n	8101e56 <HAL_DMA_IRQHandler+0x516>
 8101e4c:	687b      	ldr	r3, [r7, #4]
 8101e4e:	681b      	ldr	r3, [r3, #0]
 8101e50:	4a6e      	ldr	r2, [pc, #440]	; (810200c <HAL_DMA_IRQHandler+0x6cc>)
 8101e52:	4293      	cmp	r3, r2
 8101e54:	d10a      	bne.n	8101e6c <HAL_DMA_IRQHandler+0x52c>
 8101e56:	687b      	ldr	r3, [r7, #4]
 8101e58:	681b      	ldr	r3, [r3, #0]
 8101e5a:	681b      	ldr	r3, [r3, #0]
 8101e5c:	f003 0308 	and.w	r3, r3, #8
 8101e60:	2b00      	cmp	r3, #0
 8101e62:	bf14      	ite	ne
 8101e64:	2301      	movne	r3, #1
 8101e66:	2300      	moveq	r3, #0
 8101e68:	b2db      	uxtb	r3, r3
 8101e6a:	e009      	b.n	8101e80 <HAL_DMA_IRQHandler+0x540>
 8101e6c:	687b      	ldr	r3, [r7, #4]
 8101e6e:	681b      	ldr	r3, [r3, #0]
 8101e70:	681b      	ldr	r3, [r3, #0]
 8101e72:	f003 0304 	and.w	r3, r3, #4
 8101e76:	2b00      	cmp	r3, #0
 8101e78:	bf14      	ite	ne
 8101e7a:	2301      	movne	r3, #1
 8101e7c:	2300      	moveq	r3, #0
 8101e7e:	b2db      	uxtb	r3, r3
 8101e80:	2b00      	cmp	r3, #0
 8101e82:	d03e      	beq.n	8101f02 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8101e84:	687b      	ldr	r3, [r7, #4]
 8101e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101e88:	f003 031f 	and.w	r3, r3, #31
 8101e8c:	2210      	movs	r2, #16
 8101e8e:	409a      	lsls	r2, r3
 8101e90:	6a3b      	ldr	r3, [r7, #32]
 8101e92:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8101e94:	687b      	ldr	r3, [r7, #4]
 8101e96:	681b      	ldr	r3, [r3, #0]
 8101e98:	681b      	ldr	r3, [r3, #0]
 8101e9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8101e9e:	2b00      	cmp	r3, #0
 8101ea0:	d018      	beq.n	8101ed4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8101ea2:	687b      	ldr	r3, [r7, #4]
 8101ea4:	681b      	ldr	r3, [r3, #0]
 8101ea6:	681b      	ldr	r3, [r3, #0]
 8101ea8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8101eac:	2b00      	cmp	r3, #0
 8101eae:	d108      	bne.n	8101ec2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8101eb0:	687b      	ldr	r3, [r7, #4]
 8101eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8101eb4:	2b00      	cmp	r3, #0
 8101eb6:	d024      	beq.n	8101f02 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8101eb8:	687b      	ldr	r3, [r7, #4]
 8101eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8101ebc:	6878      	ldr	r0, [r7, #4]
 8101ebe:	4798      	blx	r3
 8101ec0:	e01f      	b.n	8101f02 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8101ec2:	687b      	ldr	r3, [r7, #4]
 8101ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8101ec6:	2b00      	cmp	r3, #0
 8101ec8:	d01b      	beq.n	8101f02 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8101eca:	687b      	ldr	r3, [r7, #4]
 8101ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8101ece:	6878      	ldr	r0, [r7, #4]
 8101ed0:	4798      	blx	r3
 8101ed2:	e016      	b.n	8101f02 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8101ed4:	687b      	ldr	r3, [r7, #4]
 8101ed6:	681b      	ldr	r3, [r3, #0]
 8101ed8:	681b      	ldr	r3, [r3, #0]
 8101eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8101ede:	2b00      	cmp	r3, #0
 8101ee0:	d107      	bne.n	8101ef2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8101ee2:	687b      	ldr	r3, [r7, #4]
 8101ee4:	681b      	ldr	r3, [r3, #0]
 8101ee6:	681a      	ldr	r2, [r3, #0]
 8101ee8:	687b      	ldr	r3, [r7, #4]
 8101eea:	681b      	ldr	r3, [r3, #0]
 8101eec:	f022 0208 	bic.w	r2, r2, #8
 8101ef0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8101ef2:	687b      	ldr	r3, [r7, #4]
 8101ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8101ef6:	2b00      	cmp	r3, #0
 8101ef8:	d003      	beq.n	8101f02 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8101efa:	687b      	ldr	r3, [r7, #4]
 8101efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8101efe:	6878      	ldr	r0, [r7, #4]
 8101f00:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8101f02:	687b      	ldr	r3, [r7, #4]
 8101f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101f06:	f003 031f 	and.w	r3, r3, #31
 8101f0a:	2220      	movs	r2, #32
 8101f0c:	409a      	lsls	r2, r3
 8101f0e:	69bb      	ldr	r3, [r7, #24]
 8101f10:	4013      	ands	r3, r2
 8101f12:	2b00      	cmp	r3, #0
 8101f14:	f000 8110 	beq.w	8102138 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8101f18:	687b      	ldr	r3, [r7, #4]
 8101f1a:	681b      	ldr	r3, [r3, #0]
 8101f1c:	4a2c      	ldr	r2, [pc, #176]	; (8101fd0 <HAL_DMA_IRQHandler+0x690>)
 8101f1e:	4293      	cmp	r3, r2
 8101f20:	d04a      	beq.n	8101fb8 <HAL_DMA_IRQHandler+0x678>
 8101f22:	687b      	ldr	r3, [r7, #4]
 8101f24:	681b      	ldr	r3, [r3, #0]
 8101f26:	4a2b      	ldr	r2, [pc, #172]	; (8101fd4 <HAL_DMA_IRQHandler+0x694>)
 8101f28:	4293      	cmp	r3, r2
 8101f2a:	d045      	beq.n	8101fb8 <HAL_DMA_IRQHandler+0x678>
 8101f2c:	687b      	ldr	r3, [r7, #4]
 8101f2e:	681b      	ldr	r3, [r3, #0]
 8101f30:	4a29      	ldr	r2, [pc, #164]	; (8101fd8 <HAL_DMA_IRQHandler+0x698>)
 8101f32:	4293      	cmp	r3, r2
 8101f34:	d040      	beq.n	8101fb8 <HAL_DMA_IRQHandler+0x678>
 8101f36:	687b      	ldr	r3, [r7, #4]
 8101f38:	681b      	ldr	r3, [r3, #0]
 8101f3a:	4a28      	ldr	r2, [pc, #160]	; (8101fdc <HAL_DMA_IRQHandler+0x69c>)
 8101f3c:	4293      	cmp	r3, r2
 8101f3e:	d03b      	beq.n	8101fb8 <HAL_DMA_IRQHandler+0x678>
 8101f40:	687b      	ldr	r3, [r7, #4]
 8101f42:	681b      	ldr	r3, [r3, #0]
 8101f44:	4a26      	ldr	r2, [pc, #152]	; (8101fe0 <HAL_DMA_IRQHandler+0x6a0>)
 8101f46:	4293      	cmp	r3, r2
 8101f48:	d036      	beq.n	8101fb8 <HAL_DMA_IRQHandler+0x678>
 8101f4a:	687b      	ldr	r3, [r7, #4]
 8101f4c:	681b      	ldr	r3, [r3, #0]
 8101f4e:	4a25      	ldr	r2, [pc, #148]	; (8101fe4 <HAL_DMA_IRQHandler+0x6a4>)
 8101f50:	4293      	cmp	r3, r2
 8101f52:	d031      	beq.n	8101fb8 <HAL_DMA_IRQHandler+0x678>
 8101f54:	687b      	ldr	r3, [r7, #4]
 8101f56:	681b      	ldr	r3, [r3, #0]
 8101f58:	4a23      	ldr	r2, [pc, #140]	; (8101fe8 <HAL_DMA_IRQHandler+0x6a8>)
 8101f5a:	4293      	cmp	r3, r2
 8101f5c:	d02c      	beq.n	8101fb8 <HAL_DMA_IRQHandler+0x678>
 8101f5e:	687b      	ldr	r3, [r7, #4]
 8101f60:	681b      	ldr	r3, [r3, #0]
 8101f62:	4a22      	ldr	r2, [pc, #136]	; (8101fec <HAL_DMA_IRQHandler+0x6ac>)
 8101f64:	4293      	cmp	r3, r2
 8101f66:	d027      	beq.n	8101fb8 <HAL_DMA_IRQHandler+0x678>
 8101f68:	687b      	ldr	r3, [r7, #4]
 8101f6a:	681b      	ldr	r3, [r3, #0]
 8101f6c:	4a20      	ldr	r2, [pc, #128]	; (8101ff0 <HAL_DMA_IRQHandler+0x6b0>)
 8101f6e:	4293      	cmp	r3, r2
 8101f70:	d022      	beq.n	8101fb8 <HAL_DMA_IRQHandler+0x678>
 8101f72:	687b      	ldr	r3, [r7, #4]
 8101f74:	681b      	ldr	r3, [r3, #0]
 8101f76:	4a1f      	ldr	r2, [pc, #124]	; (8101ff4 <HAL_DMA_IRQHandler+0x6b4>)
 8101f78:	4293      	cmp	r3, r2
 8101f7a:	d01d      	beq.n	8101fb8 <HAL_DMA_IRQHandler+0x678>
 8101f7c:	687b      	ldr	r3, [r7, #4]
 8101f7e:	681b      	ldr	r3, [r3, #0]
 8101f80:	4a1d      	ldr	r2, [pc, #116]	; (8101ff8 <HAL_DMA_IRQHandler+0x6b8>)
 8101f82:	4293      	cmp	r3, r2
 8101f84:	d018      	beq.n	8101fb8 <HAL_DMA_IRQHandler+0x678>
 8101f86:	687b      	ldr	r3, [r7, #4]
 8101f88:	681b      	ldr	r3, [r3, #0]
 8101f8a:	4a1c      	ldr	r2, [pc, #112]	; (8101ffc <HAL_DMA_IRQHandler+0x6bc>)
 8101f8c:	4293      	cmp	r3, r2
 8101f8e:	d013      	beq.n	8101fb8 <HAL_DMA_IRQHandler+0x678>
 8101f90:	687b      	ldr	r3, [r7, #4]
 8101f92:	681b      	ldr	r3, [r3, #0]
 8101f94:	4a1a      	ldr	r2, [pc, #104]	; (8102000 <HAL_DMA_IRQHandler+0x6c0>)
 8101f96:	4293      	cmp	r3, r2
 8101f98:	d00e      	beq.n	8101fb8 <HAL_DMA_IRQHandler+0x678>
 8101f9a:	687b      	ldr	r3, [r7, #4]
 8101f9c:	681b      	ldr	r3, [r3, #0]
 8101f9e:	4a19      	ldr	r2, [pc, #100]	; (8102004 <HAL_DMA_IRQHandler+0x6c4>)
 8101fa0:	4293      	cmp	r3, r2
 8101fa2:	d009      	beq.n	8101fb8 <HAL_DMA_IRQHandler+0x678>
 8101fa4:	687b      	ldr	r3, [r7, #4]
 8101fa6:	681b      	ldr	r3, [r3, #0]
 8101fa8:	4a17      	ldr	r2, [pc, #92]	; (8102008 <HAL_DMA_IRQHandler+0x6c8>)
 8101faa:	4293      	cmp	r3, r2
 8101fac:	d004      	beq.n	8101fb8 <HAL_DMA_IRQHandler+0x678>
 8101fae:	687b      	ldr	r3, [r7, #4]
 8101fb0:	681b      	ldr	r3, [r3, #0]
 8101fb2:	4a16      	ldr	r2, [pc, #88]	; (810200c <HAL_DMA_IRQHandler+0x6cc>)
 8101fb4:	4293      	cmp	r3, r2
 8101fb6:	d12b      	bne.n	8102010 <HAL_DMA_IRQHandler+0x6d0>
 8101fb8:	687b      	ldr	r3, [r7, #4]
 8101fba:	681b      	ldr	r3, [r3, #0]
 8101fbc:	681b      	ldr	r3, [r3, #0]
 8101fbe:	f003 0310 	and.w	r3, r3, #16
 8101fc2:	2b00      	cmp	r3, #0
 8101fc4:	bf14      	ite	ne
 8101fc6:	2301      	movne	r3, #1
 8101fc8:	2300      	moveq	r3, #0
 8101fca:	b2db      	uxtb	r3, r3
 8101fcc:	e02a      	b.n	8102024 <HAL_DMA_IRQHandler+0x6e4>
 8101fce:	bf00      	nop
 8101fd0:	40020010 	.word	0x40020010
 8101fd4:	40020028 	.word	0x40020028
 8101fd8:	40020040 	.word	0x40020040
 8101fdc:	40020058 	.word	0x40020058
 8101fe0:	40020070 	.word	0x40020070
 8101fe4:	40020088 	.word	0x40020088
 8101fe8:	400200a0 	.word	0x400200a0
 8101fec:	400200b8 	.word	0x400200b8
 8101ff0:	40020410 	.word	0x40020410
 8101ff4:	40020428 	.word	0x40020428
 8101ff8:	40020440 	.word	0x40020440
 8101ffc:	40020458 	.word	0x40020458
 8102000:	40020470 	.word	0x40020470
 8102004:	40020488 	.word	0x40020488
 8102008:	400204a0 	.word	0x400204a0
 810200c:	400204b8 	.word	0x400204b8
 8102010:	687b      	ldr	r3, [r7, #4]
 8102012:	681b      	ldr	r3, [r3, #0]
 8102014:	681b      	ldr	r3, [r3, #0]
 8102016:	f003 0302 	and.w	r3, r3, #2
 810201a:	2b00      	cmp	r3, #0
 810201c:	bf14      	ite	ne
 810201e:	2301      	movne	r3, #1
 8102020:	2300      	moveq	r3, #0
 8102022:	b2db      	uxtb	r3, r3
 8102024:	2b00      	cmp	r3, #0
 8102026:	f000 8087 	beq.w	8102138 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 810202a:	687b      	ldr	r3, [r7, #4]
 810202c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810202e:	f003 031f 	and.w	r3, r3, #31
 8102032:	2220      	movs	r2, #32
 8102034:	409a      	lsls	r2, r3
 8102036:	6a3b      	ldr	r3, [r7, #32]
 8102038:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 810203a:	687b      	ldr	r3, [r7, #4]
 810203c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8102040:	b2db      	uxtb	r3, r3
 8102042:	2b04      	cmp	r3, #4
 8102044:	d139      	bne.n	81020ba <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8102046:	687b      	ldr	r3, [r7, #4]
 8102048:	681b      	ldr	r3, [r3, #0]
 810204a:	681a      	ldr	r2, [r3, #0]
 810204c:	687b      	ldr	r3, [r7, #4]
 810204e:	681b      	ldr	r3, [r3, #0]
 8102050:	f022 0216 	bic.w	r2, r2, #22
 8102054:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8102056:	687b      	ldr	r3, [r7, #4]
 8102058:	681b      	ldr	r3, [r3, #0]
 810205a:	695a      	ldr	r2, [r3, #20]
 810205c:	687b      	ldr	r3, [r7, #4]
 810205e:	681b      	ldr	r3, [r3, #0]
 8102060:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8102064:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8102066:	687b      	ldr	r3, [r7, #4]
 8102068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810206a:	2b00      	cmp	r3, #0
 810206c:	d103      	bne.n	8102076 <HAL_DMA_IRQHandler+0x736>
 810206e:	687b      	ldr	r3, [r7, #4]
 8102070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102072:	2b00      	cmp	r3, #0
 8102074:	d007      	beq.n	8102086 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8102076:	687b      	ldr	r3, [r7, #4]
 8102078:	681b      	ldr	r3, [r3, #0]
 810207a:	681a      	ldr	r2, [r3, #0]
 810207c:	687b      	ldr	r3, [r7, #4]
 810207e:	681b      	ldr	r3, [r3, #0]
 8102080:	f022 0208 	bic.w	r2, r2, #8
 8102084:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8102086:	687b      	ldr	r3, [r7, #4]
 8102088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810208a:	f003 031f 	and.w	r3, r3, #31
 810208e:	223f      	movs	r2, #63	; 0x3f
 8102090:	409a      	lsls	r2, r3
 8102092:	6a3b      	ldr	r3, [r7, #32]
 8102094:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8102096:	687b      	ldr	r3, [r7, #4]
 8102098:	2201      	movs	r2, #1
 810209a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 810209e:	687b      	ldr	r3, [r7, #4]
 81020a0:	2200      	movs	r2, #0
 81020a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 81020a6:	687b      	ldr	r3, [r7, #4]
 81020a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81020aa:	2b00      	cmp	r3, #0
 81020ac:	f000 834a 	beq.w	8102744 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 81020b0:	687b      	ldr	r3, [r7, #4]
 81020b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81020b4:	6878      	ldr	r0, [r7, #4]
 81020b6:	4798      	blx	r3
          }
          return;
 81020b8:	e344      	b.n	8102744 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 81020ba:	687b      	ldr	r3, [r7, #4]
 81020bc:	681b      	ldr	r3, [r3, #0]
 81020be:	681b      	ldr	r3, [r3, #0]
 81020c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81020c4:	2b00      	cmp	r3, #0
 81020c6:	d018      	beq.n	81020fa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 81020c8:	687b      	ldr	r3, [r7, #4]
 81020ca:	681b      	ldr	r3, [r3, #0]
 81020cc:	681b      	ldr	r3, [r3, #0]
 81020ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 81020d2:	2b00      	cmp	r3, #0
 81020d4:	d108      	bne.n	81020e8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 81020d6:	687b      	ldr	r3, [r7, #4]
 81020d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81020da:	2b00      	cmp	r3, #0
 81020dc:	d02c      	beq.n	8102138 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 81020de:	687b      	ldr	r3, [r7, #4]
 81020e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81020e2:	6878      	ldr	r0, [r7, #4]
 81020e4:	4798      	blx	r3
 81020e6:	e027      	b.n	8102138 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 81020e8:	687b      	ldr	r3, [r7, #4]
 81020ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81020ec:	2b00      	cmp	r3, #0
 81020ee:	d023      	beq.n	8102138 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 81020f0:	687b      	ldr	r3, [r7, #4]
 81020f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81020f4:	6878      	ldr	r0, [r7, #4]
 81020f6:	4798      	blx	r3
 81020f8:	e01e      	b.n	8102138 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 81020fa:	687b      	ldr	r3, [r7, #4]
 81020fc:	681b      	ldr	r3, [r3, #0]
 81020fe:	681b      	ldr	r3, [r3, #0]
 8102100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102104:	2b00      	cmp	r3, #0
 8102106:	d10f      	bne.n	8102128 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8102108:	687b      	ldr	r3, [r7, #4]
 810210a:	681b      	ldr	r3, [r3, #0]
 810210c:	681a      	ldr	r2, [r3, #0]
 810210e:	687b      	ldr	r3, [r7, #4]
 8102110:	681b      	ldr	r3, [r3, #0]
 8102112:	f022 0210 	bic.w	r2, r2, #16
 8102116:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8102118:	687b      	ldr	r3, [r7, #4]
 810211a:	2201      	movs	r2, #1
 810211c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8102120:	687b      	ldr	r3, [r7, #4]
 8102122:	2200      	movs	r2, #0
 8102124:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8102128:	687b      	ldr	r3, [r7, #4]
 810212a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810212c:	2b00      	cmp	r3, #0
 810212e:	d003      	beq.n	8102138 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8102130:	687b      	ldr	r3, [r7, #4]
 8102132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102134:	6878      	ldr	r0, [r7, #4]
 8102136:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8102138:	687b      	ldr	r3, [r7, #4]
 810213a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810213c:	2b00      	cmp	r3, #0
 810213e:	f000 8306 	beq.w	810274e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8102142:	687b      	ldr	r3, [r7, #4]
 8102144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102146:	f003 0301 	and.w	r3, r3, #1
 810214a:	2b00      	cmp	r3, #0
 810214c:	f000 8088 	beq.w	8102260 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8102150:	687b      	ldr	r3, [r7, #4]
 8102152:	2204      	movs	r2, #4
 8102154:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8102158:	687b      	ldr	r3, [r7, #4]
 810215a:	681b      	ldr	r3, [r3, #0]
 810215c:	4a7a      	ldr	r2, [pc, #488]	; (8102348 <HAL_DMA_IRQHandler+0xa08>)
 810215e:	4293      	cmp	r3, r2
 8102160:	d04a      	beq.n	81021f8 <HAL_DMA_IRQHandler+0x8b8>
 8102162:	687b      	ldr	r3, [r7, #4]
 8102164:	681b      	ldr	r3, [r3, #0]
 8102166:	4a79      	ldr	r2, [pc, #484]	; (810234c <HAL_DMA_IRQHandler+0xa0c>)
 8102168:	4293      	cmp	r3, r2
 810216a:	d045      	beq.n	81021f8 <HAL_DMA_IRQHandler+0x8b8>
 810216c:	687b      	ldr	r3, [r7, #4]
 810216e:	681b      	ldr	r3, [r3, #0]
 8102170:	4a77      	ldr	r2, [pc, #476]	; (8102350 <HAL_DMA_IRQHandler+0xa10>)
 8102172:	4293      	cmp	r3, r2
 8102174:	d040      	beq.n	81021f8 <HAL_DMA_IRQHandler+0x8b8>
 8102176:	687b      	ldr	r3, [r7, #4]
 8102178:	681b      	ldr	r3, [r3, #0]
 810217a:	4a76      	ldr	r2, [pc, #472]	; (8102354 <HAL_DMA_IRQHandler+0xa14>)
 810217c:	4293      	cmp	r3, r2
 810217e:	d03b      	beq.n	81021f8 <HAL_DMA_IRQHandler+0x8b8>
 8102180:	687b      	ldr	r3, [r7, #4]
 8102182:	681b      	ldr	r3, [r3, #0]
 8102184:	4a74      	ldr	r2, [pc, #464]	; (8102358 <HAL_DMA_IRQHandler+0xa18>)
 8102186:	4293      	cmp	r3, r2
 8102188:	d036      	beq.n	81021f8 <HAL_DMA_IRQHandler+0x8b8>
 810218a:	687b      	ldr	r3, [r7, #4]
 810218c:	681b      	ldr	r3, [r3, #0]
 810218e:	4a73      	ldr	r2, [pc, #460]	; (810235c <HAL_DMA_IRQHandler+0xa1c>)
 8102190:	4293      	cmp	r3, r2
 8102192:	d031      	beq.n	81021f8 <HAL_DMA_IRQHandler+0x8b8>
 8102194:	687b      	ldr	r3, [r7, #4]
 8102196:	681b      	ldr	r3, [r3, #0]
 8102198:	4a71      	ldr	r2, [pc, #452]	; (8102360 <HAL_DMA_IRQHandler+0xa20>)
 810219a:	4293      	cmp	r3, r2
 810219c:	d02c      	beq.n	81021f8 <HAL_DMA_IRQHandler+0x8b8>
 810219e:	687b      	ldr	r3, [r7, #4]
 81021a0:	681b      	ldr	r3, [r3, #0]
 81021a2:	4a70      	ldr	r2, [pc, #448]	; (8102364 <HAL_DMA_IRQHandler+0xa24>)
 81021a4:	4293      	cmp	r3, r2
 81021a6:	d027      	beq.n	81021f8 <HAL_DMA_IRQHandler+0x8b8>
 81021a8:	687b      	ldr	r3, [r7, #4]
 81021aa:	681b      	ldr	r3, [r3, #0]
 81021ac:	4a6e      	ldr	r2, [pc, #440]	; (8102368 <HAL_DMA_IRQHandler+0xa28>)
 81021ae:	4293      	cmp	r3, r2
 81021b0:	d022      	beq.n	81021f8 <HAL_DMA_IRQHandler+0x8b8>
 81021b2:	687b      	ldr	r3, [r7, #4]
 81021b4:	681b      	ldr	r3, [r3, #0]
 81021b6:	4a6d      	ldr	r2, [pc, #436]	; (810236c <HAL_DMA_IRQHandler+0xa2c>)
 81021b8:	4293      	cmp	r3, r2
 81021ba:	d01d      	beq.n	81021f8 <HAL_DMA_IRQHandler+0x8b8>
 81021bc:	687b      	ldr	r3, [r7, #4]
 81021be:	681b      	ldr	r3, [r3, #0]
 81021c0:	4a6b      	ldr	r2, [pc, #428]	; (8102370 <HAL_DMA_IRQHandler+0xa30>)
 81021c2:	4293      	cmp	r3, r2
 81021c4:	d018      	beq.n	81021f8 <HAL_DMA_IRQHandler+0x8b8>
 81021c6:	687b      	ldr	r3, [r7, #4]
 81021c8:	681b      	ldr	r3, [r3, #0]
 81021ca:	4a6a      	ldr	r2, [pc, #424]	; (8102374 <HAL_DMA_IRQHandler+0xa34>)
 81021cc:	4293      	cmp	r3, r2
 81021ce:	d013      	beq.n	81021f8 <HAL_DMA_IRQHandler+0x8b8>
 81021d0:	687b      	ldr	r3, [r7, #4]
 81021d2:	681b      	ldr	r3, [r3, #0]
 81021d4:	4a68      	ldr	r2, [pc, #416]	; (8102378 <HAL_DMA_IRQHandler+0xa38>)
 81021d6:	4293      	cmp	r3, r2
 81021d8:	d00e      	beq.n	81021f8 <HAL_DMA_IRQHandler+0x8b8>
 81021da:	687b      	ldr	r3, [r7, #4]
 81021dc:	681b      	ldr	r3, [r3, #0]
 81021de:	4a67      	ldr	r2, [pc, #412]	; (810237c <HAL_DMA_IRQHandler+0xa3c>)
 81021e0:	4293      	cmp	r3, r2
 81021e2:	d009      	beq.n	81021f8 <HAL_DMA_IRQHandler+0x8b8>
 81021e4:	687b      	ldr	r3, [r7, #4]
 81021e6:	681b      	ldr	r3, [r3, #0]
 81021e8:	4a65      	ldr	r2, [pc, #404]	; (8102380 <HAL_DMA_IRQHandler+0xa40>)
 81021ea:	4293      	cmp	r3, r2
 81021ec:	d004      	beq.n	81021f8 <HAL_DMA_IRQHandler+0x8b8>
 81021ee:	687b      	ldr	r3, [r7, #4]
 81021f0:	681b      	ldr	r3, [r3, #0]
 81021f2:	4a64      	ldr	r2, [pc, #400]	; (8102384 <HAL_DMA_IRQHandler+0xa44>)
 81021f4:	4293      	cmp	r3, r2
 81021f6:	d108      	bne.n	810220a <HAL_DMA_IRQHandler+0x8ca>
 81021f8:	687b      	ldr	r3, [r7, #4]
 81021fa:	681b      	ldr	r3, [r3, #0]
 81021fc:	681a      	ldr	r2, [r3, #0]
 81021fe:	687b      	ldr	r3, [r7, #4]
 8102200:	681b      	ldr	r3, [r3, #0]
 8102202:	f022 0201 	bic.w	r2, r2, #1
 8102206:	601a      	str	r2, [r3, #0]
 8102208:	e007      	b.n	810221a <HAL_DMA_IRQHandler+0x8da>
 810220a:	687b      	ldr	r3, [r7, #4]
 810220c:	681b      	ldr	r3, [r3, #0]
 810220e:	681a      	ldr	r2, [r3, #0]
 8102210:	687b      	ldr	r3, [r7, #4]
 8102212:	681b      	ldr	r3, [r3, #0]
 8102214:	f022 0201 	bic.w	r2, r2, #1
 8102218:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 810221a:	68fb      	ldr	r3, [r7, #12]
 810221c:	3301      	adds	r3, #1
 810221e:	60fb      	str	r3, [r7, #12]
 8102220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8102222:	429a      	cmp	r2, r3
 8102224:	d307      	bcc.n	8102236 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8102226:	687b      	ldr	r3, [r7, #4]
 8102228:	681b      	ldr	r3, [r3, #0]
 810222a:	681b      	ldr	r3, [r3, #0]
 810222c:	f003 0301 	and.w	r3, r3, #1
 8102230:	2b00      	cmp	r3, #0
 8102232:	d1f2      	bne.n	810221a <HAL_DMA_IRQHandler+0x8da>
 8102234:	e000      	b.n	8102238 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8102236:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8102238:	687b      	ldr	r3, [r7, #4]
 810223a:	681b      	ldr	r3, [r3, #0]
 810223c:	681b      	ldr	r3, [r3, #0]
 810223e:	f003 0301 	and.w	r3, r3, #1
 8102242:	2b00      	cmp	r3, #0
 8102244:	d004      	beq.n	8102250 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8102246:	687b      	ldr	r3, [r7, #4]
 8102248:	2203      	movs	r2, #3
 810224a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 810224e:	e003      	b.n	8102258 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8102250:	687b      	ldr	r3, [r7, #4]
 8102252:	2201      	movs	r2, #1
 8102254:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8102258:	687b      	ldr	r3, [r7, #4]
 810225a:	2200      	movs	r2, #0
 810225c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8102260:	687b      	ldr	r3, [r7, #4]
 8102262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102264:	2b00      	cmp	r3, #0
 8102266:	f000 8272 	beq.w	810274e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 810226a:	687b      	ldr	r3, [r7, #4]
 810226c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810226e:	6878      	ldr	r0, [r7, #4]
 8102270:	4798      	blx	r3
 8102272:	e26c      	b.n	810274e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8102274:	687b      	ldr	r3, [r7, #4]
 8102276:	681b      	ldr	r3, [r3, #0]
 8102278:	4a43      	ldr	r2, [pc, #268]	; (8102388 <HAL_DMA_IRQHandler+0xa48>)
 810227a:	4293      	cmp	r3, r2
 810227c:	d022      	beq.n	81022c4 <HAL_DMA_IRQHandler+0x984>
 810227e:	687b      	ldr	r3, [r7, #4]
 8102280:	681b      	ldr	r3, [r3, #0]
 8102282:	4a42      	ldr	r2, [pc, #264]	; (810238c <HAL_DMA_IRQHandler+0xa4c>)
 8102284:	4293      	cmp	r3, r2
 8102286:	d01d      	beq.n	81022c4 <HAL_DMA_IRQHandler+0x984>
 8102288:	687b      	ldr	r3, [r7, #4]
 810228a:	681b      	ldr	r3, [r3, #0]
 810228c:	4a40      	ldr	r2, [pc, #256]	; (8102390 <HAL_DMA_IRQHandler+0xa50>)
 810228e:	4293      	cmp	r3, r2
 8102290:	d018      	beq.n	81022c4 <HAL_DMA_IRQHandler+0x984>
 8102292:	687b      	ldr	r3, [r7, #4]
 8102294:	681b      	ldr	r3, [r3, #0]
 8102296:	4a3f      	ldr	r2, [pc, #252]	; (8102394 <HAL_DMA_IRQHandler+0xa54>)
 8102298:	4293      	cmp	r3, r2
 810229a:	d013      	beq.n	81022c4 <HAL_DMA_IRQHandler+0x984>
 810229c:	687b      	ldr	r3, [r7, #4]
 810229e:	681b      	ldr	r3, [r3, #0]
 81022a0:	4a3d      	ldr	r2, [pc, #244]	; (8102398 <HAL_DMA_IRQHandler+0xa58>)
 81022a2:	4293      	cmp	r3, r2
 81022a4:	d00e      	beq.n	81022c4 <HAL_DMA_IRQHandler+0x984>
 81022a6:	687b      	ldr	r3, [r7, #4]
 81022a8:	681b      	ldr	r3, [r3, #0]
 81022aa:	4a3c      	ldr	r2, [pc, #240]	; (810239c <HAL_DMA_IRQHandler+0xa5c>)
 81022ac:	4293      	cmp	r3, r2
 81022ae:	d009      	beq.n	81022c4 <HAL_DMA_IRQHandler+0x984>
 81022b0:	687b      	ldr	r3, [r7, #4]
 81022b2:	681b      	ldr	r3, [r3, #0]
 81022b4:	4a3a      	ldr	r2, [pc, #232]	; (81023a0 <HAL_DMA_IRQHandler+0xa60>)
 81022b6:	4293      	cmp	r3, r2
 81022b8:	d004      	beq.n	81022c4 <HAL_DMA_IRQHandler+0x984>
 81022ba:	687b      	ldr	r3, [r7, #4]
 81022bc:	681b      	ldr	r3, [r3, #0]
 81022be:	4a39      	ldr	r2, [pc, #228]	; (81023a4 <HAL_DMA_IRQHandler+0xa64>)
 81022c0:	4293      	cmp	r3, r2
 81022c2:	d101      	bne.n	81022c8 <HAL_DMA_IRQHandler+0x988>
 81022c4:	2301      	movs	r3, #1
 81022c6:	e000      	b.n	81022ca <HAL_DMA_IRQHandler+0x98a>
 81022c8:	2300      	movs	r3, #0
 81022ca:	2b00      	cmp	r3, #0
 81022cc:	f000 823f 	beq.w	810274e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 81022d0:	687b      	ldr	r3, [r7, #4]
 81022d2:	681b      	ldr	r3, [r3, #0]
 81022d4:	681b      	ldr	r3, [r3, #0]
 81022d6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 81022d8:	687b      	ldr	r3, [r7, #4]
 81022da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81022dc:	f003 031f 	and.w	r3, r3, #31
 81022e0:	2204      	movs	r2, #4
 81022e2:	409a      	lsls	r2, r3
 81022e4:	697b      	ldr	r3, [r7, #20]
 81022e6:	4013      	ands	r3, r2
 81022e8:	2b00      	cmp	r3, #0
 81022ea:	f000 80cd 	beq.w	8102488 <HAL_DMA_IRQHandler+0xb48>
 81022ee:	693b      	ldr	r3, [r7, #16]
 81022f0:	f003 0304 	and.w	r3, r3, #4
 81022f4:	2b00      	cmp	r3, #0
 81022f6:	f000 80c7 	beq.w	8102488 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 81022fa:	687b      	ldr	r3, [r7, #4]
 81022fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81022fe:	f003 031f 	and.w	r3, r3, #31
 8102302:	2204      	movs	r2, #4
 8102304:	409a      	lsls	r2, r3
 8102306:	69fb      	ldr	r3, [r7, #28]
 8102308:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810230a:	693b      	ldr	r3, [r7, #16]
 810230c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8102310:	2b00      	cmp	r3, #0
 8102312:	d049      	beq.n	81023a8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8102314:	693b      	ldr	r3, [r7, #16]
 8102316:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810231a:	2b00      	cmp	r3, #0
 810231c:	d109      	bne.n	8102332 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 810231e:	687b      	ldr	r3, [r7, #4]
 8102320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102322:	2b00      	cmp	r3, #0
 8102324:	f000 8210 	beq.w	8102748 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8102328:	687b      	ldr	r3, [r7, #4]
 810232a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810232c:	6878      	ldr	r0, [r7, #4]
 810232e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8102330:	e20a      	b.n	8102748 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8102332:	687b      	ldr	r3, [r7, #4]
 8102334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102336:	2b00      	cmp	r3, #0
 8102338:	f000 8206 	beq.w	8102748 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 810233c:	687b      	ldr	r3, [r7, #4]
 810233e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102340:	6878      	ldr	r0, [r7, #4]
 8102342:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8102344:	e200      	b.n	8102748 <HAL_DMA_IRQHandler+0xe08>
 8102346:	bf00      	nop
 8102348:	40020010 	.word	0x40020010
 810234c:	40020028 	.word	0x40020028
 8102350:	40020040 	.word	0x40020040
 8102354:	40020058 	.word	0x40020058
 8102358:	40020070 	.word	0x40020070
 810235c:	40020088 	.word	0x40020088
 8102360:	400200a0 	.word	0x400200a0
 8102364:	400200b8 	.word	0x400200b8
 8102368:	40020410 	.word	0x40020410
 810236c:	40020428 	.word	0x40020428
 8102370:	40020440 	.word	0x40020440
 8102374:	40020458 	.word	0x40020458
 8102378:	40020470 	.word	0x40020470
 810237c:	40020488 	.word	0x40020488
 8102380:	400204a0 	.word	0x400204a0
 8102384:	400204b8 	.word	0x400204b8
 8102388:	58025408 	.word	0x58025408
 810238c:	5802541c 	.word	0x5802541c
 8102390:	58025430 	.word	0x58025430
 8102394:	58025444 	.word	0x58025444
 8102398:	58025458 	.word	0x58025458
 810239c:	5802546c 	.word	0x5802546c
 81023a0:	58025480 	.word	0x58025480
 81023a4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 81023a8:	693b      	ldr	r3, [r7, #16]
 81023aa:	f003 0320 	and.w	r3, r3, #32
 81023ae:	2b00      	cmp	r3, #0
 81023b0:	d160      	bne.n	8102474 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 81023b2:	687b      	ldr	r3, [r7, #4]
 81023b4:	681b      	ldr	r3, [r3, #0]
 81023b6:	4a7f      	ldr	r2, [pc, #508]	; (81025b4 <HAL_DMA_IRQHandler+0xc74>)
 81023b8:	4293      	cmp	r3, r2
 81023ba:	d04a      	beq.n	8102452 <HAL_DMA_IRQHandler+0xb12>
 81023bc:	687b      	ldr	r3, [r7, #4]
 81023be:	681b      	ldr	r3, [r3, #0]
 81023c0:	4a7d      	ldr	r2, [pc, #500]	; (81025b8 <HAL_DMA_IRQHandler+0xc78>)
 81023c2:	4293      	cmp	r3, r2
 81023c4:	d045      	beq.n	8102452 <HAL_DMA_IRQHandler+0xb12>
 81023c6:	687b      	ldr	r3, [r7, #4]
 81023c8:	681b      	ldr	r3, [r3, #0]
 81023ca:	4a7c      	ldr	r2, [pc, #496]	; (81025bc <HAL_DMA_IRQHandler+0xc7c>)
 81023cc:	4293      	cmp	r3, r2
 81023ce:	d040      	beq.n	8102452 <HAL_DMA_IRQHandler+0xb12>
 81023d0:	687b      	ldr	r3, [r7, #4]
 81023d2:	681b      	ldr	r3, [r3, #0]
 81023d4:	4a7a      	ldr	r2, [pc, #488]	; (81025c0 <HAL_DMA_IRQHandler+0xc80>)
 81023d6:	4293      	cmp	r3, r2
 81023d8:	d03b      	beq.n	8102452 <HAL_DMA_IRQHandler+0xb12>
 81023da:	687b      	ldr	r3, [r7, #4]
 81023dc:	681b      	ldr	r3, [r3, #0]
 81023de:	4a79      	ldr	r2, [pc, #484]	; (81025c4 <HAL_DMA_IRQHandler+0xc84>)
 81023e0:	4293      	cmp	r3, r2
 81023e2:	d036      	beq.n	8102452 <HAL_DMA_IRQHandler+0xb12>
 81023e4:	687b      	ldr	r3, [r7, #4]
 81023e6:	681b      	ldr	r3, [r3, #0]
 81023e8:	4a77      	ldr	r2, [pc, #476]	; (81025c8 <HAL_DMA_IRQHandler+0xc88>)
 81023ea:	4293      	cmp	r3, r2
 81023ec:	d031      	beq.n	8102452 <HAL_DMA_IRQHandler+0xb12>
 81023ee:	687b      	ldr	r3, [r7, #4]
 81023f0:	681b      	ldr	r3, [r3, #0]
 81023f2:	4a76      	ldr	r2, [pc, #472]	; (81025cc <HAL_DMA_IRQHandler+0xc8c>)
 81023f4:	4293      	cmp	r3, r2
 81023f6:	d02c      	beq.n	8102452 <HAL_DMA_IRQHandler+0xb12>
 81023f8:	687b      	ldr	r3, [r7, #4]
 81023fa:	681b      	ldr	r3, [r3, #0]
 81023fc:	4a74      	ldr	r2, [pc, #464]	; (81025d0 <HAL_DMA_IRQHandler+0xc90>)
 81023fe:	4293      	cmp	r3, r2
 8102400:	d027      	beq.n	8102452 <HAL_DMA_IRQHandler+0xb12>
 8102402:	687b      	ldr	r3, [r7, #4]
 8102404:	681b      	ldr	r3, [r3, #0]
 8102406:	4a73      	ldr	r2, [pc, #460]	; (81025d4 <HAL_DMA_IRQHandler+0xc94>)
 8102408:	4293      	cmp	r3, r2
 810240a:	d022      	beq.n	8102452 <HAL_DMA_IRQHandler+0xb12>
 810240c:	687b      	ldr	r3, [r7, #4]
 810240e:	681b      	ldr	r3, [r3, #0]
 8102410:	4a71      	ldr	r2, [pc, #452]	; (81025d8 <HAL_DMA_IRQHandler+0xc98>)
 8102412:	4293      	cmp	r3, r2
 8102414:	d01d      	beq.n	8102452 <HAL_DMA_IRQHandler+0xb12>
 8102416:	687b      	ldr	r3, [r7, #4]
 8102418:	681b      	ldr	r3, [r3, #0]
 810241a:	4a70      	ldr	r2, [pc, #448]	; (81025dc <HAL_DMA_IRQHandler+0xc9c>)
 810241c:	4293      	cmp	r3, r2
 810241e:	d018      	beq.n	8102452 <HAL_DMA_IRQHandler+0xb12>
 8102420:	687b      	ldr	r3, [r7, #4]
 8102422:	681b      	ldr	r3, [r3, #0]
 8102424:	4a6e      	ldr	r2, [pc, #440]	; (81025e0 <HAL_DMA_IRQHandler+0xca0>)
 8102426:	4293      	cmp	r3, r2
 8102428:	d013      	beq.n	8102452 <HAL_DMA_IRQHandler+0xb12>
 810242a:	687b      	ldr	r3, [r7, #4]
 810242c:	681b      	ldr	r3, [r3, #0]
 810242e:	4a6d      	ldr	r2, [pc, #436]	; (81025e4 <HAL_DMA_IRQHandler+0xca4>)
 8102430:	4293      	cmp	r3, r2
 8102432:	d00e      	beq.n	8102452 <HAL_DMA_IRQHandler+0xb12>
 8102434:	687b      	ldr	r3, [r7, #4]
 8102436:	681b      	ldr	r3, [r3, #0]
 8102438:	4a6b      	ldr	r2, [pc, #428]	; (81025e8 <HAL_DMA_IRQHandler+0xca8>)
 810243a:	4293      	cmp	r3, r2
 810243c:	d009      	beq.n	8102452 <HAL_DMA_IRQHandler+0xb12>
 810243e:	687b      	ldr	r3, [r7, #4]
 8102440:	681b      	ldr	r3, [r3, #0]
 8102442:	4a6a      	ldr	r2, [pc, #424]	; (81025ec <HAL_DMA_IRQHandler+0xcac>)
 8102444:	4293      	cmp	r3, r2
 8102446:	d004      	beq.n	8102452 <HAL_DMA_IRQHandler+0xb12>
 8102448:	687b      	ldr	r3, [r7, #4]
 810244a:	681b      	ldr	r3, [r3, #0]
 810244c:	4a68      	ldr	r2, [pc, #416]	; (81025f0 <HAL_DMA_IRQHandler+0xcb0>)
 810244e:	4293      	cmp	r3, r2
 8102450:	d108      	bne.n	8102464 <HAL_DMA_IRQHandler+0xb24>
 8102452:	687b      	ldr	r3, [r7, #4]
 8102454:	681b      	ldr	r3, [r3, #0]
 8102456:	681a      	ldr	r2, [r3, #0]
 8102458:	687b      	ldr	r3, [r7, #4]
 810245a:	681b      	ldr	r3, [r3, #0]
 810245c:	f022 0208 	bic.w	r2, r2, #8
 8102460:	601a      	str	r2, [r3, #0]
 8102462:	e007      	b.n	8102474 <HAL_DMA_IRQHandler+0xb34>
 8102464:	687b      	ldr	r3, [r7, #4]
 8102466:	681b      	ldr	r3, [r3, #0]
 8102468:	681a      	ldr	r2, [r3, #0]
 810246a:	687b      	ldr	r3, [r7, #4]
 810246c:	681b      	ldr	r3, [r3, #0]
 810246e:	f022 0204 	bic.w	r2, r2, #4
 8102472:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8102474:	687b      	ldr	r3, [r7, #4]
 8102476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102478:	2b00      	cmp	r3, #0
 810247a:	f000 8165 	beq.w	8102748 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 810247e:	687b      	ldr	r3, [r7, #4]
 8102480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102482:	6878      	ldr	r0, [r7, #4]
 8102484:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8102486:	e15f      	b.n	8102748 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8102488:	687b      	ldr	r3, [r7, #4]
 810248a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810248c:	f003 031f 	and.w	r3, r3, #31
 8102490:	2202      	movs	r2, #2
 8102492:	409a      	lsls	r2, r3
 8102494:	697b      	ldr	r3, [r7, #20]
 8102496:	4013      	ands	r3, r2
 8102498:	2b00      	cmp	r3, #0
 810249a:	f000 80c5 	beq.w	8102628 <HAL_DMA_IRQHandler+0xce8>
 810249e:	693b      	ldr	r3, [r7, #16]
 81024a0:	f003 0302 	and.w	r3, r3, #2
 81024a4:	2b00      	cmp	r3, #0
 81024a6:	f000 80bf 	beq.w	8102628 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 81024aa:	687b      	ldr	r3, [r7, #4]
 81024ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81024ae:	f003 031f 	and.w	r3, r3, #31
 81024b2:	2202      	movs	r2, #2
 81024b4:	409a      	lsls	r2, r3
 81024b6:	69fb      	ldr	r3, [r7, #28]
 81024b8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81024ba:	693b      	ldr	r3, [r7, #16]
 81024bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81024c0:	2b00      	cmp	r3, #0
 81024c2:	d018      	beq.n	81024f6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 81024c4:	693b      	ldr	r3, [r7, #16]
 81024c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81024ca:	2b00      	cmp	r3, #0
 81024cc:	d109      	bne.n	81024e2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 81024ce:	687b      	ldr	r3, [r7, #4]
 81024d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81024d2:	2b00      	cmp	r3, #0
 81024d4:	f000 813a 	beq.w	810274c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 81024d8:	687b      	ldr	r3, [r7, #4]
 81024da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81024dc:	6878      	ldr	r0, [r7, #4]
 81024de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81024e0:	e134      	b.n	810274c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 81024e2:	687b      	ldr	r3, [r7, #4]
 81024e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81024e6:	2b00      	cmp	r3, #0
 81024e8:	f000 8130 	beq.w	810274c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 81024ec:	687b      	ldr	r3, [r7, #4]
 81024ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81024f0:	6878      	ldr	r0, [r7, #4]
 81024f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81024f4:	e12a      	b.n	810274c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 81024f6:	693b      	ldr	r3, [r7, #16]
 81024f8:	f003 0320 	and.w	r3, r3, #32
 81024fc:	2b00      	cmp	r3, #0
 81024fe:	f040 8089 	bne.w	8102614 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8102502:	687b      	ldr	r3, [r7, #4]
 8102504:	681b      	ldr	r3, [r3, #0]
 8102506:	4a2b      	ldr	r2, [pc, #172]	; (81025b4 <HAL_DMA_IRQHandler+0xc74>)
 8102508:	4293      	cmp	r3, r2
 810250a:	d04a      	beq.n	81025a2 <HAL_DMA_IRQHandler+0xc62>
 810250c:	687b      	ldr	r3, [r7, #4]
 810250e:	681b      	ldr	r3, [r3, #0]
 8102510:	4a29      	ldr	r2, [pc, #164]	; (81025b8 <HAL_DMA_IRQHandler+0xc78>)
 8102512:	4293      	cmp	r3, r2
 8102514:	d045      	beq.n	81025a2 <HAL_DMA_IRQHandler+0xc62>
 8102516:	687b      	ldr	r3, [r7, #4]
 8102518:	681b      	ldr	r3, [r3, #0]
 810251a:	4a28      	ldr	r2, [pc, #160]	; (81025bc <HAL_DMA_IRQHandler+0xc7c>)
 810251c:	4293      	cmp	r3, r2
 810251e:	d040      	beq.n	81025a2 <HAL_DMA_IRQHandler+0xc62>
 8102520:	687b      	ldr	r3, [r7, #4]
 8102522:	681b      	ldr	r3, [r3, #0]
 8102524:	4a26      	ldr	r2, [pc, #152]	; (81025c0 <HAL_DMA_IRQHandler+0xc80>)
 8102526:	4293      	cmp	r3, r2
 8102528:	d03b      	beq.n	81025a2 <HAL_DMA_IRQHandler+0xc62>
 810252a:	687b      	ldr	r3, [r7, #4]
 810252c:	681b      	ldr	r3, [r3, #0]
 810252e:	4a25      	ldr	r2, [pc, #148]	; (81025c4 <HAL_DMA_IRQHandler+0xc84>)
 8102530:	4293      	cmp	r3, r2
 8102532:	d036      	beq.n	81025a2 <HAL_DMA_IRQHandler+0xc62>
 8102534:	687b      	ldr	r3, [r7, #4]
 8102536:	681b      	ldr	r3, [r3, #0]
 8102538:	4a23      	ldr	r2, [pc, #140]	; (81025c8 <HAL_DMA_IRQHandler+0xc88>)
 810253a:	4293      	cmp	r3, r2
 810253c:	d031      	beq.n	81025a2 <HAL_DMA_IRQHandler+0xc62>
 810253e:	687b      	ldr	r3, [r7, #4]
 8102540:	681b      	ldr	r3, [r3, #0]
 8102542:	4a22      	ldr	r2, [pc, #136]	; (81025cc <HAL_DMA_IRQHandler+0xc8c>)
 8102544:	4293      	cmp	r3, r2
 8102546:	d02c      	beq.n	81025a2 <HAL_DMA_IRQHandler+0xc62>
 8102548:	687b      	ldr	r3, [r7, #4]
 810254a:	681b      	ldr	r3, [r3, #0]
 810254c:	4a20      	ldr	r2, [pc, #128]	; (81025d0 <HAL_DMA_IRQHandler+0xc90>)
 810254e:	4293      	cmp	r3, r2
 8102550:	d027      	beq.n	81025a2 <HAL_DMA_IRQHandler+0xc62>
 8102552:	687b      	ldr	r3, [r7, #4]
 8102554:	681b      	ldr	r3, [r3, #0]
 8102556:	4a1f      	ldr	r2, [pc, #124]	; (81025d4 <HAL_DMA_IRQHandler+0xc94>)
 8102558:	4293      	cmp	r3, r2
 810255a:	d022      	beq.n	81025a2 <HAL_DMA_IRQHandler+0xc62>
 810255c:	687b      	ldr	r3, [r7, #4]
 810255e:	681b      	ldr	r3, [r3, #0]
 8102560:	4a1d      	ldr	r2, [pc, #116]	; (81025d8 <HAL_DMA_IRQHandler+0xc98>)
 8102562:	4293      	cmp	r3, r2
 8102564:	d01d      	beq.n	81025a2 <HAL_DMA_IRQHandler+0xc62>
 8102566:	687b      	ldr	r3, [r7, #4]
 8102568:	681b      	ldr	r3, [r3, #0]
 810256a:	4a1c      	ldr	r2, [pc, #112]	; (81025dc <HAL_DMA_IRQHandler+0xc9c>)
 810256c:	4293      	cmp	r3, r2
 810256e:	d018      	beq.n	81025a2 <HAL_DMA_IRQHandler+0xc62>
 8102570:	687b      	ldr	r3, [r7, #4]
 8102572:	681b      	ldr	r3, [r3, #0]
 8102574:	4a1a      	ldr	r2, [pc, #104]	; (81025e0 <HAL_DMA_IRQHandler+0xca0>)
 8102576:	4293      	cmp	r3, r2
 8102578:	d013      	beq.n	81025a2 <HAL_DMA_IRQHandler+0xc62>
 810257a:	687b      	ldr	r3, [r7, #4]
 810257c:	681b      	ldr	r3, [r3, #0]
 810257e:	4a19      	ldr	r2, [pc, #100]	; (81025e4 <HAL_DMA_IRQHandler+0xca4>)
 8102580:	4293      	cmp	r3, r2
 8102582:	d00e      	beq.n	81025a2 <HAL_DMA_IRQHandler+0xc62>
 8102584:	687b      	ldr	r3, [r7, #4]
 8102586:	681b      	ldr	r3, [r3, #0]
 8102588:	4a17      	ldr	r2, [pc, #92]	; (81025e8 <HAL_DMA_IRQHandler+0xca8>)
 810258a:	4293      	cmp	r3, r2
 810258c:	d009      	beq.n	81025a2 <HAL_DMA_IRQHandler+0xc62>
 810258e:	687b      	ldr	r3, [r7, #4]
 8102590:	681b      	ldr	r3, [r3, #0]
 8102592:	4a16      	ldr	r2, [pc, #88]	; (81025ec <HAL_DMA_IRQHandler+0xcac>)
 8102594:	4293      	cmp	r3, r2
 8102596:	d004      	beq.n	81025a2 <HAL_DMA_IRQHandler+0xc62>
 8102598:	687b      	ldr	r3, [r7, #4]
 810259a:	681b      	ldr	r3, [r3, #0]
 810259c:	4a14      	ldr	r2, [pc, #80]	; (81025f0 <HAL_DMA_IRQHandler+0xcb0>)
 810259e:	4293      	cmp	r3, r2
 81025a0:	d128      	bne.n	81025f4 <HAL_DMA_IRQHandler+0xcb4>
 81025a2:	687b      	ldr	r3, [r7, #4]
 81025a4:	681b      	ldr	r3, [r3, #0]
 81025a6:	681a      	ldr	r2, [r3, #0]
 81025a8:	687b      	ldr	r3, [r7, #4]
 81025aa:	681b      	ldr	r3, [r3, #0]
 81025ac:	f022 0214 	bic.w	r2, r2, #20
 81025b0:	601a      	str	r2, [r3, #0]
 81025b2:	e027      	b.n	8102604 <HAL_DMA_IRQHandler+0xcc4>
 81025b4:	40020010 	.word	0x40020010
 81025b8:	40020028 	.word	0x40020028
 81025bc:	40020040 	.word	0x40020040
 81025c0:	40020058 	.word	0x40020058
 81025c4:	40020070 	.word	0x40020070
 81025c8:	40020088 	.word	0x40020088
 81025cc:	400200a0 	.word	0x400200a0
 81025d0:	400200b8 	.word	0x400200b8
 81025d4:	40020410 	.word	0x40020410
 81025d8:	40020428 	.word	0x40020428
 81025dc:	40020440 	.word	0x40020440
 81025e0:	40020458 	.word	0x40020458
 81025e4:	40020470 	.word	0x40020470
 81025e8:	40020488 	.word	0x40020488
 81025ec:	400204a0 	.word	0x400204a0
 81025f0:	400204b8 	.word	0x400204b8
 81025f4:	687b      	ldr	r3, [r7, #4]
 81025f6:	681b      	ldr	r3, [r3, #0]
 81025f8:	681a      	ldr	r2, [r3, #0]
 81025fa:	687b      	ldr	r3, [r7, #4]
 81025fc:	681b      	ldr	r3, [r3, #0]
 81025fe:	f022 020a 	bic.w	r2, r2, #10
 8102602:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8102604:	687b      	ldr	r3, [r7, #4]
 8102606:	2201      	movs	r2, #1
 8102608:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 810260c:	687b      	ldr	r3, [r7, #4]
 810260e:	2200      	movs	r2, #0
 8102610:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8102614:	687b      	ldr	r3, [r7, #4]
 8102616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102618:	2b00      	cmp	r3, #0
 810261a:	f000 8097 	beq.w	810274c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 810261e:	687b      	ldr	r3, [r7, #4]
 8102620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102622:	6878      	ldr	r0, [r7, #4]
 8102624:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8102626:	e091      	b.n	810274c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8102628:	687b      	ldr	r3, [r7, #4]
 810262a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810262c:	f003 031f 	and.w	r3, r3, #31
 8102630:	2208      	movs	r2, #8
 8102632:	409a      	lsls	r2, r3
 8102634:	697b      	ldr	r3, [r7, #20]
 8102636:	4013      	ands	r3, r2
 8102638:	2b00      	cmp	r3, #0
 810263a:	f000 8088 	beq.w	810274e <HAL_DMA_IRQHandler+0xe0e>
 810263e:	693b      	ldr	r3, [r7, #16]
 8102640:	f003 0308 	and.w	r3, r3, #8
 8102644:	2b00      	cmp	r3, #0
 8102646:	f000 8082 	beq.w	810274e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 810264a:	687b      	ldr	r3, [r7, #4]
 810264c:	681b      	ldr	r3, [r3, #0]
 810264e:	4a41      	ldr	r2, [pc, #260]	; (8102754 <HAL_DMA_IRQHandler+0xe14>)
 8102650:	4293      	cmp	r3, r2
 8102652:	d04a      	beq.n	81026ea <HAL_DMA_IRQHandler+0xdaa>
 8102654:	687b      	ldr	r3, [r7, #4]
 8102656:	681b      	ldr	r3, [r3, #0]
 8102658:	4a3f      	ldr	r2, [pc, #252]	; (8102758 <HAL_DMA_IRQHandler+0xe18>)
 810265a:	4293      	cmp	r3, r2
 810265c:	d045      	beq.n	81026ea <HAL_DMA_IRQHandler+0xdaa>
 810265e:	687b      	ldr	r3, [r7, #4]
 8102660:	681b      	ldr	r3, [r3, #0]
 8102662:	4a3e      	ldr	r2, [pc, #248]	; (810275c <HAL_DMA_IRQHandler+0xe1c>)
 8102664:	4293      	cmp	r3, r2
 8102666:	d040      	beq.n	81026ea <HAL_DMA_IRQHandler+0xdaa>
 8102668:	687b      	ldr	r3, [r7, #4]
 810266a:	681b      	ldr	r3, [r3, #0]
 810266c:	4a3c      	ldr	r2, [pc, #240]	; (8102760 <HAL_DMA_IRQHandler+0xe20>)
 810266e:	4293      	cmp	r3, r2
 8102670:	d03b      	beq.n	81026ea <HAL_DMA_IRQHandler+0xdaa>
 8102672:	687b      	ldr	r3, [r7, #4]
 8102674:	681b      	ldr	r3, [r3, #0]
 8102676:	4a3b      	ldr	r2, [pc, #236]	; (8102764 <HAL_DMA_IRQHandler+0xe24>)
 8102678:	4293      	cmp	r3, r2
 810267a:	d036      	beq.n	81026ea <HAL_DMA_IRQHandler+0xdaa>
 810267c:	687b      	ldr	r3, [r7, #4]
 810267e:	681b      	ldr	r3, [r3, #0]
 8102680:	4a39      	ldr	r2, [pc, #228]	; (8102768 <HAL_DMA_IRQHandler+0xe28>)
 8102682:	4293      	cmp	r3, r2
 8102684:	d031      	beq.n	81026ea <HAL_DMA_IRQHandler+0xdaa>
 8102686:	687b      	ldr	r3, [r7, #4]
 8102688:	681b      	ldr	r3, [r3, #0]
 810268a:	4a38      	ldr	r2, [pc, #224]	; (810276c <HAL_DMA_IRQHandler+0xe2c>)
 810268c:	4293      	cmp	r3, r2
 810268e:	d02c      	beq.n	81026ea <HAL_DMA_IRQHandler+0xdaa>
 8102690:	687b      	ldr	r3, [r7, #4]
 8102692:	681b      	ldr	r3, [r3, #0]
 8102694:	4a36      	ldr	r2, [pc, #216]	; (8102770 <HAL_DMA_IRQHandler+0xe30>)
 8102696:	4293      	cmp	r3, r2
 8102698:	d027      	beq.n	81026ea <HAL_DMA_IRQHandler+0xdaa>
 810269a:	687b      	ldr	r3, [r7, #4]
 810269c:	681b      	ldr	r3, [r3, #0]
 810269e:	4a35      	ldr	r2, [pc, #212]	; (8102774 <HAL_DMA_IRQHandler+0xe34>)
 81026a0:	4293      	cmp	r3, r2
 81026a2:	d022      	beq.n	81026ea <HAL_DMA_IRQHandler+0xdaa>
 81026a4:	687b      	ldr	r3, [r7, #4]
 81026a6:	681b      	ldr	r3, [r3, #0]
 81026a8:	4a33      	ldr	r2, [pc, #204]	; (8102778 <HAL_DMA_IRQHandler+0xe38>)
 81026aa:	4293      	cmp	r3, r2
 81026ac:	d01d      	beq.n	81026ea <HAL_DMA_IRQHandler+0xdaa>
 81026ae:	687b      	ldr	r3, [r7, #4]
 81026b0:	681b      	ldr	r3, [r3, #0]
 81026b2:	4a32      	ldr	r2, [pc, #200]	; (810277c <HAL_DMA_IRQHandler+0xe3c>)
 81026b4:	4293      	cmp	r3, r2
 81026b6:	d018      	beq.n	81026ea <HAL_DMA_IRQHandler+0xdaa>
 81026b8:	687b      	ldr	r3, [r7, #4]
 81026ba:	681b      	ldr	r3, [r3, #0]
 81026bc:	4a30      	ldr	r2, [pc, #192]	; (8102780 <HAL_DMA_IRQHandler+0xe40>)
 81026be:	4293      	cmp	r3, r2
 81026c0:	d013      	beq.n	81026ea <HAL_DMA_IRQHandler+0xdaa>
 81026c2:	687b      	ldr	r3, [r7, #4]
 81026c4:	681b      	ldr	r3, [r3, #0]
 81026c6:	4a2f      	ldr	r2, [pc, #188]	; (8102784 <HAL_DMA_IRQHandler+0xe44>)
 81026c8:	4293      	cmp	r3, r2
 81026ca:	d00e      	beq.n	81026ea <HAL_DMA_IRQHandler+0xdaa>
 81026cc:	687b      	ldr	r3, [r7, #4]
 81026ce:	681b      	ldr	r3, [r3, #0]
 81026d0:	4a2d      	ldr	r2, [pc, #180]	; (8102788 <HAL_DMA_IRQHandler+0xe48>)
 81026d2:	4293      	cmp	r3, r2
 81026d4:	d009      	beq.n	81026ea <HAL_DMA_IRQHandler+0xdaa>
 81026d6:	687b      	ldr	r3, [r7, #4]
 81026d8:	681b      	ldr	r3, [r3, #0]
 81026da:	4a2c      	ldr	r2, [pc, #176]	; (810278c <HAL_DMA_IRQHandler+0xe4c>)
 81026dc:	4293      	cmp	r3, r2
 81026de:	d004      	beq.n	81026ea <HAL_DMA_IRQHandler+0xdaa>
 81026e0:	687b      	ldr	r3, [r7, #4]
 81026e2:	681b      	ldr	r3, [r3, #0]
 81026e4:	4a2a      	ldr	r2, [pc, #168]	; (8102790 <HAL_DMA_IRQHandler+0xe50>)
 81026e6:	4293      	cmp	r3, r2
 81026e8:	d108      	bne.n	81026fc <HAL_DMA_IRQHandler+0xdbc>
 81026ea:	687b      	ldr	r3, [r7, #4]
 81026ec:	681b      	ldr	r3, [r3, #0]
 81026ee:	681a      	ldr	r2, [r3, #0]
 81026f0:	687b      	ldr	r3, [r7, #4]
 81026f2:	681b      	ldr	r3, [r3, #0]
 81026f4:	f022 021c 	bic.w	r2, r2, #28
 81026f8:	601a      	str	r2, [r3, #0]
 81026fa:	e007      	b.n	810270c <HAL_DMA_IRQHandler+0xdcc>
 81026fc:	687b      	ldr	r3, [r7, #4]
 81026fe:	681b      	ldr	r3, [r3, #0]
 8102700:	681a      	ldr	r2, [r3, #0]
 8102702:	687b      	ldr	r3, [r7, #4]
 8102704:	681b      	ldr	r3, [r3, #0]
 8102706:	f022 020e 	bic.w	r2, r2, #14
 810270a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 810270c:	687b      	ldr	r3, [r7, #4]
 810270e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102710:	f003 031f 	and.w	r3, r3, #31
 8102714:	2201      	movs	r2, #1
 8102716:	409a      	lsls	r2, r3
 8102718:	69fb      	ldr	r3, [r7, #28]
 810271a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 810271c:	687b      	ldr	r3, [r7, #4]
 810271e:	2201      	movs	r2, #1
 8102720:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8102722:	687b      	ldr	r3, [r7, #4]
 8102724:	2201      	movs	r2, #1
 8102726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 810272a:	687b      	ldr	r3, [r7, #4]
 810272c:	2200      	movs	r2, #0
 810272e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8102732:	687b      	ldr	r3, [r7, #4]
 8102734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102736:	2b00      	cmp	r3, #0
 8102738:	d009      	beq.n	810274e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 810273a:	687b      	ldr	r3, [r7, #4]
 810273c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810273e:	6878      	ldr	r0, [r7, #4]
 8102740:	4798      	blx	r3
 8102742:	e004      	b.n	810274e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8102744:	bf00      	nop
 8102746:	e002      	b.n	810274e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8102748:	bf00      	nop
 810274a:	e000      	b.n	810274e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810274c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 810274e:	3728      	adds	r7, #40	; 0x28
 8102750:	46bd      	mov	sp, r7
 8102752:	bd80      	pop	{r7, pc}
 8102754:	40020010 	.word	0x40020010
 8102758:	40020028 	.word	0x40020028
 810275c:	40020040 	.word	0x40020040
 8102760:	40020058 	.word	0x40020058
 8102764:	40020070 	.word	0x40020070
 8102768:	40020088 	.word	0x40020088
 810276c:	400200a0 	.word	0x400200a0
 8102770:	400200b8 	.word	0x400200b8
 8102774:	40020410 	.word	0x40020410
 8102778:	40020428 	.word	0x40020428
 810277c:	40020440 	.word	0x40020440
 8102780:	40020458 	.word	0x40020458
 8102784:	40020470 	.word	0x40020470
 8102788:	40020488 	.word	0x40020488
 810278c:	400204a0 	.word	0x400204a0
 8102790:	400204b8 	.word	0x400204b8

08102794 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8102794:	b480      	push	{r7}
 8102796:	b089      	sub	sp, #36	; 0x24
 8102798:	af00      	add	r7, sp, #0
 810279a:	6078      	str	r0, [r7, #4]
 810279c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810279e:	2300      	movs	r3, #0
 81027a0:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81027a2:	4b89      	ldr	r3, [pc, #548]	; (81029c8 <HAL_GPIO_Init+0x234>)
 81027a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81027a6:	e194      	b.n	8102ad2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81027a8:	683b      	ldr	r3, [r7, #0]
 81027aa:	681a      	ldr	r2, [r3, #0]
 81027ac:	2101      	movs	r1, #1
 81027ae:	69fb      	ldr	r3, [r7, #28]
 81027b0:	fa01 f303 	lsl.w	r3, r1, r3
 81027b4:	4013      	ands	r3, r2
 81027b6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81027b8:	693b      	ldr	r3, [r7, #16]
 81027ba:	2b00      	cmp	r3, #0
 81027bc:	f000 8186 	beq.w	8102acc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81027c0:	683b      	ldr	r3, [r7, #0]
 81027c2:	685b      	ldr	r3, [r3, #4]
 81027c4:	f003 0303 	and.w	r3, r3, #3
 81027c8:	2b01      	cmp	r3, #1
 81027ca:	d005      	beq.n	81027d8 <HAL_GPIO_Init+0x44>
 81027cc:	683b      	ldr	r3, [r7, #0]
 81027ce:	685b      	ldr	r3, [r3, #4]
 81027d0:	f003 0303 	and.w	r3, r3, #3
 81027d4:	2b02      	cmp	r3, #2
 81027d6:	d130      	bne.n	810283a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81027d8:	687b      	ldr	r3, [r7, #4]
 81027da:	689b      	ldr	r3, [r3, #8]
 81027dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81027de:	69fb      	ldr	r3, [r7, #28]
 81027e0:	005b      	lsls	r3, r3, #1
 81027e2:	2203      	movs	r2, #3
 81027e4:	fa02 f303 	lsl.w	r3, r2, r3
 81027e8:	43db      	mvns	r3, r3
 81027ea:	69ba      	ldr	r2, [r7, #24]
 81027ec:	4013      	ands	r3, r2
 81027ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81027f0:	683b      	ldr	r3, [r7, #0]
 81027f2:	68da      	ldr	r2, [r3, #12]
 81027f4:	69fb      	ldr	r3, [r7, #28]
 81027f6:	005b      	lsls	r3, r3, #1
 81027f8:	fa02 f303 	lsl.w	r3, r2, r3
 81027fc:	69ba      	ldr	r2, [r7, #24]
 81027fe:	4313      	orrs	r3, r2
 8102800:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8102802:	687b      	ldr	r3, [r7, #4]
 8102804:	69ba      	ldr	r2, [r7, #24]
 8102806:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8102808:	687b      	ldr	r3, [r7, #4]
 810280a:	685b      	ldr	r3, [r3, #4]
 810280c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810280e:	2201      	movs	r2, #1
 8102810:	69fb      	ldr	r3, [r7, #28]
 8102812:	fa02 f303 	lsl.w	r3, r2, r3
 8102816:	43db      	mvns	r3, r3
 8102818:	69ba      	ldr	r2, [r7, #24]
 810281a:	4013      	ands	r3, r2
 810281c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 810281e:	683b      	ldr	r3, [r7, #0]
 8102820:	685b      	ldr	r3, [r3, #4]
 8102822:	091b      	lsrs	r3, r3, #4
 8102824:	f003 0201 	and.w	r2, r3, #1
 8102828:	69fb      	ldr	r3, [r7, #28]
 810282a:	fa02 f303 	lsl.w	r3, r2, r3
 810282e:	69ba      	ldr	r2, [r7, #24]
 8102830:	4313      	orrs	r3, r2
 8102832:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8102834:	687b      	ldr	r3, [r7, #4]
 8102836:	69ba      	ldr	r2, [r7, #24]
 8102838:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 810283a:	683b      	ldr	r3, [r7, #0]
 810283c:	685b      	ldr	r3, [r3, #4]
 810283e:	f003 0303 	and.w	r3, r3, #3
 8102842:	2b03      	cmp	r3, #3
 8102844:	d017      	beq.n	8102876 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8102846:	687b      	ldr	r3, [r7, #4]
 8102848:	68db      	ldr	r3, [r3, #12]
 810284a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 810284c:	69fb      	ldr	r3, [r7, #28]
 810284e:	005b      	lsls	r3, r3, #1
 8102850:	2203      	movs	r2, #3
 8102852:	fa02 f303 	lsl.w	r3, r2, r3
 8102856:	43db      	mvns	r3, r3
 8102858:	69ba      	ldr	r2, [r7, #24]
 810285a:	4013      	ands	r3, r2
 810285c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810285e:	683b      	ldr	r3, [r7, #0]
 8102860:	689a      	ldr	r2, [r3, #8]
 8102862:	69fb      	ldr	r3, [r7, #28]
 8102864:	005b      	lsls	r3, r3, #1
 8102866:	fa02 f303 	lsl.w	r3, r2, r3
 810286a:	69ba      	ldr	r2, [r7, #24]
 810286c:	4313      	orrs	r3, r2
 810286e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8102870:	687b      	ldr	r3, [r7, #4]
 8102872:	69ba      	ldr	r2, [r7, #24]
 8102874:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8102876:	683b      	ldr	r3, [r7, #0]
 8102878:	685b      	ldr	r3, [r3, #4]
 810287a:	f003 0303 	and.w	r3, r3, #3
 810287e:	2b02      	cmp	r3, #2
 8102880:	d123      	bne.n	81028ca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8102882:	69fb      	ldr	r3, [r7, #28]
 8102884:	08da      	lsrs	r2, r3, #3
 8102886:	687b      	ldr	r3, [r7, #4]
 8102888:	3208      	adds	r2, #8
 810288a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810288e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8102890:	69fb      	ldr	r3, [r7, #28]
 8102892:	f003 0307 	and.w	r3, r3, #7
 8102896:	009b      	lsls	r3, r3, #2
 8102898:	220f      	movs	r2, #15
 810289a:	fa02 f303 	lsl.w	r3, r2, r3
 810289e:	43db      	mvns	r3, r3
 81028a0:	69ba      	ldr	r2, [r7, #24]
 81028a2:	4013      	ands	r3, r2
 81028a4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 81028a6:	683b      	ldr	r3, [r7, #0]
 81028a8:	691a      	ldr	r2, [r3, #16]
 81028aa:	69fb      	ldr	r3, [r7, #28]
 81028ac:	f003 0307 	and.w	r3, r3, #7
 81028b0:	009b      	lsls	r3, r3, #2
 81028b2:	fa02 f303 	lsl.w	r3, r2, r3
 81028b6:	69ba      	ldr	r2, [r7, #24]
 81028b8:	4313      	orrs	r3, r2
 81028ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81028bc:	69fb      	ldr	r3, [r7, #28]
 81028be:	08da      	lsrs	r2, r3, #3
 81028c0:	687b      	ldr	r3, [r7, #4]
 81028c2:	3208      	adds	r2, #8
 81028c4:	69b9      	ldr	r1, [r7, #24]
 81028c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81028ca:	687b      	ldr	r3, [r7, #4]
 81028cc:	681b      	ldr	r3, [r3, #0]
 81028ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81028d0:	69fb      	ldr	r3, [r7, #28]
 81028d2:	005b      	lsls	r3, r3, #1
 81028d4:	2203      	movs	r2, #3
 81028d6:	fa02 f303 	lsl.w	r3, r2, r3
 81028da:	43db      	mvns	r3, r3
 81028dc:	69ba      	ldr	r2, [r7, #24]
 81028de:	4013      	ands	r3, r2
 81028e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81028e2:	683b      	ldr	r3, [r7, #0]
 81028e4:	685b      	ldr	r3, [r3, #4]
 81028e6:	f003 0203 	and.w	r2, r3, #3
 81028ea:	69fb      	ldr	r3, [r7, #28]
 81028ec:	005b      	lsls	r3, r3, #1
 81028ee:	fa02 f303 	lsl.w	r3, r2, r3
 81028f2:	69ba      	ldr	r2, [r7, #24]
 81028f4:	4313      	orrs	r3, r2
 81028f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81028f8:	687b      	ldr	r3, [r7, #4]
 81028fa:	69ba      	ldr	r2, [r7, #24]
 81028fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81028fe:	683b      	ldr	r3, [r7, #0]
 8102900:	685b      	ldr	r3, [r3, #4]
 8102902:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8102906:	2b00      	cmp	r3, #0
 8102908:	f000 80e0 	beq.w	8102acc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 810290c:	4b2f      	ldr	r3, [pc, #188]	; (81029cc <HAL_GPIO_Init+0x238>)
 810290e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102912:	4a2e      	ldr	r2, [pc, #184]	; (81029cc <HAL_GPIO_Init+0x238>)
 8102914:	f043 0302 	orr.w	r3, r3, #2
 8102918:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810291c:	4b2b      	ldr	r3, [pc, #172]	; (81029cc <HAL_GPIO_Init+0x238>)
 810291e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102922:	f003 0302 	and.w	r3, r3, #2
 8102926:	60fb      	str	r3, [r7, #12]
 8102928:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 810292a:	4a29      	ldr	r2, [pc, #164]	; (81029d0 <HAL_GPIO_Init+0x23c>)
 810292c:	69fb      	ldr	r3, [r7, #28]
 810292e:	089b      	lsrs	r3, r3, #2
 8102930:	3302      	adds	r3, #2
 8102932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8102936:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8102938:	69fb      	ldr	r3, [r7, #28]
 810293a:	f003 0303 	and.w	r3, r3, #3
 810293e:	009b      	lsls	r3, r3, #2
 8102940:	220f      	movs	r2, #15
 8102942:	fa02 f303 	lsl.w	r3, r2, r3
 8102946:	43db      	mvns	r3, r3
 8102948:	69ba      	ldr	r2, [r7, #24]
 810294a:	4013      	ands	r3, r2
 810294c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 810294e:	687b      	ldr	r3, [r7, #4]
 8102950:	4a20      	ldr	r2, [pc, #128]	; (81029d4 <HAL_GPIO_Init+0x240>)
 8102952:	4293      	cmp	r3, r2
 8102954:	d052      	beq.n	81029fc <HAL_GPIO_Init+0x268>
 8102956:	687b      	ldr	r3, [r7, #4]
 8102958:	4a1f      	ldr	r2, [pc, #124]	; (81029d8 <HAL_GPIO_Init+0x244>)
 810295a:	4293      	cmp	r3, r2
 810295c:	d031      	beq.n	81029c2 <HAL_GPIO_Init+0x22e>
 810295e:	687b      	ldr	r3, [r7, #4]
 8102960:	4a1e      	ldr	r2, [pc, #120]	; (81029dc <HAL_GPIO_Init+0x248>)
 8102962:	4293      	cmp	r3, r2
 8102964:	d02b      	beq.n	81029be <HAL_GPIO_Init+0x22a>
 8102966:	687b      	ldr	r3, [r7, #4]
 8102968:	4a1d      	ldr	r2, [pc, #116]	; (81029e0 <HAL_GPIO_Init+0x24c>)
 810296a:	4293      	cmp	r3, r2
 810296c:	d025      	beq.n	81029ba <HAL_GPIO_Init+0x226>
 810296e:	687b      	ldr	r3, [r7, #4]
 8102970:	4a1c      	ldr	r2, [pc, #112]	; (81029e4 <HAL_GPIO_Init+0x250>)
 8102972:	4293      	cmp	r3, r2
 8102974:	d01f      	beq.n	81029b6 <HAL_GPIO_Init+0x222>
 8102976:	687b      	ldr	r3, [r7, #4]
 8102978:	4a1b      	ldr	r2, [pc, #108]	; (81029e8 <HAL_GPIO_Init+0x254>)
 810297a:	4293      	cmp	r3, r2
 810297c:	d019      	beq.n	81029b2 <HAL_GPIO_Init+0x21e>
 810297e:	687b      	ldr	r3, [r7, #4]
 8102980:	4a1a      	ldr	r2, [pc, #104]	; (81029ec <HAL_GPIO_Init+0x258>)
 8102982:	4293      	cmp	r3, r2
 8102984:	d013      	beq.n	81029ae <HAL_GPIO_Init+0x21a>
 8102986:	687b      	ldr	r3, [r7, #4]
 8102988:	4a19      	ldr	r2, [pc, #100]	; (81029f0 <HAL_GPIO_Init+0x25c>)
 810298a:	4293      	cmp	r3, r2
 810298c:	d00d      	beq.n	81029aa <HAL_GPIO_Init+0x216>
 810298e:	687b      	ldr	r3, [r7, #4]
 8102990:	4a18      	ldr	r2, [pc, #96]	; (81029f4 <HAL_GPIO_Init+0x260>)
 8102992:	4293      	cmp	r3, r2
 8102994:	d007      	beq.n	81029a6 <HAL_GPIO_Init+0x212>
 8102996:	687b      	ldr	r3, [r7, #4]
 8102998:	4a17      	ldr	r2, [pc, #92]	; (81029f8 <HAL_GPIO_Init+0x264>)
 810299a:	4293      	cmp	r3, r2
 810299c:	d101      	bne.n	81029a2 <HAL_GPIO_Init+0x20e>
 810299e:	2309      	movs	r3, #9
 81029a0:	e02d      	b.n	81029fe <HAL_GPIO_Init+0x26a>
 81029a2:	230a      	movs	r3, #10
 81029a4:	e02b      	b.n	81029fe <HAL_GPIO_Init+0x26a>
 81029a6:	2308      	movs	r3, #8
 81029a8:	e029      	b.n	81029fe <HAL_GPIO_Init+0x26a>
 81029aa:	2307      	movs	r3, #7
 81029ac:	e027      	b.n	81029fe <HAL_GPIO_Init+0x26a>
 81029ae:	2306      	movs	r3, #6
 81029b0:	e025      	b.n	81029fe <HAL_GPIO_Init+0x26a>
 81029b2:	2305      	movs	r3, #5
 81029b4:	e023      	b.n	81029fe <HAL_GPIO_Init+0x26a>
 81029b6:	2304      	movs	r3, #4
 81029b8:	e021      	b.n	81029fe <HAL_GPIO_Init+0x26a>
 81029ba:	2303      	movs	r3, #3
 81029bc:	e01f      	b.n	81029fe <HAL_GPIO_Init+0x26a>
 81029be:	2302      	movs	r3, #2
 81029c0:	e01d      	b.n	81029fe <HAL_GPIO_Init+0x26a>
 81029c2:	2301      	movs	r3, #1
 81029c4:	e01b      	b.n	81029fe <HAL_GPIO_Init+0x26a>
 81029c6:	bf00      	nop
 81029c8:	580000c0 	.word	0x580000c0
 81029cc:	58024400 	.word	0x58024400
 81029d0:	58000400 	.word	0x58000400
 81029d4:	58020000 	.word	0x58020000
 81029d8:	58020400 	.word	0x58020400
 81029dc:	58020800 	.word	0x58020800
 81029e0:	58020c00 	.word	0x58020c00
 81029e4:	58021000 	.word	0x58021000
 81029e8:	58021400 	.word	0x58021400
 81029ec:	58021800 	.word	0x58021800
 81029f0:	58021c00 	.word	0x58021c00
 81029f4:	58022000 	.word	0x58022000
 81029f8:	58022400 	.word	0x58022400
 81029fc:	2300      	movs	r3, #0
 81029fe:	69fa      	ldr	r2, [r7, #28]
 8102a00:	f002 0203 	and.w	r2, r2, #3
 8102a04:	0092      	lsls	r2, r2, #2
 8102a06:	4093      	lsls	r3, r2
 8102a08:	69ba      	ldr	r2, [r7, #24]
 8102a0a:	4313      	orrs	r3, r2
 8102a0c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8102a0e:	4938      	ldr	r1, [pc, #224]	; (8102af0 <HAL_GPIO_Init+0x35c>)
 8102a10:	69fb      	ldr	r3, [r7, #28]
 8102a12:	089b      	lsrs	r3, r3, #2
 8102a14:	3302      	adds	r3, #2
 8102a16:	69ba      	ldr	r2, [r7, #24]
 8102a18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8102a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8102a20:	681b      	ldr	r3, [r3, #0]
 8102a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102a24:	693b      	ldr	r3, [r7, #16]
 8102a26:	43db      	mvns	r3, r3
 8102a28:	69ba      	ldr	r2, [r7, #24]
 8102a2a:	4013      	ands	r3, r2
 8102a2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8102a2e:	683b      	ldr	r3, [r7, #0]
 8102a30:	685b      	ldr	r3, [r3, #4]
 8102a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8102a36:	2b00      	cmp	r3, #0
 8102a38:	d003      	beq.n	8102a42 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8102a3a:	69ba      	ldr	r2, [r7, #24]
 8102a3c:	693b      	ldr	r3, [r7, #16]
 8102a3e:	4313      	orrs	r3, r2
 8102a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8102a42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8102a46:	69bb      	ldr	r3, [r7, #24]
 8102a48:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8102a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8102a4e:	685b      	ldr	r3, [r3, #4]
 8102a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102a52:	693b      	ldr	r3, [r7, #16]
 8102a54:	43db      	mvns	r3, r3
 8102a56:	69ba      	ldr	r2, [r7, #24]
 8102a58:	4013      	ands	r3, r2
 8102a5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8102a5c:	683b      	ldr	r3, [r7, #0]
 8102a5e:	685b      	ldr	r3, [r3, #4]
 8102a60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8102a64:	2b00      	cmp	r3, #0
 8102a66:	d003      	beq.n	8102a70 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8102a68:	69ba      	ldr	r2, [r7, #24]
 8102a6a:	693b      	ldr	r3, [r7, #16]
 8102a6c:	4313      	orrs	r3, r2
 8102a6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8102a70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8102a74:	69bb      	ldr	r3, [r7, #24]
 8102a76:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8102a78:	697b      	ldr	r3, [r7, #20]
 8102a7a:	685b      	ldr	r3, [r3, #4]
 8102a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102a7e:	693b      	ldr	r3, [r7, #16]
 8102a80:	43db      	mvns	r3, r3
 8102a82:	69ba      	ldr	r2, [r7, #24]
 8102a84:	4013      	ands	r3, r2
 8102a86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8102a88:	683b      	ldr	r3, [r7, #0]
 8102a8a:	685b      	ldr	r3, [r3, #4]
 8102a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8102a90:	2b00      	cmp	r3, #0
 8102a92:	d003      	beq.n	8102a9c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8102a94:	69ba      	ldr	r2, [r7, #24]
 8102a96:	693b      	ldr	r3, [r7, #16]
 8102a98:	4313      	orrs	r3, r2
 8102a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8102a9c:	697b      	ldr	r3, [r7, #20]
 8102a9e:	69ba      	ldr	r2, [r7, #24]
 8102aa0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8102aa2:	697b      	ldr	r3, [r7, #20]
 8102aa4:	681b      	ldr	r3, [r3, #0]
 8102aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102aa8:	693b      	ldr	r3, [r7, #16]
 8102aaa:	43db      	mvns	r3, r3
 8102aac:	69ba      	ldr	r2, [r7, #24]
 8102aae:	4013      	ands	r3, r2
 8102ab0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8102ab2:	683b      	ldr	r3, [r7, #0]
 8102ab4:	685b      	ldr	r3, [r3, #4]
 8102ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8102aba:	2b00      	cmp	r3, #0
 8102abc:	d003      	beq.n	8102ac6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8102abe:	69ba      	ldr	r2, [r7, #24]
 8102ac0:	693b      	ldr	r3, [r7, #16]
 8102ac2:	4313      	orrs	r3, r2
 8102ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8102ac6:	697b      	ldr	r3, [r7, #20]
 8102ac8:	69ba      	ldr	r2, [r7, #24]
 8102aca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8102acc:	69fb      	ldr	r3, [r7, #28]
 8102ace:	3301      	adds	r3, #1
 8102ad0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8102ad2:	683b      	ldr	r3, [r7, #0]
 8102ad4:	681a      	ldr	r2, [r3, #0]
 8102ad6:	69fb      	ldr	r3, [r7, #28]
 8102ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8102adc:	2b00      	cmp	r3, #0
 8102ade:	f47f ae63 	bne.w	81027a8 <HAL_GPIO_Init+0x14>
  }
}
 8102ae2:	bf00      	nop
 8102ae4:	bf00      	nop
 8102ae6:	3724      	adds	r7, #36	; 0x24
 8102ae8:	46bd      	mov	sp, r7
 8102aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102aee:	4770      	bx	lr
 8102af0:	58000400 	.word	0x58000400

08102af4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8102af4:	b480      	push	{r7}
 8102af6:	b083      	sub	sp, #12
 8102af8:	af00      	add	r7, sp, #0
 8102afa:	6078      	str	r0, [r7, #4]
 8102afc:	460b      	mov	r3, r1
 8102afe:	807b      	strh	r3, [r7, #2]
 8102b00:	4613      	mov	r3, r2
 8102b02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8102b04:	787b      	ldrb	r3, [r7, #1]
 8102b06:	2b00      	cmp	r3, #0
 8102b08:	d003      	beq.n	8102b12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8102b0a:	887a      	ldrh	r2, [r7, #2]
 8102b0c:	687b      	ldr	r3, [r7, #4]
 8102b0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8102b10:	e003      	b.n	8102b1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8102b12:	887b      	ldrh	r3, [r7, #2]
 8102b14:	041a      	lsls	r2, r3, #16
 8102b16:	687b      	ldr	r3, [r7, #4]
 8102b18:	619a      	str	r2, [r3, #24]
}
 8102b1a:	bf00      	nop
 8102b1c:	370c      	adds	r7, #12
 8102b1e:	46bd      	mov	sp, r7
 8102b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b24:	4770      	bx	lr

08102b26 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8102b26:	b480      	push	{r7}
 8102b28:	b085      	sub	sp, #20
 8102b2a:	af00      	add	r7, sp, #0
 8102b2c:	6078      	str	r0, [r7, #4]
 8102b2e:	460b      	mov	r3, r1
 8102b30:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8102b32:	687b      	ldr	r3, [r7, #4]
 8102b34:	695b      	ldr	r3, [r3, #20]
 8102b36:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8102b38:	887a      	ldrh	r2, [r7, #2]
 8102b3a:	68fb      	ldr	r3, [r7, #12]
 8102b3c:	4013      	ands	r3, r2
 8102b3e:	041a      	lsls	r2, r3, #16
 8102b40:	68fb      	ldr	r3, [r7, #12]
 8102b42:	43d9      	mvns	r1, r3
 8102b44:	887b      	ldrh	r3, [r7, #2]
 8102b46:	400b      	ands	r3, r1
 8102b48:	431a      	orrs	r2, r3
 8102b4a:	687b      	ldr	r3, [r7, #4]
 8102b4c:	619a      	str	r2, [r3, #24]
}
 8102b4e:	bf00      	nop
 8102b50:	3714      	adds	r7, #20
 8102b52:	46bd      	mov	sp, r7
 8102b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b58:	4770      	bx	lr

08102b5a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8102b5a:	b580      	push	{r7, lr}
 8102b5c:	b082      	sub	sp, #8
 8102b5e:	af00      	add	r7, sp, #0
 8102b60:	4603      	mov	r3, r0
 8102b62:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 8102b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8102b68:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8102b6c:	88fb      	ldrh	r3, [r7, #6]
 8102b6e:	4013      	ands	r3, r2
 8102b70:	2b00      	cmp	r3, #0
 8102b72:	d008      	beq.n	8102b86 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 8102b74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8102b78:	88fb      	ldrh	r3, [r7, #6]
 8102b7a:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8102b7e:	88fb      	ldrh	r3, [r7, #6]
 8102b80:	4618      	mov	r0, r3
 8102b82:	f7fe fa91 	bl	81010a8 <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 8102b86:	bf00      	nop
 8102b88:	3708      	adds	r7, #8
 8102b8a:	46bd      	mov	sp, r7
 8102b8c:	bd80      	pop	{r7, pc}
	...

08102b90 <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
 8102b90:	b480      	push	{r7}
 8102b92:	b083      	sub	sp, #12
 8102b94:	af00      	add	r7, sp, #0
 8102b96:	6078      	str	r0, [r7, #4]
 8102b98:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
 8102b9a:	490e      	ldr	r1, [pc, #56]	; (8102bd4 <HAL_HSEM_Take+0x44>)
 8102b9c:	683b      	ldr	r3, [r7, #0]
 8102b9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8102ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8102ba6:	687a      	ldr	r2, [r7, #4]
 8102ba8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
 8102bac:	4a09      	ldr	r2, [pc, #36]	; (8102bd4 <HAL_HSEM_Take+0x44>)
 8102bae:	687b      	ldr	r3, [r7, #4]
 8102bb0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8102bb4:	683b      	ldr	r3, [r7, #0]
 8102bb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8102bba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8102bbe:	429a      	cmp	r2, r3
 8102bc0:	d101      	bne.n	8102bc6 <HAL_HSEM_Take+0x36>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
 8102bc2:	2300      	movs	r3, #0
 8102bc4:	e000      	b.n	8102bc8 <HAL_HSEM_Take+0x38>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
 8102bc6:	2301      	movs	r3, #1
}
 8102bc8:	4618      	mov	r0, r3
 8102bca:	370c      	adds	r7, #12
 8102bcc:	46bd      	mov	sp, r7
 8102bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102bd2:	4770      	bx	lr
 8102bd4:	58026400 	.word	0x58026400

08102bd8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8102bd8:	b480      	push	{r7}
 8102bda:	b083      	sub	sp, #12
 8102bdc:	af00      	add	r7, sp, #0
 8102bde:	6078      	str	r0, [r7, #4]
 8102be0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8102be2:	4906      	ldr	r1, [pc, #24]	; (8102bfc <HAL_HSEM_Release+0x24>)
 8102be4:	683b      	ldr	r3, [r7, #0]
 8102be6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8102bea:	687b      	ldr	r3, [r7, #4]
 8102bec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8102bf0:	bf00      	nop
 8102bf2:	370c      	adds	r7, #12
 8102bf4:	46bd      	mov	sp, r7
 8102bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102bfa:	4770      	bx	lr
 8102bfc:	58026400 	.word	0x58026400

08102c00 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8102c00:	b480      	push	{r7}
 8102c02:	b083      	sub	sp, #12
 8102c04:	af00      	add	r7, sp, #0
 8102c06:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8102c08:	4b05      	ldr	r3, [pc, #20]	; (8102c20 <HAL_HSEM_ActivateNotification+0x20>)
 8102c0a:	681a      	ldr	r2, [r3, #0]
 8102c0c:	4904      	ldr	r1, [pc, #16]	; (8102c20 <HAL_HSEM_ActivateNotification+0x20>)
 8102c0e:	687b      	ldr	r3, [r7, #4]
 8102c10:	4313      	orrs	r3, r2
 8102c12:	600b      	str	r3, [r1, #0]
#endif
}
 8102c14:	bf00      	nop
 8102c16:	370c      	adds	r7, #12
 8102c18:	46bd      	mov	sp, r7
 8102c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c1e:	4770      	bx	lr
 8102c20:	58026510 	.word	0x58026510

08102c24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8102c24:	b580      	push	{r7, lr}
 8102c26:	b082      	sub	sp, #8
 8102c28:	af00      	add	r7, sp, #0
 8102c2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8102c2c:	687b      	ldr	r3, [r7, #4]
 8102c2e:	2b00      	cmp	r3, #0
 8102c30:	d101      	bne.n	8102c36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8102c32:	2301      	movs	r3, #1
 8102c34:	e081      	b.n	8102d3a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8102c36:	687b      	ldr	r3, [r7, #4]
 8102c38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102c3c:	b2db      	uxtb	r3, r3
 8102c3e:	2b00      	cmp	r3, #0
 8102c40:	d106      	bne.n	8102c50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8102c42:	687b      	ldr	r3, [r7, #4]
 8102c44:	2200      	movs	r2, #0
 8102c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8102c4a:	6878      	ldr	r0, [r7, #4]
 8102c4c:	f7fe fa7c 	bl	8101148 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8102c50:	687b      	ldr	r3, [r7, #4]
 8102c52:	2224      	movs	r2, #36	; 0x24
 8102c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8102c58:	687b      	ldr	r3, [r7, #4]
 8102c5a:	681b      	ldr	r3, [r3, #0]
 8102c5c:	681a      	ldr	r2, [r3, #0]
 8102c5e:	687b      	ldr	r3, [r7, #4]
 8102c60:	681b      	ldr	r3, [r3, #0]
 8102c62:	f022 0201 	bic.w	r2, r2, #1
 8102c66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8102c68:	687b      	ldr	r3, [r7, #4]
 8102c6a:	685a      	ldr	r2, [r3, #4]
 8102c6c:	687b      	ldr	r3, [r7, #4]
 8102c6e:	681b      	ldr	r3, [r3, #0]
 8102c70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8102c74:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8102c76:	687b      	ldr	r3, [r7, #4]
 8102c78:	681b      	ldr	r3, [r3, #0]
 8102c7a:	689a      	ldr	r2, [r3, #8]
 8102c7c:	687b      	ldr	r3, [r7, #4]
 8102c7e:	681b      	ldr	r3, [r3, #0]
 8102c80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8102c84:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8102c86:	687b      	ldr	r3, [r7, #4]
 8102c88:	68db      	ldr	r3, [r3, #12]
 8102c8a:	2b01      	cmp	r3, #1
 8102c8c:	d107      	bne.n	8102c9e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8102c8e:	687b      	ldr	r3, [r7, #4]
 8102c90:	689a      	ldr	r2, [r3, #8]
 8102c92:	687b      	ldr	r3, [r7, #4]
 8102c94:	681b      	ldr	r3, [r3, #0]
 8102c96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8102c9a:	609a      	str	r2, [r3, #8]
 8102c9c:	e006      	b.n	8102cac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8102c9e:	687b      	ldr	r3, [r7, #4]
 8102ca0:	689a      	ldr	r2, [r3, #8]
 8102ca2:	687b      	ldr	r3, [r7, #4]
 8102ca4:	681b      	ldr	r3, [r3, #0]
 8102ca6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8102caa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8102cac:	687b      	ldr	r3, [r7, #4]
 8102cae:	68db      	ldr	r3, [r3, #12]
 8102cb0:	2b02      	cmp	r3, #2
 8102cb2:	d104      	bne.n	8102cbe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8102cb4:	687b      	ldr	r3, [r7, #4]
 8102cb6:	681b      	ldr	r3, [r3, #0]
 8102cb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8102cbc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8102cbe:	687b      	ldr	r3, [r7, #4]
 8102cc0:	681b      	ldr	r3, [r3, #0]
 8102cc2:	685b      	ldr	r3, [r3, #4]
 8102cc4:	687a      	ldr	r2, [r7, #4]
 8102cc6:	6812      	ldr	r2, [r2, #0]
 8102cc8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8102ccc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8102cd0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8102cd2:	687b      	ldr	r3, [r7, #4]
 8102cd4:	681b      	ldr	r3, [r3, #0]
 8102cd6:	68da      	ldr	r2, [r3, #12]
 8102cd8:	687b      	ldr	r3, [r7, #4]
 8102cda:	681b      	ldr	r3, [r3, #0]
 8102cdc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8102ce0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8102ce2:	687b      	ldr	r3, [r7, #4]
 8102ce4:	691a      	ldr	r2, [r3, #16]
 8102ce6:	687b      	ldr	r3, [r7, #4]
 8102ce8:	695b      	ldr	r3, [r3, #20]
 8102cea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8102cee:	687b      	ldr	r3, [r7, #4]
 8102cf0:	699b      	ldr	r3, [r3, #24]
 8102cf2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8102cf4:	687b      	ldr	r3, [r7, #4]
 8102cf6:	681b      	ldr	r3, [r3, #0]
 8102cf8:	430a      	orrs	r2, r1
 8102cfa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8102cfc:	687b      	ldr	r3, [r7, #4]
 8102cfe:	69d9      	ldr	r1, [r3, #28]
 8102d00:	687b      	ldr	r3, [r7, #4]
 8102d02:	6a1a      	ldr	r2, [r3, #32]
 8102d04:	687b      	ldr	r3, [r7, #4]
 8102d06:	681b      	ldr	r3, [r3, #0]
 8102d08:	430a      	orrs	r2, r1
 8102d0a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8102d0c:	687b      	ldr	r3, [r7, #4]
 8102d0e:	681b      	ldr	r3, [r3, #0]
 8102d10:	681a      	ldr	r2, [r3, #0]
 8102d12:	687b      	ldr	r3, [r7, #4]
 8102d14:	681b      	ldr	r3, [r3, #0]
 8102d16:	f042 0201 	orr.w	r2, r2, #1
 8102d1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8102d1c:	687b      	ldr	r3, [r7, #4]
 8102d1e:	2200      	movs	r2, #0
 8102d20:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8102d22:	687b      	ldr	r3, [r7, #4]
 8102d24:	2220      	movs	r2, #32
 8102d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8102d2a:	687b      	ldr	r3, [r7, #4]
 8102d2c:	2200      	movs	r2, #0
 8102d2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8102d30:	687b      	ldr	r3, [r7, #4]
 8102d32:	2200      	movs	r2, #0
 8102d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8102d38:	2300      	movs	r3, #0
}
 8102d3a:	4618      	mov	r0, r3
 8102d3c:	3708      	adds	r7, #8
 8102d3e:	46bd      	mov	sp, r7
 8102d40:	bd80      	pop	{r7, pc}
	...

08102d44 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8102d44:	b580      	push	{r7, lr}
 8102d46:	b088      	sub	sp, #32
 8102d48:	af02      	add	r7, sp, #8
 8102d4a:	60f8      	str	r0, [r7, #12]
 8102d4c:	4608      	mov	r0, r1
 8102d4e:	4611      	mov	r1, r2
 8102d50:	461a      	mov	r2, r3
 8102d52:	4603      	mov	r3, r0
 8102d54:	817b      	strh	r3, [r7, #10]
 8102d56:	460b      	mov	r3, r1
 8102d58:	813b      	strh	r3, [r7, #8]
 8102d5a:	4613      	mov	r3, r2
 8102d5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102d5e:	68fb      	ldr	r3, [r7, #12]
 8102d60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102d64:	b2db      	uxtb	r3, r3
 8102d66:	2b20      	cmp	r3, #32
 8102d68:	f040 80fd 	bne.w	8102f66 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8102d6c:	6a3b      	ldr	r3, [r7, #32]
 8102d6e:	2b00      	cmp	r3, #0
 8102d70:	d002      	beq.n	8102d78 <HAL_I2C_Mem_Read+0x34>
 8102d72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8102d74:	2b00      	cmp	r3, #0
 8102d76:	d105      	bne.n	8102d84 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8102d78:	68fb      	ldr	r3, [r7, #12]
 8102d7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8102d7e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8102d80:	2301      	movs	r3, #1
 8102d82:	e0f1      	b.n	8102f68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102d84:	68fb      	ldr	r3, [r7, #12]
 8102d86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8102d8a:	2b01      	cmp	r3, #1
 8102d8c:	d101      	bne.n	8102d92 <HAL_I2C_Mem_Read+0x4e>
 8102d8e:	2302      	movs	r3, #2
 8102d90:	e0ea      	b.n	8102f68 <HAL_I2C_Mem_Read+0x224>
 8102d92:	68fb      	ldr	r3, [r7, #12]
 8102d94:	2201      	movs	r2, #1
 8102d96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8102d9a:	f7fe fc7d 	bl	8101698 <HAL_GetTick>
 8102d9e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8102da0:	697b      	ldr	r3, [r7, #20]
 8102da2:	9300      	str	r3, [sp, #0]
 8102da4:	2319      	movs	r3, #25
 8102da6:	2201      	movs	r2, #1
 8102da8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8102dac:	68f8      	ldr	r0, [r7, #12]
 8102dae:	f000 f95b 	bl	8103068 <I2C_WaitOnFlagUntilTimeout>
 8102db2:	4603      	mov	r3, r0
 8102db4:	2b00      	cmp	r3, #0
 8102db6:	d001      	beq.n	8102dbc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8102db8:	2301      	movs	r3, #1
 8102dba:	e0d5      	b.n	8102f68 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8102dbc:	68fb      	ldr	r3, [r7, #12]
 8102dbe:	2222      	movs	r2, #34	; 0x22
 8102dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8102dc4:	68fb      	ldr	r3, [r7, #12]
 8102dc6:	2240      	movs	r2, #64	; 0x40
 8102dc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8102dcc:	68fb      	ldr	r3, [r7, #12]
 8102dce:	2200      	movs	r2, #0
 8102dd0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8102dd2:	68fb      	ldr	r3, [r7, #12]
 8102dd4:	6a3a      	ldr	r2, [r7, #32]
 8102dd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8102dd8:	68fb      	ldr	r3, [r7, #12]
 8102dda:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8102ddc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8102dde:	68fb      	ldr	r3, [r7, #12]
 8102de0:	2200      	movs	r2, #0
 8102de2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8102de4:	88f8      	ldrh	r0, [r7, #6]
 8102de6:	893a      	ldrh	r2, [r7, #8]
 8102de8:	8979      	ldrh	r1, [r7, #10]
 8102dea:	697b      	ldr	r3, [r7, #20]
 8102dec:	9301      	str	r3, [sp, #4]
 8102dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102df0:	9300      	str	r3, [sp, #0]
 8102df2:	4603      	mov	r3, r0
 8102df4:	68f8      	ldr	r0, [r7, #12]
 8102df6:	f000 f8bf 	bl	8102f78 <I2C_RequestMemoryRead>
 8102dfa:	4603      	mov	r3, r0
 8102dfc:	2b00      	cmp	r3, #0
 8102dfe:	d005      	beq.n	8102e0c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8102e00:	68fb      	ldr	r3, [r7, #12]
 8102e02:	2200      	movs	r2, #0
 8102e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8102e08:	2301      	movs	r3, #1
 8102e0a:	e0ad      	b.n	8102f68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102e0c:	68fb      	ldr	r3, [r7, #12]
 8102e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102e10:	b29b      	uxth	r3, r3
 8102e12:	2bff      	cmp	r3, #255	; 0xff
 8102e14:	d90e      	bls.n	8102e34 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8102e16:	68fb      	ldr	r3, [r7, #12]
 8102e18:	22ff      	movs	r2, #255	; 0xff
 8102e1a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8102e1c:	68fb      	ldr	r3, [r7, #12]
 8102e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102e20:	b2da      	uxtb	r2, r3
 8102e22:	8979      	ldrh	r1, [r7, #10]
 8102e24:	4b52      	ldr	r3, [pc, #328]	; (8102f70 <HAL_I2C_Mem_Read+0x22c>)
 8102e26:	9300      	str	r3, [sp, #0]
 8102e28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102e2c:	68f8      	ldr	r0, [r7, #12]
 8102e2e:	f000 fac3 	bl	81033b8 <I2C_TransferConfig>
 8102e32:	e00f      	b.n	8102e54 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8102e34:	68fb      	ldr	r3, [r7, #12]
 8102e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102e38:	b29a      	uxth	r2, r3
 8102e3a:	68fb      	ldr	r3, [r7, #12]
 8102e3c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8102e3e:	68fb      	ldr	r3, [r7, #12]
 8102e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102e42:	b2da      	uxtb	r2, r3
 8102e44:	8979      	ldrh	r1, [r7, #10]
 8102e46:	4b4a      	ldr	r3, [pc, #296]	; (8102f70 <HAL_I2C_Mem_Read+0x22c>)
 8102e48:	9300      	str	r3, [sp, #0]
 8102e4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8102e4e:	68f8      	ldr	r0, [r7, #12]
 8102e50:	f000 fab2 	bl	81033b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8102e54:	697b      	ldr	r3, [r7, #20]
 8102e56:	9300      	str	r3, [sp, #0]
 8102e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102e5a:	2200      	movs	r2, #0
 8102e5c:	2104      	movs	r1, #4
 8102e5e:	68f8      	ldr	r0, [r7, #12]
 8102e60:	f000 f902 	bl	8103068 <I2C_WaitOnFlagUntilTimeout>
 8102e64:	4603      	mov	r3, r0
 8102e66:	2b00      	cmp	r3, #0
 8102e68:	d001      	beq.n	8102e6e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8102e6a:	2301      	movs	r3, #1
 8102e6c:	e07c      	b.n	8102f68 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8102e6e:	68fb      	ldr	r3, [r7, #12]
 8102e70:	681b      	ldr	r3, [r3, #0]
 8102e72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8102e74:	68fb      	ldr	r3, [r7, #12]
 8102e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102e78:	b2d2      	uxtb	r2, r2
 8102e7a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8102e7c:	68fb      	ldr	r3, [r7, #12]
 8102e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102e80:	1c5a      	adds	r2, r3, #1
 8102e82:	68fb      	ldr	r3, [r7, #12]
 8102e84:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8102e86:	68fb      	ldr	r3, [r7, #12]
 8102e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102e8a:	3b01      	subs	r3, #1
 8102e8c:	b29a      	uxth	r2, r3
 8102e8e:	68fb      	ldr	r3, [r7, #12]
 8102e90:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8102e92:	68fb      	ldr	r3, [r7, #12]
 8102e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102e96:	b29b      	uxth	r3, r3
 8102e98:	3b01      	subs	r3, #1
 8102e9a:	b29a      	uxth	r2, r3
 8102e9c:	68fb      	ldr	r3, [r7, #12]
 8102e9e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8102ea0:	68fb      	ldr	r3, [r7, #12]
 8102ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102ea4:	b29b      	uxth	r3, r3
 8102ea6:	2b00      	cmp	r3, #0
 8102ea8:	d034      	beq.n	8102f14 <HAL_I2C_Mem_Read+0x1d0>
 8102eaa:	68fb      	ldr	r3, [r7, #12]
 8102eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102eae:	2b00      	cmp	r3, #0
 8102eb0:	d130      	bne.n	8102f14 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8102eb2:	697b      	ldr	r3, [r7, #20]
 8102eb4:	9300      	str	r3, [sp, #0]
 8102eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102eb8:	2200      	movs	r2, #0
 8102eba:	2180      	movs	r1, #128	; 0x80
 8102ebc:	68f8      	ldr	r0, [r7, #12]
 8102ebe:	f000 f8d3 	bl	8103068 <I2C_WaitOnFlagUntilTimeout>
 8102ec2:	4603      	mov	r3, r0
 8102ec4:	2b00      	cmp	r3, #0
 8102ec6:	d001      	beq.n	8102ecc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8102ec8:	2301      	movs	r3, #1
 8102eca:	e04d      	b.n	8102f68 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102ecc:	68fb      	ldr	r3, [r7, #12]
 8102ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102ed0:	b29b      	uxth	r3, r3
 8102ed2:	2bff      	cmp	r3, #255	; 0xff
 8102ed4:	d90e      	bls.n	8102ef4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8102ed6:	68fb      	ldr	r3, [r7, #12]
 8102ed8:	22ff      	movs	r2, #255	; 0xff
 8102eda:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8102edc:	68fb      	ldr	r3, [r7, #12]
 8102ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102ee0:	b2da      	uxtb	r2, r3
 8102ee2:	8979      	ldrh	r1, [r7, #10]
 8102ee4:	2300      	movs	r3, #0
 8102ee6:	9300      	str	r3, [sp, #0]
 8102ee8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102eec:	68f8      	ldr	r0, [r7, #12]
 8102eee:	f000 fa63 	bl	81033b8 <I2C_TransferConfig>
 8102ef2:	e00f      	b.n	8102f14 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8102ef4:	68fb      	ldr	r3, [r7, #12]
 8102ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102ef8:	b29a      	uxth	r2, r3
 8102efa:	68fb      	ldr	r3, [r7, #12]
 8102efc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8102efe:	68fb      	ldr	r3, [r7, #12]
 8102f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102f02:	b2da      	uxtb	r2, r3
 8102f04:	8979      	ldrh	r1, [r7, #10]
 8102f06:	2300      	movs	r3, #0
 8102f08:	9300      	str	r3, [sp, #0]
 8102f0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8102f0e:	68f8      	ldr	r0, [r7, #12]
 8102f10:	f000 fa52 	bl	81033b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8102f14:	68fb      	ldr	r3, [r7, #12]
 8102f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102f18:	b29b      	uxth	r3, r3
 8102f1a:	2b00      	cmp	r3, #0
 8102f1c:	d19a      	bne.n	8102e54 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8102f1e:	697a      	ldr	r2, [r7, #20]
 8102f20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8102f22:	68f8      	ldr	r0, [r7, #12]
 8102f24:	f000 f920 	bl	8103168 <I2C_WaitOnSTOPFlagUntilTimeout>
 8102f28:	4603      	mov	r3, r0
 8102f2a:	2b00      	cmp	r3, #0
 8102f2c:	d001      	beq.n	8102f32 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8102f2e:	2301      	movs	r3, #1
 8102f30:	e01a      	b.n	8102f68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102f32:	68fb      	ldr	r3, [r7, #12]
 8102f34:	681b      	ldr	r3, [r3, #0]
 8102f36:	2220      	movs	r2, #32
 8102f38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8102f3a:	68fb      	ldr	r3, [r7, #12]
 8102f3c:	681b      	ldr	r3, [r3, #0]
 8102f3e:	6859      	ldr	r1, [r3, #4]
 8102f40:	68fb      	ldr	r3, [r7, #12]
 8102f42:	681a      	ldr	r2, [r3, #0]
 8102f44:	4b0b      	ldr	r3, [pc, #44]	; (8102f74 <HAL_I2C_Mem_Read+0x230>)
 8102f46:	400b      	ands	r3, r1
 8102f48:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8102f4a:	68fb      	ldr	r3, [r7, #12]
 8102f4c:	2220      	movs	r2, #32
 8102f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8102f52:	68fb      	ldr	r3, [r7, #12]
 8102f54:	2200      	movs	r2, #0
 8102f56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102f5a:	68fb      	ldr	r3, [r7, #12]
 8102f5c:	2200      	movs	r2, #0
 8102f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8102f62:	2300      	movs	r3, #0
 8102f64:	e000      	b.n	8102f68 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8102f66:	2302      	movs	r3, #2
  }
}
 8102f68:	4618      	mov	r0, r3
 8102f6a:	3718      	adds	r7, #24
 8102f6c:	46bd      	mov	sp, r7
 8102f6e:	bd80      	pop	{r7, pc}
 8102f70:	80002400 	.word	0x80002400
 8102f74:	fe00e800 	.word	0xfe00e800

08102f78 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8102f78:	b580      	push	{r7, lr}
 8102f7a:	b086      	sub	sp, #24
 8102f7c:	af02      	add	r7, sp, #8
 8102f7e:	60f8      	str	r0, [r7, #12]
 8102f80:	4608      	mov	r0, r1
 8102f82:	4611      	mov	r1, r2
 8102f84:	461a      	mov	r2, r3
 8102f86:	4603      	mov	r3, r0
 8102f88:	817b      	strh	r3, [r7, #10]
 8102f8a:	460b      	mov	r3, r1
 8102f8c:	813b      	strh	r3, [r7, #8]
 8102f8e:	4613      	mov	r3, r2
 8102f90:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8102f92:	88fb      	ldrh	r3, [r7, #6]
 8102f94:	b2da      	uxtb	r2, r3
 8102f96:	8979      	ldrh	r1, [r7, #10]
 8102f98:	4b20      	ldr	r3, [pc, #128]	; (810301c <I2C_RequestMemoryRead+0xa4>)
 8102f9a:	9300      	str	r3, [sp, #0]
 8102f9c:	2300      	movs	r3, #0
 8102f9e:	68f8      	ldr	r0, [r7, #12]
 8102fa0:	f000 fa0a 	bl	81033b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8102fa4:	69fa      	ldr	r2, [r7, #28]
 8102fa6:	69b9      	ldr	r1, [r7, #24]
 8102fa8:	68f8      	ldr	r0, [r7, #12]
 8102faa:	f000 f89d 	bl	81030e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8102fae:	4603      	mov	r3, r0
 8102fb0:	2b00      	cmp	r3, #0
 8102fb2:	d001      	beq.n	8102fb8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8102fb4:	2301      	movs	r3, #1
 8102fb6:	e02c      	b.n	8103012 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8102fb8:	88fb      	ldrh	r3, [r7, #6]
 8102fba:	2b01      	cmp	r3, #1
 8102fbc:	d105      	bne.n	8102fca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8102fbe:	893b      	ldrh	r3, [r7, #8]
 8102fc0:	b2da      	uxtb	r2, r3
 8102fc2:	68fb      	ldr	r3, [r7, #12]
 8102fc4:	681b      	ldr	r3, [r3, #0]
 8102fc6:	629a      	str	r2, [r3, #40]	; 0x28
 8102fc8:	e015      	b.n	8102ff6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8102fca:	893b      	ldrh	r3, [r7, #8]
 8102fcc:	0a1b      	lsrs	r3, r3, #8
 8102fce:	b29b      	uxth	r3, r3
 8102fd0:	b2da      	uxtb	r2, r3
 8102fd2:	68fb      	ldr	r3, [r7, #12]
 8102fd4:	681b      	ldr	r3, [r3, #0]
 8102fd6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8102fd8:	69fa      	ldr	r2, [r7, #28]
 8102fda:	69b9      	ldr	r1, [r7, #24]
 8102fdc:	68f8      	ldr	r0, [r7, #12]
 8102fde:	f000 f883 	bl	81030e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8102fe2:	4603      	mov	r3, r0
 8102fe4:	2b00      	cmp	r3, #0
 8102fe6:	d001      	beq.n	8102fec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8102fe8:	2301      	movs	r3, #1
 8102fea:	e012      	b.n	8103012 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8102fec:	893b      	ldrh	r3, [r7, #8]
 8102fee:	b2da      	uxtb	r2, r3
 8102ff0:	68fb      	ldr	r3, [r7, #12]
 8102ff2:	681b      	ldr	r3, [r3, #0]
 8102ff4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8102ff6:	69fb      	ldr	r3, [r7, #28]
 8102ff8:	9300      	str	r3, [sp, #0]
 8102ffa:	69bb      	ldr	r3, [r7, #24]
 8102ffc:	2200      	movs	r2, #0
 8102ffe:	2140      	movs	r1, #64	; 0x40
 8103000:	68f8      	ldr	r0, [r7, #12]
 8103002:	f000 f831 	bl	8103068 <I2C_WaitOnFlagUntilTimeout>
 8103006:	4603      	mov	r3, r0
 8103008:	2b00      	cmp	r3, #0
 810300a:	d001      	beq.n	8103010 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 810300c:	2301      	movs	r3, #1
 810300e:	e000      	b.n	8103012 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8103010:	2300      	movs	r3, #0
}
 8103012:	4618      	mov	r0, r3
 8103014:	3710      	adds	r7, #16
 8103016:	46bd      	mov	sp, r7
 8103018:	bd80      	pop	{r7, pc}
 810301a:	bf00      	nop
 810301c:	80002000 	.word	0x80002000

08103020 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8103020:	b480      	push	{r7}
 8103022:	b083      	sub	sp, #12
 8103024:	af00      	add	r7, sp, #0
 8103026:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8103028:	687b      	ldr	r3, [r7, #4]
 810302a:	681b      	ldr	r3, [r3, #0]
 810302c:	699b      	ldr	r3, [r3, #24]
 810302e:	f003 0302 	and.w	r3, r3, #2
 8103032:	2b02      	cmp	r3, #2
 8103034:	d103      	bne.n	810303e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8103036:	687b      	ldr	r3, [r7, #4]
 8103038:	681b      	ldr	r3, [r3, #0]
 810303a:	2200      	movs	r2, #0
 810303c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 810303e:	687b      	ldr	r3, [r7, #4]
 8103040:	681b      	ldr	r3, [r3, #0]
 8103042:	699b      	ldr	r3, [r3, #24]
 8103044:	f003 0301 	and.w	r3, r3, #1
 8103048:	2b01      	cmp	r3, #1
 810304a:	d007      	beq.n	810305c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 810304c:	687b      	ldr	r3, [r7, #4]
 810304e:	681b      	ldr	r3, [r3, #0]
 8103050:	699a      	ldr	r2, [r3, #24]
 8103052:	687b      	ldr	r3, [r7, #4]
 8103054:	681b      	ldr	r3, [r3, #0]
 8103056:	f042 0201 	orr.w	r2, r2, #1
 810305a:	619a      	str	r2, [r3, #24]
  }
}
 810305c:	bf00      	nop
 810305e:	370c      	adds	r7, #12
 8103060:	46bd      	mov	sp, r7
 8103062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103066:	4770      	bx	lr

08103068 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8103068:	b580      	push	{r7, lr}
 810306a:	b084      	sub	sp, #16
 810306c:	af00      	add	r7, sp, #0
 810306e:	60f8      	str	r0, [r7, #12]
 8103070:	60b9      	str	r1, [r7, #8]
 8103072:	603b      	str	r3, [r7, #0]
 8103074:	4613      	mov	r3, r2
 8103076:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8103078:	e022      	b.n	81030c0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810307a:	683b      	ldr	r3, [r7, #0]
 810307c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103080:	d01e      	beq.n	81030c0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8103082:	f7fe fb09 	bl	8101698 <HAL_GetTick>
 8103086:	4602      	mov	r2, r0
 8103088:	69bb      	ldr	r3, [r7, #24]
 810308a:	1ad3      	subs	r3, r2, r3
 810308c:	683a      	ldr	r2, [r7, #0]
 810308e:	429a      	cmp	r2, r3
 8103090:	d302      	bcc.n	8103098 <I2C_WaitOnFlagUntilTimeout+0x30>
 8103092:	683b      	ldr	r3, [r7, #0]
 8103094:	2b00      	cmp	r3, #0
 8103096:	d113      	bne.n	81030c0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8103098:	68fb      	ldr	r3, [r7, #12]
 810309a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810309c:	f043 0220 	orr.w	r2, r3, #32
 81030a0:	68fb      	ldr	r3, [r7, #12]
 81030a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 81030a4:	68fb      	ldr	r3, [r7, #12]
 81030a6:	2220      	movs	r2, #32
 81030a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 81030ac:	68fb      	ldr	r3, [r7, #12]
 81030ae:	2200      	movs	r2, #0
 81030b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 81030b4:	68fb      	ldr	r3, [r7, #12]
 81030b6:	2200      	movs	r2, #0
 81030b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 81030bc:	2301      	movs	r3, #1
 81030be:	e00f      	b.n	81030e0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 81030c0:	68fb      	ldr	r3, [r7, #12]
 81030c2:	681b      	ldr	r3, [r3, #0]
 81030c4:	699a      	ldr	r2, [r3, #24]
 81030c6:	68bb      	ldr	r3, [r7, #8]
 81030c8:	4013      	ands	r3, r2
 81030ca:	68ba      	ldr	r2, [r7, #8]
 81030cc:	429a      	cmp	r2, r3
 81030ce:	bf0c      	ite	eq
 81030d0:	2301      	moveq	r3, #1
 81030d2:	2300      	movne	r3, #0
 81030d4:	b2db      	uxtb	r3, r3
 81030d6:	461a      	mov	r2, r3
 81030d8:	79fb      	ldrb	r3, [r7, #7]
 81030da:	429a      	cmp	r2, r3
 81030dc:	d0cd      	beq.n	810307a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 81030de:	2300      	movs	r3, #0
}
 81030e0:	4618      	mov	r0, r3
 81030e2:	3710      	adds	r7, #16
 81030e4:	46bd      	mov	sp, r7
 81030e6:	bd80      	pop	{r7, pc}

081030e8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 81030e8:	b580      	push	{r7, lr}
 81030ea:	b084      	sub	sp, #16
 81030ec:	af00      	add	r7, sp, #0
 81030ee:	60f8      	str	r0, [r7, #12]
 81030f0:	60b9      	str	r1, [r7, #8]
 81030f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 81030f4:	e02c      	b.n	8103150 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 81030f6:	687a      	ldr	r2, [r7, #4]
 81030f8:	68b9      	ldr	r1, [r7, #8]
 81030fa:	68f8      	ldr	r0, [r7, #12]
 81030fc:	f000 f870 	bl	81031e0 <I2C_IsErrorOccurred>
 8103100:	4603      	mov	r3, r0
 8103102:	2b00      	cmp	r3, #0
 8103104:	d001      	beq.n	810310a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8103106:	2301      	movs	r3, #1
 8103108:	e02a      	b.n	8103160 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810310a:	68bb      	ldr	r3, [r7, #8]
 810310c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103110:	d01e      	beq.n	8103150 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8103112:	f7fe fac1 	bl	8101698 <HAL_GetTick>
 8103116:	4602      	mov	r2, r0
 8103118:	687b      	ldr	r3, [r7, #4]
 810311a:	1ad3      	subs	r3, r2, r3
 810311c:	68ba      	ldr	r2, [r7, #8]
 810311e:	429a      	cmp	r2, r3
 8103120:	d302      	bcc.n	8103128 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8103122:	68bb      	ldr	r3, [r7, #8]
 8103124:	2b00      	cmp	r3, #0
 8103126:	d113      	bne.n	8103150 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8103128:	68fb      	ldr	r3, [r7, #12]
 810312a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810312c:	f043 0220 	orr.w	r2, r3, #32
 8103130:	68fb      	ldr	r3, [r7, #12]
 8103132:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8103134:	68fb      	ldr	r3, [r7, #12]
 8103136:	2220      	movs	r2, #32
 8103138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 810313c:	68fb      	ldr	r3, [r7, #12]
 810313e:	2200      	movs	r2, #0
 8103140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8103144:	68fb      	ldr	r3, [r7, #12]
 8103146:	2200      	movs	r2, #0
 8103148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 810314c:	2301      	movs	r3, #1
 810314e:	e007      	b.n	8103160 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8103150:	68fb      	ldr	r3, [r7, #12]
 8103152:	681b      	ldr	r3, [r3, #0]
 8103154:	699b      	ldr	r3, [r3, #24]
 8103156:	f003 0302 	and.w	r3, r3, #2
 810315a:	2b02      	cmp	r3, #2
 810315c:	d1cb      	bne.n	81030f6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 810315e:	2300      	movs	r3, #0
}
 8103160:	4618      	mov	r0, r3
 8103162:	3710      	adds	r7, #16
 8103164:	46bd      	mov	sp, r7
 8103166:	bd80      	pop	{r7, pc}

08103168 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8103168:	b580      	push	{r7, lr}
 810316a:	b084      	sub	sp, #16
 810316c:	af00      	add	r7, sp, #0
 810316e:	60f8      	str	r0, [r7, #12]
 8103170:	60b9      	str	r1, [r7, #8]
 8103172:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8103174:	e028      	b.n	81031c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8103176:	687a      	ldr	r2, [r7, #4]
 8103178:	68b9      	ldr	r1, [r7, #8]
 810317a:	68f8      	ldr	r0, [r7, #12]
 810317c:	f000 f830 	bl	81031e0 <I2C_IsErrorOccurred>
 8103180:	4603      	mov	r3, r0
 8103182:	2b00      	cmp	r3, #0
 8103184:	d001      	beq.n	810318a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8103186:	2301      	movs	r3, #1
 8103188:	e026      	b.n	81031d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810318a:	f7fe fa85 	bl	8101698 <HAL_GetTick>
 810318e:	4602      	mov	r2, r0
 8103190:	687b      	ldr	r3, [r7, #4]
 8103192:	1ad3      	subs	r3, r2, r3
 8103194:	68ba      	ldr	r2, [r7, #8]
 8103196:	429a      	cmp	r2, r3
 8103198:	d302      	bcc.n	81031a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 810319a:	68bb      	ldr	r3, [r7, #8]
 810319c:	2b00      	cmp	r3, #0
 810319e:	d113      	bne.n	81031c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81031a0:	68fb      	ldr	r3, [r7, #12]
 81031a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81031a4:	f043 0220 	orr.w	r2, r3, #32
 81031a8:	68fb      	ldr	r3, [r7, #12]
 81031aa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 81031ac:	68fb      	ldr	r3, [r7, #12]
 81031ae:	2220      	movs	r2, #32
 81031b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 81031b4:	68fb      	ldr	r3, [r7, #12]
 81031b6:	2200      	movs	r2, #0
 81031b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 81031bc:	68fb      	ldr	r3, [r7, #12]
 81031be:	2200      	movs	r2, #0
 81031c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 81031c4:	2301      	movs	r3, #1
 81031c6:	e007      	b.n	81031d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81031c8:	68fb      	ldr	r3, [r7, #12]
 81031ca:	681b      	ldr	r3, [r3, #0]
 81031cc:	699b      	ldr	r3, [r3, #24]
 81031ce:	f003 0320 	and.w	r3, r3, #32
 81031d2:	2b20      	cmp	r3, #32
 81031d4:	d1cf      	bne.n	8103176 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 81031d6:	2300      	movs	r3, #0
}
 81031d8:	4618      	mov	r0, r3
 81031da:	3710      	adds	r7, #16
 81031dc:	46bd      	mov	sp, r7
 81031de:	bd80      	pop	{r7, pc}

081031e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 81031e0:	b580      	push	{r7, lr}
 81031e2:	b08a      	sub	sp, #40	; 0x28
 81031e4:	af00      	add	r7, sp, #0
 81031e6:	60f8      	str	r0, [r7, #12]
 81031e8:	60b9      	str	r1, [r7, #8]
 81031ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81031ec:	2300      	movs	r3, #0
 81031ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 81031f2:	68fb      	ldr	r3, [r7, #12]
 81031f4:	681b      	ldr	r3, [r3, #0]
 81031f6:	699b      	ldr	r3, [r3, #24]
 81031f8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 81031fa:	2300      	movs	r3, #0
 81031fc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 81031fe:	687b      	ldr	r3, [r7, #4]
 8103200:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8103202:	69bb      	ldr	r3, [r7, #24]
 8103204:	f003 0310 	and.w	r3, r3, #16
 8103208:	2b00      	cmp	r3, #0
 810320a:	d075      	beq.n	81032f8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 810320c:	68fb      	ldr	r3, [r7, #12]
 810320e:	681b      	ldr	r3, [r3, #0]
 8103210:	2210      	movs	r2, #16
 8103212:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8103214:	e056      	b.n	81032c4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8103216:	68bb      	ldr	r3, [r7, #8]
 8103218:	f1b3 3fff 	cmp.w	r3, #4294967295
 810321c:	d052      	beq.n	81032c4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 810321e:	f7fe fa3b 	bl	8101698 <HAL_GetTick>
 8103222:	4602      	mov	r2, r0
 8103224:	69fb      	ldr	r3, [r7, #28]
 8103226:	1ad3      	subs	r3, r2, r3
 8103228:	68ba      	ldr	r2, [r7, #8]
 810322a:	429a      	cmp	r2, r3
 810322c:	d302      	bcc.n	8103234 <I2C_IsErrorOccurred+0x54>
 810322e:	68bb      	ldr	r3, [r7, #8]
 8103230:	2b00      	cmp	r3, #0
 8103232:	d147      	bne.n	81032c4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8103234:	68fb      	ldr	r3, [r7, #12]
 8103236:	681b      	ldr	r3, [r3, #0]
 8103238:	685b      	ldr	r3, [r3, #4]
 810323a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810323e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8103240:	68fb      	ldr	r3, [r7, #12]
 8103242:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8103246:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8103248:	68fb      	ldr	r3, [r7, #12]
 810324a:	681b      	ldr	r3, [r3, #0]
 810324c:	699b      	ldr	r3, [r3, #24]
 810324e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103252:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8103256:	d12e      	bne.n	81032b6 <I2C_IsErrorOccurred+0xd6>
 8103258:	697b      	ldr	r3, [r7, #20]
 810325a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810325e:	d02a      	beq.n	81032b6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8103260:	7cfb      	ldrb	r3, [r7, #19]
 8103262:	2b20      	cmp	r3, #32
 8103264:	d027      	beq.n	81032b6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8103266:	68fb      	ldr	r3, [r7, #12]
 8103268:	681b      	ldr	r3, [r3, #0]
 810326a:	685a      	ldr	r2, [r3, #4]
 810326c:	68fb      	ldr	r3, [r7, #12]
 810326e:	681b      	ldr	r3, [r3, #0]
 8103270:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8103274:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8103276:	f7fe fa0f 	bl	8101698 <HAL_GetTick>
 810327a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810327c:	e01b      	b.n	81032b6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 810327e:	f7fe fa0b 	bl	8101698 <HAL_GetTick>
 8103282:	4602      	mov	r2, r0
 8103284:	69fb      	ldr	r3, [r7, #28]
 8103286:	1ad3      	subs	r3, r2, r3
 8103288:	2b19      	cmp	r3, #25
 810328a:	d914      	bls.n	81032b6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810328c:	68fb      	ldr	r3, [r7, #12]
 810328e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103290:	f043 0220 	orr.w	r2, r3, #32
 8103294:	68fb      	ldr	r3, [r7, #12]
 8103296:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8103298:	68fb      	ldr	r3, [r7, #12]
 810329a:	2220      	movs	r2, #32
 810329c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 81032a0:	68fb      	ldr	r3, [r7, #12]
 81032a2:	2200      	movs	r2, #0
 81032a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 81032a8:	68fb      	ldr	r3, [r7, #12]
 81032aa:	2200      	movs	r2, #0
 81032ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 81032b0:	2301      	movs	r3, #1
 81032b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81032b6:	68fb      	ldr	r3, [r7, #12]
 81032b8:	681b      	ldr	r3, [r3, #0]
 81032ba:	699b      	ldr	r3, [r3, #24]
 81032bc:	f003 0320 	and.w	r3, r3, #32
 81032c0:	2b20      	cmp	r3, #32
 81032c2:	d1dc      	bne.n	810327e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 81032c4:	68fb      	ldr	r3, [r7, #12]
 81032c6:	681b      	ldr	r3, [r3, #0]
 81032c8:	699b      	ldr	r3, [r3, #24]
 81032ca:	f003 0320 	and.w	r3, r3, #32
 81032ce:	2b20      	cmp	r3, #32
 81032d0:	d003      	beq.n	81032da <I2C_IsErrorOccurred+0xfa>
 81032d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81032d6:	2b00      	cmp	r3, #0
 81032d8:	d09d      	beq.n	8103216 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 81032da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81032de:	2b00      	cmp	r3, #0
 81032e0:	d103      	bne.n	81032ea <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81032e2:	68fb      	ldr	r3, [r7, #12]
 81032e4:	681b      	ldr	r3, [r3, #0]
 81032e6:	2220      	movs	r2, #32
 81032e8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 81032ea:	6a3b      	ldr	r3, [r7, #32]
 81032ec:	f043 0304 	orr.w	r3, r3, #4
 81032f0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 81032f2:	2301      	movs	r3, #1
 81032f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 81032f8:	68fb      	ldr	r3, [r7, #12]
 81032fa:	681b      	ldr	r3, [r3, #0]
 81032fc:	699b      	ldr	r3, [r3, #24]
 81032fe:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8103300:	69bb      	ldr	r3, [r7, #24]
 8103302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103306:	2b00      	cmp	r3, #0
 8103308:	d00b      	beq.n	8103322 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 810330a:	6a3b      	ldr	r3, [r7, #32]
 810330c:	f043 0301 	orr.w	r3, r3, #1
 8103310:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8103312:	68fb      	ldr	r3, [r7, #12]
 8103314:	681b      	ldr	r3, [r3, #0]
 8103316:	f44f 7280 	mov.w	r2, #256	; 0x100
 810331a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 810331c:	2301      	movs	r3, #1
 810331e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8103322:	69bb      	ldr	r3, [r7, #24]
 8103324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8103328:	2b00      	cmp	r3, #0
 810332a:	d00b      	beq.n	8103344 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 810332c:	6a3b      	ldr	r3, [r7, #32]
 810332e:	f043 0308 	orr.w	r3, r3, #8
 8103332:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8103334:	68fb      	ldr	r3, [r7, #12]
 8103336:	681b      	ldr	r3, [r3, #0]
 8103338:	f44f 6280 	mov.w	r2, #1024	; 0x400
 810333c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 810333e:	2301      	movs	r3, #1
 8103340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8103344:	69bb      	ldr	r3, [r7, #24]
 8103346:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810334a:	2b00      	cmp	r3, #0
 810334c:	d00b      	beq.n	8103366 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 810334e:	6a3b      	ldr	r3, [r7, #32]
 8103350:	f043 0302 	orr.w	r3, r3, #2
 8103354:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8103356:	68fb      	ldr	r3, [r7, #12]
 8103358:	681b      	ldr	r3, [r3, #0]
 810335a:	f44f 7200 	mov.w	r2, #512	; 0x200
 810335e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8103360:	2301      	movs	r3, #1
 8103362:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8103366:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810336a:	2b00      	cmp	r3, #0
 810336c:	d01c      	beq.n	81033a8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 810336e:	68f8      	ldr	r0, [r7, #12]
 8103370:	f7ff fe56 	bl	8103020 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8103374:	68fb      	ldr	r3, [r7, #12]
 8103376:	681b      	ldr	r3, [r3, #0]
 8103378:	6859      	ldr	r1, [r3, #4]
 810337a:	68fb      	ldr	r3, [r7, #12]
 810337c:	681a      	ldr	r2, [r3, #0]
 810337e:	4b0d      	ldr	r3, [pc, #52]	; (81033b4 <I2C_IsErrorOccurred+0x1d4>)
 8103380:	400b      	ands	r3, r1
 8103382:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8103384:	68fb      	ldr	r3, [r7, #12]
 8103386:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8103388:	6a3b      	ldr	r3, [r7, #32]
 810338a:	431a      	orrs	r2, r3
 810338c:	68fb      	ldr	r3, [r7, #12]
 810338e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8103390:	68fb      	ldr	r3, [r7, #12]
 8103392:	2220      	movs	r2, #32
 8103394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8103398:	68fb      	ldr	r3, [r7, #12]
 810339a:	2200      	movs	r2, #0
 810339c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81033a0:	68fb      	ldr	r3, [r7, #12]
 81033a2:	2200      	movs	r2, #0
 81033a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 81033a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 81033ac:	4618      	mov	r0, r3
 81033ae:	3728      	adds	r7, #40	; 0x28
 81033b0:	46bd      	mov	sp, r7
 81033b2:	bd80      	pop	{r7, pc}
 81033b4:	fe00e800 	.word	0xfe00e800

081033b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 81033b8:	b480      	push	{r7}
 81033ba:	b087      	sub	sp, #28
 81033bc:	af00      	add	r7, sp, #0
 81033be:	60f8      	str	r0, [r7, #12]
 81033c0:	607b      	str	r3, [r7, #4]
 81033c2:	460b      	mov	r3, r1
 81033c4:	817b      	strh	r3, [r7, #10]
 81033c6:	4613      	mov	r3, r2
 81033c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81033ca:	897b      	ldrh	r3, [r7, #10]
 81033cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 81033d0:	7a7b      	ldrb	r3, [r7, #9]
 81033d2:	041b      	lsls	r3, r3, #16
 81033d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81033d8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 81033da:	687b      	ldr	r3, [r7, #4]
 81033dc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81033de:	6a3b      	ldr	r3, [r7, #32]
 81033e0:	4313      	orrs	r3, r2
 81033e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 81033e6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 81033e8:	68fb      	ldr	r3, [r7, #12]
 81033ea:	681b      	ldr	r3, [r3, #0]
 81033ec:	685a      	ldr	r2, [r3, #4]
 81033ee:	6a3b      	ldr	r3, [r7, #32]
 81033f0:	0d5b      	lsrs	r3, r3, #21
 81033f2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 81033f6:	4b08      	ldr	r3, [pc, #32]	; (8103418 <I2C_TransferConfig+0x60>)
 81033f8:	430b      	orrs	r3, r1
 81033fa:	43db      	mvns	r3, r3
 81033fc:	ea02 0103 	and.w	r1, r2, r3
 8103400:	68fb      	ldr	r3, [r7, #12]
 8103402:	681b      	ldr	r3, [r3, #0]
 8103404:	697a      	ldr	r2, [r7, #20]
 8103406:	430a      	orrs	r2, r1
 8103408:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 810340a:	bf00      	nop
 810340c:	371c      	adds	r7, #28
 810340e:	46bd      	mov	sp, r7
 8103410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103414:	4770      	bx	lr
 8103416:	bf00      	nop
 8103418:	03ff63ff 	.word	0x03ff63ff

0810341c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 810341c:	b480      	push	{r7}
 810341e:	b083      	sub	sp, #12
 8103420:	af00      	add	r7, sp, #0
 8103422:	6078      	str	r0, [r7, #4]
 8103424:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8103426:	687b      	ldr	r3, [r7, #4]
 8103428:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810342c:	b2db      	uxtb	r3, r3
 810342e:	2b20      	cmp	r3, #32
 8103430:	d138      	bne.n	81034a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8103432:	687b      	ldr	r3, [r7, #4]
 8103434:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8103438:	2b01      	cmp	r3, #1
 810343a:	d101      	bne.n	8103440 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 810343c:	2302      	movs	r3, #2
 810343e:	e032      	b.n	81034a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8103440:	687b      	ldr	r3, [r7, #4]
 8103442:	2201      	movs	r2, #1
 8103444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8103448:	687b      	ldr	r3, [r7, #4]
 810344a:	2224      	movs	r2, #36	; 0x24
 810344c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8103450:	687b      	ldr	r3, [r7, #4]
 8103452:	681b      	ldr	r3, [r3, #0]
 8103454:	681a      	ldr	r2, [r3, #0]
 8103456:	687b      	ldr	r3, [r7, #4]
 8103458:	681b      	ldr	r3, [r3, #0]
 810345a:	f022 0201 	bic.w	r2, r2, #1
 810345e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8103460:	687b      	ldr	r3, [r7, #4]
 8103462:	681b      	ldr	r3, [r3, #0]
 8103464:	681a      	ldr	r2, [r3, #0]
 8103466:	687b      	ldr	r3, [r7, #4]
 8103468:	681b      	ldr	r3, [r3, #0]
 810346a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 810346e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8103470:	687b      	ldr	r3, [r7, #4]
 8103472:	681b      	ldr	r3, [r3, #0]
 8103474:	6819      	ldr	r1, [r3, #0]
 8103476:	687b      	ldr	r3, [r7, #4]
 8103478:	681b      	ldr	r3, [r3, #0]
 810347a:	683a      	ldr	r2, [r7, #0]
 810347c:	430a      	orrs	r2, r1
 810347e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8103480:	687b      	ldr	r3, [r7, #4]
 8103482:	681b      	ldr	r3, [r3, #0]
 8103484:	681a      	ldr	r2, [r3, #0]
 8103486:	687b      	ldr	r3, [r7, #4]
 8103488:	681b      	ldr	r3, [r3, #0]
 810348a:	f042 0201 	orr.w	r2, r2, #1
 810348e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8103490:	687b      	ldr	r3, [r7, #4]
 8103492:	2220      	movs	r2, #32
 8103494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8103498:	687b      	ldr	r3, [r7, #4]
 810349a:	2200      	movs	r2, #0
 810349c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81034a0:	2300      	movs	r3, #0
 81034a2:	e000      	b.n	81034a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 81034a4:	2302      	movs	r3, #2
  }
}
 81034a6:	4618      	mov	r0, r3
 81034a8:	370c      	adds	r7, #12
 81034aa:	46bd      	mov	sp, r7
 81034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034b0:	4770      	bx	lr

081034b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 81034b2:	b480      	push	{r7}
 81034b4:	b085      	sub	sp, #20
 81034b6:	af00      	add	r7, sp, #0
 81034b8:	6078      	str	r0, [r7, #4]
 81034ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81034bc:	687b      	ldr	r3, [r7, #4]
 81034be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81034c2:	b2db      	uxtb	r3, r3
 81034c4:	2b20      	cmp	r3, #32
 81034c6:	d139      	bne.n	810353c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81034c8:	687b      	ldr	r3, [r7, #4]
 81034ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81034ce:	2b01      	cmp	r3, #1
 81034d0:	d101      	bne.n	81034d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 81034d2:	2302      	movs	r3, #2
 81034d4:	e033      	b.n	810353e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 81034d6:	687b      	ldr	r3, [r7, #4]
 81034d8:	2201      	movs	r2, #1
 81034da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 81034de:	687b      	ldr	r3, [r7, #4]
 81034e0:	2224      	movs	r2, #36	; 0x24
 81034e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 81034e6:	687b      	ldr	r3, [r7, #4]
 81034e8:	681b      	ldr	r3, [r3, #0]
 81034ea:	681a      	ldr	r2, [r3, #0]
 81034ec:	687b      	ldr	r3, [r7, #4]
 81034ee:	681b      	ldr	r3, [r3, #0]
 81034f0:	f022 0201 	bic.w	r2, r2, #1
 81034f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 81034f6:	687b      	ldr	r3, [r7, #4]
 81034f8:	681b      	ldr	r3, [r3, #0]
 81034fa:	681b      	ldr	r3, [r3, #0]
 81034fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 81034fe:	68fb      	ldr	r3, [r7, #12]
 8103500:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8103504:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8103506:	683b      	ldr	r3, [r7, #0]
 8103508:	021b      	lsls	r3, r3, #8
 810350a:	68fa      	ldr	r2, [r7, #12]
 810350c:	4313      	orrs	r3, r2
 810350e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8103510:	687b      	ldr	r3, [r7, #4]
 8103512:	681b      	ldr	r3, [r3, #0]
 8103514:	68fa      	ldr	r2, [r7, #12]
 8103516:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8103518:	687b      	ldr	r3, [r7, #4]
 810351a:	681b      	ldr	r3, [r3, #0]
 810351c:	681a      	ldr	r2, [r3, #0]
 810351e:	687b      	ldr	r3, [r7, #4]
 8103520:	681b      	ldr	r3, [r3, #0]
 8103522:	f042 0201 	orr.w	r2, r2, #1
 8103526:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8103528:	687b      	ldr	r3, [r7, #4]
 810352a:	2220      	movs	r2, #32
 810352c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8103530:	687b      	ldr	r3, [r7, #4]
 8103532:	2200      	movs	r2, #0
 8103534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8103538:	2300      	movs	r3, #0
 810353a:	e000      	b.n	810353e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 810353c:	2302      	movs	r3, #2
  }
}
 810353e:	4618      	mov	r0, r3
 8103540:	3714      	adds	r7, #20
 8103542:	46bd      	mov	sp, r7
 8103544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103548:	4770      	bx	lr
	...

0810354c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 810354c:	b580      	push	{r7, lr}
 810354e:	b084      	sub	sp, #16
 8103550:	af00      	add	r7, sp, #0
 8103552:	60f8      	str	r0, [r7, #12]
 8103554:	460b      	mov	r3, r1
 8103556:	607a      	str	r2, [r7, #4]
 8103558:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810355a:	4b37      	ldr	r3, [pc, #220]	; (8103638 <HAL_PWREx_EnterSTOPMode+0xec>)
 810355c:	681b      	ldr	r3, [r3, #0]
 810355e:	f023 0201 	bic.w	r2, r3, #1
 8103562:	4935      	ldr	r1, [pc, #212]	; (8103638 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103564:	68fb      	ldr	r3, [r7, #12]
 8103566:	4313      	orrs	r3, r2
 8103568:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810356a:	687b      	ldr	r3, [r7, #4]
 810356c:	2b00      	cmp	r3, #0
 810356e:	d123      	bne.n	81035b8 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8103570:	f7fe f9d2 	bl	8101918 <HAL_GetCurrentCPUID>
 8103574:	4603      	mov	r3, r0
 8103576:	2b03      	cmp	r3, #3
 8103578:	d158      	bne.n	810362c <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810357a:	4b2f      	ldr	r3, [pc, #188]	; (8103638 <HAL_PWREx_EnterSTOPMode+0xec>)
 810357c:	691b      	ldr	r3, [r3, #16]
 810357e:	4a2e      	ldr	r2, [pc, #184]	; (8103638 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103580:	f023 0301 	bic.w	r3, r3, #1
 8103584:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103586:	4b2d      	ldr	r3, [pc, #180]	; (810363c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103588:	691b      	ldr	r3, [r3, #16]
 810358a:	4a2c      	ldr	r2, [pc, #176]	; (810363c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810358c:	f043 0304 	orr.w	r3, r3, #4
 8103590:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8103592:	f3bf 8f4f 	dsb	sy
}
 8103596:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8103598:	f3bf 8f6f 	isb	sy
}
 810359c:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810359e:	7afb      	ldrb	r3, [r7, #11]
 81035a0:	2b01      	cmp	r3, #1
 81035a2:	d101      	bne.n	81035a8 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81035a4:	bf30      	wfi
 81035a6:	e000      	b.n	81035aa <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81035a8:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81035aa:	4b24      	ldr	r3, [pc, #144]	; (810363c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81035ac:	691b      	ldr	r3, [r3, #16]
 81035ae:	4a23      	ldr	r2, [pc, #140]	; (810363c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81035b0:	f023 0304 	bic.w	r3, r3, #4
 81035b4:	6113      	str	r3, [r2, #16]
 81035b6:	e03c      	b.n	8103632 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81035b8:	687b      	ldr	r3, [r7, #4]
 81035ba:	2b01      	cmp	r3, #1
 81035bc:	d123      	bne.n	8103606 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81035be:	f7fe f9ab 	bl	8101918 <HAL_GetCurrentCPUID>
 81035c2:	4603      	mov	r3, r0
 81035c4:	2b01      	cmp	r3, #1
 81035c6:	d133      	bne.n	8103630 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81035c8:	4b1b      	ldr	r3, [pc, #108]	; (8103638 <HAL_PWREx_EnterSTOPMode+0xec>)
 81035ca:	695b      	ldr	r3, [r3, #20]
 81035cc:	4a1a      	ldr	r2, [pc, #104]	; (8103638 <HAL_PWREx_EnterSTOPMode+0xec>)
 81035ce:	f023 0302 	bic.w	r3, r3, #2
 81035d2:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81035d4:	4b19      	ldr	r3, [pc, #100]	; (810363c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81035d6:	691b      	ldr	r3, [r3, #16]
 81035d8:	4a18      	ldr	r2, [pc, #96]	; (810363c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81035da:	f043 0304 	orr.w	r3, r3, #4
 81035de:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81035e0:	f3bf 8f4f 	dsb	sy
}
 81035e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81035e6:	f3bf 8f6f 	isb	sy
}
 81035ea:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81035ec:	7afb      	ldrb	r3, [r7, #11]
 81035ee:	2b01      	cmp	r3, #1
 81035f0:	d101      	bne.n	81035f6 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81035f2:	bf30      	wfi
 81035f4:	e000      	b.n	81035f8 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81035f6:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81035f8:	4b10      	ldr	r3, [pc, #64]	; (810363c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81035fa:	691b      	ldr	r3, [r3, #16]
 81035fc:	4a0f      	ldr	r2, [pc, #60]	; (810363c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81035fe:	f023 0304 	bic.w	r3, r3, #4
 8103602:	6113      	str	r3, [r2, #16]
 8103604:	e015      	b.n	8103632 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103606:	f7fe f987 	bl	8101918 <HAL_GetCurrentCPUID>
 810360a:	4603      	mov	r3, r0
 810360c:	2b03      	cmp	r3, #3
 810360e:	d106      	bne.n	810361e <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8103610:	4b09      	ldr	r3, [pc, #36]	; (8103638 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103612:	691b      	ldr	r3, [r3, #16]
 8103614:	4a08      	ldr	r2, [pc, #32]	; (8103638 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103616:	f023 0304 	bic.w	r3, r3, #4
 810361a:	6113      	str	r3, [r2, #16]
 810361c:	e009      	b.n	8103632 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810361e:	4b06      	ldr	r3, [pc, #24]	; (8103638 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103620:	695b      	ldr	r3, [r3, #20]
 8103622:	4a05      	ldr	r2, [pc, #20]	; (8103638 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103624:	f023 0304 	bic.w	r3, r3, #4
 8103628:	6153      	str	r3, [r2, #20]
 810362a:	e002      	b.n	8103632 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810362c:	bf00      	nop
 810362e:	e000      	b.n	8103632 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103630:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8103632:	3710      	adds	r7, #16
 8103634:	46bd      	mov	sp, r7
 8103636:	bd80      	pop	{r7, pc}
 8103638:	58024800 	.word	0x58024800
 810363c:	e000ed00 	.word	0xe000ed00

08103640 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8103640:	b580      	push	{r7, lr}
 8103642:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103644:	f7fe f968 	bl	8101918 <HAL_GetCurrentCPUID>
 8103648:	4603      	mov	r3, r0
 810364a:	2b03      	cmp	r3, #3
 810364c:	d101      	bne.n	8103652 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810364e:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8103650:	e001      	b.n	8103656 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8103652:	bf40      	sev
    __WFE ();
 8103654:	bf20      	wfe
}
 8103656:	bf00      	nop
 8103658:	bd80      	pop	{r7, pc}
	...

0810365c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 810365c:	b480      	push	{r7}
 810365e:	b089      	sub	sp, #36	; 0x24
 8103660:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8103662:	4bb3      	ldr	r3, [pc, #716]	; (8103930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103664:	691b      	ldr	r3, [r3, #16]
 8103666:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810366a:	2b18      	cmp	r3, #24
 810366c:	f200 8155 	bhi.w	810391a <HAL_RCC_GetSysClockFreq+0x2be>
 8103670:	a201      	add	r2, pc, #4	; (adr r2, 8103678 <HAL_RCC_GetSysClockFreq+0x1c>)
 8103672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103676:	bf00      	nop
 8103678:	081036dd 	.word	0x081036dd
 810367c:	0810391b 	.word	0x0810391b
 8103680:	0810391b 	.word	0x0810391b
 8103684:	0810391b 	.word	0x0810391b
 8103688:	0810391b 	.word	0x0810391b
 810368c:	0810391b 	.word	0x0810391b
 8103690:	0810391b 	.word	0x0810391b
 8103694:	0810391b 	.word	0x0810391b
 8103698:	08103703 	.word	0x08103703
 810369c:	0810391b 	.word	0x0810391b
 81036a0:	0810391b 	.word	0x0810391b
 81036a4:	0810391b 	.word	0x0810391b
 81036a8:	0810391b 	.word	0x0810391b
 81036ac:	0810391b 	.word	0x0810391b
 81036b0:	0810391b 	.word	0x0810391b
 81036b4:	0810391b 	.word	0x0810391b
 81036b8:	08103709 	.word	0x08103709
 81036bc:	0810391b 	.word	0x0810391b
 81036c0:	0810391b 	.word	0x0810391b
 81036c4:	0810391b 	.word	0x0810391b
 81036c8:	0810391b 	.word	0x0810391b
 81036cc:	0810391b 	.word	0x0810391b
 81036d0:	0810391b 	.word	0x0810391b
 81036d4:	0810391b 	.word	0x0810391b
 81036d8:	0810370f 	.word	0x0810370f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81036dc:	4b94      	ldr	r3, [pc, #592]	; (8103930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81036de:	681b      	ldr	r3, [r3, #0]
 81036e0:	f003 0320 	and.w	r3, r3, #32
 81036e4:	2b00      	cmp	r3, #0
 81036e6:	d009      	beq.n	81036fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81036e8:	4b91      	ldr	r3, [pc, #580]	; (8103930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81036ea:	681b      	ldr	r3, [r3, #0]
 81036ec:	08db      	lsrs	r3, r3, #3
 81036ee:	f003 0303 	and.w	r3, r3, #3
 81036f2:	4a90      	ldr	r2, [pc, #576]	; (8103934 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81036f4:	fa22 f303 	lsr.w	r3, r2, r3
 81036f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 81036fa:	e111      	b.n	8103920 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81036fc:	4b8d      	ldr	r3, [pc, #564]	; (8103934 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81036fe:	61bb      	str	r3, [r7, #24]
    break;
 8103700:	e10e      	b.n	8103920 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8103702:	4b8d      	ldr	r3, [pc, #564]	; (8103938 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103704:	61bb      	str	r3, [r7, #24]
    break;
 8103706:	e10b      	b.n	8103920 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8103708:	4b8c      	ldr	r3, [pc, #560]	; (810393c <HAL_RCC_GetSysClockFreq+0x2e0>)
 810370a:	61bb      	str	r3, [r7, #24]
    break;
 810370c:	e108      	b.n	8103920 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810370e:	4b88      	ldr	r3, [pc, #544]	; (8103930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103712:	f003 0303 	and.w	r3, r3, #3
 8103716:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8103718:	4b85      	ldr	r3, [pc, #532]	; (8103930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810371a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810371c:	091b      	lsrs	r3, r3, #4
 810371e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8103722:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8103724:	4b82      	ldr	r3, [pc, #520]	; (8103930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103728:	f003 0301 	and.w	r3, r3, #1
 810372c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 810372e:	4b80      	ldr	r3, [pc, #512]	; (8103930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8103732:	08db      	lsrs	r3, r3, #3
 8103734:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103738:	68fa      	ldr	r2, [r7, #12]
 810373a:	fb02 f303 	mul.w	r3, r2, r3
 810373e:	ee07 3a90 	vmov	s15, r3
 8103742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103746:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 810374a:	693b      	ldr	r3, [r7, #16]
 810374c:	2b00      	cmp	r3, #0
 810374e:	f000 80e1 	beq.w	8103914 <HAL_RCC_GetSysClockFreq+0x2b8>
 8103752:	697b      	ldr	r3, [r7, #20]
 8103754:	2b02      	cmp	r3, #2
 8103756:	f000 8083 	beq.w	8103860 <HAL_RCC_GetSysClockFreq+0x204>
 810375a:	697b      	ldr	r3, [r7, #20]
 810375c:	2b02      	cmp	r3, #2
 810375e:	f200 80a1 	bhi.w	81038a4 <HAL_RCC_GetSysClockFreq+0x248>
 8103762:	697b      	ldr	r3, [r7, #20]
 8103764:	2b00      	cmp	r3, #0
 8103766:	d003      	beq.n	8103770 <HAL_RCC_GetSysClockFreq+0x114>
 8103768:	697b      	ldr	r3, [r7, #20]
 810376a:	2b01      	cmp	r3, #1
 810376c:	d056      	beq.n	810381c <HAL_RCC_GetSysClockFreq+0x1c0>
 810376e:	e099      	b.n	81038a4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103770:	4b6f      	ldr	r3, [pc, #444]	; (8103930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103772:	681b      	ldr	r3, [r3, #0]
 8103774:	f003 0320 	and.w	r3, r3, #32
 8103778:	2b00      	cmp	r3, #0
 810377a:	d02d      	beq.n	81037d8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810377c:	4b6c      	ldr	r3, [pc, #432]	; (8103930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810377e:	681b      	ldr	r3, [r3, #0]
 8103780:	08db      	lsrs	r3, r3, #3
 8103782:	f003 0303 	and.w	r3, r3, #3
 8103786:	4a6b      	ldr	r2, [pc, #428]	; (8103934 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103788:	fa22 f303 	lsr.w	r3, r2, r3
 810378c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810378e:	687b      	ldr	r3, [r7, #4]
 8103790:	ee07 3a90 	vmov	s15, r3
 8103794:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103798:	693b      	ldr	r3, [r7, #16]
 810379a:	ee07 3a90 	vmov	s15, r3
 810379e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81037a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81037a6:	4b62      	ldr	r3, [pc, #392]	; (8103930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81037a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81037aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81037ae:	ee07 3a90 	vmov	s15, r3
 81037b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81037b6:	ed97 6a02 	vldr	s12, [r7, #8]
 81037ba:	eddf 5a61 	vldr	s11, [pc, #388]	; 8103940 <HAL_RCC_GetSysClockFreq+0x2e4>
 81037be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81037c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81037c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81037ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81037ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 81037d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 81037d6:	e087      	b.n	81038e8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81037d8:	693b      	ldr	r3, [r7, #16]
 81037da:	ee07 3a90 	vmov	s15, r3
 81037de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81037e2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8103944 <HAL_RCC_GetSysClockFreq+0x2e8>
 81037e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81037ea:	4b51      	ldr	r3, [pc, #324]	; (8103930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81037ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81037ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81037f2:	ee07 3a90 	vmov	s15, r3
 81037f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81037fa:	ed97 6a02 	vldr	s12, [r7, #8]
 81037fe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8103940 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810380a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810380e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103816:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810381a:	e065      	b.n	81038e8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810381c:	693b      	ldr	r3, [r7, #16]
 810381e:	ee07 3a90 	vmov	s15, r3
 8103822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103826:	eddf 6a48 	vldr	s13, [pc, #288]	; 8103948 <HAL_RCC_GetSysClockFreq+0x2ec>
 810382a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810382e:	4b40      	ldr	r3, [pc, #256]	; (8103930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103836:	ee07 3a90 	vmov	s15, r3
 810383a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810383e:	ed97 6a02 	vldr	s12, [r7, #8]
 8103842:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8103940 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810384a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810384e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103856:	ee67 7a27 	vmul.f32	s15, s14, s15
 810385a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810385e:	e043      	b.n	81038e8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103860:	693b      	ldr	r3, [r7, #16]
 8103862:	ee07 3a90 	vmov	s15, r3
 8103866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810386a:	eddf 6a38 	vldr	s13, [pc, #224]	; 810394c <HAL_RCC_GetSysClockFreq+0x2f0>
 810386e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103872:	4b2f      	ldr	r3, [pc, #188]	; (8103930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810387a:	ee07 3a90 	vmov	s15, r3
 810387e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103882:	ed97 6a02 	vldr	s12, [r7, #8]
 8103886:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8103940 <HAL_RCC_GetSysClockFreq+0x2e4>
 810388a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810388e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103892:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810389a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810389e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81038a2:	e021      	b.n	81038e8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81038a4:	693b      	ldr	r3, [r7, #16]
 81038a6:	ee07 3a90 	vmov	s15, r3
 81038aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81038ae:	eddf 6a26 	vldr	s13, [pc, #152]	; 8103948 <HAL_RCC_GetSysClockFreq+0x2ec>
 81038b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81038b6:	4b1e      	ldr	r3, [pc, #120]	; (8103930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81038b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81038ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81038be:	ee07 3a90 	vmov	s15, r3
 81038c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81038c6:	ed97 6a02 	vldr	s12, [r7, #8]
 81038ca:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8103940 <HAL_RCC_GetSysClockFreq+0x2e4>
 81038ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81038d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81038d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81038da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81038de:	ee67 7a27 	vmul.f32	s15, s14, s15
 81038e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81038e6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 81038e8:	4b11      	ldr	r3, [pc, #68]	; (8103930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81038ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81038ec:	0a5b      	lsrs	r3, r3, #9
 81038ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81038f2:	3301      	adds	r3, #1
 81038f4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 81038f6:	683b      	ldr	r3, [r7, #0]
 81038f8:	ee07 3a90 	vmov	s15, r3
 81038fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8103900:	edd7 6a07 	vldr	s13, [r7, #28]
 8103904:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103908:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810390c:	ee17 3a90 	vmov	r3, s15
 8103910:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8103912:	e005      	b.n	8103920 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8103914:	2300      	movs	r3, #0
 8103916:	61bb      	str	r3, [r7, #24]
    break;
 8103918:	e002      	b.n	8103920 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 810391a:	4b07      	ldr	r3, [pc, #28]	; (8103938 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810391c:	61bb      	str	r3, [r7, #24]
    break;
 810391e:	bf00      	nop
  }

  return sysclockfreq;
 8103920:	69bb      	ldr	r3, [r7, #24]
}
 8103922:	4618      	mov	r0, r3
 8103924:	3724      	adds	r7, #36	; 0x24
 8103926:	46bd      	mov	sp, r7
 8103928:	f85d 7b04 	ldr.w	r7, [sp], #4
 810392c:	4770      	bx	lr
 810392e:	bf00      	nop
 8103930:	58024400 	.word	0x58024400
 8103934:	03d09000 	.word	0x03d09000
 8103938:	003d0900 	.word	0x003d0900
 810393c:	007a1200 	.word	0x007a1200
 8103940:	46000000 	.word	0x46000000
 8103944:	4c742400 	.word	0x4c742400
 8103948:	4a742400 	.word	0x4a742400
 810394c:	4af42400 	.word	0x4af42400

08103950 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8103950:	b580      	push	{r7, lr}
 8103952:	b086      	sub	sp, #24
 8103954:	af00      	add	r7, sp, #0
 8103956:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8103958:	2300      	movs	r3, #0
 810395a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 810395c:	2300      	movs	r3, #0
 810395e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8103960:	687b      	ldr	r3, [r7, #4]
 8103962:	681b      	ldr	r3, [r3, #0]
 8103964:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8103968:	2b00      	cmp	r3, #0
 810396a:	d03f      	beq.n	81039ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 810396c:	687b      	ldr	r3, [r7, #4]
 810396e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103970:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103974:	d02a      	beq.n	81039cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8103976:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810397a:	d824      	bhi.n	81039c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 810397c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103980:	d018      	beq.n	81039b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8103982:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103986:	d81e      	bhi.n	81039c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8103988:	2b00      	cmp	r3, #0
 810398a:	d003      	beq.n	8103994 <HAL_RCCEx_PeriphCLKConfig+0x44>
 810398c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103990:	d007      	beq.n	81039a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8103992:	e018      	b.n	81039c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103994:	4ba3      	ldr	r3, [pc, #652]	; (8103c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103998:	4aa2      	ldr	r2, [pc, #648]	; (8103c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810399a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810399e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81039a0:	e015      	b.n	81039ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81039a2:	687b      	ldr	r3, [r7, #4]
 81039a4:	3304      	adds	r3, #4
 81039a6:	2102      	movs	r1, #2
 81039a8:	4618      	mov	r0, r3
 81039aa:	f000 ff17 	bl	81047dc <RCCEx_PLL2_Config>
 81039ae:	4603      	mov	r3, r0
 81039b0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81039b2:	e00c      	b.n	81039ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81039b4:	687b      	ldr	r3, [r7, #4]
 81039b6:	3324      	adds	r3, #36	; 0x24
 81039b8:	2102      	movs	r1, #2
 81039ba:	4618      	mov	r0, r3
 81039bc:	f000 ffc0 	bl	8104940 <RCCEx_PLL3_Config>
 81039c0:	4603      	mov	r3, r0
 81039c2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81039c4:	e003      	b.n	81039ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81039c6:	2301      	movs	r3, #1
 81039c8:	75fb      	strb	r3, [r7, #23]
      break;
 81039ca:	e000      	b.n	81039ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 81039cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 81039ce:	7dfb      	ldrb	r3, [r7, #23]
 81039d0:	2b00      	cmp	r3, #0
 81039d2:	d109      	bne.n	81039e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 81039d4:	4b93      	ldr	r3, [pc, #588]	; (8103c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81039d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81039d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 81039dc:	687b      	ldr	r3, [r7, #4]
 81039de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81039e0:	4990      	ldr	r1, [pc, #576]	; (8103c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81039e2:	4313      	orrs	r3, r2
 81039e4:	650b      	str	r3, [r1, #80]	; 0x50
 81039e6:	e001      	b.n	81039ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81039e8:	7dfb      	ldrb	r3, [r7, #23]
 81039ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 81039ec:	687b      	ldr	r3, [r7, #4]
 81039ee:	681b      	ldr	r3, [r3, #0]
 81039f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81039f4:	2b00      	cmp	r3, #0
 81039f6:	d03d      	beq.n	8103a74 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 81039f8:	687b      	ldr	r3, [r7, #4]
 81039fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81039fc:	2b04      	cmp	r3, #4
 81039fe:	d826      	bhi.n	8103a4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8103a00:	a201      	add	r2, pc, #4	; (adr r2, 8103a08 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8103a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103a06:	bf00      	nop
 8103a08:	08103a1d 	.word	0x08103a1d
 8103a0c:	08103a2b 	.word	0x08103a2b
 8103a10:	08103a3d 	.word	0x08103a3d
 8103a14:	08103a55 	.word	0x08103a55
 8103a18:	08103a55 	.word	0x08103a55
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103a1c:	4b81      	ldr	r3, [pc, #516]	; (8103c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103a20:	4a80      	ldr	r2, [pc, #512]	; (8103c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103a22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103a26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103a28:	e015      	b.n	8103a56 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103a2a:	687b      	ldr	r3, [r7, #4]
 8103a2c:	3304      	adds	r3, #4
 8103a2e:	2100      	movs	r1, #0
 8103a30:	4618      	mov	r0, r3
 8103a32:	f000 fed3 	bl	81047dc <RCCEx_PLL2_Config>
 8103a36:	4603      	mov	r3, r0
 8103a38:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103a3a:	e00c      	b.n	8103a56 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103a3c:	687b      	ldr	r3, [r7, #4]
 8103a3e:	3324      	adds	r3, #36	; 0x24
 8103a40:	2100      	movs	r1, #0
 8103a42:	4618      	mov	r0, r3
 8103a44:	f000 ff7c 	bl	8104940 <RCCEx_PLL3_Config>
 8103a48:	4603      	mov	r3, r0
 8103a4a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103a4c:	e003      	b.n	8103a56 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103a4e:	2301      	movs	r3, #1
 8103a50:	75fb      	strb	r3, [r7, #23]
      break;
 8103a52:	e000      	b.n	8103a56 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8103a54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103a56:	7dfb      	ldrb	r3, [r7, #23]
 8103a58:	2b00      	cmp	r3, #0
 8103a5a:	d109      	bne.n	8103a70 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8103a5c:	4b71      	ldr	r3, [pc, #452]	; (8103c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103a60:	f023 0207 	bic.w	r2, r3, #7
 8103a64:	687b      	ldr	r3, [r7, #4]
 8103a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103a68:	496e      	ldr	r1, [pc, #440]	; (8103c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103a6a:	4313      	orrs	r3, r2
 8103a6c:	650b      	str	r3, [r1, #80]	; 0x50
 8103a6e:	e001      	b.n	8103a74 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103a70:	7dfb      	ldrb	r3, [r7, #23]
 8103a72:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8103a74:	687b      	ldr	r3, [r7, #4]
 8103a76:	681b      	ldr	r3, [r3, #0]
 8103a78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8103a7c:	2b00      	cmp	r3, #0
 8103a7e:	d042      	beq.n	8103b06 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8103a80:	687b      	ldr	r3, [r7, #4]
 8103a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103a84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103a88:	d02b      	beq.n	8103ae2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8103a8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103a8e:	d825      	bhi.n	8103adc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103a90:	2bc0      	cmp	r3, #192	; 0xc0
 8103a92:	d028      	beq.n	8103ae6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8103a94:	2bc0      	cmp	r3, #192	; 0xc0
 8103a96:	d821      	bhi.n	8103adc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103a98:	2b80      	cmp	r3, #128	; 0x80
 8103a9a:	d016      	beq.n	8103aca <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8103a9c:	2b80      	cmp	r3, #128	; 0x80
 8103a9e:	d81d      	bhi.n	8103adc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103aa0:	2b00      	cmp	r3, #0
 8103aa2:	d002      	beq.n	8103aaa <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8103aa4:	2b40      	cmp	r3, #64	; 0x40
 8103aa6:	d007      	beq.n	8103ab8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8103aa8:	e018      	b.n	8103adc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103aaa:	4b5e      	ldr	r3, [pc, #376]	; (8103c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103aae:	4a5d      	ldr	r2, [pc, #372]	; (8103c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103ab4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8103ab6:	e017      	b.n	8103ae8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103ab8:	687b      	ldr	r3, [r7, #4]
 8103aba:	3304      	adds	r3, #4
 8103abc:	2100      	movs	r1, #0
 8103abe:	4618      	mov	r0, r3
 8103ac0:	f000 fe8c 	bl	81047dc <RCCEx_PLL2_Config>
 8103ac4:	4603      	mov	r3, r0
 8103ac6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8103ac8:	e00e      	b.n	8103ae8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103aca:	687b      	ldr	r3, [r7, #4]
 8103acc:	3324      	adds	r3, #36	; 0x24
 8103ace:	2100      	movs	r1, #0
 8103ad0:	4618      	mov	r0, r3
 8103ad2:	f000 ff35 	bl	8104940 <RCCEx_PLL3_Config>
 8103ad6:	4603      	mov	r3, r0
 8103ad8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8103ada:	e005      	b.n	8103ae8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103adc:	2301      	movs	r3, #1
 8103ade:	75fb      	strb	r3, [r7, #23]
      break;
 8103ae0:	e002      	b.n	8103ae8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8103ae2:	bf00      	nop
 8103ae4:	e000      	b.n	8103ae8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8103ae6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103ae8:	7dfb      	ldrb	r3, [r7, #23]
 8103aea:	2b00      	cmp	r3, #0
 8103aec:	d109      	bne.n	8103b02 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8103aee:	4b4d      	ldr	r3, [pc, #308]	; (8103c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103af2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8103af6:	687b      	ldr	r3, [r7, #4]
 8103af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103afa:	494a      	ldr	r1, [pc, #296]	; (8103c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103afc:	4313      	orrs	r3, r2
 8103afe:	650b      	str	r3, [r1, #80]	; 0x50
 8103b00:	e001      	b.n	8103b06 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103b02:	7dfb      	ldrb	r3, [r7, #23]
 8103b04:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8103b06:	687b      	ldr	r3, [r7, #4]
 8103b08:	681b      	ldr	r3, [r3, #0]
 8103b0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8103b0e:	2b00      	cmp	r3, #0
 8103b10:	d049      	beq.n	8103ba6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8103b12:	687b      	ldr	r3, [r7, #4]
 8103b14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8103b18:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8103b1c:	d030      	beq.n	8103b80 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8103b1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8103b22:	d82a      	bhi.n	8103b7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103b24:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8103b28:	d02c      	beq.n	8103b84 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8103b2a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8103b2e:	d824      	bhi.n	8103b7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103b30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103b34:	d018      	beq.n	8103b68 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8103b36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103b3a:	d81e      	bhi.n	8103b7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103b3c:	2b00      	cmp	r3, #0
 8103b3e:	d003      	beq.n	8103b48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8103b40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103b44:	d007      	beq.n	8103b56 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8103b46:	e018      	b.n	8103b7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103b48:	4b36      	ldr	r3, [pc, #216]	; (8103c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103b4c:	4a35      	ldr	r2, [pc, #212]	; (8103c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103b4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103b52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103b54:	e017      	b.n	8103b86 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103b56:	687b      	ldr	r3, [r7, #4]
 8103b58:	3304      	adds	r3, #4
 8103b5a:	2100      	movs	r1, #0
 8103b5c:	4618      	mov	r0, r3
 8103b5e:	f000 fe3d 	bl	81047dc <RCCEx_PLL2_Config>
 8103b62:	4603      	mov	r3, r0
 8103b64:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8103b66:	e00e      	b.n	8103b86 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103b68:	687b      	ldr	r3, [r7, #4]
 8103b6a:	3324      	adds	r3, #36	; 0x24
 8103b6c:	2100      	movs	r1, #0
 8103b6e:	4618      	mov	r0, r3
 8103b70:	f000 fee6 	bl	8104940 <RCCEx_PLL3_Config>
 8103b74:	4603      	mov	r3, r0
 8103b76:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103b78:	e005      	b.n	8103b86 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8103b7a:	2301      	movs	r3, #1
 8103b7c:	75fb      	strb	r3, [r7, #23]
      break;
 8103b7e:	e002      	b.n	8103b86 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8103b80:	bf00      	nop
 8103b82:	e000      	b.n	8103b86 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8103b84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103b86:	7dfb      	ldrb	r3, [r7, #23]
 8103b88:	2b00      	cmp	r3, #0
 8103b8a:	d10a      	bne.n	8103ba2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8103b8c:	4b25      	ldr	r3, [pc, #148]	; (8103c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103b90:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8103b94:	687b      	ldr	r3, [r7, #4]
 8103b96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8103b9a:	4922      	ldr	r1, [pc, #136]	; (8103c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103b9c:	4313      	orrs	r3, r2
 8103b9e:	658b      	str	r3, [r1, #88]	; 0x58
 8103ba0:	e001      	b.n	8103ba6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103ba2:	7dfb      	ldrb	r3, [r7, #23]
 8103ba4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8103ba6:	687b      	ldr	r3, [r7, #4]
 8103ba8:	681b      	ldr	r3, [r3, #0]
 8103baa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8103bae:	2b00      	cmp	r3, #0
 8103bb0:	d04b      	beq.n	8103c4a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8103bb2:	687b      	ldr	r3, [r7, #4]
 8103bb4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8103bb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8103bbc:	d030      	beq.n	8103c20 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8103bbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8103bc2:	d82a      	bhi.n	8103c1a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8103bc4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8103bc8:	d02e      	beq.n	8103c28 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8103bca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8103bce:	d824      	bhi.n	8103c1a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8103bd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8103bd4:	d018      	beq.n	8103c08 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8103bd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8103bda:	d81e      	bhi.n	8103c1a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8103bdc:	2b00      	cmp	r3, #0
 8103bde:	d003      	beq.n	8103be8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8103be0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8103be4:	d007      	beq.n	8103bf6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8103be6:	e018      	b.n	8103c1a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103be8:	4b0e      	ldr	r3, [pc, #56]	; (8103c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103bec:	4a0d      	ldr	r2, [pc, #52]	; (8103c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103bee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103bf2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103bf4:	e019      	b.n	8103c2a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103bf6:	687b      	ldr	r3, [r7, #4]
 8103bf8:	3304      	adds	r3, #4
 8103bfa:	2100      	movs	r1, #0
 8103bfc:	4618      	mov	r0, r3
 8103bfe:	f000 fded 	bl	81047dc <RCCEx_PLL2_Config>
 8103c02:	4603      	mov	r3, r0
 8103c04:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8103c06:	e010      	b.n	8103c2a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103c08:	687b      	ldr	r3, [r7, #4]
 8103c0a:	3324      	adds	r3, #36	; 0x24
 8103c0c:	2100      	movs	r1, #0
 8103c0e:	4618      	mov	r0, r3
 8103c10:	f000 fe96 	bl	8104940 <RCCEx_PLL3_Config>
 8103c14:	4603      	mov	r3, r0
 8103c16:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103c18:	e007      	b.n	8103c2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8103c1a:	2301      	movs	r3, #1
 8103c1c:	75fb      	strb	r3, [r7, #23]
      break;
 8103c1e:	e004      	b.n	8103c2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8103c20:	bf00      	nop
 8103c22:	e002      	b.n	8103c2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8103c24:	58024400 	.word	0x58024400
      break;
 8103c28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103c2a:	7dfb      	ldrb	r3, [r7, #23]
 8103c2c:	2b00      	cmp	r3, #0
 8103c2e:	d10a      	bne.n	8103c46 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8103c30:	4b99      	ldr	r3, [pc, #612]	; (8103e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103c34:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8103c38:	687b      	ldr	r3, [r7, #4]
 8103c3a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8103c3e:	4996      	ldr	r1, [pc, #600]	; (8103e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103c40:	4313      	orrs	r3, r2
 8103c42:	658b      	str	r3, [r1, #88]	; 0x58
 8103c44:	e001      	b.n	8103c4a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103c46:	7dfb      	ldrb	r3, [r7, #23]
 8103c48:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8103c4a:	687b      	ldr	r3, [r7, #4]
 8103c4c:	681b      	ldr	r3, [r3, #0]
 8103c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8103c52:	2b00      	cmp	r3, #0
 8103c54:	d032      	beq.n	8103cbc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8103c56:	687b      	ldr	r3, [r7, #4]
 8103c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103c5a:	2b30      	cmp	r3, #48	; 0x30
 8103c5c:	d01c      	beq.n	8103c98 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8103c5e:	2b30      	cmp	r3, #48	; 0x30
 8103c60:	d817      	bhi.n	8103c92 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8103c62:	2b20      	cmp	r3, #32
 8103c64:	d00c      	beq.n	8103c80 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8103c66:	2b20      	cmp	r3, #32
 8103c68:	d813      	bhi.n	8103c92 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8103c6a:	2b00      	cmp	r3, #0
 8103c6c:	d016      	beq.n	8103c9c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8103c6e:	2b10      	cmp	r3, #16
 8103c70:	d10f      	bne.n	8103c92 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103c72:	4b89      	ldr	r3, [pc, #548]	; (8103e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103c76:	4a88      	ldr	r2, [pc, #544]	; (8103e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103c7c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8103c7e:	e00e      	b.n	8103c9e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103c80:	687b      	ldr	r3, [r7, #4]
 8103c82:	3304      	adds	r3, #4
 8103c84:	2102      	movs	r1, #2
 8103c86:	4618      	mov	r0, r3
 8103c88:	f000 fda8 	bl	81047dc <RCCEx_PLL2_Config>
 8103c8c:	4603      	mov	r3, r0
 8103c8e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8103c90:	e005      	b.n	8103c9e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8103c92:	2301      	movs	r3, #1
 8103c94:	75fb      	strb	r3, [r7, #23]
      break;
 8103c96:	e002      	b.n	8103c9e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8103c98:	bf00      	nop
 8103c9a:	e000      	b.n	8103c9e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8103c9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103c9e:	7dfb      	ldrb	r3, [r7, #23]
 8103ca0:	2b00      	cmp	r3, #0
 8103ca2:	d109      	bne.n	8103cb8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8103ca4:	4b7c      	ldr	r3, [pc, #496]	; (8103e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103ca8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8103cac:	687b      	ldr	r3, [r7, #4]
 8103cae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103cb0:	4979      	ldr	r1, [pc, #484]	; (8103e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103cb2:	4313      	orrs	r3, r2
 8103cb4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8103cb6:	e001      	b.n	8103cbc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103cb8:	7dfb      	ldrb	r3, [r7, #23]
 8103cba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8103cbc:	687b      	ldr	r3, [r7, #4]
 8103cbe:	681b      	ldr	r3, [r3, #0]
 8103cc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8103cc4:	2b00      	cmp	r3, #0
 8103cc6:	d047      	beq.n	8103d58 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8103cc8:	687b      	ldr	r3, [r7, #4]
 8103cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103ccc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103cd0:	d030      	beq.n	8103d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8103cd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103cd6:	d82a      	bhi.n	8103d2e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8103cd8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8103cdc:	d02c      	beq.n	8103d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8103cde:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8103ce2:	d824      	bhi.n	8103d2e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8103ce4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103ce8:	d018      	beq.n	8103d1c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8103cea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103cee:	d81e      	bhi.n	8103d2e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8103cf0:	2b00      	cmp	r3, #0
 8103cf2:	d003      	beq.n	8103cfc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8103cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103cf8:	d007      	beq.n	8103d0a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8103cfa:	e018      	b.n	8103d2e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103cfc:	4b66      	ldr	r3, [pc, #408]	; (8103e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103d00:	4a65      	ldr	r2, [pc, #404]	; (8103e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103d06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8103d08:	e017      	b.n	8103d3a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103d0a:	687b      	ldr	r3, [r7, #4]
 8103d0c:	3304      	adds	r3, #4
 8103d0e:	2100      	movs	r1, #0
 8103d10:	4618      	mov	r0, r3
 8103d12:	f000 fd63 	bl	81047dc <RCCEx_PLL2_Config>
 8103d16:	4603      	mov	r3, r0
 8103d18:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8103d1a:	e00e      	b.n	8103d3a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103d1c:	687b      	ldr	r3, [r7, #4]
 8103d1e:	3324      	adds	r3, #36	; 0x24
 8103d20:	2100      	movs	r1, #0
 8103d22:	4618      	mov	r0, r3
 8103d24:	f000 fe0c 	bl	8104940 <RCCEx_PLL3_Config>
 8103d28:	4603      	mov	r3, r0
 8103d2a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8103d2c:	e005      	b.n	8103d3a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103d2e:	2301      	movs	r3, #1
 8103d30:	75fb      	strb	r3, [r7, #23]
      break;
 8103d32:	e002      	b.n	8103d3a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8103d34:	bf00      	nop
 8103d36:	e000      	b.n	8103d3a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8103d38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103d3a:	7dfb      	ldrb	r3, [r7, #23]
 8103d3c:	2b00      	cmp	r3, #0
 8103d3e:	d109      	bne.n	8103d54 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8103d40:	4b55      	ldr	r3, [pc, #340]	; (8103e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103d44:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8103d48:	687b      	ldr	r3, [r7, #4]
 8103d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103d4c:	4952      	ldr	r1, [pc, #328]	; (8103e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103d4e:	4313      	orrs	r3, r2
 8103d50:	650b      	str	r3, [r1, #80]	; 0x50
 8103d52:	e001      	b.n	8103d58 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103d54:	7dfb      	ldrb	r3, [r7, #23]
 8103d56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8103d58:	687b      	ldr	r3, [r7, #4]
 8103d5a:	681b      	ldr	r3, [r3, #0]
 8103d5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8103d60:	2b00      	cmp	r3, #0
 8103d62:	d049      	beq.n	8103df8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8103d64:	687b      	ldr	r3, [r7, #4]
 8103d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103d68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8103d6c:	d02e      	beq.n	8103dcc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8103d6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8103d72:	d828      	bhi.n	8103dc6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8103d74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103d78:	d02a      	beq.n	8103dd0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8103d7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103d7e:	d822      	bhi.n	8103dc6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8103d80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103d84:	d026      	beq.n	8103dd4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8103d86:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103d8a:	d81c      	bhi.n	8103dc6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8103d8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103d90:	d010      	beq.n	8103db4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8103d92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103d96:	d816      	bhi.n	8103dc6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8103d98:	2b00      	cmp	r3, #0
 8103d9a:	d01d      	beq.n	8103dd8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8103d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103da0:	d111      	bne.n	8103dc6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103da2:	687b      	ldr	r3, [r7, #4]
 8103da4:	3304      	adds	r3, #4
 8103da6:	2101      	movs	r1, #1
 8103da8:	4618      	mov	r0, r3
 8103daa:	f000 fd17 	bl	81047dc <RCCEx_PLL2_Config>
 8103dae:	4603      	mov	r3, r0
 8103db0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8103db2:	e012      	b.n	8103dda <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103db4:	687b      	ldr	r3, [r7, #4]
 8103db6:	3324      	adds	r3, #36	; 0x24
 8103db8:	2101      	movs	r1, #1
 8103dba:	4618      	mov	r0, r3
 8103dbc:	f000 fdc0 	bl	8104940 <RCCEx_PLL3_Config>
 8103dc0:	4603      	mov	r3, r0
 8103dc2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8103dc4:	e009      	b.n	8103dda <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103dc6:	2301      	movs	r3, #1
 8103dc8:	75fb      	strb	r3, [r7, #23]
      break;
 8103dca:	e006      	b.n	8103dda <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8103dcc:	bf00      	nop
 8103dce:	e004      	b.n	8103dda <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8103dd0:	bf00      	nop
 8103dd2:	e002      	b.n	8103dda <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8103dd4:	bf00      	nop
 8103dd6:	e000      	b.n	8103dda <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8103dd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103dda:	7dfb      	ldrb	r3, [r7, #23]
 8103ddc:	2b00      	cmp	r3, #0
 8103dde:	d109      	bne.n	8103df4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8103de0:	4b2d      	ldr	r3, [pc, #180]	; (8103e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103de4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8103de8:	687b      	ldr	r3, [r7, #4]
 8103dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103dec:	492a      	ldr	r1, [pc, #168]	; (8103e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103dee:	4313      	orrs	r3, r2
 8103df0:	650b      	str	r3, [r1, #80]	; 0x50
 8103df2:	e001      	b.n	8103df8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103df4:	7dfb      	ldrb	r3, [r7, #23]
 8103df6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8103df8:	687b      	ldr	r3, [r7, #4]
 8103dfa:	681b      	ldr	r3, [r3, #0]
 8103dfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8103e00:	2b00      	cmp	r3, #0
 8103e02:	d04d      	beq.n	8103ea0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8103e04:	687b      	ldr	r3, [r7, #4]
 8103e06:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8103e0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103e0e:	d02e      	beq.n	8103e6e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8103e10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103e14:	d828      	bhi.n	8103e68 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8103e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103e1a:	d02a      	beq.n	8103e72 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8103e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103e20:	d822      	bhi.n	8103e68 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8103e22:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103e26:	d026      	beq.n	8103e76 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8103e28:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103e2c:	d81c      	bhi.n	8103e68 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8103e2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103e32:	d010      	beq.n	8103e56 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8103e34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103e38:	d816      	bhi.n	8103e68 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8103e3a:	2b00      	cmp	r3, #0
 8103e3c:	d01d      	beq.n	8103e7a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8103e3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103e42:	d111      	bne.n	8103e68 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103e44:	687b      	ldr	r3, [r7, #4]
 8103e46:	3304      	adds	r3, #4
 8103e48:	2101      	movs	r1, #1
 8103e4a:	4618      	mov	r0, r3
 8103e4c:	f000 fcc6 	bl	81047dc <RCCEx_PLL2_Config>
 8103e50:	4603      	mov	r3, r0
 8103e52:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8103e54:	e012      	b.n	8103e7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103e56:	687b      	ldr	r3, [r7, #4]
 8103e58:	3324      	adds	r3, #36	; 0x24
 8103e5a:	2101      	movs	r1, #1
 8103e5c:	4618      	mov	r0, r3
 8103e5e:	f000 fd6f 	bl	8104940 <RCCEx_PLL3_Config>
 8103e62:	4603      	mov	r3, r0
 8103e64:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8103e66:	e009      	b.n	8103e7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8103e68:	2301      	movs	r3, #1
 8103e6a:	75fb      	strb	r3, [r7, #23]
      break;
 8103e6c:	e006      	b.n	8103e7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8103e6e:	bf00      	nop
 8103e70:	e004      	b.n	8103e7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8103e72:	bf00      	nop
 8103e74:	e002      	b.n	8103e7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8103e76:	bf00      	nop
 8103e78:	e000      	b.n	8103e7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8103e7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103e7c:	7dfb      	ldrb	r3, [r7, #23]
 8103e7e:	2b00      	cmp	r3, #0
 8103e80:	d10c      	bne.n	8103e9c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8103e82:	4b05      	ldr	r3, [pc, #20]	; (8103e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103e86:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8103e8a:	687b      	ldr	r3, [r7, #4]
 8103e8c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8103e90:	4901      	ldr	r1, [pc, #4]	; (8103e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103e92:	4313      	orrs	r3, r2
 8103e94:	658b      	str	r3, [r1, #88]	; 0x58
 8103e96:	e003      	b.n	8103ea0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8103e98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103e9c:	7dfb      	ldrb	r3, [r7, #23]
 8103e9e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8103ea0:	687b      	ldr	r3, [r7, #4]
 8103ea2:	681b      	ldr	r3, [r3, #0]
 8103ea4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103ea8:	2b00      	cmp	r3, #0
 8103eaa:	d02f      	beq.n	8103f0c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8103eac:	687b      	ldr	r3, [r7, #4]
 8103eae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103eb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103eb4:	d00e      	beq.n	8103ed4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8103eb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103eba:	d814      	bhi.n	8103ee6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8103ebc:	2b00      	cmp	r3, #0
 8103ebe:	d015      	beq.n	8103eec <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8103ec0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103ec4:	d10f      	bne.n	8103ee6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103ec6:	4bb0      	ldr	r3, [pc, #704]	; (8104188 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103eca:	4aaf      	ldr	r2, [pc, #700]	; (8104188 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103ed0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8103ed2:	e00c      	b.n	8103eee <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103ed4:	687b      	ldr	r3, [r7, #4]
 8103ed6:	3304      	adds	r3, #4
 8103ed8:	2101      	movs	r1, #1
 8103eda:	4618      	mov	r0, r3
 8103edc:	f000 fc7e 	bl	81047dc <RCCEx_PLL2_Config>
 8103ee0:	4603      	mov	r3, r0
 8103ee2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8103ee4:	e003      	b.n	8103eee <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103ee6:	2301      	movs	r3, #1
 8103ee8:	75fb      	strb	r3, [r7, #23]
      break;
 8103eea:	e000      	b.n	8103eee <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8103eec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103eee:	7dfb      	ldrb	r3, [r7, #23]
 8103ef0:	2b00      	cmp	r3, #0
 8103ef2:	d109      	bne.n	8103f08 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8103ef4:	4ba4      	ldr	r3, [pc, #656]	; (8104188 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103ef8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8103efc:	687b      	ldr	r3, [r7, #4]
 8103efe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103f00:	49a1      	ldr	r1, [pc, #644]	; (8104188 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103f02:	4313      	orrs	r3, r2
 8103f04:	650b      	str	r3, [r1, #80]	; 0x50
 8103f06:	e001      	b.n	8103f0c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103f08:	7dfb      	ldrb	r3, [r7, #23]
 8103f0a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8103f0c:	687b      	ldr	r3, [r7, #4]
 8103f0e:	681b      	ldr	r3, [r3, #0]
 8103f10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8103f14:	2b00      	cmp	r3, #0
 8103f16:	d032      	beq.n	8103f7e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8103f18:	687b      	ldr	r3, [r7, #4]
 8103f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103f1c:	2b03      	cmp	r3, #3
 8103f1e:	d81b      	bhi.n	8103f58 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8103f20:	a201      	add	r2, pc, #4	; (adr r2, 8103f28 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8103f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103f26:	bf00      	nop
 8103f28:	08103f5f 	.word	0x08103f5f
 8103f2c:	08103f39 	.word	0x08103f39
 8103f30:	08103f47 	.word	0x08103f47
 8103f34:	08103f5f 	.word	0x08103f5f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103f38:	4b93      	ldr	r3, [pc, #588]	; (8104188 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103f3c:	4a92      	ldr	r2, [pc, #584]	; (8104188 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103f3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103f42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8103f44:	e00c      	b.n	8103f60 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103f46:	687b      	ldr	r3, [r7, #4]
 8103f48:	3304      	adds	r3, #4
 8103f4a:	2102      	movs	r1, #2
 8103f4c:	4618      	mov	r0, r3
 8103f4e:	f000 fc45 	bl	81047dc <RCCEx_PLL2_Config>
 8103f52:	4603      	mov	r3, r0
 8103f54:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8103f56:	e003      	b.n	8103f60 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8103f58:	2301      	movs	r3, #1
 8103f5a:	75fb      	strb	r3, [r7, #23]
      break;
 8103f5c:	e000      	b.n	8103f60 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8103f5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103f60:	7dfb      	ldrb	r3, [r7, #23]
 8103f62:	2b00      	cmp	r3, #0
 8103f64:	d109      	bne.n	8103f7a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8103f66:	4b88      	ldr	r3, [pc, #544]	; (8104188 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103f6a:	f023 0203 	bic.w	r2, r3, #3
 8103f6e:	687b      	ldr	r3, [r7, #4]
 8103f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103f72:	4985      	ldr	r1, [pc, #532]	; (8104188 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103f74:	4313      	orrs	r3, r2
 8103f76:	64cb      	str	r3, [r1, #76]	; 0x4c
 8103f78:	e001      	b.n	8103f7e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103f7a:	7dfb      	ldrb	r3, [r7, #23]
 8103f7c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8103f7e:	687b      	ldr	r3, [r7, #4]
 8103f80:	681b      	ldr	r3, [r3, #0]
 8103f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8103f86:	2b00      	cmp	r3, #0
 8103f88:	f000 8088 	beq.w	810409c <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8103f8c:	4b7f      	ldr	r3, [pc, #508]	; (810418c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8103f8e:	681b      	ldr	r3, [r3, #0]
 8103f90:	4a7e      	ldr	r2, [pc, #504]	; (810418c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8103f92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8103f96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8103f98:	f7fd fb7e 	bl	8101698 <HAL_GetTick>
 8103f9c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103f9e:	e009      	b.n	8103fb4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8103fa0:	f7fd fb7a 	bl	8101698 <HAL_GetTick>
 8103fa4:	4602      	mov	r2, r0
 8103fa6:	693b      	ldr	r3, [r7, #16]
 8103fa8:	1ad3      	subs	r3, r2, r3
 8103faa:	2b64      	cmp	r3, #100	; 0x64
 8103fac:	d902      	bls.n	8103fb4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8103fae:	2303      	movs	r3, #3
 8103fb0:	75fb      	strb	r3, [r7, #23]
        break;
 8103fb2:	e005      	b.n	8103fc0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103fb4:	4b75      	ldr	r3, [pc, #468]	; (810418c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8103fb6:	681b      	ldr	r3, [r3, #0]
 8103fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103fbc:	2b00      	cmp	r3, #0
 8103fbe:	d0ef      	beq.n	8103fa0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8103fc0:	7dfb      	ldrb	r3, [r7, #23]
 8103fc2:	2b00      	cmp	r3, #0
 8103fc4:	d168      	bne.n	8104098 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8103fc6:	4b70      	ldr	r3, [pc, #448]	; (8104188 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103fc8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8103fca:	687b      	ldr	r3, [r7, #4]
 8103fcc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103fd0:	4053      	eors	r3, r2
 8103fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8103fd6:	2b00      	cmp	r3, #0
 8103fd8:	d013      	beq.n	8104002 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8103fda:	4b6b      	ldr	r3, [pc, #428]	; (8104188 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103fde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8103fe2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8103fe4:	4b68      	ldr	r3, [pc, #416]	; (8104188 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103fe8:	4a67      	ldr	r2, [pc, #412]	; (8104188 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103fea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8103fee:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8103ff0:	4b65      	ldr	r3, [pc, #404]	; (8104188 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103ff4:	4a64      	ldr	r2, [pc, #400]	; (8104188 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8103ffa:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8103ffc:	4a62      	ldr	r2, [pc, #392]	; (8104188 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103ffe:	68fb      	ldr	r3, [r7, #12]
 8104000:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8104002:	687b      	ldr	r3, [r7, #4]
 8104004:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8104008:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810400c:	d115      	bne.n	810403a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810400e:	f7fd fb43 	bl	8101698 <HAL_GetTick>
 8104012:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8104014:	e00b      	b.n	810402e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8104016:	f7fd fb3f 	bl	8101698 <HAL_GetTick>
 810401a:	4602      	mov	r2, r0
 810401c:	693b      	ldr	r3, [r7, #16]
 810401e:	1ad3      	subs	r3, r2, r3
 8104020:	f241 3288 	movw	r2, #5000	; 0x1388
 8104024:	4293      	cmp	r3, r2
 8104026:	d902      	bls.n	810402e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8104028:	2303      	movs	r3, #3
 810402a:	75fb      	strb	r3, [r7, #23]
            break;
 810402c:	e005      	b.n	810403a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810402e:	4b56      	ldr	r3, [pc, #344]	; (8104188 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104032:	f003 0302 	and.w	r3, r3, #2
 8104036:	2b00      	cmp	r3, #0
 8104038:	d0ed      	beq.n	8104016 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 810403a:	7dfb      	ldrb	r3, [r7, #23]
 810403c:	2b00      	cmp	r3, #0
 810403e:	d128      	bne.n	8104092 <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8104040:	687b      	ldr	r3, [r7, #4]
 8104042:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8104046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810404a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810404e:	d10f      	bne.n	8104070 <HAL_RCCEx_PeriphCLKConfig+0x720>
 8104050:	4b4d      	ldr	r3, [pc, #308]	; (8104188 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104052:	691b      	ldr	r3, [r3, #16]
 8104054:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8104058:	687b      	ldr	r3, [r7, #4]
 810405a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810405e:	091b      	lsrs	r3, r3, #4
 8104060:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8104064:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8104068:	4947      	ldr	r1, [pc, #284]	; (8104188 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810406a:	4313      	orrs	r3, r2
 810406c:	610b      	str	r3, [r1, #16]
 810406e:	e005      	b.n	810407c <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8104070:	4b45      	ldr	r3, [pc, #276]	; (8104188 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104072:	691b      	ldr	r3, [r3, #16]
 8104074:	4a44      	ldr	r2, [pc, #272]	; (8104188 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104076:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 810407a:	6113      	str	r3, [r2, #16]
 810407c:	4b42      	ldr	r3, [pc, #264]	; (8104188 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810407e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8104080:	687b      	ldr	r3, [r7, #4]
 8104082:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8104086:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810408a:	493f      	ldr	r1, [pc, #252]	; (8104188 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810408c:	4313      	orrs	r3, r2
 810408e:	670b      	str	r3, [r1, #112]	; 0x70
 8104090:	e004      	b.n	810409c <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8104092:	7dfb      	ldrb	r3, [r7, #23]
 8104094:	75bb      	strb	r3, [r7, #22]
 8104096:	e001      	b.n	810409c <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104098:	7dfb      	ldrb	r3, [r7, #23]
 810409a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 810409c:	687b      	ldr	r3, [r7, #4]
 810409e:	681b      	ldr	r3, [r3, #0]
 81040a0:	f003 0301 	and.w	r3, r3, #1
 81040a4:	2b00      	cmp	r3, #0
 81040a6:	f000 8083 	beq.w	81041b0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 81040aa:	687b      	ldr	r3, [r7, #4]
 81040ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81040ae:	2b28      	cmp	r3, #40	; 0x28
 81040b0:	d866      	bhi.n	8104180 <HAL_RCCEx_PeriphCLKConfig+0x830>
 81040b2:	a201      	add	r2, pc, #4	; (adr r2, 81040b8 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 81040b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81040b8:	08104191 	.word	0x08104191
 81040bc:	08104181 	.word	0x08104181
 81040c0:	08104181 	.word	0x08104181
 81040c4:	08104181 	.word	0x08104181
 81040c8:	08104181 	.word	0x08104181
 81040cc:	08104181 	.word	0x08104181
 81040d0:	08104181 	.word	0x08104181
 81040d4:	08104181 	.word	0x08104181
 81040d8:	0810415d 	.word	0x0810415d
 81040dc:	08104181 	.word	0x08104181
 81040e0:	08104181 	.word	0x08104181
 81040e4:	08104181 	.word	0x08104181
 81040e8:	08104181 	.word	0x08104181
 81040ec:	08104181 	.word	0x08104181
 81040f0:	08104181 	.word	0x08104181
 81040f4:	08104181 	.word	0x08104181
 81040f8:	0810416f 	.word	0x0810416f
 81040fc:	08104181 	.word	0x08104181
 8104100:	08104181 	.word	0x08104181
 8104104:	08104181 	.word	0x08104181
 8104108:	08104181 	.word	0x08104181
 810410c:	08104181 	.word	0x08104181
 8104110:	08104181 	.word	0x08104181
 8104114:	08104181 	.word	0x08104181
 8104118:	08104191 	.word	0x08104191
 810411c:	08104181 	.word	0x08104181
 8104120:	08104181 	.word	0x08104181
 8104124:	08104181 	.word	0x08104181
 8104128:	08104181 	.word	0x08104181
 810412c:	08104181 	.word	0x08104181
 8104130:	08104181 	.word	0x08104181
 8104134:	08104181 	.word	0x08104181
 8104138:	08104191 	.word	0x08104191
 810413c:	08104181 	.word	0x08104181
 8104140:	08104181 	.word	0x08104181
 8104144:	08104181 	.word	0x08104181
 8104148:	08104181 	.word	0x08104181
 810414c:	08104181 	.word	0x08104181
 8104150:	08104181 	.word	0x08104181
 8104154:	08104181 	.word	0x08104181
 8104158:	08104191 	.word	0x08104191
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810415c:	687b      	ldr	r3, [r7, #4]
 810415e:	3304      	adds	r3, #4
 8104160:	2101      	movs	r1, #1
 8104162:	4618      	mov	r0, r3
 8104164:	f000 fb3a 	bl	81047dc <RCCEx_PLL2_Config>
 8104168:	4603      	mov	r3, r0
 810416a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 810416c:	e011      	b.n	8104192 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810416e:	687b      	ldr	r3, [r7, #4]
 8104170:	3324      	adds	r3, #36	; 0x24
 8104172:	2101      	movs	r1, #1
 8104174:	4618      	mov	r0, r3
 8104176:	f000 fbe3 	bl	8104940 <RCCEx_PLL3_Config>
 810417a:	4603      	mov	r3, r0
 810417c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 810417e:	e008      	b.n	8104192 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104180:	2301      	movs	r3, #1
 8104182:	75fb      	strb	r3, [r7, #23]
      break;
 8104184:	e005      	b.n	8104192 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8104186:	bf00      	nop
 8104188:	58024400 	.word	0x58024400
 810418c:	58024800 	.word	0x58024800
      break;
 8104190:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104192:	7dfb      	ldrb	r3, [r7, #23]
 8104194:	2b00      	cmp	r3, #0
 8104196:	d109      	bne.n	81041ac <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8104198:	4b96      	ldr	r3, [pc, #600]	; (81043f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810419a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810419c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 81041a0:	687b      	ldr	r3, [r7, #4]
 81041a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81041a4:	4993      	ldr	r1, [pc, #588]	; (81043f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81041a6:	4313      	orrs	r3, r2
 81041a8:	654b      	str	r3, [r1, #84]	; 0x54
 81041aa:	e001      	b.n	81041b0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81041ac:	7dfb      	ldrb	r3, [r7, #23]
 81041ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 81041b0:	687b      	ldr	r3, [r7, #4]
 81041b2:	681b      	ldr	r3, [r3, #0]
 81041b4:	f003 0302 	and.w	r3, r3, #2
 81041b8:	2b00      	cmp	r3, #0
 81041ba:	d038      	beq.n	810422e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 81041bc:	687b      	ldr	r3, [r7, #4]
 81041be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81041c0:	2b05      	cmp	r3, #5
 81041c2:	d821      	bhi.n	8104208 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 81041c4:	a201      	add	r2, pc, #4	; (adr r2, 81041cc <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 81041c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81041ca:	bf00      	nop
 81041cc:	0810420f 	.word	0x0810420f
 81041d0:	081041e5 	.word	0x081041e5
 81041d4:	081041f7 	.word	0x081041f7
 81041d8:	0810420f 	.word	0x0810420f
 81041dc:	0810420f 	.word	0x0810420f
 81041e0:	0810420f 	.word	0x0810420f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81041e4:	687b      	ldr	r3, [r7, #4]
 81041e6:	3304      	adds	r3, #4
 81041e8:	2101      	movs	r1, #1
 81041ea:	4618      	mov	r0, r3
 81041ec:	f000 faf6 	bl	81047dc <RCCEx_PLL2_Config>
 81041f0:	4603      	mov	r3, r0
 81041f2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 81041f4:	e00c      	b.n	8104210 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81041f6:	687b      	ldr	r3, [r7, #4]
 81041f8:	3324      	adds	r3, #36	; 0x24
 81041fa:	2101      	movs	r1, #1
 81041fc:	4618      	mov	r0, r3
 81041fe:	f000 fb9f 	bl	8104940 <RCCEx_PLL3_Config>
 8104202:	4603      	mov	r3, r0
 8104204:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8104206:	e003      	b.n	8104210 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104208:	2301      	movs	r3, #1
 810420a:	75fb      	strb	r3, [r7, #23]
      break;
 810420c:	e000      	b.n	8104210 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 810420e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104210:	7dfb      	ldrb	r3, [r7, #23]
 8104212:	2b00      	cmp	r3, #0
 8104214:	d109      	bne.n	810422a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8104216:	4b77      	ldr	r3, [pc, #476]	; (81043f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8104218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810421a:	f023 0207 	bic.w	r2, r3, #7
 810421e:	687b      	ldr	r3, [r7, #4]
 8104220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8104222:	4974      	ldr	r1, [pc, #464]	; (81043f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8104224:	4313      	orrs	r3, r2
 8104226:	654b      	str	r3, [r1, #84]	; 0x54
 8104228:	e001      	b.n	810422e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810422a:	7dfb      	ldrb	r3, [r7, #23]
 810422c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 810422e:	687b      	ldr	r3, [r7, #4]
 8104230:	681b      	ldr	r3, [r3, #0]
 8104232:	f003 0304 	and.w	r3, r3, #4
 8104236:	2b00      	cmp	r3, #0
 8104238:	d03a      	beq.n	81042b0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 810423a:	687b      	ldr	r3, [r7, #4]
 810423c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8104240:	2b05      	cmp	r3, #5
 8104242:	d821      	bhi.n	8104288 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8104244:	a201      	add	r2, pc, #4	; (adr r2, 810424c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8104246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810424a:	bf00      	nop
 810424c:	0810428f 	.word	0x0810428f
 8104250:	08104265 	.word	0x08104265
 8104254:	08104277 	.word	0x08104277
 8104258:	0810428f 	.word	0x0810428f
 810425c:	0810428f 	.word	0x0810428f
 8104260:	0810428f 	.word	0x0810428f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8104264:	687b      	ldr	r3, [r7, #4]
 8104266:	3304      	adds	r3, #4
 8104268:	2101      	movs	r1, #1
 810426a:	4618      	mov	r0, r3
 810426c:	f000 fab6 	bl	81047dc <RCCEx_PLL2_Config>
 8104270:	4603      	mov	r3, r0
 8104272:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8104274:	e00c      	b.n	8104290 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8104276:	687b      	ldr	r3, [r7, #4]
 8104278:	3324      	adds	r3, #36	; 0x24
 810427a:	2101      	movs	r1, #1
 810427c:	4618      	mov	r0, r3
 810427e:	f000 fb5f 	bl	8104940 <RCCEx_PLL3_Config>
 8104282:	4603      	mov	r3, r0
 8104284:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8104286:	e003      	b.n	8104290 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104288:	2301      	movs	r3, #1
 810428a:	75fb      	strb	r3, [r7, #23]
      break;
 810428c:	e000      	b.n	8104290 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 810428e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104290:	7dfb      	ldrb	r3, [r7, #23]
 8104292:	2b00      	cmp	r3, #0
 8104294:	d10a      	bne.n	81042ac <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8104296:	4b57      	ldr	r3, [pc, #348]	; (81043f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8104298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810429a:	f023 0207 	bic.w	r2, r3, #7
 810429e:	687b      	ldr	r3, [r7, #4]
 81042a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81042a4:	4953      	ldr	r1, [pc, #332]	; (81043f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81042a6:	4313      	orrs	r3, r2
 81042a8:	658b      	str	r3, [r1, #88]	; 0x58
 81042aa:	e001      	b.n	81042b0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81042ac:	7dfb      	ldrb	r3, [r7, #23]
 81042ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 81042b0:	687b      	ldr	r3, [r7, #4]
 81042b2:	681b      	ldr	r3, [r3, #0]
 81042b4:	f003 0320 	and.w	r3, r3, #32
 81042b8:	2b00      	cmp	r3, #0
 81042ba:	d04b      	beq.n	8104354 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 81042bc:	687b      	ldr	r3, [r7, #4]
 81042be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81042c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81042c6:	d02e      	beq.n	8104326 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 81042c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81042cc:	d828      	bhi.n	8104320 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 81042ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81042d2:	d02a      	beq.n	810432a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 81042d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81042d8:	d822      	bhi.n	8104320 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 81042da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81042de:	d026      	beq.n	810432e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 81042e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81042e4:	d81c      	bhi.n	8104320 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 81042e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81042ea:	d010      	beq.n	810430e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 81042ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81042f0:	d816      	bhi.n	8104320 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 81042f2:	2b00      	cmp	r3, #0
 81042f4:	d01d      	beq.n	8104332 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 81042f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81042fa:	d111      	bne.n	8104320 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81042fc:	687b      	ldr	r3, [r7, #4]
 81042fe:	3304      	adds	r3, #4
 8104300:	2100      	movs	r1, #0
 8104302:	4618      	mov	r0, r3
 8104304:	f000 fa6a 	bl	81047dc <RCCEx_PLL2_Config>
 8104308:	4603      	mov	r3, r0
 810430a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 810430c:	e012      	b.n	8104334 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810430e:	687b      	ldr	r3, [r7, #4]
 8104310:	3324      	adds	r3, #36	; 0x24
 8104312:	2102      	movs	r1, #2
 8104314:	4618      	mov	r0, r3
 8104316:	f000 fb13 	bl	8104940 <RCCEx_PLL3_Config>
 810431a:	4603      	mov	r3, r0
 810431c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 810431e:	e009      	b.n	8104334 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104320:	2301      	movs	r3, #1
 8104322:	75fb      	strb	r3, [r7, #23]
      break;
 8104324:	e006      	b.n	8104334 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8104326:	bf00      	nop
 8104328:	e004      	b.n	8104334 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 810432a:	bf00      	nop
 810432c:	e002      	b.n	8104334 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 810432e:	bf00      	nop
 8104330:	e000      	b.n	8104334 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8104332:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104334:	7dfb      	ldrb	r3, [r7, #23]
 8104336:	2b00      	cmp	r3, #0
 8104338:	d10a      	bne.n	8104350 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 810433a:	4b2e      	ldr	r3, [pc, #184]	; (81043f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810433c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810433e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8104342:	687b      	ldr	r3, [r7, #4]
 8104344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8104348:	492a      	ldr	r1, [pc, #168]	; (81043f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810434a:	4313      	orrs	r3, r2
 810434c:	654b      	str	r3, [r1, #84]	; 0x54
 810434e:	e001      	b.n	8104354 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104350:	7dfb      	ldrb	r3, [r7, #23]
 8104352:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8104354:	687b      	ldr	r3, [r7, #4]
 8104356:	681b      	ldr	r3, [r3, #0]
 8104358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810435c:	2b00      	cmp	r3, #0
 810435e:	d04d      	beq.n	81043fc <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8104360:	687b      	ldr	r3, [r7, #4]
 8104362:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8104366:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 810436a:	d02e      	beq.n	81043ca <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 810436c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8104370:	d828      	bhi.n	81043c4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8104372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104376:	d02a      	beq.n	81043ce <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8104378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810437c:	d822      	bhi.n	81043c4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 810437e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8104382:	d026      	beq.n	81043d2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8104384:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8104388:	d81c      	bhi.n	81043c4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 810438a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810438e:	d010      	beq.n	81043b2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8104390:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8104394:	d816      	bhi.n	81043c4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8104396:	2b00      	cmp	r3, #0
 8104398:	d01d      	beq.n	81043d6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 810439a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810439e:	d111      	bne.n	81043c4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81043a0:	687b      	ldr	r3, [r7, #4]
 81043a2:	3304      	adds	r3, #4
 81043a4:	2100      	movs	r1, #0
 81043a6:	4618      	mov	r0, r3
 81043a8:	f000 fa18 	bl	81047dc <RCCEx_PLL2_Config>
 81043ac:	4603      	mov	r3, r0
 81043ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 81043b0:	e012      	b.n	81043d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81043b2:	687b      	ldr	r3, [r7, #4]
 81043b4:	3324      	adds	r3, #36	; 0x24
 81043b6:	2102      	movs	r1, #2
 81043b8:	4618      	mov	r0, r3
 81043ba:	f000 fac1 	bl	8104940 <RCCEx_PLL3_Config>
 81043be:	4603      	mov	r3, r0
 81043c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 81043c2:	e009      	b.n	81043d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81043c4:	2301      	movs	r3, #1
 81043c6:	75fb      	strb	r3, [r7, #23]
      break;
 81043c8:	e006      	b.n	81043d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 81043ca:	bf00      	nop
 81043cc:	e004      	b.n	81043d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 81043ce:	bf00      	nop
 81043d0:	e002      	b.n	81043d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 81043d2:	bf00      	nop
 81043d4:	e000      	b.n	81043d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 81043d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81043d8:	7dfb      	ldrb	r3, [r7, #23]
 81043da:	2b00      	cmp	r3, #0
 81043dc:	d10c      	bne.n	81043f8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 81043de:	4b05      	ldr	r3, [pc, #20]	; (81043f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81043e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81043e2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 81043e6:	687b      	ldr	r3, [r7, #4]
 81043e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81043ec:	4901      	ldr	r1, [pc, #4]	; (81043f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81043ee:	4313      	orrs	r3, r2
 81043f0:	658b      	str	r3, [r1, #88]	; 0x58
 81043f2:	e003      	b.n	81043fc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 81043f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81043f8:	7dfb      	ldrb	r3, [r7, #23]
 81043fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81043fc:	687b      	ldr	r3, [r7, #4]
 81043fe:	681b      	ldr	r3, [r3, #0]
 8104400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8104404:	2b00      	cmp	r3, #0
 8104406:	d04b      	beq.n	81044a0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8104408:	687b      	ldr	r3, [r7, #4]
 810440a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810440e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8104412:	d02e      	beq.n	8104472 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8104414:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8104418:	d828      	bhi.n	810446c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 810441a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810441e:	d02a      	beq.n	8104476 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8104420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8104424:	d822      	bhi.n	810446c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8104426:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 810442a:	d026      	beq.n	810447a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 810442c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8104430:	d81c      	bhi.n	810446c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8104432:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104436:	d010      	beq.n	810445a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8104438:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810443c:	d816      	bhi.n	810446c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 810443e:	2b00      	cmp	r3, #0
 8104440:	d01d      	beq.n	810447e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8104442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104446:	d111      	bne.n	810446c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104448:	687b      	ldr	r3, [r7, #4]
 810444a:	3304      	adds	r3, #4
 810444c:	2100      	movs	r1, #0
 810444e:	4618      	mov	r0, r3
 8104450:	f000 f9c4 	bl	81047dc <RCCEx_PLL2_Config>
 8104454:	4603      	mov	r3, r0
 8104456:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8104458:	e012      	b.n	8104480 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810445a:	687b      	ldr	r3, [r7, #4]
 810445c:	3324      	adds	r3, #36	; 0x24
 810445e:	2102      	movs	r1, #2
 8104460:	4618      	mov	r0, r3
 8104462:	f000 fa6d 	bl	8104940 <RCCEx_PLL3_Config>
 8104466:	4603      	mov	r3, r0
 8104468:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 810446a:	e009      	b.n	8104480 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810446c:	2301      	movs	r3, #1
 810446e:	75fb      	strb	r3, [r7, #23]
      break;
 8104470:	e006      	b.n	8104480 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8104472:	bf00      	nop
 8104474:	e004      	b.n	8104480 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8104476:	bf00      	nop
 8104478:	e002      	b.n	8104480 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810447a:	bf00      	nop
 810447c:	e000      	b.n	8104480 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810447e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104480:	7dfb      	ldrb	r3, [r7, #23]
 8104482:	2b00      	cmp	r3, #0
 8104484:	d10a      	bne.n	810449c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8104486:	4b9d      	ldr	r3, [pc, #628]	; (81046fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810448a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 810448e:	687b      	ldr	r3, [r7, #4]
 8104490:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8104494:	4999      	ldr	r1, [pc, #612]	; (81046fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104496:	4313      	orrs	r3, r2
 8104498:	658b      	str	r3, [r1, #88]	; 0x58
 810449a:	e001      	b.n	81044a0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810449c:	7dfb      	ldrb	r3, [r7, #23]
 810449e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 81044a0:	687b      	ldr	r3, [r7, #4]
 81044a2:	681b      	ldr	r3, [r3, #0]
 81044a4:	f003 0308 	and.w	r3, r3, #8
 81044a8:	2b00      	cmp	r3, #0
 81044aa:	d01a      	beq.n	81044e2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 81044ac:	687b      	ldr	r3, [r7, #4]
 81044ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81044b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81044b6:	d10a      	bne.n	81044ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 81044b8:	687b      	ldr	r3, [r7, #4]
 81044ba:	3324      	adds	r3, #36	; 0x24
 81044bc:	2102      	movs	r1, #2
 81044be:	4618      	mov	r0, r3
 81044c0:	f000 fa3e 	bl	8104940 <RCCEx_PLL3_Config>
 81044c4:	4603      	mov	r3, r0
 81044c6:	2b00      	cmp	r3, #0
 81044c8:	d001      	beq.n	81044ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 81044ca:	2301      	movs	r3, #1
 81044cc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81044ce:	4b8b      	ldr	r3, [pc, #556]	; (81046fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81044d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81044d2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 81044d6:	687b      	ldr	r3, [r7, #4]
 81044d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81044dc:	4987      	ldr	r1, [pc, #540]	; (81046fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81044de:	4313      	orrs	r3, r2
 81044e0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81044e2:	687b      	ldr	r3, [r7, #4]
 81044e4:	681b      	ldr	r3, [r3, #0]
 81044e6:	f003 0310 	and.w	r3, r3, #16
 81044ea:	2b00      	cmp	r3, #0
 81044ec:	d01a      	beq.n	8104524 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 81044ee:	687b      	ldr	r3, [r7, #4]
 81044f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81044f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81044f8:	d10a      	bne.n	8104510 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 81044fa:	687b      	ldr	r3, [r7, #4]
 81044fc:	3324      	adds	r3, #36	; 0x24
 81044fe:	2102      	movs	r1, #2
 8104500:	4618      	mov	r0, r3
 8104502:	f000 fa1d 	bl	8104940 <RCCEx_PLL3_Config>
 8104506:	4603      	mov	r3, r0
 8104508:	2b00      	cmp	r3, #0
 810450a:	d001      	beq.n	8104510 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 810450c:	2301      	movs	r3, #1
 810450e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8104510:	4b7a      	ldr	r3, [pc, #488]	; (81046fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104514:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8104518:	687b      	ldr	r3, [r7, #4]
 810451a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810451e:	4977      	ldr	r1, [pc, #476]	; (81046fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104520:	4313      	orrs	r3, r2
 8104522:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8104524:	687b      	ldr	r3, [r7, #4]
 8104526:	681b      	ldr	r3, [r3, #0]
 8104528:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 810452c:	2b00      	cmp	r3, #0
 810452e:	d034      	beq.n	810459a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8104530:	687b      	ldr	r3, [r7, #4]
 8104532:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8104536:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810453a:	d01d      	beq.n	8104578 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 810453c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104540:	d817      	bhi.n	8104572 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8104542:	2b00      	cmp	r3, #0
 8104544:	d003      	beq.n	810454e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8104546:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810454a:	d009      	beq.n	8104560 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 810454c:	e011      	b.n	8104572 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810454e:	687b      	ldr	r3, [r7, #4]
 8104550:	3304      	adds	r3, #4
 8104552:	2100      	movs	r1, #0
 8104554:	4618      	mov	r0, r3
 8104556:	f000 f941 	bl	81047dc <RCCEx_PLL2_Config>
 810455a:	4603      	mov	r3, r0
 810455c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 810455e:	e00c      	b.n	810457a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8104560:	687b      	ldr	r3, [r7, #4]
 8104562:	3324      	adds	r3, #36	; 0x24
 8104564:	2102      	movs	r1, #2
 8104566:	4618      	mov	r0, r3
 8104568:	f000 f9ea 	bl	8104940 <RCCEx_PLL3_Config>
 810456c:	4603      	mov	r3, r0
 810456e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8104570:	e003      	b.n	810457a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104572:	2301      	movs	r3, #1
 8104574:	75fb      	strb	r3, [r7, #23]
      break;
 8104576:	e000      	b.n	810457a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8104578:	bf00      	nop
    }

    if(ret == HAL_OK)
 810457a:	7dfb      	ldrb	r3, [r7, #23]
 810457c:	2b00      	cmp	r3, #0
 810457e:	d10a      	bne.n	8104596 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8104580:	4b5e      	ldr	r3, [pc, #376]	; (81046fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104584:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8104588:	687b      	ldr	r3, [r7, #4]
 810458a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810458e:	495b      	ldr	r1, [pc, #364]	; (81046fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104590:	4313      	orrs	r3, r2
 8104592:	658b      	str	r3, [r1, #88]	; 0x58
 8104594:	e001      	b.n	810459a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104596:	7dfb      	ldrb	r3, [r7, #23]
 8104598:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810459a:	687b      	ldr	r3, [r7, #4]
 810459c:	681b      	ldr	r3, [r3, #0]
 810459e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81045a2:	2b00      	cmp	r3, #0
 81045a4:	d033      	beq.n	810460e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 81045a6:	687b      	ldr	r3, [r7, #4]
 81045a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81045ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81045b0:	d01c      	beq.n	81045ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 81045b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81045b6:	d816      	bhi.n	81045e6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 81045b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81045bc:	d003      	beq.n	81045c6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 81045be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81045c2:	d007      	beq.n	81045d4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 81045c4:	e00f      	b.n	81045e6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81045c6:	4b4d      	ldr	r3, [pc, #308]	; (81046fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81045c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81045ca:	4a4c      	ldr	r2, [pc, #304]	; (81046fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81045cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81045d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 81045d2:	e00c      	b.n	81045ee <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81045d4:	687b      	ldr	r3, [r7, #4]
 81045d6:	3324      	adds	r3, #36	; 0x24
 81045d8:	2101      	movs	r1, #1
 81045da:	4618      	mov	r0, r3
 81045dc:	f000 f9b0 	bl	8104940 <RCCEx_PLL3_Config>
 81045e0:	4603      	mov	r3, r0
 81045e2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 81045e4:	e003      	b.n	81045ee <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81045e6:	2301      	movs	r3, #1
 81045e8:	75fb      	strb	r3, [r7, #23]
      break;
 81045ea:	e000      	b.n	81045ee <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 81045ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 81045ee:	7dfb      	ldrb	r3, [r7, #23]
 81045f0:	2b00      	cmp	r3, #0
 81045f2:	d10a      	bne.n	810460a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 81045f4:	4b41      	ldr	r3, [pc, #260]	; (81046fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81045f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81045f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 81045fc:	687b      	ldr	r3, [r7, #4]
 81045fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104602:	493e      	ldr	r1, [pc, #248]	; (81046fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104604:	4313      	orrs	r3, r2
 8104606:	654b      	str	r3, [r1, #84]	; 0x54
 8104608:	e001      	b.n	810460e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810460a:	7dfb      	ldrb	r3, [r7, #23]
 810460c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 810460e:	687b      	ldr	r3, [r7, #4]
 8104610:	681b      	ldr	r3, [r3, #0]
 8104612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8104616:	2b00      	cmp	r3, #0
 8104618:	d029      	beq.n	810466e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 810461a:	687b      	ldr	r3, [r7, #4]
 810461c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810461e:	2b00      	cmp	r3, #0
 8104620:	d003      	beq.n	810462a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8104622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104626:	d007      	beq.n	8104638 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8104628:	e00f      	b.n	810464a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810462a:	4b34      	ldr	r3, [pc, #208]	; (81046fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810462c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810462e:	4a33      	ldr	r2, [pc, #204]	; (81046fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104634:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8104636:	e00b      	b.n	8104650 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8104638:	687b      	ldr	r3, [r7, #4]
 810463a:	3304      	adds	r3, #4
 810463c:	2102      	movs	r1, #2
 810463e:	4618      	mov	r0, r3
 8104640:	f000 f8cc 	bl	81047dc <RCCEx_PLL2_Config>
 8104644:	4603      	mov	r3, r0
 8104646:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8104648:	e002      	b.n	8104650 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 810464a:	2301      	movs	r3, #1
 810464c:	75fb      	strb	r3, [r7, #23]
      break;
 810464e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104650:	7dfb      	ldrb	r3, [r7, #23]
 8104652:	2b00      	cmp	r3, #0
 8104654:	d109      	bne.n	810466a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8104656:	4b29      	ldr	r3, [pc, #164]	; (81046fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810465a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810465e:	687b      	ldr	r3, [r7, #4]
 8104660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104662:	4926      	ldr	r1, [pc, #152]	; (81046fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104664:	4313      	orrs	r3, r2
 8104666:	64cb      	str	r3, [r1, #76]	; 0x4c
 8104668:	e001      	b.n	810466e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810466a:	7dfb      	ldrb	r3, [r7, #23]
 810466c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 810466e:	687b      	ldr	r3, [r7, #4]
 8104670:	681b      	ldr	r3, [r3, #0]
 8104672:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104676:	2b00      	cmp	r3, #0
 8104678:	d00a      	beq.n	8104690 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 810467a:	687b      	ldr	r3, [r7, #4]
 810467c:	3324      	adds	r3, #36	; 0x24
 810467e:	2102      	movs	r1, #2
 8104680:	4618      	mov	r0, r3
 8104682:	f000 f95d 	bl	8104940 <RCCEx_PLL3_Config>
 8104686:	4603      	mov	r3, r0
 8104688:	2b00      	cmp	r3, #0
 810468a:	d001      	beq.n	8104690 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 810468c:	2301      	movs	r3, #1
 810468e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8104690:	687b      	ldr	r3, [r7, #4]
 8104692:	681b      	ldr	r3, [r3, #0]
 8104694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104698:	2b00      	cmp	r3, #0
 810469a:	d033      	beq.n	8104704 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 810469c:	687b      	ldr	r3, [r7, #4]
 810469e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81046a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81046a4:	d017      	beq.n	81046d6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 81046a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81046aa:	d811      	bhi.n	81046d0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 81046ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81046b0:	d013      	beq.n	81046da <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 81046b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81046b6:	d80b      	bhi.n	81046d0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 81046b8:	2b00      	cmp	r3, #0
 81046ba:	d010      	beq.n	81046de <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 81046bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81046c0:	d106      	bne.n	81046d0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81046c2:	4b0e      	ldr	r3, [pc, #56]	; (81046fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81046c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81046c6:	4a0d      	ldr	r2, [pc, #52]	; (81046fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81046c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81046cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 81046ce:	e007      	b.n	81046e0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81046d0:	2301      	movs	r3, #1
 81046d2:	75fb      	strb	r3, [r7, #23]
      break;
 81046d4:	e004      	b.n	81046e0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 81046d6:	bf00      	nop
 81046d8:	e002      	b.n	81046e0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 81046da:	bf00      	nop
 81046dc:	e000      	b.n	81046e0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 81046de:	bf00      	nop
    }

    if(ret == HAL_OK)
 81046e0:	7dfb      	ldrb	r3, [r7, #23]
 81046e2:	2b00      	cmp	r3, #0
 81046e4:	d10c      	bne.n	8104700 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81046e6:	4b05      	ldr	r3, [pc, #20]	; (81046fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81046e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81046ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81046ee:	687b      	ldr	r3, [r7, #4]
 81046f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81046f2:	4902      	ldr	r1, [pc, #8]	; (81046fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81046f4:	4313      	orrs	r3, r2
 81046f6:	654b      	str	r3, [r1, #84]	; 0x54
 81046f8:	e004      	b.n	8104704 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 81046fa:	bf00      	nop
 81046fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104700:	7dfb      	ldrb	r3, [r7, #23]
 8104702:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8104704:	687b      	ldr	r3, [r7, #4]
 8104706:	681b      	ldr	r3, [r3, #0]
 8104708:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810470c:	2b00      	cmp	r3, #0
 810470e:	d008      	beq.n	8104722 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8104710:	4b31      	ldr	r3, [pc, #196]	; (81047d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104714:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8104718:	687b      	ldr	r3, [r7, #4]
 810471a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810471c:	492e      	ldr	r1, [pc, #184]	; (81047d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810471e:	4313      	orrs	r3, r2
 8104720:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8104722:	687b      	ldr	r3, [r7, #4]
 8104724:	681b      	ldr	r3, [r3, #0]
 8104726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810472a:	2b00      	cmp	r3, #0
 810472c:	d009      	beq.n	8104742 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 810472e:	4b2a      	ldr	r3, [pc, #168]	; (81047d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104730:	691b      	ldr	r3, [r3, #16]
 8104732:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8104736:	687b      	ldr	r3, [r7, #4]
 8104738:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810473c:	4926      	ldr	r1, [pc, #152]	; (81047d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810473e:	4313      	orrs	r3, r2
 8104740:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8104742:	687b      	ldr	r3, [r7, #4]
 8104744:	681b      	ldr	r3, [r3, #0]
 8104746:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810474a:	2b00      	cmp	r3, #0
 810474c:	d008      	beq.n	8104760 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810474e:	4b22      	ldr	r3, [pc, #136]	; (81047d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104752:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8104756:	687b      	ldr	r3, [r7, #4]
 8104758:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810475a:	491f      	ldr	r1, [pc, #124]	; (81047d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810475c:	4313      	orrs	r3, r2
 810475e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8104760:	687b      	ldr	r3, [r7, #4]
 8104762:	681b      	ldr	r3, [r3, #0]
 8104764:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8104768:	2b00      	cmp	r3, #0
 810476a:	d00d      	beq.n	8104788 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 810476c:	4b1a      	ldr	r3, [pc, #104]	; (81047d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810476e:	691b      	ldr	r3, [r3, #16]
 8104770:	4a19      	ldr	r2, [pc, #100]	; (81047d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104772:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8104776:	6113      	str	r3, [r2, #16]
 8104778:	4b17      	ldr	r3, [pc, #92]	; (81047d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810477a:	691a      	ldr	r2, [r3, #16]
 810477c:	687b      	ldr	r3, [r7, #4]
 810477e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8104782:	4915      	ldr	r1, [pc, #84]	; (81047d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104784:	4313      	orrs	r3, r2
 8104786:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8104788:	687b      	ldr	r3, [r7, #4]
 810478a:	681b      	ldr	r3, [r3, #0]
 810478c:	2b00      	cmp	r3, #0
 810478e:	da08      	bge.n	81047a2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8104790:	4b11      	ldr	r3, [pc, #68]	; (81047d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104794:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8104798:	687b      	ldr	r3, [r7, #4]
 810479a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810479c:	490e      	ldr	r1, [pc, #56]	; (81047d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810479e:	4313      	orrs	r3, r2
 81047a0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 81047a2:	687b      	ldr	r3, [r7, #4]
 81047a4:	681b      	ldr	r3, [r3, #0]
 81047a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 81047aa:	2b00      	cmp	r3, #0
 81047ac:	d009      	beq.n	81047c2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 81047ae:	4b0a      	ldr	r3, [pc, #40]	; (81047d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81047b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81047b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 81047b6:	687b      	ldr	r3, [r7, #4]
 81047b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81047bc:	4906      	ldr	r1, [pc, #24]	; (81047d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81047be:	4313      	orrs	r3, r2
 81047c0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 81047c2:	7dbb      	ldrb	r3, [r7, #22]
 81047c4:	2b00      	cmp	r3, #0
 81047c6:	d101      	bne.n	81047cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 81047c8:	2300      	movs	r3, #0
 81047ca:	e000      	b.n	81047ce <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 81047cc:	2301      	movs	r3, #1
}
 81047ce:	4618      	mov	r0, r3
 81047d0:	3718      	adds	r7, #24
 81047d2:	46bd      	mov	sp, r7
 81047d4:	bd80      	pop	{r7, pc}
 81047d6:	bf00      	nop
 81047d8:	58024400 	.word	0x58024400

081047dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 81047dc:	b580      	push	{r7, lr}
 81047de:	b084      	sub	sp, #16
 81047e0:	af00      	add	r7, sp, #0
 81047e2:	6078      	str	r0, [r7, #4]
 81047e4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81047e6:	2300      	movs	r3, #0
 81047e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81047ea:	4b54      	ldr	r3, [pc, #336]	; (810493c <RCCEx_PLL2_Config+0x160>)
 81047ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81047ee:	f003 0303 	and.w	r3, r3, #3
 81047f2:	2b03      	cmp	r3, #3
 81047f4:	d101      	bne.n	81047fa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 81047f6:	2301      	movs	r3, #1
 81047f8:	e09b      	b.n	8104932 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 81047fa:	4b50      	ldr	r3, [pc, #320]	; (810493c <RCCEx_PLL2_Config+0x160>)
 81047fc:	681b      	ldr	r3, [r3, #0]
 81047fe:	4a4f      	ldr	r2, [pc, #316]	; (810493c <RCCEx_PLL2_Config+0x160>)
 8104800:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8104804:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104806:	f7fc ff47 	bl	8101698 <HAL_GetTick>
 810480a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810480c:	e008      	b.n	8104820 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 810480e:	f7fc ff43 	bl	8101698 <HAL_GetTick>
 8104812:	4602      	mov	r2, r0
 8104814:	68bb      	ldr	r3, [r7, #8]
 8104816:	1ad3      	subs	r3, r2, r3
 8104818:	2b02      	cmp	r3, #2
 810481a:	d901      	bls.n	8104820 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 810481c:	2303      	movs	r3, #3
 810481e:	e088      	b.n	8104932 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8104820:	4b46      	ldr	r3, [pc, #280]	; (810493c <RCCEx_PLL2_Config+0x160>)
 8104822:	681b      	ldr	r3, [r3, #0]
 8104824:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104828:	2b00      	cmp	r3, #0
 810482a:	d1f0      	bne.n	810480e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 810482c:	4b43      	ldr	r3, [pc, #268]	; (810493c <RCCEx_PLL2_Config+0x160>)
 810482e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104830:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8104834:	687b      	ldr	r3, [r7, #4]
 8104836:	681b      	ldr	r3, [r3, #0]
 8104838:	031b      	lsls	r3, r3, #12
 810483a:	4940      	ldr	r1, [pc, #256]	; (810493c <RCCEx_PLL2_Config+0x160>)
 810483c:	4313      	orrs	r3, r2
 810483e:	628b      	str	r3, [r1, #40]	; 0x28
 8104840:	687b      	ldr	r3, [r7, #4]
 8104842:	685b      	ldr	r3, [r3, #4]
 8104844:	3b01      	subs	r3, #1
 8104846:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810484a:	687b      	ldr	r3, [r7, #4]
 810484c:	689b      	ldr	r3, [r3, #8]
 810484e:	3b01      	subs	r3, #1
 8104850:	025b      	lsls	r3, r3, #9
 8104852:	b29b      	uxth	r3, r3
 8104854:	431a      	orrs	r2, r3
 8104856:	687b      	ldr	r3, [r7, #4]
 8104858:	68db      	ldr	r3, [r3, #12]
 810485a:	3b01      	subs	r3, #1
 810485c:	041b      	lsls	r3, r3, #16
 810485e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8104862:	431a      	orrs	r2, r3
 8104864:	687b      	ldr	r3, [r7, #4]
 8104866:	691b      	ldr	r3, [r3, #16]
 8104868:	3b01      	subs	r3, #1
 810486a:	061b      	lsls	r3, r3, #24
 810486c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8104870:	4932      	ldr	r1, [pc, #200]	; (810493c <RCCEx_PLL2_Config+0x160>)
 8104872:	4313      	orrs	r3, r2
 8104874:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8104876:	4b31      	ldr	r3, [pc, #196]	; (810493c <RCCEx_PLL2_Config+0x160>)
 8104878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810487a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 810487e:	687b      	ldr	r3, [r7, #4]
 8104880:	695b      	ldr	r3, [r3, #20]
 8104882:	492e      	ldr	r1, [pc, #184]	; (810493c <RCCEx_PLL2_Config+0x160>)
 8104884:	4313      	orrs	r3, r2
 8104886:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8104888:	4b2c      	ldr	r3, [pc, #176]	; (810493c <RCCEx_PLL2_Config+0x160>)
 810488a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810488c:	f023 0220 	bic.w	r2, r3, #32
 8104890:	687b      	ldr	r3, [r7, #4]
 8104892:	699b      	ldr	r3, [r3, #24]
 8104894:	4929      	ldr	r1, [pc, #164]	; (810493c <RCCEx_PLL2_Config+0x160>)
 8104896:	4313      	orrs	r3, r2
 8104898:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810489a:	4b28      	ldr	r3, [pc, #160]	; (810493c <RCCEx_PLL2_Config+0x160>)
 810489c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810489e:	4a27      	ldr	r2, [pc, #156]	; (810493c <RCCEx_PLL2_Config+0x160>)
 81048a0:	f023 0310 	bic.w	r3, r3, #16
 81048a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 81048a6:	4b25      	ldr	r3, [pc, #148]	; (810493c <RCCEx_PLL2_Config+0x160>)
 81048a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81048aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81048ae:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 81048b2:	687a      	ldr	r2, [r7, #4]
 81048b4:	69d2      	ldr	r2, [r2, #28]
 81048b6:	00d2      	lsls	r2, r2, #3
 81048b8:	4920      	ldr	r1, [pc, #128]	; (810493c <RCCEx_PLL2_Config+0x160>)
 81048ba:	4313      	orrs	r3, r2
 81048bc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 81048be:	4b1f      	ldr	r3, [pc, #124]	; (810493c <RCCEx_PLL2_Config+0x160>)
 81048c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81048c2:	4a1e      	ldr	r2, [pc, #120]	; (810493c <RCCEx_PLL2_Config+0x160>)
 81048c4:	f043 0310 	orr.w	r3, r3, #16
 81048c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 81048ca:	683b      	ldr	r3, [r7, #0]
 81048cc:	2b00      	cmp	r3, #0
 81048ce:	d106      	bne.n	81048de <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 81048d0:	4b1a      	ldr	r3, [pc, #104]	; (810493c <RCCEx_PLL2_Config+0x160>)
 81048d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81048d4:	4a19      	ldr	r2, [pc, #100]	; (810493c <RCCEx_PLL2_Config+0x160>)
 81048d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 81048da:	62d3      	str	r3, [r2, #44]	; 0x2c
 81048dc:	e00f      	b.n	81048fe <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 81048de:	683b      	ldr	r3, [r7, #0]
 81048e0:	2b01      	cmp	r3, #1
 81048e2:	d106      	bne.n	81048f2 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 81048e4:	4b15      	ldr	r3, [pc, #84]	; (810493c <RCCEx_PLL2_Config+0x160>)
 81048e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81048e8:	4a14      	ldr	r2, [pc, #80]	; (810493c <RCCEx_PLL2_Config+0x160>)
 81048ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81048ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 81048f0:	e005      	b.n	81048fe <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 81048f2:	4b12      	ldr	r3, [pc, #72]	; (810493c <RCCEx_PLL2_Config+0x160>)
 81048f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81048f6:	4a11      	ldr	r2, [pc, #68]	; (810493c <RCCEx_PLL2_Config+0x160>)
 81048f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81048fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 81048fe:	4b0f      	ldr	r3, [pc, #60]	; (810493c <RCCEx_PLL2_Config+0x160>)
 8104900:	681b      	ldr	r3, [r3, #0]
 8104902:	4a0e      	ldr	r2, [pc, #56]	; (810493c <RCCEx_PLL2_Config+0x160>)
 8104904:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8104908:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810490a:	f7fc fec5 	bl	8101698 <HAL_GetTick>
 810490e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8104910:	e008      	b.n	8104924 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8104912:	f7fc fec1 	bl	8101698 <HAL_GetTick>
 8104916:	4602      	mov	r2, r0
 8104918:	68bb      	ldr	r3, [r7, #8]
 810491a:	1ad3      	subs	r3, r2, r3
 810491c:	2b02      	cmp	r3, #2
 810491e:	d901      	bls.n	8104924 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8104920:	2303      	movs	r3, #3
 8104922:	e006      	b.n	8104932 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8104924:	4b05      	ldr	r3, [pc, #20]	; (810493c <RCCEx_PLL2_Config+0x160>)
 8104926:	681b      	ldr	r3, [r3, #0]
 8104928:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810492c:	2b00      	cmp	r3, #0
 810492e:	d0f0      	beq.n	8104912 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8104930:	7bfb      	ldrb	r3, [r7, #15]
}
 8104932:	4618      	mov	r0, r3
 8104934:	3710      	adds	r7, #16
 8104936:	46bd      	mov	sp, r7
 8104938:	bd80      	pop	{r7, pc}
 810493a:	bf00      	nop
 810493c:	58024400 	.word	0x58024400

08104940 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8104940:	b580      	push	{r7, lr}
 8104942:	b084      	sub	sp, #16
 8104944:	af00      	add	r7, sp, #0
 8104946:	6078      	str	r0, [r7, #4]
 8104948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810494a:	2300      	movs	r3, #0
 810494c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810494e:	4b54      	ldr	r3, [pc, #336]	; (8104aa0 <RCCEx_PLL3_Config+0x160>)
 8104950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104952:	f003 0303 	and.w	r3, r3, #3
 8104956:	2b03      	cmp	r3, #3
 8104958:	d101      	bne.n	810495e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810495a:	2301      	movs	r3, #1
 810495c:	e09b      	b.n	8104a96 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810495e:	4b50      	ldr	r3, [pc, #320]	; (8104aa0 <RCCEx_PLL3_Config+0x160>)
 8104960:	681b      	ldr	r3, [r3, #0]
 8104962:	4a4f      	ldr	r2, [pc, #316]	; (8104aa0 <RCCEx_PLL3_Config+0x160>)
 8104964:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8104968:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810496a:	f7fc fe95 	bl	8101698 <HAL_GetTick>
 810496e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8104970:	e008      	b.n	8104984 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8104972:	f7fc fe91 	bl	8101698 <HAL_GetTick>
 8104976:	4602      	mov	r2, r0
 8104978:	68bb      	ldr	r3, [r7, #8]
 810497a:	1ad3      	subs	r3, r2, r3
 810497c:	2b02      	cmp	r3, #2
 810497e:	d901      	bls.n	8104984 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8104980:	2303      	movs	r3, #3
 8104982:	e088      	b.n	8104a96 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8104984:	4b46      	ldr	r3, [pc, #280]	; (8104aa0 <RCCEx_PLL3_Config+0x160>)
 8104986:	681b      	ldr	r3, [r3, #0]
 8104988:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810498c:	2b00      	cmp	r3, #0
 810498e:	d1f0      	bne.n	8104972 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8104990:	4b43      	ldr	r3, [pc, #268]	; (8104aa0 <RCCEx_PLL3_Config+0x160>)
 8104992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104994:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8104998:	687b      	ldr	r3, [r7, #4]
 810499a:	681b      	ldr	r3, [r3, #0]
 810499c:	051b      	lsls	r3, r3, #20
 810499e:	4940      	ldr	r1, [pc, #256]	; (8104aa0 <RCCEx_PLL3_Config+0x160>)
 81049a0:	4313      	orrs	r3, r2
 81049a2:	628b      	str	r3, [r1, #40]	; 0x28
 81049a4:	687b      	ldr	r3, [r7, #4]
 81049a6:	685b      	ldr	r3, [r3, #4]
 81049a8:	3b01      	subs	r3, #1
 81049aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81049ae:	687b      	ldr	r3, [r7, #4]
 81049b0:	689b      	ldr	r3, [r3, #8]
 81049b2:	3b01      	subs	r3, #1
 81049b4:	025b      	lsls	r3, r3, #9
 81049b6:	b29b      	uxth	r3, r3
 81049b8:	431a      	orrs	r2, r3
 81049ba:	687b      	ldr	r3, [r7, #4]
 81049bc:	68db      	ldr	r3, [r3, #12]
 81049be:	3b01      	subs	r3, #1
 81049c0:	041b      	lsls	r3, r3, #16
 81049c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 81049c6:	431a      	orrs	r2, r3
 81049c8:	687b      	ldr	r3, [r7, #4]
 81049ca:	691b      	ldr	r3, [r3, #16]
 81049cc:	3b01      	subs	r3, #1
 81049ce:	061b      	lsls	r3, r3, #24
 81049d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 81049d4:	4932      	ldr	r1, [pc, #200]	; (8104aa0 <RCCEx_PLL3_Config+0x160>)
 81049d6:	4313      	orrs	r3, r2
 81049d8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 81049da:	4b31      	ldr	r3, [pc, #196]	; (8104aa0 <RCCEx_PLL3_Config+0x160>)
 81049dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81049de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 81049e2:	687b      	ldr	r3, [r7, #4]
 81049e4:	695b      	ldr	r3, [r3, #20]
 81049e6:	492e      	ldr	r1, [pc, #184]	; (8104aa0 <RCCEx_PLL3_Config+0x160>)
 81049e8:	4313      	orrs	r3, r2
 81049ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 81049ec:	4b2c      	ldr	r3, [pc, #176]	; (8104aa0 <RCCEx_PLL3_Config+0x160>)
 81049ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81049f0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 81049f4:	687b      	ldr	r3, [r7, #4]
 81049f6:	699b      	ldr	r3, [r3, #24]
 81049f8:	4929      	ldr	r1, [pc, #164]	; (8104aa0 <RCCEx_PLL3_Config+0x160>)
 81049fa:	4313      	orrs	r3, r2
 81049fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 81049fe:	4b28      	ldr	r3, [pc, #160]	; (8104aa0 <RCCEx_PLL3_Config+0x160>)
 8104a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104a02:	4a27      	ldr	r2, [pc, #156]	; (8104aa0 <RCCEx_PLL3_Config+0x160>)
 8104a04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8104a08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8104a0a:	4b25      	ldr	r3, [pc, #148]	; (8104aa0 <RCCEx_PLL3_Config+0x160>)
 8104a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104a0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8104a12:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8104a16:	687a      	ldr	r2, [r7, #4]
 8104a18:	69d2      	ldr	r2, [r2, #28]
 8104a1a:	00d2      	lsls	r2, r2, #3
 8104a1c:	4920      	ldr	r1, [pc, #128]	; (8104aa0 <RCCEx_PLL3_Config+0x160>)
 8104a1e:	4313      	orrs	r3, r2
 8104a20:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8104a22:	4b1f      	ldr	r3, [pc, #124]	; (8104aa0 <RCCEx_PLL3_Config+0x160>)
 8104a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104a26:	4a1e      	ldr	r2, [pc, #120]	; (8104aa0 <RCCEx_PLL3_Config+0x160>)
 8104a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8104a2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8104a2e:	683b      	ldr	r3, [r7, #0]
 8104a30:	2b00      	cmp	r3, #0
 8104a32:	d106      	bne.n	8104a42 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8104a34:	4b1a      	ldr	r3, [pc, #104]	; (8104aa0 <RCCEx_PLL3_Config+0x160>)
 8104a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104a38:	4a19      	ldr	r2, [pc, #100]	; (8104aa0 <RCCEx_PLL3_Config+0x160>)
 8104a3a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8104a3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8104a40:	e00f      	b.n	8104a62 <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8104a42:	683b      	ldr	r3, [r7, #0]
 8104a44:	2b01      	cmp	r3, #1
 8104a46:	d106      	bne.n	8104a56 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8104a48:	4b15      	ldr	r3, [pc, #84]	; (8104aa0 <RCCEx_PLL3_Config+0x160>)
 8104a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104a4c:	4a14      	ldr	r2, [pc, #80]	; (8104aa0 <RCCEx_PLL3_Config+0x160>)
 8104a4e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8104a52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8104a54:	e005      	b.n	8104a62 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8104a56:	4b12      	ldr	r3, [pc, #72]	; (8104aa0 <RCCEx_PLL3_Config+0x160>)
 8104a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104a5a:	4a11      	ldr	r2, [pc, #68]	; (8104aa0 <RCCEx_PLL3_Config+0x160>)
 8104a5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8104a60:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8104a62:	4b0f      	ldr	r3, [pc, #60]	; (8104aa0 <RCCEx_PLL3_Config+0x160>)
 8104a64:	681b      	ldr	r3, [r3, #0]
 8104a66:	4a0e      	ldr	r2, [pc, #56]	; (8104aa0 <RCCEx_PLL3_Config+0x160>)
 8104a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8104a6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104a6e:	f7fc fe13 	bl	8101698 <HAL_GetTick>
 8104a72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8104a74:	e008      	b.n	8104a88 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8104a76:	f7fc fe0f 	bl	8101698 <HAL_GetTick>
 8104a7a:	4602      	mov	r2, r0
 8104a7c:	68bb      	ldr	r3, [r7, #8]
 8104a7e:	1ad3      	subs	r3, r2, r3
 8104a80:	2b02      	cmp	r3, #2
 8104a82:	d901      	bls.n	8104a88 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8104a84:	2303      	movs	r3, #3
 8104a86:	e006      	b.n	8104a96 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8104a88:	4b05      	ldr	r3, [pc, #20]	; (8104aa0 <RCCEx_PLL3_Config+0x160>)
 8104a8a:	681b      	ldr	r3, [r3, #0]
 8104a8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104a90:	2b00      	cmp	r3, #0
 8104a92:	d0f0      	beq.n	8104a76 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8104a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8104a96:	4618      	mov	r0, r3
 8104a98:	3710      	adds	r7, #16
 8104a9a:	46bd      	mov	sp, r7
 8104a9c:	bd80      	pop	{r7, pc}
 8104a9e:	bf00      	nop
 8104aa0:	58024400 	.word	0x58024400

08104aa4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8104aa4:	b580      	push	{r7, lr}
 8104aa6:	b084      	sub	sp, #16
 8104aa8:	af00      	add	r7, sp, #0
 8104aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8104aac:	2301      	movs	r3, #1
 8104aae:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8104ab0:	687b      	ldr	r3, [r7, #4]
 8104ab2:	2b00      	cmp	r3, #0
 8104ab4:	d069      	beq.n	8104b8a <HAL_RTC_Init+0xe6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8104ab6:	687b      	ldr	r3, [r7, #4]
 8104ab8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8104abc:	b2db      	uxtb	r3, r3
 8104abe:	2b00      	cmp	r3, #0
 8104ac0:	d106      	bne.n	8104ad0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8104ac2:	687b      	ldr	r3, [r7, #4]
 8104ac4:	2200      	movs	r2, #0
 8104ac6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8104aca:	6878      	ldr	r0, [r7, #4]
 8104acc:	f7fc fba2 	bl	8101214 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8104ad0:	687b      	ldr	r3, [r7, #4]
 8104ad2:	2202      	movs	r2, #2
 8104ad4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8104ad8:	687b      	ldr	r3, [r7, #4]
 8104ada:	681b      	ldr	r3, [r3, #0]
 8104adc:	22ca      	movs	r2, #202	; 0xca
 8104ade:	625a      	str	r2, [r3, #36]	; 0x24
 8104ae0:	687b      	ldr	r3, [r7, #4]
 8104ae2:	681b      	ldr	r3, [r3, #0]
 8104ae4:	2253      	movs	r2, #83	; 0x53
 8104ae6:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8104ae8:	6878      	ldr	r0, [r7, #4]
 8104aea:	f000 fa46 	bl	8104f7a <RTC_EnterInitMode>
 8104aee:	4603      	mov	r3, r0
 8104af0:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8104af2:	7bfb      	ldrb	r3, [r7, #15]
 8104af4:	2b00      	cmp	r3, #0
 8104af6:	d13d      	bne.n	8104b74 <HAL_RTC_Init+0xd0>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8104af8:	687b      	ldr	r3, [r7, #4]
 8104afa:	681b      	ldr	r3, [r3, #0]
 8104afc:	689b      	ldr	r3, [r3, #8]
 8104afe:	687a      	ldr	r2, [r7, #4]
 8104b00:	6812      	ldr	r2, [r2, #0]
 8104b02:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8104b06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8104b0a:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8104b0c:	687b      	ldr	r3, [r7, #4]
 8104b0e:	681b      	ldr	r3, [r3, #0]
 8104b10:	6899      	ldr	r1, [r3, #8]
 8104b12:	687b      	ldr	r3, [r7, #4]
 8104b14:	685a      	ldr	r2, [r3, #4]
 8104b16:	687b      	ldr	r3, [r7, #4]
 8104b18:	691b      	ldr	r3, [r3, #16]
 8104b1a:	431a      	orrs	r2, r3
 8104b1c:	687b      	ldr	r3, [r7, #4]
 8104b1e:	699b      	ldr	r3, [r3, #24]
 8104b20:	431a      	orrs	r2, r3
 8104b22:	687b      	ldr	r3, [r7, #4]
 8104b24:	681b      	ldr	r3, [r3, #0]
 8104b26:	430a      	orrs	r2, r1
 8104b28:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8104b2a:	687b      	ldr	r3, [r7, #4]
 8104b2c:	689b      	ldr	r3, [r3, #8]
 8104b2e:	0419      	lsls	r1, r3, #16
 8104b30:	687b      	ldr	r3, [r7, #4]
 8104b32:	68da      	ldr	r2, [r3, #12]
 8104b34:	687b      	ldr	r3, [r7, #4]
 8104b36:	681b      	ldr	r3, [r3, #0]
 8104b38:	430a      	orrs	r2, r1
 8104b3a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8104b3c:	6878      	ldr	r0, [r7, #4]
 8104b3e:	f000 fa4f 	bl	8104fe0 <RTC_ExitInitMode>
 8104b42:	4603      	mov	r3, r0
 8104b44:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 8104b46:	7bfb      	ldrb	r3, [r7, #15]
 8104b48:	2b00      	cmp	r3, #0
 8104b4a:	d113      	bne.n	8104b74 <HAL_RTC_Init+0xd0>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8104b4c:	687b      	ldr	r3, [r7, #4]
 8104b4e:	681b      	ldr	r3, [r3, #0]
 8104b50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8104b52:	687b      	ldr	r3, [r7, #4]
 8104b54:	681b      	ldr	r3, [r3, #0]
 8104b56:	f022 0203 	bic.w	r2, r2, #3
 8104b5a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8104b5c:	687b      	ldr	r3, [r7, #4]
 8104b5e:	681b      	ldr	r3, [r3, #0]
 8104b60:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8104b62:	687b      	ldr	r3, [r7, #4]
 8104b64:	69da      	ldr	r2, [r3, #28]
 8104b66:	687b      	ldr	r3, [r7, #4]
 8104b68:	695b      	ldr	r3, [r3, #20]
 8104b6a:	431a      	orrs	r2, r3
 8104b6c:	687b      	ldr	r3, [r7, #4]
 8104b6e:	681b      	ldr	r3, [r3, #0]
 8104b70:	430a      	orrs	r2, r1
 8104b72:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8104b74:	687b      	ldr	r3, [r7, #4]
 8104b76:	681b      	ldr	r3, [r3, #0]
 8104b78:	22ff      	movs	r2, #255	; 0xff
 8104b7a:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8104b7c:	7bfb      	ldrb	r3, [r7, #15]
 8104b7e:	2b00      	cmp	r3, #0
 8104b80:	d103      	bne.n	8104b8a <HAL_RTC_Init+0xe6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8104b82:	687b      	ldr	r3, [r7, #4]
 8104b84:	2201      	movs	r2, #1
 8104b86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8104b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8104b8c:	4618      	mov	r0, r3
 8104b8e:	3710      	adds	r7, #16
 8104b90:	46bd      	mov	sp, r7
 8104b92:	bd80      	pop	{r7, pc}

08104b94 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8104b94:	b590      	push	{r4, r7, lr}
 8104b96:	b087      	sub	sp, #28
 8104b98:	af00      	add	r7, sp, #0
 8104b9a:	60f8      	str	r0, [r7, #12]
 8104b9c:	60b9      	str	r1, [r7, #8]
 8104b9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8104ba0:	68fb      	ldr	r3, [r7, #12]
 8104ba2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8104ba6:	2b01      	cmp	r3, #1
 8104ba8:	d101      	bne.n	8104bae <HAL_RTC_SetTime+0x1a>
 8104baa:	2302      	movs	r3, #2
 8104bac:	e08b      	b.n	8104cc6 <HAL_RTC_SetTime+0x132>
 8104bae:	68fb      	ldr	r3, [r7, #12]
 8104bb0:	2201      	movs	r2, #1
 8104bb2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8104bb6:	68fb      	ldr	r3, [r7, #12]
 8104bb8:	2202      	movs	r2, #2
 8104bba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8104bbe:	68fb      	ldr	r3, [r7, #12]
 8104bc0:	681b      	ldr	r3, [r3, #0]
 8104bc2:	22ca      	movs	r2, #202	; 0xca
 8104bc4:	625a      	str	r2, [r3, #36]	; 0x24
 8104bc6:	68fb      	ldr	r3, [r7, #12]
 8104bc8:	681b      	ldr	r3, [r3, #0]
 8104bca:	2253      	movs	r2, #83	; 0x53
 8104bcc:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8104bce:	68f8      	ldr	r0, [r7, #12]
 8104bd0:	f000 f9d3 	bl	8104f7a <RTC_EnterInitMode>
 8104bd4:	4603      	mov	r3, r0
 8104bd6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8104bd8:	7cfb      	ldrb	r3, [r7, #19]
 8104bda:	2b00      	cmp	r3, #0
 8104bdc:	d163      	bne.n	8104ca6 <HAL_RTC_SetTime+0x112>
  {
    if(Format == RTC_FORMAT_BIN)
 8104bde:	687b      	ldr	r3, [r7, #4]
 8104be0:	2b00      	cmp	r3, #0
 8104be2:	d126      	bne.n	8104c32 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8104be4:	68fb      	ldr	r3, [r7, #12]
 8104be6:	681b      	ldr	r3, [r3, #0]
 8104be8:	689b      	ldr	r3, [r3, #8]
 8104bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104bee:	2b00      	cmp	r3, #0
 8104bf0:	d102      	bne.n	8104bf8 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8104bf2:	68bb      	ldr	r3, [r7, #8]
 8104bf4:	2200      	movs	r2, #0
 8104bf6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8104bf8:	68bb      	ldr	r3, [r7, #8]
 8104bfa:	781b      	ldrb	r3, [r3, #0]
 8104bfc:	4618      	mov	r0, r3
 8104bfe:	f000 fa2d 	bl	810505c <RTC_ByteToBcd2>
 8104c02:	4603      	mov	r3, r0
 8104c04:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8104c06:	68bb      	ldr	r3, [r7, #8]
 8104c08:	785b      	ldrb	r3, [r3, #1]
 8104c0a:	4618      	mov	r0, r3
 8104c0c:	f000 fa26 	bl	810505c <RTC_ByteToBcd2>
 8104c10:	4603      	mov	r3, r0
 8104c12:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8104c14:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8104c16:	68bb      	ldr	r3, [r7, #8]
 8104c18:	789b      	ldrb	r3, [r3, #2]
 8104c1a:	4618      	mov	r0, r3
 8104c1c:	f000 fa1e 	bl	810505c <RTC_ByteToBcd2>
 8104c20:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8104c22:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8104c26:	68bb      	ldr	r3, [r7, #8]
 8104c28:	78db      	ldrb	r3, [r3, #3]
 8104c2a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8104c2c:	4313      	orrs	r3, r2
 8104c2e:	617b      	str	r3, [r7, #20]
 8104c30:	e018      	b.n	8104c64 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8104c32:	68fb      	ldr	r3, [r7, #12]
 8104c34:	681b      	ldr	r3, [r3, #0]
 8104c36:	689b      	ldr	r3, [r3, #8]
 8104c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104c3c:	2b00      	cmp	r3, #0
 8104c3e:	d102      	bne.n	8104c46 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8104c40:	68bb      	ldr	r3, [r7, #8]
 8104c42:	2200      	movs	r2, #0
 8104c44:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8104c46:	68bb      	ldr	r3, [r7, #8]
 8104c48:	781b      	ldrb	r3, [r3, #0]
 8104c4a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8104c4c:	68bb      	ldr	r3, [r7, #8]
 8104c4e:	785b      	ldrb	r3, [r3, #1]
 8104c50:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8104c52:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8104c54:	68ba      	ldr	r2, [r7, #8]
 8104c56:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8104c58:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8104c5a:	68bb      	ldr	r3, [r7, #8]
 8104c5c:	78db      	ldrb	r3, [r3, #3]
 8104c5e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8104c60:	4313      	orrs	r3, r2
 8104c62:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8104c64:	68fb      	ldr	r3, [r7, #12]
 8104c66:	681a      	ldr	r2, [r3, #0]
 8104c68:	697b      	ldr	r3, [r7, #20]
 8104c6a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8104c6e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8104c72:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8104c74:	68fb      	ldr	r3, [r7, #12]
 8104c76:	681b      	ldr	r3, [r3, #0]
 8104c78:	689a      	ldr	r2, [r3, #8]
 8104c7a:	68fb      	ldr	r3, [r7, #12]
 8104c7c:	681b      	ldr	r3, [r3, #0]
 8104c7e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8104c82:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8104c84:	68fb      	ldr	r3, [r7, #12]
 8104c86:	681b      	ldr	r3, [r3, #0]
 8104c88:	6899      	ldr	r1, [r3, #8]
 8104c8a:	68bb      	ldr	r3, [r7, #8]
 8104c8c:	68da      	ldr	r2, [r3, #12]
 8104c8e:	68bb      	ldr	r3, [r7, #8]
 8104c90:	691b      	ldr	r3, [r3, #16]
 8104c92:	431a      	orrs	r2, r3
 8104c94:	68fb      	ldr	r3, [r7, #12]
 8104c96:	681b      	ldr	r3, [r3, #0]
 8104c98:	430a      	orrs	r2, r1
 8104c9a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8104c9c:	68f8      	ldr	r0, [r7, #12]
 8104c9e:	f000 f99f 	bl	8104fe0 <RTC_ExitInitMode>
 8104ca2:	4603      	mov	r3, r0
 8104ca4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8104ca6:	68fb      	ldr	r3, [r7, #12]
 8104ca8:	681b      	ldr	r3, [r3, #0]
 8104caa:	22ff      	movs	r2, #255	; 0xff
 8104cac:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8104cae:	7cfb      	ldrb	r3, [r7, #19]
 8104cb0:	2b00      	cmp	r3, #0
 8104cb2:	d103      	bne.n	8104cbc <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8104cb4:	68fb      	ldr	r3, [r7, #12]
 8104cb6:	2201      	movs	r2, #1
 8104cb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8104cbc:	68fb      	ldr	r3, [r7, #12]
 8104cbe:	2200      	movs	r2, #0
 8104cc0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8104cc4:	7cfb      	ldrb	r3, [r7, #19]
}
 8104cc6:	4618      	mov	r0, r3
 8104cc8:	371c      	adds	r7, #28
 8104cca:	46bd      	mov	sp, r7
 8104ccc:	bd90      	pop	{r4, r7, pc}

08104cce <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8104cce:	b580      	push	{r7, lr}
 8104cd0:	b086      	sub	sp, #24
 8104cd2:	af00      	add	r7, sp, #0
 8104cd4:	60f8      	str	r0, [r7, #12]
 8104cd6:	60b9      	str	r1, [r7, #8]
 8104cd8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8104cda:	68fb      	ldr	r3, [r7, #12]
 8104cdc:	681b      	ldr	r3, [r3, #0]
 8104cde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8104ce0:	68bb      	ldr	r3, [r7, #8]
 8104ce2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8104ce4:	68fb      	ldr	r3, [r7, #12]
 8104ce6:	681b      	ldr	r3, [r3, #0]
 8104ce8:	691b      	ldr	r3, [r3, #16]
 8104cea:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8104cee:	68bb      	ldr	r3, [r7, #8]
 8104cf0:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8104cf2:	68fb      	ldr	r3, [r7, #12]
 8104cf4:	681b      	ldr	r3, [r3, #0]
 8104cf6:	681b      	ldr	r3, [r3, #0]
 8104cf8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8104cfc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8104d00:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8104d02:	697b      	ldr	r3, [r7, #20]
 8104d04:	0c1b      	lsrs	r3, r3, #16
 8104d06:	b2db      	uxtb	r3, r3
 8104d08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8104d0c:	b2da      	uxtb	r2, r3
 8104d0e:	68bb      	ldr	r3, [r7, #8]
 8104d10:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8104d12:	697b      	ldr	r3, [r7, #20]
 8104d14:	0a1b      	lsrs	r3, r3, #8
 8104d16:	b2db      	uxtb	r3, r3
 8104d18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104d1c:	b2da      	uxtb	r2, r3
 8104d1e:	68bb      	ldr	r3, [r7, #8]
 8104d20:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8104d22:	697b      	ldr	r3, [r7, #20]
 8104d24:	b2db      	uxtb	r3, r3
 8104d26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104d2a:	b2da      	uxtb	r2, r3
 8104d2c:	68bb      	ldr	r3, [r7, #8]
 8104d2e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8104d30:	697b      	ldr	r3, [r7, #20]
 8104d32:	0d9b      	lsrs	r3, r3, #22
 8104d34:	b2db      	uxtb	r3, r3
 8104d36:	f003 0301 	and.w	r3, r3, #1
 8104d3a:	b2da      	uxtb	r2, r3
 8104d3c:	68bb      	ldr	r3, [r7, #8]
 8104d3e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8104d40:	687b      	ldr	r3, [r7, #4]
 8104d42:	2b00      	cmp	r3, #0
 8104d44:	d11a      	bne.n	8104d7c <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8104d46:	68bb      	ldr	r3, [r7, #8]
 8104d48:	781b      	ldrb	r3, [r3, #0]
 8104d4a:	4618      	mov	r0, r3
 8104d4c:	f000 f9a6 	bl	810509c <RTC_Bcd2ToByte>
 8104d50:	4603      	mov	r3, r0
 8104d52:	461a      	mov	r2, r3
 8104d54:	68bb      	ldr	r3, [r7, #8]
 8104d56:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8104d58:	68bb      	ldr	r3, [r7, #8]
 8104d5a:	785b      	ldrb	r3, [r3, #1]
 8104d5c:	4618      	mov	r0, r3
 8104d5e:	f000 f99d 	bl	810509c <RTC_Bcd2ToByte>
 8104d62:	4603      	mov	r3, r0
 8104d64:	461a      	mov	r2, r3
 8104d66:	68bb      	ldr	r3, [r7, #8]
 8104d68:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8104d6a:	68bb      	ldr	r3, [r7, #8]
 8104d6c:	789b      	ldrb	r3, [r3, #2]
 8104d6e:	4618      	mov	r0, r3
 8104d70:	f000 f994 	bl	810509c <RTC_Bcd2ToByte>
 8104d74:	4603      	mov	r3, r0
 8104d76:	461a      	mov	r2, r3
 8104d78:	68bb      	ldr	r3, [r7, #8]
 8104d7a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8104d7c:	2300      	movs	r3, #0
}
 8104d7e:	4618      	mov	r0, r3
 8104d80:	3718      	adds	r7, #24
 8104d82:	46bd      	mov	sp, r7
 8104d84:	bd80      	pop	{r7, pc}

08104d86 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8104d86:	b590      	push	{r4, r7, lr}
 8104d88:	b087      	sub	sp, #28
 8104d8a:	af00      	add	r7, sp, #0
 8104d8c:	60f8      	str	r0, [r7, #12]
 8104d8e:	60b9      	str	r1, [r7, #8]
 8104d90:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8104d92:	68fb      	ldr	r3, [r7, #12]
 8104d94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8104d98:	2b01      	cmp	r3, #1
 8104d9a:	d101      	bne.n	8104da0 <HAL_RTC_SetDate+0x1a>
 8104d9c:	2302      	movs	r3, #2
 8104d9e:	e075      	b.n	8104e8c <HAL_RTC_SetDate+0x106>
 8104da0:	68fb      	ldr	r3, [r7, #12]
 8104da2:	2201      	movs	r2, #1
 8104da4:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8104da8:	68fb      	ldr	r3, [r7, #12]
 8104daa:	2202      	movs	r2, #2
 8104dac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8104db0:	687b      	ldr	r3, [r7, #4]
 8104db2:	2b00      	cmp	r3, #0
 8104db4:	d10e      	bne.n	8104dd4 <HAL_RTC_SetDate+0x4e>
 8104db6:	68bb      	ldr	r3, [r7, #8]
 8104db8:	785b      	ldrb	r3, [r3, #1]
 8104dba:	f003 0310 	and.w	r3, r3, #16
 8104dbe:	2b00      	cmp	r3, #0
 8104dc0:	d008      	beq.n	8104dd4 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8104dc2:	68bb      	ldr	r3, [r7, #8]
 8104dc4:	785b      	ldrb	r3, [r3, #1]
 8104dc6:	f023 0310 	bic.w	r3, r3, #16
 8104dca:	b2db      	uxtb	r3, r3
 8104dcc:	330a      	adds	r3, #10
 8104dce:	b2da      	uxtb	r2, r3
 8104dd0:	68bb      	ldr	r3, [r7, #8]
 8104dd2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8104dd4:	687b      	ldr	r3, [r7, #4]
 8104dd6:	2b00      	cmp	r3, #0
 8104dd8:	d11c      	bne.n	8104e14 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8104dda:	68bb      	ldr	r3, [r7, #8]
 8104ddc:	78db      	ldrb	r3, [r3, #3]
 8104dde:	4618      	mov	r0, r3
 8104de0:	f000 f93c 	bl	810505c <RTC_ByteToBcd2>
 8104de4:	4603      	mov	r3, r0
 8104de6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8104de8:	68bb      	ldr	r3, [r7, #8]
 8104dea:	785b      	ldrb	r3, [r3, #1]
 8104dec:	4618      	mov	r0, r3
 8104dee:	f000 f935 	bl	810505c <RTC_ByteToBcd2>
 8104df2:	4603      	mov	r3, r0
 8104df4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8104df6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8104df8:	68bb      	ldr	r3, [r7, #8]
 8104dfa:	789b      	ldrb	r3, [r3, #2]
 8104dfc:	4618      	mov	r0, r3
 8104dfe:	f000 f92d 	bl	810505c <RTC_ByteToBcd2>
 8104e02:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8104e04:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8104e08:	68bb      	ldr	r3, [r7, #8]
 8104e0a:	781b      	ldrb	r3, [r3, #0]
 8104e0c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8104e0e:	4313      	orrs	r3, r2
 8104e10:	617b      	str	r3, [r7, #20]
 8104e12:	e00e      	b.n	8104e32 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8104e14:	68bb      	ldr	r3, [r7, #8]
 8104e16:	78db      	ldrb	r3, [r3, #3]
 8104e18:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8104e1a:	68bb      	ldr	r3, [r7, #8]
 8104e1c:	785b      	ldrb	r3, [r3, #1]
 8104e1e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8104e20:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8104e22:	68ba      	ldr	r2, [r7, #8]
 8104e24:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8104e26:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8104e28:	68bb      	ldr	r3, [r7, #8]
 8104e2a:	781b      	ldrb	r3, [r3, #0]
 8104e2c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8104e2e:	4313      	orrs	r3, r2
 8104e30:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8104e32:	68fb      	ldr	r3, [r7, #12]
 8104e34:	681b      	ldr	r3, [r3, #0]
 8104e36:	22ca      	movs	r2, #202	; 0xca
 8104e38:	625a      	str	r2, [r3, #36]	; 0x24
 8104e3a:	68fb      	ldr	r3, [r7, #12]
 8104e3c:	681b      	ldr	r3, [r3, #0]
 8104e3e:	2253      	movs	r2, #83	; 0x53
 8104e40:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8104e42:	68f8      	ldr	r0, [r7, #12]
 8104e44:	f000 f899 	bl	8104f7a <RTC_EnterInitMode>
 8104e48:	4603      	mov	r3, r0
 8104e4a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8104e4c:	7cfb      	ldrb	r3, [r7, #19]
 8104e4e:	2b00      	cmp	r3, #0
 8104e50:	d10c      	bne.n	8104e6c <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8104e52:	68fb      	ldr	r3, [r7, #12]
 8104e54:	681a      	ldr	r2, [r3, #0]
 8104e56:	697b      	ldr	r3, [r7, #20]
 8104e58:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8104e5c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8104e60:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8104e62:	68f8      	ldr	r0, [r7, #12]
 8104e64:	f000 f8bc 	bl	8104fe0 <RTC_ExitInitMode>
 8104e68:	4603      	mov	r3, r0
 8104e6a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8104e6c:	68fb      	ldr	r3, [r7, #12]
 8104e6e:	681b      	ldr	r3, [r3, #0]
 8104e70:	22ff      	movs	r2, #255	; 0xff
 8104e72:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8104e74:	7cfb      	ldrb	r3, [r7, #19]
 8104e76:	2b00      	cmp	r3, #0
 8104e78:	d103      	bne.n	8104e82 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8104e7a:	68fb      	ldr	r3, [r7, #12]
 8104e7c:	2201      	movs	r2, #1
 8104e7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8104e82:	68fb      	ldr	r3, [r7, #12]
 8104e84:	2200      	movs	r2, #0
 8104e86:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8104e8a:	7cfb      	ldrb	r3, [r7, #19]


}
 8104e8c:	4618      	mov	r0, r3
 8104e8e:	371c      	adds	r7, #28
 8104e90:	46bd      	mov	sp, r7
 8104e92:	bd90      	pop	{r4, r7, pc}

08104e94 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8104e94:	b580      	push	{r7, lr}
 8104e96:	b086      	sub	sp, #24
 8104e98:	af00      	add	r7, sp, #0
 8104e9a:	60f8      	str	r0, [r7, #12]
 8104e9c:	60b9      	str	r1, [r7, #8]
 8104e9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8104ea0:	68fb      	ldr	r3, [r7, #12]
 8104ea2:	681b      	ldr	r3, [r3, #0]
 8104ea4:	685b      	ldr	r3, [r3, #4]
 8104ea6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8104eaa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8104eae:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8104eb0:	697b      	ldr	r3, [r7, #20]
 8104eb2:	0c1b      	lsrs	r3, r3, #16
 8104eb4:	b2da      	uxtb	r2, r3
 8104eb6:	68bb      	ldr	r3, [r7, #8]
 8104eb8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8104eba:	697b      	ldr	r3, [r7, #20]
 8104ebc:	0a1b      	lsrs	r3, r3, #8
 8104ebe:	b2db      	uxtb	r3, r3
 8104ec0:	f003 031f 	and.w	r3, r3, #31
 8104ec4:	b2da      	uxtb	r2, r3
 8104ec6:	68bb      	ldr	r3, [r7, #8]
 8104ec8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8104eca:	697b      	ldr	r3, [r7, #20]
 8104ecc:	b2db      	uxtb	r3, r3
 8104ece:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8104ed2:	b2da      	uxtb	r2, r3
 8104ed4:	68bb      	ldr	r3, [r7, #8]
 8104ed6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8104ed8:	697b      	ldr	r3, [r7, #20]
 8104eda:	0b5b      	lsrs	r3, r3, #13
 8104edc:	b2db      	uxtb	r3, r3
 8104ede:	f003 0307 	and.w	r3, r3, #7
 8104ee2:	b2da      	uxtb	r2, r3
 8104ee4:	68bb      	ldr	r3, [r7, #8]
 8104ee6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8104ee8:	687b      	ldr	r3, [r7, #4]
 8104eea:	2b00      	cmp	r3, #0
 8104eec:	d11a      	bne.n	8104f24 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8104eee:	68bb      	ldr	r3, [r7, #8]
 8104ef0:	78db      	ldrb	r3, [r3, #3]
 8104ef2:	4618      	mov	r0, r3
 8104ef4:	f000 f8d2 	bl	810509c <RTC_Bcd2ToByte>
 8104ef8:	4603      	mov	r3, r0
 8104efa:	461a      	mov	r2, r3
 8104efc:	68bb      	ldr	r3, [r7, #8]
 8104efe:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8104f00:	68bb      	ldr	r3, [r7, #8]
 8104f02:	785b      	ldrb	r3, [r3, #1]
 8104f04:	4618      	mov	r0, r3
 8104f06:	f000 f8c9 	bl	810509c <RTC_Bcd2ToByte>
 8104f0a:	4603      	mov	r3, r0
 8104f0c:	461a      	mov	r2, r3
 8104f0e:	68bb      	ldr	r3, [r7, #8]
 8104f10:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8104f12:	68bb      	ldr	r3, [r7, #8]
 8104f14:	789b      	ldrb	r3, [r3, #2]
 8104f16:	4618      	mov	r0, r3
 8104f18:	f000 f8c0 	bl	810509c <RTC_Bcd2ToByte>
 8104f1c:	4603      	mov	r3, r0
 8104f1e:	461a      	mov	r2, r3
 8104f20:	68bb      	ldr	r3, [r7, #8]
 8104f22:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8104f24:	2300      	movs	r3, #0
}
 8104f26:	4618      	mov	r0, r3
 8104f28:	3718      	adds	r7, #24
 8104f2a:	46bd      	mov	sp, r7
 8104f2c:	bd80      	pop	{r7, pc}

08104f2e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8104f2e:	b580      	push	{r7, lr}
 8104f30:	b084      	sub	sp, #16
 8104f32:	af00      	add	r7, sp, #0
 8104f34:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8104f36:	687b      	ldr	r3, [r7, #4]
 8104f38:	681b      	ldr	r3, [r3, #0]
 8104f3a:	68da      	ldr	r2, [r3, #12]
 8104f3c:	687b      	ldr	r3, [r7, #4]
 8104f3e:	681b      	ldr	r3, [r3, #0]
 8104f40:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8104f44:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8104f46:	f7fc fba7 	bl	8101698 <HAL_GetTick>
 8104f4a:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8104f4c:	e009      	b.n	8104f62 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8104f4e:	f7fc fba3 	bl	8101698 <HAL_GetTick>
 8104f52:	4602      	mov	r2, r0
 8104f54:	68fb      	ldr	r3, [r7, #12]
 8104f56:	1ad3      	subs	r3, r2, r3
 8104f58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8104f5c:	d901      	bls.n	8104f62 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8104f5e:	2303      	movs	r3, #3
 8104f60:	e007      	b.n	8104f72 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8104f62:	687b      	ldr	r3, [r7, #4]
 8104f64:	681b      	ldr	r3, [r3, #0]
 8104f66:	68db      	ldr	r3, [r3, #12]
 8104f68:	f003 0320 	and.w	r3, r3, #32
 8104f6c:	2b00      	cmp	r3, #0
 8104f6e:	d0ee      	beq.n	8104f4e <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8104f70:	2300      	movs	r3, #0
}
 8104f72:	4618      	mov	r0, r3
 8104f74:	3710      	adds	r7, #16
 8104f76:	46bd      	mov	sp, r7
 8104f78:	bd80      	pop	{r7, pc}

08104f7a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8104f7a:	b580      	push	{r7, lr}
 8104f7c:	b084      	sub	sp, #16
 8104f7e:	af00      	add	r7, sp, #0
 8104f80:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8104f82:	2300      	movs	r3, #0
 8104f84:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8104f86:	687b      	ldr	r3, [r7, #4]
 8104f88:	681b      	ldr	r3, [r3, #0]
 8104f8a:	68db      	ldr	r3, [r3, #12]
 8104f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104f90:	2b00      	cmp	r3, #0
 8104f92:	d120      	bne.n	8104fd6 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8104f94:	687b      	ldr	r3, [r7, #4]
 8104f96:	681b      	ldr	r3, [r3, #0]
 8104f98:	f04f 32ff 	mov.w	r2, #4294967295
 8104f9c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8104f9e:	f7fc fb7b 	bl	8101698 <HAL_GetTick>
 8104fa2:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8104fa4:	e00d      	b.n	8104fc2 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8104fa6:	f7fc fb77 	bl	8101698 <HAL_GetTick>
 8104faa:	4602      	mov	r2, r0
 8104fac:	68bb      	ldr	r3, [r7, #8]
 8104fae:	1ad3      	subs	r3, r2, r3
 8104fb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8104fb4:	d905      	bls.n	8104fc2 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8104fb6:	2303      	movs	r3, #3
 8104fb8:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8104fba:	687b      	ldr	r3, [r7, #4]
 8104fbc:	2203      	movs	r2, #3
 8104fbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8104fc2:	687b      	ldr	r3, [r7, #4]
 8104fc4:	681b      	ldr	r3, [r3, #0]
 8104fc6:	68db      	ldr	r3, [r3, #12]
 8104fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104fcc:	2b00      	cmp	r3, #0
 8104fce:	d102      	bne.n	8104fd6 <RTC_EnterInitMode+0x5c>
 8104fd0:	7bfb      	ldrb	r3, [r7, #15]
 8104fd2:	2b03      	cmp	r3, #3
 8104fd4:	d1e7      	bne.n	8104fa6 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 8104fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8104fd8:	4618      	mov	r0, r3
 8104fda:	3710      	adds	r7, #16
 8104fdc:	46bd      	mov	sp, r7
 8104fde:	bd80      	pop	{r7, pc}

08104fe0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8104fe0:	b580      	push	{r7, lr}
 8104fe2:	b084      	sub	sp, #16
 8104fe4:	af00      	add	r7, sp, #0
 8104fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8104fe8:	2300      	movs	r3, #0
 8104fea:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8104fec:	4b1a      	ldr	r3, [pc, #104]	; (8105058 <RTC_ExitInitMode+0x78>)
 8104fee:	68db      	ldr	r3, [r3, #12]
 8104ff0:	4a19      	ldr	r2, [pc, #100]	; (8105058 <RTC_ExitInitMode+0x78>)
 8104ff2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8104ff6:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8104ff8:	4b17      	ldr	r3, [pc, #92]	; (8105058 <RTC_ExitInitMode+0x78>)
 8104ffa:	689b      	ldr	r3, [r3, #8]
 8104ffc:	f003 0320 	and.w	r3, r3, #32
 8105000:	2b00      	cmp	r3, #0
 8105002:	d10c      	bne.n	810501e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8105004:	6878      	ldr	r0, [r7, #4]
 8105006:	f7ff ff92 	bl	8104f2e <HAL_RTC_WaitForSynchro>
 810500a:	4603      	mov	r3, r0
 810500c:	2b00      	cmp	r3, #0
 810500e:	d01e      	beq.n	810504e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8105010:	687b      	ldr	r3, [r7, #4]
 8105012:	2203      	movs	r2, #3
 8105014:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8105018:	2303      	movs	r3, #3
 810501a:	73fb      	strb	r3, [r7, #15]
 810501c:	e017      	b.n	810504e <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 810501e:	4b0e      	ldr	r3, [pc, #56]	; (8105058 <RTC_ExitInitMode+0x78>)
 8105020:	689b      	ldr	r3, [r3, #8]
 8105022:	4a0d      	ldr	r2, [pc, #52]	; (8105058 <RTC_ExitInitMode+0x78>)
 8105024:	f023 0320 	bic.w	r3, r3, #32
 8105028:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 810502a:	6878      	ldr	r0, [r7, #4]
 810502c:	f7ff ff7f 	bl	8104f2e <HAL_RTC_WaitForSynchro>
 8105030:	4603      	mov	r3, r0
 8105032:	2b00      	cmp	r3, #0
 8105034:	d005      	beq.n	8105042 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8105036:	687b      	ldr	r3, [r7, #4]
 8105038:	2203      	movs	r2, #3
 810503a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 810503e:	2303      	movs	r3, #3
 8105040:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8105042:	4b05      	ldr	r3, [pc, #20]	; (8105058 <RTC_ExitInitMode+0x78>)
 8105044:	689b      	ldr	r3, [r3, #8]
 8105046:	4a04      	ldr	r2, [pc, #16]	; (8105058 <RTC_ExitInitMode+0x78>)
 8105048:	f043 0320 	orr.w	r3, r3, #32
 810504c:	6093      	str	r3, [r2, #8]
  }

  return status;
 810504e:	7bfb      	ldrb	r3, [r7, #15]
}
 8105050:	4618      	mov	r0, r3
 8105052:	3710      	adds	r7, #16
 8105054:	46bd      	mov	sp, r7
 8105056:	bd80      	pop	{r7, pc}
 8105058:	58004000 	.word	0x58004000

0810505c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 810505c:	b480      	push	{r7}
 810505e:	b085      	sub	sp, #20
 8105060:	af00      	add	r7, sp, #0
 8105062:	4603      	mov	r3, r0
 8105064:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8105066:	2300      	movs	r3, #0
 8105068:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 810506a:	79fb      	ldrb	r3, [r7, #7]
 810506c:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 810506e:	e005      	b.n	810507c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8105070:	68fb      	ldr	r3, [r7, #12]
 8105072:	3301      	adds	r3, #1
 8105074:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8105076:	7afb      	ldrb	r3, [r7, #11]
 8105078:	3b0a      	subs	r3, #10
 810507a:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 810507c:	7afb      	ldrb	r3, [r7, #11]
 810507e:	2b09      	cmp	r3, #9
 8105080:	d8f6      	bhi.n	8105070 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8105082:	68fb      	ldr	r3, [r7, #12]
 8105084:	b2db      	uxtb	r3, r3
 8105086:	011b      	lsls	r3, r3, #4
 8105088:	b2da      	uxtb	r2, r3
 810508a:	7afb      	ldrb	r3, [r7, #11]
 810508c:	4313      	orrs	r3, r2
 810508e:	b2db      	uxtb	r3, r3
}
 8105090:	4618      	mov	r0, r3
 8105092:	3714      	adds	r7, #20
 8105094:	46bd      	mov	sp, r7
 8105096:	f85d 7b04 	ldr.w	r7, [sp], #4
 810509a:	4770      	bx	lr

0810509c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 810509c:	b480      	push	{r7}
 810509e:	b085      	sub	sp, #20
 81050a0:	af00      	add	r7, sp, #0
 81050a2:	4603      	mov	r3, r0
 81050a4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 81050a6:	79fb      	ldrb	r3, [r7, #7]
 81050a8:	091b      	lsrs	r3, r3, #4
 81050aa:	b2db      	uxtb	r3, r3
 81050ac:	461a      	mov	r2, r3
 81050ae:	0092      	lsls	r2, r2, #2
 81050b0:	4413      	add	r3, r2
 81050b2:	005b      	lsls	r3, r3, #1
 81050b4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 81050b6:	79fb      	ldrb	r3, [r7, #7]
 81050b8:	f003 030f 	and.w	r3, r3, #15
 81050bc:	b2da      	uxtb	r2, r3
 81050be:	7bfb      	ldrb	r3, [r7, #15]
 81050c0:	4413      	add	r3, r2
 81050c2:	b2db      	uxtb	r3, r3
}
 81050c4:	4618      	mov	r0, r3
 81050c6:	3714      	adds	r7, #20
 81050c8:	46bd      	mov	sp, r7
 81050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81050ce:	4770      	bx	lr

081050d0 <HAL_RTCEx_SetRefClock>:
  * @brief  Enable the RTC reference clock detection.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetRefClock(RTC_HandleTypeDef * hrtc)
{
 81050d0:	b580      	push	{r7, lr}
 81050d2:	b084      	sub	sp, #16
 81050d4:	af00      	add	r7, sp, #0
 81050d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  /* Process Locked */
  __HAL_LOCK(hrtc);
 81050d8:	687b      	ldr	r3, [r7, #4]
 81050da:	f893 3020 	ldrb.w	r3, [r3, #32]
 81050de:	2b01      	cmp	r3, #1
 81050e0:	d101      	bne.n	81050e6 <HAL_RTCEx_SetRefClock+0x16>
 81050e2:	2302      	movs	r3, #2
 81050e4:	e034      	b.n	8105150 <HAL_RTCEx_SetRefClock+0x80>
 81050e6:	687b      	ldr	r3, [r7, #4]
 81050e8:	2201      	movs	r2, #1
 81050ea:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 81050ee:	687b      	ldr	r3, [r7, #4]
 81050f0:	2202      	movs	r2, #2
 81050f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 81050f6:	687b      	ldr	r3, [r7, #4]
 81050f8:	681b      	ldr	r3, [r3, #0]
 81050fa:	22ca      	movs	r2, #202	; 0xca
 81050fc:	625a      	str	r2, [r3, #36]	; 0x24
 81050fe:	687b      	ldr	r3, [r7, #4]
 8105100:	681b      	ldr	r3, [r3, #0]
 8105102:	2253      	movs	r2, #83	; 0x53
 8105104:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8105106:	6878      	ldr	r0, [r7, #4]
 8105108:	f7ff ff37 	bl	8104f7a <RTC_EnterInitMode>
 810510c:	4603      	mov	r3, r0
 810510e:	73fb      	strb	r3, [r7, #15]
  if (status == HAL_OK)
 8105110:	7bfb      	ldrb	r3, [r7, #15]
 8105112:	2b00      	cmp	r3, #0
 8105114:	d10c      	bne.n	8105130 <HAL_RTCEx_SetRefClock+0x60>
  {
    __HAL_RTC_CLOCKREF_DETECTION_ENABLE(hrtc);
 8105116:	687b      	ldr	r3, [r7, #4]
 8105118:	681b      	ldr	r3, [r3, #0]
 810511a:	689a      	ldr	r2, [r3, #8]
 810511c:	687b      	ldr	r3, [r7, #4]
 810511e:	681b      	ldr	r3, [r3, #0]
 8105120:	f042 0210 	orr.w	r2, r2, #16
 8105124:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8105126:	6878      	ldr	r0, [r7, #4]
 8105128:	f7ff ff5a 	bl	8104fe0 <RTC_ExitInitMode>
 810512c:	4603      	mov	r3, r0
 810512e:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8105130:	687b      	ldr	r3, [r7, #4]
 8105132:	681b      	ldr	r3, [r3, #0]
 8105134:	22ff      	movs	r2, #255	; 0xff
 8105136:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 8105138:	7bfb      	ldrb	r3, [r7, #15]
 810513a:	2b00      	cmp	r3, #0
 810513c:	d103      	bne.n	8105146 <HAL_RTCEx_SetRefClock+0x76>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 810513e:	687b      	ldr	r3, [r7, #4]
 8105140:	2201      	movs	r2, #1
 8105142:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8105146:	687b      	ldr	r3, [r7, #4]
 8105148:	2200      	movs	r2, #0
 810514a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 810514e:	2300      	movs	r3, #0
}
 8105150:	4618      	mov	r0, r3
 8105152:	3710      	adds	r7, #16
 8105154:	46bd      	mov	sp, r7
 8105156:	bd80      	pop	{r7, pc}

08105158 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8105158:	b580      	push	{r7, lr}
 810515a:	b084      	sub	sp, #16
 810515c:	af00      	add	r7, sp, #0
 810515e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8105160:	687b      	ldr	r3, [r7, #4]
 8105162:	2b00      	cmp	r3, #0
 8105164:	d101      	bne.n	810516a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8105166:	2301      	movs	r3, #1
 8105168:	e0f1      	b.n	810534e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 810516a:	687b      	ldr	r3, [r7, #4]
 810516c:	2200      	movs	r2, #0
 810516e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8105170:	687b      	ldr	r3, [r7, #4]
 8105172:	681b      	ldr	r3, [r3, #0]
 8105174:	4a78      	ldr	r2, [pc, #480]	; (8105358 <HAL_SPI_Init+0x200>)
 8105176:	4293      	cmp	r3, r2
 8105178:	d00f      	beq.n	810519a <HAL_SPI_Init+0x42>
 810517a:	687b      	ldr	r3, [r7, #4]
 810517c:	681b      	ldr	r3, [r3, #0]
 810517e:	4a77      	ldr	r2, [pc, #476]	; (810535c <HAL_SPI_Init+0x204>)
 8105180:	4293      	cmp	r3, r2
 8105182:	d00a      	beq.n	810519a <HAL_SPI_Init+0x42>
 8105184:	687b      	ldr	r3, [r7, #4]
 8105186:	681b      	ldr	r3, [r3, #0]
 8105188:	4a75      	ldr	r2, [pc, #468]	; (8105360 <HAL_SPI_Init+0x208>)
 810518a:	4293      	cmp	r3, r2
 810518c:	d005      	beq.n	810519a <HAL_SPI_Init+0x42>
 810518e:	687b      	ldr	r3, [r7, #4]
 8105190:	68db      	ldr	r3, [r3, #12]
 8105192:	2b0f      	cmp	r3, #15
 8105194:	d901      	bls.n	810519a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8105196:	2301      	movs	r3, #1
 8105198:	e0d9      	b.n	810534e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 810519a:	6878      	ldr	r0, [r7, #4]
 810519c:	f000 ff5d 	bl	810605a <SPI_GetPacketSize>
 81051a0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 81051a2:	687b      	ldr	r3, [r7, #4]
 81051a4:	681b      	ldr	r3, [r3, #0]
 81051a6:	4a6c      	ldr	r2, [pc, #432]	; (8105358 <HAL_SPI_Init+0x200>)
 81051a8:	4293      	cmp	r3, r2
 81051aa:	d00c      	beq.n	81051c6 <HAL_SPI_Init+0x6e>
 81051ac:	687b      	ldr	r3, [r7, #4]
 81051ae:	681b      	ldr	r3, [r3, #0]
 81051b0:	4a6a      	ldr	r2, [pc, #424]	; (810535c <HAL_SPI_Init+0x204>)
 81051b2:	4293      	cmp	r3, r2
 81051b4:	d007      	beq.n	81051c6 <HAL_SPI_Init+0x6e>
 81051b6:	687b      	ldr	r3, [r7, #4]
 81051b8:	681b      	ldr	r3, [r3, #0]
 81051ba:	4a69      	ldr	r2, [pc, #420]	; (8105360 <HAL_SPI_Init+0x208>)
 81051bc:	4293      	cmp	r3, r2
 81051be:	d002      	beq.n	81051c6 <HAL_SPI_Init+0x6e>
 81051c0:	68fb      	ldr	r3, [r7, #12]
 81051c2:	2b08      	cmp	r3, #8
 81051c4:	d811      	bhi.n	81051ea <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 81051c6:	687b      	ldr	r3, [r7, #4]
 81051c8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 81051ca:	4a63      	ldr	r2, [pc, #396]	; (8105358 <HAL_SPI_Init+0x200>)
 81051cc:	4293      	cmp	r3, r2
 81051ce:	d009      	beq.n	81051e4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 81051d0:	687b      	ldr	r3, [r7, #4]
 81051d2:	681b      	ldr	r3, [r3, #0]
 81051d4:	4a61      	ldr	r2, [pc, #388]	; (810535c <HAL_SPI_Init+0x204>)
 81051d6:	4293      	cmp	r3, r2
 81051d8:	d004      	beq.n	81051e4 <HAL_SPI_Init+0x8c>
 81051da:	687b      	ldr	r3, [r7, #4]
 81051dc:	681b      	ldr	r3, [r3, #0]
 81051de:	4a60      	ldr	r2, [pc, #384]	; (8105360 <HAL_SPI_Init+0x208>)
 81051e0:	4293      	cmp	r3, r2
 81051e2:	d104      	bne.n	81051ee <HAL_SPI_Init+0x96>
 81051e4:	68fb      	ldr	r3, [r7, #12]
 81051e6:	2b10      	cmp	r3, #16
 81051e8:	d901      	bls.n	81051ee <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 81051ea:	2301      	movs	r3, #1
 81051ec:	e0af      	b.n	810534e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 81051ee:	687b      	ldr	r3, [r7, #4]
 81051f0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 81051f4:	b2db      	uxtb	r3, r3
 81051f6:	2b00      	cmp	r3, #0
 81051f8:	d106      	bne.n	8105208 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 81051fa:	687b      	ldr	r3, [r7, #4]
 81051fc:	2200      	movs	r2, #0
 81051fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8105202:	6878      	ldr	r0, [r7, #4]
 8105204:	f7fc f864 	bl	81012d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8105208:	687b      	ldr	r3, [r7, #4]
 810520a:	2202      	movs	r2, #2
 810520c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8105210:	687b      	ldr	r3, [r7, #4]
 8105212:	681b      	ldr	r3, [r3, #0]
 8105214:	681a      	ldr	r2, [r3, #0]
 8105216:	687b      	ldr	r3, [r7, #4]
 8105218:	681b      	ldr	r3, [r3, #0]
 810521a:	f022 0201 	bic.w	r2, r2, #1
 810521e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8105220:	687b      	ldr	r3, [r7, #4]
 8105222:	681b      	ldr	r3, [r3, #0]
 8105224:	689b      	ldr	r3, [r3, #8]
 8105226:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 810522a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 810522c:	687b      	ldr	r3, [r7, #4]
 810522e:	699b      	ldr	r3, [r3, #24]
 8105230:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8105234:	d119      	bne.n	810526a <HAL_SPI_Init+0x112>
 8105236:	687b      	ldr	r3, [r7, #4]
 8105238:	685b      	ldr	r3, [r3, #4]
 810523a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810523e:	d103      	bne.n	8105248 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8105240:	687b      	ldr	r3, [r7, #4]
 8105242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8105244:	2b00      	cmp	r3, #0
 8105246:	d008      	beq.n	810525a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8105248:	687b      	ldr	r3, [r7, #4]
 810524a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 810524c:	2b00      	cmp	r3, #0
 810524e:	d10c      	bne.n	810526a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8105250:	687b      	ldr	r3, [r7, #4]
 8105252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8105254:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105258:	d107      	bne.n	810526a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 810525a:	687b      	ldr	r3, [r7, #4]
 810525c:	681b      	ldr	r3, [r3, #0]
 810525e:	681a      	ldr	r2, [r3, #0]
 8105260:	687b      	ldr	r3, [r7, #4]
 8105262:	681b      	ldr	r3, [r3, #0]
 8105264:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8105268:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 810526a:	687b      	ldr	r3, [r7, #4]
 810526c:	69da      	ldr	r2, [r3, #28]
 810526e:	687b      	ldr	r3, [r7, #4]
 8105270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105272:	431a      	orrs	r2, r3
 8105274:	68bb      	ldr	r3, [r7, #8]
 8105276:	431a      	orrs	r2, r3
 8105278:	687b      	ldr	r3, [r7, #4]
 810527a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810527c:	ea42 0103 	orr.w	r1, r2, r3
 8105280:	687b      	ldr	r3, [r7, #4]
 8105282:	68da      	ldr	r2, [r3, #12]
 8105284:	687b      	ldr	r3, [r7, #4]
 8105286:	681b      	ldr	r3, [r3, #0]
 8105288:	430a      	orrs	r2, r1
 810528a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 810528c:	687b      	ldr	r3, [r7, #4]
 810528e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8105290:	687b      	ldr	r3, [r7, #4]
 8105292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105294:	431a      	orrs	r2, r3
 8105296:	687b      	ldr	r3, [r7, #4]
 8105298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810529a:	431a      	orrs	r2, r3
 810529c:	687b      	ldr	r3, [r7, #4]
 810529e:	699b      	ldr	r3, [r3, #24]
 81052a0:	431a      	orrs	r2, r3
 81052a2:	687b      	ldr	r3, [r7, #4]
 81052a4:	691b      	ldr	r3, [r3, #16]
 81052a6:	431a      	orrs	r2, r3
 81052a8:	687b      	ldr	r3, [r7, #4]
 81052aa:	695b      	ldr	r3, [r3, #20]
 81052ac:	431a      	orrs	r2, r3
 81052ae:	687b      	ldr	r3, [r7, #4]
 81052b0:	6a1b      	ldr	r3, [r3, #32]
 81052b2:	431a      	orrs	r2, r3
 81052b4:	687b      	ldr	r3, [r7, #4]
 81052b6:	685b      	ldr	r3, [r3, #4]
 81052b8:	431a      	orrs	r2, r3
 81052ba:	687b      	ldr	r3, [r7, #4]
 81052bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81052be:	431a      	orrs	r2, r3
 81052c0:	687b      	ldr	r3, [r7, #4]
 81052c2:	689b      	ldr	r3, [r3, #8]
 81052c4:	431a      	orrs	r2, r3
 81052c6:	687b      	ldr	r3, [r7, #4]
 81052c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81052ca:	ea42 0103 	orr.w	r1, r2, r3
 81052ce:	687b      	ldr	r3, [r7, #4]
 81052d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 81052d2:	687b      	ldr	r3, [r7, #4]
 81052d4:	681b      	ldr	r3, [r3, #0]
 81052d6:	430a      	orrs	r2, r1
 81052d8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 81052da:	687b      	ldr	r3, [r7, #4]
 81052dc:	685b      	ldr	r3, [r3, #4]
 81052de:	2b00      	cmp	r3, #0
 81052e0:	d113      	bne.n	810530a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 81052e2:	687b      	ldr	r3, [r7, #4]
 81052e4:	681b      	ldr	r3, [r3, #0]
 81052e6:	689b      	ldr	r3, [r3, #8]
 81052e8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 81052ec:	687b      	ldr	r3, [r7, #4]
 81052ee:	681b      	ldr	r3, [r3, #0]
 81052f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81052f4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 81052f6:	687b      	ldr	r3, [r7, #4]
 81052f8:	681b      	ldr	r3, [r3, #0]
 81052fa:	689b      	ldr	r3, [r3, #8]
 81052fc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8105300:	687b      	ldr	r3, [r7, #4]
 8105302:	681b      	ldr	r3, [r3, #0]
 8105304:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8105308:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 810530a:	687b      	ldr	r3, [r7, #4]
 810530c:	681b      	ldr	r3, [r3, #0]
 810530e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8105310:	687b      	ldr	r3, [r7, #4]
 8105312:	681b      	ldr	r3, [r3, #0]
 8105314:	f022 0201 	bic.w	r2, r2, #1
 8105318:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 810531a:	687b      	ldr	r3, [r7, #4]
 810531c:	685b      	ldr	r3, [r3, #4]
 810531e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8105322:	2b00      	cmp	r3, #0
 8105324:	d00a      	beq.n	810533c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8105326:	687b      	ldr	r3, [r7, #4]
 8105328:	681b      	ldr	r3, [r3, #0]
 810532a:	68db      	ldr	r3, [r3, #12]
 810532c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8105330:	687b      	ldr	r3, [r7, #4]
 8105332:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8105334:	687b      	ldr	r3, [r7, #4]
 8105336:	681b      	ldr	r3, [r3, #0]
 8105338:	430a      	orrs	r2, r1
 810533a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 810533c:	687b      	ldr	r3, [r7, #4]
 810533e:	2200      	movs	r2, #0
 8105340:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8105344:	687b      	ldr	r3, [r7, #4]
 8105346:	2201      	movs	r2, #1
 8105348:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 810534c:	2300      	movs	r3, #0
}
 810534e:	4618      	mov	r0, r3
 8105350:	3710      	adds	r7, #16
 8105352:	46bd      	mov	sp, r7
 8105354:	bd80      	pop	{r7, pc}
 8105356:	bf00      	nop
 8105358:	40013000 	.word	0x40013000
 810535c:	40003800 	.word	0x40003800
 8105360:	40003c00 	.word	0x40003c00

08105364 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8105364:	b580      	push	{r7, lr}
 8105366:	b08a      	sub	sp, #40	; 0x28
 8105368:	af02      	add	r7, sp, #8
 810536a:	60f8      	str	r0, [r7, #12]
 810536c:	60b9      	str	r1, [r7, #8]
 810536e:	603b      	str	r3, [r7, #0]
 8105370:	4613      	mov	r3, r2
 8105372:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8105374:	68fb      	ldr	r3, [r7, #12]
 8105376:	681b      	ldr	r3, [r3, #0]
 8105378:	3320      	adds	r3, #32
 810537a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 810537c:	2300      	movs	r3, #0
 810537e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8105380:	68fb      	ldr	r3, [r7, #12]
 8105382:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8105386:	2b01      	cmp	r3, #1
 8105388:	d101      	bne.n	810538e <HAL_SPI_Transmit+0x2a>
 810538a:	2302      	movs	r3, #2
 810538c:	e1d4      	b.n	8105738 <HAL_SPI_Transmit+0x3d4>
 810538e:	68fb      	ldr	r3, [r7, #12]
 8105390:	2201      	movs	r2, #1
 8105392:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8105396:	f7fc f97f 	bl	8101698 <HAL_GetTick>
 810539a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 810539c:	68fb      	ldr	r3, [r7, #12]
 810539e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 81053a2:	b2db      	uxtb	r3, r3
 81053a4:	2b01      	cmp	r3, #1
 81053a6:	d007      	beq.n	81053b8 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 81053a8:	2302      	movs	r3, #2
 81053aa:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 81053ac:	68fb      	ldr	r3, [r7, #12]
 81053ae:	2200      	movs	r2, #0
 81053b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 81053b4:	7efb      	ldrb	r3, [r7, #27]
 81053b6:	e1bf      	b.n	8105738 <HAL_SPI_Transmit+0x3d4>
  }

  if ((pData == NULL) || (Size == 0UL))
 81053b8:	68bb      	ldr	r3, [r7, #8]
 81053ba:	2b00      	cmp	r3, #0
 81053bc:	d002      	beq.n	81053c4 <HAL_SPI_Transmit+0x60>
 81053be:	88fb      	ldrh	r3, [r7, #6]
 81053c0:	2b00      	cmp	r3, #0
 81053c2:	d107      	bne.n	81053d4 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 81053c4:	2301      	movs	r3, #1
 81053c6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 81053c8:	68fb      	ldr	r3, [r7, #12]
 81053ca:	2200      	movs	r2, #0
 81053cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 81053d0:	7efb      	ldrb	r3, [r7, #27]
 81053d2:	e1b1      	b.n	8105738 <HAL_SPI_Transmit+0x3d4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 81053d4:	68fb      	ldr	r3, [r7, #12]
 81053d6:	2203      	movs	r2, #3
 81053d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 81053dc:	68fb      	ldr	r3, [r7, #12]
 81053de:	2200      	movs	r2, #0
 81053e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 81053e4:	68fb      	ldr	r3, [r7, #12]
 81053e6:	68ba      	ldr	r2, [r7, #8]
 81053e8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 81053ea:	68fb      	ldr	r3, [r7, #12]
 81053ec:	88fa      	ldrh	r2, [r7, #6]
 81053ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 81053f2:	68fb      	ldr	r3, [r7, #12]
 81053f4:	88fa      	ldrh	r2, [r7, #6]
 81053f6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 81053fa:	68fb      	ldr	r3, [r7, #12]
 81053fc:	2200      	movs	r2, #0
 81053fe:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8105400:	68fb      	ldr	r3, [r7, #12]
 8105402:	2200      	movs	r2, #0
 8105404:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8105408:	68fb      	ldr	r3, [r7, #12]
 810540a:	2200      	movs	r2, #0
 810540c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8105410:	68fb      	ldr	r3, [r7, #12]
 8105412:	2200      	movs	r2, #0
 8105414:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8105416:	68fb      	ldr	r3, [r7, #12]
 8105418:	2200      	movs	r2, #0
 810541a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 810541c:	68fb      	ldr	r3, [r7, #12]
 810541e:	689b      	ldr	r3, [r3, #8]
 8105420:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8105424:	d107      	bne.n	8105436 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8105426:	68fb      	ldr	r3, [r7, #12]
 8105428:	681b      	ldr	r3, [r3, #0]
 810542a:	681a      	ldr	r2, [r3, #0]
 810542c:	68fb      	ldr	r3, [r7, #12]
 810542e:	681b      	ldr	r3, [r3, #0]
 8105430:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8105434:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8105436:	68fb      	ldr	r3, [r7, #12]
 8105438:	681b      	ldr	r3, [r3, #0]
 810543a:	685b      	ldr	r3, [r3, #4]
 810543c:	0c1b      	lsrs	r3, r3, #16
 810543e:	041b      	lsls	r3, r3, #16
 8105440:	88f9      	ldrh	r1, [r7, #6]
 8105442:	68fa      	ldr	r2, [r7, #12]
 8105444:	6812      	ldr	r2, [r2, #0]
 8105446:	430b      	orrs	r3, r1
 8105448:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 810544a:	68fb      	ldr	r3, [r7, #12]
 810544c:	681b      	ldr	r3, [r3, #0]
 810544e:	681a      	ldr	r2, [r3, #0]
 8105450:	68fb      	ldr	r3, [r7, #12]
 8105452:	681b      	ldr	r3, [r3, #0]
 8105454:	f042 0201 	orr.w	r2, r2, #1
 8105458:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 810545a:	68fb      	ldr	r3, [r7, #12]
 810545c:	685b      	ldr	r3, [r3, #4]
 810545e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8105462:	d107      	bne.n	8105474 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8105464:	68fb      	ldr	r3, [r7, #12]
 8105466:	681b      	ldr	r3, [r3, #0]
 8105468:	681a      	ldr	r2, [r3, #0]
 810546a:	68fb      	ldr	r3, [r7, #12]
 810546c:	681b      	ldr	r3, [r3, #0]
 810546e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8105472:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8105474:	68fb      	ldr	r3, [r7, #12]
 8105476:	68db      	ldr	r3, [r3, #12]
 8105478:	2b0f      	cmp	r3, #15
 810547a:	d947      	bls.n	810550c <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 810547c:	e03f      	b.n	81054fe <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 810547e:	68fb      	ldr	r3, [r7, #12]
 8105480:	681b      	ldr	r3, [r3, #0]
 8105482:	695b      	ldr	r3, [r3, #20]
 8105484:	f003 0302 	and.w	r3, r3, #2
 8105488:	2b02      	cmp	r3, #2
 810548a:	d114      	bne.n	81054b6 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 810548c:	68fb      	ldr	r3, [r7, #12]
 810548e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8105490:	68fb      	ldr	r3, [r7, #12]
 8105492:	681b      	ldr	r3, [r3, #0]
 8105494:	6812      	ldr	r2, [r2, #0]
 8105496:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8105498:	68fb      	ldr	r3, [r7, #12]
 810549a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810549c:	1d1a      	adds	r2, r3, #4
 810549e:	68fb      	ldr	r3, [r7, #12]
 81054a0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 81054a2:	68fb      	ldr	r3, [r7, #12]
 81054a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81054a8:	b29b      	uxth	r3, r3
 81054aa:	3b01      	subs	r3, #1
 81054ac:	b29a      	uxth	r2, r3
 81054ae:	68fb      	ldr	r3, [r7, #12]
 81054b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 81054b4:	e023      	b.n	81054fe <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81054b6:	f7fc f8ef 	bl	8101698 <HAL_GetTick>
 81054ba:	4602      	mov	r2, r0
 81054bc:	697b      	ldr	r3, [r7, #20]
 81054be:	1ad3      	subs	r3, r2, r3
 81054c0:	683a      	ldr	r2, [r7, #0]
 81054c2:	429a      	cmp	r2, r3
 81054c4:	d803      	bhi.n	81054ce <HAL_SPI_Transmit+0x16a>
 81054c6:	683b      	ldr	r3, [r7, #0]
 81054c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81054cc:	d102      	bne.n	81054d4 <HAL_SPI_Transmit+0x170>
 81054ce:	683b      	ldr	r3, [r7, #0]
 81054d0:	2b00      	cmp	r3, #0
 81054d2:	d114      	bne.n	81054fe <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 81054d4:	68f8      	ldr	r0, [r7, #12]
 81054d6:	f000 fcf2 	bl	8105ebe <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 81054da:	68fb      	ldr	r3, [r7, #12]
 81054dc:	2200      	movs	r2, #0
 81054de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81054e2:	68fb      	ldr	r3, [r7, #12]
 81054e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81054e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81054ec:	68fb      	ldr	r3, [r7, #12]
 81054ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 81054f2:	68fb      	ldr	r3, [r7, #12]
 81054f4:	2201      	movs	r2, #1
 81054f6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 81054fa:	2303      	movs	r3, #3
 81054fc:	e11c      	b.n	8105738 <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 81054fe:	68fb      	ldr	r3, [r7, #12]
 8105500:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105504:	b29b      	uxth	r3, r3
 8105506:	2b00      	cmp	r3, #0
 8105508:	d1b9      	bne.n	810547e <HAL_SPI_Transmit+0x11a>
 810550a:	e0ef      	b.n	81056ec <HAL_SPI_Transmit+0x388>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 810550c:	68fb      	ldr	r3, [r7, #12]
 810550e:	68db      	ldr	r3, [r3, #12]
 8105510:	2b07      	cmp	r3, #7
 8105512:	f240 80e4 	bls.w	81056de <HAL_SPI_Transmit+0x37a>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8105516:	e05d      	b.n	81055d4 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8105518:	68fb      	ldr	r3, [r7, #12]
 810551a:	681b      	ldr	r3, [r3, #0]
 810551c:	695b      	ldr	r3, [r3, #20]
 810551e:	f003 0302 	and.w	r3, r3, #2
 8105522:	2b02      	cmp	r3, #2
 8105524:	d132      	bne.n	810558c <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8105526:	68fb      	ldr	r3, [r7, #12]
 8105528:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810552c:	b29b      	uxth	r3, r3
 810552e:	2b01      	cmp	r3, #1
 8105530:	d918      	bls.n	8105564 <HAL_SPI_Transmit+0x200>
 8105532:	68fb      	ldr	r3, [r7, #12]
 8105534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105536:	2b00      	cmp	r3, #0
 8105538:	d014      	beq.n	8105564 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 810553a:	68fb      	ldr	r3, [r7, #12]
 810553c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810553e:	68fb      	ldr	r3, [r7, #12]
 8105540:	681b      	ldr	r3, [r3, #0]
 8105542:	6812      	ldr	r2, [r2, #0]
 8105544:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8105546:	68fb      	ldr	r3, [r7, #12]
 8105548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810554a:	1d1a      	adds	r2, r3, #4
 810554c:	68fb      	ldr	r3, [r7, #12]
 810554e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8105550:	68fb      	ldr	r3, [r7, #12]
 8105552:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105556:	b29b      	uxth	r3, r3
 8105558:	3b02      	subs	r3, #2
 810555a:	b29a      	uxth	r2, r3
 810555c:	68fb      	ldr	r3, [r7, #12]
 810555e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8105562:	e037      	b.n	81055d4 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8105564:	68fb      	ldr	r3, [r7, #12]
 8105566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105568:	881a      	ldrh	r2, [r3, #0]
 810556a:	69fb      	ldr	r3, [r7, #28]
 810556c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 810556e:	68fb      	ldr	r3, [r7, #12]
 8105570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105572:	1c9a      	adds	r2, r3, #2
 8105574:	68fb      	ldr	r3, [r7, #12]
 8105576:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8105578:	68fb      	ldr	r3, [r7, #12]
 810557a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810557e:	b29b      	uxth	r3, r3
 8105580:	3b01      	subs	r3, #1
 8105582:	b29a      	uxth	r2, r3
 8105584:	68fb      	ldr	r3, [r7, #12]
 8105586:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 810558a:	e023      	b.n	81055d4 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810558c:	f7fc f884 	bl	8101698 <HAL_GetTick>
 8105590:	4602      	mov	r2, r0
 8105592:	697b      	ldr	r3, [r7, #20]
 8105594:	1ad3      	subs	r3, r2, r3
 8105596:	683a      	ldr	r2, [r7, #0]
 8105598:	429a      	cmp	r2, r3
 810559a:	d803      	bhi.n	81055a4 <HAL_SPI_Transmit+0x240>
 810559c:	683b      	ldr	r3, [r7, #0]
 810559e:	f1b3 3fff 	cmp.w	r3, #4294967295
 81055a2:	d102      	bne.n	81055aa <HAL_SPI_Transmit+0x246>
 81055a4:	683b      	ldr	r3, [r7, #0]
 81055a6:	2b00      	cmp	r3, #0
 81055a8:	d114      	bne.n	81055d4 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 81055aa:	68f8      	ldr	r0, [r7, #12]
 81055ac:	f000 fc87 	bl	8105ebe <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 81055b0:	68fb      	ldr	r3, [r7, #12]
 81055b2:	2200      	movs	r2, #0
 81055b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81055b8:	68fb      	ldr	r3, [r7, #12]
 81055ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81055be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81055c2:	68fb      	ldr	r3, [r7, #12]
 81055c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 81055c8:	68fb      	ldr	r3, [r7, #12]
 81055ca:	2201      	movs	r2, #1
 81055cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 81055d0:	2303      	movs	r3, #3
 81055d2:	e0b1      	b.n	8105738 <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 81055d4:	68fb      	ldr	r3, [r7, #12]
 81055d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81055da:	b29b      	uxth	r3, r3
 81055dc:	2b00      	cmp	r3, #0
 81055de:	d19b      	bne.n	8105518 <HAL_SPI_Transmit+0x1b4>
 81055e0:	e084      	b.n	81056ec <HAL_SPI_Transmit+0x388>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 81055e2:	68fb      	ldr	r3, [r7, #12]
 81055e4:	681b      	ldr	r3, [r3, #0]
 81055e6:	695b      	ldr	r3, [r3, #20]
 81055e8:	f003 0302 	and.w	r3, r3, #2
 81055ec:	2b02      	cmp	r3, #2
 81055ee:	d152      	bne.n	8105696 <HAL_SPI_Transmit+0x332>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 81055f0:	68fb      	ldr	r3, [r7, #12]
 81055f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81055f6:	b29b      	uxth	r3, r3
 81055f8:	2b03      	cmp	r3, #3
 81055fa:	d918      	bls.n	810562e <HAL_SPI_Transmit+0x2ca>
 81055fc:	68fb      	ldr	r3, [r7, #12]
 81055fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105600:	2b40      	cmp	r3, #64	; 0x40
 8105602:	d914      	bls.n	810562e <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8105604:	68fb      	ldr	r3, [r7, #12]
 8105606:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8105608:	68fb      	ldr	r3, [r7, #12]
 810560a:	681b      	ldr	r3, [r3, #0]
 810560c:	6812      	ldr	r2, [r2, #0]
 810560e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8105610:	68fb      	ldr	r3, [r7, #12]
 8105612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105614:	1d1a      	adds	r2, r3, #4
 8105616:	68fb      	ldr	r3, [r7, #12]
 8105618:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 810561a:	68fb      	ldr	r3, [r7, #12]
 810561c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105620:	b29b      	uxth	r3, r3
 8105622:	3b04      	subs	r3, #4
 8105624:	b29a      	uxth	r2, r3
 8105626:	68fb      	ldr	r3, [r7, #12]
 8105628:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 810562c:	e057      	b.n	81056de <HAL_SPI_Transmit+0x37a>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 810562e:	68fb      	ldr	r3, [r7, #12]
 8105630:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105634:	b29b      	uxth	r3, r3
 8105636:	2b01      	cmp	r3, #1
 8105638:	d917      	bls.n	810566a <HAL_SPI_Transmit+0x306>
 810563a:	68fb      	ldr	r3, [r7, #12]
 810563c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810563e:	2b00      	cmp	r3, #0
 8105640:	d013      	beq.n	810566a <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8105642:	68fb      	ldr	r3, [r7, #12]
 8105644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105646:	881a      	ldrh	r2, [r3, #0]
 8105648:	69fb      	ldr	r3, [r7, #28]
 810564a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 810564c:	68fb      	ldr	r3, [r7, #12]
 810564e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105650:	1c9a      	adds	r2, r3, #2
 8105652:	68fb      	ldr	r3, [r7, #12]
 8105654:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8105656:	68fb      	ldr	r3, [r7, #12]
 8105658:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810565c:	b29b      	uxth	r3, r3
 810565e:	3b02      	subs	r3, #2
 8105660:	b29a      	uxth	r2, r3
 8105662:	68fb      	ldr	r3, [r7, #12]
 8105664:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8105668:	e039      	b.n	81056de <HAL_SPI_Transmit+0x37a>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 810566a:	68fb      	ldr	r3, [r7, #12]
 810566c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810566e:	68fb      	ldr	r3, [r7, #12]
 8105670:	681b      	ldr	r3, [r3, #0]
 8105672:	3320      	adds	r3, #32
 8105674:	7812      	ldrb	r2, [r2, #0]
 8105676:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8105678:	68fb      	ldr	r3, [r7, #12]
 810567a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810567c:	1c5a      	adds	r2, r3, #1
 810567e:	68fb      	ldr	r3, [r7, #12]
 8105680:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8105682:	68fb      	ldr	r3, [r7, #12]
 8105684:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105688:	b29b      	uxth	r3, r3
 810568a:	3b01      	subs	r3, #1
 810568c:	b29a      	uxth	r2, r3
 810568e:	68fb      	ldr	r3, [r7, #12]
 8105690:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8105694:	e023      	b.n	81056de <HAL_SPI_Transmit+0x37a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8105696:	f7fb ffff 	bl	8101698 <HAL_GetTick>
 810569a:	4602      	mov	r2, r0
 810569c:	697b      	ldr	r3, [r7, #20]
 810569e:	1ad3      	subs	r3, r2, r3
 81056a0:	683a      	ldr	r2, [r7, #0]
 81056a2:	429a      	cmp	r2, r3
 81056a4:	d803      	bhi.n	81056ae <HAL_SPI_Transmit+0x34a>
 81056a6:	683b      	ldr	r3, [r7, #0]
 81056a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81056ac:	d102      	bne.n	81056b4 <HAL_SPI_Transmit+0x350>
 81056ae:	683b      	ldr	r3, [r7, #0]
 81056b0:	2b00      	cmp	r3, #0
 81056b2:	d114      	bne.n	81056de <HAL_SPI_Transmit+0x37a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 81056b4:	68f8      	ldr	r0, [r7, #12]
 81056b6:	f000 fc02 	bl	8105ebe <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 81056ba:	68fb      	ldr	r3, [r7, #12]
 81056bc:	2200      	movs	r2, #0
 81056be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81056c2:	68fb      	ldr	r3, [r7, #12]
 81056c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81056c8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81056cc:	68fb      	ldr	r3, [r7, #12]
 81056ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 81056d2:	68fb      	ldr	r3, [r7, #12]
 81056d4:	2201      	movs	r2, #1
 81056d6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 81056da:	2303      	movs	r3, #3
 81056dc:	e02c      	b.n	8105738 <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 81056de:	68fb      	ldr	r3, [r7, #12]
 81056e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81056e4:	b29b      	uxth	r3, r3
 81056e6:	2b00      	cmp	r3, #0
 81056e8:	f47f af7b 	bne.w	81055e2 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 81056ec:	683b      	ldr	r3, [r7, #0]
 81056ee:	9300      	str	r3, [sp, #0]
 81056f0:	697b      	ldr	r3, [r7, #20]
 81056f2:	2200      	movs	r2, #0
 81056f4:	2108      	movs	r1, #8
 81056f6:	68f8      	ldr	r0, [r7, #12]
 81056f8:	f000 fc81 	bl	8105ffe <SPI_WaitOnFlagUntilTimeout>
 81056fc:	4603      	mov	r3, r0
 81056fe:	2b00      	cmp	r3, #0
 8105700:	d007      	beq.n	8105712 <HAL_SPI_Transmit+0x3ae>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8105702:	68fb      	ldr	r3, [r7, #12]
 8105704:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105708:	f043 0220 	orr.w	r2, r3, #32
 810570c:	68fb      	ldr	r3, [r7, #12]
 810570e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8105712:	68f8      	ldr	r0, [r7, #12]
 8105714:	f000 fbd3 	bl	8105ebe <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8105718:	68fb      	ldr	r3, [r7, #12]
 810571a:	2200      	movs	r2, #0
 810571c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8105720:	68fb      	ldr	r3, [r7, #12]
 8105722:	2201      	movs	r2, #1
 8105724:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8105728:	68fb      	ldr	r3, [r7, #12]
 810572a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810572e:	2b00      	cmp	r3, #0
 8105730:	d001      	beq.n	8105736 <HAL_SPI_Transmit+0x3d2>
  {
    return HAL_ERROR;
 8105732:	2301      	movs	r3, #1
 8105734:	e000      	b.n	8105738 <HAL_SPI_Transmit+0x3d4>
  }
  return errorcode;
 8105736:	7efb      	ldrb	r3, [r7, #27]
}
 8105738:	4618      	mov	r0, r3
 810573a:	3720      	adds	r7, #32
 810573c:	46bd      	mov	sp, r7
 810573e:	bd80      	pop	{r7, pc}

08105740 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8105740:	b580      	push	{r7, lr}
 8105742:	b08a      	sub	sp, #40	; 0x28
 8105744:	af02      	add	r7, sp, #8
 8105746:	60f8      	str	r0, [r7, #12]
 8105748:	60b9      	str	r1, [r7, #8]
 810574a:	603b      	str	r3, [r7, #0]
 810574c:	4613      	mov	r3, r2
 810574e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8105750:	2300      	movs	r3, #0
 8105752:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8105754:	68fb      	ldr	r3, [r7, #12]
 8105756:	681b      	ldr	r3, [r3, #0]
 8105758:	3330      	adds	r3, #48	; 0x30
 810575a:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 810575c:	68fb      	ldr	r3, [r7, #12]
 810575e:	685b      	ldr	r3, [r3, #4]
 8105760:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8105764:	d112      	bne.n	810578c <HAL_SPI_Receive+0x4c>
 8105766:	68fb      	ldr	r3, [r7, #12]
 8105768:	689b      	ldr	r3, [r3, #8]
 810576a:	2b00      	cmp	r3, #0
 810576c:	d10e      	bne.n	810578c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 810576e:	68fb      	ldr	r3, [r7, #12]
 8105770:	2204      	movs	r2, #4
 8105772:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8105776:	88fa      	ldrh	r2, [r7, #6]
 8105778:	683b      	ldr	r3, [r7, #0]
 810577a:	9300      	str	r3, [sp, #0]
 810577c:	4613      	mov	r3, r2
 810577e:	68ba      	ldr	r2, [r7, #8]
 8105780:	68b9      	ldr	r1, [r7, #8]
 8105782:	68f8      	ldr	r0, [r7, #12]
 8105784:	f000 f976 	bl	8105a74 <HAL_SPI_TransmitReceive>
 8105788:	4603      	mov	r3, r0
 810578a:	e16f      	b.n	8105a6c <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 810578c:	68fb      	ldr	r3, [r7, #12]
 810578e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8105792:	2b01      	cmp	r3, #1
 8105794:	d101      	bne.n	810579a <HAL_SPI_Receive+0x5a>
 8105796:	2302      	movs	r3, #2
 8105798:	e168      	b.n	8105a6c <HAL_SPI_Receive+0x32c>
 810579a:	68fb      	ldr	r3, [r7, #12]
 810579c:	2201      	movs	r2, #1
 810579e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 81057a2:	f7fb ff79 	bl	8101698 <HAL_GetTick>
 81057a6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 81057a8:	68fb      	ldr	r3, [r7, #12]
 81057aa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 81057ae:	b2db      	uxtb	r3, r3
 81057b0:	2b01      	cmp	r3, #1
 81057b2:	d007      	beq.n	81057c4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 81057b4:	2302      	movs	r3, #2
 81057b6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 81057b8:	68fb      	ldr	r3, [r7, #12]
 81057ba:	2200      	movs	r2, #0
 81057bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 81057c0:	7ffb      	ldrb	r3, [r7, #31]
 81057c2:	e153      	b.n	8105a6c <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 81057c4:	68bb      	ldr	r3, [r7, #8]
 81057c6:	2b00      	cmp	r3, #0
 81057c8:	d002      	beq.n	81057d0 <HAL_SPI_Receive+0x90>
 81057ca:	88fb      	ldrh	r3, [r7, #6]
 81057cc:	2b00      	cmp	r3, #0
 81057ce:	d107      	bne.n	81057e0 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 81057d0:	2301      	movs	r3, #1
 81057d2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 81057d4:	68fb      	ldr	r3, [r7, #12]
 81057d6:	2200      	movs	r2, #0
 81057d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 81057dc:	7ffb      	ldrb	r3, [r7, #31]
 81057de:	e145      	b.n	8105a6c <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 81057e0:	68fb      	ldr	r3, [r7, #12]
 81057e2:	2204      	movs	r2, #4
 81057e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 81057e8:	68fb      	ldr	r3, [r7, #12]
 81057ea:	2200      	movs	r2, #0
 81057ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 81057f0:	68fb      	ldr	r3, [r7, #12]
 81057f2:	68ba      	ldr	r2, [r7, #8]
 81057f4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 81057f6:	68fb      	ldr	r3, [r7, #12]
 81057f8:	88fa      	ldrh	r2, [r7, #6]
 81057fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 81057fe:	68fb      	ldr	r3, [r7, #12]
 8105800:	88fa      	ldrh	r2, [r7, #6]
 8105802:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8105806:	68fb      	ldr	r3, [r7, #12]
 8105808:	2200      	movs	r2, #0
 810580a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 810580c:	68fb      	ldr	r3, [r7, #12]
 810580e:	2200      	movs	r2, #0
 8105810:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8105814:	68fb      	ldr	r3, [r7, #12]
 8105816:	2200      	movs	r2, #0
 8105818:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 810581c:	68fb      	ldr	r3, [r7, #12]
 810581e:	2200      	movs	r2, #0
 8105820:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8105822:	68fb      	ldr	r3, [r7, #12]
 8105824:	2200      	movs	r2, #0
 8105826:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8105828:	68fb      	ldr	r3, [r7, #12]
 810582a:	689b      	ldr	r3, [r3, #8]
 810582c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8105830:	d107      	bne.n	8105842 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8105832:	68fb      	ldr	r3, [r7, #12]
 8105834:	681b      	ldr	r3, [r3, #0]
 8105836:	681a      	ldr	r2, [r3, #0]
 8105838:	68fb      	ldr	r3, [r7, #12]
 810583a:	681b      	ldr	r3, [r3, #0]
 810583c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8105840:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8105842:	68fb      	ldr	r3, [r7, #12]
 8105844:	681b      	ldr	r3, [r3, #0]
 8105846:	685b      	ldr	r3, [r3, #4]
 8105848:	0c1b      	lsrs	r3, r3, #16
 810584a:	041b      	lsls	r3, r3, #16
 810584c:	88f9      	ldrh	r1, [r7, #6]
 810584e:	68fa      	ldr	r2, [r7, #12]
 8105850:	6812      	ldr	r2, [r2, #0]
 8105852:	430b      	orrs	r3, r1
 8105854:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8105856:	68fb      	ldr	r3, [r7, #12]
 8105858:	681b      	ldr	r3, [r3, #0]
 810585a:	681a      	ldr	r2, [r3, #0]
 810585c:	68fb      	ldr	r3, [r7, #12]
 810585e:	681b      	ldr	r3, [r3, #0]
 8105860:	f042 0201 	orr.w	r2, r2, #1
 8105864:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8105866:	68fb      	ldr	r3, [r7, #12]
 8105868:	685b      	ldr	r3, [r3, #4]
 810586a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810586e:	d107      	bne.n	8105880 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8105870:	68fb      	ldr	r3, [r7, #12]
 8105872:	681b      	ldr	r3, [r3, #0]
 8105874:	681a      	ldr	r2, [r3, #0]
 8105876:	68fb      	ldr	r3, [r7, #12]
 8105878:	681b      	ldr	r3, [r3, #0]
 810587a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810587e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8105880:	68fb      	ldr	r3, [r7, #12]
 8105882:	68db      	ldr	r3, [r3, #12]
 8105884:	2b0f      	cmp	r3, #15
 8105886:	d948      	bls.n	810591a <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8105888:	e040      	b.n	810590c <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 810588a:	68fb      	ldr	r3, [r7, #12]
 810588c:	681b      	ldr	r3, [r3, #0]
 810588e:	695a      	ldr	r2, [r3, #20]
 8105890:	f248 0308 	movw	r3, #32776	; 0x8008
 8105894:	4013      	ands	r3, r2
 8105896:	2b00      	cmp	r3, #0
 8105898:	d014      	beq.n	81058c4 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810589a:	68fb      	ldr	r3, [r7, #12]
 810589c:	681a      	ldr	r2, [r3, #0]
 810589e:	68fb      	ldr	r3, [r7, #12]
 81058a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81058a2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 81058a4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 81058a6:	68fb      	ldr	r3, [r7, #12]
 81058a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81058aa:	1d1a      	adds	r2, r3, #4
 81058ac:	68fb      	ldr	r3, [r7, #12]
 81058ae:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 81058b0:	68fb      	ldr	r3, [r7, #12]
 81058b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81058b6:	b29b      	uxth	r3, r3
 81058b8:	3b01      	subs	r3, #1
 81058ba:	b29a      	uxth	r2, r3
 81058bc:	68fb      	ldr	r3, [r7, #12]
 81058be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 81058c2:	e023      	b.n	810590c <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81058c4:	f7fb fee8 	bl	8101698 <HAL_GetTick>
 81058c8:	4602      	mov	r2, r0
 81058ca:	697b      	ldr	r3, [r7, #20]
 81058cc:	1ad3      	subs	r3, r2, r3
 81058ce:	683a      	ldr	r2, [r7, #0]
 81058d0:	429a      	cmp	r2, r3
 81058d2:	d803      	bhi.n	81058dc <HAL_SPI_Receive+0x19c>
 81058d4:	683b      	ldr	r3, [r7, #0]
 81058d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 81058da:	d102      	bne.n	81058e2 <HAL_SPI_Receive+0x1a2>
 81058dc:	683b      	ldr	r3, [r7, #0]
 81058de:	2b00      	cmp	r3, #0
 81058e0:	d114      	bne.n	810590c <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 81058e2:	68f8      	ldr	r0, [r7, #12]
 81058e4:	f000 faeb 	bl	8105ebe <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 81058e8:	68fb      	ldr	r3, [r7, #12]
 81058ea:	2200      	movs	r2, #0
 81058ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81058f0:	68fb      	ldr	r3, [r7, #12]
 81058f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81058f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81058fa:	68fb      	ldr	r3, [r7, #12]
 81058fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8105900:	68fb      	ldr	r3, [r7, #12]
 8105902:	2201      	movs	r2, #1
 8105904:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8105908:	2303      	movs	r3, #3
 810590a:	e0af      	b.n	8105a6c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 810590c:	68fb      	ldr	r3, [r7, #12]
 810590e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105912:	b29b      	uxth	r3, r3
 8105914:	2b00      	cmp	r3, #0
 8105916:	d1b8      	bne.n	810588a <HAL_SPI_Receive+0x14a>
 8105918:	e095      	b.n	8105a46 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 810591a:	68fb      	ldr	r3, [r7, #12]
 810591c:	68db      	ldr	r3, [r3, #12]
 810591e:	2b07      	cmp	r3, #7
 8105920:	f240 808b 	bls.w	8105a3a <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8105924:	e03f      	b.n	81059a6 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8105926:	68fb      	ldr	r3, [r7, #12]
 8105928:	681b      	ldr	r3, [r3, #0]
 810592a:	695b      	ldr	r3, [r3, #20]
 810592c:	f003 0301 	and.w	r3, r3, #1
 8105930:	2b01      	cmp	r3, #1
 8105932:	d114      	bne.n	810595e <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8105934:	68fb      	ldr	r3, [r7, #12]
 8105936:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105938:	69ba      	ldr	r2, [r7, #24]
 810593a:	8812      	ldrh	r2, [r2, #0]
 810593c:	b292      	uxth	r2, r2
 810593e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8105940:	68fb      	ldr	r3, [r7, #12]
 8105942:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105944:	1c9a      	adds	r2, r3, #2
 8105946:	68fb      	ldr	r3, [r7, #12]
 8105948:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 810594a:	68fb      	ldr	r3, [r7, #12]
 810594c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105950:	b29b      	uxth	r3, r3
 8105952:	3b01      	subs	r3, #1
 8105954:	b29a      	uxth	r2, r3
 8105956:	68fb      	ldr	r3, [r7, #12]
 8105958:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 810595c:	e023      	b.n	81059a6 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810595e:	f7fb fe9b 	bl	8101698 <HAL_GetTick>
 8105962:	4602      	mov	r2, r0
 8105964:	697b      	ldr	r3, [r7, #20]
 8105966:	1ad3      	subs	r3, r2, r3
 8105968:	683a      	ldr	r2, [r7, #0]
 810596a:	429a      	cmp	r2, r3
 810596c:	d803      	bhi.n	8105976 <HAL_SPI_Receive+0x236>
 810596e:	683b      	ldr	r3, [r7, #0]
 8105970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105974:	d102      	bne.n	810597c <HAL_SPI_Receive+0x23c>
 8105976:	683b      	ldr	r3, [r7, #0]
 8105978:	2b00      	cmp	r3, #0
 810597a:	d114      	bne.n	81059a6 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 810597c:	68f8      	ldr	r0, [r7, #12]
 810597e:	f000 fa9e 	bl	8105ebe <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8105982:	68fb      	ldr	r3, [r7, #12]
 8105984:	2200      	movs	r2, #0
 8105986:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810598a:	68fb      	ldr	r3, [r7, #12]
 810598c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105990:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8105994:	68fb      	ldr	r3, [r7, #12]
 8105996:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 810599a:	68fb      	ldr	r3, [r7, #12]
 810599c:	2201      	movs	r2, #1
 810599e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 81059a2:	2303      	movs	r3, #3
 81059a4:	e062      	b.n	8105a6c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 81059a6:	68fb      	ldr	r3, [r7, #12]
 81059a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81059ac:	b29b      	uxth	r3, r3
 81059ae:	2b00      	cmp	r3, #0
 81059b0:	d1b9      	bne.n	8105926 <HAL_SPI_Receive+0x1e6>
 81059b2:	e048      	b.n	8105a46 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 81059b4:	68fb      	ldr	r3, [r7, #12]
 81059b6:	681b      	ldr	r3, [r3, #0]
 81059b8:	695b      	ldr	r3, [r3, #20]
 81059ba:	f003 0301 	and.w	r3, r3, #1
 81059be:	2b01      	cmp	r3, #1
 81059c0:	d117      	bne.n	81059f2 <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 81059c2:	68fb      	ldr	r3, [r7, #12]
 81059c4:	681b      	ldr	r3, [r3, #0]
 81059c6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 81059ca:	68fb      	ldr	r3, [r7, #12]
 81059cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81059ce:	7812      	ldrb	r2, [r2, #0]
 81059d0:	b2d2      	uxtb	r2, r2
 81059d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 81059d4:	68fb      	ldr	r3, [r7, #12]
 81059d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81059d8:	1c5a      	adds	r2, r3, #1
 81059da:	68fb      	ldr	r3, [r7, #12]
 81059dc:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 81059de:	68fb      	ldr	r3, [r7, #12]
 81059e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81059e4:	b29b      	uxth	r3, r3
 81059e6:	3b01      	subs	r3, #1
 81059e8:	b29a      	uxth	r2, r3
 81059ea:	68fb      	ldr	r3, [r7, #12]
 81059ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 81059f0:	e023      	b.n	8105a3a <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81059f2:	f7fb fe51 	bl	8101698 <HAL_GetTick>
 81059f6:	4602      	mov	r2, r0
 81059f8:	697b      	ldr	r3, [r7, #20]
 81059fa:	1ad3      	subs	r3, r2, r3
 81059fc:	683a      	ldr	r2, [r7, #0]
 81059fe:	429a      	cmp	r2, r3
 8105a00:	d803      	bhi.n	8105a0a <HAL_SPI_Receive+0x2ca>
 8105a02:	683b      	ldr	r3, [r7, #0]
 8105a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105a08:	d102      	bne.n	8105a10 <HAL_SPI_Receive+0x2d0>
 8105a0a:	683b      	ldr	r3, [r7, #0]
 8105a0c:	2b00      	cmp	r3, #0
 8105a0e:	d114      	bne.n	8105a3a <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8105a10:	68f8      	ldr	r0, [r7, #12]
 8105a12:	f000 fa54 	bl	8105ebe <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8105a16:	68fb      	ldr	r3, [r7, #12]
 8105a18:	2200      	movs	r2, #0
 8105a1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8105a1e:	68fb      	ldr	r3, [r7, #12]
 8105a20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105a24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8105a28:	68fb      	ldr	r3, [r7, #12]
 8105a2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8105a2e:	68fb      	ldr	r3, [r7, #12]
 8105a30:	2201      	movs	r2, #1
 8105a32:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8105a36:	2303      	movs	r3, #3
 8105a38:	e018      	b.n	8105a6c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8105a3a:	68fb      	ldr	r3, [r7, #12]
 8105a3c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105a40:	b29b      	uxth	r3, r3
 8105a42:	2b00      	cmp	r3, #0
 8105a44:	d1b6      	bne.n	81059b4 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8105a46:	68f8      	ldr	r0, [r7, #12]
 8105a48:	f000 fa39 	bl	8105ebe <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8105a4c:	68fb      	ldr	r3, [r7, #12]
 8105a4e:	2200      	movs	r2, #0
 8105a50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8105a54:	68fb      	ldr	r3, [r7, #12]
 8105a56:	2201      	movs	r2, #1
 8105a58:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8105a5c:	68fb      	ldr	r3, [r7, #12]
 8105a5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105a62:	2b00      	cmp	r3, #0
 8105a64:	d001      	beq.n	8105a6a <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 8105a66:	2301      	movs	r3, #1
 8105a68:	e000      	b.n	8105a6c <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 8105a6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8105a6c:	4618      	mov	r0, r3
 8105a6e:	3720      	adds	r7, #32
 8105a70:	46bd      	mov	sp, r7
 8105a72:	bd80      	pop	{r7, pc}

08105a74 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8105a74:	b580      	push	{r7, lr}
 8105a76:	b08e      	sub	sp, #56	; 0x38
 8105a78:	af02      	add	r7, sp, #8
 8105a7a:	60f8      	str	r0, [r7, #12]
 8105a7c:	60b9      	str	r1, [r7, #8]
 8105a7e:	607a      	str	r2, [r7, #4]
 8105a80:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8105a82:	2300      	movs	r3, #0
 8105a84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8105a88:	68fb      	ldr	r3, [r7, #12]
 8105a8a:	681b      	ldr	r3, [r3, #0]
 8105a8c:	3320      	adds	r3, #32
 8105a8e:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8105a90:	68fb      	ldr	r3, [r7, #12]
 8105a92:	681b      	ldr	r3, [r3, #0]
 8105a94:	3330      	adds	r3, #48	; 0x30
 8105a96:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8105a98:	68fb      	ldr	r3, [r7, #12]
 8105a9a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8105a9e:	2b01      	cmp	r3, #1
 8105aa0:	d101      	bne.n	8105aa6 <HAL_SPI_TransmitReceive+0x32>
 8105aa2:	2302      	movs	r3, #2
 8105aa4:	e207      	b.n	8105eb6 <HAL_SPI_TransmitReceive+0x442>
 8105aa6:	68fb      	ldr	r3, [r7, #12]
 8105aa8:	2201      	movs	r2, #1
 8105aaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8105aae:	f7fb fdf3 	bl	8101698 <HAL_GetTick>
 8105ab2:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8105ab4:	887b      	ldrh	r3, [r7, #2]
 8105ab6:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8105ab8:	887b      	ldrh	r3, [r7, #2]
 8105aba:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8105abc:	68fb      	ldr	r3, [r7, #12]
 8105abe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8105ac2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8105ac4:	68fb      	ldr	r3, [r7, #12]
 8105ac6:	685b      	ldr	r3, [r3, #4]
 8105ac8:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8105aca:	7efb      	ldrb	r3, [r7, #27]
 8105acc:	2b01      	cmp	r3, #1
 8105ace:	d014      	beq.n	8105afa <HAL_SPI_TransmitReceive+0x86>
 8105ad0:	697b      	ldr	r3, [r7, #20]
 8105ad2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8105ad6:	d106      	bne.n	8105ae6 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8105ad8:	68fb      	ldr	r3, [r7, #12]
 8105ada:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8105adc:	2b00      	cmp	r3, #0
 8105ade:	d102      	bne.n	8105ae6 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8105ae0:	7efb      	ldrb	r3, [r7, #27]
 8105ae2:	2b04      	cmp	r3, #4
 8105ae4:	d009      	beq.n	8105afa <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8105ae6:	2302      	movs	r3, #2
 8105ae8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8105aec:	68fb      	ldr	r3, [r7, #12]
 8105aee:	2200      	movs	r2, #0
 8105af0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8105af4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8105af8:	e1dd      	b.n	8105eb6 <HAL_SPI_TransmitReceive+0x442>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8105afa:	68bb      	ldr	r3, [r7, #8]
 8105afc:	2b00      	cmp	r3, #0
 8105afe:	d005      	beq.n	8105b0c <HAL_SPI_TransmitReceive+0x98>
 8105b00:	687b      	ldr	r3, [r7, #4]
 8105b02:	2b00      	cmp	r3, #0
 8105b04:	d002      	beq.n	8105b0c <HAL_SPI_TransmitReceive+0x98>
 8105b06:	887b      	ldrh	r3, [r7, #2]
 8105b08:	2b00      	cmp	r3, #0
 8105b0a:	d109      	bne.n	8105b20 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8105b0c:	2301      	movs	r3, #1
 8105b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8105b12:	68fb      	ldr	r3, [r7, #12]
 8105b14:	2200      	movs	r2, #0
 8105b16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8105b1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8105b1e:	e1ca      	b.n	8105eb6 <HAL_SPI_TransmitReceive+0x442>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8105b20:	68fb      	ldr	r3, [r7, #12]
 8105b22:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8105b26:	b2db      	uxtb	r3, r3
 8105b28:	2b04      	cmp	r3, #4
 8105b2a:	d003      	beq.n	8105b34 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8105b2c:	68fb      	ldr	r3, [r7, #12]
 8105b2e:	2205      	movs	r2, #5
 8105b30:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8105b34:	68fb      	ldr	r3, [r7, #12]
 8105b36:	2200      	movs	r2, #0
 8105b38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8105b3c:	68fb      	ldr	r3, [r7, #12]
 8105b3e:	687a      	ldr	r2, [r7, #4]
 8105b40:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8105b42:	68fb      	ldr	r3, [r7, #12]
 8105b44:	887a      	ldrh	r2, [r7, #2]
 8105b46:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8105b4a:	68fb      	ldr	r3, [r7, #12]
 8105b4c:	887a      	ldrh	r2, [r7, #2]
 8105b4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8105b52:	68fb      	ldr	r3, [r7, #12]
 8105b54:	68ba      	ldr	r2, [r7, #8]
 8105b56:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8105b58:	68fb      	ldr	r3, [r7, #12]
 8105b5a:	887a      	ldrh	r2, [r7, #2]
 8105b5c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8105b60:	68fb      	ldr	r3, [r7, #12]
 8105b62:	887a      	ldrh	r2, [r7, #2]
 8105b64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8105b68:	68fb      	ldr	r3, [r7, #12]
 8105b6a:	2200      	movs	r2, #0
 8105b6c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8105b6e:	68fb      	ldr	r3, [r7, #12]
 8105b70:	2200      	movs	r2, #0
 8105b72:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8105b74:	68fb      	ldr	r3, [r7, #12]
 8105b76:	681b      	ldr	r3, [r3, #0]
 8105b78:	685b      	ldr	r3, [r3, #4]
 8105b7a:	0c1b      	lsrs	r3, r3, #16
 8105b7c:	041b      	lsls	r3, r3, #16
 8105b7e:	8879      	ldrh	r1, [r7, #2]
 8105b80:	68fa      	ldr	r2, [r7, #12]
 8105b82:	6812      	ldr	r2, [r2, #0]
 8105b84:	430b      	orrs	r3, r1
 8105b86:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8105b88:	68fb      	ldr	r3, [r7, #12]
 8105b8a:	681b      	ldr	r3, [r3, #0]
 8105b8c:	681a      	ldr	r2, [r3, #0]
 8105b8e:	68fb      	ldr	r3, [r7, #12]
 8105b90:	681b      	ldr	r3, [r3, #0]
 8105b92:	f042 0201 	orr.w	r2, r2, #1
 8105b96:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8105b98:	68fb      	ldr	r3, [r7, #12]
 8105b9a:	685b      	ldr	r3, [r3, #4]
 8105b9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8105ba0:	d107      	bne.n	8105bb2 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8105ba2:	68fb      	ldr	r3, [r7, #12]
 8105ba4:	681b      	ldr	r3, [r3, #0]
 8105ba6:	681a      	ldr	r2, [r3, #0]
 8105ba8:	68fb      	ldr	r3, [r7, #12]
 8105baa:	681b      	ldr	r3, [r3, #0]
 8105bac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8105bb0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8105bb2:	68fb      	ldr	r3, [r7, #12]
 8105bb4:	68db      	ldr	r3, [r3, #12]
 8105bb6:	2b0f      	cmp	r3, #15
 8105bb8:	d970      	bls.n	8105c9c <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8105bba:	e068      	b.n	8105c8e <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8105bbc:	68fb      	ldr	r3, [r7, #12]
 8105bbe:	681b      	ldr	r3, [r3, #0]
 8105bc0:	695b      	ldr	r3, [r3, #20]
 8105bc2:	f003 0302 	and.w	r3, r3, #2
 8105bc6:	2b02      	cmp	r3, #2
 8105bc8:	d11a      	bne.n	8105c00 <HAL_SPI_TransmitReceive+0x18c>
 8105bca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8105bcc:	2b00      	cmp	r3, #0
 8105bce:	d017      	beq.n	8105c00 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8105bd0:	68fb      	ldr	r3, [r7, #12]
 8105bd2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8105bd4:	68fb      	ldr	r3, [r7, #12]
 8105bd6:	681b      	ldr	r3, [r3, #0]
 8105bd8:	6812      	ldr	r2, [r2, #0]
 8105bda:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8105bdc:	68fb      	ldr	r3, [r7, #12]
 8105bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105be0:	1d1a      	adds	r2, r3, #4
 8105be2:	68fb      	ldr	r3, [r7, #12]
 8105be4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8105be6:	68fb      	ldr	r3, [r7, #12]
 8105be8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105bec:	b29b      	uxth	r3, r3
 8105bee:	3b01      	subs	r3, #1
 8105bf0:	b29a      	uxth	r2, r3
 8105bf2:	68fb      	ldr	r3, [r7, #12]
 8105bf4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8105bf8:	68fb      	ldr	r3, [r7, #12]
 8105bfa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105bfe:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8105c00:	68fb      	ldr	r3, [r7, #12]
 8105c02:	681b      	ldr	r3, [r3, #0]
 8105c04:	695a      	ldr	r2, [r3, #20]
 8105c06:	f248 0308 	movw	r3, #32776	; 0x8008
 8105c0a:	4013      	ands	r3, r2
 8105c0c:	2b00      	cmp	r3, #0
 8105c0e:	d01a      	beq.n	8105c46 <HAL_SPI_TransmitReceive+0x1d2>
 8105c10:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8105c12:	2b00      	cmp	r3, #0
 8105c14:	d017      	beq.n	8105c46 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8105c16:	68fb      	ldr	r3, [r7, #12]
 8105c18:	681a      	ldr	r2, [r3, #0]
 8105c1a:	68fb      	ldr	r3, [r7, #12]
 8105c1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105c1e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8105c20:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8105c22:	68fb      	ldr	r3, [r7, #12]
 8105c24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105c26:	1d1a      	adds	r2, r3, #4
 8105c28:	68fb      	ldr	r3, [r7, #12]
 8105c2a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8105c2c:	68fb      	ldr	r3, [r7, #12]
 8105c2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105c32:	b29b      	uxth	r3, r3
 8105c34:	3b01      	subs	r3, #1
 8105c36:	b29a      	uxth	r2, r3
 8105c38:	68fb      	ldr	r3, [r7, #12]
 8105c3a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8105c3e:	68fb      	ldr	r3, [r7, #12]
 8105c40:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105c44:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8105c46:	f7fb fd27 	bl	8101698 <HAL_GetTick>
 8105c4a:	4602      	mov	r2, r0
 8105c4c:	69fb      	ldr	r3, [r7, #28]
 8105c4e:	1ad3      	subs	r3, r2, r3
 8105c50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8105c52:	429a      	cmp	r2, r3
 8105c54:	d803      	bhi.n	8105c5e <HAL_SPI_TransmitReceive+0x1ea>
 8105c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105c5c:	d102      	bne.n	8105c64 <HAL_SPI_TransmitReceive+0x1f0>
 8105c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105c60:	2b00      	cmp	r3, #0
 8105c62:	d114      	bne.n	8105c8e <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8105c64:	68f8      	ldr	r0, [r7, #12]
 8105c66:	f000 f92a 	bl	8105ebe <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8105c6a:	68fb      	ldr	r3, [r7, #12]
 8105c6c:	2200      	movs	r2, #0
 8105c6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8105c72:	68fb      	ldr	r3, [r7, #12]
 8105c74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105c78:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8105c7c:	68fb      	ldr	r3, [r7, #12]
 8105c7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8105c82:	68fb      	ldr	r3, [r7, #12]
 8105c84:	2201      	movs	r2, #1
 8105c86:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8105c8a:	2303      	movs	r3, #3
 8105c8c:	e113      	b.n	8105eb6 <HAL_SPI_TransmitReceive+0x442>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8105c8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8105c90:	2b00      	cmp	r3, #0
 8105c92:	d193      	bne.n	8105bbc <HAL_SPI_TransmitReceive+0x148>
 8105c94:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8105c96:	2b00      	cmp	r3, #0
 8105c98:	d190      	bne.n	8105bbc <HAL_SPI_TransmitReceive+0x148>
 8105c9a:	e0e5      	b.n	8105e68 <HAL_SPI_TransmitReceive+0x3f4>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8105c9c:	68fb      	ldr	r3, [r7, #12]
 8105c9e:	68db      	ldr	r3, [r3, #12]
 8105ca0:	2b07      	cmp	r3, #7
 8105ca2:	f240 80db 	bls.w	8105e5c <HAL_SPI_TransmitReceive+0x3e8>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8105ca6:	e066      	b.n	8105d76 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8105ca8:	68fb      	ldr	r3, [r7, #12]
 8105caa:	681b      	ldr	r3, [r3, #0]
 8105cac:	695b      	ldr	r3, [r3, #20]
 8105cae:	f003 0302 	and.w	r3, r3, #2
 8105cb2:	2b02      	cmp	r3, #2
 8105cb4:	d119      	bne.n	8105cea <HAL_SPI_TransmitReceive+0x276>
 8105cb6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8105cb8:	2b00      	cmp	r3, #0
 8105cba:	d016      	beq.n	8105cea <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8105cbc:	68fb      	ldr	r3, [r7, #12]
 8105cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105cc0:	881a      	ldrh	r2, [r3, #0]
 8105cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105cc4:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8105cc6:	68fb      	ldr	r3, [r7, #12]
 8105cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105cca:	1c9a      	adds	r2, r3, #2
 8105ccc:	68fb      	ldr	r3, [r7, #12]
 8105cce:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8105cd0:	68fb      	ldr	r3, [r7, #12]
 8105cd2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105cd6:	b29b      	uxth	r3, r3
 8105cd8:	3b01      	subs	r3, #1
 8105cda:	b29a      	uxth	r2, r3
 8105cdc:	68fb      	ldr	r3, [r7, #12]
 8105cde:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8105ce2:	68fb      	ldr	r3, [r7, #12]
 8105ce4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105ce8:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8105cea:	68fb      	ldr	r3, [r7, #12]
 8105cec:	681b      	ldr	r3, [r3, #0]
 8105cee:	695b      	ldr	r3, [r3, #20]
 8105cf0:	f003 0301 	and.w	r3, r3, #1
 8105cf4:	2b01      	cmp	r3, #1
 8105cf6:	d11a      	bne.n	8105d2e <HAL_SPI_TransmitReceive+0x2ba>
 8105cf8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8105cfa:	2b00      	cmp	r3, #0
 8105cfc:	d017      	beq.n	8105d2e <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8105cfe:	68fb      	ldr	r3, [r7, #12]
 8105d00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105d02:	6a3a      	ldr	r2, [r7, #32]
 8105d04:	8812      	ldrh	r2, [r2, #0]
 8105d06:	b292      	uxth	r2, r2
 8105d08:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8105d0a:	68fb      	ldr	r3, [r7, #12]
 8105d0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105d0e:	1c9a      	adds	r2, r3, #2
 8105d10:	68fb      	ldr	r3, [r7, #12]
 8105d12:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8105d14:	68fb      	ldr	r3, [r7, #12]
 8105d16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105d1a:	b29b      	uxth	r3, r3
 8105d1c:	3b01      	subs	r3, #1
 8105d1e:	b29a      	uxth	r2, r3
 8105d20:	68fb      	ldr	r3, [r7, #12]
 8105d22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8105d26:	68fb      	ldr	r3, [r7, #12]
 8105d28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105d2c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8105d2e:	f7fb fcb3 	bl	8101698 <HAL_GetTick>
 8105d32:	4602      	mov	r2, r0
 8105d34:	69fb      	ldr	r3, [r7, #28]
 8105d36:	1ad3      	subs	r3, r2, r3
 8105d38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8105d3a:	429a      	cmp	r2, r3
 8105d3c:	d803      	bhi.n	8105d46 <HAL_SPI_TransmitReceive+0x2d2>
 8105d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105d44:	d102      	bne.n	8105d4c <HAL_SPI_TransmitReceive+0x2d8>
 8105d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105d48:	2b00      	cmp	r3, #0
 8105d4a:	d114      	bne.n	8105d76 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8105d4c:	68f8      	ldr	r0, [r7, #12]
 8105d4e:	f000 f8b6 	bl	8105ebe <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8105d52:	68fb      	ldr	r3, [r7, #12]
 8105d54:	2200      	movs	r2, #0
 8105d56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8105d5a:	68fb      	ldr	r3, [r7, #12]
 8105d5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105d60:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8105d64:	68fb      	ldr	r3, [r7, #12]
 8105d66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8105d6a:	68fb      	ldr	r3, [r7, #12]
 8105d6c:	2201      	movs	r2, #1
 8105d6e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8105d72:	2303      	movs	r3, #3
 8105d74:	e09f      	b.n	8105eb6 <HAL_SPI_TransmitReceive+0x442>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8105d76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8105d78:	2b00      	cmp	r3, #0
 8105d7a:	d195      	bne.n	8105ca8 <HAL_SPI_TransmitReceive+0x234>
 8105d7c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8105d7e:	2b00      	cmp	r3, #0
 8105d80:	d192      	bne.n	8105ca8 <HAL_SPI_TransmitReceive+0x234>
 8105d82:	e071      	b.n	8105e68 <HAL_SPI_TransmitReceive+0x3f4>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8105d84:	68fb      	ldr	r3, [r7, #12]
 8105d86:	681b      	ldr	r3, [r3, #0]
 8105d88:	695b      	ldr	r3, [r3, #20]
 8105d8a:	f003 0302 	and.w	r3, r3, #2
 8105d8e:	2b02      	cmp	r3, #2
 8105d90:	d11b      	bne.n	8105dca <HAL_SPI_TransmitReceive+0x356>
 8105d92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8105d94:	2b00      	cmp	r3, #0
 8105d96:	d018      	beq.n	8105dca <HAL_SPI_TransmitReceive+0x356>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8105d98:	68fb      	ldr	r3, [r7, #12]
 8105d9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8105d9c:	68fb      	ldr	r3, [r7, #12]
 8105d9e:	681b      	ldr	r3, [r3, #0]
 8105da0:	3320      	adds	r3, #32
 8105da2:	7812      	ldrb	r2, [r2, #0]
 8105da4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8105da6:	68fb      	ldr	r3, [r7, #12]
 8105da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105daa:	1c5a      	adds	r2, r3, #1
 8105dac:	68fb      	ldr	r3, [r7, #12]
 8105dae:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8105db0:	68fb      	ldr	r3, [r7, #12]
 8105db2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105db6:	b29b      	uxth	r3, r3
 8105db8:	3b01      	subs	r3, #1
 8105dba:	b29a      	uxth	r2, r3
 8105dbc:	68fb      	ldr	r3, [r7, #12]
 8105dbe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8105dc2:	68fb      	ldr	r3, [r7, #12]
 8105dc4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105dc8:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8105dca:	68fb      	ldr	r3, [r7, #12]
 8105dcc:	681b      	ldr	r3, [r3, #0]
 8105dce:	695b      	ldr	r3, [r3, #20]
 8105dd0:	f003 0301 	and.w	r3, r3, #1
 8105dd4:	2b01      	cmp	r3, #1
 8105dd6:	d11d      	bne.n	8105e14 <HAL_SPI_TransmitReceive+0x3a0>
 8105dd8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8105dda:	2b00      	cmp	r3, #0
 8105ddc:	d01a      	beq.n	8105e14 <HAL_SPI_TransmitReceive+0x3a0>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8105dde:	68fb      	ldr	r3, [r7, #12]
 8105de0:	681b      	ldr	r3, [r3, #0]
 8105de2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8105de6:	68fb      	ldr	r3, [r7, #12]
 8105de8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105dea:	7812      	ldrb	r2, [r2, #0]
 8105dec:	b2d2      	uxtb	r2, r2
 8105dee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8105df0:	68fb      	ldr	r3, [r7, #12]
 8105df2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105df4:	1c5a      	adds	r2, r3, #1
 8105df6:	68fb      	ldr	r3, [r7, #12]
 8105df8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8105dfa:	68fb      	ldr	r3, [r7, #12]
 8105dfc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105e00:	b29b      	uxth	r3, r3
 8105e02:	3b01      	subs	r3, #1
 8105e04:	b29a      	uxth	r2, r3
 8105e06:	68fb      	ldr	r3, [r7, #12]
 8105e08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8105e0c:	68fb      	ldr	r3, [r7, #12]
 8105e0e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105e12:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8105e14:	f7fb fc40 	bl	8101698 <HAL_GetTick>
 8105e18:	4602      	mov	r2, r0
 8105e1a:	69fb      	ldr	r3, [r7, #28]
 8105e1c:	1ad3      	subs	r3, r2, r3
 8105e1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8105e20:	429a      	cmp	r2, r3
 8105e22:	d803      	bhi.n	8105e2c <HAL_SPI_TransmitReceive+0x3b8>
 8105e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105e2a:	d102      	bne.n	8105e32 <HAL_SPI_TransmitReceive+0x3be>
 8105e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105e2e:	2b00      	cmp	r3, #0
 8105e30:	d114      	bne.n	8105e5c <HAL_SPI_TransmitReceive+0x3e8>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8105e32:	68f8      	ldr	r0, [r7, #12]
 8105e34:	f000 f843 	bl	8105ebe <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8105e38:	68fb      	ldr	r3, [r7, #12]
 8105e3a:	2200      	movs	r2, #0
 8105e3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8105e40:	68fb      	ldr	r3, [r7, #12]
 8105e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105e46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8105e4a:	68fb      	ldr	r3, [r7, #12]
 8105e4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8105e50:	68fb      	ldr	r3, [r7, #12]
 8105e52:	2201      	movs	r2, #1
 8105e54:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8105e58:	2303      	movs	r3, #3
 8105e5a:	e02c      	b.n	8105eb6 <HAL_SPI_TransmitReceive+0x442>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8105e5c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8105e5e:	2b00      	cmp	r3, #0
 8105e60:	d190      	bne.n	8105d84 <HAL_SPI_TransmitReceive+0x310>
 8105e62:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8105e64:	2b00      	cmp	r3, #0
 8105e66:	d18d      	bne.n	8105d84 <HAL_SPI_TransmitReceive+0x310>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8105e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105e6a:	9300      	str	r3, [sp, #0]
 8105e6c:	69fb      	ldr	r3, [r7, #28]
 8105e6e:	2200      	movs	r2, #0
 8105e70:	2108      	movs	r1, #8
 8105e72:	68f8      	ldr	r0, [r7, #12]
 8105e74:	f000 f8c3 	bl	8105ffe <SPI_WaitOnFlagUntilTimeout>
 8105e78:	4603      	mov	r3, r0
 8105e7a:	2b00      	cmp	r3, #0
 8105e7c:	d007      	beq.n	8105e8e <HAL_SPI_TransmitReceive+0x41a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8105e7e:	68fb      	ldr	r3, [r7, #12]
 8105e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105e84:	f043 0220 	orr.w	r2, r3, #32
 8105e88:	68fb      	ldr	r3, [r7, #12]
 8105e8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8105e8e:	68f8      	ldr	r0, [r7, #12]
 8105e90:	f000 f815 	bl	8105ebe <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8105e94:	68fb      	ldr	r3, [r7, #12]
 8105e96:	2200      	movs	r2, #0
 8105e98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8105e9c:	68fb      	ldr	r3, [r7, #12]
 8105e9e:	2201      	movs	r2, #1
 8105ea0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8105ea4:	68fb      	ldr	r3, [r7, #12]
 8105ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105eaa:	2b00      	cmp	r3, #0
 8105eac:	d001      	beq.n	8105eb2 <HAL_SPI_TransmitReceive+0x43e>
  {
    return HAL_ERROR;
 8105eae:	2301      	movs	r3, #1
 8105eb0:	e001      	b.n	8105eb6 <HAL_SPI_TransmitReceive+0x442>
  }
  return errorcode;
 8105eb2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8105eb6:	4618      	mov	r0, r3
 8105eb8:	3730      	adds	r7, #48	; 0x30
 8105eba:	46bd      	mov	sp, r7
 8105ebc:	bd80      	pop	{r7, pc}

08105ebe <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8105ebe:	b480      	push	{r7}
 8105ec0:	b085      	sub	sp, #20
 8105ec2:	af00      	add	r7, sp, #0
 8105ec4:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8105ec6:	687b      	ldr	r3, [r7, #4]
 8105ec8:	681b      	ldr	r3, [r3, #0]
 8105eca:	695b      	ldr	r3, [r3, #20]
 8105ecc:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8105ece:	687b      	ldr	r3, [r7, #4]
 8105ed0:	681b      	ldr	r3, [r3, #0]
 8105ed2:	699a      	ldr	r2, [r3, #24]
 8105ed4:	687b      	ldr	r3, [r7, #4]
 8105ed6:	681b      	ldr	r3, [r3, #0]
 8105ed8:	f042 0208 	orr.w	r2, r2, #8
 8105edc:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8105ede:	687b      	ldr	r3, [r7, #4]
 8105ee0:	681b      	ldr	r3, [r3, #0]
 8105ee2:	699a      	ldr	r2, [r3, #24]
 8105ee4:	687b      	ldr	r3, [r7, #4]
 8105ee6:	681b      	ldr	r3, [r3, #0]
 8105ee8:	f042 0210 	orr.w	r2, r2, #16
 8105eec:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8105eee:	687b      	ldr	r3, [r7, #4]
 8105ef0:	681b      	ldr	r3, [r3, #0]
 8105ef2:	681a      	ldr	r2, [r3, #0]
 8105ef4:	687b      	ldr	r3, [r7, #4]
 8105ef6:	681b      	ldr	r3, [r3, #0]
 8105ef8:	f022 0201 	bic.w	r2, r2, #1
 8105efc:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8105efe:	687b      	ldr	r3, [r7, #4]
 8105f00:	681b      	ldr	r3, [r3, #0]
 8105f02:	691b      	ldr	r3, [r3, #16]
 8105f04:	687a      	ldr	r2, [r7, #4]
 8105f06:	6812      	ldr	r2, [r2, #0]
 8105f08:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8105f0c:	f023 0303 	bic.w	r3, r3, #3
 8105f10:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8105f12:	687b      	ldr	r3, [r7, #4]
 8105f14:	681b      	ldr	r3, [r3, #0]
 8105f16:	689a      	ldr	r2, [r3, #8]
 8105f18:	687b      	ldr	r3, [r7, #4]
 8105f1a:	681b      	ldr	r3, [r3, #0]
 8105f1c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8105f20:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8105f22:	687b      	ldr	r3, [r7, #4]
 8105f24:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8105f28:	b2db      	uxtb	r3, r3
 8105f2a:	2b04      	cmp	r3, #4
 8105f2c:	d014      	beq.n	8105f58 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8105f2e:	68fb      	ldr	r3, [r7, #12]
 8105f30:	f003 0320 	and.w	r3, r3, #32
 8105f34:	2b00      	cmp	r3, #0
 8105f36:	d00f      	beq.n	8105f58 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8105f38:	687b      	ldr	r3, [r7, #4]
 8105f3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105f3e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8105f42:	687b      	ldr	r3, [r7, #4]
 8105f44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8105f48:	687b      	ldr	r3, [r7, #4]
 8105f4a:	681b      	ldr	r3, [r3, #0]
 8105f4c:	699a      	ldr	r2, [r3, #24]
 8105f4e:	687b      	ldr	r3, [r7, #4]
 8105f50:	681b      	ldr	r3, [r3, #0]
 8105f52:	f042 0220 	orr.w	r2, r2, #32
 8105f56:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8105f58:	687b      	ldr	r3, [r7, #4]
 8105f5a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8105f5e:	b2db      	uxtb	r3, r3
 8105f60:	2b03      	cmp	r3, #3
 8105f62:	d014      	beq.n	8105f8e <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8105f64:	68fb      	ldr	r3, [r7, #12]
 8105f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105f6a:	2b00      	cmp	r3, #0
 8105f6c:	d00f      	beq.n	8105f8e <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8105f6e:	687b      	ldr	r3, [r7, #4]
 8105f70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105f74:	f043 0204 	orr.w	r2, r3, #4
 8105f78:	687b      	ldr	r3, [r7, #4]
 8105f7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8105f7e:	687b      	ldr	r3, [r7, #4]
 8105f80:	681b      	ldr	r3, [r3, #0]
 8105f82:	699a      	ldr	r2, [r3, #24]
 8105f84:	687b      	ldr	r3, [r7, #4]
 8105f86:	681b      	ldr	r3, [r3, #0]
 8105f88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8105f8c:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8105f8e:	68fb      	ldr	r3, [r7, #12]
 8105f90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8105f94:	2b00      	cmp	r3, #0
 8105f96:	d00f      	beq.n	8105fb8 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8105f98:	687b      	ldr	r3, [r7, #4]
 8105f9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105f9e:	f043 0201 	orr.w	r2, r3, #1
 8105fa2:	687b      	ldr	r3, [r7, #4]
 8105fa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8105fa8:	687b      	ldr	r3, [r7, #4]
 8105faa:	681b      	ldr	r3, [r3, #0]
 8105fac:	699a      	ldr	r2, [r3, #24]
 8105fae:	687b      	ldr	r3, [r7, #4]
 8105fb0:	681b      	ldr	r3, [r3, #0]
 8105fb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8105fb6:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8105fb8:	68fb      	ldr	r3, [r7, #12]
 8105fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105fbe:	2b00      	cmp	r3, #0
 8105fc0:	d00f      	beq.n	8105fe2 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8105fc2:	687b      	ldr	r3, [r7, #4]
 8105fc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105fc8:	f043 0208 	orr.w	r2, r3, #8
 8105fcc:	687b      	ldr	r3, [r7, #4]
 8105fce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8105fd2:	687b      	ldr	r3, [r7, #4]
 8105fd4:	681b      	ldr	r3, [r3, #0]
 8105fd6:	699a      	ldr	r2, [r3, #24]
 8105fd8:	687b      	ldr	r3, [r7, #4]
 8105fda:	681b      	ldr	r3, [r3, #0]
 8105fdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8105fe0:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8105fe2:	687b      	ldr	r3, [r7, #4]
 8105fe4:	2200      	movs	r2, #0
 8105fe6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8105fea:	687b      	ldr	r3, [r7, #4]
 8105fec:	2200      	movs	r2, #0
 8105fee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8105ff2:	bf00      	nop
 8105ff4:	3714      	adds	r7, #20
 8105ff6:	46bd      	mov	sp, r7
 8105ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105ffc:	4770      	bx	lr

08105ffe <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8105ffe:	b580      	push	{r7, lr}
 8106000:	b084      	sub	sp, #16
 8106002:	af00      	add	r7, sp, #0
 8106004:	60f8      	str	r0, [r7, #12]
 8106006:	60b9      	str	r1, [r7, #8]
 8106008:	603b      	str	r3, [r7, #0]
 810600a:	4613      	mov	r3, r2
 810600c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 810600e:	e010      	b.n	8106032 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8106010:	f7fb fb42 	bl	8101698 <HAL_GetTick>
 8106014:	4602      	mov	r2, r0
 8106016:	683b      	ldr	r3, [r7, #0]
 8106018:	1ad3      	subs	r3, r2, r3
 810601a:	69ba      	ldr	r2, [r7, #24]
 810601c:	429a      	cmp	r2, r3
 810601e:	d803      	bhi.n	8106028 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8106020:	69bb      	ldr	r3, [r7, #24]
 8106022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106026:	d102      	bne.n	810602e <SPI_WaitOnFlagUntilTimeout+0x30>
 8106028:	69bb      	ldr	r3, [r7, #24]
 810602a:	2b00      	cmp	r3, #0
 810602c:	d101      	bne.n	8106032 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 810602e:	2303      	movs	r3, #3
 8106030:	e00f      	b.n	8106052 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8106032:	68fb      	ldr	r3, [r7, #12]
 8106034:	681b      	ldr	r3, [r3, #0]
 8106036:	695a      	ldr	r2, [r3, #20]
 8106038:	68bb      	ldr	r3, [r7, #8]
 810603a:	4013      	ands	r3, r2
 810603c:	68ba      	ldr	r2, [r7, #8]
 810603e:	429a      	cmp	r2, r3
 8106040:	bf0c      	ite	eq
 8106042:	2301      	moveq	r3, #1
 8106044:	2300      	movne	r3, #0
 8106046:	b2db      	uxtb	r3, r3
 8106048:	461a      	mov	r2, r3
 810604a:	79fb      	ldrb	r3, [r7, #7]
 810604c:	429a      	cmp	r2, r3
 810604e:	d0df      	beq.n	8106010 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8106050:	2300      	movs	r3, #0
}
 8106052:	4618      	mov	r0, r3
 8106054:	3710      	adds	r7, #16
 8106056:	46bd      	mov	sp, r7
 8106058:	bd80      	pop	{r7, pc}

0810605a <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 810605a:	b480      	push	{r7}
 810605c:	b085      	sub	sp, #20
 810605e:	af00      	add	r7, sp, #0
 8106060:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8106062:	687b      	ldr	r3, [r7, #4]
 8106064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106066:	095b      	lsrs	r3, r3, #5
 8106068:	3301      	adds	r3, #1
 810606a:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 810606c:	687b      	ldr	r3, [r7, #4]
 810606e:	68db      	ldr	r3, [r3, #12]
 8106070:	3301      	adds	r3, #1
 8106072:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8106074:	68bb      	ldr	r3, [r7, #8]
 8106076:	3307      	adds	r3, #7
 8106078:	08db      	lsrs	r3, r3, #3
 810607a:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 810607c:	68bb      	ldr	r3, [r7, #8]
 810607e:	68fa      	ldr	r2, [r7, #12]
 8106080:	fb02 f303 	mul.w	r3, r2, r3
}
 8106084:	4618      	mov	r0, r3
 8106086:	3714      	adds	r7, #20
 8106088:	46bd      	mov	sp, r7
 810608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810608e:	4770      	bx	lr

08106090 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8106090:	b580      	push	{r7, lr}
 8106092:	b082      	sub	sp, #8
 8106094:	af00      	add	r7, sp, #0
 8106096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8106098:	687b      	ldr	r3, [r7, #4]
 810609a:	2b00      	cmp	r3, #0
 810609c:	d101      	bne.n	81060a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 810609e:	2301      	movs	r3, #1
 81060a0:	e049      	b.n	8106136 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81060a2:	687b      	ldr	r3, [r7, #4]
 81060a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81060a8:	b2db      	uxtb	r3, r3
 81060aa:	2b00      	cmp	r3, #0
 81060ac:	d106      	bne.n	81060bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81060ae:	687b      	ldr	r3, [r7, #4]
 81060b0:	2200      	movs	r2, #0
 81060b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 81060b6:	6878      	ldr	r0, [r7, #4]
 81060b8:	f7fb f96e 	bl	8101398 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81060bc:	687b      	ldr	r3, [r7, #4]
 81060be:	2202      	movs	r2, #2
 81060c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81060c4:	687b      	ldr	r3, [r7, #4]
 81060c6:	681a      	ldr	r2, [r3, #0]
 81060c8:	687b      	ldr	r3, [r7, #4]
 81060ca:	3304      	adds	r3, #4
 81060cc:	4619      	mov	r1, r3
 81060ce:	4610      	mov	r0, r2
 81060d0:	f000 f97c 	bl	81063cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81060d4:	687b      	ldr	r3, [r7, #4]
 81060d6:	2201      	movs	r2, #1
 81060d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81060dc:	687b      	ldr	r3, [r7, #4]
 81060de:	2201      	movs	r2, #1
 81060e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81060e4:	687b      	ldr	r3, [r7, #4]
 81060e6:	2201      	movs	r2, #1
 81060e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81060ec:	687b      	ldr	r3, [r7, #4]
 81060ee:	2201      	movs	r2, #1
 81060f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81060f4:	687b      	ldr	r3, [r7, #4]
 81060f6:	2201      	movs	r2, #1
 81060f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 81060fc:	687b      	ldr	r3, [r7, #4]
 81060fe:	2201      	movs	r2, #1
 8106100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8106104:	687b      	ldr	r3, [r7, #4]
 8106106:	2201      	movs	r2, #1
 8106108:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810610c:	687b      	ldr	r3, [r7, #4]
 810610e:	2201      	movs	r2, #1
 8106110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8106114:	687b      	ldr	r3, [r7, #4]
 8106116:	2201      	movs	r2, #1
 8106118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810611c:	687b      	ldr	r3, [r7, #4]
 810611e:	2201      	movs	r2, #1
 8106120:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8106124:	687b      	ldr	r3, [r7, #4]
 8106126:	2201      	movs	r2, #1
 8106128:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810612c:	687b      	ldr	r3, [r7, #4]
 810612e:	2201      	movs	r2, #1
 8106130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8106134:	2300      	movs	r3, #0
}
 8106136:	4618      	mov	r0, r3
 8106138:	3708      	adds	r7, #8
 810613a:	46bd      	mov	sp, r7
 810613c:	bd80      	pop	{r7, pc}

0810613e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 810613e:	b580      	push	{r7, lr}
 8106140:	b082      	sub	sp, #8
 8106142:	af00      	add	r7, sp, #0
 8106144:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8106146:	687b      	ldr	r3, [r7, #4]
 8106148:	681b      	ldr	r3, [r3, #0]
 810614a:	691b      	ldr	r3, [r3, #16]
 810614c:	f003 0302 	and.w	r3, r3, #2
 8106150:	2b02      	cmp	r3, #2
 8106152:	d122      	bne.n	810619a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8106154:	687b      	ldr	r3, [r7, #4]
 8106156:	681b      	ldr	r3, [r3, #0]
 8106158:	68db      	ldr	r3, [r3, #12]
 810615a:	f003 0302 	and.w	r3, r3, #2
 810615e:	2b02      	cmp	r3, #2
 8106160:	d11b      	bne.n	810619a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8106162:	687b      	ldr	r3, [r7, #4]
 8106164:	681b      	ldr	r3, [r3, #0]
 8106166:	f06f 0202 	mvn.w	r2, #2
 810616a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 810616c:	687b      	ldr	r3, [r7, #4]
 810616e:	2201      	movs	r2, #1
 8106170:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8106172:	687b      	ldr	r3, [r7, #4]
 8106174:	681b      	ldr	r3, [r3, #0]
 8106176:	699b      	ldr	r3, [r3, #24]
 8106178:	f003 0303 	and.w	r3, r3, #3
 810617c:	2b00      	cmp	r3, #0
 810617e:	d003      	beq.n	8106188 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8106180:	6878      	ldr	r0, [r7, #4]
 8106182:	f000 f905 	bl	8106390 <HAL_TIM_IC_CaptureCallback>
 8106186:	e005      	b.n	8106194 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8106188:	6878      	ldr	r0, [r7, #4]
 810618a:	f000 f8f7 	bl	810637c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 810618e:	6878      	ldr	r0, [r7, #4]
 8106190:	f000 f908 	bl	81063a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106194:	687b      	ldr	r3, [r7, #4]
 8106196:	2200      	movs	r2, #0
 8106198:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 810619a:	687b      	ldr	r3, [r7, #4]
 810619c:	681b      	ldr	r3, [r3, #0]
 810619e:	691b      	ldr	r3, [r3, #16]
 81061a0:	f003 0304 	and.w	r3, r3, #4
 81061a4:	2b04      	cmp	r3, #4
 81061a6:	d122      	bne.n	81061ee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 81061a8:	687b      	ldr	r3, [r7, #4]
 81061aa:	681b      	ldr	r3, [r3, #0]
 81061ac:	68db      	ldr	r3, [r3, #12]
 81061ae:	f003 0304 	and.w	r3, r3, #4
 81061b2:	2b04      	cmp	r3, #4
 81061b4:	d11b      	bne.n	81061ee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 81061b6:	687b      	ldr	r3, [r7, #4]
 81061b8:	681b      	ldr	r3, [r3, #0]
 81061ba:	f06f 0204 	mvn.w	r2, #4
 81061be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 81061c0:	687b      	ldr	r3, [r7, #4]
 81061c2:	2202      	movs	r2, #2
 81061c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 81061c6:	687b      	ldr	r3, [r7, #4]
 81061c8:	681b      	ldr	r3, [r3, #0]
 81061ca:	699b      	ldr	r3, [r3, #24]
 81061cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81061d0:	2b00      	cmp	r3, #0
 81061d2:	d003      	beq.n	81061dc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81061d4:	6878      	ldr	r0, [r7, #4]
 81061d6:	f000 f8db 	bl	8106390 <HAL_TIM_IC_CaptureCallback>
 81061da:	e005      	b.n	81061e8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81061dc:	6878      	ldr	r0, [r7, #4]
 81061de:	f000 f8cd 	bl	810637c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81061e2:	6878      	ldr	r0, [r7, #4]
 81061e4:	f000 f8de 	bl	81063a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81061e8:	687b      	ldr	r3, [r7, #4]
 81061ea:	2200      	movs	r2, #0
 81061ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 81061ee:	687b      	ldr	r3, [r7, #4]
 81061f0:	681b      	ldr	r3, [r3, #0]
 81061f2:	691b      	ldr	r3, [r3, #16]
 81061f4:	f003 0308 	and.w	r3, r3, #8
 81061f8:	2b08      	cmp	r3, #8
 81061fa:	d122      	bne.n	8106242 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 81061fc:	687b      	ldr	r3, [r7, #4]
 81061fe:	681b      	ldr	r3, [r3, #0]
 8106200:	68db      	ldr	r3, [r3, #12]
 8106202:	f003 0308 	and.w	r3, r3, #8
 8106206:	2b08      	cmp	r3, #8
 8106208:	d11b      	bne.n	8106242 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 810620a:	687b      	ldr	r3, [r7, #4]
 810620c:	681b      	ldr	r3, [r3, #0]
 810620e:	f06f 0208 	mvn.w	r2, #8
 8106212:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8106214:	687b      	ldr	r3, [r7, #4]
 8106216:	2204      	movs	r2, #4
 8106218:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 810621a:	687b      	ldr	r3, [r7, #4]
 810621c:	681b      	ldr	r3, [r3, #0]
 810621e:	69db      	ldr	r3, [r3, #28]
 8106220:	f003 0303 	and.w	r3, r3, #3
 8106224:	2b00      	cmp	r3, #0
 8106226:	d003      	beq.n	8106230 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8106228:	6878      	ldr	r0, [r7, #4]
 810622a:	f000 f8b1 	bl	8106390 <HAL_TIM_IC_CaptureCallback>
 810622e:	e005      	b.n	810623c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8106230:	6878      	ldr	r0, [r7, #4]
 8106232:	f000 f8a3 	bl	810637c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106236:	6878      	ldr	r0, [r7, #4]
 8106238:	f000 f8b4 	bl	81063a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810623c:	687b      	ldr	r3, [r7, #4]
 810623e:	2200      	movs	r2, #0
 8106240:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8106242:	687b      	ldr	r3, [r7, #4]
 8106244:	681b      	ldr	r3, [r3, #0]
 8106246:	691b      	ldr	r3, [r3, #16]
 8106248:	f003 0310 	and.w	r3, r3, #16
 810624c:	2b10      	cmp	r3, #16
 810624e:	d122      	bne.n	8106296 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8106250:	687b      	ldr	r3, [r7, #4]
 8106252:	681b      	ldr	r3, [r3, #0]
 8106254:	68db      	ldr	r3, [r3, #12]
 8106256:	f003 0310 	and.w	r3, r3, #16
 810625a:	2b10      	cmp	r3, #16
 810625c:	d11b      	bne.n	8106296 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 810625e:	687b      	ldr	r3, [r7, #4]
 8106260:	681b      	ldr	r3, [r3, #0]
 8106262:	f06f 0210 	mvn.w	r2, #16
 8106266:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8106268:	687b      	ldr	r3, [r7, #4]
 810626a:	2208      	movs	r2, #8
 810626c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 810626e:	687b      	ldr	r3, [r7, #4]
 8106270:	681b      	ldr	r3, [r3, #0]
 8106272:	69db      	ldr	r3, [r3, #28]
 8106274:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8106278:	2b00      	cmp	r3, #0
 810627a:	d003      	beq.n	8106284 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810627c:	6878      	ldr	r0, [r7, #4]
 810627e:	f000 f887 	bl	8106390 <HAL_TIM_IC_CaptureCallback>
 8106282:	e005      	b.n	8106290 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8106284:	6878      	ldr	r0, [r7, #4]
 8106286:	f000 f879 	bl	810637c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810628a:	6878      	ldr	r0, [r7, #4]
 810628c:	f000 f88a 	bl	81063a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106290:	687b      	ldr	r3, [r7, #4]
 8106292:	2200      	movs	r2, #0
 8106294:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8106296:	687b      	ldr	r3, [r7, #4]
 8106298:	681b      	ldr	r3, [r3, #0]
 810629a:	691b      	ldr	r3, [r3, #16]
 810629c:	f003 0301 	and.w	r3, r3, #1
 81062a0:	2b01      	cmp	r3, #1
 81062a2:	d10e      	bne.n	81062c2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 81062a4:	687b      	ldr	r3, [r7, #4]
 81062a6:	681b      	ldr	r3, [r3, #0]
 81062a8:	68db      	ldr	r3, [r3, #12]
 81062aa:	f003 0301 	and.w	r3, r3, #1
 81062ae:	2b01      	cmp	r3, #1
 81062b0:	d107      	bne.n	81062c2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 81062b2:	687b      	ldr	r3, [r7, #4]
 81062b4:	681b      	ldr	r3, [r3, #0]
 81062b6:	f06f 0201 	mvn.w	r2, #1
 81062ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 81062bc:	6878      	ldr	r0, [r7, #4]
 81062be:	f7fa ff07 	bl	81010d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 81062c2:	687b      	ldr	r3, [r7, #4]
 81062c4:	681b      	ldr	r3, [r3, #0]
 81062c6:	691b      	ldr	r3, [r3, #16]
 81062c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81062cc:	2b80      	cmp	r3, #128	; 0x80
 81062ce:	d10e      	bne.n	81062ee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 81062d0:	687b      	ldr	r3, [r7, #4]
 81062d2:	681b      	ldr	r3, [r3, #0]
 81062d4:	68db      	ldr	r3, [r3, #12]
 81062d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81062da:	2b80      	cmp	r3, #128	; 0x80
 81062dc:	d107      	bne.n	81062ee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 81062de:	687b      	ldr	r3, [r7, #4]
 81062e0:	681b      	ldr	r3, [r3, #0]
 81062e2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 81062e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 81062e8:	6878      	ldr	r0, [r7, #4]
 81062ea:	f000 f913 	bl	8106514 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 81062ee:	687b      	ldr	r3, [r7, #4]
 81062f0:	681b      	ldr	r3, [r3, #0]
 81062f2:	691b      	ldr	r3, [r3, #16]
 81062f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81062f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81062fc:	d10e      	bne.n	810631c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 81062fe:	687b      	ldr	r3, [r7, #4]
 8106300:	681b      	ldr	r3, [r3, #0]
 8106302:	68db      	ldr	r3, [r3, #12]
 8106304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8106308:	2b80      	cmp	r3, #128	; 0x80
 810630a:	d107      	bne.n	810631c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 810630c:	687b      	ldr	r3, [r7, #4]
 810630e:	681b      	ldr	r3, [r3, #0]
 8106310:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8106314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8106316:	6878      	ldr	r0, [r7, #4]
 8106318:	f000 f906 	bl	8106528 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 810631c:	687b      	ldr	r3, [r7, #4]
 810631e:	681b      	ldr	r3, [r3, #0]
 8106320:	691b      	ldr	r3, [r3, #16]
 8106322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106326:	2b40      	cmp	r3, #64	; 0x40
 8106328:	d10e      	bne.n	8106348 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 810632a:	687b      	ldr	r3, [r7, #4]
 810632c:	681b      	ldr	r3, [r3, #0]
 810632e:	68db      	ldr	r3, [r3, #12]
 8106330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106334:	2b40      	cmp	r3, #64	; 0x40
 8106336:	d107      	bne.n	8106348 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8106338:	687b      	ldr	r3, [r7, #4]
 810633a:	681b      	ldr	r3, [r3, #0]
 810633c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8106340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8106342:	6878      	ldr	r0, [r7, #4]
 8106344:	f000 f838 	bl	81063b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8106348:	687b      	ldr	r3, [r7, #4]
 810634a:	681b      	ldr	r3, [r3, #0]
 810634c:	691b      	ldr	r3, [r3, #16]
 810634e:	f003 0320 	and.w	r3, r3, #32
 8106352:	2b20      	cmp	r3, #32
 8106354:	d10e      	bne.n	8106374 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8106356:	687b      	ldr	r3, [r7, #4]
 8106358:	681b      	ldr	r3, [r3, #0]
 810635a:	68db      	ldr	r3, [r3, #12]
 810635c:	f003 0320 	and.w	r3, r3, #32
 8106360:	2b20      	cmp	r3, #32
 8106362:	d107      	bne.n	8106374 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8106364:	687b      	ldr	r3, [r7, #4]
 8106366:	681b      	ldr	r3, [r3, #0]
 8106368:	f06f 0220 	mvn.w	r2, #32
 810636c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 810636e:	6878      	ldr	r0, [r7, #4]
 8106370:	f000 f8c6 	bl	8106500 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8106374:	bf00      	nop
 8106376:	3708      	adds	r7, #8
 8106378:	46bd      	mov	sp, r7
 810637a:	bd80      	pop	{r7, pc}

0810637c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 810637c:	b480      	push	{r7}
 810637e:	b083      	sub	sp, #12
 8106380:	af00      	add	r7, sp, #0
 8106382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8106384:	bf00      	nop
 8106386:	370c      	adds	r7, #12
 8106388:	46bd      	mov	sp, r7
 810638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810638e:	4770      	bx	lr

08106390 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8106390:	b480      	push	{r7}
 8106392:	b083      	sub	sp, #12
 8106394:	af00      	add	r7, sp, #0
 8106396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8106398:	bf00      	nop
 810639a:	370c      	adds	r7, #12
 810639c:	46bd      	mov	sp, r7
 810639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81063a2:	4770      	bx	lr

081063a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 81063a4:	b480      	push	{r7}
 81063a6:	b083      	sub	sp, #12
 81063a8:	af00      	add	r7, sp, #0
 81063aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 81063ac:	bf00      	nop
 81063ae:	370c      	adds	r7, #12
 81063b0:	46bd      	mov	sp, r7
 81063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81063b6:	4770      	bx	lr

081063b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 81063b8:	b480      	push	{r7}
 81063ba:	b083      	sub	sp, #12
 81063bc:	af00      	add	r7, sp, #0
 81063be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 81063c0:	bf00      	nop
 81063c2:	370c      	adds	r7, #12
 81063c4:	46bd      	mov	sp, r7
 81063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81063ca:	4770      	bx	lr

081063cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 81063cc:	b480      	push	{r7}
 81063ce:	b085      	sub	sp, #20
 81063d0:	af00      	add	r7, sp, #0
 81063d2:	6078      	str	r0, [r7, #4]
 81063d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 81063d6:	687b      	ldr	r3, [r7, #4]
 81063d8:	681b      	ldr	r3, [r3, #0]
 81063da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 81063dc:	687b      	ldr	r3, [r7, #4]
 81063de:	4a40      	ldr	r2, [pc, #256]	; (81064e0 <TIM_Base_SetConfig+0x114>)
 81063e0:	4293      	cmp	r3, r2
 81063e2:	d013      	beq.n	810640c <TIM_Base_SetConfig+0x40>
 81063e4:	687b      	ldr	r3, [r7, #4]
 81063e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81063ea:	d00f      	beq.n	810640c <TIM_Base_SetConfig+0x40>
 81063ec:	687b      	ldr	r3, [r7, #4]
 81063ee:	4a3d      	ldr	r2, [pc, #244]	; (81064e4 <TIM_Base_SetConfig+0x118>)
 81063f0:	4293      	cmp	r3, r2
 81063f2:	d00b      	beq.n	810640c <TIM_Base_SetConfig+0x40>
 81063f4:	687b      	ldr	r3, [r7, #4]
 81063f6:	4a3c      	ldr	r2, [pc, #240]	; (81064e8 <TIM_Base_SetConfig+0x11c>)
 81063f8:	4293      	cmp	r3, r2
 81063fa:	d007      	beq.n	810640c <TIM_Base_SetConfig+0x40>
 81063fc:	687b      	ldr	r3, [r7, #4]
 81063fe:	4a3b      	ldr	r2, [pc, #236]	; (81064ec <TIM_Base_SetConfig+0x120>)
 8106400:	4293      	cmp	r3, r2
 8106402:	d003      	beq.n	810640c <TIM_Base_SetConfig+0x40>
 8106404:	687b      	ldr	r3, [r7, #4]
 8106406:	4a3a      	ldr	r2, [pc, #232]	; (81064f0 <TIM_Base_SetConfig+0x124>)
 8106408:	4293      	cmp	r3, r2
 810640a:	d108      	bne.n	810641e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 810640c:	68fb      	ldr	r3, [r7, #12]
 810640e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8106412:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8106414:	683b      	ldr	r3, [r7, #0]
 8106416:	685b      	ldr	r3, [r3, #4]
 8106418:	68fa      	ldr	r2, [r7, #12]
 810641a:	4313      	orrs	r3, r2
 810641c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810641e:	687b      	ldr	r3, [r7, #4]
 8106420:	4a2f      	ldr	r2, [pc, #188]	; (81064e0 <TIM_Base_SetConfig+0x114>)
 8106422:	4293      	cmp	r3, r2
 8106424:	d01f      	beq.n	8106466 <TIM_Base_SetConfig+0x9a>
 8106426:	687b      	ldr	r3, [r7, #4]
 8106428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810642c:	d01b      	beq.n	8106466 <TIM_Base_SetConfig+0x9a>
 810642e:	687b      	ldr	r3, [r7, #4]
 8106430:	4a2c      	ldr	r2, [pc, #176]	; (81064e4 <TIM_Base_SetConfig+0x118>)
 8106432:	4293      	cmp	r3, r2
 8106434:	d017      	beq.n	8106466 <TIM_Base_SetConfig+0x9a>
 8106436:	687b      	ldr	r3, [r7, #4]
 8106438:	4a2b      	ldr	r2, [pc, #172]	; (81064e8 <TIM_Base_SetConfig+0x11c>)
 810643a:	4293      	cmp	r3, r2
 810643c:	d013      	beq.n	8106466 <TIM_Base_SetConfig+0x9a>
 810643e:	687b      	ldr	r3, [r7, #4]
 8106440:	4a2a      	ldr	r2, [pc, #168]	; (81064ec <TIM_Base_SetConfig+0x120>)
 8106442:	4293      	cmp	r3, r2
 8106444:	d00f      	beq.n	8106466 <TIM_Base_SetConfig+0x9a>
 8106446:	687b      	ldr	r3, [r7, #4]
 8106448:	4a29      	ldr	r2, [pc, #164]	; (81064f0 <TIM_Base_SetConfig+0x124>)
 810644a:	4293      	cmp	r3, r2
 810644c:	d00b      	beq.n	8106466 <TIM_Base_SetConfig+0x9a>
 810644e:	687b      	ldr	r3, [r7, #4]
 8106450:	4a28      	ldr	r2, [pc, #160]	; (81064f4 <TIM_Base_SetConfig+0x128>)
 8106452:	4293      	cmp	r3, r2
 8106454:	d007      	beq.n	8106466 <TIM_Base_SetConfig+0x9a>
 8106456:	687b      	ldr	r3, [r7, #4]
 8106458:	4a27      	ldr	r2, [pc, #156]	; (81064f8 <TIM_Base_SetConfig+0x12c>)
 810645a:	4293      	cmp	r3, r2
 810645c:	d003      	beq.n	8106466 <TIM_Base_SetConfig+0x9a>
 810645e:	687b      	ldr	r3, [r7, #4]
 8106460:	4a26      	ldr	r2, [pc, #152]	; (81064fc <TIM_Base_SetConfig+0x130>)
 8106462:	4293      	cmp	r3, r2
 8106464:	d108      	bne.n	8106478 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8106466:	68fb      	ldr	r3, [r7, #12]
 8106468:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810646c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810646e:	683b      	ldr	r3, [r7, #0]
 8106470:	68db      	ldr	r3, [r3, #12]
 8106472:	68fa      	ldr	r2, [r7, #12]
 8106474:	4313      	orrs	r3, r2
 8106476:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8106478:	68fb      	ldr	r3, [r7, #12]
 810647a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 810647e:	683b      	ldr	r3, [r7, #0]
 8106480:	695b      	ldr	r3, [r3, #20]
 8106482:	4313      	orrs	r3, r2
 8106484:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8106486:	687b      	ldr	r3, [r7, #4]
 8106488:	68fa      	ldr	r2, [r7, #12]
 810648a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 810648c:	683b      	ldr	r3, [r7, #0]
 810648e:	689a      	ldr	r2, [r3, #8]
 8106490:	687b      	ldr	r3, [r7, #4]
 8106492:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8106494:	683b      	ldr	r3, [r7, #0]
 8106496:	681a      	ldr	r2, [r3, #0]
 8106498:	687b      	ldr	r3, [r7, #4]
 810649a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 810649c:	687b      	ldr	r3, [r7, #4]
 810649e:	4a10      	ldr	r2, [pc, #64]	; (81064e0 <TIM_Base_SetConfig+0x114>)
 81064a0:	4293      	cmp	r3, r2
 81064a2:	d00f      	beq.n	81064c4 <TIM_Base_SetConfig+0xf8>
 81064a4:	687b      	ldr	r3, [r7, #4]
 81064a6:	4a12      	ldr	r2, [pc, #72]	; (81064f0 <TIM_Base_SetConfig+0x124>)
 81064a8:	4293      	cmp	r3, r2
 81064aa:	d00b      	beq.n	81064c4 <TIM_Base_SetConfig+0xf8>
 81064ac:	687b      	ldr	r3, [r7, #4]
 81064ae:	4a11      	ldr	r2, [pc, #68]	; (81064f4 <TIM_Base_SetConfig+0x128>)
 81064b0:	4293      	cmp	r3, r2
 81064b2:	d007      	beq.n	81064c4 <TIM_Base_SetConfig+0xf8>
 81064b4:	687b      	ldr	r3, [r7, #4]
 81064b6:	4a10      	ldr	r2, [pc, #64]	; (81064f8 <TIM_Base_SetConfig+0x12c>)
 81064b8:	4293      	cmp	r3, r2
 81064ba:	d003      	beq.n	81064c4 <TIM_Base_SetConfig+0xf8>
 81064bc:	687b      	ldr	r3, [r7, #4]
 81064be:	4a0f      	ldr	r2, [pc, #60]	; (81064fc <TIM_Base_SetConfig+0x130>)
 81064c0:	4293      	cmp	r3, r2
 81064c2:	d103      	bne.n	81064cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 81064c4:	683b      	ldr	r3, [r7, #0]
 81064c6:	691a      	ldr	r2, [r3, #16]
 81064c8:	687b      	ldr	r3, [r7, #4]
 81064ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 81064cc:	687b      	ldr	r3, [r7, #4]
 81064ce:	2201      	movs	r2, #1
 81064d0:	615a      	str	r2, [r3, #20]
}
 81064d2:	bf00      	nop
 81064d4:	3714      	adds	r7, #20
 81064d6:	46bd      	mov	sp, r7
 81064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81064dc:	4770      	bx	lr
 81064de:	bf00      	nop
 81064e0:	40010000 	.word	0x40010000
 81064e4:	40000400 	.word	0x40000400
 81064e8:	40000800 	.word	0x40000800
 81064ec:	40000c00 	.word	0x40000c00
 81064f0:	40010400 	.word	0x40010400
 81064f4:	40014000 	.word	0x40014000
 81064f8:	40014400 	.word	0x40014400
 81064fc:	40014800 	.word	0x40014800

08106500 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8106500:	b480      	push	{r7}
 8106502:	b083      	sub	sp, #12
 8106504:	af00      	add	r7, sp, #0
 8106506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8106508:	bf00      	nop
 810650a:	370c      	adds	r7, #12
 810650c:	46bd      	mov	sp, r7
 810650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106512:	4770      	bx	lr

08106514 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8106514:	b480      	push	{r7}
 8106516:	b083      	sub	sp, #12
 8106518:	af00      	add	r7, sp, #0
 810651a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 810651c:	bf00      	nop
 810651e:	370c      	adds	r7, #12
 8106520:	46bd      	mov	sp, r7
 8106522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106526:	4770      	bx	lr

08106528 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8106528:	b480      	push	{r7}
 810652a:	b083      	sub	sp, #12
 810652c:	af00      	add	r7, sp, #0
 810652e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8106530:	bf00      	nop
 8106532:	370c      	adds	r7, #12
 8106534:	46bd      	mov	sp, r7
 8106536:	f85d 7b04 	ldr.w	r7, [sp], #4
 810653a:	4770      	bx	lr

0810653c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810653c:	b580      	push	{r7, lr}
 810653e:	b08a      	sub	sp, #40	; 0x28
 8106540:	af02      	add	r7, sp, #8
 8106542:	60f8      	str	r0, [r7, #12]
 8106544:	60b9      	str	r1, [r7, #8]
 8106546:	603b      	str	r3, [r7, #0]
 8106548:	4613      	mov	r3, r2
 810654a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 810654c:	68fb      	ldr	r3, [r7, #12]
 810654e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106552:	2b20      	cmp	r3, #32
 8106554:	f040 8083 	bne.w	810665e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8106558:	68bb      	ldr	r3, [r7, #8]
 810655a:	2b00      	cmp	r3, #0
 810655c:	d002      	beq.n	8106564 <HAL_UART_Transmit+0x28>
 810655e:	88fb      	ldrh	r3, [r7, #6]
 8106560:	2b00      	cmp	r3, #0
 8106562:	d101      	bne.n	8106568 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8106564:	2301      	movs	r3, #1
 8106566:	e07b      	b.n	8106660 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8106568:	68fb      	ldr	r3, [r7, #12]
 810656a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810656e:	2b01      	cmp	r3, #1
 8106570:	d101      	bne.n	8106576 <HAL_UART_Transmit+0x3a>
 8106572:	2302      	movs	r3, #2
 8106574:	e074      	b.n	8106660 <HAL_UART_Transmit+0x124>
 8106576:	68fb      	ldr	r3, [r7, #12]
 8106578:	2201      	movs	r2, #1
 810657a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810657e:	68fb      	ldr	r3, [r7, #12]
 8106580:	2200      	movs	r2, #0
 8106582:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8106586:	68fb      	ldr	r3, [r7, #12]
 8106588:	2221      	movs	r2, #33	; 0x21
 810658a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 810658e:	f7fb f883 	bl	8101698 <HAL_GetTick>
 8106592:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8106594:	68fb      	ldr	r3, [r7, #12]
 8106596:	88fa      	ldrh	r2, [r7, #6]
 8106598:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 810659c:	68fb      	ldr	r3, [r7, #12]
 810659e:	88fa      	ldrh	r2, [r7, #6]
 81065a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 81065a4:	68fb      	ldr	r3, [r7, #12]
 81065a6:	689b      	ldr	r3, [r3, #8]
 81065a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81065ac:	d108      	bne.n	81065c0 <HAL_UART_Transmit+0x84>
 81065ae:	68fb      	ldr	r3, [r7, #12]
 81065b0:	691b      	ldr	r3, [r3, #16]
 81065b2:	2b00      	cmp	r3, #0
 81065b4:	d104      	bne.n	81065c0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 81065b6:	2300      	movs	r3, #0
 81065b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 81065ba:	68bb      	ldr	r3, [r7, #8]
 81065bc:	61bb      	str	r3, [r7, #24]
 81065be:	e003      	b.n	81065c8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 81065c0:	68bb      	ldr	r3, [r7, #8]
 81065c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 81065c4:	2300      	movs	r3, #0
 81065c6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 81065c8:	68fb      	ldr	r3, [r7, #12]
 81065ca:	2200      	movs	r2, #0
 81065cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 81065d0:	e02c      	b.n	810662c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 81065d2:	683b      	ldr	r3, [r7, #0]
 81065d4:	9300      	str	r3, [sp, #0]
 81065d6:	697b      	ldr	r3, [r7, #20]
 81065d8:	2200      	movs	r2, #0
 81065da:	2180      	movs	r1, #128	; 0x80
 81065dc:	68f8      	ldr	r0, [r7, #12]
 81065de:	f000 f843 	bl	8106668 <UART_WaitOnFlagUntilTimeout>
 81065e2:	4603      	mov	r3, r0
 81065e4:	2b00      	cmp	r3, #0
 81065e6:	d001      	beq.n	81065ec <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 81065e8:	2303      	movs	r3, #3
 81065ea:	e039      	b.n	8106660 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 81065ec:	69fb      	ldr	r3, [r7, #28]
 81065ee:	2b00      	cmp	r3, #0
 81065f0:	d10b      	bne.n	810660a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 81065f2:	69bb      	ldr	r3, [r7, #24]
 81065f4:	881b      	ldrh	r3, [r3, #0]
 81065f6:	461a      	mov	r2, r3
 81065f8:	68fb      	ldr	r3, [r7, #12]
 81065fa:	681b      	ldr	r3, [r3, #0]
 81065fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8106600:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8106602:	69bb      	ldr	r3, [r7, #24]
 8106604:	3302      	adds	r3, #2
 8106606:	61bb      	str	r3, [r7, #24]
 8106608:	e007      	b.n	810661a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 810660a:	69fb      	ldr	r3, [r7, #28]
 810660c:	781a      	ldrb	r2, [r3, #0]
 810660e:	68fb      	ldr	r3, [r7, #12]
 8106610:	681b      	ldr	r3, [r3, #0]
 8106612:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8106614:	69fb      	ldr	r3, [r7, #28]
 8106616:	3301      	adds	r3, #1
 8106618:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 810661a:	68fb      	ldr	r3, [r7, #12]
 810661c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8106620:	b29b      	uxth	r3, r3
 8106622:	3b01      	subs	r3, #1
 8106624:	b29a      	uxth	r2, r3
 8106626:	68fb      	ldr	r3, [r7, #12]
 8106628:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 810662c:	68fb      	ldr	r3, [r7, #12]
 810662e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8106632:	b29b      	uxth	r3, r3
 8106634:	2b00      	cmp	r3, #0
 8106636:	d1cc      	bne.n	81065d2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8106638:	683b      	ldr	r3, [r7, #0]
 810663a:	9300      	str	r3, [sp, #0]
 810663c:	697b      	ldr	r3, [r7, #20]
 810663e:	2200      	movs	r2, #0
 8106640:	2140      	movs	r1, #64	; 0x40
 8106642:	68f8      	ldr	r0, [r7, #12]
 8106644:	f000 f810 	bl	8106668 <UART_WaitOnFlagUntilTimeout>
 8106648:	4603      	mov	r3, r0
 810664a:	2b00      	cmp	r3, #0
 810664c:	d001      	beq.n	8106652 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 810664e:	2303      	movs	r3, #3
 8106650:	e006      	b.n	8106660 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8106652:	68fb      	ldr	r3, [r7, #12]
 8106654:	2220      	movs	r2, #32
 8106656:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 810665a:	2300      	movs	r3, #0
 810665c:	e000      	b.n	8106660 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 810665e:	2302      	movs	r3, #2
  }
}
 8106660:	4618      	mov	r0, r3
 8106662:	3720      	adds	r7, #32
 8106664:	46bd      	mov	sp, r7
 8106666:	bd80      	pop	{r7, pc}

08106668 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8106668:	b580      	push	{r7, lr}
 810666a:	b09c      	sub	sp, #112	; 0x70
 810666c:	af00      	add	r7, sp, #0
 810666e:	60f8      	str	r0, [r7, #12]
 8106670:	60b9      	str	r1, [r7, #8]
 8106672:	603b      	str	r3, [r7, #0]
 8106674:	4613      	mov	r3, r2
 8106676:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8106678:	e0a9      	b.n	81067ce <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810667a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 810667c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106680:	f000 80a5 	beq.w	81067ce <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8106684:	f7fb f808 	bl	8101698 <HAL_GetTick>
 8106688:	4602      	mov	r2, r0
 810668a:	683b      	ldr	r3, [r7, #0]
 810668c:	1ad3      	subs	r3, r2, r3
 810668e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8106690:	429a      	cmp	r2, r3
 8106692:	d302      	bcc.n	810669a <UART_WaitOnFlagUntilTimeout+0x32>
 8106694:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8106696:	2b00      	cmp	r3, #0
 8106698:	d140      	bne.n	810671c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 810669a:	68fb      	ldr	r3, [r7, #12]
 810669c:	681b      	ldr	r3, [r3, #0]
 810669e:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81066a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 81066a2:	e853 3f00 	ldrex	r3, [r3]
 81066a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 81066a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81066aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 81066ae:	667b      	str	r3, [r7, #100]	; 0x64
 81066b0:	68fb      	ldr	r3, [r7, #12]
 81066b2:	681b      	ldr	r3, [r3, #0]
 81066b4:	461a      	mov	r2, r3
 81066b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 81066b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 81066ba:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81066bc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 81066be:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 81066c0:	e841 2300 	strex	r3, r2, [r1]
 81066c4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 81066c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81066c8:	2b00      	cmp	r3, #0
 81066ca:	d1e6      	bne.n	810669a <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 81066cc:	68fb      	ldr	r3, [r7, #12]
 81066ce:	681b      	ldr	r3, [r3, #0]
 81066d0:	3308      	adds	r3, #8
 81066d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81066d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81066d6:	e853 3f00 	ldrex	r3, [r3]
 81066da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 81066dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81066de:	f023 0301 	bic.w	r3, r3, #1
 81066e2:	663b      	str	r3, [r7, #96]	; 0x60
 81066e4:	68fb      	ldr	r3, [r7, #12]
 81066e6:	681b      	ldr	r3, [r3, #0]
 81066e8:	3308      	adds	r3, #8
 81066ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 81066ec:	64ba      	str	r2, [r7, #72]	; 0x48
 81066ee:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81066f0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 81066f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 81066f4:	e841 2300 	strex	r3, r2, [r1]
 81066f8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 81066fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81066fc:	2b00      	cmp	r3, #0
 81066fe:	d1e5      	bne.n	81066cc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8106700:	68fb      	ldr	r3, [r7, #12]
 8106702:	2220      	movs	r2, #32
 8106704:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8106708:	68fb      	ldr	r3, [r7, #12]
 810670a:	2220      	movs	r2, #32
 810670c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8106710:	68fb      	ldr	r3, [r7, #12]
 8106712:	2200      	movs	r2, #0
 8106714:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8106718:	2303      	movs	r3, #3
 810671a:	e069      	b.n	81067f0 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 810671c:	68fb      	ldr	r3, [r7, #12]
 810671e:	681b      	ldr	r3, [r3, #0]
 8106720:	681b      	ldr	r3, [r3, #0]
 8106722:	f003 0304 	and.w	r3, r3, #4
 8106726:	2b00      	cmp	r3, #0
 8106728:	d051      	beq.n	81067ce <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810672a:	68fb      	ldr	r3, [r7, #12]
 810672c:	681b      	ldr	r3, [r3, #0]
 810672e:	69db      	ldr	r3, [r3, #28]
 8106730:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8106734:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8106738:	d149      	bne.n	81067ce <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810673a:	68fb      	ldr	r3, [r7, #12]
 810673c:	681b      	ldr	r3, [r3, #0]
 810673e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8106742:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8106744:	68fb      	ldr	r3, [r7, #12]
 8106746:	681b      	ldr	r3, [r3, #0]
 8106748:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810674a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810674c:	e853 3f00 	ldrex	r3, [r3]
 8106750:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8106752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106754:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8106758:	66fb      	str	r3, [r7, #108]	; 0x6c
 810675a:	68fb      	ldr	r3, [r7, #12]
 810675c:	681b      	ldr	r3, [r3, #0]
 810675e:	461a      	mov	r2, r3
 8106760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8106762:	637b      	str	r3, [r7, #52]	; 0x34
 8106764:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106766:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8106768:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810676a:	e841 2300 	strex	r3, r2, [r1]
 810676e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8106770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106772:	2b00      	cmp	r3, #0
 8106774:	d1e6      	bne.n	8106744 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8106776:	68fb      	ldr	r3, [r7, #12]
 8106778:	681b      	ldr	r3, [r3, #0]
 810677a:	3308      	adds	r3, #8
 810677c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810677e:	697b      	ldr	r3, [r7, #20]
 8106780:	e853 3f00 	ldrex	r3, [r3]
 8106784:	613b      	str	r3, [r7, #16]
   return(result);
 8106786:	693b      	ldr	r3, [r7, #16]
 8106788:	f023 0301 	bic.w	r3, r3, #1
 810678c:	66bb      	str	r3, [r7, #104]	; 0x68
 810678e:	68fb      	ldr	r3, [r7, #12]
 8106790:	681b      	ldr	r3, [r3, #0]
 8106792:	3308      	adds	r3, #8
 8106794:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8106796:	623a      	str	r2, [r7, #32]
 8106798:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810679a:	69f9      	ldr	r1, [r7, #28]
 810679c:	6a3a      	ldr	r2, [r7, #32]
 810679e:	e841 2300 	strex	r3, r2, [r1]
 81067a2:	61bb      	str	r3, [r7, #24]
   return(result);
 81067a4:	69bb      	ldr	r3, [r7, #24]
 81067a6:	2b00      	cmp	r3, #0
 81067a8:	d1e5      	bne.n	8106776 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 81067aa:	68fb      	ldr	r3, [r7, #12]
 81067ac:	2220      	movs	r2, #32
 81067ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 81067b2:	68fb      	ldr	r3, [r7, #12]
 81067b4:	2220      	movs	r2, #32
 81067b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 81067ba:	68fb      	ldr	r3, [r7, #12]
 81067bc:	2220      	movs	r2, #32
 81067be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 81067c2:	68fb      	ldr	r3, [r7, #12]
 81067c4:	2200      	movs	r2, #0
 81067c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 81067ca:	2303      	movs	r3, #3
 81067cc:	e010      	b.n	81067f0 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81067ce:	68fb      	ldr	r3, [r7, #12]
 81067d0:	681b      	ldr	r3, [r3, #0]
 81067d2:	69da      	ldr	r2, [r3, #28]
 81067d4:	68bb      	ldr	r3, [r7, #8]
 81067d6:	4013      	ands	r3, r2
 81067d8:	68ba      	ldr	r2, [r7, #8]
 81067da:	429a      	cmp	r2, r3
 81067dc:	bf0c      	ite	eq
 81067de:	2301      	moveq	r3, #1
 81067e0:	2300      	movne	r3, #0
 81067e2:	b2db      	uxtb	r3, r3
 81067e4:	461a      	mov	r2, r3
 81067e6:	79fb      	ldrb	r3, [r7, #7]
 81067e8:	429a      	cmp	r2, r3
 81067ea:	f43f af46 	beq.w	810667a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 81067ee:	2300      	movs	r3, #0
}
 81067f0:	4618      	mov	r0, r3
 81067f2:	3770      	adds	r7, #112	; 0x70
 81067f4:	46bd      	mov	sp, r7
 81067f6:	bd80      	pop	{r7, pc}

081067f8 <__errno>:
 81067f8:	4b01      	ldr	r3, [pc, #4]	; (8106800 <__errno+0x8>)
 81067fa:	6818      	ldr	r0, [r3, #0]
 81067fc:	4770      	bx	lr
 81067fe:	bf00      	nop
 8106800:	10000010 	.word	0x10000010

08106804 <__libc_init_array>:
 8106804:	b570      	push	{r4, r5, r6, lr}
 8106806:	4d0d      	ldr	r5, [pc, #52]	; (810683c <__libc_init_array+0x38>)
 8106808:	4c0d      	ldr	r4, [pc, #52]	; (8106840 <__libc_init_array+0x3c>)
 810680a:	1b64      	subs	r4, r4, r5
 810680c:	10a4      	asrs	r4, r4, #2
 810680e:	2600      	movs	r6, #0
 8106810:	42a6      	cmp	r6, r4
 8106812:	d109      	bne.n	8106828 <__libc_init_array+0x24>
 8106814:	4d0b      	ldr	r5, [pc, #44]	; (8106844 <__libc_init_array+0x40>)
 8106816:	4c0c      	ldr	r4, [pc, #48]	; (8106848 <__libc_init_array+0x44>)
 8106818:	f000 fc8e 	bl	8107138 <_init>
 810681c:	1b64      	subs	r4, r4, r5
 810681e:	10a4      	asrs	r4, r4, #2
 8106820:	2600      	movs	r6, #0
 8106822:	42a6      	cmp	r6, r4
 8106824:	d105      	bne.n	8106832 <__libc_init_array+0x2e>
 8106826:	bd70      	pop	{r4, r5, r6, pc}
 8106828:	f855 3b04 	ldr.w	r3, [r5], #4
 810682c:	4798      	blx	r3
 810682e:	3601      	adds	r6, #1
 8106830:	e7ee      	b.n	8106810 <__libc_init_array+0xc>
 8106832:	f855 3b04 	ldr.w	r3, [r5], #4
 8106836:	4798      	blx	r3
 8106838:	3601      	adds	r6, #1
 810683a:	e7f2      	b.n	8106822 <__libc_init_array+0x1e>
 810683c:	0810725c 	.word	0x0810725c
 8106840:	0810725c 	.word	0x0810725c
 8106844:	0810725c 	.word	0x0810725c
 8106848:	08107260 	.word	0x08107260

0810684c <memset>:
 810684c:	4402      	add	r2, r0
 810684e:	4603      	mov	r3, r0
 8106850:	4293      	cmp	r3, r2
 8106852:	d100      	bne.n	8106856 <memset+0xa>
 8106854:	4770      	bx	lr
 8106856:	f803 1b01 	strb.w	r1, [r3], #1
 810685a:	e7f9      	b.n	8106850 <memset+0x4>

0810685c <siprintf>:
 810685c:	b40e      	push	{r1, r2, r3}
 810685e:	b500      	push	{lr}
 8106860:	b09c      	sub	sp, #112	; 0x70
 8106862:	ab1d      	add	r3, sp, #116	; 0x74
 8106864:	9002      	str	r0, [sp, #8]
 8106866:	9006      	str	r0, [sp, #24]
 8106868:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 810686c:	4809      	ldr	r0, [pc, #36]	; (8106894 <siprintf+0x38>)
 810686e:	9107      	str	r1, [sp, #28]
 8106870:	9104      	str	r1, [sp, #16]
 8106872:	4909      	ldr	r1, [pc, #36]	; (8106898 <siprintf+0x3c>)
 8106874:	f853 2b04 	ldr.w	r2, [r3], #4
 8106878:	9105      	str	r1, [sp, #20]
 810687a:	6800      	ldr	r0, [r0, #0]
 810687c:	9301      	str	r3, [sp, #4]
 810687e:	a902      	add	r1, sp, #8
 8106880:	f000 f868 	bl	8106954 <_svfiprintf_r>
 8106884:	9b02      	ldr	r3, [sp, #8]
 8106886:	2200      	movs	r2, #0
 8106888:	701a      	strb	r2, [r3, #0]
 810688a:	b01c      	add	sp, #112	; 0x70
 810688c:	f85d eb04 	ldr.w	lr, [sp], #4
 8106890:	b003      	add	sp, #12
 8106892:	4770      	bx	lr
 8106894:	10000010 	.word	0x10000010
 8106898:	ffff0208 	.word	0xffff0208

0810689c <__ssputs_r>:
 810689c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81068a0:	688e      	ldr	r6, [r1, #8]
 81068a2:	429e      	cmp	r6, r3
 81068a4:	4682      	mov	sl, r0
 81068a6:	460c      	mov	r4, r1
 81068a8:	4690      	mov	r8, r2
 81068aa:	461f      	mov	r7, r3
 81068ac:	d838      	bhi.n	8106920 <__ssputs_r+0x84>
 81068ae:	898a      	ldrh	r2, [r1, #12]
 81068b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 81068b4:	d032      	beq.n	810691c <__ssputs_r+0x80>
 81068b6:	6825      	ldr	r5, [r4, #0]
 81068b8:	6909      	ldr	r1, [r1, #16]
 81068ba:	eba5 0901 	sub.w	r9, r5, r1
 81068be:	6965      	ldr	r5, [r4, #20]
 81068c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 81068c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 81068c8:	3301      	adds	r3, #1
 81068ca:	444b      	add	r3, r9
 81068cc:	106d      	asrs	r5, r5, #1
 81068ce:	429d      	cmp	r5, r3
 81068d0:	bf38      	it	cc
 81068d2:	461d      	movcc	r5, r3
 81068d4:	0553      	lsls	r3, r2, #21
 81068d6:	d531      	bpl.n	810693c <__ssputs_r+0xa0>
 81068d8:	4629      	mov	r1, r5
 81068da:	f000 fb63 	bl	8106fa4 <_malloc_r>
 81068de:	4606      	mov	r6, r0
 81068e0:	b950      	cbnz	r0, 81068f8 <__ssputs_r+0x5c>
 81068e2:	230c      	movs	r3, #12
 81068e4:	f8ca 3000 	str.w	r3, [sl]
 81068e8:	89a3      	ldrh	r3, [r4, #12]
 81068ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81068ee:	81a3      	strh	r3, [r4, #12]
 81068f0:	f04f 30ff 	mov.w	r0, #4294967295
 81068f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81068f8:	6921      	ldr	r1, [r4, #16]
 81068fa:	464a      	mov	r2, r9
 81068fc:	f000 fabe 	bl	8106e7c <memcpy>
 8106900:	89a3      	ldrh	r3, [r4, #12]
 8106902:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8106906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810690a:	81a3      	strh	r3, [r4, #12]
 810690c:	6126      	str	r6, [r4, #16]
 810690e:	6165      	str	r5, [r4, #20]
 8106910:	444e      	add	r6, r9
 8106912:	eba5 0509 	sub.w	r5, r5, r9
 8106916:	6026      	str	r6, [r4, #0]
 8106918:	60a5      	str	r5, [r4, #8]
 810691a:	463e      	mov	r6, r7
 810691c:	42be      	cmp	r6, r7
 810691e:	d900      	bls.n	8106922 <__ssputs_r+0x86>
 8106920:	463e      	mov	r6, r7
 8106922:	6820      	ldr	r0, [r4, #0]
 8106924:	4632      	mov	r2, r6
 8106926:	4641      	mov	r1, r8
 8106928:	f000 fab6 	bl	8106e98 <memmove>
 810692c:	68a3      	ldr	r3, [r4, #8]
 810692e:	1b9b      	subs	r3, r3, r6
 8106930:	60a3      	str	r3, [r4, #8]
 8106932:	6823      	ldr	r3, [r4, #0]
 8106934:	4433      	add	r3, r6
 8106936:	6023      	str	r3, [r4, #0]
 8106938:	2000      	movs	r0, #0
 810693a:	e7db      	b.n	81068f4 <__ssputs_r+0x58>
 810693c:	462a      	mov	r2, r5
 810693e:	f000 fba5 	bl	810708c <_realloc_r>
 8106942:	4606      	mov	r6, r0
 8106944:	2800      	cmp	r0, #0
 8106946:	d1e1      	bne.n	810690c <__ssputs_r+0x70>
 8106948:	6921      	ldr	r1, [r4, #16]
 810694a:	4650      	mov	r0, sl
 810694c:	f000 fabe 	bl	8106ecc <_free_r>
 8106950:	e7c7      	b.n	81068e2 <__ssputs_r+0x46>
	...

08106954 <_svfiprintf_r>:
 8106954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8106958:	4698      	mov	r8, r3
 810695a:	898b      	ldrh	r3, [r1, #12]
 810695c:	061b      	lsls	r3, r3, #24
 810695e:	b09d      	sub	sp, #116	; 0x74
 8106960:	4607      	mov	r7, r0
 8106962:	460d      	mov	r5, r1
 8106964:	4614      	mov	r4, r2
 8106966:	d50e      	bpl.n	8106986 <_svfiprintf_r+0x32>
 8106968:	690b      	ldr	r3, [r1, #16]
 810696a:	b963      	cbnz	r3, 8106986 <_svfiprintf_r+0x32>
 810696c:	2140      	movs	r1, #64	; 0x40
 810696e:	f000 fb19 	bl	8106fa4 <_malloc_r>
 8106972:	6028      	str	r0, [r5, #0]
 8106974:	6128      	str	r0, [r5, #16]
 8106976:	b920      	cbnz	r0, 8106982 <_svfiprintf_r+0x2e>
 8106978:	230c      	movs	r3, #12
 810697a:	603b      	str	r3, [r7, #0]
 810697c:	f04f 30ff 	mov.w	r0, #4294967295
 8106980:	e0d1      	b.n	8106b26 <_svfiprintf_r+0x1d2>
 8106982:	2340      	movs	r3, #64	; 0x40
 8106984:	616b      	str	r3, [r5, #20]
 8106986:	2300      	movs	r3, #0
 8106988:	9309      	str	r3, [sp, #36]	; 0x24
 810698a:	2320      	movs	r3, #32
 810698c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8106990:	f8cd 800c 	str.w	r8, [sp, #12]
 8106994:	2330      	movs	r3, #48	; 0x30
 8106996:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8106b40 <_svfiprintf_r+0x1ec>
 810699a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810699e:	f04f 0901 	mov.w	r9, #1
 81069a2:	4623      	mov	r3, r4
 81069a4:	469a      	mov	sl, r3
 81069a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 81069aa:	b10a      	cbz	r2, 81069b0 <_svfiprintf_r+0x5c>
 81069ac:	2a25      	cmp	r2, #37	; 0x25
 81069ae:	d1f9      	bne.n	81069a4 <_svfiprintf_r+0x50>
 81069b0:	ebba 0b04 	subs.w	fp, sl, r4
 81069b4:	d00b      	beq.n	81069ce <_svfiprintf_r+0x7a>
 81069b6:	465b      	mov	r3, fp
 81069b8:	4622      	mov	r2, r4
 81069ba:	4629      	mov	r1, r5
 81069bc:	4638      	mov	r0, r7
 81069be:	f7ff ff6d 	bl	810689c <__ssputs_r>
 81069c2:	3001      	adds	r0, #1
 81069c4:	f000 80aa 	beq.w	8106b1c <_svfiprintf_r+0x1c8>
 81069c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 81069ca:	445a      	add	r2, fp
 81069cc:	9209      	str	r2, [sp, #36]	; 0x24
 81069ce:	f89a 3000 	ldrb.w	r3, [sl]
 81069d2:	2b00      	cmp	r3, #0
 81069d4:	f000 80a2 	beq.w	8106b1c <_svfiprintf_r+0x1c8>
 81069d8:	2300      	movs	r3, #0
 81069da:	f04f 32ff 	mov.w	r2, #4294967295
 81069de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 81069e2:	f10a 0a01 	add.w	sl, sl, #1
 81069e6:	9304      	str	r3, [sp, #16]
 81069e8:	9307      	str	r3, [sp, #28]
 81069ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 81069ee:	931a      	str	r3, [sp, #104]	; 0x68
 81069f0:	4654      	mov	r4, sl
 81069f2:	2205      	movs	r2, #5
 81069f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 81069f8:	4851      	ldr	r0, [pc, #324]	; (8106b40 <_svfiprintf_r+0x1ec>)
 81069fa:	f7f9 fc79 	bl	81002f0 <memchr>
 81069fe:	9a04      	ldr	r2, [sp, #16]
 8106a00:	b9d8      	cbnz	r0, 8106a3a <_svfiprintf_r+0xe6>
 8106a02:	06d0      	lsls	r0, r2, #27
 8106a04:	bf44      	itt	mi
 8106a06:	2320      	movmi	r3, #32
 8106a08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8106a0c:	0711      	lsls	r1, r2, #28
 8106a0e:	bf44      	itt	mi
 8106a10:	232b      	movmi	r3, #43	; 0x2b
 8106a12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8106a16:	f89a 3000 	ldrb.w	r3, [sl]
 8106a1a:	2b2a      	cmp	r3, #42	; 0x2a
 8106a1c:	d015      	beq.n	8106a4a <_svfiprintf_r+0xf6>
 8106a1e:	9a07      	ldr	r2, [sp, #28]
 8106a20:	4654      	mov	r4, sl
 8106a22:	2000      	movs	r0, #0
 8106a24:	f04f 0c0a 	mov.w	ip, #10
 8106a28:	4621      	mov	r1, r4
 8106a2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8106a2e:	3b30      	subs	r3, #48	; 0x30
 8106a30:	2b09      	cmp	r3, #9
 8106a32:	d94e      	bls.n	8106ad2 <_svfiprintf_r+0x17e>
 8106a34:	b1b0      	cbz	r0, 8106a64 <_svfiprintf_r+0x110>
 8106a36:	9207      	str	r2, [sp, #28]
 8106a38:	e014      	b.n	8106a64 <_svfiprintf_r+0x110>
 8106a3a:	eba0 0308 	sub.w	r3, r0, r8
 8106a3e:	fa09 f303 	lsl.w	r3, r9, r3
 8106a42:	4313      	orrs	r3, r2
 8106a44:	9304      	str	r3, [sp, #16]
 8106a46:	46a2      	mov	sl, r4
 8106a48:	e7d2      	b.n	81069f0 <_svfiprintf_r+0x9c>
 8106a4a:	9b03      	ldr	r3, [sp, #12]
 8106a4c:	1d19      	adds	r1, r3, #4
 8106a4e:	681b      	ldr	r3, [r3, #0]
 8106a50:	9103      	str	r1, [sp, #12]
 8106a52:	2b00      	cmp	r3, #0
 8106a54:	bfbb      	ittet	lt
 8106a56:	425b      	neglt	r3, r3
 8106a58:	f042 0202 	orrlt.w	r2, r2, #2
 8106a5c:	9307      	strge	r3, [sp, #28]
 8106a5e:	9307      	strlt	r3, [sp, #28]
 8106a60:	bfb8      	it	lt
 8106a62:	9204      	strlt	r2, [sp, #16]
 8106a64:	7823      	ldrb	r3, [r4, #0]
 8106a66:	2b2e      	cmp	r3, #46	; 0x2e
 8106a68:	d10c      	bne.n	8106a84 <_svfiprintf_r+0x130>
 8106a6a:	7863      	ldrb	r3, [r4, #1]
 8106a6c:	2b2a      	cmp	r3, #42	; 0x2a
 8106a6e:	d135      	bne.n	8106adc <_svfiprintf_r+0x188>
 8106a70:	9b03      	ldr	r3, [sp, #12]
 8106a72:	1d1a      	adds	r2, r3, #4
 8106a74:	681b      	ldr	r3, [r3, #0]
 8106a76:	9203      	str	r2, [sp, #12]
 8106a78:	2b00      	cmp	r3, #0
 8106a7a:	bfb8      	it	lt
 8106a7c:	f04f 33ff 	movlt.w	r3, #4294967295
 8106a80:	3402      	adds	r4, #2
 8106a82:	9305      	str	r3, [sp, #20]
 8106a84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8106b50 <_svfiprintf_r+0x1fc>
 8106a88:	7821      	ldrb	r1, [r4, #0]
 8106a8a:	2203      	movs	r2, #3
 8106a8c:	4650      	mov	r0, sl
 8106a8e:	f7f9 fc2f 	bl	81002f0 <memchr>
 8106a92:	b140      	cbz	r0, 8106aa6 <_svfiprintf_r+0x152>
 8106a94:	2340      	movs	r3, #64	; 0x40
 8106a96:	eba0 000a 	sub.w	r0, r0, sl
 8106a9a:	fa03 f000 	lsl.w	r0, r3, r0
 8106a9e:	9b04      	ldr	r3, [sp, #16]
 8106aa0:	4303      	orrs	r3, r0
 8106aa2:	3401      	adds	r4, #1
 8106aa4:	9304      	str	r3, [sp, #16]
 8106aa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8106aaa:	4826      	ldr	r0, [pc, #152]	; (8106b44 <_svfiprintf_r+0x1f0>)
 8106aac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8106ab0:	2206      	movs	r2, #6
 8106ab2:	f7f9 fc1d 	bl	81002f0 <memchr>
 8106ab6:	2800      	cmp	r0, #0
 8106ab8:	d038      	beq.n	8106b2c <_svfiprintf_r+0x1d8>
 8106aba:	4b23      	ldr	r3, [pc, #140]	; (8106b48 <_svfiprintf_r+0x1f4>)
 8106abc:	bb1b      	cbnz	r3, 8106b06 <_svfiprintf_r+0x1b2>
 8106abe:	9b03      	ldr	r3, [sp, #12]
 8106ac0:	3307      	adds	r3, #7
 8106ac2:	f023 0307 	bic.w	r3, r3, #7
 8106ac6:	3308      	adds	r3, #8
 8106ac8:	9303      	str	r3, [sp, #12]
 8106aca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8106acc:	4433      	add	r3, r6
 8106ace:	9309      	str	r3, [sp, #36]	; 0x24
 8106ad0:	e767      	b.n	81069a2 <_svfiprintf_r+0x4e>
 8106ad2:	fb0c 3202 	mla	r2, ip, r2, r3
 8106ad6:	460c      	mov	r4, r1
 8106ad8:	2001      	movs	r0, #1
 8106ada:	e7a5      	b.n	8106a28 <_svfiprintf_r+0xd4>
 8106adc:	2300      	movs	r3, #0
 8106ade:	3401      	adds	r4, #1
 8106ae0:	9305      	str	r3, [sp, #20]
 8106ae2:	4619      	mov	r1, r3
 8106ae4:	f04f 0c0a 	mov.w	ip, #10
 8106ae8:	4620      	mov	r0, r4
 8106aea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8106aee:	3a30      	subs	r2, #48	; 0x30
 8106af0:	2a09      	cmp	r2, #9
 8106af2:	d903      	bls.n	8106afc <_svfiprintf_r+0x1a8>
 8106af4:	2b00      	cmp	r3, #0
 8106af6:	d0c5      	beq.n	8106a84 <_svfiprintf_r+0x130>
 8106af8:	9105      	str	r1, [sp, #20]
 8106afa:	e7c3      	b.n	8106a84 <_svfiprintf_r+0x130>
 8106afc:	fb0c 2101 	mla	r1, ip, r1, r2
 8106b00:	4604      	mov	r4, r0
 8106b02:	2301      	movs	r3, #1
 8106b04:	e7f0      	b.n	8106ae8 <_svfiprintf_r+0x194>
 8106b06:	ab03      	add	r3, sp, #12
 8106b08:	9300      	str	r3, [sp, #0]
 8106b0a:	462a      	mov	r2, r5
 8106b0c:	4b0f      	ldr	r3, [pc, #60]	; (8106b4c <_svfiprintf_r+0x1f8>)
 8106b0e:	a904      	add	r1, sp, #16
 8106b10:	4638      	mov	r0, r7
 8106b12:	f3af 8000 	nop.w
 8106b16:	1c42      	adds	r2, r0, #1
 8106b18:	4606      	mov	r6, r0
 8106b1a:	d1d6      	bne.n	8106aca <_svfiprintf_r+0x176>
 8106b1c:	89ab      	ldrh	r3, [r5, #12]
 8106b1e:	065b      	lsls	r3, r3, #25
 8106b20:	f53f af2c 	bmi.w	810697c <_svfiprintf_r+0x28>
 8106b24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8106b26:	b01d      	add	sp, #116	; 0x74
 8106b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8106b2c:	ab03      	add	r3, sp, #12
 8106b2e:	9300      	str	r3, [sp, #0]
 8106b30:	462a      	mov	r2, r5
 8106b32:	4b06      	ldr	r3, [pc, #24]	; (8106b4c <_svfiprintf_r+0x1f8>)
 8106b34:	a904      	add	r1, sp, #16
 8106b36:	4638      	mov	r0, r7
 8106b38:	f000 f87a 	bl	8106c30 <_printf_i>
 8106b3c:	e7eb      	b.n	8106b16 <_svfiprintf_r+0x1c2>
 8106b3e:	bf00      	nop
 8106b40:	08107228 	.word	0x08107228
 8106b44:	08107232 	.word	0x08107232
 8106b48:	00000000 	.word	0x00000000
 8106b4c:	0810689d 	.word	0x0810689d
 8106b50:	0810722e 	.word	0x0810722e

08106b54 <_printf_common>:
 8106b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8106b58:	4616      	mov	r6, r2
 8106b5a:	4699      	mov	r9, r3
 8106b5c:	688a      	ldr	r2, [r1, #8]
 8106b5e:	690b      	ldr	r3, [r1, #16]
 8106b60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8106b64:	4293      	cmp	r3, r2
 8106b66:	bfb8      	it	lt
 8106b68:	4613      	movlt	r3, r2
 8106b6a:	6033      	str	r3, [r6, #0]
 8106b6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8106b70:	4607      	mov	r7, r0
 8106b72:	460c      	mov	r4, r1
 8106b74:	b10a      	cbz	r2, 8106b7a <_printf_common+0x26>
 8106b76:	3301      	adds	r3, #1
 8106b78:	6033      	str	r3, [r6, #0]
 8106b7a:	6823      	ldr	r3, [r4, #0]
 8106b7c:	0699      	lsls	r1, r3, #26
 8106b7e:	bf42      	ittt	mi
 8106b80:	6833      	ldrmi	r3, [r6, #0]
 8106b82:	3302      	addmi	r3, #2
 8106b84:	6033      	strmi	r3, [r6, #0]
 8106b86:	6825      	ldr	r5, [r4, #0]
 8106b88:	f015 0506 	ands.w	r5, r5, #6
 8106b8c:	d106      	bne.n	8106b9c <_printf_common+0x48>
 8106b8e:	f104 0a19 	add.w	sl, r4, #25
 8106b92:	68e3      	ldr	r3, [r4, #12]
 8106b94:	6832      	ldr	r2, [r6, #0]
 8106b96:	1a9b      	subs	r3, r3, r2
 8106b98:	42ab      	cmp	r3, r5
 8106b9a:	dc26      	bgt.n	8106bea <_printf_common+0x96>
 8106b9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8106ba0:	1e13      	subs	r3, r2, #0
 8106ba2:	6822      	ldr	r2, [r4, #0]
 8106ba4:	bf18      	it	ne
 8106ba6:	2301      	movne	r3, #1
 8106ba8:	0692      	lsls	r2, r2, #26
 8106baa:	d42b      	bmi.n	8106c04 <_printf_common+0xb0>
 8106bac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8106bb0:	4649      	mov	r1, r9
 8106bb2:	4638      	mov	r0, r7
 8106bb4:	47c0      	blx	r8
 8106bb6:	3001      	adds	r0, #1
 8106bb8:	d01e      	beq.n	8106bf8 <_printf_common+0xa4>
 8106bba:	6823      	ldr	r3, [r4, #0]
 8106bbc:	68e5      	ldr	r5, [r4, #12]
 8106bbe:	6832      	ldr	r2, [r6, #0]
 8106bc0:	f003 0306 	and.w	r3, r3, #6
 8106bc4:	2b04      	cmp	r3, #4
 8106bc6:	bf08      	it	eq
 8106bc8:	1aad      	subeq	r5, r5, r2
 8106bca:	68a3      	ldr	r3, [r4, #8]
 8106bcc:	6922      	ldr	r2, [r4, #16]
 8106bce:	bf0c      	ite	eq
 8106bd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8106bd4:	2500      	movne	r5, #0
 8106bd6:	4293      	cmp	r3, r2
 8106bd8:	bfc4      	itt	gt
 8106bda:	1a9b      	subgt	r3, r3, r2
 8106bdc:	18ed      	addgt	r5, r5, r3
 8106bde:	2600      	movs	r6, #0
 8106be0:	341a      	adds	r4, #26
 8106be2:	42b5      	cmp	r5, r6
 8106be4:	d11a      	bne.n	8106c1c <_printf_common+0xc8>
 8106be6:	2000      	movs	r0, #0
 8106be8:	e008      	b.n	8106bfc <_printf_common+0xa8>
 8106bea:	2301      	movs	r3, #1
 8106bec:	4652      	mov	r2, sl
 8106bee:	4649      	mov	r1, r9
 8106bf0:	4638      	mov	r0, r7
 8106bf2:	47c0      	blx	r8
 8106bf4:	3001      	adds	r0, #1
 8106bf6:	d103      	bne.n	8106c00 <_printf_common+0xac>
 8106bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8106bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8106c00:	3501      	adds	r5, #1
 8106c02:	e7c6      	b.n	8106b92 <_printf_common+0x3e>
 8106c04:	18e1      	adds	r1, r4, r3
 8106c06:	1c5a      	adds	r2, r3, #1
 8106c08:	2030      	movs	r0, #48	; 0x30
 8106c0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8106c0e:	4422      	add	r2, r4
 8106c10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8106c14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8106c18:	3302      	adds	r3, #2
 8106c1a:	e7c7      	b.n	8106bac <_printf_common+0x58>
 8106c1c:	2301      	movs	r3, #1
 8106c1e:	4622      	mov	r2, r4
 8106c20:	4649      	mov	r1, r9
 8106c22:	4638      	mov	r0, r7
 8106c24:	47c0      	blx	r8
 8106c26:	3001      	adds	r0, #1
 8106c28:	d0e6      	beq.n	8106bf8 <_printf_common+0xa4>
 8106c2a:	3601      	adds	r6, #1
 8106c2c:	e7d9      	b.n	8106be2 <_printf_common+0x8e>
	...

08106c30 <_printf_i>:
 8106c30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8106c34:	7e0f      	ldrb	r7, [r1, #24]
 8106c36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8106c38:	2f78      	cmp	r7, #120	; 0x78
 8106c3a:	4691      	mov	r9, r2
 8106c3c:	4680      	mov	r8, r0
 8106c3e:	460c      	mov	r4, r1
 8106c40:	469a      	mov	sl, r3
 8106c42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8106c46:	d807      	bhi.n	8106c58 <_printf_i+0x28>
 8106c48:	2f62      	cmp	r7, #98	; 0x62
 8106c4a:	d80a      	bhi.n	8106c62 <_printf_i+0x32>
 8106c4c:	2f00      	cmp	r7, #0
 8106c4e:	f000 80d8 	beq.w	8106e02 <_printf_i+0x1d2>
 8106c52:	2f58      	cmp	r7, #88	; 0x58
 8106c54:	f000 80a3 	beq.w	8106d9e <_printf_i+0x16e>
 8106c58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8106c5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8106c60:	e03a      	b.n	8106cd8 <_printf_i+0xa8>
 8106c62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8106c66:	2b15      	cmp	r3, #21
 8106c68:	d8f6      	bhi.n	8106c58 <_printf_i+0x28>
 8106c6a:	a101      	add	r1, pc, #4	; (adr r1, 8106c70 <_printf_i+0x40>)
 8106c6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8106c70:	08106cc9 	.word	0x08106cc9
 8106c74:	08106cdd 	.word	0x08106cdd
 8106c78:	08106c59 	.word	0x08106c59
 8106c7c:	08106c59 	.word	0x08106c59
 8106c80:	08106c59 	.word	0x08106c59
 8106c84:	08106c59 	.word	0x08106c59
 8106c88:	08106cdd 	.word	0x08106cdd
 8106c8c:	08106c59 	.word	0x08106c59
 8106c90:	08106c59 	.word	0x08106c59
 8106c94:	08106c59 	.word	0x08106c59
 8106c98:	08106c59 	.word	0x08106c59
 8106c9c:	08106de9 	.word	0x08106de9
 8106ca0:	08106d0d 	.word	0x08106d0d
 8106ca4:	08106dcb 	.word	0x08106dcb
 8106ca8:	08106c59 	.word	0x08106c59
 8106cac:	08106c59 	.word	0x08106c59
 8106cb0:	08106e0b 	.word	0x08106e0b
 8106cb4:	08106c59 	.word	0x08106c59
 8106cb8:	08106d0d 	.word	0x08106d0d
 8106cbc:	08106c59 	.word	0x08106c59
 8106cc0:	08106c59 	.word	0x08106c59
 8106cc4:	08106dd3 	.word	0x08106dd3
 8106cc8:	682b      	ldr	r3, [r5, #0]
 8106cca:	1d1a      	adds	r2, r3, #4
 8106ccc:	681b      	ldr	r3, [r3, #0]
 8106cce:	602a      	str	r2, [r5, #0]
 8106cd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8106cd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8106cd8:	2301      	movs	r3, #1
 8106cda:	e0a3      	b.n	8106e24 <_printf_i+0x1f4>
 8106cdc:	6820      	ldr	r0, [r4, #0]
 8106cde:	6829      	ldr	r1, [r5, #0]
 8106ce0:	0606      	lsls	r6, r0, #24
 8106ce2:	f101 0304 	add.w	r3, r1, #4
 8106ce6:	d50a      	bpl.n	8106cfe <_printf_i+0xce>
 8106ce8:	680e      	ldr	r6, [r1, #0]
 8106cea:	602b      	str	r3, [r5, #0]
 8106cec:	2e00      	cmp	r6, #0
 8106cee:	da03      	bge.n	8106cf8 <_printf_i+0xc8>
 8106cf0:	232d      	movs	r3, #45	; 0x2d
 8106cf2:	4276      	negs	r6, r6
 8106cf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8106cf8:	485e      	ldr	r0, [pc, #376]	; (8106e74 <_printf_i+0x244>)
 8106cfa:	230a      	movs	r3, #10
 8106cfc:	e019      	b.n	8106d32 <_printf_i+0x102>
 8106cfe:	680e      	ldr	r6, [r1, #0]
 8106d00:	602b      	str	r3, [r5, #0]
 8106d02:	f010 0f40 	tst.w	r0, #64	; 0x40
 8106d06:	bf18      	it	ne
 8106d08:	b236      	sxthne	r6, r6
 8106d0a:	e7ef      	b.n	8106cec <_printf_i+0xbc>
 8106d0c:	682b      	ldr	r3, [r5, #0]
 8106d0e:	6820      	ldr	r0, [r4, #0]
 8106d10:	1d19      	adds	r1, r3, #4
 8106d12:	6029      	str	r1, [r5, #0]
 8106d14:	0601      	lsls	r1, r0, #24
 8106d16:	d501      	bpl.n	8106d1c <_printf_i+0xec>
 8106d18:	681e      	ldr	r6, [r3, #0]
 8106d1a:	e002      	b.n	8106d22 <_printf_i+0xf2>
 8106d1c:	0646      	lsls	r6, r0, #25
 8106d1e:	d5fb      	bpl.n	8106d18 <_printf_i+0xe8>
 8106d20:	881e      	ldrh	r6, [r3, #0]
 8106d22:	4854      	ldr	r0, [pc, #336]	; (8106e74 <_printf_i+0x244>)
 8106d24:	2f6f      	cmp	r7, #111	; 0x6f
 8106d26:	bf0c      	ite	eq
 8106d28:	2308      	moveq	r3, #8
 8106d2a:	230a      	movne	r3, #10
 8106d2c:	2100      	movs	r1, #0
 8106d2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8106d32:	6865      	ldr	r5, [r4, #4]
 8106d34:	60a5      	str	r5, [r4, #8]
 8106d36:	2d00      	cmp	r5, #0
 8106d38:	bfa2      	ittt	ge
 8106d3a:	6821      	ldrge	r1, [r4, #0]
 8106d3c:	f021 0104 	bicge.w	r1, r1, #4
 8106d40:	6021      	strge	r1, [r4, #0]
 8106d42:	b90e      	cbnz	r6, 8106d48 <_printf_i+0x118>
 8106d44:	2d00      	cmp	r5, #0
 8106d46:	d04d      	beq.n	8106de4 <_printf_i+0x1b4>
 8106d48:	4615      	mov	r5, r2
 8106d4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8106d4e:	fb03 6711 	mls	r7, r3, r1, r6
 8106d52:	5dc7      	ldrb	r7, [r0, r7]
 8106d54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8106d58:	4637      	mov	r7, r6
 8106d5a:	42bb      	cmp	r3, r7
 8106d5c:	460e      	mov	r6, r1
 8106d5e:	d9f4      	bls.n	8106d4a <_printf_i+0x11a>
 8106d60:	2b08      	cmp	r3, #8
 8106d62:	d10b      	bne.n	8106d7c <_printf_i+0x14c>
 8106d64:	6823      	ldr	r3, [r4, #0]
 8106d66:	07de      	lsls	r6, r3, #31
 8106d68:	d508      	bpl.n	8106d7c <_printf_i+0x14c>
 8106d6a:	6923      	ldr	r3, [r4, #16]
 8106d6c:	6861      	ldr	r1, [r4, #4]
 8106d6e:	4299      	cmp	r1, r3
 8106d70:	bfde      	ittt	le
 8106d72:	2330      	movle	r3, #48	; 0x30
 8106d74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8106d78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8106d7c:	1b52      	subs	r2, r2, r5
 8106d7e:	6122      	str	r2, [r4, #16]
 8106d80:	f8cd a000 	str.w	sl, [sp]
 8106d84:	464b      	mov	r3, r9
 8106d86:	aa03      	add	r2, sp, #12
 8106d88:	4621      	mov	r1, r4
 8106d8a:	4640      	mov	r0, r8
 8106d8c:	f7ff fee2 	bl	8106b54 <_printf_common>
 8106d90:	3001      	adds	r0, #1
 8106d92:	d14c      	bne.n	8106e2e <_printf_i+0x1fe>
 8106d94:	f04f 30ff 	mov.w	r0, #4294967295
 8106d98:	b004      	add	sp, #16
 8106d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8106d9e:	4835      	ldr	r0, [pc, #212]	; (8106e74 <_printf_i+0x244>)
 8106da0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8106da4:	6829      	ldr	r1, [r5, #0]
 8106da6:	6823      	ldr	r3, [r4, #0]
 8106da8:	f851 6b04 	ldr.w	r6, [r1], #4
 8106dac:	6029      	str	r1, [r5, #0]
 8106dae:	061d      	lsls	r5, r3, #24
 8106db0:	d514      	bpl.n	8106ddc <_printf_i+0x1ac>
 8106db2:	07df      	lsls	r7, r3, #31
 8106db4:	bf44      	itt	mi
 8106db6:	f043 0320 	orrmi.w	r3, r3, #32
 8106dba:	6023      	strmi	r3, [r4, #0]
 8106dbc:	b91e      	cbnz	r6, 8106dc6 <_printf_i+0x196>
 8106dbe:	6823      	ldr	r3, [r4, #0]
 8106dc0:	f023 0320 	bic.w	r3, r3, #32
 8106dc4:	6023      	str	r3, [r4, #0]
 8106dc6:	2310      	movs	r3, #16
 8106dc8:	e7b0      	b.n	8106d2c <_printf_i+0xfc>
 8106dca:	6823      	ldr	r3, [r4, #0]
 8106dcc:	f043 0320 	orr.w	r3, r3, #32
 8106dd0:	6023      	str	r3, [r4, #0]
 8106dd2:	2378      	movs	r3, #120	; 0x78
 8106dd4:	4828      	ldr	r0, [pc, #160]	; (8106e78 <_printf_i+0x248>)
 8106dd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8106dda:	e7e3      	b.n	8106da4 <_printf_i+0x174>
 8106ddc:	0659      	lsls	r1, r3, #25
 8106dde:	bf48      	it	mi
 8106de0:	b2b6      	uxthmi	r6, r6
 8106de2:	e7e6      	b.n	8106db2 <_printf_i+0x182>
 8106de4:	4615      	mov	r5, r2
 8106de6:	e7bb      	b.n	8106d60 <_printf_i+0x130>
 8106de8:	682b      	ldr	r3, [r5, #0]
 8106dea:	6826      	ldr	r6, [r4, #0]
 8106dec:	6961      	ldr	r1, [r4, #20]
 8106dee:	1d18      	adds	r0, r3, #4
 8106df0:	6028      	str	r0, [r5, #0]
 8106df2:	0635      	lsls	r5, r6, #24
 8106df4:	681b      	ldr	r3, [r3, #0]
 8106df6:	d501      	bpl.n	8106dfc <_printf_i+0x1cc>
 8106df8:	6019      	str	r1, [r3, #0]
 8106dfa:	e002      	b.n	8106e02 <_printf_i+0x1d2>
 8106dfc:	0670      	lsls	r0, r6, #25
 8106dfe:	d5fb      	bpl.n	8106df8 <_printf_i+0x1c8>
 8106e00:	8019      	strh	r1, [r3, #0]
 8106e02:	2300      	movs	r3, #0
 8106e04:	6123      	str	r3, [r4, #16]
 8106e06:	4615      	mov	r5, r2
 8106e08:	e7ba      	b.n	8106d80 <_printf_i+0x150>
 8106e0a:	682b      	ldr	r3, [r5, #0]
 8106e0c:	1d1a      	adds	r2, r3, #4
 8106e0e:	602a      	str	r2, [r5, #0]
 8106e10:	681d      	ldr	r5, [r3, #0]
 8106e12:	6862      	ldr	r2, [r4, #4]
 8106e14:	2100      	movs	r1, #0
 8106e16:	4628      	mov	r0, r5
 8106e18:	f7f9 fa6a 	bl	81002f0 <memchr>
 8106e1c:	b108      	cbz	r0, 8106e22 <_printf_i+0x1f2>
 8106e1e:	1b40      	subs	r0, r0, r5
 8106e20:	6060      	str	r0, [r4, #4]
 8106e22:	6863      	ldr	r3, [r4, #4]
 8106e24:	6123      	str	r3, [r4, #16]
 8106e26:	2300      	movs	r3, #0
 8106e28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8106e2c:	e7a8      	b.n	8106d80 <_printf_i+0x150>
 8106e2e:	6923      	ldr	r3, [r4, #16]
 8106e30:	462a      	mov	r2, r5
 8106e32:	4649      	mov	r1, r9
 8106e34:	4640      	mov	r0, r8
 8106e36:	47d0      	blx	sl
 8106e38:	3001      	adds	r0, #1
 8106e3a:	d0ab      	beq.n	8106d94 <_printf_i+0x164>
 8106e3c:	6823      	ldr	r3, [r4, #0]
 8106e3e:	079b      	lsls	r3, r3, #30
 8106e40:	d413      	bmi.n	8106e6a <_printf_i+0x23a>
 8106e42:	68e0      	ldr	r0, [r4, #12]
 8106e44:	9b03      	ldr	r3, [sp, #12]
 8106e46:	4298      	cmp	r0, r3
 8106e48:	bfb8      	it	lt
 8106e4a:	4618      	movlt	r0, r3
 8106e4c:	e7a4      	b.n	8106d98 <_printf_i+0x168>
 8106e4e:	2301      	movs	r3, #1
 8106e50:	4632      	mov	r2, r6
 8106e52:	4649      	mov	r1, r9
 8106e54:	4640      	mov	r0, r8
 8106e56:	47d0      	blx	sl
 8106e58:	3001      	adds	r0, #1
 8106e5a:	d09b      	beq.n	8106d94 <_printf_i+0x164>
 8106e5c:	3501      	adds	r5, #1
 8106e5e:	68e3      	ldr	r3, [r4, #12]
 8106e60:	9903      	ldr	r1, [sp, #12]
 8106e62:	1a5b      	subs	r3, r3, r1
 8106e64:	42ab      	cmp	r3, r5
 8106e66:	dcf2      	bgt.n	8106e4e <_printf_i+0x21e>
 8106e68:	e7eb      	b.n	8106e42 <_printf_i+0x212>
 8106e6a:	2500      	movs	r5, #0
 8106e6c:	f104 0619 	add.w	r6, r4, #25
 8106e70:	e7f5      	b.n	8106e5e <_printf_i+0x22e>
 8106e72:	bf00      	nop
 8106e74:	08107239 	.word	0x08107239
 8106e78:	0810724a 	.word	0x0810724a

08106e7c <memcpy>:
 8106e7c:	440a      	add	r2, r1
 8106e7e:	4291      	cmp	r1, r2
 8106e80:	f100 33ff 	add.w	r3, r0, #4294967295
 8106e84:	d100      	bne.n	8106e88 <memcpy+0xc>
 8106e86:	4770      	bx	lr
 8106e88:	b510      	push	{r4, lr}
 8106e8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8106e8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8106e92:	4291      	cmp	r1, r2
 8106e94:	d1f9      	bne.n	8106e8a <memcpy+0xe>
 8106e96:	bd10      	pop	{r4, pc}

08106e98 <memmove>:
 8106e98:	4288      	cmp	r0, r1
 8106e9a:	b510      	push	{r4, lr}
 8106e9c:	eb01 0402 	add.w	r4, r1, r2
 8106ea0:	d902      	bls.n	8106ea8 <memmove+0x10>
 8106ea2:	4284      	cmp	r4, r0
 8106ea4:	4623      	mov	r3, r4
 8106ea6:	d807      	bhi.n	8106eb8 <memmove+0x20>
 8106ea8:	1e43      	subs	r3, r0, #1
 8106eaa:	42a1      	cmp	r1, r4
 8106eac:	d008      	beq.n	8106ec0 <memmove+0x28>
 8106eae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8106eb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8106eb6:	e7f8      	b.n	8106eaa <memmove+0x12>
 8106eb8:	4402      	add	r2, r0
 8106eba:	4601      	mov	r1, r0
 8106ebc:	428a      	cmp	r2, r1
 8106ebe:	d100      	bne.n	8106ec2 <memmove+0x2a>
 8106ec0:	bd10      	pop	{r4, pc}
 8106ec2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8106ec6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8106eca:	e7f7      	b.n	8106ebc <memmove+0x24>

08106ecc <_free_r>:
 8106ecc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8106ece:	2900      	cmp	r1, #0
 8106ed0:	d044      	beq.n	8106f5c <_free_r+0x90>
 8106ed2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8106ed6:	9001      	str	r0, [sp, #4]
 8106ed8:	2b00      	cmp	r3, #0
 8106eda:	f1a1 0404 	sub.w	r4, r1, #4
 8106ede:	bfb8      	it	lt
 8106ee0:	18e4      	addlt	r4, r4, r3
 8106ee2:	f000 f913 	bl	810710c <__malloc_lock>
 8106ee6:	4a1e      	ldr	r2, [pc, #120]	; (8106f60 <_free_r+0x94>)
 8106ee8:	9801      	ldr	r0, [sp, #4]
 8106eea:	6813      	ldr	r3, [r2, #0]
 8106eec:	b933      	cbnz	r3, 8106efc <_free_r+0x30>
 8106eee:	6063      	str	r3, [r4, #4]
 8106ef0:	6014      	str	r4, [r2, #0]
 8106ef2:	b003      	add	sp, #12
 8106ef4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8106ef8:	f000 b90e 	b.w	8107118 <__malloc_unlock>
 8106efc:	42a3      	cmp	r3, r4
 8106efe:	d908      	bls.n	8106f12 <_free_r+0x46>
 8106f00:	6825      	ldr	r5, [r4, #0]
 8106f02:	1961      	adds	r1, r4, r5
 8106f04:	428b      	cmp	r3, r1
 8106f06:	bf01      	itttt	eq
 8106f08:	6819      	ldreq	r1, [r3, #0]
 8106f0a:	685b      	ldreq	r3, [r3, #4]
 8106f0c:	1949      	addeq	r1, r1, r5
 8106f0e:	6021      	streq	r1, [r4, #0]
 8106f10:	e7ed      	b.n	8106eee <_free_r+0x22>
 8106f12:	461a      	mov	r2, r3
 8106f14:	685b      	ldr	r3, [r3, #4]
 8106f16:	b10b      	cbz	r3, 8106f1c <_free_r+0x50>
 8106f18:	42a3      	cmp	r3, r4
 8106f1a:	d9fa      	bls.n	8106f12 <_free_r+0x46>
 8106f1c:	6811      	ldr	r1, [r2, #0]
 8106f1e:	1855      	adds	r5, r2, r1
 8106f20:	42a5      	cmp	r5, r4
 8106f22:	d10b      	bne.n	8106f3c <_free_r+0x70>
 8106f24:	6824      	ldr	r4, [r4, #0]
 8106f26:	4421      	add	r1, r4
 8106f28:	1854      	adds	r4, r2, r1
 8106f2a:	42a3      	cmp	r3, r4
 8106f2c:	6011      	str	r1, [r2, #0]
 8106f2e:	d1e0      	bne.n	8106ef2 <_free_r+0x26>
 8106f30:	681c      	ldr	r4, [r3, #0]
 8106f32:	685b      	ldr	r3, [r3, #4]
 8106f34:	6053      	str	r3, [r2, #4]
 8106f36:	4421      	add	r1, r4
 8106f38:	6011      	str	r1, [r2, #0]
 8106f3a:	e7da      	b.n	8106ef2 <_free_r+0x26>
 8106f3c:	d902      	bls.n	8106f44 <_free_r+0x78>
 8106f3e:	230c      	movs	r3, #12
 8106f40:	6003      	str	r3, [r0, #0]
 8106f42:	e7d6      	b.n	8106ef2 <_free_r+0x26>
 8106f44:	6825      	ldr	r5, [r4, #0]
 8106f46:	1961      	adds	r1, r4, r5
 8106f48:	428b      	cmp	r3, r1
 8106f4a:	bf04      	itt	eq
 8106f4c:	6819      	ldreq	r1, [r3, #0]
 8106f4e:	685b      	ldreq	r3, [r3, #4]
 8106f50:	6063      	str	r3, [r4, #4]
 8106f52:	bf04      	itt	eq
 8106f54:	1949      	addeq	r1, r1, r5
 8106f56:	6021      	streq	r1, [r4, #0]
 8106f58:	6054      	str	r4, [r2, #4]
 8106f5a:	e7ca      	b.n	8106ef2 <_free_r+0x26>
 8106f5c:	b003      	add	sp, #12
 8106f5e:	bd30      	pop	{r4, r5, pc}
 8106f60:	10000478 	.word	0x10000478

08106f64 <sbrk_aligned>:
 8106f64:	b570      	push	{r4, r5, r6, lr}
 8106f66:	4e0e      	ldr	r6, [pc, #56]	; (8106fa0 <sbrk_aligned+0x3c>)
 8106f68:	460c      	mov	r4, r1
 8106f6a:	6831      	ldr	r1, [r6, #0]
 8106f6c:	4605      	mov	r5, r0
 8106f6e:	b911      	cbnz	r1, 8106f76 <sbrk_aligned+0x12>
 8106f70:	f000 f8bc 	bl	81070ec <_sbrk_r>
 8106f74:	6030      	str	r0, [r6, #0]
 8106f76:	4621      	mov	r1, r4
 8106f78:	4628      	mov	r0, r5
 8106f7a:	f000 f8b7 	bl	81070ec <_sbrk_r>
 8106f7e:	1c43      	adds	r3, r0, #1
 8106f80:	d00a      	beq.n	8106f98 <sbrk_aligned+0x34>
 8106f82:	1cc4      	adds	r4, r0, #3
 8106f84:	f024 0403 	bic.w	r4, r4, #3
 8106f88:	42a0      	cmp	r0, r4
 8106f8a:	d007      	beq.n	8106f9c <sbrk_aligned+0x38>
 8106f8c:	1a21      	subs	r1, r4, r0
 8106f8e:	4628      	mov	r0, r5
 8106f90:	f000 f8ac 	bl	81070ec <_sbrk_r>
 8106f94:	3001      	adds	r0, #1
 8106f96:	d101      	bne.n	8106f9c <sbrk_aligned+0x38>
 8106f98:	f04f 34ff 	mov.w	r4, #4294967295
 8106f9c:	4620      	mov	r0, r4
 8106f9e:	bd70      	pop	{r4, r5, r6, pc}
 8106fa0:	1000047c 	.word	0x1000047c

08106fa4 <_malloc_r>:
 8106fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8106fa8:	1ccd      	adds	r5, r1, #3
 8106faa:	f025 0503 	bic.w	r5, r5, #3
 8106fae:	3508      	adds	r5, #8
 8106fb0:	2d0c      	cmp	r5, #12
 8106fb2:	bf38      	it	cc
 8106fb4:	250c      	movcc	r5, #12
 8106fb6:	2d00      	cmp	r5, #0
 8106fb8:	4607      	mov	r7, r0
 8106fba:	db01      	blt.n	8106fc0 <_malloc_r+0x1c>
 8106fbc:	42a9      	cmp	r1, r5
 8106fbe:	d905      	bls.n	8106fcc <_malloc_r+0x28>
 8106fc0:	230c      	movs	r3, #12
 8106fc2:	603b      	str	r3, [r7, #0]
 8106fc4:	2600      	movs	r6, #0
 8106fc6:	4630      	mov	r0, r6
 8106fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8106fcc:	4e2e      	ldr	r6, [pc, #184]	; (8107088 <_malloc_r+0xe4>)
 8106fce:	f000 f89d 	bl	810710c <__malloc_lock>
 8106fd2:	6833      	ldr	r3, [r6, #0]
 8106fd4:	461c      	mov	r4, r3
 8106fd6:	bb34      	cbnz	r4, 8107026 <_malloc_r+0x82>
 8106fd8:	4629      	mov	r1, r5
 8106fda:	4638      	mov	r0, r7
 8106fdc:	f7ff ffc2 	bl	8106f64 <sbrk_aligned>
 8106fe0:	1c43      	adds	r3, r0, #1
 8106fe2:	4604      	mov	r4, r0
 8106fe4:	d14d      	bne.n	8107082 <_malloc_r+0xde>
 8106fe6:	6834      	ldr	r4, [r6, #0]
 8106fe8:	4626      	mov	r6, r4
 8106fea:	2e00      	cmp	r6, #0
 8106fec:	d140      	bne.n	8107070 <_malloc_r+0xcc>
 8106fee:	6823      	ldr	r3, [r4, #0]
 8106ff0:	4631      	mov	r1, r6
 8106ff2:	4638      	mov	r0, r7
 8106ff4:	eb04 0803 	add.w	r8, r4, r3
 8106ff8:	f000 f878 	bl	81070ec <_sbrk_r>
 8106ffc:	4580      	cmp	r8, r0
 8106ffe:	d13a      	bne.n	8107076 <_malloc_r+0xd2>
 8107000:	6821      	ldr	r1, [r4, #0]
 8107002:	3503      	adds	r5, #3
 8107004:	1a6d      	subs	r5, r5, r1
 8107006:	f025 0503 	bic.w	r5, r5, #3
 810700a:	3508      	adds	r5, #8
 810700c:	2d0c      	cmp	r5, #12
 810700e:	bf38      	it	cc
 8107010:	250c      	movcc	r5, #12
 8107012:	4629      	mov	r1, r5
 8107014:	4638      	mov	r0, r7
 8107016:	f7ff ffa5 	bl	8106f64 <sbrk_aligned>
 810701a:	3001      	adds	r0, #1
 810701c:	d02b      	beq.n	8107076 <_malloc_r+0xd2>
 810701e:	6823      	ldr	r3, [r4, #0]
 8107020:	442b      	add	r3, r5
 8107022:	6023      	str	r3, [r4, #0]
 8107024:	e00e      	b.n	8107044 <_malloc_r+0xa0>
 8107026:	6822      	ldr	r2, [r4, #0]
 8107028:	1b52      	subs	r2, r2, r5
 810702a:	d41e      	bmi.n	810706a <_malloc_r+0xc6>
 810702c:	2a0b      	cmp	r2, #11
 810702e:	d916      	bls.n	810705e <_malloc_r+0xba>
 8107030:	1961      	adds	r1, r4, r5
 8107032:	42a3      	cmp	r3, r4
 8107034:	6025      	str	r5, [r4, #0]
 8107036:	bf18      	it	ne
 8107038:	6059      	strne	r1, [r3, #4]
 810703a:	6863      	ldr	r3, [r4, #4]
 810703c:	bf08      	it	eq
 810703e:	6031      	streq	r1, [r6, #0]
 8107040:	5162      	str	r2, [r4, r5]
 8107042:	604b      	str	r3, [r1, #4]
 8107044:	4638      	mov	r0, r7
 8107046:	f104 060b 	add.w	r6, r4, #11
 810704a:	f000 f865 	bl	8107118 <__malloc_unlock>
 810704e:	f026 0607 	bic.w	r6, r6, #7
 8107052:	1d23      	adds	r3, r4, #4
 8107054:	1af2      	subs	r2, r6, r3
 8107056:	d0b6      	beq.n	8106fc6 <_malloc_r+0x22>
 8107058:	1b9b      	subs	r3, r3, r6
 810705a:	50a3      	str	r3, [r4, r2]
 810705c:	e7b3      	b.n	8106fc6 <_malloc_r+0x22>
 810705e:	6862      	ldr	r2, [r4, #4]
 8107060:	42a3      	cmp	r3, r4
 8107062:	bf0c      	ite	eq
 8107064:	6032      	streq	r2, [r6, #0]
 8107066:	605a      	strne	r2, [r3, #4]
 8107068:	e7ec      	b.n	8107044 <_malloc_r+0xa0>
 810706a:	4623      	mov	r3, r4
 810706c:	6864      	ldr	r4, [r4, #4]
 810706e:	e7b2      	b.n	8106fd6 <_malloc_r+0x32>
 8107070:	4634      	mov	r4, r6
 8107072:	6876      	ldr	r6, [r6, #4]
 8107074:	e7b9      	b.n	8106fea <_malloc_r+0x46>
 8107076:	230c      	movs	r3, #12
 8107078:	603b      	str	r3, [r7, #0]
 810707a:	4638      	mov	r0, r7
 810707c:	f000 f84c 	bl	8107118 <__malloc_unlock>
 8107080:	e7a1      	b.n	8106fc6 <_malloc_r+0x22>
 8107082:	6025      	str	r5, [r4, #0]
 8107084:	e7de      	b.n	8107044 <_malloc_r+0xa0>
 8107086:	bf00      	nop
 8107088:	10000478 	.word	0x10000478

0810708c <_realloc_r>:
 810708c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8107090:	4680      	mov	r8, r0
 8107092:	4614      	mov	r4, r2
 8107094:	460e      	mov	r6, r1
 8107096:	b921      	cbnz	r1, 81070a2 <_realloc_r+0x16>
 8107098:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810709c:	4611      	mov	r1, r2
 810709e:	f7ff bf81 	b.w	8106fa4 <_malloc_r>
 81070a2:	b92a      	cbnz	r2, 81070b0 <_realloc_r+0x24>
 81070a4:	f7ff ff12 	bl	8106ecc <_free_r>
 81070a8:	4625      	mov	r5, r4
 81070aa:	4628      	mov	r0, r5
 81070ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 81070b0:	f000 f838 	bl	8107124 <_malloc_usable_size_r>
 81070b4:	4284      	cmp	r4, r0
 81070b6:	4607      	mov	r7, r0
 81070b8:	d802      	bhi.n	81070c0 <_realloc_r+0x34>
 81070ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 81070be:	d812      	bhi.n	81070e6 <_realloc_r+0x5a>
 81070c0:	4621      	mov	r1, r4
 81070c2:	4640      	mov	r0, r8
 81070c4:	f7ff ff6e 	bl	8106fa4 <_malloc_r>
 81070c8:	4605      	mov	r5, r0
 81070ca:	2800      	cmp	r0, #0
 81070cc:	d0ed      	beq.n	81070aa <_realloc_r+0x1e>
 81070ce:	42bc      	cmp	r4, r7
 81070d0:	4622      	mov	r2, r4
 81070d2:	4631      	mov	r1, r6
 81070d4:	bf28      	it	cs
 81070d6:	463a      	movcs	r2, r7
 81070d8:	f7ff fed0 	bl	8106e7c <memcpy>
 81070dc:	4631      	mov	r1, r6
 81070de:	4640      	mov	r0, r8
 81070e0:	f7ff fef4 	bl	8106ecc <_free_r>
 81070e4:	e7e1      	b.n	81070aa <_realloc_r+0x1e>
 81070e6:	4635      	mov	r5, r6
 81070e8:	e7df      	b.n	81070aa <_realloc_r+0x1e>
	...

081070ec <_sbrk_r>:
 81070ec:	b538      	push	{r3, r4, r5, lr}
 81070ee:	4d06      	ldr	r5, [pc, #24]	; (8107108 <_sbrk_r+0x1c>)
 81070f0:	2300      	movs	r3, #0
 81070f2:	4604      	mov	r4, r0
 81070f4:	4608      	mov	r0, r1
 81070f6:	602b      	str	r3, [r5, #0]
 81070f8:	f7fa f9c6 	bl	8101488 <_sbrk>
 81070fc:	1c43      	adds	r3, r0, #1
 81070fe:	d102      	bne.n	8107106 <_sbrk_r+0x1a>
 8107100:	682b      	ldr	r3, [r5, #0]
 8107102:	b103      	cbz	r3, 8107106 <_sbrk_r+0x1a>
 8107104:	6023      	str	r3, [r4, #0]
 8107106:	bd38      	pop	{r3, r4, r5, pc}
 8107108:	10000480 	.word	0x10000480

0810710c <__malloc_lock>:
 810710c:	4801      	ldr	r0, [pc, #4]	; (8107114 <__malloc_lock+0x8>)
 810710e:	f000 b811 	b.w	8107134 <__retarget_lock_acquire_recursive>
 8107112:	bf00      	nop
 8107114:	10000484 	.word	0x10000484

08107118 <__malloc_unlock>:
 8107118:	4801      	ldr	r0, [pc, #4]	; (8107120 <__malloc_unlock+0x8>)
 810711a:	f000 b80c 	b.w	8107136 <__retarget_lock_release_recursive>
 810711e:	bf00      	nop
 8107120:	10000484 	.word	0x10000484

08107124 <_malloc_usable_size_r>:
 8107124:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8107128:	1f18      	subs	r0, r3, #4
 810712a:	2b00      	cmp	r3, #0
 810712c:	bfbc      	itt	lt
 810712e:	580b      	ldrlt	r3, [r1, r0]
 8107130:	18c0      	addlt	r0, r0, r3
 8107132:	4770      	bx	lr

08107134 <__retarget_lock_acquire_recursive>:
 8107134:	4770      	bx	lr

08107136 <__retarget_lock_release_recursive>:
 8107136:	4770      	bx	lr

08107138 <_init>:
 8107138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810713a:	bf00      	nop
 810713c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810713e:	bc08      	pop	{r3}
 8107140:	469e      	mov	lr, r3
 8107142:	4770      	bx	lr

08107144 <_fini>:
 8107144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8107146:	bf00      	nop
 8107148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810714a:	bc08      	pop	{r3}
 810714c:	469e      	mov	lr, r3
 810714e:	4770      	bx	lr
