
H745_STAMPR_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039d4  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08103c6c  08103c6c  00013c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08103c7c  08103c7c  00013c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08103c80  08103c80  00013c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  10000000  08103c84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000114  10000010  08103c94  00020010  2**3
                  ALLOC
  7 ._user_heap_stack 00000604  10000124  08103c94  00020124  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00018c09  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000028dc  00000000  00000000  00038c49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001310  00000000  00000000  0003b528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000011e8  00000000  00000000  0003c838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003b8e5  00000000  00000000  0003da20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001749c  00000000  00000000  00079305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0018fee1  00000000  00000000  000907a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00220682  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000050e8  00000000  00000000  002206d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000010 	.word	0x10000010
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08103c54 	.word	0x08103c54

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000014 	.word	0x10000014
 81002d4:	08103c54 	.word	0x08103c54

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b09      	ldr	r3, [pc, #36]	; (8100304 <SystemInit+0x2c>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81002e2:	4a08      	ldr	r2, [pc, #32]	; (8100304 <SystemInit+0x2c>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b05      	ldr	r3, [pc, #20]	; (8100304 <SystemInit+0x2c>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a04      	ldr	r2, [pc, #16]	; (8100304 <SystemInit+0x2c>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81002f8:	bf00      	nop
 81002fa:	46bd      	mov	sp, r7
 81002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100300:	4770      	bx	lr
 8100302:	bf00      	nop
 8100304:	e000ed00 	.word	0xe000ed00

08100308 <DS3231_Read>:

#ifdef ExRTC_IS_DS3231

DS3231_RG_Strc ERTC_lg;

void DS3231_Read(I2C_HandleTypeDef *hi2c){
 8100308:	b580      	push	{r7, lr}
 810030a:	b086      	sub	sp, #24
 810030c:	af04      	add	r7, sp, #16
 810030e:	6078      	str	r0, [r7, #4]
	/* Check by use "ERTC_lg" in live expression
	 * ex. S3231_Read(&hi2c2);
	 * */
	if(hi2c->State == HAL_I2C_STATE_READY){
 8100310:	687b      	ldr	r3, [r7, #4]
 8100312:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8100316:	b2db      	uxtb	r3, r3
 8100318:	2b20      	cmp	r3, #32
 810031a:	d10b      	bne.n	8100334 <DS3231_Read+0x2c>
		HAL_I2C_Mem_Read(hi2c, DS_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT,
 810031c:	2364      	movs	r3, #100	; 0x64
 810031e:	9302      	str	r3, [sp, #8]
 8100320:	2313      	movs	r3, #19
 8100322:	9301      	str	r3, [sp, #4]
 8100324:	4b05      	ldr	r3, [pc, #20]	; (810033c <DS3231_Read+0x34>)
 8100326:	9300      	str	r3, [sp, #0]
 8100328:	2301      	movs	r3, #1
 810032a:	2200      	movs	r2, #0
 810032c:	21d0      	movs	r1, #208	; 0xd0
 810032e:	6878      	ldr	r0, [r7, #4]
 8100330:	f001 f804 	bl	810133c <HAL_I2C_Mem_Read>
				&ERTC_lg.D8[0], 19, 100);
	}

}
 8100334:	bf00      	nop
 8100336:	3708      	adds	r7, #8
 8100338:	46bd      	mov	sp, r7
 810033a:	bd80      	pop	{r7, pc}
 810033c:	1000002c 	.word	0x1000002c

08100340 <EXIN_RTC_SYNC>:


//// Sync timevalue when boot(in case Vbat is not powered)
void EXIN_RTC_SYNC(I2C_HandleTypeDef *hi2c, RTC_HandleTypeDef *hrtc){
 8100340:	b580      	push	{r7, lr}
 8100342:	b088      	sub	sp, #32
 8100344:	af00      	add	r7, sp, #0
 8100346:	6078      	str	r0, [r7, #4]
 8100348:	6039      	str	r1, [r7, #0]
	DS3231_Read(hi2c);
 810034a:	6878      	ldr	r0, [r7, #4]
 810034c:	f7ff ffdc 	bl	8100308 <DS3231_Read>

	RTC_TimeTypeDef sTime={0};
 8100350:	f107 030c 	add.w	r3, r7, #12
 8100354:	2200      	movs	r2, #0
 8100356:	601a      	str	r2, [r3, #0]
 8100358:	605a      	str	r2, [r3, #4]
 810035a:	609a      	str	r2, [r3, #8]
 810035c:	60da      	str	r2, [r3, #12]
 810035e:	611a      	str	r2, [r3, #16]
	sTime.Hours = ERTC_lg.DS3231RG.hour; //
 8100360:	4b18      	ldr	r3, [pc, #96]	; (81003c4 <EXIN_RTC_SYNC+0x84>)
 8100362:	789b      	ldrb	r3, [r3, #2]
 8100364:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8100368:	b2db      	uxtb	r3, r3
 810036a:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = ERTC_lg.DS3231RG.min;
 810036c:	4b15      	ldr	r3, [pc, #84]	; (81003c4 <EXIN_RTC_SYNC+0x84>)
 810036e:	785b      	ldrb	r3, [r3, #1]
 8100370:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = ERTC_lg.DS3231RG.sec;
 8100372:	4b14      	ldr	r3, [pc, #80]	; (81003c4 <EXIN_RTC_SYNC+0x84>)
 8100374:	781b      	ldrb	r3, [r3, #0]
 8100376:	73bb      	strb	r3, [r7, #14]

	HAL_RTC_SetTime(hrtc, &sTime, RTC_FORMAT_BCD);
 8100378:	f107 030c 	add.w	r3, r7, #12
 810037c:	2201      	movs	r2, #1
 810037e:	4619      	mov	r1, r3
 8100380:	6838      	ldr	r0, [r7, #0]
 8100382:	f002 ff03 	bl	810318c <HAL_RTC_SetTime>

	RTC_DateTypeDef sDate ={0};
 8100386:	2300      	movs	r3, #0
 8100388:	60bb      	str	r3, [r7, #8]
	sDate.Date = ERTC_lg.DS3231RG.date;
 810038a:	4b0e      	ldr	r3, [pc, #56]	; (81003c4 <EXIN_RTC_SYNC+0x84>)
 810038c:	791b      	ldrb	r3, [r3, #4]
 810038e:	72bb      	strb	r3, [r7, #10]
	sDate.Month = ERTC_lg.DS3231RG.month;
 8100390:	4b0c      	ldr	r3, [pc, #48]	; (81003c4 <EXIN_RTC_SYNC+0x84>)
 8100392:	795b      	ldrb	r3, [r3, #5]
 8100394:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8100398:	b2db      	uxtb	r3, r3
 810039a:	727b      	strb	r3, [r7, #9]
	sDate.WeekDay = ERTC_lg.DS3231RG.wkday;
 810039c:	4b09      	ldr	r3, [pc, #36]	; (81003c4 <EXIN_RTC_SYNC+0x84>)
 810039e:	78db      	ldrb	r3, [r3, #3]
 81003a0:	f3c3 0302 	ubfx	r3, r3, #0, #3
 81003a4:	b2db      	uxtb	r3, r3
 81003a6:	723b      	strb	r3, [r7, #8]
	sDate.Year = ERTC_lg.DS3231RG.year;
 81003a8:	4b06      	ldr	r3, [pc, #24]	; (81003c4 <EXIN_RTC_SYNC+0x84>)
 81003aa:	799b      	ldrb	r3, [r3, #6]
 81003ac:	72fb      	strb	r3, [r7, #11]

	HAL_RTC_SetDate(hrtc, &sDate, RTC_FORMAT_BCD);
 81003ae:	f107 0308 	add.w	r3, r7, #8
 81003b2:	2201      	movs	r2, #1
 81003b4:	4619      	mov	r1, r3
 81003b6:	6838      	ldr	r0, [r7, #0]
 81003b8:	f002 ffe1 	bl	810337e <HAL_RTC_SetDate>
}
 81003bc:	bf00      	nop
 81003be:	3720      	adds	r7, #32
 81003c0:	46bd      	mov	sp, r7
 81003c2:	bd80      	pop	{r7, pc}
 81003c4:	1000002c 	.word	0x1000002c

081003c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81003c8:	b5b0      	push	{r4, r5, r7, lr}
 81003ca:	b082      	sub	sp, #8
 81003cc:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81003ce:	4b3b      	ldr	r3, [pc, #236]	; (81004bc <main+0xf4>)
 81003d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81003d4:	4a39      	ldr	r2, [pc, #228]	; (81004bc <main+0xf4>)
 81003d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81003da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81003de:	4b37      	ldr	r3, [pc, #220]	; (81004bc <main+0xf4>)
 81003e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81003e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81003e8:	607b      	str	r3, [r7, #4]
 81003ea:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81003ec:	2001      	movs	r0, #1
 81003ee:	f000 ff03 	bl	81011f8 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81003f2:	f001 fc21 	bl	8101c38 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81003f6:	2201      	movs	r2, #1
 81003f8:	2102      	movs	r1, #2
 81003fa:	2000      	movs	r0, #0
 81003fc:	f001 fba2 	bl	8101b44 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100400:	4b2f      	ldr	r3, [pc, #188]	; (81004c0 <main+0xf8>)
 8100402:	681b      	ldr	r3, [r3, #0]
 8100404:	091b      	lsrs	r3, r3, #4
 8100406:	f003 030f 	and.w	r3, r3, #15
 810040a:	2b07      	cmp	r3, #7
 810040c:	d108      	bne.n	8100420 <main+0x58>
 810040e:	4b2d      	ldr	r3, [pc, #180]	; (81004c4 <main+0xfc>)
 8100410:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100414:	4a2b      	ldr	r2, [pc, #172]	; (81004c4 <main+0xfc>)
 8100416:	f043 0301 	orr.w	r3, r3, #1
 810041a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810041e:	e007      	b.n	8100430 <main+0x68>
 8100420:	4b28      	ldr	r3, [pc, #160]	; (81004c4 <main+0xfc>)
 8100422:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100426:	4a27      	ldr	r2, [pc, #156]	; (81004c4 <main+0xfc>)
 8100428:	f043 0301 	orr.w	r3, r3, #1
 810042c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100430:	f000 faee 	bl	8100a10 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100434:	f000 f922 	bl	810067c <MX_GPIO_Init>
  MX_TIM17_Init();
 8100438:	f000 f8f8 	bl	810062c <MX_TIM17_Init>
  MX_RTC_Init();
 810043c:	f000 f890 	bl	8100560 <MX_RTC_Init>
  MX_I2C2_Init();
 8100440:	f000 f84e 	bl	81004e0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  //HAL_TIM_Base_Start_IT(&htim17);

  //// Start sync EXIN RTC
  EXIN_RTC_SYNC(&hi2c2,&hrtc);
 8100444:	4920      	ldr	r1, [pc, #128]	; (81004c8 <main+0x100>)
 8100446:	4821      	ldr	r0, [pc, #132]	; (81004cc <main+0x104>)
 8100448:	f7ff ff7a 	bl	8100340 <EXIN_RTC_SYNC>
	  //SRAM4->state1 = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
	  //chk2 = SRAM4->state1;
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GetTick() - timestamp_one >= 250){
 810044c:	f000 fb88 	bl	8100b60 <HAL_GetTick>
 8100450:	4602      	mov	r2, r0
 8100452:	4b1f      	ldr	r3, [pc, #124]	; (81004d0 <main+0x108>)
 8100454:	681b      	ldr	r3, [r3, #0]
 8100456:	1ad3      	subs	r3, r2, r3
 8100458:	2bf9      	cmp	r3, #249	; 0xf9
 810045a:	d9f7      	bls.n	810044c <main+0x84>
		  timestamp_one = HAL_GetTick();
 810045c:	f000 fb80 	bl	8100b60 <HAL_GetTick>
 8100460:	4603      	mov	r3, r0
 8100462:	4a1b      	ldr	r2, [pc, #108]	; (81004d0 <main+0x108>)
 8100464:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8100466:	2102      	movs	r1, #2
 8100468:	481a      	ldr	r0, [pc, #104]	; (81004d4 <main+0x10c>)
 810046a:	f000 fe72 	bl	8101152 <HAL_GPIO_TogglePin>

		  DS3231_Read(&hi2c2);
 810046e:	4817      	ldr	r0, [pc, #92]	; (81004cc <main+0x104>)
 8100470:	f7ff ff4a 	bl	8100308 <DS3231_Read>

		  if(HAL_HSEM_Take(1, 1) == HAL_OK){
 8100474:	2101      	movs	r1, #1
 8100476:	2001      	movs	r0, #1
 8100478:	f000 fe86 	bl	8101188 <HAL_HSEM_Take>
 810047c:	4603      	mov	r3, r0
 810047e:	2b00      	cmp	r3, #0
 8100480:	d1e4      	bne.n	810044c <main+0x84>
		  		//read RTC NEED TO READ BOTH IN OTHER
		  HAL_RTC_GetTime(&hrtc, &NowTime, RTC_FORMAT_BCD);
 8100482:	2201      	movs	r2, #1
 8100484:	4914      	ldr	r1, [pc, #80]	; (81004d8 <main+0x110>)
 8100486:	4810      	ldr	r0, [pc, #64]	; (81004c8 <main+0x100>)
 8100488:	f002 ff1d 	bl	81032c6 <HAL_RTC_GetTime>
		  HAL_RTC_GetDate(&hrtc, &NowDate, RTC_FORMAT_BCD);
 810048c:	2201      	movs	r2, #1
 810048e:	4913      	ldr	r1, [pc, #76]	; (81004dc <main+0x114>)
 8100490:	480d      	ldr	r0, [pc, #52]	; (81004c8 <main+0x100>)
 8100492:	f002 fffb 	bl	810348c <HAL_RTC_GetDate>
		  SRAM4->NowTimes = NowTime;
 8100496:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 810049a:	4a0f      	ldr	r2, [pc, #60]	; (81004d8 <main+0x110>)
 810049c:	1d1c      	adds	r4, r3, #4
 810049e:	4615      	mov	r5, r2
 81004a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81004a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81004a4:	682b      	ldr	r3, [r5, #0]
 81004a6:	6023      	str	r3, [r4, #0]
		  SRAM4->NowDates = NowDate;
 81004a8:	f04f 5260 	mov.w	r2, #939524096	; 0x38000000
 81004ac:	4b0b      	ldr	r3, [pc, #44]	; (81004dc <main+0x114>)
 81004ae:	681b      	ldr	r3, [r3, #0]
 81004b0:	6193      	str	r3, [r2, #24]

		  HAL_HSEM_Release(1, 1);
 81004b2:	2101      	movs	r1, #1
 81004b4:	2001      	movs	r0, #1
 81004b6:	f000 fe8b 	bl	81011d0 <HAL_HSEM_Release>
	  if(HAL_GetTick() - timestamp_one >= 250){
 81004ba:	e7c7      	b.n	810044c <main+0x84>
 81004bc:	58024400 	.word	0x58024400
 81004c0:	e000ed00 	.word	0xe000ed00
 81004c4:	58026400 	.word	0x58026400
 81004c8:	1000008c 	.word	0x1000008c
 81004cc:	10000040 	.word	0x10000040
 81004d0:	100000fc 	.word	0x100000fc
 81004d4:	58021000 	.word	0x58021000
 81004d8:	10000100 	.word	0x10000100
 81004dc:	10000114 	.word	0x10000114

081004e0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 81004e0:	b580      	push	{r7, lr}
 81004e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 81004e4:	4b1b      	ldr	r3, [pc, #108]	; (8100554 <MX_I2C2_Init+0x74>)
 81004e6:	4a1c      	ldr	r2, [pc, #112]	; (8100558 <MX_I2C2_Init+0x78>)
 81004e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 81004ea:	4b1a      	ldr	r3, [pc, #104]	; (8100554 <MX_I2C2_Init+0x74>)
 81004ec:	4a1b      	ldr	r2, [pc, #108]	; (810055c <MX_I2C2_Init+0x7c>)
 81004ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 81004f0:	4b18      	ldr	r3, [pc, #96]	; (8100554 <MX_I2C2_Init+0x74>)
 81004f2:	2200      	movs	r2, #0
 81004f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 81004f6:	4b17      	ldr	r3, [pc, #92]	; (8100554 <MX_I2C2_Init+0x74>)
 81004f8:	2201      	movs	r2, #1
 81004fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 81004fc:	4b15      	ldr	r3, [pc, #84]	; (8100554 <MX_I2C2_Init+0x74>)
 81004fe:	2200      	movs	r2, #0
 8100500:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8100502:	4b14      	ldr	r3, [pc, #80]	; (8100554 <MX_I2C2_Init+0x74>)
 8100504:	2200      	movs	r2, #0
 8100506:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8100508:	4b12      	ldr	r3, [pc, #72]	; (8100554 <MX_I2C2_Init+0x74>)
 810050a:	2200      	movs	r2, #0
 810050c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 810050e:	4b11      	ldr	r3, [pc, #68]	; (8100554 <MX_I2C2_Init+0x74>)
 8100510:	2200      	movs	r2, #0
 8100512:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8100514:	4b0f      	ldr	r3, [pc, #60]	; (8100554 <MX_I2C2_Init+0x74>)
 8100516:	2200      	movs	r2, #0
 8100518:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 810051a:	480e      	ldr	r0, [pc, #56]	; (8100554 <MX_I2C2_Init+0x74>)
 810051c:	f000 fe7e 	bl	810121c <HAL_I2C_Init>
 8100520:	4603      	mov	r3, r0
 8100522:	2b00      	cmp	r3, #0
 8100524:	d001      	beq.n	810052a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8100526:	f000 f909 	bl	810073c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 810052a:	2100      	movs	r1, #0
 810052c:	4809      	ldr	r0, [pc, #36]	; (8100554 <MX_I2C2_Init+0x74>)
 810052e:	f001 fa71 	bl	8101a14 <HAL_I2CEx_ConfigAnalogFilter>
 8100532:	4603      	mov	r3, r0
 8100534:	2b00      	cmp	r3, #0
 8100536:	d001      	beq.n	810053c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8100538:	f000 f900 	bl	810073c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 810053c:	2100      	movs	r1, #0
 810053e:	4805      	ldr	r0, [pc, #20]	; (8100554 <MX_I2C2_Init+0x74>)
 8100540:	f001 fab3 	bl	8101aaa <HAL_I2CEx_ConfigDigitalFilter>
 8100544:	4603      	mov	r3, r0
 8100546:	2b00      	cmp	r3, #0
 8100548:	d001      	beq.n	810054e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 810054a:	f000 f8f7 	bl	810073c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 810054e:	bf00      	nop
 8100550:	bd80      	pop	{r7, pc}
 8100552:	bf00      	nop
 8100554:	10000040 	.word	0x10000040
 8100558:	40005800 	.word	0x40005800
 810055c:	00b03fdb 	.word	0x00b03fdb

08100560 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8100560:	b580      	push	{r7, lr}
 8100562:	b086      	sub	sp, #24
 8100564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8100566:	1d3b      	adds	r3, r7, #4
 8100568:	2200      	movs	r2, #0
 810056a:	601a      	str	r2, [r3, #0]
 810056c:	605a      	str	r2, [r3, #4]
 810056e:	609a      	str	r2, [r3, #8]
 8100570:	60da      	str	r2, [r3, #12]
 8100572:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8100574:	2300      	movs	r3, #0
 8100576:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8100578:	4b2a      	ldr	r3, [pc, #168]	; (8100624 <MX_RTC_Init+0xc4>)
 810057a:	4a2b      	ldr	r2, [pc, #172]	; (8100628 <MX_RTC_Init+0xc8>)
 810057c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 810057e:	4b29      	ldr	r3, [pc, #164]	; (8100624 <MX_RTC_Init+0xc4>)
 8100580:	2200      	movs	r2, #0
 8100582:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8100584:	4b27      	ldr	r3, [pc, #156]	; (8100624 <MX_RTC_Init+0xc4>)
 8100586:	227f      	movs	r2, #127	; 0x7f
 8100588:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 810058a:	4b26      	ldr	r3, [pc, #152]	; (8100624 <MX_RTC_Init+0xc4>)
 810058c:	22ff      	movs	r2, #255	; 0xff
 810058e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8100590:	4b24      	ldr	r3, [pc, #144]	; (8100624 <MX_RTC_Init+0xc4>)
 8100592:	2200      	movs	r2, #0
 8100594:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8100596:	4b23      	ldr	r3, [pc, #140]	; (8100624 <MX_RTC_Init+0xc4>)
 8100598:	2200      	movs	r2, #0
 810059a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 810059c:	4b21      	ldr	r3, [pc, #132]	; (8100624 <MX_RTC_Init+0xc4>)
 810059e:	2200      	movs	r2, #0
 81005a0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 81005a2:	4b20      	ldr	r3, [pc, #128]	; (8100624 <MX_RTC_Init+0xc4>)
 81005a4:	2200      	movs	r2, #0
 81005a6:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 81005a8:	481e      	ldr	r0, [pc, #120]	; (8100624 <MX_RTC_Init+0xc4>)
 81005aa:	f002 fd77 	bl	810309c <HAL_RTC_Init>
 81005ae:	4603      	mov	r3, r0
 81005b0:	2b00      	cmp	r3, #0
 81005b2:	d001      	beq.n	81005b8 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 81005b4:	f000 f8c2 	bl	810073c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 81005b8:	2300      	movs	r3, #0
 81005ba:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x30;
 81005bc:	2330      	movs	r3, #48	; 0x30
 81005be:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 81005c0:	2300      	movs	r3, #0
 81005c2:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 81005c4:	2300      	movs	r3, #0
 81005c6:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_SET;
 81005c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 81005cc:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 81005ce:	1d3b      	adds	r3, r7, #4
 81005d0:	2201      	movs	r2, #1
 81005d2:	4619      	mov	r1, r3
 81005d4:	4813      	ldr	r0, [pc, #76]	; (8100624 <MX_RTC_Init+0xc4>)
 81005d6:	f002 fdd9 	bl	810318c <HAL_RTC_SetTime>
 81005da:	4603      	mov	r3, r0
 81005dc:	2b00      	cmp	r3, #0
 81005de:	d001      	beq.n	81005e4 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 81005e0:	f000 f8ac 	bl	810073c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 81005e4:	2306      	movs	r3, #6
 81005e6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 81005e8:	2311      	movs	r3, #17
 81005ea:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x12;
 81005ec:	2312      	movs	r3, #18
 81005ee:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 81005f0:	2322      	movs	r3, #34	; 0x22
 81005f2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 81005f4:	463b      	mov	r3, r7
 81005f6:	2201      	movs	r2, #1
 81005f8:	4619      	mov	r1, r3
 81005fa:	480a      	ldr	r0, [pc, #40]	; (8100624 <MX_RTC_Init+0xc4>)
 81005fc:	f002 febf 	bl	810337e <HAL_RTC_SetDate>
 8100600:	4603      	mov	r3, r0
 8100602:	2b00      	cmp	r3, #0
 8100604:	d001      	beq.n	810060a <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8100606:	f000 f899 	bl	810073c <Error_Handler>
  }

  /** Enable the reference Clock input
  */
  if (HAL_RTCEx_SetRefClock(&hrtc) != HAL_OK)
 810060a:	4806      	ldr	r0, [pc, #24]	; (8100624 <MX_RTC_Init+0xc4>)
 810060c:	f003 f85c 	bl	81036c8 <HAL_RTCEx_SetRefClock>
 8100610:	4603      	mov	r3, r0
 8100612:	2b00      	cmp	r3, #0
 8100614:	d001      	beq.n	810061a <MX_RTC_Init+0xba>
  {
    Error_Handler();
 8100616:	f000 f891 	bl	810073c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 810061a:	bf00      	nop
 810061c:	3718      	adds	r7, #24
 810061e:	46bd      	mov	sp, r7
 8100620:	bd80      	pop	{r7, pc}
 8100622:	bf00      	nop
 8100624:	1000008c 	.word	0x1000008c
 8100628:	58004000 	.word	0x58004000

0810062c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 810062c:	b580      	push	{r7, lr}
 810062e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8100630:	4b10      	ldr	r3, [pc, #64]	; (8100674 <MX_TIM17_Init+0x48>)
 8100632:	4a11      	ldr	r2, [pc, #68]	; (8100678 <MX_TIM17_Init+0x4c>)
 8100634:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 479;
 8100636:	4b0f      	ldr	r3, [pc, #60]	; (8100674 <MX_TIM17_Init+0x48>)
 8100638:	f240 12df 	movw	r2, #479	; 0x1df
 810063c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 810063e:	4b0d      	ldr	r3, [pc, #52]	; (8100674 <MX_TIM17_Init+0x48>)
 8100640:	2200      	movs	r2, #0
 8100642:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8100644:	4b0b      	ldr	r3, [pc, #44]	; (8100674 <MX_TIM17_Init+0x48>)
 8100646:	f64f 72ff 	movw	r2, #65535	; 0xffff
 810064a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 810064c:	4b09      	ldr	r3, [pc, #36]	; (8100674 <MX_TIM17_Init+0x48>)
 810064e:	2200      	movs	r2, #0
 8100650:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8100652:	4b08      	ldr	r3, [pc, #32]	; (8100674 <MX_TIM17_Init+0x48>)
 8100654:	2200      	movs	r2, #0
 8100656:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8100658:	4b06      	ldr	r3, [pc, #24]	; (8100674 <MX_TIM17_Init+0x48>)
 810065a:	2200      	movs	r2, #0
 810065c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 810065e:	4805      	ldr	r0, [pc, #20]	; (8100674 <MX_TIM17_Init+0x48>)
 8100660:	f003 f876 	bl	8103750 <HAL_TIM_Base_Init>
 8100664:	4603      	mov	r3, r0
 8100666:	2b00      	cmp	r3, #0
 8100668:	d001      	beq.n	810066e <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 810066a:	f000 f867 	bl	810073c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 810066e:	bf00      	nop
 8100670:	bd80      	pop	{r7, pc}
 8100672:	bf00      	nop
 8100674:	100000b0 	.word	0x100000b0
 8100678:	40014800 	.word	0x40014800

0810067c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 810067c:	b580      	push	{r7, lr}
 810067e:	b088      	sub	sp, #32
 8100680:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100682:	f107 030c 	add.w	r3, r7, #12
 8100686:	2200      	movs	r2, #0
 8100688:	601a      	str	r2, [r3, #0]
 810068a:	605a      	str	r2, [r3, #4]
 810068c:	609a      	str	r2, [r3, #8]
 810068e:	60da      	str	r2, [r3, #12]
 8100690:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100692:	4b1a      	ldr	r3, [pc, #104]	; (81006fc <MX_GPIO_Init+0x80>)
 8100694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100698:	4a18      	ldr	r2, [pc, #96]	; (81006fc <MX_GPIO_Init+0x80>)
 810069a:	f043 0302 	orr.w	r3, r3, #2
 810069e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81006a2:	4b16      	ldr	r3, [pc, #88]	; (81006fc <MX_GPIO_Init+0x80>)
 81006a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81006a8:	f003 0302 	and.w	r3, r3, #2
 81006ac:	60bb      	str	r3, [r7, #8]
 81006ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 81006b0:	4b12      	ldr	r3, [pc, #72]	; (81006fc <MX_GPIO_Init+0x80>)
 81006b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81006b6:	4a11      	ldr	r2, [pc, #68]	; (81006fc <MX_GPIO_Init+0x80>)
 81006b8:	f043 0310 	orr.w	r3, r3, #16
 81006bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81006c0:	4b0e      	ldr	r3, [pc, #56]	; (81006fc <MX_GPIO_Init+0x80>)
 81006c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81006c6:	f003 0310 	and.w	r3, r3, #16
 81006ca:	607b      	str	r3, [r7, #4]
 81006cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 81006ce:	2200      	movs	r2, #0
 81006d0:	2102      	movs	r1, #2
 81006d2:	480b      	ldr	r0, [pc, #44]	; (8100700 <MX_GPIO_Init+0x84>)
 81006d4:	f000 fd24 	bl	8101120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 81006d8:	2302      	movs	r3, #2
 81006da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81006dc:	2301      	movs	r3, #1
 81006de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81006e0:	2300      	movs	r3, #0
 81006e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81006e4:	2300      	movs	r3, #0
 81006e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 81006e8:	f107 030c 	add.w	r3, r7, #12
 81006ec:	4619      	mov	r1, r3
 81006ee:	4804      	ldr	r0, [pc, #16]	; (8100700 <MX_GPIO_Init+0x84>)
 81006f0:	f000 fb66 	bl	8100dc0 <HAL_GPIO_Init>

}
 81006f4:	bf00      	nop
 81006f6:	3720      	adds	r7, #32
 81006f8:	46bd      	mov	sp, r7
 81006fa:	bd80      	pop	{r7, pc}
 81006fc:	58024400 	.word	0x58024400
 8100700:	58021000 	.word	0x58021000

08100704 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
uint64_t micros()
{return _micros + htim17.Instance->CNT;}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8100704:	b4b0      	push	{r4, r5, r7}
 8100706:	b083      	sub	sp, #12
 8100708:	af00      	add	r7, sp, #0
 810070a:	6078      	str	r0, [r7, #4]
 if(htim == &htim17)
 810070c:	687b      	ldr	r3, [r7, #4]
 810070e:	4a09      	ldr	r2, [pc, #36]	; (8100734 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8100710:	4293      	cmp	r3, r2
 8100712:	d10a      	bne.n	810072a <HAL_TIM_PeriodElapsedCallback+0x26>
 {_micros += 65535;}
 8100714:	4b08      	ldr	r3, [pc, #32]	; (8100738 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8100716:	e9d3 2300 	ldrd	r2, r3, [r3]
 810071a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 810071e:	1854      	adds	r4, r2, r1
 8100720:	f143 0500 	adc.w	r5, r3, #0
 8100724:	4b04      	ldr	r3, [pc, #16]	; (8100738 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8100726:	e9c3 4500 	strd	r4, r5, [r3]
}
 810072a:	bf00      	nop
 810072c:	370c      	adds	r7, #12
 810072e:	46bd      	mov	sp, r7
 8100730:	bcb0      	pop	{r4, r5, r7}
 8100732:	4770      	bx	lr
 8100734:	100000b0 	.word	0x100000b0
 8100738:	10000118 	.word	0x10000118

0810073c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 810073c:	b480      	push	{r7}
 810073e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100740:	b672      	cpsid	i
}
 8100742:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8100744:	e7fe      	b.n	8100744 <Error_Handler+0x8>
	...

08100748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100748:	b480      	push	{r7}
 810074a:	b083      	sub	sp, #12
 810074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810074e:	4b0a      	ldr	r3, [pc, #40]	; (8100778 <HAL_MspInit+0x30>)
 8100750:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100754:	4a08      	ldr	r2, [pc, #32]	; (8100778 <HAL_MspInit+0x30>)
 8100756:	f043 0302 	orr.w	r3, r3, #2
 810075a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810075e:	4b06      	ldr	r3, [pc, #24]	; (8100778 <HAL_MspInit+0x30>)
 8100760:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100764:	f003 0302 	and.w	r3, r3, #2
 8100768:	607b      	str	r3, [r7, #4]
 810076a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 810076c:	bf00      	nop
 810076e:	370c      	adds	r7, #12
 8100770:	46bd      	mov	sp, r7
 8100772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100776:	4770      	bx	lr
 8100778:	58024400 	.word	0x58024400

0810077c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 810077c:	b580      	push	{r7, lr}
 810077e:	b0b8      	sub	sp, #224	; 0xe0
 8100780:	af00      	add	r7, sp, #0
 8100782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100784:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8100788:	2200      	movs	r2, #0
 810078a:	601a      	str	r2, [r3, #0]
 810078c:	605a      	str	r2, [r3, #4]
 810078e:	609a      	str	r2, [r3, #8]
 8100790:	60da      	str	r2, [r3, #12]
 8100792:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100794:	f107 0310 	add.w	r3, r7, #16
 8100798:	22bc      	movs	r2, #188	; 0xbc
 810079a:	2100      	movs	r1, #0
 810079c:	4618      	mov	r0, r3
 810079e:	f003 fa51 	bl	8103c44 <memset>
  if(hi2c->Instance==I2C2)
 81007a2:	687b      	ldr	r3, [r7, #4]
 81007a4:	681b      	ldr	r3, [r3, #0]
 81007a6:	4a25      	ldr	r2, [pc, #148]	; (810083c <HAL_I2C_MspInit+0xc0>)
 81007a8:	4293      	cmp	r3, r2
 81007aa:	d142      	bne.n	8100832 <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 81007ac:	2308      	movs	r3, #8
 81007ae:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 81007b0:	2300      	movs	r3, #0
 81007b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81007b6:	f107 0310 	add.w	r3, r7, #16
 81007ba:	4618      	mov	r0, r3
 81007bc:	f001 fbc4 	bl	8101f48 <HAL_RCCEx_PeriphCLKConfig>
 81007c0:	4603      	mov	r3, r0
 81007c2:	2b00      	cmp	r3, #0
 81007c4:	d001      	beq.n	81007ca <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 81007c6:	f7ff ffb9 	bl	810073c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81007ca:	4b1d      	ldr	r3, [pc, #116]	; (8100840 <HAL_I2C_MspInit+0xc4>)
 81007cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81007d0:	4a1b      	ldr	r2, [pc, #108]	; (8100840 <HAL_I2C_MspInit+0xc4>)
 81007d2:	f043 0302 	orr.w	r3, r3, #2
 81007d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81007da:	4b19      	ldr	r3, [pc, #100]	; (8100840 <HAL_I2C_MspInit+0xc4>)
 81007dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81007e0:	f003 0302 	and.w	r3, r3, #2
 81007e4:	60fb      	str	r3, [r7, #12]
 81007e6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 81007e8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 81007ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 81007f0:	2312      	movs	r3, #18
 81007f2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81007f6:	2300      	movs	r3, #0
 81007f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81007fc:	2300      	movs	r3, #0
 81007fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8100802:	2304      	movs	r3, #4
 8100804:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8100808:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 810080c:	4619      	mov	r1, r3
 810080e:	480d      	ldr	r0, [pc, #52]	; (8100844 <HAL_I2C_MspInit+0xc8>)
 8100810:	f000 fad6 	bl	8100dc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8100814:	4b0a      	ldr	r3, [pc, #40]	; (8100840 <HAL_I2C_MspInit+0xc4>)
 8100816:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810081a:	4a09      	ldr	r2, [pc, #36]	; (8100840 <HAL_I2C_MspInit+0xc4>)
 810081c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8100820:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8100824:	4b06      	ldr	r3, [pc, #24]	; (8100840 <HAL_I2C_MspInit+0xc4>)
 8100826:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810082a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810082e:	60bb      	str	r3, [r7, #8]
 8100830:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8100832:	bf00      	nop
 8100834:	37e0      	adds	r7, #224	; 0xe0
 8100836:	46bd      	mov	sp, r7
 8100838:	bd80      	pop	{r7, pc}
 810083a:	bf00      	nop
 810083c:	40005800 	.word	0x40005800
 8100840:	58024400 	.word	0x58024400
 8100844:	58020400 	.word	0x58020400

08100848 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8100848:	b580      	push	{r7, lr}
 810084a:	b0b8      	sub	sp, #224	; 0xe0
 810084c:	af00      	add	r7, sp, #0
 810084e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100850:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8100854:	2200      	movs	r2, #0
 8100856:	601a      	str	r2, [r3, #0]
 8100858:	605a      	str	r2, [r3, #4]
 810085a:	609a      	str	r2, [r3, #8]
 810085c:	60da      	str	r2, [r3, #12]
 810085e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100860:	f107 0310 	add.w	r3, r7, #16
 8100864:	22bc      	movs	r2, #188	; 0xbc
 8100866:	2100      	movs	r1, #0
 8100868:	4618      	mov	r0, r3
 810086a:	f003 f9eb 	bl	8103c44 <memset>
  if(hrtc->Instance==RTC)
 810086e:	687b      	ldr	r3, [r7, #4]
 8100870:	681b      	ldr	r3, [r3, #0]
 8100872:	4a21      	ldr	r2, [pc, #132]	; (81008f8 <HAL_RTC_MspInit+0xb0>)
 8100874:	4293      	cmp	r3, r2
 8100876:	d13b      	bne.n	81008f0 <HAL_RTC_MspInit+0xa8>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8100878:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 810087c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 810087e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8100882:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100886:	f107 0310 	add.w	r3, r7, #16
 810088a:	4618      	mov	r0, r3
 810088c:	f001 fb5c 	bl	8101f48 <HAL_RCCEx_PeriphCLKConfig>
 8100890:	4603      	mov	r3, r0
 8100892:	2b00      	cmp	r3, #0
 8100894:	d001      	beq.n	810089a <HAL_RTC_MspInit+0x52>
    {
      Error_Handler();
 8100896:	f7ff ff51 	bl	810073c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 810089a:	4b18      	ldr	r3, [pc, #96]	; (81008fc <HAL_RTC_MspInit+0xb4>)
 810089c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810089e:	4a17      	ldr	r2, [pc, #92]	; (81008fc <HAL_RTC_MspInit+0xb4>)
 81008a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 81008a4:	6713      	str	r3, [r2, #112]	; 0x70

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81008a6:	4b15      	ldr	r3, [pc, #84]	; (81008fc <HAL_RTC_MspInit+0xb4>)
 81008a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81008ac:	4a13      	ldr	r2, [pc, #76]	; (81008fc <HAL_RTC_MspInit+0xb4>)
 81008ae:	f043 0302 	orr.w	r3, r3, #2
 81008b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81008b6:	4b11      	ldr	r3, [pc, #68]	; (81008fc <HAL_RTC_MspInit+0xb4>)
 81008b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81008bc:	f003 0302 	and.w	r3, r3, #2
 81008c0:	60fb      	str	r3, [r7, #12]
 81008c2:	68fb      	ldr	r3, [r7, #12]
    /**RTC GPIO Configuration
    PB15     ------> RTC_REFIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 81008c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81008c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81008cc:	2302      	movs	r3, #2
 81008ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81008d2:	2300      	movs	r3, #0
 81008d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81008d8:	2300      	movs	r3, #0
 81008da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF0_RTC_50Hz;
 81008de:	2300      	movs	r3, #0
 81008e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81008e4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81008e8:	4619      	mov	r1, r3
 81008ea:	4805      	ldr	r0, [pc, #20]	; (8100900 <HAL_RTC_MspInit+0xb8>)
 81008ec:	f000 fa68 	bl	8100dc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 81008f0:	bf00      	nop
 81008f2:	37e0      	adds	r7, #224	; 0xe0
 81008f4:	46bd      	mov	sp, r7
 81008f6:	bd80      	pop	{r7, pc}
 81008f8:	58004000 	.word	0x58004000
 81008fc:	58024400 	.word	0x58024400
 8100900:	58020400 	.word	0x58020400

08100904 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8100904:	b580      	push	{r7, lr}
 8100906:	b084      	sub	sp, #16
 8100908:	af00      	add	r7, sp, #0
 810090a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 810090c:	687b      	ldr	r3, [r7, #4]
 810090e:	681b      	ldr	r3, [r3, #0]
 8100910:	4a0e      	ldr	r2, [pc, #56]	; (810094c <HAL_TIM_Base_MspInit+0x48>)
 8100912:	4293      	cmp	r3, r2
 8100914:	d116      	bne.n	8100944 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8100916:	4b0e      	ldr	r3, [pc, #56]	; (8100950 <HAL_TIM_Base_MspInit+0x4c>)
 8100918:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810091c:	4a0c      	ldr	r2, [pc, #48]	; (8100950 <HAL_TIM_Base_MspInit+0x4c>)
 810091e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8100922:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8100926:	4b0a      	ldr	r3, [pc, #40]	; (8100950 <HAL_TIM_Base_MspInit+0x4c>)
 8100928:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810092c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8100930:	60fb      	str	r3, [r7, #12]
 8100932:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8100934:	2200      	movs	r2, #0
 8100936:	2100      	movs	r1, #0
 8100938:	2076      	movs	r0, #118	; 0x76
 810093a:	f000 f9f8 	bl	8100d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 810093e:	2076      	movs	r0, #118	; 0x76
 8100940:	f000 fa0f 	bl	8100d62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8100944:	bf00      	nop
 8100946:	3710      	adds	r7, #16
 8100948:	46bd      	mov	sp, r7
 810094a:	bd80      	pop	{r7, pc}
 810094c:	40014800 	.word	0x40014800
 8100950:	58024400 	.word	0x58024400

08100954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100954:	b480      	push	{r7}
 8100956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8100958:	e7fe      	b.n	8100958 <NMI_Handler+0x4>

0810095a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810095a:	b480      	push	{r7}
 810095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810095e:	e7fe      	b.n	810095e <HardFault_Handler+0x4>

08100960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100960:	b480      	push	{r7}
 8100962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100964:	e7fe      	b.n	8100964 <MemManage_Handler+0x4>

08100966 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100966:	b480      	push	{r7}
 8100968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810096a:	e7fe      	b.n	810096a <BusFault_Handler+0x4>

0810096c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 810096c:	b480      	push	{r7}
 810096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100970:	e7fe      	b.n	8100970 <UsageFault_Handler+0x4>

08100972 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8100972:	b480      	push	{r7}
 8100974:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8100976:	bf00      	nop
 8100978:	46bd      	mov	sp, r7
 810097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810097e:	4770      	bx	lr

08100980 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100980:	b480      	push	{r7}
 8100982:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100984:	bf00      	nop
 8100986:	46bd      	mov	sp, r7
 8100988:	f85d 7b04 	ldr.w	r7, [sp], #4
 810098c:	4770      	bx	lr

0810098e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 810098e:	b480      	push	{r7}
 8100990:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8100992:	bf00      	nop
 8100994:	46bd      	mov	sp, r7
 8100996:	f85d 7b04 	ldr.w	r7, [sp], #4
 810099a:	4770      	bx	lr

0810099c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 810099c:	b580      	push	{r7, lr}
 810099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81009a0:	f000 f8ca 	bl	8100b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81009a4:	bf00      	nop
 81009a6:	bd80      	pop	{r7, pc}

081009a8 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 81009a8:	b580      	push	{r7, lr}
 81009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 81009ac:	4802      	ldr	r0, [pc, #8]	; (81009b8 <TIM17_IRQHandler+0x10>)
 81009ae:	f002 ff26 	bl	81037fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 81009b2:	bf00      	nop
 81009b4:	bd80      	pop	{r7, pc}
 81009b6:	bf00      	nop
 81009b8:	100000b0 	.word	0x100000b0

081009bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81009bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 81009f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81009c0:	f7ff fc8a 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81009c4:	480c      	ldr	r0, [pc, #48]	; (81009f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81009c6:	490d      	ldr	r1, [pc, #52]	; (81009fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81009c8:	4a0d      	ldr	r2, [pc, #52]	; (8100a00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81009ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81009cc:	e002      	b.n	81009d4 <LoopCopyDataInit>

081009ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81009ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81009d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81009d2:	3304      	adds	r3, #4

081009d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81009d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81009d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81009d8:	d3f9      	bcc.n	81009ce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81009da:	4a0a      	ldr	r2, [pc, #40]	; (8100a04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81009dc:	4c0a      	ldr	r4, [pc, #40]	; (8100a08 <LoopFillZerobss+0x22>)
  movs r3, #0
 81009de:	2300      	movs	r3, #0
  b LoopFillZerobss
 81009e0:	e001      	b.n	81009e6 <LoopFillZerobss>

081009e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81009e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81009e4:	3204      	adds	r2, #4

081009e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81009e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81009e8:	d3fb      	bcc.n	81009e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81009ea:	f003 f907 	bl	8103bfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81009ee:	f7ff fceb 	bl	81003c8 <main>
  bx  lr
 81009f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81009f4:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81009f8:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81009fc:	10000010 	.word	0x10000010
  ldr r2, =_sidata
 8100a00:	08103c84 	.word	0x08103c84
  ldr r2, =_sbss
 8100a04:	10000010 	.word	0x10000010
  ldr r4, =_ebss
 8100a08:	10000124 	.word	0x10000124

08100a0c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100a0c:	e7fe      	b.n	8100a0c <ADC3_IRQHandler>
	...

08100a10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100a10:	b580      	push	{r7, lr}
 8100a12:	b082      	sub	sp, #8
 8100a14:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8100a16:	4b28      	ldr	r3, [pc, #160]	; (8100ab8 <HAL_Init+0xa8>)
 8100a18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100a1c:	4a26      	ldr	r2, [pc, #152]	; (8100ab8 <HAL_Init+0xa8>)
 8100a1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8100a22:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100a26:	4b24      	ldr	r3, [pc, #144]	; (8100ab8 <HAL_Init+0xa8>)
 8100a28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100a2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8100a30:	603b      	str	r3, [r7, #0]
 8100a32:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100a34:	4b21      	ldr	r3, [pc, #132]	; (8100abc <HAL_Init+0xac>)
 8100a36:	681b      	ldr	r3, [r3, #0]
 8100a38:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8100a3c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8100a40:	4a1e      	ldr	r2, [pc, #120]	; (8100abc <HAL_Init+0xac>)
 8100a42:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8100a46:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100a48:	4b1c      	ldr	r3, [pc, #112]	; (8100abc <HAL_Init+0xac>)
 8100a4a:	681b      	ldr	r3, [r3, #0]
 8100a4c:	4a1b      	ldr	r2, [pc, #108]	; (8100abc <HAL_Init+0xac>)
 8100a4e:	f043 0301 	orr.w	r3, r3, #1
 8100a52:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100a54:	2003      	movs	r0, #3
 8100a56:	f000 f95f 	bl	8100d18 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100a5a:	f001 f8fb 	bl	8101c54 <HAL_RCC_GetSysClockFreq>
 8100a5e:	4602      	mov	r2, r0
 8100a60:	4b15      	ldr	r3, [pc, #84]	; (8100ab8 <HAL_Init+0xa8>)
 8100a62:	699b      	ldr	r3, [r3, #24]
 8100a64:	0a1b      	lsrs	r3, r3, #8
 8100a66:	f003 030f 	and.w	r3, r3, #15
 8100a6a:	4915      	ldr	r1, [pc, #84]	; (8100ac0 <HAL_Init+0xb0>)
 8100a6c:	5ccb      	ldrb	r3, [r1, r3]
 8100a6e:	f003 031f 	and.w	r3, r3, #31
 8100a72:	fa22 f303 	lsr.w	r3, r2, r3
 8100a76:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100a78:	4b0f      	ldr	r3, [pc, #60]	; (8100ab8 <HAL_Init+0xa8>)
 8100a7a:	699b      	ldr	r3, [r3, #24]
 8100a7c:	f003 030f 	and.w	r3, r3, #15
 8100a80:	4a0f      	ldr	r2, [pc, #60]	; (8100ac0 <HAL_Init+0xb0>)
 8100a82:	5cd3      	ldrb	r3, [r2, r3]
 8100a84:	f003 031f 	and.w	r3, r3, #31
 8100a88:	687a      	ldr	r2, [r7, #4]
 8100a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8100a8e:	4a0d      	ldr	r2, [pc, #52]	; (8100ac4 <HAL_Init+0xb4>)
 8100a90:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8100a92:	4b0c      	ldr	r3, [pc, #48]	; (8100ac4 <HAL_Init+0xb4>)
 8100a94:	681b      	ldr	r3, [r3, #0]
 8100a96:	4a0c      	ldr	r2, [pc, #48]	; (8100ac8 <HAL_Init+0xb8>)
 8100a98:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100a9a:	2000      	movs	r0, #0
 8100a9c:	f000 f816 	bl	8100acc <HAL_InitTick>
 8100aa0:	4603      	mov	r3, r0
 8100aa2:	2b00      	cmp	r3, #0
 8100aa4:	d001      	beq.n	8100aaa <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8100aa6:	2301      	movs	r3, #1
 8100aa8:	e002      	b.n	8100ab0 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100aaa:	f7ff fe4d 	bl	8100748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8100aae:	2300      	movs	r3, #0
}
 8100ab0:	4618      	mov	r0, r3
 8100ab2:	3708      	adds	r7, #8
 8100ab4:	46bd      	mov	sp, r7
 8100ab6:	bd80      	pop	{r7, pc}
 8100ab8:	58024400 	.word	0x58024400
 8100abc:	40024400 	.word	0x40024400
 8100ac0:	08103c6c 	.word	0x08103c6c
 8100ac4:	10000004 	.word	0x10000004
 8100ac8:	10000000 	.word	0x10000000

08100acc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100acc:	b580      	push	{r7, lr}
 8100ace:	b082      	sub	sp, #8
 8100ad0:	af00      	add	r7, sp, #0
 8100ad2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8100ad4:	4b15      	ldr	r3, [pc, #84]	; (8100b2c <HAL_InitTick+0x60>)
 8100ad6:	781b      	ldrb	r3, [r3, #0]
 8100ad8:	2b00      	cmp	r3, #0
 8100ada:	d101      	bne.n	8100ae0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8100adc:	2301      	movs	r3, #1
 8100ade:	e021      	b.n	8100b24 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8100ae0:	4b13      	ldr	r3, [pc, #76]	; (8100b30 <HAL_InitTick+0x64>)
 8100ae2:	681a      	ldr	r2, [r3, #0]
 8100ae4:	4b11      	ldr	r3, [pc, #68]	; (8100b2c <HAL_InitTick+0x60>)
 8100ae6:	781b      	ldrb	r3, [r3, #0]
 8100ae8:	4619      	mov	r1, r3
 8100aea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8100aee:	fbb3 f3f1 	udiv	r3, r3, r1
 8100af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8100af6:	4618      	mov	r0, r3
 8100af8:	f000 f941 	bl	8100d7e <HAL_SYSTICK_Config>
 8100afc:	4603      	mov	r3, r0
 8100afe:	2b00      	cmp	r3, #0
 8100b00:	d001      	beq.n	8100b06 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8100b02:	2301      	movs	r3, #1
 8100b04:	e00e      	b.n	8100b24 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100b06:	687b      	ldr	r3, [r7, #4]
 8100b08:	2b0f      	cmp	r3, #15
 8100b0a:	d80a      	bhi.n	8100b22 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8100b0c:	2200      	movs	r2, #0
 8100b0e:	6879      	ldr	r1, [r7, #4]
 8100b10:	f04f 30ff 	mov.w	r0, #4294967295
 8100b14:	f000 f90b 	bl	8100d2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8100b18:	4a06      	ldr	r2, [pc, #24]	; (8100b34 <HAL_InitTick+0x68>)
 8100b1a:	687b      	ldr	r3, [r7, #4]
 8100b1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8100b1e:	2300      	movs	r3, #0
 8100b20:	e000      	b.n	8100b24 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8100b22:	2301      	movs	r3, #1
}
 8100b24:	4618      	mov	r0, r3
 8100b26:	3708      	adds	r7, #8
 8100b28:	46bd      	mov	sp, r7
 8100b2a:	bd80      	pop	{r7, pc}
 8100b2c:	1000000c 	.word	0x1000000c
 8100b30:	10000000 	.word	0x10000000
 8100b34:	10000008 	.word	0x10000008

08100b38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100b38:	b480      	push	{r7}
 8100b3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100b3c:	4b06      	ldr	r3, [pc, #24]	; (8100b58 <HAL_IncTick+0x20>)
 8100b3e:	781b      	ldrb	r3, [r3, #0]
 8100b40:	461a      	mov	r2, r3
 8100b42:	4b06      	ldr	r3, [pc, #24]	; (8100b5c <HAL_IncTick+0x24>)
 8100b44:	681b      	ldr	r3, [r3, #0]
 8100b46:	4413      	add	r3, r2
 8100b48:	4a04      	ldr	r2, [pc, #16]	; (8100b5c <HAL_IncTick+0x24>)
 8100b4a:	6013      	str	r3, [r2, #0]
}
 8100b4c:	bf00      	nop
 8100b4e:	46bd      	mov	sp, r7
 8100b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b54:	4770      	bx	lr
 8100b56:	bf00      	nop
 8100b58:	1000000c 	.word	0x1000000c
 8100b5c:	10000120 	.word	0x10000120

08100b60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8100b60:	b480      	push	{r7}
 8100b62:	af00      	add	r7, sp, #0
  return uwTick;
 8100b64:	4b03      	ldr	r3, [pc, #12]	; (8100b74 <HAL_GetTick+0x14>)
 8100b66:	681b      	ldr	r3, [r3, #0]
}
 8100b68:	4618      	mov	r0, r3
 8100b6a:	46bd      	mov	sp, r7
 8100b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b70:	4770      	bx	lr
 8100b72:	bf00      	nop
 8100b74:	10000120 	.word	0x10000120

08100b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100b78:	b480      	push	{r7}
 8100b7a:	b085      	sub	sp, #20
 8100b7c:	af00      	add	r7, sp, #0
 8100b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100b80:	687b      	ldr	r3, [r7, #4]
 8100b82:	f003 0307 	and.w	r3, r3, #7
 8100b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100b88:	4b0c      	ldr	r3, [pc, #48]	; (8100bbc <__NVIC_SetPriorityGrouping+0x44>)
 8100b8a:	68db      	ldr	r3, [r3, #12]
 8100b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100b8e:	68ba      	ldr	r2, [r7, #8]
 8100b90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8100b94:	4013      	ands	r3, r2
 8100b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100b98:	68fb      	ldr	r3, [r7, #12]
 8100b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100b9c:	68bb      	ldr	r3, [r7, #8]
 8100b9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100ba0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8100ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8100ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8100baa:	4a04      	ldr	r2, [pc, #16]	; (8100bbc <__NVIC_SetPriorityGrouping+0x44>)
 8100bac:	68bb      	ldr	r3, [r7, #8]
 8100bae:	60d3      	str	r3, [r2, #12]
}
 8100bb0:	bf00      	nop
 8100bb2:	3714      	adds	r7, #20
 8100bb4:	46bd      	mov	sp, r7
 8100bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100bba:	4770      	bx	lr
 8100bbc:	e000ed00 	.word	0xe000ed00

08100bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8100bc0:	b480      	push	{r7}
 8100bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100bc4:	4b04      	ldr	r3, [pc, #16]	; (8100bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8100bc6:	68db      	ldr	r3, [r3, #12]
 8100bc8:	0a1b      	lsrs	r3, r3, #8
 8100bca:	f003 0307 	and.w	r3, r3, #7
}
 8100bce:	4618      	mov	r0, r3
 8100bd0:	46bd      	mov	sp, r7
 8100bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100bd6:	4770      	bx	lr
 8100bd8:	e000ed00 	.word	0xe000ed00

08100bdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100bdc:	b480      	push	{r7}
 8100bde:	b083      	sub	sp, #12
 8100be0:	af00      	add	r7, sp, #0
 8100be2:	4603      	mov	r3, r0
 8100be4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100be6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100bea:	2b00      	cmp	r3, #0
 8100bec:	db0b      	blt.n	8100c06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8100bee:	88fb      	ldrh	r3, [r7, #6]
 8100bf0:	f003 021f 	and.w	r2, r3, #31
 8100bf4:	4907      	ldr	r1, [pc, #28]	; (8100c14 <__NVIC_EnableIRQ+0x38>)
 8100bf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100bfa:	095b      	lsrs	r3, r3, #5
 8100bfc:	2001      	movs	r0, #1
 8100bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8100c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8100c06:	bf00      	nop
 8100c08:	370c      	adds	r7, #12
 8100c0a:	46bd      	mov	sp, r7
 8100c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c10:	4770      	bx	lr
 8100c12:	bf00      	nop
 8100c14:	e000e100 	.word	0xe000e100

08100c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8100c18:	b480      	push	{r7}
 8100c1a:	b083      	sub	sp, #12
 8100c1c:	af00      	add	r7, sp, #0
 8100c1e:	4603      	mov	r3, r0
 8100c20:	6039      	str	r1, [r7, #0]
 8100c22:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100c24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100c28:	2b00      	cmp	r3, #0
 8100c2a:	db0a      	blt.n	8100c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100c2c:	683b      	ldr	r3, [r7, #0]
 8100c2e:	b2da      	uxtb	r2, r3
 8100c30:	490c      	ldr	r1, [pc, #48]	; (8100c64 <__NVIC_SetPriority+0x4c>)
 8100c32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100c36:	0112      	lsls	r2, r2, #4
 8100c38:	b2d2      	uxtb	r2, r2
 8100c3a:	440b      	add	r3, r1
 8100c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100c40:	e00a      	b.n	8100c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100c42:	683b      	ldr	r3, [r7, #0]
 8100c44:	b2da      	uxtb	r2, r3
 8100c46:	4908      	ldr	r1, [pc, #32]	; (8100c68 <__NVIC_SetPriority+0x50>)
 8100c48:	88fb      	ldrh	r3, [r7, #6]
 8100c4a:	f003 030f 	and.w	r3, r3, #15
 8100c4e:	3b04      	subs	r3, #4
 8100c50:	0112      	lsls	r2, r2, #4
 8100c52:	b2d2      	uxtb	r2, r2
 8100c54:	440b      	add	r3, r1
 8100c56:	761a      	strb	r2, [r3, #24]
}
 8100c58:	bf00      	nop
 8100c5a:	370c      	adds	r7, #12
 8100c5c:	46bd      	mov	sp, r7
 8100c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c62:	4770      	bx	lr
 8100c64:	e000e100 	.word	0xe000e100
 8100c68:	e000ed00 	.word	0xe000ed00

08100c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100c6c:	b480      	push	{r7}
 8100c6e:	b089      	sub	sp, #36	; 0x24
 8100c70:	af00      	add	r7, sp, #0
 8100c72:	60f8      	str	r0, [r7, #12]
 8100c74:	60b9      	str	r1, [r7, #8]
 8100c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8100c78:	68fb      	ldr	r3, [r7, #12]
 8100c7a:	f003 0307 	and.w	r3, r3, #7
 8100c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100c80:	69fb      	ldr	r3, [r7, #28]
 8100c82:	f1c3 0307 	rsb	r3, r3, #7
 8100c86:	2b04      	cmp	r3, #4
 8100c88:	bf28      	it	cs
 8100c8a:	2304      	movcs	r3, #4
 8100c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8100c8e:	69fb      	ldr	r3, [r7, #28]
 8100c90:	3304      	adds	r3, #4
 8100c92:	2b06      	cmp	r3, #6
 8100c94:	d902      	bls.n	8100c9c <NVIC_EncodePriority+0x30>
 8100c96:	69fb      	ldr	r3, [r7, #28]
 8100c98:	3b03      	subs	r3, #3
 8100c9a:	e000      	b.n	8100c9e <NVIC_EncodePriority+0x32>
 8100c9c:	2300      	movs	r3, #0
 8100c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8100ca4:	69bb      	ldr	r3, [r7, #24]
 8100ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8100caa:	43da      	mvns	r2, r3
 8100cac:	68bb      	ldr	r3, [r7, #8]
 8100cae:	401a      	ands	r2, r3
 8100cb0:	697b      	ldr	r3, [r7, #20]
 8100cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8100cb8:	697b      	ldr	r3, [r7, #20]
 8100cba:	fa01 f303 	lsl.w	r3, r1, r3
 8100cbe:	43d9      	mvns	r1, r3
 8100cc0:	687b      	ldr	r3, [r7, #4]
 8100cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100cc4:	4313      	orrs	r3, r2
         );
}
 8100cc6:	4618      	mov	r0, r3
 8100cc8:	3724      	adds	r7, #36	; 0x24
 8100cca:	46bd      	mov	sp, r7
 8100ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100cd0:	4770      	bx	lr
	...

08100cd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8100cd4:	b580      	push	{r7, lr}
 8100cd6:	b082      	sub	sp, #8
 8100cd8:	af00      	add	r7, sp, #0
 8100cda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8100cdc:	687b      	ldr	r3, [r7, #4]
 8100cde:	3b01      	subs	r3, #1
 8100ce0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8100ce4:	d301      	bcc.n	8100cea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8100ce6:	2301      	movs	r3, #1
 8100ce8:	e00f      	b.n	8100d0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8100cea:	4a0a      	ldr	r2, [pc, #40]	; (8100d14 <SysTick_Config+0x40>)
 8100cec:	687b      	ldr	r3, [r7, #4]
 8100cee:	3b01      	subs	r3, #1
 8100cf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8100cf2:	210f      	movs	r1, #15
 8100cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8100cf8:	f7ff ff8e 	bl	8100c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8100cfc:	4b05      	ldr	r3, [pc, #20]	; (8100d14 <SysTick_Config+0x40>)
 8100cfe:	2200      	movs	r2, #0
 8100d00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8100d02:	4b04      	ldr	r3, [pc, #16]	; (8100d14 <SysTick_Config+0x40>)
 8100d04:	2207      	movs	r2, #7
 8100d06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8100d08:	2300      	movs	r3, #0
}
 8100d0a:	4618      	mov	r0, r3
 8100d0c:	3708      	adds	r7, #8
 8100d0e:	46bd      	mov	sp, r7
 8100d10:	bd80      	pop	{r7, pc}
 8100d12:	bf00      	nop
 8100d14:	e000e010 	.word	0xe000e010

08100d18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100d18:	b580      	push	{r7, lr}
 8100d1a:	b082      	sub	sp, #8
 8100d1c:	af00      	add	r7, sp, #0
 8100d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100d20:	6878      	ldr	r0, [r7, #4]
 8100d22:	f7ff ff29 	bl	8100b78 <__NVIC_SetPriorityGrouping>
}
 8100d26:	bf00      	nop
 8100d28:	3708      	adds	r7, #8
 8100d2a:	46bd      	mov	sp, r7
 8100d2c:	bd80      	pop	{r7, pc}

08100d2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100d2e:	b580      	push	{r7, lr}
 8100d30:	b086      	sub	sp, #24
 8100d32:	af00      	add	r7, sp, #0
 8100d34:	4603      	mov	r3, r0
 8100d36:	60b9      	str	r1, [r7, #8]
 8100d38:	607a      	str	r2, [r7, #4]
 8100d3a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8100d3c:	f7ff ff40 	bl	8100bc0 <__NVIC_GetPriorityGrouping>
 8100d40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100d42:	687a      	ldr	r2, [r7, #4]
 8100d44:	68b9      	ldr	r1, [r7, #8]
 8100d46:	6978      	ldr	r0, [r7, #20]
 8100d48:	f7ff ff90 	bl	8100c6c <NVIC_EncodePriority>
 8100d4c:	4602      	mov	r2, r0
 8100d4e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100d52:	4611      	mov	r1, r2
 8100d54:	4618      	mov	r0, r3
 8100d56:	f7ff ff5f 	bl	8100c18 <__NVIC_SetPriority>
}
 8100d5a:	bf00      	nop
 8100d5c:	3718      	adds	r7, #24
 8100d5e:	46bd      	mov	sp, r7
 8100d60:	bd80      	pop	{r7, pc}

08100d62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100d62:	b580      	push	{r7, lr}
 8100d64:	b082      	sub	sp, #8
 8100d66:	af00      	add	r7, sp, #0
 8100d68:	4603      	mov	r3, r0
 8100d6a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8100d6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100d70:	4618      	mov	r0, r3
 8100d72:	f7ff ff33 	bl	8100bdc <__NVIC_EnableIRQ>
}
 8100d76:	bf00      	nop
 8100d78:	3708      	adds	r7, #8
 8100d7a:	46bd      	mov	sp, r7
 8100d7c:	bd80      	pop	{r7, pc}

08100d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8100d7e:	b580      	push	{r7, lr}
 8100d80:	b082      	sub	sp, #8
 8100d82:	af00      	add	r7, sp, #0
 8100d84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8100d86:	6878      	ldr	r0, [r7, #4]
 8100d88:	f7ff ffa4 	bl	8100cd4 <SysTick_Config>
 8100d8c:	4603      	mov	r3, r0
}
 8100d8e:	4618      	mov	r0, r3
 8100d90:	3708      	adds	r7, #8
 8100d92:	46bd      	mov	sp, r7
 8100d94:	bd80      	pop	{r7, pc}
	...

08100d98 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8100d98:	b480      	push	{r7}
 8100d9a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100d9c:	4b07      	ldr	r3, [pc, #28]	; (8100dbc <HAL_GetCurrentCPUID+0x24>)
 8100d9e:	681b      	ldr	r3, [r3, #0]
 8100da0:	091b      	lsrs	r3, r3, #4
 8100da2:	f003 030f 	and.w	r3, r3, #15
 8100da6:	2b07      	cmp	r3, #7
 8100da8:	d101      	bne.n	8100dae <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8100daa:	2303      	movs	r3, #3
 8100dac:	e000      	b.n	8100db0 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8100dae:	2301      	movs	r3, #1
  }
}
 8100db0:	4618      	mov	r0, r3
 8100db2:	46bd      	mov	sp, r7
 8100db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100db8:	4770      	bx	lr
 8100dba:	bf00      	nop
 8100dbc:	e000ed00 	.word	0xe000ed00

08100dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8100dc0:	b480      	push	{r7}
 8100dc2:	b089      	sub	sp, #36	; 0x24
 8100dc4:	af00      	add	r7, sp, #0
 8100dc6:	6078      	str	r0, [r7, #4]
 8100dc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8100dca:	2300      	movs	r3, #0
 8100dcc:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8100dce:	4b89      	ldr	r3, [pc, #548]	; (8100ff4 <HAL_GPIO_Init+0x234>)
 8100dd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100dd2:	e194      	b.n	81010fe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8100dd4:	683b      	ldr	r3, [r7, #0]
 8100dd6:	681a      	ldr	r2, [r3, #0]
 8100dd8:	2101      	movs	r1, #1
 8100dda:	69fb      	ldr	r3, [r7, #28]
 8100ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8100de0:	4013      	ands	r3, r2
 8100de2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8100de4:	693b      	ldr	r3, [r7, #16]
 8100de6:	2b00      	cmp	r3, #0
 8100de8:	f000 8186 	beq.w	81010f8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8100dec:	683b      	ldr	r3, [r7, #0]
 8100dee:	685b      	ldr	r3, [r3, #4]
 8100df0:	f003 0303 	and.w	r3, r3, #3
 8100df4:	2b01      	cmp	r3, #1
 8100df6:	d005      	beq.n	8100e04 <HAL_GPIO_Init+0x44>
 8100df8:	683b      	ldr	r3, [r7, #0]
 8100dfa:	685b      	ldr	r3, [r3, #4]
 8100dfc:	f003 0303 	and.w	r3, r3, #3
 8100e00:	2b02      	cmp	r3, #2
 8100e02:	d130      	bne.n	8100e66 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8100e04:	687b      	ldr	r3, [r7, #4]
 8100e06:	689b      	ldr	r3, [r3, #8]
 8100e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8100e0a:	69fb      	ldr	r3, [r7, #28]
 8100e0c:	005b      	lsls	r3, r3, #1
 8100e0e:	2203      	movs	r2, #3
 8100e10:	fa02 f303 	lsl.w	r3, r2, r3
 8100e14:	43db      	mvns	r3, r3
 8100e16:	69ba      	ldr	r2, [r7, #24]
 8100e18:	4013      	ands	r3, r2
 8100e1a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8100e1c:	683b      	ldr	r3, [r7, #0]
 8100e1e:	68da      	ldr	r2, [r3, #12]
 8100e20:	69fb      	ldr	r3, [r7, #28]
 8100e22:	005b      	lsls	r3, r3, #1
 8100e24:	fa02 f303 	lsl.w	r3, r2, r3
 8100e28:	69ba      	ldr	r2, [r7, #24]
 8100e2a:	4313      	orrs	r3, r2
 8100e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8100e2e:	687b      	ldr	r3, [r7, #4]
 8100e30:	69ba      	ldr	r2, [r7, #24]
 8100e32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8100e34:	687b      	ldr	r3, [r7, #4]
 8100e36:	685b      	ldr	r3, [r3, #4]
 8100e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8100e3a:	2201      	movs	r2, #1
 8100e3c:	69fb      	ldr	r3, [r7, #28]
 8100e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8100e42:	43db      	mvns	r3, r3
 8100e44:	69ba      	ldr	r2, [r7, #24]
 8100e46:	4013      	ands	r3, r2
 8100e48:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8100e4a:	683b      	ldr	r3, [r7, #0]
 8100e4c:	685b      	ldr	r3, [r3, #4]
 8100e4e:	091b      	lsrs	r3, r3, #4
 8100e50:	f003 0201 	and.w	r2, r3, #1
 8100e54:	69fb      	ldr	r3, [r7, #28]
 8100e56:	fa02 f303 	lsl.w	r3, r2, r3
 8100e5a:	69ba      	ldr	r2, [r7, #24]
 8100e5c:	4313      	orrs	r3, r2
 8100e5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8100e60:	687b      	ldr	r3, [r7, #4]
 8100e62:	69ba      	ldr	r2, [r7, #24]
 8100e64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8100e66:	683b      	ldr	r3, [r7, #0]
 8100e68:	685b      	ldr	r3, [r3, #4]
 8100e6a:	f003 0303 	and.w	r3, r3, #3
 8100e6e:	2b03      	cmp	r3, #3
 8100e70:	d017      	beq.n	8100ea2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8100e72:	687b      	ldr	r3, [r7, #4]
 8100e74:	68db      	ldr	r3, [r3, #12]
 8100e76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8100e78:	69fb      	ldr	r3, [r7, #28]
 8100e7a:	005b      	lsls	r3, r3, #1
 8100e7c:	2203      	movs	r2, #3
 8100e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8100e82:	43db      	mvns	r3, r3
 8100e84:	69ba      	ldr	r2, [r7, #24]
 8100e86:	4013      	ands	r3, r2
 8100e88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8100e8a:	683b      	ldr	r3, [r7, #0]
 8100e8c:	689a      	ldr	r2, [r3, #8]
 8100e8e:	69fb      	ldr	r3, [r7, #28]
 8100e90:	005b      	lsls	r3, r3, #1
 8100e92:	fa02 f303 	lsl.w	r3, r2, r3
 8100e96:	69ba      	ldr	r2, [r7, #24]
 8100e98:	4313      	orrs	r3, r2
 8100e9a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8100e9c:	687b      	ldr	r3, [r7, #4]
 8100e9e:	69ba      	ldr	r2, [r7, #24]
 8100ea0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8100ea2:	683b      	ldr	r3, [r7, #0]
 8100ea4:	685b      	ldr	r3, [r3, #4]
 8100ea6:	f003 0303 	and.w	r3, r3, #3
 8100eaa:	2b02      	cmp	r3, #2
 8100eac:	d123      	bne.n	8100ef6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8100eae:	69fb      	ldr	r3, [r7, #28]
 8100eb0:	08da      	lsrs	r2, r3, #3
 8100eb2:	687b      	ldr	r3, [r7, #4]
 8100eb4:	3208      	adds	r2, #8
 8100eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8100eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8100ebc:	69fb      	ldr	r3, [r7, #28]
 8100ebe:	f003 0307 	and.w	r3, r3, #7
 8100ec2:	009b      	lsls	r3, r3, #2
 8100ec4:	220f      	movs	r2, #15
 8100ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8100eca:	43db      	mvns	r3, r3
 8100ecc:	69ba      	ldr	r2, [r7, #24]
 8100ece:	4013      	ands	r3, r2
 8100ed0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8100ed2:	683b      	ldr	r3, [r7, #0]
 8100ed4:	691a      	ldr	r2, [r3, #16]
 8100ed6:	69fb      	ldr	r3, [r7, #28]
 8100ed8:	f003 0307 	and.w	r3, r3, #7
 8100edc:	009b      	lsls	r3, r3, #2
 8100ede:	fa02 f303 	lsl.w	r3, r2, r3
 8100ee2:	69ba      	ldr	r2, [r7, #24]
 8100ee4:	4313      	orrs	r3, r2
 8100ee6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8100ee8:	69fb      	ldr	r3, [r7, #28]
 8100eea:	08da      	lsrs	r2, r3, #3
 8100eec:	687b      	ldr	r3, [r7, #4]
 8100eee:	3208      	adds	r2, #8
 8100ef0:	69b9      	ldr	r1, [r7, #24]
 8100ef2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8100ef6:	687b      	ldr	r3, [r7, #4]
 8100ef8:	681b      	ldr	r3, [r3, #0]
 8100efa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8100efc:	69fb      	ldr	r3, [r7, #28]
 8100efe:	005b      	lsls	r3, r3, #1
 8100f00:	2203      	movs	r2, #3
 8100f02:	fa02 f303 	lsl.w	r3, r2, r3
 8100f06:	43db      	mvns	r3, r3
 8100f08:	69ba      	ldr	r2, [r7, #24]
 8100f0a:	4013      	ands	r3, r2
 8100f0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8100f0e:	683b      	ldr	r3, [r7, #0]
 8100f10:	685b      	ldr	r3, [r3, #4]
 8100f12:	f003 0203 	and.w	r2, r3, #3
 8100f16:	69fb      	ldr	r3, [r7, #28]
 8100f18:	005b      	lsls	r3, r3, #1
 8100f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8100f1e:	69ba      	ldr	r2, [r7, #24]
 8100f20:	4313      	orrs	r3, r2
 8100f22:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8100f24:	687b      	ldr	r3, [r7, #4]
 8100f26:	69ba      	ldr	r2, [r7, #24]
 8100f28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8100f2a:	683b      	ldr	r3, [r7, #0]
 8100f2c:	685b      	ldr	r3, [r3, #4]
 8100f2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8100f32:	2b00      	cmp	r3, #0
 8100f34:	f000 80e0 	beq.w	81010f8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100f38:	4b2f      	ldr	r3, [pc, #188]	; (8100ff8 <HAL_GPIO_Init+0x238>)
 8100f3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100f3e:	4a2e      	ldr	r2, [pc, #184]	; (8100ff8 <HAL_GPIO_Init+0x238>)
 8100f40:	f043 0302 	orr.w	r3, r3, #2
 8100f44:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100f48:	4b2b      	ldr	r3, [pc, #172]	; (8100ff8 <HAL_GPIO_Init+0x238>)
 8100f4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100f4e:	f003 0302 	and.w	r3, r3, #2
 8100f52:	60fb      	str	r3, [r7, #12]
 8100f54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8100f56:	4a29      	ldr	r2, [pc, #164]	; (8100ffc <HAL_GPIO_Init+0x23c>)
 8100f58:	69fb      	ldr	r3, [r7, #28]
 8100f5a:	089b      	lsrs	r3, r3, #2
 8100f5c:	3302      	adds	r3, #2
 8100f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8100f64:	69fb      	ldr	r3, [r7, #28]
 8100f66:	f003 0303 	and.w	r3, r3, #3
 8100f6a:	009b      	lsls	r3, r3, #2
 8100f6c:	220f      	movs	r2, #15
 8100f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8100f72:	43db      	mvns	r3, r3
 8100f74:	69ba      	ldr	r2, [r7, #24]
 8100f76:	4013      	ands	r3, r2
 8100f78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8100f7a:	687b      	ldr	r3, [r7, #4]
 8100f7c:	4a20      	ldr	r2, [pc, #128]	; (8101000 <HAL_GPIO_Init+0x240>)
 8100f7e:	4293      	cmp	r3, r2
 8100f80:	d052      	beq.n	8101028 <HAL_GPIO_Init+0x268>
 8100f82:	687b      	ldr	r3, [r7, #4]
 8100f84:	4a1f      	ldr	r2, [pc, #124]	; (8101004 <HAL_GPIO_Init+0x244>)
 8100f86:	4293      	cmp	r3, r2
 8100f88:	d031      	beq.n	8100fee <HAL_GPIO_Init+0x22e>
 8100f8a:	687b      	ldr	r3, [r7, #4]
 8100f8c:	4a1e      	ldr	r2, [pc, #120]	; (8101008 <HAL_GPIO_Init+0x248>)
 8100f8e:	4293      	cmp	r3, r2
 8100f90:	d02b      	beq.n	8100fea <HAL_GPIO_Init+0x22a>
 8100f92:	687b      	ldr	r3, [r7, #4]
 8100f94:	4a1d      	ldr	r2, [pc, #116]	; (810100c <HAL_GPIO_Init+0x24c>)
 8100f96:	4293      	cmp	r3, r2
 8100f98:	d025      	beq.n	8100fe6 <HAL_GPIO_Init+0x226>
 8100f9a:	687b      	ldr	r3, [r7, #4]
 8100f9c:	4a1c      	ldr	r2, [pc, #112]	; (8101010 <HAL_GPIO_Init+0x250>)
 8100f9e:	4293      	cmp	r3, r2
 8100fa0:	d01f      	beq.n	8100fe2 <HAL_GPIO_Init+0x222>
 8100fa2:	687b      	ldr	r3, [r7, #4]
 8100fa4:	4a1b      	ldr	r2, [pc, #108]	; (8101014 <HAL_GPIO_Init+0x254>)
 8100fa6:	4293      	cmp	r3, r2
 8100fa8:	d019      	beq.n	8100fde <HAL_GPIO_Init+0x21e>
 8100faa:	687b      	ldr	r3, [r7, #4]
 8100fac:	4a1a      	ldr	r2, [pc, #104]	; (8101018 <HAL_GPIO_Init+0x258>)
 8100fae:	4293      	cmp	r3, r2
 8100fb0:	d013      	beq.n	8100fda <HAL_GPIO_Init+0x21a>
 8100fb2:	687b      	ldr	r3, [r7, #4]
 8100fb4:	4a19      	ldr	r2, [pc, #100]	; (810101c <HAL_GPIO_Init+0x25c>)
 8100fb6:	4293      	cmp	r3, r2
 8100fb8:	d00d      	beq.n	8100fd6 <HAL_GPIO_Init+0x216>
 8100fba:	687b      	ldr	r3, [r7, #4]
 8100fbc:	4a18      	ldr	r2, [pc, #96]	; (8101020 <HAL_GPIO_Init+0x260>)
 8100fbe:	4293      	cmp	r3, r2
 8100fc0:	d007      	beq.n	8100fd2 <HAL_GPIO_Init+0x212>
 8100fc2:	687b      	ldr	r3, [r7, #4]
 8100fc4:	4a17      	ldr	r2, [pc, #92]	; (8101024 <HAL_GPIO_Init+0x264>)
 8100fc6:	4293      	cmp	r3, r2
 8100fc8:	d101      	bne.n	8100fce <HAL_GPIO_Init+0x20e>
 8100fca:	2309      	movs	r3, #9
 8100fcc:	e02d      	b.n	810102a <HAL_GPIO_Init+0x26a>
 8100fce:	230a      	movs	r3, #10
 8100fd0:	e02b      	b.n	810102a <HAL_GPIO_Init+0x26a>
 8100fd2:	2308      	movs	r3, #8
 8100fd4:	e029      	b.n	810102a <HAL_GPIO_Init+0x26a>
 8100fd6:	2307      	movs	r3, #7
 8100fd8:	e027      	b.n	810102a <HAL_GPIO_Init+0x26a>
 8100fda:	2306      	movs	r3, #6
 8100fdc:	e025      	b.n	810102a <HAL_GPIO_Init+0x26a>
 8100fde:	2305      	movs	r3, #5
 8100fe0:	e023      	b.n	810102a <HAL_GPIO_Init+0x26a>
 8100fe2:	2304      	movs	r3, #4
 8100fe4:	e021      	b.n	810102a <HAL_GPIO_Init+0x26a>
 8100fe6:	2303      	movs	r3, #3
 8100fe8:	e01f      	b.n	810102a <HAL_GPIO_Init+0x26a>
 8100fea:	2302      	movs	r3, #2
 8100fec:	e01d      	b.n	810102a <HAL_GPIO_Init+0x26a>
 8100fee:	2301      	movs	r3, #1
 8100ff0:	e01b      	b.n	810102a <HAL_GPIO_Init+0x26a>
 8100ff2:	bf00      	nop
 8100ff4:	580000c0 	.word	0x580000c0
 8100ff8:	58024400 	.word	0x58024400
 8100ffc:	58000400 	.word	0x58000400
 8101000:	58020000 	.word	0x58020000
 8101004:	58020400 	.word	0x58020400
 8101008:	58020800 	.word	0x58020800
 810100c:	58020c00 	.word	0x58020c00
 8101010:	58021000 	.word	0x58021000
 8101014:	58021400 	.word	0x58021400
 8101018:	58021800 	.word	0x58021800
 810101c:	58021c00 	.word	0x58021c00
 8101020:	58022000 	.word	0x58022000
 8101024:	58022400 	.word	0x58022400
 8101028:	2300      	movs	r3, #0
 810102a:	69fa      	ldr	r2, [r7, #28]
 810102c:	f002 0203 	and.w	r2, r2, #3
 8101030:	0092      	lsls	r2, r2, #2
 8101032:	4093      	lsls	r3, r2
 8101034:	69ba      	ldr	r2, [r7, #24]
 8101036:	4313      	orrs	r3, r2
 8101038:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810103a:	4938      	ldr	r1, [pc, #224]	; (810111c <HAL_GPIO_Init+0x35c>)
 810103c:	69fb      	ldr	r3, [r7, #28]
 810103e:	089b      	lsrs	r3, r3, #2
 8101040:	3302      	adds	r3, #2
 8101042:	69ba      	ldr	r2, [r7, #24]
 8101044:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8101048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810104c:	681b      	ldr	r3, [r3, #0]
 810104e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101050:	693b      	ldr	r3, [r7, #16]
 8101052:	43db      	mvns	r3, r3
 8101054:	69ba      	ldr	r2, [r7, #24]
 8101056:	4013      	ands	r3, r2
 8101058:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 810105a:	683b      	ldr	r3, [r7, #0]
 810105c:	685b      	ldr	r3, [r3, #4]
 810105e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8101062:	2b00      	cmp	r3, #0
 8101064:	d003      	beq.n	810106e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8101066:	69ba      	ldr	r2, [r7, #24]
 8101068:	693b      	ldr	r3, [r7, #16]
 810106a:	4313      	orrs	r3, r2
 810106c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 810106e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101072:	69bb      	ldr	r3, [r7, #24]
 8101074:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8101076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810107a:	685b      	ldr	r3, [r3, #4]
 810107c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810107e:	693b      	ldr	r3, [r7, #16]
 8101080:	43db      	mvns	r3, r3
 8101082:	69ba      	ldr	r2, [r7, #24]
 8101084:	4013      	ands	r3, r2
 8101086:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8101088:	683b      	ldr	r3, [r7, #0]
 810108a:	685b      	ldr	r3, [r3, #4]
 810108c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101090:	2b00      	cmp	r3, #0
 8101092:	d003      	beq.n	810109c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8101094:	69ba      	ldr	r2, [r7, #24]
 8101096:	693b      	ldr	r3, [r7, #16]
 8101098:	4313      	orrs	r3, r2
 810109a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 810109c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81010a0:	69bb      	ldr	r3, [r7, #24]
 81010a2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 81010a4:	697b      	ldr	r3, [r7, #20]
 81010a6:	685b      	ldr	r3, [r3, #4]
 81010a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81010aa:	693b      	ldr	r3, [r7, #16]
 81010ac:	43db      	mvns	r3, r3
 81010ae:	69ba      	ldr	r2, [r7, #24]
 81010b0:	4013      	ands	r3, r2
 81010b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 81010b4:	683b      	ldr	r3, [r7, #0]
 81010b6:	685b      	ldr	r3, [r3, #4]
 81010b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81010bc:	2b00      	cmp	r3, #0
 81010be:	d003      	beq.n	81010c8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 81010c0:	69ba      	ldr	r2, [r7, #24]
 81010c2:	693b      	ldr	r3, [r7, #16]
 81010c4:	4313      	orrs	r3, r2
 81010c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 81010c8:	697b      	ldr	r3, [r7, #20]
 81010ca:	69ba      	ldr	r2, [r7, #24]
 81010cc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 81010ce:	697b      	ldr	r3, [r7, #20]
 81010d0:	681b      	ldr	r3, [r3, #0]
 81010d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81010d4:	693b      	ldr	r3, [r7, #16]
 81010d6:	43db      	mvns	r3, r3
 81010d8:	69ba      	ldr	r2, [r7, #24]
 81010da:	4013      	ands	r3, r2
 81010dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 81010de:	683b      	ldr	r3, [r7, #0]
 81010e0:	685b      	ldr	r3, [r3, #4]
 81010e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81010e6:	2b00      	cmp	r3, #0
 81010e8:	d003      	beq.n	81010f2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 81010ea:	69ba      	ldr	r2, [r7, #24]
 81010ec:	693b      	ldr	r3, [r7, #16]
 81010ee:	4313      	orrs	r3, r2
 81010f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81010f2:	697b      	ldr	r3, [r7, #20]
 81010f4:	69ba      	ldr	r2, [r7, #24]
 81010f6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 81010f8:	69fb      	ldr	r3, [r7, #28]
 81010fa:	3301      	adds	r3, #1
 81010fc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81010fe:	683b      	ldr	r3, [r7, #0]
 8101100:	681a      	ldr	r2, [r3, #0]
 8101102:	69fb      	ldr	r3, [r7, #28]
 8101104:	fa22 f303 	lsr.w	r3, r2, r3
 8101108:	2b00      	cmp	r3, #0
 810110a:	f47f ae63 	bne.w	8100dd4 <HAL_GPIO_Init+0x14>
  }
}
 810110e:	bf00      	nop
 8101110:	bf00      	nop
 8101112:	3724      	adds	r7, #36	; 0x24
 8101114:	46bd      	mov	sp, r7
 8101116:	f85d 7b04 	ldr.w	r7, [sp], #4
 810111a:	4770      	bx	lr
 810111c:	58000400 	.word	0x58000400

08101120 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8101120:	b480      	push	{r7}
 8101122:	b083      	sub	sp, #12
 8101124:	af00      	add	r7, sp, #0
 8101126:	6078      	str	r0, [r7, #4]
 8101128:	460b      	mov	r3, r1
 810112a:	807b      	strh	r3, [r7, #2]
 810112c:	4613      	mov	r3, r2
 810112e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8101130:	787b      	ldrb	r3, [r7, #1]
 8101132:	2b00      	cmp	r3, #0
 8101134:	d003      	beq.n	810113e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8101136:	887a      	ldrh	r2, [r7, #2]
 8101138:	687b      	ldr	r3, [r7, #4]
 810113a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 810113c:	e003      	b.n	8101146 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 810113e:	887b      	ldrh	r3, [r7, #2]
 8101140:	041a      	lsls	r2, r3, #16
 8101142:	687b      	ldr	r3, [r7, #4]
 8101144:	619a      	str	r2, [r3, #24]
}
 8101146:	bf00      	nop
 8101148:	370c      	adds	r7, #12
 810114a:	46bd      	mov	sp, r7
 810114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101150:	4770      	bx	lr

08101152 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8101152:	b480      	push	{r7}
 8101154:	b085      	sub	sp, #20
 8101156:	af00      	add	r7, sp, #0
 8101158:	6078      	str	r0, [r7, #4]
 810115a:	460b      	mov	r3, r1
 810115c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 810115e:	687b      	ldr	r3, [r7, #4]
 8101160:	695b      	ldr	r3, [r3, #20]
 8101162:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8101164:	887a      	ldrh	r2, [r7, #2]
 8101166:	68fb      	ldr	r3, [r7, #12]
 8101168:	4013      	ands	r3, r2
 810116a:	041a      	lsls	r2, r3, #16
 810116c:	68fb      	ldr	r3, [r7, #12]
 810116e:	43d9      	mvns	r1, r3
 8101170:	887b      	ldrh	r3, [r7, #2]
 8101172:	400b      	ands	r3, r1
 8101174:	431a      	orrs	r2, r3
 8101176:	687b      	ldr	r3, [r7, #4]
 8101178:	619a      	str	r2, [r3, #24]
}
 810117a:	bf00      	nop
 810117c:	3714      	adds	r7, #20
 810117e:	46bd      	mov	sp, r7
 8101180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101184:	4770      	bx	lr
	...

08101188 <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
 8101188:	b480      	push	{r7}
 810118a:	b083      	sub	sp, #12
 810118c:	af00      	add	r7, sp, #0
 810118e:	6078      	str	r0, [r7, #4]
 8101190:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
 8101192:	490e      	ldr	r1, [pc, #56]	; (81011cc <HAL_HSEM_Take+0x44>)
 8101194:	683b      	ldr	r3, [r7, #0]
 8101196:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 810119a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810119e:	687a      	ldr	r2, [r7, #4]
 81011a0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
 81011a4:	4a09      	ldr	r2, [pc, #36]	; (81011cc <HAL_HSEM_Take+0x44>)
 81011a6:	687b      	ldr	r3, [r7, #4]
 81011a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 81011ac:	683b      	ldr	r3, [r7, #0]
 81011ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 81011b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81011b6:	429a      	cmp	r2, r3
 81011b8:	d101      	bne.n	81011be <HAL_HSEM_Take+0x36>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
 81011ba:	2300      	movs	r3, #0
 81011bc:	e000      	b.n	81011c0 <HAL_HSEM_Take+0x38>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
 81011be:	2301      	movs	r3, #1
}
 81011c0:	4618      	mov	r0, r3
 81011c2:	370c      	adds	r7, #12
 81011c4:	46bd      	mov	sp, r7
 81011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011ca:	4770      	bx	lr
 81011cc:	58026400 	.word	0x58026400

081011d0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 81011d0:	b480      	push	{r7}
 81011d2:	b083      	sub	sp, #12
 81011d4:	af00      	add	r7, sp, #0
 81011d6:	6078      	str	r0, [r7, #4]
 81011d8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 81011da:	4906      	ldr	r1, [pc, #24]	; (81011f4 <HAL_HSEM_Release+0x24>)
 81011dc:	683b      	ldr	r3, [r7, #0]
 81011de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81011e2:	687b      	ldr	r3, [r7, #4]
 81011e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 81011e8:	bf00      	nop
 81011ea:	370c      	adds	r7, #12
 81011ec:	46bd      	mov	sp, r7
 81011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011f2:	4770      	bx	lr
 81011f4:	58026400 	.word	0x58026400

081011f8 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81011f8:	b480      	push	{r7}
 81011fa:	b083      	sub	sp, #12
 81011fc:	af00      	add	r7, sp, #0
 81011fe:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8101200:	4b05      	ldr	r3, [pc, #20]	; (8101218 <HAL_HSEM_ActivateNotification+0x20>)
 8101202:	681a      	ldr	r2, [r3, #0]
 8101204:	4904      	ldr	r1, [pc, #16]	; (8101218 <HAL_HSEM_ActivateNotification+0x20>)
 8101206:	687b      	ldr	r3, [r7, #4]
 8101208:	4313      	orrs	r3, r2
 810120a:	600b      	str	r3, [r1, #0]
#endif
}
 810120c:	bf00      	nop
 810120e:	370c      	adds	r7, #12
 8101210:	46bd      	mov	sp, r7
 8101212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101216:	4770      	bx	lr
 8101218:	58026510 	.word	0x58026510

0810121c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 810121c:	b580      	push	{r7, lr}
 810121e:	b082      	sub	sp, #8
 8101220:	af00      	add	r7, sp, #0
 8101222:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8101224:	687b      	ldr	r3, [r7, #4]
 8101226:	2b00      	cmp	r3, #0
 8101228:	d101      	bne.n	810122e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 810122a:	2301      	movs	r3, #1
 810122c:	e081      	b.n	8101332 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 810122e:	687b      	ldr	r3, [r7, #4]
 8101230:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8101234:	b2db      	uxtb	r3, r3
 8101236:	2b00      	cmp	r3, #0
 8101238:	d106      	bne.n	8101248 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 810123a:	687b      	ldr	r3, [r7, #4]
 810123c:	2200      	movs	r2, #0
 810123e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8101242:	6878      	ldr	r0, [r7, #4]
 8101244:	f7ff fa9a 	bl	810077c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8101248:	687b      	ldr	r3, [r7, #4]
 810124a:	2224      	movs	r2, #36	; 0x24
 810124c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8101250:	687b      	ldr	r3, [r7, #4]
 8101252:	681b      	ldr	r3, [r3, #0]
 8101254:	681a      	ldr	r2, [r3, #0]
 8101256:	687b      	ldr	r3, [r7, #4]
 8101258:	681b      	ldr	r3, [r3, #0]
 810125a:	f022 0201 	bic.w	r2, r2, #1
 810125e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8101260:	687b      	ldr	r3, [r7, #4]
 8101262:	685a      	ldr	r2, [r3, #4]
 8101264:	687b      	ldr	r3, [r7, #4]
 8101266:	681b      	ldr	r3, [r3, #0]
 8101268:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 810126c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 810126e:	687b      	ldr	r3, [r7, #4]
 8101270:	681b      	ldr	r3, [r3, #0]
 8101272:	689a      	ldr	r2, [r3, #8]
 8101274:	687b      	ldr	r3, [r7, #4]
 8101276:	681b      	ldr	r3, [r3, #0]
 8101278:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 810127c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 810127e:	687b      	ldr	r3, [r7, #4]
 8101280:	68db      	ldr	r3, [r3, #12]
 8101282:	2b01      	cmp	r3, #1
 8101284:	d107      	bne.n	8101296 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8101286:	687b      	ldr	r3, [r7, #4]
 8101288:	689a      	ldr	r2, [r3, #8]
 810128a:	687b      	ldr	r3, [r7, #4]
 810128c:	681b      	ldr	r3, [r3, #0]
 810128e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8101292:	609a      	str	r2, [r3, #8]
 8101294:	e006      	b.n	81012a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8101296:	687b      	ldr	r3, [r7, #4]
 8101298:	689a      	ldr	r2, [r3, #8]
 810129a:	687b      	ldr	r3, [r7, #4]
 810129c:	681b      	ldr	r3, [r3, #0]
 810129e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 81012a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 81012a4:	687b      	ldr	r3, [r7, #4]
 81012a6:	68db      	ldr	r3, [r3, #12]
 81012a8:	2b02      	cmp	r3, #2
 81012aa:	d104      	bne.n	81012b6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 81012ac:	687b      	ldr	r3, [r7, #4]
 81012ae:	681b      	ldr	r3, [r3, #0]
 81012b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81012b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 81012b6:	687b      	ldr	r3, [r7, #4]
 81012b8:	681b      	ldr	r3, [r3, #0]
 81012ba:	685b      	ldr	r3, [r3, #4]
 81012bc:	687a      	ldr	r2, [r7, #4]
 81012be:	6812      	ldr	r2, [r2, #0]
 81012c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81012c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 81012c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 81012ca:	687b      	ldr	r3, [r7, #4]
 81012cc:	681b      	ldr	r3, [r3, #0]
 81012ce:	68da      	ldr	r2, [r3, #12]
 81012d0:	687b      	ldr	r3, [r7, #4]
 81012d2:	681b      	ldr	r3, [r3, #0]
 81012d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81012d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 81012da:	687b      	ldr	r3, [r7, #4]
 81012dc:	691a      	ldr	r2, [r3, #16]
 81012de:	687b      	ldr	r3, [r7, #4]
 81012e0:	695b      	ldr	r3, [r3, #20]
 81012e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 81012e6:	687b      	ldr	r3, [r7, #4]
 81012e8:	699b      	ldr	r3, [r3, #24]
 81012ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 81012ec:	687b      	ldr	r3, [r7, #4]
 81012ee:	681b      	ldr	r3, [r3, #0]
 81012f0:	430a      	orrs	r2, r1
 81012f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 81012f4:	687b      	ldr	r3, [r7, #4]
 81012f6:	69d9      	ldr	r1, [r3, #28]
 81012f8:	687b      	ldr	r3, [r7, #4]
 81012fa:	6a1a      	ldr	r2, [r3, #32]
 81012fc:	687b      	ldr	r3, [r7, #4]
 81012fe:	681b      	ldr	r3, [r3, #0]
 8101300:	430a      	orrs	r2, r1
 8101302:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8101304:	687b      	ldr	r3, [r7, #4]
 8101306:	681b      	ldr	r3, [r3, #0]
 8101308:	681a      	ldr	r2, [r3, #0]
 810130a:	687b      	ldr	r3, [r7, #4]
 810130c:	681b      	ldr	r3, [r3, #0]
 810130e:	f042 0201 	orr.w	r2, r2, #1
 8101312:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8101314:	687b      	ldr	r3, [r7, #4]
 8101316:	2200      	movs	r2, #0
 8101318:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 810131a:	687b      	ldr	r3, [r7, #4]
 810131c:	2220      	movs	r2, #32
 810131e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8101322:	687b      	ldr	r3, [r7, #4]
 8101324:	2200      	movs	r2, #0
 8101326:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8101328:	687b      	ldr	r3, [r7, #4]
 810132a:	2200      	movs	r2, #0
 810132c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8101330:	2300      	movs	r3, #0
}
 8101332:	4618      	mov	r0, r3
 8101334:	3708      	adds	r7, #8
 8101336:	46bd      	mov	sp, r7
 8101338:	bd80      	pop	{r7, pc}
	...

0810133c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810133c:	b580      	push	{r7, lr}
 810133e:	b088      	sub	sp, #32
 8101340:	af02      	add	r7, sp, #8
 8101342:	60f8      	str	r0, [r7, #12]
 8101344:	4608      	mov	r0, r1
 8101346:	4611      	mov	r1, r2
 8101348:	461a      	mov	r2, r3
 810134a:	4603      	mov	r3, r0
 810134c:	817b      	strh	r3, [r7, #10]
 810134e:	460b      	mov	r3, r1
 8101350:	813b      	strh	r3, [r7, #8]
 8101352:	4613      	mov	r3, r2
 8101354:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8101356:	68fb      	ldr	r3, [r7, #12]
 8101358:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810135c:	b2db      	uxtb	r3, r3
 810135e:	2b20      	cmp	r3, #32
 8101360:	f040 80fd 	bne.w	810155e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8101364:	6a3b      	ldr	r3, [r7, #32]
 8101366:	2b00      	cmp	r3, #0
 8101368:	d002      	beq.n	8101370 <HAL_I2C_Mem_Read+0x34>
 810136a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 810136c:	2b00      	cmp	r3, #0
 810136e:	d105      	bne.n	810137c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8101370:	68fb      	ldr	r3, [r7, #12]
 8101372:	f44f 7200 	mov.w	r2, #512	; 0x200
 8101376:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8101378:	2301      	movs	r3, #1
 810137a:	e0f1      	b.n	8101560 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 810137c:	68fb      	ldr	r3, [r7, #12]
 810137e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8101382:	2b01      	cmp	r3, #1
 8101384:	d101      	bne.n	810138a <HAL_I2C_Mem_Read+0x4e>
 8101386:	2302      	movs	r3, #2
 8101388:	e0ea      	b.n	8101560 <HAL_I2C_Mem_Read+0x224>
 810138a:	68fb      	ldr	r3, [r7, #12]
 810138c:	2201      	movs	r2, #1
 810138e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8101392:	f7ff fbe5 	bl	8100b60 <HAL_GetTick>
 8101396:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8101398:	697b      	ldr	r3, [r7, #20]
 810139a:	9300      	str	r3, [sp, #0]
 810139c:	2319      	movs	r3, #25
 810139e:	2201      	movs	r2, #1
 81013a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81013a4:	68f8      	ldr	r0, [r7, #12]
 81013a6:	f000 f95b 	bl	8101660 <I2C_WaitOnFlagUntilTimeout>
 81013aa:	4603      	mov	r3, r0
 81013ac:	2b00      	cmp	r3, #0
 81013ae:	d001      	beq.n	81013b4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 81013b0:	2301      	movs	r3, #1
 81013b2:	e0d5      	b.n	8101560 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 81013b4:	68fb      	ldr	r3, [r7, #12]
 81013b6:	2222      	movs	r2, #34	; 0x22
 81013b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 81013bc:	68fb      	ldr	r3, [r7, #12]
 81013be:	2240      	movs	r2, #64	; 0x40
 81013c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81013c4:	68fb      	ldr	r3, [r7, #12]
 81013c6:	2200      	movs	r2, #0
 81013c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81013ca:	68fb      	ldr	r3, [r7, #12]
 81013cc:	6a3a      	ldr	r2, [r7, #32]
 81013ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 81013d0:	68fb      	ldr	r3, [r7, #12]
 81013d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 81013d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 81013d6:	68fb      	ldr	r3, [r7, #12]
 81013d8:	2200      	movs	r2, #0
 81013da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 81013dc:	88f8      	ldrh	r0, [r7, #6]
 81013de:	893a      	ldrh	r2, [r7, #8]
 81013e0:	8979      	ldrh	r1, [r7, #10]
 81013e2:	697b      	ldr	r3, [r7, #20]
 81013e4:	9301      	str	r3, [sp, #4]
 81013e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81013e8:	9300      	str	r3, [sp, #0]
 81013ea:	4603      	mov	r3, r0
 81013ec:	68f8      	ldr	r0, [r7, #12]
 81013ee:	f000 f8bf 	bl	8101570 <I2C_RequestMemoryRead>
 81013f2:	4603      	mov	r3, r0
 81013f4:	2b00      	cmp	r3, #0
 81013f6:	d005      	beq.n	8101404 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 81013f8:	68fb      	ldr	r3, [r7, #12]
 81013fa:	2200      	movs	r2, #0
 81013fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8101400:	2301      	movs	r3, #1
 8101402:	e0ad      	b.n	8101560 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8101404:	68fb      	ldr	r3, [r7, #12]
 8101406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8101408:	b29b      	uxth	r3, r3
 810140a:	2bff      	cmp	r3, #255	; 0xff
 810140c:	d90e      	bls.n	810142c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 810140e:	68fb      	ldr	r3, [r7, #12]
 8101410:	22ff      	movs	r2, #255	; 0xff
 8101412:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8101414:	68fb      	ldr	r3, [r7, #12]
 8101416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8101418:	b2da      	uxtb	r2, r3
 810141a:	8979      	ldrh	r1, [r7, #10]
 810141c:	4b52      	ldr	r3, [pc, #328]	; (8101568 <HAL_I2C_Mem_Read+0x22c>)
 810141e:	9300      	str	r3, [sp, #0]
 8101420:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8101424:	68f8      	ldr	r0, [r7, #12]
 8101426:	f000 fac3 	bl	81019b0 <I2C_TransferConfig>
 810142a:	e00f      	b.n	810144c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 810142c:	68fb      	ldr	r3, [r7, #12]
 810142e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8101430:	b29a      	uxth	r2, r3
 8101432:	68fb      	ldr	r3, [r7, #12]
 8101434:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8101436:	68fb      	ldr	r3, [r7, #12]
 8101438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810143a:	b2da      	uxtb	r2, r3
 810143c:	8979      	ldrh	r1, [r7, #10]
 810143e:	4b4a      	ldr	r3, [pc, #296]	; (8101568 <HAL_I2C_Mem_Read+0x22c>)
 8101440:	9300      	str	r3, [sp, #0]
 8101442:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8101446:	68f8      	ldr	r0, [r7, #12]
 8101448:	f000 fab2 	bl	81019b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 810144c:	697b      	ldr	r3, [r7, #20]
 810144e:	9300      	str	r3, [sp, #0]
 8101450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101452:	2200      	movs	r2, #0
 8101454:	2104      	movs	r1, #4
 8101456:	68f8      	ldr	r0, [r7, #12]
 8101458:	f000 f902 	bl	8101660 <I2C_WaitOnFlagUntilTimeout>
 810145c:	4603      	mov	r3, r0
 810145e:	2b00      	cmp	r3, #0
 8101460:	d001      	beq.n	8101466 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8101462:	2301      	movs	r3, #1
 8101464:	e07c      	b.n	8101560 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8101466:	68fb      	ldr	r3, [r7, #12]
 8101468:	681b      	ldr	r3, [r3, #0]
 810146a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 810146c:	68fb      	ldr	r3, [r7, #12]
 810146e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101470:	b2d2      	uxtb	r2, r2
 8101472:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8101474:	68fb      	ldr	r3, [r7, #12]
 8101476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101478:	1c5a      	adds	r2, r3, #1
 810147a:	68fb      	ldr	r3, [r7, #12]
 810147c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 810147e:	68fb      	ldr	r3, [r7, #12]
 8101480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8101482:	3b01      	subs	r3, #1
 8101484:	b29a      	uxth	r2, r3
 8101486:	68fb      	ldr	r3, [r7, #12]
 8101488:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 810148a:	68fb      	ldr	r3, [r7, #12]
 810148c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810148e:	b29b      	uxth	r3, r3
 8101490:	3b01      	subs	r3, #1
 8101492:	b29a      	uxth	r2, r3
 8101494:	68fb      	ldr	r3, [r7, #12]
 8101496:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8101498:	68fb      	ldr	r3, [r7, #12]
 810149a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810149c:	b29b      	uxth	r3, r3
 810149e:	2b00      	cmp	r3, #0
 81014a0:	d034      	beq.n	810150c <HAL_I2C_Mem_Read+0x1d0>
 81014a2:	68fb      	ldr	r3, [r7, #12]
 81014a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81014a6:	2b00      	cmp	r3, #0
 81014a8:	d130      	bne.n	810150c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 81014aa:	697b      	ldr	r3, [r7, #20]
 81014ac:	9300      	str	r3, [sp, #0]
 81014ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81014b0:	2200      	movs	r2, #0
 81014b2:	2180      	movs	r1, #128	; 0x80
 81014b4:	68f8      	ldr	r0, [r7, #12]
 81014b6:	f000 f8d3 	bl	8101660 <I2C_WaitOnFlagUntilTimeout>
 81014ba:	4603      	mov	r3, r0
 81014bc:	2b00      	cmp	r3, #0
 81014be:	d001      	beq.n	81014c4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 81014c0:	2301      	movs	r3, #1
 81014c2:	e04d      	b.n	8101560 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81014c4:	68fb      	ldr	r3, [r7, #12]
 81014c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81014c8:	b29b      	uxth	r3, r3
 81014ca:	2bff      	cmp	r3, #255	; 0xff
 81014cc:	d90e      	bls.n	81014ec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 81014ce:	68fb      	ldr	r3, [r7, #12]
 81014d0:	22ff      	movs	r2, #255	; 0xff
 81014d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 81014d4:	68fb      	ldr	r3, [r7, #12]
 81014d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81014d8:	b2da      	uxtb	r2, r3
 81014da:	8979      	ldrh	r1, [r7, #10]
 81014dc:	2300      	movs	r3, #0
 81014de:	9300      	str	r3, [sp, #0]
 81014e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81014e4:	68f8      	ldr	r0, [r7, #12]
 81014e6:	f000 fa63 	bl	81019b0 <I2C_TransferConfig>
 81014ea:	e00f      	b.n	810150c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 81014ec:	68fb      	ldr	r3, [r7, #12]
 81014ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81014f0:	b29a      	uxth	r2, r3
 81014f2:	68fb      	ldr	r3, [r7, #12]
 81014f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 81014f6:	68fb      	ldr	r3, [r7, #12]
 81014f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81014fa:	b2da      	uxtb	r2, r3
 81014fc:	8979      	ldrh	r1, [r7, #10]
 81014fe:	2300      	movs	r3, #0
 8101500:	9300      	str	r3, [sp, #0]
 8101502:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8101506:	68f8      	ldr	r0, [r7, #12]
 8101508:	f000 fa52 	bl	81019b0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 810150c:	68fb      	ldr	r3, [r7, #12]
 810150e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8101510:	b29b      	uxth	r3, r3
 8101512:	2b00      	cmp	r3, #0
 8101514:	d19a      	bne.n	810144c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8101516:	697a      	ldr	r2, [r7, #20]
 8101518:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810151a:	68f8      	ldr	r0, [r7, #12]
 810151c:	f000 f920 	bl	8101760 <I2C_WaitOnSTOPFlagUntilTimeout>
 8101520:	4603      	mov	r3, r0
 8101522:	2b00      	cmp	r3, #0
 8101524:	d001      	beq.n	810152a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8101526:	2301      	movs	r3, #1
 8101528:	e01a      	b.n	8101560 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810152a:	68fb      	ldr	r3, [r7, #12]
 810152c:	681b      	ldr	r3, [r3, #0]
 810152e:	2220      	movs	r2, #32
 8101530:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8101532:	68fb      	ldr	r3, [r7, #12]
 8101534:	681b      	ldr	r3, [r3, #0]
 8101536:	6859      	ldr	r1, [r3, #4]
 8101538:	68fb      	ldr	r3, [r7, #12]
 810153a:	681a      	ldr	r2, [r3, #0]
 810153c:	4b0b      	ldr	r3, [pc, #44]	; (810156c <HAL_I2C_Mem_Read+0x230>)
 810153e:	400b      	ands	r3, r1
 8101540:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8101542:	68fb      	ldr	r3, [r7, #12]
 8101544:	2220      	movs	r2, #32
 8101546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 810154a:	68fb      	ldr	r3, [r7, #12]
 810154c:	2200      	movs	r2, #0
 810154e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8101552:	68fb      	ldr	r3, [r7, #12]
 8101554:	2200      	movs	r2, #0
 8101556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810155a:	2300      	movs	r3, #0
 810155c:	e000      	b.n	8101560 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 810155e:	2302      	movs	r3, #2
  }
}
 8101560:	4618      	mov	r0, r3
 8101562:	3718      	adds	r7, #24
 8101564:	46bd      	mov	sp, r7
 8101566:	bd80      	pop	{r7, pc}
 8101568:	80002400 	.word	0x80002400
 810156c:	fe00e800 	.word	0xfe00e800

08101570 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8101570:	b580      	push	{r7, lr}
 8101572:	b086      	sub	sp, #24
 8101574:	af02      	add	r7, sp, #8
 8101576:	60f8      	str	r0, [r7, #12]
 8101578:	4608      	mov	r0, r1
 810157a:	4611      	mov	r1, r2
 810157c:	461a      	mov	r2, r3
 810157e:	4603      	mov	r3, r0
 8101580:	817b      	strh	r3, [r7, #10]
 8101582:	460b      	mov	r3, r1
 8101584:	813b      	strh	r3, [r7, #8]
 8101586:	4613      	mov	r3, r2
 8101588:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 810158a:	88fb      	ldrh	r3, [r7, #6]
 810158c:	b2da      	uxtb	r2, r3
 810158e:	8979      	ldrh	r1, [r7, #10]
 8101590:	4b20      	ldr	r3, [pc, #128]	; (8101614 <I2C_RequestMemoryRead+0xa4>)
 8101592:	9300      	str	r3, [sp, #0]
 8101594:	2300      	movs	r3, #0
 8101596:	68f8      	ldr	r0, [r7, #12]
 8101598:	f000 fa0a 	bl	81019b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 810159c:	69fa      	ldr	r2, [r7, #28]
 810159e:	69b9      	ldr	r1, [r7, #24]
 81015a0:	68f8      	ldr	r0, [r7, #12]
 81015a2:	f000 f89d 	bl	81016e0 <I2C_WaitOnTXISFlagUntilTimeout>
 81015a6:	4603      	mov	r3, r0
 81015a8:	2b00      	cmp	r3, #0
 81015aa:	d001      	beq.n	81015b0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 81015ac:	2301      	movs	r3, #1
 81015ae:	e02c      	b.n	810160a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 81015b0:	88fb      	ldrh	r3, [r7, #6]
 81015b2:	2b01      	cmp	r3, #1
 81015b4:	d105      	bne.n	81015c2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81015b6:	893b      	ldrh	r3, [r7, #8]
 81015b8:	b2da      	uxtb	r2, r3
 81015ba:	68fb      	ldr	r3, [r7, #12]
 81015bc:	681b      	ldr	r3, [r3, #0]
 81015be:	629a      	str	r2, [r3, #40]	; 0x28
 81015c0:	e015      	b.n	81015ee <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 81015c2:	893b      	ldrh	r3, [r7, #8]
 81015c4:	0a1b      	lsrs	r3, r3, #8
 81015c6:	b29b      	uxth	r3, r3
 81015c8:	b2da      	uxtb	r2, r3
 81015ca:	68fb      	ldr	r3, [r7, #12]
 81015cc:	681b      	ldr	r3, [r3, #0]
 81015ce:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81015d0:	69fa      	ldr	r2, [r7, #28]
 81015d2:	69b9      	ldr	r1, [r7, #24]
 81015d4:	68f8      	ldr	r0, [r7, #12]
 81015d6:	f000 f883 	bl	81016e0 <I2C_WaitOnTXISFlagUntilTimeout>
 81015da:	4603      	mov	r3, r0
 81015dc:	2b00      	cmp	r3, #0
 81015de:	d001      	beq.n	81015e4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 81015e0:	2301      	movs	r3, #1
 81015e2:	e012      	b.n	810160a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81015e4:	893b      	ldrh	r3, [r7, #8]
 81015e6:	b2da      	uxtb	r2, r3
 81015e8:	68fb      	ldr	r3, [r7, #12]
 81015ea:	681b      	ldr	r3, [r3, #0]
 81015ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 81015ee:	69fb      	ldr	r3, [r7, #28]
 81015f0:	9300      	str	r3, [sp, #0]
 81015f2:	69bb      	ldr	r3, [r7, #24]
 81015f4:	2200      	movs	r2, #0
 81015f6:	2140      	movs	r1, #64	; 0x40
 81015f8:	68f8      	ldr	r0, [r7, #12]
 81015fa:	f000 f831 	bl	8101660 <I2C_WaitOnFlagUntilTimeout>
 81015fe:	4603      	mov	r3, r0
 8101600:	2b00      	cmp	r3, #0
 8101602:	d001      	beq.n	8101608 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8101604:	2301      	movs	r3, #1
 8101606:	e000      	b.n	810160a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8101608:	2300      	movs	r3, #0
}
 810160a:	4618      	mov	r0, r3
 810160c:	3710      	adds	r7, #16
 810160e:	46bd      	mov	sp, r7
 8101610:	bd80      	pop	{r7, pc}
 8101612:	bf00      	nop
 8101614:	80002000 	.word	0x80002000

08101618 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8101618:	b480      	push	{r7}
 810161a:	b083      	sub	sp, #12
 810161c:	af00      	add	r7, sp, #0
 810161e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8101620:	687b      	ldr	r3, [r7, #4]
 8101622:	681b      	ldr	r3, [r3, #0]
 8101624:	699b      	ldr	r3, [r3, #24]
 8101626:	f003 0302 	and.w	r3, r3, #2
 810162a:	2b02      	cmp	r3, #2
 810162c:	d103      	bne.n	8101636 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 810162e:	687b      	ldr	r3, [r7, #4]
 8101630:	681b      	ldr	r3, [r3, #0]
 8101632:	2200      	movs	r2, #0
 8101634:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8101636:	687b      	ldr	r3, [r7, #4]
 8101638:	681b      	ldr	r3, [r3, #0]
 810163a:	699b      	ldr	r3, [r3, #24]
 810163c:	f003 0301 	and.w	r3, r3, #1
 8101640:	2b01      	cmp	r3, #1
 8101642:	d007      	beq.n	8101654 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8101644:	687b      	ldr	r3, [r7, #4]
 8101646:	681b      	ldr	r3, [r3, #0]
 8101648:	699a      	ldr	r2, [r3, #24]
 810164a:	687b      	ldr	r3, [r7, #4]
 810164c:	681b      	ldr	r3, [r3, #0]
 810164e:	f042 0201 	orr.w	r2, r2, #1
 8101652:	619a      	str	r2, [r3, #24]
  }
}
 8101654:	bf00      	nop
 8101656:	370c      	adds	r7, #12
 8101658:	46bd      	mov	sp, r7
 810165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810165e:	4770      	bx	lr

08101660 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8101660:	b580      	push	{r7, lr}
 8101662:	b084      	sub	sp, #16
 8101664:	af00      	add	r7, sp, #0
 8101666:	60f8      	str	r0, [r7, #12]
 8101668:	60b9      	str	r1, [r7, #8]
 810166a:	603b      	str	r3, [r7, #0]
 810166c:	4613      	mov	r3, r2
 810166e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8101670:	e022      	b.n	81016b8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8101672:	683b      	ldr	r3, [r7, #0]
 8101674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101678:	d01e      	beq.n	81016b8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810167a:	f7ff fa71 	bl	8100b60 <HAL_GetTick>
 810167e:	4602      	mov	r2, r0
 8101680:	69bb      	ldr	r3, [r7, #24]
 8101682:	1ad3      	subs	r3, r2, r3
 8101684:	683a      	ldr	r2, [r7, #0]
 8101686:	429a      	cmp	r2, r3
 8101688:	d302      	bcc.n	8101690 <I2C_WaitOnFlagUntilTimeout+0x30>
 810168a:	683b      	ldr	r3, [r7, #0]
 810168c:	2b00      	cmp	r3, #0
 810168e:	d113      	bne.n	81016b8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8101690:	68fb      	ldr	r3, [r7, #12]
 8101692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8101694:	f043 0220 	orr.w	r2, r3, #32
 8101698:	68fb      	ldr	r3, [r7, #12]
 810169a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 810169c:	68fb      	ldr	r3, [r7, #12]
 810169e:	2220      	movs	r2, #32
 81016a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 81016a4:	68fb      	ldr	r3, [r7, #12]
 81016a6:	2200      	movs	r2, #0
 81016a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 81016ac:	68fb      	ldr	r3, [r7, #12]
 81016ae:	2200      	movs	r2, #0
 81016b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 81016b4:	2301      	movs	r3, #1
 81016b6:	e00f      	b.n	81016d8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 81016b8:	68fb      	ldr	r3, [r7, #12]
 81016ba:	681b      	ldr	r3, [r3, #0]
 81016bc:	699a      	ldr	r2, [r3, #24]
 81016be:	68bb      	ldr	r3, [r7, #8]
 81016c0:	4013      	ands	r3, r2
 81016c2:	68ba      	ldr	r2, [r7, #8]
 81016c4:	429a      	cmp	r2, r3
 81016c6:	bf0c      	ite	eq
 81016c8:	2301      	moveq	r3, #1
 81016ca:	2300      	movne	r3, #0
 81016cc:	b2db      	uxtb	r3, r3
 81016ce:	461a      	mov	r2, r3
 81016d0:	79fb      	ldrb	r3, [r7, #7]
 81016d2:	429a      	cmp	r2, r3
 81016d4:	d0cd      	beq.n	8101672 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 81016d6:	2300      	movs	r3, #0
}
 81016d8:	4618      	mov	r0, r3
 81016da:	3710      	adds	r7, #16
 81016dc:	46bd      	mov	sp, r7
 81016de:	bd80      	pop	{r7, pc}

081016e0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 81016e0:	b580      	push	{r7, lr}
 81016e2:	b084      	sub	sp, #16
 81016e4:	af00      	add	r7, sp, #0
 81016e6:	60f8      	str	r0, [r7, #12]
 81016e8:	60b9      	str	r1, [r7, #8]
 81016ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 81016ec:	e02c      	b.n	8101748 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 81016ee:	687a      	ldr	r2, [r7, #4]
 81016f0:	68b9      	ldr	r1, [r7, #8]
 81016f2:	68f8      	ldr	r0, [r7, #12]
 81016f4:	f000 f870 	bl	81017d8 <I2C_IsErrorOccurred>
 81016f8:	4603      	mov	r3, r0
 81016fa:	2b00      	cmp	r3, #0
 81016fc:	d001      	beq.n	8101702 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 81016fe:	2301      	movs	r3, #1
 8101700:	e02a      	b.n	8101758 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8101702:	68bb      	ldr	r3, [r7, #8]
 8101704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101708:	d01e      	beq.n	8101748 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810170a:	f7ff fa29 	bl	8100b60 <HAL_GetTick>
 810170e:	4602      	mov	r2, r0
 8101710:	687b      	ldr	r3, [r7, #4]
 8101712:	1ad3      	subs	r3, r2, r3
 8101714:	68ba      	ldr	r2, [r7, #8]
 8101716:	429a      	cmp	r2, r3
 8101718:	d302      	bcc.n	8101720 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 810171a:	68bb      	ldr	r3, [r7, #8]
 810171c:	2b00      	cmp	r3, #0
 810171e:	d113      	bne.n	8101748 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8101720:	68fb      	ldr	r3, [r7, #12]
 8101722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8101724:	f043 0220 	orr.w	r2, r3, #32
 8101728:	68fb      	ldr	r3, [r7, #12]
 810172a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 810172c:	68fb      	ldr	r3, [r7, #12]
 810172e:	2220      	movs	r2, #32
 8101730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8101734:	68fb      	ldr	r3, [r7, #12]
 8101736:	2200      	movs	r2, #0
 8101738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 810173c:	68fb      	ldr	r3, [r7, #12]
 810173e:	2200      	movs	r2, #0
 8101740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8101744:	2301      	movs	r3, #1
 8101746:	e007      	b.n	8101758 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8101748:	68fb      	ldr	r3, [r7, #12]
 810174a:	681b      	ldr	r3, [r3, #0]
 810174c:	699b      	ldr	r3, [r3, #24]
 810174e:	f003 0302 	and.w	r3, r3, #2
 8101752:	2b02      	cmp	r3, #2
 8101754:	d1cb      	bne.n	81016ee <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8101756:	2300      	movs	r3, #0
}
 8101758:	4618      	mov	r0, r3
 810175a:	3710      	adds	r7, #16
 810175c:	46bd      	mov	sp, r7
 810175e:	bd80      	pop	{r7, pc}

08101760 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8101760:	b580      	push	{r7, lr}
 8101762:	b084      	sub	sp, #16
 8101764:	af00      	add	r7, sp, #0
 8101766:	60f8      	str	r0, [r7, #12]
 8101768:	60b9      	str	r1, [r7, #8]
 810176a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810176c:	e028      	b.n	81017c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 810176e:	687a      	ldr	r2, [r7, #4]
 8101770:	68b9      	ldr	r1, [r7, #8]
 8101772:	68f8      	ldr	r0, [r7, #12]
 8101774:	f000 f830 	bl	81017d8 <I2C_IsErrorOccurred>
 8101778:	4603      	mov	r3, r0
 810177a:	2b00      	cmp	r3, #0
 810177c:	d001      	beq.n	8101782 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 810177e:	2301      	movs	r3, #1
 8101780:	e026      	b.n	81017d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8101782:	f7ff f9ed 	bl	8100b60 <HAL_GetTick>
 8101786:	4602      	mov	r2, r0
 8101788:	687b      	ldr	r3, [r7, #4]
 810178a:	1ad3      	subs	r3, r2, r3
 810178c:	68ba      	ldr	r2, [r7, #8]
 810178e:	429a      	cmp	r2, r3
 8101790:	d302      	bcc.n	8101798 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8101792:	68bb      	ldr	r3, [r7, #8]
 8101794:	2b00      	cmp	r3, #0
 8101796:	d113      	bne.n	81017c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8101798:	68fb      	ldr	r3, [r7, #12]
 810179a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810179c:	f043 0220 	orr.w	r2, r3, #32
 81017a0:	68fb      	ldr	r3, [r7, #12]
 81017a2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 81017a4:	68fb      	ldr	r3, [r7, #12]
 81017a6:	2220      	movs	r2, #32
 81017a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 81017ac:	68fb      	ldr	r3, [r7, #12]
 81017ae:	2200      	movs	r2, #0
 81017b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 81017b4:	68fb      	ldr	r3, [r7, #12]
 81017b6:	2200      	movs	r2, #0
 81017b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 81017bc:	2301      	movs	r3, #1
 81017be:	e007      	b.n	81017d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81017c0:	68fb      	ldr	r3, [r7, #12]
 81017c2:	681b      	ldr	r3, [r3, #0]
 81017c4:	699b      	ldr	r3, [r3, #24]
 81017c6:	f003 0320 	and.w	r3, r3, #32
 81017ca:	2b20      	cmp	r3, #32
 81017cc:	d1cf      	bne.n	810176e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 81017ce:	2300      	movs	r3, #0
}
 81017d0:	4618      	mov	r0, r3
 81017d2:	3710      	adds	r7, #16
 81017d4:	46bd      	mov	sp, r7
 81017d6:	bd80      	pop	{r7, pc}

081017d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 81017d8:	b580      	push	{r7, lr}
 81017da:	b08a      	sub	sp, #40	; 0x28
 81017dc:	af00      	add	r7, sp, #0
 81017de:	60f8      	str	r0, [r7, #12]
 81017e0:	60b9      	str	r1, [r7, #8]
 81017e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81017e4:	2300      	movs	r3, #0
 81017e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 81017ea:	68fb      	ldr	r3, [r7, #12]
 81017ec:	681b      	ldr	r3, [r3, #0]
 81017ee:	699b      	ldr	r3, [r3, #24]
 81017f0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 81017f2:	2300      	movs	r3, #0
 81017f4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 81017f6:	687b      	ldr	r3, [r7, #4]
 81017f8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 81017fa:	69bb      	ldr	r3, [r7, #24]
 81017fc:	f003 0310 	and.w	r3, r3, #16
 8101800:	2b00      	cmp	r3, #0
 8101802:	d075      	beq.n	81018f0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8101804:	68fb      	ldr	r3, [r7, #12]
 8101806:	681b      	ldr	r3, [r3, #0]
 8101808:	2210      	movs	r2, #16
 810180a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 810180c:	e056      	b.n	81018bc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 810180e:	68bb      	ldr	r3, [r7, #8]
 8101810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101814:	d052      	beq.n	81018bc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8101816:	f7ff f9a3 	bl	8100b60 <HAL_GetTick>
 810181a:	4602      	mov	r2, r0
 810181c:	69fb      	ldr	r3, [r7, #28]
 810181e:	1ad3      	subs	r3, r2, r3
 8101820:	68ba      	ldr	r2, [r7, #8]
 8101822:	429a      	cmp	r2, r3
 8101824:	d302      	bcc.n	810182c <I2C_IsErrorOccurred+0x54>
 8101826:	68bb      	ldr	r3, [r7, #8]
 8101828:	2b00      	cmp	r3, #0
 810182a:	d147      	bne.n	81018bc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 810182c:	68fb      	ldr	r3, [r7, #12]
 810182e:	681b      	ldr	r3, [r3, #0]
 8101830:	685b      	ldr	r3, [r3, #4]
 8101832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101836:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8101838:	68fb      	ldr	r3, [r7, #12]
 810183a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 810183e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8101840:	68fb      	ldr	r3, [r7, #12]
 8101842:	681b      	ldr	r3, [r3, #0]
 8101844:	699b      	ldr	r3, [r3, #24]
 8101846:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810184a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810184e:	d12e      	bne.n	81018ae <I2C_IsErrorOccurred+0xd6>
 8101850:	697b      	ldr	r3, [r7, #20]
 8101852:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8101856:	d02a      	beq.n	81018ae <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8101858:	7cfb      	ldrb	r3, [r7, #19]
 810185a:	2b20      	cmp	r3, #32
 810185c:	d027      	beq.n	81018ae <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 810185e:	68fb      	ldr	r3, [r7, #12]
 8101860:	681b      	ldr	r3, [r3, #0]
 8101862:	685a      	ldr	r2, [r3, #4]
 8101864:	68fb      	ldr	r3, [r7, #12]
 8101866:	681b      	ldr	r3, [r3, #0]
 8101868:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 810186c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 810186e:	f7ff f977 	bl	8100b60 <HAL_GetTick>
 8101872:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8101874:	e01b      	b.n	81018ae <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8101876:	f7ff f973 	bl	8100b60 <HAL_GetTick>
 810187a:	4602      	mov	r2, r0
 810187c:	69fb      	ldr	r3, [r7, #28]
 810187e:	1ad3      	subs	r3, r2, r3
 8101880:	2b19      	cmp	r3, #25
 8101882:	d914      	bls.n	81018ae <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8101884:	68fb      	ldr	r3, [r7, #12]
 8101886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8101888:	f043 0220 	orr.w	r2, r3, #32
 810188c:	68fb      	ldr	r3, [r7, #12]
 810188e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8101890:	68fb      	ldr	r3, [r7, #12]
 8101892:	2220      	movs	r2, #32
 8101894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8101898:	68fb      	ldr	r3, [r7, #12]
 810189a:	2200      	movs	r2, #0
 810189c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 81018a0:	68fb      	ldr	r3, [r7, #12]
 81018a2:	2200      	movs	r2, #0
 81018a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 81018a8:	2301      	movs	r3, #1
 81018aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81018ae:	68fb      	ldr	r3, [r7, #12]
 81018b0:	681b      	ldr	r3, [r3, #0]
 81018b2:	699b      	ldr	r3, [r3, #24]
 81018b4:	f003 0320 	and.w	r3, r3, #32
 81018b8:	2b20      	cmp	r3, #32
 81018ba:	d1dc      	bne.n	8101876 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 81018bc:	68fb      	ldr	r3, [r7, #12]
 81018be:	681b      	ldr	r3, [r3, #0]
 81018c0:	699b      	ldr	r3, [r3, #24]
 81018c2:	f003 0320 	and.w	r3, r3, #32
 81018c6:	2b20      	cmp	r3, #32
 81018c8:	d003      	beq.n	81018d2 <I2C_IsErrorOccurred+0xfa>
 81018ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81018ce:	2b00      	cmp	r3, #0
 81018d0:	d09d      	beq.n	810180e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 81018d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81018d6:	2b00      	cmp	r3, #0
 81018d8:	d103      	bne.n	81018e2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81018da:	68fb      	ldr	r3, [r7, #12]
 81018dc:	681b      	ldr	r3, [r3, #0]
 81018de:	2220      	movs	r2, #32
 81018e0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 81018e2:	6a3b      	ldr	r3, [r7, #32]
 81018e4:	f043 0304 	orr.w	r3, r3, #4
 81018e8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 81018ea:	2301      	movs	r3, #1
 81018ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 81018f0:	68fb      	ldr	r3, [r7, #12]
 81018f2:	681b      	ldr	r3, [r3, #0]
 81018f4:	699b      	ldr	r3, [r3, #24]
 81018f6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 81018f8:	69bb      	ldr	r3, [r7, #24]
 81018fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81018fe:	2b00      	cmp	r3, #0
 8101900:	d00b      	beq.n	810191a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8101902:	6a3b      	ldr	r3, [r7, #32]
 8101904:	f043 0301 	orr.w	r3, r3, #1
 8101908:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 810190a:	68fb      	ldr	r3, [r7, #12]
 810190c:	681b      	ldr	r3, [r3, #0]
 810190e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8101912:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8101914:	2301      	movs	r3, #1
 8101916:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 810191a:	69bb      	ldr	r3, [r7, #24]
 810191c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8101920:	2b00      	cmp	r3, #0
 8101922:	d00b      	beq.n	810193c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8101924:	6a3b      	ldr	r3, [r7, #32]
 8101926:	f043 0308 	orr.w	r3, r3, #8
 810192a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 810192c:	68fb      	ldr	r3, [r7, #12]
 810192e:	681b      	ldr	r3, [r3, #0]
 8101930:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101934:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8101936:	2301      	movs	r3, #1
 8101938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 810193c:	69bb      	ldr	r3, [r7, #24]
 810193e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8101942:	2b00      	cmp	r3, #0
 8101944:	d00b      	beq.n	810195e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8101946:	6a3b      	ldr	r3, [r7, #32]
 8101948:	f043 0302 	orr.w	r3, r3, #2
 810194c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 810194e:	68fb      	ldr	r3, [r7, #12]
 8101950:	681b      	ldr	r3, [r3, #0]
 8101952:	f44f 7200 	mov.w	r2, #512	; 0x200
 8101956:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8101958:	2301      	movs	r3, #1
 810195a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 810195e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101962:	2b00      	cmp	r3, #0
 8101964:	d01c      	beq.n	81019a0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8101966:	68f8      	ldr	r0, [r7, #12]
 8101968:	f7ff fe56 	bl	8101618 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810196c:	68fb      	ldr	r3, [r7, #12]
 810196e:	681b      	ldr	r3, [r3, #0]
 8101970:	6859      	ldr	r1, [r3, #4]
 8101972:	68fb      	ldr	r3, [r7, #12]
 8101974:	681a      	ldr	r2, [r3, #0]
 8101976:	4b0d      	ldr	r3, [pc, #52]	; (81019ac <I2C_IsErrorOccurred+0x1d4>)
 8101978:	400b      	ands	r3, r1
 810197a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 810197c:	68fb      	ldr	r3, [r7, #12]
 810197e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8101980:	6a3b      	ldr	r3, [r7, #32]
 8101982:	431a      	orrs	r2, r3
 8101984:	68fb      	ldr	r3, [r7, #12]
 8101986:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8101988:	68fb      	ldr	r3, [r7, #12]
 810198a:	2220      	movs	r2, #32
 810198c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8101990:	68fb      	ldr	r3, [r7, #12]
 8101992:	2200      	movs	r2, #0
 8101994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8101998:	68fb      	ldr	r3, [r7, #12]
 810199a:	2200      	movs	r2, #0
 810199c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 81019a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 81019a4:	4618      	mov	r0, r3
 81019a6:	3728      	adds	r7, #40	; 0x28
 81019a8:	46bd      	mov	sp, r7
 81019aa:	bd80      	pop	{r7, pc}
 81019ac:	fe00e800 	.word	0xfe00e800

081019b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 81019b0:	b480      	push	{r7}
 81019b2:	b087      	sub	sp, #28
 81019b4:	af00      	add	r7, sp, #0
 81019b6:	60f8      	str	r0, [r7, #12]
 81019b8:	607b      	str	r3, [r7, #4]
 81019ba:	460b      	mov	r3, r1
 81019bc:	817b      	strh	r3, [r7, #10]
 81019be:	4613      	mov	r3, r2
 81019c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81019c2:	897b      	ldrh	r3, [r7, #10]
 81019c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 81019c8:	7a7b      	ldrb	r3, [r7, #9]
 81019ca:	041b      	lsls	r3, r3, #16
 81019cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81019d0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 81019d2:	687b      	ldr	r3, [r7, #4]
 81019d4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81019d6:	6a3b      	ldr	r3, [r7, #32]
 81019d8:	4313      	orrs	r3, r2
 81019da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 81019de:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 81019e0:	68fb      	ldr	r3, [r7, #12]
 81019e2:	681b      	ldr	r3, [r3, #0]
 81019e4:	685a      	ldr	r2, [r3, #4]
 81019e6:	6a3b      	ldr	r3, [r7, #32]
 81019e8:	0d5b      	lsrs	r3, r3, #21
 81019ea:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 81019ee:	4b08      	ldr	r3, [pc, #32]	; (8101a10 <I2C_TransferConfig+0x60>)
 81019f0:	430b      	orrs	r3, r1
 81019f2:	43db      	mvns	r3, r3
 81019f4:	ea02 0103 	and.w	r1, r2, r3
 81019f8:	68fb      	ldr	r3, [r7, #12]
 81019fa:	681b      	ldr	r3, [r3, #0]
 81019fc:	697a      	ldr	r2, [r7, #20]
 81019fe:	430a      	orrs	r2, r1
 8101a00:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8101a02:	bf00      	nop
 8101a04:	371c      	adds	r7, #28
 8101a06:	46bd      	mov	sp, r7
 8101a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a0c:	4770      	bx	lr
 8101a0e:	bf00      	nop
 8101a10:	03ff63ff 	.word	0x03ff63ff

08101a14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8101a14:	b480      	push	{r7}
 8101a16:	b083      	sub	sp, #12
 8101a18:	af00      	add	r7, sp, #0
 8101a1a:	6078      	str	r0, [r7, #4]
 8101a1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8101a1e:	687b      	ldr	r3, [r7, #4]
 8101a20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8101a24:	b2db      	uxtb	r3, r3
 8101a26:	2b20      	cmp	r3, #32
 8101a28:	d138      	bne.n	8101a9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8101a2a:	687b      	ldr	r3, [r7, #4]
 8101a2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8101a30:	2b01      	cmp	r3, #1
 8101a32:	d101      	bne.n	8101a38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8101a34:	2302      	movs	r3, #2
 8101a36:	e032      	b.n	8101a9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8101a38:	687b      	ldr	r3, [r7, #4]
 8101a3a:	2201      	movs	r2, #1
 8101a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8101a40:	687b      	ldr	r3, [r7, #4]
 8101a42:	2224      	movs	r2, #36	; 0x24
 8101a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8101a48:	687b      	ldr	r3, [r7, #4]
 8101a4a:	681b      	ldr	r3, [r3, #0]
 8101a4c:	681a      	ldr	r2, [r3, #0]
 8101a4e:	687b      	ldr	r3, [r7, #4]
 8101a50:	681b      	ldr	r3, [r3, #0]
 8101a52:	f022 0201 	bic.w	r2, r2, #1
 8101a56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8101a58:	687b      	ldr	r3, [r7, #4]
 8101a5a:	681b      	ldr	r3, [r3, #0]
 8101a5c:	681a      	ldr	r2, [r3, #0]
 8101a5e:	687b      	ldr	r3, [r7, #4]
 8101a60:	681b      	ldr	r3, [r3, #0]
 8101a62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8101a66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8101a68:	687b      	ldr	r3, [r7, #4]
 8101a6a:	681b      	ldr	r3, [r3, #0]
 8101a6c:	6819      	ldr	r1, [r3, #0]
 8101a6e:	687b      	ldr	r3, [r7, #4]
 8101a70:	681b      	ldr	r3, [r3, #0]
 8101a72:	683a      	ldr	r2, [r7, #0]
 8101a74:	430a      	orrs	r2, r1
 8101a76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8101a78:	687b      	ldr	r3, [r7, #4]
 8101a7a:	681b      	ldr	r3, [r3, #0]
 8101a7c:	681a      	ldr	r2, [r3, #0]
 8101a7e:	687b      	ldr	r3, [r7, #4]
 8101a80:	681b      	ldr	r3, [r3, #0]
 8101a82:	f042 0201 	orr.w	r2, r2, #1
 8101a86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8101a88:	687b      	ldr	r3, [r7, #4]
 8101a8a:	2220      	movs	r2, #32
 8101a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8101a90:	687b      	ldr	r3, [r7, #4]
 8101a92:	2200      	movs	r2, #0
 8101a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8101a98:	2300      	movs	r3, #0
 8101a9a:	e000      	b.n	8101a9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8101a9c:	2302      	movs	r3, #2
  }
}
 8101a9e:	4618      	mov	r0, r3
 8101aa0:	370c      	adds	r7, #12
 8101aa2:	46bd      	mov	sp, r7
 8101aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101aa8:	4770      	bx	lr

08101aaa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8101aaa:	b480      	push	{r7}
 8101aac:	b085      	sub	sp, #20
 8101aae:	af00      	add	r7, sp, #0
 8101ab0:	6078      	str	r0, [r7, #4]
 8101ab2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8101ab4:	687b      	ldr	r3, [r7, #4]
 8101ab6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8101aba:	b2db      	uxtb	r3, r3
 8101abc:	2b20      	cmp	r3, #32
 8101abe:	d139      	bne.n	8101b34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8101ac0:	687b      	ldr	r3, [r7, #4]
 8101ac2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8101ac6:	2b01      	cmp	r3, #1
 8101ac8:	d101      	bne.n	8101ace <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8101aca:	2302      	movs	r3, #2
 8101acc:	e033      	b.n	8101b36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8101ace:	687b      	ldr	r3, [r7, #4]
 8101ad0:	2201      	movs	r2, #1
 8101ad2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8101ad6:	687b      	ldr	r3, [r7, #4]
 8101ad8:	2224      	movs	r2, #36	; 0x24
 8101ada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8101ade:	687b      	ldr	r3, [r7, #4]
 8101ae0:	681b      	ldr	r3, [r3, #0]
 8101ae2:	681a      	ldr	r2, [r3, #0]
 8101ae4:	687b      	ldr	r3, [r7, #4]
 8101ae6:	681b      	ldr	r3, [r3, #0]
 8101ae8:	f022 0201 	bic.w	r2, r2, #1
 8101aec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8101aee:	687b      	ldr	r3, [r7, #4]
 8101af0:	681b      	ldr	r3, [r3, #0]
 8101af2:	681b      	ldr	r3, [r3, #0]
 8101af4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8101af6:	68fb      	ldr	r3, [r7, #12]
 8101af8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101afc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8101afe:	683b      	ldr	r3, [r7, #0]
 8101b00:	021b      	lsls	r3, r3, #8
 8101b02:	68fa      	ldr	r2, [r7, #12]
 8101b04:	4313      	orrs	r3, r2
 8101b06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8101b08:	687b      	ldr	r3, [r7, #4]
 8101b0a:	681b      	ldr	r3, [r3, #0]
 8101b0c:	68fa      	ldr	r2, [r7, #12]
 8101b0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8101b10:	687b      	ldr	r3, [r7, #4]
 8101b12:	681b      	ldr	r3, [r3, #0]
 8101b14:	681a      	ldr	r2, [r3, #0]
 8101b16:	687b      	ldr	r3, [r7, #4]
 8101b18:	681b      	ldr	r3, [r3, #0]
 8101b1a:	f042 0201 	orr.w	r2, r2, #1
 8101b1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8101b20:	687b      	ldr	r3, [r7, #4]
 8101b22:	2220      	movs	r2, #32
 8101b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8101b28:	687b      	ldr	r3, [r7, #4]
 8101b2a:	2200      	movs	r2, #0
 8101b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8101b30:	2300      	movs	r3, #0
 8101b32:	e000      	b.n	8101b36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8101b34:	2302      	movs	r3, #2
  }
}
 8101b36:	4618      	mov	r0, r3
 8101b38:	3714      	adds	r7, #20
 8101b3a:	46bd      	mov	sp, r7
 8101b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b40:	4770      	bx	lr
	...

08101b44 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8101b44:	b580      	push	{r7, lr}
 8101b46:	b084      	sub	sp, #16
 8101b48:	af00      	add	r7, sp, #0
 8101b4a:	60f8      	str	r0, [r7, #12]
 8101b4c:	460b      	mov	r3, r1
 8101b4e:	607a      	str	r2, [r7, #4]
 8101b50:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8101b52:	4b37      	ldr	r3, [pc, #220]	; (8101c30 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101b54:	681b      	ldr	r3, [r3, #0]
 8101b56:	f023 0201 	bic.w	r2, r3, #1
 8101b5a:	4935      	ldr	r1, [pc, #212]	; (8101c30 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101b5c:	68fb      	ldr	r3, [r7, #12]
 8101b5e:	4313      	orrs	r3, r2
 8101b60:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8101b62:	687b      	ldr	r3, [r7, #4]
 8101b64:	2b00      	cmp	r3, #0
 8101b66:	d123      	bne.n	8101bb0 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8101b68:	f7ff f916 	bl	8100d98 <HAL_GetCurrentCPUID>
 8101b6c:	4603      	mov	r3, r0
 8101b6e:	2b03      	cmp	r3, #3
 8101b70:	d158      	bne.n	8101c24 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8101b72:	4b2f      	ldr	r3, [pc, #188]	; (8101c30 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101b74:	691b      	ldr	r3, [r3, #16]
 8101b76:	4a2e      	ldr	r2, [pc, #184]	; (8101c30 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101b78:	f023 0301 	bic.w	r3, r3, #1
 8101b7c:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101b7e:	4b2d      	ldr	r3, [pc, #180]	; (8101c34 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101b80:	691b      	ldr	r3, [r3, #16]
 8101b82:	4a2c      	ldr	r2, [pc, #176]	; (8101c34 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101b84:	f043 0304 	orr.w	r3, r3, #4
 8101b88:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8101b8a:	f3bf 8f4f 	dsb	sy
}
 8101b8e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101b90:	f3bf 8f6f 	isb	sy
}
 8101b94:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101b96:	7afb      	ldrb	r3, [r7, #11]
 8101b98:	2b01      	cmp	r3, #1
 8101b9a:	d101      	bne.n	8101ba0 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101b9c:	bf30      	wfi
 8101b9e:	e000      	b.n	8101ba2 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101ba0:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101ba2:	4b24      	ldr	r3, [pc, #144]	; (8101c34 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101ba4:	691b      	ldr	r3, [r3, #16]
 8101ba6:	4a23      	ldr	r2, [pc, #140]	; (8101c34 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101ba8:	f023 0304 	bic.w	r3, r3, #4
 8101bac:	6113      	str	r3, [r2, #16]
 8101bae:	e03c      	b.n	8101c2a <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8101bb0:	687b      	ldr	r3, [r7, #4]
 8101bb2:	2b01      	cmp	r3, #1
 8101bb4:	d123      	bne.n	8101bfe <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8101bb6:	f7ff f8ef 	bl	8100d98 <HAL_GetCurrentCPUID>
 8101bba:	4603      	mov	r3, r0
 8101bbc:	2b01      	cmp	r3, #1
 8101bbe:	d133      	bne.n	8101c28 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8101bc0:	4b1b      	ldr	r3, [pc, #108]	; (8101c30 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101bc2:	695b      	ldr	r3, [r3, #20]
 8101bc4:	4a1a      	ldr	r2, [pc, #104]	; (8101c30 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101bc6:	f023 0302 	bic.w	r3, r3, #2
 8101bca:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101bcc:	4b19      	ldr	r3, [pc, #100]	; (8101c34 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101bce:	691b      	ldr	r3, [r3, #16]
 8101bd0:	4a18      	ldr	r2, [pc, #96]	; (8101c34 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101bd2:	f043 0304 	orr.w	r3, r3, #4
 8101bd6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8101bd8:	f3bf 8f4f 	dsb	sy
}
 8101bdc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101bde:	f3bf 8f6f 	isb	sy
}
 8101be2:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101be4:	7afb      	ldrb	r3, [r7, #11]
 8101be6:	2b01      	cmp	r3, #1
 8101be8:	d101      	bne.n	8101bee <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101bea:	bf30      	wfi
 8101bec:	e000      	b.n	8101bf0 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101bee:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101bf0:	4b10      	ldr	r3, [pc, #64]	; (8101c34 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101bf2:	691b      	ldr	r3, [r3, #16]
 8101bf4:	4a0f      	ldr	r2, [pc, #60]	; (8101c34 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101bf6:	f023 0304 	bic.w	r3, r3, #4
 8101bfa:	6113      	str	r3, [r2, #16]
 8101bfc:	e015      	b.n	8101c2a <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101bfe:	f7ff f8cb 	bl	8100d98 <HAL_GetCurrentCPUID>
 8101c02:	4603      	mov	r3, r0
 8101c04:	2b03      	cmp	r3, #3
 8101c06:	d106      	bne.n	8101c16 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8101c08:	4b09      	ldr	r3, [pc, #36]	; (8101c30 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101c0a:	691b      	ldr	r3, [r3, #16]
 8101c0c:	4a08      	ldr	r2, [pc, #32]	; (8101c30 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101c0e:	f023 0304 	bic.w	r3, r3, #4
 8101c12:	6113      	str	r3, [r2, #16]
 8101c14:	e009      	b.n	8101c2a <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8101c16:	4b06      	ldr	r3, [pc, #24]	; (8101c30 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101c18:	695b      	ldr	r3, [r3, #20]
 8101c1a:	4a05      	ldr	r2, [pc, #20]	; (8101c30 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101c1c:	f023 0304 	bic.w	r3, r3, #4
 8101c20:	6153      	str	r3, [r2, #20]
 8101c22:	e002      	b.n	8101c2a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101c24:	bf00      	nop
 8101c26:	e000      	b.n	8101c2a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101c28:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8101c2a:	3710      	adds	r7, #16
 8101c2c:	46bd      	mov	sp, r7
 8101c2e:	bd80      	pop	{r7, pc}
 8101c30:	58024800 	.word	0x58024800
 8101c34:	e000ed00 	.word	0xe000ed00

08101c38 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8101c38:	b580      	push	{r7, lr}
 8101c3a:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101c3c:	f7ff f8ac 	bl	8100d98 <HAL_GetCurrentCPUID>
 8101c40:	4603      	mov	r3, r0
 8101c42:	2b03      	cmp	r3, #3
 8101c44:	d101      	bne.n	8101c4a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8101c46:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8101c48:	e001      	b.n	8101c4e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8101c4a:	bf40      	sev
    __WFE ();
 8101c4c:	bf20      	wfe
}
 8101c4e:	bf00      	nop
 8101c50:	bd80      	pop	{r7, pc}
	...

08101c54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8101c54:	b480      	push	{r7}
 8101c56:	b089      	sub	sp, #36	; 0x24
 8101c58:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8101c5a:	4bb3      	ldr	r3, [pc, #716]	; (8101f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101c5c:	691b      	ldr	r3, [r3, #16]
 8101c5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8101c62:	2b18      	cmp	r3, #24
 8101c64:	f200 8155 	bhi.w	8101f12 <HAL_RCC_GetSysClockFreq+0x2be>
 8101c68:	a201      	add	r2, pc, #4	; (adr r2, 8101c70 <HAL_RCC_GetSysClockFreq+0x1c>)
 8101c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101c6e:	bf00      	nop
 8101c70:	08101cd5 	.word	0x08101cd5
 8101c74:	08101f13 	.word	0x08101f13
 8101c78:	08101f13 	.word	0x08101f13
 8101c7c:	08101f13 	.word	0x08101f13
 8101c80:	08101f13 	.word	0x08101f13
 8101c84:	08101f13 	.word	0x08101f13
 8101c88:	08101f13 	.word	0x08101f13
 8101c8c:	08101f13 	.word	0x08101f13
 8101c90:	08101cfb 	.word	0x08101cfb
 8101c94:	08101f13 	.word	0x08101f13
 8101c98:	08101f13 	.word	0x08101f13
 8101c9c:	08101f13 	.word	0x08101f13
 8101ca0:	08101f13 	.word	0x08101f13
 8101ca4:	08101f13 	.word	0x08101f13
 8101ca8:	08101f13 	.word	0x08101f13
 8101cac:	08101f13 	.word	0x08101f13
 8101cb0:	08101d01 	.word	0x08101d01
 8101cb4:	08101f13 	.word	0x08101f13
 8101cb8:	08101f13 	.word	0x08101f13
 8101cbc:	08101f13 	.word	0x08101f13
 8101cc0:	08101f13 	.word	0x08101f13
 8101cc4:	08101f13 	.word	0x08101f13
 8101cc8:	08101f13 	.word	0x08101f13
 8101ccc:	08101f13 	.word	0x08101f13
 8101cd0:	08101d07 	.word	0x08101d07
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101cd4:	4b94      	ldr	r3, [pc, #592]	; (8101f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101cd6:	681b      	ldr	r3, [r3, #0]
 8101cd8:	f003 0320 	and.w	r3, r3, #32
 8101cdc:	2b00      	cmp	r3, #0
 8101cde:	d009      	beq.n	8101cf4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8101ce0:	4b91      	ldr	r3, [pc, #580]	; (8101f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101ce2:	681b      	ldr	r3, [r3, #0]
 8101ce4:	08db      	lsrs	r3, r3, #3
 8101ce6:	f003 0303 	and.w	r3, r3, #3
 8101cea:	4a90      	ldr	r2, [pc, #576]	; (8101f2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101cec:	fa22 f303 	lsr.w	r3, r2, r3
 8101cf0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8101cf2:	e111      	b.n	8101f18 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8101cf4:	4b8d      	ldr	r3, [pc, #564]	; (8101f2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101cf6:	61bb      	str	r3, [r7, #24]
    break;
 8101cf8:	e10e      	b.n	8101f18 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8101cfa:	4b8d      	ldr	r3, [pc, #564]	; (8101f30 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101cfc:	61bb      	str	r3, [r7, #24]
    break;
 8101cfe:	e10b      	b.n	8101f18 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8101d00:	4b8c      	ldr	r3, [pc, #560]	; (8101f34 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8101d02:	61bb      	str	r3, [r7, #24]
    break;
 8101d04:	e108      	b.n	8101f18 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8101d06:	4b88      	ldr	r3, [pc, #544]	; (8101f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101d0a:	f003 0303 	and.w	r3, r3, #3
 8101d0e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8101d10:	4b85      	ldr	r3, [pc, #532]	; (8101f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101d14:	091b      	lsrs	r3, r3, #4
 8101d16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8101d1a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8101d1c:	4b82      	ldr	r3, [pc, #520]	; (8101f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101d20:	f003 0301 	and.w	r3, r3, #1
 8101d24:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8101d26:	4b80      	ldr	r3, [pc, #512]	; (8101f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8101d2a:	08db      	lsrs	r3, r3, #3
 8101d2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8101d30:	68fa      	ldr	r2, [r7, #12]
 8101d32:	fb02 f303 	mul.w	r3, r2, r3
 8101d36:	ee07 3a90 	vmov	s15, r3
 8101d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101d3e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8101d42:	693b      	ldr	r3, [r7, #16]
 8101d44:	2b00      	cmp	r3, #0
 8101d46:	f000 80e1 	beq.w	8101f0c <HAL_RCC_GetSysClockFreq+0x2b8>
 8101d4a:	697b      	ldr	r3, [r7, #20]
 8101d4c:	2b02      	cmp	r3, #2
 8101d4e:	f000 8083 	beq.w	8101e58 <HAL_RCC_GetSysClockFreq+0x204>
 8101d52:	697b      	ldr	r3, [r7, #20]
 8101d54:	2b02      	cmp	r3, #2
 8101d56:	f200 80a1 	bhi.w	8101e9c <HAL_RCC_GetSysClockFreq+0x248>
 8101d5a:	697b      	ldr	r3, [r7, #20]
 8101d5c:	2b00      	cmp	r3, #0
 8101d5e:	d003      	beq.n	8101d68 <HAL_RCC_GetSysClockFreq+0x114>
 8101d60:	697b      	ldr	r3, [r7, #20]
 8101d62:	2b01      	cmp	r3, #1
 8101d64:	d056      	beq.n	8101e14 <HAL_RCC_GetSysClockFreq+0x1c0>
 8101d66:	e099      	b.n	8101e9c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101d68:	4b6f      	ldr	r3, [pc, #444]	; (8101f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101d6a:	681b      	ldr	r3, [r3, #0]
 8101d6c:	f003 0320 	and.w	r3, r3, #32
 8101d70:	2b00      	cmp	r3, #0
 8101d72:	d02d      	beq.n	8101dd0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8101d74:	4b6c      	ldr	r3, [pc, #432]	; (8101f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101d76:	681b      	ldr	r3, [r3, #0]
 8101d78:	08db      	lsrs	r3, r3, #3
 8101d7a:	f003 0303 	and.w	r3, r3, #3
 8101d7e:	4a6b      	ldr	r2, [pc, #428]	; (8101f2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101d80:	fa22 f303 	lsr.w	r3, r2, r3
 8101d84:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101d86:	687b      	ldr	r3, [r7, #4]
 8101d88:	ee07 3a90 	vmov	s15, r3
 8101d8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101d90:	693b      	ldr	r3, [r7, #16]
 8101d92:	ee07 3a90 	vmov	s15, r3
 8101d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101d9e:	4b62      	ldr	r3, [pc, #392]	; (8101f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101da6:	ee07 3a90 	vmov	s15, r3
 8101daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101dae:	ed97 6a02 	vldr	s12, [r7, #8]
 8101db2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8101f38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101dbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101dca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8101dce:	e087      	b.n	8101ee0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101dd0:	693b      	ldr	r3, [r7, #16]
 8101dd2:	ee07 3a90 	vmov	s15, r3
 8101dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101dda:	eddf 6a58 	vldr	s13, [pc, #352]	; 8101f3c <HAL_RCC_GetSysClockFreq+0x2e8>
 8101dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101de2:	4b51      	ldr	r3, [pc, #324]	; (8101f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101dea:	ee07 3a90 	vmov	s15, r3
 8101dee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101df2:	ed97 6a02 	vldr	s12, [r7, #8]
 8101df6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8101f38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101dfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101e02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101e0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101e12:	e065      	b.n	8101ee0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101e14:	693b      	ldr	r3, [r7, #16]
 8101e16:	ee07 3a90 	vmov	s15, r3
 8101e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101e1e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8101f40 <HAL_RCC_GetSysClockFreq+0x2ec>
 8101e22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101e26:	4b40      	ldr	r3, [pc, #256]	; (8101f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101e2e:	ee07 3a90 	vmov	s15, r3
 8101e32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101e36:	ed97 6a02 	vldr	s12, [r7, #8]
 8101e3a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8101f38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101e3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101e42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101e46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101e4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101e52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101e56:	e043      	b.n	8101ee0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101e58:	693b      	ldr	r3, [r7, #16]
 8101e5a:	ee07 3a90 	vmov	s15, r3
 8101e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101e62:	eddf 6a38 	vldr	s13, [pc, #224]	; 8101f44 <HAL_RCC_GetSysClockFreq+0x2f0>
 8101e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101e6a:	4b2f      	ldr	r3, [pc, #188]	; (8101f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101e72:	ee07 3a90 	vmov	s15, r3
 8101e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101e7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8101e7e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8101f38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101e82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101e86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101e8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101e96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101e9a:	e021      	b.n	8101ee0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101e9c:	693b      	ldr	r3, [r7, #16]
 8101e9e:	ee07 3a90 	vmov	s15, r3
 8101ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101ea6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8101f40 <HAL_RCC_GetSysClockFreq+0x2ec>
 8101eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101eae:	4b1e      	ldr	r3, [pc, #120]	; (8101f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101eb6:	ee07 3a90 	vmov	s15, r3
 8101eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101ebe:	ed97 6a02 	vldr	s12, [r7, #8]
 8101ec2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8101f38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101ece:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101eda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101ede:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8101ee0:	4b11      	ldr	r3, [pc, #68]	; (8101f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101ee4:	0a5b      	lsrs	r3, r3, #9
 8101ee6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8101eea:	3301      	adds	r3, #1
 8101eec:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8101eee:	683b      	ldr	r3, [r7, #0]
 8101ef0:	ee07 3a90 	vmov	s15, r3
 8101ef4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8101ef8:	edd7 6a07 	vldr	s13, [r7, #28]
 8101efc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101f00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101f04:	ee17 3a90 	vmov	r3, s15
 8101f08:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8101f0a:	e005      	b.n	8101f18 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8101f0c:	2300      	movs	r3, #0
 8101f0e:	61bb      	str	r3, [r7, #24]
    break;
 8101f10:	e002      	b.n	8101f18 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8101f12:	4b07      	ldr	r3, [pc, #28]	; (8101f30 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101f14:	61bb      	str	r3, [r7, #24]
    break;
 8101f16:	bf00      	nop
  }

  return sysclockfreq;
 8101f18:	69bb      	ldr	r3, [r7, #24]
}
 8101f1a:	4618      	mov	r0, r3
 8101f1c:	3724      	adds	r7, #36	; 0x24
 8101f1e:	46bd      	mov	sp, r7
 8101f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f24:	4770      	bx	lr
 8101f26:	bf00      	nop
 8101f28:	58024400 	.word	0x58024400
 8101f2c:	03d09000 	.word	0x03d09000
 8101f30:	003d0900 	.word	0x003d0900
 8101f34:	007a1200 	.word	0x007a1200
 8101f38:	46000000 	.word	0x46000000
 8101f3c:	4c742400 	.word	0x4c742400
 8101f40:	4a742400 	.word	0x4a742400
 8101f44:	4af42400 	.word	0x4af42400

08101f48 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8101f48:	b580      	push	{r7, lr}
 8101f4a:	b086      	sub	sp, #24
 8101f4c:	af00      	add	r7, sp, #0
 8101f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8101f50:	2300      	movs	r3, #0
 8101f52:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8101f54:	2300      	movs	r3, #0
 8101f56:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8101f58:	687b      	ldr	r3, [r7, #4]
 8101f5a:	681b      	ldr	r3, [r3, #0]
 8101f5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8101f60:	2b00      	cmp	r3, #0
 8101f62:	d03f      	beq.n	8101fe4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8101f64:	687b      	ldr	r3, [r7, #4]
 8101f66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8101f68:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8101f6c:	d02a      	beq.n	8101fc4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8101f6e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8101f72:	d824      	bhi.n	8101fbe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8101f74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8101f78:	d018      	beq.n	8101fac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8101f7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8101f7e:	d81e      	bhi.n	8101fbe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8101f80:	2b00      	cmp	r3, #0
 8101f82:	d003      	beq.n	8101f8c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8101f84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8101f88:	d007      	beq.n	8101f9a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8101f8a:	e018      	b.n	8101fbe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101f8c:	4ba3      	ldr	r3, [pc, #652]	; (810221c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101f90:	4aa2      	ldr	r2, [pc, #648]	; (810221c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101f92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101f96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8101f98:	e015      	b.n	8101fc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8101f9a:	687b      	ldr	r3, [r7, #4]
 8101f9c:	3304      	adds	r3, #4
 8101f9e:	2102      	movs	r1, #2
 8101fa0:	4618      	mov	r0, r3
 8101fa2:	f000 ff17 	bl	8102dd4 <RCCEx_PLL2_Config>
 8101fa6:	4603      	mov	r3, r0
 8101fa8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8101faa:	e00c      	b.n	8101fc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8101fac:	687b      	ldr	r3, [r7, #4]
 8101fae:	3324      	adds	r3, #36	; 0x24
 8101fb0:	2102      	movs	r1, #2
 8101fb2:	4618      	mov	r0, r3
 8101fb4:	f000 ffc0 	bl	8102f38 <RCCEx_PLL3_Config>
 8101fb8:	4603      	mov	r3, r0
 8101fba:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8101fbc:	e003      	b.n	8101fc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101fbe:	2301      	movs	r3, #1
 8101fc0:	75fb      	strb	r3, [r7, #23]
      break;
 8101fc2:	e000      	b.n	8101fc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8101fc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101fc6:	7dfb      	ldrb	r3, [r7, #23]
 8101fc8:	2b00      	cmp	r3, #0
 8101fca:	d109      	bne.n	8101fe0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8101fcc:	4b93      	ldr	r3, [pc, #588]	; (810221c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101fd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8101fd4:	687b      	ldr	r3, [r7, #4]
 8101fd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8101fd8:	4990      	ldr	r1, [pc, #576]	; (810221c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101fda:	4313      	orrs	r3, r2
 8101fdc:	650b      	str	r3, [r1, #80]	; 0x50
 8101fde:	e001      	b.n	8101fe4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101fe0:	7dfb      	ldrb	r3, [r7, #23]
 8101fe2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8101fe4:	687b      	ldr	r3, [r7, #4]
 8101fe6:	681b      	ldr	r3, [r3, #0]
 8101fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8101fec:	2b00      	cmp	r3, #0
 8101fee:	d03d      	beq.n	810206c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8101ff0:	687b      	ldr	r3, [r7, #4]
 8101ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101ff4:	2b04      	cmp	r3, #4
 8101ff6:	d826      	bhi.n	8102046 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8101ff8:	a201      	add	r2, pc, #4	; (adr r2, 8102000 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8101ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101ffe:	bf00      	nop
 8102000:	08102015 	.word	0x08102015
 8102004:	08102023 	.word	0x08102023
 8102008:	08102035 	.word	0x08102035
 810200c:	0810204d 	.word	0x0810204d
 8102010:	0810204d 	.word	0x0810204d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102014:	4b81      	ldr	r3, [pc, #516]	; (810221c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102018:	4a80      	ldr	r2, [pc, #512]	; (810221c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810201a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810201e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102020:	e015      	b.n	810204e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102022:	687b      	ldr	r3, [r7, #4]
 8102024:	3304      	adds	r3, #4
 8102026:	2100      	movs	r1, #0
 8102028:	4618      	mov	r0, r3
 810202a:	f000 fed3 	bl	8102dd4 <RCCEx_PLL2_Config>
 810202e:	4603      	mov	r3, r0
 8102030:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102032:	e00c      	b.n	810204e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102034:	687b      	ldr	r3, [r7, #4]
 8102036:	3324      	adds	r3, #36	; 0x24
 8102038:	2100      	movs	r1, #0
 810203a:	4618      	mov	r0, r3
 810203c:	f000 ff7c 	bl	8102f38 <RCCEx_PLL3_Config>
 8102040:	4603      	mov	r3, r0
 8102042:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102044:	e003      	b.n	810204e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102046:	2301      	movs	r3, #1
 8102048:	75fb      	strb	r3, [r7, #23]
      break;
 810204a:	e000      	b.n	810204e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 810204c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810204e:	7dfb      	ldrb	r3, [r7, #23]
 8102050:	2b00      	cmp	r3, #0
 8102052:	d109      	bne.n	8102068 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8102054:	4b71      	ldr	r3, [pc, #452]	; (810221c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102058:	f023 0207 	bic.w	r2, r3, #7
 810205c:	687b      	ldr	r3, [r7, #4]
 810205e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102060:	496e      	ldr	r1, [pc, #440]	; (810221c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102062:	4313      	orrs	r3, r2
 8102064:	650b      	str	r3, [r1, #80]	; 0x50
 8102066:	e001      	b.n	810206c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102068:	7dfb      	ldrb	r3, [r7, #23]
 810206a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 810206c:	687b      	ldr	r3, [r7, #4]
 810206e:	681b      	ldr	r3, [r3, #0]
 8102070:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8102074:	2b00      	cmp	r3, #0
 8102076:	d042      	beq.n	81020fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8102078:	687b      	ldr	r3, [r7, #4]
 810207a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810207c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102080:	d02b      	beq.n	81020da <HAL_RCCEx_PeriphCLKConfig+0x192>
 8102082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102086:	d825      	bhi.n	81020d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8102088:	2bc0      	cmp	r3, #192	; 0xc0
 810208a:	d028      	beq.n	81020de <HAL_RCCEx_PeriphCLKConfig+0x196>
 810208c:	2bc0      	cmp	r3, #192	; 0xc0
 810208e:	d821      	bhi.n	81020d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8102090:	2b80      	cmp	r3, #128	; 0x80
 8102092:	d016      	beq.n	81020c2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8102094:	2b80      	cmp	r3, #128	; 0x80
 8102096:	d81d      	bhi.n	81020d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8102098:	2b00      	cmp	r3, #0
 810209a:	d002      	beq.n	81020a2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 810209c:	2b40      	cmp	r3, #64	; 0x40
 810209e:	d007      	beq.n	81020b0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 81020a0:	e018      	b.n	81020d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81020a2:	4b5e      	ldr	r3, [pc, #376]	; (810221c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81020a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81020a6:	4a5d      	ldr	r2, [pc, #372]	; (810221c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81020a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81020ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81020ae:	e017      	b.n	81020e0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81020b0:	687b      	ldr	r3, [r7, #4]
 81020b2:	3304      	adds	r3, #4
 81020b4:	2100      	movs	r1, #0
 81020b6:	4618      	mov	r0, r3
 81020b8:	f000 fe8c 	bl	8102dd4 <RCCEx_PLL2_Config>
 81020bc:	4603      	mov	r3, r0
 81020be:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81020c0:	e00e      	b.n	81020e0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81020c2:	687b      	ldr	r3, [r7, #4]
 81020c4:	3324      	adds	r3, #36	; 0x24
 81020c6:	2100      	movs	r1, #0
 81020c8:	4618      	mov	r0, r3
 81020ca:	f000 ff35 	bl	8102f38 <RCCEx_PLL3_Config>
 81020ce:	4603      	mov	r3, r0
 81020d0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81020d2:	e005      	b.n	81020e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81020d4:	2301      	movs	r3, #1
 81020d6:	75fb      	strb	r3, [r7, #23]
      break;
 81020d8:	e002      	b.n	81020e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 81020da:	bf00      	nop
 81020dc:	e000      	b.n	81020e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 81020de:	bf00      	nop
    }

    if(ret == HAL_OK)
 81020e0:	7dfb      	ldrb	r3, [r7, #23]
 81020e2:	2b00      	cmp	r3, #0
 81020e4:	d109      	bne.n	81020fa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 81020e6:	4b4d      	ldr	r3, [pc, #308]	; (810221c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81020e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81020ea:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 81020ee:	687b      	ldr	r3, [r7, #4]
 81020f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81020f2:	494a      	ldr	r1, [pc, #296]	; (810221c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81020f4:	4313      	orrs	r3, r2
 81020f6:	650b      	str	r3, [r1, #80]	; 0x50
 81020f8:	e001      	b.n	81020fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81020fa:	7dfb      	ldrb	r3, [r7, #23]
 81020fc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 81020fe:	687b      	ldr	r3, [r7, #4]
 8102100:	681b      	ldr	r3, [r3, #0]
 8102102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8102106:	2b00      	cmp	r3, #0
 8102108:	d049      	beq.n	810219e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 810210a:	687b      	ldr	r3, [r7, #4]
 810210c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8102110:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8102114:	d030      	beq.n	8102178 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8102116:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810211a:	d82a      	bhi.n	8102172 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 810211c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8102120:	d02c      	beq.n	810217c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8102122:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8102126:	d824      	bhi.n	8102172 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8102128:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810212c:	d018      	beq.n	8102160 <HAL_RCCEx_PeriphCLKConfig+0x218>
 810212e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8102132:	d81e      	bhi.n	8102172 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8102134:	2b00      	cmp	r3, #0
 8102136:	d003      	beq.n	8102140 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8102138:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810213c:	d007      	beq.n	810214e <HAL_RCCEx_PeriphCLKConfig+0x206>
 810213e:	e018      	b.n	8102172 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102140:	4b36      	ldr	r3, [pc, #216]	; (810221c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102144:	4a35      	ldr	r2, [pc, #212]	; (810221c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102146:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810214a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810214c:	e017      	b.n	810217e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810214e:	687b      	ldr	r3, [r7, #4]
 8102150:	3304      	adds	r3, #4
 8102152:	2100      	movs	r1, #0
 8102154:	4618      	mov	r0, r3
 8102156:	f000 fe3d 	bl	8102dd4 <RCCEx_PLL2_Config>
 810215a:	4603      	mov	r3, r0
 810215c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 810215e:	e00e      	b.n	810217e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102160:	687b      	ldr	r3, [r7, #4]
 8102162:	3324      	adds	r3, #36	; 0x24
 8102164:	2100      	movs	r1, #0
 8102166:	4618      	mov	r0, r3
 8102168:	f000 fee6 	bl	8102f38 <RCCEx_PLL3_Config>
 810216c:	4603      	mov	r3, r0
 810216e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102170:	e005      	b.n	810217e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8102172:	2301      	movs	r3, #1
 8102174:	75fb      	strb	r3, [r7, #23]
      break;
 8102176:	e002      	b.n	810217e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8102178:	bf00      	nop
 810217a:	e000      	b.n	810217e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 810217c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810217e:	7dfb      	ldrb	r3, [r7, #23]
 8102180:	2b00      	cmp	r3, #0
 8102182:	d10a      	bne.n	810219a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8102184:	4b25      	ldr	r3, [pc, #148]	; (810221c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102188:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 810218c:	687b      	ldr	r3, [r7, #4]
 810218e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8102192:	4922      	ldr	r1, [pc, #136]	; (810221c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102194:	4313      	orrs	r3, r2
 8102196:	658b      	str	r3, [r1, #88]	; 0x58
 8102198:	e001      	b.n	810219e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810219a:	7dfb      	ldrb	r3, [r7, #23]
 810219c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 810219e:	687b      	ldr	r3, [r7, #4]
 81021a0:	681b      	ldr	r3, [r3, #0]
 81021a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 81021a6:	2b00      	cmp	r3, #0
 81021a8:	d04b      	beq.n	8102242 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 81021aa:	687b      	ldr	r3, [r7, #4]
 81021ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 81021b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81021b4:	d030      	beq.n	8102218 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 81021b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81021ba:	d82a      	bhi.n	8102212 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81021bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81021c0:	d02e      	beq.n	8102220 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 81021c2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81021c6:	d824      	bhi.n	8102212 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81021c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81021cc:	d018      	beq.n	8102200 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 81021ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81021d2:	d81e      	bhi.n	8102212 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81021d4:	2b00      	cmp	r3, #0
 81021d6:	d003      	beq.n	81021e0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 81021d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81021dc:	d007      	beq.n	81021ee <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 81021de:	e018      	b.n	8102212 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81021e0:	4b0e      	ldr	r3, [pc, #56]	; (810221c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81021e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81021e4:	4a0d      	ldr	r2, [pc, #52]	; (810221c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81021e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81021ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81021ec:	e019      	b.n	8102222 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81021ee:	687b      	ldr	r3, [r7, #4]
 81021f0:	3304      	adds	r3, #4
 81021f2:	2100      	movs	r1, #0
 81021f4:	4618      	mov	r0, r3
 81021f6:	f000 fded 	bl	8102dd4 <RCCEx_PLL2_Config>
 81021fa:	4603      	mov	r3, r0
 81021fc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 81021fe:	e010      	b.n	8102222 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102200:	687b      	ldr	r3, [r7, #4]
 8102202:	3324      	adds	r3, #36	; 0x24
 8102204:	2100      	movs	r1, #0
 8102206:	4618      	mov	r0, r3
 8102208:	f000 fe96 	bl	8102f38 <RCCEx_PLL3_Config>
 810220c:	4603      	mov	r3, r0
 810220e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102210:	e007      	b.n	8102222 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8102212:	2301      	movs	r3, #1
 8102214:	75fb      	strb	r3, [r7, #23]
      break;
 8102216:	e004      	b.n	8102222 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8102218:	bf00      	nop
 810221a:	e002      	b.n	8102222 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 810221c:	58024400 	.word	0x58024400
      break;
 8102220:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102222:	7dfb      	ldrb	r3, [r7, #23]
 8102224:	2b00      	cmp	r3, #0
 8102226:	d10a      	bne.n	810223e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8102228:	4b99      	ldr	r3, [pc, #612]	; (8102490 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810222a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810222c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8102230:	687b      	ldr	r3, [r7, #4]
 8102232:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8102236:	4996      	ldr	r1, [pc, #600]	; (8102490 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102238:	4313      	orrs	r3, r2
 810223a:	658b      	str	r3, [r1, #88]	; 0x58
 810223c:	e001      	b.n	8102242 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810223e:	7dfb      	ldrb	r3, [r7, #23]
 8102240:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8102242:	687b      	ldr	r3, [r7, #4]
 8102244:	681b      	ldr	r3, [r3, #0]
 8102246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810224a:	2b00      	cmp	r3, #0
 810224c:	d032      	beq.n	81022b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 810224e:	687b      	ldr	r3, [r7, #4]
 8102250:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102252:	2b30      	cmp	r3, #48	; 0x30
 8102254:	d01c      	beq.n	8102290 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8102256:	2b30      	cmp	r3, #48	; 0x30
 8102258:	d817      	bhi.n	810228a <HAL_RCCEx_PeriphCLKConfig+0x342>
 810225a:	2b20      	cmp	r3, #32
 810225c:	d00c      	beq.n	8102278 <HAL_RCCEx_PeriphCLKConfig+0x330>
 810225e:	2b20      	cmp	r3, #32
 8102260:	d813      	bhi.n	810228a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8102262:	2b00      	cmp	r3, #0
 8102264:	d016      	beq.n	8102294 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8102266:	2b10      	cmp	r3, #16
 8102268:	d10f      	bne.n	810228a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810226a:	4b89      	ldr	r3, [pc, #548]	; (8102490 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810226c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810226e:	4a88      	ldr	r2, [pc, #544]	; (8102490 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102274:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8102276:	e00e      	b.n	8102296 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8102278:	687b      	ldr	r3, [r7, #4]
 810227a:	3304      	adds	r3, #4
 810227c:	2102      	movs	r1, #2
 810227e:	4618      	mov	r0, r3
 8102280:	f000 fda8 	bl	8102dd4 <RCCEx_PLL2_Config>
 8102284:	4603      	mov	r3, r0
 8102286:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8102288:	e005      	b.n	8102296 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 810228a:	2301      	movs	r3, #1
 810228c:	75fb      	strb	r3, [r7, #23]
      break;
 810228e:	e002      	b.n	8102296 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8102290:	bf00      	nop
 8102292:	e000      	b.n	8102296 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8102294:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102296:	7dfb      	ldrb	r3, [r7, #23]
 8102298:	2b00      	cmp	r3, #0
 810229a:	d109      	bne.n	81022b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 810229c:	4b7c      	ldr	r3, [pc, #496]	; (8102490 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810229e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81022a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 81022a4:	687b      	ldr	r3, [r7, #4]
 81022a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81022a8:	4979      	ldr	r1, [pc, #484]	; (8102490 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81022aa:	4313      	orrs	r3, r2
 81022ac:	64cb      	str	r3, [r1, #76]	; 0x4c
 81022ae:	e001      	b.n	81022b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81022b0:	7dfb      	ldrb	r3, [r7, #23]
 81022b2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 81022b4:	687b      	ldr	r3, [r7, #4]
 81022b6:	681b      	ldr	r3, [r3, #0]
 81022b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81022bc:	2b00      	cmp	r3, #0
 81022be:	d047      	beq.n	8102350 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 81022c0:	687b      	ldr	r3, [r7, #4]
 81022c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81022c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81022c8:	d030      	beq.n	810232c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 81022ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81022ce:	d82a      	bhi.n	8102326 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 81022d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81022d4:	d02c      	beq.n	8102330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 81022d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81022da:	d824      	bhi.n	8102326 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 81022dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81022e0:	d018      	beq.n	8102314 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 81022e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81022e6:	d81e      	bhi.n	8102326 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 81022e8:	2b00      	cmp	r3, #0
 81022ea:	d003      	beq.n	81022f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 81022ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81022f0:	d007      	beq.n	8102302 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 81022f2:	e018      	b.n	8102326 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81022f4:	4b66      	ldr	r3, [pc, #408]	; (8102490 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81022f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81022f8:	4a65      	ldr	r2, [pc, #404]	; (8102490 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81022fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81022fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8102300:	e017      	b.n	8102332 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102302:	687b      	ldr	r3, [r7, #4]
 8102304:	3304      	adds	r3, #4
 8102306:	2100      	movs	r1, #0
 8102308:	4618      	mov	r0, r3
 810230a:	f000 fd63 	bl	8102dd4 <RCCEx_PLL2_Config>
 810230e:	4603      	mov	r3, r0
 8102310:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8102312:	e00e      	b.n	8102332 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102314:	687b      	ldr	r3, [r7, #4]
 8102316:	3324      	adds	r3, #36	; 0x24
 8102318:	2100      	movs	r1, #0
 810231a:	4618      	mov	r0, r3
 810231c:	f000 fe0c 	bl	8102f38 <RCCEx_PLL3_Config>
 8102320:	4603      	mov	r3, r0
 8102322:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8102324:	e005      	b.n	8102332 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102326:	2301      	movs	r3, #1
 8102328:	75fb      	strb	r3, [r7, #23]
      break;
 810232a:	e002      	b.n	8102332 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 810232c:	bf00      	nop
 810232e:	e000      	b.n	8102332 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8102330:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102332:	7dfb      	ldrb	r3, [r7, #23]
 8102334:	2b00      	cmp	r3, #0
 8102336:	d109      	bne.n	810234c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8102338:	4b55      	ldr	r3, [pc, #340]	; (8102490 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810233a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810233c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8102340:	687b      	ldr	r3, [r7, #4]
 8102342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102344:	4952      	ldr	r1, [pc, #328]	; (8102490 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102346:	4313      	orrs	r3, r2
 8102348:	650b      	str	r3, [r1, #80]	; 0x50
 810234a:	e001      	b.n	8102350 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810234c:	7dfb      	ldrb	r3, [r7, #23]
 810234e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8102350:	687b      	ldr	r3, [r7, #4]
 8102352:	681b      	ldr	r3, [r3, #0]
 8102354:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8102358:	2b00      	cmp	r3, #0
 810235a:	d049      	beq.n	81023f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 810235c:	687b      	ldr	r3, [r7, #4]
 810235e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102360:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8102364:	d02e      	beq.n	81023c4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8102366:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 810236a:	d828      	bhi.n	81023be <HAL_RCCEx_PeriphCLKConfig+0x476>
 810236c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8102370:	d02a      	beq.n	81023c8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8102372:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8102376:	d822      	bhi.n	81023be <HAL_RCCEx_PeriphCLKConfig+0x476>
 8102378:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810237c:	d026      	beq.n	81023cc <HAL_RCCEx_PeriphCLKConfig+0x484>
 810237e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8102382:	d81c      	bhi.n	81023be <HAL_RCCEx_PeriphCLKConfig+0x476>
 8102384:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8102388:	d010      	beq.n	81023ac <HAL_RCCEx_PeriphCLKConfig+0x464>
 810238a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810238e:	d816      	bhi.n	81023be <HAL_RCCEx_PeriphCLKConfig+0x476>
 8102390:	2b00      	cmp	r3, #0
 8102392:	d01d      	beq.n	81023d0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8102394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8102398:	d111      	bne.n	81023be <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810239a:	687b      	ldr	r3, [r7, #4]
 810239c:	3304      	adds	r3, #4
 810239e:	2101      	movs	r1, #1
 81023a0:	4618      	mov	r0, r3
 81023a2:	f000 fd17 	bl	8102dd4 <RCCEx_PLL2_Config>
 81023a6:	4603      	mov	r3, r0
 81023a8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 81023aa:	e012      	b.n	81023d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81023ac:	687b      	ldr	r3, [r7, #4]
 81023ae:	3324      	adds	r3, #36	; 0x24
 81023b0:	2101      	movs	r1, #1
 81023b2:	4618      	mov	r0, r3
 81023b4:	f000 fdc0 	bl	8102f38 <RCCEx_PLL3_Config>
 81023b8:	4603      	mov	r3, r0
 81023ba:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 81023bc:	e009      	b.n	81023d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81023be:	2301      	movs	r3, #1
 81023c0:	75fb      	strb	r3, [r7, #23]
      break;
 81023c2:	e006      	b.n	81023d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 81023c4:	bf00      	nop
 81023c6:	e004      	b.n	81023d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 81023c8:	bf00      	nop
 81023ca:	e002      	b.n	81023d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 81023cc:	bf00      	nop
 81023ce:	e000      	b.n	81023d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 81023d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 81023d2:	7dfb      	ldrb	r3, [r7, #23]
 81023d4:	2b00      	cmp	r3, #0
 81023d6:	d109      	bne.n	81023ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 81023d8:	4b2d      	ldr	r3, [pc, #180]	; (8102490 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81023da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81023dc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 81023e0:	687b      	ldr	r3, [r7, #4]
 81023e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81023e4:	492a      	ldr	r1, [pc, #168]	; (8102490 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81023e6:	4313      	orrs	r3, r2
 81023e8:	650b      	str	r3, [r1, #80]	; 0x50
 81023ea:	e001      	b.n	81023f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81023ec:	7dfb      	ldrb	r3, [r7, #23]
 81023ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81023f0:	687b      	ldr	r3, [r7, #4]
 81023f2:	681b      	ldr	r3, [r3, #0]
 81023f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81023f8:	2b00      	cmp	r3, #0
 81023fa:	d04d      	beq.n	8102498 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 81023fc:	687b      	ldr	r3, [r7, #4]
 81023fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8102402:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8102406:	d02e      	beq.n	8102466 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8102408:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810240c:	d828      	bhi.n	8102460 <HAL_RCCEx_PeriphCLKConfig+0x518>
 810240e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102412:	d02a      	beq.n	810246a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8102414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102418:	d822      	bhi.n	8102460 <HAL_RCCEx_PeriphCLKConfig+0x518>
 810241a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810241e:	d026      	beq.n	810246e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8102420:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8102424:	d81c      	bhi.n	8102460 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8102426:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810242a:	d010      	beq.n	810244e <HAL_RCCEx_PeriphCLKConfig+0x506>
 810242c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102430:	d816      	bhi.n	8102460 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8102432:	2b00      	cmp	r3, #0
 8102434:	d01d      	beq.n	8102472 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8102436:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810243a:	d111      	bne.n	8102460 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810243c:	687b      	ldr	r3, [r7, #4]
 810243e:	3304      	adds	r3, #4
 8102440:	2101      	movs	r1, #1
 8102442:	4618      	mov	r0, r3
 8102444:	f000 fcc6 	bl	8102dd4 <RCCEx_PLL2_Config>
 8102448:	4603      	mov	r3, r0
 810244a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 810244c:	e012      	b.n	8102474 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810244e:	687b      	ldr	r3, [r7, #4]
 8102450:	3324      	adds	r3, #36	; 0x24
 8102452:	2101      	movs	r1, #1
 8102454:	4618      	mov	r0, r3
 8102456:	f000 fd6f 	bl	8102f38 <RCCEx_PLL3_Config>
 810245a:	4603      	mov	r3, r0
 810245c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 810245e:	e009      	b.n	8102474 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8102460:	2301      	movs	r3, #1
 8102462:	75fb      	strb	r3, [r7, #23]
      break;
 8102464:	e006      	b.n	8102474 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8102466:	bf00      	nop
 8102468:	e004      	b.n	8102474 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 810246a:	bf00      	nop
 810246c:	e002      	b.n	8102474 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 810246e:	bf00      	nop
 8102470:	e000      	b.n	8102474 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8102472:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102474:	7dfb      	ldrb	r3, [r7, #23]
 8102476:	2b00      	cmp	r3, #0
 8102478:	d10c      	bne.n	8102494 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 810247a:	4b05      	ldr	r3, [pc, #20]	; (8102490 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810247c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810247e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8102482:	687b      	ldr	r3, [r7, #4]
 8102484:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8102488:	4901      	ldr	r1, [pc, #4]	; (8102490 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810248a:	4313      	orrs	r3, r2
 810248c:	658b      	str	r3, [r1, #88]	; 0x58
 810248e:	e003      	b.n	8102498 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8102490:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102494:	7dfb      	ldrb	r3, [r7, #23]
 8102496:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8102498:	687b      	ldr	r3, [r7, #4]
 810249a:	681b      	ldr	r3, [r3, #0]
 810249c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81024a0:	2b00      	cmp	r3, #0
 81024a2:	d02f      	beq.n	8102504 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 81024a4:	687b      	ldr	r3, [r7, #4]
 81024a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81024a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81024ac:	d00e      	beq.n	81024cc <HAL_RCCEx_PeriphCLKConfig+0x584>
 81024ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81024b2:	d814      	bhi.n	81024de <HAL_RCCEx_PeriphCLKConfig+0x596>
 81024b4:	2b00      	cmp	r3, #0
 81024b6:	d015      	beq.n	81024e4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 81024b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81024bc:	d10f      	bne.n	81024de <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81024be:	4bb0      	ldr	r3, [pc, #704]	; (8102780 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81024c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81024c2:	4aaf      	ldr	r2, [pc, #700]	; (8102780 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81024c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81024c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 81024ca:	e00c      	b.n	81024e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81024cc:	687b      	ldr	r3, [r7, #4]
 81024ce:	3304      	adds	r3, #4
 81024d0:	2101      	movs	r1, #1
 81024d2:	4618      	mov	r0, r3
 81024d4:	f000 fc7e 	bl	8102dd4 <RCCEx_PLL2_Config>
 81024d8:	4603      	mov	r3, r0
 81024da:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 81024dc:	e003      	b.n	81024e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81024de:	2301      	movs	r3, #1
 81024e0:	75fb      	strb	r3, [r7, #23]
      break;
 81024e2:	e000      	b.n	81024e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 81024e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 81024e6:	7dfb      	ldrb	r3, [r7, #23]
 81024e8:	2b00      	cmp	r3, #0
 81024ea:	d109      	bne.n	8102500 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 81024ec:	4ba4      	ldr	r3, [pc, #656]	; (8102780 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81024ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81024f0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 81024f4:	687b      	ldr	r3, [r7, #4]
 81024f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81024f8:	49a1      	ldr	r1, [pc, #644]	; (8102780 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81024fa:	4313      	orrs	r3, r2
 81024fc:	650b      	str	r3, [r1, #80]	; 0x50
 81024fe:	e001      	b.n	8102504 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102500:	7dfb      	ldrb	r3, [r7, #23]
 8102502:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8102504:	687b      	ldr	r3, [r7, #4]
 8102506:	681b      	ldr	r3, [r3, #0]
 8102508:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810250c:	2b00      	cmp	r3, #0
 810250e:	d032      	beq.n	8102576 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8102510:	687b      	ldr	r3, [r7, #4]
 8102512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102514:	2b03      	cmp	r3, #3
 8102516:	d81b      	bhi.n	8102550 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8102518:	a201      	add	r2, pc, #4	; (adr r2, 8102520 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 810251a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810251e:	bf00      	nop
 8102520:	08102557 	.word	0x08102557
 8102524:	08102531 	.word	0x08102531
 8102528:	0810253f 	.word	0x0810253f
 810252c:	08102557 	.word	0x08102557
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102530:	4b93      	ldr	r3, [pc, #588]	; (8102780 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102534:	4a92      	ldr	r2, [pc, #584]	; (8102780 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102536:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810253a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 810253c:	e00c      	b.n	8102558 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810253e:	687b      	ldr	r3, [r7, #4]
 8102540:	3304      	adds	r3, #4
 8102542:	2102      	movs	r1, #2
 8102544:	4618      	mov	r0, r3
 8102546:	f000 fc45 	bl	8102dd4 <RCCEx_PLL2_Config>
 810254a:	4603      	mov	r3, r0
 810254c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 810254e:	e003      	b.n	8102558 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8102550:	2301      	movs	r3, #1
 8102552:	75fb      	strb	r3, [r7, #23]
      break;
 8102554:	e000      	b.n	8102558 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8102556:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102558:	7dfb      	ldrb	r3, [r7, #23]
 810255a:	2b00      	cmp	r3, #0
 810255c:	d109      	bne.n	8102572 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810255e:	4b88      	ldr	r3, [pc, #544]	; (8102780 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102562:	f023 0203 	bic.w	r2, r3, #3
 8102566:	687b      	ldr	r3, [r7, #4]
 8102568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810256a:	4985      	ldr	r1, [pc, #532]	; (8102780 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810256c:	4313      	orrs	r3, r2
 810256e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8102570:	e001      	b.n	8102576 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102572:	7dfb      	ldrb	r3, [r7, #23]
 8102574:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8102576:	687b      	ldr	r3, [r7, #4]
 8102578:	681b      	ldr	r3, [r3, #0]
 810257a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810257e:	2b00      	cmp	r3, #0
 8102580:	f000 8088 	beq.w	8102694 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8102584:	4b7f      	ldr	r3, [pc, #508]	; (8102784 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8102586:	681b      	ldr	r3, [r3, #0]
 8102588:	4a7e      	ldr	r2, [pc, #504]	; (8102784 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 810258a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810258e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8102590:	f7fe fae6 	bl	8100b60 <HAL_GetTick>
 8102594:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8102596:	e009      	b.n	81025ac <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8102598:	f7fe fae2 	bl	8100b60 <HAL_GetTick>
 810259c:	4602      	mov	r2, r0
 810259e:	693b      	ldr	r3, [r7, #16]
 81025a0:	1ad3      	subs	r3, r2, r3
 81025a2:	2b64      	cmp	r3, #100	; 0x64
 81025a4:	d902      	bls.n	81025ac <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 81025a6:	2303      	movs	r3, #3
 81025a8:	75fb      	strb	r3, [r7, #23]
        break;
 81025aa:	e005      	b.n	81025b8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81025ac:	4b75      	ldr	r3, [pc, #468]	; (8102784 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 81025ae:	681b      	ldr	r3, [r3, #0]
 81025b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81025b4:	2b00      	cmp	r3, #0
 81025b6:	d0ef      	beq.n	8102598 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 81025b8:	7dfb      	ldrb	r3, [r7, #23]
 81025ba:	2b00      	cmp	r3, #0
 81025bc:	d168      	bne.n	8102690 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 81025be:	4b70      	ldr	r3, [pc, #448]	; (8102780 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81025c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 81025c2:	687b      	ldr	r3, [r7, #4]
 81025c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81025c8:	4053      	eors	r3, r2
 81025ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81025ce:	2b00      	cmp	r3, #0
 81025d0:	d013      	beq.n	81025fa <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 81025d2:	4b6b      	ldr	r3, [pc, #428]	; (8102780 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81025d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81025d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81025da:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 81025dc:	4b68      	ldr	r3, [pc, #416]	; (8102780 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81025de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81025e0:	4a67      	ldr	r2, [pc, #412]	; (8102780 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81025e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 81025e6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 81025e8:	4b65      	ldr	r3, [pc, #404]	; (8102780 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81025ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81025ec:	4a64      	ldr	r2, [pc, #400]	; (8102780 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81025ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81025f2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 81025f4:	4a62      	ldr	r2, [pc, #392]	; (8102780 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81025f6:	68fb      	ldr	r3, [r7, #12]
 81025f8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 81025fa:	687b      	ldr	r3, [r7, #4]
 81025fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8102600:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102604:	d115      	bne.n	8102632 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8102606:	f7fe faab 	bl	8100b60 <HAL_GetTick>
 810260a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810260c:	e00b      	b.n	8102626 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810260e:	f7fe faa7 	bl	8100b60 <HAL_GetTick>
 8102612:	4602      	mov	r2, r0
 8102614:	693b      	ldr	r3, [r7, #16]
 8102616:	1ad3      	subs	r3, r2, r3
 8102618:	f241 3288 	movw	r2, #5000	; 0x1388
 810261c:	4293      	cmp	r3, r2
 810261e:	d902      	bls.n	8102626 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8102620:	2303      	movs	r3, #3
 8102622:	75fb      	strb	r3, [r7, #23]
            break;
 8102624:	e005      	b.n	8102632 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8102626:	4b56      	ldr	r3, [pc, #344]	; (8102780 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810262a:	f003 0302 	and.w	r3, r3, #2
 810262e:	2b00      	cmp	r3, #0
 8102630:	d0ed      	beq.n	810260e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8102632:	7dfb      	ldrb	r3, [r7, #23]
 8102634:	2b00      	cmp	r3, #0
 8102636:	d128      	bne.n	810268a <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8102638:	687b      	ldr	r3, [r7, #4]
 810263a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810263e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8102642:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8102646:	d10f      	bne.n	8102668 <HAL_RCCEx_PeriphCLKConfig+0x720>
 8102648:	4b4d      	ldr	r3, [pc, #308]	; (8102780 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810264a:	691b      	ldr	r3, [r3, #16]
 810264c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8102650:	687b      	ldr	r3, [r7, #4]
 8102652:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8102656:	091b      	lsrs	r3, r3, #4
 8102658:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 810265c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8102660:	4947      	ldr	r1, [pc, #284]	; (8102780 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102662:	4313      	orrs	r3, r2
 8102664:	610b      	str	r3, [r1, #16]
 8102666:	e005      	b.n	8102674 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8102668:	4b45      	ldr	r3, [pc, #276]	; (8102780 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810266a:	691b      	ldr	r3, [r3, #16]
 810266c:	4a44      	ldr	r2, [pc, #272]	; (8102780 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810266e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8102672:	6113      	str	r3, [r2, #16]
 8102674:	4b42      	ldr	r3, [pc, #264]	; (8102780 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102676:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8102678:	687b      	ldr	r3, [r7, #4]
 810267a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810267e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8102682:	493f      	ldr	r1, [pc, #252]	; (8102780 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102684:	4313      	orrs	r3, r2
 8102686:	670b      	str	r3, [r1, #112]	; 0x70
 8102688:	e004      	b.n	8102694 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810268a:	7dfb      	ldrb	r3, [r7, #23]
 810268c:	75bb      	strb	r3, [r7, #22]
 810268e:	e001      	b.n	8102694 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102690:	7dfb      	ldrb	r3, [r7, #23]
 8102692:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8102694:	687b      	ldr	r3, [r7, #4]
 8102696:	681b      	ldr	r3, [r3, #0]
 8102698:	f003 0301 	and.w	r3, r3, #1
 810269c:	2b00      	cmp	r3, #0
 810269e:	f000 8083 	beq.w	81027a8 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 81026a2:	687b      	ldr	r3, [r7, #4]
 81026a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81026a6:	2b28      	cmp	r3, #40	; 0x28
 81026a8:	d866      	bhi.n	8102778 <HAL_RCCEx_PeriphCLKConfig+0x830>
 81026aa:	a201      	add	r2, pc, #4	; (adr r2, 81026b0 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 81026ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81026b0:	08102789 	.word	0x08102789
 81026b4:	08102779 	.word	0x08102779
 81026b8:	08102779 	.word	0x08102779
 81026bc:	08102779 	.word	0x08102779
 81026c0:	08102779 	.word	0x08102779
 81026c4:	08102779 	.word	0x08102779
 81026c8:	08102779 	.word	0x08102779
 81026cc:	08102779 	.word	0x08102779
 81026d0:	08102755 	.word	0x08102755
 81026d4:	08102779 	.word	0x08102779
 81026d8:	08102779 	.word	0x08102779
 81026dc:	08102779 	.word	0x08102779
 81026e0:	08102779 	.word	0x08102779
 81026e4:	08102779 	.word	0x08102779
 81026e8:	08102779 	.word	0x08102779
 81026ec:	08102779 	.word	0x08102779
 81026f0:	08102767 	.word	0x08102767
 81026f4:	08102779 	.word	0x08102779
 81026f8:	08102779 	.word	0x08102779
 81026fc:	08102779 	.word	0x08102779
 8102700:	08102779 	.word	0x08102779
 8102704:	08102779 	.word	0x08102779
 8102708:	08102779 	.word	0x08102779
 810270c:	08102779 	.word	0x08102779
 8102710:	08102789 	.word	0x08102789
 8102714:	08102779 	.word	0x08102779
 8102718:	08102779 	.word	0x08102779
 810271c:	08102779 	.word	0x08102779
 8102720:	08102779 	.word	0x08102779
 8102724:	08102779 	.word	0x08102779
 8102728:	08102779 	.word	0x08102779
 810272c:	08102779 	.word	0x08102779
 8102730:	08102789 	.word	0x08102789
 8102734:	08102779 	.word	0x08102779
 8102738:	08102779 	.word	0x08102779
 810273c:	08102779 	.word	0x08102779
 8102740:	08102779 	.word	0x08102779
 8102744:	08102779 	.word	0x08102779
 8102748:	08102779 	.word	0x08102779
 810274c:	08102779 	.word	0x08102779
 8102750:	08102789 	.word	0x08102789
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8102754:	687b      	ldr	r3, [r7, #4]
 8102756:	3304      	adds	r3, #4
 8102758:	2101      	movs	r1, #1
 810275a:	4618      	mov	r0, r3
 810275c:	f000 fb3a 	bl	8102dd4 <RCCEx_PLL2_Config>
 8102760:	4603      	mov	r3, r0
 8102762:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8102764:	e011      	b.n	810278a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102766:	687b      	ldr	r3, [r7, #4]
 8102768:	3324      	adds	r3, #36	; 0x24
 810276a:	2101      	movs	r1, #1
 810276c:	4618      	mov	r0, r3
 810276e:	f000 fbe3 	bl	8102f38 <RCCEx_PLL3_Config>
 8102772:	4603      	mov	r3, r0
 8102774:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8102776:	e008      	b.n	810278a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102778:	2301      	movs	r3, #1
 810277a:	75fb      	strb	r3, [r7, #23]
      break;
 810277c:	e005      	b.n	810278a <HAL_RCCEx_PeriphCLKConfig+0x842>
 810277e:	bf00      	nop
 8102780:	58024400 	.word	0x58024400
 8102784:	58024800 	.word	0x58024800
      break;
 8102788:	bf00      	nop
    }

    if(ret == HAL_OK)
 810278a:	7dfb      	ldrb	r3, [r7, #23]
 810278c:	2b00      	cmp	r3, #0
 810278e:	d109      	bne.n	81027a4 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8102790:	4b96      	ldr	r3, [pc, #600]	; (81029ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8102792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102794:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8102798:	687b      	ldr	r3, [r7, #4]
 810279a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810279c:	4993      	ldr	r1, [pc, #588]	; (81029ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810279e:	4313      	orrs	r3, r2
 81027a0:	654b      	str	r3, [r1, #84]	; 0x54
 81027a2:	e001      	b.n	81027a8 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81027a4:	7dfb      	ldrb	r3, [r7, #23]
 81027a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 81027a8:	687b      	ldr	r3, [r7, #4]
 81027aa:	681b      	ldr	r3, [r3, #0]
 81027ac:	f003 0302 	and.w	r3, r3, #2
 81027b0:	2b00      	cmp	r3, #0
 81027b2:	d038      	beq.n	8102826 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 81027b4:	687b      	ldr	r3, [r7, #4]
 81027b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81027b8:	2b05      	cmp	r3, #5
 81027ba:	d821      	bhi.n	8102800 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 81027bc:	a201      	add	r2, pc, #4	; (adr r2, 81027c4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 81027be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81027c2:	bf00      	nop
 81027c4:	08102807 	.word	0x08102807
 81027c8:	081027dd 	.word	0x081027dd
 81027cc:	081027ef 	.word	0x081027ef
 81027d0:	08102807 	.word	0x08102807
 81027d4:	08102807 	.word	0x08102807
 81027d8:	08102807 	.word	0x08102807
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81027dc:	687b      	ldr	r3, [r7, #4]
 81027de:	3304      	adds	r3, #4
 81027e0:	2101      	movs	r1, #1
 81027e2:	4618      	mov	r0, r3
 81027e4:	f000 faf6 	bl	8102dd4 <RCCEx_PLL2_Config>
 81027e8:	4603      	mov	r3, r0
 81027ea:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 81027ec:	e00c      	b.n	8102808 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81027ee:	687b      	ldr	r3, [r7, #4]
 81027f0:	3324      	adds	r3, #36	; 0x24
 81027f2:	2101      	movs	r1, #1
 81027f4:	4618      	mov	r0, r3
 81027f6:	f000 fb9f 	bl	8102f38 <RCCEx_PLL3_Config>
 81027fa:	4603      	mov	r3, r0
 81027fc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 81027fe:	e003      	b.n	8102808 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102800:	2301      	movs	r3, #1
 8102802:	75fb      	strb	r3, [r7, #23]
      break;
 8102804:	e000      	b.n	8102808 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8102806:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102808:	7dfb      	ldrb	r3, [r7, #23]
 810280a:	2b00      	cmp	r3, #0
 810280c:	d109      	bne.n	8102822 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810280e:	4b77      	ldr	r3, [pc, #476]	; (81029ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8102810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102812:	f023 0207 	bic.w	r2, r3, #7
 8102816:	687b      	ldr	r3, [r7, #4]
 8102818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810281a:	4974      	ldr	r1, [pc, #464]	; (81029ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810281c:	4313      	orrs	r3, r2
 810281e:	654b      	str	r3, [r1, #84]	; 0x54
 8102820:	e001      	b.n	8102826 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102822:	7dfb      	ldrb	r3, [r7, #23]
 8102824:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8102826:	687b      	ldr	r3, [r7, #4]
 8102828:	681b      	ldr	r3, [r3, #0]
 810282a:	f003 0304 	and.w	r3, r3, #4
 810282e:	2b00      	cmp	r3, #0
 8102830:	d03a      	beq.n	81028a8 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8102832:	687b      	ldr	r3, [r7, #4]
 8102834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8102838:	2b05      	cmp	r3, #5
 810283a:	d821      	bhi.n	8102880 <HAL_RCCEx_PeriphCLKConfig+0x938>
 810283c:	a201      	add	r2, pc, #4	; (adr r2, 8102844 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 810283e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102842:	bf00      	nop
 8102844:	08102887 	.word	0x08102887
 8102848:	0810285d 	.word	0x0810285d
 810284c:	0810286f 	.word	0x0810286f
 8102850:	08102887 	.word	0x08102887
 8102854:	08102887 	.word	0x08102887
 8102858:	08102887 	.word	0x08102887
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810285c:	687b      	ldr	r3, [r7, #4]
 810285e:	3304      	adds	r3, #4
 8102860:	2101      	movs	r1, #1
 8102862:	4618      	mov	r0, r3
 8102864:	f000 fab6 	bl	8102dd4 <RCCEx_PLL2_Config>
 8102868:	4603      	mov	r3, r0
 810286a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 810286c:	e00c      	b.n	8102888 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810286e:	687b      	ldr	r3, [r7, #4]
 8102870:	3324      	adds	r3, #36	; 0x24
 8102872:	2101      	movs	r1, #1
 8102874:	4618      	mov	r0, r3
 8102876:	f000 fb5f 	bl	8102f38 <RCCEx_PLL3_Config>
 810287a:	4603      	mov	r3, r0
 810287c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 810287e:	e003      	b.n	8102888 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102880:	2301      	movs	r3, #1
 8102882:	75fb      	strb	r3, [r7, #23]
      break;
 8102884:	e000      	b.n	8102888 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8102886:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102888:	7dfb      	ldrb	r3, [r7, #23]
 810288a:	2b00      	cmp	r3, #0
 810288c:	d10a      	bne.n	81028a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810288e:	4b57      	ldr	r3, [pc, #348]	; (81029ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8102890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102892:	f023 0207 	bic.w	r2, r3, #7
 8102896:	687b      	ldr	r3, [r7, #4]
 8102898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810289c:	4953      	ldr	r1, [pc, #332]	; (81029ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810289e:	4313      	orrs	r3, r2
 81028a0:	658b      	str	r3, [r1, #88]	; 0x58
 81028a2:	e001      	b.n	81028a8 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81028a4:	7dfb      	ldrb	r3, [r7, #23]
 81028a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 81028a8:	687b      	ldr	r3, [r7, #4]
 81028aa:	681b      	ldr	r3, [r3, #0]
 81028ac:	f003 0320 	and.w	r3, r3, #32
 81028b0:	2b00      	cmp	r3, #0
 81028b2:	d04b      	beq.n	810294c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 81028b4:	687b      	ldr	r3, [r7, #4]
 81028b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81028ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81028be:	d02e      	beq.n	810291e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 81028c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81028c4:	d828      	bhi.n	8102918 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 81028c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81028ca:	d02a      	beq.n	8102922 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 81028cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81028d0:	d822      	bhi.n	8102918 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 81028d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81028d6:	d026      	beq.n	8102926 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 81028d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81028dc:	d81c      	bhi.n	8102918 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 81028de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81028e2:	d010      	beq.n	8102906 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 81028e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81028e8:	d816      	bhi.n	8102918 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 81028ea:	2b00      	cmp	r3, #0
 81028ec:	d01d      	beq.n	810292a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 81028ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81028f2:	d111      	bne.n	8102918 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81028f4:	687b      	ldr	r3, [r7, #4]
 81028f6:	3304      	adds	r3, #4
 81028f8:	2100      	movs	r1, #0
 81028fa:	4618      	mov	r0, r3
 81028fc:	f000 fa6a 	bl	8102dd4 <RCCEx_PLL2_Config>
 8102900:	4603      	mov	r3, r0
 8102902:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8102904:	e012      	b.n	810292c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102906:	687b      	ldr	r3, [r7, #4]
 8102908:	3324      	adds	r3, #36	; 0x24
 810290a:	2102      	movs	r1, #2
 810290c:	4618      	mov	r0, r3
 810290e:	f000 fb13 	bl	8102f38 <RCCEx_PLL3_Config>
 8102912:	4603      	mov	r3, r0
 8102914:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8102916:	e009      	b.n	810292c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102918:	2301      	movs	r3, #1
 810291a:	75fb      	strb	r3, [r7, #23]
      break;
 810291c:	e006      	b.n	810292c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 810291e:	bf00      	nop
 8102920:	e004      	b.n	810292c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8102922:	bf00      	nop
 8102924:	e002      	b.n	810292c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8102926:	bf00      	nop
 8102928:	e000      	b.n	810292c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 810292a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810292c:	7dfb      	ldrb	r3, [r7, #23]
 810292e:	2b00      	cmp	r3, #0
 8102930:	d10a      	bne.n	8102948 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8102932:	4b2e      	ldr	r3, [pc, #184]	; (81029ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8102934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102936:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 810293a:	687b      	ldr	r3, [r7, #4]
 810293c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8102940:	492a      	ldr	r1, [pc, #168]	; (81029ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8102942:	4313      	orrs	r3, r2
 8102944:	654b      	str	r3, [r1, #84]	; 0x54
 8102946:	e001      	b.n	810294c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102948:	7dfb      	ldrb	r3, [r7, #23]
 810294a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 810294c:	687b      	ldr	r3, [r7, #4]
 810294e:	681b      	ldr	r3, [r3, #0]
 8102950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8102954:	2b00      	cmp	r3, #0
 8102956:	d04d      	beq.n	81029f4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8102958:	687b      	ldr	r3, [r7, #4]
 810295a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810295e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8102962:	d02e      	beq.n	81029c2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8102964:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8102968:	d828      	bhi.n	81029bc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 810296a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810296e:	d02a      	beq.n	81029c6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8102970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102974:	d822      	bhi.n	81029bc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8102976:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810297a:	d026      	beq.n	81029ca <HAL_RCCEx_PeriphCLKConfig+0xa82>
 810297c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8102980:	d81c      	bhi.n	81029bc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8102982:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8102986:	d010      	beq.n	81029aa <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8102988:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810298c:	d816      	bhi.n	81029bc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 810298e:	2b00      	cmp	r3, #0
 8102990:	d01d      	beq.n	81029ce <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8102992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8102996:	d111      	bne.n	81029bc <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102998:	687b      	ldr	r3, [r7, #4]
 810299a:	3304      	adds	r3, #4
 810299c:	2100      	movs	r1, #0
 810299e:	4618      	mov	r0, r3
 81029a0:	f000 fa18 	bl	8102dd4 <RCCEx_PLL2_Config>
 81029a4:	4603      	mov	r3, r0
 81029a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 81029a8:	e012      	b.n	81029d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81029aa:	687b      	ldr	r3, [r7, #4]
 81029ac:	3324      	adds	r3, #36	; 0x24
 81029ae:	2102      	movs	r1, #2
 81029b0:	4618      	mov	r0, r3
 81029b2:	f000 fac1 	bl	8102f38 <RCCEx_PLL3_Config>
 81029b6:	4603      	mov	r3, r0
 81029b8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 81029ba:	e009      	b.n	81029d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81029bc:	2301      	movs	r3, #1
 81029be:	75fb      	strb	r3, [r7, #23]
      break;
 81029c0:	e006      	b.n	81029d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 81029c2:	bf00      	nop
 81029c4:	e004      	b.n	81029d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 81029c6:	bf00      	nop
 81029c8:	e002      	b.n	81029d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 81029ca:	bf00      	nop
 81029cc:	e000      	b.n	81029d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 81029ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 81029d0:	7dfb      	ldrb	r3, [r7, #23]
 81029d2:	2b00      	cmp	r3, #0
 81029d4:	d10c      	bne.n	81029f0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 81029d6:	4b05      	ldr	r3, [pc, #20]	; (81029ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81029d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81029da:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 81029de:	687b      	ldr	r3, [r7, #4]
 81029e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81029e4:	4901      	ldr	r1, [pc, #4]	; (81029ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81029e6:	4313      	orrs	r3, r2
 81029e8:	658b      	str	r3, [r1, #88]	; 0x58
 81029ea:	e003      	b.n	81029f4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 81029ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81029f0:	7dfb      	ldrb	r3, [r7, #23]
 81029f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81029f4:	687b      	ldr	r3, [r7, #4]
 81029f6:	681b      	ldr	r3, [r3, #0]
 81029f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81029fc:	2b00      	cmp	r3, #0
 81029fe:	d04b      	beq.n	8102a98 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8102a00:	687b      	ldr	r3, [r7, #4]
 8102a02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8102a06:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8102a0a:	d02e      	beq.n	8102a6a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8102a0c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8102a10:	d828      	bhi.n	8102a64 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8102a12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8102a16:	d02a      	beq.n	8102a6e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8102a18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8102a1c:	d822      	bhi.n	8102a64 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8102a1e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8102a22:	d026      	beq.n	8102a72 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8102a24:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8102a28:	d81c      	bhi.n	8102a64 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8102a2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8102a2e:	d010      	beq.n	8102a52 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8102a30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8102a34:	d816      	bhi.n	8102a64 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8102a36:	2b00      	cmp	r3, #0
 8102a38:	d01d      	beq.n	8102a76 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8102a3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8102a3e:	d111      	bne.n	8102a64 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102a40:	687b      	ldr	r3, [r7, #4]
 8102a42:	3304      	adds	r3, #4
 8102a44:	2100      	movs	r1, #0
 8102a46:	4618      	mov	r0, r3
 8102a48:	f000 f9c4 	bl	8102dd4 <RCCEx_PLL2_Config>
 8102a4c:	4603      	mov	r3, r0
 8102a4e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8102a50:	e012      	b.n	8102a78 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102a52:	687b      	ldr	r3, [r7, #4]
 8102a54:	3324      	adds	r3, #36	; 0x24
 8102a56:	2102      	movs	r1, #2
 8102a58:	4618      	mov	r0, r3
 8102a5a:	f000 fa6d 	bl	8102f38 <RCCEx_PLL3_Config>
 8102a5e:	4603      	mov	r3, r0
 8102a60:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8102a62:	e009      	b.n	8102a78 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102a64:	2301      	movs	r3, #1
 8102a66:	75fb      	strb	r3, [r7, #23]
      break;
 8102a68:	e006      	b.n	8102a78 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8102a6a:	bf00      	nop
 8102a6c:	e004      	b.n	8102a78 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8102a6e:	bf00      	nop
 8102a70:	e002      	b.n	8102a78 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8102a72:	bf00      	nop
 8102a74:	e000      	b.n	8102a78 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8102a76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102a78:	7dfb      	ldrb	r3, [r7, #23]
 8102a7a:	2b00      	cmp	r3, #0
 8102a7c:	d10a      	bne.n	8102a94 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8102a7e:	4b9d      	ldr	r3, [pc, #628]	; (8102cf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102a82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8102a86:	687b      	ldr	r3, [r7, #4]
 8102a88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8102a8c:	4999      	ldr	r1, [pc, #612]	; (8102cf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102a8e:	4313      	orrs	r3, r2
 8102a90:	658b      	str	r3, [r1, #88]	; 0x58
 8102a92:	e001      	b.n	8102a98 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102a94:	7dfb      	ldrb	r3, [r7, #23]
 8102a96:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8102a98:	687b      	ldr	r3, [r7, #4]
 8102a9a:	681b      	ldr	r3, [r3, #0]
 8102a9c:	f003 0308 	and.w	r3, r3, #8
 8102aa0:	2b00      	cmp	r3, #0
 8102aa2:	d01a      	beq.n	8102ada <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8102aa4:	687b      	ldr	r3, [r7, #4]
 8102aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8102aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102aae:	d10a      	bne.n	8102ac6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8102ab0:	687b      	ldr	r3, [r7, #4]
 8102ab2:	3324      	adds	r3, #36	; 0x24
 8102ab4:	2102      	movs	r1, #2
 8102ab6:	4618      	mov	r0, r3
 8102ab8:	f000 fa3e 	bl	8102f38 <RCCEx_PLL3_Config>
 8102abc:	4603      	mov	r3, r0
 8102abe:	2b00      	cmp	r3, #0
 8102ac0:	d001      	beq.n	8102ac6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8102ac2:	2301      	movs	r3, #1
 8102ac4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8102ac6:	4b8b      	ldr	r3, [pc, #556]	; (8102cf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102aca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8102ace:	687b      	ldr	r3, [r7, #4]
 8102ad0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8102ad4:	4987      	ldr	r1, [pc, #540]	; (8102cf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102ad6:	4313      	orrs	r3, r2
 8102ad8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8102ada:	687b      	ldr	r3, [r7, #4]
 8102adc:	681b      	ldr	r3, [r3, #0]
 8102ade:	f003 0310 	and.w	r3, r3, #16
 8102ae2:	2b00      	cmp	r3, #0
 8102ae4:	d01a      	beq.n	8102b1c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8102ae6:	687b      	ldr	r3, [r7, #4]
 8102ae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8102aec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102af0:	d10a      	bne.n	8102b08 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8102af2:	687b      	ldr	r3, [r7, #4]
 8102af4:	3324      	adds	r3, #36	; 0x24
 8102af6:	2102      	movs	r1, #2
 8102af8:	4618      	mov	r0, r3
 8102afa:	f000 fa1d 	bl	8102f38 <RCCEx_PLL3_Config>
 8102afe:	4603      	mov	r3, r0
 8102b00:	2b00      	cmp	r3, #0
 8102b02:	d001      	beq.n	8102b08 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8102b04:	2301      	movs	r3, #1
 8102b06:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8102b08:	4b7a      	ldr	r3, [pc, #488]	; (8102cf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102b0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8102b10:	687b      	ldr	r3, [r7, #4]
 8102b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8102b16:	4977      	ldr	r1, [pc, #476]	; (8102cf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102b18:	4313      	orrs	r3, r2
 8102b1a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8102b1c:	687b      	ldr	r3, [r7, #4]
 8102b1e:	681b      	ldr	r3, [r3, #0]
 8102b20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8102b24:	2b00      	cmp	r3, #0
 8102b26:	d034      	beq.n	8102b92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8102b28:	687b      	ldr	r3, [r7, #4]
 8102b2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8102b2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8102b32:	d01d      	beq.n	8102b70 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8102b34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8102b38:	d817      	bhi.n	8102b6a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8102b3a:	2b00      	cmp	r3, #0
 8102b3c:	d003      	beq.n	8102b46 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8102b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8102b42:	d009      	beq.n	8102b58 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8102b44:	e011      	b.n	8102b6a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102b46:	687b      	ldr	r3, [r7, #4]
 8102b48:	3304      	adds	r3, #4
 8102b4a:	2100      	movs	r1, #0
 8102b4c:	4618      	mov	r0, r3
 8102b4e:	f000 f941 	bl	8102dd4 <RCCEx_PLL2_Config>
 8102b52:	4603      	mov	r3, r0
 8102b54:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8102b56:	e00c      	b.n	8102b72 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102b58:	687b      	ldr	r3, [r7, #4]
 8102b5a:	3324      	adds	r3, #36	; 0x24
 8102b5c:	2102      	movs	r1, #2
 8102b5e:	4618      	mov	r0, r3
 8102b60:	f000 f9ea 	bl	8102f38 <RCCEx_PLL3_Config>
 8102b64:	4603      	mov	r3, r0
 8102b66:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8102b68:	e003      	b.n	8102b72 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102b6a:	2301      	movs	r3, #1
 8102b6c:	75fb      	strb	r3, [r7, #23]
      break;
 8102b6e:	e000      	b.n	8102b72 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8102b70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102b72:	7dfb      	ldrb	r3, [r7, #23]
 8102b74:	2b00      	cmp	r3, #0
 8102b76:	d10a      	bne.n	8102b8e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8102b78:	4b5e      	ldr	r3, [pc, #376]	; (8102cf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102b7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8102b80:	687b      	ldr	r3, [r7, #4]
 8102b82:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8102b86:	495b      	ldr	r1, [pc, #364]	; (8102cf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102b88:	4313      	orrs	r3, r2
 8102b8a:	658b      	str	r3, [r1, #88]	; 0x58
 8102b8c:	e001      	b.n	8102b92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102b8e:	7dfb      	ldrb	r3, [r7, #23]
 8102b90:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8102b92:	687b      	ldr	r3, [r7, #4]
 8102b94:	681b      	ldr	r3, [r3, #0]
 8102b96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8102b9a:	2b00      	cmp	r3, #0
 8102b9c:	d033      	beq.n	8102c06 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8102b9e:	687b      	ldr	r3, [r7, #4]
 8102ba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8102ba4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102ba8:	d01c      	beq.n	8102be4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8102baa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102bae:	d816      	bhi.n	8102bde <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8102bb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8102bb4:	d003      	beq.n	8102bbe <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8102bb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102bba:	d007      	beq.n	8102bcc <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8102bbc:	e00f      	b.n	8102bde <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102bbe:	4b4d      	ldr	r3, [pc, #308]	; (8102cf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102bc2:	4a4c      	ldr	r2, [pc, #304]	; (8102cf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102bc8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8102bca:	e00c      	b.n	8102be6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102bcc:	687b      	ldr	r3, [r7, #4]
 8102bce:	3324      	adds	r3, #36	; 0x24
 8102bd0:	2101      	movs	r1, #1
 8102bd2:	4618      	mov	r0, r3
 8102bd4:	f000 f9b0 	bl	8102f38 <RCCEx_PLL3_Config>
 8102bd8:	4603      	mov	r3, r0
 8102bda:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8102bdc:	e003      	b.n	8102be6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102bde:	2301      	movs	r3, #1
 8102be0:	75fb      	strb	r3, [r7, #23]
      break;
 8102be2:	e000      	b.n	8102be6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8102be4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102be6:	7dfb      	ldrb	r3, [r7, #23]
 8102be8:	2b00      	cmp	r3, #0
 8102bea:	d10a      	bne.n	8102c02 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8102bec:	4b41      	ldr	r3, [pc, #260]	; (8102cf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102bf0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8102bf4:	687b      	ldr	r3, [r7, #4]
 8102bf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8102bfa:	493e      	ldr	r1, [pc, #248]	; (8102cf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102bfc:	4313      	orrs	r3, r2
 8102bfe:	654b      	str	r3, [r1, #84]	; 0x54
 8102c00:	e001      	b.n	8102c06 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102c02:	7dfb      	ldrb	r3, [r7, #23]
 8102c04:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8102c06:	687b      	ldr	r3, [r7, #4]
 8102c08:	681b      	ldr	r3, [r3, #0]
 8102c0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8102c0e:	2b00      	cmp	r3, #0
 8102c10:	d029      	beq.n	8102c66 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8102c12:	687b      	ldr	r3, [r7, #4]
 8102c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102c16:	2b00      	cmp	r3, #0
 8102c18:	d003      	beq.n	8102c22 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8102c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8102c1e:	d007      	beq.n	8102c30 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8102c20:	e00f      	b.n	8102c42 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102c22:	4b34      	ldr	r3, [pc, #208]	; (8102cf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102c26:	4a33      	ldr	r2, [pc, #204]	; (8102cf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102c2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8102c2e:	e00b      	b.n	8102c48 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8102c30:	687b      	ldr	r3, [r7, #4]
 8102c32:	3304      	adds	r3, #4
 8102c34:	2102      	movs	r1, #2
 8102c36:	4618      	mov	r0, r3
 8102c38:	f000 f8cc 	bl	8102dd4 <RCCEx_PLL2_Config>
 8102c3c:	4603      	mov	r3, r0
 8102c3e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8102c40:	e002      	b.n	8102c48 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8102c42:	2301      	movs	r3, #1
 8102c44:	75fb      	strb	r3, [r7, #23]
      break;
 8102c46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102c48:	7dfb      	ldrb	r3, [r7, #23]
 8102c4a:	2b00      	cmp	r3, #0
 8102c4c:	d109      	bne.n	8102c62 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8102c4e:	4b29      	ldr	r3, [pc, #164]	; (8102cf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102c52:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8102c56:	687b      	ldr	r3, [r7, #4]
 8102c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102c5a:	4926      	ldr	r1, [pc, #152]	; (8102cf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102c5c:	4313      	orrs	r3, r2
 8102c5e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8102c60:	e001      	b.n	8102c66 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102c62:	7dfb      	ldrb	r3, [r7, #23]
 8102c64:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8102c66:	687b      	ldr	r3, [r7, #4]
 8102c68:	681b      	ldr	r3, [r3, #0]
 8102c6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8102c6e:	2b00      	cmp	r3, #0
 8102c70:	d00a      	beq.n	8102c88 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8102c72:	687b      	ldr	r3, [r7, #4]
 8102c74:	3324      	adds	r3, #36	; 0x24
 8102c76:	2102      	movs	r1, #2
 8102c78:	4618      	mov	r0, r3
 8102c7a:	f000 f95d 	bl	8102f38 <RCCEx_PLL3_Config>
 8102c7e:	4603      	mov	r3, r0
 8102c80:	2b00      	cmp	r3, #0
 8102c82:	d001      	beq.n	8102c88 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8102c84:	2301      	movs	r3, #1
 8102c86:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8102c88:	687b      	ldr	r3, [r7, #4]
 8102c8a:	681b      	ldr	r3, [r3, #0]
 8102c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8102c90:	2b00      	cmp	r3, #0
 8102c92:	d033      	beq.n	8102cfc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8102c94:	687b      	ldr	r3, [r7, #4]
 8102c96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8102c98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8102c9c:	d017      	beq.n	8102cce <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8102c9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8102ca2:	d811      	bhi.n	8102cc8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8102ca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8102ca8:	d013      	beq.n	8102cd2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8102caa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8102cae:	d80b      	bhi.n	8102cc8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8102cb0:	2b00      	cmp	r3, #0
 8102cb2:	d010      	beq.n	8102cd6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8102cb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102cb8:	d106      	bne.n	8102cc8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102cba:	4b0e      	ldr	r3, [pc, #56]	; (8102cf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102cbe:	4a0d      	ldr	r2, [pc, #52]	; (8102cf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102cc4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8102cc6:	e007      	b.n	8102cd8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102cc8:	2301      	movs	r3, #1
 8102cca:	75fb      	strb	r3, [r7, #23]
      break;
 8102ccc:	e004      	b.n	8102cd8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8102cce:	bf00      	nop
 8102cd0:	e002      	b.n	8102cd8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8102cd2:	bf00      	nop
 8102cd4:	e000      	b.n	8102cd8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8102cd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102cd8:	7dfb      	ldrb	r3, [r7, #23]
 8102cda:	2b00      	cmp	r3, #0
 8102cdc:	d10c      	bne.n	8102cf8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8102cde:	4b05      	ldr	r3, [pc, #20]	; (8102cf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102ce2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8102ce6:	687b      	ldr	r3, [r7, #4]
 8102ce8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8102cea:	4902      	ldr	r1, [pc, #8]	; (8102cf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102cec:	4313      	orrs	r3, r2
 8102cee:	654b      	str	r3, [r1, #84]	; 0x54
 8102cf0:	e004      	b.n	8102cfc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8102cf2:	bf00      	nop
 8102cf4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102cf8:	7dfb      	ldrb	r3, [r7, #23]
 8102cfa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8102cfc:	687b      	ldr	r3, [r7, #4]
 8102cfe:	681b      	ldr	r3, [r3, #0]
 8102d00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8102d04:	2b00      	cmp	r3, #0
 8102d06:	d008      	beq.n	8102d1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8102d08:	4b31      	ldr	r3, [pc, #196]	; (8102dd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8102d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102d0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8102d10:	687b      	ldr	r3, [r7, #4]
 8102d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102d14:	492e      	ldr	r1, [pc, #184]	; (8102dd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8102d16:	4313      	orrs	r3, r2
 8102d18:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8102d1a:	687b      	ldr	r3, [r7, #4]
 8102d1c:	681b      	ldr	r3, [r3, #0]
 8102d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8102d22:	2b00      	cmp	r3, #0
 8102d24:	d009      	beq.n	8102d3a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8102d26:	4b2a      	ldr	r3, [pc, #168]	; (8102dd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8102d28:	691b      	ldr	r3, [r3, #16]
 8102d2a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8102d2e:	687b      	ldr	r3, [r7, #4]
 8102d30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8102d34:	4926      	ldr	r1, [pc, #152]	; (8102dd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8102d36:	4313      	orrs	r3, r2
 8102d38:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8102d3a:	687b      	ldr	r3, [r7, #4]
 8102d3c:	681b      	ldr	r3, [r3, #0]
 8102d3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8102d42:	2b00      	cmp	r3, #0
 8102d44:	d008      	beq.n	8102d58 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8102d46:	4b22      	ldr	r3, [pc, #136]	; (8102dd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8102d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102d4a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8102d4e:	687b      	ldr	r3, [r7, #4]
 8102d50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8102d52:	491f      	ldr	r1, [pc, #124]	; (8102dd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8102d54:	4313      	orrs	r3, r2
 8102d56:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8102d58:	687b      	ldr	r3, [r7, #4]
 8102d5a:	681b      	ldr	r3, [r3, #0]
 8102d5c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8102d60:	2b00      	cmp	r3, #0
 8102d62:	d00d      	beq.n	8102d80 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8102d64:	4b1a      	ldr	r3, [pc, #104]	; (8102dd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8102d66:	691b      	ldr	r3, [r3, #16]
 8102d68:	4a19      	ldr	r2, [pc, #100]	; (8102dd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8102d6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8102d6e:	6113      	str	r3, [r2, #16]
 8102d70:	4b17      	ldr	r3, [pc, #92]	; (8102dd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8102d72:	691a      	ldr	r2, [r3, #16]
 8102d74:	687b      	ldr	r3, [r7, #4]
 8102d76:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8102d7a:	4915      	ldr	r1, [pc, #84]	; (8102dd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8102d7c:	4313      	orrs	r3, r2
 8102d7e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8102d80:	687b      	ldr	r3, [r7, #4]
 8102d82:	681b      	ldr	r3, [r3, #0]
 8102d84:	2b00      	cmp	r3, #0
 8102d86:	da08      	bge.n	8102d9a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8102d88:	4b11      	ldr	r3, [pc, #68]	; (8102dd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8102d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102d8c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8102d90:	687b      	ldr	r3, [r7, #4]
 8102d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102d94:	490e      	ldr	r1, [pc, #56]	; (8102dd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8102d96:	4313      	orrs	r3, r2
 8102d98:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8102d9a:	687b      	ldr	r3, [r7, #4]
 8102d9c:	681b      	ldr	r3, [r3, #0]
 8102d9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8102da2:	2b00      	cmp	r3, #0
 8102da4:	d009      	beq.n	8102dba <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8102da6:	4b0a      	ldr	r3, [pc, #40]	; (8102dd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8102da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102daa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8102dae:	687b      	ldr	r3, [r7, #4]
 8102db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8102db4:	4906      	ldr	r1, [pc, #24]	; (8102dd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8102db6:	4313      	orrs	r3, r2
 8102db8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8102dba:	7dbb      	ldrb	r3, [r7, #22]
 8102dbc:	2b00      	cmp	r3, #0
 8102dbe:	d101      	bne.n	8102dc4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8102dc0:	2300      	movs	r3, #0
 8102dc2:	e000      	b.n	8102dc6 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8102dc4:	2301      	movs	r3, #1
}
 8102dc6:	4618      	mov	r0, r3
 8102dc8:	3718      	adds	r7, #24
 8102dca:	46bd      	mov	sp, r7
 8102dcc:	bd80      	pop	{r7, pc}
 8102dce:	bf00      	nop
 8102dd0:	58024400 	.word	0x58024400

08102dd4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8102dd4:	b580      	push	{r7, lr}
 8102dd6:	b084      	sub	sp, #16
 8102dd8:	af00      	add	r7, sp, #0
 8102dda:	6078      	str	r0, [r7, #4]
 8102ddc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8102dde:	2300      	movs	r3, #0
 8102de0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8102de2:	4b54      	ldr	r3, [pc, #336]	; (8102f34 <RCCEx_PLL2_Config+0x160>)
 8102de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102de6:	f003 0303 	and.w	r3, r3, #3
 8102dea:	2b03      	cmp	r3, #3
 8102dec:	d101      	bne.n	8102df2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8102dee:	2301      	movs	r3, #1
 8102df0:	e09b      	b.n	8102f2a <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8102df2:	4b50      	ldr	r3, [pc, #320]	; (8102f34 <RCCEx_PLL2_Config+0x160>)
 8102df4:	681b      	ldr	r3, [r3, #0]
 8102df6:	4a4f      	ldr	r2, [pc, #316]	; (8102f34 <RCCEx_PLL2_Config+0x160>)
 8102df8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8102dfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102dfe:	f7fd feaf 	bl	8100b60 <HAL_GetTick>
 8102e02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8102e04:	e008      	b.n	8102e18 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8102e06:	f7fd feab 	bl	8100b60 <HAL_GetTick>
 8102e0a:	4602      	mov	r2, r0
 8102e0c:	68bb      	ldr	r3, [r7, #8]
 8102e0e:	1ad3      	subs	r3, r2, r3
 8102e10:	2b02      	cmp	r3, #2
 8102e12:	d901      	bls.n	8102e18 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8102e14:	2303      	movs	r3, #3
 8102e16:	e088      	b.n	8102f2a <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8102e18:	4b46      	ldr	r3, [pc, #280]	; (8102f34 <RCCEx_PLL2_Config+0x160>)
 8102e1a:	681b      	ldr	r3, [r3, #0]
 8102e1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8102e20:	2b00      	cmp	r3, #0
 8102e22:	d1f0      	bne.n	8102e06 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8102e24:	4b43      	ldr	r3, [pc, #268]	; (8102f34 <RCCEx_PLL2_Config+0x160>)
 8102e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102e28:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8102e2c:	687b      	ldr	r3, [r7, #4]
 8102e2e:	681b      	ldr	r3, [r3, #0]
 8102e30:	031b      	lsls	r3, r3, #12
 8102e32:	4940      	ldr	r1, [pc, #256]	; (8102f34 <RCCEx_PLL2_Config+0x160>)
 8102e34:	4313      	orrs	r3, r2
 8102e36:	628b      	str	r3, [r1, #40]	; 0x28
 8102e38:	687b      	ldr	r3, [r7, #4]
 8102e3a:	685b      	ldr	r3, [r3, #4]
 8102e3c:	3b01      	subs	r3, #1
 8102e3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8102e42:	687b      	ldr	r3, [r7, #4]
 8102e44:	689b      	ldr	r3, [r3, #8]
 8102e46:	3b01      	subs	r3, #1
 8102e48:	025b      	lsls	r3, r3, #9
 8102e4a:	b29b      	uxth	r3, r3
 8102e4c:	431a      	orrs	r2, r3
 8102e4e:	687b      	ldr	r3, [r7, #4]
 8102e50:	68db      	ldr	r3, [r3, #12]
 8102e52:	3b01      	subs	r3, #1
 8102e54:	041b      	lsls	r3, r3, #16
 8102e56:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8102e5a:	431a      	orrs	r2, r3
 8102e5c:	687b      	ldr	r3, [r7, #4]
 8102e5e:	691b      	ldr	r3, [r3, #16]
 8102e60:	3b01      	subs	r3, #1
 8102e62:	061b      	lsls	r3, r3, #24
 8102e64:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8102e68:	4932      	ldr	r1, [pc, #200]	; (8102f34 <RCCEx_PLL2_Config+0x160>)
 8102e6a:	4313      	orrs	r3, r2
 8102e6c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8102e6e:	4b31      	ldr	r3, [pc, #196]	; (8102f34 <RCCEx_PLL2_Config+0x160>)
 8102e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102e72:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8102e76:	687b      	ldr	r3, [r7, #4]
 8102e78:	695b      	ldr	r3, [r3, #20]
 8102e7a:	492e      	ldr	r1, [pc, #184]	; (8102f34 <RCCEx_PLL2_Config+0x160>)
 8102e7c:	4313      	orrs	r3, r2
 8102e7e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8102e80:	4b2c      	ldr	r3, [pc, #176]	; (8102f34 <RCCEx_PLL2_Config+0x160>)
 8102e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102e84:	f023 0220 	bic.w	r2, r3, #32
 8102e88:	687b      	ldr	r3, [r7, #4]
 8102e8a:	699b      	ldr	r3, [r3, #24]
 8102e8c:	4929      	ldr	r1, [pc, #164]	; (8102f34 <RCCEx_PLL2_Config+0x160>)
 8102e8e:	4313      	orrs	r3, r2
 8102e90:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8102e92:	4b28      	ldr	r3, [pc, #160]	; (8102f34 <RCCEx_PLL2_Config+0x160>)
 8102e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102e96:	4a27      	ldr	r2, [pc, #156]	; (8102f34 <RCCEx_PLL2_Config+0x160>)
 8102e98:	f023 0310 	bic.w	r3, r3, #16
 8102e9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8102e9e:	4b25      	ldr	r3, [pc, #148]	; (8102f34 <RCCEx_PLL2_Config+0x160>)
 8102ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102ea2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8102ea6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8102eaa:	687a      	ldr	r2, [r7, #4]
 8102eac:	69d2      	ldr	r2, [r2, #28]
 8102eae:	00d2      	lsls	r2, r2, #3
 8102eb0:	4920      	ldr	r1, [pc, #128]	; (8102f34 <RCCEx_PLL2_Config+0x160>)
 8102eb2:	4313      	orrs	r3, r2
 8102eb4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8102eb6:	4b1f      	ldr	r3, [pc, #124]	; (8102f34 <RCCEx_PLL2_Config+0x160>)
 8102eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102eba:	4a1e      	ldr	r2, [pc, #120]	; (8102f34 <RCCEx_PLL2_Config+0x160>)
 8102ebc:	f043 0310 	orr.w	r3, r3, #16
 8102ec0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8102ec2:	683b      	ldr	r3, [r7, #0]
 8102ec4:	2b00      	cmp	r3, #0
 8102ec6:	d106      	bne.n	8102ed6 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8102ec8:	4b1a      	ldr	r3, [pc, #104]	; (8102f34 <RCCEx_PLL2_Config+0x160>)
 8102eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102ecc:	4a19      	ldr	r2, [pc, #100]	; (8102f34 <RCCEx_PLL2_Config+0x160>)
 8102ece:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8102ed2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8102ed4:	e00f      	b.n	8102ef6 <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8102ed6:	683b      	ldr	r3, [r7, #0]
 8102ed8:	2b01      	cmp	r3, #1
 8102eda:	d106      	bne.n	8102eea <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8102edc:	4b15      	ldr	r3, [pc, #84]	; (8102f34 <RCCEx_PLL2_Config+0x160>)
 8102ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102ee0:	4a14      	ldr	r2, [pc, #80]	; (8102f34 <RCCEx_PLL2_Config+0x160>)
 8102ee2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8102ee6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8102ee8:	e005      	b.n	8102ef6 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8102eea:	4b12      	ldr	r3, [pc, #72]	; (8102f34 <RCCEx_PLL2_Config+0x160>)
 8102eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102eee:	4a11      	ldr	r2, [pc, #68]	; (8102f34 <RCCEx_PLL2_Config+0x160>)
 8102ef0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8102ef4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8102ef6:	4b0f      	ldr	r3, [pc, #60]	; (8102f34 <RCCEx_PLL2_Config+0x160>)
 8102ef8:	681b      	ldr	r3, [r3, #0]
 8102efa:	4a0e      	ldr	r2, [pc, #56]	; (8102f34 <RCCEx_PLL2_Config+0x160>)
 8102efc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8102f00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102f02:	f7fd fe2d 	bl	8100b60 <HAL_GetTick>
 8102f06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8102f08:	e008      	b.n	8102f1c <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8102f0a:	f7fd fe29 	bl	8100b60 <HAL_GetTick>
 8102f0e:	4602      	mov	r2, r0
 8102f10:	68bb      	ldr	r3, [r7, #8]
 8102f12:	1ad3      	subs	r3, r2, r3
 8102f14:	2b02      	cmp	r3, #2
 8102f16:	d901      	bls.n	8102f1c <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8102f18:	2303      	movs	r3, #3
 8102f1a:	e006      	b.n	8102f2a <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8102f1c:	4b05      	ldr	r3, [pc, #20]	; (8102f34 <RCCEx_PLL2_Config+0x160>)
 8102f1e:	681b      	ldr	r3, [r3, #0]
 8102f20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8102f24:	2b00      	cmp	r3, #0
 8102f26:	d0f0      	beq.n	8102f0a <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8102f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8102f2a:	4618      	mov	r0, r3
 8102f2c:	3710      	adds	r7, #16
 8102f2e:	46bd      	mov	sp, r7
 8102f30:	bd80      	pop	{r7, pc}
 8102f32:	bf00      	nop
 8102f34:	58024400 	.word	0x58024400

08102f38 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8102f38:	b580      	push	{r7, lr}
 8102f3a:	b084      	sub	sp, #16
 8102f3c:	af00      	add	r7, sp, #0
 8102f3e:	6078      	str	r0, [r7, #4]
 8102f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8102f42:	2300      	movs	r3, #0
 8102f44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8102f46:	4b54      	ldr	r3, [pc, #336]	; (8103098 <RCCEx_PLL3_Config+0x160>)
 8102f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102f4a:	f003 0303 	and.w	r3, r3, #3
 8102f4e:	2b03      	cmp	r3, #3
 8102f50:	d101      	bne.n	8102f56 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8102f52:	2301      	movs	r3, #1
 8102f54:	e09b      	b.n	810308e <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8102f56:	4b50      	ldr	r3, [pc, #320]	; (8103098 <RCCEx_PLL3_Config+0x160>)
 8102f58:	681b      	ldr	r3, [r3, #0]
 8102f5a:	4a4f      	ldr	r2, [pc, #316]	; (8103098 <RCCEx_PLL3_Config+0x160>)
 8102f5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8102f60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102f62:	f7fd fdfd 	bl	8100b60 <HAL_GetTick>
 8102f66:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8102f68:	e008      	b.n	8102f7c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8102f6a:	f7fd fdf9 	bl	8100b60 <HAL_GetTick>
 8102f6e:	4602      	mov	r2, r0
 8102f70:	68bb      	ldr	r3, [r7, #8]
 8102f72:	1ad3      	subs	r3, r2, r3
 8102f74:	2b02      	cmp	r3, #2
 8102f76:	d901      	bls.n	8102f7c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8102f78:	2303      	movs	r3, #3
 8102f7a:	e088      	b.n	810308e <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8102f7c:	4b46      	ldr	r3, [pc, #280]	; (8103098 <RCCEx_PLL3_Config+0x160>)
 8102f7e:	681b      	ldr	r3, [r3, #0]
 8102f80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8102f84:	2b00      	cmp	r3, #0
 8102f86:	d1f0      	bne.n	8102f6a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8102f88:	4b43      	ldr	r3, [pc, #268]	; (8103098 <RCCEx_PLL3_Config+0x160>)
 8102f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102f8c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8102f90:	687b      	ldr	r3, [r7, #4]
 8102f92:	681b      	ldr	r3, [r3, #0]
 8102f94:	051b      	lsls	r3, r3, #20
 8102f96:	4940      	ldr	r1, [pc, #256]	; (8103098 <RCCEx_PLL3_Config+0x160>)
 8102f98:	4313      	orrs	r3, r2
 8102f9a:	628b      	str	r3, [r1, #40]	; 0x28
 8102f9c:	687b      	ldr	r3, [r7, #4]
 8102f9e:	685b      	ldr	r3, [r3, #4]
 8102fa0:	3b01      	subs	r3, #1
 8102fa2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8102fa6:	687b      	ldr	r3, [r7, #4]
 8102fa8:	689b      	ldr	r3, [r3, #8]
 8102faa:	3b01      	subs	r3, #1
 8102fac:	025b      	lsls	r3, r3, #9
 8102fae:	b29b      	uxth	r3, r3
 8102fb0:	431a      	orrs	r2, r3
 8102fb2:	687b      	ldr	r3, [r7, #4]
 8102fb4:	68db      	ldr	r3, [r3, #12]
 8102fb6:	3b01      	subs	r3, #1
 8102fb8:	041b      	lsls	r3, r3, #16
 8102fba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8102fbe:	431a      	orrs	r2, r3
 8102fc0:	687b      	ldr	r3, [r7, #4]
 8102fc2:	691b      	ldr	r3, [r3, #16]
 8102fc4:	3b01      	subs	r3, #1
 8102fc6:	061b      	lsls	r3, r3, #24
 8102fc8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8102fcc:	4932      	ldr	r1, [pc, #200]	; (8103098 <RCCEx_PLL3_Config+0x160>)
 8102fce:	4313      	orrs	r3, r2
 8102fd0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8102fd2:	4b31      	ldr	r3, [pc, #196]	; (8103098 <RCCEx_PLL3_Config+0x160>)
 8102fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102fd6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8102fda:	687b      	ldr	r3, [r7, #4]
 8102fdc:	695b      	ldr	r3, [r3, #20]
 8102fde:	492e      	ldr	r1, [pc, #184]	; (8103098 <RCCEx_PLL3_Config+0x160>)
 8102fe0:	4313      	orrs	r3, r2
 8102fe2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8102fe4:	4b2c      	ldr	r3, [pc, #176]	; (8103098 <RCCEx_PLL3_Config+0x160>)
 8102fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102fe8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8102fec:	687b      	ldr	r3, [r7, #4]
 8102fee:	699b      	ldr	r3, [r3, #24]
 8102ff0:	4929      	ldr	r1, [pc, #164]	; (8103098 <RCCEx_PLL3_Config+0x160>)
 8102ff2:	4313      	orrs	r3, r2
 8102ff4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8102ff6:	4b28      	ldr	r3, [pc, #160]	; (8103098 <RCCEx_PLL3_Config+0x160>)
 8102ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102ffa:	4a27      	ldr	r2, [pc, #156]	; (8103098 <RCCEx_PLL3_Config+0x160>)
 8102ffc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8103000:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8103002:	4b25      	ldr	r3, [pc, #148]	; (8103098 <RCCEx_PLL3_Config+0x160>)
 8103004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103006:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810300a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810300e:	687a      	ldr	r2, [r7, #4]
 8103010:	69d2      	ldr	r2, [r2, #28]
 8103012:	00d2      	lsls	r2, r2, #3
 8103014:	4920      	ldr	r1, [pc, #128]	; (8103098 <RCCEx_PLL3_Config+0x160>)
 8103016:	4313      	orrs	r3, r2
 8103018:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810301a:	4b1f      	ldr	r3, [pc, #124]	; (8103098 <RCCEx_PLL3_Config+0x160>)
 810301c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810301e:	4a1e      	ldr	r2, [pc, #120]	; (8103098 <RCCEx_PLL3_Config+0x160>)
 8103020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8103024:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8103026:	683b      	ldr	r3, [r7, #0]
 8103028:	2b00      	cmp	r3, #0
 810302a:	d106      	bne.n	810303a <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 810302c:	4b1a      	ldr	r3, [pc, #104]	; (8103098 <RCCEx_PLL3_Config+0x160>)
 810302e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103030:	4a19      	ldr	r2, [pc, #100]	; (8103098 <RCCEx_PLL3_Config+0x160>)
 8103032:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8103036:	62d3      	str	r3, [r2, #44]	; 0x2c
 8103038:	e00f      	b.n	810305a <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810303a:	683b      	ldr	r3, [r7, #0]
 810303c:	2b01      	cmp	r3, #1
 810303e:	d106      	bne.n	810304e <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8103040:	4b15      	ldr	r3, [pc, #84]	; (8103098 <RCCEx_PLL3_Config+0x160>)
 8103042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103044:	4a14      	ldr	r2, [pc, #80]	; (8103098 <RCCEx_PLL3_Config+0x160>)
 8103046:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 810304a:	62d3      	str	r3, [r2, #44]	; 0x2c
 810304c:	e005      	b.n	810305a <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810304e:	4b12      	ldr	r3, [pc, #72]	; (8103098 <RCCEx_PLL3_Config+0x160>)
 8103050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103052:	4a11      	ldr	r2, [pc, #68]	; (8103098 <RCCEx_PLL3_Config+0x160>)
 8103054:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8103058:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810305a:	4b0f      	ldr	r3, [pc, #60]	; (8103098 <RCCEx_PLL3_Config+0x160>)
 810305c:	681b      	ldr	r3, [r3, #0]
 810305e:	4a0e      	ldr	r2, [pc, #56]	; (8103098 <RCCEx_PLL3_Config+0x160>)
 8103060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8103064:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103066:	f7fd fd7b 	bl	8100b60 <HAL_GetTick>
 810306a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810306c:	e008      	b.n	8103080 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 810306e:	f7fd fd77 	bl	8100b60 <HAL_GetTick>
 8103072:	4602      	mov	r2, r0
 8103074:	68bb      	ldr	r3, [r7, #8]
 8103076:	1ad3      	subs	r3, r2, r3
 8103078:	2b02      	cmp	r3, #2
 810307a:	d901      	bls.n	8103080 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 810307c:	2303      	movs	r3, #3
 810307e:	e006      	b.n	810308e <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8103080:	4b05      	ldr	r3, [pc, #20]	; (8103098 <RCCEx_PLL3_Config+0x160>)
 8103082:	681b      	ldr	r3, [r3, #0]
 8103084:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8103088:	2b00      	cmp	r3, #0
 810308a:	d0f0      	beq.n	810306e <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 810308c:	7bfb      	ldrb	r3, [r7, #15]
}
 810308e:	4618      	mov	r0, r3
 8103090:	3710      	adds	r7, #16
 8103092:	46bd      	mov	sp, r7
 8103094:	bd80      	pop	{r7, pc}
 8103096:	bf00      	nop
 8103098:	58024400 	.word	0x58024400

0810309c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 810309c:	b580      	push	{r7, lr}
 810309e:	b084      	sub	sp, #16
 81030a0:	af00      	add	r7, sp, #0
 81030a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 81030a4:	2301      	movs	r3, #1
 81030a6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 81030a8:	687b      	ldr	r3, [r7, #4]
 81030aa:	2b00      	cmp	r3, #0
 81030ac:	d069      	beq.n	8103182 <HAL_RTC_Init+0xe6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 81030ae:	687b      	ldr	r3, [r7, #4]
 81030b0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 81030b4:	b2db      	uxtb	r3, r3
 81030b6:	2b00      	cmp	r3, #0
 81030b8:	d106      	bne.n	81030c8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 81030ba:	687b      	ldr	r3, [r7, #4]
 81030bc:	2200      	movs	r2, #0
 81030be:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 81030c2:	6878      	ldr	r0, [r7, #4]
 81030c4:	f7fd fbc0 	bl	8100848 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 81030c8:	687b      	ldr	r3, [r7, #4]
 81030ca:	2202      	movs	r2, #2
 81030cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 81030d0:	687b      	ldr	r3, [r7, #4]
 81030d2:	681b      	ldr	r3, [r3, #0]
 81030d4:	22ca      	movs	r2, #202	; 0xca
 81030d6:	625a      	str	r2, [r3, #36]	; 0x24
 81030d8:	687b      	ldr	r3, [r7, #4]
 81030da:	681b      	ldr	r3, [r3, #0]
 81030dc:	2253      	movs	r2, #83	; 0x53
 81030de:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 81030e0:	6878      	ldr	r0, [r7, #4]
 81030e2:	f000 fa46 	bl	8103572 <RTC_EnterInitMode>
 81030e6:	4603      	mov	r3, r0
 81030e8:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 81030ea:	7bfb      	ldrb	r3, [r7, #15]
 81030ec:	2b00      	cmp	r3, #0
 81030ee:	d13d      	bne.n	810316c <HAL_RTC_Init+0xd0>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 81030f0:	687b      	ldr	r3, [r7, #4]
 81030f2:	681b      	ldr	r3, [r3, #0]
 81030f4:	689b      	ldr	r3, [r3, #8]
 81030f6:	687a      	ldr	r2, [r7, #4]
 81030f8:	6812      	ldr	r2, [r2, #0]
 81030fa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 81030fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8103102:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8103104:	687b      	ldr	r3, [r7, #4]
 8103106:	681b      	ldr	r3, [r3, #0]
 8103108:	6899      	ldr	r1, [r3, #8]
 810310a:	687b      	ldr	r3, [r7, #4]
 810310c:	685a      	ldr	r2, [r3, #4]
 810310e:	687b      	ldr	r3, [r7, #4]
 8103110:	691b      	ldr	r3, [r3, #16]
 8103112:	431a      	orrs	r2, r3
 8103114:	687b      	ldr	r3, [r7, #4]
 8103116:	699b      	ldr	r3, [r3, #24]
 8103118:	431a      	orrs	r2, r3
 810311a:	687b      	ldr	r3, [r7, #4]
 810311c:	681b      	ldr	r3, [r3, #0]
 810311e:	430a      	orrs	r2, r1
 8103120:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8103122:	687b      	ldr	r3, [r7, #4]
 8103124:	689b      	ldr	r3, [r3, #8]
 8103126:	0419      	lsls	r1, r3, #16
 8103128:	687b      	ldr	r3, [r7, #4]
 810312a:	68da      	ldr	r2, [r3, #12]
 810312c:	687b      	ldr	r3, [r7, #4]
 810312e:	681b      	ldr	r3, [r3, #0]
 8103130:	430a      	orrs	r2, r1
 8103132:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8103134:	6878      	ldr	r0, [r7, #4]
 8103136:	f000 fa4f 	bl	81035d8 <RTC_ExitInitMode>
 810313a:	4603      	mov	r3, r0
 810313c:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 810313e:	7bfb      	ldrb	r3, [r7, #15]
 8103140:	2b00      	cmp	r3, #0
 8103142:	d113      	bne.n	810316c <HAL_RTC_Init+0xd0>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8103144:	687b      	ldr	r3, [r7, #4]
 8103146:	681b      	ldr	r3, [r3, #0]
 8103148:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810314a:	687b      	ldr	r3, [r7, #4]
 810314c:	681b      	ldr	r3, [r3, #0]
 810314e:	f022 0203 	bic.w	r2, r2, #3
 8103152:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8103154:	687b      	ldr	r3, [r7, #4]
 8103156:	681b      	ldr	r3, [r3, #0]
 8103158:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 810315a:	687b      	ldr	r3, [r7, #4]
 810315c:	69da      	ldr	r2, [r3, #28]
 810315e:	687b      	ldr	r3, [r7, #4]
 8103160:	695b      	ldr	r3, [r3, #20]
 8103162:	431a      	orrs	r2, r3
 8103164:	687b      	ldr	r3, [r7, #4]
 8103166:	681b      	ldr	r3, [r3, #0]
 8103168:	430a      	orrs	r2, r1
 810316a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 810316c:	687b      	ldr	r3, [r7, #4]
 810316e:	681b      	ldr	r3, [r3, #0]
 8103170:	22ff      	movs	r2, #255	; 0xff
 8103172:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8103174:	7bfb      	ldrb	r3, [r7, #15]
 8103176:	2b00      	cmp	r3, #0
 8103178:	d103      	bne.n	8103182 <HAL_RTC_Init+0xe6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 810317a:	687b      	ldr	r3, [r7, #4]
 810317c:	2201      	movs	r2, #1
 810317e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8103182:	7bfb      	ldrb	r3, [r7, #15]
}
 8103184:	4618      	mov	r0, r3
 8103186:	3710      	adds	r7, #16
 8103188:	46bd      	mov	sp, r7
 810318a:	bd80      	pop	{r7, pc}

0810318c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 810318c:	b590      	push	{r4, r7, lr}
 810318e:	b087      	sub	sp, #28
 8103190:	af00      	add	r7, sp, #0
 8103192:	60f8      	str	r0, [r7, #12]
 8103194:	60b9      	str	r1, [r7, #8]
 8103196:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8103198:	68fb      	ldr	r3, [r7, #12]
 810319a:	f893 3020 	ldrb.w	r3, [r3, #32]
 810319e:	2b01      	cmp	r3, #1
 81031a0:	d101      	bne.n	81031a6 <HAL_RTC_SetTime+0x1a>
 81031a2:	2302      	movs	r3, #2
 81031a4:	e08b      	b.n	81032be <HAL_RTC_SetTime+0x132>
 81031a6:	68fb      	ldr	r3, [r7, #12]
 81031a8:	2201      	movs	r2, #1
 81031aa:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 81031ae:	68fb      	ldr	r3, [r7, #12]
 81031b0:	2202      	movs	r2, #2
 81031b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 81031b6:	68fb      	ldr	r3, [r7, #12]
 81031b8:	681b      	ldr	r3, [r3, #0]
 81031ba:	22ca      	movs	r2, #202	; 0xca
 81031bc:	625a      	str	r2, [r3, #36]	; 0x24
 81031be:	68fb      	ldr	r3, [r7, #12]
 81031c0:	681b      	ldr	r3, [r3, #0]
 81031c2:	2253      	movs	r2, #83	; 0x53
 81031c4:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 81031c6:	68f8      	ldr	r0, [r7, #12]
 81031c8:	f000 f9d3 	bl	8103572 <RTC_EnterInitMode>
 81031cc:	4603      	mov	r3, r0
 81031ce:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 81031d0:	7cfb      	ldrb	r3, [r7, #19]
 81031d2:	2b00      	cmp	r3, #0
 81031d4:	d163      	bne.n	810329e <HAL_RTC_SetTime+0x112>
  {
    if(Format == RTC_FORMAT_BIN)
 81031d6:	687b      	ldr	r3, [r7, #4]
 81031d8:	2b00      	cmp	r3, #0
 81031da:	d126      	bne.n	810322a <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 81031dc:	68fb      	ldr	r3, [r7, #12]
 81031de:	681b      	ldr	r3, [r3, #0]
 81031e0:	689b      	ldr	r3, [r3, #8]
 81031e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81031e6:	2b00      	cmp	r3, #0
 81031e8:	d102      	bne.n	81031f0 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 81031ea:	68bb      	ldr	r3, [r7, #8]
 81031ec:	2200      	movs	r2, #0
 81031ee:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 81031f0:	68bb      	ldr	r3, [r7, #8]
 81031f2:	781b      	ldrb	r3, [r3, #0]
 81031f4:	4618      	mov	r0, r3
 81031f6:	f000 fa2d 	bl	8103654 <RTC_ByteToBcd2>
 81031fa:	4603      	mov	r3, r0
 81031fc:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 81031fe:	68bb      	ldr	r3, [r7, #8]
 8103200:	785b      	ldrb	r3, [r3, #1]
 8103202:	4618      	mov	r0, r3
 8103204:	f000 fa26 	bl	8103654 <RTC_ByteToBcd2>
 8103208:	4603      	mov	r3, r0
 810320a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 810320c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 810320e:	68bb      	ldr	r3, [r7, #8]
 8103210:	789b      	ldrb	r3, [r3, #2]
 8103212:	4618      	mov	r0, r3
 8103214:	f000 fa1e 	bl	8103654 <RTC_ByteToBcd2>
 8103218:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 810321a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 810321e:	68bb      	ldr	r3, [r7, #8]
 8103220:	78db      	ldrb	r3, [r3, #3]
 8103222:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8103224:	4313      	orrs	r3, r2
 8103226:	617b      	str	r3, [r7, #20]
 8103228:	e018      	b.n	810325c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 810322a:	68fb      	ldr	r3, [r7, #12]
 810322c:	681b      	ldr	r3, [r3, #0]
 810322e:	689b      	ldr	r3, [r3, #8]
 8103230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103234:	2b00      	cmp	r3, #0
 8103236:	d102      	bne.n	810323e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8103238:	68bb      	ldr	r3, [r7, #8]
 810323a:	2200      	movs	r2, #0
 810323c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 810323e:	68bb      	ldr	r3, [r7, #8]
 8103240:	781b      	ldrb	r3, [r3, #0]
 8103242:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8103244:	68bb      	ldr	r3, [r7, #8]
 8103246:	785b      	ldrb	r3, [r3, #1]
 8103248:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 810324a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 810324c:	68ba      	ldr	r2, [r7, #8]
 810324e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8103250:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8103252:	68bb      	ldr	r3, [r7, #8]
 8103254:	78db      	ldrb	r3, [r3, #3]
 8103256:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8103258:	4313      	orrs	r3, r2
 810325a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 810325c:	68fb      	ldr	r3, [r7, #12]
 810325e:	681a      	ldr	r2, [r3, #0]
 8103260:	697b      	ldr	r3, [r7, #20]
 8103262:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8103266:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 810326a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 810326c:	68fb      	ldr	r3, [r7, #12]
 810326e:	681b      	ldr	r3, [r3, #0]
 8103270:	689a      	ldr	r2, [r3, #8]
 8103272:	68fb      	ldr	r3, [r7, #12]
 8103274:	681b      	ldr	r3, [r3, #0]
 8103276:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 810327a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 810327c:	68fb      	ldr	r3, [r7, #12]
 810327e:	681b      	ldr	r3, [r3, #0]
 8103280:	6899      	ldr	r1, [r3, #8]
 8103282:	68bb      	ldr	r3, [r7, #8]
 8103284:	68da      	ldr	r2, [r3, #12]
 8103286:	68bb      	ldr	r3, [r7, #8]
 8103288:	691b      	ldr	r3, [r3, #16]
 810328a:	431a      	orrs	r2, r3
 810328c:	68fb      	ldr	r3, [r7, #12]
 810328e:	681b      	ldr	r3, [r3, #0]
 8103290:	430a      	orrs	r2, r1
 8103292:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8103294:	68f8      	ldr	r0, [r7, #12]
 8103296:	f000 f99f 	bl	81035d8 <RTC_ExitInitMode>
 810329a:	4603      	mov	r3, r0
 810329c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 810329e:	68fb      	ldr	r3, [r7, #12]
 81032a0:	681b      	ldr	r3, [r3, #0]
 81032a2:	22ff      	movs	r2, #255	; 0xff
 81032a4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 81032a6:	7cfb      	ldrb	r3, [r7, #19]
 81032a8:	2b00      	cmp	r3, #0
 81032aa:	d103      	bne.n	81032b4 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 81032ac:	68fb      	ldr	r3, [r7, #12]
 81032ae:	2201      	movs	r2, #1
 81032b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 81032b4:	68fb      	ldr	r3, [r7, #12]
 81032b6:	2200      	movs	r2, #0
 81032b8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 81032bc:	7cfb      	ldrb	r3, [r7, #19]
}
 81032be:	4618      	mov	r0, r3
 81032c0:	371c      	adds	r7, #28
 81032c2:	46bd      	mov	sp, r7
 81032c4:	bd90      	pop	{r4, r7, pc}

081032c6 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 81032c6:	b580      	push	{r7, lr}
 81032c8:	b086      	sub	sp, #24
 81032ca:	af00      	add	r7, sp, #0
 81032cc:	60f8      	str	r0, [r7, #12]
 81032ce:	60b9      	str	r1, [r7, #8]
 81032d0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 81032d2:	68fb      	ldr	r3, [r7, #12]
 81032d4:	681b      	ldr	r3, [r3, #0]
 81032d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 81032d8:	68bb      	ldr	r3, [r7, #8]
 81032da:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 81032dc:	68fb      	ldr	r3, [r7, #12]
 81032de:	681b      	ldr	r3, [r3, #0]
 81032e0:	691b      	ldr	r3, [r3, #16]
 81032e2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 81032e6:	68bb      	ldr	r3, [r7, #8]
 81032e8:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 81032ea:	68fb      	ldr	r3, [r7, #12]
 81032ec:	681b      	ldr	r3, [r3, #0]
 81032ee:	681b      	ldr	r3, [r3, #0]
 81032f0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 81032f4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 81032f8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 81032fa:	697b      	ldr	r3, [r7, #20]
 81032fc:	0c1b      	lsrs	r3, r3, #16
 81032fe:	b2db      	uxtb	r3, r3
 8103300:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8103304:	b2da      	uxtb	r2, r3
 8103306:	68bb      	ldr	r3, [r7, #8]
 8103308:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 810330a:	697b      	ldr	r3, [r7, #20]
 810330c:	0a1b      	lsrs	r3, r3, #8
 810330e:	b2db      	uxtb	r3, r3
 8103310:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103314:	b2da      	uxtb	r2, r3
 8103316:	68bb      	ldr	r3, [r7, #8]
 8103318:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 810331a:	697b      	ldr	r3, [r7, #20]
 810331c:	b2db      	uxtb	r3, r3
 810331e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103322:	b2da      	uxtb	r2, r3
 8103324:	68bb      	ldr	r3, [r7, #8]
 8103326:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8103328:	697b      	ldr	r3, [r7, #20]
 810332a:	0d9b      	lsrs	r3, r3, #22
 810332c:	b2db      	uxtb	r3, r3
 810332e:	f003 0301 	and.w	r3, r3, #1
 8103332:	b2da      	uxtb	r2, r3
 8103334:	68bb      	ldr	r3, [r7, #8]
 8103336:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8103338:	687b      	ldr	r3, [r7, #4]
 810333a:	2b00      	cmp	r3, #0
 810333c:	d11a      	bne.n	8103374 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 810333e:	68bb      	ldr	r3, [r7, #8]
 8103340:	781b      	ldrb	r3, [r3, #0]
 8103342:	4618      	mov	r0, r3
 8103344:	f000 f9a6 	bl	8103694 <RTC_Bcd2ToByte>
 8103348:	4603      	mov	r3, r0
 810334a:	461a      	mov	r2, r3
 810334c:	68bb      	ldr	r3, [r7, #8]
 810334e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8103350:	68bb      	ldr	r3, [r7, #8]
 8103352:	785b      	ldrb	r3, [r3, #1]
 8103354:	4618      	mov	r0, r3
 8103356:	f000 f99d 	bl	8103694 <RTC_Bcd2ToByte>
 810335a:	4603      	mov	r3, r0
 810335c:	461a      	mov	r2, r3
 810335e:	68bb      	ldr	r3, [r7, #8]
 8103360:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8103362:	68bb      	ldr	r3, [r7, #8]
 8103364:	789b      	ldrb	r3, [r3, #2]
 8103366:	4618      	mov	r0, r3
 8103368:	f000 f994 	bl	8103694 <RTC_Bcd2ToByte>
 810336c:	4603      	mov	r3, r0
 810336e:	461a      	mov	r2, r3
 8103370:	68bb      	ldr	r3, [r7, #8]
 8103372:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8103374:	2300      	movs	r3, #0
}
 8103376:	4618      	mov	r0, r3
 8103378:	3718      	adds	r7, #24
 810337a:	46bd      	mov	sp, r7
 810337c:	bd80      	pop	{r7, pc}

0810337e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 810337e:	b590      	push	{r4, r7, lr}
 8103380:	b087      	sub	sp, #28
 8103382:	af00      	add	r7, sp, #0
 8103384:	60f8      	str	r0, [r7, #12]
 8103386:	60b9      	str	r1, [r7, #8]
 8103388:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 810338a:	68fb      	ldr	r3, [r7, #12]
 810338c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8103390:	2b01      	cmp	r3, #1
 8103392:	d101      	bne.n	8103398 <HAL_RTC_SetDate+0x1a>
 8103394:	2302      	movs	r3, #2
 8103396:	e075      	b.n	8103484 <HAL_RTC_SetDate+0x106>
 8103398:	68fb      	ldr	r3, [r7, #12]
 810339a:	2201      	movs	r2, #1
 810339c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 81033a0:	68fb      	ldr	r3, [r7, #12]
 81033a2:	2202      	movs	r2, #2
 81033a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 81033a8:	687b      	ldr	r3, [r7, #4]
 81033aa:	2b00      	cmp	r3, #0
 81033ac:	d10e      	bne.n	81033cc <HAL_RTC_SetDate+0x4e>
 81033ae:	68bb      	ldr	r3, [r7, #8]
 81033b0:	785b      	ldrb	r3, [r3, #1]
 81033b2:	f003 0310 	and.w	r3, r3, #16
 81033b6:	2b00      	cmp	r3, #0
 81033b8:	d008      	beq.n	81033cc <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 81033ba:	68bb      	ldr	r3, [r7, #8]
 81033bc:	785b      	ldrb	r3, [r3, #1]
 81033be:	f023 0310 	bic.w	r3, r3, #16
 81033c2:	b2db      	uxtb	r3, r3
 81033c4:	330a      	adds	r3, #10
 81033c6:	b2da      	uxtb	r2, r3
 81033c8:	68bb      	ldr	r3, [r7, #8]
 81033ca:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 81033cc:	687b      	ldr	r3, [r7, #4]
 81033ce:	2b00      	cmp	r3, #0
 81033d0:	d11c      	bne.n	810340c <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 81033d2:	68bb      	ldr	r3, [r7, #8]
 81033d4:	78db      	ldrb	r3, [r3, #3]
 81033d6:	4618      	mov	r0, r3
 81033d8:	f000 f93c 	bl	8103654 <RTC_ByteToBcd2>
 81033dc:	4603      	mov	r3, r0
 81033de:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 81033e0:	68bb      	ldr	r3, [r7, #8]
 81033e2:	785b      	ldrb	r3, [r3, #1]
 81033e4:	4618      	mov	r0, r3
 81033e6:	f000 f935 	bl	8103654 <RTC_ByteToBcd2>
 81033ea:	4603      	mov	r3, r0
 81033ec:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 81033ee:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 81033f0:	68bb      	ldr	r3, [r7, #8]
 81033f2:	789b      	ldrb	r3, [r3, #2]
 81033f4:	4618      	mov	r0, r3
 81033f6:	f000 f92d 	bl	8103654 <RTC_ByteToBcd2>
 81033fa:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 81033fc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8103400:	68bb      	ldr	r3, [r7, #8]
 8103402:	781b      	ldrb	r3, [r3, #0]
 8103404:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8103406:	4313      	orrs	r3, r2
 8103408:	617b      	str	r3, [r7, #20]
 810340a:	e00e      	b.n	810342a <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 810340c:	68bb      	ldr	r3, [r7, #8]
 810340e:	78db      	ldrb	r3, [r3, #3]
 8103410:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8103412:	68bb      	ldr	r3, [r7, #8]
 8103414:	785b      	ldrb	r3, [r3, #1]
 8103416:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8103418:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 810341a:	68ba      	ldr	r2, [r7, #8]
 810341c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 810341e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8103420:	68bb      	ldr	r3, [r7, #8]
 8103422:	781b      	ldrb	r3, [r3, #0]
 8103424:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8103426:	4313      	orrs	r3, r2
 8103428:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 810342a:	68fb      	ldr	r3, [r7, #12]
 810342c:	681b      	ldr	r3, [r3, #0]
 810342e:	22ca      	movs	r2, #202	; 0xca
 8103430:	625a      	str	r2, [r3, #36]	; 0x24
 8103432:	68fb      	ldr	r3, [r7, #12]
 8103434:	681b      	ldr	r3, [r3, #0]
 8103436:	2253      	movs	r2, #83	; 0x53
 8103438:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 810343a:	68f8      	ldr	r0, [r7, #12]
 810343c:	f000 f899 	bl	8103572 <RTC_EnterInitMode>
 8103440:	4603      	mov	r3, r0
 8103442:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8103444:	7cfb      	ldrb	r3, [r7, #19]
 8103446:	2b00      	cmp	r3, #0
 8103448:	d10c      	bne.n	8103464 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 810344a:	68fb      	ldr	r3, [r7, #12]
 810344c:	681a      	ldr	r2, [r3, #0]
 810344e:	697b      	ldr	r3, [r7, #20]
 8103450:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8103454:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8103458:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 810345a:	68f8      	ldr	r0, [r7, #12]
 810345c:	f000 f8bc 	bl	81035d8 <RTC_ExitInitMode>
 8103460:	4603      	mov	r3, r0
 8103462:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8103464:	68fb      	ldr	r3, [r7, #12]
 8103466:	681b      	ldr	r3, [r3, #0]
 8103468:	22ff      	movs	r2, #255	; 0xff
 810346a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 810346c:	7cfb      	ldrb	r3, [r7, #19]
 810346e:	2b00      	cmp	r3, #0
 8103470:	d103      	bne.n	810347a <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8103472:	68fb      	ldr	r3, [r7, #12]
 8103474:	2201      	movs	r2, #1
 8103476:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 810347a:	68fb      	ldr	r3, [r7, #12]
 810347c:	2200      	movs	r2, #0
 810347e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8103482:	7cfb      	ldrb	r3, [r7, #19]


}
 8103484:	4618      	mov	r0, r3
 8103486:	371c      	adds	r7, #28
 8103488:	46bd      	mov	sp, r7
 810348a:	bd90      	pop	{r4, r7, pc}

0810348c <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 810348c:	b580      	push	{r7, lr}
 810348e:	b086      	sub	sp, #24
 8103490:	af00      	add	r7, sp, #0
 8103492:	60f8      	str	r0, [r7, #12]
 8103494:	60b9      	str	r1, [r7, #8]
 8103496:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8103498:	68fb      	ldr	r3, [r7, #12]
 810349a:	681b      	ldr	r3, [r3, #0]
 810349c:	685b      	ldr	r3, [r3, #4]
 810349e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 81034a2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 81034a6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 81034a8:	697b      	ldr	r3, [r7, #20]
 81034aa:	0c1b      	lsrs	r3, r3, #16
 81034ac:	b2da      	uxtb	r2, r3
 81034ae:	68bb      	ldr	r3, [r7, #8]
 81034b0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 81034b2:	697b      	ldr	r3, [r7, #20]
 81034b4:	0a1b      	lsrs	r3, r3, #8
 81034b6:	b2db      	uxtb	r3, r3
 81034b8:	f003 031f 	and.w	r3, r3, #31
 81034bc:	b2da      	uxtb	r2, r3
 81034be:	68bb      	ldr	r3, [r7, #8]
 81034c0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 81034c2:	697b      	ldr	r3, [r7, #20]
 81034c4:	b2db      	uxtb	r3, r3
 81034c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81034ca:	b2da      	uxtb	r2, r3
 81034cc:	68bb      	ldr	r3, [r7, #8]
 81034ce:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 81034d0:	697b      	ldr	r3, [r7, #20]
 81034d2:	0b5b      	lsrs	r3, r3, #13
 81034d4:	b2db      	uxtb	r3, r3
 81034d6:	f003 0307 	and.w	r3, r3, #7
 81034da:	b2da      	uxtb	r2, r3
 81034dc:	68bb      	ldr	r3, [r7, #8]
 81034de:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 81034e0:	687b      	ldr	r3, [r7, #4]
 81034e2:	2b00      	cmp	r3, #0
 81034e4:	d11a      	bne.n	810351c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 81034e6:	68bb      	ldr	r3, [r7, #8]
 81034e8:	78db      	ldrb	r3, [r3, #3]
 81034ea:	4618      	mov	r0, r3
 81034ec:	f000 f8d2 	bl	8103694 <RTC_Bcd2ToByte>
 81034f0:	4603      	mov	r3, r0
 81034f2:	461a      	mov	r2, r3
 81034f4:	68bb      	ldr	r3, [r7, #8]
 81034f6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 81034f8:	68bb      	ldr	r3, [r7, #8]
 81034fa:	785b      	ldrb	r3, [r3, #1]
 81034fc:	4618      	mov	r0, r3
 81034fe:	f000 f8c9 	bl	8103694 <RTC_Bcd2ToByte>
 8103502:	4603      	mov	r3, r0
 8103504:	461a      	mov	r2, r3
 8103506:	68bb      	ldr	r3, [r7, #8]
 8103508:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 810350a:	68bb      	ldr	r3, [r7, #8]
 810350c:	789b      	ldrb	r3, [r3, #2]
 810350e:	4618      	mov	r0, r3
 8103510:	f000 f8c0 	bl	8103694 <RTC_Bcd2ToByte>
 8103514:	4603      	mov	r3, r0
 8103516:	461a      	mov	r2, r3
 8103518:	68bb      	ldr	r3, [r7, #8]
 810351a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 810351c:	2300      	movs	r3, #0
}
 810351e:	4618      	mov	r0, r3
 8103520:	3718      	adds	r7, #24
 8103522:	46bd      	mov	sp, r7
 8103524:	bd80      	pop	{r7, pc}

08103526 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8103526:	b580      	push	{r7, lr}
 8103528:	b084      	sub	sp, #16
 810352a:	af00      	add	r7, sp, #0
 810352c:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 810352e:	687b      	ldr	r3, [r7, #4]
 8103530:	681b      	ldr	r3, [r3, #0]
 8103532:	68da      	ldr	r2, [r3, #12]
 8103534:	687b      	ldr	r3, [r7, #4]
 8103536:	681b      	ldr	r3, [r3, #0]
 8103538:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 810353c:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 810353e:	f7fd fb0f 	bl	8100b60 <HAL_GetTick>
 8103542:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8103544:	e009      	b.n	810355a <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8103546:	f7fd fb0b 	bl	8100b60 <HAL_GetTick>
 810354a:	4602      	mov	r2, r0
 810354c:	68fb      	ldr	r3, [r7, #12]
 810354e:	1ad3      	subs	r3, r2, r3
 8103550:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8103554:	d901      	bls.n	810355a <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8103556:	2303      	movs	r3, #3
 8103558:	e007      	b.n	810356a <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 810355a:	687b      	ldr	r3, [r7, #4]
 810355c:	681b      	ldr	r3, [r3, #0]
 810355e:	68db      	ldr	r3, [r3, #12]
 8103560:	f003 0320 	and.w	r3, r3, #32
 8103564:	2b00      	cmp	r3, #0
 8103566:	d0ee      	beq.n	8103546 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8103568:	2300      	movs	r3, #0
}
 810356a:	4618      	mov	r0, r3
 810356c:	3710      	adds	r7, #16
 810356e:	46bd      	mov	sp, r7
 8103570:	bd80      	pop	{r7, pc}

08103572 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8103572:	b580      	push	{r7, lr}
 8103574:	b084      	sub	sp, #16
 8103576:	af00      	add	r7, sp, #0
 8103578:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810357a:	2300      	movs	r3, #0
 810357c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 810357e:	687b      	ldr	r3, [r7, #4]
 8103580:	681b      	ldr	r3, [r3, #0]
 8103582:	68db      	ldr	r3, [r3, #12]
 8103584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103588:	2b00      	cmp	r3, #0
 810358a:	d120      	bne.n	81035ce <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 810358c:	687b      	ldr	r3, [r7, #4]
 810358e:	681b      	ldr	r3, [r3, #0]
 8103590:	f04f 32ff 	mov.w	r2, #4294967295
 8103594:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8103596:	f7fd fae3 	bl	8100b60 <HAL_GetTick>
 810359a:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 810359c:	e00d      	b.n	81035ba <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 810359e:	f7fd fadf 	bl	8100b60 <HAL_GetTick>
 81035a2:	4602      	mov	r2, r0
 81035a4:	68bb      	ldr	r3, [r7, #8]
 81035a6:	1ad3      	subs	r3, r2, r3
 81035a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 81035ac:	d905      	bls.n	81035ba <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 81035ae:	2303      	movs	r3, #3
 81035b0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 81035b2:	687b      	ldr	r3, [r7, #4]
 81035b4:	2203      	movs	r2, #3
 81035b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 81035ba:	687b      	ldr	r3, [r7, #4]
 81035bc:	681b      	ldr	r3, [r3, #0]
 81035be:	68db      	ldr	r3, [r3, #12]
 81035c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81035c4:	2b00      	cmp	r3, #0
 81035c6:	d102      	bne.n	81035ce <RTC_EnterInitMode+0x5c>
 81035c8:	7bfb      	ldrb	r3, [r7, #15]
 81035ca:	2b03      	cmp	r3, #3
 81035cc:	d1e7      	bne.n	810359e <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 81035ce:	7bfb      	ldrb	r3, [r7, #15]
}
 81035d0:	4618      	mov	r0, r3
 81035d2:	3710      	adds	r7, #16
 81035d4:	46bd      	mov	sp, r7
 81035d6:	bd80      	pop	{r7, pc}

081035d8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 81035d8:	b580      	push	{r7, lr}
 81035da:	b084      	sub	sp, #16
 81035dc:	af00      	add	r7, sp, #0
 81035de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81035e0:	2300      	movs	r3, #0
 81035e2:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 81035e4:	4b1a      	ldr	r3, [pc, #104]	; (8103650 <RTC_ExitInitMode+0x78>)
 81035e6:	68db      	ldr	r3, [r3, #12]
 81035e8:	4a19      	ldr	r2, [pc, #100]	; (8103650 <RTC_ExitInitMode+0x78>)
 81035ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 81035ee:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 81035f0:	4b17      	ldr	r3, [pc, #92]	; (8103650 <RTC_ExitInitMode+0x78>)
 81035f2:	689b      	ldr	r3, [r3, #8]
 81035f4:	f003 0320 	and.w	r3, r3, #32
 81035f8:	2b00      	cmp	r3, #0
 81035fa:	d10c      	bne.n	8103616 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 81035fc:	6878      	ldr	r0, [r7, #4]
 81035fe:	f7ff ff92 	bl	8103526 <HAL_RTC_WaitForSynchro>
 8103602:	4603      	mov	r3, r0
 8103604:	2b00      	cmp	r3, #0
 8103606:	d01e      	beq.n	8103646 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8103608:	687b      	ldr	r3, [r7, #4]
 810360a:	2203      	movs	r2, #3
 810360c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8103610:	2303      	movs	r3, #3
 8103612:	73fb      	strb	r3, [r7, #15]
 8103614:	e017      	b.n	8103646 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8103616:	4b0e      	ldr	r3, [pc, #56]	; (8103650 <RTC_ExitInitMode+0x78>)
 8103618:	689b      	ldr	r3, [r3, #8]
 810361a:	4a0d      	ldr	r2, [pc, #52]	; (8103650 <RTC_ExitInitMode+0x78>)
 810361c:	f023 0320 	bic.w	r3, r3, #32
 8103620:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8103622:	6878      	ldr	r0, [r7, #4]
 8103624:	f7ff ff7f 	bl	8103526 <HAL_RTC_WaitForSynchro>
 8103628:	4603      	mov	r3, r0
 810362a:	2b00      	cmp	r3, #0
 810362c:	d005      	beq.n	810363a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 810362e:	687b      	ldr	r3, [r7, #4]
 8103630:	2203      	movs	r2, #3
 8103632:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8103636:	2303      	movs	r3, #3
 8103638:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 810363a:	4b05      	ldr	r3, [pc, #20]	; (8103650 <RTC_ExitInitMode+0x78>)
 810363c:	689b      	ldr	r3, [r3, #8]
 810363e:	4a04      	ldr	r2, [pc, #16]	; (8103650 <RTC_ExitInitMode+0x78>)
 8103640:	f043 0320 	orr.w	r3, r3, #32
 8103644:	6093      	str	r3, [r2, #8]
  }

  return status;
 8103646:	7bfb      	ldrb	r3, [r7, #15]
}
 8103648:	4618      	mov	r0, r3
 810364a:	3710      	adds	r7, #16
 810364c:	46bd      	mov	sp, r7
 810364e:	bd80      	pop	{r7, pc}
 8103650:	58004000 	.word	0x58004000

08103654 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8103654:	b480      	push	{r7}
 8103656:	b085      	sub	sp, #20
 8103658:	af00      	add	r7, sp, #0
 810365a:	4603      	mov	r3, r0
 810365c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 810365e:	2300      	movs	r3, #0
 8103660:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8103662:	79fb      	ldrb	r3, [r7, #7]
 8103664:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8103666:	e005      	b.n	8103674 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8103668:	68fb      	ldr	r3, [r7, #12]
 810366a:	3301      	adds	r3, #1
 810366c:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 810366e:	7afb      	ldrb	r3, [r7, #11]
 8103670:	3b0a      	subs	r3, #10
 8103672:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8103674:	7afb      	ldrb	r3, [r7, #11]
 8103676:	2b09      	cmp	r3, #9
 8103678:	d8f6      	bhi.n	8103668 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 810367a:	68fb      	ldr	r3, [r7, #12]
 810367c:	b2db      	uxtb	r3, r3
 810367e:	011b      	lsls	r3, r3, #4
 8103680:	b2da      	uxtb	r2, r3
 8103682:	7afb      	ldrb	r3, [r7, #11]
 8103684:	4313      	orrs	r3, r2
 8103686:	b2db      	uxtb	r3, r3
}
 8103688:	4618      	mov	r0, r3
 810368a:	3714      	adds	r7, #20
 810368c:	46bd      	mov	sp, r7
 810368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103692:	4770      	bx	lr

08103694 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8103694:	b480      	push	{r7}
 8103696:	b085      	sub	sp, #20
 8103698:	af00      	add	r7, sp, #0
 810369a:	4603      	mov	r3, r0
 810369c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 810369e:	79fb      	ldrb	r3, [r7, #7]
 81036a0:	091b      	lsrs	r3, r3, #4
 81036a2:	b2db      	uxtb	r3, r3
 81036a4:	461a      	mov	r2, r3
 81036a6:	0092      	lsls	r2, r2, #2
 81036a8:	4413      	add	r3, r2
 81036aa:	005b      	lsls	r3, r3, #1
 81036ac:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 81036ae:	79fb      	ldrb	r3, [r7, #7]
 81036b0:	f003 030f 	and.w	r3, r3, #15
 81036b4:	b2da      	uxtb	r2, r3
 81036b6:	7bfb      	ldrb	r3, [r7, #15]
 81036b8:	4413      	add	r3, r2
 81036ba:	b2db      	uxtb	r3, r3
}
 81036bc:	4618      	mov	r0, r3
 81036be:	3714      	adds	r7, #20
 81036c0:	46bd      	mov	sp, r7
 81036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81036c6:	4770      	bx	lr

081036c8 <HAL_RTCEx_SetRefClock>:
  * @brief  Enable the RTC reference clock detection.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetRefClock(RTC_HandleTypeDef * hrtc)
{
 81036c8:	b580      	push	{r7, lr}
 81036ca:	b084      	sub	sp, #16
 81036cc:	af00      	add	r7, sp, #0
 81036ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  /* Process Locked */
  __HAL_LOCK(hrtc);
 81036d0:	687b      	ldr	r3, [r7, #4]
 81036d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 81036d6:	2b01      	cmp	r3, #1
 81036d8:	d101      	bne.n	81036de <HAL_RTCEx_SetRefClock+0x16>
 81036da:	2302      	movs	r3, #2
 81036dc:	e034      	b.n	8103748 <HAL_RTCEx_SetRefClock+0x80>
 81036de:	687b      	ldr	r3, [r7, #4]
 81036e0:	2201      	movs	r2, #1
 81036e2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 81036e6:	687b      	ldr	r3, [r7, #4]
 81036e8:	2202      	movs	r2, #2
 81036ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 81036ee:	687b      	ldr	r3, [r7, #4]
 81036f0:	681b      	ldr	r3, [r3, #0]
 81036f2:	22ca      	movs	r2, #202	; 0xca
 81036f4:	625a      	str	r2, [r3, #36]	; 0x24
 81036f6:	687b      	ldr	r3, [r7, #4]
 81036f8:	681b      	ldr	r3, [r3, #0]
 81036fa:	2253      	movs	r2, #83	; 0x53
 81036fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 81036fe:	6878      	ldr	r0, [r7, #4]
 8103700:	f7ff ff37 	bl	8103572 <RTC_EnterInitMode>
 8103704:	4603      	mov	r3, r0
 8103706:	73fb      	strb	r3, [r7, #15]
  if (status == HAL_OK)
 8103708:	7bfb      	ldrb	r3, [r7, #15]
 810370a:	2b00      	cmp	r3, #0
 810370c:	d10c      	bne.n	8103728 <HAL_RTCEx_SetRefClock+0x60>
  {
    __HAL_RTC_CLOCKREF_DETECTION_ENABLE(hrtc);
 810370e:	687b      	ldr	r3, [r7, #4]
 8103710:	681b      	ldr	r3, [r3, #0]
 8103712:	689a      	ldr	r2, [r3, #8]
 8103714:	687b      	ldr	r3, [r7, #4]
 8103716:	681b      	ldr	r3, [r3, #0]
 8103718:	f042 0210 	orr.w	r2, r2, #16
 810371c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 810371e:	6878      	ldr	r0, [r7, #4]
 8103720:	f7ff ff5a 	bl	81035d8 <RTC_ExitInitMode>
 8103724:	4603      	mov	r3, r0
 8103726:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8103728:	687b      	ldr	r3, [r7, #4]
 810372a:	681b      	ldr	r3, [r3, #0]
 810372c:	22ff      	movs	r2, #255	; 0xff
 810372e:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 8103730:	7bfb      	ldrb	r3, [r7, #15]
 8103732:	2b00      	cmp	r3, #0
 8103734:	d103      	bne.n	810373e <HAL_RTCEx_SetRefClock+0x76>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8103736:	687b      	ldr	r3, [r7, #4]
 8103738:	2201      	movs	r2, #1
 810373a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 810373e:	687b      	ldr	r3, [r7, #4]
 8103740:	2200      	movs	r2, #0
 8103742:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8103746:	2300      	movs	r3, #0
}
 8103748:	4618      	mov	r0, r3
 810374a:	3710      	adds	r7, #16
 810374c:	46bd      	mov	sp, r7
 810374e:	bd80      	pop	{r7, pc}

08103750 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8103750:	b580      	push	{r7, lr}
 8103752:	b082      	sub	sp, #8
 8103754:	af00      	add	r7, sp, #0
 8103756:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8103758:	687b      	ldr	r3, [r7, #4]
 810375a:	2b00      	cmp	r3, #0
 810375c:	d101      	bne.n	8103762 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 810375e:	2301      	movs	r3, #1
 8103760:	e049      	b.n	81037f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8103762:	687b      	ldr	r3, [r7, #4]
 8103764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8103768:	b2db      	uxtb	r3, r3
 810376a:	2b00      	cmp	r3, #0
 810376c:	d106      	bne.n	810377c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810376e:	687b      	ldr	r3, [r7, #4]
 8103770:	2200      	movs	r2, #0
 8103772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8103776:	6878      	ldr	r0, [r7, #4]
 8103778:	f7fd f8c4 	bl	8100904 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810377c:	687b      	ldr	r3, [r7, #4]
 810377e:	2202      	movs	r2, #2
 8103780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8103784:	687b      	ldr	r3, [r7, #4]
 8103786:	681a      	ldr	r2, [r3, #0]
 8103788:	687b      	ldr	r3, [r7, #4]
 810378a:	3304      	adds	r3, #4
 810378c:	4619      	mov	r1, r3
 810378e:	4610      	mov	r0, r2
 8103790:	f000 f97c 	bl	8103a8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8103794:	687b      	ldr	r3, [r7, #4]
 8103796:	2201      	movs	r2, #1
 8103798:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810379c:	687b      	ldr	r3, [r7, #4]
 810379e:	2201      	movs	r2, #1
 81037a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81037a4:	687b      	ldr	r3, [r7, #4]
 81037a6:	2201      	movs	r2, #1
 81037a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81037ac:	687b      	ldr	r3, [r7, #4]
 81037ae:	2201      	movs	r2, #1
 81037b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81037b4:	687b      	ldr	r3, [r7, #4]
 81037b6:	2201      	movs	r2, #1
 81037b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 81037bc:	687b      	ldr	r3, [r7, #4]
 81037be:	2201      	movs	r2, #1
 81037c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 81037c4:	687b      	ldr	r3, [r7, #4]
 81037c6:	2201      	movs	r2, #1
 81037c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81037cc:	687b      	ldr	r3, [r7, #4]
 81037ce:	2201      	movs	r2, #1
 81037d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81037d4:	687b      	ldr	r3, [r7, #4]
 81037d6:	2201      	movs	r2, #1
 81037d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81037dc:	687b      	ldr	r3, [r7, #4]
 81037de:	2201      	movs	r2, #1
 81037e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 81037e4:	687b      	ldr	r3, [r7, #4]
 81037e6:	2201      	movs	r2, #1
 81037e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81037ec:	687b      	ldr	r3, [r7, #4]
 81037ee:	2201      	movs	r2, #1
 81037f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 81037f4:	2300      	movs	r3, #0
}
 81037f6:	4618      	mov	r0, r3
 81037f8:	3708      	adds	r7, #8
 81037fa:	46bd      	mov	sp, r7
 81037fc:	bd80      	pop	{r7, pc}

081037fe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 81037fe:	b580      	push	{r7, lr}
 8103800:	b082      	sub	sp, #8
 8103802:	af00      	add	r7, sp, #0
 8103804:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8103806:	687b      	ldr	r3, [r7, #4]
 8103808:	681b      	ldr	r3, [r3, #0]
 810380a:	691b      	ldr	r3, [r3, #16]
 810380c:	f003 0302 	and.w	r3, r3, #2
 8103810:	2b02      	cmp	r3, #2
 8103812:	d122      	bne.n	810385a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8103814:	687b      	ldr	r3, [r7, #4]
 8103816:	681b      	ldr	r3, [r3, #0]
 8103818:	68db      	ldr	r3, [r3, #12]
 810381a:	f003 0302 	and.w	r3, r3, #2
 810381e:	2b02      	cmp	r3, #2
 8103820:	d11b      	bne.n	810385a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8103822:	687b      	ldr	r3, [r7, #4]
 8103824:	681b      	ldr	r3, [r3, #0]
 8103826:	f06f 0202 	mvn.w	r2, #2
 810382a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 810382c:	687b      	ldr	r3, [r7, #4]
 810382e:	2201      	movs	r2, #1
 8103830:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8103832:	687b      	ldr	r3, [r7, #4]
 8103834:	681b      	ldr	r3, [r3, #0]
 8103836:	699b      	ldr	r3, [r3, #24]
 8103838:	f003 0303 	and.w	r3, r3, #3
 810383c:	2b00      	cmp	r3, #0
 810383e:	d003      	beq.n	8103848 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8103840:	6878      	ldr	r0, [r7, #4]
 8103842:	f000 f905 	bl	8103a50 <HAL_TIM_IC_CaptureCallback>
 8103846:	e005      	b.n	8103854 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8103848:	6878      	ldr	r0, [r7, #4]
 810384a:	f000 f8f7 	bl	8103a3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 810384e:	6878      	ldr	r0, [r7, #4]
 8103850:	f000 f908 	bl	8103a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8103854:	687b      	ldr	r3, [r7, #4]
 8103856:	2200      	movs	r2, #0
 8103858:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 810385a:	687b      	ldr	r3, [r7, #4]
 810385c:	681b      	ldr	r3, [r3, #0]
 810385e:	691b      	ldr	r3, [r3, #16]
 8103860:	f003 0304 	and.w	r3, r3, #4
 8103864:	2b04      	cmp	r3, #4
 8103866:	d122      	bne.n	81038ae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8103868:	687b      	ldr	r3, [r7, #4]
 810386a:	681b      	ldr	r3, [r3, #0]
 810386c:	68db      	ldr	r3, [r3, #12]
 810386e:	f003 0304 	and.w	r3, r3, #4
 8103872:	2b04      	cmp	r3, #4
 8103874:	d11b      	bne.n	81038ae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8103876:	687b      	ldr	r3, [r7, #4]
 8103878:	681b      	ldr	r3, [r3, #0]
 810387a:	f06f 0204 	mvn.w	r2, #4
 810387e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8103880:	687b      	ldr	r3, [r7, #4]
 8103882:	2202      	movs	r2, #2
 8103884:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8103886:	687b      	ldr	r3, [r7, #4]
 8103888:	681b      	ldr	r3, [r3, #0]
 810388a:	699b      	ldr	r3, [r3, #24]
 810388c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8103890:	2b00      	cmp	r3, #0
 8103892:	d003      	beq.n	810389c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8103894:	6878      	ldr	r0, [r7, #4]
 8103896:	f000 f8db 	bl	8103a50 <HAL_TIM_IC_CaptureCallback>
 810389a:	e005      	b.n	81038a8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810389c:	6878      	ldr	r0, [r7, #4]
 810389e:	f000 f8cd 	bl	8103a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81038a2:	6878      	ldr	r0, [r7, #4]
 81038a4:	f000 f8de 	bl	8103a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81038a8:	687b      	ldr	r3, [r7, #4]
 81038aa:	2200      	movs	r2, #0
 81038ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 81038ae:	687b      	ldr	r3, [r7, #4]
 81038b0:	681b      	ldr	r3, [r3, #0]
 81038b2:	691b      	ldr	r3, [r3, #16]
 81038b4:	f003 0308 	and.w	r3, r3, #8
 81038b8:	2b08      	cmp	r3, #8
 81038ba:	d122      	bne.n	8103902 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 81038bc:	687b      	ldr	r3, [r7, #4]
 81038be:	681b      	ldr	r3, [r3, #0]
 81038c0:	68db      	ldr	r3, [r3, #12]
 81038c2:	f003 0308 	and.w	r3, r3, #8
 81038c6:	2b08      	cmp	r3, #8
 81038c8:	d11b      	bne.n	8103902 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 81038ca:	687b      	ldr	r3, [r7, #4]
 81038cc:	681b      	ldr	r3, [r3, #0]
 81038ce:	f06f 0208 	mvn.w	r2, #8
 81038d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 81038d4:	687b      	ldr	r3, [r7, #4]
 81038d6:	2204      	movs	r2, #4
 81038d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 81038da:	687b      	ldr	r3, [r7, #4]
 81038dc:	681b      	ldr	r3, [r3, #0]
 81038de:	69db      	ldr	r3, [r3, #28]
 81038e0:	f003 0303 	and.w	r3, r3, #3
 81038e4:	2b00      	cmp	r3, #0
 81038e6:	d003      	beq.n	81038f0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81038e8:	6878      	ldr	r0, [r7, #4]
 81038ea:	f000 f8b1 	bl	8103a50 <HAL_TIM_IC_CaptureCallback>
 81038ee:	e005      	b.n	81038fc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81038f0:	6878      	ldr	r0, [r7, #4]
 81038f2:	f000 f8a3 	bl	8103a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81038f6:	6878      	ldr	r0, [r7, #4]
 81038f8:	f000 f8b4 	bl	8103a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81038fc:	687b      	ldr	r3, [r7, #4]
 81038fe:	2200      	movs	r2, #0
 8103900:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8103902:	687b      	ldr	r3, [r7, #4]
 8103904:	681b      	ldr	r3, [r3, #0]
 8103906:	691b      	ldr	r3, [r3, #16]
 8103908:	f003 0310 	and.w	r3, r3, #16
 810390c:	2b10      	cmp	r3, #16
 810390e:	d122      	bne.n	8103956 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8103910:	687b      	ldr	r3, [r7, #4]
 8103912:	681b      	ldr	r3, [r3, #0]
 8103914:	68db      	ldr	r3, [r3, #12]
 8103916:	f003 0310 	and.w	r3, r3, #16
 810391a:	2b10      	cmp	r3, #16
 810391c:	d11b      	bne.n	8103956 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 810391e:	687b      	ldr	r3, [r7, #4]
 8103920:	681b      	ldr	r3, [r3, #0]
 8103922:	f06f 0210 	mvn.w	r2, #16
 8103926:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8103928:	687b      	ldr	r3, [r7, #4]
 810392a:	2208      	movs	r2, #8
 810392c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 810392e:	687b      	ldr	r3, [r7, #4]
 8103930:	681b      	ldr	r3, [r3, #0]
 8103932:	69db      	ldr	r3, [r3, #28]
 8103934:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8103938:	2b00      	cmp	r3, #0
 810393a:	d003      	beq.n	8103944 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810393c:	6878      	ldr	r0, [r7, #4]
 810393e:	f000 f887 	bl	8103a50 <HAL_TIM_IC_CaptureCallback>
 8103942:	e005      	b.n	8103950 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8103944:	6878      	ldr	r0, [r7, #4]
 8103946:	f000 f879 	bl	8103a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810394a:	6878      	ldr	r0, [r7, #4]
 810394c:	f000 f88a 	bl	8103a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8103950:	687b      	ldr	r3, [r7, #4]
 8103952:	2200      	movs	r2, #0
 8103954:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8103956:	687b      	ldr	r3, [r7, #4]
 8103958:	681b      	ldr	r3, [r3, #0]
 810395a:	691b      	ldr	r3, [r3, #16]
 810395c:	f003 0301 	and.w	r3, r3, #1
 8103960:	2b01      	cmp	r3, #1
 8103962:	d10e      	bne.n	8103982 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8103964:	687b      	ldr	r3, [r7, #4]
 8103966:	681b      	ldr	r3, [r3, #0]
 8103968:	68db      	ldr	r3, [r3, #12]
 810396a:	f003 0301 	and.w	r3, r3, #1
 810396e:	2b01      	cmp	r3, #1
 8103970:	d107      	bne.n	8103982 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8103972:	687b      	ldr	r3, [r7, #4]
 8103974:	681b      	ldr	r3, [r3, #0]
 8103976:	f06f 0201 	mvn.w	r2, #1
 810397a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 810397c:	6878      	ldr	r0, [r7, #4]
 810397e:	f7fc fec1 	bl	8100704 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8103982:	687b      	ldr	r3, [r7, #4]
 8103984:	681b      	ldr	r3, [r3, #0]
 8103986:	691b      	ldr	r3, [r3, #16]
 8103988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810398c:	2b80      	cmp	r3, #128	; 0x80
 810398e:	d10e      	bne.n	81039ae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8103990:	687b      	ldr	r3, [r7, #4]
 8103992:	681b      	ldr	r3, [r3, #0]
 8103994:	68db      	ldr	r3, [r3, #12]
 8103996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810399a:	2b80      	cmp	r3, #128	; 0x80
 810399c:	d107      	bne.n	81039ae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 810399e:	687b      	ldr	r3, [r7, #4]
 81039a0:	681b      	ldr	r3, [r3, #0]
 81039a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 81039a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 81039a8:	6878      	ldr	r0, [r7, #4]
 81039aa:	f000 f913 	bl	8103bd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 81039ae:	687b      	ldr	r3, [r7, #4]
 81039b0:	681b      	ldr	r3, [r3, #0]
 81039b2:	691b      	ldr	r3, [r3, #16]
 81039b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81039b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81039bc:	d10e      	bne.n	81039dc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 81039be:	687b      	ldr	r3, [r7, #4]
 81039c0:	681b      	ldr	r3, [r3, #0]
 81039c2:	68db      	ldr	r3, [r3, #12]
 81039c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81039c8:	2b80      	cmp	r3, #128	; 0x80
 81039ca:	d107      	bne.n	81039dc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 81039cc:	687b      	ldr	r3, [r7, #4]
 81039ce:	681b      	ldr	r3, [r3, #0]
 81039d0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 81039d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 81039d6:	6878      	ldr	r0, [r7, #4]
 81039d8:	f000 f906 	bl	8103be8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 81039dc:	687b      	ldr	r3, [r7, #4]
 81039de:	681b      	ldr	r3, [r3, #0]
 81039e0:	691b      	ldr	r3, [r3, #16]
 81039e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81039e6:	2b40      	cmp	r3, #64	; 0x40
 81039e8:	d10e      	bne.n	8103a08 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 81039ea:	687b      	ldr	r3, [r7, #4]
 81039ec:	681b      	ldr	r3, [r3, #0]
 81039ee:	68db      	ldr	r3, [r3, #12]
 81039f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81039f4:	2b40      	cmp	r3, #64	; 0x40
 81039f6:	d107      	bne.n	8103a08 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 81039f8:	687b      	ldr	r3, [r7, #4]
 81039fa:	681b      	ldr	r3, [r3, #0]
 81039fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8103a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8103a02:	6878      	ldr	r0, [r7, #4]
 8103a04:	f000 f838 	bl	8103a78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8103a08:	687b      	ldr	r3, [r7, #4]
 8103a0a:	681b      	ldr	r3, [r3, #0]
 8103a0c:	691b      	ldr	r3, [r3, #16]
 8103a0e:	f003 0320 	and.w	r3, r3, #32
 8103a12:	2b20      	cmp	r3, #32
 8103a14:	d10e      	bne.n	8103a34 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8103a16:	687b      	ldr	r3, [r7, #4]
 8103a18:	681b      	ldr	r3, [r3, #0]
 8103a1a:	68db      	ldr	r3, [r3, #12]
 8103a1c:	f003 0320 	and.w	r3, r3, #32
 8103a20:	2b20      	cmp	r3, #32
 8103a22:	d107      	bne.n	8103a34 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8103a24:	687b      	ldr	r3, [r7, #4]
 8103a26:	681b      	ldr	r3, [r3, #0]
 8103a28:	f06f 0220 	mvn.w	r2, #32
 8103a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8103a2e:	6878      	ldr	r0, [r7, #4]
 8103a30:	f000 f8c6 	bl	8103bc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8103a34:	bf00      	nop
 8103a36:	3708      	adds	r7, #8
 8103a38:	46bd      	mov	sp, r7
 8103a3a:	bd80      	pop	{r7, pc}

08103a3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8103a3c:	b480      	push	{r7}
 8103a3e:	b083      	sub	sp, #12
 8103a40:	af00      	add	r7, sp, #0
 8103a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8103a44:	bf00      	nop
 8103a46:	370c      	adds	r7, #12
 8103a48:	46bd      	mov	sp, r7
 8103a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a4e:	4770      	bx	lr

08103a50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8103a50:	b480      	push	{r7}
 8103a52:	b083      	sub	sp, #12
 8103a54:	af00      	add	r7, sp, #0
 8103a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8103a58:	bf00      	nop
 8103a5a:	370c      	adds	r7, #12
 8103a5c:	46bd      	mov	sp, r7
 8103a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a62:	4770      	bx	lr

08103a64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8103a64:	b480      	push	{r7}
 8103a66:	b083      	sub	sp, #12
 8103a68:	af00      	add	r7, sp, #0
 8103a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8103a6c:	bf00      	nop
 8103a6e:	370c      	adds	r7, #12
 8103a70:	46bd      	mov	sp, r7
 8103a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a76:	4770      	bx	lr

08103a78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8103a78:	b480      	push	{r7}
 8103a7a:	b083      	sub	sp, #12
 8103a7c:	af00      	add	r7, sp, #0
 8103a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8103a80:	bf00      	nop
 8103a82:	370c      	adds	r7, #12
 8103a84:	46bd      	mov	sp, r7
 8103a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a8a:	4770      	bx	lr

08103a8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8103a8c:	b480      	push	{r7}
 8103a8e:	b085      	sub	sp, #20
 8103a90:	af00      	add	r7, sp, #0
 8103a92:	6078      	str	r0, [r7, #4]
 8103a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8103a96:	687b      	ldr	r3, [r7, #4]
 8103a98:	681b      	ldr	r3, [r3, #0]
 8103a9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8103a9c:	687b      	ldr	r3, [r7, #4]
 8103a9e:	4a40      	ldr	r2, [pc, #256]	; (8103ba0 <TIM_Base_SetConfig+0x114>)
 8103aa0:	4293      	cmp	r3, r2
 8103aa2:	d013      	beq.n	8103acc <TIM_Base_SetConfig+0x40>
 8103aa4:	687b      	ldr	r3, [r7, #4]
 8103aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103aaa:	d00f      	beq.n	8103acc <TIM_Base_SetConfig+0x40>
 8103aac:	687b      	ldr	r3, [r7, #4]
 8103aae:	4a3d      	ldr	r2, [pc, #244]	; (8103ba4 <TIM_Base_SetConfig+0x118>)
 8103ab0:	4293      	cmp	r3, r2
 8103ab2:	d00b      	beq.n	8103acc <TIM_Base_SetConfig+0x40>
 8103ab4:	687b      	ldr	r3, [r7, #4]
 8103ab6:	4a3c      	ldr	r2, [pc, #240]	; (8103ba8 <TIM_Base_SetConfig+0x11c>)
 8103ab8:	4293      	cmp	r3, r2
 8103aba:	d007      	beq.n	8103acc <TIM_Base_SetConfig+0x40>
 8103abc:	687b      	ldr	r3, [r7, #4]
 8103abe:	4a3b      	ldr	r2, [pc, #236]	; (8103bac <TIM_Base_SetConfig+0x120>)
 8103ac0:	4293      	cmp	r3, r2
 8103ac2:	d003      	beq.n	8103acc <TIM_Base_SetConfig+0x40>
 8103ac4:	687b      	ldr	r3, [r7, #4]
 8103ac6:	4a3a      	ldr	r2, [pc, #232]	; (8103bb0 <TIM_Base_SetConfig+0x124>)
 8103ac8:	4293      	cmp	r3, r2
 8103aca:	d108      	bne.n	8103ade <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8103acc:	68fb      	ldr	r3, [r7, #12]
 8103ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8103ad2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8103ad4:	683b      	ldr	r3, [r7, #0]
 8103ad6:	685b      	ldr	r3, [r3, #4]
 8103ad8:	68fa      	ldr	r2, [r7, #12]
 8103ada:	4313      	orrs	r3, r2
 8103adc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8103ade:	687b      	ldr	r3, [r7, #4]
 8103ae0:	4a2f      	ldr	r2, [pc, #188]	; (8103ba0 <TIM_Base_SetConfig+0x114>)
 8103ae2:	4293      	cmp	r3, r2
 8103ae4:	d01f      	beq.n	8103b26 <TIM_Base_SetConfig+0x9a>
 8103ae6:	687b      	ldr	r3, [r7, #4]
 8103ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103aec:	d01b      	beq.n	8103b26 <TIM_Base_SetConfig+0x9a>
 8103aee:	687b      	ldr	r3, [r7, #4]
 8103af0:	4a2c      	ldr	r2, [pc, #176]	; (8103ba4 <TIM_Base_SetConfig+0x118>)
 8103af2:	4293      	cmp	r3, r2
 8103af4:	d017      	beq.n	8103b26 <TIM_Base_SetConfig+0x9a>
 8103af6:	687b      	ldr	r3, [r7, #4]
 8103af8:	4a2b      	ldr	r2, [pc, #172]	; (8103ba8 <TIM_Base_SetConfig+0x11c>)
 8103afa:	4293      	cmp	r3, r2
 8103afc:	d013      	beq.n	8103b26 <TIM_Base_SetConfig+0x9a>
 8103afe:	687b      	ldr	r3, [r7, #4]
 8103b00:	4a2a      	ldr	r2, [pc, #168]	; (8103bac <TIM_Base_SetConfig+0x120>)
 8103b02:	4293      	cmp	r3, r2
 8103b04:	d00f      	beq.n	8103b26 <TIM_Base_SetConfig+0x9a>
 8103b06:	687b      	ldr	r3, [r7, #4]
 8103b08:	4a29      	ldr	r2, [pc, #164]	; (8103bb0 <TIM_Base_SetConfig+0x124>)
 8103b0a:	4293      	cmp	r3, r2
 8103b0c:	d00b      	beq.n	8103b26 <TIM_Base_SetConfig+0x9a>
 8103b0e:	687b      	ldr	r3, [r7, #4]
 8103b10:	4a28      	ldr	r2, [pc, #160]	; (8103bb4 <TIM_Base_SetConfig+0x128>)
 8103b12:	4293      	cmp	r3, r2
 8103b14:	d007      	beq.n	8103b26 <TIM_Base_SetConfig+0x9a>
 8103b16:	687b      	ldr	r3, [r7, #4]
 8103b18:	4a27      	ldr	r2, [pc, #156]	; (8103bb8 <TIM_Base_SetConfig+0x12c>)
 8103b1a:	4293      	cmp	r3, r2
 8103b1c:	d003      	beq.n	8103b26 <TIM_Base_SetConfig+0x9a>
 8103b1e:	687b      	ldr	r3, [r7, #4]
 8103b20:	4a26      	ldr	r2, [pc, #152]	; (8103bbc <TIM_Base_SetConfig+0x130>)
 8103b22:	4293      	cmp	r3, r2
 8103b24:	d108      	bne.n	8103b38 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8103b26:	68fb      	ldr	r3, [r7, #12]
 8103b28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8103b2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8103b2e:	683b      	ldr	r3, [r7, #0]
 8103b30:	68db      	ldr	r3, [r3, #12]
 8103b32:	68fa      	ldr	r2, [r7, #12]
 8103b34:	4313      	orrs	r3, r2
 8103b36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8103b38:	68fb      	ldr	r3, [r7, #12]
 8103b3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8103b3e:	683b      	ldr	r3, [r7, #0]
 8103b40:	695b      	ldr	r3, [r3, #20]
 8103b42:	4313      	orrs	r3, r2
 8103b44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8103b46:	687b      	ldr	r3, [r7, #4]
 8103b48:	68fa      	ldr	r2, [r7, #12]
 8103b4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8103b4c:	683b      	ldr	r3, [r7, #0]
 8103b4e:	689a      	ldr	r2, [r3, #8]
 8103b50:	687b      	ldr	r3, [r7, #4]
 8103b52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8103b54:	683b      	ldr	r3, [r7, #0]
 8103b56:	681a      	ldr	r2, [r3, #0]
 8103b58:	687b      	ldr	r3, [r7, #4]
 8103b5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8103b5c:	687b      	ldr	r3, [r7, #4]
 8103b5e:	4a10      	ldr	r2, [pc, #64]	; (8103ba0 <TIM_Base_SetConfig+0x114>)
 8103b60:	4293      	cmp	r3, r2
 8103b62:	d00f      	beq.n	8103b84 <TIM_Base_SetConfig+0xf8>
 8103b64:	687b      	ldr	r3, [r7, #4]
 8103b66:	4a12      	ldr	r2, [pc, #72]	; (8103bb0 <TIM_Base_SetConfig+0x124>)
 8103b68:	4293      	cmp	r3, r2
 8103b6a:	d00b      	beq.n	8103b84 <TIM_Base_SetConfig+0xf8>
 8103b6c:	687b      	ldr	r3, [r7, #4]
 8103b6e:	4a11      	ldr	r2, [pc, #68]	; (8103bb4 <TIM_Base_SetConfig+0x128>)
 8103b70:	4293      	cmp	r3, r2
 8103b72:	d007      	beq.n	8103b84 <TIM_Base_SetConfig+0xf8>
 8103b74:	687b      	ldr	r3, [r7, #4]
 8103b76:	4a10      	ldr	r2, [pc, #64]	; (8103bb8 <TIM_Base_SetConfig+0x12c>)
 8103b78:	4293      	cmp	r3, r2
 8103b7a:	d003      	beq.n	8103b84 <TIM_Base_SetConfig+0xf8>
 8103b7c:	687b      	ldr	r3, [r7, #4]
 8103b7e:	4a0f      	ldr	r2, [pc, #60]	; (8103bbc <TIM_Base_SetConfig+0x130>)
 8103b80:	4293      	cmp	r3, r2
 8103b82:	d103      	bne.n	8103b8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8103b84:	683b      	ldr	r3, [r7, #0]
 8103b86:	691a      	ldr	r2, [r3, #16]
 8103b88:	687b      	ldr	r3, [r7, #4]
 8103b8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8103b8c:	687b      	ldr	r3, [r7, #4]
 8103b8e:	2201      	movs	r2, #1
 8103b90:	615a      	str	r2, [r3, #20]
}
 8103b92:	bf00      	nop
 8103b94:	3714      	adds	r7, #20
 8103b96:	46bd      	mov	sp, r7
 8103b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b9c:	4770      	bx	lr
 8103b9e:	bf00      	nop
 8103ba0:	40010000 	.word	0x40010000
 8103ba4:	40000400 	.word	0x40000400
 8103ba8:	40000800 	.word	0x40000800
 8103bac:	40000c00 	.word	0x40000c00
 8103bb0:	40010400 	.word	0x40010400
 8103bb4:	40014000 	.word	0x40014000
 8103bb8:	40014400 	.word	0x40014400
 8103bbc:	40014800 	.word	0x40014800

08103bc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8103bc0:	b480      	push	{r7}
 8103bc2:	b083      	sub	sp, #12
 8103bc4:	af00      	add	r7, sp, #0
 8103bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8103bc8:	bf00      	nop
 8103bca:	370c      	adds	r7, #12
 8103bcc:	46bd      	mov	sp, r7
 8103bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103bd2:	4770      	bx	lr

08103bd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8103bd4:	b480      	push	{r7}
 8103bd6:	b083      	sub	sp, #12
 8103bd8:	af00      	add	r7, sp, #0
 8103bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8103bdc:	bf00      	nop
 8103bde:	370c      	adds	r7, #12
 8103be0:	46bd      	mov	sp, r7
 8103be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103be6:	4770      	bx	lr

08103be8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8103be8:	b480      	push	{r7}
 8103bea:	b083      	sub	sp, #12
 8103bec:	af00      	add	r7, sp, #0
 8103bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8103bf0:	bf00      	nop
 8103bf2:	370c      	adds	r7, #12
 8103bf4:	46bd      	mov	sp, r7
 8103bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103bfa:	4770      	bx	lr

08103bfc <__libc_init_array>:
 8103bfc:	b570      	push	{r4, r5, r6, lr}
 8103bfe:	4d0d      	ldr	r5, [pc, #52]	; (8103c34 <__libc_init_array+0x38>)
 8103c00:	4c0d      	ldr	r4, [pc, #52]	; (8103c38 <__libc_init_array+0x3c>)
 8103c02:	1b64      	subs	r4, r4, r5
 8103c04:	10a4      	asrs	r4, r4, #2
 8103c06:	2600      	movs	r6, #0
 8103c08:	42a6      	cmp	r6, r4
 8103c0a:	d109      	bne.n	8103c20 <__libc_init_array+0x24>
 8103c0c:	4d0b      	ldr	r5, [pc, #44]	; (8103c3c <__libc_init_array+0x40>)
 8103c0e:	4c0c      	ldr	r4, [pc, #48]	; (8103c40 <__libc_init_array+0x44>)
 8103c10:	f000 f820 	bl	8103c54 <_init>
 8103c14:	1b64      	subs	r4, r4, r5
 8103c16:	10a4      	asrs	r4, r4, #2
 8103c18:	2600      	movs	r6, #0
 8103c1a:	42a6      	cmp	r6, r4
 8103c1c:	d105      	bne.n	8103c2a <__libc_init_array+0x2e>
 8103c1e:	bd70      	pop	{r4, r5, r6, pc}
 8103c20:	f855 3b04 	ldr.w	r3, [r5], #4
 8103c24:	4798      	blx	r3
 8103c26:	3601      	adds	r6, #1
 8103c28:	e7ee      	b.n	8103c08 <__libc_init_array+0xc>
 8103c2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8103c2e:	4798      	blx	r3
 8103c30:	3601      	adds	r6, #1
 8103c32:	e7f2      	b.n	8103c1a <__libc_init_array+0x1e>
 8103c34:	08103c7c 	.word	0x08103c7c
 8103c38:	08103c7c 	.word	0x08103c7c
 8103c3c:	08103c7c 	.word	0x08103c7c
 8103c40:	08103c80 	.word	0x08103c80

08103c44 <memset>:
 8103c44:	4402      	add	r2, r0
 8103c46:	4603      	mov	r3, r0
 8103c48:	4293      	cmp	r3, r2
 8103c4a:	d100      	bne.n	8103c4e <memset+0xa>
 8103c4c:	4770      	bx	lr
 8103c4e:	f803 1b01 	strb.w	r1, [r3], #1
 8103c52:	e7f9      	b.n	8103c48 <memset+0x4>

08103c54 <_init>:
 8103c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8103c56:	bf00      	nop
 8103c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8103c5a:	bc08      	pop	{r3}
 8103c5c:	469e      	mov	lr, r3
 8103c5e:	4770      	bx	lr

08103c60 <_fini>:
 8103c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8103c62:	bf00      	nop
 8103c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8103c66:	bc08      	pop	{r3}
 8103c68:	469e      	mov	lr, r3
 8103c6a:	4770      	bx	lr
