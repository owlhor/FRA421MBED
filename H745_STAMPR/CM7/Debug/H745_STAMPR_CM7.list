
H745_STAMPR_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088c0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fb0  08008b60  08008b60  00018b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb10  0800bb10  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb10  0800bb10  0001bb10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb18  0800bb18  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb18  0800bb18  0001bb18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bb1c  0800bb1c  0001bb1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  24000000  0800bb20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  2400008c  0800bbac  0002008c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000ec  0800bc0c  000200ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000848  2400014c  0800bc6c  0002014c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24000994  0800bc6c  00020994  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c992  00000000  00000000  0002017a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000032a9  00000000  00000000  0003cb0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000012e8  00000000  00000000  0003fdb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001168  00000000  00000000  000410a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003ce8f  00000000  00000000  00042208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001b96e  00000000  00000000  0007f097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0018bbad  00000000  00000000  0009aa05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  002265b2  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000053d8  00000000  00000000  00226604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400014c 	.word	0x2400014c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008b48 	.word	0x08008b48

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000150 	.word	0x24000150
 80002dc:	08008b48 	.word	0x08008b48

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <ili9486_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9486_DisplayOn(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_SLPOUT);    // Exit Sleep
 80007c4:	2011      	movs	r0, #17
 80007c6:	f000 fb35 	bl	8000e34 <LCD_IO_WriteCmd8>
  ILI9486_LCDMUTEX_POP();
  LCD_IO_Bl_OnOff(1);
 80007ca:	2001      	movs	r0, #1
 80007cc:	f000 fa3c 	bl	8000c48 <LCD_IO_Bl_OnOff>
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <ili9486_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9486_GetLcdPixelWidth(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  return ILI9486_SIZE_X;
 80007d8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 80007dc:	4618      	mov	r0, r3
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr

080007e6 <ili9486_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9486_GetLcdPixelHeight(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0
  return ILI9486_SIZE_Y;
 80007ea:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr

080007f8 <ili9486_Init>:
  * @brief  ILI9486 initialization
  * @param  None
  * @retval None
  */
void ili9486_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  if((Is_ili9486_Initialized & ILI9486_LCD_INITIALIZED) == 0)
 80007fc:	4b33      	ldr	r3, [pc, #204]	; (80008cc <ili9486_Init+0xd4>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	f003 0301 	and.w	r3, r3, #1
 8000804:	2b00      	cmp	r3, #0
 8000806:	d115      	bne.n	8000834 <ili9486_Init+0x3c>
  {
    Is_ili9486_Initialized |= ILI9486_LCD_INITIALIZED;
 8000808:	4b30      	ldr	r3, [pc, #192]	; (80008cc <ili9486_Init+0xd4>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	b2da      	uxtb	r2, r3
 8000812:	4b2e      	ldr	r3, [pc, #184]	; (80008cc <ili9486_Init+0xd4>)
 8000814:	701a      	strb	r2, [r3, #0]
    if((Is_ili9486_Initialized & ILI9486_IO_INITIALIZED) == 0)
 8000816:	4b2d      	ldr	r3, [pc, #180]	; (80008cc <ili9486_Init+0xd4>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	f003 0302 	and.w	r3, r3, #2
 800081e:	2b00      	cmp	r3, #0
 8000820:	d101      	bne.n	8000826 <ili9486_Init+0x2e>
      LCD_IO_Init();
 8000822:	f000 fa1d 	bl	8000c60 <LCD_IO_Init>
    Is_ili9486_Initialized |= ILI9486_IO_INITIALIZED;
 8000826:	4b29      	ldr	r3, [pc, #164]	; (80008cc <ili9486_Init+0xd4>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	f043 0302 	orr.w	r3, r3, #2
 800082e:	b2da      	uxtb	r2, r3
 8000830:	4b26      	ldr	r3, [pc, #152]	; (80008cc <ili9486_Init+0xd4>)
 8000832:	701a      	strb	r2, [r3, #0]
  }
  LCD_Delay(10);
 8000834:	200a      	movs	r0, #10
 8000836:	f000 f9fc 	bl	8000c32 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9486_SWRESET);
 800083a:	2001      	movs	r0, #1
 800083c:	f000 fafa 	bl	8000e34 <LCD_IO_WriteCmd8>
  LCD_Delay(100);
 8000840:	2064      	movs	r0, #100	; 0x64
 8000842:	f000 f9f6 	bl	8000c32 <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(ILI9486_RGB_INTERFACE, (uint8_t *)"\x00", 1); // RGB mode off (0xB0)
 8000846:	2201      	movs	r2, #1
 8000848:	4921      	ldr	r1, [pc, #132]	; (80008d0 <ili9486_Init+0xd8>)
 800084a:	20b0      	movs	r0, #176	; 0xb0
 800084c:	f000 ff36 	bl	80016bc <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8(ILI9486_SLPOUT);    // Exit Sleep (0x11)
 8000850:	2011      	movs	r0, #17
 8000852:	f000 faef 	bl	8000e34 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8000856:	200a      	movs	r0, #10
 8000858:	f000 f9eb 	bl	8000c32 <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(ILI9486_PIXFMT, (uint8_t *)"\x55", 1); // interface format (0x3A)
 800085c:	2201      	movs	r2, #1
 800085e:	491d      	ldr	r1, [pc, #116]	; (80008d4 <ili9486_Init+0xdc>)
 8000860:	203a      	movs	r0, #58	; 0x3a
 8000862:	f000 ff2b 	bl	80016bc <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9486_MADCTL); LCD_IO_WriteData8(ILI9486_MAD_DATA_RIGHT_THEN_DOWN);
 8000866:	2036      	movs	r0, #54	; 0x36
 8000868:	f000 fae4 	bl	8000e34 <LCD_IO_WriteCmd8>
 800086c:	2028      	movs	r0, #40	; 0x28
 800086e:	f000 fb8b 	bl	8000f88 <LCD_IO_WriteData8>

  LCD_IO_WriteCmd8MultipleData8(ILI9486_PWCTR3, (uint8_t *)"\x44", 1); // 0xC2
 8000872:	2201      	movs	r2, #1
 8000874:	4918      	ldr	r1, [pc, #96]	; (80008d8 <ili9486_Init+0xe0>)
 8000876:	20c2      	movs	r0, #194	; 0xc2
 8000878:	f000 ff20 	bl	80016bc <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9486_VMCTR1, (uint8_t *)"\x00\x00\x00\x00", 4); // 0xC5
 800087c:	2204      	movs	r2, #4
 800087e:	4917      	ldr	r1, [pc, #92]	; (80008dc <ili9486_Init+0xe4>)
 8000880:	20c5      	movs	r0, #197	; 0xc5
 8000882:	f000 ff1b 	bl	80016bc <LCD_IO_WriteCmd8MultipleData8>

  // positive gamma control (0xE0)
  LCD_IO_WriteCmd8MultipleData8(ILI9486_GMCTRP1, (uint8_t *)"\x0F\x1F\x1C\x0C\x0F\x08\x48\x98\x37\x0A\x13\x04\x11\x0D\x00", 15);
 8000886:	220f      	movs	r2, #15
 8000888:	4915      	ldr	r1, [pc, #84]	; (80008e0 <ili9486_Init+0xe8>)
 800088a:	20e0      	movs	r0, #224	; 0xe0
 800088c:	f000 ff16 	bl	80016bc <LCD_IO_WriteCmd8MultipleData8>

  // negative gamma control (0xE1)
  LCD_IO_WriteCmd8MultipleData8(ILI9486_GMCTRN1, (uint8_t *)"\x0F\x32\x2E\x0B\x0D\x05\x47\x75\x37\x06\x10\x03\x24\x20\x00", 15);
 8000890:	220f      	movs	r2, #15
 8000892:	4914      	ldr	r1, [pc, #80]	; (80008e4 <ili9486_Init+0xec>)
 8000894:	20e1      	movs	r0, #225	; 0xe1
 8000896:	f000 ff11 	bl	80016bc <LCD_IO_WriteCmd8MultipleData8>

  // Digital gamma control1 (0xE2)
  LCD_IO_WriteCmd8MultipleData8(ILI9486_DGCTR1, (uint8_t *)"\x0F\x32\x2E\x0B\x0D\x05\x47\x75\x37\x06\x10\x03\x24\x20\x00", 15);
 800089a:	220f      	movs	r2, #15
 800089c:	4911      	ldr	r1, [pc, #68]	; (80008e4 <ili9486_Init+0xec>)
 800089e:	20e2      	movs	r0, #226	; 0xe2
 80008a0:	f000 ff0c 	bl	80016bc <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9486_NORON);     // Normal display on (0x13)
 80008a4:	2013      	movs	r0, #19
 80008a6:	f000 fac5 	bl	8000e34 <LCD_IO_WriteCmd8>
  LCD_IO_WriteCmd8(ILI9486_INVOFF);    // Display inversion off (0x20)
 80008aa:	2020      	movs	r0, #32
 80008ac:	f000 fac2 	bl	8000e34 <LCD_IO_WriteCmd8>
  LCD_IO_WriteCmd8(ILI9486_SLPOUT);    // Exit Sleep (0x11)
 80008b0:	2011      	movs	r0, #17
 80008b2:	f000 fabf 	bl	8000e34 <LCD_IO_WriteCmd8>
  LCD_Delay(200);
 80008b6:	20c8      	movs	r0, #200	; 0xc8
 80008b8:	f000 f9bb 	bl	8000c32 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9486_DISPON);    // Display on (0x29)
 80008bc:	2029      	movs	r0, #41	; 0x29
 80008be:	f000 fab9 	bl	8000e34 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 80008c2:	200a      	movs	r0, #10
 80008c4:	f000 f9b5 	bl	8000c32 <LCD_Delay>
}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	24000168 	.word	0x24000168
 80008d0:	08008b60 	.word	0x08008b60
 80008d4:	08008b64 	.word	0x08008b64
 80008d8:	08008b68 	.word	0x08008b68
 80008dc:	08008b6c 	.word	0x08008b6c
 80008e0:	08008b74 	.word	0x08008b74
 80008e4:	08008b84 	.word	0x08008b84

080008e8 <ili9486_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9486_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	80fb      	strh	r3, [r7, #6]
 80008f2:	460b      	mov	r3, r1
 80008f4:	80bb      	strh	r3, [r7, #4]
 80008f6:	4613      	mov	r3, r2
 80008f8:	807b      	strh	r3, [r7, #2]
  ILI9486_LCDMUTEX_PUSH();
  ILI9486_SETCURSOR(Xpos, Ypos);
 80008fa:	202a      	movs	r0, #42	; 0x2a
 80008fc:	f000 fa9a 	bl	8000e34 <LCD_IO_WriteCmd8>
 8000900:	88fb      	ldrh	r3, [r7, #6]
 8000902:	0a1b      	lsrs	r3, r3, #8
 8000904:	b29b      	uxth	r3, r3
 8000906:	b2db      	uxtb	r3, r3
 8000908:	4618      	mov	r0, r3
 800090a:	f000 fb3d 	bl	8000f88 <LCD_IO_WriteData8>
 800090e:	88fb      	ldrh	r3, [r7, #6]
 8000910:	b2db      	uxtb	r3, r3
 8000912:	4618      	mov	r0, r3
 8000914:	f000 fb38 	bl	8000f88 <LCD_IO_WriteData8>
 8000918:	88fb      	ldrh	r3, [r7, #6]
 800091a:	0a1b      	lsrs	r3, r3, #8
 800091c:	b29b      	uxth	r3, r3
 800091e:	b2db      	uxtb	r3, r3
 8000920:	4618      	mov	r0, r3
 8000922:	f000 fb31 	bl	8000f88 <LCD_IO_WriteData8>
 8000926:	88fb      	ldrh	r3, [r7, #6]
 8000928:	b2db      	uxtb	r3, r3
 800092a:	4618      	mov	r0, r3
 800092c:	f000 fb2c 	bl	8000f88 <LCD_IO_WriteData8>
 8000930:	202b      	movs	r0, #43	; 0x2b
 8000932:	f000 fa7f 	bl	8000e34 <LCD_IO_WriteCmd8>
 8000936:	88bb      	ldrh	r3, [r7, #4]
 8000938:	0a1b      	lsrs	r3, r3, #8
 800093a:	b29b      	uxth	r3, r3
 800093c:	b2db      	uxtb	r3, r3
 800093e:	4618      	mov	r0, r3
 8000940:	f000 fb22 	bl	8000f88 <LCD_IO_WriteData8>
 8000944:	88bb      	ldrh	r3, [r7, #4]
 8000946:	b2db      	uxtb	r3, r3
 8000948:	4618      	mov	r0, r3
 800094a:	f000 fb1d 	bl	8000f88 <LCD_IO_WriteData8>
 800094e:	88bb      	ldrh	r3, [r7, #4]
 8000950:	0a1b      	lsrs	r3, r3, #8
 8000952:	b29b      	uxth	r3, r3
 8000954:	b2db      	uxtb	r3, r3
 8000956:	4618      	mov	r0, r3
 8000958:	f000 fb16 	bl	8000f88 <LCD_IO_WriteData8>
 800095c:	88bb      	ldrh	r3, [r7, #4]
 800095e:	b2db      	uxtb	r3, r3
 8000960:	4618      	mov	r0, r3
 8000962:	f000 fb11 	bl	8000f88 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_RAMWR); LCD_IO_WriteData16(RGBCode);
 8000966:	202c      	movs	r0, #44	; 0x2c
 8000968:	f000 fa64 	bl	8000e34 <LCD_IO_WriteCmd8>
 800096c:	887b      	ldrh	r3, [r7, #2]
 800096e:	4618      	mov	r0, r3
 8000970:	f000 fbac 	bl	80010cc <LCD_IO_WriteData16>
  ILI9486_LCDMUTEX_POP();
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <ili9486_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9486_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 800097c:	b590      	push	{r4, r7, lr}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	4604      	mov	r4, r0
 8000984:	4608      	mov	r0, r1
 8000986:	4611      	mov	r1, r2
 8000988:	461a      	mov	r2, r3
 800098a:	4623      	mov	r3, r4
 800098c:	80fb      	strh	r3, [r7, #6]
 800098e:	4603      	mov	r3, r0
 8000990:	80bb      	strh	r3, [r7, #4]
 8000992:	460b      	mov	r3, r1
 8000994:	807b      	strh	r3, [r7, #2]
 8000996:	4613      	mov	r3, r2
 8000998:	803b      	strh	r3, [r7, #0]
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Xsize - 1);
 800099a:	202a      	movs	r0, #42	; 0x2a
 800099c:	f000 fa4a 	bl	8000e34 <LCD_IO_WriteCmd8>
 80009a0:	88fb      	ldrh	r3, [r7, #6]
 80009a2:	0a1b      	lsrs	r3, r3, #8
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	4618      	mov	r0, r3
 80009aa:	f000 faed 	bl	8000f88 <LCD_IO_WriteData8>
 80009ae:	88fb      	ldrh	r3, [r7, #6]
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	4618      	mov	r0, r3
 80009b4:	f000 fae8 	bl	8000f88 <LCD_IO_WriteData8>
 80009b8:	88fa      	ldrh	r2, [r7, #6]
 80009ba:	887b      	ldrh	r3, [r7, #2]
 80009bc:	4413      	add	r3, r2
 80009be:	3b01      	subs	r3, #1
 80009c0:	121b      	asrs	r3, r3, #8
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	4618      	mov	r0, r3
 80009c6:	f000 fadf 	bl	8000f88 <LCD_IO_WriteData8>
 80009ca:	88fb      	ldrh	r3, [r7, #6]
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	887b      	ldrh	r3, [r7, #2]
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	4413      	add	r3, r2
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	3b01      	subs	r3, #1
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	4618      	mov	r0, r3
 80009dc:	f000 fad4 	bl	8000f88 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Ysize - 1);
 80009e0:	202b      	movs	r0, #43	; 0x2b
 80009e2:	f000 fa27 	bl	8000e34 <LCD_IO_WriteCmd8>
 80009e6:	88bb      	ldrh	r3, [r7, #4]
 80009e8:	0a1b      	lsrs	r3, r3, #8
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	4618      	mov	r0, r3
 80009f0:	f000 faca 	bl	8000f88 <LCD_IO_WriteData8>
 80009f4:	88bb      	ldrh	r3, [r7, #4]
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	4618      	mov	r0, r3
 80009fa:	f000 fac5 	bl	8000f88 <LCD_IO_WriteData8>
 80009fe:	88ba      	ldrh	r2, [r7, #4]
 8000a00:	883b      	ldrh	r3, [r7, #0]
 8000a02:	4413      	add	r3, r2
 8000a04:	3b01      	subs	r3, #1
 8000a06:	121b      	asrs	r3, r3, #8
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f000 fabc 	bl	8000f88 <LCD_IO_WriteData8>
 8000a10:	88bb      	ldrh	r3, [r7, #4]
 8000a12:	b2da      	uxtb	r2, r3
 8000a14:	883b      	ldrh	r3, [r7, #0]
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	4413      	add	r3, r2
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	3b01      	subs	r3, #1
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	4618      	mov	r0, r3
 8000a22:	f000 fab1 	bl	8000f88 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9486_RAMWR, RGBCode, Xsize * Ysize);
 8000a26:	887b      	ldrh	r3, [r7, #2]
 8000a28:	883a      	ldrh	r2, [r7, #0]
 8000a2a:	fb02 f303 	mul.w	r3, r2, r3
 8000a2e:	461a      	mov	r2, r3
 8000a30:	8b3b      	ldrh	r3, [r7, #24]
 8000a32:	4619      	mov	r1, r3
 8000a34:	202c      	movs	r0, #44	; 0x2c
 8000a36:	f000 fc73 	bl	8001320 <LCD_IO_WriteCmd8DataFill16>
  ILI9486_LCDMUTEX_POP();
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd90      	pop	{r4, r7, pc}

08000a42 <ili9486_WriteChar>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Char background Color
  * @retval None
  */
void ili9486_WriteChar(uint16_t Xpo, uint16_t Ypo, char *chr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 8000a42:	b082      	sub	sp, #8
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08a      	sub	sp, #40	; 0x28
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	603a      	str	r2, [r7, #0]
 8000a4c:	637b      	str	r3, [r7, #52]	; 0x34
 8000a4e:	4603      	mov	r3, r0
 8000a50:	80fb      	strh	r3, [r7, #6]
 8000a52:	460b      	mov	r3, r1
 8000a54:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9486_WriteChar(140, 50, "E", Font24, cl_ORANGE, cl_BLACK);
	 * */
	//// stored font data
	uint32_t hop32 = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t b8[4] = {0};
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
	 * c = i * rowbox -> jump to next column in next i rowloop
	 * k => jump to next row in that column
	 * */

	//// find num of bit rows per jump in fonts.c
	int rowbox = ceilf((float)(fonto.Width) / 8);
 8000a5e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000a60:	ee07 3a90 	vmov	s15, r3
 8000a64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a68:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8000a6c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000a70:	eeb0 0a47 	vmov.f32	s0, s14
 8000a74:	f008 f826 	bl	8008ac4 <ceilf>
 8000a78:	eef0 7a40 	vmov.f32	s15, s0
 8000a7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a80:	ee17 3a90 	vmov	r3, s15
 8000a84:	617b      	str	r3, [r7, #20]

	//// choose MSB check pos for each font size
	//// 0x80 , 0x8000 , 0x 800000
	uint32_t clif_msb = 0x80 << (8 * (rowbox - 1));
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	3b01      	subs	r3, #1
 8000a8a:	00db      	lsls	r3, r3, #3
 8000a8c:	2280      	movs	r2, #128	; 0x80
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	613b      	str	r3, [r7, #16]

	//// [optimiz] stop when write all str / don't continue underframe

	//// -32 to offset sync ASCII Table start " " at 32
	//// double for loop as one char table
	for(int i = 0; i < fonto.Height; i++){
 8000a94:	2300      	movs	r3, #0
 8000a96:	623b      	str	r3, [r7, #32]
 8000a98:	e060      	b.n	8000b5c <ili9486_WriteChar+0x11a>
		//// heigh - 4 to reduce write underframe that contain nothing much, shouldn't
		hop32 = 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61fb      	str	r3, [r7, #28]
 8000aa2:	e024      	b.n	8000aee <ili9486_WriteChar+0xac>
			b8[k] = fonto.table[((int)(*chr - 32) * fonto.Height * rowbox) + (i * rowbox) + k];
 8000aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000aa6:	683a      	ldr	r2, [r7, #0]
 8000aa8:	7812      	ldrb	r2, [r2, #0]
 8000aaa:	3a20      	subs	r2, #32
 8000aac:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 8000aae:	fb01 f202 	mul.w	r2, r1, r2
 8000ab2:	6979      	ldr	r1, [r7, #20]
 8000ab4:	fb02 f101 	mul.w	r1, r2, r1
 8000ab8:	6a3a      	ldr	r2, [r7, #32]
 8000aba:	6978      	ldr	r0, [r7, #20]
 8000abc:	fb00 f202 	mul.w	r2, r0, r2
 8000ac0:	4411      	add	r1, r2
 8000ac2:	69fa      	ldr	r2, [r7, #28]
 8000ac4:	440a      	add	r2, r1
 8000ac6:	4413      	add	r3, r2
 8000ac8:	7819      	ldrb	r1, [r3, #0]
 8000aca:	f107 020c 	add.w	r2, r7, #12
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	460a      	mov	r2, r1
 8000ad4:	701a      	strb	r2, [r3, #0]
			hop32 = (hop32 << 8) + b8[k];
 8000ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad8:	021b      	lsls	r3, r3, #8
 8000ada:	f107 010c 	add.w	r1, r7, #12
 8000ade:	69fa      	ldr	r2, [r7, #28]
 8000ae0:	440a      	add	r2, r1
 8000ae2:	7812      	ldrb	r2, [r2, #0]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	3301      	adds	r3, #1
 8000aec:	61fb      	str	r3, [r7, #28]
 8000aee:	69fa      	ldr	r2, [r7, #28]
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	429a      	cmp	r2, r3
 8000af4:	dbd6      	blt.n	8000aa4 <ili9486_WriteChar+0x62>
		}

		for(int j = 0; j < fonto.Width; j++){
 8000af6:	2300      	movs	r3, #0
 8000af8:	61bb      	str	r3, [r7, #24]
 8000afa:	e027      	b.n	8000b4c <ili9486_WriteChar+0x10a>
			//// if valuein fonttable is 1
			if((hop32 << j) & clif_msb){ // buu32.b32
 8000afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000afe:	69bb      	ldr	r3, [r7, #24]
 8000b00:	409a      	lsls	r2, r3
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	4013      	ands	r3, r2
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d00e      	beq.n	8000b28 <ili9486_WriteChar+0xe6>
				ili9486_WritePixel(Xpo + j, Ypo + i, RGB_Coder);
 8000b0a:	69bb      	ldr	r3, [r7, #24]
 8000b0c:	b29a      	uxth	r2, r3
 8000b0e:	88fb      	ldrh	r3, [r7, #6]
 8000b10:	4413      	add	r3, r2
 8000b12:	b298      	uxth	r0, r3
 8000b14:	6a3b      	ldr	r3, [r7, #32]
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	88bb      	ldrh	r3, [r7, #4]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8000b20:	4619      	mov	r1, r3
 8000b22:	f7ff fee1 	bl	80008e8 <ili9486_WritePixel>
 8000b26:	e00e      	b.n	8000b46 <ili9486_WriteChar+0x104>
			}
			//// for background write
			else{
				ili9486_WritePixel(Xpo + j, Ypo + i, RGB_bg);
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	b29a      	uxth	r2, r3
 8000b2c:	88fb      	ldrh	r3, [r7, #6]
 8000b2e:	4413      	add	r3, r2
 8000b30:	b298      	uxth	r0, r3
 8000b32:	6a3b      	ldr	r3, [r7, #32]
 8000b34:	b29a      	uxth	r2, r3
 8000b36:	88bb      	ldrh	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8000b40:	4619      	mov	r1, r3
 8000b42:	f7ff fed1 	bl	80008e8 <ili9486_WritePixel>
		for(int j = 0; j < fonto.Width; j++){
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	61bb      	str	r3, [r7, #24]
 8000b4c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000b4e:	461a      	mov	r2, r3
 8000b50:	69bb      	ldr	r3, [r7, #24]
 8000b52:	4293      	cmp	r3, r2
 8000b54:	dbd2      	blt.n	8000afc <ili9486_WriteChar+0xba>
	for(int i = 0; i < fonto.Height; i++){
 8000b56:	6a3b      	ldr	r3, [r7, #32]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	623b      	str	r3, [r7, #32]
 8000b5c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000b5e:	461a      	mov	r2, r3
 8000b60:	6a3b      	ldr	r3, [r7, #32]
 8000b62:	4293      	cmp	r3, r2
 8000b64:	db99      	blt.n	8000a9a <ili9486_WriteChar+0x58>
			}

		}
	}
}
 8000b66:	bf00      	nop
 8000b68:	bf00      	nop
 8000b6a:	3728      	adds	r7, #40	; 0x28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b72:	b002      	add	sp, #8
 8000b74:	4770      	bx	lr

08000b76 <ili9486_WriteString>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Text background Color
  * @retval None
  */
void ili9486_WriteString(uint16_t Xpo, uint16_t Ypo,const char* strr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 8000b76:	b082      	sub	sp, #8
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b088      	sub	sp, #32
 8000b7c:	af04      	add	r7, sp, #16
 8000b7e:	603a      	str	r2, [r7, #0]
 8000b80:	61fb      	str	r3, [r7, #28]
 8000b82:	4603      	mov	r3, r0
 8000b84:	80fb      	strh	r3, [r7, #6]
 8000b86:	460b      	mov	r3, r1
 8000b88:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9486_WriteString(20, 300, "Helios xTerra", Font20, cl_WHITE, cl_BLACK);
	 * */
	uint16_t ili_heigh = ili9486_GetLcdPixelHeight();
 8000b8a:	f7ff fe2c 	bl	80007e6 <ili9486_GetLcdPixelHeight>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	81fb      	strh	r3, [r7, #14]
	uint16_t ili_width = ili9486_GetLcdPixelWidth();
 8000b92:	f7ff fe1f 	bl	80007d4 <ili9486_GetLcdPixelWidth>
 8000b96:	4603      	mov	r3, r0
 8000b98:	81bb      	strh	r3, [r7, #12]
	while(*strr){
 8000b9a:	e02c      	b.n	8000bf6 <ili9486_WriteString+0x80>
	//// Check screen overflow / new line
		if(Xpo + fonto.Width >= ili_width){
 8000b9c:	88fb      	ldrh	r3, [r7, #6]
 8000b9e:	8c3a      	ldrh	r2, [r7, #32]
 8000ba0:	441a      	add	r2, r3
 8000ba2:	89bb      	ldrh	r3, [r7, #12]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	db13      	blt.n	8000bd0 <ili9486_WriteString+0x5a>
			Xpo = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	80fb      	strh	r3, [r7, #6]
			Ypo += fonto.Height;
 8000bac:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000bae:	88bb      	ldrh	r3, [r7, #4]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	80bb      	strh	r3, [r7, #4]

			if(Ypo + fonto.Height >= ili_heigh){
 8000bb4:	88bb      	ldrh	r3, [r7, #4]
 8000bb6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000bb8:	441a      	add	r2, r3
 8000bba:	89fb      	ldrh	r3, [r7, #14]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	da1f      	bge.n	8000c00 <ili9486_WriteString+0x8a>
				break;
			}

			if(*strr == ' ') {
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2b20      	cmp	r3, #32
 8000bc6:	d103      	bne.n	8000bd0 <ili9486_WriteString+0x5a>
				// skip spaces in the beginning of the new line
				strr++;
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	603b      	str	r3, [r7, #0]
				continue;
 8000bce:	e012      	b.n	8000bf6 <ili9486_WriteString+0x80>
			}
		}
		//ST7735_WriteChar(x, y, *str, font, color, bgcolor);
		ili9486_WriteChar(Xpo, Ypo, strr, fonto, RGB_Coder, RGB_bg);
 8000bd0:	88b9      	ldrh	r1, [r7, #4]
 8000bd2:	88f8      	ldrh	r0, [r7, #6]
 8000bd4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000bd6:	9302      	str	r3, [sp, #8]
 8000bd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000bda:	9301      	str	r3, [sp, #4]
 8000bdc:	6a3b      	ldr	r3, [r7, #32]
 8000bde:	9300      	str	r3, [sp, #0]
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	683a      	ldr	r2, [r7, #0]
 8000be4:	f7ff ff2d 	bl	8000a42 <ili9486_WriteChar>
		Xpo += fonto.Width;
 8000be8:	8c3a      	ldrh	r2, [r7, #32]
 8000bea:	88fb      	ldrh	r3, [r7, #6]
 8000bec:	4413      	add	r3, r2
 8000bee:	80fb      	strh	r3, [r7, #6]
		strr++;
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	603b      	str	r3, [r7, #0]
	while(*strr){
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d1ce      	bne.n	8000b9c <ili9486_WriteString+0x26>
	}
}
 8000bfe:	e000      	b.n	8000c02 <ili9486_WriteString+0x8c>
				break;
 8000c00:	bf00      	nop
}
 8000c02:	bf00      	nop
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c0c:	b002      	add	sp, #8
 8000c0e:	4770      	bx	lr

08000c10 <LCD_IO_Delay>:
#elif   defined(__CC_ARM)
#pragma push
#pragma O0
#endif
void LCD_IO_Delay(uint32_t c)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  while(c--);
 8000c18:	bf00      	nop
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	1e5a      	subs	r2, r3, #1
 8000c1e:	607a      	str	r2, [r7, #4]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d1fa      	bne.n	8000c1a <LCD_IO_Delay+0xa>
}
 8000c24:	bf00      	nop
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <LCD_Delay>:
#pragma pop
#endif

//-----------------------------------------------------------------------------
void LCD_Delay(uint32_t Delay)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f001 fcc0 	bl	80025c0 <HAL_Delay>
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
    GPIOX_CLR(LCD_BL);
  else
    GPIOX_SET(LCD_BL);
  #endif
  #endif
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
	...

08000c60 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  #define GPIOX_CLOCK_LCD_RD    GPIOX_CLOCK(LCD_RD)
  #else
  #define GPIOX_CLOCK_LCD_RD    0
  #endif

  RCC->AHB4ENR |= (GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_WR) |
 8000c64:	4b6c      	ldr	r3, [pc, #432]	; (8000e18 <LCD_IO_Init+0x1b8>)
 8000c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6a:	4a6b      	ldr	r2, [pc, #428]	; (8000e18 <LCD_IO_Init+0x1b8>)
 8000c6c:	f043 035f 	orr.w	r3, r3, #95	; 0x5f
 8000c70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
                   GPIOX_CLOCK(LCD_D0) | GPIOX_CLOCK(LCD_D1) | GPIOX_CLOCK(LCD_D2) | GPIOX_CLOCK(LCD_D3) |
                   GPIOX_CLOCK(LCD_D4) | GPIOX_CLOCK(LCD_D5) | GPIOX_CLOCK(LCD_D6) | GPIOX_CLOCK(LCD_D7) |
                   GPIOX_CLOCK_LCD_RST | GPIOX_CLOCK_LCD_BL  | GPIOX_CLOCK_LCD_RD);

  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  LCD_RST_OFF;                          /* RST = 1 */
 8000c74:	4b69      	ldr	r3, [pc, #420]	; (8000e1c <LCD_IO_Init+0x1bc>)
 8000c76:	2204      	movs	r2, #4
 8000c78:	619a      	str	r2, [r3, #24]
  GPIOX_MODER(MODE_OUT, LCD_RST);
 8000c7a:	4b68      	ldr	r3, [pc, #416]	; (8000e1c <LCD_IO_Init+0x1bc>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000c82:	4a66      	ldr	r2, [pc, #408]	; (8000e1c <LCD_IO_Init+0x1bc>)
 8000c84:	f043 0310 	orr.w	r3, r3, #16
 8000c88:	6013      	str	r3, [r2, #0]
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  GPIOX_ODR(LCD_BL) = LCD_BLON;
  GPIOX_MODER(MODE_OUT, LCD_BL);
  #endif

  GPIOX_SET(LCD_CS);                    /* CS = 1 */
 8000c8a:	4b65      	ldr	r3, [pc, #404]	; (8000e20 <LCD_IO_Init+0x1c0>)
 8000c8c:	2202      	movs	r2, #2
 8000c8e:	619a      	str	r2, [r3, #24]
  LCD_RS_DATA;                          /* RS = 1 */
 8000c90:	4b62      	ldr	r3, [pc, #392]	; (8000e1c <LCD_IO_Init+0x1bc>)
 8000c92:	2208      	movs	r2, #8
 8000c94:	619a      	str	r2, [r3, #24]
  GPIOX_SET(LCD_WR);                    /* WR = 1 */
 8000c96:	4b61      	ldr	r3, [pc, #388]	; (8000e1c <LCD_IO_Init+0x1bc>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	619a      	str	r2, [r3, #24]
  #if GPIOX_PORTNUM(LCD_RD) >=  GPIOX_PORTNUM_A
  GPIOX_SET(LCD_RD);                    /* RD = 1 */
 8000c9c:	4b61      	ldr	r3, [pc, #388]	; (8000e24 <LCD_IO_Init+0x1c4>)
 8000c9e:	2208      	movs	r2, #8
 8000ca0:	619a      	str	r2, [r3, #24]
  #endif

  GPIOX_MODER(MODE_OUT, LCD_CS);
 8000ca2:	4b5f      	ldr	r3, [pc, #380]	; (8000e20 <LCD_IO_Init+0x1c0>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f023 030c 	bic.w	r3, r3, #12
 8000caa:	4a5d      	ldr	r2, [pc, #372]	; (8000e20 <LCD_IO_Init+0x1c0>)
 8000cac:	f043 0304 	orr.w	r3, r3, #4
 8000cb0:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_RS);
 8000cb2:	4b5a      	ldr	r3, [pc, #360]	; (8000e1c <LCD_IO_Init+0x1bc>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000cba:	4a58      	ldr	r2, [pc, #352]	; (8000e1c <LCD_IO_Init+0x1bc>)
 8000cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cc0:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_WR);
 8000cc2:	4b56      	ldr	r3, [pc, #344]	; (8000e1c <LCD_IO_Init+0x1bc>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f023 0303 	bic.w	r3, r3, #3
 8000cca:	4a54      	ldr	r2, [pc, #336]	; (8000e1c <LCD_IO_Init+0x1bc>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	6013      	str	r3, [r2, #0]
  #if GPIOX_PORTNUM(LCD_RD) >=  GPIOX_PORTNUM_A
  GPIOX_MODER(MODE_OUT, LCD_RD);
 8000cd2:	4b54      	ldr	r3, [pc, #336]	; (8000e24 <LCD_IO_Init+0x1c4>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000cda:	4a52      	ldr	r2, [pc, #328]	; (8000e24 <LCD_IO_Init+0x1c4>)
 8000cdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ce0:	6013      	str	r3, [r2, #0]
  #endif

  LCD_DIRWRITE;                         /* data pins set the output direction */
 8000ce2:	4b51      	ldr	r3, [pc, #324]	; (8000e28 <LCD_IO_Init+0x1c8>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000cea:	4a4f      	ldr	r2, [pc, #316]	; (8000e28 <LCD_IO_Init+0x1c8>)
 8000cec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cf0:	6013      	str	r3, [r2, #0]
 8000cf2:	4b4e      	ldr	r3, [pc, #312]	; (8000e2c <LCD_IO_Init+0x1cc>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000cfa:	4a4c      	ldr	r2, [pc, #304]	; (8000e2c <LCD_IO_Init+0x1cc>)
 8000cfc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000d00:	6013      	str	r3, [r2, #0]
 8000d02:	4b49      	ldr	r3, [pc, #292]	; (8000e28 <LCD_IO_Init+0x1c8>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000d0a:	4a47      	ldr	r2, [pc, #284]	; (8000e28 <LCD_IO_Init+0x1c8>)
 8000d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d10:	6013      	str	r3, [r2, #0]
 8000d12:	4b47      	ldr	r3, [pc, #284]	; (8000e30 <LCD_IO_Init+0x1d0>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000d1a:	4a45      	ldr	r2, [pc, #276]	; (8000e30 <LCD_IO_Init+0x1d0>)
 8000d1c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d20:	6013      	str	r3, [r2, #0]
 8000d22:	4b43      	ldr	r3, [pc, #268]	; (8000e30 <LCD_IO_Init+0x1d0>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000d2a:	4a41      	ldr	r2, [pc, #260]	; (8000e30 <LCD_IO_Init+0x1d0>)
 8000d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d30:	6013      	str	r3, [r2, #0]
 8000d32:	4b3f      	ldr	r3, [pc, #252]	; (8000e30 <LCD_IO_Init+0x1d0>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000d3a:	4a3d      	ldr	r2, [pc, #244]	; (8000e30 <LCD_IO_Init+0x1d0>)
 8000d3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d40:	6013      	str	r3, [r2, #0]
 8000d42:	4b38      	ldr	r3, [pc, #224]	; (8000e24 <LCD_IO_Init+0x1c4>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000d4a:	4a36      	ldr	r2, [pc, #216]	; (8000e24 <LCD_IO_Init+0x1c4>)
 8000d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d50:	6013      	str	r3, [r2, #0]
 8000d52:	4b35      	ldr	r3, [pc, #212]	; (8000e28 <LCD_IO_Init+0x1c8>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000d5a:	4a33      	ldr	r2, [pc, #204]	; (8000e28 <LCD_IO_Init+0x1c8>)
 8000d5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d60:	6013      	str	r3, [r2, #0]

  /* GPIO speed */
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_CS);
 8000d62:	4b2f      	ldr	r3, [pc, #188]	; (8000e20 <LCD_IO_Init+0x1c0>)
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	4a2e      	ldr	r2, [pc, #184]	; (8000e20 <LCD_IO_Init+0x1c0>)
 8000d68:	f043 030c 	orr.w	r3, r3, #12
 8000d6c:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RS);
 8000d6e:	4b2b      	ldr	r3, [pc, #172]	; (8000e1c <LCD_IO_Init+0x1bc>)
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	4a2a      	ldr	r2, [pc, #168]	; (8000e1c <LCD_IO_Init+0x1bc>)
 8000d74:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000d78:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_WR);
 8000d7a:	4b28      	ldr	r3, [pc, #160]	; (8000e1c <LCD_IO_Init+0x1bc>)
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	4a27      	ldr	r2, [pc, #156]	; (8000e1c <LCD_IO_Init+0x1bc>)
 8000d80:	f043 0303 	orr.w	r3, r3, #3
 8000d84:	6093      	str	r3, [r2, #8]
  #if GPIOX_PORTNUM(LCD_RD) >=  GPIOX_PORTNUM_A
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RD);
 8000d86:	4b27      	ldr	r3, [pc, #156]	; (8000e24 <LCD_IO_Init+0x1c4>)
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	4a26      	ldr	r2, [pc, #152]	; (8000e24 <LCD_IO_Init+0x1c4>)
 8000d8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000d90:	6093      	str	r3, [r2, #8]
  #endif
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D0);
 8000d92:	4b25      	ldr	r3, [pc, #148]	; (8000e28 <LCD_IO_Init+0x1c8>)
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	4a24      	ldr	r2, [pc, #144]	; (8000e28 <LCD_IO_Init+0x1c8>)
 8000d98:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8000d9c:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D1);
 8000d9e:	4b23      	ldr	r3, [pc, #140]	; (8000e2c <LCD_IO_Init+0x1cc>)
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	4a22      	ldr	r2, [pc, #136]	; (8000e2c <LCD_IO_Init+0x1cc>)
 8000da4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000da8:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D2);
 8000daa:	4b1f      	ldr	r3, [pc, #124]	; (8000e28 <LCD_IO_Init+0x1c8>)
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	4a1e      	ldr	r2, [pc, #120]	; (8000e28 <LCD_IO_Init+0x1c8>)
 8000db0:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8000db4:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D3);
 8000db6:	4b1e      	ldr	r3, [pc, #120]	; (8000e30 <LCD_IO_Init+0x1d0>)
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	4a1d      	ldr	r2, [pc, #116]	; (8000e30 <LCD_IO_Init+0x1d0>)
 8000dbc:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 8000dc0:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D4);
 8000dc2:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <LCD_IO_Init+0x1d0>)
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	4a1a      	ldr	r2, [pc, #104]	; (8000e30 <LCD_IO_Init+0x1d0>)
 8000dc8:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8000dcc:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D5);
 8000dce:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <LCD_IO_Init+0x1d0>)
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	4a17      	ldr	r2, [pc, #92]	; (8000e30 <LCD_IO_Init+0x1d0>)
 8000dd4:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8000dd8:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D6);
 8000dda:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <LCD_IO_Init+0x1c4>)
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	4a11      	ldr	r2, [pc, #68]	; (8000e24 <LCD_IO_Init+0x1c4>)
 8000de0:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000de4:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D7);
 8000de6:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <LCD_IO_Init+0x1c8>)
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	4a0f      	ldr	r2, [pc, #60]	; (8000e28 <LCD_IO_Init+0x1c8>)
 8000dec:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8000df0:	6093      	str	r3, [r2, #8]

  /* Reset the LCD */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  LCD_Delay(1);
 8000df2:	2001      	movs	r0, #1
 8000df4:	f7ff ff1d 	bl	8000c32 <LCD_Delay>
  LCD_RST_ON;                           /* RST = 0 */
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <LCD_IO_Init+0x1bc>)
 8000dfa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000dfe:	619a      	str	r2, [r3, #24]
  LCD_Delay(1);
 8000e00:	2001      	movs	r0, #1
 8000e02:	f7ff ff16 	bl	8000c32 <LCD_Delay>
  LCD_RST_OFF;                          /* RST = 1 */
 8000e06:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <LCD_IO_Init+0x1bc>)
 8000e08:	2204      	movs	r2, #4
 8000e0a:	619a      	str	r2, [r3, #24]
  #endif
  LCD_Delay(1);
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	f7ff ff10 	bl	8000c32 <LCD_Delay>
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	58024400 	.word	0x58024400
 8000e1c:	58020800 	.word	0x58020800
 8000e20:	58020400 	.word	0x58020400
 8000e24:	58020000 	.word	0x58020000
 8000e28:	58021800 	.word	0x58021800
 8000e2c:	58020c00 	.word	0x58020c00
 8000e30:	58021000 	.word	0x58021000

08000e34 <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	71fb      	strb	r3, [r7, #7]
  LCD_CS_ON;
 8000e3e:	4b4b      	ldr	r3, [pc, #300]	; (8000f6c <LCD_IO_WriteCmd8+0x138>)
 8000e40:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e44:	619a      	str	r2, [r3, #24]
  LCD_CMD8_WRITE(Cmd);
 8000e46:	4b4a      	ldr	r3, [pc, #296]	; (8000f70 <LCD_IO_WriteCmd8+0x13c>)
 8000e48:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e4c:	619a      	str	r2, [r3, #24]
 8000e4e:	4a49      	ldr	r2, [pc, #292]	; (8000f74 <LCD_IO_WriteCmd8+0x140>)
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	7013      	strb	r3, [r2, #0]
 8000e54:	4b47      	ldr	r3, [pc, #284]	; (8000f74 <LCD_IO_WriteCmd8+0x140>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	f003 0301 	and.w	r3, r3, #1
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d004      	beq.n	8000e6a <LCD_IO_WriteCmd8+0x36>
 8000e60:	4b45      	ldr	r3, [pc, #276]	; (8000f78 <LCD_IO_WriteCmd8+0x144>)
 8000e62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e66:	619a      	str	r2, [r3, #24]
 8000e68:	e003      	b.n	8000e72 <LCD_IO_WriteCmd8+0x3e>
 8000e6a:	4b43      	ldr	r3, [pc, #268]	; (8000f78 <LCD_IO_WriteCmd8+0x144>)
 8000e6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000e70:	619a      	str	r2, [r3, #24]
 8000e72:	4b40      	ldr	r3, [pc, #256]	; (8000f74 <LCD_IO_WriteCmd8+0x140>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	f003 0302 	and.w	r3, r3, #2
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d004      	beq.n	8000e88 <LCD_IO_WriteCmd8+0x54>
 8000e7e:	4b3f      	ldr	r3, [pc, #252]	; (8000f7c <LCD_IO_WriteCmd8+0x148>)
 8000e80:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e84:	619a      	str	r2, [r3, #24]
 8000e86:	e003      	b.n	8000e90 <LCD_IO_WriteCmd8+0x5c>
 8000e88:	4b3c      	ldr	r3, [pc, #240]	; (8000f7c <LCD_IO_WriteCmd8+0x148>)
 8000e8a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000e8e:	619a      	str	r2, [r3, #24]
 8000e90:	4b38      	ldr	r3, [pc, #224]	; (8000f74 <LCD_IO_WriteCmd8+0x140>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	f003 0304 	and.w	r3, r3, #4
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d004      	beq.n	8000ea6 <LCD_IO_WriteCmd8+0x72>
 8000e9c:	4b36      	ldr	r3, [pc, #216]	; (8000f78 <LCD_IO_WriteCmd8+0x144>)
 8000e9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ea2:	619a      	str	r2, [r3, #24]
 8000ea4:	e003      	b.n	8000eae <LCD_IO_WriteCmd8+0x7a>
 8000ea6:	4b34      	ldr	r3, [pc, #208]	; (8000f78 <LCD_IO_WriteCmd8+0x144>)
 8000ea8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eac:	619a      	str	r2, [r3, #24]
 8000eae:	4b31      	ldr	r3, [pc, #196]	; (8000f74 <LCD_IO_WriteCmd8+0x140>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	f003 0308 	and.w	r3, r3, #8
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d004      	beq.n	8000ec4 <LCD_IO_WriteCmd8+0x90>
 8000eba:	4b31      	ldr	r3, [pc, #196]	; (8000f80 <LCD_IO_WriteCmd8+0x14c>)
 8000ebc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ec0:	619a      	str	r2, [r3, #24]
 8000ec2:	e003      	b.n	8000ecc <LCD_IO_WriteCmd8+0x98>
 8000ec4:	4b2e      	ldr	r3, [pc, #184]	; (8000f80 <LCD_IO_WriteCmd8+0x14c>)
 8000ec6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000eca:	619a      	str	r2, [r3, #24]
 8000ecc:	4b29      	ldr	r3, [pc, #164]	; (8000f74 <LCD_IO_WriteCmd8+0x140>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	f003 0310 	and.w	r3, r3, #16
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d004      	beq.n	8000ee2 <LCD_IO_WriteCmd8+0xae>
 8000ed8:	4b29      	ldr	r3, [pc, #164]	; (8000f80 <LCD_IO_WriteCmd8+0x14c>)
 8000eda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ede:	619a      	str	r2, [r3, #24]
 8000ee0:	e003      	b.n	8000eea <LCD_IO_WriteCmd8+0xb6>
 8000ee2:	4b27      	ldr	r3, [pc, #156]	; (8000f80 <LCD_IO_WriteCmd8+0x14c>)
 8000ee4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ee8:	619a      	str	r2, [r3, #24]
 8000eea:	4b22      	ldr	r3, [pc, #136]	; (8000f74 <LCD_IO_WriteCmd8+0x140>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	f003 0320 	and.w	r3, r3, #32
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d004      	beq.n	8000f00 <LCD_IO_WriteCmd8+0xcc>
 8000ef6:	4b22      	ldr	r3, [pc, #136]	; (8000f80 <LCD_IO_WriteCmd8+0x14c>)
 8000ef8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000efc:	619a      	str	r2, [r3, #24]
 8000efe:	e003      	b.n	8000f08 <LCD_IO_WriteCmd8+0xd4>
 8000f00:	4b1f      	ldr	r3, [pc, #124]	; (8000f80 <LCD_IO_WriteCmd8+0x14c>)
 8000f02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f06:	619a      	str	r2, [r3, #24]
 8000f08:	4b1a      	ldr	r3, [pc, #104]	; (8000f74 <LCD_IO_WriteCmd8+0x140>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d004      	beq.n	8000f1e <LCD_IO_WriteCmd8+0xea>
 8000f14:	4b1b      	ldr	r3, [pc, #108]	; (8000f84 <LCD_IO_WriteCmd8+0x150>)
 8000f16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f1a:	619a      	str	r2, [r3, #24]
 8000f1c:	e003      	b.n	8000f26 <LCD_IO_WriteCmd8+0xf2>
 8000f1e:	4b19      	ldr	r3, [pc, #100]	; (8000f84 <LCD_IO_WriteCmd8+0x150>)
 8000f20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f24:	619a      	str	r2, [r3, #24]
 8000f26:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <LCD_IO_WriteCmd8+0x140>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	b25b      	sxtb	r3, r3
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	da04      	bge.n	8000f3a <LCD_IO_WriteCmd8+0x106>
 8000f30:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <LCD_IO_WriteCmd8+0x144>)
 8000f32:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f36:	619a      	str	r2, [r3, #24]
 8000f38:	e003      	b.n	8000f42 <LCD_IO_WriteCmd8+0x10e>
 8000f3a:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <LCD_IO_WriteCmd8+0x144>)
 8000f3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f40:	619a      	str	r2, [r3, #24]
 8000f42:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <LCD_IO_WriteCmd8+0x13c>)
 8000f44:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f48:	619a      	str	r2, [r3, #24]
 8000f4a:	2008      	movs	r0, #8
 8000f4c:	f7ff fe60 	bl	8000c10 <LCD_IO_Delay>
 8000f50:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <LCD_IO_WriteCmd8+0x13c>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	619a      	str	r2, [r3, #24]
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <LCD_IO_WriteCmd8+0x13c>)
 8000f58:	2208      	movs	r2, #8
 8000f5a:	619a      	str	r2, [r3, #24]
  LCD_CS_OFF;
 8000f5c:	4b03      	ldr	r3, [pc, #12]	; (8000f6c <LCD_IO_WriteCmd8+0x138>)
 8000f5e:	2202      	movs	r2, #2
 8000f60:	619a      	str	r2, [r3, #24]
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	58020400 	.word	0x58020400
 8000f70:	58020800 	.word	0x58020800
 8000f74:	24000169 	.word	0x24000169
 8000f78:	58021800 	.word	0x58021800
 8000f7c:	58020c00 	.word	0x58020c00
 8000f80:	58021000 	.word	0x58021000
 8000f84:	58020000 	.word	0x58020000

08000f88 <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
  LCD_CS_ON;
 8000f92:	4b47      	ldr	r3, [pc, #284]	; (80010b0 <LCD_IO_WriteData8+0x128>)
 8000f94:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f98:	619a      	str	r2, [r3, #24]
  LCD_DATA8_WRITE(Data);
 8000f9a:	4a46      	ldr	r2, [pc, #280]	; (80010b4 <LCD_IO_WriteData8+0x12c>)
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	7013      	strb	r3, [r2, #0]
 8000fa0:	4b44      	ldr	r3, [pc, #272]	; (80010b4 <LCD_IO_WriteData8+0x12c>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d004      	beq.n	8000fb6 <LCD_IO_WriteData8+0x2e>
 8000fac:	4b42      	ldr	r3, [pc, #264]	; (80010b8 <LCD_IO_WriteData8+0x130>)
 8000fae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fb2:	619a      	str	r2, [r3, #24]
 8000fb4:	e003      	b.n	8000fbe <LCD_IO_WriteData8+0x36>
 8000fb6:	4b40      	ldr	r3, [pc, #256]	; (80010b8 <LCD_IO_WriteData8+0x130>)
 8000fb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000fbc:	619a      	str	r2, [r3, #24]
 8000fbe:	4b3d      	ldr	r3, [pc, #244]	; (80010b4 <LCD_IO_WriteData8+0x12c>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	f003 0302 	and.w	r3, r3, #2
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d004      	beq.n	8000fd4 <LCD_IO_WriteData8+0x4c>
 8000fca:	4b3c      	ldr	r3, [pc, #240]	; (80010bc <LCD_IO_WriteData8+0x134>)
 8000fcc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000fd0:	619a      	str	r2, [r3, #24]
 8000fd2:	e003      	b.n	8000fdc <LCD_IO_WriteData8+0x54>
 8000fd4:	4b39      	ldr	r3, [pc, #228]	; (80010bc <LCD_IO_WriteData8+0x134>)
 8000fd6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000fda:	619a      	str	r2, [r3, #24]
 8000fdc:	4b35      	ldr	r3, [pc, #212]	; (80010b4 <LCD_IO_WriteData8+0x12c>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	f003 0304 	and.w	r3, r3, #4
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d004      	beq.n	8000ff2 <LCD_IO_WriteData8+0x6a>
 8000fe8:	4b33      	ldr	r3, [pc, #204]	; (80010b8 <LCD_IO_WriteData8+0x130>)
 8000fea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fee:	619a      	str	r2, [r3, #24]
 8000ff0:	e003      	b.n	8000ffa <LCD_IO_WriteData8+0x72>
 8000ff2:	4b31      	ldr	r3, [pc, #196]	; (80010b8 <LCD_IO_WriteData8+0x130>)
 8000ff4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ff8:	619a      	str	r2, [r3, #24]
 8000ffa:	4b2e      	ldr	r3, [pc, #184]	; (80010b4 <LCD_IO_WriteData8+0x12c>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	f003 0308 	and.w	r3, r3, #8
 8001002:	2b00      	cmp	r3, #0
 8001004:	d004      	beq.n	8001010 <LCD_IO_WriteData8+0x88>
 8001006:	4b2e      	ldr	r3, [pc, #184]	; (80010c0 <LCD_IO_WriteData8+0x138>)
 8001008:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800100c:	619a      	str	r2, [r3, #24]
 800100e:	e003      	b.n	8001018 <LCD_IO_WriteData8+0x90>
 8001010:	4b2b      	ldr	r3, [pc, #172]	; (80010c0 <LCD_IO_WriteData8+0x138>)
 8001012:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001016:	619a      	str	r2, [r3, #24]
 8001018:	4b26      	ldr	r3, [pc, #152]	; (80010b4 <LCD_IO_WriteData8+0x12c>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	f003 0310 	and.w	r3, r3, #16
 8001020:	2b00      	cmp	r3, #0
 8001022:	d004      	beq.n	800102e <LCD_IO_WriteData8+0xa6>
 8001024:	4b26      	ldr	r3, [pc, #152]	; (80010c0 <LCD_IO_WriteData8+0x138>)
 8001026:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800102a:	619a      	str	r2, [r3, #24]
 800102c:	e003      	b.n	8001036 <LCD_IO_WriteData8+0xae>
 800102e:	4b24      	ldr	r3, [pc, #144]	; (80010c0 <LCD_IO_WriteData8+0x138>)
 8001030:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001034:	619a      	str	r2, [r3, #24]
 8001036:	4b1f      	ldr	r3, [pc, #124]	; (80010b4 <LCD_IO_WriteData8+0x12c>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	f003 0320 	and.w	r3, r3, #32
 800103e:	2b00      	cmp	r3, #0
 8001040:	d004      	beq.n	800104c <LCD_IO_WriteData8+0xc4>
 8001042:	4b1f      	ldr	r3, [pc, #124]	; (80010c0 <LCD_IO_WriteData8+0x138>)
 8001044:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001048:	619a      	str	r2, [r3, #24]
 800104a:	e003      	b.n	8001054 <LCD_IO_WriteData8+0xcc>
 800104c:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <LCD_IO_WriteData8+0x138>)
 800104e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001052:	619a      	str	r2, [r3, #24]
 8001054:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <LCD_IO_WriteData8+0x12c>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800105c:	2b00      	cmp	r3, #0
 800105e:	d004      	beq.n	800106a <LCD_IO_WriteData8+0xe2>
 8001060:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <LCD_IO_WriteData8+0x13c>)
 8001062:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001066:	619a      	str	r2, [r3, #24]
 8001068:	e003      	b.n	8001072 <LCD_IO_WriteData8+0xea>
 800106a:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <LCD_IO_WriteData8+0x13c>)
 800106c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001070:	619a      	str	r2, [r3, #24]
 8001072:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <LCD_IO_WriteData8+0x12c>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	b25b      	sxtb	r3, r3
 8001078:	2b00      	cmp	r3, #0
 800107a:	da04      	bge.n	8001086 <LCD_IO_WriteData8+0xfe>
 800107c:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <LCD_IO_WriteData8+0x130>)
 800107e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001082:	619a      	str	r2, [r3, #24]
 8001084:	e003      	b.n	800108e <LCD_IO_WriteData8+0x106>
 8001086:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <LCD_IO_WriteData8+0x130>)
 8001088:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800108c:	619a      	str	r2, [r3, #24]
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <LCD_IO_WriteData8+0x140>)
 8001090:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001094:	619a      	str	r2, [r3, #24]
 8001096:	2008      	movs	r0, #8
 8001098:	f7ff fdba 	bl	8000c10 <LCD_IO_Delay>
 800109c:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <LCD_IO_WriteData8+0x140>)
 800109e:	2201      	movs	r2, #1
 80010a0:	619a      	str	r2, [r3, #24]
  LCD_CS_OFF;
 80010a2:	4b03      	ldr	r3, [pc, #12]	; (80010b0 <LCD_IO_WriteData8+0x128>)
 80010a4:	2202      	movs	r2, #2
 80010a6:	619a      	str	r2, [r3, #24]
}
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	58020400 	.word	0x58020400
 80010b4:	24000169 	.word	0x24000169
 80010b8:	58021800 	.word	0x58021800
 80010bc:	58020c00 	.word	0x58020c00
 80010c0:	58021000 	.word	0x58021000
 80010c4:	58020000 	.word	0x58020000
 80010c8:	58020800 	.word	0x58020800

080010cc <LCD_IO_WriteData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteData16(uint16_t Data)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	80fb      	strh	r3, [r7, #6]
  LCD_CS_ON;
 80010d6:	4b8b      	ldr	r3, [pc, #556]	; (8001304 <LCD_IO_WriteData16+0x238>)
 80010d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010dc:	619a      	str	r2, [r3, #24]
  LCD_DATA16_WRITE(Data);
 80010de:	88fb      	ldrh	r3, [r7, #6]
 80010e0:	0a1b      	lsrs	r3, r3, #8
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	4b88      	ldr	r3, [pc, #544]	; (8001308 <LCD_IO_WriteData16+0x23c>)
 80010e8:	701a      	strb	r2, [r3, #0]
 80010ea:	4b87      	ldr	r3, [pc, #540]	; (8001308 <LCD_IO_WriteData16+0x23c>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d004      	beq.n	8001100 <LCD_IO_WriteData16+0x34>
 80010f6:	4b85      	ldr	r3, [pc, #532]	; (800130c <LCD_IO_WriteData16+0x240>)
 80010f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010fc:	619a      	str	r2, [r3, #24]
 80010fe:	e003      	b.n	8001108 <LCD_IO_WriteData16+0x3c>
 8001100:	4b82      	ldr	r3, [pc, #520]	; (800130c <LCD_IO_WriteData16+0x240>)
 8001102:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001106:	619a      	str	r2, [r3, #24]
 8001108:	4b7f      	ldr	r3, [pc, #508]	; (8001308 <LCD_IO_WriteData16+0x23c>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	2b00      	cmp	r3, #0
 8001112:	d004      	beq.n	800111e <LCD_IO_WriteData16+0x52>
 8001114:	4b7e      	ldr	r3, [pc, #504]	; (8001310 <LCD_IO_WriteData16+0x244>)
 8001116:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800111a:	619a      	str	r2, [r3, #24]
 800111c:	e003      	b.n	8001126 <LCD_IO_WriteData16+0x5a>
 800111e:	4b7c      	ldr	r3, [pc, #496]	; (8001310 <LCD_IO_WriteData16+0x244>)
 8001120:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001124:	619a      	str	r2, [r3, #24]
 8001126:	4b78      	ldr	r3, [pc, #480]	; (8001308 <LCD_IO_WriteData16+0x23c>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	f003 0304 	and.w	r3, r3, #4
 800112e:	2b00      	cmp	r3, #0
 8001130:	d004      	beq.n	800113c <LCD_IO_WriteData16+0x70>
 8001132:	4b76      	ldr	r3, [pc, #472]	; (800130c <LCD_IO_WriteData16+0x240>)
 8001134:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001138:	619a      	str	r2, [r3, #24]
 800113a:	e003      	b.n	8001144 <LCD_IO_WriteData16+0x78>
 800113c:	4b73      	ldr	r3, [pc, #460]	; (800130c <LCD_IO_WriteData16+0x240>)
 800113e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001142:	619a      	str	r2, [r3, #24]
 8001144:	4b70      	ldr	r3, [pc, #448]	; (8001308 <LCD_IO_WriteData16+0x23c>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	f003 0308 	and.w	r3, r3, #8
 800114c:	2b00      	cmp	r3, #0
 800114e:	d004      	beq.n	800115a <LCD_IO_WriteData16+0x8e>
 8001150:	4b70      	ldr	r3, [pc, #448]	; (8001314 <LCD_IO_WriteData16+0x248>)
 8001152:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001156:	619a      	str	r2, [r3, #24]
 8001158:	e003      	b.n	8001162 <LCD_IO_WriteData16+0x96>
 800115a:	4b6e      	ldr	r3, [pc, #440]	; (8001314 <LCD_IO_WriteData16+0x248>)
 800115c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001160:	619a      	str	r2, [r3, #24]
 8001162:	4b69      	ldr	r3, [pc, #420]	; (8001308 <LCD_IO_WriteData16+0x23c>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	f003 0310 	and.w	r3, r3, #16
 800116a:	2b00      	cmp	r3, #0
 800116c:	d004      	beq.n	8001178 <LCD_IO_WriteData16+0xac>
 800116e:	4b69      	ldr	r3, [pc, #420]	; (8001314 <LCD_IO_WriteData16+0x248>)
 8001170:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001174:	619a      	str	r2, [r3, #24]
 8001176:	e003      	b.n	8001180 <LCD_IO_WriteData16+0xb4>
 8001178:	4b66      	ldr	r3, [pc, #408]	; (8001314 <LCD_IO_WriteData16+0x248>)
 800117a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800117e:	619a      	str	r2, [r3, #24]
 8001180:	4b61      	ldr	r3, [pc, #388]	; (8001308 <LCD_IO_WriteData16+0x23c>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	f003 0320 	and.w	r3, r3, #32
 8001188:	2b00      	cmp	r3, #0
 800118a:	d004      	beq.n	8001196 <LCD_IO_WriteData16+0xca>
 800118c:	4b61      	ldr	r3, [pc, #388]	; (8001314 <LCD_IO_WriteData16+0x248>)
 800118e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001192:	619a      	str	r2, [r3, #24]
 8001194:	e003      	b.n	800119e <LCD_IO_WriteData16+0xd2>
 8001196:	4b5f      	ldr	r3, [pc, #380]	; (8001314 <LCD_IO_WriteData16+0x248>)
 8001198:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800119c:	619a      	str	r2, [r3, #24]
 800119e:	4b5a      	ldr	r3, [pc, #360]	; (8001308 <LCD_IO_WriteData16+0x23c>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d004      	beq.n	80011b4 <LCD_IO_WriteData16+0xe8>
 80011aa:	4b5b      	ldr	r3, [pc, #364]	; (8001318 <LCD_IO_WriteData16+0x24c>)
 80011ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011b0:	619a      	str	r2, [r3, #24]
 80011b2:	e003      	b.n	80011bc <LCD_IO_WriteData16+0xf0>
 80011b4:	4b58      	ldr	r3, [pc, #352]	; (8001318 <LCD_IO_WriteData16+0x24c>)
 80011b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80011ba:	619a      	str	r2, [r3, #24]
 80011bc:	4b52      	ldr	r3, [pc, #328]	; (8001308 <LCD_IO_WriteData16+0x23c>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	b25b      	sxtb	r3, r3
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	da04      	bge.n	80011d0 <LCD_IO_WriteData16+0x104>
 80011c6:	4b51      	ldr	r3, [pc, #324]	; (800130c <LCD_IO_WriteData16+0x240>)
 80011c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011cc:	619a      	str	r2, [r3, #24]
 80011ce:	e003      	b.n	80011d8 <LCD_IO_WriteData16+0x10c>
 80011d0:	4b4e      	ldr	r3, [pc, #312]	; (800130c <LCD_IO_WriteData16+0x240>)
 80011d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011d6:	619a      	str	r2, [r3, #24]
 80011d8:	4b50      	ldr	r3, [pc, #320]	; (800131c <LCD_IO_WriteData16+0x250>)
 80011da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011de:	619a      	str	r2, [r3, #24]
 80011e0:	2008      	movs	r0, #8
 80011e2:	f7ff fd15 	bl	8000c10 <LCD_IO_Delay>
 80011e6:	4b4d      	ldr	r3, [pc, #308]	; (800131c <LCD_IO_WriteData16+0x250>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	619a      	str	r2, [r3, #24]
 80011ec:	88fb      	ldrh	r3, [r7, #6]
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	4b45      	ldr	r3, [pc, #276]	; (8001308 <LCD_IO_WriteData16+0x23c>)
 80011f2:	701a      	strb	r2, [r3, #0]
 80011f4:	4b44      	ldr	r3, [pc, #272]	; (8001308 <LCD_IO_WriteData16+0x23c>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d004      	beq.n	800120a <LCD_IO_WriteData16+0x13e>
 8001200:	4b42      	ldr	r3, [pc, #264]	; (800130c <LCD_IO_WriteData16+0x240>)
 8001202:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001206:	619a      	str	r2, [r3, #24]
 8001208:	e003      	b.n	8001212 <LCD_IO_WriteData16+0x146>
 800120a:	4b40      	ldr	r3, [pc, #256]	; (800130c <LCD_IO_WriteData16+0x240>)
 800120c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001210:	619a      	str	r2, [r3, #24]
 8001212:	4b3d      	ldr	r3, [pc, #244]	; (8001308 <LCD_IO_WriteData16+0x23c>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d004      	beq.n	8001228 <LCD_IO_WriteData16+0x15c>
 800121e:	4b3c      	ldr	r3, [pc, #240]	; (8001310 <LCD_IO_WriteData16+0x244>)
 8001220:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001224:	619a      	str	r2, [r3, #24]
 8001226:	e003      	b.n	8001230 <LCD_IO_WriteData16+0x164>
 8001228:	4b39      	ldr	r3, [pc, #228]	; (8001310 <LCD_IO_WriteData16+0x244>)
 800122a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800122e:	619a      	str	r2, [r3, #24]
 8001230:	4b35      	ldr	r3, [pc, #212]	; (8001308 <LCD_IO_WriteData16+0x23c>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	f003 0304 	and.w	r3, r3, #4
 8001238:	2b00      	cmp	r3, #0
 800123a:	d004      	beq.n	8001246 <LCD_IO_WriteData16+0x17a>
 800123c:	4b33      	ldr	r3, [pc, #204]	; (800130c <LCD_IO_WriteData16+0x240>)
 800123e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001242:	619a      	str	r2, [r3, #24]
 8001244:	e003      	b.n	800124e <LCD_IO_WriteData16+0x182>
 8001246:	4b31      	ldr	r3, [pc, #196]	; (800130c <LCD_IO_WriteData16+0x240>)
 8001248:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800124c:	619a      	str	r2, [r3, #24]
 800124e:	4b2e      	ldr	r3, [pc, #184]	; (8001308 <LCD_IO_WriteData16+0x23c>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	f003 0308 	and.w	r3, r3, #8
 8001256:	2b00      	cmp	r3, #0
 8001258:	d004      	beq.n	8001264 <LCD_IO_WriteData16+0x198>
 800125a:	4b2e      	ldr	r3, [pc, #184]	; (8001314 <LCD_IO_WriteData16+0x248>)
 800125c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001260:	619a      	str	r2, [r3, #24]
 8001262:	e003      	b.n	800126c <LCD_IO_WriteData16+0x1a0>
 8001264:	4b2b      	ldr	r3, [pc, #172]	; (8001314 <LCD_IO_WriteData16+0x248>)
 8001266:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800126a:	619a      	str	r2, [r3, #24]
 800126c:	4b26      	ldr	r3, [pc, #152]	; (8001308 <LCD_IO_WriteData16+0x23c>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	f003 0310 	and.w	r3, r3, #16
 8001274:	2b00      	cmp	r3, #0
 8001276:	d004      	beq.n	8001282 <LCD_IO_WriteData16+0x1b6>
 8001278:	4b26      	ldr	r3, [pc, #152]	; (8001314 <LCD_IO_WriteData16+0x248>)
 800127a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800127e:	619a      	str	r2, [r3, #24]
 8001280:	e003      	b.n	800128a <LCD_IO_WriteData16+0x1be>
 8001282:	4b24      	ldr	r3, [pc, #144]	; (8001314 <LCD_IO_WriteData16+0x248>)
 8001284:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001288:	619a      	str	r2, [r3, #24]
 800128a:	4b1f      	ldr	r3, [pc, #124]	; (8001308 <LCD_IO_WriteData16+0x23c>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	f003 0320 	and.w	r3, r3, #32
 8001292:	2b00      	cmp	r3, #0
 8001294:	d004      	beq.n	80012a0 <LCD_IO_WriteData16+0x1d4>
 8001296:	4b1f      	ldr	r3, [pc, #124]	; (8001314 <LCD_IO_WriteData16+0x248>)
 8001298:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800129c:	619a      	str	r2, [r3, #24]
 800129e:	e003      	b.n	80012a8 <LCD_IO_WriteData16+0x1dc>
 80012a0:	4b1c      	ldr	r3, [pc, #112]	; (8001314 <LCD_IO_WriteData16+0x248>)
 80012a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012a6:	619a      	str	r2, [r3, #24]
 80012a8:	4b17      	ldr	r3, [pc, #92]	; (8001308 <LCD_IO_WriteData16+0x23c>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d004      	beq.n	80012be <LCD_IO_WriteData16+0x1f2>
 80012b4:	4b18      	ldr	r3, [pc, #96]	; (8001318 <LCD_IO_WriteData16+0x24c>)
 80012b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012ba:	619a      	str	r2, [r3, #24]
 80012bc:	e003      	b.n	80012c6 <LCD_IO_WriteData16+0x1fa>
 80012be:	4b16      	ldr	r3, [pc, #88]	; (8001318 <LCD_IO_WriteData16+0x24c>)
 80012c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80012c4:	619a      	str	r2, [r3, #24]
 80012c6:	4b10      	ldr	r3, [pc, #64]	; (8001308 <LCD_IO_WriteData16+0x23c>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	b25b      	sxtb	r3, r3
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	da04      	bge.n	80012da <LCD_IO_WriteData16+0x20e>
 80012d0:	4b0e      	ldr	r3, [pc, #56]	; (800130c <LCD_IO_WriteData16+0x240>)
 80012d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012d6:	619a      	str	r2, [r3, #24]
 80012d8:	e003      	b.n	80012e2 <LCD_IO_WriteData16+0x216>
 80012da:	4b0c      	ldr	r3, [pc, #48]	; (800130c <LCD_IO_WriteData16+0x240>)
 80012dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80012e0:	619a      	str	r2, [r3, #24]
 80012e2:	4b0e      	ldr	r3, [pc, #56]	; (800131c <LCD_IO_WriteData16+0x250>)
 80012e4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012e8:	619a      	str	r2, [r3, #24]
 80012ea:	2008      	movs	r0, #8
 80012ec:	f7ff fc90 	bl	8000c10 <LCD_IO_Delay>
 80012f0:	4b0a      	ldr	r3, [pc, #40]	; (800131c <LCD_IO_WriteData16+0x250>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	619a      	str	r2, [r3, #24]
  LCD_CS_OFF;
 80012f6:	4b03      	ldr	r3, [pc, #12]	; (8001304 <LCD_IO_WriteData16+0x238>)
 80012f8:	2202      	movs	r2, #2
 80012fa:	619a      	str	r2, [r3, #24]
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	58020400 	.word	0x58020400
 8001308:	24000169 	.word	0x24000169
 800130c:	58021800 	.word	0x58021800
 8001310:	58020c00 	.word	0x58020c00
 8001314:	58021000 	.word	0x58021000
 8001318:	58020000 	.word	0x58020000
 800131c:	58020800 	.word	0x58020800

08001320 <LCD_IO_WriteCmd8DataFill16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	603a      	str	r2, [r7, #0]
 800132a:	71fb      	strb	r3, [r7, #7]
 800132c:	460b      	mov	r3, r1
 800132e:	80bb      	strh	r3, [r7, #4]
  LCD_CS_ON;
 8001330:	4b9a      	ldr	r3, [pc, #616]	; (800159c <LCD_IO_WriteCmd8DataFill16+0x27c>)
 8001332:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001336:	619a      	str	r2, [r3, #24]
  LCD_CMD8_WRITE(Cmd);
 8001338:	4b99      	ldr	r3, [pc, #612]	; (80015a0 <LCD_IO_WriteCmd8DataFill16+0x280>)
 800133a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800133e:	619a      	str	r2, [r3, #24]
 8001340:	4a98      	ldr	r2, [pc, #608]	; (80015a4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	7013      	strb	r3, [r2, #0]
 8001346:	4b97      	ldr	r3, [pc, #604]	; (80015a4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	2b00      	cmp	r3, #0
 8001350:	d004      	beq.n	800135c <LCD_IO_WriteCmd8DataFill16+0x3c>
 8001352:	4b95      	ldr	r3, [pc, #596]	; (80015a8 <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001354:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001358:	619a      	str	r2, [r3, #24]
 800135a:	e003      	b.n	8001364 <LCD_IO_WriteCmd8DataFill16+0x44>
 800135c:	4b92      	ldr	r3, [pc, #584]	; (80015a8 <LCD_IO_WriteCmd8DataFill16+0x288>)
 800135e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001362:	619a      	str	r2, [r3, #24]
 8001364:	4b8f      	ldr	r3, [pc, #572]	; (80015a4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	2b00      	cmp	r3, #0
 800136e:	d004      	beq.n	800137a <LCD_IO_WriteCmd8DataFill16+0x5a>
 8001370:	4b8e      	ldr	r3, [pc, #568]	; (80015ac <LCD_IO_WriteCmd8DataFill16+0x28c>)
 8001372:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001376:	619a      	str	r2, [r3, #24]
 8001378:	e003      	b.n	8001382 <LCD_IO_WriteCmd8DataFill16+0x62>
 800137a:	4b8c      	ldr	r3, [pc, #560]	; (80015ac <LCD_IO_WriteCmd8DataFill16+0x28c>)
 800137c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001380:	619a      	str	r2, [r3, #24]
 8001382:	4b88      	ldr	r3, [pc, #544]	; (80015a4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	f003 0304 	and.w	r3, r3, #4
 800138a:	2b00      	cmp	r3, #0
 800138c:	d004      	beq.n	8001398 <LCD_IO_WriteCmd8DataFill16+0x78>
 800138e:	4b86      	ldr	r3, [pc, #536]	; (80015a8 <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001390:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001394:	619a      	str	r2, [r3, #24]
 8001396:	e003      	b.n	80013a0 <LCD_IO_WriteCmd8DataFill16+0x80>
 8001398:	4b83      	ldr	r3, [pc, #524]	; (80015a8 <LCD_IO_WriteCmd8DataFill16+0x288>)
 800139a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800139e:	619a      	str	r2, [r3, #24]
 80013a0:	4b80      	ldr	r3, [pc, #512]	; (80015a4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	f003 0308 	and.w	r3, r3, #8
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d004      	beq.n	80013b6 <LCD_IO_WriteCmd8DataFill16+0x96>
 80013ac:	4b80      	ldr	r3, [pc, #512]	; (80015b0 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80013ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013b2:	619a      	str	r2, [r3, #24]
 80013b4:	e003      	b.n	80013be <LCD_IO_WriteCmd8DataFill16+0x9e>
 80013b6:	4b7e      	ldr	r3, [pc, #504]	; (80015b0 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80013b8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80013bc:	619a      	str	r2, [r3, #24]
 80013be:	4b79      	ldr	r3, [pc, #484]	; (80015a4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	f003 0310 	and.w	r3, r3, #16
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d004      	beq.n	80013d4 <LCD_IO_WriteCmd8DataFill16+0xb4>
 80013ca:	4b79      	ldr	r3, [pc, #484]	; (80015b0 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80013cc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013d0:	619a      	str	r2, [r3, #24]
 80013d2:	e003      	b.n	80013dc <LCD_IO_WriteCmd8DataFill16+0xbc>
 80013d4:	4b76      	ldr	r3, [pc, #472]	; (80015b0 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80013d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013da:	619a      	str	r2, [r3, #24]
 80013dc:	4b71      	ldr	r3, [pc, #452]	; (80015a4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	f003 0320 	and.w	r3, r3, #32
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d004      	beq.n	80013f2 <LCD_IO_WriteCmd8DataFill16+0xd2>
 80013e8:	4b71      	ldr	r3, [pc, #452]	; (80015b0 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80013ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013ee:	619a      	str	r2, [r3, #24]
 80013f0:	e003      	b.n	80013fa <LCD_IO_WriteCmd8DataFill16+0xda>
 80013f2:	4b6f      	ldr	r3, [pc, #444]	; (80015b0 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80013f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013f8:	619a      	str	r2, [r3, #24]
 80013fa:	4b6a      	ldr	r3, [pc, #424]	; (80015a4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001402:	2b00      	cmp	r3, #0
 8001404:	d004      	beq.n	8001410 <LCD_IO_WriteCmd8DataFill16+0xf0>
 8001406:	4b6b      	ldr	r3, [pc, #428]	; (80015b4 <LCD_IO_WriteCmd8DataFill16+0x294>)
 8001408:	f44f 7280 	mov.w	r2, #256	; 0x100
 800140c:	619a      	str	r2, [r3, #24]
 800140e:	e003      	b.n	8001418 <LCD_IO_WriteCmd8DataFill16+0xf8>
 8001410:	4b68      	ldr	r3, [pc, #416]	; (80015b4 <LCD_IO_WriteCmd8DataFill16+0x294>)
 8001412:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001416:	619a      	str	r2, [r3, #24]
 8001418:	4b62      	ldr	r3, [pc, #392]	; (80015a4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	b25b      	sxtb	r3, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	da04      	bge.n	800142c <LCD_IO_WriteCmd8DataFill16+0x10c>
 8001422:	4b61      	ldr	r3, [pc, #388]	; (80015a8 <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001424:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001428:	619a      	str	r2, [r3, #24]
 800142a:	e003      	b.n	8001434 <LCD_IO_WriteCmd8DataFill16+0x114>
 800142c:	4b5e      	ldr	r3, [pc, #376]	; (80015a8 <LCD_IO_WriteCmd8DataFill16+0x288>)
 800142e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001432:	619a      	str	r2, [r3, #24]
 8001434:	4b5a      	ldr	r3, [pc, #360]	; (80015a0 <LCD_IO_WriteCmd8DataFill16+0x280>)
 8001436:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800143a:	619a      	str	r2, [r3, #24]
 800143c:	2008      	movs	r0, #8
 800143e:	f7ff fbe7 	bl	8000c10 <LCD_IO_Delay>
 8001442:	4b57      	ldr	r3, [pc, #348]	; (80015a0 <LCD_IO_WriteCmd8DataFill16+0x280>)
 8001444:	2201      	movs	r2, #1
 8001446:	619a      	str	r2, [r3, #24]
 8001448:	4b55      	ldr	r3, [pc, #340]	; (80015a0 <LCD_IO_WriteCmd8DataFill16+0x280>)
 800144a:	2208      	movs	r2, #8
 800144c:	619a      	str	r2, [r3, #24]
  while(Size--)
 800144e:	e11a      	b.n	8001686 <LCD_IO_WriteCmd8DataFill16+0x366>
  {
    LCD_DATA16_WRITE(Data);
 8001450:	88bb      	ldrh	r3, [r7, #4]
 8001452:	0a1b      	lsrs	r3, r3, #8
 8001454:	b29b      	uxth	r3, r3
 8001456:	b2da      	uxtb	r2, r3
 8001458:	4b52      	ldr	r3, [pc, #328]	; (80015a4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 800145a:	701a      	strb	r2, [r3, #0]
 800145c:	4b51      	ldr	r3, [pc, #324]	; (80015a4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	2b00      	cmp	r3, #0
 8001466:	d004      	beq.n	8001472 <LCD_IO_WriteCmd8DataFill16+0x152>
 8001468:	4b4f      	ldr	r3, [pc, #316]	; (80015a8 <LCD_IO_WriteCmd8DataFill16+0x288>)
 800146a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800146e:	619a      	str	r2, [r3, #24]
 8001470:	e003      	b.n	800147a <LCD_IO_WriteCmd8DataFill16+0x15a>
 8001472:	4b4d      	ldr	r3, [pc, #308]	; (80015a8 <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001474:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001478:	619a      	str	r2, [r3, #24]
 800147a:	4b4a      	ldr	r3, [pc, #296]	; (80015a4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d004      	beq.n	8001490 <LCD_IO_WriteCmd8DataFill16+0x170>
 8001486:	4b49      	ldr	r3, [pc, #292]	; (80015ac <LCD_IO_WriteCmd8DataFill16+0x28c>)
 8001488:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800148c:	619a      	str	r2, [r3, #24]
 800148e:	e003      	b.n	8001498 <LCD_IO_WriteCmd8DataFill16+0x178>
 8001490:	4b46      	ldr	r3, [pc, #280]	; (80015ac <LCD_IO_WriteCmd8DataFill16+0x28c>)
 8001492:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001496:	619a      	str	r2, [r3, #24]
 8001498:	4b42      	ldr	r3, [pc, #264]	; (80015a4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	f003 0304 	and.w	r3, r3, #4
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d004      	beq.n	80014ae <LCD_IO_WriteCmd8DataFill16+0x18e>
 80014a4:	4b40      	ldr	r3, [pc, #256]	; (80015a8 <LCD_IO_WriteCmd8DataFill16+0x288>)
 80014a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014aa:	619a      	str	r2, [r3, #24]
 80014ac:	e003      	b.n	80014b6 <LCD_IO_WriteCmd8DataFill16+0x196>
 80014ae:	4b3e      	ldr	r3, [pc, #248]	; (80015a8 <LCD_IO_WriteCmd8DataFill16+0x288>)
 80014b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014b4:	619a      	str	r2, [r3, #24]
 80014b6:	4b3b      	ldr	r3, [pc, #236]	; (80015a4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	f003 0308 	and.w	r3, r3, #8
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d004      	beq.n	80014cc <LCD_IO_WriteCmd8DataFill16+0x1ac>
 80014c2:	4b3b      	ldr	r3, [pc, #236]	; (80015b0 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80014c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014c8:	619a      	str	r2, [r3, #24]
 80014ca:	e003      	b.n	80014d4 <LCD_IO_WriteCmd8DataFill16+0x1b4>
 80014cc:	4b38      	ldr	r3, [pc, #224]	; (80015b0 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80014ce:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80014d2:	619a      	str	r2, [r3, #24]
 80014d4:	4b33      	ldr	r3, [pc, #204]	; (80015a4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	f003 0310 	and.w	r3, r3, #16
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d004      	beq.n	80014ea <LCD_IO_WriteCmd8DataFill16+0x1ca>
 80014e0:	4b33      	ldr	r3, [pc, #204]	; (80015b0 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80014e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014e6:	619a      	str	r2, [r3, #24]
 80014e8:	e003      	b.n	80014f2 <LCD_IO_WriteCmd8DataFill16+0x1d2>
 80014ea:	4b31      	ldr	r3, [pc, #196]	; (80015b0 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80014ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014f0:	619a      	str	r2, [r3, #24]
 80014f2:	4b2c      	ldr	r3, [pc, #176]	; (80015a4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	f003 0320 	and.w	r3, r3, #32
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d004      	beq.n	8001508 <LCD_IO_WriteCmd8DataFill16+0x1e8>
 80014fe:	4b2c      	ldr	r3, [pc, #176]	; (80015b0 <LCD_IO_WriteCmd8DataFill16+0x290>)
 8001500:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001504:	619a      	str	r2, [r3, #24]
 8001506:	e003      	b.n	8001510 <LCD_IO_WriteCmd8DataFill16+0x1f0>
 8001508:	4b29      	ldr	r3, [pc, #164]	; (80015b0 <LCD_IO_WriteCmd8DataFill16+0x290>)
 800150a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800150e:	619a      	str	r2, [r3, #24]
 8001510:	4b24      	ldr	r3, [pc, #144]	; (80015a4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001518:	2b00      	cmp	r3, #0
 800151a:	d004      	beq.n	8001526 <LCD_IO_WriteCmd8DataFill16+0x206>
 800151c:	4b25      	ldr	r3, [pc, #148]	; (80015b4 <LCD_IO_WriteCmd8DataFill16+0x294>)
 800151e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001522:	619a      	str	r2, [r3, #24]
 8001524:	e003      	b.n	800152e <LCD_IO_WriteCmd8DataFill16+0x20e>
 8001526:	4b23      	ldr	r3, [pc, #140]	; (80015b4 <LCD_IO_WriteCmd8DataFill16+0x294>)
 8001528:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800152c:	619a      	str	r2, [r3, #24]
 800152e:	4b1d      	ldr	r3, [pc, #116]	; (80015a4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	b25b      	sxtb	r3, r3
 8001534:	2b00      	cmp	r3, #0
 8001536:	da04      	bge.n	8001542 <LCD_IO_WriteCmd8DataFill16+0x222>
 8001538:	4b1b      	ldr	r3, [pc, #108]	; (80015a8 <LCD_IO_WriteCmd8DataFill16+0x288>)
 800153a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800153e:	619a      	str	r2, [r3, #24]
 8001540:	e003      	b.n	800154a <LCD_IO_WriteCmd8DataFill16+0x22a>
 8001542:	4b19      	ldr	r3, [pc, #100]	; (80015a8 <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001544:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001548:	619a      	str	r2, [r3, #24]
 800154a:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <LCD_IO_WriteCmd8DataFill16+0x280>)
 800154c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001550:	619a      	str	r2, [r3, #24]
 8001552:	2008      	movs	r0, #8
 8001554:	f7ff fb5c 	bl	8000c10 <LCD_IO_Delay>
 8001558:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <LCD_IO_WriteCmd8DataFill16+0x280>)
 800155a:	2201      	movs	r2, #1
 800155c:	619a      	str	r2, [r3, #24]
 800155e:	88bb      	ldrh	r3, [r7, #4]
 8001560:	b2da      	uxtb	r2, r3
 8001562:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001564:	701a      	strb	r2, [r3, #0]
 8001566:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	2b00      	cmp	r3, #0
 8001570:	d004      	beq.n	800157c <LCD_IO_WriteCmd8DataFill16+0x25c>
 8001572:	4b0d      	ldr	r3, [pc, #52]	; (80015a8 <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001574:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001578:	619a      	str	r2, [r3, #24]
 800157a:	e003      	b.n	8001584 <LCD_IO_WriteCmd8DataFill16+0x264>
 800157c:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <LCD_IO_WriteCmd8DataFill16+0x288>)
 800157e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001582:	619a      	str	r2, [r3, #24]
 8001584:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d013      	beq.n	80015b8 <LCD_IO_WriteCmd8DataFill16+0x298>
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <LCD_IO_WriteCmd8DataFill16+0x28c>)
 8001592:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001596:	619a      	str	r2, [r3, #24]
 8001598:	e012      	b.n	80015c0 <LCD_IO_WriteCmd8DataFill16+0x2a0>
 800159a:	bf00      	nop
 800159c:	58020400 	.word	0x58020400
 80015a0:	58020800 	.word	0x58020800
 80015a4:	24000169 	.word	0x24000169
 80015a8:	58021800 	.word	0x58021800
 80015ac:	58020c00 	.word	0x58020c00
 80015b0:	58021000 	.word	0x58021000
 80015b4:	58020000 	.word	0x58020000
 80015b8:	4b39      	ldr	r3, [pc, #228]	; (80016a0 <LCD_IO_WriteCmd8DataFill16+0x380>)
 80015ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80015be:	619a      	str	r2, [r3, #24]
 80015c0:	4b38      	ldr	r3, [pc, #224]	; (80016a4 <LCD_IO_WriteCmd8DataFill16+0x384>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d004      	beq.n	80015d6 <LCD_IO_WriteCmd8DataFill16+0x2b6>
 80015cc:	4b36      	ldr	r3, [pc, #216]	; (80016a8 <LCD_IO_WriteCmd8DataFill16+0x388>)
 80015ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015d2:	619a      	str	r2, [r3, #24]
 80015d4:	e003      	b.n	80015de <LCD_IO_WriteCmd8DataFill16+0x2be>
 80015d6:	4b34      	ldr	r3, [pc, #208]	; (80016a8 <LCD_IO_WriteCmd8DataFill16+0x388>)
 80015d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015dc:	619a      	str	r2, [r3, #24]
 80015de:	4b31      	ldr	r3, [pc, #196]	; (80016a4 <LCD_IO_WriteCmd8DataFill16+0x384>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	f003 0308 	and.w	r3, r3, #8
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d004      	beq.n	80015f4 <LCD_IO_WriteCmd8DataFill16+0x2d4>
 80015ea:	4b30      	ldr	r3, [pc, #192]	; (80016ac <LCD_IO_WriteCmd8DataFill16+0x38c>)
 80015ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015f0:	619a      	str	r2, [r3, #24]
 80015f2:	e003      	b.n	80015fc <LCD_IO_WriteCmd8DataFill16+0x2dc>
 80015f4:	4b2d      	ldr	r3, [pc, #180]	; (80016ac <LCD_IO_WriteCmd8DataFill16+0x38c>)
 80015f6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80015fa:	619a      	str	r2, [r3, #24]
 80015fc:	4b29      	ldr	r3, [pc, #164]	; (80016a4 <LCD_IO_WriteCmd8DataFill16+0x384>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	f003 0310 	and.w	r3, r3, #16
 8001604:	2b00      	cmp	r3, #0
 8001606:	d004      	beq.n	8001612 <LCD_IO_WriteCmd8DataFill16+0x2f2>
 8001608:	4b28      	ldr	r3, [pc, #160]	; (80016ac <LCD_IO_WriteCmd8DataFill16+0x38c>)
 800160a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800160e:	619a      	str	r2, [r3, #24]
 8001610:	e003      	b.n	800161a <LCD_IO_WriteCmd8DataFill16+0x2fa>
 8001612:	4b26      	ldr	r3, [pc, #152]	; (80016ac <LCD_IO_WriteCmd8DataFill16+0x38c>)
 8001614:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001618:	619a      	str	r2, [r3, #24]
 800161a:	4b22      	ldr	r3, [pc, #136]	; (80016a4 <LCD_IO_WriteCmd8DataFill16+0x384>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	f003 0320 	and.w	r3, r3, #32
 8001622:	2b00      	cmp	r3, #0
 8001624:	d004      	beq.n	8001630 <LCD_IO_WriteCmd8DataFill16+0x310>
 8001626:	4b21      	ldr	r3, [pc, #132]	; (80016ac <LCD_IO_WriteCmd8DataFill16+0x38c>)
 8001628:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800162c:	619a      	str	r2, [r3, #24]
 800162e:	e003      	b.n	8001638 <LCD_IO_WriteCmd8DataFill16+0x318>
 8001630:	4b1e      	ldr	r3, [pc, #120]	; (80016ac <LCD_IO_WriteCmd8DataFill16+0x38c>)
 8001632:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001636:	619a      	str	r2, [r3, #24]
 8001638:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <LCD_IO_WriteCmd8DataFill16+0x384>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001640:	2b00      	cmp	r3, #0
 8001642:	d004      	beq.n	800164e <LCD_IO_WriteCmd8DataFill16+0x32e>
 8001644:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <LCD_IO_WriteCmd8DataFill16+0x390>)
 8001646:	f44f 7280 	mov.w	r2, #256	; 0x100
 800164a:	619a      	str	r2, [r3, #24]
 800164c:	e003      	b.n	8001656 <LCD_IO_WriteCmd8DataFill16+0x336>
 800164e:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <LCD_IO_WriteCmd8DataFill16+0x390>)
 8001650:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001654:	619a      	str	r2, [r3, #24]
 8001656:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <LCD_IO_WriteCmd8DataFill16+0x384>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	b25b      	sxtb	r3, r3
 800165c:	2b00      	cmp	r3, #0
 800165e:	da04      	bge.n	800166a <LCD_IO_WriteCmd8DataFill16+0x34a>
 8001660:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <LCD_IO_WriteCmd8DataFill16+0x388>)
 8001662:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001666:	619a      	str	r2, [r3, #24]
 8001668:	e003      	b.n	8001672 <LCD_IO_WriteCmd8DataFill16+0x352>
 800166a:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <LCD_IO_WriteCmd8DataFill16+0x388>)
 800166c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001670:	619a      	str	r2, [r3, #24]
 8001672:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <LCD_IO_WriteCmd8DataFill16+0x394>)
 8001674:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001678:	619a      	str	r2, [r3, #24]
 800167a:	2008      	movs	r0, #8
 800167c:	f7ff fac8 	bl	8000c10 <LCD_IO_Delay>
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <LCD_IO_WriteCmd8DataFill16+0x394>)
 8001682:	2201      	movs	r2, #1
 8001684:	619a      	str	r2, [r3, #24]
  while(Size--)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	1e5a      	subs	r2, r3, #1
 800168a:	603a      	str	r2, [r7, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	f47f aedf 	bne.w	8001450 <LCD_IO_WriteCmd8DataFill16+0x130>
  }
  LCD_CS_OFF;
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <LCD_IO_WriteCmd8DataFill16+0x398>)
 8001694:	2202      	movs	r2, #2
 8001696:	619a      	str	r2, [r3, #24]
}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	58020c00 	.word	0x58020c00
 80016a4:	24000169 	.word	0x24000169
 80016a8:	58021800 	.word	0x58021800
 80016ac:	58021000 	.word	0x58021000
 80016b0:	58020000 	.word	0x58020000
 80016b4:	58020800 	.word	0x58020800
 80016b8:	58020400 	.word	0x58020400

080016bc <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
 80016c8:	73fb      	strb	r3, [r7, #15]
  LCD_CS_ON;
 80016ca:	4b92      	ldr	r3, [pc, #584]	; (8001914 <LCD_IO_WriteCmd8MultipleData8+0x258>)
 80016cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016d0:	619a      	str	r2, [r3, #24]
  LCD_CMD8_WRITE(Cmd);
 80016d2:	4b91      	ldr	r3, [pc, #580]	; (8001918 <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 80016d4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80016d8:	619a      	str	r2, [r3, #24]
 80016da:	4a90      	ldr	r2, [pc, #576]	; (800191c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
 80016de:	7013      	strb	r3, [r2, #0]
 80016e0:	4b8e      	ldr	r3, [pc, #568]	; (800191c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d004      	beq.n	80016f6 <LCD_IO_WriteCmd8MultipleData8+0x3a>
 80016ec:	4b8c      	ldr	r3, [pc, #560]	; (8001920 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 80016ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016f2:	619a      	str	r2, [r3, #24]
 80016f4:	e003      	b.n	80016fe <LCD_IO_WriteCmd8MultipleData8+0x42>
 80016f6:	4b8a      	ldr	r3, [pc, #552]	; (8001920 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 80016f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016fc:	619a      	str	r2, [r3, #24]
 80016fe:	4b87      	ldr	r3, [pc, #540]	; (800191c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d004      	beq.n	8001714 <LCD_IO_WriteCmd8MultipleData8+0x58>
 800170a:	4b86      	ldr	r3, [pc, #536]	; (8001924 <LCD_IO_WriteCmd8MultipleData8+0x268>)
 800170c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001710:	619a      	str	r2, [r3, #24]
 8001712:	e003      	b.n	800171c <LCD_IO_WriteCmd8MultipleData8+0x60>
 8001714:	4b83      	ldr	r3, [pc, #524]	; (8001924 <LCD_IO_WriteCmd8MultipleData8+0x268>)
 8001716:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800171a:	619a      	str	r2, [r3, #24]
 800171c:	4b7f      	ldr	r3, [pc, #508]	; (800191c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	f003 0304 	and.w	r3, r3, #4
 8001724:	2b00      	cmp	r3, #0
 8001726:	d004      	beq.n	8001732 <LCD_IO_WriteCmd8MultipleData8+0x76>
 8001728:	4b7d      	ldr	r3, [pc, #500]	; (8001920 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 800172a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800172e:	619a      	str	r2, [r3, #24]
 8001730:	e003      	b.n	800173a <LCD_IO_WriteCmd8MultipleData8+0x7e>
 8001732:	4b7b      	ldr	r3, [pc, #492]	; (8001920 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001734:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001738:	619a      	str	r2, [r3, #24]
 800173a:	4b78      	ldr	r3, [pc, #480]	; (800191c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	f003 0308 	and.w	r3, r3, #8
 8001742:	2b00      	cmp	r3, #0
 8001744:	d004      	beq.n	8001750 <LCD_IO_WriteCmd8MultipleData8+0x94>
 8001746:	4b78      	ldr	r3, [pc, #480]	; (8001928 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001748:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800174c:	619a      	str	r2, [r3, #24]
 800174e:	e003      	b.n	8001758 <LCD_IO_WriteCmd8MultipleData8+0x9c>
 8001750:	4b75      	ldr	r3, [pc, #468]	; (8001928 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001752:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001756:	619a      	str	r2, [r3, #24]
 8001758:	4b70      	ldr	r3, [pc, #448]	; (800191c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	f003 0310 	and.w	r3, r3, #16
 8001760:	2b00      	cmp	r3, #0
 8001762:	d004      	beq.n	800176e <LCD_IO_WriteCmd8MultipleData8+0xb2>
 8001764:	4b70      	ldr	r3, [pc, #448]	; (8001928 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001766:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800176a:	619a      	str	r2, [r3, #24]
 800176c:	e003      	b.n	8001776 <LCD_IO_WriteCmd8MultipleData8+0xba>
 800176e:	4b6e      	ldr	r3, [pc, #440]	; (8001928 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001770:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001774:	619a      	str	r2, [r3, #24]
 8001776:	4b69      	ldr	r3, [pc, #420]	; (800191c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	f003 0320 	and.w	r3, r3, #32
 800177e:	2b00      	cmp	r3, #0
 8001780:	d004      	beq.n	800178c <LCD_IO_WriteCmd8MultipleData8+0xd0>
 8001782:	4b69      	ldr	r3, [pc, #420]	; (8001928 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001784:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001788:	619a      	str	r2, [r3, #24]
 800178a:	e003      	b.n	8001794 <LCD_IO_WriteCmd8MultipleData8+0xd8>
 800178c:	4b66      	ldr	r3, [pc, #408]	; (8001928 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 800178e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001792:	619a      	str	r2, [r3, #24]
 8001794:	4b61      	ldr	r3, [pc, #388]	; (800191c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800179c:	2b00      	cmp	r3, #0
 800179e:	d004      	beq.n	80017aa <LCD_IO_WriteCmd8MultipleData8+0xee>
 80017a0:	4b62      	ldr	r3, [pc, #392]	; (800192c <LCD_IO_WriteCmd8MultipleData8+0x270>)
 80017a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017a6:	619a      	str	r2, [r3, #24]
 80017a8:	e003      	b.n	80017b2 <LCD_IO_WriteCmd8MultipleData8+0xf6>
 80017aa:	4b60      	ldr	r3, [pc, #384]	; (800192c <LCD_IO_WriteCmd8MultipleData8+0x270>)
 80017ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80017b0:	619a      	str	r2, [r3, #24]
 80017b2:	4b5a      	ldr	r3, [pc, #360]	; (800191c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	b25b      	sxtb	r3, r3
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	da04      	bge.n	80017c6 <LCD_IO_WriteCmd8MultipleData8+0x10a>
 80017bc:	4b58      	ldr	r3, [pc, #352]	; (8001920 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 80017be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017c2:	619a      	str	r2, [r3, #24]
 80017c4:	e003      	b.n	80017ce <LCD_IO_WriteCmd8MultipleData8+0x112>
 80017c6:	4b56      	ldr	r3, [pc, #344]	; (8001920 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 80017c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017cc:	619a      	str	r2, [r3, #24]
 80017ce:	4b52      	ldr	r3, [pc, #328]	; (8001918 <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 80017d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017d4:	619a      	str	r2, [r3, #24]
 80017d6:	2008      	movs	r0, #8
 80017d8:	f7ff fa1a 	bl	8000c10 <LCD_IO_Delay>
 80017dc:	4b4e      	ldr	r3, [pc, #312]	; (8001918 <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 80017de:	2201      	movs	r2, #1
 80017e0:	619a      	str	r2, [r3, #24]
 80017e2:	4b4d      	ldr	r3, [pc, #308]	; (8001918 <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 80017e4:	2208      	movs	r2, #8
 80017e6:	619a      	str	r2, [r3, #24]

  while(Size--)
 80017e8:	e087      	b.n	80018fa <LCD_IO_WriteCmd8MultipleData8+0x23e>
  {
    LCD_DATA8_WRITE(*pData);
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	781a      	ldrb	r2, [r3, #0]
 80017ee:	4b4b      	ldr	r3, [pc, #300]	; (800191c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 80017f0:	701a      	strb	r2, [r3, #0]
 80017f2:	4b4a      	ldr	r3, [pc, #296]	; (800191c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d004      	beq.n	8001808 <LCD_IO_WriteCmd8MultipleData8+0x14c>
 80017fe:	4b48      	ldr	r3, [pc, #288]	; (8001920 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001800:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001804:	619a      	str	r2, [r3, #24]
 8001806:	e003      	b.n	8001810 <LCD_IO_WriteCmd8MultipleData8+0x154>
 8001808:	4b45      	ldr	r3, [pc, #276]	; (8001920 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 800180a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800180e:	619a      	str	r2, [r3, #24]
 8001810:	4b42      	ldr	r3, [pc, #264]	; (800191c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d004      	beq.n	8001826 <LCD_IO_WriteCmd8MultipleData8+0x16a>
 800181c:	4b41      	ldr	r3, [pc, #260]	; (8001924 <LCD_IO_WriteCmd8MultipleData8+0x268>)
 800181e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001822:	619a      	str	r2, [r3, #24]
 8001824:	e003      	b.n	800182e <LCD_IO_WriteCmd8MultipleData8+0x172>
 8001826:	4b3f      	ldr	r3, [pc, #252]	; (8001924 <LCD_IO_WriteCmd8MultipleData8+0x268>)
 8001828:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800182c:	619a      	str	r2, [r3, #24]
 800182e:	4b3b      	ldr	r3, [pc, #236]	; (800191c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	f003 0304 	and.w	r3, r3, #4
 8001836:	2b00      	cmp	r3, #0
 8001838:	d004      	beq.n	8001844 <LCD_IO_WriteCmd8MultipleData8+0x188>
 800183a:	4b39      	ldr	r3, [pc, #228]	; (8001920 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 800183c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001840:	619a      	str	r2, [r3, #24]
 8001842:	e003      	b.n	800184c <LCD_IO_WriteCmd8MultipleData8+0x190>
 8001844:	4b36      	ldr	r3, [pc, #216]	; (8001920 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001846:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800184a:	619a      	str	r2, [r3, #24]
 800184c:	4b33      	ldr	r3, [pc, #204]	; (800191c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	f003 0308 	and.w	r3, r3, #8
 8001854:	2b00      	cmp	r3, #0
 8001856:	d004      	beq.n	8001862 <LCD_IO_WriteCmd8MultipleData8+0x1a6>
 8001858:	4b33      	ldr	r3, [pc, #204]	; (8001928 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 800185a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800185e:	619a      	str	r2, [r3, #24]
 8001860:	e003      	b.n	800186a <LCD_IO_WriteCmd8MultipleData8+0x1ae>
 8001862:	4b31      	ldr	r3, [pc, #196]	; (8001928 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001864:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001868:	619a      	str	r2, [r3, #24]
 800186a:	4b2c      	ldr	r3, [pc, #176]	; (800191c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	f003 0310 	and.w	r3, r3, #16
 8001872:	2b00      	cmp	r3, #0
 8001874:	d004      	beq.n	8001880 <LCD_IO_WriteCmd8MultipleData8+0x1c4>
 8001876:	4b2c      	ldr	r3, [pc, #176]	; (8001928 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001878:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800187c:	619a      	str	r2, [r3, #24]
 800187e:	e003      	b.n	8001888 <LCD_IO_WriteCmd8MultipleData8+0x1cc>
 8001880:	4b29      	ldr	r3, [pc, #164]	; (8001928 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001882:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001886:	619a      	str	r2, [r3, #24]
 8001888:	4b24      	ldr	r3, [pc, #144]	; (800191c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	f003 0320 	and.w	r3, r3, #32
 8001890:	2b00      	cmp	r3, #0
 8001892:	d004      	beq.n	800189e <LCD_IO_WriteCmd8MultipleData8+0x1e2>
 8001894:	4b24      	ldr	r3, [pc, #144]	; (8001928 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001896:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800189a:	619a      	str	r2, [r3, #24]
 800189c:	e003      	b.n	80018a6 <LCD_IO_WriteCmd8MultipleData8+0x1ea>
 800189e:	4b22      	ldr	r3, [pc, #136]	; (8001928 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 80018a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018a4:	619a      	str	r2, [r3, #24]
 80018a6:	4b1d      	ldr	r3, [pc, #116]	; (800191c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d004      	beq.n	80018bc <LCD_IO_WriteCmd8MultipleData8+0x200>
 80018b2:	4b1e      	ldr	r3, [pc, #120]	; (800192c <LCD_IO_WriteCmd8MultipleData8+0x270>)
 80018b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018b8:	619a      	str	r2, [r3, #24]
 80018ba:	e003      	b.n	80018c4 <LCD_IO_WriteCmd8MultipleData8+0x208>
 80018bc:	4b1b      	ldr	r3, [pc, #108]	; (800192c <LCD_IO_WriteCmd8MultipleData8+0x270>)
 80018be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018c2:	619a      	str	r2, [r3, #24]
 80018c4:	4b15      	ldr	r3, [pc, #84]	; (800191c <LCD_IO_WriteCmd8MultipleData8+0x260>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	b25b      	sxtb	r3, r3
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	da04      	bge.n	80018d8 <LCD_IO_WriteCmd8MultipleData8+0x21c>
 80018ce:	4b14      	ldr	r3, [pc, #80]	; (8001920 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 80018d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018d4:	619a      	str	r2, [r3, #24]
 80018d6:	e003      	b.n	80018e0 <LCD_IO_WriteCmd8MultipleData8+0x224>
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 80018da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018de:	619a      	str	r2, [r3, #24]
 80018e0:	4b0d      	ldr	r3, [pc, #52]	; (8001918 <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 80018e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018e6:	619a      	str	r2, [r3, #24]
 80018e8:	2008      	movs	r0, #8
 80018ea:	f7ff f991 	bl	8000c10 <LCD_IO_Delay>
 80018ee:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	619a      	str	r2, [r3, #24]
    pData ++;
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	3301      	adds	r3, #1
 80018f8:	60bb      	str	r3, [r7, #8]
  while(Size--)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	1e5a      	subs	r2, r3, #1
 80018fe:	607a      	str	r2, [r7, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	f47f af72 	bne.w	80017ea <LCD_IO_WriteCmd8MultipleData8+0x12e>
  }
  LCD_CS_OFF;
 8001906:	4b03      	ldr	r3, [pc, #12]	; (8001914 <LCD_IO_WriteCmd8MultipleData8+0x258>)
 8001908:	2202      	movs	r2, #2
 800190a:	619a      	str	r2, [r3, #24]
}
 800190c:	bf00      	nop
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	58020400 	.word	0x58020400
 8001918:	58020800 	.word	0x58020800
 800191c:	24000169 	.word	0x24000169
 8001920:	58021800 	.word	0x58021800
 8001924:	58020c00 	.word	0x58020c00
 8001928:	58021000 	.word	0x58021000
 800192c:	58020000 	.word	0x58020000

08001930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001930:	b5b0      	push	{r4, r5, r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af04      	add	r7, sp, #16
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8001936:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800193a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800193c:	bf00      	nop
 800193e:	4b6d      	ldr	r3, [pc, #436]	; (8001af4 <main+0x1c4>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d004      	beq.n	8001954 <main+0x24>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	1e5a      	subs	r2, r3, #1
 800194e:	607a      	str	r2, [r7, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	dcf4      	bgt.n	800193e <main+0xe>
  if ( timeout < 0 )
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	da01      	bge.n	800195e <main+0x2e>
  {
  Error_Handler();
 800195a:	f000 fb08 	bl	8001f6e <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800195e:	f000 fd9d 	bl	800249c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001962:	f000 f8e3 	bl	8001b2c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8001966:	4b63      	ldr	r3, [pc, #396]	; (8001af4 <main+0x1c4>)
 8001968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800196c:	4a61      	ldr	r2, [pc, #388]	; (8001af4 <main+0x1c4>)
 800196e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001972:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001976:	4b5f      	ldr	r3, [pc, #380]	; (8001af4 <main+0x1c4>)
 8001978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800197c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001980:	603b      	str	r3, [r7, #0]
 8001982:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001984:	2000      	movs	r0, #0
 8001986:	f002 fae3 	bl	8003f50 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800198a:	2100      	movs	r1, #0
 800198c:	2000      	movs	r0, #0
 800198e:	f002 faf9 	bl	8003f84 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8001992:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001996:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001998:	bf00      	nop
 800199a:	4b56      	ldr	r3, [pc, #344]	; (8001af4 <main+0x1c4>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d104      	bne.n	80019b0 <main+0x80>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	1e5a      	subs	r2, r3, #1
 80019aa:	607a      	str	r2, [r7, #4]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	dcf4      	bgt.n	800199a <main+0x6a>
if ( timeout < 0 )
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	da01      	bge.n	80019ba <main+0x8a>
{
Error_Handler();
 80019b6:	f000 fada 	bl	8001f6e <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019ba:	f000 fa21 	bl	8001e00 <MX_GPIO_Init>
  MX_ETH_Init();
 80019be:	f000 f93b 	bl	8001c38 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80019c2:	f000 f985 	bl	8001cd0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80019c6:	f000 f9cf 	bl	8001d68 <MX_USB_OTG_FS_PCD_Init>
  MX_DMA_Init();
 80019ca:	f000 f9ff 	bl	8001dcc <MX_DMA_Init>
  MX_LIBJPEG_Init();
 80019ce:	f006 fbd1 	bl	8008174 <MX_LIBJPEG_Init>
  /* USER CODE BEGIN 2 */

  	ili9486_Init();
 80019d2:	f7fe ff11 	bl	80007f8 <ili9486_Init>
    ili9486_DisplayOn();
 80019d6:	f7fe fef3 	bl	80007c0 <ili9486_DisplayOn>
    ili9486_FillRect(0, 0, 480, 320, cl_BLACK);
 80019da:	2300      	movs	r3, #0
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80019e2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80019e6:	2100      	movs	r1, #0
 80019e8:	2000      	movs	r0, #0
 80019ea:	f7fe ffc7 	bl	800097c <ili9486_FillRect>
    ili_scr_1();
 80019ee:	f000 fa7b 	bl	8001ee8 <ili_scr_1>
    ili9486_WriteString(20, 20, "-----------STAMPR------------", Font20, cl_WHITE, cl_BLACK);
 80019f2:	4b41      	ldr	r3, [pc, #260]	; (8001af8 <main+0x1c8>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	9202      	str	r2, [sp, #8]
 80019f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019fc:	9201      	str	r2, [sp, #4]
 80019fe:	685a      	ldr	r2, [r3, #4]
 8001a00:	9200      	str	r2, [sp, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a3d      	ldr	r2, [pc, #244]	; (8001afc <main+0x1cc>)
 8001a06:	2114      	movs	r1, #20
 8001a08:	2014      	movs	r0, #20
 8001a0a:	f7ff f8b4 	bl	8000b76 <ili9486_WriteString>
    ili9486_WriteString(420, 20, "OWL_HOR", Font12, cl_BLUE, cl_BLACK);
 8001a0e:	4b3c      	ldr	r3, [pc, #240]	; (8001b00 <main+0x1d0>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	9202      	str	r2, [sp, #8]
 8001a14:	221f      	movs	r2, #31
 8001a16:	9201      	str	r2, [sp, #4]
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	9200      	str	r2, [sp, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a39      	ldr	r2, [pc, #228]	; (8001b04 <main+0x1d4>)
 8001a20:	2114      	movs	r1, #20
 8001a22:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8001a26:	f7ff f8a6 	bl	8000b76 <ili9486_WriteString>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(HAL_GetTick() - timestamp_one >= 1000){
 8001a2a:	f000 fdbd 	bl	80025a8 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	4b35      	ldr	r3, [pc, #212]	; (8001b08 <main+0x1d8>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a3a:	d3f6      	bcc.n	8001a2a <main+0xfa>
	  		  timestamp_one = HAL_GetTick();
 8001a3c:	f000 fdb4 	bl	80025a8 <HAL_GetTick>
 8001a40:	4603      	mov	r3, r0
 8001a42:	4a31      	ldr	r2, [pc, #196]	; (8001b08 <main+0x1d8>)
 8001a44:	6013      	str	r3, [r2, #0]
	  		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001a46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a4a:	4830      	ldr	r0, [pc, #192]	; (8001b0c <main+0x1dc>)
 8001a4c:	f002 fa65 	bl	8003f1a <HAL_GPIO_TogglePin>

	  		//HAL_RTC_GetTime(&hrtc, &NowTim7, RTC_FORMAT_BCD);
	  		//HAL_RTC_GetDate(&hrtc, &NowDat7, RTC_FORMAT_BCD);
	  		NowDat7 = SRAM4->NowDates;
 8001a50:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001a54:	4a2e      	ldr	r2, [pc, #184]	; (8001b10 <main+0x1e0>)
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	6013      	str	r3, [r2, #0]
	  		NowTim7 = SRAM4->NowTimes;
 8001a5a:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001a5e:	4a2d      	ldr	r2, [pc, #180]	; (8001b14 <main+0x1e4>)
 8001a60:	4615      	mov	r5, r2
 8001a62:	1d1c      	adds	r4, r3, #4
 8001a64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a68:	6823      	ldr	r3, [r4, #0]
 8001a6a:	602b      	str	r3, [r5, #0]

	  		sprintf(txtdispBF, "Time: %02x:%02x:%02x",
	  				  NowTim7.Hours, NowTim7.Minutes, NowTim7.Seconds);
 8001a6c:	4b29      	ldr	r3, [pc, #164]	; (8001b14 <main+0x1e4>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
	  		sprintf(txtdispBF, "Time: %02x:%02x:%02x",
 8001a70:	461a      	mov	r2, r3
	  				  NowTim7.Hours, NowTim7.Minutes, NowTim7.Seconds);
 8001a72:	4b28      	ldr	r3, [pc, #160]	; (8001b14 <main+0x1e4>)
 8001a74:	785b      	ldrb	r3, [r3, #1]
	  		sprintf(txtdispBF, "Time: %02x:%02x:%02x",
 8001a76:	4619      	mov	r1, r3
	  				  NowTim7.Hours, NowTim7.Minutes, NowTim7.Seconds);
 8001a78:	4b26      	ldr	r3, [pc, #152]	; (8001b14 <main+0x1e4>)
 8001a7a:	789b      	ldrb	r3, [r3, #2]
	  		sprintf(txtdispBF, "Time: %02x:%02x:%02x",
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4925      	ldr	r1, [pc, #148]	; (8001b18 <main+0x1e8>)
 8001a82:	4826      	ldr	r0, [pc, #152]	; (8001b1c <main+0x1ec>)
 8001a84:	f006 fcb0 	bl	80083e8 <siprintf>
	  		//ili9486_FillRect(Xpos, Ypos, Xsize, Ysize, RGBCode);
	  		// Fill rect and fill text with no bg version
	  		ili9486_WriteString(100, 60, txtdispBF, Font24, cl_YELLOW, cl_BLACK);
 8001a88:	4b25      	ldr	r3, [pc, #148]	; (8001b20 <main+0x1f0>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	9202      	str	r2, [sp, #8]
 8001a8e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001a92:	9201      	str	r2, [sp, #4]
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	9200      	str	r2, [sp, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a20      	ldr	r2, [pc, #128]	; (8001b1c <main+0x1ec>)
 8001a9c:	213c      	movs	r1, #60	; 0x3c
 8001a9e:	2064      	movs	r0, #100	; 0x64
 8001aa0:	f7ff f869 	bl	8000b76 <ili9486_WriteString>
	  		sprintf(txtdispBF, "Date: %02x/%02x/%02x",
	  			  				  NowDat7.Date, NowDat7.Month, NowDat7.Year);
 8001aa4:	4b1a      	ldr	r3, [pc, #104]	; (8001b10 <main+0x1e0>)
 8001aa6:	789b      	ldrb	r3, [r3, #2]
	  		sprintf(txtdispBF, "Date: %02x/%02x/%02x",
 8001aa8:	461a      	mov	r2, r3
	  			  				  NowDat7.Date, NowDat7.Month, NowDat7.Year);
 8001aaa:	4b19      	ldr	r3, [pc, #100]	; (8001b10 <main+0x1e0>)
 8001aac:	785b      	ldrb	r3, [r3, #1]
	  		sprintf(txtdispBF, "Date: %02x/%02x/%02x",
 8001aae:	4619      	mov	r1, r3
	  			  				  NowDat7.Date, NowDat7.Month, NowDat7.Year);
 8001ab0:	4b17      	ldr	r3, [pc, #92]	; (8001b10 <main+0x1e0>)
 8001ab2:	78db      	ldrb	r3, [r3, #3]
	  		sprintf(txtdispBF, "Date: %02x/%02x/%02x",
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	491a      	ldr	r1, [pc, #104]	; (8001b24 <main+0x1f4>)
 8001aba:	4818      	ldr	r0, [pc, #96]	; (8001b1c <main+0x1ec>)
 8001abc:	f006 fc94 	bl	80083e8 <siprintf>
	  		HAL_UART_Transmit(&huart3, (uint8_t*)txtdispBF, strlen(txtdispBF),30);
 8001ac0:	4816      	ldr	r0, [pc, #88]	; (8001b1c <main+0x1ec>)
 8001ac2:	f7fe fc0d 	bl	80002e0 <strlen>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	231e      	movs	r3, #30
 8001acc:	4913      	ldr	r1, [pc, #76]	; (8001b1c <main+0x1ec>)
 8001ace:	4816      	ldr	r0, [pc, #88]	; (8001b28 <main+0x1f8>)
 8001ad0:	f004 ff90 	bl	80069f4 <HAL_UART_Transmit>
	  		ili9486_WriteString(100, 85, txtdispBF, Font24, cl_YELLOW, cl_BLACK);
 8001ad4:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <main+0x1f0>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	9202      	str	r2, [sp, #8]
 8001ada:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001ade:	9201      	str	r2, [sp, #4]
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	9200      	str	r2, [sp, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a0d      	ldr	r2, [pc, #52]	; (8001b1c <main+0x1ec>)
 8001ae8:	2155      	movs	r1, #85	; 0x55
 8001aea:	2064      	movs	r0, #100	; 0x64
 8001aec:	f7ff f843 	bl	8000b76 <ili9486_WriteString>
	  if(HAL_GetTick() - timestamp_one >= 1000){
 8001af0:	e79b      	b.n	8001a2a <main+0xfa>
 8001af2:	bf00      	nop
 8001af4:	58024400 	.word	0x58024400
 8001af8:	24000010 	.word	0x24000010
 8001afc:	08008b98 	.word	0x08008b98
 8001b00:	24000008 	.word	0x24000008
 8001b04:	08008bb8 	.word	0x08008bb8
 8001b08:	24000970 	.word	0x24000970
 8001b0c:	58020400 	.word	0x58020400
 8001b10:	2400096c 	.word	0x2400096c
 8001b14:	24000958 	.word	0x24000958
 8001b18:	08008bc0 	.word	0x08008bc0
 8001b1c:	240008e0 	.word	0x240008e0
 8001b20:	24000018 	.word	0x24000018
 8001b24:	08008bd8 	.word	0x08008bd8
 8001b28:	24000254 	.word	0x24000254

08001b2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b09c      	sub	sp, #112	; 0x70
 8001b30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b36:	224c      	movs	r2, #76	; 0x4c
 8001b38:	2100      	movs	r1, #0
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f006 fb5c 	bl	80081f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b40:	1d3b      	adds	r3, r7, #4
 8001b42:	2220      	movs	r2, #32
 8001b44:	2100      	movs	r1, #0
 8001b46:	4618      	mov	r0, r3
 8001b48:	f006 fb56 	bl	80081f8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001b4c:	2004      	movs	r0, #4
 8001b4e:	f002 fb75 	bl	800423c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001b52:	2300      	movs	r3, #0
 8001b54:	603b      	str	r3, [r7, #0]
 8001b56:	4b35      	ldr	r3, [pc, #212]	; (8001c2c <SystemClock_Config+0x100>)
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	4a34      	ldr	r2, [pc, #208]	; (8001c2c <SystemClock_Config+0x100>)
 8001b5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b60:	6193      	str	r3, [r2, #24]
 8001b62:	4b32      	ldr	r3, [pc, #200]	; (8001c2c <SystemClock_Config+0x100>)
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b6a:	603b      	str	r3, [r7, #0]
 8001b6c:	4b30      	ldr	r3, [pc, #192]	; (8001c30 <SystemClock_Config+0x104>)
 8001b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b70:	4a2f      	ldr	r2, [pc, #188]	; (8001c30 <SystemClock_Config+0x104>)
 8001b72:	f043 0301 	orr.w	r3, r3, #1
 8001b76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001b78:	4b2d      	ldr	r3, [pc, #180]	; (8001c30 <SystemClock_Config+0x104>)
 8001b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	603b      	str	r3, [r7, #0]
 8001b82:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001b84:	bf00      	nop
 8001b86:	4b29      	ldr	r3, [pc, #164]	; (8001c2c <SystemClock_Config+0x100>)
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b92:	d1f8      	bne.n	8001b86 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001b94:	4b27      	ldr	r3, [pc, #156]	; (8001c34 <SystemClock_Config+0x108>)
 8001b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b98:	f023 0303 	bic.w	r3, r3, #3
 8001b9c:	4a25      	ldr	r2, [pc, #148]	; (8001c34 <SystemClock_Config+0x108>)
 8001b9e:	f043 0302 	orr.w	r3, r3, #2
 8001ba2:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001ba4:	2309      	movs	r3, #9
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001ba8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001bac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8001bbe:	2378      	movs	r3, #120	; 0x78
 8001bc0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001bce:	230c      	movs	r3, #12
 8001bd0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bde:	4618      	mov	r0, r3
 8001be0:	f002 fb96 	bl	8004310 <HAL_RCC_OscConfig>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001bea:	f000 f9c0 	bl	8001f6e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bee:	233f      	movs	r3, #63	; 0x3f
 8001bf0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001bfa:	2308      	movs	r3, #8
 8001bfc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001bfe:	2340      	movs	r3, #64	; 0x40
 8001c00:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001c02:	2340      	movs	r3, #64	; 0x40
 8001c04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001c06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c0a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001c0c:	2340      	movs	r3, #64	; 0x40
 8001c0e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c10:	1d3b      	adds	r3, r7, #4
 8001c12:	2104      	movs	r1, #4
 8001c14:	4618      	mov	r0, r3
 8001c16:	f002 ffa9 	bl	8004b6c <HAL_RCC_ClockConfig>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8001c20:	f000 f9a5 	bl	8001f6e <Error_Handler>
  }
}
 8001c24:	bf00      	nop
 8001c26:	3770      	adds	r7, #112	; 0x70
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	58024800 	.word	0x58024800
 8001c30:	58000400 	.word	0x58000400
 8001c34:	58024400 	.word	0x58024400

08001c38 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001c3c:	4b1e      	ldr	r3, [pc, #120]	; (8001cb8 <MX_ETH_Init+0x80>)
 8001c3e:	4a1f      	ldr	r2, [pc, #124]	; (8001cbc <MX_ETH_Init+0x84>)
 8001c40:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001c42:	4b1f      	ldr	r3, [pc, #124]	; (8001cc0 <MX_ETH_Init+0x88>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001c48:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <MX_ETH_Init+0x88>)
 8001c4a:	2280      	movs	r2, #128	; 0x80
 8001c4c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001c4e:	4b1c      	ldr	r3, [pc, #112]	; (8001cc0 <MX_ETH_Init+0x88>)
 8001c50:	22e1      	movs	r2, #225	; 0xe1
 8001c52:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001c54:	4b1a      	ldr	r3, [pc, #104]	; (8001cc0 <MX_ETH_Init+0x88>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001c5a:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <MX_ETH_Init+0x88>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001c60:	4b17      	ldr	r3, [pc, #92]	; (8001cc0 <MX_ETH_Init+0x88>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001c66:	4b14      	ldr	r3, [pc, #80]	; (8001cb8 <MX_ETH_Init+0x80>)
 8001c68:	4a15      	ldr	r2, [pc, #84]	; (8001cc0 <MX_ETH_Init+0x88>)
 8001c6a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001c6c:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <MX_ETH_Init+0x80>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001c72:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <MX_ETH_Init+0x80>)
 8001c74:	4a13      	ldr	r2, [pc, #76]	; (8001cc4 <MX_ETH_Init+0x8c>)
 8001c76:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001c78:	4b0f      	ldr	r3, [pc, #60]	; (8001cb8 <MX_ETH_Init+0x80>)
 8001c7a:	4a13      	ldr	r2, [pc, #76]	; (8001cc8 <MX_ETH_Init+0x90>)
 8001c7c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001c7e:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <MX_ETH_Init+0x80>)
 8001c80:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001c84:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001c86:	480c      	ldr	r0, [pc, #48]	; (8001cb8 <MX_ETH_Init+0x80>)
 8001c88:	f001 fb5a 	bl	8003340 <HAL_ETH_Init>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8001c92:	f000 f96c 	bl	8001f6e <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001c96:	2238      	movs	r2, #56	; 0x38
 8001c98:	2100      	movs	r1, #0
 8001c9a:	480c      	ldr	r0, [pc, #48]	; (8001ccc <MX_ETH_Init+0x94>)
 8001c9c:	f006 faac 	bl	80081f8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001ca0:	4b0a      	ldr	r3, [pc, #40]	; (8001ccc <MX_ETH_Init+0x94>)
 8001ca2:	2221      	movs	r2, #33	; 0x21
 8001ca4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001ca6:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <MX_ETH_Init+0x94>)
 8001ca8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001cac:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001cae:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <MX_ETH_Init+0x94>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001cb4:	bf00      	nop
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	240001a4 	.word	0x240001a4
 8001cbc:	40028000 	.word	0x40028000
 8001cc0:	24000974 	.word	0x24000974
 8001cc4:	240000ec 	.word	0x240000ec
 8001cc8:	2400008c 	.word	0x2400008c
 8001ccc:	2400016c 	.word	0x2400016c

08001cd0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001cd4:	4b22      	ldr	r3, [pc, #136]	; (8001d60 <MX_USART3_UART_Init+0x90>)
 8001cd6:	4a23      	ldr	r2, [pc, #140]	; (8001d64 <MX_USART3_UART_Init+0x94>)
 8001cd8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001cda:	4b21      	ldr	r3, [pc, #132]	; (8001d60 <MX_USART3_UART_Init+0x90>)
 8001cdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ce0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ce2:	4b1f      	ldr	r3, [pc, #124]	; (8001d60 <MX_USART3_UART_Init+0x90>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ce8:	4b1d      	ldr	r3, [pc, #116]	; (8001d60 <MX_USART3_UART_Init+0x90>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001cee:	4b1c      	ldr	r3, [pc, #112]	; (8001d60 <MX_USART3_UART_Init+0x90>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001cf4:	4b1a      	ldr	r3, [pc, #104]	; (8001d60 <MX_USART3_UART_Init+0x90>)
 8001cf6:	220c      	movs	r2, #12
 8001cf8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cfa:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <MX_USART3_UART_Init+0x90>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d00:	4b17      	ldr	r3, [pc, #92]	; (8001d60 <MX_USART3_UART_Init+0x90>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d06:	4b16      	ldr	r3, [pc, #88]	; (8001d60 <MX_USART3_UART_Init+0x90>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d0c:	4b14      	ldr	r3, [pc, #80]	; (8001d60 <MX_USART3_UART_Init+0x90>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d12:	4b13      	ldr	r3, [pc, #76]	; (8001d60 <MX_USART3_UART_Init+0x90>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d18:	4811      	ldr	r0, [pc, #68]	; (8001d60 <MX_USART3_UART_Init+0x90>)
 8001d1a:	f004 fe1b 	bl	8006954 <HAL_UART_Init>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001d24:	f000 f923 	bl	8001f6e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d28:	2100      	movs	r1, #0
 8001d2a:	480d      	ldr	r0, [pc, #52]	; (8001d60 <MX_USART3_UART_Init+0x90>)
 8001d2c:	f005 fe4e 	bl	80079cc <HAL_UARTEx_SetTxFifoThreshold>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001d36:	f000 f91a 	bl	8001f6e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	4808      	ldr	r0, [pc, #32]	; (8001d60 <MX_USART3_UART_Init+0x90>)
 8001d3e:	f005 fe83 	bl	8007a48 <HAL_UARTEx_SetRxFifoThreshold>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001d48:	f000 f911 	bl	8001f6e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001d4c:	4804      	ldr	r0, [pc, #16]	; (8001d60 <MX_USART3_UART_Init+0x90>)
 8001d4e:	f005 fe04 	bl	800795a <HAL_UARTEx_DisableFifoMode>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001d58:	f000 f909 	bl	8001f6e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d5c:	bf00      	nop
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	24000254 	.word	0x24000254
 8001d64:	40004800 	.word	0x40004800

08001d68 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001d6c:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d6e:	4a16      	ldr	r2, [pc, #88]	; (8001dc8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001d70:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001d72:	4b14      	ldr	r3, [pc, #80]	; (8001dc4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d74:	2209      	movs	r2, #9
 8001d76:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001d78:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001d7e:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001d84:	4b0f      	ldr	r3, [pc, #60]	; (8001dc4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d86:	2202      	movs	r2, #2
 8001d88:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001d8a:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001d90:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001d96:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001d9c:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001da2:	4b08      	ldr	r3, [pc, #32]	; (8001dc4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001da8:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001dae:	4805      	ldr	r0, [pc, #20]	; (8001dc4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001db0:	f002 f8fc 	bl	8003fac <HAL_PCD_Init>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001dba:	f000 f8d8 	bl	8001f6e <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	240003d4 	.word	0x240003d4
 8001dc8:	40080000 	.word	0x40080000

08001dcc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001dd2:	4b0a      	ldr	r3, [pc, #40]	; (8001dfc <MX_DMA_Init+0x30>)
 8001dd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001dd8:	4a08      	ldr	r2, [pc, #32]	; (8001dfc <MX_DMA_Init+0x30>)
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001de2:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <MX_DMA_Init+0x30>)
 8001de4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	607b      	str	r3, [r7, #4]
 8001dee:	687b      	ldr	r3, [r7, #4]

}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	58024400 	.word	0x58024400

08001e00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08a      	sub	sp, #40	; 0x28
 8001e04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e06:	f107 0314 	add.w	r3, r7, #20
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	605a      	str	r2, [r3, #4]
 8001e10:	609a      	str	r2, [r3, #8]
 8001e12:	60da      	str	r2, [r3, #12]
 8001e14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e16:	4b32      	ldr	r3, [pc, #200]	; (8001ee0 <MX_GPIO_Init+0xe0>)
 8001e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e1c:	4a30      	ldr	r2, [pc, #192]	; (8001ee0 <MX_GPIO_Init+0xe0>)
 8001e1e:	f043 0304 	orr.w	r3, r3, #4
 8001e22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e26:	4b2e      	ldr	r3, [pc, #184]	; (8001ee0 <MX_GPIO_Init+0xe0>)
 8001e28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	613b      	str	r3, [r7, #16]
 8001e32:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e34:	4b2a      	ldr	r3, [pc, #168]	; (8001ee0 <MX_GPIO_Init+0xe0>)
 8001e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e3a:	4a29      	ldr	r2, [pc, #164]	; (8001ee0 <MX_GPIO_Init+0xe0>)
 8001e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e44:	4b26      	ldr	r3, [pc, #152]	; (8001ee0 <MX_GPIO_Init+0xe0>)
 8001e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e52:	4b23      	ldr	r3, [pc, #140]	; (8001ee0 <MX_GPIO_Init+0xe0>)
 8001e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e58:	4a21      	ldr	r2, [pc, #132]	; (8001ee0 <MX_GPIO_Init+0xe0>)
 8001e5a:	f043 0301 	orr.w	r3, r3, #1
 8001e5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e62:	4b1f      	ldr	r3, [pc, #124]	; (8001ee0 <MX_GPIO_Init+0xe0>)
 8001e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	60bb      	str	r3, [r7, #8]
 8001e6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e70:	4b1b      	ldr	r3, [pc, #108]	; (8001ee0 <MX_GPIO_Init+0xe0>)
 8001e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e76:	4a1a      	ldr	r2, [pc, #104]	; (8001ee0 <MX_GPIO_Init+0xe0>)
 8001e78:	f043 0302 	orr.w	r3, r3, #2
 8001e7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e80:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <MX_GPIO_Init+0xe0>)
 8001e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	607b      	str	r3, [r7, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e8e:	4b14      	ldr	r3, [pc, #80]	; (8001ee0 <MX_GPIO_Init+0xe0>)
 8001e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e94:	4a12      	ldr	r2, [pc, #72]	; (8001ee0 <MX_GPIO_Init+0xe0>)
 8001e96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e9e:	4b10      	ldr	r3, [pc, #64]	; (8001ee0 <MX_GPIO_Init+0xe0>)
 8001ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea8:	603b      	str	r3, [r7, #0]
 8001eaa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001eac:	2200      	movs	r2, #0
 8001eae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001eb2:	480c      	ldr	r0, [pc, #48]	; (8001ee4 <MX_GPIO_Init+0xe4>)
 8001eb4:	f002 f818 	bl	8003ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001eb8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ebc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001eca:	f107 0314 	add.w	r3, r7, #20
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4804      	ldr	r0, [pc, #16]	; (8001ee4 <MX_GPIO_Init+0xe4>)
 8001ed2:	f001 fe59 	bl	8003b88 <HAL_GPIO_Init>

}
 8001ed6:	bf00      	nop
 8001ed8:	3728      	adds	r7, #40	; 0x28
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	58024400 	.word	0x58024400
 8001ee4:	58020400 	.word	0x58020400

08001ee8 <ili_scr_1>:

/* USER CODE BEGIN 4 */
void ili_scr_1(){
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af02      	add	r7, sp, #8

	  ili9486_FillRect(0, 300, 80, 20, cl_RED); // Red
 8001eee:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	2314      	movs	r3, #20
 8001ef6:	2250      	movs	r2, #80	; 0x50
 8001ef8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001efc:	2000      	movs	r0, #0
 8001efe:	f7fe fd3d 	bl	800097c <ili9486_FillRect>
	  ili9486_FillRect(80, 300, 80, 20, cl_GREEN); // Green RGB565
 8001f02:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	2314      	movs	r3, #20
 8001f0a:	2250      	movs	r2, #80	; 0x50
 8001f0c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001f10:	2050      	movs	r0, #80	; 0x50
 8001f12:	f7fe fd33 	bl	800097c <ili9486_FillRect>
	  ili9486_FillRect(160, 300, 80, 20, cl_BLUE); // Blue
 8001f16:	231f      	movs	r3, #31
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	2314      	movs	r3, #20
 8001f1c:	2250      	movs	r2, #80	; 0x50
 8001f1e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001f22:	20a0      	movs	r0, #160	; 0xa0
 8001f24:	f7fe fd2a 	bl	800097c <ili9486_FillRect>

	  ili9486_FillRect(240, 300,  80, 20, cl_CYAN); // C0x07FF
 8001f28:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	2314      	movs	r3, #20
 8001f30:	2250      	movs	r2, #80	; 0x50
 8001f32:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001f36:	20f0      	movs	r0, #240	; 0xf0
 8001f38:	f7fe fd20 	bl	800097c <ili9486_FillRect>
	  ili9486_FillRect(320, 300, 80, 20, cl_MAGENTA); // M 0xF81F
 8001f3c:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8001f40:	9300      	str	r3, [sp, #0]
 8001f42:	2314      	movs	r3, #20
 8001f44:	2250      	movs	r2, #80	; 0x50
 8001f46:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001f4a:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8001f4e:	f7fe fd15 	bl	800097c <ili9486_FillRect>
	  ili9486_FillRect(400, 300, 80, 20, cl_YELLOW); // Y0xFFE0
 8001f52:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001f56:	9300      	str	r3, [sp, #0]
 8001f58:	2314      	movs	r3, #20
 8001f5a:	2250      	movs	r2, #80	; 0x50
 8001f5c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001f60:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001f64:	f7fe fd0a 	bl	800097c <ili9486_FillRect>
	  //ili9486_FillRect(390, 30, 70, 230, cl_BLACK); // K
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f72:	b672      	cpsid	i
}
 8001f74:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f76:	e7fe      	b.n	8001f76 <Error_Handler+0x8>

08001f78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f7e:	4b0a      	ldr	r3, [pc, #40]	; (8001fa8 <HAL_MspInit+0x30>)
 8001f80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f84:	4a08      	ldr	r2, [pc, #32]	; (8001fa8 <HAL_MspInit+0x30>)
 8001f86:	f043 0302 	orr.w	r3, r3, #2
 8001f8a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001f8e:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <HAL_MspInit+0x30>)
 8001f90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	607b      	str	r3, [r7, #4]
 8001f9a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	58024400 	.word	0x58024400

08001fac <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08e      	sub	sp, #56	; 0x38
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a59      	ldr	r2, [pc, #356]	; (8002130 <HAL_ETH_MspInit+0x184>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	f040 80ab 	bne.w	8002126 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001fd0:	4b58      	ldr	r3, [pc, #352]	; (8002134 <HAL_ETH_MspInit+0x188>)
 8001fd2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001fd6:	4a57      	ldr	r2, [pc, #348]	; (8002134 <HAL_ETH_MspInit+0x188>)
 8001fd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fdc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001fe0:	4b54      	ldr	r3, [pc, #336]	; (8002134 <HAL_ETH_MspInit+0x188>)
 8001fe2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001fe6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fea:	623b      	str	r3, [r7, #32]
 8001fec:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001fee:	4b51      	ldr	r3, [pc, #324]	; (8002134 <HAL_ETH_MspInit+0x188>)
 8001ff0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ff4:	4a4f      	ldr	r2, [pc, #316]	; (8002134 <HAL_ETH_MspInit+0x188>)
 8001ff6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ffa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001ffe:	4b4d      	ldr	r3, [pc, #308]	; (8002134 <HAL_ETH_MspInit+0x188>)
 8002000:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002008:	61fb      	str	r3, [r7, #28]
 800200a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800200c:	4b49      	ldr	r3, [pc, #292]	; (8002134 <HAL_ETH_MspInit+0x188>)
 800200e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002012:	4a48      	ldr	r2, [pc, #288]	; (8002134 <HAL_ETH_MspInit+0x188>)
 8002014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002018:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800201c:	4b45      	ldr	r3, [pc, #276]	; (8002134 <HAL_ETH_MspInit+0x188>)
 800201e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002026:	61bb      	str	r3, [r7, #24]
 8002028:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800202a:	4b42      	ldr	r3, [pc, #264]	; (8002134 <HAL_ETH_MspInit+0x188>)
 800202c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002030:	4a40      	ldr	r2, [pc, #256]	; (8002134 <HAL_ETH_MspInit+0x188>)
 8002032:	f043 0304 	orr.w	r3, r3, #4
 8002036:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800203a:	4b3e      	ldr	r3, [pc, #248]	; (8002134 <HAL_ETH_MspInit+0x188>)
 800203c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	617b      	str	r3, [r7, #20]
 8002046:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002048:	4b3a      	ldr	r3, [pc, #232]	; (8002134 <HAL_ETH_MspInit+0x188>)
 800204a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800204e:	4a39      	ldr	r2, [pc, #228]	; (8002134 <HAL_ETH_MspInit+0x188>)
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002058:	4b36      	ldr	r3, [pc, #216]	; (8002134 <HAL_ETH_MspInit+0x188>)
 800205a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	613b      	str	r3, [r7, #16]
 8002064:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002066:	4b33      	ldr	r3, [pc, #204]	; (8002134 <HAL_ETH_MspInit+0x188>)
 8002068:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800206c:	4a31      	ldr	r2, [pc, #196]	; (8002134 <HAL_ETH_MspInit+0x188>)
 800206e:	f043 0302 	orr.w	r3, r3, #2
 8002072:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002076:	4b2f      	ldr	r3, [pc, #188]	; (8002134 <HAL_ETH_MspInit+0x188>)
 8002078:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002084:	4b2b      	ldr	r3, [pc, #172]	; (8002134 <HAL_ETH_MspInit+0x188>)
 8002086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800208a:	4a2a      	ldr	r2, [pc, #168]	; (8002134 <HAL_ETH_MspInit+0x188>)
 800208c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002090:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002094:	4b27      	ldr	r3, [pc, #156]	; (8002134 <HAL_ETH_MspInit+0x188>)
 8002096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800209a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800209e:	60bb      	str	r3, [r7, #8]
 80020a0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80020a2:	2332      	movs	r3, #50	; 0x32
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a6:	2302      	movs	r3, #2
 80020a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ae:	2300      	movs	r3, #0
 80020b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020b2:	230b      	movs	r3, #11
 80020b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ba:	4619      	mov	r1, r3
 80020bc:	481e      	ldr	r0, [pc, #120]	; (8002138 <HAL_ETH_MspInit+0x18c>)
 80020be:	f001 fd63 	bl	8003b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80020c2:	2386      	movs	r3, #134	; 0x86
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c6:	2302      	movs	r3, #2
 80020c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ce:	2300      	movs	r3, #0
 80020d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020d2:	230b      	movs	r3, #11
 80020d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020da:	4619      	mov	r1, r3
 80020dc:	4817      	ldr	r0, [pc, #92]	; (800213c <HAL_ETH_MspInit+0x190>)
 80020de:	f001 fd53 	bl	8003b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80020e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e8:	2302      	movs	r3, #2
 80020ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f0:	2300      	movs	r3, #0
 80020f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020f4:	230b      	movs	r3, #11
 80020f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020fc:	4619      	mov	r1, r3
 80020fe:	4810      	ldr	r0, [pc, #64]	; (8002140 <HAL_ETH_MspInit+0x194>)
 8002100:	f001 fd42 	bl	8003b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8002104:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210a:	2302      	movs	r3, #2
 800210c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210e:	2300      	movs	r3, #0
 8002110:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002112:	2300      	movs	r3, #0
 8002114:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002116:	230b      	movs	r3, #11
 8002118:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800211a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800211e:	4619      	mov	r1, r3
 8002120:	4808      	ldr	r0, [pc, #32]	; (8002144 <HAL_ETH_MspInit+0x198>)
 8002122:	f001 fd31 	bl	8003b88 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002126:	bf00      	nop
 8002128:	3738      	adds	r7, #56	; 0x38
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40028000 	.word	0x40028000
 8002134:	58024400 	.word	0x58024400
 8002138:	58020800 	.word	0x58020800
 800213c:	58020000 	.word	0x58020000
 8002140:	58020400 	.word	0x58020400
 8002144:	58021800 	.word	0x58021800

08002148 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b0b2      	sub	sp, #200	; 0xc8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002150:	f107 030c 	add.w	r3, r7, #12
 8002154:	22bc      	movs	r2, #188	; 0xbc
 8002156:	2100      	movs	r1, #0
 8002158:	4618      	mov	r0, r3
 800215a:	f006 f84d 	bl	80081f8 <memset>
  if(huart->Instance==USART3)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a3f      	ldr	r2, [pc, #252]	; (8002260 <HAL_UART_MspInit+0x118>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d177      	bne.n	8002258 <HAL_UART_MspInit+0x110>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002168:	2302      	movs	r3, #2
 800216a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800216c:	2300      	movs	r3, #0
 800216e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002172:	f107 030c 	add.w	r3, r7, #12
 8002176:	4618      	mov	r0, r3
 8002178:	f003 f884 	bl	8005284 <HAL_RCCEx_PeriphCLKConfig>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <HAL_UART_MspInit+0x3e>
    {
      Error_Handler();
 8002182:	f7ff fef4 	bl	8001f6e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002186:	4b37      	ldr	r3, [pc, #220]	; (8002264 <HAL_UART_MspInit+0x11c>)
 8002188:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800218c:	4a35      	ldr	r2, [pc, #212]	; (8002264 <HAL_UART_MspInit+0x11c>)
 800218e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002192:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002196:	4b33      	ldr	r3, [pc, #204]	; (8002264 <HAL_UART_MspInit+0x11c>)
 8002198:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800219c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021a0:	60bb      	str	r3, [r7, #8]
 80021a2:	68bb      	ldr	r3, [r7, #8]

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 80021a4:	4b30      	ldr	r3, [pc, #192]	; (8002268 <HAL_UART_MspInit+0x120>)
 80021a6:	4a31      	ldr	r2, [pc, #196]	; (800226c <HAL_UART_MspInit+0x124>)
 80021a8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80021aa:	4b2f      	ldr	r3, [pc, #188]	; (8002268 <HAL_UART_MspInit+0x120>)
 80021ac:	222d      	movs	r2, #45	; 0x2d
 80021ae:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021b0:	4b2d      	ldr	r3, [pc, #180]	; (8002268 <HAL_UART_MspInit+0x120>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021b6:	4b2c      	ldr	r3, [pc, #176]	; (8002268 <HAL_UART_MspInit+0x120>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021bc:	4b2a      	ldr	r3, [pc, #168]	; (8002268 <HAL_UART_MspInit+0x120>)
 80021be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021c2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021c4:	4b28      	ldr	r3, [pc, #160]	; (8002268 <HAL_UART_MspInit+0x120>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021ca:	4b27      	ldr	r3, [pc, #156]	; (8002268 <HAL_UART_MspInit+0x120>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80021d0:	4b25      	ldr	r3, [pc, #148]	; (8002268 <HAL_UART_MspInit+0x120>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021d6:	4b24      	ldr	r3, [pc, #144]	; (8002268 <HAL_UART_MspInit+0x120>)
 80021d8:	2200      	movs	r2, #0
 80021da:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021dc:	4b22      	ldr	r3, [pc, #136]	; (8002268 <HAL_UART_MspInit+0x120>)
 80021de:	2200      	movs	r2, #0
 80021e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80021e2:	4821      	ldr	r0, [pc, #132]	; (8002268 <HAL_UART_MspInit+0x120>)
 80021e4:	f000 fb14 	bl	8002810 <HAL_DMA_Init>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <HAL_UART_MspInit+0xaa>
    {
      Error_Handler();
 80021ee:	f7ff febe 	bl	8001f6e <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a1c      	ldr	r2, [pc, #112]	; (8002268 <HAL_UART_MspInit+0x120>)
 80021f6:	67da      	str	r2, [r3, #124]	; 0x7c
 80021f8:	4a1b      	ldr	r2, [pc, #108]	; (8002268 <HAL_UART_MspInit+0x120>)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 80021fe:	4b1c      	ldr	r3, [pc, #112]	; (8002270 <HAL_UART_MspInit+0x128>)
 8002200:	4a1c      	ldr	r2, [pc, #112]	; (8002274 <HAL_UART_MspInit+0x12c>)
 8002202:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002204:	4b1a      	ldr	r3, [pc, #104]	; (8002270 <HAL_UART_MspInit+0x128>)
 8002206:	222e      	movs	r2, #46	; 0x2e
 8002208:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800220a:	4b19      	ldr	r3, [pc, #100]	; (8002270 <HAL_UART_MspInit+0x128>)
 800220c:	2240      	movs	r2, #64	; 0x40
 800220e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002210:	4b17      	ldr	r3, [pc, #92]	; (8002270 <HAL_UART_MspInit+0x128>)
 8002212:	2200      	movs	r2, #0
 8002214:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002216:	4b16      	ldr	r3, [pc, #88]	; (8002270 <HAL_UART_MspInit+0x128>)
 8002218:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800221c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800221e:	4b14      	ldr	r3, [pc, #80]	; (8002270 <HAL_UART_MspInit+0x128>)
 8002220:	2200      	movs	r2, #0
 8002222:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002224:	4b12      	ldr	r3, [pc, #72]	; (8002270 <HAL_UART_MspInit+0x128>)
 8002226:	2200      	movs	r2, #0
 8002228:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800222a:	4b11      	ldr	r3, [pc, #68]	; (8002270 <HAL_UART_MspInit+0x128>)
 800222c:	2200      	movs	r2, #0
 800222e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002230:	4b0f      	ldr	r3, [pc, #60]	; (8002270 <HAL_UART_MspInit+0x128>)
 8002232:	2200      	movs	r2, #0
 8002234:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002236:	4b0e      	ldr	r3, [pc, #56]	; (8002270 <HAL_UART_MspInit+0x128>)
 8002238:	2200      	movs	r2, #0
 800223a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800223c:	480c      	ldr	r0, [pc, #48]	; (8002270 <HAL_UART_MspInit+0x128>)
 800223e:	f000 fae7 	bl	8002810 <HAL_DMA_Init>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <HAL_UART_MspInit+0x104>
    {
      Error_Handler();
 8002248:	f7ff fe91 	bl	8001f6e <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a08      	ldr	r2, [pc, #32]	; (8002270 <HAL_UART_MspInit+0x128>)
 8002250:	679a      	str	r2, [r3, #120]	; 0x78
 8002252:	4a07      	ldr	r2, [pc, #28]	; (8002270 <HAL_UART_MspInit+0x128>)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002258:	bf00      	nop
 800225a:	37c8      	adds	r7, #200	; 0xc8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40004800 	.word	0x40004800
 8002264:	58024400 	.word	0x58024400
 8002268:	240002e4 	.word	0x240002e4
 800226c:	40020010 	.word	0x40020010
 8002270:	2400035c 	.word	0x2400035c
 8002274:	40020028 	.word	0x40020028

08002278 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b0b8      	sub	sp, #224	; 0xe0
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002280:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	60da      	str	r2, [r3, #12]
 800228e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002290:	f107 0310 	add.w	r3, r7, #16
 8002294:	22bc      	movs	r2, #188	; 0xbc
 8002296:	2100      	movs	r1, #0
 8002298:	4618      	mov	r0, r3
 800229a:	f005 ffad 	bl	80081f8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a36      	ldr	r2, [pc, #216]	; (800237c <HAL_PCD_MspInit+0x104>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d165      	bne.n	8002374 <HAL_PCD_MspInit+0xfc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80022a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80022ac:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 80022ae:	2301      	movs	r3, #1
 80022b0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 80022b2:	2318      	movs	r3, #24
 80022b4:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80022b6:	2302      	movs	r3, #2
 80022b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 80022ba:	2304      	movs	r3, #4
 80022bc:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80022be:	2302      	movs	r3, #2
 80022c0:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80022c2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80022c6:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80022cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022d4:	f107 0310 	add.w	r3, r7, #16
 80022d8:	4618      	mov	r0, r3
 80022da:	f002 ffd3 	bl	8005284 <HAL_RCCEx_PeriphCLKConfig>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80022e4:	f7ff fe43 	bl	8001f6e <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80022e8:	f002 f802 	bl	80042f0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ec:	4b24      	ldr	r3, [pc, #144]	; (8002380 <HAL_PCD_MspInit+0x108>)
 80022ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022f2:	4a23      	ldr	r2, [pc, #140]	; (8002380 <HAL_PCD_MspInit+0x108>)
 80022f4:	f043 0301 	orr.w	r3, r3, #1
 80022f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022fc:	4b20      	ldr	r3, [pc, #128]	; (8002380 <HAL_PCD_MspInit+0x108>)
 80022fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800230a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800230e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002312:	2302      	movs	r3, #2
 8002314:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002318:	2300      	movs	r3, #0
 800231a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231e:	2300      	movs	r3, #0
 8002320:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002324:	230a      	movs	r3, #10
 8002326:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800232a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800232e:	4619      	mov	r1, r3
 8002330:	4814      	ldr	r0, [pc, #80]	; (8002384 <HAL_PCD_MspInit+0x10c>)
 8002332:	f001 fc29 	bl	8003b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002336:	f44f 7300 	mov.w	r3, #512	; 0x200
 800233a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800233e:	2300      	movs	r3, #0
 8002340:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002344:	2300      	movs	r3, #0
 8002346:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800234a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800234e:	4619      	mov	r1, r3
 8002350:	480c      	ldr	r0, [pc, #48]	; (8002384 <HAL_PCD_MspInit+0x10c>)
 8002352:	f001 fc19 	bl	8003b88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002356:	4b0a      	ldr	r3, [pc, #40]	; (8002380 <HAL_PCD_MspInit+0x108>)
 8002358:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800235c:	4a08      	ldr	r2, [pc, #32]	; (8002380 <HAL_PCD_MspInit+0x108>)
 800235e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002362:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002366:	4b06      	ldr	r3, [pc, #24]	; (8002380 <HAL_PCD_MspInit+0x108>)
 8002368:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800236c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002370:	60bb      	str	r3, [r7, #8]
 8002372:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002374:	bf00      	nop
 8002376:	37e0      	adds	r7, #224	; 0xe0
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40080000 	.word	0x40080000
 8002380:	58024400 	.word	0x58024400
 8002384:	58020000 	.word	0x58020000

08002388 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800238c:	e7fe      	b.n	800238c <NMI_Handler+0x4>

0800238e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800238e:	b480      	push	{r7}
 8002390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002392:	e7fe      	b.n	8002392 <HardFault_Handler+0x4>

08002394 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002398:	e7fe      	b.n	8002398 <MemManage_Handler+0x4>

0800239a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800239a:	b480      	push	{r7}
 800239c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800239e:	e7fe      	b.n	800239e <BusFault_Handler+0x4>

080023a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023a4:	e7fe      	b.n	80023a4 <UsageFault_Handler+0x4>

080023a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023a6:	b480      	push	{r7}
 80023a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023aa:	bf00      	nop
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023b8:	bf00      	nop
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023c2:	b480      	push	{r7}
 80023c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023d4:	f000 f8d4 	bl	8002580 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023d8:	bf00      	nop
 80023da:	bd80      	pop	{r7, pc}

080023dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023e4:	4a14      	ldr	r2, [pc, #80]	; (8002438 <_sbrk+0x5c>)
 80023e6:	4b15      	ldr	r3, [pc, #84]	; (800243c <_sbrk+0x60>)
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023f0:	4b13      	ldr	r3, [pc, #76]	; (8002440 <_sbrk+0x64>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d102      	bne.n	80023fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023f8:	4b11      	ldr	r3, [pc, #68]	; (8002440 <_sbrk+0x64>)
 80023fa:	4a12      	ldr	r2, [pc, #72]	; (8002444 <_sbrk+0x68>)
 80023fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023fe:	4b10      	ldr	r3, [pc, #64]	; (8002440 <_sbrk+0x64>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4413      	add	r3, r2
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	429a      	cmp	r2, r3
 800240a:	d207      	bcs.n	800241c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800240c:	f005 feba 	bl	8008184 <__errno>
 8002410:	4603      	mov	r3, r0
 8002412:	220c      	movs	r2, #12
 8002414:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002416:	f04f 33ff 	mov.w	r3, #4294967295
 800241a:	e009      	b.n	8002430 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800241c:	4b08      	ldr	r3, [pc, #32]	; (8002440 <_sbrk+0x64>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002422:	4b07      	ldr	r3, [pc, #28]	; (8002440 <_sbrk+0x64>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4413      	add	r3, r2
 800242a:	4a05      	ldr	r2, [pc, #20]	; (8002440 <_sbrk+0x64>)
 800242c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800242e:	68fb      	ldr	r3, [r7, #12]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3718      	adds	r7, #24
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	24080000 	.word	0x24080000
 800243c:	00000400 	.word	0x00000400
 8002440:	2400097c 	.word	0x2400097c
 8002444:	24000998 	.word	0x24000998

08002448 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002448:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002480 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800244c:	f7fe f922 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002450:	480c      	ldr	r0, [pc, #48]	; (8002484 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002452:	490d      	ldr	r1, [pc, #52]	; (8002488 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002454:	4a0d      	ldr	r2, [pc, #52]	; (800248c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002458:	e002      	b.n	8002460 <LoopCopyDataInit>

0800245a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800245a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800245c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800245e:	3304      	adds	r3, #4

08002460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002464:	d3f9      	bcc.n	800245a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002466:	4a0a      	ldr	r2, [pc, #40]	; (8002490 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002468:	4c0a      	ldr	r4, [pc, #40]	; (8002494 <LoopFillZerobss+0x22>)
  movs r3, #0
 800246a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800246c:	e001      	b.n	8002472 <LoopFillZerobss>

0800246e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800246e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002470:	3204      	adds	r2, #4

08002472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002474:	d3fb      	bcc.n	800246e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002476:	f005 fe8b 	bl	8008190 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800247a:	f7ff fa59 	bl	8001930 <main>
  bx  lr
 800247e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002480:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002484:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002488:	2400008c 	.word	0x2400008c
  ldr r2, =_sidata
 800248c:	0800bb20 	.word	0x0800bb20
  ldr r2, =_sbss
 8002490:	2400014c 	.word	0x2400014c
  ldr r4, =_ebss
 8002494:	24000994 	.word	0x24000994

08002498 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002498:	e7fe      	b.n	8002498 <ADC3_IRQHandler>
	...

0800249c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024a2:	2003      	movs	r0, #3
 80024a4:	f000 f982 	bl	80027ac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80024a8:	f002 fd16 	bl	8004ed8 <HAL_RCC_GetSysClockFreq>
 80024ac:	4602      	mov	r2, r0
 80024ae:	4b15      	ldr	r3, [pc, #84]	; (8002504 <HAL_Init+0x68>)
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	0a1b      	lsrs	r3, r3, #8
 80024b4:	f003 030f 	and.w	r3, r3, #15
 80024b8:	4913      	ldr	r1, [pc, #76]	; (8002508 <HAL_Init+0x6c>)
 80024ba:	5ccb      	ldrb	r3, [r1, r3]
 80024bc:	f003 031f 	and.w	r3, r3, #31
 80024c0:	fa22 f303 	lsr.w	r3, r2, r3
 80024c4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024c6:	4b0f      	ldr	r3, [pc, #60]	; (8002504 <HAL_Init+0x68>)
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	4a0e      	ldr	r2, [pc, #56]	; (8002508 <HAL_Init+0x6c>)
 80024d0:	5cd3      	ldrb	r3, [r2, r3]
 80024d2:	f003 031f 	and.w	r3, r3, #31
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	fa22 f303 	lsr.w	r3, r2, r3
 80024dc:	4a0b      	ldr	r2, [pc, #44]	; (800250c <HAL_Init+0x70>)
 80024de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80024e0:	4a0b      	ldr	r2, [pc, #44]	; (8002510 <HAL_Init+0x74>)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024e6:	2000      	movs	r0, #0
 80024e8:	f000 f814 	bl	8002514 <HAL_InitTick>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e002      	b.n	80024fc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80024f6:	f7ff fd3f 	bl	8001f78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	58024400 	.word	0x58024400
 8002508:	08008bf0 	.word	0x08008bf0
 800250c:	24000004 	.word	0x24000004
 8002510:	24000000 	.word	0x24000000

08002514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800251c:	4b15      	ldr	r3, [pc, #84]	; (8002574 <HAL_InitTick+0x60>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e021      	b.n	800256c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002528:	4b13      	ldr	r3, [pc, #76]	; (8002578 <HAL_InitTick+0x64>)
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	4b11      	ldr	r3, [pc, #68]	; (8002574 <HAL_InitTick+0x60>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	4619      	mov	r1, r3
 8002532:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002536:	fbb3 f3f1 	udiv	r3, r3, r1
 800253a:	fbb2 f3f3 	udiv	r3, r2, r3
 800253e:	4618      	mov	r0, r3
 8002540:	f000 f959 	bl	80027f6 <HAL_SYSTICK_Config>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e00e      	b.n	800256c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b0f      	cmp	r3, #15
 8002552:	d80a      	bhi.n	800256a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002554:	2200      	movs	r2, #0
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	f04f 30ff 	mov.w	r0, #4294967295
 800255c:	f000 f931 	bl	80027c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002560:	4a06      	ldr	r2, [pc, #24]	; (800257c <HAL_InitTick+0x68>)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	e000      	b.n	800256c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
}
 800256c:	4618      	mov	r0, r3
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	24000024 	.word	0x24000024
 8002578:	24000000 	.word	0x24000000
 800257c:	24000020 	.word	0x24000020

08002580 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002584:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <HAL_IncTick+0x20>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	461a      	mov	r2, r3
 800258a:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <HAL_IncTick+0x24>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4413      	add	r3, r2
 8002590:	4a04      	ldr	r2, [pc, #16]	; (80025a4 <HAL_IncTick+0x24>)
 8002592:	6013      	str	r3, [r2, #0]
}
 8002594:	bf00      	nop
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	24000024 	.word	0x24000024
 80025a4:	24000980 	.word	0x24000980

080025a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  return uwTick;
 80025ac:	4b03      	ldr	r3, [pc, #12]	; (80025bc <HAL_GetTick+0x14>)
 80025ae:	681b      	ldr	r3, [r3, #0]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	24000980 	.word	0x24000980

080025c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025c8:	f7ff ffee 	bl	80025a8 <HAL_GetTick>
 80025cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d8:	d005      	beq.n	80025e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025da:	4b0a      	ldr	r3, [pc, #40]	; (8002604 <HAL_Delay+0x44>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	461a      	mov	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	4413      	add	r3, r2
 80025e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025e6:	bf00      	nop
 80025e8:	f7ff ffde 	bl	80025a8 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d8f7      	bhi.n	80025e8 <HAL_Delay+0x28>
  {
  }
}
 80025f8:	bf00      	nop
 80025fa:	bf00      	nop
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	24000024 	.word	0x24000024

08002608 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800260c:	4b03      	ldr	r3, [pc, #12]	; (800261c <HAL_GetREVID+0x14>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	0c1b      	lsrs	r3, r3, #16
}
 8002612:	4618      	mov	r0, r3
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	5c001000 	.word	0x5c001000

08002620 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002628:	4b06      	ldr	r3, [pc, #24]	; (8002644 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002630:	4904      	ldr	r1, [pc, #16]	; (8002644 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4313      	orrs	r3, r2
 8002636:	604b      	str	r3, [r1, #4]
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	58000400 	.word	0x58000400

08002648 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002658:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <__NVIC_SetPriorityGrouping+0x40>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800265e:	68ba      	ldr	r2, [r7, #8]
 8002660:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002664:	4013      	ands	r3, r2
 8002666:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002670:	4b06      	ldr	r3, [pc, #24]	; (800268c <__NVIC_SetPriorityGrouping+0x44>)
 8002672:	4313      	orrs	r3, r2
 8002674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002676:	4a04      	ldr	r2, [pc, #16]	; (8002688 <__NVIC_SetPriorityGrouping+0x40>)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	60d3      	str	r3, [r2, #12]
}
 800267c:	bf00      	nop
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	e000ed00 	.word	0xe000ed00
 800268c:	05fa0000 	.word	0x05fa0000

08002690 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002694:	4b04      	ldr	r3, [pc, #16]	; (80026a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	0a1b      	lsrs	r3, r3, #8
 800269a:	f003 0307 	and.w	r3, r3, #7
}
 800269e:	4618      	mov	r0, r3
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	e000ed00 	.word	0xe000ed00

080026ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	6039      	str	r1, [r7, #0]
 80026b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80026b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	db0a      	blt.n	80026d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	b2da      	uxtb	r2, r3
 80026c4:	490c      	ldr	r1, [pc, #48]	; (80026f8 <__NVIC_SetPriority+0x4c>)
 80026c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026ca:	0112      	lsls	r2, r2, #4
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	440b      	add	r3, r1
 80026d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026d4:	e00a      	b.n	80026ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	b2da      	uxtb	r2, r3
 80026da:	4908      	ldr	r1, [pc, #32]	; (80026fc <__NVIC_SetPriority+0x50>)
 80026dc:	88fb      	ldrh	r3, [r7, #6]
 80026de:	f003 030f 	and.w	r3, r3, #15
 80026e2:	3b04      	subs	r3, #4
 80026e4:	0112      	lsls	r2, r2, #4
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	440b      	add	r3, r1
 80026ea:	761a      	strb	r2, [r3, #24]
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	e000e100 	.word	0xe000e100
 80026fc:	e000ed00 	.word	0xe000ed00

08002700 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002700:	b480      	push	{r7}
 8002702:	b089      	sub	sp, #36	; 0x24
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	f1c3 0307 	rsb	r3, r3, #7
 800271a:	2b04      	cmp	r3, #4
 800271c:	bf28      	it	cs
 800271e:	2304      	movcs	r3, #4
 8002720:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	3304      	adds	r3, #4
 8002726:	2b06      	cmp	r3, #6
 8002728:	d902      	bls.n	8002730 <NVIC_EncodePriority+0x30>
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	3b03      	subs	r3, #3
 800272e:	e000      	b.n	8002732 <NVIC_EncodePriority+0x32>
 8002730:	2300      	movs	r3, #0
 8002732:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002734:	f04f 32ff 	mov.w	r2, #4294967295
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	43da      	mvns	r2, r3
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	401a      	ands	r2, r3
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002748:	f04f 31ff 	mov.w	r1, #4294967295
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	fa01 f303 	lsl.w	r3, r1, r3
 8002752:	43d9      	mvns	r1, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002758:	4313      	orrs	r3, r2
         );
}
 800275a:	4618      	mov	r0, r3
 800275c:	3724      	adds	r7, #36	; 0x24
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
	...

08002768 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3b01      	subs	r3, #1
 8002774:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002778:	d301      	bcc.n	800277e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800277a:	2301      	movs	r3, #1
 800277c:	e00f      	b.n	800279e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800277e:	4a0a      	ldr	r2, [pc, #40]	; (80027a8 <SysTick_Config+0x40>)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3b01      	subs	r3, #1
 8002784:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002786:	210f      	movs	r1, #15
 8002788:	f04f 30ff 	mov.w	r0, #4294967295
 800278c:	f7ff ff8e 	bl	80026ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002790:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <SysTick_Config+0x40>)
 8002792:	2200      	movs	r2, #0
 8002794:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002796:	4b04      	ldr	r3, [pc, #16]	; (80027a8 <SysTick_Config+0x40>)
 8002798:	2207      	movs	r2, #7
 800279a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	e000e010 	.word	0xe000e010

080027ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f7ff ff47 	bl	8002648 <__NVIC_SetPriorityGrouping>
}
 80027ba:	bf00      	nop
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b086      	sub	sp, #24
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	4603      	mov	r3, r0
 80027ca:	60b9      	str	r1, [r7, #8]
 80027cc:	607a      	str	r2, [r7, #4]
 80027ce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027d0:	f7ff ff5e 	bl	8002690 <__NVIC_GetPriorityGrouping>
 80027d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	68b9      	ldr	r1, [r7, #8]
 80027da:	6978      	ldr	r0, [r7, #20]
 80027dc:	f7ff ff90 	bl	8002700 <NVIC_EncodePriority>
 80027e0:	4602      	mov	r2, r0
 80027e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027e6:	4611      	mov	r1, r2
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff ff5f 	bl	80026ac <__NVIC_SetPriority>
}
 80027ee:	bf00      	nop
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7ff ffb2 	bl	8002768 <SysTick_Config>
 8002804:	4603      	mov	r3, r0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002818:	f7ff fec6 	bl	80025a8 <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e316      	b.n	8002e56 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a66      	ldr	r2, [pc, #408]	; (80029c8 <HAL_DMA_Init+0x1b8>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d04a      	beq.n	80028c8 <HAL_DMA_Init+0xb8>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a65      	ldr	r2, [pc, #404]	; (80029cc <HAL_DMA_Init+0x1bc>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d045      	beq.n	80028c8 <HAL_DMA_Init+0xb8>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a63      	ldr	r2, [pc, #396]	; (80029d0 <HAL_DMA_Init+0x1c0>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d040      	beq.n	80028c8 <HAL_DMA_Init+0xb8>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a62      	ldr	r2, [pc, #392]	; (80029d4 <HAL_DMA_Init+0x1c4>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d03b      	beq.n	80028c8 <HAL_DMA_Init+0xb8>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a60      	ldr	r2, [pc, #384]	; (80029d8 <HAL_DMA_Init+0x1c8>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d036      	beq.n	80028c8 <HAL_DMA_Init+0xb8>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a5f      	ldr	r2, [pc, #380]	; (80029dc <HAL_DMA_Init+0x1cc>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d031      	beq.n	80028c8 <HAL_DMA_Init+0xb8>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a5d      	ldr	r2, [pc, #372]	; (80029e0 <HAL_DMA_Init+0x1d0>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d02c      	beq.n	80028c8 <HAL_DMA_Init+0xb8>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a5c      	ldr	r2, [pc, #368]	; (80029e4 <HAL_DMA_Init+0x1d4>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d027      	beq.n	80028c8 <HAL_DMA_Init+0xb8>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a5a      	ldr	r2, [pc, #360]	; (80029e8 <HAL_DMA_Init+0x1d8>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d022      	beq.n	80028c8 <HAL_DMA_Init+0xb8>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a59      	ldr	r2, [pc, #356]	; (80029ec <HAL_DMA_Init+0x1dc>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d01d      	beq.n	80028c8 <HAL_DMA_Init+0xb8>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a57      	ldr	r2, [pc, #348]	; (80029f0 <HAL_DMA_Init+0x1e0>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d018      	beq.n	80028c8 <HAL_DMA_Init+0xb8>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a56      	ldr	r2, [pc, #344]	; (80029f4 <HAL_DMA_Init+0x1e4>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d013      	beq.n	80028c8 <HAL_DMA_Init+0xb8>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a54      	ldr	r2, [pc, #336]	; (80029f8 <HAL_DMA_Init+0x1e8>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d00e      	beq.n	80028c8 <HAL_DMA_Init+0xb8>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a53      	ldr	r2, [pc, #332]	; (80029fc <HAL_DMA_Init+0x1ec>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d009      	beq.n	80028c8 <HAL_DMA_Init+0xb8>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a51      	ldr	r2, [pc, #324]	; (8002a00 <HAL_DMA_Init+0x1f0>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d004      	beq.n	80028c8 <HAL_DMA_Init+0xb8>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a50      	ldr	r2, [pc, #320]	; (8002a04 <HAL_DMA_Init+0x1f4>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d101      	bne.n	80028cc <HAL_DMA_Init+0xbc>
 80028c8:	2301      	movs	r3, #1
 80028ca:	e000      	b.n	80028ce <HAL_DMA_Init+0xbe>
 80028cc:	2300      	movs	r3, #0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 813b 	beq.w	8002b4a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2202      	movs	r2, #2
 80028d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a37      	ldr	r2, [pc, #220]	; (80029c8 <HAL_DMA_Init+0x1b8>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d04a      	beq.n	8002984 <HAL_DMA_Init+0x174>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a36      	ldr	r2, [pc, #216]	; (80029cc <HAL_DMA_Init+0x1bc>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d045      	beq.n	8002984 <HAL_DMA_Init+0x174>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a34      	ldr	r2, [pc, #208]	; (80029d0 <HAL_DMA_Init+0x1c0>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d040      	beq.n	8002984 <HAL_DMA_Init+0x174>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a33      	ldr	r2, [pc, #204]	; (80029d4 <HAL_DMA_Init+0x1c4>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d03b      	beq.n	8002984 <HAL_DMA_Init+0x174>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a31      	ldr	r2, [pc, #196]	; (80029d8 <HAL_DMA_Init+0x1c8>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d036      	beq.n	8002984 <HAL_DMA_Init+0x174>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a30      	ldr	r2, [pc, #192]	; (80029dc <HAL_DMA_Init+0x1cc>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d031      	beq.n	8002984 <HAL_DMA_Init+0x174>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a2e      	ldr	r2, [pc, #184]	; (80029e0 <HAL_DMA_Init+0x1d0>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d02c      	beq.n	8002984 <HAL_DMA_Init+0x174>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a2d      	ldr	r2, [pc, #180]	; (80029e4 <HAL_DMA_Init+0x1d4>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d027      	beq.n	8002984 <HAL_DMA_Init+0x174>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a2b      	ldr	r2, [pc, #172]	; (80029e8 <HAL_DMA_Init+0x1d8>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d022      	beq.n	8002984 <HAL_DMA_Init+0x174>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a2a      	ldr	r2, [pc, #168]	; (80029ec <HAL_DMA_Init+0x1dc>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d01d      	beq.n	8002984 <HAL_DMA_Init+0x174>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a28      	ldr	r2, [pc, #160]	; (80029f0 <HAL_DMA_Init+0x1e0>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d018      	beq.n	8002984 <HAL_DMA_Init+0x174>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a27      	ldr	r2, [pc, #156]	; (80029f4 <HAL_DMA_Init+0x1e4>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d013      	beq.n	8002984 <HAL_DMA_Init+0x174>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a25      	ldr	r2, [pc, #148]	; (80029f8 <HAL_DMA_Init+0x1e8>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d00e      	beq.n	8002984 <HAL_DMA_Init+0x174>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a24      	ldr	r2, [pc, #144]	; (80029fc <HAL_DMA_Init+0x1ec>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d009      	beq.n	8002984 <HAL_DMA_Init+0x174>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a22      	ldr	r2, [pc, #136]	; (8002a00 <HAL_DMA_Init+0x1f0>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d004      	beq.n	8002984 <HAL_DMA_Init+0x174>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a21      	ldr	r2, [pc, #132]	; (8002a04 <HAL_DMA_Init+0x1f4>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d108      	bne.n	8002996 <HAL_DMA_Init+0x186>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 0201 	bic.w	r2, r2, #1
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	e007      	b.n	80029a6 <HAL_DMA_Init+0x196>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 0201 	bic.w	r2, r2, #1
 80029a4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80029a6:	e02f      	b.n	8002a08 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029a8:	f7ff fdfe 	bl	80025a8 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b05      	cmp	r3, #5
 80029b4:	d928      	bls.n	8002a08 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2220      	movs	r2, #32
 80029ba:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2203      	movs	r2, #3
 80029c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e246      	b.n	8002e56 <HAL_DMA_Init+0x646>
 80029c8:	40020010 	.word	0x40020010
 80029cc:	40020028 	.word	0x40020028
 80029d0:	40020040 	.word	0x40020040
 80029d4:	40020058 	.word	0x40020058
 80029d8:	40020070 	.word	0x40020070
 80029dc:	40020088 	.word	0x40020088
 80029e0:	400200a0 	.word	0x400200a0
 80029e4:	400200b8 	.word	0x400200b8
 80029e8:	40020410 	.word	0x40020410
 80029ec:	40020428 	.word	0x40020428
 80029f0:	40020440 	.word	0x40020440
 80029f4:	40020458 	.word	0x40020458
 80029f8:	40020470 	.word	0x40020470
 80029fc:	40020488 	.word	0x40020488
 8002a00:	400204a0 	.word	0x400204a0
 8002a04:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1c8      	bne.n	80029a8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	4b83      	ldr	r3, [pc, #524]	; (8002c30 <HAL_DMA_Init+0x420>)
 8002a22:	4013      	ands	r3, r2
 8002a24:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002a2e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a3a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a46:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d107      	bne.n	8002a6c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a64:	4313      	orrs	r3, r2
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002a6c:	4b71      	ldr	r3, [pc, #452]	; (8002c34 <HAL_DMA_Init+0x424>)
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	4b71      	ldr	r3, [pc, #452]	; (8002c38 <HAL_DMA_Init+0x428>)
 8002a72:	4013      	ands	r3, r2
 8002a74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a78:	d328      	bcc.n	8002acc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b28      	cmp	r3, #40	; 0x28
 8002a80:	d903      	bls.n	8002a8a <HAL_DMA_Init+0x27a>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b2e      	cmp	r3, #46	; 0x2e
 8002a88:	d917      	bls.n	8002aba <HAL_DMA_Init+0x2aa>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2b3e      	cmp	r3, #62	; 0x3e
 8002a90:	d903      	bls.n	8002a9a <HAL_DMA_Init+0x28a>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2b42      	cmp	r3, #66	; 0x42
 8002a98:	d90f      	bls.n	8002aba <HAL_DMA_Init+0x2aa>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b46      	cmp	r3, #70	; 0x46
 8002aa0:	d903      	bls.n	8002aaa <HAL_DMA_Init+0x29a>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b48      	cmp	r3, #72	; 0x48
 8002aa8:	d907      	bls.n	8002aba <HAL_DMA_Init+0x2aa>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b4e      	cmp	r3, #78	; 0x4e
 8002ab0:	d905      	bls.n	8002abe <HAL_DMA_Init+0x2ae>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2b52      	cmp	r3, #82	; 0x52
 8002ab8:	d801      	bhi.n	8002abe <HAL_DMA_Init+0x2ae>
 8002aba:	2301      	movs	r3, #1
 8002abc:	e000      	b.n	8002ac0 <HAL_DMA_Init+0x2b0>
 8002abe:	2300      	movs	r3, #0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d003      	beq.n	8002acc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aca:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	f023 0307 	bic.w	r3, r3, #7
 8002ae2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	d117      	bne.n	8002b26 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00e      	beq.n	8002b26 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 fa8f 	bl	800302c <DMA_CheckFifoParam>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d008      	beq.n	8002b26 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2240      	movs	r2, #64	; 0x40
 8002b18:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e197      	b.n	8002e56 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f9ca 	bl	8002ec8 <DMA_CalcBaseAndBitshift>
 8002b34:	4603      	mov	r3, r0
 8002b36:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3c:	f003 031f 	and.w	r3, r3, #31
 8002b40:	223f      	movs	r2, #63	; 0x3f
 8002b42:	409a      	lsls	r2, r3
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	609a      	str	r2, [r3, #8]
 8002b48:	e0cd      	b.n	8002ce6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a3b      	ldr	r2, [pc, #236]	; (8002c3c <HAL_DMA_Init+0x42c>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d022      	beq.n	8002b9a <HAL_DMA_Init+0x38a>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a39      	ldr	r2, [pc, #228]	; (8002c40 <HAL_DMA_Init+0x430>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d01d      	beq.n	8002b9a <HAL_DMA_Init+0x38a>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a38      	ldr	r2, [pc, #224]	; (8002c44 <HAL_DMA_Init+0x434>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d018      	beq.n	8002b9a <HAL_DMA_Init+0x38a>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a36      	ldr	r2, [pc, #216]	; (8002c48 <HAL_DMA_Init+0x438>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d013      	beq.n	8002b9a <HAL_DMA_Init+0x38a>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a35      	ldr	r2, [pc, #212]	; (8002c4c <HAL_DMA_Init+0x43c>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d00e      	beq.n	8002b9a <HAL_DMA_Init+0x38a>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a33      	ldr	r2, [pc, #204]	; (8002c50 <HAL_DMA_Init+0x440>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d009      	beq.n	8002b9a <HAL_DMA_Init+0x38a>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a32      	ldr	r2, [pc, #200]	; (8002c54 <HAL_DMA_Init+0x444>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d004      	beq.n	8002b9a <HAL_DMA_Init+0x38a>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a30      	ldr	r2, [pc, #192]	; (8002c58 <HAL_DMA_Init+0x448>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d101      	bne.n	8002b9e <HAL_DMA_Init+0x38e>
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e000      	b.n	8002ba0 <HAL_DMA_Init+0x390>
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 8097 	beq.w	8002cd4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a24      	ldr	r2, [pc, #144]	; (8002c3c <HAL_DMA_Init+0x42c>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d021      	beq.n	8002bf4 <HAL_DMA_Init+0x3e4>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a22      	ldr	r2, [pc, #136]	; (8002c40 <HAL_DMA_Init+0x430>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d01c      	beq.n	8002bf4 <HAL_DMA_Init+0x3e4>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a21      	ldr	r2, [pc, #132]	; (8002c44 <HAL_DMA_Init+0x434>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d017      	beq.n	8002bf4 <HAL_DMA_Init+0x3e4>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a1f      	ldr	r2, [pc, #124]	; (8002c48 <HAL_DMA_Init+0x438>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d012      	beq.n	8002bf4 <HAL_DMA_Init+0x3e4>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a1e      	ldr	r2, [pc, #120]	; (8002c4c <HAL_DMA_Init+0x43c>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d00d      	beq.n	8002bf4 <HAL_DMA_Init+0x3e4>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a1c      	ldr	r2, [pc, #112]	; (8002c50 <HAL_DMA_Init+0x440>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d008      	beq.n	8002bf4 <HAL_DMA_Init+0x3e4>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a1b      	ldr	r2, [pc, #108]	; (8002c54 <HAL_DMA_Init+0x444>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d003      	beq.n	8002bf4 <HAL_DMA_Init+0x3e4>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a19      	ldr	r2, [pc, #100]	; (8002c58 <HAL_DMA_Init+0x448>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	4b12      	ldr	r3, [pc, #72]	; (8002c5c <HAL_DMA_Init+0x44c>)
 8002c12:	4013      	ands	r3, r2
 8002c14:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	2b40      	cmp	r3, #64	; 0x40
 8002c1c:	d020      	beq.n	8002c60 <HAL_DMA_Init+0x450>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	2b80      	cmp	r3, #128	; 0x80
 8002c24:	d102      	bne.n	8002c2c <HAL_DMA_Init+0x41c>
 8002c26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c2a:	e01a      	b.n	8002c62 <HAL_DMA_Init+0x452>
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	e018      	b.n	8002c62 <HAL_DMA_Init+0x452>
 8002c30:	fe10803f 	.word	0xfe10803f
 8002c34:	5c001000 	.word	0x5c001000
 8002c38:	ffff0000 	.word	0xffff0000
 8002c3c:	58025408 	.word	0x58025408
 8002c40:	5802541c 	.word	0x5802541c
 8002c44:	58025430 	.word	0x58025430
 8002c48:	58025444 	.word	0x58025444
 8002c4c:	58025458 	.word	0x58025458
 8002c50:	5802546c 	.word	0x5802546c
 8002c54:	58025480 	.word	0x58025480
 8002c58:	58025494 	.word	0x58025494
 8002c5c:	fffe000f 	.word	0xfffe000f
 8002c60:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	68d2      	ldr	r2, [r2, #12]
 8002c66:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002c68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002c70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002c78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002c80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002c88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002c90:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	4b6e      	ldr	r3, [pc, #440]	; (8002e60 <HAL_DMA_Init+0x650>)
 8002ca8:	4413      	add	r3, r2
 8002caa:	4a6e      	ldr	r2, [pc, #440]	; (8002e64 <HAL_DMA_Init+0x654>)
 8002cac:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb0:	091b      	lsrs	r3, r3, #4
 8002cb2:	009a      	lsls	r2, r3, #2
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 f905 	bl	8002ec8 <DMA_CalcBaseAndBitshift>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc6:	f003 031f 	and.w	r3, r3, #31
 8002cca:	2201      	movs	r2, #1
 8002ccc:	409a      	lsls	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	605a      	str	r2, [r3, #4]
 8002cd2:	e008      	b.n	8002ce6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2240      	movs	r2, #64	; 0x40
 8002cd8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2203      	movs	r2, #3
 8002cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e0b7      	b.n	8002e56 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a5f      	ldr	r2, [pc, #380]	; (8002e68 <HAL_DMA_Init+0x658>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d072      	beq.n	8002dd6 <HAL_DMA_Init+0x5c6>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a5d      	ldr	r2, [pc, #372]	; (8002e6c <HAL_DMA_Init+0x65c>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d06d      	beq.n	8002dd6 <HAL_DMA_Init+0x5c6>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a5c      	ldr	r2, [pc, #368]	; (8002e70 <HAL_DMA_Init+0x660>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d068      	beq.n	8002dd6 <HAL_DMA_Init+0x5c6>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a5a      	ldr	r2, [pc, #360]	; (8002e74 <HAL_DMA_Init+0x664>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d063      	beq.n	8002dd6 <HAL_DMA_Init+0x5c6>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a59      	ldr	r2, [pc, #356]	; (8002e78 <HAL_DMA_Init+0x668>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d05e      	beq.n	8002dd6 <HAL_DMA_Init+0x5c6>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a57      	ldr	r2, [pc, #348]	; (8002e7c <HAL_DMA_Init+0x66c>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d059      	beq.n	8002dd6 <HAL_DMA_Init+0x5c6>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a56      	ldr	r2, [pc, #344]	; (8002e80 <HAL_DMA_Init+0x670>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d054      	beq.n	8002dd6 <HAL_DMA_Init+0x5c6>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a54      	ldr	r2, [pc, #336]	; (8002e84 <HAL_DMA_Init+0x674>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d04f      	beq.n	8002dd6 <HAL_DMA_Init+0x5c6>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a53      	ldr	r2, [pc, #332]	; (8002e88 <HAL_DMA_Init+0x678>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d04a      	beq.n	8002dd6 <HAL_DMA_Init+0x5c6>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a51      	ldr	r2, [pc, #324]	; (8002e8c <HAL_DMA_Init+0x67c>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d045      	beq.n	8002dd6 <HAL_DMA_Init+0x5c6>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a50      	ldr	r2, [pc, #320]	; (8002e90 <HAL_DMA_Init+0x680>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d040      	beq.n	8002dd6 <HAL_DMA_Init+0x5c6>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a4e      	ldr	r2, [pc, #312]	; (8002e94 <HAL_DMA_Init+0x684>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d03b      	beq.n	8002dd6 <HAL_DMA_Init+0x5c6>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a4d      	ldr	r2, [pc, #308]	; (8002e98 <HAL_DMA_Init+0x688>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d036      	beq.n	8002dd6 <HAL_DMA_Init+0x5c6>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a4b      	ldr	r2, [pc, #300]	; (8002e9c <HAL_DMA_Init+0x68c>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d031      	beq.n	8002dd6 <HAL_DMA_Init+0x5c6>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a4a      	ldr	r2, [pc, #296]	; (8002ea0 <HAL_DMA_Init+0x690>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d02c      	beq.n	8002dd6 <HAL_DMA_Init+0x5c6>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a48      	ldr	r2, [pc, #288]	; (8002ea4 <HAL_DMA_Init+0x694>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d027      	beq.n	8002dd6 <HAL_DMA_Init+0x5c6>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a47      	ldr	r2, [pc, #284]	; (8002ea8 <HAL_DMA_Init+0x698>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d022      	beq.n	8002dd6 <HAL_DMA_Init+0x5c6>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a45      	ldr	r2, [pc, #276]	; (8002eac <HAL_DMA_Init+0x69c>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d01d      	beq.n	8002dd6 <HAL_DMA_Init+0x5c6>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a44      	ldr	r2, [pc, #272]	; (8002eb0 <HAL_DMA_Init+0x6a0>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d018      	beq.n	8002dd6 <HAL_DMA_Init+0x5c6>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a42      	ldr	r2, [pc, #264]	; (8002eb4 <HAL_DMA_Init+0x6a4>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d013      	beq.n	8002dd6 <HAL_DMA_Init+0x5c6>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a41      	ldr	r2, [pc, #260]	; (8002eb8 <HAL_DMA_Init+0x6a8>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d00e      	beq.n	8002dd6 <HAL_DMA_Init+0x5c6>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a3f      	ldr	r2, [pc, #252]	; (8002ebc <HAL_DMA_Init+0x6ac>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d009      	beq.n	8002dd6 <HAL_DMA_Init+0x5c6>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a3e      	ldr	r2, [pc, #248]	; (8002ec0 <HAL_DMA_Init+0x6b0>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d004      	beq.n	8002dd6 <HAL_DMA_Init+0x5c6>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a3c      	ldr	r2, [pc, #240]	; (8002ec4 <HAL_DMA_Init+0x6b4>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d101      	bne.n	8002dda <HAL_DMA_Init+0x5ca>
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e000      	b.n	8002ddc <HAL_DMA_Init+0x5cc>
 8002dda:	2300      	movs	r3, #0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d032      	beq.n	8002e46 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 f99f 	bl	8003124 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	2b80      	cmp	r3, #128	; 0x80
 8002dec:	d102      	bne.n	8002df4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dfc:	b2d2      	uxtb	r2, r2
 8002dfe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002e08:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d010      	beq.n	8002e34 <HAL_DMA_Init+0x624>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2b08      	cmp	r3, #8
 8002e18:	d80c      	bhi.n	8002e34 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 fa1c 	bl	8003258 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002e30:	605a      	str	r2, [r3, #4]
 8002e32:	e008      	b.n	8002e46 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3718      	adds	r7, #24
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	a7fdabf8 	.word	0xa7fdabf8
 8002e64:	cccccccd 	.word	0xcccccccd
 8002e68:	40020010 	.word	0x40020010
 8002e6c:	40020028 	.word	0x40020028
 8002e70:	40020040 	.word	0x40020040
 8002e74:	40020058 	.word	0x40020058
 8002e78:	40020070 	.word	0x40020070
 8002e7c:	40020088 	.word	0x40020088
 8002e80:	400200a0 	.word	0x400200a0
 8002e84:	400200b8 	.word	0x400200b8
 8002e88:	40020410 	.word	0x40020410
 8002e8c:	40020428 	.word	0x40020428
 8002e90:	40020440 	.word	0x40020440
 8002e94:	40020458 	.word	0x40020458
 8002e98:	40020470 	.word	0x40020470
 8002e9c:	40020488 	.word	0x40020488
 8002ea0:	400204a0 	.word	0x400204a0
 8002ea4:	400204b8 	.word	0x400204b8
 8002ea8:	58025408 	.word	0x58025408
 8002eac:	5802541c 	.word	0x5802541c
 8002eb0:	58025430 	.word	0x58025430
 8002eb4:	58025444 	.word	0x58025444
 8002eb8:	58025458 	.word	0x58025458
 8002ebc:	5802546c 	.word	0x5802546c
 8002ec0:	58025480 	.word	0x58025480
 8002ec4:	58025494 	.word	0x58025494

08002ec8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a42      	ldr	r2, [pc, #264]	; (8002fe0 <DMA_CalcBaseAndBitshift+0x118>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d04a      	beq.n	8002f70 <DMA_CalcBaseAndBitshift+0xa8>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a41      	ldr	r2, [pc, #260]	; (8002fe4 <DMA_CalcBaseAndBitshift+0x11c>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d045      	beq.n	8002f70 <DMA_CalcBaseAndBitshift+0xa8>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a3f      	ldr	r2, [pc, #252]	; (8002fe8 <DMA_CalcBaseAndBitshift+0x120>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d040      	beq.n	8002f70 <DMA_CalcBaseAndBitshift+0xa8>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a3e      	ldr	r2, [pc, #248]	; (8002fec <DMA_CalcBaseAndBitshift+0x124>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d03b      	beq.n	8002f70 <DMA_CalcBaseAndBitshift+0xa8>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a3c      	ldr	r2, [pc, #240]	; (8002ff0 <DMA_CalcBaseAndBitshift+0x128>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d036      	beq.n	8002f70 <DMA_CalcBaseAndBitshift+0xa8>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a3b      	ldr	r2, [pc, #236]	; (8002ff4 <DMA_CalcBaseAndBitshift+0x12c>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d031      	beq.n	8002f70 <DMA_CalcBaseAndBitshift+0xa8>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a39      	ldr	r2, [pc, #228]	; (8002ff8 <DMA_CalcBaseAndBitshift+0x130>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d02c      	beq.n	8002f70 <DMA_CalcBaseAndBitshift+0xa8>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a38      	ldr	r2, [pc, #224]	; (8002ffc <DMA_CalcBaseAndBitshift+0x134>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d027      	beq.n	8002f70 <DMA_CalcBaseAndBitshift+0xa8>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a36      	ldr	r2, [pc, #216]	; (8003000 <DMA_CalcBaseAndBitshift+0x138>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d022      	beq.n	8002f70 <DMA_CalcBaseAndBitshift+0xa8>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a35      	ldr	r2, [pc, #212]	; (8003004 <DMA_CalcBaseAndBitshift+0x13c>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d01d      	beq.n	8002f70 <DMA_CalcBaseAndBitshift+0xa8>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a33      	ldr	r2, [pc, #204]	; (8003008 <DMA_CalcBaseAndBitshift+0x140>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d018      	beq.n	8002f70 <DMA_CalcBaseAndBitshift+0xa8>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a32      	ldr	r2, [pc, #200]	; (800300c <DMA_CalcBaseAndBitshift+0x144>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d013      	beq.n	8002f70 <DMA_CalcBaseAndBitshift+0xa8>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a30      	ldr	r2, [pc, #192]	; (8003010 <DMA_CalcBaseAndBitshift+0x148>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d00e      	beq.n	8002f70 <DMA_CalcBaseAndBitshift+0xa8>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a2f      	ldr	r2, [pc, #188]	; (8003014 <DMA_CalcBaseAndBitshift+0x14c>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d009      	beq.n	8002f70 <DMA_CalcBaseAndBitshift+0xa8>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a2d      	ldr	r2, [pc, #180]	; (8003018 <DMA_CalcBaseAndBitshift+0x150>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d004      	beq.n	8002f70 <DMA_CalcBaseAndBitshift+0xa8>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a2c      	ldr	r2, [pc, #176]	; (800301c <DMA_CalcBaseAndBitshift+0x154>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d101      	bne.n	8002f74 <DMA_CalcBaseAndBitshift+0xac>
 8002f70:	2301      	movs	r3, #1
 8002f72:	e000      	b.n	8002f76 <DMA_CalcBaseAndBitshift+0xae>
 8002f74:	2300      	movs	r3, #0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d024      	beq.n	8002fc4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	3b10      	subs	r3, #16
 8002f82:	4a27      	ldr	r2, [pc, #156]	; (8003020 <DMA_CalcBaseAndBitshift+0x158>)
 8002f84:	fba2 2303 	umull	r2, r3, r2, r3
 8002f88:	091b      	lsrs	r3, r3, #4
 8002f8a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	4a24      	ldr	r2, [pc, #144]	; (8003024 <DMA_CalcBaseAndBitshift+0x15c>)
 8002f94:	5cd3      	ldrb	r3, [r2, r3]
 8002f96:	461a      	mov	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2b03      	cmp	r3, #3
 8002fa0:	d908      	bls.n	8002fb4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	4b1f      	ldr	r3, [pc, #124]	; (8003028 <DMA_CalcBaseAndBitshift+0x160>)
 8002faa:	4013      	ands	r3, r2
 8002fac:	1d1a      	adds	r2, r3, #4
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	659a      	str	r2, [r3, #88]	; 0x58
 8002fb2:	e00d      	b.n	8002fd0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	461a      	mov	r2, r3
 8002fba:	4b1b      	ldr	r3, [pc, #108]	; (8003028 <DMA_CalcBaseAndBitshift+0x160>)
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	6593      	str	r3, [r2, #88]	; 0x58
 8002fc2:	e005      	b.n	8002fd0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3714      	adds	r7, #20
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	40020010 	.word	0x40020010
 8002fe4:	40020028 	.word	0x40020028
 8002fe8:	40020040 	.word	0x40020040
 8002fec:	40020058 	.word	0x40020058
 8002ff0:	40020070 	.word	0x40020070
 8002ff4:	40020088 	.word	0x40020088
 8002ff8:	400200a0 	.word	0x400200a0
 8002ffc:	400200b8 	.word	0x400200b8
 8003000:	40020410 	.word	0x40020410
 8003004:	40020428 	.word	0x40020428
 8003008:	40020440 	.word	0x40020440
 800300c:	40020458 	.word	0x40020458
 8003010:	40020470 	.word	0x40020470
 8003014:	40020488 	.word	0x40020488
 8003018:	400204a0 	.word	0x400204a0
 800301c:	400204b8 	.word	0x400204b8
 8003020:	aaaaaaab 	.word	0xaaaaaaab
 8003024:	0800ba4c 	.word	0x0800ba4c
 8003028:	fffffc00 	.word	0xfffffc00

0800302c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003034:	2300      	movs	r3, #0
 8003036:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d120      	bne.n	8003082 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003044:	2b03      	cmp	r3, #3
 8003046:	d858      	bhi.n	80030fa <DMA_CheckFifoParam+0xce>
 8003048:	a201      	add	r2, pc, #4	; (adr r2, 8003050 <DMA_CheckFifoParam+0x24>)
 800304a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800304e:	bf00      	nop
 8003050:	08003061 	.word	0x08003061
 8003054:	08003073 	.word	0x08003073
 8003058:	08003061 	.word	0x08003061
 800305c:	080030fb 	.word	0x080030fb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003064:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d048      	beq.n	80030fe <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003070:	e045      	b.n	80030fe <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003076:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800307a:	d142      	bne.n	8003102 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003080:	e03f      	b.n	8003102 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800308a:	d123      	bne.n	80030d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003090:	2b03      	cmp	r3, #3
 8003092:	d838      	bhi.n	8003106 <DMA_CheckFifoParam+0xda>
 8003094:	a201      	add	r2, pc, #4	; (adr r2, 800309c <DMA_CheckFifoParam+0x70>)
 8003096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800309a:	bf00      	nop
 800309c:	080030ad 	.word	0x080030ad
 80030a0:	080030b3 	.word	0x080030b3
 80030a4:	080030ad 	.word	0x080030ad
 80030a8:	080030c5 	.word	0x080030c5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	73fb      	strb	r3, [r7, #15]
        break;
 80030b0:	e030      	b.n	8003114 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d025      	beq.n	800310a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80030c2:	e022      	b.n	800310a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030cc:	d11f      	bne.n	800310e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80030d2:	e01c      	b.n	800310e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d902      	bls.n	80030e2 <DMA_CheckFifoParam+0xb6>
 80030dc:	2b03      	cmp	r3, #3
 80030de:	d003      	beq.n	80030e8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80030e0:	e018      	b.n	8003114 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	73fb      	strb	r3, [r7, #15]
        break;
 80030e6:	e015      	b.n	8003114 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00e      	beq.n	8003112 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	73fb      	strb	r3, [r7, #15]
    break;
 80030f8:	e00b      	b.n	8003112 <DMA_CheckFifoParam+0xe6>
        break;
 80030fa:	bf00      	nop
 80030fc:	e00a      	b.n	8003114 <DMA_CheckFifoParam+0xe8>
        break;
 80030fe:	bf00      	nop
 8003100:	e008      	b.n	8003114 <DMA_CheckFifoParam+0xe8>
        break;
 8003102:	bf00      	nop
 8003104:	e006      	b.n	8003114 <DMA_CheckFifoParam+0xe8>
        break;
 8003106:	bf00      	nop
 8003108:	e004      	b.n	8003114 <DMA_CheckFifoParam+0xe8>
        break;
 800310a:	bf00      	nop
 800310c:	e002      	b.n	8003114 <DMA_CheckFifoParam+0xe8>
        break;
 800310e:	bf00      	nop
 8003110:	e000      	b.n	8003114 <DMA_CheckFifoParam+0xe8>
    break;
 8003112:	bf00      	nop
    }
  }

  return status;
 8003114:	7bfb      	ldrb	r3, [r7, #15]
}
 8003116:	4618      	mov	r0, r3
 8003118:	3714      	adds	r7, #20
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop

08003124 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a38      	ldr	r2, [pc, #224]	; (8003218 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d022      	beq.n	8003182 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a36      	ldr	r2, [pc, #216]	; (800321c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d01d      	beq.n	8003182 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a35      	ldr	r2, [pc, #212]	; (8003220 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d018      	beq.n	8003182 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a33      	ldr	r2, [pc, #204]	; (8003224 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d013      	beq.n	8003182 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a32      	ldr	r2, [pc, #200]	; (8003228 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d00e      	beq.n	8003182 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a30      	ldr	r2, [pc, #192]	; (800322c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d009      	beq.n	8003182 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a2f      	ldr	r2, [pc, #188]	; (8003230 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d004      	beq.n	8003182 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a2d      	ldr	r2, [pc, #180]	; (8003234 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d101      	bne.n	8003186 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003182:	2301      	movs	r3, #1
 8003184:	e000      	b.n	8003188 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003186:	2300      	movs	r3, #0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d01a      	beq.n	80031c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	b2db      	uxtb	r3, r3
 8003192:	3b08      	subs	r3, #8
 8003194:	4a28      	ldr	r2, [pc, #160]	; (8003238 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003196:	fba2 2303 	umull	r2, r3, r2, r3
 800319a:	091b      	lsrs	r3, r3, #4
 800319c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	4b26      	ldr	r3, [pc, #152]	; (800323c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80031a2:	4413      	add	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	461a      	mov	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a24      	ldr	r2, [pc, #144]	; (8003240 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80031b0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f003 031f 	and.w	r3, r3, #31
 80031b8:	2201      	movs	r2, #1
 80031ba:	409a      	lsls	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80031c0:	e024      	b.n	800320c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	3b10      	subs	r3, #16
 80031ca:	4a1e      	ldr	r2, [pc, #120]	; (8003244 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80031cc:	fba2 2303 	umull	r2, r3, r2, r3
 80031d0:	091b      	lsrs	r3, r3, #4
 80031d2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	4a1c      	ldr	r2, [pc, #112]	; (8003248 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d806      	bhi.n	80031ea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	4a1b      	ldr	r2, [pc, #108]	; (800324c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d902      	bls.n	80031ea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	3308      	adds	r3, #8
 80031e8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	4b18      	ldr	r3, [pc, #96]	; (8003250 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80031ee:	4413      	add	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	461a      	mov	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a16      	ldr	r2, [pc, #88]	; (8003254 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80031fc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f003 031f 	and.w	r3, r3, #31
 8003204:	2201      	movs	r2, #1
 8003206:	409a      	lsls	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800320c:	bf00      	nop
 800320e:	3714      	adds	r7, #20
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	58025408 	.word	0x58025408
 800321c:	5802541c 	.word	0x5802541c
 8003220:	58025430 	.word	0x58025430
 8003224:	58025444 	.word	0x58025444
 8003228:	58025458 	.word	0x58025458
 800322c:	5802546c 	.word	0x5802546c
 8003230:	58025480 	.word	0x58025480
 8003234:	58025494 	.word	0x58025494
 8003238:	cccccccd 	.word	0xcccccccd
 800323c:	16009600 	.word	0x16009600
 8003240:	58025880 	.word	0x58025880
 8003244:	aaaaaaab 	.word	0xaaaaaaab
 8003248:	400204b8 	.word	0x400204b8
 800324c:	4002040f 	.word	0x4002040f
 8003250:	10008200 	.word	0x10008200
 8003254:	40020880 	.word	0x40020880

08003258 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	b2db      	uxtb	r3, r3
 8003266:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d04a      	beq.n	8003304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2b08      	cmp	r3, #8
 8003272:	d847      	bhi.n	8003304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a25      	ldr	r2, [pc, #148]	; (8003310 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d022      	beq.n	80032c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a24      	ldr	r2, [pc, #144]	; (8003314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d01d      	beq.n	80032c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a22      	ldr	r2, [pc, #136]	; (8003318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d018      	beq.n	80032c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a21      	ldr	r2, [pc, #132]	; (800331c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d013      	beq.n	80032c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a1f      	ldr	r2, [pc, #124]	; (8003320 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d00e      	beq.n	80032c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a1e      	ldr	r2, [pc, #120]	; (8003324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d009      	beq.n	80032c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a1c      	ldr	r2, [pc, #112]	; (8003328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d004      	beq.n	80032c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a1b      	ldr	r2, [pc, #108]	; (800332c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d101      	bne.n	80032c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80032c4:	2301      	movs	r3, #1
 80032c6:	e000      	b.n	80032ca <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80032c8:	2300      	movs	r3, #0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00a      	beq.n	80032e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	4b17      	ldr	r3, [pc, #92]	; (8003330 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80032d2:	4413      	add	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	461a      	mov	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a15      	ldr	r2, [pc, #84]	; (8003334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80032e0:	671a      	str	r2, [r3, #112]	; 0x70
 80032e2:	e009      	b.n	80032f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	4b14      	ldr	r3, [pc, #80]	; (8003338 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80032e8:	4413      	add	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	461a      	mov	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a11      	ldr	r2, [pc, #68]	; (800333c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80032f6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	3b01      	subs	r3, #1
 80032fc:	2201      	movs	r2, #1
 80032fe:	409a      	lsls	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003304:	bf00      	nop
 8003306:	3714      	adds	r7, #20
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	58025408 	.word	0x58025408
 8003314:	5802541c 	.word	0x5802541c
 8003318:	58025430 	.word	0x58025430
 800331c:	58025444 	.word	0x58025444
 8003320:	58025458 	.word	0x58025458
 8003324:	5802546c 	.word	0x5802546c
 8003328:	58025480 	.word	0x58025480
 800332c:	58025494 	.word	0x58025494
 8003330:	1600963f 	.word	0x1600963f
 8003334:	58025940 	.word	0x58025940
 8003338:	1000823f 	.word	0x1000823f
 800333c:	40020940 	.word	0x40020940

08003340 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e0cf      	b.n	80034f2 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003358:	2b00      	cmp	r3, #0
 800335a:	d106      	bne.n	800336a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2223      	movs	r2, #35	; 0x23
 8003360:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f7fe fe21 	bl	8001fac <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800336a:	4b64      	ldr	r3, [pc, #400]	; (80034fc <HAL_ETH_Init+0x1bc>)
 800336c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003370:	4a62      	ldr	r2, [pc, #392]	; (80034fc <HAL_ETH_Init+0x1bc>)
 8003372:	f043 0302 	orr.w	r3, r3, #2
 8003376:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800337a:	4b60      	ldr	r3, [pc, #384]	; (80034fc <HAL_ETH_Init+0x1bc>)
 800337c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	60bb      	str	r3, [r7, #8]
 8003386:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	7a1b      	ldrb	r3, [r3, #8]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d103      	bne.n	8003398 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003390:	2000      	movs	r0, #0
 8003392:	f7ff f945 	bl	8002620 <HAL_SYSCFG_ETHInterfaceSelect>
 8003396:	e003      	b.n	80033a0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003398:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800339c:	f7ff f940 	bl	8002620 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80033a0:	4b57      	ldr	r3, [pc, #348]	; (8003500 <HAL_ETH_Init+0x1c0>)
 80033a2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	6812      	ldr	r2, [r2, #0]
 80033b2:	f043 0301 	orr.w	r3, r3, #1
 80033b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80033ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033bc:	f7ff f8f4 	bl	80025a8 <HAL_GetTick>
 80033c0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80033c2:	e011      	b.n	80033e8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80033c4:	f7ff f8f0 	bl	80025a8 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80033d2:	d909      	bls.n	80033e8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2204      	movs	r2, #4
 80033d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	22e0      	movs	r2, #224	; 0xe0
 80033e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e084      	b.n	80034f2 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1e4      	bne.n	80033c4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f886 	bl	800350c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003400:	f001 fee4 	bl	80051cc <HAL_RCC_GetHCLKFreq>
 8003404:	4603      	mov	r3, r0
 8003406:	4a3f      	ldr	r2, [pc, #252]	; (8003504 <HAL_ETH_Init+0x1c4>)
 8003408:	fba2 2303 	umull	r2, r3, r2, r3
 800340c:	0c9a      	lsrs	r2, r3, #18
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	3a01      	subs	r2, #1
 8003414:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 fa71 	bl	8003900 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003426:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800342a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	6812      	ldr	r2, [r2, #0]
 8003432:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003436:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800343a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	f003 0303 	and.w	r3, r3, #3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d009      	beq.n	800345e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	22e0      	movs	r2, #224	; 0xe0
 8003456:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e049      	b.n	80034f2 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003466:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800346a:	4b27      	ldr	r3, [pc, #156]	; (8003508 <HAL_ETH_Init+0x1c8>)
 800346c:	4013      	ands	r3, r2
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	6952      	ldr	r2, [r2, #20]
 8003472:	0051      	lsls	r1, r2, #1
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	6812      	ldr	r2, [r2, #0]
 8003478:	430b      	orrs	r3, r1
 800347a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800347e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 fad9 	bl	8003a3a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 fb1f 	bl	8003acc <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	3305      	adds	r3, #5
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	021a      	lsls	r2, r3, #8
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	3304      	adds	r3, #4
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	4619      	mov	r1, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	3303      	adds	r3, #3
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	061a      	lsls	r2, r3, #24
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	3302      	adds	r3, #2
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	041b      	lsls	r3, r3, #16
 80034c0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	3301      	adds	r3, #1
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80034cc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80034da:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80034dc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2210      	movs	r2, #16
 80034ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	58024400 	.word	0x58024400
 8003500:	58000400 	.word	0x58000400
 8003504:	431bde83 	.word	0x431bde83
 8003508:	ffff8001 	.word	0xffff8001

0800350c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800351c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003524:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003526:	f001 fe51 	bl	80051cc <HAL_RCC_GetHCLKFreq>
 800352a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	4a1e      	ldr	r2, [pc, #120]	; (80035a8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d908      	bls.n	8003546 <HAL_ETH_SetMDIOClockRange+0x3a>
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	4a1d      	ldr	r2, [pc, #116]	; (80035ac <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d804      	bhi.n	8003546 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003542:	60fb      	str	r3, [r7, #12]
 8003544:	e027      	b.n	8003596 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	4a18      	ldr	r2, [pc, #96]	; (80035ac <HAL_ETH_SetMDIOClockRange+0xa0>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d908      	bls.n	8003560 <HAL_ETH_SetMDIOClockRange+0x54>
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	4a17      	ldr	r2, [pc, #92]	; (80035b0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d204      	bcs.n	8003560 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800355c:	60fb      	str	r3, [r7, #12]
 800355e:	e01a      	b.n	8003596 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	4a13      	ldr	r2, [pc, #76]	; (80035b0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d303      	bcc.n	8003570 <HAL_ETH_SetMDIOClockRange+0x64>
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	4a12      	ldr	r2, [pc, #72]	; (80035b4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d911      	bls.n	8003594 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	4a10      	ldr	r2, [pc, #64]	; (80035b4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d908      	bls.n	800358a <HAL_ETH_SetMDIOClockRange+0x7e>
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	4a0f      	ldr	r2, [pc, #60]	; (80035b8 <HAL_ETH_SetMDIOClockRange+0xac>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d804      	bhi.n	800358a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	e005      	b.n	8003596 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	e000      	b.n	8003596 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003594:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80035a0:	bf00      	nop
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	01312cff 	.word	0x01312cff
 80035ac:	02160ebf 	.word	0x02160ebf
 80035b0:	03938700 	.word	0x03938700
 80035b4:	05f5e0ff 	.word	0x05f5e0ff
 80035b8:	08f0d17f 	.word	0x08f0d17f

080035bc <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80035ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	791b      	ldrb	r3, [r3, #4]
 80035d4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80035d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	7b1b      	ldrb	r3, [r3, #12]
 80035dc:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80035de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	7b5b      	ldrb	r3, [r3, #13]
 80035e4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80035e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	7b9b      	ldrb	r3, [r3, #14]
 80035ec:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80035ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	7bdb      	ldrb	r3, [r3, #15]
 80035f4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80035f6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	7c12      	ldrb	r2, [r2, #16]
 80035fc:	2a00      	cmp	r2, #0
 80035fe:	d102      	bne.n	8003606 <ETH_SetMACConfig+0x4a>
 8003600:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003604:	e000      	b.n	8003608 <ETH_SetMACConfig+0x4c>
 8003606:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003608:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	7c52      	ldrb	r2, [r2, #17]
 800360e:	2a00      	cmp	r2, #0
 8003610:	d102      	bne.n	8003618 <ETH_SetMACConfig+0x5c>
 8003612:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003616:	e000      	b.n	800361a <ETH_SetMACConfig+0x5e>
 8003618:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800361a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	7c9b      	ldrb	r3, [r3, #18]
 8003620:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003622:	431a      	orrs	r2, r3
               macconf->Speed |
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8003628:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800362e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	7f1b      	ldrb	r3, [r3, #28]
 8003634:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8003636:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	7f5b      	ldrb	r3, [r3, #29]
 800363c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800363e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	7f92      	ldrb	r2, [r2, #30]
 8003644:	2a00      	cmp	r2, #0
 8003646:	d102      	bne.n	800364e <ETH_SetMACConfig+0x92>
 8003648:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800364c:	e000      	b.n	8003650 <ETH_SetMACConfig+0x94>
 800364e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003650:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	7fdb      	ldrb	r3, [r3, #31]
 8003656:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003658:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003660:	2a00      	cmp	r2, #0
 8003662:	d102      	bne.n	800366a <ETH_SetMACConfig+0xae>
 8003664:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003668:	e000      	b.n	800366c <ETH_SetMACConfig+0xb0>
 800366a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800366c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003672:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800367a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800367c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8003682:	4313      	orrs	r3, r2
 8003684:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	4b56      	ldr	r3, [pc, #344]	; (80037e8 <ETH_SetMACConfig+0x22c>)
 800368e:	4013      	ands	r3, r2
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	6812      	ldr	r2, [r2, #0]
 8003694:	68f9      	ldr	r1, [r7, #12]
 8003696:	430b      	orrs	r3, r1
 8003698:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800369e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036a6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80036a8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80036b0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80036b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80036ba:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80036bc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80036c4:	2a00      	cmp	r2, #0
 80036c6:	d102      	bne.n	80036ce <ETH_SetMACConfig+0x112>
 80036c8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80036cc:	e000      	b.n	80036d0 <ETH_SetMACConfig+0x114>
 80036ce:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80036d0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80036d6:	4313      	orrs	r3, r2
 80036d8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	4b42      	ldr	r3, [pc, #264]	; (80037ec <ETH_SetMACConfig+0x230>)
 80036e2:	4013      	ands	r3, r2
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	6812      	ldr	r2, [r2, #0]
 80036e8:	68f9      	ldr	r1, [r7, #12]
 80036ea:	430b      	orrs	r3, r1
 80036ec:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036f4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80036fa:	4313      	orrs	r3, r2
 80036fc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68da      	ldr	r2, [r3, #12]
 8003704:	4b3a      	ldr	r3, [pc, #232]	; (80037f0 <ETH_SetMACConfig+0x234>)
 8003706:	4013      	ands	r3, r2
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6812      	ldr	r2, [r2, #0]
 800370c:	68f9      	ldr	r1, [r7, #12]
 800370e:	430b      	orrs	r3, r1
 8003710:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003718:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800371e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003726:	2a00      	cmp	r2, #0
 8003728:	d101      	bne.n	800372e <ETH_SetMACConfig+0x172>
 800372a:	2280      	movs	r2, #128	; 0x80
 800372c:	e000      	b.n	8003730 <ETH_SetMACConfig+0x174>
 800372e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003730:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003736:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003738:	4313      	orrs	r3, r2
 800373a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003742:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8003746:	4013      	ands	r3, r2
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	6812      	ldr	r2, [r2, #0]
 800374c:	68f9      	ldr	r1, [r7, #12]
 800374e:	430b      	orrs	r3, r1
 8003750:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003758:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003760:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003762:	4313      	orrs	r3, r2
 8003764:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376e:	f023 0103 	bic.w	r1, r3, #3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	430a      	orrs	r2, r1
 800377a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8003786:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80037a2:	2a00      	cmp	r2, #0
 80037a4:	d101      	bne.n	80037aa <ETH_SetMACConfig+0x1ee>
 80037a6:	2240      	movs	r2, #64	; 0x40
 80037a8:	e000      	b.n	80037ac <ETH_SetMACConfig+0x1f0>
 80037aa:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80037ac:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80037b4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80037b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80037be:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80037c0:	4313      	orrs	r3, r2
 80037c2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80037cc:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80037dc:	bf00      	nop
 80037de:	3714      	adds	r7, #20
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	00048083 	.word	0x00048083
 80037ec:	c0f88000 	.word	0xc0f88000
 80037f0:	fffffef0 	.word	0xfffffef0

080037f4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	4b38      	ldr	r3, [pc, #224]	; (80038ec <ETH_SetDMAConfig+0xf8>)
 800380a:	4013      	ands	r3, r2
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	6811      	ldr	r1, [r2, #0]
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	6812      	ldr	r2, [r2, #0]
 8003814:	430b      	orrs	r3, r1
 8003816:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800381a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	791b      	ldrb	r3, [r3, #4]
 8003820:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003826:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	7b1b      	ldrb	r3, [r3, #12]
 800382c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800382e:	4313      	orrs	r3, r2
 8003830:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	4b2c      	ldr	r3, [pc, #176]	; (80038f0 <ETH_SetDMAConfig+0xfc>)
 800383e:	4013      	ands	r3, r2
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6812      	ldr	r2, [r2, #0]
 8003844:	68f9      	ldr	r1, [r7, #12]
 8003846:	430b      	orrs	r3, r1
 8003848:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800384c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	7b5b      	ldrb	r3, [r3, #13]
 8003852:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003858:	4313      	orrs	r3, r2
 800385a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003864:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8003868:	4b22      	ldr	r3, [pc, #136]	; (80038f4 <ETH_SetDMAConfig+0x100>)
 800386a:	4013      	ands	r3, r2
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	6812      	ldr	r2, [r2, #0]
 8003870:	68f9      	ldr	r1, [r7, #12]
 8003872:	430b      	orrs	r3, r1
 8003874:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003878:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	7d1b      	ldrb	r3, [r3, #20]
 8003884:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003886:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	7f5b      	ldrb	r3, [r3, #29]
 800388c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800388e:	4313      	orrs	r3, r2
 8003890:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800389a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800389e:	4b16      	ldr	r3, [pc, #88]	; (80038f8 <ETH_SetDMAConfig+0x104>)
 80038a0:	4013      	ands	r3, r2
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	6812      	ldr	r2, [r2, #0]
 80038a6:	68f9      	ldr	r1, [r7, #12]
 80038a8:	430b      	orrs	r3, r1
 80038aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80038ae:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	7f1b      	ldrb	r3, [r3, #28]
 80038b6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80038bc:	4313      	orrs	r3, r2
 80038be:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038c8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80038cc:	4b0b      	ldr	r3, [pc, #44]	; (80038fc <ETH_SetDMAConfig+0x108>)
 80038ce:	4013      	ands	r3, r2
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6812      	ldr	r2, [r2, #0]
 80038d4:	68f9      	ldr	r1, [r7, #12]
 80038d6:	430b      	orrs	r3, r1
 80038d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80038dc:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80038e0:	bf00      	nop
 80038e2:	3714      	adds	r7, #20
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr
 80038ec:	ffff87fd 	.word	0xffff87fd
 80038f0:	ffff2ffe 	.word	0xffff2ffe
 80038f4:	fffec000 	.word	0xfffec000
 80038f8:	ffc0efef 	.word	0xffc0efef
 80038fc:	7fc0ffff 	.word	0x7fc0ffff

08003900 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b0a4      	sub	sp, #144	; 0x90
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003908:	2301      	movs	r3, #1
 800390a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800390e:	2300      	movs	r3, #0
 8003910:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003912:	2300      	movs	r3, #0
 8003914:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003918:	2300      	movs	r3, #0
 800391a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800391e:	2301      	movs	r3, #1
 8003920:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003924:	2301      	movs	r3, #1
 8003926:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800392a:	2301      	movs	r3, #1
 800392c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003930:	2300      	movs	r3, #0
 8003932:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003936:	2301      	movs	r3, #1
 8003938:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800393c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003940:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003942:	2300      	movs	r3, #0
 8003944:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8003948:	2300      	movs	r3, #0
 800394a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800394c:	2300      	movs	r3, #0
 800394e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003952:	2300      	movs	r3, #0
 8003954:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8003958:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800395c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800395e:	2300      	movs	r3, #0
 8003960:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003964:	2300      	movs	r3, #0
 8003966:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8003968:	2301      	movs	r3, #1
 800396a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800396e:	2300      	movs	r3, #0
 8003970:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003974:	2300      	movs	r3, #0
 8003976:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800397a:	2300      	movs	r3, #0
 800397c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800397e:	2300      	movs	r3, #0
 8003980:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003982:	2300      	movs	r3, #0
 8003984:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003986:	2300      	movs	r3, #0
 8003988:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800398c:	2300      	movs	r3, #0
 800398e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003992:	2301      	movs	r3, #1
 8003994:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003998:	2320      	movs	r3, #32
 800399a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800399e:	2301      	movs	r3, #1
 80039a0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80039a4:	2300      	movs	r3, #0
 80039a6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80039aa:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80039ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80039b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80039b4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80039b6:	2300      	movs	r3, #0
 80039b8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80039bc:	2302      	movs	r3, #2
 80039be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80039c2:	2300      	movs	r3, #0
 80039c4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80039c8:	2300      	movs	r3, #0
 80039ca:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80039ce:	2300      	movs	r3, #0
 80039d0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80039d4:	2301      	movs	r3, #1
 80039d6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80039da:	2300      	movs	r3, #0
 80039dc:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80039de:	2301      	movs	r3, #1
 80039e0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80039e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039e8:	4619      	mov	r1, r3
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7ff fde6 	bl	80035bc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80039f0:	2301      	movs	r3, #1
 80039f2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80039f4:	2301      	movs	r3, #1
 80039f6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80039f8:	2300      	movs	r3, #0
 80039fa:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80039fc:	2300      	movs	r3, #0
 80039fe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003a02:	2300      	movs	r3, #0
 8003a04:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003a06:	2300      	movs	r3, #0
 8003a08:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003a0a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003a0e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003a10:	2300      	movs	r3, #0
 8003a12:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003a14:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003a18:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8003a20:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003a24:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003a26:	f107 0308 	add.w	r3, r7, #8
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7ff fee1 	bl	80037f4 <ETH_SetDMAConfig>
}
 8003a32:	bf00      	nop
 8003a34:	3790      	adds	r7, #144	; 0x90
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b085      	sub	sp, #20
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003a42:	2300      	movs	r3, #0
 8003a44:	60fb      	str	r3, [r7, #12]
 8003a46:	e01d      	b.n	8003a84 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68d9      	ldr	r1, [r3, #12]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	4413      	add	r3, r2
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	440b      	add	r3, r1
 8003a58:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	2200      	movs	r2, #0
 8003a64:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003a72:	68b9      	ldr	r1, [r7, #8]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	3206      	adds	r2, #6
 8003a7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	3301      	adds	r3, #1
 8003a82:	60fb      	str	r3, [r7, #12]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2b03      	cmp	r3, #3
 8003a88:	d9de      	bls.n	8003a48 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a98:	461a      	mov	r2, r3
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	68da      	ldr	r2, [r3, #12]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aac:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68da      	ldr	r2, [r3, #12]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003abc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8003ac0:	bf00      	nop
 8003ac2:	3714      	adds	r7, #20
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	e023      	b.n	8003b22 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6919      	ldr	r1, [r3, #16]
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	4413      	add	r3, r2
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	440b      	add	r3, r1
 8003aea:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	2200      	movs	r2, #0
 8003af6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	2200      	movs	r2, #0
 8003afc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	2200      	movs	r2, #0
 8003b02:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	2200      	movs	r2, #0
 8003b08:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003b10:	68b9      	ldr	r1, [r7, #8]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	3212      	adds	r2, #18
 8003b18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	3301      	adds	r3, #1
 8003b20:	60fb      	str	r3, [r7, #12]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2b03      	cmp	r3, #3
 8003b26:	d9d8      	bls.n	8003ada <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b4e:	461a      	mov	r2, r3
 8003b50:	2303      	movs	r3, #3
 8003b52:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691a      	ldr	r2, [r3, #16]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b62:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b76:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8003b7a:	bf00      	nop
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
	...

08003b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b089      	sub	sp, #36	; 0x24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003b92:	2300      	movs	r3, #0
 8003b94:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003b96:	4b89      	ldr	r3, [pc, #548]	; (8003dbc <HAL_GPIO_Init+0x234>)
 8003b98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003b9a:	e194      	b.n	8003ec6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba8:	4013      	ands	r3, r2
 8003baa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 8186 	beq.w	8003ec0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f003 0303 	and.w	r3, r3, #3
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d005      	beq.n	8003bcc <HAL_GPIO_Init+0x44>
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f003 0303 	and.w	r3, r3, #3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d130      	bne.n	8003c2e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	2203      	movs	r2, #3
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	43db      	mvns	r3, r3
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	4013      	ands	r3, r2
 8003be2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	68da      	ldr	r2, [r3, #12]
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c02:	2201      	movs	r2, #1
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0a:	43db      	mvns	r3, r3
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	091b      	lsrs	r3, r3, #4
 8003c18:	f003 0201 	and.w	r2, r3, #1
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f003 0303 	and.w	r3, r3, #3
 8003c36:	2b03      	cmp	r3, #3
 8003c38:	d017      	beq.n	8003c6a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	2203      	movs	r2, #3
 8003c46:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4a:	43db      	mvns	r3, r3
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	4013      	ands	r3, r2
 8003c50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	689a      	ldr	r2, [r3, #8]
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	69ba      	ldr	r2, [r7, #24]
 8003c68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f003 0303 	and.w	r3, r3, #3
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d123      	bne.n	8003cbe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	08da      	lsrs	r2, r3, #3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	3208      	adds	r2, #8
 8003c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	f003 0307 	and.w	r3, r3, #7
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	220f      	movs	r2, #15
 8003c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c92:	43db      	mvns	r3, r3
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	4013      	ands	r3, r2
 8003c98:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	691a      	ldr	r2, [r3, #16]
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	f003 0307 	and.w	r3, r3, #7
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8003caa:	69ba      	ldr	r2, [r7, #24]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	08da      	lsrs	r2, r3, #3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3208      	adds	r2, #8
 8003cb8:	69b9      	ldr	r1, [r7, #24]
 8003cba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	2203      	movs	r2, #3
 8003cca:	fa02 f303 	lsl.w	r3, r2, r3
 8003cce:	43db      	mvns	r3, r3
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f003 0203 	and.w	r2, r3, #3
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	005b      	lsls	r3, r3, #1
 8003ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f000 80e0 	beq.w	8003ec0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d00:	4b2f      	ldr	r3, [pc, #188]	; (8003dc0 <HAL_GPIO_Init+0x238>)
 8003d02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003d06:	4a2e      	ldr	r2, [pc, #184]	; (8003dc0 <HAL_GPIO_Init+0x238>)
 8003d08:	f043 0302 	orr.w	r3, r3, #2
 8003d0c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003d10:	4b2b      	ldr	r3, [pc, #172]	; (8003dc0 <HAL_GPIO_Init+0x238>)
 8003d12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	60fb      	str	r3, [r7, #12]
 8003d1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d1e:	4a29      	ldr	r2, [pc, #164]	; (8003dc4 <HAL_GPIO_Init+0x23c>)
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	089b      	lsrs	r3, r3, #2
 8003d24:	3302      	adds	r3, #2
 8003d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	f003 0303 	and.w	r3, r3, #3
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	220f      	movs	r2, #15
 8003d36:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3a:	43db      	mvns	r3, r3
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a20      	ldr	r2, [pc, #128]	; (8003dc8 <HAL_GPIO_Init+0x240>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d052      	beq.n	8003df0 <HAL_GPIO_Init+0x268>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a1f      	ldr	r2, [pc, #124]	; (8003dcc <HAL_GPIO_Init+0x244>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d031      	beq.n	8003db6 <HAL_GPIO_Init+0x22e>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a1e      	ldr	r2, [pc, #120]	; (8003dd0 <HAL_GPIO_Init+0x248>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d02b      	beq.n	8003db2 <HAL_GPIO_Init+0x22a>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a1d      	ldr	r2, [pc, #116]	; (8003dd4 <HAL_GPIO_Init+0x24c>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d025      	beq.n	8003dae <HAL_GPIO_Init+0x226>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a1c      	ldr	r2, [pc, #112]	; (8003dd8 <HAL_GPIO_Init+0x250>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d01f      	beq.n	8003daa <HAL_GPIO_Init+0x222>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a1b      	ldr	r2, [pc, #108]	; (8003ddc <HAL_GPIO_Init+0x254>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d019      	beq.n	8003da6 <HAL_GPIO_Init+0x21e>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a1a      	ldr	r2, [pc, #104]	; (8003de0 <HAL_GPIO_Init+0x258>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d013      	beq.n	8003da2 <HAL_GPIO_Init+0x21a>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a19      	ldr	r2, [pc, #100]	; (8003de4 <HAL_GPIO_Init+0x25c>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d00d      	beq.n	8003d9e <HAL_GPIO_Init+0x216>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a18      	ldr	r2, [pc, #96]	; (8003de8 <HAL_GPIO_Init+0x260>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d007      	beq.n	8003d9a <HAL_GPIO_Init+0x212>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a17      	ldr	r2, [pc, #92]	; (8003dec <HAL_GPIO_Init+0x264>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d101      	bne.n	8003d96 <HAL_GPIO_Init+0x20e>
 8003d92:	2309      	movs	r3, #9
 8003d94:	e02d      	b.n	8003df2 <HAL_GPIO_Init+0x26a>
 8003d96:	230a      	movs	r3, #10
 8003d98:	e02b      	b.n	8003df2 <HAL_GPIO_Init+0x26a>
 8003d9a:	2308      	movs	r3, #8
 8003d9c:	e029      	b.n	8003df2 <HAL_GPIO_Init+0x26a>
 8003d9e:	2307      	movs	r3, #7
 8003da0:	e027      	b.n	8003df2 <HAL_GPIO_Init+0x26a>
 8003da2:	2306      	movs	r3, #6
 8003da4:	e025      	b.n	8003df2 <HAL_GPIO_Init+0x26a>
 8003da6:	2305      	movs	r3, #5
 8003da8:	e023      	b.n	8003df2 <HAL_GPIO_Init+0x26a>
 8003daa:	2304      	movs	r3, #4
 8003dac:	e021      	b.n	8003df2 <HAL_GPIO_Init+0x26a>
 8003dae:	2303      	movs	r3, #3
 8003db0:	e01f      	b.n	8003df2 <HAL_GPIO_Init+0x26a>
 8003db2:	2302      	movs	r3, #2
 8003db4:	e01d      	b.n	8003df2 <HAL_GPIO_Init+0x26a>
 8003db6:	2301      	movs	r3, #1
 8003db8:	e01b      	b.n	8003df2 <HAL_GPIO_Init+0x26a>
 8003dba:	bf00      	nop
 8003dbc:	58000080 	.word	0x58000080
 8003dc0:	58024400 	.word	0x58024400
 8003dc4:	58000400 	.word	0x58000400
 8003dc8:	58020000 	.word	0x58020000
 8003dcc:	58020400 	.word	0x58020400
 8003dd0:	58020800 	.word	0x58020800
 8003dd4:	58020c00 	.word	0x58020c00
 8003dd8:	58021000 	.word	0x58021000
 8003ddc:	58021400 	.word	0x58021400
 8003de0:	58021800 	.word	0x58021800
 8003de4:	58021c00 	.word	0x58021c00
 8003de8:	58022000 	.word	0x58022000
 8003dec:	58022400 	.word	0x58022400
 8003df0:	2300      	movs	r3, #0
 8003df2:	69fa      	ldr	r2, [r7, #28]
 8003df4:	f002 0203 	and.w	r2, r2, #3
 8003df8:	0092      	lsls	r2, r2, #2
 8003dfa:	4093      	lsls	r3, r2
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e02:	4938      	ldr	r1, [pc, #224]	; (8003ee4 <HAL_GPIO_Init+0x35c>)
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	089b      	lsrs	r3, r3, #2
 8003e08:	3302      	adds	r3, #2
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	43db      	mvns	r3, r3
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	4013      	ands	r3, r2
 8003e20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003e36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	43db      	mvns	r3, r3
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d003      	beq.n	8003e64 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003e64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	43db      	mvns	r3, r3
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d003      	beq.n	8003e90 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	43db      	mvns	r3, r3
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f47f ae63 	bne.w	8003b9c <HAL_GPIO_Init+0x14>
  }
}
 8003ed6:	bf00      	nop
 8003ed8:	bf00      	nop
 8003eda:	3724      	adds	r7, #36	; 0x24
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr
 8003ee4:	58000400 	.word	0x58000400

08003ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	807b      	strh	r3, [r7, #2]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ef8:	787b      	ldrb	r3, [r7, #1]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d003      	beq.n	8003f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003efe:	887a      	ldrh	r2, [r7, #2]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003f04:	e003      	b.n	8003f0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003f06:	887b      	ldrh	r3, [r7, #2]
 8003f08:	041a      	lsls	r2, r3, #16
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	619a      	str	r2, [r3, #24]
}
 8003f0e:	bf00      	nop
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b085      	sub	sp, #20
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
 8003f22:	460b      	mov	r3, r1
 8003f24:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f2c:	887a      	ldrh	r2, [r7, #2]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	4013      	ands	r3, r2
 8003f32:	041a      	lsls	r2, r3, #16
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	43d9      	mvns	r1, r3
 8003f38:	887b      	ldrh	r3, [r7, #2]
 8003f3a:	400b      	ands	r3, r1
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	619a      	str	r2, [r3, #24]
}
 8003f42:	bf00      	nop
 8003f44:	3714      	adds	r7, #20
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
	...

08003f50 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003f58:	4a08      	ldr	r2, [pc, #32]	; (8003f7c <HAL_HSEM_FastTake+0x2c>)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	3320      	adds	r3, #32
 8003f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f62:	4a07      	ldr	r2, [pc, #28]	; (8003f80 <HAL_HSEM_FastTake+0x30>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d101      	bne.n	8003f6c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	e000      	b.n	8003f6e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	58026400 	.word	0x58026400
 8003f80:	80000300 	.word	0x80000300

08003f84 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003f8e:	4906      	ldr	r1, [pc, #24]	; (8003fa8 <HAL_HSEM_Release+0x24>)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	58026400 	.word	0x58026400

08003fac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fae:	b08f      	sub	sp, #60	; 0x3c
 8003fb0:	af0a      	add	r7, sp, #40	; 0x28
 8003fb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e116      	b.n	80041ec <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d106      	bne.n	8003fde <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f7fe f94d 	bl	8002278 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2203      	movs	r2, #3
 8003fe2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d102      	bne.n	8003ff8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f003 fe1d 	bl	8007c3c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	603b      	str	r3, [r7, #0]
 8004008:	687e      	ldr	r6, [r7, #4]
 800400a:	466d      	mov	r5, sp
 800400c:	f106 0410 	add.w	r4, r6, #16
 8004010:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004012:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004014:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004016:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004018:	e894 0003 	ldmia.w	r4, {r0, r1}
 800401c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004020:	1d33      	adds	r3, r6, #4
 8004022:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004024:	6838      	ldr	r0, [r7, #0]
 8004026:	f003 fd9b 	bl	8007b60 <USB_CoreInit>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d005      	beq.n	800403c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2202      	movs	r2, #2
 8004034:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e0d7      	b.n	80041ec <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2100      	movs	r1, #0
 8004042:	4618      	mov	r0, r3
 8004044:	f003 fe0b 	bl	8007c5e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004048:	2300      	movs	r3, #0
 800404a:	73fb      	strb	r3, [r7, #15]
 800404c:	e04a      	b.n	80040e4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800404e:	7bfa      	ldrb	r2, [r7, #15]
 8004050:	6879      	ldr	r1, [r7, #4]
 8004052:	4613      	mov	r3, r2
 8004054:	00db      	lsls	r3, r3, #3
 8004056:	4413      	add	r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	440b      	add	r3, r1
 800405c:	333d      	adds	r3, #61	; 0x3d
 800405e:	2201      	movs	r2, #1
 8004060:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004062:	7bfa      	ldrb	r2, [r7, #15]
 8004064:	6879      	ldr	r1, [r7, #4]
 8004066:	4613      	mov	r3, r2
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	4413      	add	r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	440b      	add	r3, r1
 8004070:	333c      	adds	r3, #60	; 0x3c
 8004072:	7bfa      	ldrb	r2, [r7, #15]
 8004074:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004076:	7bfa      	ldrb	r2, [r7, #15]
 8004078:	7bfb      	ldrb	r3, [r7, #15]
 800407a:	b298      	uxth	r0, r3
 800407c:	6879      	ldr	r1, [r7, #4]
 800407e:	4613      	mov	r3, r2
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	4413      	add	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	440b      	add	r3, r1
 8004088:	3344      	adds	r3, #68	; 0x44
 800408a:	4602      	mov	r2, r0
 800408c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800408e:	7bfa      	ldrb	r2, [r7, #15]
 8004090:	6879      	ldr	r1, [r7, #4]
 8004092:	4613      	mov	r3, r2
 8004094:	00db      	lsls	r3, r3, #3
 8004096:	4413      	add	r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	440b      	add	r3, r1
 800409c:	3340      	adds	r3, #64	; 0x40
 800409e:	2200      	movs	r2, #0
 80040a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80040a2:	7bfa      	ldrb	r2, [r7, #15]
 80040a4:	6879      	ldr	r1, [r7, #4]
 80040a6:	4613      	mov	r3, r2
 80040a8:	00db      	lsls	r3, r3, #3
 80040aa:	4413      	add	r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	440b      	add	r3, r1
 80040b0:	3348      	adds	r3, #72	; 0x48
 80040b2:	2200      	movs	r2, #0
 80040b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80040b6:	7bfa      	ldrb	r2, [r7, #15]
 80040b8:	6879      	ldr	r1, [r7, #4]
 80040ba:	4613      	mov	r3, r2
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	4413      	add	r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	440b      	add	r3, r1
 80040c4:	334c      	adds	r3, #76	; 0x4c
 80040c6:	2200      	movs	r2, #0
 80040c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80040ca:	7bfa      	ldrb	r2, [r7, #15]
 80040cc:	6879      	ldr	r1, [r7, #4]
 80040ce:	4613      	mov	r3, r2
 80040d0:	00db      	lsls	r3, r3, #3
 80040d2:	4413      	add	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	440b      	add	r3, r1
 80040d8:	3354      	adds	r3, #84	; 0x54
 80040da:	2200      	movs	r2, #0
 80040dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040de:	7bfb      	ldrb	r3, [r7, #15]
 80040e0:	3301      	adds	r3, #1
 80040e2:	73fb      	strb	r3, [r7, #15]
 80040e4:	7bfa      	ldrb	r2, [r7, #15]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d3af      	bcc.n	800404e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040ee:	2300      	movs	r3, #0
 80040f0:	73fb      	strb	r3, [r7, #15]
 80040f2:	e044      	b.n	800417e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80040f4:	7bfa      	ldrb	r2, [r7, #15]
 80040f6:	6879      	ldr	r1, [r7, #4]
 80040f8:	4613      	mov	r3, r2
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	4413      	add	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	440b      	add	r3, r1
 8004102:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004106:	2200      	movs	r2, #0
 8004108:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800410a:	7bfa      	ldrb	r2, [r7, #15]
 800410c:	6879      	ldr	r1, [r7, #4]
 800410e:	4613      	mov	r3, r2
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	4413      	add	r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	440b      	add	r3, r1
 8004118:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800411c:	7bfa      	ldrb	r2, [r7, #15]
 800411e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004120:	7bfa      	ldrb	r2, [r7, #15]
 8004122:	6879      	ldr	r1, [r7, #4]
 8004124:	4613      	mov	r3, r2
 8004126:	00db      	lsls	r3, r3, #3
 8004128:	4413      	add	r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	440b      	add	r3, r1
 800412e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004132:	2200      	movs	r2, #0
 8004134:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004136:	7bfa      	ldrb	r2, [r7, #15]
 8004138:	6879      	ldr	r1, [r7, #4]
 800413a:	4613      	mov	r3, r2
 800413c:	00db      	lsls	r3, r3, #3
 800413e:	4413      	add	r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	440b      	add	r3, r1
 8004144:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004148:	2200      	movs	r2, #0
 800414a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800414c:	7bfa      	ldrb	r2, [r7, #15]
 800414e:	6879      	ldr	r1, [r7, #4]
 8004150:	4613      	mov	r3, r2
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	4413      	add	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	440b      	add	r3, r1
 800415a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800415e:	2200      	movs	r2, #0
 8004160:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004162:	7bfa      	ldrb	r2, [r7, #15]
 8004164:	6879      	ldr	r1, [r7, #4]
 8004166:	4613      	mov	r3, r2
 8004168:	00db      	lsls	r3, r3, #3
 800416a:	4413      	add	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	440b      	add	r3, r1
 8004170:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004178:	7bfb      	ldrb	r3, [r7, #15]
 800417a:	3301      	adds	r3, #1
 800417c:	73fb      	strb	r3, [r7, #15]
 800417e:	7bfa      	ldrb	r2, [r7, #15]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	429a      	cmp	r2, r3
 8004186:	d3b5      	bcc.n	80040f4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	603b      	str	r3, [r7, #0]
 800418e:	687e      	ldr	r6, [r7, #4]
 8004190:	466d      	mov	r5, sp
 8004192:	f106 0410 	add.w	r4, r6, #16
 8004196:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004198:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800419a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800419c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800419e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80041a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80041a6:	1d33      	adds	r3, r6, #4
 80041a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041aa:	6838      	ldr	r0, [r7, #0]
 80041ac:	f003 fda4 	bl	8007cf8 <USB_DevInit>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d005      	beq.n	80041c2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2202      	movs	r2, #2
 80041ba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e014      	b.n	80041ec <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d102      	bne.n	80041e0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f80a 	bl	80041f4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f003 ff62 	bl	80080ae <USB_DevDisconnect>

  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3714      	adds	r7, #20
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080041f4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2201      	movs	r2, #1
 8004206:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004222:	4b05      	ldr	r3, [pc, #20]	; (8004238 <HAL_PCDEx_ActivateLPM+0x44>)
 8004224:	4313      	orrs	r3, r2
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3714      	adds	r7, #20
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	10000003 	.word	0x10000003

0800423c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004244:	4b29      	ldr	r3, [pc, #164]	; (80042ec <HAL_PWREx_ConfigSupply+0xb0>)
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	2b06      	cmp	r3, #6
 800424e:	d00a      	beq.n	8004266 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004250:	4b26      	ldr	r3, [pc, #152]	; (80042ec <HAL_PWREx_ConfigSupply+0xb0>)
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	429a      	cmp	r2, r3
 800425c:	d001      	beq.n	8004262 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e040      	b.n	80042e4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004262:	2300      	movs	r3, #0
 8004264:	e03e      	b.n	80042e4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004266:	4b21      	ldr	r3, [pc, #132]	; (80042ec <HAL_PWREx_ConfigSupply+0xb0>)
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800426e:	491f      	ldr	r1, [pc, #124]	; (80042ec <HAL_PWREx_ConfigSupply+0xb0>)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4313      	orrs	r3, r2
 8004274:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004276:	f7fe f997 	bl	80025a8 <HAL_GetTick>
 800427a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800427c:	e009      	b.n	8004292 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800427e:	f7fe f993 	bl	80025a8 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800428c:	d901      	bls.n	8004292 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e028      	b.n	80042e4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004292:	4b16      	ldr	r3, [pc, #88]	; (80042ec <HAL_PWREx_ConfigSupply+0xb0>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800429a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800429e:	d1ee      	bne.n	800427e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b1e      	cmp	r3, #30
 80042a4:	d008      	beq.n	80042b8 <HAL_PWREx_ConfigSupply+0x7c>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2b2e      	cmp	r3, #46	; 0x2e
 80042aa:	d005      	beq.n	80042b8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b1d      	cmp	r3, #29
 80042b0:	d002      	beq.n	80042b8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2b2d      	cmp	r3, #45	; 0x2d
 80042b6:	d114      	bne.n	80042e2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80042b8:	f7fe f976 	bl	80025a8 <HAL_GetTick>
 80042bc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80042be:	e009      	b.n	80042d4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80042c0:	f7fe f972 	bl	80025a8 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042ce:	d901      	bls.n	80042d4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e007      	b.n	80042e4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80042d4:	4b05      	ldr	r3, [pc, #20]	; (80042ec <HAL_PWREx_ConfigSupply+0xb0>)
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042e0:	d1ee      	bne.n	80042c0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	58024800 	.word	0x58024800

080042f0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80042f0:	b480      	push	{r7}
 80042f2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80042f4:	4b05      	ldr	r3, [pc, #20]	; (800430c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	4a04      	ldr	r2, [pc, #16]	; (800430c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80042fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042fe:	60d3      	str	r3, [r2, #12]
}
 8004300:	bf00      	nop
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	58024800 	.word	0x58024800

08004310 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b08c      	sub	sp, #48	; 0x30
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d102      	bne.n	8004324 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	f000 bc1d 	b.w	8004b5e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 8087 	beq.w	8004440 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004332:	4b99      	ldr	r3, [pc, #612]	; (8004598 <HAL_RCC_OscConfig+0x288>)
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800433a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800433c:	4b96      	ldr	r3, [pc, #600]	; (8004598 <HAL_RCC_OscConfig+0x288>)
 800433e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004340:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004344:	2b10      	cmp	r3, #16
 8004346:	d007      	beq.n	8004358 <HAL_RCC_OscConfig+0x48>
 8004348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434a:	2b18      	cmp	r3, #24
 800434c:	d110      	bne.n	8004370 <HAL_RCC_OscConfig+0x60>
 800434e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004350:	f003 0303 	and.w	r3, r3, #3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d10b      	bne.n	8004370 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004358:	4b8f      	ldr	r3, [pc, #572]	; (8004598 <HAL_RCC_OscConfig+0x288>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d06c      	beq.n	800443e <HAL_RCC_OscConfig+0x12e>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d168      	bne.n	800443e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e3f6      	b.n	8004b5e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004378:	d106      	bne.n	8004388 <HAL_RCC_OscConfig+0x78>
 800437a:	4b87      	ldr	r3, [pc, #540]	; (8004598 <HAL_RCC_OscConfig+0x288>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a86      	ldr	r2, [pc, #536]	; (8004598 <HAL_RCC_OscConfig+0x288>)
 8004380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004384:	6013      	str	r3, [r2, #0]
 8004386:	e02e      	b.n	80043e6 <HAL_RCC_OscConfig+0xd6>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d10c      	bne.n	80043aa <HAL_RCC_OscConfig+0x9a>
 8004390:	4b81      	ldr	r3, [pc, #516]	; (8004598 <HAL_RCC_OscConfig+0x288>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a80      	ldr	r2, [pc, #512]	; (8004598 <HAL_RCC_OscConfig+0x288>)
 8004396:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800439a:	6013      	str	r3, [r2, #0]
 800439c:	4b7e      	ldr	r3, [pc, #504]	; (8004598 <HAL_RCC_OscConfig+0x288>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a7d      	ldr	r2, [pc, #500]	; (8004598 <HAL_RCC_OscConfig+0x288>)
 80043a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043a6:	6013      	str	r3, [r2, #0]
 80043a8:	e01d      	b.n	80043e6 <HAL_RCC_OscConfig+0xd6>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043b2:	d10c      	bne.n	80043ce <HAL_RCC_OscConfig+0xbe>
 80043b4:	4b78      	ldr	r3, [pc, #480]	; (8004598 <HAL_RCC_OscConfig+0x288>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a77      	ldr	r2, [pc, #476]	; (8004598 <HAL_RCC_OscConfig+0x288>)
 80043ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043be:	6013      	str	r3, [r2, #0]
 80043c0:	4b75      	ldr	r3, [pc, #468]	; (8004598 <HAL_RCC_OscConfig+0x288>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a74      	ldr	r2, [pc, #464]	; (8004598 <HAL_RCC_OscConfig+0x288>)
 80043c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ca:	6013      	str	r3, [r2, #0]
 80043cc:	e00b      	b.n	80043e6 <HAL_RCC_OscConfig+0xd6>
 80043ce:	4b72      	ldr	r3, [pc, #456]	; (8004598 <HAL_RCC_OscConfig+0x288>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a71      	ldr	r2, [pc, #452]	; (8004598 <HAL_RCC_OscConfig+0x288>)
 80043d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043d8:	6013      	str	r3, [r2, #0]
 80043da:	4b6f      	ldr	r3, [pc, #444]	; (8004598 <HAL_RCC_OscConfig+0x288>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a6e      	ldr	r2, [pc, #440]	; (8004598 <HAL_RCC_OscConfig+0x288>)
 80043e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043e4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d013      	beq.n	8004416 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ee:	f7fe f8db 	bl	80025a8 <HAL_GetTick>
 80043f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043f4:	e008      	b.n	8004408 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043f6:	f7fe f8d7 	bl	80025a8 <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	2b64      	cmp	r3, #100	; 0x64
 8004402:	d901      	bls.n	8004408 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e3aa      	b.n	8004b5e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004408:	4b63      	ldr	r3, [pc, #396]	; (8004598 <HAL_RCC_OscConfig+0x288>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d0f0      	beq.n	80043f6 <HAL_RCC_OscConfig+0xe6>
 8004414:	e014      	b.n	8004440 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004416:	f7fe f8c7 	bl	80025a8 <HAL_GetTick>
 800441a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800441c:	e008      	b.n	8004430 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800441e:	f7fe f8c3 	bl	80025a8 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	2b64      	cmp	r3, #100	; 0x64
 800442a:	d901      	bls.n	8004430 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e396      	b.n	8004b5e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004430:	4b59      	ldr	r3, [pc, #356]	; (8004598 <HAL_RCC_OscConfig+0x288>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1f0      	bne.n	800441e <HAL_RCC_OscConfig+0x10e>
 800443c:	e000      	b.n	8004440 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800443e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	f000 80cb 	beq.w	80045e4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800444e:	4b52      	ldr	r3, [pc, #328]	; (8004598 <HAL_RCC_OscConfig+0x288>)
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004456:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004458:	4b4f      	ldr	r3, [pc, #316]	; (8004598 <HAL_RCC_OscConfig+0x288>)
 800445a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800445e:	6a3b      	ldr	r3, [r7, #32]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d007      	beq.n	8004474 <HAL_RCC_OscConfig+0x164>
 8004464:	6a3b      	ldr	r3, [r7, #32]
 8004466:	2b18      	cmp	r3, #24
 8004468:	d156      	bne.n	8004518 <HAL_RCC_OscConfig+0x208>
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	f003 0303 	and.w	r3, r3, #3
 8004470:	2b00      	cmp	r3, #0
 8004472:	d151      	bne.n	8004518 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004474:	4b48      	ldr	r3, [pc, #288]	; (8004598 <HAL_RCC_OscConfig+0x288>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0304 	and.w	r3, r3, #4
 800447c:	2b00      	cmp	r3, #0
 800447e:	d005      	beq.n	800448c <HAL_RCC_OscConfig+0x17c>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d101      	bne.n	800448c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e368      	b.n	8004b5e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800448c:	4b42      	ldr	r3, [pc, #264]	; (8004598 <HAL_RCC_OscConfig+0x288>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f023 0219 	bic.w	r2, r3, #25
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	493f      	ldr	r1, [pc, #252]	; (8004598 <HAL_RCC_OscConfig+0x288>)
 800449a:	4313      	orrs	r3, r2
 800449c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800449e:	f7fe f883 	bl	80025a8 <HAL_GetTick>
 80044a2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044a4:	e008      	b.n	80044b8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044a6:	f7fe f87f 	bl	80025a8 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d901      	bls.n	80044b8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e352      	b.n	8004b5e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044b8:	4b37      	ldr	r3, [pc, #220]	; (8004598 <HAL_RCC_OscConfig+0x288>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0304 	and.w	r3, r3, #4
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d0f0      	beq.n	80044a6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044c4:	f7fe f8a0 	bl	8002608 <HAL_GetREVID>
 80044c8:	4603      	mov	r3, r0
 80044ca:	f241 0203 	movw	r2, #4099	; 0x1003
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d817      	bhi.n	8004502 <HAL_RCC_OscConfig+0x1f2>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	2b40      	cmp	r3, #64	; 0x40
 80044d8:	d108      	bne.n	80044ec <HAL_RCC_OscConfig+0x1dc>
 80044da:	4b2f      	ldr	r3, [pc, #188]	; (8004598 <HAL_RCC_OscConfig+0x288>)
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80044e2:	4a2d      	ldr	r2, [pc, #180]	; (8004598 <HAL_RCC_OscConfig+0x288>)
 80044e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044e8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044ea:	e07b      	b.n	80045e4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ec:	4b2a      	ldr	r3, [pc, #168]	; (8004598 <HAL_RCC_OscConfig+0x288>)
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	031b      	lsls	r3, r3, #12
 80044fa:	4927      	ldr	r1, [pc, #156]	; (8004598 <HAL_RCC_OscConfig+0x288>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004500:	e070      	b.n	80045e4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004502:	4b25      	ldr	r3, [pc, #148]	; (8004598 <HAL_RCC_OscConfig+0x288>)
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	061b      	lsls	r3, r3, #24
 8004510:	4921      	ldr	r1, [pc, #132]	; (8004598 <HAL_RCC_OscConfig+0x288>)
 8004512:	4313      	orrs	r3, r2
 8004514:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004516:	e065      	b.n	80045e4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d048      	beq.n	80045b2 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004520:	4b1d      	ldr	r3, [pc, #116]	; (8004598 <HAL_RCC_OscConfig+0x288>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f023 0219 	bic.w	r2, r3, #25
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	491a      	ldr	r1, [pc, #104]	; (8004598 <HAL_RCC_OscConfig+0x288>)
 800452e:	4313      	orrs	r3, r2
 8004530:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004532:	f7fe f839 	bl	80025a8 <HAL_GetTick>
 8004536:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004538:	e008      	b.n	800454c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800453a:	f7fe f835 	bl	80025a8 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	2b02      	cmp	r3, #2
 8004546:	d901      	bls.n	800454c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e308      	b.n	8004b5e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800454c:	4b12      	ldr	r3, [pc, #72]	; (8004598 <HAL_RCC_OscConfig+0x288>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0304 	and.w	r3, r3, #4
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0f0      	beq.n	800453a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004558:	f7fe f856 	bl	8002608 <HAL_GetREVID>
 800455c:	4603      	mov	r3, r0
 800455e:	f241 0203 	movw	r2, #4099	; 0x1003
 8004562:	4293      	cmp	r3, r2
 8004564:	d81a      	bhi.n	800459c <HAL_RCC_OscConfig+0x28c>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	2b40      	cmp	r3, #64	; 0x40
 800456c:	d108      	bne.n	8004580 <HAL_RCC_OscConfig+0x270>
 800456e:	4b0a      	ldr	r3, [pc, #40]	; (8004598 <HAL_RCC_OscConfig+0x288>)
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004576:	4a08      	ldr	r2, [pc, #32]	; (8004598 <HAL_RCC_OscConfig+0x288>)
 8004578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800457c:	6053      	str	r3, [r2, #4]
 800457e:	e031      	b.n	80045e4 <HAL_RCC_OscConfig+0x2d4>
 8004580:	4b05      	ldr	r3, [pc, #20]	; (8004598 <HAL_RCC_OscConfig+0x288>)
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	031b      	lsls	r3, r3, #12
 800458e:	4902      	ldr	r1, [pc, #8]	; (8004598 <HAL_RCC_OscConfig+0x288>)
 8004590:	4313      	orrs	r3, r2
 8004592:	604b      	str	r3, [r1, #4]
 8004594:	e026      	b.n	80045e4 <HAL_RCC_OscConfig+0x2d4>
 8004596:	bf00      	nop
 8004598:	58024400 	.word	0x58024400
 800459c:	4b9a      	ldr	r3, [pc, #616]	; (8004808 <HAL_RCC_OscConfig+0x4f8>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	061b      	lsls	r3, r3, #24
 80045aa:	4997      	ldr	r1, [pc, #604]	; (8004808 <HAL_RCC_OscConfig+0x4f8>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	604b      	str	r3, [r1, #4]
 80045b0:	e018      	b.n	80045e4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045b2:	4b95      	ldr	r3, [pc, #596]	; (8004808 <HAL_RCC_OscConfig+0x4f8>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a94      	ldr	r2, [pc, #592]	; (8004808 <HAL_RCC_OscConfig+0x4f8>)
 80045b8:	f023 0301 	bic.w	r3, r3, #1
 80045bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045be:	f7fd fff3 	bl	80025a8 <HAL_GetTick>
 80045c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80045c4:	e008      	b.n	80045d8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045c6:	f7fd ffef 	bl	80025a8 <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d901      	bls.n	80045d8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e2c2      	b.n	8004b5e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80045d8:	4b8b      	ldr	r3, [pc, #556]	; (8004808 <HAL_RCC_OscConfig+0x4f8>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0304 	and.w	r3, r3, #4
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1f0      	bne.n	80045c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0310 	and.w	r3, r3, #16
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 80a9 	beq.w	8004744 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045f2:	4b85      	ldr	r3, [pc, #532]	; (8004808 <HAL_RCC_OscConfig+0x4f8>)
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045fa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80045fc:	4b82      	ldr	r3, [pc, #520]	; (8004808 <HAL_RCC_OscConfig+0x4f8>)
 80045fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004600:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	2b08      	cmp	r3, #8
 8004606:	d007      	beq.n	8004618 <HAL_RCC_OscConfig+0x308>
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	2b18      	cmp	r3, #24
 800460c:	d13a      	bne.n	8004684 <HAL_RCC_OscConfig+0x374>
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	f003 0303 	and.w	r3, r3, #3
 8004614:	2b01      	cmp	r3, #1
 8004616:	d135      	bne.n	8004684 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004618:	4b7b      	ldr	r3, [pc, #492]	; (8004808 <HAL_RCC_OscConfig+0x4f8>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004620:	2b00      	cmp	r3, #0
 8004622:	d005      	beq.n	8004630 <HAL_RCC_OscConfig+0x320>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	69db      	ldr	r3, [r3, #28]
 8004628:	2b80      	cmp	r3, #128	; 0x80
 800462a:	d001      	beq.n	8004630 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e296      	b.n	8004b5e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004630:	f7fd ffea 	bl	8002608 <HAL_GetREVID>
 8004634:	4603      	mov	r3, r0
 8004636:	f241 0203 	movw	r2, #4099	; 0x1003
 800463a:	4293      	cmp	r3, r2
 800463c:	d817      	bhi.n	800466e <HAL_RCC_OscConfig+0x35e>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	2b20      	cmp	r3, #32
 8004644:	d108      	bne.n	8004658 <HAL_RCC_OscConfig+0x348>
 8004646:	4b70      	ldr	r3, [pc, #448]	; (8004808 <HAL_RCC_OscConfig+0x4f8>)
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800464e:	4a6e      	ldr	r2, [pc, #440]	; (8004808 <HAL_RCC_OscConfig+0x4f8>)
 8004650:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004654:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004656:	e075      	b.n	8004744 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004658:	4b6b      	ldr	r3, [pc, #428]	; (8004808 <HAL_RCC_OscConfig+0x4f8>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a1b      	ldr	r3, [r3, #32]
 8004664:	069b      	lsls	r3, r3, #26
 8004666:	4968      	ldr	r1, [pc, #416]	; (8004808 <HAL_RCC_OscConfig+0x4f8>)
 8004668:	4313      	orrs	r3, r2
 800466a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800466c:	e06a      	b.n	8004744 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800466e:	4b66      	ldr	r3, [pc, #408]	; (8004808 <HAL_RCC_OscConfig+0x4f8>)
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	061b      	lsls	r3, r3, #24
 800467c:	4962      	ldr	r1, [pc, #392]	; (8004808 <HAL_RCC_OscConfig+0x4f8>)
 800467e:	4313      	orrs	r3, r2
 8004680:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004682:	e05f      	b.n	8004744 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	69db      	ldr	r3, [r3, #28]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d042      	beq.n	8004712 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800468c:	4b5e      	ldr	r3, [pc, #376]	; (8004808 <HAL_RCC_OscConfig+0x4f8>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a5d      	ldr	r2, [pc, #372]	; (8004808 <HAL_RCC_OscConfig+0x4f8>)
 8004692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004696:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004698:	f7fd ff86 	bl	80025a8 <HAL_GetTick>
 800469c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800469e:	e008      	b.n	80046b2 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80046a0:	f7fd ff82 	bl	80025a8 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e255      	b.n	8004b5e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80046b2:	4b55      	ldr	r3, [pc, #340]	; (8004808 <HAL_RCC_OscConfig+0x4f8>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d0f0      	beq.n	80046a0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80046be:	f7fd ffa3 	bl	8002608 <HAL_GetREVID>
 80046c2:	4603      	mov	r3, r0
 80046c4:	f241 0203 	movw	r2, #4099	; 0x1003
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d817      	bhi.n	80046fc <HAL_RCC_OscConfig+0x3ec>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	2b20      	cmp	r3, #32
 80046d2:	d108      	bne.n	80046e6 <HAL_RCC_OscConfig+0x3d6>
 80046d4:	4b4c      	ldr	r3, [pc, #304]	; (8004808 <HAL_RCC_OscConfig+0x4f8>)
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80046dc:	4a4a      	ldr	r2, [pc, #296]	; (8004808 <HAL_RCC_OscConfig+0x4f8>)
 80046de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046e2:	6053      	str	r3, [r2, #4]
 80046e4:	e02e      	b.n	8004744 <HAL_RCC_OscConfig+0x434>
 80046e6:	4b48      	ldr	r3, [pc, #288]	; (8004808 <HAL_RCC_OscConfig+0x4f8>)
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	069b      	lsls	r3, r3, #26
 80046f4:	4944      	ldr	r1, [pc, #272]	; (8004808 <HAL_RCC_OscConfig+0x4f8>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	604b      	str	r3, [r1, #4]
 80046fa:	e023      	b.n	8004744 <HAL_RCC_OscConfig+0x434>
 80046fc:	4b42      	ldr	r3, [pc, #264]	; (8004808 <HAL_RCC_OscConfig+0x4f8>)
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a1b      	ldr	r3, [r3, #32]
 8004708:	061b      	lsls	r3, r3, #24
 800470a:	493f      	ldr	r1, [pc, #252]	; (8004808 <HAL_RCC_OscConfig+0x4f8>)
 800470c:	4313      	orrs	r3, r2
 800470e:	60cb      	str	r3, [r1, #12]
 8004710:	e018      	b.n	8004744 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004712:	4b3d      	ldr	r3, [pc, #244]	; (8004808 <HAL_RCC_OscConfig+0x4f8>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a3c      	ldr	r2, [pc, #240]	; (8004808 <HAL_RCC_OscConfig+0x4f8>)
 8004718:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800471c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800471e:	f7fd ff43 	bl	80025a8 <HAL_GetTick>
 8004722:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004724:	e008      	b.n	8004738 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004726:	f7fd ff3f 	bl	80025a8 <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	2b02      	cmp	r3, #2
 8004732:	d901      	bls.n	8004738 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e212      	b.n	8004b5e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004738:	4b33      	ldr	r3, [pc, #204]	; (8004808 <HAL_RCC_OscConfig+0x4f8>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1f0      	bne.n	8004726 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0308 	and.w	r3, r3, #8
 800474c:	2b00      	cmp	r3, #0
 800474e:	d036      	beq.n	80047be <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	695b      	ldr	r3, [r3, #20]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d019      	beq.n	800478c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004758:	4b2b      	ldr	r3, [pc, #172]	; (8004808 <HAL_RCC_OscConfig+0x4f8>)
 800475a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800475c:	4a2a      	ldr	r2, [pc, #168]	; (8004808 <HAL_RCC_OscConfig+0x4f8>)
 800475e:	f043 0301 	orr.w	r3, r3, #1
 8004762:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004764:	f7fd ff20 	bl	80025a8 <HAL_GetTick>
 8004768:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800476a:	e008      	b.n	800477e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800476c:	f7fd ff1c 	bl	80025a8 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e1ef      	b.n	8004b5e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800477e:	4b22      	ldr	r3, [pc, #136]	; (8004808 <HAL_RCC_OscConfig+0x4f8>)
 8004780:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0f0      	beq.n	800476c <HAL_RCC_OscConfig+0x45c>
 800478a:	e018      	b.n	80047be <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800478c:	4b1e      	ldr	r3, [pc, #120]	; (8004808 <HAL_RCC_OscConfig+0x4f8>)
 800478e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004790:	4a1d      	ldr	r2, [pc, #116]	; (8004808 <HAL_RCC_OscConfig+0x4f8>)
 8004792:	f023 0301 	bic.w	r3, r3, #1
 8004796:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004798:	f7fd ff06 	bl	80025a8 <HAL_GetTick>
 800479c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800479e:	e008      	b.n	80047b2 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047a0:	f7fd ff02 	bl	80025a8 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e1d5      	b.n	8004b5e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80047b2:	4b15      	ldr	r3, [pc, #84]	; (8004808 <HAL_RCC_OscConfig+0x4f8>)
 80047b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1f0      	bne.n	80047a0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0320 	and.w	r3, r3, #32
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d039      	beq.n	800483e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d01c      	beq.n	800480c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80047d2:	4b0d      	ldr	r3, [pc, #52]	; (8004808 <HAL_RCC_OscConfig+0x4f8>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a0c      	ldr	r2, [pc, #48]	; (8004808 <HAL_RCC_OscConfig+0x4f8>)
 80047d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80047dc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80047de:	f7fd fee3 	bl	80025a8 <HAL_GetTick>
 80047e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80047e4:	e008      	b.n	80047f8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80047e6:	f7fd fedf 	bl	80025a8 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d901      	bls.n	80047f8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e1b2      	b.n	8004b5e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80047f8:	4b03      	ldr	r3, [pc, #12]	; (8004808 <HAL_RCC_OscConfig+0x4f8>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d0f0      	beq.n	80047e6 <HAL_RCC_OscConfig+0x4d6>
 8004804:	e01b      	b.n	800483e <HAL_RCC_OscConfig+0x52e>
 8004806:	bf00      	nop
 8004808:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800480c:	4b9b      	ldr	r3, [pc, #620]	; (8004a7c <HAL_RCC_OscConfig+0x76c>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a9a      	ldr	r2, [pc, #616]	; (8004a7c <HAL_RCC_OscConfig+0x76c>)
 8004812:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004816:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004818:	f7fd fec6 	bl	80025a8 <HAL_GetTick>
 800481c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800481e:	e008      	b.n	8004832 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004820:	f7fd fec2 	bl	80025a8 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e195      	b.n	8004b5e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004832:	4b92      	ldr	r3, [pc, #584]	; (8004a7c <HAL_RCC_OscConfig+0x76c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1f0      	bne.n	8004820 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0304 	and.w	r3, r3, #4
 8004846:	2b00      	cmp	r3, #0
 8004848:	f000 8081 	beq.w	800494e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800484c:	4b8c      	ldr	r3, [pc, #560]	; (8004a80 <HAL_RCC_OscConfig+0x770>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a8b      	ldr	r2, [pc, #556]	; (8004a80 <HAL_RCC_OscConfig+0x770>)
 8004852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004856:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004858:	f7fd fea6 	bl	80025a8 <HAL_GetTick>
 800485c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004860:	f7fd fea2 	bl	80025a8 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b64      	cmp	r3, #100	; 0x64
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e175      	b.n	8004b5e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004872:	4b83      	ldr	r3, [pc, #524]	; (8004a80 <HAL_RCC_OscConfig+0x770>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800487a:	2b00      	cmp	r3, #0
 800487c:	d0f0      	beq.n	8004860 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	2b01      	cmp	r3, #1
 8004884:	d106      	bne.n	8004894 <HAL_RCC_OscConfig+0x584>
 8004886:	4b7d      	ldr	r3, [pc, #500]	; (8004a7c <HAL_RCC_OscConfig+0x76c>)
 8004888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800488a:	4a7c      	ldr	r2, [pc, #496]	; (8004a7c <HAL_RCC_OscConfig+0x76c>)
 800488c:	f043 0301 	orr.w	r3, r3, #1
 8004890:	6713      	str	r3, [r2, #112]	; 0x70
 8004892:	e02d      	b.n	80048f0 <HAL_RCC_OscConfig+0x5e0>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d10c      	bne.n	80048b6 <HAL_RCC_OscConfig+0x5a6>
 800489c:	4b77      	ldr	r3, [pc, #476]	; (8004a7c <HAL_RCC_OscConfig+0x76c>)
 800489e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a0:	4a76      	ldr	r2, [pc, #472]	; (8004a7c <HAL_RCC_OscConfig+0x76c>)
 80048a2:	f023 0301 	bic.w	r3, r3, #1
 80048a6:	6713      	str	r3, [r2, #112]	; 0x70
 80048a8:	4b74      	ldr	r3, [pc, #464]	; (8004a7c <HAL_RCC_OscConfig+0x76c>)
 80048aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ac:	4a73      	ldr	r2, [pc, #460]	; (8004a7c <HAL_RCC_OscConfig+0x76c>)
 80048ae:	f023 0304 	bic.w	r3, r3, #4
 80048b2:	6713      	str	r3, [r2, #112]	; 0x70
 80048b4:	e01c      	b.n	80048f0 <HAL_RCC_OscConfig+0x5e0>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	2b05      	cmp	r3, #5
 80048bc:	d10c      	bne.n	80048d8 <HAL_RCC_OscConfig+0x5c8>
 80048be:	4b6f      	ldr	r3, [pc, #444]	; (8004a7c <HAL_RCC_OscConfig+0x76c>)
 80048c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c2:	4a6e      	ldr	r2, [pc, #440]	; (8004a7c <HAL_RCC_OscConfig+0x76c>)
 80048c4:	f043 0304 	orr.w	r3, r3, #4
 80048c8:	6713      	str	r3, [r2, #112]	; 0x70
 80048ca:	4b6c      	ldr	r3, [pc, #432]	; (8004a7c <HAL_RCC_OscConfig+0x76c>)
 80048cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ce:	4a6b      	ldr	r2, [pc, #428]	; (8004a7c <HAL_RCC_OscConfig+0x76c>)
 80048d0:	f043 0301 	orr.w	r3, r3, #1
 80048d4:	6713      	str	r3, [r2, #112]	; 0x70
 80048d6:	e00b      	b.n	80048f0 <HAL_RCC_OscConfig+0x5e0>
 80048d8:	4b68      	ldr	r3, [pc, #416]	; (8004a7c <HAL_RCC_OscConfig+0x76c>)
 80048da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048dc:	4a67      	ldr	r2, [pc, #412]	; (8004a7c <HAL_RCC_OscConfig+0x76c>)
 80048de:	f023 0301 	bic.w	r3, r3, #1
 80048e2:	6713      	str	r3, [r2, #112]	; 0x70
 80048e4:	4b65      	ldr	r3, [pc, #404]	; (8004a7c <HAL_RCC_OscConfig+0x76c>)
 80048e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e8:	4a64      	ldr	r2, [pc, #400]	; (8004a7c <HAL_RCC_OscConfig+0x76c>)
 80048ea:	f023 0304 	bic.w	r3, r3, #4
 80048ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d015      	beq.n	8004924 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f8:	f7fd fe56 	bl	80025a8 <HAL_GetTick>
 80048fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048fe:	e00a      	b.n	8004916 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004900:	f7fd fe52 	bl	80025a8 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	f241 3288 	movw	r2, #5000	; 0x1388
 800490e:	4293      	cmp	r3, r2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e123      	b.n	8004b5e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004916:	4b59      	ldr	r3, [pc, #356]	; (8004a7c <HAL_RCC_OscConfig+0x76c>)
 8004918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d0ee      	beq.n	8004900 <HAL_RCC_OscConfig+0x5f0>
 8004922:	e014      	b.n	800494e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004924:	f7fd fe40 	bl	80025a8 <HAL_GetTick>
 8004928:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800492a:	e00a      	b.n	8004942 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800492c:	f7fd fe3c 	bl	80025a8 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	f241 3288 	movw	r2, #5000	; 0x1388
 800493a:	4293      	cmp	r3, r2
 800493c:	d901      	bls.n	8004942 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e10d      	b.n	8004b5e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004942:	4b4e      	ldr	r3, [pc, #312]	; (8004a7c <HAL_RCC_OscConfig+0x76c>)
 8004944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1ee      	bne.n	800492c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004952:	2b00      	cmp	r3, #0
 8004954:	f000 8102 	beq.w	8004b5c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004958:	4b48      	ldr	r3, [pc, #288]	; (8004a7c <HAL_RCC_OscConfig+0x76c>)
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004960:	2b18      	cmp	r3, #24
 8004962:	f000 80bd 	beq.w	8004ae0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496a:	2b02      	cmp	r3, #2
 800496c:	f040 809e 	bne.w	8004aac <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004970:	4b42      	ldr	r3, [pc, #264]	; (8004a7c <HAL_RCC_OscConfig+0x76c>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a41      	ldr	r2, [pc, #260]	; (8004a7c <HAL_RCC_OscConfig+0x76c>)
 8004976:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800497a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800497c:	f7fd fe14 	bl	80025a8 <HAL_GetTick>
 8004980:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004982:	e008      	b.n	8004996 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004984:	f7fd fe10 	bl	80025a8 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e0e3      	b.n	8004b5e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004996:	4b39      	ldr	r3, [pc, #228]	; (8004a7c <HAL_RCC_OscConfig+0x76c>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1f0      	bne.n	8004984 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049a2:	4b36      	ldr	r3, [pc, #216]	; (8004a7c <HAL_RCC_OscConfig+0x76c>)
 80049a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049a6:	4b37      	ldr	r3, [pc, #220]	; (8004a84 <HAL_RCC_OscConfig+0x774>)
 80049a8:	4013      	ands	r3, r2
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80049b2:	0112      	lsls	r2, r2, #4
 80049b4:	430a      	orrs	r2, r1
 80049b6:	4931      	ldr	r1, [pc, #196]	; (8004a7c <HAL_RCC_OscConfig+0x76c>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	628b      	str	r3, [r1, #40]	; 0x28
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c0:	3b01      	subs	r3, #1
 80049c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ca:	3b01      	subs	r3, #1
 80049cc:	025b      	lsls	r3, r3, #9
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	431a      	orrs	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d6:	3b01      	subs	r3, #1
 80049d8:	041b      	lsls	r3, r3, #16
 80049da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80049de:	431a      	orrs	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e4:	3b01      	subs	r3, #1
 80049e6:	061b      	lsls	r3, r3, #24
 80049e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80049ec:	4923      	ldr	r1, [pc, #140]	; (8004a7c <HAL_RCC_OscConfig+0x76c>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80049f2:	4b22      	ldr	r3, [pc, #136]	; (8004a7c <HAL_RCC_OscConfig+0x76c>)
 80049f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f6:	4a21      	ldr	r2, [pc, #132]	; (8004a7c <HAL_RCC_OscConfig+0x76c>)
 80049f8:	f023 0301 	bic.w	r3, r3, #1
 80049fc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80049fe:	4b1f      	ldr	r3, [pc, #124]	; (8004a7c <HAL_RCC_OscConfig+0x76c>)
 8004a00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a02:	4b21      	ldr	r3, [pc, #132]	; (8004a88 <HAL_RCC_OscConfig+0x778>)
 8004a04:	4013      	ands	r3, r2
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004a0a:	00d2      	lsls	r2, r2, #3
 8004a0c:	491b      	ldr	r1, [pc, #108]	; (8004a7c <HAL_RCC_OscConfig+0x76c>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004a12:	4b1a      	ldr	r3, [pc, #104]	; (8004a7c <HAL_RCC_OscConfig+0x76c>)
 8004a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a16:	f023 020c 	bic.w	r2, r3, #12
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1e:	4917      	ldr	r1, [pc, #92]	; (8004a7c <HAL_RCC_OscConfig+0x76c>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004a24:	4b15      	ldr	r3, [pc, #84]	; (8004a7c <HAL_RCC_OscConfig+0x76c>)
 8004a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a28:	f023 0202 	bic.w	r2, r3, #2
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a30:	4912      	ldr	r1, [pc, #72]	; (8004a7c <HAL_RCC_OscConfig+0x76c>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004a36:	4b11      	ldr	r3, [pc, #68]	; (8004a7c <HAL_RCC_OscConfig+0x76c>)
 8004a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3a:	4a10      	ldr	r2, [pc, #64]	; (8004a7c <HAL_RCC_OscConfig+0x76c>)
 8004a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a42:	4b0e      	ldr	r3, [pc, #56]	; (8004a7c <HAL_RCC_OscConfig+0x76c>)
 8004a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a46:	4a0d      	ldr	r2, [pc, #52]	; (8004a7c <HAL_RCC_OscConfig+0x76c>)
 8004a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004a4e:	4b0b      	ldr	r3, [pc, #44]	; (8004a7c <HAL_RCC_OscConfig+0x76c>)
 8004a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a52:	4a0a      	ldr	r2, [pc, #40]	; (8004a7c <HAL_RCC_OscConfig+0x76c>)
 8004a54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004a5a:	4b08      	ldr	r3, [pc, #32]	; (8004a7c <HAL_RCC_OscConfig+0x76c>)
 8004a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5e:	4a07      	ldr	r2, [pc, #28]	; (8004a7c <HAL_RCC_OscConfig+0x76c>)
 8004a60:	f043 0301 	orr.w	r3, r3, #1
 8004a64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a66:	4b05      	ldr	r3, [pc, #20]	; (8004a7c <HAL_RCC_OscConfig+0x76c>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a04      	ldr	r2, [pc, #16]	; (8004a7c <HAL_RCC_OscConfig+0x76c>)
 8004a6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a72:	f7fd fd99 	bl	80025a8 <HAL_GetTick>
 8004a76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a78:	e011      	b.n	8004a9e <HAL_RCC_OscConfig+0x78e>
 8004a7a:	bf00      	nop
 8004a7c:	58024400 	.word	0x58024400
 8004a80:	58024800 	.word	0x58024800
 8004a84:	fffffc0c 	.word	0xfffffc0c
 8004a88:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a8c:	f7fd fd8c 	bl	80025a8 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e05f      	b.n	8004b5e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a9e:	4b32      	ldr	r3, [pc, #200]	; (8004b68 <HAL_RCC_OscConfig+0x858>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d0f0      	beq.n	8004a8c <HAL_RCC_OscConfig+0x77c>
 8004aaa:	e057      	b.n	8004b5c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aac:	4b2e      	ldr	r3, [pc, #184]	; (8004b68 <HAL_RCC_OscConfig+0x858>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a2d      	ldr	r2, [pc, #180]	; (8004b68 <HAL_RCC_OscConfig+0x858>)
 8004ab2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ab6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab8:	f7fd fd76 	bl	80025a8 <HAL_GetTick>
 8004abc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004abe:	e008      	b.n	8004ad2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ac0:	f7fd fd72 	bl	80025a8 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e045      	b.n	8004b5e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ad2:	4b25      	ldr	r3, [pc, #148]	; (8004b68 <HAL_RCC_OscConfig+0x858>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1f0      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x7b0>
 8004ade:	e03d      	b.n	8004b5c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004ae0:	4b21      	ldr	r3, [pc, #132]	; (8004b68 <HAL_RCC_OscConfig+0x858>)
 8004ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004ae6:	4b20      	ldr	r3, [pc, #128]	; (8004b68 <HAL_RCC_OscConfig+0x858>)
 8004ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aea:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d031      	beq.n	8004b58 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	f003 0203 	and.w	r2, r3, #3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d12a      	bne.n	8004b58 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	091b      	lsrs	r3, r3, #4
 8004b06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d122      	bne.n	8004b58 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d11a      	bne.n	8004b58 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	0a5b      	lsrs	r3, r3, #9
 8004b26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b2e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d111      	bne.n	8004b58 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	0c1b      	lsrs	r3, r3, #16
 8004b38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b40:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d108      	bne.n	8004b58 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	0e1b      	lsrs	r3, r3, #24
 8004b4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b52:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d001      	beq.n	8004b5c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e000      	b.n	8004b5e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3730      	adds	r7, #48	; 0x30
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	58024400 	.word	0x58024400

08004b6c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d101      	bne.n	8004b80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e19c      	b.n	8004eba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b80:	4b8a      	ldr	r3, [pc, #552]	; (8004dac <HAL_RCC_ClockConfig+0x240>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 030f 	and.w	r3, r3, #15
 8004b88:	683a      	ldr	r2, [r7, #0]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d910      	bls.n	8004bb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b8e:	4b87      	ldr	r3, [pc, #540]	; (8004dac <HAL_RCC_ClockConfig+0x240>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f023 020f 	bic.w	r2, r3, #15
 8004b96:	4985      	ldr	r1, [pc, #532]	; (8004dac <HAL_RCC_ClockConfig+0x240>)
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b9e:	4b83      	ldr	r3, [pc, #524]	; (8004dac <HAL_RCC_ClockConfig+0x240>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 030f 	and.w	r3, r3, #15
 8004ba6:	683a      	ldr	r2, [r7, #0]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d001      	beq.n	8004bb0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e184      	b.n	8004eba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0304 	and.w	r3, r3, #4
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d010      	beq.n	8004bde <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	691a      	ldr	r2, [r3, #16]
 8004bc0:	4b7b      	ldr	r3, [pc, #492]	; (8004db0 <HAL_RCC_ClockConfig+0x244>)
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d908      	bls.n	8004bde <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004bcc:	4b78      	ldr	r3, [pc, #480]	; (8004db0 <HAL_RCC_ClockConfig+0x244>)
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	4975      	ldr	r1, [pc, #468]	; (8004db0 <HAL_RCC_ClockConfig+0x244>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0308 	and.w	r3, r3, #8
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d010      	beq.n	8004c0c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	695a      	ldr	r2, [r3, #20]
 8004bee:	4b70      	ldr	r3, [pc, #448]	; (8004db0 <HAL_RCC_ClockConfig+0x244>)
 8004bf0:	69db      	ldr	r3, [r3, #28]
 8004bf2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d908      	bls.n	8004c0c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004bfa:	4b6d      	ldr	r3, [pc, #436]	; (8004db0 <HAL_RCC_ClockConfig+0x244>)
 8004bfc:	69db      	ldr	r3, [r3, #28]
 8004bfe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	496a      	ldr	r1, [pc, #424]	; (8004db0 <HAL_RCC_ClockConfig+0x244>)
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0310 	and.w	r3, r3, #16
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d010      	beq.n	8004c3a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	699a      	ldr	r2, [r3, #24]
 8004c1c:	4b64      	ldr	r3, [pc, #400]	; (8004db0 <HAL_RCC_ClockConfig+0x244>)
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d908      	bls.n	8004c3a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004c28:	4b61      	ldr	r3, [pc, #388]	; (8004db0 <HAL_RCC_ClockConfig+0x244>)
 8004c2a:	69db      	ldr	r3, [r3, #28]
 8004c2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	495e      	ldr	r1, [pc, #376]	; (8004db0 <HAL_RCC_ClockConfig+0x244>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0320 	and.w	r3, r3, #32
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d010      	beq.n	8004c68 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	69da      	ldr	r2, [r3, #28]
 8004c4a:	4b59      	ldr	r3, [pc, #356]	; (8004db0 <HAL_RCC_ClockConfig+0x244>)
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d908      	bls.n	8004c68 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004c56:	4b56      	ldr	r3, [pc, #344]	; (8004db0 <HAL_RCC_ClockConfig+0x244>)
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	4953      	ldr	r1, [pc, #332]	; (8004db0 <HAL_RCC_ClockConfig+0x244>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d010      	beq.n	8004c96 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68da      	ldr	r2, [r3, #12]
 8004c78:	4b4d      	ldr	r3, [pc, #308]	; (8004db0 <HAL_RCC_ClockConfig+0x244>)
 8004c7a:	699b      	ldr	r3, [r3, #24]
 8004c7c:	f003 030f 	and.w	r3, r3, #15
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d908      	bls.n	8004c96 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c84:	4b4a      	ldr	r3, [pc, #296]	; (8004db0 <HAL_RCC_ClockConfig+0x244>)
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	f023 020f 	bic.w	r2, r3, #15
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	4947      	ldr	r1, [pc, #284]	; (8004db0 <HAL_RCC_ClockConfig+0x244>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d055      	beq.n	8004d4e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004ca2:	4b43      	ldr	r3, [pc, #268]	; (8004db0 <HAL_RCC_ClockConfig+0x244>)
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	4940      	ldr	r1, [pc, #256]	; (8004db0 <HAL_RCC_ClockConfig+0x244>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d107      	bne.n	8004ccc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004cbc:	4b3c      	ldr	r3, [pc, #240]	; (8004db0 <HAL_RCC_ClockConfig+0x244>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d121      	bne.n	8004d0c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e0f6      	b.n	8004eba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	2b03      	cmp	r3, #3
 8004cd2:	d107      	bne.n	8004ce4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004cd4:	4b36      	ldr	r3, [pc, #216]	; (8004db0 <HAL_RCC_ClockConfig+0x244>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d115      	bne.n	8004d0c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e0ea      	b.n	8004eba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d107      	bne.n	8004cfc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004cec:	4b30      	ldr	r3, [pc, #192]	; (8004db0 <HAL_RCC_ClockConfig+0x244>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d109      	bne.n	8004d0c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e0de      	b.n	8004eba <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004cfc:	4b2c      	ldr	r3, [pc, #176]	; (8004db0 <HAL_RCC_ClockConfig+0x244>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0304 	and.w	r3, r3, #4
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d101      	bne.n	8004d0c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e0d6      	b.n	8004eba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d0c:	4b28      	ldr	r3, [pc, #160]	; (8004db0 <HAL_RCC_ClockConfig+0x244>)
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	f023 0207 	bic.w	r2, r3, #7
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	4925      	ldr	r1, [pc, #148]	; (8004db0 <HAL_RCC_ClockConfig+0x244>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d1e:	f7fd fc43 	bl	80025a8 <HAL_GetTick>
 8004d22:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d24:	e00a      	b.n	8004d3c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d26:	f7fd fc3f 	bl	80025a8 <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d901      	bls.n	8004d3c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e0be      	b.n	8004eba <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d3c:	4b1c      	ldr	r3, [pc, #112]	; (8004db0 <HAL_RCC_ClockConfig+0x244>)
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	00db      	lsls	r3, r3, #3
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d1eb      	bne.n	8004d26 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d010      	beq.n	8004d7c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68da      	ldr	r2, [r3, #12]
 8004d5e:	4b14      	ldr	r3, [pc, #80]	; (8004db0 <HAL_RCC_ClockConfig+0x244>)
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	f003 030f 	and.w	r3, r3, #15
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d208      	bcs.n	8004d7c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d6a:	4b11      	ldr	r3, [pc, #68]	; (8004db0 <HAL_RCC_ClockConfig+0x244>)
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	f023 020f 	bic.w	r2, r3, #15
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	490e      	ldr	r1, [pc, #56]	; (8004db0 <HAL_RCC_ClockConfig+0x244>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d7c:	4b0b      	ldr	r3, [pc, #44]	; (8004dac <HAL_RCC_ClockConfig+0x240>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 030f 	and.w	r3, r3, #15
 8004d84:	683a      	ldr	r2, [r7, #0]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d214      	bcs.n	8004db4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d8a:	4b08      	ldr	r3, [pc, #32]	; (8004dac <HAL_RCC_ClockConfig+0x240>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f023 020f 	bic.w	r2, r3, #15
 8004d92:	4906      	ldr	r1, [pc, #24]	; (8004dac <HAL_RCC_ClockConfig+0x240>)
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d9a:	4b04      	ldr	r3, [pc, #16]	; (8004dac <HAL_RCC_ClockConfig+0x240>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 030f 	and.w	r3, r3, #15
 8004da2:	683a      	ldr	r2, [r7, #0]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d005      	beq.n	8004db4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e086      	b.n	8004eba <HAL_RCC_ClockConfig+0x34e>
 8004dac:	52002000 	.word	0x52002000
 8004db0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0304 	and.w	r3, r3, #4
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d010      	beq.n	8004de2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	691a      	ldr	r2, [r3, #16]
 8004dc4:	4b3f      	ldr	r3, [pc, #252]	; (8004ec4 <HAL_RCC_ClockConfig+0x358>)
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d208      	bcs.n	8004de2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004dd0:	4b3c      	ldr	r3, [pc, #240]	; (8004ec4 <HAL_RCC_ClockConfig+0x358>)
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	4939      	ldr	r1, [pc, #228]	; (8004ec4 <HAL_RCC_ClockConfig+0x358>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0308 	and.w	r3, r3, #8
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d010      	beq.n	8004e10 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	695a      	ldr	r2, [r3, #20]
 8004df2:	4b34      	ldr	r3, [pc, #208]	; (8004ec4 <HAL_RCC_ClockConfig+0x358>)
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d208      	bcs.n	8004e10 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004dfe:	4b31      	ldr	r3, [pc, #196]	; (8004ec4 <HAL_RCC_ClockConfig+0x358>)
 8004e00:	69db      	ldr	r3, [r3, #28]
 8004e02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	492e      	ldr	r1, [pc, #184]	; (8004ec4 <HAL_RCC_ClockConfig+0x358>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0310 	and.w	r3, r3, #16
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d010      	beq.n	8004e3e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	699a      	ldr	r2, [r3, #24]
 8004e20:	4b28      	ldr	r3, [pc, #160]	; (8004ec4 <HAL_RCC_ClockConfig+0x358>)
 8004e22:	69db      	ldr	r3, [r3, #28]
 8004e24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d208      	bcs.n	8004e3e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004e2c:	4b25      	ldr	r3, [pc, #148]	; (8004ec4 <HAL_RCC_ClockConfig+0x358>)
 8004e2e:	69db      	ldr	r3, [r3, #28]
 8004e30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	4922      	ldr	r1, [pc, #136]	; (8004ec4 <HAL_RCC_ClockConfig+0x358>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0320 	and.w	r3, r3, #32
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d010      	beq.n	8004e6c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	69da      	ldr	r2, [r3, #28]
 8004e4e:	4b1d      	ldr	r3, [pc, #116]	; (8004ec4 <HAL_RCC_ClockConfig+0x358>)
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d208      	bcs.n	8004e6c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004e5a:	4b1a      	ldr	r3, [pc, #104]	; (8004ec4 <HAL_RCC_ClockConfig+0x358>)
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	4917      	ldr	r1, [pc, #92]	; (8004ec4 <HAL_RCC_ClockConfig+0x358>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004e6c:	f000 f834 	bl	8004ed8 <HAL_RCC_GetSysClockFreq>
 8004e70:	4602      	mov	r2, r0
 8004e72:	4b14      	ldr	r3, [pc, #80]	; (8004ec4 <HAL_RCC_ClockConfig+0x358>)
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	0a1b      	lsrs	r3, r3, #8
 8004e78:	f003 030f 	and.w	r3, r3, #15
 8004e7c:	4912      	ldr	r1, [pc, #72]	; (8004ec8 <HAL_RCC_ClockConfig+0x35c>)
 8004e7e:	5ccb      	ldrb	r3, [r1, r3]
 8004e80:	f003 031f 	and.w	r3, r3, #31
 8004e84:	fa22 f303 	lsr.w	r3, r2, r3
 8004e88:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004e8a:	4b0e      	ldr	r3, [pc, #56]	; (8004ec4 <HAL_RCC_ClockConfig+0x358>)
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	f003 030f 	and.w	r3, r3, #15
 8004e92:	4a0d      	ldr	r2, [pc, #52]	; (8004ec8 <HAL_RCC_ClockConfig+0x35c>)
 8004e94:	5cd3      	ldrb	r3, [r2, r3]
 8004e96:	f003 031f 	and.w	r3, r3, #31
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8004ea0:	4a0a      	ldr	r2, [pc, #40]	; (8004ecc <HAL_RCC_ClockConfig+0x360>)
 8004ea2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ea4:	4a0a      	ldr	r2, [pc, #40]	; (8004ed0 <HAL_RCC_ClockConfig+0x364>)
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004eaa:	4b0a      	ldr	r3, [pc, #40]	; (8004ed4 <HAL_RCC_ClockConfig+0x368>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7fd fb30 	bl	8002514 <HAL_InitTick>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3718      	adds	r7, #24
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	58024400 	.word	0x58024400
 8004ec8:	08008bf0 	.word	0x08008bf0
 8004ecc:	24000004 	.word	0x24000004
 8004ed0:	24000000 	.word	0x24000000
 8004ed4:	24000020 	.word	0x24000020

08004ed8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b089      	sub	sp, #36	; 0x24
 8004edc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ede:	4bb3      	ldr	r3, [pc, #716]	; (80051ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ee6:	2b18      	cmp	r3, #24
 8004ee8:	f200 8155 	bhi.w	8005196 <HAL_RCC_GetSysClockFreq+0x2be>
 8004eec:	a201      	add	r2, pc, #4	; (adr r2, 8004ef4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef2:	bf00      	nop
 8004ef4:	08004f59 	.word	0x08004f59
 8004ef8:	08005197 	.word	0x08005197
 8004efc:	08005197 	.word	0x08005197
 8004f00:	08005197 	.word	0x08005197
 8004f04:	08005197 	.word	0x08005197
 8004f08:	08005197 	.word	0x08005197
 8004f0c:	08005197 	.word	0x08005197
 8004f10:	08005197 	.word	0x08005197
 8004f14:	08004f7f 	.word	0x08004f7f
 8004f18:	08005197 	.word	0x08005197
 8004f1c:	08005197 	.word	0x08005197
 8004f20:	08005197 	.word	0x08005197
 8004f24:	08005197 	.word	0x08005197
 8004f28:	08005197 	.word	0x08005197
 8004f2c:	08005197 	.word	0x08005197
 8004f30:	08005197 	.word	0x08005197
 8004f34:	08004f85 	.word	0x08004f85
 8004f38:	08005197 	.word	0x08005197
 8004f3c:	08005197 	.word	0x08005197
 8004f40:	08005197 	.word	0x08005197
 8004f44:	08005197 	.word	0x08005197
 8004f48:	08005197 	.word	0x08005197
 8004f4c:	08005197 	.word	0x08005197
 8004f50:	08005197 	.word	0x08005197
 8004f54:	08004f8b 	.word	0x08004f8b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f58:	4b94      	ldr	r3, [pc, #592]	; (80051ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0320 	and.w	r3, r3, #32
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d009      	beq.n	8004f78 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004f64:	4b91      	ldr	r3, [pc, #580]	; (80051ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	08db      	lsrs	r3, r3, #3
 8004f6a:	f003 0303 	and.w	r3, r3, #3
 8004f6e:	4a90      	ldr	r2, [pc, #576]	; (80051b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f70:	fa22 f303 	lsr.w	r3, r2, r3
 8004f74:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004f76:	e111      	b.n	800519c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004f78:	4b8d      	ldr	r3, [pc, #564]	; (80051b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f7a:	61bb      	str	r3, [r7, #24]
    break;
 8004f7c:	e10e      	b.n	800519c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004f7e:	4b8d      	ldr	r3, [pc, #564]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004f80:	61bb      	str	r3, [r7, #24]
    break;
 8004f82:	e10b      	b.n	800519c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004f84:	4b8c      	ldr	r3, [pc, #560]	; (80051b8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004f86:	61bb      	str	r3, [r7, #24]
    break;
 8004f88:	e108      	b.n	800519c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f8a:	4b88      	ldr	r3, [pc, #544]	; (80051ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8e:	f003 0303 	and.w	r3, r3, #3
 8004f92:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004f94:	4b85      	ldr	r3, [pc, #532]	; (80051ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f98:	091b      	lsrs	r3, r3, #4
 8004f9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f9e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004fa0:	4b82      	ldr	r3, [pc, #520]	; (80051ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa4:	f003 0301 	and.w	r3, r3, #1
 8004fa8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004faa:	4b80      	ldr	r3, [pc, #512]	; (80051ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fae:	08db      	lsrs	r3, r3, #3
 8004fb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	fb02 f303 	mul.w	r3, r2, r3
 8004fba:	ee07 3a90 	vmov	s15, r3
 8004fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fc2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f000 80e1 	beq.w	8005190 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	f000 8083 	beq.w	80050dc <HAL_RCC_GetSysClockFreq+0x204>
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	f200 80a1 	bhi.w	8005120 <HAL_RCC_GetSysClockFreq+0x248>
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d003      	beq.n	8004fec <HAL_RCC_GetSysClockFreq+0x114>
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d056      	beq.n	8005098 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004fea:	e099      	b.n	8005120 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fec:	4b6f      	ldr	r3, [pc, #444]	; (80051ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0320 	and.w	r3, r3, #32
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d02d      	beq.n	8005054 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ff8:	4b6c      	ldr	r3, [pc, #432]	; (80051ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	08db      	lsrs	r3, r3, #3
 8004ffe:	f003 0303 	and.w	r3, r3, #3
 8005002:	4a6b      	ldr	r2, [pc, #428]	; (80051b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005004:	fa22 f303 	lsr.w	r3, r2, r3
 8005008:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	ee07 3a90 	vmov	s15, r3
 8005010:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	ee07 3a90 	vmov	s15, r3
 800501a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800501e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005022:	4b62      	ldr	r3, [pc, #392]	; (80051ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800502a:	ee07 3a90 	vmov	s15, r3
 800502e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005032:	ed97 6a02 	vldr	s12, [r7, #8]
 8005036:	eddf 5a61 	vldr	s11, [pc, #388]	; 80051bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800503a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800503e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005042:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800504a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800504e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005052:	e087      	b.n	8005164 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	ee07 3a90 	vmov	s15, r3
 800505a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800505e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80051c0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005066:	4b51      	ldr	r3, [pc, #324]	; (80051ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800506e:	ee07 3a90 	vmov	s15, r3
 8005072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005076:	ed97 6a02 	vldr	s12, [r7, #8]
 800507a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80051bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800507e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005086:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800508a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800508e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005092:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005096:	e065      	b.n	8005164 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	ee07 3a90 	vmov	s15, r3
 800509e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050a2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80051c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80050a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050aa:	4b40      	ldr	r3, [pc, #256]	; (80051ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050b2:	ee07 3a90 	vmov	s15, r3
 80050b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80050be:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80051bc <HAL_RCC_GetSysClockFreq+0x2e4>
 80050c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050da:	e043      	b.n	8005164 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	ee07 3a90 	vmov	s15, r3
 80050e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050e6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80051c8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80050ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050ee:	4b2f      	ldr	r3, [pc, #188]	; (80051ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050f6:	ee07 3a90 	vmov	s15, r3
 80050fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005102:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80051bc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800510a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800510e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800511a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800511e:	e021      	b.n	8005164 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	ee07 3a90 	vmov	s15, r3
 8005126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800512a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80051c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800512e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005132:	4b1e      	ldr	r3, [pc, #120]	; (80051ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800513a:	ee07 3a90 	vmov	s15, r3
 800513e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005142:	ed97 6a02 	vldr	s12, [r7, #8]
 8005146:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80051bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800514a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800514e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005152:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800515a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800515e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005162:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005164:	4b11      	ldr	r3, [pc, #68]	; (80051ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005168:	0a5b      	lsrs	r3, r3, #9
 800516a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800516e:	3301      	adds	r3, #1
 8005170:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	ee07 3a90 	vmov	s15, r3
 8005178:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800517c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005180:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005184:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005188:	ee17 3a90 	vmov	r3, s15
 800518c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800518e:	e005      	b.n	800519c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005190:	2300      	movs	r3, #0
 8005192:	61bb      	str	r3, [r7, #24]
    break;
 8005194:	e002      	b.n	800519c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005196:	4b07      	ldr	r3, [pc, #28]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005198:	61bb      	str	r3, [r7, #24]
    break;
 800519a:	bf00      	nop
  }

  return sysclockfreq;
 800519c:	69bb      	ldr	r3, [r7, #24]
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3724      	adds	r7, #36	; 0x24
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	58024400 	.word	0x58024400
 80051b0:	03d09000 	.word	0x03d09000
 80051b4:	003d0900 	.word	0x003d0900
 80051b8:	007a1200 	.word	0x007a1200
 80051bc:	46000000 	.word	0x46000000
 80051c0:	4c742400 	.word	0x4c742400
 80051c4:	4a742400 	.word	0x4a742400
 80051c8:	4af42400 	.word	0x4af42400

080051cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80051d2:	f7ff fe81 	bl	8004ed8 <HAL_RCC_GetSysClockFreq>
 80051d6:	4602      	mov	r2, r0
 80051d8:	4b10      	ldr	r3, [pc, #64]	; (800521c <HAL_RCC_GetHCLKFreq+0x50>)
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	0a1b      	lsrs	r3, r3, #8
 80051de:	f003 030f 	and.w	r3, r3, #15
 80051e2:	490f      	ldr	r1, [pc, #60]	; (8005220 <HAL_RCC_GetHCLKFreq+0x54>)
 80051e4:	5ccb      	ldrb	r3, [r1, r3]
 80051e6:	f003 031f 	and.w	r3, r3, #31
 80051ea:	fa22 f303 	lsr.w	r3, r2, r3
 80051ee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80051f0:	4b0a      	ldr	r3, [pc, #40]	; (800521c <HAL_RCC_GetHCLKFreq+0x50>)
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	f003 030f 	and.w	r3, r3, #15
 80051f8:	4a09      	ldr	r2, [pc, #36]	; (8005220 <HAL_RCC_GetHCLKFreq+0x54>)
 80051fa:	5cd3      	ldrb	r3, [r2, r3]
 80051fc:	f003 031f 	and.w	r3, r3, #31
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	fa22 f303 	lsr.w	r3, r2, r3
 8005206:	4a07      	ldr	r2, [pc, #28]	; (8005224 <HAL_RCC_GetHCLKFreq+0x58>)
 8005208:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800520a:	4a07      	ldr	r2, [pc, #28]	; (8005228 <HAL_RCC_GetHCLKFreq+0x5c>)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005210:	4b04      	ldr	r3, [pc, #16]	; (8005224 <HAL_RCC_GetHCLKFreq+0x58>)
 8005212:	681b      	ldr	r3, [r3, #0]
}
 8005214:	4618      	mov	r0, r3
 8005216:	3708      	adds	r7, #8
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	58024400 	.word	0x58024400
 8005220:	08008bf0 	.word	0x08008bf0
 8005224:	24000004 	.word	0x24000004
 8005228:	24000000 	.word	0x24000000

0800522c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005230:	f7ff ffcc 	bl	80051cc <HAL_RCC_GetHCLKFreq>
 8005234:	4602      	mov	r2, r0
 8005236:	4b06      	ldr	r3, [pc, #24]	; (8005250 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005238:	69db      	ldr	r3, [r3, #28]
 800523a:	091b      	lsrs	r3, r3, #4
 800523c:	f003 0307 	and.w	r3, r3, #7
 8005240:	4904      	ldr	r1, [pc, #16]	; (8005254 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005242:	5ccb      	ldrb	r3, [r1, r3]
 8005244:	f003 031f 	and.w	r3, r3, #31
 8005248:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800524c:	4618      	mov	r0, r3
 800524e:	bd80      	pop	{r7, pc}
 8005250:	58024400 	.word	0x58024400
 8005254:	08008bf0 	.word	0x08008bf0

08005258 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800525c:	f7ff ffb6 	bl	80051cc <HAL_RCC_GetHCLKFreq>
 8005260:	4602      	mov	r2, r0
 8005262:	4b06      	ldr	r3, [pc, #24]	; (800527c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005264:	69db      	ldr	r3, [r3, #28]
 8005266:	0a1b      	lsrs	r3, r3, #8
 8005268:	f003 0307 	and.w	r3, r3, #7
 800526c:	4904      	ldr	r1, [pc, #16]	; (8005280 <HAL_RCC_GetPCLK2Freq+0x28>)
 800526e:	5ccb      	ldrb	r3, [r1, r3]
 8005270:	f003 031f 	and.w	r3, r3, #31
 8005274:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005278:	4618      	mov	r0, r3
 800527a:	bd80      	pop	{r7, pc}
 800527c:	58024400 	.word	0x58024400
 8005280:	08008bf0 	.word	0x08008bf0

08005284 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b086      	sub	sp, #24
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800528c:	2300      	movs	r3, #0
 800528e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005290:	2300      	movs	r3, #0
 8005292:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d03f      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80052a8:	d02a      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80052aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80052ae:	d824      	bhi.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80052b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052b4:	d018      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80052b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052ba:	d81e      	bhi.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d003      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80052c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052c4:	d007      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80052c6:	e018      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052c8:	4ba3      	ldr	r3, [pc, #652]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80052ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052cc:	4aa2      	ldr	r2, [pc, #648]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80052ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80052d4:	e015      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	3304      	adds	r3, #4
 80052da:	2102      	movs	r1, #2
 80052dc:	4618      	mov	r0, r3
 80052de:	f001 f9d5 	bl	800668c <RCCEx_PLL2_Config>
 80052e2:	4603      	mov	r3, r0
 80052e4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80052e6:	e00c      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	3324      	adds	r3, #36	; 0x24
 80052ec:	2102      	movs	r1, #2
 80052ee:	4618      	mov	r0, r3
 80052f0:	f001 fa7e 	bl	80067f0 <RCCEx_PLL3_Config>
 80052f4:	4603      	mov	r3, r0
 80052f6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80052f8:	e003      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	75fb      	strb	r3, [r7, #23]
      break;
 80052fe:	e000      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005300:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005302:	7dfb      	ldrb	r3, [r7, #23]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d109      	bne.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005308:	4b93      	ldr	r3, [pc, #588]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800530a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800530c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005314:	4990      	ldr	r1, [pc, #576]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005316:	4313      	orrs	r3, r2
 8005318:	650b      	str	r3, [r1, #80]	; 0x50
 800531a:	e001      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800531c:	7dfb      	ldrb	r3, [r7, #23]
 800531e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005328:	2b00      	cmp	r3, #0
 800532a:	d03d      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005330:	2b04      	cmp	r3, #4
 8005332:	d826      	bhi.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005334:	a201      	add	r2, pc, #4	; (adr r2, 800533c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533a:	bf00      	nop
 800533c:	08005351 	.word	0x08005351
 8005340:	0800535f 	.word	0x0800535f
 8005344:	08005371 	.word	0x08005371
 8005348:	08005389 	.word	0x08005389
 800534c:	08005389 	.word	0x08005389
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005350:	4b81      	ldr	r3, [pc, #516]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005354:	4a80      	ldr	r2, [pc, #512]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005356:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800535a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800535c:	e015      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	3304      	adds	r3, #4
 8005362:	2100      	movs	r1, #0
 8005364:	4618      	mov	r0, r3
 8005366:	f001 f991 	bl	800668c <RCCEx_PLL2_Config>
 800536a:	4603      	mov	r3, r0
 800536c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800536e:	e00c      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	3324      	adds	r3, #36	; 0x24
 8005374:	2100      	movs	r1, #0
 8005376:	4618      	mov	r0, r3
 8005378:	f001 fa3a 	bl	80067f0 <RCCEx_PLL3_Config>
 800537c:	4603      	mov	r3, r0
 800537e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005380:	e003      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	75fb      	strb	r3, [r7, #23]
      break;
 8005386:	e000      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005388:	bf00      	nop
    }

    if(ret == HAL_OK)
 800538a:	7dfb      	ldrb	r3, [r7, #23]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d109      	bne.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005390:	4b71      	ldr	r3, [pc, #452]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005394:	f023 0207 	bic.w	r2, r3, #7
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800539c:	496e      	ldr	r1, [pc, #440]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	650b      	str	r3, [r1, #80]	; 0x50
 80053a2:	e001      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053a4:	7dfb      	ldrb	r3, [r7, #23]
 80053a6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d042      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053bc:	d02b      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80053be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053c2:	d825      	bhi.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80053c4:	2bc0      	cmp	r3, #192	; 0xc0
 80053c6:	d028      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80053c8:	2bc0      	cmp	r3, #192	; 0xc0
 80053ca:	d821      	bhi.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80053cc:	2b80      	cmp	r3, #128	; 0x80
 80053ce:	d016      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80053d0:	2b80      	cmp	r3, #128	; 0x80
 80053d2:	d81d      	bhi.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d002      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80053d8:	2b40      	cmp	r3, #64	; 0x40
 80053da:	d007      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x168>
 80053dc:	e018      	b.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053de:	4b5e      	ldr	r3, [pc, #376]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80053e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e2:	4a5d      	ldr	r2, [pc, #372]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80053e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80053ea:	e017      	b.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	3304      	adds	r3, #4
 80053f0:	2100      	movs	r1, #0
 80053f2:	4618      	mov	r0, r3
 80053f4:	f001 f94a 	bl	800668c <RCCEx_PLL2_Config>
 80053f8:	4603      	mov	r3, r0
 80053fa:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80053fc:	e00e      	b.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	3324      	adds	r3, #36	; 0x24
 8005402:	2100      	movs	r1, #0
 8005404:	4618      	mov	r0, r3
 8005406:	f001 f9f3 	bl	80067f0 <RCCEx_PLL3_Config>
 800540a:	4603      	mov	r3, r0
 800540c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800540e:	e005      	b.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	75fb      	strb	r3, [r7, #23]
      break;
 8005414:	e002      	b.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005416:	bf00      	nop
 8005418:	e000      	b.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800541a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800541c:	7dfb      	ldrb	r3, [r7, #23]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d109      	bne.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005422:	4b4d      	ldr	r3, [pc, #308]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005426:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800542e:	494a      	ldr	r1, [pc, #296]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005430:	4313      	orrs	r3, r2
 8005432:	650b      	str	r3, [r1, #80]	; 0x50
 8005434:	e001      	b.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005436:	7dfb      	ldrb	r3, [r7, #23]
 8005438:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005442:	2b00      	cmp	r3, #0
 8005444:	d049      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800544c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005450:	d030      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005452:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005456:	d82a      	bhi.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005458:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800545c:	d02c      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800545e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005462:	d824      	bhi.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005464:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005468:	d018      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800546a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800546e:	d81e      	bhi.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005470:	2b00      	cmp	r3, #0
 8005472:	d003      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005474:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005478:	d007      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800547a:	e018      	b.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800547c:	4b36      	ldr	r3, [pc, #216]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800547e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005480:	4a35      	ldr	r2, [pc, #212]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005482:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005486:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005488:	e017      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	3304      	adds	r3, #4
 800548e:	2100      	movs	r1, #0
 8005490:	4618      	mov	r0, r3
 8005492:	f001 f8fb 	bl	800668c <RCCEx_PLL2_Config>
 8005496:	4603      	mov	r3, r0
 8005498:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800549a:	e00e      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	3324      	adds	r3, #36	; 0x24
 80054a0:	2100      	movs	r1, #0
 80054a2:	4618      	mov	r0, r3
 80054a4:	f001 f9a4 	bl	80067f0 <RCCEx_PLL3_Config>
 80054a8:	4603      	mov	r3, r0
 80054aa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80054ac:	e005      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	75fb      	strb	r3, [r7, #23]
      break;
 80054b2:	e002      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80054b4:	bf00      	nop
 80054b6:	e000      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80054b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054ba:	7dfb      	ldrb	r3, [r7, #23]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10a      	bne.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80054c0:	4b25      	ldr	r3, [pc, #148]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80054c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054c4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80054ce:	4922      	ldr	r1, [pc, #136]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80054d0:	4313      	orrs	r3, r2
 80054d2:	658b      	str	r3, [r1, #88]	; 0x58
 80054d4:	e001      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054d6:	7dfb      	ldrb	r3, [r7, #23]
 80054d8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d04b      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80054ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054f0:	d030      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80054f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054f6:	d82a      	bhi.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80054f8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80054fc:	d02e      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80054fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005502:	d824      	bhi.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005504:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005508:	d018      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800550a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800550e:	d81e      	bhi.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005510:	2b00      	cmp	r3, #0
 8005512:	d003      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005514:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005518:	d007      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800551a:	e018      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800551c:	4b0e      	ldr	r3, [pc, #56]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800551e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005520:	4a0d      	ldr	r2, [pc, #52]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005522:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005526:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005528:	e019      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	3304      	adds	r3, #4
 800552e:	2100      	movs	r1, #0
 8005530:	4618      	mov	r0, r3
 8005532:	f001 f8ab 	bl	800668c <RCCEx_PLL2_Config>
 8005536:	4603      	mov	r3, r0
 8005538:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800553a:	e010      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	3324      	adds	r3, #36	; 0x24
 8005540:	2100      	movs	r1, #0
 8005542:	4618      	mov	r0, r3
 8005544:	f001 f954 	bl	80067f0 <RCCEx_PLL3_Config>
 8005548:	4603      	mov	r3, r0
 800554a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800554c:	e007      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	75fb      	strb	r3, [r7, #23]
      break;
 8005552:	e004      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8005554:	bf00      	nop
 8005556:	e002      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005558:	58024400 	.word	0x58024400
      break;
 800555c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800555e:	7dfb      	ldrb	r3, [r7, #23]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d10a      	bne.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005564:	4b99      	ldr	r3, [pc, #612]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005568:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005572:	4996      	ldr	r1, [pc, #600]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005574:	4313      	orrs	r3, r2
 8005576:	658b      	str	r3, [r1, #88]	; 0x58
 8005578:	e001      	b.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800557a:	7dfb      	ldrb	r3, [r7, #23]
 800557c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d032      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800558e:	2b30      	cmp	r3, #48	; 0x30
 8005590:	d01c      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x348>
 8005592:	2b30      	cmp	r3, #48	; 0x30
 8005594:	d817      	bhi.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005596:	2b20      	cmp	r3, #32
 8005598:	d00c      	beq.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800559a:	2b20      	cmp	r3, #32
 800559c:	d813      	bhi.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d016      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80055a2:	2b10      	cmp	r3, #16
 80055a4:	d10f      	bne.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055a6:	4b89      	ldr	r3, [pc, #548]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80055a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055aa:	4a88      	ldr	r2, [pc, #544]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80055ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80055b2:	e00e      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	3304      	adds	r3, #4
 80055b8:	2102      	movs	r1, #2
 80055ba:	4618      	mov	r0, r3
 80055bc:	f001 f866 	bl	800668c <RCCEx_PLL2_Config>
 80055c0:	4603      	mov	r3, r0
 80055c2:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80055c4:	e005      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	75fb      	strb	r3, [r7, #23]
      break;
 80055ca:	e002      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80055cc:	bf00      	nop
 80055ce:	e000      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80055d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055d2:	7dfb      	ldrb	r3, [r7, #23]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d109      	bne.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80055d8:	4b7c      	ldr	r3, [pc, #496]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80055da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055e4:	4979      	ldr	r1, [pc, #484]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80055ea:	e001      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ec:	7dfb      	ldrb	r3, [r7, #23]
 80055ee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d047      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005600:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005604:	d030      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005606:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800560a:	d82a      	bhi.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800560c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005610:	d02c      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005612:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005616:	d824      	bhi.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005618:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800561c:	d018      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800561e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005622:	d81e      	bhi.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005624:	2b00      	cmp	r3, #0
 8005626:	d003      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8005628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800562c:	d007      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800562e:	e018      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005630:	4b66      	ldr	r3, [pc, #408]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005634:	4a65      	ldr	r2, [pc, #404]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005636:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800563a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800563c:	e017      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	3304      	adds	r3, #4
 8005642:	2100      	movs	r1, #0
 8005644:	4618      	mov	r0, r3
 8005646:	f001 f821 	bl	800668c <RCCEx_PLL2_Config>
 800564a:	4603      	mov	r3, r0
 800564c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800564e:	e00e      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	3324      	adds	r3, #36	; 0x24
 8005654:	2100      	movs	r1, #0
 8005656:	4618      	mov	r0, r3
 8005658:	f001 f8ca 	bl	80067f0 <RCCEx_PLL3_Config>
 800565c:	4603      	mov	r3, r0
 800565e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005660:	e005      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	75fb      	strb	r3, [r7, #23]
      break;
 8005666:	e002      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005668:	bf00      	nop
 800566a:	e000      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800566c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800566e:	7dfb      	ldrb	r3, [r7, #23]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d109      	bne.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005674:	4b55      	ldr	r3, [pc, #340]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005678:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005680:	4952      	ldr	r1, [pc, #328]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005682:	4313      	orrs	r3, r2
 8005684:	650b      	str	r3, [r1, #80]	; 0x50
 8005686:	e001      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005688:	7dfb      	ldrb	r3, [r7, #23]
 800568a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d049      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800569c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056a0:	d02e      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80056a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056a6:	d828      	bhi.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x476>
 80056a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80056ac:	d02a      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80056ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80056b2:	d822      	bhi.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x476>
 80056b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80056b8:	d026      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80056ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80056be:	d81c      	bhi.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x476>
 80056c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056c4:	d010      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80056c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056ca:	d816      	bhi.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x476>
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d01d      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x488>
 80056d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056d4:	d111      	bne.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	3304      	adds	r3, #4
 80056da:	2101      	movs	r1, #1
 80056dc:	4618      	mov	r0, r3
 80056de:	f000 ffd5 	bl	800668c <RCCEx_PLL2_Config>
 80056e2:	4603      	mov	r3, r0
 80056e4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80056e6:	e012      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	3324      	adds	r3, #36	; 0x24
 80056ec:	2101      	movs	r1, #1
 80056ee:	4618      	mov	r0, r3
 80056f0:	f001 f87e 	bl	80067f0 <RCCEx_PLL3_Config>
 80056f4:	4603      	mov	r3, r0
 80056f6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80056f8:	e009      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	75fb      	strb	r3, [r7, #23]
      break;
 80056fe:	e006      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005700:	bf00      	nop
 8005702:	e004      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005704:	bf00      	nop
 8005706:	e002      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005708:	bf00      	nop
 800570a:	e000      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800570c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800570e:	7dfb      	ldrb	r3, [r7, #23]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d109      	bne.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005714:	4b2d      	ldr	r3, [pc, #180]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005718:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005720:	492a      	ldr	r1, [pc, #168]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005722:	4313      	orrs	r3, r2
 8005724:	650b      	str	r3, [r1, #80]	; 0x50
 8005726:	e001      	b.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005728:	7dfb      	ldrb	r3, [r7, #23]
 800572a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d04d      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800573e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005742:	d02e      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8005744:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005748:	d828      	bhi.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800574a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800574e:	d02a      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8005750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005754:	d822      	bhi.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005756:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800575a:	d026      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x526>
 800575c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005760:	d81c      	bhi.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005766:	d010      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005768:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800576c:	d816      	bhi.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800576e:	2b00      	cmp	r3, #0
 8005770:	d01d      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8005772:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005776:	d111      	bne.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	3304      	adds	r3, #4
 800577c:	2101      	movs	r1, #1
 800577e:	4618      	mov	r0, r3
 8005780:	f000 ff84 	bl	800668c <RCCEx_PLL2_Config>
 8005784:	4603      	mov	r3, r0
 8005786:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005788:	e012      	b.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	3324      	adds	r3, #36	; 0x24
 800578e:	2101      	movs	r1, #1
 8005790:	4618      	mov	r0, r3
 8005792:	f001 f82d 	bl	80067f0 <RCCEx_PLL3_Config>
 8005796:	4603      	mov	r3, r0
 8005798:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800579a:	e009      	b.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	75fb      	strb	r3, [r7, #23]
      break;
 80057a0:	e006      	b.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80057a2:	bf00      	nop
 80057a4:	e004      	b.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80057a6:	bf00      	nop
 80057a8:	e002      	b.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80057aa:	bf00      	nop
 80057ac:	e000      	b.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80057ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057b0:	7dfb      	ldrb	r3, [r7, #23]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10c      	bne.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80057b6:	4b05      	ldr	r3, [pc, #20]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80057b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ba:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80057c4:	4901      	ldr	r1, [pc, #4]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	658b      	str	r3, [r1, #88]	; 0x58
 80057ca:	e003      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80057cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057d0:	7dfb      	ldrb	r3, [r7, #23]
 80057d2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d02f      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057e8:	d00e      	beq.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80057ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057ee:	d814      	bhi.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x596>
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d015      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80057f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057f8:	d10f      	bne.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057fa:	4baf      	ldr	r3, [pc, #700]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80057fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fe:	4aae      	ldr	r2, [pc, #696]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005804:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005806:	e00c      	b.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	3304      	adds	r3, #4
 800580c:	2101      	movs	r1, #1
 800580e:	4618      	mov	r0, r3
 8005810:	f000 ff3c 	bl	800668c <RCCEx_PLL2_Config>
 8005814:	4603      	mov	r3, r0
 8005816:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005818:	e003      	b.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	75fb      	strb	r3, [r7, #23]
      break;
 800581e:	e000      	b.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8005820:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005822:	7dfb      	ldrb	r3, [r7, #23]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d109      	bne.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005828:	4ba3      	ldr	r3, [pc, #652]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800582a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800582c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005834:	49a0      	ldr	r1, [pc, #640]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005836:	4313      	orrs	r3, r2
 8005838:	650b      	str	r3, [r1, #80]	; 0x50
 800583a:	e001      	b.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800583c:	7dfb      	ldrb	r3, [r7, #23]
 800583e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d032      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005850:	2b03      	cmp	r3, #3
 8005852:	d81b      	bhi.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005854:	a201      	add	r2, pc, #4	; (adr r2, 800585c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8005856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800585a:	bf00      	nop
 800585c:	08005893 	.word	0x08005893
 8005860:	0800586d 	.word	0x0800586d
 8005864:	0800587b 	.word	0x0800587b
 8005868:	08005893 	.word	0x08005893
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800586c:	4b92      	ldr	r3, [pc, #584]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800586e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005870:	4a91      	ldr	r2, [pc, #580]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005872:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005876:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005878:	e00c      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	3304      	adds	r3, #4
 800587e:	2102      	movs	r1, #2
 8005880:	4618      	mov	r0, r3
 8005882:	f000 ff03 	bl	800668c <RCCEx_PLL2_Config>
 8005886:	4603      	mov	r3, r0
 8005888:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800588a:	e003      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	75fb      	strb	r3, [r7, #23]
      break;
 8005890:	e000      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005892:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005894:	7dfb      	ldrb	r3, [r7, #23]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d109      	bne.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800589a:	4b87      	ldr	r3, [pc, #540]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800589c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800589e:	f023 0203 	bic.w	r2, r3, #3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058a6:	4984      	ldr	r1, [pc, #528]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80058a8:	4313      	orrs	r3, r2
 80058aa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80058ac:	e001      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ae:	7dfb      	ldrb	r3, [r7, #23]
 80058b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	f000 8086 	beq.w	80059cc <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058c0:	4b7e      	ldr	r3, [pc, #504]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a7d      	ldr	r2, [pc, #500]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80058c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80058cc:	f7fc fe6c 	bl	80025a8 <HAL_GetTick>
 80058d0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058d2:	e009      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058d4:	f7fc fe68 	bl	80025a8 <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	2b64      	cmp	r3, #100	; 0x64
 80058e0:	d902      	bls.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	75fb      	strb	r3, [r7, #23]
        break;
 80058e6:	e005      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058e8:	4b74      	ldr	r3, [pc, #464]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d0ef      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80058f4:	7dfb      	ldrb	r3, [r7, #23]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d166      	bne.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80058fa:	4b6f      	ldr	r3, [pc, #444]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80058fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005904:	4053      	eors	r3, r2
 8005906:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800590a:	2b00      	cmp	r3, #0
 800590c:	d013      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800590e:	4b6a      	ldr	r3, [pc, #424]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005916:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005918:	4b67      	ldr	r3, [pc, #412]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800591a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800591c:	4a66      	ldr	r2, [pc, #408]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800591e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005922:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005924:	4b64      	ldr	r3, [pc, #400]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005928:	4a63      	ldr	r2, [pc, #396]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800592a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800592e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005930:	4a61      	ldr	r2, [pc, #388]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800593c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005940:	d115      	bne.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005942:	f7fc fe31 	bl	80025a8 <HAL_GetTick>
 8005946:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005948:	e00b      	b.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800594a:	f7fc fe2d 	bl	80025a8 <HAL_GetTick>
 800594e:	4602      	mov	r2, r0
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	f241 3288 	movw	r2, #5000	; 0x1388
 8005958:	4293      	cmp	r3, r2
 800595a:	d902      	bls.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	75fb      	strb	r3, [r7, #23]
            break;
 8005960:	e005      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005962:	4b55      	ldr	r3, [pc, #340]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005966:	f003 0302 	and.w	r3, r3, #2
 800596a:	2b00      	cmp	r3, #0
 800596c:	d0ed      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800596e:	7dfb      	ldrb	r3, [r7, #23]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d126      	bne.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800597a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800597e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005982:	d10d      	bne.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005984:	4b4c      	ldr	r3, [pc, #304]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005992:	0919      	lsrs	r1, r3, #4
 8005994:	4b4a      	ldr	r3, [pc, #296]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8005996:	400b      	ands	r3, r1
 8005998:	4947      	ldr	r1, [pc, #284]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800599a:	4313      	orrs	r3, r2
 800599c:	610b      	str	r3, [r1, #16]
 800599e:	e005      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x728>
 80059a0:	4b45      	ldr	r3, [pc, #276]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	4a44      	ldr	r2, [pc, #272]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80059a6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80059aa:	6113      	str	r3, [r2, #16]
 80059ac:	4b42      	ldr	r3, [pc, #264]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80059ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059ba:	493f      	ldr	r1, [pc, #252]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	670b      	str	r3, [r1, #112]	; 0x70
 80059c0:	e004      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80059c2:	7dfb      	ldrb	r3, [r7, #23]
 80059c4:	75bb      	strb	r3, [r7, #22]
 80059c6:	e001      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059c8:	7dfb      	ldrb	r3, [r7, #23]
 80059ca:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0301 	and.w	r3, r3, #1
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f000 8085 	beq.w	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059de:	2b28      	cmp	r3, #40	; 0x28
 80059e0:	d866      	bhi.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80059e2:	a201      	add	r2, pc, #4	; (adr r2, 80059e8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80059e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e8:	08005ac5 	.word	0x08005ac5
 80059ec:	08005ab1 	.word	0x08005ab1
 80059f0:	08005ab1 	.word	0x08005ab1
 80059f4:	08005ab1 	.word	0x08005ab1
 80059f8:	08005ab1 	.word	0x08005ab1
 80059fc:	08005ab1 	.word	0x08005ab1
 8005a00:	08005ab1 	.word	0x08005ab1
 8005a04:	08005ab1 	.word	0x08005ab1
 8005a08:	08005a8d 	.word	0x08005a8d
 8005a0c:	08005ab1 	.word	0x08005ab1
 8005a10:	08005ab1 	.word	0x08005ab1
 8005a14:	08005ab1 	.word	0x08005ab1
 8005a18:	08005ab1 	.word	0x08005ab1
 8005a1c:	08005ab1 	.word	0x08005ab1
 8005a20:	08005ab1 	.word	0x08005ab1
 8005a24:	08005ab1 	.word	0x08005ab1
 8005a28:	08005a9f 	.word	0x08005a9f
 8005a2c:	08005ab1 	.word	0x08005ab1
 8005a30:	08005ab1 	.word	0x08005ab1
 8005a34:	08005ab1 	.word	0x08005ab1
 8005a38:	08005ab1 	.word	0x08005ab1
 8005a3c:	08005ab1 	.word	0x08005ab1
 8005a40:	08005ab1 	.word	0x08005ab1
 8005a44:	08005ab1 	.word	0x08005ab1
 8005a48:	08005ac5 	.word	0x08005ac5
 8005a4c:	08005ab1 	.word	0x08005ab1
 8005a50:	08005ab1 	.word	0x08005ab1
 8005a54:	08005ab1 	.word	0x08005ab1
 8005a58:	08005ab1 	.word	0x08005ab1
 8005a5c:	08005ab1 	.word	0x08005ab1
 8005a60:	08005ab1 	.word	0x08005ab1
 8005a64:	08005ab1 	.word	0x08005ab1
 8005a68:	08005ac5 	.word	0x08005ac5
 8005a6c:	08005ab1 	.word	0x08005ab1
 8005a70:	08005ab1 	.word	0x08005ab1
 8005a74:	08005ab1 	.word	0x08005ab1
 8005a78:	08005ab1 	.word	0x08005ab1
 8005a7c:	08005ab1 	.word	0x08005ab1
 8005a80:	08005ab1 	.word	0x08005ab1
 8005a84:	08005ab1 	.word	0x08005ab1
 8005a88:	08005ac5 	.word	0x08005ac5
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	3304      	adds	r3, #4
 8005a90:	2101      	movs	r1, #1
 8005a92:	4618      	mov	r0, r3
 8005a94:	f000 fdfa 	bl	800668c <RCCEx_PLL2_Config>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005a9c:	e013      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	3324      	adds	r3, #36	; 0x24
 8005aa2:	2101      	movs	r1, #1
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f000 fea3 	bl	80067f0 <RCCEx_PLL3_Config>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005aae:	e00a      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ab4:	e007      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005ab6:	bf00      	nop
 8005ab8:	58024400 	.word	0x58024400
 8005abc:	58024800 	.word	0x58024800
 8005ac0:	00ffffcf 	.word	0x00ffffcf
      break;
 8005ac4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ac6:	7dfb      	ldrb	r3, [r7, #23]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d109      	bne.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005acc:	4b96      	ldr	r3, [pc, #600]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ad0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ad8:	4993      	ldr	r1, [pc, #588]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005ada:	4313      	orrs	r3, r2
 8005adc:	654b      	str	r3, [r1, #84]	; 0x54
 8005ade:	e001      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ae0:	7dfb      	ldrb	r3, [r7, #23]
 8005ae2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0302 	and.w	r3, r3, #2
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d038      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005af4:	2b05      	cmp	r3, #5
 8005af6:	d821      	bhi.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8005af8:	a201      	add	r2, pc, #4	; (adr r2, 8005b00 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8005afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005afe:	bf00      	nop
 8005b00:	08005b43 	.word	0x08005b43
 8005b04:	08005b19 	.word	0x08005b19
 8005b08:	08005b2b 	.word	0x08005b2b
 8005b0c:	08005b43 	.word	0x08005b43
 8005b10:	08005b43 	.word	0x08005b43
 8005b14:	08005b43 	.word	0x08005b43
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	3304      	adds	r3, #4
 8005b1c:	2101      	movs	r1, #1
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f000 fdb4 	bl	800668c <RCCEx_PLL2_Config>
 8005b24:	4603      	mov	r3, r0
 8005b26:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005b28:	e00c      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	3324      	adds	r3, #36	; 0x24
 8005b2e:	2101      	movs	r1, #1
 8005b30:	4618      	mov	r0, r3
 8005b32:	f000 fe5d 	bl	80067f0 <RCCEx_PLL3_Config>
 8005b36:	4603      	mov	r3, r0
 8005b38:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005b3a:	e003      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b40:	e000      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8005b42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b44:	7dfb      	ldrb	r3, [r7, #23]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d109      	bne.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005b4a:	4b77      	ldr	r3, [pc, #476]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b4e:	f023 0207 	bic.w	r2, r3, #7
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b56:	4974      	ldr	r1, [pc, #464]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	654b      	str	r3, [r1, #84]	; 0x54
 8005b5c:	e001      	b.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b5e:	7dfb      	ldrb	r3, [r7, #23]
 8005b60:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0304 	and.w	r3, r3, #4
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d03a      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b74:	2b05      	cmp	r3, #5
 8005b76:	d821      	bhi.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x938>
 8005b78:	a201      	add	r2, pc, #4	; (adr r2, 8005b80 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8005b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b7e:	bf00      	nop
 8005b80:	08005bc3 	.word	0x08005bc3
 8005b84:	08005b99 	.word	0x08005b99
 8005b88:	08005bab 	.word	0x08005bab
 8005b8c:	08005bc3 	.word	0x08005bc3
 8005b90:	08005bc3 	.word	0x08005bc3
 8005b94:	08005bc3 	.word	0x08005bc3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	3304      	adds	r3, #4
 8005b9c:	2101      	movs	r1, #1
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f000 fd74 	bl	800668c <RCCEx_PLL2_Config>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005ba8:	e00c      	b.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	3324      	adds	r3, #36	; 0x24
 8005bae:	2101      	movs	r1, #1
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f000 fe1d 	bl	80067f0 <RCCEx_PLL3_Config>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005bba:	e003      	b.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	75fb      	strb	r3, [r7, #23]
      break;
 8005bc0:	e000      	b.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8005bc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bc4:	7dfb      	ldrb	r3, [r7, #23]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10a      	bne.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005bca:	4b57      	ldr	r3, [pc, #348]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bce:	f023 0207 	bic.w	r2, r3, #7
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd8:	4953      	ldr	r1, [pc, #332]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	658b      	str	r3, [r1, #88]	; 0x58
 8005bde:	e001      	b.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005be0:	7dfb      	ldrb	r3, [r7, #23]
 8005be2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0320 	and.w	r3, r3, #32
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d04b      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005bfa:	d02e      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005bfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c00:	d828      	bhi.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c06:	d02a      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c0c:	d822      	bhi.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005c0e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c12:	d026      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005c14:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c18:	d81c      	bhi.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005c1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c1e:	d010      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8005c20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c24:	d816      	bhi.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d01d      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8005c2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c2e:	d111      	bne.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	3304      	adds	r3, #4
 8005c34:	2100      	movs	r1, #0
 8005c36:	4618      	mov	r0, r3
 8005c38:	f000 fd28 	bl	800668c <RCCEx_PLL2_Config>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005c40:	e012      	b.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	3324      	adds	r3, #36	; 0x24
 8005c46:	2102      	movs	r1, #2
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f000 fdd1 	bl	80067f0 <RCCEx_PLL3_Config>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005c52:	e009      	b.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	75fb      	strb	r3, [r7, #23]
      break;
 8005c58:	e006      	b.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005c5a:	bf00      	nop
 8005c5c:	e004      	b.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005c5e:	bf00      	nop
 8005c60:	e002      	b.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005c62:	bf00      	nop
 8005c64:	e000      	b.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005c66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c68:	7dfb      	ldrb	r3, [r7, #23]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d10a      	bne.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c6e:	4b2e      	ldr	r3, [pc, #184]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c72:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c7c:	492a      	ldr	r1, [pc, #168]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	654b      	str	r3, [r1, #84]	; 0x54
 8005c82:	e001      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c84:	7dfb      	ldrb	r3, [r7, #23]
 8005c86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d04d      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c9a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005c9e:	d02e      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005ca0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005ca4:	d828      	bhi.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005caa:	d02a      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cb0:	d822      	bhi.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005cb2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005cb6:	d026      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005cb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005cbc:	d81c      	bhi.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005cbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cc2:	d010      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8005cc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cc8:	d816      	bhi.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d01d      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8005cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cd2:	d111      	bne.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	3304      	adds	r3, #4
 8005cd8:	2100      	movs	r1, #0
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f000 fcd6 	bl	800668c <RCCEx_PLL2_Config>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005ce4:	e012      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	3324      	adds	r3, #36	; 0x24
 8005cea:	2102      	movs	r1, #2
 8005cec:	4618      	mov	r0, r3
 8005cee:	f000 fd7f 	bl	80067f0 <RCCEx_PLL3_Config>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005cf6:	e009      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	75fb      	strb	r3, [r7, #23]
      break;
 8005cfc:	e006      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005cfe:	bf00      	nop
 8005d00:	e004      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005d02:	bf00      	nop
 8005d04:	e002      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005d06:	bf00      	nop
 8005d08:	e000      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005d0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d0c:	7dfb      	ldrb	r3, [r7, #23]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d10c      	bne.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005d12:	4b05      	ldr	r3, [pc, #20]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d16:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d20:	4901      	ldr	r1, [pc, #4]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	658b      	str	r3, [r1, #88]	; 0x58
 8005d26:	e003      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005d28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d2c:	7dfb      	ldrb	r3, [r7, #23]
 8005d2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d04b      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d42:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005d46:	d02e      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005d48:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005d4c:	d828      	bhi.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005d4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d52:	d02a      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005d54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d58:	d822      	bhi.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005d5a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005d5e:	d026      	beq.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8005d60:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005d64:	d81c      	bhi.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005d66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d6a:	d010      	beq.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8005d6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d70:	d816      	bhi.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d01d      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8005d76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d7a:	d111      	bne.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	3304      	adds	r3, #4
 8005d80:	2100      	movs	r1, #0
 8005d82:	4618      	mov	r0, r3
 8005d84:	f000 fc82 	bl	800668c <RCCEx_PLL2_Config>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005d8c:	e012      	b.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	3324      	adds	r3, #36	; 0x24
 8005d92:	2102      	movs	r1, #2
 8005d94:	4618      	mov	r0, r3
 8005d96:	f000 fd2b 	bl	80067f0 <RCCEx_PLL3_Config>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005d9e:	e009      	b.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	75fb      	strb	r3, [r7, #23]
      break;
 8005da4:	e006      	b.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005da6:	bf00      	nop
 8005da8:	e004      	b.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005daa:	bf00      	nop
 8005dac:	e002      	b.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005dae:	bf00      	nop
 8005db0:	e000      	b.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005db2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005db4:	7dfb      	ldrb	r3, [r7, #23]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d10a      	bne.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005dba:	4b9d      	ldr	r3, [pc, #628]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005dc8:	4999      	ldr	r1, [pc, #612]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	658b      	str	r3, [r1, #88]	; 0x58
 8005dce:	e001      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dd0:	7dfb      	ldrb	r3, [r7, #23]
 8005dd2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 0308 	and.w	r3, r3, #8
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d01a      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dea:	d10a      	bne.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	3324      	adds	r3, #36	; 0x24
 8005df0:	2102      	movs	r1, #2
 8005df2:	4618      	mov	r0, r3
 8005df4:	f000 fcfc 	bl	80067f0 <RCCEx_PLL3_Config>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d001      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005e02:	4b8b      	ldr	r3, [pc, #556]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e06:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e10:	4987      	ldr	r1, [pc, #540]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005e12:	4313      	orrs	r3, r2
 8005e14:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0310 	and.w	r3, r3, #16
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d01a      	beq.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e2c:	d10a      	bne.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	3324      	adds	r3, #36	; 0x24
 8005e32:	2102      	movs	r1, #2
 8005e34:	4618      	mov	r0, r3
 8005e36:	f000 fcdb 	bl	80067f0 <RCCEx_PLL3_Config>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d001      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005e44:	4b7a      	ldr	r3, [pc, #488]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e52:	4977      	ldr	r1, [pc, #476]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d034      	beq.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005e6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e6e:	d01d      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005e70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e74:	d817      	bhi.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d003      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e7e:	d009      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8005e80:	e011      	b.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	3304      	adds	r3, #4
 8005e86:	2100      	movs	r1, #0
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f000 fbff 	bl	800668c <RCCEx_PLL2_Config>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005e92:	e00c      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	3324      	adds	r3, #36	; 0x24
 8005e98:	2102      	movs	r1, #2
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f000 fca8 	bl	80067f0 <RCCEx_PLL3_Config>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005ea4:	e003      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	75fb      	strb	r3, [r7, #23]
      break;
 8005eaa:	e000      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8005eac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005eae:	7dfb      	ldrb	r3, [r7, #23]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d10a      	bne.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005eb4:	4b5e      	ldr	r3, [pc, #376]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eb8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005ec2:	495b      	ldr	r1, [pc, #364]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	658b      	str	r3, [r1, #88]	; 0x58
 8005ec8:	e001      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eca:	7dfb      	ldrb	r3, [r7, #23]
 8005ecc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d033      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ee0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ee4:	d01c      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8005ee6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005eea:	d816      	bhi.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8005eec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ef0:	d003      	beq.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8005ef2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ef6:	d007      	beq.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8005ef8:	e00f      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005efa:	4b4d      	ldr	r3, [pc, #308]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efe:	4a4c      	ldr	r2, [pc, #304]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f04:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005f06:	e00c      	b.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	3324      	adds	r3, #36	; 0x24
 8005f0c:	2101      	movs	r1, #1
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f000 fc6e 	bl	80067f0 <RCCEx_PLL3_Config>
 8005f14:	4603      	mov	r3, r0
 8005f16:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005f18:	e003      	b.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	75fb      	strb	r3, [r7, #23]
      break;
 8005f1e:	e000      	b.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8005f20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f22:	7dfb      	ldrb	r3, [r7, #23]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d10a      	bne.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f28:	4b41      	ldr	r3, [pc, #260]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f36:	493e      	ldr	r1, [pc, #248]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	654b      	str	r3, [r1, #84]	; 0x54
 8005f3c:	e001      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f3e:	7dfb      	ldrb	r3, [r7, #23]
 8005f40:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d029      	beq.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d003      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8005f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f5a:	d007      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8005f5c:	e00f      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f5e:	4b34      	ldr	r3, [pc, #208]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f62:	4a33      	ldr	r2, [pc, #204]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005f6a:	e00b      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	3304      	adds	r3, #4
 8005f70:	2102      	movs	r1, #2
 8005f72:	4618      	mov	r0, r3
 8005f74:	f000 fb8a 	bl	800668c <RCCEx_PLL2_Config>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005f7c:	e002      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	75fb      	strb	r3, [r7, #23]
      break;
 8005f82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f84:	7dfb      	ldrb	r3, [r7, #23]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d109      	bne.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005f8a:	4b29      	ldr	r3, [pc, #164]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f8e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f96:	4926      	ldr	r1, [pc, #152]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005f9c:	e001      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f9e:	7dfb      	ldrb	r3, [r7, #23]
 8005fa0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00a      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	3324      	adds	r3, #36	; 0x24
 8005fb2:	2102      	movs	r1, #2
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f000 fc1b 	bl	80067f0 <RCCEx_PLL3_Config>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d001      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d033      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fd8:	d017      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005fda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fde:	d811      	bhi.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005fe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fe4:	d013      	beq.n	800600e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005fe6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fea:	d80b      	bhi.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d010      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8005ff0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ff4:	d106      	bne.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ff6:	4b0e      	ldr	r3, [pc, #56]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffa:	4a0d      	ldr	r2, [pc, #52]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ffc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006000:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006002:	e007      	b.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	75fb      	strb	r3, [r7, #23]
      break;
 8006008:	e004      	b.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800600a:	bf00      	nop
 800600c:	e002      	b.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800600e:	bf00      	nop
 8006010:	e000      	b.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006012:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006014:	7dfb      	ldrb	r3, [r7, #23]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d10c      	bne.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800601a:	4b05      	ldr	r3, [pc, #20]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800601c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800601e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006026:	4902      	ldr	r1, [pc, #8]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006028:	4313      	orrs	r3, r2
 800602a:	654b      	str	r3, [r1, #84]	; 0x54
 800602c:	e004      	b.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800602e:	bf00      	nop
 8006030:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006034:	7dfb      	ldrb	r3, [r7, #23]
 8006036:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006040:	2b00      	cmp	r3, #0
 8006042:	d008      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006044:	4b31      	ldr	r3, [pc, #196]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006048:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006050:	492e      	ldr	r1, [pc, #184]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006052:	4313      	orrs	r3, r2
 8006054:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d009      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006062:	4b2a      	ldr	r3, [pc, #168]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006070:	4926      	ldr	r1, [pc, #152]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006072:	4313      	orrs	r3, r2
 8006074:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800607e:	2b00      	cmp	r3, #0
 8006080:	d008      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006082:	4b22      	ldr	r3, [pc, #136]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006086:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800608e:	491f      	ldr	r1, [pc, #124]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006090:	4313      	orrs	r3, r2
 8006092:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800609c:	2b00      	cmp	r3, #0
 800609e:	d00d      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80060a0:	4b1a      	ldr	r3, [pc, #104]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	4a19      	ldr	r2, [pc, #100]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80060a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80060aa:	6113      	str	r3, [r2, #16]
 80060ac:	4b17      	ldr	r3, [pc, #92]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80060ae:	691a      	ldr	r2, [r3, #16]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80060b6:	4915      	ldr	r1, [pc, #84]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80060b8:	4313      	orrs	r3, r2
 80060ba:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	da08      	bge.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80060c4:	4b11      	ldr	r3, [pc, #68]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80060c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060c8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060d0:	490e      	ldr	r1, [pc, #56]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80060d2:	4313      	orrs	r3, r2
 80060d4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d009      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80060e2:	4b0a      	ldr	r3, [pc, #40]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80060e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f0:	4906      	ldr	r1, [pc, #24]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80060f2:	4313      	orrs	r3, r2
 80060f4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80060f6:	7dbb      	ldrb	r3, [r7, #22]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d101      	bne.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80060fc:	2300      	movs	r3, #0
 80060fe:	e000      	b.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
}
 8006102:	4618      	mov	r0, r3
 8006104:	3718      	adds	r7, #24
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	58024400 	.word	0x58024400

08006110 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006114:	f7ff f85a 	bl	80051cc <HAL_RCC_GetHCLKFreq>
 8006118:	4602      	mov	r2, r0
 800611a:	4b06      	ldr	r3, [pc, #24]	; (8006134 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	091b      	lsrs	r3, r3, #4
 8006120:	f003 0307 	and.w	r3, r3, #7
 8006124:	4904      	ldr	r1, [pc, #16]	; (8006138 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006126:	5ccb      	ldrb	r3, [r1, r3]
 8006128:	f003 031f 	and.w	r3, r3, #31
 800612c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006130:	4618      	mov	r0, r3
 8006132:	bd80      	pop	{r7, pc}
 8006134:	58024400 	.word	0x58024400
 8006138:	08008bf0 	.word	0x08008bf0

0800613c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800613c:	b480      	push	{r7}
 800613e:	b089      	sub	sp, #36	; 0x24
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006144:	4ba1      	ldr	r3, [pc, #644]	; (80063cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006148:	f003 0303 	and.w	r3, r3, #3
 800614c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800614e:	4b9f      	ldr	r3, [pc, #636]	; (80063cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006152:	0b1b      	lsrs	r3, r3, #12
 8006154:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006158:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800615a:	4b9c      	ldr	r3, [pc, #624]	; (80063cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800615c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800615e:	091b      	lsrs	r3, r3, #4
 8006160:	f003 0301 	and.w	r3, r3, #1
 8006164:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006166:	4b99      	ldr	r3, [pc, #612]	; (80063cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800616a:	08db      	lsrs	r3, r3, #3
 800616c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006170:	693a      	ldr	r2, [r7, #16]
 8006172:	fb02 f303 	mul.w	r3, r2, r3
 8006176:	ee07 3a90 	vmov	s15, r3
 800617a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800617e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	2b00      	cmp	r3, #0
 8006186:	f000 8111 	beq.w	80063ac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	2b02      	cmp	r3, #2
 800618e:	f000 8083 	beq.w	8006298 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	2b02      	cmp	r3, #2
 8006196:	f200 80a1 	bhi.w	80062dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d003      	beq.n	80061a8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d056      	beq.n	8006254 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80061a6:	e099      	b.n	80062dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061a8:	4b88      	ldr	r3, [pc, #544]	; (80063cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 0320 	and.w	r3, r3, #32
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d02d      	beq.n	8006210 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80061b4:	4b85      	ldr	r3, [pc, #532]	; (80063cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	08db      	lsrs	r3, r3, #3
 80061ba:	f003 0303 	and.w	r3, r3, #3
 80061be:	4a84      	ldr	r2, [pc, #528]	; (80063d0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80061c0:	fa22 f303 	lsr.w	r3, r2, r3
 80061c4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	ee07 3a90 	vmov	s15, r3
 80061cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	ee07 3a90 	vmov	s15, r3
 80061d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061de:	4b7b      	ldr	r3, [pc, #492]	; (80063cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061e6:	ee07 3a90 	vmov	s15, r3
 80061ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80061f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80063d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80061f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800620a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800620e:	e087      	b.n	8006320 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	ee07 3a90 	vmov	s15, r3
 8006216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800621a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800621e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006222:	4b6a      	ldr	r3, [pc, #424]	; (80063cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800622a:	ee07 3a90 	vmov	s15, r3
 800622e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006232:	ed97 6a03 	vldr	s12, [r7, #12]
 8006236:	eddf 5a67 	vldr	s11, [pc, #412]	; 80063d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800623a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800623e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006242:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800624a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800624e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006252:	e065      	b.n	8006320 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	ee07 3a90 	vmov	s15, r3
 800625a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800625e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80063dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006266:	4b59      	ldr	r3, [pc, #356]	; (80063cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800626e:	ee07 3a90 	vmov	s15, r3
 8006272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006276:	ed97 6a03 	vldr	s12, [r7, #12]
 800627a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80063d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800627e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006286:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800628a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800628e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006292:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006296:	e043      	b.n	8006320 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	ee07 3a90 	vmov	s15, r3
 800629e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80063e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80062a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062aa:	4b48      	ldr	r3, [pc, #288]	; (80063cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062b2:	ee07 3a90 	vmov	s15, r3
 80062b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80062be:	eddf 5a45 	vldr	s11, [pc, #276]	; 80063d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80062c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80062da:	e021      	b.n	8006320 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	ee07 3a90 	vmov	s15, r3
 80062e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80063dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80062ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062ee:	4b37      	ldr	r3, [pc, #220]	; (80063cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062f6:	ee07 3a90 	vmov	s15, r3
 80062fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006302:	eddf 5a34 	vldr	s11, [pc, #208]	; 80063d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800630a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800630e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800631a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800631e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006320:	4b2a      	ldr	r3, [pc, #168]	; (80063cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006324:	0a5b      	lsrs	r3, r3, #9
 8006326:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800632a:	ee07 3a90 	vmov	s15, r3
 800632e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006332:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006336:	ee37 7a87 	vadd.f32	s14, s15, s14
 800633a:	edd7 6a07 	vldr	s13, [r7, #28]
 800633e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006342:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006346:	ee17 2a90 	vmov	r2, s15
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800634e:	4b1f      	ldr	r3, [pc, #124]	; (80063cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006352:	0c1b      	lsrs	r3, r3, #16
 8006354:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006358:	ee07 3a90 	vmov	s15, r3
 800635c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006360:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006364:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006368:	edd7 6a07 	vldr	s13, [r7, #28]
 800636c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006370:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006374:	ee17 2a90 	vmov	r2, s15
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800637c:	4b13      	ldr	r3, [pc, #76]	; (80063cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800637e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006380:	0e1b      	lsrs	r3, r3, #24
 8006382:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006386:	ee07 3a90 	vmov	s15, r3
 800638a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800638e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006392:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006396:	edd7 6a07 	vldr	s13, [r7, #28]
 800639a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800639e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063a2:	ee17 2a90 	vmov	r2, s15
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80063aa:	e008      	b.n	80063be <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	609a      	str	r2, [r3, #8]
}
 80063be:	bf00      	nop
 80063c0:	3724      	adds	r7, #36	; 0x24
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	58024400 	.word	0x58024400
 80063d0:	03d09000 	.word	0x03d09000
 80063d4:	46000000 	.word	0x46000000
 80063d8:	4c742400 	.word	0x4c742400
 80063dc:	4a742400 	.word	0x4a742400
 80063e0:	4af42400 	.word	0x4af42400

080063e4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b089      	sub	sp, #36	; 0x24
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80063ec:	4ba1      	ldr	r3, [pc, #644]	; (8006674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f0:	f003 0303 	and.w	r3, r3, #3
 80063f4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80063f6:	4b9f      	ldr	r3, [pc, #636]	; (8006674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fa:	0d1b      	lsrs	r3, r3, #20
 80063fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006400:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006402:	4b9c      	ldr	r3, [pc, #624]	; (8006674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006406:	0a1b      	lsrs	r3, r3, #8
 8006408:	f003 0301 	and.w	r3, r3, #1
 800640c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800640e:	4b99      	ldr	r3, [pc, #612]	; (8006674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006412:	08db      	lsrs	r3, r3, #3
 8006414:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006418:	693a      	ldr	r2, [r7, #16]
 800641a:	fb02 f303 	mul.w	r3, r2, r3
 800641e:	ee07 3a90 	vmov	s15, r3
 8006422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006426:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	2b00      	cmp	r3, #0
 800642e:	f000 8111 	beq.w	8006654 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	2b02      	cmp	r3, #2
 8006436:	f000 8083 	beq.w	8006540 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	2b02      	cmp	r3, #2
 800643e:	f200 80a1 	bhi.w	8006584 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d003      	beq.n	8006450 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	2b01      	cmp	r3, #1
 800644c:	d056      	beq.n	80064fc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800644e:	e099      	b.n	8006584 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006450:	4b88      	ldr	r3, [pc, #544]	; (8006674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 0320 	and.w	r3, r3, #32
 8006458:	2b00      	cmp	r3, #0
 800645a:	d02d      	beq.n	80064b8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800645c:	4b85      	ldr	r3, [pc, #532]	; (8006674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	08db      	lsrs	r3, r3, #3
 8006462:	f003 0303 	and.w	r3, r3, #3
 8006466:	4a84      	ldr	r2, [pc, #528]	; (8006678 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006468:	fa22 f303 	lsr.w	r3, r2, r3
 800646c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	ee07 3a90 	vmov	s15, r3
 8006474:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	ee07 3a90 	vmov	s15, r3
 800647e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006486:	4b7b      	ldr	r3, [pc, #492]	; (8006674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800648e:	ee07 3a90 	vmov	s15, r3
 8006492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006496:	ed97 6a03 	vldr	s12, [r7, #12]
 800649a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800667c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800649e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064b2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80064b6:	e087      	b.n	80065c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	ee07 3a90 	vmov	s15, r3
 80064be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064c2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006680 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80064c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064ca:	4b6a      	ldr	r3, [pc, #424]	; (8006674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064d2:	ee07 3a90 	vmov	s15, r3
 80064d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064da:	ed97 6a03 	vldr	s12, [r7, #12]
 80064de:	eddf 5a67 	vldr	s11, [pc, #412]	; 800667c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80064e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80064fa:	e065      	b.n	80065c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	ee07 3a90 	vmov	s15, r3
 8006502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006506:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006684 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800650a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800650e:	4b59      	ldr	r3, [pc, #356]	; (8006674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006516:	ee07 3a90 	vmov	s15, r3
 800651a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800651e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006522:	eddf 5a56 	vldr	s11, [pc, #344]	; 800667c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800652a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800652e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800653a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800653e:	e043      	b.n	80065c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	ee07 3a90 	vmov	s15, r3
 8006546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800654a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006688 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800654e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006552:	4b48      	ldr	r3, [pc, #288]	; (8006674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800655a:	ee07 3a90 	vmov	s15, r3
 800655e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006562:	ed97 6a03 	vldr	s12, [r7, #12]
 8006566:	eddf 5a45 	vldr	s11, [pc, #276]	; 800667c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800656a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800656e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006572:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800657a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800657e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006582:	e021      	b.n	80065c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	ee07 3a90 	vmov	s15, r3
 800658a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800658e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006684 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006596:	4b37      	ldr	r3, [pc, #220]	; (8006674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800659e:	ee07 3a90 	vmov	s15, r3
 80065a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80065aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800667c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80065ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80065c6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80065c8:	4b2a      	ldr	r3, [pc, #168]	; (8006674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065cc:	0a5b      	lsrs	r3, r3, #9
 80065ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065d2:	ee07 3a90 	vmov	s15, r3
 80065d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80065de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80065e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065ee:	ee17 2a90 	vmov	r2, s15
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80065f6:	4b1f      	ldr	r3, [pc, #124]	; (8006674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fa:	0c1b      	lsrs	r3, r3, #16
 80065fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006600:	ee07 3a90 	vmov	s15, r3
 8006604:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006608:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800660c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006610:	edd7 6a07 	vldr	s13, [r7, #28]
 8006614:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006618:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800661c:	ee17 2a90 	vmov	r2, s15
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006624:	4b13      	ldr	r3, [pc, #76]	; (8006674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006628:	0e1b      	lsrs	r3, r3, #24
 800662a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800662e:	ee07 3a90 	vmov	s15, r3
 8006632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006636:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800663a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800663e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006642:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006646:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800664a:	ee17 2a90 	vmov	r2, s15
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006652:	e008      	b.n	8006666 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	609a      	str	r2, [r3, #8]
}
 8006666:	bf00      	nop
 8006668:	3724      	adds	r7, #36	; 0x24
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	58024400 	.word	0x58024400
 8006678:	03d09000 	.word	0x03d09000
 800667c:	46000000 	.word	0x46000000
 8006680:	4c742400 	.word	0x4c742400
 8006684:	4a742400 	.word	0x4a742400
 8006688:	4af42400 	.word	0x4af42400

0800668c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006696:	2300      	movs	r3, #0
 8006698:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800669a:	4b53      	ldr	r3, [pc, #332]	; (80067e8 <RCCEx_PLL2_Config+0x15c>)
 800669c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800669e:	f003 0303 	and.w	r3, r3, #3
 80066a2:	2b03      	cmp	r3, #3
 80066a4:	d101      	bne.n	80066aa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e099      	b.n	80067de <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80066aa:	4b4f      	ldr	r3, [pc, #316]	; (80067e8 <RCCEx_PLL2_Config+0x15c>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a4e      	ldr	r2, [pc, #312]	; (80067e8 <RCCEx_PLL2_Config+0x15c>)
 80066b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80066b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066b6:	f7fb ff77 	bl	80025a8 <HAL_GetTick>
 80066ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80066bc:	e008      	b.n	80066d0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80066be:	f7fb ff73 	bl	80025a8 <HAL_GetTick>
 80066c2:	4602      	mov	r2, r0
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	d901      	bls.n	80066d0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e086      	b.n	80067de <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80066d0:	4b45      	ldr	r3, [pc, #276]	; (80067e8 <RCCEx_PLL2_Config+0x15c>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d1f0      	bne.n	80066be <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80066dc:	4b42      	ldr	r3, [pc, #264]	; (80067e8 <RCCEx_PLL2_Config+0x15c>)
 80066de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	031b      	lsls	r3, r3, #12
 80066ea:	493f      	ldr	r1, [pc, #252]	; (80067e8 <RCCEx_PLL2_Config+0x15c>)
 80066ec:	4313      	orrs	r3, r2
 80066ee:	628b      	str	r3, [r1, #40]	; 0x28
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	3b01      	subs	r3, #1
 80066f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	3b01      	subs	r3, #1
 8006700:	025b      	lsls	r3, r3, #9
 8006702:	b29b      	uxth	r3, r3
 8006704:	431a      	orrs	r2, r3
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	3b01      	subs	r3, #1
 800670c:	041b      	lsls	r3, r3, #16
 800670e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006712:	431a      	orrs	r2, r3
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	3b01      	subs	r3, #1
 800671a:	061b      	lsls	r3, r3, #24
 800671c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006720:	4931      	ldr	r1, [pc, #196]	; (80067e8 <RCCEx_PLL2_Config+0x15c>)
 8006722:	4313      	orrs	r3, r2
 8006724:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006726:	4b30      	ldr	r3, [pc, #192]	; (80067e8 <RCCEx_PLL2_Config+0x15c>)
 8006728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	492d      	ldr	r1, [pc, #180]	; (80067e8 <RCCEx_PLL2_Config+0x15c>)
 8006734:	4313      	orrs	r3, r2
 8006736:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006738:	4b2b      	ldr	r3, [pc, #172]	; (80067e8 <RCCEx_PLL2_Config+0x15c>)
 800673a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800673c:	f023 0220 	bic.w	r2, r3, #32
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	4928      	ldr	r1, [pc, #160]	; (80067e8 <RCCEx_PLL2_Config+0x15c>)
 8006746:	4313      	orrs	r3, r2
 8006748:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800674a:	4b27      	ldr	r3, [pc, #156]	; (80067e8 <RCCEx_PLL2_Config+0x15c>)
 800674c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800674e:	4a26      	ldr	r2, [pc, #152]	; (80067e8 <RCCEx_PLL2_Config+0x15c>)
 8006750:	f023 0310 	bic.w	r3, r3, #16
 8006754:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006756:	4b24      	ldr	r3, [pc, #144]	; (80067e8 <RCCEx_PLL2_Config+0x15c>)
 8006758:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800675a:	4b24      	ldr	r3, [pc, #144]	; (80067ec <RCCEx_PLL2_Config+0x160>)
 800675c:	4013      	ands	r3, r2
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	69d2      	ldr	r2, [r2, #28]
 8006762:	00d2      	lsls	r2, r2, #3
 8006764:	4920      	ldr	r1, [pc, #128]	; (80067e8 <RCCEx_PLL2_Config+0x15c>)
 8006766:	4313      	orrs	r3, r2
 8006768:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800676a:	4b1f      	ldr	r3, [pc, #124]	; (80067e8 <RCCEx_PLL2_Config+0x15c>)
 800676c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676e:	4a1e      	ldr	r2, [pc, #120]	; (80067e8 <RCCEx_PLL2_Config+0x15c>)
 8006770:	f043 0310 	orr.w	r3, r3, #16
 8006774:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d106      	bne.n	800678a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800677c:	4b1a      	ldr	r3, [pc, #104]	; (80067e8 <RCCEx_PLL2_Config+0x15c>)
 800677e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006780:	4a19      	ldr	r2, [pc, #100]	; (80067e8 <RCCEx_PLL2_Config+0x15c>)
 8006782:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006786:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006788:	e00f      	b.n	80067aa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	2b01      	cmp	r3, #1
 800678e:	d106      	bne.n	800679e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006790:	4b15      	ldr	r3, [pc, #84]	; (80067e8 <RCCEx_PLL2_Config+0x15c>)
 8006792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006794:	4a14      	ldr	r2, [pc, #80]	; (80067e8 <RCCEx_PLL2_Config+0x15c>)
 8006796:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800679a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800679c:	e005      	b.n	80067aa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800679e:	4b12      	ldr	r3, [pc, #72]	; (80067e8 <RCCEx_PLL2_Config+0x15c>)
 80067a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a2:	4a11      	ldr	r2, [pc, #68]	; (80067e8 <RCCEx_PLL2_Config+0x15c>)
 80067a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80067a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80067aa:	4b0f      	ldr	r3, [pc, #60]	; (80067e8 <RCCEx_PLL2_Config+0x15c>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a0e      	ldr	r2, [pc, #56]	; (80067e8 <RCCEx_PLL2_Config+0x15c>)
 80067b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80067b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067b6:	f7fb fef7 	bl	80025a8 <HAL_GetTick>
 80067ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80067bc:	e008      	b.n	80067d0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80067be:	f7fb fef3 	bl	80025a8 <HAL_GetTick>
 80067c2:	4602      	mov	r2, r0
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d901      	bls.n	80067d0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e006      	b.n	80067de <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80067d0:	4b05      	ldr	r3, [pc, #20]	; (80067e8 <RCCEx_PLL2_Config+0x15c>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d0f0      	beq.n	80067be <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80067dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	58024400 	.word	0x58024400
 80067ec:	ffff0007 	.word	0xffff0007

080067f0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067fa:	2300      	movs	r3, #0
 80067fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80067fe:	4b53      	ldr	r3, [pc, #332]	; (800694c <RCCEx_PLL3_Config+0x15c>)
 8006800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006802:	f003 0303 	and.w	r3, r3, #3
 8006806:	2b03      	cmp	r3, #3
 8006808:	d101      	bne.n	800680e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e099      	b.n	8006942 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800680e:	4b4f      	ldr	r3, [pc, #316]	; (800694c <RCCEx_PLL3_Config+0x15c>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a4e      	ldr	r2, [pc, #312]	; (800694c <RCCEx_PLL3_Config+0x15c>)
 8006814:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006818:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800681a:	f7fb fec5 	bl	80025a8 <HAL_GetTick>
 800681e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006820:	e008      	b.n	8006834 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006822:	f7fb fec1 	bl	80025a8 <HAL_GetTick>
 8006826:	4602      	mov	r2, r0
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	2b02      	cmp	r3, #2
 800682e:	d901      	bls.n	8006834 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006830:	2303      	movs	r3, #3
 8006832:	e086      	b.n	8006942 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006834:	4b45      	ldr	r3, [pc, #276]	; (800694c <RCCEx_PLL3_Config+0x15c>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1f0      	bne.n	8006822 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006840:	4b42      	ldr	r3, [pc, #264]	; (800694c <RCCEx_PLL3_Config+0x15c>)
 8006842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006844:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	051b      	lsls	r3, r3, #20
 800684e:	493f      	ldr	r1, [pc, #252]	; (800694c <RCCEx_PLL3_Config+0x15c>)
 8006850:	4313      	orrs	r3, r2
 8006852:	628b      	str	r3, [r1, #40]	; 0x28
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	3b01      	subs	r3, #1
 800685a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	3b01      	subs	r3, #1
 8006864:	025b      	lsls	r3, r3, #9
 8006866:	b29b      	uxth	r3, r3
 8006868:	431a      	orrs	r2, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	3b01      	subs	r3, #1
 8006870:	041b      	lsls	r3, r3, #16
 8006872:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006876:	431a      	orrs	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	3b01      	subs	r3, #1
 800687e:	061b      	lsls	r3, r3, #24
 8006880:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006884:	4931      	ldr	r1, [pc, #196]	; (800694c <RCCEx_PLL3_Config+0x15c>)
 8006886:	4313      	orrs	r3, r2
 8006888:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800688a:	4b30      	ldr	r3, [pc, #192]	; (800694c <RCCEx_PLL3_Config+0x15c>)
 800688c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800688e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	492d      	ldr	r1, [pc, #180]	; (800694c <RCCEx_PLL3_Config+0x15c>)
 8006898:	4313      	orrs	r3, r2
 800689a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800689c:	4b2b      	ldr	r3, [pc, #172]	; (800694c <RCCEx_PLL3_Config+0x15c>)
 800689e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	699b      	ldr	r3, [r3, #24]
 80068a8:	4928      	ldr	r1, [pc, #160]	; (800694c <RCCEx_PLL3_Config+0x15c>)
 80068aa:	4313      	orrs	r3, r2
 80068ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80068ae:	4b27      	ldr	r3, [pc, #156]	; (800694c <RCCEx_PLL3_Config+0x15c>)
 80068b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b2:	4a26      	ldr	r2, [pc, #152]	; (800694c <RCCEx_PLL3_Config+0x15c>)
 80068b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80068ba:	4b24      	ldr	r3, [pc, #144]	; (800694c <RCCEx_PLL3_Config+0x15c>)
 80068bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068be:	4b24      	ldr	r3, [pc, #144]	; (8006950 <RCCEx_PLL3_Config+0x160>)
 80068c0:	4013      	ands	r3, r2
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	69d2      	ldr	r2, [r2, #28]
 80068c6:	00d2      	lsls	r2, r2, #3
 80068c8:	4920      	ldr	r1, [pc, #128]	; (800694c <RCCEx_PLL3_Config+0x15c>)
 80068ca:	4313      	orrs	r3, r2
 80068cc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80068ce:	4b1f      	ldr	r3, [pc, #124]	; (800694c <RCCEx_PLL3_Config+0x15c>)
 80068d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d2:	4a1e      	ldr	r2, [pc, #120]	; (800694c <RCCEx_PLL3_Config+0x15c>)
 80068d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d106      	bne.n	80068ee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80068e0:	4b1a      	ldr	r3, [pc, #104]	; (800694c <RCCEx_PLL3_Config+0x15c>)
 80068e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e4:	4a19      	ldr	r2, [pc, #100]	; (800694c <RCCEx_PLL3_Config+0x15c>)
 80068e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80068ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80068ec:	e00f      	b.n	800690e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d106      	bne.n	8006902 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80068f4:	4b15      	ldr	r3, [pc, #84]	; (800694c <RCCEx_PLL3_Config+0x15c>)
 80068f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f8:	4a14      	ldr	r2, [pc, #80]	; (800694c <RCCEx_PLL3_Config+0x15c>)
 80068fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80068fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006900:	e005      	b.n	800690e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006902:	4b12      	ldr	r3, [pc, #72]	; (800694c <RCCEx_PLL3_Config+0x15c>)
 8006904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006906:	4a11      	ldr	r2, [pc, #68]	; (800694c <RCCEx_PLL3_Config+0x15c>)
 8006908:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800690c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800690e:	4b0f      	ldr	r3, [pc, #60]	; (800694c <RCCEx_PLL3_Config+0x15c>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a0e      	ldr	r2, [pc, #56]	; (800694c <RCCEx_PLL3_Config+0x15c>)
 8006914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006918:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800691a:	f7fb fe45 	bl	80025a8 <HAL_GetTick>
 800691e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006920:	e008      	b.n	8006934 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006922:	f7fb fe41 	bl	80025a8 <HAL_GetTick>
 8006926:	4602      	mov	r2, r0
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	2b02      	cmp	r3, #2
 800692e:	d901      	bls.n	8006934 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e006      	b.n	8006942 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006934:	4b05      	ldr	r3, [pc, #20]	; (800694c <RCCEx_PLL3_Config+0x15c>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800693c:	2b00      	cmp	r3, #0
 800693e:	d0f0      	beq.n	8006922 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006940:	7bfb      	ldrb	r3, [r7, #15]
}
 8006942:	4618      	mov	r0, r3
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	58024400 	.word	0x58024400
 8006950:	ffff0007 	.word	0xffff0007

08006954 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d101      	bne.n	8006966 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e042      	b.n	80069ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800696c:	2b00      	cmp	r3, #0
 800696e:	d106      	bne.n	800697e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f7fb fbe5 	bl	8002148 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2224      	movs	r2, #36	; 0x24
 8006982:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f022 0201 	bic.w	r2, r2, #1
 8006994:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 f8c2 	bl	8006b20 <UART_SetConfig>
 800699c:	4603      	mov	r3, r0
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d101      	bne.n	80069a6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e022      	b.n	80069ec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d002      	beq.n	80069b4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 fe1e 	bl	80075f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	685a      	ldr	r2, [r3, #4]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80069c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	689a      	ldr	r2, [r3, #8]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80069d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f042 0201 	orr.w	r2, r2, #1
 80069e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 fea5 	bl	8007734 <UART_CheckIdleState>
 80069ea:	4603      	mov	r3, r0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3708      	adds	r7, #8
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b08a      	sub	sp, #40	; 0x28
 80069f8:	af02      	add	r7, sp, #8
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	603b      	str	r3, [r7, #0]
 8006a00:	4613      	mov	r3, r2
 8006a02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a0a:	2b20      	cmp	r3, #32
 8006a0c:	f040 8083 	bne.w	8006b16 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d002      	beq.n	8006a1c <HAL_UART_Transmit+0x28>
 8006a16:	88fb      	ldrh	r3, [r7, #6]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d101      	bne.n	8006a20 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e07b      	b.n	8006b18 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d101      	bne.n	8006a2e <HAL_UART_Transmit+0x3a>
 8006a2a:	2302      	movs	r3, #2
 8006a2c:	e074      	b.n	8006b18 <HAL_UART_Transmit+0x124>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2201      	movs	r2, #1
 8006a32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2221      	movs	r2, #33	; 0x21
 8006a42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a46:	f7fb fdaf 	bl	80025a8 <HAL_GetTick>
 8006a4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	88fa      	ldrh	r2, [r7, #6]
 8006a50:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	88fa      	ldrh	r2, [r7, #6]
 8006a58:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a64:	d108      	bne.n	8006a78 <HAL_UART_Transmit+0x84>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d104      	bne.n	8006a78 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	61bb      	str	r3, [r7, #24]
 8006a76:	e003      	b.n	8006a80 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006a88:	e02c      	b.n	8006ae4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	9300      	str	r3, [sp, #0]
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	2200      	movs	r2, #0
 8006a92:	2180      	movs	r1, #128	; 0x80
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f000 fe98 	bl	80077ca <UART_WaitOnFlagUntilTimeout>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d001      	beq.n	8006aa4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006aa0:	2303      	movs	r3, #3
 8006aa2:	e039      	b.n	8006b18 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d10b      	bne.n	8006ac2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	881b      	ldrh	r3, [r3, #0]
 8006aae:	461a      	mov	r2, r3
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ab8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	3302      	adds	r3, #2
 8006abe:	61bb      	str	r3, [r7, #24]
 8006ac0:	e007      	b.n	8006ad2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	781a      	ldrb	r2, [r3, #0]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	3301      	adds	r3, #1
 8006ad0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	3b01      	subs	r3, #1
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d1cc      	bne.n	8006a8a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	9300      	str	r3, [sp, #0]
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	2200      	movs	r2, #0
 8006af8:	2140      	movs	r1, #64	; 0x40
 8006afa:	68f8      	ldr	r0, [r7, #12]
 8006afc:	f000 fe65 	bl	80077ca <UART_WaitOnFlagUntilTimeout>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d001      	beq.n	8006b0a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006b06:	2303      	movs	r3, #3
 8006b08:	e006      	b.n	8006b18 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2220      	movs	r2, #32
 8006b0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006b12:	2300      	movs	r3, #0
 8006b14:	e000      	b.n	8006b18 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006b16:	2302      	movs	r3, #2
  }
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3720      	adds	r7, #32
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b24:	b092      	sub	sp, #72	; 0x48
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	689a      	ldr	r2, [r3, #8]
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	691b      	ldr	r3, [r3, #16]
 8006b38:	431a      	orrs	r2, r3
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	695b      	ldr	r3, [r3, #20]
 8006b3e:	431a      	orrs	r2, r3
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	69db      	ldr	r3, [r3, #28]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	4bbe      	ldr	r3, [pc, #760]	; (8006e48 <UART_SetConfig+0x328>)
 8006b50:	4013      	ands	r3, r2
 8006b52:	697a      	ldr	r2, [r7, #20]
 8006b54:	6812      	ldr	r2, [r2, #0]
 8006b56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b58:	430b      	orrs	r3, r1
 8006b5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	68da      	ldr	r2, [r3, #12]
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	430a      	orrs	r2, r1
 8006b70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4ab3      	ldr	r2, [pc, #716]	; (8006e4c <UART_SetConfig+0x32c>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d004      	beq.n	8006b8c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	6a1b      	ldr	r3, [r3, #32]
 8006b86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	689a      	ldr	r2, [r3, #8]
 8006b92:	4baf      	ldr	r3, [pc, #700]	; (8006e50 <UART_SetConfig+0x330>)
 8006b94:	4013      	ands	r3, r2
 8006b96:	697a      	ldr	r2, [r7, #20]
 8006b98:	6812      	ldr	r2, [r2, #0]
 8006b9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b9c:	430b      	orrs	r3, r1
 8006b9e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba6:	f023 010f 	bic.w	r1, r3, #15
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4aa6      	ldr	r2, [pc, #664]	; (8006e54 <UART_SetConfig+0x334>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d177      	bne.n	8006cb0 <UART_SetConfig+0x190>
 8006bc0:	4ba5      	ldr	r3, [pc, #660]	; (8006e58 <UART_SetConfig+0x338>)
 8006bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006bc8:	2b28      	cmp	r3, #40	; 0x28
 8006bca:	d86d      	bhi.n	8006ca8 <UART_SetConfig+0x188>
 8006bcc:	a201      	add	r2, pc, #4	; (adr r2, 8006bd4 <UART_SetConfig+0xb4>)
 8006bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd2:	bf00      	nop
 8006bd4:	08006c79 	.word	0x08006c79
 8006bd8:	08006ca9 	.word	0x08006ca9
 8006bdc:	08006ca9 	.word	0x08006ca9
 8006be0:	08006ca9 	.word	0x08006ca9
 8006be4:	08006ca9 	.word	0x08006ca9
 8006be8:	08006ca9 	.word	0x08006ca9
 8006bec:	08006ca9 	.word	0x08006ca9
 8006bf0:	08006ca9 	.word	0x08006ca9
 8006bf4:	08006c81 	.word	0x08006c81
 8006bf8:	08006ca9 	.word	0x08006ca9
 8006bfc:	08006ca9 	.word	0x08006ca9
 8006c00:	08006ca9 	.word	0x08006ca9
 8006c04:	08006ca9 	.word	0x08006ca9
 8006c08:	08006ca9 	.word	0x08006ca9
 8006c0c:	08006ca9 	.word	0x08006ca9
 8006c10:	08006ca9 	.word	0x08006ca9
 8006c14:	08006c89 	.word	0x08006c89
 8006c18:	08006ca9 	.word	0x08006ca9
 8006c1c:	08006ca9 	.word	0x08006ca9
 8006c20:	08006ca9 	.word	0x08006ca9
 8006c24:	08006ca9 	.word	0x08006ca9
 8006c28:	08006ca9 	.word	0x08006ca9
 8006c2c:	08006ca9 	.word	0x08006ca9
 8006c30:	08006ca9 	.word	0x08006ca9
 8006c34:	08006c91 	.word	0x08006c91
 8006c38:	08006ca9 	.word	0x08006ca9
 8006c3c:	08006ca9 	.word	0x08006ca9
 8006c40:	08006ca9 	.word	0x08006ca9
 8006c44:	08006ca9 	.word	0x08006ca9
 8006c48:	08006ca9 	.word	0x08006ca9
 8006c4c:	08006ca9 	.word	0x08006ca9
 8006c50:	08006ca9 	.word	0x08006ca9
 8006c54:	08006c99 	.word	0x08006c99
 8006c58:	08006ca9 	.word	0x08006ca9
 8006c5c:	08006ca9 	.word	0x08006ca9
 8006c60:	08006ca9 	.word	0x08006ca9
 8006c64:	08006ca9 	.word	0x08006ca9
 8006c68:	08006ca9 	.word	0x08006ca9
 8006c6c:	08006ca9 	.word	0x08006ca9
 8006c70:	08006ca9 	.word	0x08006ca9
 8006c74:	08006ca1 	.word	0x08006ca1
 8006c78:	2301      	movs	r3, #1
 8006c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c7e:	e222      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8006c80:	2304      	movs	r3, #4
 8006c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c86:	e21e      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8006c88:	2308      	movs	r3, #8
 8006c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c8e:	e21a      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8006c90:	2310      	movs	r3, #16
 8006c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c96:	e216      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8006c98:	2320      	movs	r3, #32
 8006c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c9e:	e212      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8006ca0:	2340      	movs	r3, #64	; 0x40
 8006ca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ca6:	e20e      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8006ca8:	2380      	movs	r3, #128	; 0x80
 8006caa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cae:	e20a      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a69      	ldr	r2, [pc, #420]	; (8006e5c <UART_SetConfig+0x33c>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d130      	bne.n	8006d1c <UART_SetConfig+0x1fc>
 8006cba:	4b67      	ldr	r3, [pc, #412]	; (8006e58 <UART_SetConfig+0x338>)
 8006cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cbe:	f003 0307 	and.w	r3, r3, #7
 8006cc2:	2b05      	cmp	r3, #5
 8006cc4:	d826      	bhi.n	8006d14 <UART_SetConfig+0x1f4>
 8006cc6:	a201      	add	r2, pc, #4	; (adr r2, 8006ccc <UART_SetConfig+0x1ac>)
 8006cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ccc:	08006ce5 	.word	0x08006ce5
 8006cd0:	08006ced 	.word	0x08006ced
 8006cd4:	08006cf5 	.word	0x08006cf5
 8006cd8:	08006cfd 	.word	0x08006cfd
 8006cdc:	08006d05 	.word	0x08006d05
 8006ce0:	08006d0d 	.word	0x08006d0d
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cea:	e1ec      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8006cec:	2304      	movs	r3, #4
 8006cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cf2:	e1e8      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8006cf4:	2308      	movs	r3, #8
 8006cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cfa:	e1e4      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8006cfc:	2310      	movs	r3, #16
 8006cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d02:	e1e0      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8006d04:	2320      	movs	r3, #32
 8006d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d0a:	e1dc      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8006d0c:	2340      	movs	r3, #64	; 0x40
 8006d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d12:	e1d8      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8006d14:	2380      	movs	r3, #128	; 0x80
 8006d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d1a:	e1d4      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a4f      	ldr	r2, [pc, #316]	; (8006e60 <UART_SetConfig+0x340>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d130      	bne.n	8006d88 <UART_SetConfig+0x268>
 8006d26:	4b4c      	ldr	r3, [pc, #304]	; (8006e58 <UART_SetConfig+0x338>)
 8006d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d2a:	f003 0307 	and.w	r3, r3, #7
 8006d2e:	2b05      	cmp	r3, #5
 8006d30:	d826      	bhi.n	8006d80 <UART_SetConfig+0x260>
 8006d32:	a201      	add	r2, pc, #4	; (adr r2, 8006d38 <UART_SetConfig+0x218>)
 8006d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d38:	08006d51 	.word	0x08006d51
 8006d3c:	08006d59 	.word	0x08006d59
 8006d40:	08006d61 	.word	0x08006d61
 8006d44:	08006d69 	.word	0x08006d69
 8006d48:	08006d71 	.word	0x08006d71
 8006d4c:	08006d79 	.word	0x08006d79
 8006d50:	2300      	movs	r3, #0
 8006d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d56:	e1b6      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8006d58:	2304      	movs	r3, #4
 8006d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d5e:	e1b2      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8006d60:	2308      	movs	r3, #8
 8006d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d66:	e1ae      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8006d68:	2310      	movs	r3, #16
 8006d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d6e:	e1aa      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8006d70:	2320      	movs	r3, #32
 8006d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d76:	e1a6      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8006d78:	2340      	movs	r3, #64	; 0x40
 8006d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d7e:	e1a2      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8006d80:	2380      	movs	r3, #128	; 0x80
 8006d82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d86:	e19e      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a35      	ldr	r2, [pc, #212]	; (8006e64 <UART_SetConfig+0x344>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d130      	bne.n	8006df4 <UART_SetConfig+0x2d4>
 8006d92:	4b31      	ldr	r3, [pc, #196]	; (8006e58 <UART_SetConfig+0x338>)
 8006d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d96:	f003 0307 	and.w	r3, r3, #7
 8006d9a:	2b05      	cmp	r3, #5
 8006d9c:	d826      	bhi.n	8006dec <UART_SetConfig+0x2cc>
 8006d9e:	a201      	add	r2, pc, #4	; (adr r2, 8006da4 <UART_SetConfig+0x284>)
 8006da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da4:	08006dbd 	.word	0x08006dbd
 8006da8:	08006dc5 	.word	0x08006dc5
 8006dac:	08006dcd 	.word	0x08006dcd
 8006db0:	08006dd5 	.word	0x08006dd5
 8006db4:	08006ddd 	.word	0x08006ddd
 8006db8:	08006de5 	.word	0x08006de5
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dc2:	e180      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8006dc4:	2304      	movs	r3, #4
 8006dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dca:	e17c      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8006dcc:	2308      	movs	r3, #8
 8006dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dd2:	e178      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8006dd4:	2310      	movs	r3, #16
 8006dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dda:	e174      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8006ddc:	2320      	movs	r3, #32
 8006dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006de2:	e170      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8006de4:	2340      	movs	r3, #64	; 0x40
 8006de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dea:	e16c      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8006dec:	2380      	movs	r3, #128	; 0x80
 8006dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006df2:	e168      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a1b      	ldr	r2, [pc, #108]	; (8006e68 <UART_SetConfig+0x348>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d142      	bne.n	8006e84 <UART_SetConfig+0x364>
 8006dfe:	4b16      	ldr	r3, [pc, #88]	; (8006e58 <UART_SetConfig+0x338>)
 8006e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e02:	f003 0307 	and.w	r3, r3, #7
 8006e06:	2b05      	cmp	r3, #5
 8006e08:	d838      	bhi.n	8006e7c <UART_SetConfig+0x35c>
 8006e0a:	a201      	add	r2, pc, #4	; (adr r2, 8006e10 <UART_SetConfig+0x2f0>)
 8006e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e10:	08006e29 	.word	0x08006e29
 8006e14:	08006e31 	.word	0x08006e31
 8006e18:	08006e39 	.word	0x08006e39
 8006e1c:	08006e41 	.word	0x08006e41
 8006e20:	08006e6d 	.word	0x08006e6d
 8006e24:	08006e75 	.word	0x08006e75
 8006e28:	2300      	movs	r3, #0
 8006e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e2e:	e14a      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8006e30:	2304      	movs	r3, #4
 8006e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e36:	e146      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8006e38:	2308      	movs	r3, #8
 8006e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e3e:	e142      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8006e40:	2310      	movs	r3, #16
 8006e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e46:	e13e      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8006e48:	cfff69f3 	.word	0xcfff69f3
 8006e4c:	58000c00 	.word	0x58000c00
 8006e50:	11fff4ff 	.word	0x11fff4ff
 8006e54:	40011000 	.word	0x40011000
 8006e58:	58024400 	.word	0x58024400
 8006e5c:	40004400 	.word	0x40004400
 8006e60:	40004800 	.word	0x40004800
 8006e64:	40004c00 	.word	0x40004c00
 8006e68:	40005000 	.word	0x40005000
 8006e6c:	2320      	movs	r3, #32
 8006e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e72:	e128      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8006e74:	2340      	movs	r3, #64	; 0x40
 8006e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e7a:	e124      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8006e7c:	2380      	movs	r3, #128	; 0x80
 8006e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e82:	e120      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4acb      	ldr	r2, [pc, #812]	; (80071b8 <UART_SetConfig+0x698>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d176      	bne.n	8006f7c <UART_SetConfig+0x45c>
 8006e8e:	4bcb      	ldr	r3, [pc, #812]	; (80071bc <UART_SetConfig+0x69c>)
 8006e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e96:	2b28      	cmp	r3, #40	; 0x28
 8006e98:	d86c      	bhi.n	8006f74 <UART_SetConfig+0x454>
 8006e9a:	a201      	add	r2, pc, #4	; (adr r2, 8006ea0 <UART_SetConfig+0x380>)
 8006e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea0:	08006f45 	.word	0x08006f45
 8006ea4:	08006f75 	.word	0x08006f75
 8006ea8:	08006f75 	.word	0x08006f75
 8006eac:	08006f75 	.word	0x08006f75
 8006eb0:	08006f75 	.word	0x08006f75
 8006eb4:	08006f75 	.word	0x08006f75
 8006eb8:	08006f75 	.word	0x08006f75
 8006ebc:	08006f75 	.word	0x08006f75
 8006ec0:	08006f4d 	.word	0x08006f4d
 8006ec4:	08006f75 	.word	0x08006f75
 8006ec8:	08006f75 	.word	0x08006f75
 8006ecc:	08006f75 	.word	0x08006f75
 8006ed0:	08006f75 	.word	0x08006f75
 8006ed4:	08006f75 	.word	0x08006f75
 8006ed8:	08006f75 	.word	0x08006f75
 8006edc:	08006f75 	.word	0x08006f75
 8006ee0:	08006f55 	.word	0x08006f55
 8006ee4:	08006f75 	.word	0x08006f75
 8006ee8:	08006f75 	.word	0x08006f75
 8006eec:	08006f75 	.word	0x08006f75
 8006ef0:	08006f75 	.word	0x08006f75
 8006ef4:	08006f75 	.word	0x08006f75
 8006ef8:	08006f75 	.word	0x08006f75
 8006efc:	08006f75 	.word	0x08006f75
 8006f00:	08006f5d 	.word	0x08006f5d
 8006f04:	08006f75 	.word	0x08006f75
 8006f08:	08006f75 	.word	0x08006f75
 8006f0c:	08006f75 	.word	0x08006f75
 8006f10:	08006f75 	.word	0x08006f75
 8006f14:	08006f75 	.word	0x08006f75
 8006f18:	08006f75 	.word	0x08006f75
 8006f1c:	08006f75 	.word	0x08006f75
 8006f20:	08006f65 	.word	0x08006f65
 8006f24:	08006f75 	.word	0x08006f75
 8006f28:	08006f75 	.word	0x08006f75
 8006f2c:	08006f75 	.word	0x08006f75
 8006f30:	08006f75 	.word	0x08006f75
 8006f34:	08006f75 	.word	0x08006f75
 8006f38:	08006f75 	.word	0x08006f75
 8006f3c:	08006f75 	.word	0x08006f75
 8006f40:	08006f6d 	.word	0x08006f6d
 8006f44:	2301      	movs	r3, #1
 8006f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f4a:	e0bc      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8006f4c:	2304      	movs	r3, #4
 8006f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f52:	e0b8      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8006f54:	2308      	movs	r3, #8
 8006f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f5a:	e0b4      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8006f5c:	2310      	movs	r3, #16
 8006f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f62:	e0b0      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8006f64:	2320      	movs	r3, #32
 8006f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f6a:	e0ac      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8006f6c:	2340      	movs	r3, #64	; 0x40
 8006f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f72:	e0a8      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8006f74:	2380      	movs	r3, #128	; 0x80
 8006f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f7a:	e0a4      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a8f      	ldr	r2, [pc, #572]	; (80071c0 <UART_SetConfig+0x6a0>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d130      	bne.n	8006fe8 <UART_SetConfig+0x4c8>
 8006f86:	4b8d      	ldr	r3, [pc, #564]	; (80071bc <UART_SetConfig+0x69c>)
 8006f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f8a:	f003 0307 	and.w	r3, r3, #7
 8006f8e:	2b05      	cmp	r3, #5
 8006f90:	d826      	bhi.n	8006fe0 <UART_SetConfig+0x4c0>
 8006f92:	a201      	add	r2, pc, #4	; (adr r2, 8006f98 <UART_SetConfig+0x478>)
 8006f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f98:	08006fb1 	.word	0x08006fb1
 8006f9c:	08006fb9 	.word	0x08006fb9
 8006fa0:	08006fc1 	.word	0x08006fc1
 8006fa4:	08006fc9 	.word	0x08006fc9
 8006fa8:	08006fd1 	.word	0x08006fd1
 8006fac:	08006fd9 	.word	0x08006fd9
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fb6:	e086      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8006fb8:	2304      	movs	r3, #4
 8006fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fbe:	e082      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8006fc0:	2308      	movs	r3, #8
 8006fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fc6:	e07e      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8006fc8:	2310      	movs	r3, #16
 8006fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fce:	e07a      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8006fd0:	2320      	movs	r3, #32
 8006fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fd6:	e076      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8006fd8:	2340      	movs	r3, #64	; 0x40
 8006fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fde:	e072      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8006fe0:	2380      	movs	r3, #128	; 0x80
 8006fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fe6:	e06e      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a75      	ldr	r2, [pc, #468]	; (80071c4 <UART_SetConfig+0x6a4>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d130      	bne.n	8007054 <UART_SetConfig+0x534>
 8006ff2:	4b72      	ldr	r3, [pc, #456]	; (80071bc <UART_SetConfig+0x69c>)
 8006ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ff6:	f003 0307 	and.w	r3, r3, #7
 8006ffa:	2b05      	cmp	r3, #5
 8006ffc:	d826      	bhi.n	800704c <UART_SetConfig+0x52c>
 8006ffe:	a201      	add	r2, pc, #4	; (adr r2, 8007004 <UART_SetConfig+0x4e4>)
 8007000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007004:	0800701d 	.word	0x0800701d
 8007008:	08007025 	.word	0x08007025
 800700c:	0800702d 	.word	0x0800702d
 8007010:	08007035 	.word	0x08007035
 8007014:	0800703d 	.word	0x0800703d
 8007018:	08007045 	.word	0x08007045
 800701c:	2300      	movs	r3, #0
 800701e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007022:	e050      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8007024:	2304      	movs	r3, #4
 8007026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800702a:	e04c      	b.n	80070c6 <UART_SetConfig+0x5a6>
 800702c:	2308      	movs	r3, #8
 800702e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007032:	e048      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8007034:	2310      	movs	r3, #16
 8007036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800703a:	e044      	b.n	80070c6 <UART_SetConfig+0x5a6>
 800703c:	2320      	movs	r3, #32
 800703e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007042:	e040      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8007044:	2340      	movs	r3, #64	; 0x40
 8007046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800704a:	e03c      	b.n	80070c6 <UART_SetConfig+0x5a6>
 800704c:	2380      	movs	r3, #128	; 0x80
 800704e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007052:	e038      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a5b      	ldr	r2, [pc, #364]	; (80071c8 <UART_SetConfig+0x6a8>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d130      	bne.n	80070c0 <UART_SetConfig+0x5a0>
 800705e:	4b57      	ldr	r3, [pc, #348]	; (80071bc <UART_SetConfig+0x69c>)
 8007060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007062:	f003 0307 	and.w	r3, r3, #7
 8007066:	2b05      	cmp	r3, #5
 8007068:	d826      	bhi.n	80070b8 <UART_SetConfig+0x598>
 800706a:	a201      	add	r2, pc, #4	; (adr r2, 8007070 <UART_SetConfig+0x550>)
 800706c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007070:	08007089 	.word	0x08007089
 8007074:	08007091 	.word	0x08007091
 8007078:	08007099 	.word	0x08007099
 800707c:	080070a1 	.word	0x080070a1
 8007080:	080070a9 	.word	0x080070a9
 8007084:	080070b1 	.word	0x080070b1
 8007088:	2302      	movs	r3, #2
 800708a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800708e:	e01a      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8007090:	2304      	movs	r3, #4
 8007092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007096:	e016      	b.n	80070c6 <UART_SetConfig+0x5a6>
 8007098:	2308      	movs	r3, #8
 800709a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800709e:	e012      	b.n	80070c6 <UART_SetConfig+0x5a6>
 80070a0:	2310      	movs	r3, #16
 80070a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070a6:	e00e      	b.n	80070c6 <UART_SetConfig+0x5a6>
 80070a8:	2320      	movs	r3, #32
 80070aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070ae:	e00a      	b.n	80070c6 <UART_SetConfig+0x5a6>
 80070b0:	2340      	movs	r3, #64	; 0x40
 80070b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070b6:	e006      	b.n	80070c6 <UART_SetConfig+0x5a6>
 80070b8:	2380      	movs	r3, #128	; 0x80
 80070ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070be:	e002      	b.n	80070c6 <UART_SetConfig+0x5a6>
 80070c0:	2380      	movs	r3, #128	; 0x80
 80070c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a3f      	ldr	r2, [pc, #252]	; (80071c8 <UART_SetConfig+0x6a8>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	f040 80f8 	bne.w	80072c2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80070d2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80070d6:	2b20      	cmp	r3, #32
 80070d8:	dc46      	bgt.n	8007168 <UART_SetConfig+0x648>
 80070da:	2b02      	cmp	r3, #2
 80070dc:	f2c0 8082 	blt.w	80071e4 <UART_SetConfig+0x6c4>
 80070e0:	3b02      	subs	r3, #2
 80070e2:	2b1e      	cmp	r3, #30
 80070e4:	d87e      	bhi.n	80071e4 <UART_SetConfig+0x6c4>
 80070e6:	a201      	add	r2, pc, #4	; (adr r2, 80070ec <UART_SetConfig+0x5cc>)
 80070e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ec:	0800716f 	.word	0x0800716f
 80070f0:	080071e5 	.word	0x080071e5
 80070f4:	08007177 	.word	0x08007177
 80070f8:	080071e5 	.word	0x080071e5
 80070fc:	080071e5 	.word	0x080071e5
 8007100:	080071e5 	.word	0x080071e5
 8007104:	08007187 	.word	0x08007187
 8007108:	080071e5 	.word	0x080071e5
 800710c:	080071e5 	.word	0x080071e5
 8007110:	080071e5 	.word	0x080071e5
 8007114:	080071e5 	.word	0x080071e5
 8007118:	080071e5 	.word	0x080071e5
 800711c:	080071e5 	.word	0x080071e5
 8007120:	080071e5 	.word	0x080071e5
 8007124:	08007197 	.word	0x08007197
 8007128:	080071e5 	.word	0x080071e5
 800712c:	080071e5 	.word	0x080071e5
 8007130:	080071e5 	.word	0x080071e5
 8007134:	080071e5 	.word	0x080071e5
 8007138:	080071e5 	.word	0x080071e5
 800713c:	080071e5 	.word	0x080071e5
 8007140:	080071e5 	.word	0x080071e5
 8007144:	080071e5 	.word	0x080071e5
 8007148:	080071e5 	.word	0x080071e5
 800714c:	080071e5 	.word	0x080071e5
 8007150:	080071e5 	.word	0x080071e5
 8007154:	080071e5 	.word	0x080071e5
 8007158:	080071e5 	.word	0x080071e5
 800715c:	080071e5 	.word	0x080071e5
 8007160:	080071e5 	.word	0x080071e5
 8007164:	080071d7 	.word	0x080071d7
 8007168:	2b40      	cmp	r3, #64	; 0x40
 800716a:	d037      	beq.n	80071dc <UART_SetConfig+0x6bc>
 800716c:	e03a      	b.n	80071e4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800716e:	f7fe ffcf 	bl	8006110 <HAL_RCCEx_GetD3PCLK1Freq>
 8007172:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007174:	e03c      	b.n	80071f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800717a:	4618      	mov	r0, r3
 800717c:	f7fe ffde 	bl	800613c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007182:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007184:	e034      	b.n	80071f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007186:	f107 0318 	add.w	r3, r7, #24
 800718a:	4618      	mov	r0, r3
 800718c:	f7ff f92a 	bl	80063e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007194:	e02c      	b.n	80071f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007196:	4b09      	ldr	r3, [pc, #36]	; (80071bc <UART_SetConfig+0x69c>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 0320 	and.w	r3, r3, #32
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d016      	beq.n	80071d0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80071a2:	4b06      	ldr	r3, [pc, #24]	; (80071bc <UART_SetConfig+0x69c>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	08db      	lsrs	r3, r3, #3
 80071a8:	f003 0303 	and.w	r3, r3, #3
 80071ac:	4a07      	ldr	r2, [pc, #28]	; (80071cc <UART_SetConfig+0x6ac>)
 80071ae:	fa22 f303 	lsr.w	r3, r2, r3
 80071b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80071b4:	e01c      	b.n	80071f0 <UART_SetConfig+0x6d0>
 80071b6:	bf00      	nop
 80071b8:	40011400 	.word	0x40011400
 80071bc:	58024400 	.word	0x58024400
 80071c0:	40007800 	.word	0x40007800
 80071c4:	40007c00 	.word	0x40007c00
 80071c8:	58000c00 	.word	0x58000c00
 80071cc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80071d0:	4b9d      	ldr	r3, [pc, #628]	; (8007448 <UART_SetConfig+0x928>)
 80071d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071d4:	e00c      	b.n	80071f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80071d6:	4b9d      	ldr	r3, [pc, #628]	; (800744c <UART_SetConfig+0x92c>)
 80071d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071da:	e009      	b.n	80071f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071e2:	e005      	b.n	80071f0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80071e4:	2300      	movs	r3, #0
 80071e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80071ee:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80071f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f000 81de 	beq.w	80075b4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fc:	4a94      	ldr	r2, [pc, #592]	; (8007450 <UART_SetConfig+0x930>)
 80071fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007202:	461a      	mov	r2, r3
 8007204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007206:	fbb3 f3f2 	udiv	r3, r3, r2
 800720a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	685a      	ldr	r2, [r3, #4]
 8007210:	4613      	mov	r3, r2
 8007212:	005b      	lsls	r3, r3, #1
 8007214:	4413      	add	r3, r2
 8007216:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007218:	429a      	cmp	r2, r3
 800721a:	d305      	bcc.n	8007228 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007222:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007224:	429a      	cmp	r2, r3
 8007226:	d903      	bls.n	8007230 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800722e:	e1c1      	b.n	80075b4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007232:	2200      	movs	r2, #0
 8007234:	60bb      	str	r3, [r7, #8]
 8007236:	60fa      	str	r2, [r7, #12]
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723c:	4a84      	ldr	r2, [pc, #528]	; (8007450 <UART_SetConfig+0x930>)
 800723e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007242:	b29b      	uxth	r3, r3
 8007244:	2200      	movs	r2, #0
 8007246:	603b      	str	r3, [r7, #0]
 8007248:	607a      	str	r2, [r7, #4]
 800724a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800724e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007252:	f7f9 f89d 	bl	8000390 <__aeabi_uldivmod>
 8007256:	4602      	mov	r2, r0
 8007258:	460b      	mov	r3, r1
 800725a:	4610      	mov	r0, r2
 800725c:	4619      	mov	r1, r3
 800725e:	f04f 0200 	mov.w	r2, #0
 8007262:	f04f 0300 	mov.w	r3, #0
 8007266:	020b      	lsls	r3, r1, #8
 8007268:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800726c:	0202      	lsls	r2, r0, #8
 800726e:	6979      	ldr	r1, [r7, #20]
 8007270:	6849      	ldr	r1, [r1, #4]
 8007272:	0849      	lsrs	r1, r1, #1
 8007274:	2000      	movs	r0, #0
 8007276:	460c      	mov	r4, r1
 8007278:	4605      	mov	r5, r0
 800727a:	eb12 0804 	adds.w	r8, r2, r4
 800727e:	eb43 0905 	adc.w	r9, r3, r5
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	469a      	mov	sl, r3
 800728a:	4693      	mov	fp, r2
 800728c:	4652      	mov	r2, sl
 800728e:	465b      	mov	r3, fp
 8007290:	4640      	mov	r0, r8
 8007292:	4649      	mov	r1, r9
 8007294:	f7f9 f87c 	bl	8000390 <__aeabi_uldivmod>
 8007298:	4602      	mov	r2, r0
 800729a:	460b      	mov	r3, r1
 800729c:	4613      	mov	r3, r2
 800729e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80072a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072a6:	d308      	bcc.n	80072ba <UART_SetConfig+0x79a>
 80072a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072ae:	d204      	bcs.n	80072ba <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072b6:	60da      	str	r2, [r3, #12]
 80072b8:	e17c      	b.n	80075b4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80072c0:	e178      	b.n	80075b4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	69db      	ldr	r3, [r3, #28]
 80072c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072ca:	f040 80c5 	bne.w	8007458 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80072ce:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80072d2:	2b20      	cmp	r3, #32
 80072d4:	dc48      	bgt.n	8007368 <UART_SetConfig+0x848>
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	db7b      	blt.n	80073d2 <UART_SetConfig+0x8b2>
 80072da:	2b20      	cmp	r3, #32
 80072dc:	d879      	bhi.n	80073d2 <UART_SetConfig+0x8b2>
 80072de:	a201      	add	r2, pc, #4	; (adr r2, 80072e4 <UART_SetConfig+0x7c4>)
 80072e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e4:	0800736f 	.word	0x0800736f
 80072e8:	08007377 	.word	0x08007377
 80072ec:	080073d3 	.word	0x080073d3
 80072f0:	080073d3 	.word	0x080073d3
 80072f4:	0800737f 	.word	0x0800737f
 80072f8:	080073d3 	.word	0x080073d3
 80072fc:	080073d3 	.word	0x080073d3
 8007300:	080073d3 	.word	0x080073d3
 8007304:	0800738f 	.word	0x0800738f
 8007308:	080073d3 	.word	0x080073d3
 800730c:	080073d3 	.word	0x080073d3
 8007310:	080073d3 	.word	0x080073d3
 8007314:	080073d3 	.word	0x080073d3
 8007318:	080073d3 	.word	0x080073d3
 800731c:	080073d3 	.word	0x080073d3
 8007320:	080073d3 	.word	0x080073d3
 8007324:	0800739f 	.word	0x0800739f
 8007328:	080073d3 	.word	0x080073d3
 800732c:	080073d3 	.word	0x080073d3
 8007330:	080073d3 	.word	0x080073d3
 8007334:	080073d3 	.word	0x080073d3
 8007338:	080073d3 	.word	0x080073d3
 800733c:	080073d3 	.word	0x080073d3
 8007340:	080073d3 	.word	0x080073d3
 8007344:	080073d3 	.word	0x080073d3
 8007348:	080073d3 	.word	0x080073d3
 800734c:	080073d3 	.word	0x080073d3
 8007350:	080073d3 	.word	0x080073d3
 8007354:	080073d3 	.word	0x080073d3
 8007358:	080073d3 	.word	0x080073d3
 800735c:	080073d3 	.word	0x080073d3
 8007360:	080073d3 	.word	0x080073d3
 8007364:	080073c5 	.word	0x080073c5
 8007368:	2b40      	cmp	r3, #64	; 0x40
 800736a:	d02e      	beq.n	80073ca <UART_SetConfig+0x8aa>
 800736c:	e031      	b.n	80073d2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800736e:	f7fd ff5d 	bl	800522c <HAL_RCC_GetPCLK1Freq>
 8007372:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007374:	e033      	b.n	80073de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007376:	f7fd ff6f 	bl	8005258 <HAL_RCC_GetPCLK2Freq>
 800737a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800737c:	e02f      	b.n	80073de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800737e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007382:	4618      	mov	r0, r3
 8007384:	f7fe feda 	bl	800613c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800738a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800738c:	e027      	b.n	80073de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800738e:	f107 0318 	add.w	r3, r7, #24
 8007392:	4618      	mov	r0, r3
 8007394:	f7ff f826 	bl	80063e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800739c:	e01f      	b.n	80073de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800739e:	4b2d      	ldr	r3, [pc, #180]	; (8007454 <UART_SetConfig+0x934>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f003 0320 	and.w	r3, r3, #32
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d009      	beq.n	80073be <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80073aa:	4b2a      	ldr	r3, [pc, #168]	; (8007454 <UART_SetConfig+0x934>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	08db      	lsrs	r3, r3, #3
 80073b0:	f003 0303 	and.w	r3, r3, #3
 80073b4:	4a24      	ldr	r2, [pc, #144]	; (8007448 <UART_SetConfig+0x928>)
 80073b6:	fa22 f303 	lsr.w	r3, r2, r3
 80073ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80073bc:	e00f      	b.n	80073de <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80073be:	4b22      	ldr	r3, [pc, #136]	; (8007448 <UART_SetConfig+0x928>)
 80073c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073c2:	e00c      	b.n	80073de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80073c4:	4b21      	ldr	r3, [pc, #132]	; (800744c <UART_SetConfig+0x92c>)
 80073c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073c8:	e009      	b.n	80073de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073d0:	e005      	b.n	80073de <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80073d2:	2300      	movs	r3, #0
 80073d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80073dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80073de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	f000 80e7 	beq.w	80075b4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ea:	4a19      	ldr	r2, [pc, #100]	; (8007450 <UART_SetConfig+0x930>)
 80073ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073f0:	461a      	mov	r2, r3
 80073f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80073f8:	005a      	lsls	r2, r3, #1
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	085b      	lsrs	r3, r3, #1
 8007400:	441a      	add	r2, r3
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	fbb2 f3f3 	udiv	r3, r2, r3
 800740a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800740c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740e:	2b0f      	cmp	r3, #15
 8007410:	d916      	bls.n	8007440 <UART_SetConfig+0x920>
 8007412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007418:	d212      	bcs.n	8007440 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800741a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741c:	b29b      	uxth	r3, r3
 800741e:	f023 030f 	bic.w	r3, r3, #15
 8007422:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007426:	085b      	lsrs	r3, r3, #1
 8007428:	b29b      	uxth	r3, r3
 800742a:	f003 0307 	and.w	r3, r3, #7
 800742e:	b29a      	uxth	r2, r3
 8007430:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007432:	4313      	orrs	r3, r2
 8007434:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800743c:	60da      	str	r2, [r3, #12]
 800743e:	e0b9      	b.n	80075b4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007446:	e0b5      	b.n	80075b4 <UART_SetConfig+0xa94>
 8007448:	03d09000 	.word	0x03d09000
 800744c:	003d0900 	.word	0x003d0900
 8007450:	0800ba54 	.word	0x0800ba54
 8007454:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007458:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800745c:	2b20      	cmp	r3, #32
 800745e:	dc49      	bgt.n	80074f4 <UART_SetConfig+0x9d4>
 8007460:	2b00      	cmp	r3, #0
 8007462:	db7c      	blt.n	800755e <UART_SetConfig+0xa3e>
 8007464:	2b20      	cmp	r3, #32
 8007466:	d87a      	bhi.n	800755e <UART_SetConfig+0xa3e>
 8007468:	a201      	add	r2, pc, #4	; (adr r2, 8007470 <UART_SetConfig+0x950>)
 800746a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800746e:	bf00      	nop
 8007470:	080074fb 	.word	0x080074fb
 8007474:	08007503 	.word	0x08007503
 8007478:	0800755f 	.word	0x0800755f
 800747c:	0800755f 	.word	0x0800755f
 8007480:	0800750b 	.word	0x0800750b
 8007484:	0800755f 	.word	0x0800755f
 8007488:	0800755f 	.word	0x0800755f
 800748c:	0800755f 	.word	0x0800755f
 8007490:	0800751b 	.word	0x0800751b
 8007494:	0800755f 	.word	0x0800755f
 8007498:	0800755f 	.word	0x0800755f
 800749c:	0800755f 	.word	0x0800755f
 80074a0:	0800755f 	.word	0x0800755f
 80074a4:	0800755f 	.word	0x0800755f
 80074a8:	0800755f 	.word	0x0800755f
 80074ac:	0800755f 	.word	0x0800755f
 80074b0:	0800752b 	.word	0x0800752b
 80074b4:	0800755f 	.word	0x0800755f
 80074b8:	0800755f 	.word	0x0800755f
 80074bc:	0800755f 	.word	0x0800755f
 80074c0:	0800755f 	.word	0x0800755f
 80074c4:	0800755f 	.word	0x0800755f
 80074c8:	0800755f 	.word	0x0800755f
 80074cc:	0800755f 	.word	0x0800755f
 80074d0:	0800755f 	.word	0x0800755f
 80074d4:	0800755f 	.word	0x0800755f
 80074d8:	0800755f 	.word	0x0800755f
 80074dc:	0800755f 	.word	0x0800755f
 80074e0:	0800755f 	.word	0x0800755f
 80074e4:	0800755f 	.word	0x0800755f
 80074e8:	0800755f 	.word	0x0800755f
 80074ec:	0800755f 	.word	0x0800755f
 80074f0:	08007551 	.word	0x08007551
 80074f4:	2b40      	cmp	r3, #64	; 0x40
 80074f6:	d02e      	beq.n	8007556 <UART_SetConfig+0xa36>
 80074f8:	e031      	b.n	800755e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074fa:	f7fd fe97 	bl	800522c <HAL_RCC_GetPCLK1Freq>
 80074fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007500:	e033      	b.n	800756a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007502:	f7fd fea9 	bl	8005258 <HAL_RCC_GetPCLK2Freq>
 8007506:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007508:	e02f      	b.n	800756a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800750a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800750e:	4618      	mov	r0, r3
 8007510:	f7fe fe14 	bl	800613c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007516:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007518:	e027      	b.n	800756a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800751a:	f107 0318 	add.w	r3, r7, #24
 800751e:	4618      	mov	r0, r3
 8007520:	f7fe ff60 	bl	80063e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007528:	e01f      	b.n	800756a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800752a:	4b2d      	ldr	r3, [pc, #180]	; (80075e0 <UART_SetConfig+0xac0>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 0320 	and.w	r3, r3, #32
 8007532:	2b00      	cmp	r3, #0
 8007534:	d009      	beq.n	800754a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007536:	4b2a      	ldr	r3, [pc, #168]	; (80075e0 <UART_SetConfig+0xac0>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	08db      	lsrs	r3, r3, #3
 800753c:	f003 0303 	and.w	r3, r3, #3
 8007540:	4a28      	ldr	r2, [pc, #160]	; (80075e4 <UART_SetConfig+0xac4>)
 8007542:	fa22 f303 	lsr.w	r3, r2, r3
 8007546:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007548:	e00f      	b.n	800756a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800754a:	4b26      	ldr	r3, [pc, #152]	; (80075e4 <UART_SetConfig+0xac4>)
 800754c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800754e:	e00c      	b.n	800756a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007550:	4b25      	ldr	r3, [pc, #148]	; (80075e8 <UART_SetConfig+0xac8>)
 8007552:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007554:	e009      	b.n	800756a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800755a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800755c:	e005      	b.n	800756a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800755e:	2300      	movs	r3, #0
 8007560:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007568:	bf00      	nop
    }

    if (pclk != 0U)
 800756a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800756c:	2b00      	cmp	r3, #0
 800756e:	d021      	beq.n	80075b4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007574:	4a1d      	ldr	r2, [pc, #116]	; (80075ec <UART_SetConfig+0xacc>)
 8007576:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800757a:	461a      	mov	r2, r3
 800757c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800757e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	085b      	lsrs	r3, r3, #1
 8007588:	441a      	add	r2, r3
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007592:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007596:	2b0f      	cmp	r3, #15
 8007598:	d909      	bls.n	80075ae <UART_SetConfig+0xa8e>
 800759a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800759c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075a0:	d205      	bcs.n	80075ae <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80075a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	60da      	str	r2, [r3, #12]
 80075ac:	e002      	b.n	80075b4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	2201      	movs	r2, #1
 80075c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	2200      	movs	r2, #0
 80075c8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	2200      	movs	r2, #0
 80075ce:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80075d0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3748      	adds	r7, #72	; 0x48
 80075d8:	46bd      	mov	sp, r7
 80075da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075de:	bf00      	nop
 80075e0:	58024400 	.word	0x58024400
 80075e4:	03d09000 	.word	0x03d09000
 80075e8:	003d0900 	.word	0x003d0900
 80075ec:	0800ba54 	.word	0x0800ba54

080075f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075fc:	f003 0301 	and.w	r3, r3, #1
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00a      	beq.n	800761a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	430a      	orrs	r2, r1
 8007618:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800761e:	f003 0302 	and.w	r3, r3, #2
 8007622:	2b00      	cmp	r3, #0
 8007624:	d00a      	beq.n	800763c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	430a      	orrs	r2, r1
 800763a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007640:	f003 0304 	and.w	r3, r3, #4
 8007644:	2b00      	cmp	r3, #0
 8007646:	d00a      	beq.n	800765e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	430a      	orrs	r2, r1
 800765c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007662:	f003 0308 	and.w	r3, r3, #8
 8007666:	2b00      	cmp	r3, #0
 8007668:	d00a      	beq.n	8007680 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	430a      	orrs	r2, r1
 800767e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007684:	f003 0310 	and.w	r3, r3, #16
 8007688:	2b00      	cmp	r3, #0
 800768a:	d00a      	beq.n	80076a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	430a      	orrs	r2, r1
 80076a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a6:	f003 0320 	and.w	r3, r3, #32
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00a      	beq.n	80076c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	430a      	orrs	r2, r1
 80076c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d01a      	beq.n	8007706 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	430a      	orrs	r2, r1
 80076e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076ee:	d10a      	bne.n	8007706 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	430a      	orrs	r2, r1
 8007704:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800770a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800770e:	2b00      	cmp	r3, #0
 8007710:	d00a      	beq.n	8007728 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	430a      	orrs	r2, r1
 8007726:	605a      	str	r2, [r3, #4]
  }
}
 8007728:	bf00      	nop
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b086      	sub	sp, #24
 8007738:	af02      	add	r7, sp, #8
 800773a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007744:	f7fa ff30 	bl	80025a8 <HAL_GetTick>
 8007748:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 0308 	and.w	r3, r3, #8
 8007754:	2b08      	cmp	r3, #8
 8007756:	d10e      	bne.n	8007776 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007758:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800775c:	9300      	str	r3, [sp, #0]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2200      	movs	r2, #0
 8007762:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 f82f 	bl	80077ca <UART_WaitOnFlagUntilTimeout>
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d001      	beq.n	8007776 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	e025      	b.n	80077c2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f003 0304 	and.w	r3, r3, #4
 8007780:	2b04      	cmp	r3, #4
 8007782:	d10e      	bne.n	80077a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007784:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007788:	9300      	str	r3, [sp, #0]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2200      	movs	r2, #0
 800778e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 f819 	bl	80077ca <UART_WaitOnFlagUntilTimeout>
 8007798:	4603      	mov	r3, r0
 800779a:	2b00      	cmp	r3, #0
 800779c:	d001      	beq.n	80077a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800779e:	2303      	movs	r3, #3
 80077a0:	e00f      	b.n	80077c2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2220      	movs	r2, #32
 80077a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2220      	movs	r2, #32
 80077ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}

080077ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80077ca:	b580      	push	{r7, lr}
 80077cc:	b09c      	sub	sp, #112	; 0x70
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	60f8      	str	r0, [r7, #12]
 80077d2:	60b9      	str	r1, [r7, #8]
 80077d4:	603b      	str	r3, [r7, #0]
 80077d6:	4613      	mov	r3, r2
 80077d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077da:	e0a9      	b.n	8007930 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077e2:	f000 80a5 	beq.w	8007930 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077e6:	f7fa fedf 	bl	80025a8 <HAL_GetTick>
 80077ea:	4602      	mov	r2, r0
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	1ad3      	subs	r3, r2, r3
 80077f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d302      	bcc.n	80077fc <UART_WaitOnFlagUntilTimeout+0x32>
 80077f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d140      	bne.n	800787e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007802:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007804:	e853 3f00 	ldrex	r3, [r3]
 8007808:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800780a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800780c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007810:	667b      	str	r3, [r7, #100]	; 0x64
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	461a      	mov	r2, r3
 8007818:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800781a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800781c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800781e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007820:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007822:	e841 2300 	strex	r3, r2, [r1]
 8007826:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007828:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800782a:	2b00      	cmp	r3, #0
 800782c:	d1e6      	bne.n	80077fc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	3308      	adds	r3, #8
 8007834:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007838:	e853 3f00 	ldrex	r3, [r3]
 800783c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800783e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007840:	f023 0301 	bic.w	r3, r3, #1
 8007844:	663b      	str	r3, [r7, #96]	; 0x60
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	3308      	adds	r3, #8
 800784c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800784e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007850:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007852:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007854:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007856:	e841 2300 	strex	r3, r2, [r1]
 800785a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800785c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800785e:	2b00      	cmp	r3, #0
 8007860:	d1e5      	bne.n	800782e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2220      	movs	r2, #32
 8007866:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2220      	movs	r2, #32
 800786e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2200      	movs	r2, #0
 8007876:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800787a:	2303      	movs	r3, #3
 800787c:	e069      	b.n	8007952 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f003 0304 	and.w	r3, r3, #4
 8007888:	2b00      	cmp	r3, #0
 800788a:	d051      	beq.n	8007930 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	69db      	ldr	r3, [r3, #28]
 8007892:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007896:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800789a:	d149      	bne.n	8007930 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078a4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ae:	e853 3f00 	ldrex	r3, [r3]
 80078b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80078ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	461a      	mov	r2, r3
 80078c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078c4:	637b      	str	r3, [r7, #52]	; 0x34
 80078c6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078cc:	e841 2300 	strex	r3, r2, [r1]
 80078d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80078d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d1e6      	bne.n	80078a6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	3308      	adds	r3, #8
 80078de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	e853 3f00 	ldrex	r3, [r3]
 80078e6:	613b      	str	r3, [r7, #16]
   return(result);
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	f023 0301 	bic.w	r3, r3, #1
 80078ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	3308      	adds	r3, #8
 80078f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80078f8:	623a      	str	r2, [r7, #32]
 80078fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078fc:	69f9      	ldr	r1, [r7, #28]
 80078fe:	6a3a      	ldr	r2, [r7, #32]
 8007900:	e841 2300 	strex	r3, r2, [r1]
 8007904:	61bb      	str	r3, [r7, #24]
   return(result);
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d1e5      	bne.n	80078d8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2220      	movs	r2, #32
 8007910:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2220      	movs	r2, #32
 8007918:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2220      	movs	r2, #32
 8007920:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2200      	movs	r2, #0
 8007928:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800792c:	2303      	movs	r3, #3
 800792e:	e010      	b.n	8007952 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	69da      	ldr	r2, [r3, #28]
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	4013      	ands	r3, r2
 800793a:	68ba      	ldr	r2, [r7, #8]
 800793c:	429a      	cmp	r2, r3
 800793e:	bf0c      	ite	eq
 8007940:	2301      	moveq	r3, #1
 8007942:	2300      	movne	r3, #0
 8007944:	b2db      	uxtb	r3, r3
 8007946:	461a      	mov	r2, r3
 8007948:	79fb      	ldrb	r3, [r7, #7]
 800794a:	429a      	cmp	r2, r3
 800794c:	f43f af46 	beq.w	80077dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007950:	2300      	movs	r3, #0
}
 8007952:	4618      	mov	r0, r3
 8007954:	3770      	adds	r7, #112	; 0x70
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}

0800795a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800795a:	b480      	push	{r7}
 800795c:	b085      	sub	sp, #20
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007968:	2b01      	cmp	r3, #1
 800796a:	d101      	bne.n	8007970 <HAL_UARTEx_DisableFifoMode+0x16>
 800796c:	2302      	movs	r3, #2
 800796e:	e027      	b.n	80079c0 <HAL_UARTEx_DisableFifoMode+0x66>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2224      	movs	r2, #36	; 0x24
 800797c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f022 0201 	bic.w	r2, r2, #1
 8007996:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800799e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	68fa      	ldr	r2, [r7, #12]
 80079ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2220      	movs	r2, #32
 80079b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80079be:	2300      	movs	r3, #0
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3714      	adds	r7, #20
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d101      	bne.n	80079e4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80079e0:	2302      	movs	r3, #2
 80079e2:	e02d      	b.n	8007a40 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2201      	movs	r2, #1
 80079e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2224      	movs	r2, #36	; 0x24
 80079f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f022 0201 	bic.w	r2, r2, #1
 8007a0a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	683a      	ldr	r2, [r7, #0]
 8007a1c:	430a      	orrs	r2, r1
 8007a1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 f84f 	bl	8007ac4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2220      	movs	r2, #32
 8007a32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007a3e:	2300      	movs	r3, #0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3710      	adds	r7, #16
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d101      	bne.n	8007a60 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007a5c:	2302      	movs	r3, #2
 8007a5e:	e02d      	b.n	8007abc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2224      	movs	r2, #36	; 0x24
 8007a6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f022 0201 	bic.w	r2, r2, #1
 8007a86:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	683a      	ldr	r2, [r7, #0]
 8007a98:	430a      	orrs	r2, r1
 8007a9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 f811 	bl	8007ac4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	68fa      	ldr	r2, [r7, #12]
 8007aa8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2220      	movs	r2, #32
 8007aae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3710      	adds	r7, #16
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b085      	sub	sp, #20
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d108      	bne.n	8007ae6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007ae4:	e031      	b.n	8007b4a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007ae6:	2310      	movs	r3, #16
 8007ae8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007aea:	2310      	movs	r3, #16
 8007aec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	0e5b      	lsrs	r3, r3, #25
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	f003 0307 	and.w	r3, r3, #7
 8007afc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	0f5b      	lsrs	r3, r3, #29
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	f003 0307 	and.w	r3, r3, #7
 8007b0c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b0e:	7bbb      	ldrb	r3, [r7, #14]
 8007b10:	7b3a      	ldrb	r2, [r7, #12]
 8007b12:	4911      	ldr	r1, [pc, #68]	; (8007b58 <UARTEx_SetNbDataToProcess+0x94>)
 8007b14:	5c8a      	ldrb	r2, [r1, r2]
 8007b16:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007b1a:	7b3a      	ldrb	r2, [r7, #12]
 8007b1c:	490f      	ldr	r1, [pc, #60]	; (8007b5c <UARTEx_SetNbDataToProcess+0x98>)
 8007b1e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b20:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b24:	b29a      	uxth	r2, r3
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b2c:	7bfb      	ldrb	r3, [r7, #15]
 8007b2e:	7b7a      	ldrb	r2, [r7, #13]
 8007b30:	4909      	ldr	r1, [pc, #36]	; (8007b58 <UARTEx_SetNbDataToProcess+0x94>)
 8007b32:	5c8a      	ldrb	r2, [r1, r2]
 8007b34:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007b38:	7b7a      	ldrb	r2, [r7, #13]
 8007b3a:	4908      	ldr	r1, [pc, #32]	; (8007b5c <UARTEx_SetNbDataToProcess+0x98>)
 8007b3c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b3e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b42:	b29a      	uxth	r2, r3
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007b4a:	bf00      	nop
 8007b4c:	3714      	adds	r7, #20
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr
 8007b56:	bf00      	nop
 8007b58:	0800ba6c 	.word	0x0800ba6c
 8007b5c:	0800ba74 	.word	0x0800ba74

08007b60 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b60:	b084      	sub	sp, #16
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b084      	sub	sp, #16
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
 8007b6a:	f107 001c 	add.w	r0, r7, #28
 8007b6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d120      	bne.n	8007bba <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	68da      	ldr	r2, [r3, #12]
 8007b88:	4b2a      	ldr	r3, [pc, #168]	; (8007c34 <USB_CoreInit+0xd4>)
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d105      	bne.n	8007bae <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 faac 	bl	800810c <USB_CoreReset>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	73fb      	strb	r3, [r7, #15]
 8007bb8:	e01a      	b.n	8007bf0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 faa0 	bl	800810c <USB_CoreReset>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007bd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d106      	bne.n	8007be4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bda:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	639a      	str	r2, [r3, #56]	; 0x38
 8007be2:	e005      	b.n	8007bf0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d116      	bne.n	8007c24 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007c04:	4b0c      	ldr	r3, [pc, #48]	; (8007c38 <USB_CoreInit+0xd8>)
 8007c06:	4313      	orrs	r3, r2
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	f043 0206 	orr.w	r2, r3, #6
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	f043 0220 	orr.w	r2, r3, #32
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3710      	adds	r7, #16
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c30:	b004      	add	sp, #16
 8007c32:	4770      	bx	lr
 8007c34:	ffbdffbf 	.word	0xffbdffbf
 8007c38:	03ee0000 	.word	0x03ee0000

08007c3c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	f023 0201 	bic.w	r2, r3, #1
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	370c      	adds	r7, #12
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr

08007c5e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b084      	sub	sp, #16
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
 8007c66:	460b      	mov	r3, r1
 8007c68:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007c7a:	78fb      	ldrb	r3, [r7, #3]
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d115      	bne.n	8007cac <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007c8c:	2001      	movs	r0, #1
 8007c8e:	f7fa fc97 	bl	80025c0 <HAL_Delay>
      ms++;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	3301      	adds	r3, #1
 8007c96:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 fa29 	bl	80080f0 <USB_GetMode>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d01e      	beq.n	8007ce2 <USB_SetCurrentMode+0x84>
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2b31      	cmp	r3, #49	; 0x31
 8007ca8:	d9f0      	bls.n	8007c8c <USB_SetCurrentMode+0x2e>
 8007caa:	e01a      	b.n	8007ce2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007cac:	78fb      	ldrb	r3, [r7, #3]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d115      	bne.n	8007cde <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007cbe:	2001      	movs	r0, #1
 8007cc0:	f7fa fc7e 	bl	80025c0 <HAL_Delay>
      ms++;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 fa10 	bl	80080f0 <USB_GetMode>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d005      	beq.n	8007ce2 <USB_SetCurrentMode+0x84>
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2b31      	cmp	r3, #49	; 0x31
 8007cda:	d9f0      	bls.n	8007cbe <USB_SetCurrentMode+0x60>
 8007cdc:	e001      	b.n	8007ce2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e005      	b.n	8007cee <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2b32      	cmp	r3, #50	; 0x32
 8007ce6:	d101      	bne.n	8007cec <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	e000      	b.n	8007cee <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
	...

08007cf8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007cf8:	b084      	sub	sp, #16
 8007cfa:	b580      	push	{r7, lr}
 8007cfc:	b086      	sub	sp, #24
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
 8007d02:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007d06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007d12:	2300      	movs	r3, #0
 8007d14:	613b      	str	r3, [r7, #16]
 8007d16:	e009      	b.n	8007d2c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	3340      	adds	r3, #64	; 0x40
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	4413      	add	r3, r2
 8007d22:	2200      	movs	r2, #0
 8007d24:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	3301      	adds	r3, #1
 8007d2a:	613b      	str	r3, [r7, #16]
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	2b0e      	cmp	r3, #14
 8007d30:	d9f2      	bls.n	8007d18 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d11c      	bne.n	8007d72 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d46:	f043 0302 	orr.w	r3, r3, #2
 8007d4a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d50:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	601a      	str	r2, [r3, #0]
 8007d70:	e005      	b.n	8007d7e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d76:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d84:	461a      	mov	r2, r3
 8007d86:	2300      	movs	r3, #0
 8007d88:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d90:	4619      	mov	r1, r3
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d98:	461a      	mov	r2, r3
 8007d9a:	680b      	ldr	r3, [r1, #0]
 8007d9c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d10c      	bne.n	8007dbe <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d104      	bne.n	8007db4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007daa:	2100      	movs	r1, #0
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 f965 	bl	800807c <USB_SetDevSpeed>
 8007db2:	e008      	b.n	8007dc6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007db4:	2101      	movs	r1, #1
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 f960 	bl	800807c <USB_SetDevSpeed>
 8007dbc:	e003      	b.n	8007dc6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007dbe:	2103      	movs	r1, #3
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 f95b 	bl	800807c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007dc6:	2110      	movs	r1, #16
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 f8f3 	bl	8007fb4 <USB_FlushTxFifo>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d001      	beq.n	8007dd8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 f91f 	bl	800801c <USB_FlushRxFifo>
 8007dde:	4603      	mov	r3, r0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d001      	beq.n	8007de8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007de4:	2301      	movs	r3, #1
 8007de6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dee:	461a      	mov	r2, r3
 8007df0:	2300      	movs	r3, #0
 8007df2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e06:	461a      	mov	r2, r3
 8007e08:	2300      	movs	r3, #0
 8007e0a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	613b      	str	r3, [r7, #16]
 8007e10:	e043      	b.n	8007e9a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	015a      	lsls	r2, r3, #5
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	4413      	add	r3, r2
 8007e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e28:	d118      	bne.n	8007e5c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d10a      	bne.n	8007e46 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	015a      	lsls	r2, r3, #5
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	4413      	add	r3, r2
 8007e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007e42:	6013      	str	r3, [r2, #0]
 8007e44:	e013      	b.n	8007e6e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	015a      	lsls	r2, r3, #5
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e52:	461a      	mov	r2, r3
 8007e54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007e58:	6013      	str	r3, [r2, #0]
 8007e5a:	e008      	b.n	8007e6e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	015a      	lsls	r2, r3, #5
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	4413      	add	r3, r2
 8007e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e68:	461a      	mov	r2, r3
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	015a      	lsls	r2, r3, #5
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	4413      	add	r3, r2
 8007e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	015a      	lsls	r2, r3, #5
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	4413      	add	r3, r2
 8007e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007e92:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	3301      	adds	r3, #1
 8007e98:	613b      	str	r3, [r7, #16]
 8007e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9c:	693a      	ldr	r2, [r7, #16]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d3b7      	bcc.n	8007e12 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	613b      	str	r3, [r7, #16]
 8007ea6:	e043      	b.n	8007f30 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	015a      	lsls	r2, r3, #5
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	4413      	add	r3, r2
 8007eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007eba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ebe:	d118      	bne.n	8007ef2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d10a      	bne.n	8007edc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	015a      	lsls	r2, r3, #5
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	4413      	add	r3, r2
 8007ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007ed8:	6013      	str	r3, [r2, #0]
 8007eda:	e013      	b.n	8007f04 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	015a      	lsls	r2, r3, #5
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	4413      	add	r3, r2
 8007ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ee8:	461a      	mov	r2, r3
 8007eea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007eee:	6013      	str	r3, [r2, #0]
 8007ef0:	e008      	b.n	8007f04 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	015a      	lsls	r2, r3, #5
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	4413      	add	r3, r2
 8007efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007efe:	461a      	mov	r2, r3
 8007f00:	2300      	movs	r3, #0
 8007f02:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	015a      	lsls	r2, r3, #5
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	4413      	add	r3, r2
 8007f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f10:	461a      	mov	r2, r3
 8007f12:	2300      	movs	r3, #0
 8007f14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	015a      	lsls	r2, r3, #5
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f22:	461a      	mov	r2, r3
 8007f24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007f28:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	613b      	str	r3, [r7, #16]
 8007f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f32:	693a      	ldr	r2, [r7, #16]
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d3b7      	bcc.n	8007ea8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f3e:	691b      	ldr	r3, [r3, #16]
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f4a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007f58:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d105      	bne.n	8007f6c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	699b      	ldr	r3, [r3, #24]
 8007f64:	f043 0210 	orr.w	r2, r3, #16
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	699a      	ldr	r2, [r3, #24]
 8007f70:	4b0e      	ldr	r3, [pc, #56]	; (8007fac <USB_DevInit+0x2b4>)
 8007f72:	4313      	orrs	r3, r2
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d005      	beq.n	8007f8a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	699b      	ldr	r3, [r3, #24]
 8007f82:	f043 0208 	orr.w	r2, r3, #8
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007f8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d105      	bne.n	8007f9c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	699a      	ldr	r2, [r3, #24]
 8007f94:	4b06      	ldr	r3, [pc, #24]	; (8007fb0 <USB_DevInit+0x2b8>)
 8007f96:	4313      	orrs	r3, r2
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007f9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3718      	adds	r7, #24
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007fa8:	b004      	add	sp, #16
 8007faa:	4770      	bx	lr
 8007fac:	803c3800 	.word	0x803c3800
 8007fb0:	40000004 	.word	0x40000004

08007fb4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	4a13      	ldr	r2, [pc, #76]	; (8008018 <USB_FlushTxFifo+0x64>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d901      	bls.n	8007fd4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007fd0:	2303      	movs	r3, #3
 8007fd2:	e01b      	b.n	800800c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	691b      	ldr	r3, [r3, #16]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	daf2      	bge.n	8007fc2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	019b      	lsls	r3, r3, #6
 8007fe4:	f043 0220 	orr.w	r2, r3, #32
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	3301      	adds	r3, #1
 8007ff0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	4a08      	ldr	r2, [pc, #32]	; (8008018 <USB_FlushTxFifo+0x64>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d901      	bls.n	8007ffe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007ffa:	2303      	movs	r3, #3
 8007ffc:	e006      	b.n	800800c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	691b      	ldr	r3, [r3, #16]
 8008002:	f003 0320 	and.w	r3, r3, #32
 8008006:	2b20      	cmp	r3, #32
 8008008:	d0f0      	beq.n	8007fec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	3714      	adds	r7, #20
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr
 8008018:	00030d40 	.word	0x00030d40

0800801c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800801c:	b480      	push	{r7}
 800801e:	b085      	sub	sp, #20
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008024:	2300      	movs	r3, #0
 8008026:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	3301      	adds	r3, #1
 800802c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	4a11      	ldr	r2, [pc, #68]	; (8008078 <USB_FlushRxFifo+0x5c>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d901      	bls.n	800803a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008036:	2303      	movs	r3, #3
 8008038:	e018      	b.n	800806c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	691b      	ldr	r3, [r3, #16]
 800803e:	2b00      	cmp	r3, #0
 8008040:	daf2      	bge.n	8008028 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008042:	2300      	movs	r3, #0
 8008044:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2210      	movs	r2, #16
 800804a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	3301      	adds	r3, #1
 8008050:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	4a08      	ldr	r2, [pc, #32]	; (8008078 <USB_FlushRxFifo+0x5c>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d901      	bls.n	800805e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800805a:	2303      	movs	r3, #3
 800805c:	e006      	b.n	800806c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	691b      	ldr	r3, [r3, #16]
 8008062:	f003 0310 	and.w	r3, r3, #16
 8008066:	2b10      	cmp	r3, #16
 8008068:	d0f0      	beq.n	800804c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800806a:	2300      	movs	r3, #0
}
 800806c:	4618      	mov	r0, r3
 800806e:	3714      	adds	r7, #20
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr
 8008078:	00030d40 	.word	0x00030d40

0800807c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800807c:	b480      	push	{r7}
 800807e:	b085      	sub	sp, #20
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	460b      	mov	r3, r1
 8008086:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	78fb      	ldrb	r3, [r7, #3]
 8008096:	68f9      	ldr	r1, [r7, #12]
 8008098:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800809c:	4313      	orrs	r3, r2
 800809e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3714      	adds	r7, #20
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr

080080ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80080ae:	b480      	push	{r7}
 80080b0:	b085      	sub	sp, #20
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	68fa      	ldr	r2, [r7, #12]
 80080c4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80080c8:	f023 0303 	bic.w	r3, r3, #3
 80080cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	68fa      	ldr	r2, [r7, #12]
 80080d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080dc:	f043 0302 	orr.w	r3, r3, #2
 80080e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80080e2:	2300      	movs	r3, #0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3714      	adds	r7, #20
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	695b      	ldr	r3, [r3, #20]
 80080fc:	f003 0301 	and.w	r3, r3, #1
}
 8008100:	4618      	mov	r0, r3
 8008102:	370c      	adds	r7, #12
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr

0800810c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800810c:	b480      	push	{r7}
 800810e:	b085      	sub	sp, #20
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008114:	2300      	movs	r3, #0
 8008116:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	3301      	adds	r3, #1
 800811c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	4a13      	ldr	r2, [pc, #76]	; (8008170 <USB_CoreReset+0x64>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d901      	bls.n	800812a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008126:	2303      	movs	r3, #3
 8008128:	e01b      	b.n	8008162 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	691b      	ldr	r3, [r3, #16]
 800812e:	2b00      	cmp	r3, #0
 8008130:	daf2      	bge.n	8008118 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008132:	2300      	movs	r3, #0
 8008134:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	691b      	ldr	r3, [r3, #16]
 800813a:	f043 0201 	orr.w	r2, r3, #1
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	3301      	adds	r3, #1
 8008146:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	4a09      	ldr	r2, [pc, #36]	; (8008170 <USB_CoreReset+0x64>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d901      	bls.n	8008154 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008150:	2303      	movs	r3, #3
 8008152:	e006      	b.n	8008162 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	691b      	ldr	r3, [r3, #16]
 8008158:	f003 0301 	and.w	r3, r3, #1
 800815c:	2b01      	cmp	r3, #1
 800815e:	d0f0      	beq.n	8008142 <USB_CoreReset+0x36>

  return HAL_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3714      	adds	r7, #20
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr
 800816e:	bf00      	nop
 8008170:	00030d40 	.word	0x00030d40

08008174 <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 8008174:	b480      	push	{r7}
 8008176:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8008178:	bf00      	nop
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr
	...

08008184 <__errno>:
 8008184:	4b01      	ldr	r3, [pc, #4]	; (800818c <__errno+0x8>)
 8008186:	6818      	ldr	r0, [r3, #0]
 8008188:	4770      	bx	lr
 800818a:	bf00      	nop
 800818c:	24000028 	.word	0x24000028

08008190 <__libc_init_array>:
 8008190:	b570      	push	{r4, r5, r6, lr}
 8008192:	4d0d      	ldr	r5, [pc, #52]	; (80081c8 <__libc_init_array+0x38>)
 8008194:	4c0d      	ldr	r4, [pc, #52]	; (80081cc <__libc_init_array+0x3c>)
 8008196:	1b64      	subs	r4, r4, r5
 8008198:	10a4      	asrs	r4, r4, #2
 800819a:	2600      	movs	r6, #0
 800819c:	42a6      	cmp	r6, r4
 800819e:	d109      	bne.n	80081b4 <__libc_init_array+0x24>
 80081a0:	4d0b      	ldr	r5, [pc, #44]	; (80081d0 <__libc_init_array+0x40>)
 80081a2:	4c0c      	ldr	r4, [pc, #48]	; (80081d4 <__libc_init_array+0x44>)
 80081a4:	f000 fcd0 	bl	8008b48 <_init>
 80081a8:	1b64      	subs	r4, r4, r5
 80081aa:	10a4      	asrs	r4, r4, #2
 80081ac:	2600      	movs	r6, #0
 80081ae:	42a6      	cmp	r6, r4
 80081b0:	d105      	bne.n	80081be <__libc_init_array+0x2e>
 80081b2:	bd70      	pop	{r4, r5, r6, pc}
 80081b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80081b8:	4798      	blx	r3
 80081ba:	3601      	adds	r6, #1
 80081bc:	e7ee      	b.n	800819c <__libc_init_array+0xc>
 80081be:	f855 3b04 	ldr.w	r3, [r5], #4
 80081c2:	4798      	blx	r3
 80081c4:	3601      	adds	r6, #1
 80081c6:	e7f2      	b.n	80081ae <__libc_init_array+0x1e>
 80081c8:	0800bb18 	.word	0x0800bb18
 80081cc:	0800bb18 	.word	0x0800bb18
 80081d0:	0800bb18 	.word	0x0800bb18
 80081d4:	0800bb1c 	.word	0x0800bb1c

080081d8 <__retarget_lock_acquire_recursive>:
 80081d8:	4770      	bx	lr

080081da <__retarget_lock_release_recursive>:
 80081da:	4770      	bx	lr

080081dc <memcpy>:
 80081dc:	440a      	add	r2, r1
 80081de:	4291      	cmp	r1, r2
 80081e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80081e4:	d100      	bne.n	80081e8 <memcpy+0xc>
 80081e6:	4770      	bx	lr
 80081e8:	b510      	push	{r4, lr}
 80081ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081f2:	4291      	cmp	r1, r2
 80081f4:	d1f9      	bne.n	80081ea <memcpy+0xe>
 80081f6:	bd10      	pop	{r4, pc}

080081f8 <memset>:
 80081f8:	4402      	add	r2, r0
 80081fa:	4603      	mov	r3, r0
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d100      	bne.n	8008202 <memset+0xa>
 8008200:	4770      	bx	lr
 8008202:	f803 1b01 	strb.w	r1, [r3], #1
 8008206:	e7f9      	b.n	80081fc <memset+0x4>

08008208 <_free_r>:
 8008208:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800820a:	2900      	cmp	r1, #0
 800820c:	d044      	beq.n	8008298 <_free_r+0x90>
 800820e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008212:	9001      	str	r0, [sp, #4]
 8008214:	2b00      	cmp	r3, #0
 8008216:	f1a1 0404 	sub.w	r4, r1, #4
 800821a:	bfb8      	it	lt
 800821c:	18e4      	addlt	r4, r4, r3
 800821e:	f000 f903 	bl	8008428 <__malloc_lock>
 8008222:	4a1e      	ldr	r2, [pc, #120]	; (800829c <_free_r+0x94>)
 8008224:	9801      	ldr	r0, [sp, #4]
 8008226:	6813      	ldr	r3, [r2, #0]
 8008228:	b933      	cbnz	r3, 8008238 <_free_r+0x30>
 800822a:	6063      	str	r3, [r4, #4]
 800822c:	6014      	str	r4, [r2, #0]
 800822e:	b003      	add	sp, #12
 8008230:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008234:	f000 b8fe 	b.w	8008434 <__malloc_unlock>
 8008238:	42a3      	cmp	r3, r4
 800823a:	d908      	bls.n	800824e <_free_r+0x46>
 800823c:	6825      	ldr	r5, [r4, #0]
 800823e:	1961      	adds	r1, r4, r5
 8008240:	428b      	cmp	r3, r1
 8008242:	bf01      	itttt	eq
 8008244:	6819      	ldreq	r1, [r3, #0]
 8008246:	685b      	ldreq	r3, [r3, #4]
 8008248:	1949      	addeq	r1, r1, r5
 800824a:	6021      	streq	r1, [r4, #0]
 800824c:	e7ed      	b.n	800822a <_free_r+0x22>
 800824e:	461a      	mov	r2, r3
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	b10b      	cbz	r3, 8008258 <_free_r+0x50>
 8008254:	42a3      	cmp	r3, r4
 8008256:	d9fa      	bls.n	800824e <_free_r+0x46>
 8008258:	6811      	ldr	r1, [r2, #0]
 800825a:	1855      	adds	r5, r2, r1
 800825c:	42a5      	cmp	r5, r4
 800825e:	d10b      	bne.n	8008278 <_free_r+0x70>
 8008260:	6824      	ldr	r4, [r4, #0]
 8008262:	4421      	add	r1, r4
 8008264:	1854      	adds	r4, r2, r1
 8008266:	42a3      	cmp	r3, r4
 8008268:	6011      	str	r1, [r2, #0]
 800826a:	d1e0      	bne.n	800822e <_free_r+0x26>
 800826c:	681c      	ldr	r4, [r3, #0]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	6053      	str	r3, [r2, #4]
 8008272:	4421      	add	r1, r4
 8008274:	6011      	str	r1, [r2, #0]
 8008276:	e7da      	b.n	800822e <_free_r+0x26>
 8008278:	d902      	bls.n	8008280 <_free_r+0x78>
 800827a:	230c      	movs	r3, #12
 800827c:	6003      	str	r3, [r0, #0]
 800827e:	e7d6      	b.n	800822e <_free_r+0x26>
 8008280:	6825      	ldr	r5, [r4, #0]
 8008282:	1961      	adds	r1, r4, r5
 8008284:	428b      	cmp	r3, r1
 8008286:	bf04      	itt	eq
 8008288:	6819      	ldreq	r1, [r3, #0]
 800828a:	685b      	ldreq	r3, [r3, #4]
 800828c:	6063      	str	r3, [r4, #4]
 800828e:	bf04      	itt	eq
 8008290:	1949      	addeq	r1, r1, r5
 8008292:	6021      	streq	r1, [r4, #0]
 8008294:	6054      	str	r4, [r2, #4]
 8008296:	e7ca      	b.n	800822e <_free_r+0x26>
 8008298:	b003      	add	sp, #12
 800829a:	bd30      	pop	{r4, r5, pc}
 800829c:	24000988 	.word	0x24000988

080082a0 <sbrk_aligned>:
 80082a0:	b570      	push	{r4, r5, r6, lr}
 80082a2:	4e0e      	ldr	r6, [pc, #56]	; (80082dc <sbrk_aligned+0x3c>)
 80082a4:	460c      	mov	r4, r1
 80082a6:	6831      	ldr	r1, [r6, #0]
 80082a8:	4605      	mov	r5, r0
 80082aa:	b911      	cbnz	r1, 80082b2 <sbrk_aligned+0x12>
 80082ac:	f000 f88c 	bl	80083c8 <_sbrk_r>
 80082b0:	6030      	str	r0, [r6, #0]
 80082b2:	4621      	mov	r1, r4
 80082b4:	4628      	mov	r0, r5
 80082b6:	f000 f887 	bl	80083c8 <_sbrk_r>
 80082ba:	1c43      	adds	r3, r0, #1
 80082bc:	d00a      	beq.n	80082d4 <sbrk_aligned+0x34>
 80082be:	1cc4      	adds	r4, r0, #3
 80082c0:	f024 0403 	bic.w	r4, r4, #3
 80082c4:	42a0      	cmp	r0, r4
 80082c6:	d007      	beq.n	80082d8 <sbrk_aligned+0x38>
 80082c8:	1a21      	subs	r1, r4, r0
 80082ca:	4628      	mov	r0, r5
 80082cc:	f000 f87c 	bl	80083c8 <_sbrk_r>
 80082d0:	3001      	adds	r0, #1
 80082d2:	d101      	bne.n	80082d8 <sbrk_aligned+0x38>
 80082d4:	f04f 34ff 	mov.w	r4, #4294967295
 80082d8:	4620      	mov	r0, r4
 80082da:	bd70      	pop	{r4, r5, r6, pc}
 80082dc:	2400098c 	.word	0x2400098c

080082e0 <_malloc_r>:
 80082e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082e4:	1ccd      	adds	r5, r1, #3
 80082e6:	f025 0503 	bic.w	r5, r5, #3
 80082ea:	3508      	adds	r5, #8
 80082ec:	2d0c      	cmp	r5, #12
 80082ee:	bf38      	it	cc
 80082f0:	250c      	movcc	r5, #12
 80082f2:	2d00      	cmp	r5, #0
 80082f4:	4607      	mov	r7, r0
 80082f6:	db01      	blt.n	80082fc <_malloc_r+0x1c>
 80082f8:	42a9      	cmp	r1, r5
 80082fa:	d905      	bls.n	8008308 <_malloc_r+0x28>
 80082fc:	230c      	movs	r3, #12
 80082fe:	603b      	str	r3, [r7, #0]
 8008300:	2600      	movs	r6, #0
 8008302:	4630      	mov	r0, r6
 8008304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008308:	4e2e      	ldr	r6, [pc, #184]	; (80083c4 <_malloc_r+0xe4>)
 800830a:	f000 f88d 	bl	8008428 <__malloc_lock>
 800830e:	6833      	ldr	r3, [r6, #0]
 8008310:	461c      	mov	r4, r3
 8008312:	bb34      	cbnz	r4, 8008362 <_malloc_r+0x82>
 8008314:	4629      	mov	r1, r5
 8008316:	4638      	mov	r0, r7
 8008318:	f7ff ffc2 	bl	80082a0 <sbrk_aligned>
 800831c:	1c43      	adds	r3, r0, #1
 800831e:	4604      	mov	r4, r0
 8008320:	d14d      	bne.n	80083be <_malloc_r+0xde>
 8008322:	6834      	ldr	r4, [r6, #0]
 8008324:	4626      	mov	r6, r4
 8008326:	2e00      	cmp	r6, #0
 8008328:	d140      	bne.n	80083ac <_malloc_r+0xcc>
 800832a:	6823      	ldr	r3, [r4, #0]
 800832c:	4631      	mov	r1, r6
 800832e:	4638      	mov	r0, r7
 8008330:	eb04 0803 	add.w	r8, r4, r3
 8008334:	f000 f848 	bl	80083c8 <_sbrk_r>
 8008338:	4580      	cmp	r8, r0
 800833a:	d13a      	bne.n	80083b2 <_malloc_r+0xd2>
 800833c:	6821      	ldr	r1, [r4, #0]
 800833e:	3503      	adds	r5, #3
 8008340:	1a6d      	subs	r5, r5, r1
 8008342:	f025 0503 	bic.w	r5, r5, #3
 8008346:	3508      	adds	r5, #8
 8008348:	2d0c      	cmp	r5, #12
 800834a:	bf38      	it	cc
 800834c:	250c      	movcc	r5, #12
 800834e:	4629      	mov	r1, r5
 8008350:	4638      	mov	r0, r7
 8008352:	f7ff ffa5 	bl	80082a0 <sbrk_aligned>
 8008356:	3001      	adds	r0, #1
 8008358:	d02b      	beq.n	80083b2 <_malloc_r+0xd2>
 800835a:	6823      	ldr	r3, [r4, #0]
 800835c:	442b      	add	r3, r5
 800835e:	6023      	str	r3, [r4, #0]
 8008360:	e00e      	b.n	8008380 <_malloc_r+0xa0>
 8008362:	6822      	ldr	r2, [r4, #0]
 8008364:	1b52      	subs	r2, r2, r5
 8008366:	d41e      	bmi.n	80083a6 <_malloc_r+0xc6>
 8008368:	2a0b      	cmp	r2, #11
 800836a:	d916      	bls.n	800839a <_malloc_r+0xba>
 800836c:	1961      	adds	r1, r4, r5
 800836e:	42a3      	cmp	r3, r4
 8008370:	6025      	str	r5, [r4, #0]
 8008372:	bf18      	it	ne
 8008374:	6059      	strne	r1, [r3, #4]
 8008376:	6863      	ldr	r3, [r4, #4]
 8008378:	bf08      	it	eq
 800837a:	6031      	streq	r1, [r6, #0]
 800837c:	5162      	str	r2, [r4, r5]
 800837e:	604b      	str	r3, [r1, #4]
 8008380:	4638      	mov	r0, r7
 8008382:	f104 060b 	add.w	r6, r4, #11
 8008386:	f000 f855 	bl	8008434 <__malloc_unlock>
 800838a:	f026 0607 	bic.w	r6, r6, #7
 800838e:	1d23      	adds	r3, r4, #4
 8008390:	1af2      	subs	r2, r6, r3
 8008392:	d0b6      	beq.n	8008302 <_malloc_r+0x22>
 8008394:	1b9b      	subs	r3, r3, r6
 8008396:	50a3      	str	r3, [r4, r2]
 8008398:	e7b3      	b.n	8008302 <_malloc_r+0x22>
 800839a:	6862      	ldr	r2, [r4, #4]
 800839c:	42a3      	cmp	r3, r4
 800839e:	bf0c      	ite	eq
 80083a0:	6032      	streq	r2, [r6, #0]
 80083a2:	605a      	strne	r2, [r3, #4]
 80083a4:	e7ec      	b.n	8008380 <_malloc_r+0xa0>
 80083a6:	4623      	mov	r3, r4
 80083a8:	6864      	ldr	r4, [r4, #4]
 80083aa:	e7b2      	b.n	8008312 <_malloc_r+0x32>
 80083ac:	4634      	mov	r4, r6
 80083ae:	6876      	ldr	r6, [r6, #4]
 80083b0:	e7b9      	b.n	8008326 <_malloc_r+0x46>
 80083b2:	230c      	movs	r3, #12
 80083b4:	603b      	str	r3, [r7, #0]
 80083b6:	4638      	mov	r0, r7
 80083b8:	f000 f83c 	bl	8008434 <__malloc_unlock>
 80083bc:	e7a1      	b.n	8008302 <_malloc_r+0x22>
 80083be:	6025      	str	r5, [r4, #0]
 80083c0:	e7de      	b.n	8008380 <_malloc_r+0xa0>
 80083c2:	bf00      	nop
 80083c4:	24000988 	.word	0x24000988

080083c8 <_sbrk_r>:
 80083c8:	b538      	push	{r3, r4, r5, lr}
 80083ca:	4d06      	ldr	r5, [pc, #24]	; (80083e4 <_sbrk_r+0x1c>)
 80083cc:	2300      	movs	r3, #0
 80083ce:	4604      	mov	r4, r0
 80083d0:	4608      	mov	r0, r1
 80083d2:	602b      	str	r3, [r5, #0]
 80083d4:	f7fa f802 	bl	80023dc <_sbrk>
 80083d8:	1c43      	adds	r3, r0, #1
 80083da:	d102      	bne.n	80083e2 <_sbrk_r+0x1a>
 80083dc:	682b      	ldr	r3, [r5, #0]
 80083de:	b103      	cbz	r3, 80083e2 <_sbrk_r+0x1a>
 80083e0:	6023      	str	r3, [r4, #0]
 80083e2:	bd38      	pop	{r3, r4, r5, pc}
 80083e4:	24000990 	.word	0x24000990

080083e8 <siprintf>:
 80083e8:	b40e      	push	{r1, r2, r3}
 80083ea:	b500      	push	{lr}
 80083ec:	b09c      	sub	sp, #112	; 0x70
 80083ee:	ab1d      	add	r3, sp, #116	; 0x74
 80083f0:	9002      	str	r0, [sp, #8]
 80083f2:	9006      	str	r0, [sp, #24]
 80083f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80083f8:	4809      	ldr	r0, [pc, #36]	; (8008420 <siprintf+0x38>)
 80083fa:	9107      	str	r1, [sp, #28]
 80083fc:	9104      	str	r1, [sp, #16]
 80083fe:	4909      	ldr	r1, [pc, #36]	; (8008424 <siprintf+0x3c>)
 8008400:	f853 2b04 	ldr.w	r2, [r3], #4
 8008404:	9105      	str	r1, [sp, #20]
 8008406:	6800      	ldr	r0, [r0, #0]
 8008408:	9301      	str	r3, [sp, #4]
 800840a:	a902      	add	r1, sp, #8
 800840c:	f000 f874 	bl	80084f8 <_svfiprintf_r>
 8008410:	9b02      	ldr	r3, [sp, #8]
 8008412:	2200      	movs	r2, #0
 8008414:	701a      	strb	r2, [r3, #0]
 8008416:	b01c      	add	sp, #112	; 0x70
 8008418:	f85d eb04 	ldr.w	lr, [sp], #4
 800841c:	b003      	add	sp, #12
 800841e:	4770      	bx	lr
 8008420:	24000028 	.word	0x24000028
 8008424:	ffff0208 	.word	0xffff0208

08008428 <__malloc_lock>:
 8008428:	4801      	ldr	r0, [pc, #4]	; (8008430 <__malloc_lock+0x8>)
 800842a:	f7ff bed5 	b.w	80081d8 <__retarget_lock_acquire_recursive>
 800842e:	bf00      	nop
 8008430:	24000984 	.word	0x24000984

08008434 <__malloc_unlock>:
 8008434:	4801      	ldr	r0, [pc, #4]	; (800843c <__malloc_unlock+0x8>)
 8008436:	f7ff bed0 	b.w	80081da <__retarget_lock_release_recursive>
 800843a:	bf00      	nop
 800843c:	24000984 	.word	0x24000984

08008440 <__ssputs_r>:
 8008440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008444:	688e      	ldr	r6, [r1, #8]
 8008446:	429e      	cmp	r6, r3
 8008448:	4682      	mov	sl, r0
 800844a:	460c      	mov	r4, r1
 800844c:	4690      	mov	r8, r2
 800844e:	461f      	mov	r7, r3
 8008450:	d838      	bhi.n	80084c4 <__ssputs_r+0x84>
 8008452:	898a      	ldrh	r2, [r1, #12]
 8008454:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008458:	d032      	beq.n	80084c0 <__ssputs_r+0x80>
 800845a:	6825      	ldr	r5, [r4, #0]
 800845c:	6909      	ldr	r1, [r1, #16]
 800845e:	eba5 0901 	sub.w	r9, r5, r1
 8008462:	6965      	ldr	r5, [r4, #20]
 8008464:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008468:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800846c:	3301      	adds	r3, #1
 800846e:	444b      	add	r3, r9
 8008470:	106d      	asrs	r5, r5, #1
 8008472:	429d      	cmp	r5, r3
 8008474:	bf38      	it	cc
 8008476:	461d      	movcc	r5, r3
 8008478:	0553      	lsls	r3, r2, #21
 800847a:	d531      	bpl.n	80084e0 <__ssputs_r+0xa0>
 800847c:	4629      	mov	r1, r5
 800847e:	f7ff ff2f 	bl	80082e0 <_malloc_r>
 8008482:	4606      	mov	r6, r0
 8008484:	b950      	cbnz	r0, 800849c <__ssputs_r+0x5c>
 8008486:	230c      	movs	r3, #12
 8008488:	f8ca 3000 	str.w	r3, [sl]
 800848c:	89a3      	ldrh	r3, [r4, #12]
 800848e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008492:	81a3      	strh	r3, [r4, #12]
 8008494:	f04f 30ff 	mov.w	r0, #4294967295
 8008498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800849c:	6921      	ldr	r1, [r4, #16]
 800849e:	464a      	mov	r2, r9
 80084a0:	f7ff fe9c 	bl	80081dc <memcpy>
 80084a4:	89a3      	ldrh	r3, [r4, #12]
 80084a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80084aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084ae:	81a3      	strh	r3, [r4, #12]
 80084b0:	6126      	str	r6, [r4, #16]
 80084b2:	6165      	str	r5, [r4, #20]
 80084b4:	444e      	add	r6, r9
 80084b6:	eba5 0509 	sub.w	r5, r5, r9
 80084ba:	6026      	str	r6, [r4, #0]
 80084bc:	60a5      	str	r5, [r4, #8]
 80084be:	463e      	mov	r6, r7
 80084c0:	42be      	cmp	r6, r7
 80084c2:	d900      	bls.n	80084c6 <__ssputs_r+0x86>
 80084c4:	463e      	mov	r6, r7
 80084c6:	6820      	ldr	r0, [r4, #0]
 80084c8:	4632      	mov	r2, r6
 80084ca:	4641      	mov	r1, r8
 80084cc:	f000 faa8 	bl	8008a20 <memmove>
 80084d0:	68a3      	ldr	r3, [r4, #8]
 80084d2:	1b9b      	subs	r3, r3, r6
 80084d4:	60a3      	str	r3, [r4, #8]
 80084d6:	6823      	ldr	r3, [r4, #0]
 80084d8:	4433      	add	r3, r6
 80084da:	6023      	str	r3, [r4, #0]
 80084dc:	2000      	movs	r0, #0
 80084de:	e7db      	b.n	8008498 <__ssputs_r+0x58>
 80084e0:	462a      	mov	r2, r5
 80084e2:	f000 fab7 	bl	8008a54 <_realloc_r>
 80084e6:	4606      	mov	r6, r0
 80084e8:	2800      	cmp	r0, #0
 80084ea:	d1e1      	bne.n	80084b0 <__ssputs_r+0x70>
 80084ec:	6921      	ldr	r1, [r4, #16]
 80084ee:	4650      	mov	r0, sl
 80084f0:	f7ff fe8a 	bl	8008208 <_free_r>
 80084f4:	e7c7      	b.n	8008486 <__ssputs_r+0x46>
	...

080084f8 <_svfiprintf_r>:
 80084f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084fc:	4698      	mov	r8, r3
 80084fe:	898b      	ldrh	r3, [r1, #12]
 8008500:	061b      	lsls	r3, r3, #24
 8008502:	b09d      	sub	sp, #116	; 0x74
 8008504:	4607      	mov	r7, r0
 8008506:	460d      	mov	r5, r1
 8008508:	4614      	mov	r4, r2
 800850a:	d50e      	bpl.n	800852a <_svfiprintf_r+0x32>
 800850c:	690b      	ldr	r3, [r1, #16]
 800850e:	b963      	cbnz	r3, 800852a <_svfiprintf_r+0x32>
 8008510:	2140      	movs	r1, #64	; 0x40
 8008512:	f7ff fee5 	bl	80082e0 <_malloc_r>
 8008516:	6028      	str	r0, [r5, #0]
 8008518:	6128      	str	r0, [r5, #16]
 800851a:	b920      	cbnz	r0, 8008526 <_svfiprintf_r+0x2e>
 800851c:	230c      	movs	r3, #12
 800851e:	603b      	str	r3, [r7, #0]
 8008520:	f04f 30ff 	mov.w	r0, #4294967295
 8008524:	e0d1      	b.n	80086ca <_svfiprintf_r+0x1d2>
 8008526:	2340      	movs	r3, #64	; 0x40
 8008528:	616b      	str	r3, [r5, #20]
 800852a:	2300      	movs	r3, #0
 800852c:	9309      	str	r3, [sp, #36]	; 0x24
 800852e:	2320      	movs	r3, #32
 8008530:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008534:	f8cd 800c 	str.w	r8, [sp, #12]
 8008538:	2330      	movs	r3, #48	; 0x30
 800853a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80086e4 <_svfiprintf_r+0x1ec>
 800853e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008542:	f04f 0901 	mov.w	r9, #1
 8008546:	4623      	mov	r3, r4
 8008548:	469a      	mov	sl, r3
 800854a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800854e:	b10a      	cbz	r2, 8008554 <_svfiprintf_r+0x5c>
 8008550:	2a25      	cmp	r2, #37	; 0x25
 8008552:	d1f9      	bne.n	8008548 <_svfiprintf_r+0x50>
 8008554:	ebba 0b04 	subs.w	fp, sl, r4
 8008558:	d00b      	beq.n	8008572 <_svfiprintf_r+0x7a>
 800855a:	465b      	mov	r3, fp
 800855c:	4622      	mov	r2, r4
 800855e:	4629      	mov	r1, r5
 8008560:	4638      	mov	r0, r7
 8008562:	f7ff ff6d 	bl	8008440 <__ssputs_r>
 8008566:	3001      	adds	r0, #1
 8008568:	f000 80aa 	beq.w	80086c0 <_svfiprintf_r+0x1c8>
 800856c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800856e:	445a      	add	r2, fp
 8008570:	9209      	str	r2, [sp, #36]	; 0x24
 8008572:	f89a 3000 	ldrb.w	r3, [sl]
 8008576:	2b00      	cmp	r3, #0
 8008578:	f000 80a2 	beq.w	80086c0 <_svfiprintf_r+0x1c8>
 800857c:	2300      	movs	r3, #0
 800857e:	f04f 32ff 	mov.w	r2, #4294967295
 8008582:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008586:	f10a 0a01 	add.w	sl, sl, #1
 800858a:	9304      	str	r3, [sp, #16]
 800858c:	9307      	str	r3, [sp, #28]
 800858e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008592:	931a      	str	r3, [sp, #104]	; 0x68
 8008594:	4654      	mov	r4, sl
 8008596:	2205      	movs	r2, #5
 8008598:	f814 1b01 	ldrb.w	r1, [r4], #1
 800859c:	4851      	ldr	r0, [pc, #324]	; (80086e4 <_svfiprintf_r+0x1ec>)
 800859e:	f7f7 fea7 	bl	80002f0 <memchr>
 80085a2:	9a04      	ldr	r2, [sp, #16]
 80085a4:	b9d8      	cbnz	r0, 80085de <_svfiprintf_r+0xe6>
 80085a6:	06d0      	lsls	r0, r2, #27
 80085a8:	bf44      	itt	mi
 80085aa:	2320      	movmi	r3, #32
 80085ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085b0:	0711      	lsls	r1, r2, #28
 80085b2:	bf44      	itt	mi
 80085b4:	232b      	movmi	r3, #43	; 0x2b
 80085b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085ba:	f89a 3000 	ldrb.w	r3, [sl]
 80085be:	2b2a      	cmp	r3, #42	; 0x2a
 80085c0:	d015      	beq.n	80085ee <_svfiprintf_r+0xf6>
 80085c2:	9a07      	ldr	r2, [sp, #28]
 80085c4:	4654      	mov	r4, sl
 80085c6:	2000      	movs	r0, #0
 80085c8:	f04f 0c0a 	mov.w	ip, #10
 80085cc:	4621      	mov	r1, r4
 80085ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085d2:	3b30      	subs	r3, #48	; 0x30
 80085d4:	2b09      	cmp	r3, #9
 80085d6:	d94e      	bls.n	8008676 <_svfiprintf_r+0x17e>
 80085d8:	b1b0      	cbz	r0, 8008608 <_svfiprintf_r+0x110>
 80085da:	9207      	str	r2, [sp, #28]
 80085dc:	e014      	b.n	8008608 <_svfiprintf_r+0x110>
 80085de:	eba0 0308 	sub.w	r3, r0, r8
 80085e2:	fa09 f303 	lsl.w	r3, r9, r3
 80085e6:	4313      	orrs	r3, r2
 80085e8:	9304      	str	r3, [sp, #16]
 80085ea:	46a2      	mov	sl, r4
 80085ec:	e7d2      	b.n	8008594 <_svfiprintf_r+0x9c>
 80085ee:	9b03      	ldr	r3, [sp, #12]
 80085f0:	1d19      	adds	r1, r3, #4
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	9103      	str	r1, [sp, #12]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	bfbb      	ittet	lt
 80085fa:	425b      	neglt	r3, r3
 80085fc:	f042 0202 	orrlt.w	r2, r2, #2
 8008600:	9307      	strge	r3, [sp, #28]
 8008602:	9307      	strlt	r3, [sp, #28]
 8008604:	bfb8      	it	lt
 8008606:	9204      	strlt	r2, [sp, #16]
 8008608:	7823      	ldrb	r3, [r4, #0]
 800860a:	2b2e      	cmp	r3, #46	; 0x2e
 800860c:	d10c      	bne.n	8008628 <_svfiprintf_r+0x130>
 800860e:	7863      	ldrb	r3, [r4, #1]
 8008610:	2b2a      	cmp	r3, #42	; 0x2a
 8008612:	d135      	bne.n	8008680 <_svfiprintf_r+0x188>
 8008614:	9b03      	ldr	r3, [sp, #12]
 8008616:	1d1a      	adds	r2, r3, #4
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	9203      	str	r2, [sp, #12]
 800861c:	2b00      	cmp	r3, #0
 800861e:	bfb8      	it	lt
 8008620:	f04f 33ff 	movlt.w	r3, #4294967295
 8008624:	3402      	adds	r4, #2
 8008626:	9305      	str	r3, [sp, #20]
 8008628:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80086f4 <_svfiprintf_r+0x1fc>
 800862c:	7821      	ldrb	r1, [r4, #0]
 800862e:	2203      	movs	r2, #3
 8008630:	4650      	mov	r0, sl
 8008632:	f7f7 fe5d 	bl	80002f0 <memchr>
 8008636:	b140      	cbz	r0, 800864a <_svfiprintf_r+0x152>
 8008638:	2340      	movs	r3, #64	; 0x40
 800863a:	eba0 000a 	sub.w	r0, r0, sl
 800863e:	fa03 f000 	lsl.w	r0, r3, r0
 8008642:	9b04      	ldr	r3, [sp, #16]
 8008644:	4303      	orrs	r3, r0
 8008646:	3401      	adds	r4, #1
 8008648:	9304      	str	r3, [sp, #16]
 800864a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800864e:	4826      	ldr	r0, [pc, #152]	; (80086e8 <_svfiprintf_r+0x1f0>)
 8008650:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008654:	2206      	movs	r2, #6
 8008656:	f7f7 fe4b 	bl	80002f0 <memchr>
 800865a:	2800      	cmp	r0, #0
 800865c:	d038      	beq.n	80086d0 <_svfiprintf_r+0x1d8>
 800865e:	4b23      	ldr	r3, [pc, #140]	; (80086ec <_svfiprintf_r+0x1f4>)
 8008660:	bb1b      	cbnz	r3, 80086aa <_svfiprintf_r+0x1b2>
 8008662:	9b03      	ldr	r3, [sp, #12]
 8008664:	3307      	adds	r3, #7
 8008666:	f023 0307 	bic.w	r3, r3, #7
 800866a:	3308      	adds	r3, #8
 800866c:	9303      	str	r3, [sp, #12]
 800866e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008670:	4433      	add	r3, r6
 8008672:	9309      	str	r3, [sp, #36]	; 0x24
 8008674:	e767      	b.n	8008546 <_svfiprintf_r+0x4e>
 8008676:	fb0c 3202 	mla	r2, ip, r2, r3
 800867a:	460c      	mov	r4, r1
 800867c:	2001      	movs	r0, #1
 800867e:	e7a5      	b.n	80085cc <_svfiprintf_r+0xd4>
 8008680:	2300      	movs	r3, #0
 8008682:	3401      	adds	r4, #1
 8008684:	9305      	str	r3, [sp, #20]
 8008686:	4619      	mov	r1, r3
 8008688:	f04f 0c0a 	mov.w	ip, #10
 800868c:	4620      	mov	r0, r4
 800868e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008692:	3a30      	subs	r2, #48	; 0x30
 8008694:	2a09      	cmp	r2, #9
 8008696:	d903      	bls.n	80086a0 <_svfiprintf_r+0x1a8>
 8008698:	2b00      	cmp	r3, #0
 800869a:	d0c5      	beq.n	8008628 <_svfiprintf_r+0x130>
 800869c:	9105      	str	r1, [sp, #20]
 800869e:	e7c3      	b.n	8008628 <_svfiprintf_r+0x130>
 80086a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80086a4:	4604      	mov	r4, r0
 80086a6:	2301      	movs	r3, #1
 80086a8:	e7f0      	b.n	800868c <_svfiprintf_r+0x194>
 80086aa:	ab03      	add	r3, sp, #12
 80086ac:	9300      	str	r3, [sp, #0]
 80086ae:	462a      	mov	r2, r5
 80086b0:	4b0f      	ldr	r3, [pc, #60]	; (80086f0 <_svfiprintf_r+0x1f8>)
 80086b2:	a904      	add	r1, sp, #16
 80086b4:	4638      	mov	r0, r7
 80086b6:	f3af 8000 	nop.w
 80086ba:	1c42      	adds	r2, r0, #1
 80086bc:	4606      	mov	r6, r0
 80086be:	d1d6      	bne.n	800866e <_svfiprintf_r+0x176>
 80086c0:	89ab      	ldrh	r3, [r5, #12]
 80086c2:	065b      	lsls	r3, r3, #25
 80086c4:	f53f af2c 	bmi.w	8008520 <_svfiprintf_r+0x28>
 80086c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086ca:	b01d      	add	sp, #116	; 0x74
 80086cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086d0:	ab03      	add	r3, sp, #12
 80086d2:	9300      	str	r3, [sp, #0]
 80086d4:	462a      	mov	r2, r5
 80086d6:	4b06      	ldr	r3, [pc, #24]	; (80086f0 <_svfiprintf_r+0x1f8>)
 80086d8:	a904      	add	r1, sp, #16
 80086da:	4638      	mov	r0, r7
 80086dc:	f000 f87a 	bl	80087d4 <_printf_i>
 80086e0:	e7eb      	b.n	80086ba <_svfiprintf_r+0x1c2>
 80086e2:	bf00      	nop
 80086e4:	0800badc 	.word	0x0800badc
 80086e8:	0800bae6 	.word	0x0800bae6
 80086ec:	00000000 	.word	0x00000000
 80086f0:	08008441 	.word	0x08008441
 80086f4:	0800bae2 	.word	0x0800bae2

080086f8 <_printf_common>:
 80086f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086fc:	4616      	mov	r6, r2
 80086fe:	4699      	mov	r9, r3
 8008700:	688a      	ldr	r2, [r1, #8]
 8008702:	690b      	ldr	r3, [r1, #16]
 8008704:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008708:	4293      	cmp	r3, r2
 800870a:	bfb8      	it	lt
 800870c:	4613      	movlt	r3, r2
 800870e:	6033      	str	r3, [r6, #0]
 8008710:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008714:	4607      	mov	r7, r0
 8008716:	460c      	mov	r4, r1
 8008718:	b10a      	cbz	r2, 800871e <_printf_common+0x26>
 800871a:	3301      	adds	r3, #1
 800871c:	6033      	str	r3, [r6, #0]
 800871e:	6823      	ldr	r3, [r4, #0]
 8008720:	0699      	lsls	r1, r3, #26
 8008722:	bf42      	ittt	mi
 8008724:	6833      	ldrmi	r3, [r6, #0]
 8008726:	3302      	addmi	r3, #2
 8008728:	6033      	strmi	r3, [r6, #0]
 800872a:	6825      	ldr	r5, [r4, #0]
 800872c:	f015 0506 	ands.w	r5, r5, #6
 8008730:	d106      	bne.n	8008740 <_printf_common+0x48>
 8008732:	f104 0a19 	add.w	sl, r4, #25
 8008736:	68e3      	ldr	r3, [r4, #12]
 8008738:	6832      	ldr	r2, [r6, #0]
 800873a:	1a9b      	subs	r3, r3, r2
 800873c:	42ab      	cmp	r3, r5
 800873e:	dc26      	bgt.n	800878e <_printf_common+0x96>
 8008740:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008744:	1e13      	subs	r3, r2, #0
 8008746:	6822      	ldr	r2, [r4, #0]
 8008748:	bf18      	it	ne
 800874a:	2301      	movne	r3, #1
 800874c:	0692      	lsls	r2, r2, #26
 800874e:	d42b      	bmi.n	80087a8 <_printf_common+0xb0>
 8008750:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008754:	4649      	mov	r1, r9
 8008756:	4638      	mov	r0, r7
 8008758:	47c0      	blx	r8
 800875a:	3001      	adds	r0, #1
 800875c:	d01e      	beq.n	800879c <_printf_common+0xa4>
 800875e:	6823      	ldr	r3, [r4, #0]
 8008760:	68e5      	ldr	r5, [r4, #12]
 8008762:	6832      	ldr	r2, [r6, #0]
 8008764:	f003 0306 	and.w	r3, r3, #6
 8008768:	2b04      	cmp	r3, #4
 800876a:	bf08      	it	eq
 800876c:	1aad      	subeq	r5, r5, r2
 800876e:	68a3      	ldr	r3, [r4, #8]
 8008770:	6922      	ldr	r2, [r4, #16]
 8008772:	bf0c      	ite	eq
 8008774:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008778:	2500      	movne	r5, #0
 800877a:	4293      	cmp	r3, r2
 800877c:	bfc4      	itt	gt
 800877e:	1a9b      	subgt	r3, r3, r2
 8008780:	18ed      	addgt	r5, r5, r3
 8008782:	2600      	movs	r6, #0
 8008784:	341a      	adds	r4, #26
 8008786:	42b5      	cmp	r5, r6
 8008788:	d11a      	bne.n	80087c0 <_printf_common+0xc8>
 800878a:	2000      	movs	r0, #0
 800878c:	e008      	b.n	80087a0 <_printf_common+0xa8>
 800878e:	2301      	movs	r3, #1
 8008790:	4652      	mov	r2, sl
 8008792:	4649      	mov	r1, r9
 8008794:	4638      	mov	r0, r7
 8008796:	47c0      	blx	r8
 8008798:	3001      	adds	r0, #1
 800879a:	d103      	bne.n	80087a4 <_printf_common+0xac>
 800879c:	f04f 30ff 	mov.w	r0, #4294967295
 80087a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087a4:	3501      	adds	r5, #1
 80087a6:	e7c6      	b.n	8008736 <_printf_common+0x3e>
 80087a8:	18e1      	adds	r1, r4, r3
 80087aa:	1c5a      	adds	r2, r3, #1
 80087ac:	2030      	movs	r0, #48	; 0x30
 80087ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80087b2:	4422      	add	r2, r4
 80087b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80087b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80087bc:	3302      	adds	r3, #2
 80087be:	e7c7      	b.n	8008750 <_printf_common+0x58>
 80087c0:	2301      	movs	r3, #1
 80087c2:	4622      	mov	r2, r4
 80087c4:	4649      	mov	r1, r9
 80087c6:	4638      	mov	r0, r7
 80087c8:	47c0      	blx	r8
 80087ca:	3001      	adds	r0, #1
 80087cc:	d0e6      	beq.n	800879c <_printf_common+0xa4>
 80087ce:	3601      	adds	r6, #1
 80087d0:	e7d9      	b.n	8008786 <_printf_common+0x8e>
	...

080087d4 <_printf_i>:
 80087d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087d8:	7e0f      	ldrb	r7, [r1, #24]
 80087da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80087dc:	2f78      	cmp	r7, #120	; 0x78
 80087de:	4691      	mov	r9, r2
 80087e0:	4680      	mov	r8, r0
 80087e2:	460c      	mov	r4, r1
 80087e4:	469a      	mov	sl, r3
 80087e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80087ea:	d807      	bhi.n	80087fc <_printf_i+0x28>
 80087ec:	2f62      	cmp	r7, #98	; 0x62
 80087ee:	d80a      	bhi.n	8008806 <_printf_i+0x32>
 80087f0:	2f00      	cmp	r7, #0
 80087f2:	f000 80d8 	beq.w	80089a6 <_printf_i+0x1d2>
 80087f6:	2f58      	cmp	r7, #88	; 0x58
 80087f8:	f000 80a3 	beq.w	8008942 <_printf_i+0x16e>
 80087fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008800:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008804:	e03a      	b.n	800887c <_printf_i+0xa8>
 8008806:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800880a:	2b15      	cmp	r3, #21
 800880c:	d8f6      	bhi.n	80087fc <_printf_i+0x28>
 800880e:	a101      	add	r1, pc, #4	; (adr r1, 8008814 <_printf_i+0x40>)
 8008810:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008814:	0800886d 	.word	0x0800886d
 8008818:	08008881 	.word	0x08008881
 800881c:	080087fd 	.word	0x080087fd
 8008820:	080087fd 	.word	0x080087fd
 8008824:	080087fd 	.word	0x080087fd
 8008828:	080087fd 	.word	0x080087fd
 800882c:	08008881 	.word	0x08008881
 8008830:	080087fd 	.word	0x080087fd
 8008834:	080087fd 	.word	0x080087fd
 8008838:	080087fd 	.word	0x080087fd
 800883c:	080087fd 	.word	0x080087fd
 8008840:	0800898d 	.word	0x0800898d
 8008844:	080088b1 	.word	0x080088b1
 8008848:	0800896f 	.word	0x0800896f
 800884c:	080087fd 	.word	0x080087fd
 8008850:	080087fd 	.word	0x080087fd
 8008854:	080089af 	.word	0x080089af
 8008858:	080087fd 	.word	0x080087fd
 800885c:	080088b1 	.word	0x080088b1
 8008860:	080087fd 	.word	0x080087fd
 8008864:	080087fd 	.word	0x080087fd
 8008868:	08008977 	.word	0x08008977
 800886c:	682b      	ldr	r3, [r5, #0]
 800886e:	1d1a      	adds	r2, r3, #4
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	602a      	str	r2, [r5, #0]
 8008874:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008878:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800887c:	2301      	movs	r3, #1
 800887e:	e0a3      	b.n	80089c8 <_printf_i+0x1f4>
 8008880:	6820      	ldr	r0, [r4, #0]
 8008882:	6829      	ldr	r1, [r5, #0]
 8008884:	0606      	lsls	r6, r0, #24
 8008886:	f101 0304 	add.w	r3, r1, #4
 800888a:	d50a      	bpl.n	80088a2 <_printf_i+0xce>
 800888c:	680e      	ldr	r6, [r1, #0]
 800888e:	602b      	str	r3, [r5, #0]
 8008890:	2e00      	cmp	r6, #0
 8008892:	da03      	bge.n	800889c <_printf_i+0xc8>
 8008894:	232d      	movs	r3, #45	; 0x2d
 8008896:	4276      	negs	r6, r6
 8008898:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800889c:	485e      	ldr	r0, [pc, #376]	; (8008a18 <_printf_i+0x244>)
 800889e:	230a      	movs	r3, #10
 80088a0:	e019      	b.n	80088d6 <_printf_i+0x102>
 80088a2:	680e      	ldr	r6, [r1, #0]
 80088a4:	602b      	str	r3, [r5, #0]
 80088a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80088aa:	bf18      	it	ne
 80088ac:	b236      	sxthne	r6, r6
 80088ae:	e7ef      	b.n	8008890 <_printf_i+0xbc>
 80088b0:	682b      	ldr	r3, [r5, #0]
 80088b2:	6820      	ldr	r0, [r4, #0]
 80088b4:	1d19      	adds	r1, r3, #4
 80088b6:	6029      	str	r1, [r5, #0]
 80088b8:	0601      	lsls	r1, r0, #24
 80088ba:	d501      	bpl.n	80088c0 <_printf_i+0xec>
 80088bc:	681e      	ldr	r6, [r3, #0]
 80088be:	e002      	b.n	80088c6 <_printf_i+0xf2>
 80088c0:	0646      	lsls	r6, r0, #25
 80088c2:	d5fb      	bpl.n	80088bc <_printf_i+0xe8>
 80088c4:	881e      	ldrh	r6, [r3, #0]
 80088c6:	4854      	ldr	r0, [pc, #336]	; (8008a18 <_printf_i+0x244>)
 80088c8:	2f6f      	cmp	r7, #111	; 0x6f
 80088ca:	bf0c      	ite	eq
 80088cc:	2308      	moveq	r3, #8
 80088ce:	230a      	movne	r3, #10
 80088d0:	2100      	movs	r1, #0
 80088d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80088d6:	6865      	ldr	r5, [r4, #4]
 80088d8:	60a5      	str	r5, [r4, #8]
 80088da:	2d00      	cmp	r5, #0
 80088dc:	bfa2      	ittt	ge
 80088de:	6821      	ldrge	r1, [r4, #0]
 80088e0:	f021 0104 	bicge.w	r1, r1, #4
 80088e4:	6021      	strge	r1, [r4, #0]
 80088e6:	b90e      	cbnz	r6, 80088ec <_printf_i+0x118>
 80088e8:	2d00      	cmp	r5, #0
 80088ea:	d04d      	beq.n	8008988 <_printf_i+0x1b4>
 80088ec:	4615      	mov	r5, r2
 80088ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80088f2:	fb03 6711 	mls	r7, r3, r1, r6
 80088f6:	5dc7      	ldrb	r7, [r0, r7]
 80088f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80088fc:	4637      	mov	r7, r6
 80088fe:	42bb      	cmp	r3, r7
 8008900:	460e      	mov	r6, r1
 8008902:	d9f4      	bls.n	80088ee <_printf_i+0x11a>
 8008904:	2b08      	cmp	r3, #8
 8008906:	d10b      	bne.n	8008920 <_printf_i+0x14c>
 8008908:	6823      	ldr	r3, [r4, #0]
 800890a:	07de      	lsls	r6, r3, #31
 800890c:	d508      	bpl.n	8008920 <_printf_i+0x14c>
 800890e:	6923      	ldr	r3, [r4, #16]
 8008910:	6861      	ldr	r1, [r4, #4]
 8008912:	4299      	cmp	r1, r3
 8008914:	bfde      	ittt	le
 8008916:	2330      	movle	r3, #48	; 0x30
 8008918:	f805 3c01 	strble.w	r3, [r5, #-1]
 800891c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008920:	1b52      	subs	r2, r2, r5
 8008922:	6122      	str	r2, [r4, #16]
 8008924:	f8cd a000 	str.w	sl, [sp]
 8008928:	464b      	mov	r3, r9
 800892a:	aa03      	add	r2, sp, #12
 800892c:	4621      	mov	r1, r4
 800892e:	4640      	mov	r0, r8
 8008930:	f7ff fee2 	bl	80086f8 <_printf_common>
 8008934:	3001      	adds	r0, #1
 8008936:	d14c      	bne.n	80089d2 <_printf_i+0x1fe>
 8008938:	f04f 30ff 	mov.w	r0, #4294967295
 800893c:	b004      	add	sp, #16
 800893e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008942:	4835      	ldr	r0, [pc, #212]	; (8008a18 <_printf_i+0x244>)
 8008944:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008948:	6829      	ldr	r1, [r5, #0]
 800894a:	6823      	ldr	r3, [r4, #0]
 800894c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008950:	6029      	str	r1, [r5, #0]
 8008952:	061d      	lsls	r5, r3, #24
 8008954:	d514      	bpl.n	8008980 <_printf_i+0x1ac>
 8008956:	07df      	lsls	r7, r3, #31
 8008958:	bf44      	itt	mi
 800895a:	f043 0320 	orrmi.w	r3, r3, #32
 800895e:	6023      	strmi	r3, [r4, #0]
 8008960:	b91e      	cbnz	r6, 800896a <_printf_i+0x196>
 8008962:	6823      	ldr	r3, [r4, #0]
 8008964:	f023 0320 	bic.w	r3, r3, #32
 8008968:	6023      	str	r3, [r4, #0]
 800896a:	2310      	movs	r3, #16
 800896c:	e7b0      	b.n	80088d0 <_printf_i+0xfc>
 800896e:	6823      	ldr	r3, [r4, #0]
 8008970:	f043 0320 	orr.w	r3, r3, #32
 8008974:	6023      	str	r3, [r4, #0]
 8008976:	2378      	movs	r3, #120	; 0x78
 8008978:	4828      	ldr	r0, [pc, #160]	; (8008a1c <_printf_i+0x248>)
 800897a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800897e:	e7e3      	b.n	8008948 <_printf_i+0x174>
 8008980:	0659      	lsls	r1, r3, #25
 8008982:	bf48      	it	mi
 8008984:	b2b6      	uxthmi	r6, r6
 8008986:	e7e6      	b.n	8008956 <_printf_i+0x182>
 8008988:	4615      	mov	r5, r2
 800898a:	e7bb      	b.n	8008904 <_printf_i+0x130>
 800898c:	682b      	ldr	r3, [r5, #0]
 800898e:	6826      	ldr	r6, [r4, #0]
 8008990:	6961      	ldr	r1, [r4, #20]
 8008992:	1d18      	adds	r0, r3, #4
 8008994:	6028      	str	r0, [r5, #0]
 8008996:	0635      	lsls	r5, r6, #24
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	d501      	bpl.n	80089a0 <_printf_i+0x1cc>
 800899c:	6019      	str	r1, [r3, #0]
 800899e:	e002      	b.n	80089a6 <_printf_i+0x1d2>
 80089a0:	0670      	lsls	r0, r6, #25
 80089a2:	d5fb      	bpl.n	800899c <_printf_i+0x1c8>
 80089a4:	8019      	strh	r1, [r3, #0]
 80089a6:	2300      	movs	r3, #0
 80089a8:	6123      	str	r3, [r4, #16]
 80089aa:	4615      	mov	r5, r2
 80089ac:	e7ba      	b.n	8008924 <_printf_i+0x150>
 80089ae:	682b      	ldr	r3, [r5, #0]
 80089b0:	1d1a      	adds	r2, r3, #4
 80089b2:	602a      	str	r2, [r5, #0]
 80089b4:	681d      	ldr	r5, [r3, #0]
 80089b6:	6862      	ldr	r2, [r4, #4]
 80089b8:	2100      	movs	r1, #0
 80089ba:	4628      	mov	r0, r5
 80089bc:	f7f7 fc98 	bl	80002f0 <memchr>
 80089c0:	b108      	cbz	r0, 80089c6 <_printf_i+0x1f2>
 80089c2:	1b40      	subs	r0, r0, r5
 80089c4:	6060      	str	r0, [r4, #4]
 80089c6:	6863      	ldr	r3, [r4, #4]
 80089c8:	6123      	str	r3, [r4, #16]
 80089ca:	2300      	movs	r3, #0
 80089cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089d0:	e7a8      	b.n	8008924 <_printf_i+0x150>
 80089d2:	6923      	ldr	r3, [r4, #16]
 80089d4:	462a      	mov	r2, r5
 80089d6:	4649      	mov	r1, r9
 80089d8:	4640      	mov	r0, r8
 80089da:	47d0      	blx	sl
 80089dc:	3001      	adds	r0, #1
 80089de:	d0ab      	beq.n	8008938 <_printf_i+0x164>
 80089e0:	6823      	ldr	r3, [r4, #0]
 80089e2:	079b      	lsls	r3, r3, #30
 80089e4:	d413      	bmi.n	8008a0e <_printf_i+0x23a>
 80089e6:	68e0      	ldr	r0, [r4, #12]
 80089e8:	9b03      	ldr	r3, [sp, #12]
 80089ea:	4298      	cmp	r0, r3
 80089ec:	bfb8      	it	lt
 80089ee:	4618      	movlt	r0, r3
 80089f0:	e7a4      	b.n	800893c <_printf_i+0x168>
 80089f2:	2301      	movs	r3, #1
 80089f4:	4632      	mov	r2, r6
 80089f6:	4649      	mov	r1, r9
 80089f8:	4640      	mov	r0, r8
 80089fa:	47d0      	blx	sl
 80089fc:	3001      	adds	r0, #1
 80089fe:	d09b      	beq.n	8008938 <_printf_i+0x164>
 8008a00:	3501      	adds	r5, #1
 8008a02:	68e3      	ldr	r3, [r4, #12]
 8008a04:	9903      	ldr	r1, [sp, #12]
 8008a06:	1a5b      	subs	r3, r3, r1
 8008a08:	42ab      	cmp	r3, r5
 8008a0a:	dcf2      	bgt.n	80089f2 <_printf_i+0x21e>
 8008a0c:	e7eb      	b.n	80089e6 <_printf_i+0x212>
 8008a0e:	2500      	movs	r5, #0
 8008a10:	f104 0619 	add.w	r6, r4, #25
 8008a14:	e7f5      	b.n	8008a02 <_printf_i+0x22e>
 8008a16:	bf00      	nop
 8008a18:	0800baed 	.word	0x0800baed
 8008a1c:	0800bafe 	.word	0x0800bafe

08008a20 <memmove>:
 8008a20:	4288      	cmp	r0, r1
 8008a22:	b510      	push	{r4, lr}
 8008a24:	eb01 0402 	add.w	r4, r1, r2
 8008a28:	d902      	bls.n	8008a30 <memmove+0x10>
 8008a2a:	4284      	cmp	r4, r0
 8008a2c:	4623      	mov	r3, r4
 8008a2e:	d807      	bhi.n	8008a40 <memmove+0x20>
 8008a30:	1e43      	subs	r3, r0, #1
 8008a32:	42a1      	cmp	r1, r4
 8008a34:	d008      	beq.n	8008a48 <memmove+0x28>
 8008a36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a3e:	e7f8      	b.n	8008a32 <memmove+0x12>
 8008a40:	4402      	add	r2, r0
 8008a42:	4601      	mov	r1, r0
 8008a44:	428a      	cmp	r2, r1
 8008a46:	d100      	bne.n	8008a4a <memmove+0x2a>
 8008a48:	bd10      	pop	{r4, pc}
 8008a4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a52:	e7f7      	b.n	8008a44 <memmove+0x24>

08008a54 <_realloc_r>:
 8008a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a58:	4680      	mov	r8, r0
 8008a5a:	4614      	mov	r4, r2
 8008a5c:	460e      	mov	r6, r1
 8008a5e:	b921      	cbnz	r1, 8008a6a <_realloc_r+0x16>
 8008a60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a64:	4611      	mov	r1, r2
 8008a66:	f7ff bc3b 	b.w	80082e0 <_malloc_r>
 8008a6a:	b92a      	cbnz	r2, 8008a78 <_realloc_r+0x24>
 8008a6c:	f7ff fbcc 	bl	8008208 <_free_r>
 8008a70:	4625      	mov	r5, r4
 8008a72:	4628      	mov	r0, r5
 8008a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a78:	f000 f81b 	bl	8008ab2 <_malloc_usable_size_r>
 8008a7c:	4284      	cmp	r4, r0
 8008a7e:	4607      	mov	r7, r0
 8008a80:	d802      	bhi.n	8008a88 <_realloc_r+0x34>
 8008a82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008a86:	d812      	bhi.n	8008aae <_realloc_r+0x5a>
 8008a88:	4621      	mov	r1, r4
 8008a8a:	4640      	mov	r0, r8
 8008a8c:	f7ff fc28 	bl	80082e0 <_malloc_r>
 8008a90:	4605      	mov	r5, r0
 8008a92:	2800      	cmp	r0, #0
 8008a94:	d0ed      	beq.n	8008a72 <_realloc_r+0x1e>
 8008a96:	42bc      	cmp	r4, r7
 8008a98:	4622      	mov	r2, r4
 8008a9a:	4631      	mov	r1, r6
 8008a9c:	bf28      	it	cs
 8008a9e:	463a      	movcs	r2, r7
 8008aa0:	f7ff fb9c 	bl	80081dc <memcpy>
 8008aa4:	4631      	mov	r1, r6
 8008aa6:	4640      	mov	r0, r8
 8008aa8:	f7ff fbae 	bl	8008208 <_free_r>
 8008aac:	e7e1      	b.n	8008a72 <_realloc_r+0x1e>
 8008aae:	4635      	mov	r5, r6
 8008ab0:	e7df      	b.n	8008a72 <_realloc_r+0x1e>

08008ab2 <_malloc_usable_size_r>:
 8008ab2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ab6:	1f18      	subs	r0, r3, #4
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	bfbc      	itt	lt
 8008abc:	580b      	ldrlt	r3, [r1, r0]
 8008abe:	18c0      	addlt	r0, r0, r3
 8008ac0:	4770      	bx	lr
	...

08008ac4 <ceilf>:
 8008ac4:	ee10 3a10 	vmov	r3, s0
 8008ac8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008acc:	3a7f      	subs	r2, #127	; 0x7f
 8008ace:	2a16      	cmp	r2, #22
 8008ad0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008ad4:	dc2a      	bgt.n	8008b2c <ceilf+0x68>
 8008ad6:	2a00      	cmp	r2, #0
 8008ad8:	da11      	bge.n	8008afe <ceilf+0x3a>
 8008ada:	eddf 7a19 	vldr	s15, [pc, #100]	; 8008b40 <ceilf+0x7c>
 8008ade:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008ae2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aea:	dd05      	ble.n	8008af8 <ceilf+0x34>
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	db23      	blt.n	8008b38 <ceilf+0x74>
 8008af0:	2900      	cmp	r1, #0
 8008af2:	bf18      	it	ne
 8008af4:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 8008af8:	ee00 3a10 	vmov	s0, r3
 8008afc:	4770      	bx	lr
 8008afe:	4911      	ldr	r1, [pc, #68]	; (8008b44 <ceilf+0x80>)
 8008b00:	4111      	asrs	r1, r2
 8008b02:	420b      	tst	r3, r1
 8008b04:	d0fa      	beq.n	8008afc <ceilf+0x38>
 8008b06:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8008b40 <ceilf+0x7c>
 8008b0a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008b0e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b16:	ddef      	ble.n	8008af8 <ceilf+0x34>
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	bfc2      	ittt	gt
 8008b1c:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8008b20:	fa40 f202 	asrgt.w	r2, r0, r2
 8008b24:	189b      	addgt	r3, r3, r2
 8008b26:	ea23 0301 	bic.w	r3, r3, r1
 8008b2a:	e7e5      	b.n	8008af8 <ceilf+0x34>
 8008b2c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008b30:	d3e4      	bcc.n	8008afc <ceilf+0x38>
 8008b32:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008b36:	4770      	bx	lr
 8008b38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008b3c:	e7dc      	b.n	8008af8 <ceilf+0x34>
 8008b3e:	bf00      	nop
 8008b40:	7149f2ca 	.word	0x7149f2ca
 8008b44:	007fffff 	.word	0x007fffff

08008b48 <_init>:
 8008b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b4a:	bf00      	nop
 8008b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b4e:	bc08      	pop	{r3}
 8008b50:	469e      	mov	lr, r3
 8008b52:	4770      	bx	lr

08008b54 <_fini>:
 8008b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b56:	bf00      	nop
 8008b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b5a:	bc08      	pop	{r3}
 8008b5c:	469e      	mov	lr, r3
 8008b5e:	4770      	bx	lr
