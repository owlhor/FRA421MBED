
H745_STAMPR_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006924  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00011bf4  08006bc4  08006bc4  00016bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080187b8  080187b8  0003018c  2**0
                  CONTENTS
  4 .ARM          00000000  080187b8  080187b8  0003018c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080187b8  080187b8  0003018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080187b8  080187b8  000287b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080187bc  080187bc  000287bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  24000000  080187c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  240000cc  0801888c  000300cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  2400012c  080188ec  0003012c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000006dc  2400018c  0801894c  0003018c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000868  0801894c  00030868  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0003018c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00016317  00000000  00000000  000301ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002a7c  00000000  00000000  000464d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f70  00000000  00000000  00048f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000df0  00000000  00000000  00049ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003c6cc  00000000  00000000  0004acb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014768  00000000  00000000  0008737c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0018a7b2  00000000  00000000  0009bae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00226296  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000043f4  00000000  00000000  002262e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400018c 	.word	0x2400018c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006bac 	.word	0x08006bac

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000190 	.word	0x24000190
 80002dc:	08006bac 	.word	0x08006bac

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000384:	4b3d      	ldr	r3, [pc, #244]	; (800047c <SystemInit+0xfc>)
 8000386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800038a:	4a3c      	ldr	r2, [pc, #240]	; (800047c <SystemInit+0xfc>)
 800038c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000394:	4b39      	ldr	r3, [pc, #228]	; (800047c <SystemInit+0xfc>)
 8000396:	691b      	ldr	r3, [r3, #16]
 8000398:	4a38      	ldr	r2, [pc, #224]	; (800047c <SystemInit+0xfc>)
 800039a:	f043 0310 	orr.w	r3, r3, #16
 800039e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003a0:	4b37      	ldr	r3, [pc, #220]	; (8000480 <SystemInit+0x100>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f003 030f 	and.w	r3, r3, #15
 80003a8:	2b06      	cmp	r3, #6
 80003aa:	d807      	bhi.n	80003bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003ac:	4b34      	ldr	r3, [pc, #208]	; (8000480 <SystemInit+0x100>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f023 030f 	bic.w	r3, r3, #15
 80003b4:	4a32      	ldr	r2, [pc, #200]	; (8000480 <SystemInit+0x100>)
 80003b6:	f043 0307 	orr.w	r3, r3, #7
 80003ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003bc:	4b31      	ldr	r3, [pc, #196]	; (8000484 <SystemInit+0x104>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a30      	ldr	r2, [pc, #192]	; (8000484 <SystemInit+0x104>)
 80003c2:	f043 0301 	orr.w	r3, r3, #1
 80003c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003c8:	4b2e      	ldr	r3, [pc, #184]	; (8000484 <SystemInit+0x104>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003ce:	4b2d      	ldr	r3, [pc, #180]	; (8000484 <SystemInit+0x104>)
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	492c      	ldr	r1, [pc, #176]	; (8000484 <SystemInit+0x104>)
 80003d4:	4b2c      	ldr	r3, [pc, #176]	; (8000488 <SystemInit+0x108>)
 80003d6:	4013      	ands	r3, r2
 80003d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003da:	4b29      	ldr	r3, [pc, #164]	; (8000480 <SystemInit+0x100>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f003 0308 	and.w	r3, r3, #8
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d007      	beq.n	80003f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003e6:	4b26      	ldr	r3, [pc, #152]	; (8000480 <SystemInit+0x100>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f023 030f 	bic.w	r3, r3, #15
 80003ee:	4a24      	ldr	r2, [pc, #144]	; (8000480 <SystemInit+0x100>)
 80003f0:	f043 0307 	orr.w	r3, r3, #7
 80003f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80003f6:	4b23      	ldr	r3, [pc, #140]	; (8000484 <SystemInit+0x104>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80003fc:	4b21      	ldr	r3, [pc, #132]	; (8000484 <SystemInit+0x104>)
 80003fe:	2200      	movs	r2, #0
 8000400:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000402:	4b20      	ldr	r3, [pc, #128]	; (8000484 <SystemInit+0x104>)
 8000404:	2200      	movs	r2, #0
 8000406:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000408:	4b1e      	ldr	r3, [pc, #120]	; (8000484 <SystemInit+0x104>)
 800040a:	4a20      	ldr	r2, [pc, #128]	; (800048c <SystemInit+0x10c>)
 800040c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800040e:	4b1d      	ldr	r3, [pc, #116]	; (8000484 <SystemInit+0x104>)
 8000410:	4a1f      	ldr	r2, [pc, #124]	; (8000490 <SystemInit+0x110>)
 8000412:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000414:	4b1b      	ldr	r3, [pc, #108]	; (8000484 <SystemInit+0x104>)
 8000416:	4a1f      	ldr	r2, [pc, #124]	; (8000494 <SystemInit+0x114>)
 8000418:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800041a:	4b1a      	ldr	r3, [pc, #104]	; (8000484 <SystemInit+0x104>)
 800041c:	2200      	movs	r2, #0
 800041e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000420:	4b18      	ldr	r3, [pc, #96]	; (8000484 <SystemInit+0x104>)
 8000422:	4a1c      	ldr	r2, [pc, #112]	; (8000494 <SystemInit+0x114>)
 8000424:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000426:	4b17      	ldr	r3, [pc, #92]	; (8000484 <SystemInit+0x104>)
 8000428:	2200      	movs	r2, #0
 800042a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800042c:	4b15      	ldr	r3, [pc, #84]	; (8000484 <SystemInit+0x104>)
 800042e:	4a19      	ldr	r2, [pc, #100]	; (8000494 <SystemInit+0x114>)
 8000430:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000432:	4b14      	ldr	r3, [pc, #80]	; (8000484 <SystemInit+0x104>)
 8000434:	2200      	movs	r2, #0
 8000436:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000438:	4b12      	ldr	r3, [pc, #72]	; (8000484 <SystemInit+0x104>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a11      	ldr	r2, [pc, #68]	; (8000484 <SystemInit+0x104>)
 800043e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000442:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000444:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <SystemInit+0x104>)
 8000446:	2200      	movs	r2, #0
 8000448:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800044a:	4b13      	ldr	r3, [pc, #76]	; (8000498 <SystemInit+0x118>)
 800044c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800044e:	4a12      	ldr	r2, [pc, #72]	; (8000498 <SystemInit+0x118>)
 8000450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000454:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000456:	4b11      	ldr	r3, [pc, #68]	; (800049c <SystemInit+0x11c>)
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	4b11      	ldr	r3, [pc, #68]	; (80004a0 <SystemInit+0x120>)
 800045c:	4013      	ands	r3, r2
 800045e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000462:	d202      	bcs.n	800046a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000464:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <SystemInit+0x124>)
 8000466:	2201      	movs	r2, #1
 8000468:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800046a:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <SystemInit+0x128>)
 800046c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000470:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000472:	bf00      	nop
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr
 800047c:	e000ed00 	.word	0xe000ed00
 8000480:	52002000 	.word	0x52002000
 8000484:	58024400 	.word	0x58024400
 8000488:	eaf6ed7f 	.word	0xeaf6ed7f
 800048c:	02020200 	.word	0x02020200
 8000490:	01ff0000 	.word	0x01ff0000
 8000494:	01010280 	.word	0x01010280
 8000498:	580000c0 	.word	0x580000c0
 800049c:	5c001000 	.word	0x5c001000
 80004a0:	ffff0000 	.word	0xffff0000
 80004a4:	51008108 	.word	0x51008108
 80004a8:	52004000 	.word	0x52004000

080004ac <ili9486_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9486_DisplayOn(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_SLPOUT);    // Exit Sleep
 80004b0:	2011      	movs	r0, #17
 80004b2:	f000 fc93 	bl	8000ddc <LCD_IO_WriteCmd8>
  ILI9486_LCDMUTEX_POP();
  LCD_IO_Bl_OnOff(1);
 80004b6:	2001      	movs	r0, #1
 80004b8:	f000 fb9b 	bl	8000bf2 <LCD_IO_Bl_OnOff>
}
 80004bc:	bf00      	nop
 80004be:	bd80      	pop	{r7, pc}

080004c0 <ili9486_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9486_GetLcdPixelWidth(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  return ILI9486_SIZE_X;
 80004c4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr

080004d2 <ili9486_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9486_GetLcdPixelHeight(void)
{
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0
  return ILI9486_SIZE_Y;
 80004d6:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80004da:	4618      	mov	r0, r3
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr

080004e4 <ili9486_Init>:
  * @brief  ILI9486 initialization
  * @param  None
  * @retval None
  */
void ili9486_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  if((Is_ili9486_Initialized & ILI9486_LCD_INITIALIZED) == 0)
 80004e8:	4b33      	ldr	r3, [pc, #204]	; (80005b8 <ili9486_Init+0xd4>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	f003 0301 	and.w	r3, r3, #1
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d115      	bne.n	8000520 <ili9486_Init+0x3c>
  {
    Is_ili9486_Initialized |= ILI9486_LCD_INITIALIZED;
 80004f4:	4b30      	ldr	r3, [pc, #192]	; (80005b8 <ili9486_Init+0xd4>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	f043 0301 	orr.w	r3, r3, #1
 80004fc:	b2da      	uxtb	r2, r3
 80004fe:	4b2e      	ldr	r3, [pc, #184]	; (80005b8 <ili9486_Init+0xd4>)
 8000500:	701a      	strb	r2, [r3, #0]
    if((Is_ili9486_Initialized & ILI9486_IO_INITIALIZED) == 0)
 8000502:	4b2d      	ldr	r3, [pc, #180]	; (80005b8 <ili9486_Init+0xd4>)
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	f003 0302 	and.w	r3, r3, #2
 800050a:	2b00      	cmp	r3, #0
 800050c:	d101      	bne.n	8000512 <ili9486_Init+0x2e>
      LCD_IO_Init();
 800050e:	f000 fb7b 	bl	8000c08 <LCD_IO_Init>
    Is_ili9486_Initialized |= ILI9486_IO_INITIALIZED;
 8000512:	4b29      	ldr	r3, [pc, #164]	; (80005b8 <ili9486_Init+0xd4>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	f043 0302 	orr.w	r3, r3, #2
 800051a:	b2da      	uxtb	r2, r3
 800051c:	4b26      	ldr	r3, [pc, #152]	; (80005b8 <ili9486_Init+0xd4>)
 800051e:	701a      	strb	r2, [r3, #0]
  }
  LCD_Delay(10);
 8000520:	200a      	movs	r0, #10
 8000522:	f000 fb5b 	bl	8000bdc <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9486_SWRESET);
 8000526:	2001      	movs	r0, #1
 8000528:	f000 fc58 	bl	8000ddc <LCD_IO_WriteCmd8>
  LCD_Delay(100);
 800052c:	2064      	movs	r0, #100	; 0x64
 800052e:	f000 fb55 	bl	8000bdc <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(ILI9486_RGB_INTERFACE, (uint8_t *)"\x00", 1); // RGB mode off (0xB0)
 8000532:	2201      	movs	r2, #1
 8000534:	4921      	ldr	r1, [pc, #132]	; (80005bc <ili9486_Init+0xd8>)
 8000536:	20b0      	movs	r0, #176	; 0xb0
 8000538:	f001 f894 	bl	8001664 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8(ILI9486_SLPOUT);    // Exit Sleep (0x11)
 800053c:	2011      	movs	r0, #17
 800053e:	f000 fc4d 	bl	8000ddc <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8000542:	200a      	movs	r0, #10
 8000544:	f000 fb4a 	bl	8000bdc <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(ILI9486_PIXFMT, (uint8_t *)"\x55", 1); // interface format (0x3A)
 8000548:	2201      	movs	r2, #1
 800054a:	491d      	ldr	r1, [pc, #116]	; (80005c0 <ili9486_Init+0xdc>)
 800054c:	203a      	movs	r0, #58	; 0x3a
 800054e:	f001 f889 	bl	8001664 <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9486_MADCTL); LCD_IO_WriteData8(ILI9486_MAD_DATA_RIGHT_THEN_DOWN);
 8000552:	2036      	movs	r0, #54	; 0x36
 8000554:	f000 fc42 	bl	8000ddc <LCD_IO_WriteCmd8>
 8000558:	2028      	movs	r0, #40	; 0x28
 800055a:	f000 fce9 	bl	8000f30 <LCD_IO_WriteData8>

  LCD_IO_WriteCmd8MultipleData8(ILI9486_PWCTR3, (uint8_t *)"\x44", 1); // 0xC2
 800055e:	2201      	movs	r2, #1
 8000560:	4918      	ldr	r1, [pc, #96]	; (80005c4 <ili9486_Init+0xe0>)
 8000562:	20c2      	movs	r0, #194	; 0xc2
 8000564:	f001 f87e 	bl	8001664 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9486_VMCTR1, (uint8_t *)"\x00\x00\x00\x00", 4); // 0xC5
 8000568:	2204      	movs	r2, #4
 800056a:	4917      	ldr	r1, [pc, #92]	; (80005c8 <ili9486_Init+0xe4>)
 800056c:	20c5      	movs	r0, #197	; 0xc5
 800056e:	f001 f879 	bl	8001664 <LCD_IO_WriteCmd8MultipleData8>

  // positive gamma control (0xE0)
  LCD_IO_WriteCmd8MultipleData8(ILI9486_GMCTRP1, (uint8_t *)"\x0F\x1F\x1C\x0C\x0F\x08\x48\x98\x37\x0A\x13\x04\x11\x0D\x00", 15);
 8000572:	220f      	movs	r2, #15
 8000574:	4915      	ldr	r1, [pc, #84]	; (80005cc <ili9486_Init+0xe8>)
 8000576:	20e0      	movs	r0, #224	; 0xe0
 8000578:	f001 f874 	bl	8001664 <LCD_IO_WriteCmd8MultipleData8>

  // negative gamma control (0xE1)
  LCD_IO_WriteCmd8MultipleData8(ILI9486_GMCTRN1, (uint8_t *)"\x0F\x32\x2E\x0B\x0D\x05\x47\x75\x37\x06\x10\x03\x24\x20\x00", 15);
 800057c:	220f      	movs	r2, #15
 800057e:	4914      	ldr	r1, [pc, #80]	; (80005d0 <ili9486_Init+0xec>)
 8000580:	20e1      	movs	r0, #225	; 0xe1
 8000582:	f001 f86f 	bl	8001664 <LCD_IO_WriteCmd8MultipleData8>

  // Digital gamma control1 (0xE2)
  LCD_IO_WriteCmd8MultipleData8(ILI9486_DGCTR1, (uint8_t *)"\x0F\x32\x2E\x0B\x0D\x05\x47\x75\x37\x06\x10\x03\x24\x20\x00", 15);
 8000586:	220f      	movs	r2, #15
 8000588:	4911      	ldr	r1, [pc, #68]	; (80005d0 <ili9486_Init+0xec>)
 800058a:	20e2      	movs	r0, #226	; 0xe2
 800058c:	f001 f86a 	bl	8001664 <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9486_NORON);     // Normal display on (0x13)
 8000590:	2013      	movs	r0, #19
 8000592:	f000 fc23 	bl	8000ddc <LCD_IO_WriteCmd8>
  LCD_IO_WriteCmd8(ILI9486_INVOFF);    // Display inversion off (0x20)
 8000596:	2020      	movs	r0, #32
 8000598:	f000 fc20 	bl	8000ddc <LCD_IO_WriteCmd8>
  LCD_IO_WriteCmd8(ILI9486_SLPOUT);    // Exit Sleep (0x11)
 800059c:	2011      	movs	r0, #17
 800059e:	f000 fc1d 	bl	8000ddc <LCD_IO_WriteCmd8>
  LCD_Delay(200);
 80005a2:	20c8      	movs	r0, #200	; 0xc8
 80005a4:	f000 fb1a 	bl	8000bdc <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9486_DISPON);    // Display on (0x29)
 80005a8:	2029      	movs	r0, #41	; 0x29
 80005aa:	f000 fc17 	bl	8000ddc <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 80005ae:	200a      	movs	r0, #10
 80005b0:	f000 fb14 	bl	8000bdc <LCD_Delay>
}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	240001a8 	.word	0x240001a8
 80005bc:	08006bc4 	.word	0x08006bc4
 80005c0:	08006bc8 	.word	0x08006bc8
 80005c4:	08006bcc 	.word	0x08006bcc
 80005c8:	08006bd0 	.word	0x08006bd0
 80005cc:	08006bd8 	.word	0x08006bd8
 80005d0:	08006be8 	.word	0x08006be8

080005d4 <ili9486_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9486_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	80fb      	strh	r3, [r7, #6]
 80005de:	460b      	mov	r3, r1
 80005e0:	80bb      	strh	r3, [r7, #4]
 80005e2:	4613      	mov	r3, r2
 80005e4:	807b      	strh	r3, [r7, #2]
  ILI9486_LCDMUTEX_PUSH();
  ILI9486_SETCURSOR(Xpos, Ypos);
 80005e6:	202a      	movs	r0, #42	; 0x2a
 80005e8:	f000 fbf8 	bl	8000ddc <LCD_IO_WriteCmd8>
 80005ec:	88fb      	ldrh	r3, [r7, #6]
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 fc9b 	bl	8000f30 <LCD_IO_WriteData8>
 80005fa:	88fb      	ldrh	r3, [r7, #6]
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 fc96 	bl	8000f30 <LCD_IO_WriteData8>
 8000604:	88fb      	ldrh	r3, [r7, #6]
 8000606:	0a1b      	lsrs	r3, r3, #8
 8000608:	b29b      	uxth	r3, r3
 800060a:	b2db      	uxtb	r3, r3
 800060c:	4618      	mov	r0, r3
 800060e:	f000 fc8f 	bl	8000f30 <LCD_IO_WriteData8>
 8000612:	88fb      	ldrh	r3, [r7, #6]
 8000614:	b2db      	uxtb	r3, r3
 8000616:	4618      	mov	r0, r3
 8000618:	f000 fc8a 	bl	8000f30 <LCD_IO_WriteData8>
 800061c:	202b      	movs	r0, #43	; 0x2b
 800061e:	f000 fbdd 	bl	8000ddc <LCD_IO_WriteCmd8>
 8000622:	88bb      	ldrh	r3, [r7, #4]
 8000624:	0a1b      	lsrs	r3, r3, #8
 8000626:	b29b      	uxth	r3, r3
 8000628:	b2db      	uxtb	r3, r3
 800062a:	4618      	mov	r0, r3
 800062c:	f000 fc80 	bl	8000f30 <LCD_IO_WriteData8>
 8000630:	88bb      	ldrh	r3, [r7, #4]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	4618      	mov	r0, r3
 8000636:	f000 fc7b 	bl	8000f30 <LCD_IO_WriteData8>
 800063a:	88bb      	ldrh	r3, [r7, #4]
 800063c:	0a1b      	lsrs	r3, r3, #8
 800063e:	b29b      	uxth	r3, r3
 8000640:	b2db      	uxtb	r3, r3
 8000642:	4618      	mov	r0, r3
 8000644:	f000 fc74 	bl	8000f30 <LCD_IO_WriteData8>
 8000648:	88bb      	ldrh	r3, [r7, #4]
 800064a:	b2db      	uxtb	r3, r3
 800064c:	4618      	mov	r0, r3
 800064e:	f000 fc6f 	bl	8000f30 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_RAMWR); LCD_IO_WriteData16(RGBCode);
 8000652:	202c      	movs	r0, #44	; 0x2c
 8000654:	f000 fbc2 	bl	8000ddc <LCD_IO_WriteCmd8>
 8000658:	887b      	ldrh	r3, [r7, #2]
 800065a:	4618      	mov	r0, r3
 800065c:	f000 fd0a 	bl	8001074 <LCD_IO_WriteData16>
  ILI9486_LCDMUTEX_POP();
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <ili9486_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9486_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8000668:	b590      	push	{r4, r7, lr}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	4604      	mov	r4, r0
 8000670:	4608      	mov	r0, r1
 8000672:	4611      	mov	r1, r2
 8000674:	461a      	mov	r2, r3
 8000676:	4623      	mov	r3, r4
 8000678:	80fb      	strh	r3, [r7, #6]
 800067a:	4603      	mov	r3, r0
 800067c:	80bb      	strh	r3, [r7, #4]
 800067e:	460b      	mov	r3, r1
 8000680:	807b      	strh	r3, [r7, #2]
 8000682:	4613      	mov	r3, r2
 8000684:	803b      	strh	r3, [r7, #0]
  yStart = Ypos; yEnd = Ypos + Height - 1;
 8000686:	4a2a      	ldr	r2, [pc, #168]	; (8000730 <ili9486_SetDisplayWindow+0xc8>)
 8000688:	88bb      	ldrh	r3, [r7, #4]
 800068a:	8013      	strh	r3, [r2, #0]
 800068c:	88ba      	ldrh	r2, [r7, #4]
 800068e:	883b      	ldrh	r3, [r7, #0]
 8000690:	4413      	add	r3, r2
 8000692:	b29b      	uxth	r3, r3
 8000694:	3b01      	subs	r3, #1
 8000696:	b29a      	uxth	r2, r3
 8000698:	4b26      	ldr	r3, [pc, #152]	; (8000734 <ili9486_SetDisplayWindow+0xcc>)
 800069a:	801a      	strh	r2, [r3, #0]
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Width - 1);
 800069c:	202a      	movs	r0, #42	; 0x2a
 800069e:	f000 fb9d 	bl	8000ddc <LCD_IO_WriteCmd8>
 80006a2:	88fb      	ldrh	r3, [r7, #6]
 80006a4:	0a1b      	lsrs	r3, r3, #8
 80006a6:	b29b      	uxth	r3, r3
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 fc40 	bl	8000f30 <LCD_IO_WriteData8>
 80006b0:	88fb      	ldrh	r3, [r7, #6]
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 fc3b 	bl	8000f30 <LCD_IO_WriteData8>
 80006ba:	88fa      	ldrh	r2, [r7, #6]
 80006bc:	887b      	ldrh	r3, [r7, #2]
 80006be:	4413      	add	r3, r2
 80006c0:	3b01      	subs	r3, #1
 80006c2:	121b      	asrs	r3, r3, #8
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 fc32 	bl	8000f30 <LCD_IO_WriteData8>
 80006cc:	88fb      	ldrh	r3, [r7, #6]
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	887b      	ldrh	r3, [r7, #2]
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	4413      	add	r3, r2
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	3b01      	subs	r3, #1
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 fc27 	bl	8000f30 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Height - 1);
 80006e2:	202b      	movs	r0, #43	; 0x2b
 80006e4:	f000 fb7a 	bl	8000ddc <LCD_IO_WriteCmd8>
 80006e8:	88bb      	ldrh	r3, [r7, #4]
 80006ea:	0a1b      	lsrs	r3, r3, #8
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 fc1d 	bl	8000f30 <LCD_IO_WriteData8>
 80006f6:	88bb      	ldrh	r3, [r7, #4]
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 fc18 	bl	8000f30 <LCD_IO_WriteData8>
 8000700:	88ba      	ldrh	r2, [r7, #4]
 8000702:	883b      	ldrh	r3, [r7, #0]
 8000704:	4413      	add	r3, r2
 8000706:	3b01      	subs	r3, #1
 8000708:	121b      	asrs	r3, r3, #8
 800070a:	b2db      	uxtb	r3, r3
 800070c:	4618      	mov	r0, r3
 800070e:	f000 fc0f 	bl	8000f30 <LCD_IO_WriteData8>
 8000712:	88bb      	ldrh	r3, [r7, #4]
 8000714:	b2da      	uxtb	r2, r3
 8000716:	883b      	ldrh	r3, [r7, #0]
 8000718:	b2db      	uxtb	r3, r3
 800071a:	4413      	add	r3, r2
 800071c:	b2db      	uxtb	r3, r3
 800071e:	3b01      	subs	r3, #1
 8000720:	b2db      	uxtb	r3, r3
 8000722:	4618      	mov	r0, r3
 8000724:	f000 fc04 	bl	8000f30 <LCD_IO_WriteData8>
  ILI9486_LCDMUTEX_POP();
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	bd90      	pop	{r4, r7, pc}
 8000730:	240001aa 	.word	0x240001aa
 8000734:	240001ac 	.word	0x240001ac

08000738 <ili9486_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9486_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 8000738:	b590      	push	{r4, r7, lr}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	4604      	mov	r4, r0
 8000740:	4608      	mov	r0, r1
 8000742:	4611      	mov	r1, r2
 8000744:	461a      	mov	r2, r3
 8000746:	4623      	mov	r3, r4
 8000748:	80fb      	strh	r3, [r7, #6]
 800074a:	4603      	mov	r3, r0
 800074c:	80bb      	strh	r3, [r7, #4]
 800074e:	460b      	mov	r3, r1
 8000750:	807b      	strh	r3, [r7, #2]
 8000752:	4613      	mov	r3, r2
 8000754:	803b      	strh	r3, [r7, #0]
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Xsize - 1);
 8000756:	202a      	movs	r0, #42	; 0x2a
 8000758:	f000 fb40 	bl	8000ddc <LCD_IO_WriteCmd8>
 800075c:	88fb      	ldrh	r3, [r7, #6]
 800075e:	0a1b      	lsrs	r3, r3, #8
 8000760:	b29b      	uxth	r3, r3
 8000762:	b2db      	uxtb	r3, r3
 8000764:	4618      	mov	r0, r3
 8000766:	f000 fbe3 	bl	8000f30 <LCD_IO_WriteData8>
 800076a:	88fb      	ldrh	r3, [r7, #6]
 800076c:	b2db      	uxtb	r3, r3
 800076e:	4618      	mov	r0, r3
 8000770:	f000 fbde 	bl	8000f30 <LCD_IO_WriteData8>
 8000774:	88fa      	ldrh	r2, [r7, #6]
 8000776:	887b      	ldrh	r3, [r7, #2]
 8000778:	4413      	add	r3, r2
 800077a:	3b01      	subs	r3, #1
 800077c:	121b      	asrs	r3, r3, #8
 800077e:	b2db      	uxtb	r3, r3
 8000780:	4618      	mov	r0, r3
 8000782:	f000 fbd5 	bl	8000f30 <LCD_IO_WriteData8>
 8000786:	88fb      	ldrh	r3, [r7, #6]
 8000788:	b2da      	uxtb	r2, r3
 800078a:	887b      	ldrh	r3, [r7, #2]
 800078c:	b2db      	uxtb	r3, r3
 800078e:	4413      	add	r3, r2
 8000790:	b2db      	uxtb	r3, r3
 8000792:	3b01      	subs	r3, #1
 8000794:	b2db      	uxtb	r3, r3
 8000796:	4618      	mov	r0, r3
 8000798:	f000 fbca 	bl	8000f30 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Ysize - 1);
 800079c:	202b      	movs	r0, #43	; 0x2b
 800079e:	f000 fb1d 	bl	8000ddc <LCD_IO_WriteCmd8>
 80007a2:	88bb      	ldrh	r3, [r7, #4]
 80007a4:	0a1b      	lsrs	r3, r3, #8
 80007a6:	b29b      	uxth	r3, r3
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 fbc0 	bl	8000f30 <LCD_IO_WriteData8>
 80007b0:	88bb      	ldrh	r3, [r7, #4]
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	4618      	mov	r0, r3
 80007b6:	f000 fbbb 	bl	8000f30 <LCD_IO_WriteData8>
 80007ba:	88ba      	ldrh	r2, [r7, #4]
 80007bc:	883b      	ldrh	r3, [r7, #0]
 80007be:	4413      	add	r3, r2
 80007c0:	3b01      	subs	r3, #1
 80007c2:	121b      	asrs	r3, r3, #8
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 fbb2 	bl	8000f30 <LCD_IO_WriteData8>
 80007cc:	88bb      	ldrh	r3, [r7, #4]
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	883b      	ldrh	r3, [r7, #0]
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	4413      	add	r3, r2
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	3b01      	subs	r3, #1
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 fba7 	bl	8000f30 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9486_RAMWR, RGBCode, Xsize * Ysize);
 80007e2:	887b      	ldrh	r3, [r7, #2]
 80007e4:	883a      	ldrh	r2, [r7, #0]
 80007e6:	fb02 f303 	mul.w	r3, r2, r3
 80007ea:	461a      	mov	r2, r3
 80007ec:	8b3b      	ldrh	r3, [r7, #24]
 80007ee:	4619      	mov	r1, r3
 80007f0:	202c      	movs	r0, #44	; 0x2c
 80007f2:	f000 fd69 	bl	80012c8 <LCD_IO_WriteCmd8DataFill16>
  ILI9486_LCDMUTEX_POP();
}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd90      	pop	{r4, r7, pc}

080007fe <ili9486_DrawRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9486_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 80007fe:	b590      	push	{r4, r7, lr}
 8000800:	b083      	sub	sp, #12
 8000802:	af00      	add	r7, sp, #0
 8000804:	4604      	mov	r4, r0
 8000806:	4608      	mov	r0, r1
 8000808:	4611      	mov	r1, r2
 800080a:	461a      	mov	r2, r3
 800080c:	4623      	mov	r3, r4
 800080e:	80fb      	strh	r3, [r7, #6]
 8000810:	4603      	mov	r3, r0
 8000812:	80bb      	strh	r3, [r7, #4]
 8000814:	460b      	mov	r3, r1
 8000816:	807b      	strh	r3, [r7, #2]
 8000818:	4613      	mov	r3, r2
 800081a:	803b      	strh	r3, [r7, #0]
  ili9486_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 800081c:	883b      	ldrh	r3, [r7, #0]
 800081e:	887a      	ldrh	r2, [r7, #2]
 8000820:	88b9      	ldrh	r1, [r7, #4]
 8000822:	88f8      	ldrh	r0, [r7, #6]
 8000824:	f7ff ff20 	bl	8000668 <ili9486_SetDisplayWindow>
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData16(ILI9486_RAMWR, pData, Xsize * Ysize);
 8000828:	887b      	ldrh	r3, [r7, #2]
 800082a:	883a      	ldrh	r2, [r7, #0]
 800082c:	fb02 f303 	mul.w	r3, r2, r3
 8000830:	461a      	mov	r2, r3
 8000832:	69b9      	ldr	r1, [r7, #24]
 8000834:	202c      	movs	r0, #44	; 0x2c
 8000836:	f001 f84f 	bl	80018d8 <LCD_IO_WriteCmd8MultipleData16>
  ILI9486_LCDMUTEX_POP();
}
 800083a:	bf00      	nop
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	bd90      	pop	{r4, r7, pc}

08000842 <ili9486_WriteChar>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Char background Color
  * @retval None
  */
void ili9486_WriteChar(uint16_t Xpo, uint16_t Ypo, char *chr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 8000842:	b082      	sub	sp, #8
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	; 0x28
 8000848:	af00      	add	r7, sp, #0
 800084a:	603a      	str	r2, [r7, #0]
 800084c:	637b      	str	r3, [r7, #52]	; 0x34
 800084e:	4603      	mov	r3, r0
 8000850:	80fb      	strh	r3, [r7, #6]
 8000852:	460b      	mov	r3, r1
 8000854:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9486_WriteChar(140, 50, "E", Font24, cl_ORANGE, cl_BLACK);
	 * */
	//// stored font data
	uint32_t hop32 = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t b8[4] = {0};
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
	 * c = i * rowbox -> jump to next column in next i rowloop
	 * k => jump to next row in that column
	 * */

	//// find num of bit rows per jump in fonts.c
	int rowbox = ceilf((float)(fonto.Width) / 8);
 800085e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000860:	ee07 3a90 	vmov	s15, r3
 8000864:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000868:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800086c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000870:	eeb0 0a47 	vmov.f32	s0, s14
 8000874:	f006 f958 	bl	8006b28 <ceilf>
 8000878:	eef0 7a40 	vmov.f32	s15, s0
 800087c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000880:	ee17 3a90 	vmov	r3, s15
 8000884:	617b      	str	r3, [r7, #20]

	//// choose MSB check pos for each font size
	//// 0x80 , 0x8000 , 0x 800000
	uint32_t clif_msb = 0x80 << (8 * (rowbox - 1));
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	3b01      	subs	r3, #1
 800088a:	00db      	lsls	r3, r3, #3
 800088c:	2280      	movs	r2, #128	; 0x80
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	613b      	str	r3, [r7, #16]

	//// -32 to offset sync ASCII Table start " " at 32
	//// double for loop as one char table
	for(int i = 0; i < fonto.Height; i++){
 8000894:	2300      	movs	r3, #0
 8000896:	623b      	str	r3, [r7, #32]
 8000898:	e060      	b.n	800095c <ili9486_WriteChar+0x11a>
		hop32 = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
 80008a2:	e024      	b.n	80008ee <ili9486_WriteChar+0xac>
			b8[k] = fonto.table[((int)(*chr - 32) * fonto.Height * rowbox) + (i * rowbox) + k];
 80008a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008a6:	683a      	ldr	r2, [r7, #0]
 80008a8:	7812      	ldrb	r2, [r2, #0]
 80008aa:	3a20      	subs	r2, #32
 80008ac:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 80008ae:	fb01 f202 	mul.w	r2, r1, r2
 80008b2:	6979      	ldr	r1, [r7, #20]
 80008b4:	fb02 f101 	mul.w	r1, r2, r1
 80008b8:	6a3a      	ldr	r2, [r7, #32]
 80008ba:	6978      	ldr	r0, [r7, #20]
 80008bc:	fb00 f202 	mul.w	r2, r0, r2
 80008c0:	4411      	add	r1, r2
 80008c2:	69fa      	ldr	r2, [r7, #28]
 80008c4:	440a      	add	r2, r1
 80008c6:	4413      	add	r3, r2
 80008c8:	7819      	ldrb	r1, [r3, #0]
 80008ca:	f107 020c 	add.w	r2, r7, #12
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	4413      	add	r3, r2
 80008d2:	460a      	mov	r2, r1
 80008d4:	701a      	strb	r2, [r3, #0]
			hop32 = (hop32 << 8) + b8[k];
 80008d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d8:	021b      	lsls	r3, r3, #8
 80008da:	f107 010c 	add.w	r1, r7, #12
 80008de:	69fa      	ldr	r2, [r7, #28]
 80008e0:	440a      	add	r2, r1
 80008e2:	7812      	ldrb	r2, [r2, #0]
 80008e4:	4413      	add	r3, r2
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 80008e8:	69fb      	ldr	r3, [r7, #28]
 80008ea:	3301      	adds	r3, #1
 80008ec:	61fb      	str	r3, [r7, #28]
 80008ee:	69fa      	ldr	r2, [r7, #28]
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	429a      	cmp	r2, r3
 80008f4:	dbd6      	blt.n	80008a4 <ili9486_WriteChar+0x62>
		}

		for(int j = 0; j < fonto.Width; j++){
 80008f6:	2300      	movs	r3, #0
 80008f8:	61bb      	str	r3, [r7, #24]
 80008fa:	e027      	b.n	800094c <ili9486_WriteChar+0x10a>
			//// if valuein fonttable is 1
			if((hop32 << j) & clif_msb){ // buu32.b32
 80008fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008fe:	69bb      	ldr	r3, [r7, #24]
 8000900:	409a      	lsls	r2, r3
 8000902:	693b      	ldr	r3, [r7, #16]
 8000904:	4013      	ands	r3, r2
 8000906:	2b00      	cmp	r3, #0
 8000908:	d00e      	beq.n	8000928 <ili9486_WriteChar+0xe6>
				ili9486_WritePixel(Xpo + j, Ypo + i, RGB_Coder);
 800090a:	69bb      	ldr	r3, [r7, #24]
 800090c:	b29a      	uxth	r2, r3
 800090e:	88fb      	ldrh	r3, [r7, #6]
 8000910:	4413      	add	r3, r2
 8000912:	b298      	uxth	r0, r3
 8000914:	6a3b      	ldr	r3, [r7, #32]
 8000916:	b29a      	uxth	r2, r3
 8000918:	88bb      	ldrh	r3, [r7, #4]
 800091a:	4413      	add	r3, r2
 800091c:	b29b      	uxth	r3, r3
 800091e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8000920:	4619      	mov	r1, r3
 8000922:	f7ff fe57 	bl	80005d4 <ili9486_WritePixel>
 8000926:	e00e      	b.n	8000946 <ili9486_WriteChar+0x104>
			}
			//// for background write
			else{
				ili9486_WritePixel(Xpo + j, Ypo + i, RGB_bg);
 8000928:	69bb      	ldr	r3, [r7, #24]
 800092a:	b29a      	uxth	r2, r3
 800092c:	88fb      	ldrh	r3, [r7, #6]
 800092e:	4413      	add	r3, r2
 8000930:	b298      	uxth	r0, r3
 8000932:	6a3b      	ldr	r3, [r7, #32]
 8000934:	b29a      	uxth	r2, r3
 8000936:	88bb      	ldrh	r3, [r7, #4]
 8000938:	4413      	add	r3, r2
 800093a:	b29b      	uxth	r3, r3
 800093c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8000940:	4619      	mov	r1, r3
 8000942:	f7ff fe47 	bl	80005d4 <ili9486_WritePixel>
		for(int j = 0; j < fonto.Width; j++){
 8000946:	69bb      	ldr	r3, [r7, #24]
 8000948:	3301      	adds	r3, #1
 800094a:	61bb      	str	r3, [r7, #24]
 800094c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800094e:	461a      	mov	r2, r3
 8000950:	69bb      	ldr	r3, [r7, #24]
 8000952:	4293      	cmp	r3, r2
 8000954:	dbd2      	blt.n	80008fc <ili9486_WriteChar+0xba>
	for(int i = 0; i < fonto.Height; i++){
 8000956:	6a3b      	ldr	r3, [r7, #32]
 8000958:	3301      	adds	r3, #1
 800095a:	623b      	str	r3, [r7, #32]
 800095c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800095e:	461a      	mov	r2, r3
 8000960:	6a3b      	ldr	r3, [r7, #32]
 8000962:	4293      	cmp	r3, r2
 8000964:	db99      	blt.n	800089a <ili9486_WriteChar+0x58>
			}

		}
	}
}
 8000966:	bf00      	nop
 8000968:	bf00      	nop
 800096a:	3728      	adds	r7, #40	; 0x28
 800096c:	46bd      	mov	sp, r7
 800096e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000972:	b002      	add	sp, #8
 8000974:	4770      	bx	lr

08000976 <ili9486_WriteCharNoBG>:
  * @param  chr:  Display Char
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @retval None
  */
void ili9486_WriteCharNoBG(uint16_t Xpo, uint16_t Ypo, char *chr,sFONT fonto, uint16_t RGB_Coder){
 8000976:	b082      	sub	sp, #8
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	; 0x28
 800097c:	af00      	add	r7, sp, #0
 800097e:	603a      	str	r2, [r7, #0]
 8000980:	637b      	str	r3, [r7, #52]	; 0x34
 8000982:	4603      	mov	r3, r0
 8000984:	80fb      	strh	r3, [r7, #6]
 8000986:	460b      	mov	r3, r1
 8000988:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9486_WriteCharNoBG(10, 30, "E", Font24, cl_ORANGE);
	 * */
	//// stored font data
	uint32_t hop32 = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t b8[4] = {0};
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]

	//// find num of bit rows per jump in fonts.c
	int rowbox = ceilf((float)(fonto.Width) / 8);
 8000992:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000994:	ee07 3a90 	vmov	s15, r3
 8000998:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800099c:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80009a0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80009a4:	eeb0 0a47 	vmov.f32	s0, s14
 80009a8:	f006 f8be 	bl	8006b28 <ceilf>
 80009ac:	eef0 7a40 	vmov.f32	s15, s0
 80009b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009b4:	ee17 3a90 	vmov	r3, s15
 80009b8:	617b      	str	r3, [r7, #20]
	uint32_t clif_msb = 0x80 << (8 * (rowbox - 1));
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	3b01      	subs	r3, #1
 80009be:	00db      	lsls	r3, r3, #3
 80009c0:	2280      	movs	r2, #128	; 0x80
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < fonto.Height; i++){
 80009c8:	2300      	movs	r3, #0
 80009ca:	623b      	str	r3, [r7, #32]
 80009cc:	e050      	b.n	8000a70 <ili9486_WriteCharNoBG+0xfa>
		hop32 = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 80009d2:	2300      	movs	r3, #0
 80009d4:	61fb      	str	r3, [r7, #28]
 80009d6:	e024      	b.n	8000a22 <ili9486_WriteCharNoBG+0xac>
			b8[k] = fonto.table[((int)(*chr - 32) * fonto.Height * rowbox) + (i * rowbox) + k];
 80009d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009da:	683a      	ldr	r2, [r7, #0]
 80009dc:	7812      	ldrb	r2, [r2, #0]
 80009de:	3a20      	subs	r2, #32
 80009e0:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 80009e2:	fb01 f202 	mul.w	r2, r1, r2
 80009e6:	6979      	ldr	r1, [r7, #20]
 80009e8:	fb02 f101 	mul.w	r1, r2, r1
 80009ec:	6a3a      	ldr	r2, [r7, #32]
 80009ee:	6978      	ldr	r0, [r7, #20]
 80009f0:	fb00 f202 	mul.w	r2, r0, r2
 80009f4:	4411      	add	r1, r2
 80009f6:	69fa      	ldr	r2, [r7, #28]
 80009f8:	440a      	add	r2, r1
 80009fa:	4413      	add	r3, r2
 80009fc:	7819      	ldrb	r1, [r3, #0]
 80009fe:	f107 020c 	add.w	r2, r7, #12
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	4413      	add	r3, r2
 8000a06:	460a      	mov	r2, r1
 8000a08:	701a      	strb	r2, [r3, #0]
			hop32 = (hop32 << 8) + b8[k];
 8000a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0c:	021b      	lsls	r3, r3, #8
 8000a0e:	f107 010c 	add.w	r1, r7, #12
 8000a12:	69fa      	ldr	r2, [r7, #28]
 8000a14:	440a      	add	r2, r1
 8000a16:	7812      	ldrb	r2, [r2, #0]
 8000a18:	4413      	add	r3, r2
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8000a1c:	69fb      	ldr	r3, [r7, #28]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	61fb      	str	r3, [r7, #28]
 8000a22:	69fa      	ldr	r2, [r7, #28]
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	429a      	cmp	r2, r3
 8000a28:	dbd6      	blt.n	80009d8 <ili9486_WriteCharNoBG+0x62>
		}

		for(int j = 0; j < fonto.Width; j++){
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61bb      	str	r3, [r7, #24]
 8000a2e:	e017      	b.n	8000a60 <ili9486_WriteCharNoBG+0xea>
			//// if valuein fonttable is 1
			if((hop32 << j) & clif_msb){ // buu32.b32
 8000a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a32:	69bb      	ldr	r3, [r7, #24]
 8000a34:	409a      	lsls	r2, r3
 8000a36:	693b      	ldr	r3, [r7, #16]
 8000a38:	4013      	ands	r3, r2
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d00d      	beq.n	8000a5a <ili9486_WriteCharNoBG+0xe4>
				ili9486_WritePixel(Xpo + j, Ypo + i, RGB_Coder);
 8000a3e:	69bb      	ldr	r3, [r7, #24]
 8000a40:	b29a      	uxth	r2, r3
 8000a42:	88fb      	ldrh	r3, [r7, #6]
 8000a44:	4413      	add	r3, r2
 8000a46:	b298      	uxth	r0, r3
 8000a48:	6a3b      	ldr	r3, [r7, #32]
 8000a4a:	b29a      	uxth	r2, r3
 8000a4c:	88bb      	ldrh	r3, [r7, #4]
 8000a4e:	4413      	add	r3, r2
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8000a54:	4619      	mov	r1, r3
 8000a56:	f7ff fdbd 	bl	80005d4 <ili9486_WritePixel>
		for(int j = 0; j < fonto.Width; j++){
 8000a5a:	69bb      	ldr	r3, [r7, #24]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	61bb      	str	r3, [r7, #24]
 8000a60:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000a62:	461a      	mov	r2, r3
 8000a64:	69bb      	ldr	r3, [r7, #24]
 8000a66:	4293      	cmp	r3, r2
 8000a68:	dbe2      	blt.n	8000a30 <ili9486_WriteCharNoBG+0xba>
	for(int i = 0; i < fonto.Height; i++){
 8000a6a:	6a3b      	ldr	r3, [r7, #32]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	623b      	str	r3, [r7, #32]
 8000a70:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000a72:	461a      	mov	r2, r3
 8000a74:	6a3b      	ldr	r3, [r7, #32]
 8000a76:	4293      	cmp	r3, r2
 8000a78:	dba9      	blt.n	80009ce <ili9486_WriteCharNoBG+0x58>
			}
		}
	}
}
 8000a7a:	bf00      	nop
 8000a7c:	bf00      	nop
 8000a7e:	3728      	adds	r7, #40	; 0x28
 8000a80:	46bd      	mov	sp, r7
 8000a82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a86:	b002      	add	sp, #8
 8000a88:	4770      	bx	lr

08000a8a <ili9486_WriteString>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Text background Color
  * @retval None
  */
void ili9486_WriteString(uint16_t Xpo, uint16_t Ypo,const char* strr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b088      	sub	sp, #32
 8000a90:	af04      	add	r7, sp, #16
 8000a92:	603a      	str	r2, [r7, #0]
 8000a94:	61fb      	str	r3, [r7, #28]
 8000a96:	4603      	mov	r3, r0
 8000a98:	80fb      	strh	r3, [r7, #6]
 8000a9a:	460b      	mov	r3, r1
 8000a9c:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9486_WriteString(20, 300, "Helios xTerra", Font20, cl_WHITE, cl_BLACK);
	 * */
	uint16_t ili_heigh = ili9486_GetLcdPixelHeight();
 8000a9e:	f7ff fd18 	bl	80004d2 <ili9486_GetLcdPixelHeight>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	81fb      	strh	r3, [r7, #14]
	uint16_t ili_width = ili9486_GetLcdPixelWidth();
 8000aa6:	f7ff fd0b 	bl	80004c0 <ili9486_GetLcdPixelWidth>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	81bb      	strh	r3, [r7, #12]
	while(*strr){
 8000aae:	e02c      	b.n	8000b0a <ili9486_WriteString+0x80>
	//// Check screen overflow / new line
		if(Xpo + fonto.Width >= ili_width){
 8000ab0:	88fb      	ldrh	r3, [r7, #6]
 8000ab2:	8c3a      	ldrh	r2, [r7, #32]
 8000ab4:	441a      	add	r2, r3
 8000ab6:	89bb      	ldrh	r3, [r7, #12]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	db13      	blt.n	8000ae4 <ili9486_WriteString+0x5a>
			Xpo = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	80fb      	strh	r3, [r7, #6]
			Ypo += fonto.Height;
 8000ac0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000ac2:	88bb      	ldrh	r3, [r7, #4]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	80bb      	strh	r3, [r7, #4]

			if(Ypo + fonto.Height >= ili_heigh){
 8000ac8:	88bb      	ldrh	r3, [r7, #4]
 8000aca:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000acc:	441a      	add	r2, r3
 8000ace:	89fb      	ldrh	r3, [r7, #14]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	da1f      	bge.n	8000b14 <ili9486_WriteString+0x8a>
				break;
			}

			if(*strr == ' ') {
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b20      	cmp	r3, #32
 8000ada:	d103      	bne.n	8000ae4 <ili9486_WriteString+0x5a>
				// skip spaces in the beginning of the new line
				strr++;
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	603b      	str	r3, [r7, #0]
				continue;
 8000ae2:	e012      	b.n	8000b0a <ili9486_WriteString+0x80>
			}
		}
		//ST7735_WriteChar(x, y, *str, font, color, bgcolor);
		ili9486_WriteChar(Xpo, Ypo, strr, fonto, RGB_Coder, RGB_bg);
 8000ae4:	88b9      	ldrh	r1, [r7, #4]
 8000ae6:	88f8      	ldrh	r0, [r7, #6]
 8000ae8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000aea:	9302      	str	r3, [sp, #8]
 8000aec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000aee:	9301      	str	r3, [sp, #4]
 8000af0:	6a3b      	ldr	r3, [r7, #32]
 8000af2:	9300      	str	r3, [sp, #0]
 8000af4:	69fb      	ldr	r3, [r7, #28]
 8000af6:	683a      	ldr	r2, [r7, #0]
 8000af8:	f7ff fea3 	bl	8000842 <ili9486_WriteChar>
		Xpo += fonto.Width;
 8000afc:	8c3a      	ldrh	r2, [r7, #32]
 8000afe:	88fb      	ldrh	r3, [r7, #6]
 8000b00:	4413      	add	r3, r2
 8000b02:	80fb      	strh	r3, [r7, #6]
		strr++;
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	3301      	adds	r3, #1
 8000b08:	603b      	str	r3, [r7, #0]
	while(*strr){
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d1ce      	bne.n	8000ab0 <ili9486_WriteString+0x26>
	}
}
 8000b12:	e000      	b.n	8000b16 <ili9486_WriteString+0x8c>
				break;
 8000b14:	bf00      	nop
}
 8000b16:	bf00      	nop
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b20:	b002      	add	sp, #8
 8000b22:	4770      	bx	lr

08000b24 <ili9486_WriteStringNoBG>:
  * @param  Strr:  Display Text
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @retval None
  */
void ili9486_WriteStringNoBG(uint16_t Xpo, uint16_t Ypo,const char* strr,sFONT fonto, uint16_t RGB_Coder){
 8000b24:	b082      	sub	sp, #8
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b086      	sub	sp, #24
 8000b2a:	af02      	add	r7, sp, #8
 8000b2c:	603a      	str	r2, [r7, #0]
 8000b2e:	61fb      	str	r3, [r7, #28]
 8000b30:	4603      	mov	r3, r0
 8000b32:	80fb      	strh	r3, [r7, #6]
 8000b34:	460b      	mov	r3, r1
 8000b36:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9486_WriteString(20, 300, "Helios xTerra", Font20, cl_WHITE, cl_BLACK);
	 * */
	uint16_t ili_heigh = ili9486_GetLcdPixelHeight();
 8000b38:	f7ff fccb 	bl	80004d2 <ili9486_GetLcdPixelHeight>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	81fb      	strh	r3, [r7, #14]
	uint16_t ili_width = ili9486_GetLcdPixelWidth();
 8000b40:	f7ff fcbe 	bl	80004c0 <ili9486_GetLcdPixelWidth>
 8000b44:	4603      	mov	r3, r0
 8000b46:	81bb      	strh	r3, [r7, #12]
	while(*strr){
 8000b48:	e02a      	b.n	8000ba0 <ili9486_WriteStringNoBG+0x7c>
	//// Check screen overflow / new line
		if(Xpo + fonto.Width >= ili_width){
 8000b4a:	88fb      	ldrh	r3, [r7, #6]
 8000b4c:	8c3a      	ldrh	r2, [r7, #32]
 8000b4e:	441a      	add	r2, r3
 8000b50:	89bb      	ldrh	r3, [r7, #12]
 8000b52:	429a      	cmp	r2, r3
 8000b54:	db13      	blt.n	8000b7e <ili9486_WriteStringNoBG+0x5a>
			Xpo = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	80fb      	strh	r3, [r7, #6]
			Ypo += fonto.Height;
 8000b5a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000b5c:	88bb      	ldrh	r3, [r7, #4]
 8000b5e:	4413      	add	r3, r2
 8000b60:	80bb      	strh	r3, [r7, #4]

			if(Ypo + fonto.Height >= ili_heigh){
 8000b62:	88bb      	ldrh	r3, [r7, #4]
 8000b64:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000b66:	441a      	add	r2, r3
 8000b68:	89fb      	ldrh	r3, [r7, #14]
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	da1d      	bge.n	8000baa <ili9486_WriteStringNoBG+0x86>
				break;
			}
			if(*strr == ' ') {
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b20      	cmp	r3, #32
 8000b74:	d103      	bne.n	8000b7e <ili9486_WriteStringNoBG+0x5a>
				strr++;
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	603b      	str	r3, [r7, #0]
				continue;
 8000b7c:	e010      	b.n	8000ba0 <ili9486_WriteStringNoBG+0x7c>
			}
		}
		ili9486_WriteCharNoBG(Xpo, Ypo, strr, fonto, RGB_Coder);
 8000b7e:	88b9      	ldrh	r1, [r7, #4]
 8000b80:	88f8      	ldrh	r0, [r7, #6]
 8000b82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000b84:	9301      	str	r3, [sp, #4]
 8000b86:	6a3b      	ldr	r3, [r7, #32]
 8000b88:	9300      	str	r3, [sp, #0]
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	683a      	ldr	r2, [r7, #0]
 8000b8e:	f7ff fef2 	bl	8000976 <ili9486_WriteCharNoBG>
		Xpo += fonto.Width;
 8000b92:	8c3a      	ldrh	r2, [r7, #32]
 8000b94:	88fb      	ldrh	r3, [r7, #6]
 8000b96:	4413      	add	r3, r2
 8000b98:	80fb      	strh	r3, [r7, #6]
		strr++;
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	603b      	str	r3, [r7, #0]
	while(*strr){
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d1d0      	bne.n	8000b4a <ili9486_WriteStringNoBG+0x26>
	}
}
 8000ba8:	e000      	b.n	8000bac <ili9486_WriteStringNoBG+0x88>
				break;
 8000baa:	bf00      	nop
}
 8000bac:	bf00      	nop
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bb6:	b002      	add	sp, #8
 8000bb8:	4770      	bx	lr

08000bba <LCD_IO_Delay>:
#elif   defined(__CC_ARM)
#pragma push
#pragma O0
#endif
void LCD_IO_Delay(uint32_t c)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	b083      	sub	sp, #12
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
  while(c--);
 8000bc2:	bf00      	nop
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	1e5a      	subs	r2, r3, #1
 8000bc8:	607a      	str	r2, [r7, #4]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d1fa      	bne.n	8000bc4 <LCD_IO_Delay+0xa>
}
 8000bce:	bf00      	nop
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <LCD_Delay>:
#pragma pop
#endif

//-----------------------------------------------------------------------------
void LCD_Delay(uint32_t Delay)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f001 fea5 	bl	8002934 <HAL_Delay>
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	b083      	sub	sp, #12
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	71fb      	strb	r3, [r7, #7]
    GPIOX_CLR(LCD_BL);
  else
    GPIOX_SET(LCD_BL);
  #endif
  #endif
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  #define GPIOX_CLOCK_LCD_RD    GPIOX_CLOCK(LCD_RD)
  #else
  #define GPIOX_CLOCK_LCD_RD    0
  #endif

  RCC->AHB4ENR |= (GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_WR) |
 8000c0c:	4b6c      	ldr	r3, [pc, #432]	; (8000dc0 <LCD_IO_Init+0x1b8>)
 8000c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c12:	4a6b      	ldr	r2, [pc, #428]	; (8000dc0 <LCD_IO_Init+0x1b8>)
 8000c14:	f043 035f 	orr.w	r3, r3, #95	; 0x5f
 8000c18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
                   GPIOX_CLOCK(LCD_D0) | GPIOX_CLOCK(LCD_D1) | GPIOX_CLOCK(LCD_D2) | GPIOX_CLOCK(LCD_D3) |
                   GPIOX_CLOCK(LCD_D4) | GPIOX_CLOCK(LCD_D5) | GPIOX_CLOCK(LCD_D6) | GPIOX_CLOCK(LCD_D7) |
                   GPIOX_CLOCK_LCD_RST | GPIOX_CLOCK_LCD_BL  | GPIOX_CLOCK_LCD_RD);

  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  LCD_RST_OFF;                          /* RST = 1 */
 8000c1c:	4b69      	ldr	r3, [pc, #420]	; (8000dc4 <LCD_IO_Init+0x1bc>)
 8000c1e:	2204      	movs	r2, #4
 8000c20:	619a      	str	r2, [r3, #24]
  GPIOX_MODER(MODE_OUT, LCD_RST);
 8000c22:	4b68      	ldr	r3, [pc, #416]	; (8000dc4 <LCD_IO_Init+0x1bc>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000c2a:	4a66      	ldr	r2, [pc, #408]	; (8000dc4 <LCD_IO_Init+0x1bc>)
 8000c2c:	f043 0310 	orr.w	r3, r3, #16
 8000c30:	6013      	str	r3, [r2, #0]
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  GPIOX_ODR(LCD_BL) = LCD_BLON;
  GPIOX_MODER(MODE_OUT, LCD_BL);
  #endif

  GPIOX_SET(LCD_CS);                    /* CS = 1 */
 8000c32:	4b65      	ldr	r3, [pc, #404]	; (8000dc8 <LCD_IO_Init+0x1c0>)
 8000c34:	2202      	movs	r2, #2
 8000c36:	619a      	str	r2, [r3, #24]
  LCD_RS_DATA;                          /* RS = 1 */
 8000c38:	4b62      	ldr	r3, [pc, #392]	; (8000dc4 <LCD_IO_Init+0x1bc>)
 8000c3a:	2208      	movs	r2, #8
 8000c3c:	619a      	str	r2, [r3, #24]
  GPIOX_SET(LCD_WR);                    /* WR = 1 */
 8000c3e:	4b61      	ldr	r3, [pc, #388]	; (8000dc4 <LCD_IO_Init+0x1bc>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	619a      	str	r2, [r3, #24]
  #if GPIOX_PORTNUM(LCD_RD) >=  GPIOX_PORTNUM_A
  GPIOX_SET(LCD_RD);                    /* RD = 1 */
 8000c44:	4b61      	ldr	r3, [pc, #388]	; (8000dcc <LCD_IO_Init+0x1c4>)
 8000c46:	2208      	movs	r2, #8
 8000c48:	619a      	str	r2, [r3, #24]
  #endif

  GPIOX_MODER(MODE_OUT, LCD_CS);
 8000c4a:	4b5f      	ldr	r3, [pc, #380]	; (8000dc8 <LCD_IO_Init+0x1c0>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f023 030c 	bic.w	r3, r3, #12
 8000c52:	4a5d      	ldr	r2, [pc, #372]	; (8000dc8 <LCD_IO_Init+0x1c0>)
 8000c54:	f043 0304 	orr.w	r3, r3, #4
 8000c58:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_RS);
 8000c5a:	4b5a      	ldr	r3, [pc, #360]	; (8000dc4 <LCD_IO_Init+0x1bc>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000c62:	4a58      	ldr	r2, [pc, #352]	; (8000dc4 <LCD_IO_Init+0x1bc>)
 8000c64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c68:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_WR);
 8000c6a:	4b56      	ldr	r3, [pc, #344]	; (8000dc4 <LCD_IO_Init+0x1bc>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f023 0303 	bic.w	r3, r3, #3
 8000c72:	4a54      	ldr	r2, [pc, #336]	; (8000dc4 <LCD_IO_Init+0x1bc>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6013      	str	r3, [r2, #0]
  #if GPIOX_PORTNUM(LCD_RD) >=  GPIOX_PORTNUM_A
  GPIOX_MODER(MODE_OUT, LCD_RD);
 8000c7a:	4b54      	ldr	r3, [pc, #336]	; (8000dcc <LCD_IO_Init+0x1c4>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000c82:	4a52      	ldr	r2, [pc, #328]	; (8000dcc <LCD_IO_Init+0x1c4>)
 8000c84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c88:	6013      	str	r3, [r2, #0]
  #endif

  LCD_DIRWRITE;                         /* data pins set the output direction */
 8000c8a:	4b51      	ldr	r3, [pc, #324]	; (8000dd0 <LCD_IO_Init+0x1c8>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000c92:	4a4f      	ldr	r2, [pc, #316]	; (8000dd0 <LCD_IO_Init+0x1c8>)
 8000c94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c98:	6013      	str	r3, [r2, #0]
 8000c9a:	4b4e      	ldr	r3, [pc, #312]	; (8000dd4 <LCD_IO_Init+0x1cc>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000ca2:	4a4c      	ldr	r2, [pc, #304]	; (8000dd4 <LCD_IO_Init+0x1cc>)
 8000ca4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000ca8:	6013      	str	r3, [r2, #0]
 8000caa:	4b49      	ldr	r3, [pc, #292]	; (8000dd0 <LCD_IO_Init+0x1c8>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000cb2:	4a47      	ldr	r2, [pc, #284]	; (8000dd0 <LCD_IO_Init+0x1c8>)
 8000cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb8:	6013      	str	r3, [r2, #0]
 8000cba:	4b47      	ldr	r3, [pc, #284]	; (8000dd8 <LCD_IO_Init+0x1d0>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000cc2:	4a45      	ldr	r2, [pc, #276]	; (8000dd8 <LCD_IO_Init+0x1d0>)
 8000cc4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000cc8:	6013      	str	r3, [r2, #0]
 8000cca:	4b43      	ldr	r3, [pc, #268]	; (8000dd8 <LCD_IO_Init+0x1d0>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000cd2:	4a41      	ldr	r2, [pc, #260]	; (8000dd8 <LCD_IO_Init+0x1d0>)
 8000cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd8:	6013      	str	r3, [r2, #0]
 8000cda:	4b3f      	ldr	r3, [pc, #252]	; (8000dd8 <LCD_IO_Init+0x1d0>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000ce2:	4a3d      	ldr	r2, [pc, #244]	; (8000dd8 <LCD_IO_Init+0x1d0>)
 8000ce4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ce8:	6013      	str	r3, [r2, #0]
 8000cea:	4b38      	ldr	r3, [pc, #224]	; (8000dcc <LCD_IO_Init+0x1c4>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000cf2:	4a36      	ldr	r2, [pc, #216]	; (8000dcc <LCD_IO_Init+0x1c4>)
 8000cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cf8:	6013      	str	r3, [r2, #0]
 8000cfa:	4b35      	ldr	r3, [pc, #212]	; (8000dd0 <LCD_IO_Init+0x1c8>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000d02:	4a33      	ldr	r2, [pc, #204]	; (8000dd0 <LCD_IO_Init+0x1c8>)
 8000d04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d08:	6013      	str	r3, [r2, #0]

  /* GPIO speed */
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_CS);
 8000d0a:	4b2f      	ldr	r3, [pc, #188]	; (8000dc8 <LCD_IO_Init+0x1c0>)
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	4a2e      	ldr	r2, [pc, #184]	; (8000dc8 <LCD_IO_Init+0x1c0>)
 8000d10:	f043 030c 	orr.w	r3, r3, #12
 8000d14:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RS);
 8000d16:	4b2b      	ldr	r3, [pc, #172]	; (8000dc4 <LCD_IO_Init+0x1bc>)
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	4a2a      	ldr	r2, [pc, #168]	; (8000dc4 <LCD_IO_Init+0x1bc>)
 8000d1c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000d20:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_WR);
 8000d22:	4b28      	ldr	r3, [pc, #160]	; (8000dc4 <LCD_IO_Init+0x1bc>)
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	4a27      	ldr	r2, [pc, #156]	; (8000dc4 <LCD_IO_Init+0x1bc>)
 8000d28:	f043 0303 	orr.w	r3, r3, #3
 8000d2c:	6093      	str	r3, [r2, #8]
  #if GPIOX_PORTNUM(LCD_RD) >=  GPIOX_PORTNUM_A
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RD);
 8000d2e:	4b27      	ldr	r3, [pc, #156]	; (8000dcc <LCD_IO_Init+0x1c4>)
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	4a26      	ldr	r2, [pc, #152]	; (8000dcc <LCD_IO_Init+0x1c4>)
 8000d34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000d38:	6093      	str	r3, [r2, #8]
  #endif
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D0);
 8000d3a:	4b25      	ldr	r3, [pc, #148]	; (8000dd0 <LCD_IO_Init+0x1c8>)
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	4a24      	ldr	r2, [pc, #144]	; (8000dd0 <LCD_IO_Init+0x1c8>)
 8000d40:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8000d44:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D1);
 8000d46:	4b23      	ldr	r3, [pc, #140]	; (8000dd4 <LCD_IO_Init+0x1cc>)
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	4a22      	ldr	r2, [pc, #136]	; (8000dd4 <LCD_IO_Init+0x1cc>)
 8000d4c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000d50:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D2);
 8000d52:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <LCD_IO_Init+0x1c8>)
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	4a1e      	ldr	r2, [pc, #120]	; (8000dd0 <LCD_IO_Init+0x1c8>)
 8000d58:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8000d5c:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D3);
 8000d5e:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <LCD_IO_Init+0x1d0>)
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	4a1d      	ldr	r2, [pc, #116]	; (8000dd8 <LCD_IO_Init+0x1d0>)
 8000d64:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 8000d68:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D4);
 8000d6a:	4b1b      	ldr	r3, [pc, #108]	; (8000dd8 <LCD_IO_Init+0x1d0>)
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	4a1a      	ldr	r2, [pc, #104]	; (8000dd8 <LCD_IO_Init+0x1d0>)
 8000d70:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8000d74:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D5);
 8000d76:	4b18      	ldr	r3, [pc, #96]	; (8000dd8 <LCD_IO_Init+0x1d0>)
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	4a17      	ldr	r2, [pc, #92]	; (8000dd8 <LCD_IO_Init+0x1d0>)
 8000d7c:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8000d80:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D6);
 8000d82:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <LCD_IO_Init+0x1c4>)
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	4a11      	ldr	r2, [pc, #68]	; (8000dcc <LCD_IO_Init+0x1c4>)
 8000d88:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000d8c:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D7);
 8000d8e:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <LCD_IO_Init+0x1c8>)
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	4a0f      	ldr	r2, [pc, #60]	; (8000dd0 <LCD_IO_Init+0x1c8>)
 8000d94:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8000d98:	6093      	str	r3, [r2, #8]

  /* Reset the LCD */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  LCD_Delay(1);
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	f7ff ff1e 	bl	8000bdc <LCD_Delay>
  LCD_RST_ON;                           /* RST = 0 */
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <LCD_IO_Init+0x1bc>)
 8000da2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000da6:	619a      	str	r2, [r3, #24]
  LCD_Delay(1);
 8000da8:	2001      	movs	r0, #1
 8000daa:	f7ff ff17 	bl	8000bdc <LCD_Delay>
  LCD_RST_OFF;                          /* RST = 1 */
 8000dae:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <LCD_IO_Init+0x1bc>)
 8000db0:	2204      	movs	r2, #4
 8000db2:	619a      	str	r2, [r3, #24]
  #endif
  LCD_Delay(1);
 8000db4:	2001      	movs	r0, #1
 8000db6:	f7ff ff11 	bl	8000bdc <LCD_Delay>
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	58024400 	.word	0x58024400
 8000dc4:	58020800 	.word	0x58020800
 8000dc8:	58020400 	.word	0x58020400
 8000dcc:	58020000 	.word	0x58020000
 8000dd0:	58021800 	.word	0x58021800
 8000dd4:	58020c00 	.word	0x58020c00
 8000dd8:	58021000 	.word	0x58021000

08000ddc <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
  LCD_CS_ON;
 8000de6:	4b4b      	ldr	r3, [pc, #300]	; (8000f14 <LCD_IO_WriteCmd8+0x138>)
 8000de8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dec:	619a      	str	r2, [r3, #24]
  LCD_CMD8_WRITE(Cmd);
 8000dee:	4b4a      	ldr	r3, [pc, #296]	; (8000f18 <LCD_IO_WriteCmd8+0x13c>)
 8000df0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000df4:	619a      	str	r2, [r3, #24]
 8000df6:	4a49      	ldr	r2, [pc, #292]	; (8000f1c <LCD_IO_WriteCmd8+0x140>)
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	7013      	strb	r3, [r2, #0]
 8000dfc:	4b47      	ldr	r3, [pc, #284]	; (8000f1c <LCD_IO_WriteCmd8+0x140>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	f003 0301 	and.w	r3, r3, #1
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d004      	beq.n	8000e12 <LCD_IO_WriteCmd8+0x36>
 8000e08:	4b45      	ldr	r3, [pc, #276]	; (8000f20 <LCD_IO_WriteCmd8+0x144>)
 8000e0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e0e:	619a      	str	r2, [r3, #24]
 8000e10:	e003      	b.n	8000e1a <LCD_IO_WriteCmd8+0x3e>
 8000e12:	4b43      	ldr	r3, [pc, #268]	; (8000f20 <LCD_IO_WriteCmd8+0x144>)
 8000e14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000e18:	619a      	str	r2, [r3, #24]
 8000e1a:	4b40      	ldr	r3, [pc, #256]	; (8000f1c <LCD_IO_WriteCmd8+0x140>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d004      	beq.n	8000e30 <LCD_IO_WriteCmd8+0x54>
 8000e26:	4b3f      	ldr	r3, [pc, #252]	; (8000f24 <LCD_IO_WriteCmd8+0x148>)
 8000e28:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e2c:	619a      	str	r2, [r3, #24]
 8000e2e:	e003      	b.n	8000e38 <LCD_IO_WriteCmd8+0x5c>
 8000e30:	4b3c      	ldr	r3, [pc, #240]	; (8000f24 <LCD_IO_WriteCmd8+0x148>)
 8000e32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000e36:	619a      	str	r2, [r3, #24]
 8000e38:	4b38      	ldr	r3, [pc, #224]	; (8000f1c <LCD_IO_WriteCmd8+0x140>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	f003 0304 	and.w	r3, r3, #4
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d004      	beq.n	8000e4e <LCD_IO_WriteCmd8+0x72>
 8000e44:	4b36      	ldr	r3, [pc, #216]	; (8000f20 <LCD_IO_WriteCmd8+0x144>)
 8000e46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e4a:	619a      	str	r2, [r3, #24]
 8000e4c:	e003      	b.n	8000e56 <LCD_IO_WriteCmd8+0x7a>
 8000e4e:	4b34      	ldr	r3, [pc, #208]	; (8000f20 <LCD_IO_WriteCmd8+0x144>)
 8000e50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e54:	619a      	str	r2, [r3, #24]
 8000e56:	4b31      	ldr	r3, [pc, #196]	; (8000f1c <LCD_IO_WriteCmd8+0x140>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	f003 0308 	and.w	r3, r3, #8
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d004      	beq.n	8000e6c <LCD_IO_WriteCmd8+0x90>
 8000e62:	4b31      	ldr	r3, [pc, #196]	; (8000f28 <LCD_IO_WriteCmd8+0x14c>)
 8000e64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e68:	619a      	str	r2, [r3, #24]
 8000e6a:	e003      	b.n	8000e74 <LCD_IO_WriteCmd8+0x98>
 8000e6c:	4b2e      	ldr	r3, [pc, #184]	; (8000f28 <LCD_IO_WriteCmd8+0x14c>)
 8000e6e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000e72:	619a      	str	r2, [r3, #24]
 8000e74:	4b29      	ldr	r3, [pc, #164]	; (8000f1c <LCD_IO_WriteCmd8+0x140>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	f003 0310 	and.w	r3, r3, #16
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d004      	beq.n	8000e8a <LCD_IO_WriteCmd8+0xae>
 8000e80:	4b29      	ldr	r3, [pc, #164]	; (8000f28 <LCD_IO_WriteCmd8+0x14c>)
 8000e82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e86:	619a      	str	r2, [r3, #24]
 8000e88:	e003      	b.n	8000e92 <LCD_IO_WriteCmd8+0xb6>
 8000e8a:	4b27      	ldr	r3, [pc, #156]	; (8000f28 <LCD_IO_WriteCmd8+0x14c>)
 8000e8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e90:	619a      	str	r2, [r3, #24]
 8000e92:	4b22      	ldr	r3, [pc, #136]	; (8000f1c <LCD_IO_WriteCmd8+0x140>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	f003 0320 	and.w	r3, r3, #32
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d004      	beq.n	8000ea8 <LCD_IO_WriteCmd8+0xcc>
 8000e9e:	4b22      	ldr	r3, [pc, #136]	; (8000f28 <LCD_IO_WriteCmd8+0x14c>)
 8000ea0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ea4:	619a      	str	r2, [r3, #24]
 8000ea6:	e003      	b.n	8000eb0 <LCD_IO_WriteCmd8+0xd4>
 8000ea8:	4b1f      	ldr	r3, [pc, #124]	; (8000f28 <LCD_IO_WriteCmd8+0x14c>)
 8000eaa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000eae:	619a      	str	r2, [r3, #24]
 8000eb0:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <LCD_IO_WriteCmd8+0x140>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d004      	beq.n	8000ec6 <LCD_IO_WriteCmd8+0xea>
 8000ebc:	4b1b      	ldr	r3, [pc, #108]	; (8000f2c <LCD_IO_WriteCmd8+0x150>)
 8000ebe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ec2:	619a      	str	r2, [r3, #24]
 8000ec4:	e003      	b.n	8000ece <LCD_IO_WriteCmd8+0xf2>
 8000ec6:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <LCD_IO_WriteCmd8+0x150>)
 8000ec8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000ecc:	619a      	str	r2, [r3, #24]
 8000ece:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <LCD_IO_WriteCmd8+0x140>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	b25b      	sxtb	r3, r3
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	da04      	bge.n	8000ee2 <LCD_IO_WriteCmd8+0x106>
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <LCD_IO_WriteCmd8+0x144>)
 8000eda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ede:	619a      	str	r2, [r3, #24]
 8000ee0:	e003      	b.n	8000eea <LCD_IO_WriteCmd8+0x10e>
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <LCD_IO_WriteCmd8+0x144>)
 8000ee4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ee8:	619a      	str	r2, [r3, #24]
 8000eea:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <LCD_IO_WriteCmd8+0x13c>)
 8000eec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ef0:	619a      	str	r2, [r3, #24]
 8000ef2:	2008      	movs	r0, #8
 8000ef4:	f7ff fe61 	bl	8000bba <LCD_IO_Delay>
 8000ef8:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <LCD_IO_WriteCmd8+0x13c>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	619a      	str	r2, [r3, #24]
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <LCD_IO_WriteCmd8+0x13c>)
 8000f00:	2208      	movs	r2, #8
 8000f02:	619a      	str	r2, [r3, #24]
  LCD_CS_OFF;
 8000f04:	4b03      	ldr	r3, [pc, #12]	; (8000f14 <LCD_IO_WriteCmd8+0x138>)
 8000f06:	2202      	movs	r2, #2
 8000f08:	619a      	str	r2, [r3, #24]
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	58020400 	.word	0x58020400
 8000f18:	58020800 	.word	0x58020800
 8000f1c:	240001ae 	.word	0x240001ae
 8000f20:	58021800 	.word	0x58021800
 8000f24:	58020c00 	.word	0x58020c00
 8000f28:	58021000 	.word	0x58021000
 8000f2c:	58020000 	.word	0x58020000

08000f30 <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
  LCD_CS_ON;
 8000f3a:	4b47      	ldr	r3, [pc, #284]	; (8001058 <LCD_IO_WriteData8+0x128>)
 8000f3c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f40:	619a      	str	r2, [r3, #24]
  LCD_DATA8_WRITE(Data);
 8000f42:	4a46      	ldr	r2, [pc, #280]	; (800105c <LCD_IO_WriteData8+0x12c>)
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	7013      	strb	r3, [r2, #0]
 8000f48:	4b44      	ldr	r3, [pc, #272]	; (800105c <LCD_IO_WriteData8+0x12c>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d004      	beq.n	8000f5e <LCD_IO_WriteData8+0x2e>
 8000f54:	4b42      	ldr	r3, [pc, #264]	; (8001060 <LCD_IO_WriteData8+0x130>)
 8000f56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f5a:	619a      	str	r2, [r3, #24]
 8000f5c:	e003      	b.n	8000f66 <LCD_IO_WriteData8+0x36>
 8000f5e:	4b40      	ldr	r3, [pc, #256]	; (8001060 <LCD_IO_WriteData8+0x130>)
 8000f60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f64:	619a      	str	r2, [r3, #24]
 8000f66:	4b3d      	ldr	r3, [pc, #244]	; (800105c <LCD_IO_WriteData8+0x12c>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d004      	beq.n	8000f7c <LCD_IO_WriteData8+0x4c>
 8000f72:	4b3c      	ldr	r3, [pc, #240]	; (8001064 <LCD_IO_WriteData8+0x134>)
 8000f74:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f78:	619a      	str	r2, [r3, #24]
 8000f7a:	e003      	b.n	8000f84 <LCD_IO_WriteData8+0x54>
 8000f7c:	4b39      	ldr	r3, [pc, #228]	; (8001064 <LCD_IO_WriteData8+0x134>)
 8000f7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000f82:	619a      	str	r2, [r3, #24]
 8000f84:	4b35      	ldr	r3, [pc, #212]	; (800105c <LCD_IO_WriteData8+0x12c>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	f003 0304 	and.w	r3, r3, #4
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d004      	beq.n	8000f9a <LCD_IO_WriteData8+0x6a>
 8000f90:	4b33      	ldr	r3, [pc, #204]	; (8001060 <LCD_IO_WriteData8+0x130>)
 8000f92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f96:	619a      	str	r2, [r3, #24]
 8000f98:	e003      	b.n	8000fa2 <LCD_IO_WriteData8+0x72>
 8000f9a:	4b31      	ldr	r3, [pc, #196]	; (8001060 <LCD_IO_WriteData8+0x130>)
 8000f9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fa0:	619a      	str	r2, [r3, #24]
 8000fa2:	4b2e      	ldr	r3, [pc, #184]	; (800105c <LCD_IO_WriteData8+0x12c>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	f003 0308 	and.w	r3, r3, #8
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d004      	beq.n	8000fb8 <LCD_IO_WriteData8+0x88>
 8000fae:	4b2e      	ldr	r3, [pc, #184]	; (8001068 <LCD_IO_WriteData8+0x138>)
 8000fb0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fb4:	619a      	str	r2, [r3, #24]
 8000fb6:	e003      	b.n	8000fc0 <LCD_IO_WriteData8+0x90>
 8000fb8:	4b2b      	ldr	r3, [pc, #172]	; (8001068 <LCD_IO_WriteData8+0x138>)
 8000fba:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000fbe:	619a      	str	r2, [r3, #24]
 8000fc0:	4b26      	ldr	r3, [pc, #152]	; (800105c <LCD_IO_WriteData8+0x12c>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	f003 0310 	and.w	r3, r3, #16
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d004      	beq.n	8000fd6 <LCD_IO_WriteData8+0xa6>
 8000fcc:	4b26      	ldr	r3, [pc, #152]	; (8001068 <LCD_IO_WriteData8+0x138>)
 8000fce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fd2:	619a      	str	r2, [r3, #24]
 8000fd4:	e003      	b.n	8000fde <LCD_IO_WriteData8+0xae>
 8000fd6:	4b24      	ldr	r3, [pc, #144]	; (8001068 <LCD_IO_WriteData8+0x138>)
 8000fd8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fdc:	619a      	str	r2, [r3, #24]
 8000fde:	4b1f      	ldr	r3, [pc, #124]	; (800105c <LCD_IO_WriteData8+0x12c>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	f003 0320 	and.w	r3, r3, #32
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d004      	beq.n	8000ff4 <LCD_IO_WriteData8+0xc4>
 8000fea:	4b1f      	ldr	r3, [pc, #124]	; (8001068 <LCD_IO_WriteData8+0x138>)
 8000fec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ff0:	619a      	str	r2, [r3, #24]
 8000ff2:	e003      	b.n	8000ffc <LCD_IO_WriteData8+0xcc>
 8000ff4:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <LCD_IO_WriteData8+0x138>)
 8000ff6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ffa:	619a      	str	r2, [r3, #24]
 8000ffc:	4b17      	ldr	r3, [pc, #92]	; (800105c <LCD_IO_WriteData8+0x12c>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001004:	2b00      	cmp	r3, #0
 8001006:	d004      	beq.n	8001012 <LCD_IO_WriteData8+0xe2>
 8001008:	4b18      	ldr	r3, [pc, #96]	; (800106c <LCD_IO_WriteData8+0x13c>)
 800100a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800100e:	619a      	str	r2, [r3, #24]
 8001010:	e003      	b.n	800101a <LCD_IO_WriteData8+0xea>
 8001012:	4b16      	ldr	r3, [pc, #88]	; (800106c <LCD_IO_WriteData8+0x13c>)
 8001014:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001018:	619a      	str	r2, [r3, #24]
 800101a:	4b10      	ldr	r3, [pc, #64]	; (800105c <LCD_IO_WriteData8+0x12c>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	b25b      	sxtb	r3, r3
 8001020:	2b00      	cmp	r3, #0
 8001022:	da04      	bge.n	800102e <LCD_IO_WriteData8+0xfe>
 8001024:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <LCD_IO_WriteData8+0x130>)
 8001026:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800102a:	619a      	str	r2, [r3, #24]
 800102c:	e003      	b.n	8001036 <LCD_IO_WriteData8+0x106>
 800102e:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <LCD_IO_WriteData8+0x130>)
 8001030:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001034:	619a      	str	r2, [r3, #24]
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <LCD_IO_WriteData8+0x140>)
 8001038:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800103c:	619a      	str	r2, [r3, #24]
 800103e:	2008      	movs	r0, #8
 8001040:	f7ff fdbb 	bl	8000bba <LCD_IO_Delay>
 8001044:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <LCD_IO_WriteData8+0x140>)
 8001046:	2201      	movs	r2, #1
 8001048:	619a      	str	r2, [r3, #24]
  LCD_CS_OFF;
 800104a:	4b03      	ldr	r3, [pc, #12]	; (8001058 <LCD_IO_WriteData8+0x128>)
 800104c:	2202      	movs	r2, #2
 800104e:	619a      	str	r2, [r3, #24]
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	58020400 	.word	0x58020400
 800105c:	240001ae 	.word	0x240001ae
 8001060:	58021800 	.word	0x58021800
 8001064:	58020c00 	.word	0x58020c00
 8001068:	58021000 	.word	0x58021000
 800106c:	58020000 	.word	0x58020000
 8001070:	58020800 	.word	0x58020800

08001074 <LCD_IO_WriteData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteData16(uint16_t Data)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	80fb      	strh	r3, [r7, #6]
  LCD_CS_ON;
 800107e:	4b8b      	ldr	r3, [pc, #556]	; (80012ac <LCD_IO_WriteData16+0x238>)
 8001080:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001084:	619a      	str	r2, [r3, #24]
  LCD_DATA16_WRITE(Data);
 8001086:	88fb      	ldrh	r3, [r7, #6]
 8001088:	0a1b      	lsrs	r3, r3, #8
 800108a:	b29b      	uxth	r3, r3
 800108c:	b2da      	uxtb	r2, r3
 800108e:	4b88      	ldr	r3, [pc, #544]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 8001090:	701a      	strb	r2, [r3, #0]
 8001092:	4b87      	ldr	r3, [pc, #540]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	2b00      	cmp	r3, #0
 800109c:	d004      	beq.n	80010a8 <LCD_IO_WriteData16+0x34>
 800109e:	4b85      	ldr	r3, [pc, #532]	; (80012b4 <LCD_IO_WriteData16+0x240>)
 80010a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010a4:	619a      	str	r2, [r3, #24]
 80010a6:	e003      	b.n	80010b0 <LCD_IO_WriteData16+0x3c>
 80010a8:	4b82      	ldr	r3, [pc, #520]	; (80012b4 <LCD_IO_WriteData16+0x240>)
 80010aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80010ae:	619a      	str	r2, [r3, #24]
 80010b0:	4b7f      	ldr	r3, [pc, #508]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	f003 0302 	and.w	r3, r3, #2
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d004      	beq.n	80010c6 <LCD_IO_WriteData16+0x52>
 80010bc:	4b7e      	ldr	r3, [pc, #504]	; (80012b8 <LCD_IO_WriteData16+0x244>)
 80010be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010c2:	619a      	str	r2, [r3, #24]
 80010c4:	e003      	b.n	80010ce <LCD_IO_WriteData16+0x5a>
 80010c6:	4b7c      	ldr	r3, [pc, #496]	; (80012b8 <LCD_IO_WriteData16+0x244>)
 80010c8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80010cc:	619a      	str	r2, [r3, #24]
 80010ce:	4b78      	ldr	r3, [pc, #480]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	f003 0304 	and.w	r3, r3, #4
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d004      	beq.n	80010e4 <LCD_IO_WriteData16+0x70>
 80010da:	4b76      	ldr	r3, [pc, #472]	; (80012b4 <LCD_IO_WriteData16+0x240>)
 80010dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010e0:	619a      	str	r2, [r3, #24]
 80010e2:	e003      	b.n	80010ec <LCD_IO_WriteData16+0x78>
 80010e4:	4b73      	ldr	r3, [pc, #460]	; (80012b4 <LCD_IO_WriteData16+0x240>)
 80010e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010ea:	619a      	str	r2, [r3, #24]
 80010ec:	4b70      	ldr	r3, [pc, #448]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	f003 0308 	and.w	r3, r3, #8
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d004      	beq.n	8001102 <LCD_IO_WriteData16+0x8e>
 80010f8:	4b70      	ldr	r3, [pc, #448]	; (80012bc <LCD_IO_WriteData16+0x248>)
 80010fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010fe:	619a      	str	r2, [r3, #24]
 8001100:	e003      	b.n	800110a <LCD_IO_WriteData16+0x96>
 8001102:	4b6e      	ldr	r3, [pc, #440]	; (80012bc <LCD_IO_WriteData16+0x248>)
 8001104:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001108:	619a      	str	r2, [r3, #24]
 800110a:	4b69      	ldr	r3, [pc, #420]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	f003 0310 	and.w	r3, r3, #16
 8001112:	2b00      	cmp	r3, #0
 8001114:	d004      	beq.n	8001120 <LCD_IO_WriteData16+0xac>
 8001116:	4b69      	ldr	r3, [pc, #420]	; (80012bc <LCD_IO_WriteData16+0x248>)
 8001118:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800111c:	619a      	str	r2, [r3, #24]
 800111e:	e003      	b.n	8001128 <LCD_IO_WriteData16+0xb4>
 8001120:	4b66      	ldr	r3, [pc, #408]	; (80012bc <LCD_IO_WriteData16+0x248>)
 8001122:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001126:	619a      	str	r2, [r3, #24]
 8001128:	4b61      	ldr	r3, [pc, #388]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	f003 0320 	and.w	r3, r3, #32
 8001130:	2b00      	cmp	r3, #0
 8001132:	d004      	beq.n	800113e <LCD_IO_WriteData16+0xca>
 8001134:	4b61      	ldr	r3, [pc, #388]	; (80012bc <LCD_IO_WriteData16+0x248>)
 8001136:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800113a:	619a      	str	r2, [r3, #24]
 800113c:	e003      	b.n	8001146 <LCD_IO_WriteData16+0xd2>
 800113e:	4b5f      	ldr	r3, [pc, #380]	; (80012bc <LCD_IO_WriteData16+0x248>)
 8001140:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001144:	619a      	str	r2, [r3, #24]
 8001146:	4b5a      	ldr	r3, [pc, #360]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800114e:	2b00      	cmp	r3, #0
 8001150:	d004      	beq.n	800115c <LCD_IO_WriteData16+0xe8>
 8001152:	4b5b      	ldr	r3, [pc, #364]	; (80012c0 <LCD_IO_WriteData16+0x24c>)
 8001154:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001158:	619a      	str	r2, [r3, #24]
 800115a:	e003      	b.n	8001164 <LCD_IO_WriteData16+0xf0>
 800115c:	4b58      	ldr	r3, [pc, #352]	; (80012c0 <LCD_IO_WriteData16+0x24c>)
 800115e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001162:	619a      	str	r2, [r3, #24]
 8001164:	4b52      	ldr	r3, [pc, #328]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	b25b      	sxtb	r3, r3
 800116a:	2b00      	cmp	r3, #0
 800116c:	da04      	bge.n	8001178 <LCD_IO_WriteData16+0x104>
 800116e:	4b51      	ldr	r3, [pc, #324]	; (80012b4 <LCD_IO_WriteData16+0x240>)
 8001170:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001174:	619a      	str	r2, [r3, #24]
 8001176:	e003      	b.n	8001180 <LCD_IO_WriteData16+0x10c>
 8001178:	4b4e      	ldr	r3, [pc, #312]	; (80012b4 <LCD_IO_WriteData16+0x240>)
 800117a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800117e:	619a      	str	r2, [r3, #24]
 8001180:	4b50      	ldr	r3, [pc, #320]	; (80012c4 <LCD_IO_WriteData16+0x250>)
 8001182:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001186:	619a      	str	r2, [r3, #24]
 8001188:	2008      	movs	r0, #8
 800118a:	f7ff fd16 	bl	8000bba <LCD_IO_Delay>
 800118e:	4b4d      	ldr	r3, [pc, #308]	; (80012c4 <LCD_IO_WriteData16+0x250>)
 8001190:	2201      	movs	r2, #1
 8001192:	619a      	str	r2, [r3, #24]
 8001194:	88fb      	ldrh	r3, [r7, #6]
 8001196:	b2da      	uxtb	r2, r3
 8001198:	4b45      	ldr	r3, [pc, #276]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 800119a:	701a      	strb	r2, [r3, #0]
 800119c:	4b44      	ldr	r3, [pc, #272]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d004      	beq.n	80011b2 <LCD_IO_WriteData16+0x13e>
 80011a8:	4b42      	ldr	r3, [pc, #264]	; (80012b4 <LCD_IO_WriteData16+0x240>)
 80011aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011ae:	619a      	str	r2, [r3, #24]
 80011b0:	e003      	b.n	80011ba <LCD_IO_WriteData16+0x146>
 80011b2:	4b40      	ldr	r3, [pc, #256]	; (80012b4 <LCD_IO_WriteData16+0x240>)
 80011b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80011b8:	619a      	str	r2, [r3, #24]
 80011ba:	4b3d      	ldr	r3, [pc, #244]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d004      	beq.n	80011d0 <LCD_IO_WriteData16+0x15c>
 80011c6:	4b3c      	ldr	r3, [pc, #240]	; (80012b8 <LCD_IO_WriteData16+0x244>)
 80011c8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011cc:	619a      	str	r2, [r3, #24]
 80011ce:	e003      	b.n	80011d8 <LCD_IO_WriteData16+0x164>
 80011d0:	4b39      	ldr	r3, [pc, #228]	; (80012b8 <LCD_IO_WriteData16+0x244>)
 80011d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80011d6:	619a      	str	r2, [r3, #24]
 80011d8:	4b35      	ldr	r3, [pc, #212]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	f003 0304 	and.w	r3, r3, #4
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d004      	beq.n	80011ee <LCD_IO_WriteData16+0x17a>
 80011e4:	4b33      	ldr	r3, [pc, #204]	; (80012b4 <LCD_IO_WriteData16+0x240>)
 80011e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011ea:	619a      	str	r2, [r3, #24]
 80011ec:	e003      	b.n	80011f6 <LCD_IO_WriteData16+0x182>
 80011ee:	4b31      	ldr	r3, [pc, #196]	; (80012b4 <LCD_IO_WriteData16+0x240>)
 80011f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011f4:	619a      	str	r2, [r3, #24]
 80011f6:	4b2e      	ldr	r3, [pc, #184]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	f003 0308 	and.w	r3, r3, #8
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d004      	beq.n	800120c <LCD_IO_WriteData16+0x198>
 8001202:	4b2e      	ldr	r3, [pc, #184]	; (80012bc <LCD_IO_WriteData16+0x248>)
 8001204:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001208:	619a      	str	r2, [r3, #24]
 800120a:	e003      	b.n	8001214 <LCD_IO_WriteData16+0x1a0>
 800120c:	4b2b      	ldr	r3, [pc, #172]	; (80012bc <LCD_IO_WriteData16+0x248>)
 800120e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001212:	619a      	str	r2, [r3, #24]
 8001214:	4b26      	ldr	r3, [pc, #152]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	f003 0310 	and.w	r3, r3, #16
 800121c:	2b00      	cmp	r3, #0
 800121e:	d004      	beq.n	800122a <LCD_IO_WriteData16+0x1b6>
 8001220:	4b26      	ldr	r3, [pc, #152]	; (80012bc <LCD_IO_WriteData16+0x248>)
 8001222:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001226:	619a      	str	r2, [r3, #24]
 8001228:	e003      	b.n	8001232 <LCD_IO_WriteData16+0x1be>
 800122a:	4b24      	ldr	r3, [pc, #144]	; (80012bc <LCD_IO_WriteData16+0x248>)
 800122c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001230:	619a      	str	r2, [r3, #24]
 8001232:	4b1f      	ldr	r3, [pc, #124]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	f003 0320 	and.w	r3, r3, #32
 800123a:	2b00      	cmp	r3, #0
 800123c:	d004      	beq.n	8001248 <LCD_IO_WriteData16+0x1d4>
 800123e:	4b1f      	ldr	r3, [pc, #124]	; (80012bc <LCD_IO_WriteData16+0x248>)
 8001240:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001244:	619a      	str	r2, [r3, #24]
 8001246:	e003      	b.n	8001250 <LCD_IO_WriteData16+0x1dc>
 8001248:	4b1c      	ldr	r3, [pc, #112]	; (80012bc <LCD_IO_WriteData16+0x248>)
 800124a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800124e:	619a      	str	r2, [r3, #24]
 8001250:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001258:	2b00      	cmp	r3, #0
 800125a:	d004      	beq.n	8001266 <LCD_IO_WriteData16+0x1f2>
 800125c:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <LCD_IO_WriteData16+0x24c>)
 800125e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001262:	619a      	str	r2, [r3, #24]
 8001264:	e003      	b.n	800126e <LCD_IO_WriteData16+0x1fa>
 8001266:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <LCD_IO_WriteData16+0x24c>)
 8001268:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800126c:	619a      	str	r2, [r3, #24]
 800126e:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	b25b      	sxtb	r3, r3
 8001274:	2b00      	cmp	r3, #0
 8001276:	da04      	bge.n	8001282 <LCD_IO_WriteData16+0x20e>
 8001278:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <LCD_IO_WriteData16+0x240>)
 800127a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800127e:	619a      	str	r2, [r3, #24]
 8001280:	e003      	b.n	800128a <LCD_IO_WriteData16+0x216>
 8001282:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <LCD_IO_WriteData16+0x240>)
 8001284:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001288:	619a      	str	r2, [r3, #24]
 800128a:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <LCD_IO_WriteData16+0x250>)
 800128c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001290:	619a      	str	r2, [r3, #24]
 8001292:	2008      	movs	r0, #8
 8001294:	f7ff fc91 	bl	8000bba <LCD_IO_Delay>
 8001298:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <LCD_IO_WriteData16+0x250>)
 800129a:	2201      	movs	r2, #1
 800129c:	619a      	str	r2, [r3, #24]
  LCD_CS_OFF;
 800129e:	4b03      	ldr	r3, [pc, #12]	; (80012ac <LCD_IO_WriteData16+0x238>)
 80012a0:	2202      	movs	r2, #2
 80012a2:	619a      	str	r2, [r3, #24]
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	58020400 	.word	0x58020400
 80012b0:	240001ae 	.word	0x240001ae
 80012b4:	58021800 	.word	0x58021800
 80012b8:	58020c00 	.word	0x58020c00
 80012bc:	58021000 	.word	0x58021000
 80012c0:	58020000 	.word	0x58020000
 80012c4:	58020800 	.word	0x58020800

080012c8 <LCD_IO_WriteCmd8DataFill16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	603a      	str	r2, [r7, #0]
 80012d2:	71fb      	strb	r3, [r7, #7]
 80012d4:	460b      	mov	r3, r1
 80012d6:	80bb      	strh	r3, [r7, #4]
  LCD_CS_ON;
 80012d8:	4b9a      	ldr	r3, [pc, #616]	; (8001544 <LCD_IO_WriteCmd8DataFill16+0x27c>)
 80012da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012de:	619a      	str	r2, [r3, #24]
  LCD_CMD8_WRITE(Cmd);
 80012e0:	4b99      	ldr	r3, [pc, #612]	; (8001548 <LCD_IO_WriteCmd8DataFill16+0x280>)
 80012e2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80012e6:	619a      	str	r2, [r3, #24]
 80012e8:	4a98      	ldr	r2, [pc, #608]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	7013      	strb	r3, [r2, #0]
 80012ee:	4b97      	ldr	r3, [pc, #604]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d004      	beq.n	8001304 <LCD_IO_WriteCmd8DataFill16+0x3c>
 80012fa:	4b95      	ldr	r3, [pc, #596]	; (8001550 <LCD_IO_WriteCmd8DataFill16+0x288>)
 80012fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001300:	619a      	str	r2, [r3, #24]
 8001302:	e003      	b.n	800130c <LCD_IO_WriteCmd8DataFill16+0x44>
 8001304:	4b92      	ldr	r3, [pc, #584]	; (8001550 <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001306:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800130a:	619a      	str	r2, [r3, #24]
 800130c:	4b8f      	ldr	r3, [pc, #572]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d004      	beq.n	8001322 <LCD_IO_WriteCmd8DataFill16+0x5a>
 8001318:	4b8e      	ldr	r3, [pc, #568]	; (8001554 <LCD_IO_WriteCmd8DataFill16+0x28c>)
 800131a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800131e:	619a      	str	r2, [r3, #24]
 8001320:	e003      	b.n	800132a <LCD_IO_WriteCmd8DataFill16+0x62>
 8001322:	4b8c      	ldr	r3, [pc, #560]	; (8001554 <LCD_IO_WriteCmd8DataFill16+0x28c>)
 8001324:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001328:	619a      	str	r2, [r3, #24]
 800132a:	4b88      	ldr	r3, [pc, #544]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	f003 0304 	and.w	r3, r3, #4
 8001332:	2b00      	cmp	r3, #0
 8001334:	d004      	beq.n	8001340 <LCD_IO_WriteCmd8DataFill16+0x78>
 8001336:	4b86      	ldr	r3, [pc, #536]	; (8001550 <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001338:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800133c:	619a      	str	r2, [r3, #24]
 800133e:	e003      	b.n	8001348 <LCD_IO_WriteCmd8DataFill16+0x80>
 8001340:	4b83      	ldr	r3, [pc, #524]	; (8001550 <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001342:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001346:	619a      	str	r2, [r3, #24]
 8001348:	4b80      	ldr	r3, [pc, #512]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	f003 0308 	and.w	r3, r3, #8
 8001350:	2b00      	cmp	r3, #0
 8001352:	d004      	beq.n	800135e <LCD_IO_WriteCmd8DataFill16+0x96>
 8001354:	4b80      	ldr	r3, [pc, #512]	; (8001558 <LCD_IO_WriteCmd8DataFill16+0x290>)
 8001356:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800135a:	619a      	str	r2, [r3, #24]
 800135c:	e003      	b.n	8001366 <LCD_IO_WriteCmd8DataFill16+0x9e>
 800135e:	4b7e      	ldr	r3, [pc, #504]	; (8001558 <LCD_IO_WriteCmd8DataFill16+0x290>)
 8001360:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001364:	619a      	str	r2, [r3, #24]
 8001366:	4b79      	ldr	r3, [pc, #484]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	f003 0310 	and.w	r3, r3, #16
 800136e:	2b00      	cmp	r3, #0
 8001370:	d004      	beq.n	800137c <LCD_IO_WriteCmd8DataFill16+0xb4>
 8001372:	4b79      	ldr	r3, [pc, #484]	; (8001558 <LCD_IO_WriteCmd8DataFill16+0x290>)
 8001374:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001378:	619a      	str	r2, [r3, #24]
 800137a:	e003      	b.n	8001384 <LCD_IO_WriteCmd8DataFill16+0xbc>
 800137c:	4b76      	ldr	r3, [pc, #472]	; (8001558 <LCD_IO_WriteCmd8DataFill16+0x290>)
 800137e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001382:	619a      	str	r2, [r3, #24]
 8001384:	4b71      	ldr	r3, [pc, #452]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	f003 0320 	and.w	r3, r3, #32
 800138c:	2b00      	cmp	r3, #0
 800138e:	d004      	beq.n	800139a <LCD_IO_WriteCmd8DataFill16+0xd2>
 8001390:	4b71      	ldr	r3, [pc, #452]	; (8001558 <LCD_IO_WriteCmd8DataFill16+0x290>)
 8001392:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001396:	619a      	str	r2, [r3, #24]
 8001398:	e003      	b.n	80013a2 <LCD_IO_WriteCmd8DataFill16+0xda>
 800139a:	4b6f      	ldr	r3, [pc, #444]	; (8001558 <LCD_IO_WriteCmd8DataFill16+0x290>)
 800139c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013a0:	619a      	str	r2, [r3, #24]
 80013a2:	4b6a      	ldr	r3, [pc, #424]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d004      	beq.n	80013b8 <LCD_IO_WriteCmd8DataFill16+0xf0>
 80013ae:	4b6b      	ldr	r3, [pc, #428]	; (800155c <LCD_IO_WriteCmd8DataFill16+0x294>)
 80013b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013b4:	619a      	str	r2, [r3, #24]
 80013b6:	e003      	b.n	80013c0 <LCD_IO_WriteCmd8DataFill16+0xf8>
 80013b8:	4b68      	ldr	r3, [pc, #416]	; (800155c <LCD_IO_WriteCmd8DataFill16+0x294>)
 80013ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80013be:	619a      	str	r2, [r3, #24]
 80013c0:	4b62      	ldr	r3, [pc, #392]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	b25b      	sxtb	r3, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	da04      	bge.n	80013d4 <LCD_IO_WriteCmd8DataFill16+0x10c>
 80013ca:	4b61      	ldr	r3, [pc, #388]	; (8001550 <LCD_IO_WriteCmd8DataFill16+0x288>)
 80013cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013d0:	619a      	str	r2, [r3, #24]
 80013d2:	e003      	b.n	80013dc <LCD_IO_WriteCmd8DataFill16+0x114>
 80013d4:	4b5e      	ldr	r3, [pc, #376]	; (8001550 <LCD_IO_WriteCmd8DataFill16+0x288>)
 80013d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013da:	619a      	str	r2, [r3, #24]
 80013dc:	4b5a      	ldr	r3, [pc, #360]	; (8001548 <LCD_IO_WriteCmd8DataFill16+0x280>)
 80013de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013e2:	619a      	str	r2, [r3, #24]
 80013e4:	2008      	movs	r0, #8
 80013e6:	f7ff fbe8 	bl	8000bba <LCD_IO_Delay>
 80013ea:	4b57      	ldr	r3, [pc, #348]	; (8001548 <LCD_IO_WriteCmd8DataFill16+0x280>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	619a      	str	r2, [r3, #24]
 80013f0:	4b55      	ldr	r3, [pc, #340]	; (8001548 <LCD_IO_WriteCmd8DataFill16+0x280>)
 80013f2:	2208      	movs	r2, #8
 80013f4:	619a      	str	r2, [r3, #24]
  while(Size--)
 80013f6:	e11a      	b.n	800162e <LCD_IO_WriteCmd8DataFill16+0x366>
  {
    LCD_DATA16_WRITE(Data);
 80013f8:	88bb      	ldrh	r3, [r7, #4]
 80013fa:	0a1b      	lsrs	r3, r3, #8
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	4b52      	ldr	r3, [pc, #328]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001402:	701a      	strb	r2, [r3, #0]
 8001404:	4b51      	ldr	r3, [pc, #324]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	2b00      	cmp	r3, #0
 800140e:	d004      	beq.n	800141a <LCD_IO_WriteCmd8DataFill16+0x152>
 8001410:	4b4f      	ldr	r3, [pc, #316]	; (8001550 <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001412:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001416:	619a      	str	r2, [r3, #24]
 8001418:	e003      	b.n	8001422 <LCD_IO_WriteCmd8DataFill16+0x15a>
 800141a:	4b4d      	ldr	r3, [pc, #308]	; (8001550 <LCD_IO_WriteCmd8DataFill16+0x288>)
 800141c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001420:	619a      	str	r2, [r3, #24]
 8001422:	4b4a      	ldr	r3, [pc, #296]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d004      	beq.n	8001438 <LCD_IO_WriteCmd8DataFill16+0x170>
 800142e:	4b49      	ldr	r3, [pc, #292]	; (8001554 <LCD_IO_WriteCmd8DataFill16+0x28c>)
 8001430:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001434:	619a      	str	r2, [r3, #24]
 8001436:	e003      	b.n	8001440 <LCD_IO_WriteCmd8DataFill16+0x178>
 8001438:	4b46      	ldr	r3, [pc, #280]	; (8001554 <LCD_IO_WriteCmd8DataFill16+0x28c>)
 800143a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800143e:	619a      	str	r2, [r3, #24]
 8001440:	4b42      	ldr	r3, [pc, #264]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	f003 0304 	and.w	r3, r3, #4
 8001448:	2b00      	cmp	r3, #0
 800144a:	d004      	beq.n	8001456 <LCD_IO_WriteCmd8DataFill16+0x18e>
 800144c:	4b40      	ldr	r3, [pc, #256]	; (8001550 <LCD_IO_WriteCmd8DataFill16+0x288>)
 800144e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001452:	619a      	str	r2, [r3, #24]
 8001454:	e003      	b.n	800145e <LCD_IO_WriteCmd8DataFill16+0x196>
 8001456:	4b3e      	ldr	r3, [pc, #248]	; (8001550 <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001458:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800145c:	619a      	str	r2, [r3, #24]
 800145e:	4b3b      	ldr	r3, [pc, #236]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	f003 0308 	and.w	r3, r3, #8
 8001466:	2b00      	cmp	r3, #0
 8001468:	d004      	beq.n	8001474 <LCD_IO_WriteCmd8DataFill16+0x1ac>
 800146a:	4b3b      	ldr	r3, [pc, #236]	; (8001558 <LCD_IO_WriteCmd8DataFill16+0x290>)
 800146c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001470:	619a      	str	r2, [r3, #24]
 8001472:	e003      	b.n	800147c <LCD_IO_WriteCmd8DataFill16+0x1b4>
 8001474:	4b38      	ldr	r3, [pc, #224]	; (8001558 <LCD_IO_WriteCmd8DataFill16+0x290>)
 8001476:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800147a:	619a      	str	r2, [r3, #24]
 800147c:	4b33      	ldr	r3, [pc, #204]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	f003 0310 	and.w	r3, r3, #16
 8001484:	2b00      	cmp	r3, #0
 8001486:	d004      	beq.n	8001492 <LCD_IO_WriteCmd8DataFill16+0x1ca>
 8001488:	4b33      	ldr	r3, [pc, #204]	; (8001558 <LCD_IO_WriteCmd8DataFill16+0x290>)
 800148a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800148e:	619a      	str	r2, [r3, #24]
 8001490:	e003      	b.n	800149a <LCD_IO_WriteCmd8DataFill16+0x1d2>
 8001492:	4b31      	ldr	r3, [pc, #196]	; (8001558 <LCD_IO_WriteCmd8DataFill16+0x290>)
 8001494:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001498:	619a      	str	r2, [r3, #24]
 800149a:	4b2c      	ldr	r3, [pc, #176]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	f003 0320 	and.w	r3, r3, #32
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d004      	beq.n	80014b0 <LCD_IO_WriteCmd8DataFill16+0x1e8>
 80014a6:	4b2c      	ldr	r3, [pc, #176]	; (8001558 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80014a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014ac:	619a      	str	r2, [r3, #24]
 80014ae:	e003      	b.n	80014b8 <LCD_IO_WriteCmd8DataFill16+0x1f0>
 80014b0:	4b29      	ldr	r3, [pc, #164]	; (8001558 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80014b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014b6:	619a      	str	r2, [r3, #24]
 80014b8:	4b24      	ldr	r3, [pc, #144]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d004      	beq.n	80014ce <LCD_IO_WriteCmd8DataFill16+0x206>
 80014c4:	4b25      	ldr	r3, [pc, #148]	; (800155c <LCD_IO_WriteCmd8DataFill16+0x294>)
 80014c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014ca:	619a      	str	r2, [r3, #24]
 80014cc:	e003      	b.n	80014d6 <LCD_IO_WriteCmd8DataFill16+0x20e>
 80014ce:	4b23      	ldr	r3, [pc, #140]	; (800155c <LCD_IO_WriteCmd8DataFill16+0x294>)
 80014d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80014d4:	619a      	str	r2, [r3, #24]
 80014d6:	4b1d      	ldr	r3, [pc, #116]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	b25b      	sxtb	r3, r3
 80014dc:	2b00      	cmp	r3, #0
 80014de:	da04      	bge.n	80014ea <LCD_IO_WriteCmd8DataFill16+0x222>
 80014e0:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <LCD_IO_WriteCmd8DataFill16+0x288>)
 80014e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014e6:	619a      	str	r2, [r3, #24]
 80014e8:	e003      	b.n	80014f2 <LCD_IO_WriteCmd8DataFill16+0x22a>
 80014ea:	4b19      	ldr	r3, [pc, #100]	; (8001550 <LCD_IO_WriteCmd8DataFill16+0x288>)
 80014ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014f0:	619a      	str	r2, [r3, #24]
 80014f2:	4b15      	ldr	r3, [pc, #84]	; (8001548 <LCD_IO_WriteCmd8DataFill16+0x280>)
 80014f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014f8:	619a      	str	r2, [r3, #24]
 80014fa:	2008      	movs	r0, #8
 80014fc:	f7ff fb5d 	bl	8000bba <LCD_IO_Delay>
 8001500:	4b11      	ldr	r3, [pc, #68]	; (8001548 <LCD_IO_WriteCmd8DataFill16+0x280>)
 8001502:	2201      	movs	r2, #1
 8001504:	619a      	str	r2, [r3, #24]
 8001506:	88bb      	ldrh	r3, [r7, #4]
 8001508:	b2da      	uxtb	r2, r3
 800150a:	4b10      	ldr	r3, [pc, #64]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 800150c:	701a      	strb	r2, [r3, #0]
 800150e:	4b0f      	ldr	r3, [pc, #60]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	2b00      	cmp	r3, #0
 8001518:	d004      	beq.n	8001524 <LCD_IO_WriteCmd8DataFill16+0x25c>
 800151a:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <LCD_IO_WriteCmd8DataFill16+0x288>)
 800151c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001520:	619a      	str	r2, [r3, #24]
 8001522:	e003      	b.n	800152c <LCD_IO_WriteCmd8DataFill16+0x264>
 8001524:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001526:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800152a:	619a      	str	r2, [r3, #24]
 800152c:	4b07      	ldr	r3, [pc, #28]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d013      	beq.n	8001560 <LCD_IO_WriteCmd8DataFill16+0x298>
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <LCD_IO_WriteCmd8DataFill16+0x28c>)
 800153a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800153e:	619a      	str	r2, [r3, #24]
 8001540:	e012      	b.n	8001568 <LCD_IO_WriteCmd8DataFill16+0x2a0>
 8001542:	bf00      	nop
 8001544:	58020400 	.word	0x58020400
 8001548:	58020800 	.word	0x58020800
 800154c:	240001ae 	.word	0x240001ae
 8001550:	58021800 	.word	0x58021800
 8001554:	58020c00 	.word	0x58020c00
 8001558:	58021000 	.word	0x58021000
 800155c:	58020000 	.word	0x58020000
 8001560:	4b39      	ldr	r3, [pc, #228]	; (8001648 <LCD_IO_WriteCmd8DataFill16+0x380>)
 8001562:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001566:	619a      	str	r2, [r3, #24]
 8001568:	4b38      	ldr	r3, [pc, #224]	; (800164c <LCD_IO_WriteCmd8DataFill16+0x384>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	2b00      	cmp	r3, #0
 8001572:	d004      	beq.n	800157e <LCD_IO_WriteCmd8DataFill16+0x2b6>
 8001574:	4b36      	ldr	r3, [pc, #216]	; (8001650 <LCD_IO_WriteCmd8DataFill16+0x388>)
 8001576:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800157a:	619a      	str	r2, [r3, #24]
 800157c:	e003      	b.n	8001586 <LCD_IO_WriteCmd8DataFill16+0x2be>
 800157e:	4b34      	ldr	r3, [pc, #208]	; (8001650 <LCD_IO_WriteCmd8DataFill16+0x388>)
 8001580:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001584:	619a      	str	r2, [r3, #24]
 8001586:	4b31      	ldr	r3, [pc, #196]	; (800164c <LCD_IO_WriteCmd8DataFill16+0x384>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	f003 0308 	and.w	r3, r3, #8
 800158e:	2b00      	cmp	r3, #0
 8001590:	d004      	beq.n	800159c <LCD_IO_WriteCmd8DataFill16+0x2d4>
 8001592:	4b30      	ldr	r3, [pc, #192]	; (8001654 <LCD_IO_WriteCmd8DataFill16+0x38c>)
 8001594:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001598:	619a      	str	r2, [r3, #24]
 800159a:	e003      	b.n	80015a4 <LCD_IO_WriteCmd8DataFill16+0x2dc>
 800159c:	4b2d      	ldr	r3, [pc, #180]	; (8001654 <LCD_IO_WriteCmd8DataFill16+0x38c>)
 800159e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80015a2:	619a      	str	r2, [r3, #24]
 80015a4:	4b29      	ldr	r3, [pc, #164]	; (800164c <LCD_IO_WriteCmd8DataFill16+0x384>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	f003 0310 	and.w	r3, r3, #16
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d004      	beq.n	80015ba <LCD_IO_WriteCmd8DataFill16+0x2f2>
 80015b0:	4b28      	ldr	r3, [pc, #160]	; (8001654 <LCD_IO_WriteCmd8DataFill16+0x38c>)
 80015b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015b6:	619a      	str	r2, [r3, #24]
 80015b8:	e003      	b.n	80015c2 <LCD_IO_WriteCmd8DataFill16+0x2fa>
 80015ba:	4b26      	ldr	r3, [pc, #152]	; (8001654 <LCD_IO_WriteCmd8DataFill16+0x38c>)
 80015bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015c0:	619a      	str	r2, [r3, #24]
 80015c2:	4b22      	ldr	r3, [pc, #136]	; (800164c <LCD_IO_WriteCmd8DataFill16+0x384>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	f003 0320 	and.w	r3, r3, #32
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d004      	beq.n	80015d8 <LCD_IO_WriteCmd8DataFill16+0x310>
 80015ce:	4b21      	ldr	r3, [pc, #132]	; (8001654 <LCD_IO_WriteCmd8DataFill16+0x38c>)
 80015d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015d4:	619a      	str	r2, [r3, #24]
 80015d6:	e003      	b.n	80015e0 <LCD_IO_WriteCmd8DataFill16+0x318>
 80015d8:	4b1e      	ldr	r3, [pc, #120]	; (8001654 <LCD_IO_WriteCmd8DataFill16+0x38c>)
 80015da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015de:	619a      	str	r2, [r3, #24]
 80015e0:	4b1a      	ldr	r3, [pc, #104]	; (800164c <LCD_IO_WriteCmd8DataFill16+0x384>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d004      	beq.n	80015f6 <LCD_IO_WriteCmd8DataFill16+0x32e>
 80015ec:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <LCD_IO_WriteCmd8DataFill16+0x390>)
 80015ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015f2:	619a      	str	r2, [r3, #24]
 80015f4:	e003      	b.n	80015fe <LCD_IO_WriteCmd8DataFill16+0x336>
 80015f6:	4b18      	ldr	r3, [pc, #96]	; (8001658 <LCD_IO_WriteCmd8DataFill16+0x390>)
 80015f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80015fc:	619a      	str	r2, [r3, #24]
 80015fe:	4b13      	ldr	r3, [pc, #76]	; (800164c <LCD_IO_WriteCmd8DataFill16+0x384>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	b25b      	sxtb	r3, r3
 8001604:	2b00      	cmp	r3, #0
 8001606:	da04      	bge.n	8001612 <LCD_IO_WriteCmd8DataFill16+0x34a>
 8001608:	4b11      	ldr	r3, [pc, #68]	; (8001650 <LCD_IO_WriteCmd8DataFill16+0x388>)
 800160a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800160e:	619a      	str	r2, [r3, #24]
 8001610:	e003      	b.n	800161a <LCD_IO_WriteCmd8DataFill16+0x352>
 8001612:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <LCD_IO_WriteCmd8DataFill16+0x388>)
 8001614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001618:	619a      	str	r2, [r3, #24]
 800161a:	4b10      	ldr	r3, [pc, #64]	; (800165c <LCD_IO_WriteCmd8DataFill16+0x394>)
 800161c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001620:	619a      	str	r2, [r3, #24]
 8001622:	2008      	movs	r0, #8
 8001624:	f7ff fac9 	bl	8000bba <LCD_IO_Delay>
 8001628:	4b0c      	ldr	r3, [pc, #48]	; (800165c <LCD_IO_WriteCmd8DataFill16+0x394>)
 800162a:	2201      	movs	r2, #1
 800162c:	619a      	str	r2, [r3, #24]
  while(Size--)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	1e5a      	subs	r2, r3, #1
 8001632:	603a      	str	r2, [r7, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	f47f aedf 	bne.w	80013f8 <LCD_IO_WriteCmd8DataFill16+0x130>
  }
  LCD_CS_OFF;
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <LCD_IO_WriteCmd8DataFill16+0x398>)
 800163c:	2202      	movs	r2, #2
 800163e:	619a      	str	r2, [r3, #24]
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	58020c00 	.word	0x58020c00
 800164c:	240001ae 	.word	0x240001ae
 8001650:	58021800 	.word	0x58021800
 8001654:	58021000 	.word	0x58021000
 8001658:	58020000 	.word	0x58020000
 800165c:	58020800 	.word	0x58020800
 8001660:	58020400 	.word	0x58020400

08001664 <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
 8001670:	73fb      	strb	r3, [r7, #15]
  LCD_CS_ON;
 8001672:	4b92      	ldr	r3, [pc, #584]	; (80018bc <LCD_IO_WriteCmd8MultipleData8+0x258>)
 8001674:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001678:	619a      	str	r2, [r3, #24]
  LCD_CMD8_WRITE(Cmd);
 800167a:	4b91      	ldr	r3, [pc, #580]	; (80018c0 <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 800167c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001680:	619a      	str	r2, [r3, #24]
 8001682:	4a90      	ldr	r2, [pc, #576]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001684:	7bfb      	ldrb	r3, [r7, #15]
 8001686:	7013      	strb	r3, [r2, #0]
 8001688:	4b8e      	ldr	r3, [pc, #568]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	2b00      	cmp	r3, #0
 8001692:	d004      	beq.n	800169e <LCD_IO_WriteCmd8MultipleData8+0x3a>
 8001694:	4b8c      	ldr	r3, [pc, #560]	; (80018c8 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001696:	f44f 7200 	mov.w	r2, #512	; 0x200
 800169a:	619a      	str	r2, [r3, #24]
 800169c:	e003      	b.n	80016a6 <LCD_IO_WriteCmd8MultipleData8+0x42>
 800169e:	4b8a      	ldr	r3, [pc, #552]	; (80018c8 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 80016a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016a4:	619a      	str	r2, [r3, #24]
 80016a6:	4b87      	ldr	r3, [pc, #540]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d004      	beq.n	80016bc <LCD_IO_WriteCmd8MultipleData8+0x58>
 80016b2:	4b86      	ldr	r3, [pc, #536]	; (80018cc <LCD_IO_WriteCmd8MultipleData8+0x268>)
 80016b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016b8:	619a      	str	r2, [r3, #24]
 80016ba:	e003      	b.n	80016c4 <LCD_IO_WriteCmd8MultipleData8+0x60>
 80016bc:	4b83      	ldr	r3, [pc, #524]	; (80018cc <LCD_IO_WriteCmd8MultipleData8+0x268>)
 80016be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80016c2:	619a      	str	r2, [r3, #24]
 80016c4:	4b7f      	ldr	r3, [pc, #508]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d004      	beq.n	80016da <LCD_IO_WriteCmd8MultipleData8+0x76>
 80016d0:	4b7d      	ldr	r3, [pc, #500]	; (80018c8 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 80016d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016d6:	619a      	str	r2, [r3, #24]
 80016d8:	e003      	b.n	80016e2 <LCD_IO_WriteCmd8MultipleData8+0x7e>
 80016da:	4b7b      	ldr	r3, [pc, #492]	; (80018c8 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 80016dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016e0:	619a      	str	r2, [r3, #24]
 80016e2:	4b78      	ldr	r3, [pc, #480]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	f003 0308 	and.w	r3, r3, #8
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d004      	beq.n	80016f8 <LCD_IO_WriteCmd8MultipleData8+0x94>
 80016ee:	4b78      	ldr	r3, [pc, #480]	; (80018d0 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 80016f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016f4:	619a      	str	r2, [r3, #24]
 80016f6:	e003      	b.n	8001700 <LCD_IO_WriteCmd8MultipleData8+0x9c>
 80016f8:	4b75      	ldr	r3, [pc, #468]	; (80018d0 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 80016fa:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80016fe:	619a      	str	r2, [r3, #24]
 8001700:	4b70      	ldr	r3, [pc, #448]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	f003 0310 	and.w	r3, r3, #16
 8001708:	2b00      	cmp	r3, #0
 800170a:	d004      	beq.n	8001716 <LCD_IO_WriteCmd8MultipleData8+0xb2>
 800170c:	4b70      	ldr	r3, [pc, #448]	; (80018d0 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 800170e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001712:	619a      	str	r2, [r3, #24]
 8001714:	e003      	b.n	800171e <LCD_IO_WriteCmd8MultipleData8+0xba>
 8001716:	4b6e      	ldr	r3, [pc, #440]	; (80018d0 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001718:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800171c:	619a      	str	r2, [r3, #24]
 800171e:	4b69      	ldr	r3, [pc, #420]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	f003 0320 	and.w	r3, r3, #32
 8001726:	2b00      	cmp	r3, #0
 8001728:	d004      	beq.n	8001734 <LCD_IO_WriteCmd8MultipleData8+0xd0>
 800172a:	4b69      	ldr	r3, [pc, #420]	; (80018d0 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 800172c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001730:	619a      	str	r2, [r3, #24]
 8001732:	e003      	b.n	800173c <LCD_IO_WriteCmd8MultipleData8+0xd8>
 8001734:	4b66      	ldr	r3, [pc, #408]	; (80018d0 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001736:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800173a:	619a      	str	r2, [r3, #24]
 800173c:	4b61      	ldr	r3, [pc, #388]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001744:	2b00      	cmp	r3, #0
 8001746:	d004      	beq.n	8001752 <LCD_IO_WriteCmd8MultipleData8+0xee>
 8001748:	4b62      	ldr	r3, [pc, #392]	; (80018d4 <LCD_IO_WriteCmd8MultipleData8+0x270>)
 800174a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800174e:	619a      	str	r2, [r3, #24]
 8001750:	e003      	b.n	800175a <LCD_IO_WriteCmd8MultipleData8+0xf6>
 8001752:	4b60      	ldr	r3, [pc, #384]	; (80018d4 <LCD_IO_WriteCmd8MultipleData8+0x270>)
 8001754:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001758:	619a      	str	r2, [r3, #24]
 800175a:	4b5a      	ldr	r3, [pc, #360]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	b25b      	sxtb	r3, r3
 8001760:	2b00      	cmp	r3, #0
 8001762:	da04      	bge.n	800176e <LCD_IO_WriteCmd8MultipleData8+0x10a>
 8001764:	4b58      	ldr	r3, [pc, #352]	; (80018c8 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001766:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800176a:	619a      	str	r2, [r3, #24]
 800176c:	e003      	b.n	8001776 <LCD_IO_WriteCmd8MultipleData8+0x112>
 800176e:	4b56      	ldr	r3, [pc, #344]	; (80018c8 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001770:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001774:	619a      	str	r2, [r3, #24]
 8001776:	4b52      	ldr	r3, [pc, #328]	; (80018c0 <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 8001778:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800177c:	619a      	str	r2, [r3, #24]
 800177e:	2008      	movs	r0, #8
 8001780:	f7ff fa1b 	bl	8000bba <LCD_IO_Delay>
 8001784:	4b4e      	ldr	r3, [pc, #312]	; (80018c0 <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 8001786:	2201      	movs	r2, #1
 8001788:	619a      	str	r2, [r3, #24]
 800178a:	4b4d      	ldr	r3, [pc, #308]	; (80018c0 <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 800178c:	2208      	movs	r2, #8
 800178e:	619a      	str	r2, [r3, #24]

  while(Size--)
 8001790:	e087      	b.n	80018a2 <LCD_IO_WriteCmd8MultipleData8+0x23e>
  {
    LCD_DATA8_WRITE(*pData);
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	781a      	ldrb	r2, [r3, #0]
 8001796:	4b4b      	ldr	r3, [pc, #300]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001798:	701a      	strb	r2, [r3, #0]
 800179a:	4b4a      	ldr	r3, [pc, #296]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d004      	beq.n	80017b0 <LCD_IO_WriteCmd8MultipleData8+0x14c>
 80017a6:	4b48      	ldr	r3, [pc, #288]	; (80018c8 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 80017a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017ac:	619a      	str	r2, [r3, #24]
 80017ae:	e003      	b.n	80017b8 <LCD_IO_WriteCmd8MultipleData8+0x154>
 80017b0:	4b45      	ldr	r3, [pc, #276]	; (80018c8 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 80017b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017b6:	619a      	str	r2, [r3, #24]
 80017b8:	4b42      	ldr	r3, [pc, #264]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d004      	beq.n	80017ce <LCD_IO_WriteCmd8MultipleData8+0x16a>
 80017c4:	4b41      	ldr	r3, [pc, #260]	; (80018cc <LCD_IO_WriteCmd8MultipleData8+0x268>)
 80017c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80017ca:	619a      	str	r2, [r3, #24]
 80017cc:	e003      	b.n	80017d6 <LCD_IO_WriteCmd8MultipleData8+0x172>
 80017ce:	4b3f      	ldr	r3, [pc, #252]	; (80018cc <LCD_IO_WriteCmd8MultipleData8+0x268>)
 80017d0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80017d4:	619a      	str	r2, [r3, #24]
 80017d6:	4b3b      	ldr	r3, [pc, #236]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	f003 0304 	and.w	r3, r3, #4
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d004      	beq.n	80017ec <LCD_IO_WriteCmd8MultipleData8+0x188>
 80017e2:	4b39      	ldr	r3, [pc, #228]	; (80018c8 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 80017e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017e8:	619a      	str	r2, [r3, #24]
 80017ea:	e003      	b.n	80017f4 <LCD_IO_WriteCmd8MultipleData8+0x190>
 80017ec:	4b36      	ldr	r3, [pc, #216]	; (80018c8 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 80017ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017f2:	619a      	str	r2, [r3, #24]
 80017f4:	4b33      	ldr	r3, [pc, #204]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	f003 0308 	and.w	r3, r3, #8
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d004      	beq.n	800180a <LCD_IO_WriteCmd8MultipleData8+0x1a6>
 8001800:	4b33      	ldr	r3, [pc, #204]	; (80018d0 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001802:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001806:	619a      	str	r2, [r3, #24]
 8001808:	e003      	b.n	8001812 <LCD_IO_WriteCmd8MultipleData8+0x1ae>
 800180a:	4b31      	ldr	r3, [pc, #196]	; (80018d0 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 800180c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001810:	619a      	str	r2, [r3, #24]
 8001812:	4b2c      	ldr	r3, [pc, #176]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	f003 0310 	and.w	r3, r3, #16
 800181a:	2b00      	cmp	r3, #0
 800181c:	d004      	beq.n	8001828 <LCD_IO_WriteCmd8MultipleData8+0x1c4>
 800181e:	4b2c      	ldr	r3, [pc, #176]	; (80018d0 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001820:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001824:	619a      	str	r2, [r3, #24]
 8001826:	e003      	b.n	8001830 <LCD_IO_WriteCmd8MultipleData8+0x1cc>
 8001828:	4b29      	ldr	r3, [pc, #164]	; (80018d0 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 800182a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800182e:	619a      	str	r2, [r3, #24]
 8001830:	4b24      	ldr	r3, [pc, #144]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	f003 0320 	and.w	r3, r3, #32
 8001838:	2b00      	cmp	r3, #0
 800183a:	d004      	beq.n	8001846 <LCD_IO_WriteCmd8MultipleData8+0x1e2>
 800183c:	4b24      	ldr	r3, [pc, #144]	; (80018d0 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 800183e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001842:	619a      	str	r2, [r3, #24]
 8001844:	e003      	b.n	800184e <LCD_IO_WriteCmd8MultipleData8+0x1ea>
 8001846:	4b22      	ldr	r3, [pc, #136]	; (80018d0 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001848:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800184c:	619a      	str	r2, [r3, #24]
 800184e:	4b1d      	ldr	r3, [pc, #116]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001856:	2b00      	cmp	r3, #0
 8001858:	d004      	beq.n	8001864 <LCD_IO_WriteCmd8MultipleData8+0x200>
 800185a:	4b1e      	ldr	r3, [pc, #120]	; (80018d4 <LCD_IO_WriteCmd8MultipleData8+0x270>)
 800185c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001860:	619a      	str	r2, [r3, #24]
 8001862:	e003      	b.n	800186c <LCD_IO_WriteCmd8MultipleData8+0x208>
 8001864:	4b1b      	ldr	r3, [pc, #108]	; (80018d4 <LCD_IO_WriteCmd8MultipleData8+0x270>)
 8001866:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800186a:	619a      	str	r2, [r3, #24]
 800186c:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	b25b      	sxtb	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	da04      	bge.n	8001880 <LCD_IO_WriteCmd8MultipleData8+0x21c>
 8001876:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001878:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800187c:	619a      	str	r2, [r3, #24]
 800187e:	e003      	b.n	8001888 <LCD_IO_WriteCmd8MultipleData8+0x224>
 8001880:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001886:	619a      	str	r2, [r3, #24]
 8001888:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 800188a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800188e:	619a      	str	r2, [r3, #24]
 8001890:	2008      	movs	r0, #8
 8001892:	f7ff f992 	bl	8000bba <LCD_IO_Delay>
 8001896:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 8001898:	2201      	movs	r2, #1
 800189a:	619a      	str	r2, [r3, #24]
    pData ++;
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	3301      	adds	r3, #1
 80018a0:	60bb      	str	r3, [r7, #8]
  while(Size--)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	1e5a      	subs	r2, r3, #1
 80018a6:	607a      	str	r2, [r7, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f47f af72 	bne.w	8001792 <LCD_IO_WriteCmd8MultipleData8+0x12e>
  }
  LCD_CS_OFF;
 80018ae:	4b03      	ldr	r3, [pc, #12]	; (80018bc <LCD_IO_WriteCmd8MultipleData8+0x258>)
 80018b0:	2202      	movs	r2, #2
 80018b2:	619a      	str	r2, [r3, #24]
}
 80018b4:	bf00      	nop
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	58020400 	.word	0x58020400
 80018c0:	58020800 	.word	0x58020800
 80018c4:	240001ae 	.word	0x240001ae
 80018c8:	58021800 	.word	0x58021800
 80018cc:	58020c00 	.word	0x58020c00
 80018d0:	58021000 	.word	0x58021000
 80018d4:	58020000 	.word	0x58020000

080018d8 <LCD_IO_WriteCmd8MultipleData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData16(uint8_t Cmd, uint16_t *pData, uint32_t Size)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
 80018e4:	73fb      	strb	r3, [r7, #15]
  LCD_CS_ON;
 80018e6:	4b9b      	ldr	r3, [pc, #620]	; (8001b54 <LCD_IO_WriteCmd8MultipleData16+0x27c>)
 80018e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018ec:	619a      	str	r2, [r3, #24]
  LCD_CMD8_WRITE(Cmd);
 80018ee:	4b9a      	ldr	r3, [pc, #616]	; (8001b58 <LCD_IO_WriteCmd8MultipleData16+0x280>)
 80018f0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80018f4:	619a      	str	r2, [r3, #24]
 80018f6:	4a99      	ldr	r2, [pc, #612]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
 80018fa:	7013      	strb	r3, [r2, #0]
 80018fc:	4b97      	ldr	r3, [pc, #604]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b00      	cmp	r3, #0
 8001906:	d004      	beq.n	8001912 <LCD_IO_WriteCmd8MultipleData16+0x3a>
 8001908:	4b95      	ldr	r3, [pc, #596]	; (8001b60 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 800190a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800190e:	619a      	str	r2, [r3, #24]
 8001910:	e003      	b.n	800191a <LCD_IO_WriteCmd8MultipleData16+0x42>
 8001912:	4b93      	ldr	r3, [pc, #588]	; (8001b60 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001914:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001918:	619a      	str	r2, [r3, #24]
 800191a:	4b90      	ldr	r3, [pc, #576]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d004      	beq.n	8001930 <LCD_IO_WriteCmd8MultipleData16+0x58>
 8001926:	4b8f      	ldr	r3, [pc, #572]	; (8001b64 <LCD_IO_WriteCmd8MultipleData16+0x28c>)
 8001928:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800192c:	619a      	str	r2, [r3, #24]
 800192e:	e003      	b.n	8001938 <LCD_IO_WriteCmd8MultipleData16+0x60>
 8001930:	4b8c      	ldr	r3, [pc, #560]	; (8001b64 <LCD_IO_WriteCmd8MultipleData16+0x28c>)
 8001932:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001936:	619a      	str	r2, [r3, #24]
 8001938:	4b88      	ldr	r3, [pc, #544]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	f003 0304 	and.w	r3, r3, #4
 8001940:	2b00      	cmp	r3, #0
 8001942:	d004      	beq.n	800194e <LCD_IO_WriteCmd8MultipleData16+0x76>
 8001944:	4b86      	ldr	r3, [pc, #536]	; (8001b60 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001946:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800194a:	619a      	str	r2, [r3, #24]
 800194c:	e003      	b.n	8001956 <LCD_IO_WriteCmd8MultipleData16+0x7e>
 800194e:	4b84      	ldr	r3, [pc, #528]	; (8001b60 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001950:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001954:	619a      	str	r2, [r3, #24]
 8001956:	4b81      	ldr	r3, [pc, #516]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	f003 0308 	and.w	r3, r3, #8
 800195e:	2b00      	cmp	r3, #0
 8001960:	d004      	beq.n	800196c <LCD_IO_WriteCmd8MultipleData16+0x94>
 8001962:	4b81      	ldr	r3, [pc, #516]	; (8001b68 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001964:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001968:	619a      	str	r2, [r3, #24]
 800196a:	e003      	b.n	8001974 <LCD_IO_WriteCmd8MultipleData16+0x9c>
 800196c:	4b7e      	ldr	r3, [pc, #504]	; (8001b68 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 800196e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001972:	619a      	str	r2, [r3, #24]
 8001974:	4b79      	ldr	r3, [pc, #484]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	f003 0310 	and.w	r3, r3, #16
 800197c:	2b00      	cmp	r3, #0
 800197e:	d004      	beq.n	800198a <LCD_IO_WriteCmd8MultipleData16+0xb2>
 8001980:	4b79      	ldr	r3, [pc, #484]	; (8001b68 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001982:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001986:	619a      	str	r2, [r3, #24]
 8001988:	e003      	b.n	8001992 <LCD_IO_WriteCmd8MultipleData16+0xba>
 800198a:	4b77      	ldr	r3, [pc, #476]	; (8001b68 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 800198c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001990:	619a      	str	r2, [r3, #24]
 8001992:	4b72      	ldr	r3, [pc, #456]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	f003 0320 	and.w	r3, r3, #32
 800199a:	2b00      	cmp	r3, #0
 800199c:	d004      	beq.n	80019a8 <LCD_IO_WriteCmd8MultipleData16+0xd0>
 800199e:	4b72      	ldr	r3, [pc, #456]	; (8001b68 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 80019a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019a4:	619a      	str	r2, [r3, #24]
 80019a6:	e003      	b.n	80019b0 <LCD_IO_WriteCmd8MultipleData16+0xd8>
 80019a8:	4b6f      	ldr	r3, [pc, #444]	; (8001b68 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 80019aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019ae:	619a      	str	r2, [r3, #24]
 80019b0:	4b6a      	ldr	r3, [pc, #424]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d004      	beq.n	80019c6 <LCD_IO_WriteCmd8MultipleData16+0xee>
 80019bc:	4b6b      	ldr	r3, [pc, #428]	; (8001b6c <LCD_IO_WriteCmd8MultipleData16+0x294>)
 80019be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019c2:	619a      	str	r2, [r3, #24]
 80019c4:	e003      	b.n	80019ce <LCD_IO_WriteCmd8MultipleData16+0xf6>
 80019c6:	4b69      	ldr	r3, [pc, #420]	; (8001b6c <LCD_IO_WriteCmd8MultipleData16+0x294>)
 80019c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019cc:	619a      	str	r2, [r3, #24]
 80019ce:	4b63      	ldr	r3, [pc, #396]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	b25b      	sxtb	r3, r3
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	da04      	bge.n	80019e2 <LCD_IO_WriteCmd8MultipleData16+0x10a>
 80019d8:	4b61      	ldr	r3, [pc, #388]	; (8001b60 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 80019da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019de:	619a      	str	r2, [r3, #24]
 80019e0:	e003      	b.n	80019ea <LCD_IO_WriteCmd8MultipleData16+0x112>
 80019e2:	4b5f      	ldr	r3, [pc, #380]	; (8001b60 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 80019e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019e8:	619a      	str	r2, [r3, #24]
 80019ea:	4b5b      	ldr	r3, [pc, #364]	; (8001b58 <LCD_IO_WriteCmd8MultipleData16+0x280>)
 80019ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019f0:	619a      	str	r2, [r3, #24]
 80019f2:	2008      	movs	r0, #8
 80019f4:	f7ff f8e1 	bl	8000bba <LCD_IO_Delay>
 80019f8:	4b57      	ldr	r3, [pc, #348]	; (8001b58 <LCD_IO_WriteCmd8MultipleData16+0x280>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	619a      	str	r2, [r3, #24]
 80019fe:	4b56      	ldr	r3, [pc, #344]	; (8001b58 <LCD_IO_WriteCmd8MultipleData16+0x280>)
 8001a00:	2208      	movs	r2, #8
 8001a02:	619a      	str	r2, [r3, #24]
  while(Size--)
 8001a04:	e11e      	b.n	8001c44 <LCD_IO_WriteCmd8MultipleData16+0x36c>
  {
    LCD_DATA16_WRITE(*pData);
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	881b      	ldrh	r3, [r3, #0]
 8001a0a:	0a1b      	lsrs	r3, r3, #8
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	4b52      	ldr	r3, [pc, #328]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001a12:	701a      	strb	r2, [r3, #0]
 8001a14:	4b51      	ldr	r3, [pc, #324]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d004      	beq.n	8001a2a <LCD_IO_WriteCmd8MultipleData16+0x152>
 8001a20:	4b4f      	ldr	r3, [pc, #316]	; (8001b60 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001a22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a26:	619a      	str	r2, [r3, #24]
 8001a28:	e003      	b.n	8001a32 <LCD_IO_WriteCmd8MultipleData16+0x15a>
 8001a2a:	4b4d      	ldr	r3, [pc, #308]	; (8001b60 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001a2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a30:	619a      	str	r2, [r3, #24]
 8001a32:	4b4a      	ldr	r3, [pc, #296]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d004      	beq.n	8001a48 <LCD_IO_WriteCmd8MultipleData16+0x170>
 8001a3e:	4b49      	ldr	r3, [pc, #292]	; (8001b64 <LCD_IO_WriteCmd8MultipleData16+0x28c>)
 8001a40:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a44:	619a      	str	r2, [r3, #24]
 8001a46:	e003      	b.n	8001a50 <LCD_IO_WriteCmd8MultipleData16+0x178>
 8001a48:	4b46      	ldr	r3, [pc, #280]	; (8001b64 <LCD_IO_WriteCmd8MultipleData16+0x28c>)
 8001a4a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001a4e:	619a      	str	r2, [r3, #24]
 8001a50:	4b42      	ldr	r3, [pc, #264]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d004      	beq.n	8001a66 <LCD_IO_WriteCmd8MultipleData16+0x18e>
 8001a5c:	4b40      	ldr	r3, [pc, #256]	; (8001b60 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001a5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a62:	619a      	str	r2, [r3, #24]
 8001a64:	e003      	b.n	8001a6e <LCD_IO_WriteCmd8MultipleData16+0x196>
 8001a66:	4b3e      	ldr	r3, [pc, #248]	; (8001b60 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001a68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a6c:	619a      	str	r2, [r3, #24]
 8001a6e:	4b3b      	ldr	r3, [pc, #236]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	f003 0308 	and.w	r3, r3, #8
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d004      	beq.n	8001a84 <LCD_IO_WriteCmd8MultipleData16+0x1ac>
 8001a7a:	4b3b      	ldr	r3, [pc, #236]	; (8001b68 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001a7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a80:	619a      	str	r2, [r3, #24]
 8001a82:	e003      	b.n	8001a8c <LCD_IO_WriteCmd8MultipleData16+0x1b4>
 8001a84:	4b38      	ldr	r3, [pc, #224]	; (8001b68 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001a86:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001a8a:	619a      	str	r2, [r3, #24]
 8001a8c:	4b33      	ldr	r3, [pc, #204]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	f003 0310 	and.w	r3, r3, #16
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d004      	beq.n	8001aa2 <LCD_IO_WriteCmd8MultipleData16+0x1ca>
 8001a98:	4b33      	ldr	r3, [pc, #204]	; (8001b68 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001a9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a9e:	619a      	str	r2, [r3, #24]
 8001aa0:	e003      	b.n	8001aaa <LCD_IO_WriteCmd8MultipleData16+0x1d2>
 8001aa2:	4b31      	ldr	r3, [pc, #196]	; (8001b68 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001aa4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001aa8:	619a      	str	r2, [r3, #24]
 8001aaa:	4b2c      	ldr	r3, [pc, #176]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	f003 0320 	and.w	r3, r3, #32
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d004      	beq.n	8001ac0 <LCD_IO_WriteCmd8MultipleData16+0x1e8>
 8001ab6:	4b2c      	ldr	r3, [pc, #176]	; (8001b68 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001ab8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001abc:	619a      	str	r2, [r3, #24]
 8001abe:	e003      	b.n	8001ac8 <LCD_IO_WriteCmd8MultipleData16+0x1f0>
 8001ac0:	4b29      	ldr	r3, [pc, #164]	; (8001b68 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001ac2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ac6:	619a      	str	r2, [r3, #24]
 8001ac8:	4b24      	ldr	r3, [pc, #144]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d004      	beq.n	8001ade <LCD_IO_WriteCmd8MultipleData16+0x206>
 8001ad4:	4b25      	ldr	r3, [pc, #148]	; (8001b6c <LCD_IO_WriteCmd8MultipleData16+0x294>)
 8001ad6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ada:	619a      	str	r2, [r3, #24]
 8001adc:	e003      	b.n	8001ae6 <LCD_IO_WriteCmd8MultipleData16+0x20e>
 8001ade:	4b23      	ldr	r3, [pc, #140]	; (8001b6c <LCD_IO_WriteCmd8MultipleData16+0x294>)
 8001ae0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ae4:	619a      	str	r2, [r3, #24]
 8001ae6:	4b1d      	ldr	r3, [pc, #116]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	b25b      	sxtb	r3, r3
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	da04      	bge.n	8001afa <LCD_IO_WriteCmd8MultipleData16+0x222>
 8001af0:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001af2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001af6:	619a      	str	r2, [r3, #24]
 8001af8:	e003      	b.n	8001b02 <LCD_IO_WriteCmd8MultipleData16+0x22a>
 8001afa:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001afc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b00:	619a      	str	r2, [r3, #24]
 8001b02:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <LCD_IO_WriteCmd8MultipleData16+0x280>)
 8001b04:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b08:	619a      	str	r2, [r3, #24]
 8001b0a:	2008      	movs	r0, #8
 8001b0c:	f7ff f855 	bl	8000bba <LCD_IO_Delay>
 8001b10:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <LCD_IO_WriteCmd8MultipleData16+0x280>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	619a      	str	r2, [r3, #24]
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001b1e:	701a      	strb	r2, [r3, #0]
 8001b20:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d004      	beq.n	8001b36 <LCD_IO_WriteCmd8MultipleData16+0x25e>
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001b2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b32:	619a      	str	r2, [r3, #24]
 8001b34:	e003      	b.n	8001b3e <LCD_IO_WriteCmd8MultipleData16+0x266>
 8001b36:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001b38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b3c:	619a      	str	r2, [r3, #24]
 8001b3e:	4b07      	ldr	r3, [pc, #28]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d012      	beq.n	8001b70 <LCD_IO_WriteCmd8MultipleData16+0x298>
 8001b4a:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <LCD_IO_WriteCmd8MultipleData16+0x28c>)
 8001b4c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b50:	619a      	str	r2, [r3, #24]
 8001b52:	e011      	b.n	8001b78 <LCD_IO_WriteCmd8MultipleData16+0x2a0>
 8001b54:	58020400 	.word	0x58020400
 8001b58:	58020800 	.word	0x58020800
 8001b5c:	240001ae 	.word	0x240001ae
 8001b60:	58021800 	.word	0x58021800
 8001b64:	58020c00 	.word	0x58020c00
 8001b68:	58021000 	.word	0x58021000
 8001b6c:	58020000 	.word	0x58020000
 8001b70:	4b3b      	ldr	r3, [pc, #236]	; (8001c60 <LCD_IO_WriteCmd8MultipleData16+0x388>)
 8001b72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001b76:	619a      	str	r2, [r3, #24]
 8001b78:	4b3a      	ldr	r3, [pc, #232]	; (8001c64 <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d004      	beq.n	8001b8e <LCD_IO_WriteCmd8MultipleData16+0x2b6>
 8001b84:	4b38      	ldr	r3, [pc, #224]	; (8001c68 <LCD_IO_WriteCmd8MultipleData16+0x390>)
 8001b86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b8a:	619a      	str	r2, [r3, #24]
 8001b8c:	e003      	b.n	8001b96 <LCD_IO_WriteCmd8MultipleData16+0x2be>
 8001b8e:	4b36      	ldr	r3, [pc, #216]	; (8001c68 <LCD_IO_WriteCmd8MultipleData16+0x390>)
 8001b90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b94:	619a      	str	r2, [r3, #24]
 8001b96:	4b33      	ldr	r3, [pc, #204]	; (8001c64 <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	f003 0308 	and.w	r3, r3, #8
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d004      	beq.n	8001bac <LCD_IO_WriteCmd8MultipleData16+0x2d4>
 8001ba2:	4b32      	ldr	r3, [pc, #200]	; (8001c6c <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8001ba4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ba8:	619a      	str	r2, [r3, #24]
 8001baa:	e003      	b.n	8001bb4 <LCD_IO_WriteCmd8MultipleData16+0x2dc>
 8001bac:	4b2f      	ldr	r3, [pc, #188]	; (8001c6c <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8001bae:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001bb2:	619a      	str	r2, [r3, #24]
 8001bb4:	4b2b      	ldr	r3, [pc, #172]	; (8001c64 <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	f003 0310 	and.w	r3, r3, #16
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d004      	beq.n	8001bca <LCD_IO_WriteCmd8MultipleData16+0x2f2>
 8001bc0:	4b2a      	ldr	r3, [pc, #168]	; (8001c6c <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8001bc2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bc6:	619a      	str	r2, [r3, #24]
 8001bc8:	e003      	b.n	8001bd2 <LCD_IO_WriteCmd8MultipleData16+0x2fa>
 8001bca:	4b28      	ldr	r3, [pc, #160]	; (8001c6c <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8001bcc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bd0:	619a      	str	r2, [r3, #24]
 8001bd2:	4b24      	ldr	r3, [pc, #144]	; (8001c64 <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	f003 0320 	and.w	r3, r3, #32
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d004      	beq.n	8001be8 <LCD_IO_WriteCmd8MultipleData16+0x310>
 8001bde:	4b23      	ldr	r3, [pc, #140]	; (8001c6c <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8001be0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001be4:	619a      	str	r2, [r3, #24]
 8001be6:	e003      	b.n	8001bf0 <LCD_IO_WriteCmd8MultipleData16+0x318>
 8001be8:	4b20      	ldr	r3, [pc, #128]	; (8001c6c <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8001bea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bee:	619a      	str	r2, [r3, #24]
 8001bf0:	4b1c      	ldr	r3, [pc, #112]	; (8001c64 <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d004      	beq.n	8001c06 <LCD_IO_WriteCmd8MultipleData16+0x32e>
 8001bfc:	4b1c      	ldr	r3, [pc, #112]	; (8001c70 <LCD_IO_WriteCmd8MultipleData16+0x398>)
 8001bfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c02:	619a      	str	r2, [r3, #24]
 8001c04:	e003      	b.n	8001c0e <LCD_IO_WriteCmd8MultipleData16+0x336>
 8001c06:	4b1a      	ldr	r3, [pc, #104]	; (8001c70 <LCD_IO_WriteCmd8MultipleData16+0x398>)
 8001c08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c0c:	619a      	str	r2, [r3, #24]
 8001c0e:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	b25b      	sxtb	r3, r3
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	da04      	bge.n	8001c22 <LCD_IO_WriteCmd8MultipleData16+0x34a>
 8001c18:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <LCD_IO_WriteCmd8MultipleData16+0x390>)
 8001c1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c1e:	619a      	str	r2, [r3, #24]
 8001c20:	e003      	b.n	8001c2a <LCD_IO_WriteCmd8MultipleData16+0x352>
 8001c22:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <LCD_IO_WriteCmd8MultipleData16+0x390>)
 8001c24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c28:	619a      	str	r2, [r3, #24]
 8001c2a:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <LCD_IO_WriteCmd8MultipleData16+0x39c>)
 8001c2c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c30:	619a      	str	r2, [r3, #24]
 8001c32:	2008      	movs	r0, #8
 8001c34:	f7fe ffc1 	bl	8000bba <LCD_IO_Delay>
 8001c38:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <LCD_IO_WriteCmd8MultipleData16+0x39c>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	619a      	str	r2, [r3, #24]
    pData ++;
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	3302      	adds	r3, #2
 8001c42:	60bb      	str	r3, [r7, #8]
  while(Size--)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	1e5a      	subs	r2, r3, #1
 8001c48:	607a      	str	r2, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f47f aedb 	bne.w	8001a06 <LCD_IO_WriteCmd8MultipleData16+0x12e>
  }
  LCD_CS_OFF;
 8001c50:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <LCD_IO_WriteCmd8MultipleData16+0x3a0>)
 8001c52:	2202      	movs	r2, #2
 8001c54:	619a      	str	r2, [r3, #24]
}
 8001c56:	bf00      	nop
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	58020c00 	.word	0x58020c00
 8001c64:	240001ae 	.word	0x240001ae
 8001c68:	58021800 	.word	0x58021800
 8001c6c:	58021000 	.word	0x58021000
 8001c70:	58020000 	.word	0x58020000
 8001c74:	58020800 	.word	0x58020800
 8001c78:	58020400 	.word	0x58020400

08001c7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c7c:	b5b0      	push	{r4, r5, r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af04      	add	r7, sp, #16
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8001c82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c86:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001c88:	bf00      	nop
 8001c8a:	4b7d      	ldr	r3, [pc, #500]	; (8001e80 <main+0x204>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d004      	beq.n	8001ca0 <main+0x24>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	1e5a      	subs	r2, r3, #1
 8001c9a:	607a      	str	r2, [r7, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	dcf4      	bgt.n	8001c8a <main+0xe>
  if ( timeout < 0 )
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	da01      	bge.n	8001caa <main+0x2e>
  {
  Error_Handler();
 8001ca6:	f000 fbb4 	bl	8002412 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001caa:	f000 fdb1 	bl	8002810 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cae:	f000 f9d1 	bl	8002054 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8001cb2:	4b73      	ldr	r3, [pc, #460]	; (8001e80 <main+0x204>)
 8001cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb8:	4a71      	ldr	r2, [pc, #452]	; (8001e80 <main+0x204>)
 8001cba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cc2:	4b6f      	ldr	r3, [pc, #444]	; (8001e80 <main+0x204>)
 8001cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ccc:	603b      	str	r3, [r7, #0]
 8001cce:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	f001 fd5f 	bl	8003794 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	2000      	movs	r0, #0
 8001cda:	f001 fd75 	bl	80037c8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8001cde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ce2:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001ce4:	bf00      	nop
 8001ce6:	4b66      	ldr	r3, [pc, #408]	; (8001e80 <main+0x204>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d104      	bne.n	8001cfc <main+0x80>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	1e5a      	subs	r2, r3, #1
 8001cf6:	607a      	str	r2, [r7, #4]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	dcf4      	bgt.n	8001ce6 <main+0x6a>
if ( timeout < 0 )
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	da01      	bge.n	8001d06 <main+0x8a>
{
Error_Handler();
 8001d02:	f000 fb86 	bl	8002412 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d06:	f000 fac3 	bl	8002290 <MX_GPIO_Init>
  MX_ETH_Init();
 8001d0a:	f000 fa29 	bl	8002160 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001d0e:	f000 fa73 	bl	80021f8 <MX_USB_OTG_FS_PCD_Init>
  MX_DMA_Init();
 8001d12:	f000 faa3 	bl	800225c <MX_DMA_Init>
  MX_LIBJPEG_Init();
 8001d16:	f004 fa5f 	bl	80061d8 <MX_LIBJPEG_Init>
  /* USER CODE BEGIN 2 */

  	SRAM4-> flag_UID = 0;
 8001d1a:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001d1e:	2200      	movs	r2, #0
 8001d20:	771a      	strb	r2, [r3, #28]

  	ili9486_Init();
 8001d22:	f7fe fbdf 	bl	80004e4 <ili9486_Init>
    ili9486_DisplayOn();
 8001d26:	f7fe fbc1 	bl	80004ac <ili9486_DisplayOn>

    ili_scr_1();
 8001d2a:	f000 fb25 	bl	8002378 <ili_scr_1>
    //ili9486_WriteString(20, 20, " > STAMPR ----->>>-----", Font20, cl_WHITE, cl_BLACK);
    //ili9486_WriteString(420, 270, " OWL_HOR ", Font16, cl_BLUE, cl_BLACK);
    ili9486_FillRect(0, 0, 480, 35, cl_BLUE);
 8001d2e:	231f      	movs	r3, #31
 8001d30:	9300      	str	r3, [sp, #0]
 8001d32:	2323      	movs	r3, #35	; 0x23
 8001d34:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001d38:	2100      	movs	r1, #0
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	f7fe fcfc 	bl	8000738 <ili9486_FillRect>
    ili9486_WriteStringNoBG(10, 10, " > STAMPR ----->>>-----", Font20, cl_WHITE);
 8001d40:	4b50      	ldr	r3, [pc, #320]	; (8001e84 <main+0x208>)
 8001d42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d46:	9201      	str	r2, [sp, #4]
 8001d48:	685a      	ldr	r2, [r3, #4]
 8001d4a:	9200      	str	r2, [sp, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a4e      	ldr	r2, [pc, #312]	; (8001e88 <main+0x20c>)
 8001d50:	210a      	movs	r1, #10
 8001d52:	200a      	movs	r0, #10
 8001d54:	f7fe fee6 	bl	8000b24 <ili9486_WriteStringNoBG>
    //ili9486_WriteStringNoBG(400, 15, " OWL_HOR ", Font12, cl_WHITE);
    ili9486_DrawRGBImage(140, 120, 128, 128, (uint16_t*)test_img_128x128);
 8001d58:	4b4c      	ldr	r3, [pc, #304]	; (8001e8c <main+0x210>)
 8001d5a:	9300      	str	r3, [sp, #0]
 8001d5c:	2380      	movs	r3, #128	; 0x80
 8001d5e:	2280      	movs	r2, #128	; 0x80
 8001d60:	2178      	movs	r1, #120	; 0x78
 8001d62:	208c      	movs	r0, #140	; 0x8c
 8001d64:	f7fe fd4b 	bl	80007fe <ili9486_DrawRGBImage>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  //// Timer Manager
	  if(HAL_GetTick() - timestamp_one >= 500){
 8001d68:	f000 fdd8 	bl	800291c <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	4b48      	ldr	r3, [pc, #288]	; (8001e90 <main+0x214>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d78:	d351      	bcc.n	8001e1e <main+0x1a2>
	  		  timestamp_one = HAL_GetTick();
 8001d7a:	f000 fdcf 	bl	800291c <HAL_GetTick>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	4a43      	ldr	r2, [pc, #268]	; (8001e90 <main+0x214>)
 8001d82:	6013      	str	r3, [r2, #0]
	  		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001d84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d88:	4842      	ldr	r0, [pc, #264]	; (8001e94 <main+0x218>)
 8001d8a:	f001 fce8 	bl	800375e <HAL_GPIO_TogglePin>

	  		NowDat7 = SRAM4->NowDates;
 8001d8e:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001d92:	4a41      	ldr	r2, [pc, #260]	; (8001e98 <main+0x21c>)
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	6013      	str	r3, [r2, #0]
	  		NowTim7 = SRAM4->NowTimes;
 8001d98:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001d9c:	4a3f      	ldr	r2, [pc, #252]	; (8001e9c <main+0x220>)
 8001d9e:	4615      	mov	r5, r2
 8001da0:	1d1c      	adds	r4, r3, #4
 8001da2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001da4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001da6:	6823      	ldr	r3, [r4, #0]
 8001da8:	602b      	str	r3, [r5, #0]

	  		sprintf(txtdispBF, "%02X:%02X:%02X", // use %02 to fill 0 front of 1 digit
	  				  NowTim7.Hours, NowTim7.Minutes, NowTim7.Seconds);
 8001daa:	4b3c      	ldr	r3, [pc, #240]	; (8001e9c <main+0x220>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
	  		sprintf(txtdispBF, "%02X:%02X:%02X", // use %02 to fill 0 front of 1 digit
 8001dae:	461a      	mov	r2, r3
	  				  NowTim7.Hours, NowTim7.Minutes, NowTim7.Seconds);
 8001db0:	4b3a      	ldr	r3, [pc, #232]	; (8001e9c <main+0x220>)
 8001db2:	785b      	ldrb	r3, [r3, #1]
	  		sprintf(txtdispBF, "%02X:%02X:%02X", // use %02 to fill 0 front of 1 digit
 8001db4:	4619      	mov	r1, r3
	  				  NowTim7.Hours, NowTim7.Minutes, NowTim7.Seconds);
 8001db6:	4b39      	ldr	r3, [pc, #228]	; (8001e9c <main+0x220>)
 8001db8:	789b      	ldrb	r3, [r3, #2]
	  		sprintf(txtdispBF, "%02X:%02X:%02X", // use %02 to fill 0 front of 1 digit
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	4938      	ldr	r1, [pc, #224]	; (8001ea0 <main+0x224>)
 8001dc0:	4838      	ldr	r0, [pc, #224]	; (8001ea4 <main+0x228>)
 8001dc2:	f004 fb43 	bl	800644c <siprintf>
	  		ili9486_WriteString(365, 40, txtdispBF, Font20, cl_YELLOW, cl_BLACK);
 8001dc6:	4b2f      	ldr	r3, [pc, #188]	; (8001e84 <main+0x208>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	9202      	str	r2, [sp, #8]
 8001dcc:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001dd0:	9201      	str	r2, [sp, #4]
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	9200      	str	r2, [sp, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a32      	ldr	r2, [pc, #200]	; (8001ea4 <main+0x228>)
 8001dda:	2128      	movs	r1, #40	; 0x28
 8001ddc:	f240 106d 	movw	r0, #365	; 0x16d
 8001de0:	f7fe fe53 	bl	8000a8a <ili9486_WriteString>

	  		sprintf(txtdispBF, "%02x/%02x/%02x",
	  			  				  NowDat7.Date, NowDat7.Month, NowDat7.Year);
 8001de4:	4b2c      	ldr	r3, [pc, #176]	; (8001e98 <main+0x21c>)
 8001de6:	789b      	ldrb	r3, [r3, #2]
	  		sprintf(txtdispBF, "%02x/%02x/%02x",
 8001de8:	461a      	mov	r2, r3
	  			  				  NowDat7.Date, NowDat7.Month, NowDat7.Year);
 8001dea:	4b2b      	ldr	r3, [pc, #172]	; (8001e98 <main+0x21c>)
 8001dec:	785b      	ldrb	r3, [r3, #1]
	  		sprintf(txtdispBF, "%02x/%02x/%02x",
 8001dee:	4619      	mov	r1, r3
	  			  				  NowDat7.Date, NowDat7.Month, NowDat7.Year);
 8001df0:	4b29      	ldr	r3, [pc, #164]	; (8001e98 <main+0x21c>)
 8001df2:	78db      	ldrb	r3, [r3, #3]
	  		sprintf(txtdispBF, "%02x/%02x/%02x",
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	460b      	mov	r3, r1
 8001df8:	492b      	ldr	r1, [pc, #172]	; (8001ea8 <main+0x22c>)
 8001dfa:	482a      	ldr	r0, [pc, #168]	; (8001ea4 <main+0x228>)
 8001dfc:	f004 fb26 	bl	800644c <siprintf>
	  		ili9486_WriteString(365, 60, txtdispBF, Font20, cl_YELLOW, cl_BLACK);
 8001e00:	4b20      	ldr	r3, [pc, #128]	; (8001e84 <main+0x208>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	9202      	str	r2, [sp, #8]
 8001e06:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001e0a:	9201      	str	r2, [sp, #4]
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	9200      	str	r2, [sp, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a24      	ldr	r2, [pc, #144]	; (8001ea4 <main+0x228>)
 8001e14:	213c      	movs	r1, #60	; 0x3c
 8001e16:	f240 106d 	movw	r0, #365	; 0x16d
 8001e1a:	f7fe fe36 	bl	8000a8a <ili9486_WriteString>
	  	  }

	  //// State Manager not displaying write order
	  if(HAL_GetTick() - timestamp_grandis[0] >= 100){
 8001e1e:	f000 fd7d 	bl	800291c <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	4b21      	ldr	r3, [pc, #132]	; (8001eac <main+0x230>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b63      	cmp	r3, #99	; 0x63
 8001e2c:	f240 80f6 	bls.w	800201c <main+0x3a0>
		  timestamp_grandis[0] = HAL_GetTick();
 8001e30:	f000 fd74 	bl	800291c <HAL_GetTick>
 8001e34:	4603      	mov	r3, r0
 8001e36:	4a1d      	ldr	r2, [pc, #116]	; (8001eac <main+0x230>)
 8001e38:	6013      	str	r3, [r2, #0]

		  switch (GranDiSTATE){
 8001e3a:	4b1d      	ldr	r3, [pc, #116]	; (8001eb0 <main+0x234>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b03      	cmp	r3, #3
 8001e40:	f000 80c4 	beq.w	8001fcc <main+0x350>
 8001e44:	2b03      	cmp	r3, #3
 8001e46:	dc03      	bgt.n	8001e50 <main+0x1d4>
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d00f      	beq.n	8001e6c <main+0x1f0>
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d031      	beq.n	8001eb4 <main+0x238>
		  case st_lobby:
			  //// ------------------------------------------------------------------------------


			  //if(HAL_HSEM_Take(2, 2) == HAL_OK){
				  if ( SRAM4-> flag_UID == 1){
 8001e50:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001e54:	7f1b      	ldrb	r3, [r3, #28]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	f040 80e2 	bne.w	8002020 <main+0x3a4>

					  //GranDiSTATE = st_show;
					  GranDiSTATE = st_search;
 8001e5c:	4b14      	ldr	r3, [pc, #80]	; (8001eb0 <main+0x234>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	701a      	strb	r2, [r3, #0]
					  SRAM4-> flag_UID = 0;
 8001e62:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001e66:	2200      	movs	r2, #0
 8001e68:	771a      	strb	r2, [r3, #28]
					  //timestamp_grandis[1] = HAL_GetTick();
				  }
			  	//  HAL_HSEM_Release(2, 2);
			  	//}
			  break;
 8001e6a:	e0d9      	b.n	8002020 <main+0x3a4>
			  		 }// search layer 0

			  	 }// for loop search
#endif
			  /// ---------------Finally-------------------------------
			  GranDiSTATE = st_show;
 8001e6c:	4b10      	ldr	r3, [pc, #64]	; (8001eb0 <main+0x234>)
 8001e6e:	2202      	movs	r2, #2
 8001e70:	701a      	strb	r2, [r3, #0]
			  timestamp_grandis[1] = HAL_GetTick();
 8001e72:	f000 fd53 	bl	800291c <HAL_GetTick>
 8001e76:	4603      	mov	r3, r0
 8001e78:	4a0c      	ldr	r2, [pc, #48]	; (8001eac <main+0x230>)
 8001e7a:	6053      	str	r3, [r2, #4]

			  break;
 8001e7c:	e0d3      	b.n	8002026 <main+0x3aa>
 8001e7e:	bf00      	nop
 8001e80:	58024400 	.word	0x58024400
 8001e84:	24000010 	.word	0x24000010
 8001e88:	08006bfc 	.word	0x08006bfc
 8001e8c:	08008724 	.word	0x08008724
 8001e90:	24000834 	.word	0x24000834
 8001e94:	58020400 	.word	0x58020400
 8001e98:	24000830 	.word	0x24000830
 8001e9c:	2400081c 	.word	0x2400081c
 8001ea0:	08006c14 	.word	0x08006c14
 8001ea4:	240007a4 	.word	0x240007a4
 8001ea8:	08006c24 	.word	0x08006c24
 8001eac:	24000838 	.word	0x24000838
 8001eb0:	24000844 	.word	0x24000844

		  case st_show:
			  //// ------------------------------------------------------------------------------

			  // ID Show----------------------------
			  sprintf(txtdispBF,"Found ID");
 8001eb4:	495c      	ldr	r1, [pc, #368]	; (8002028 <main+0x3ac>)
 8001eb6:	485d      	ldr	r0, [pc, #372]	; (800202c <main+0x3b0>)
 8001eb8:	f004 fac8 	bl	800644c <siprintf>
			  ili9486_WriteString(160, 100, txtdispBF, Font20, cl_ORANGE, cl_BLACK);
 8001ebc:	4b5c      	ldr	r3, [pc, #368]	; (8002030 <main+0x3b4>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	9202      	str	r2, [sp, #8]
 8001ec2:	f64f 5220 	movw	r2, #64800	; 0xfd20
 8001ec6:	9201      	str	r2, [sp, #4]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	9200      	str	r2, [sp, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a57      	ldr	r2, [pc, #348]	; (800202c <main+0x3b0>)
 8001ed0:	2164      	movs	r1, #100	; 0x64
 8001ed2:	20a0      	movs	r0, #160	; 0xa0
 8001ed4:	f7fe fdd9 	bl	8000a8a <ili9486_WriteString>

			  sprintf(txtdispBF,"UID: %02X %02X %02X %02X",
					 SRAM4->UUID[0],SRAM4->UUID[1],SRAM4->UUID[2],SRAM4->UUID[3]);
 8001ed8:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001edc:	7f5b      	ldrb	r3, [r3, #29]
			  sprintf(txtdispBF,"UID: %02X %02X %02X %02X",
 8001ede:	4619      	mov	r1, r3
					 SRAM4->UUID[0],SRAM4->UUID[1],SRAM4->UUID[2],SRAM4->UUID[3]);
 8001ee0:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001ee4:	7f9b      	ldrb	r3, [r3, #30]
			  sprintf(txtdispBF,"UID: %02X %02X %02X %02X",
 8001ee6:	4618      	mov	r0, r3
					 SRAM4->UUID[0],SRAM4->UUID[1],SRAM4->UUID[2],SRAM4->UUID[3]);
 8001ee8:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001eec:	7fdb      	ldrb	r3, [r3, #31]
			  sprintf(txtdispBF,"UID: %02X %02X %02X %02X",
 8001eee:	461a      	mov	r2, r3
					 SRAM4->UUID[0],SRAM4->UUID[1],SRAM4->UUID[2],SRAM4->UUID[3]);
 8001ef0:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001ef4:	f893 3020 	ldrb.w	r3, [r3, #32]
			  sprintf(txtdispBF,"UID: %02X %02X %02X %02X",
 8001ef8:	9301      	str	r3, [sp, #4]
 8001efa:	9200      	str	r2, [sp, #0]
 8001efc:	4603      	mov	r3, r0
 8001efe:	460a      	mov	r2, r1
 8001f00:	494c      	ldr	r1, [pc, #304]	; (8002034 <main+0x3b8>)
 8001f02:	484a      	ldr	r0, [pc, #296]	; (800202c <main+0x3b0>)
 8001f04:	f004 faa2 	bl	800644c <siprintf>
			  ili9486_WriteString(160, 125, txtdispBF, Font20, cl_YELLOW, cl_BLACK);
 8001f08:	4b49      	ldr	r3, [pc, #292]	; (8002030 <main+0x3b4>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	9202      	str	r2, [sp, #8]
 8001f0e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001f12:	9201      	str	r2, [sp, #4]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	9200      	str	r2, [sp, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a44      	ldr	r2, [pc, #272]	; (800202c <main+0x3b0>)
 8001f1c:	217d      	movs	r1, #125	; 0x7d
 8001f1e:	20a0      	movs	r0, #160	; 0xa0
 8001f20:	f7fe fdb3 	bl	8000a8a <ili9486_WriteString>
			  // ID Show-----------------------------

			  //// try using prottypo concept / hal handeltypedef hi2c; /
			  ////// dummy only, it works
			  if (SRAM4->UUID[0] == p1_owl.USID[0] &&
 8001f24:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001f28:	7f5a      	ldrb	r2, [r3, #29]
 8001f2a:	4b43      	ldr	r3, [pc, #268]	; (8002038 <main+0x3bc>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d148      	bne.n	8001fc4 <main+0x348>
				  SRAM4->UUID[1] == p1_owl.USID[1] &&
 8001f32:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001f36:	7f9a      	ldrb	r2, [r3, #30]
 8001f38:	4b3f      	ldr	r3, [pc, #252]	; (8002038 <main+0x3bc>)
 8001f3a:	785b      	ldrb	r3, [r3, #1]
			  if (SRAM4->UUID[0] == p1_owl.USID[0] &&
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d141      	bne.n	8001fc4 <main+0x348>
				  SRAM4->UUID[2] == p1_owl.USID[2] &&
 8001f40:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001f44:	7fda      	ldrb	r2, [r3, #31]
 8001f46:	4b3c      	ldr	r3, [pc, #240]	; (8002038 <main+0x3bc>)
 8001f48:	789b      	ldrb	r3, [r3, #2]
				  SRAM4->UUID[1] == p1_owl.USID[1] &&
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d13a      	bne.n	8001fc4 <main+0x348>
				  SRAM4->UUID[3] == p1_owl.USID[3]){
 8001f4e:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001f52:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001f56:	4b38      	ldr	r3, [pc, #224]	; (8002038 <main+0x3bc>)
 8001f58:	78db      	ldrb	r3, [r3, #3]
				  SRAM4->UUID[2] == p1_owl.USID[2] &&
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d132      	bne.n	8001fc4 <main+0x348>

				  ili9486_DrawRGBImage(20, 100, 128, 128, (uint16_t*)p1_owl.pic);
 8001f5e:	4b36      	ldr	r3, [pc, #216]	; (8002038 <main+0x3bc>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	2380      	movs	r3, #128	; 0x80
 8001f66:	2280      	movs	r2, #128	; 0x80
 8001f68:	2164      	movs	r1, #100	; 0x64
 8001f6a:	2014      	movs	r0, #20
 8001f6c:	f7fe fc47 	bl	80007fe <ili9486_DrawRGBImage>
				  ili9486_WriteString(160, 150, p1_owl.Name, Font20, cl_GREEN, cl_BLACK);
 8001f70:	4b2f      	ldr	r3, [pc, #188]	; (8002030 <main+0x3b4>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	9202      	str	r2, [sp, #8]
 8001f76:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001f7a:	9201      	str	r2, [sp, #4]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	9200      	str	r2, [sp, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a2e      	ldr	r2, [pc, #184]	; (800203c <main+0x3c0>)
 8001f84:	2196      	movs	r1, #150	; 0x96
 8001f86:	20a0      	movs	r0, #160	; 0xa0
 8001f88:	f7fe fd7f 	bl	8000a8a <ili9486_WriteString>
				  ili9486_WriteString(160, 175, p1_owl.Surname, Font20, cl_GREEN, cl_BLACK);
 8001f8c:	4b28      	ldr	r3, [pc, #160]	; (8002030 <main+0x3b4>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	9202      	str	r2, [sp, #8]
 8001f92:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001f96:	9201      	str	r2, [sp, #4]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	9200      	str	r2, [sp, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a28      	ldr	r2, [pc, #160]	; (8002040 <main+0x3c4>)
 8001fa0:	21af      	movs	r1, #175	; 0xaf
 8001fa2:	20a0      	movs	r0, #160	; 0xa0
 8001fa4:	f7fe fd71 	bl	8000a8a <ili9486_WriteString>
				  ili9486_WriteString(160, 200, p1_owl.welcom_txt, Font16, cl_ORANGE, cl_BLACK);
 8001fa8:	4b26      	ldr	r3, [pc, #152]	; (8002044 <main+0x3c8>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	9202      	str	r2, [sp, #8]
 8001fae:	f64f 5220 	movw	r2, #64800	; 0xfd20
 8001fb2:	9201      	str	r2, [sp, #4]
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	9200      	str	r2, [sp, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a23      	ldr	r2, [pc, #140]	; (8002048 <main+0x3cc>)
 8001fbc:	21c8      	movs	r1, #200	; 0xc8
 8001fbe:	20a0      	movs	r0, #160	; 0xa0
 8001fc0:	f7fe fd63 	bl	8000a8a <ili9486_WriteString>
				  ili9486_WriteString(160, 150, px_person[px_ID_match].Name, Font20, cl_GREEN, cl_BLACK);
				  ili9486_WriteString(160, 175, px_person[px_ID_match].Surname, Font20, cl_GREEN, cl_BLACK);
				  ili9486_WriteString(160, 200, px_person[px_ID_match].welcom_txt, Font16, cl_ORANGE, cl_BLACK);
			  }
#endif
			  GranDiSTATE = st_waitend;
 8001fc4:	4b21      	ldr	r3, [pc, #132]	; (800204c <main+0x3d0>)
 8001fc6:	2203      	movs	r2, #3
 8001fc8:	701a      	strb	r2, [r3, #0]
//				  SRAM4->UUID[1] = 0;
//				  SRAM4->UUID[2] = 0;
//				  SRAM4->UUID[3] = 0;
//			  }

			  break;
 8001fca:	e02c      	b.n	8002026 <main+0x3aa>

		  case st_waitend:
			  /* Using waitend to wait, if still in show -> CPU will write display continuously
			   * */
			  ////// Ending display and back to lobby------------------
			  if(HAL_GetTick() - timestamp_grandis[1] >= k_tim_show_milli){
 8001fcc:	f000 fca6 	bl	800291c <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	4b1f      	ldr	r3, [pc, #124]	; (8002050 <main+0x3d4>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	f241 3287 	movw	r2, #4999	; 0x1387
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d921      	bls.n	8002024 <main+0x3a8>
				  GranDiSTATE = st_lobby;
 8001fe0:	4b1a      	ldr	r3, [pc, #104]	; (800204c <main+0x3d0>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	701a      	strb	r2, [r3, #0]
				  // clear Display
				  ili9486_FillRect(20, 100, 450, 200, cl_BLACK);
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	23c8      	movs	r3, #200	; 0xc8
 8001fec:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8001ff0:	2164      	movs	r1, #100	; 0x64
 8001ff2:	2014      	movs	r0, #20
 8001ff4:	f7fe fba0 	bl	8000738 <ili9486_FillRect>

				  //// clear UID
				  SRAM4->UUID[0] = 0;
 8001ff8:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	775a      	strb	r2, [r3, #29]
				  SRAM4->UUID[1] = 0;
 8002000:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8002004:	2200      	movs	r2, #0
 8002006:	779a      	strb	r2, [r3, #30]
				  SRAM4->UUID[2] = 0;
 8002008:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 800200c:	2200      	movs	r2, #0
 800200e:	77da      	strb	r2, [r3, #31]
				  SRAM4->UUID[3] = 0;
 8002010:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2020 	strb.w	r2, [r3, #32]
			  }
			  break;
 800201a:	e003      	b.n	8002024 <main+0x3a8>

 		  } // switch
	  }// GrandState
 800201c:	bf00      	nop
 800201e:	e6a3      	b.n	8001d68 <main+0xec>
			  break;
 8002020:	bf00      	nop
 8002022:	e6a1      	b.n	8001d68 <main+0xec>
			  break;
 8002024:	bf00      	nop
	  if(HAL_GetTick() - timestamp_one >= 500){
 8002026:	e69f      	b.n	8001d68 <main+0xec>
 8002028:	08006c34 	.word	0x08006c34
 800202c:	240007a4 	.word	0x240007a4
 8002030:	24000010 	.word	0x24000010
 8002034:	08006c40 	.word	0x08006c40
 8002038:	24000018 	.word	0x24000018
 800203c:	2400001d 	.word	0x2400001d
 8002040:	24000031 	.word	0x24000031
 8002044:	24000008 	.word	0x24000008
 8002048:	24000045 	.word	0x24000045
 800204c:	24000844 	.word	0x24000844
 8002050:	24000838 	.word	0x24000838

08002054 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b09c      	sub	sp, #112	; 0x70
 8002058:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800205a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800205e:	224c      	movs	r2, #76	; 0x4c
 8002060:	2100      	movs	r1, #0
 8002062:	4618      	mov	r0, r3
 8002064:	f004 f8fa 	bl	800625c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002068:	1d3b      	adds	r3, r7, #4
 800206a:	2220      	movs	r2, #32
 800206c:	2100      	movs	r1, #0
 800206e:	4618      	mov	r0, r3
 8002070:	f004 f8f4 	bl	800625c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8002074:	2004      	movs	r0, #4
 8002076:	f001 fd03 	bl	8003a80 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800207a:	2300      	movs	r3, #0
 800207c:	603b      	str	r3, [r7, #0]
 800207e:	4b35      	ldr	r3, [pc, #212]	; (8002154 <SystemClock_Config+0x100>)
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	4a34      	ldr	r2, [pc, #208]	; (8002154 <SystemClock_Config+0x100>)
 8002084:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002088:	6193      	str	r3, [r2, #24]
 800208a:	4b32      	ldr	r3, [pc, #200]	; (8002154 <SystemClock_Config+0x100>)
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002092:	603b      	str	r3, [r7, #0]
 8002094:	4b30      	ldr	r3, [pc, #192]	; (8002158 <SystemClock_Config+0x104>)
 8002096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002098:	4a2f      	ldr	r2, [pc, #188]	; (8002158 <SystemClock_Config+0x104>)
 800209a:	f043 0301 	orr.w	r3, r3, #1
 800209e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80020a0:	4b2d      	ldr	r3, [pc, #180]	; (8002158 <SystemClock_Config+0x104>)
 80020a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	603b      	str	r3, [r7, #0]
 80020aa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80020ac:	bf00      	nop
 80020ae:	4b29      	ldr	r3, [pc, #164]	; (8002154 <SystemClock_Config+0x100>)
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020ba:	d1f8      	bne.n	80020ae <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80020bc:	4b27      	ldr	r3, [pc, #156]	; (800215c <SystemClock_Config+0x108>)
 80020be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c0:	f023 0303 	bic.w	r3, r3, #3
 80020c4:	4a25      	ldr	r2, [pc, #148]	; (800215c <SystemClock_Config+0x108>)
 80020c6:	f043 0302 	orr.w	r3, r3, #2
 80020ca:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80020cc:	2309      	movs	r3, #9
 80020ce:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80020d0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80020d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80020d6:	2301      	movs	r3, #1
 80020d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020da:	2302      	movs	r3, #2
 80020dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020de:	2302      	movs	r3, #2
 80020e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80020e2:	2301      	movs	r3, #1
 80020e4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 80020e6:	2378      	movs	r3, #120	; 0x78
 80020e8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80020ea:	2302      	movs	r3, #2
 80020ec:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80020ee:	2302      	movs	r3, #2
 80020f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80020f2:	2302      	movs	r3, #2
 80020f4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80020f6:	230c      	movs	r3, #12
 80020f8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80020fa:	2300      	movs	r3, #0
 80020fc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80020fe:	2300      	movs	r3, #0
 8002100:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002102:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002106:	4618      	mov	r0, r3
 8002108:	f001 fd24 	bl	8003b54 <HAL_RCC_OscConfig>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002112:	f000 f97e 	bl	8002412 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002116:	233f      	movs	r3, #63	; 0x3f
 8002118:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800211a:	2303      	movs	r3, #3
 800211c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800211e:	2300      	movs	r3, #0
 8002120:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002122:	2308      	movs	r3, #8
 8002124:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002126:	2340      	movs	r3, #64	; 0x40
 8002128:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800212a:	2340      	movs	r3, #64	; 0x40
 800212c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800212e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002132:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002134:	2340      	movs	r3, #64	; 0x40
 8002136:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002138:	1d3b      	adds	r3, r7, #4
 800213a:	2104      	movs	r1, #4
 800213c:	4618      	mov	r0, r3
 800213e:	f002 f937 	bl	80043b0 <HAL_RCC_ClockConfig>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8002148:	f000 f963 	bl	8002412 <Error_Handler>
  }
}
 800214c:	bf00      	nop
 800214e:	3770      	adds	r7, #112	; 0x70
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	58024800 	.word	0x58024800
 8002158:	58000400 	.word	0x58000400
 800215c:	58024400 	.word	0x58024400

08002160 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8002164:	4b1e      	ldr	r3, [pc, #120]	; (80021e0 <MX_ETH_Init+0x80>)
 8002166:	4a1f      	ldr	r2, [pc, #124]	; (80021e4 <MX_ETH_Init+0x84>)
 8002168:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800216a:	4b1f      	ldr	r3, [pc, #124]	; (80021e8 <MX_ETH_Init+0x88>)
 800216c:	2200      	movs	r2, #0
 800216e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8002170:	4b1d      	ldr	r3, [pc, #116]	; (80021e8 <MX_ETH_Init+0x88>)
 8002172:	2280      	movs	r2, #128	; 0x80
 8002174:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8002176:	4b1c      	ldr	r3, [pc, #112]	; (80021e8 <MX_ETH_Init+0x88>)
 8002178:	22e1      	movs	r2, #225	; 0xe1
 800217a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800217c:	4b1a      	ldr	r3, [pc, #104]	; (80021e8 <MX_ETH_Init+0x88>)
 800217e:	2200      	movs	r2, #0
 8002180:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8002182:	4b19      	ldr	r3, [pc, #100]	; (80021e8 <MX_ETH_Init+0x88>)
 8002184:	2200      	movs	r2, #0
 8002186:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8002188:	4b17      	ldr	r3, [pc, #92]	; (80021e8 <MX_ETH_Init+0x88>)
 800218a:	2200      	movs	r2, #0
 800218c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800218e:	4b14      	ldr	r3, [pc, #80]	; (80021e0 <MX_ETH_Init+0x80>)
 8002190:	4a15      	ldr	r2, [pc, #84]	; (80021e8 <MX_ETH_Init+0x88>)
 8002192:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8002194:	4b12      	ldr	r3, [pc, #72]	; (80021e0 <MX_ETH_Init+0x80>)
 8002196:	2201      	movs	r2, #1
 8002198:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800219a:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <MX_ETH_Init+0x80>)
 800219c:	4a13      	ldr	r2, [pc, #76]	; (80021ec <MX_ETH_Init+0x8c>)
 800219e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80021a0:	4b0f      	ldr	r3, [pc, #60]	; (80021e0 <MX_ETH_Init+0x80>)
 80021a2:	4a13      	ldr	r2, [pc, #76]	; (80021f0 <MX_ETH_Init+0x90>)
 80021a4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80021a6:	4b0e      	ldr	r3, [pc, #56]	; (80021e0 <MX_ETH_Init+0x80>)
 80021a8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80021ac:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80021ae:	480c      	ldr	r0, [pc, #48]	; (80021e0 <MX_ETH_Init+0x80>)
 80021b0:	f000 fce8 	bl	8002b84 <HAL_ETH_Init>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80021ba:	f000 f92a 	bl	8002412 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80021be:	2238      	movs	r2, #56	; 0x38
 80021c0:	2100      	movs	r1, #0
 80021c2:	480c      	ldr	r0, [pc, #48]	; (80021f4 <MX_ETH_Init+0x94>)
 80021c4:	f004 f84a 	bl	800625c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80021c8:	4b0a      	ldr	r3, [pc, #40]	; (80021f4 <MX_ETH_Init+0x94>)
 80021ca:	2221      	movs	r2, #33	; 0x21
 80021cc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80021ce:	4b09      	ldr	r3, [pc, #36]	; (80021f4 <MX_ETH_Init+0x94>)
 80021d0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80021d4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80021d6:	4b07      	ldr	r3, [pc, #28]	; (80021f4 <MX_ETH_Init+0x94>)
 80021d8:	2200      	movs	r2, #0
 80021da:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80021dc:	bf00      	nop
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	240001e8 	.word	0x240001e8
 80021e4:	40028000 	.word	0x40028000
 80021e8:	24000848 	.word	0x24000848
 80021ec:	2400012c 	.word	0x2400012c
 80021f0:	240000cc 	.word	0x240000cc
 80021f4:	240001b0 	.word	0x240001b0

080021f8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80021fc:	4b15      	ldr	r3, [pc, #84]	; (8002254 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80021fe:	4a16      	ldr	r2, [pc, #88]	; (8002258 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8002200:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8002202:	4b14      	ldr	r3, [pc, #80]	; (8002254 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002204:	2209      	movs	r2, #9
 8002206:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002208:	4b12      	ldr	r3, [pc, #72]	; (8002254 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800220a:	2202      	movs	r2, #2
 800220c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800220e:	4b11      	ldr	r3, [pc, #68]	; (8002254 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002210:	2200      	movs	r2, #0
 8002212:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002214:	4b0f      	ldr	r3, [pc, #60]	; (8002254 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002216:	2202      	movs	r2, #2
 8002218:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800221a:	4b0e      	ldr	r3, [pc, #56]	; (8002254 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800221c:	2200      	movs	r2, #0
 800221e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002220:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002222:	2200      	movs	r2, #0
 8002224:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002226:	4b0b      	ldr	r3, [pc, #44]	; (8002254 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002228:	2200      	movs	r2, #0
 800222a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800222c:	4b09      	ldr	r3, [pc, #36]	; (8002254 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800222e:	2201      	movs	r2, #1
 8002230:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002232:	4b08      	ldr	r3, [pc, #32]	; (8002254 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002234:	2201      	movs	r2, #1
 8002236:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002238:	4b06      	ldr	r3, [pc, #24]	; (8002254 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800223a:	2200      	movs	r2, #0
 800223c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800223e:	4805      	ldr	r0, [pc, #20]	; (8002254 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002240:	f001 fad6 	bl	80037f0 <HAL_PCD_Init>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800224a:	f000 f8e2 	bl	8002412 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	24000298 	.word	0x24000298
 8002258:	40080000 	.word	0x40080000

0800225c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002262:	4b0a      	ldr	r3, [pc, #40]	; (800228c <MX_DMA_Init+0x30>)
 8002264:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002268:	4a08      	ldr	r2, [pc, #32]	; (800228c <MX_DMA_Init+0x30>)
 800226a:	f043 0301 	orr.w	r3, r3, #1
 800226e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002272:	4b06      	ldr	r3, [pc, #24]	; (800228c <MX_DMA_Init+0x30>)
 8002274:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	607b      	str	r3, [r7, #4]
 800227e:	687b      	ldr	r3, [r7, #4]

}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	58024400 	.word	0x58024400

08002290 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b08a      	sub	sp, #40	; 0x28
 8002294:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002296:	f107 0314 	add.w	r3, r7, #20
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	605a      	str	r2, [r3, #4]
 80022a0:	609a      	str	r2, [r3, #8]
 80022a2:	60da      	str	r2, [r3, #12]
 80022a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022a6:	4b32      	ldr	r3, [pc, #200]	; (8002370 <MX_GPIO_Init+0xe0>)
 80022a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ac:	4a30      	ldr	r2, [pc, #192]	; (8002370 <MX_GPIO_Init+0xe0>)
 80022ae:	f043 0304 	orr.w	r3, r3, #4
 80022b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022b6:	4b2e      	ldr	r3, [pc, #184]	; (8002370 <MX_GPIO_Init+0xe0>)
 80022b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022bc:	f003 0304 	and.w	r3, r3, #4
 80022c0:	613b      	str	r3, [r7, #16]
 80022c2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022c4:	4b2a      	ldr	r3, [pc, #168]	; (8002370 <MX_GPIO_Init+0xe0>)
 80022c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ca:	4a29      	ldr	r2, [pc, #164]	; (8002370 <MX_GPIO_Init+0xe0>)
 80022cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022d4:	4b26      	ldr	r3, [pc, #152]	; (8002370 <MX_GPIO_Init+0xe0>)
 80022d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e2:	4b23      	ldr	r3, [pc, #140]	; (8002370 <MX_GPIO_Init+0xe0>)
 80022e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022e8:	4a21      	ldr	r2, [pc, #132]	; (8002370 <MX_GPIO_Init+0xe0>)
 80022ea:	f043 0301 	orr.w	r3, r3, #1
 80022ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022f2:	4b1f      	ldr	r3, [pc, #124]	; (8002370 <MX_GPIO_Init+0xe0>)
 80022f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	60bb      	str	r3, [r7, #8]
 80022fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002300:	4b1b      	ldr	r3, [pc, #108]	; (8002370 <MX_GPIO_Init+0xe0>)
 8002302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002306:	4a1a      	ldr	r2, [pc, #104]	; (8002370 <MX_GPIO_Init+0xe0>)
 8002308:	f043 0302 	orr.w	r3, r3, #2
 800230c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002310:	4b17      	ldr	r3, [pc, #92]	; (8002370 <MX_GPIO_Init+0xe0>)
 8002312:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	607b      	str	r3, [r7, #4]
 800231c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800231e:	4b14      	ldr	r3, [pc, #80]	; (8002370 <MX_GPIO_Init+0xe0>)
 8002320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002324:	4a12      	ldr	r2, [pc, #72]	; (8002370 <MX_GPIO_Init+0xe0>)
 8002326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800232a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800232e:	4b10      	ldr	r3, [pc, #64]	; (8002370 <MX_GPIO_Init+0xe0>)
 8002330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002338:	603b      	str	r3, [r7, #0]
 800233a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800233c:	2200      	movs	r2, #0
 800233e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002342:	480c      	ldr	r0, [pc, #48]	; (8002374 <MX_GPIO_Init+0xe4>)
 8002344:	f001 f9f2 	bl	800372c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8002348:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800234c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800234e:	2301      	movs	r3, #1
 8002350:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002352:	2300      	movs	r3, #0
 8002354:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002356:	2300      	movs	r3, #0
 8002358:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800235a:	f107 0314 	add.w	r3, r7, #20
 800235e:	4619      	mov	r1, r3
 8002360:	4804      	ldr	r0, [pc, #16]	; (8002374 <MX_GPIO_Init+0xe4>)
 8002362:	f001 f833 	bl	80033cc <HAL_GPIO_Init>

}
 8002366:	bf00      	nop
 8002368:	3728      	adds	r7, #40	; 0x28
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	58024400 	.word	0x58024400
 8002374:	58020400 	.word	0x58020400

08002378 <ili_scr_1>:

/* USER CODE BEGIN 4 */
void ili_scr_1(){
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af02      	add	r7, sp, #8

	  ili9486_FillRect(0, 0, 480, 320, cl_BLACK);
 800237e:	2300      	movs	r3, #0
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002386:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800238a:	2100      	movs	r1, #0
 800238c:	2000      	movs	r0, #0
 800238e:	f7fe f9d3 	bl	8000738 <ili9486_FillRect>

	  ili9486_FillRect(0, 300, 80, 20, cl_RED); // Red
 8002392:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	2314      	movs	r3, #20
 800239a:	2250      	movs	r2, #80	; 0x50
 800239c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80023a0:	2000      	movs	r0, #0
 80023a2:	f7fe f9c9 	bl	8000738 <ili9486_FillRect>
	  ili9486_FillRect(80, 300, 80, 20, cl_GREEN); // Green RGB565
 80023a6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	2314      	movs	r3, #20
 80023ae:	2250      	movs	r2, #80	; 0x50
 80023b0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80023b4:	2050      	movs	r0, #80	; 0x50
 80023b6:	f7fe f9bf 	bl	8000738 <ili9486_FillRect>
	  ili9486_FillRect(160, 300, 80, 20, cl_BLUE); // Blue
 80023ba:	231f      	movs	r3, #31
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	2314      	movs	r3, #20
 80023c0:	2250      	movs	r2, #80	; 0x50
 80023c2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80023c6:	20a0      	movs	r0, #160	; 0xa0
 80023c8:	f7fe f9b6 	bl	8000738 <ili9486_FillRect>
	  ili9486_FillRect(240, 300,  80, 20, cl_CYAN); // C0x07FF
 80023cc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	2314      	movs	r3, #20
 80023d4:	2250      	movs	r2, #80	; 0x50
 80023d6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80023da:	20f0      	movs	r0, #240	; 0xf0
 80023dc:	f7fe f9ac 	bl	8000738 <ili9486_FillRect>
	  ili9486_FillRect(320, 300, 80, 20, cl_MAGENTA); // M 0xF81F
 80023e0:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	2314      	movs	r3, #20
 80023e8:	2250      	movs	r2, #80	; 0x50
 80023ea:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80023ee:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80023f2:	f7fe f9a1 	bl	8000738 <ili9486_FillRect>
	  ili9486_FillRect(400, 300, 80, 20, cl_YELLOW); // Y0xFFE0
 80023f6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	2314      	movs	r3, #20
 80023fe:	2250      	movs	r2, #80	; 0x50
 8002400:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002404:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002408:	f7fe f996 	bl	8000738 <ili9486_FillRect>
	  //ili9486_FillRect(390, 30, 70, 230, cl_BLACK); // K
}
 800240c:	bf00      	nop
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002412:	b480      	push	{r7}
 8002414:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002416:	b672      	cpsid	i
}
 8002418:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800241a:	e7fe      	b.n	800241a <Error_Handler+0x8>

0800241c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002422:	4b0a      	ldr	r3, [pc, #40]	; (800244c <HAL_MspInit+0x30>)
 8002424:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002428:	4a08      	ldr	r2, [pc, #32]	; (800244c <HAL_MspInit+0x30>)
 800242a:	f043 0302 	orr.w	r3, r3, #2
 800242e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002432:	4b06      	ldr	r3, [pc, #24]	; (800244c <HAL_MspInit+0x30>)
 8002434:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	607b      	str	r3, [r7, #4]
 800243e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	58024400 	.word	0x58024400

08002450 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b08e      	sub	sp, #56	; 0x38
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002458:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	605a      	str	r2, [r3, #4]
 8002462:	609a      	str	r2, [r3, #8]
 8002464:	60da      	str	r2, [r3, #12]
 8002466:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a59      	ldr	r2, [pc, #356]	; (80025d4 <HAL_ETH_MspInit+0x184>)
 800246e:	4293      	cmp	r3, r2
 8002470:	f040 80ab 	bne.w	80025ca <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8002474:	4b58      	ldr	r3, [pc, #352]	; (80025d8 <HAL_ETH_MspInit+0x188>)
 8002476:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800247a:	4a57      	ldr	r2, [pc, #348]	; (80025d8 <HAL_ETH_MspInit+0x188>)
 800247c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002480:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002484:	4b54      	ldr	r3, [pc, #336]	; (80025d8 <HAL_ETH_MspInit+0x188>)
 8002486:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800248a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800248e:	623b      	str	r3, [r7, #32]
 8002490:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8002492:	4b51      	ldr	r3, [pc, #324]	; (80025d8 <HAL_ETH_MspInit+0x188>)
 8002494:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002498:	4a4f      	ldr	r2, [pc, #316]	; (80025d8 <HAL_ETH_MspInit+0x188>)
 800249a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800249e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80024a2:	4b4d      	ldr	r3, [pc, #308]	; (80025d8 <HAL_ETH_MspInit+0x188>)
 80024a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80024a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ac:	61fb      	str	r3, [r7, #28]
 80024ae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80024b0:	4b49      	ldr	r3, [pc, #292]	; (80025d8 <HAL_ETH_MspInit+0x188>)
 80024b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80024b6:	4a48      	ldr	r2, [pc, #288]	; (80025d8 <HAL_ETH_MspInit+0x188>)
 80024b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024bc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80024c0:	4b45      	ldr	r3, [pc, #276]	; (80025d8 <HAL_ETH_MspInit+0x188>)
 80024c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80024c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ca:	61bb      	str	r3, [r7, #24]
 80024cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ce:	4b42      	ldr	r3, [pc, #264]	; (80025d8 <HAL_ETH_MspInit+0x188>)
 80024d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024d4:	4a40      	ldr	r2, [pc, #256]	; (80025d8 <HAL_ETH_MspInit+0x188>)
 80024d6:	f043 0304 	orr.w	r3, r3, #4
 80024da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024de:	4b3e      	ldr	r3, [pc, #248]	; (80025d8 <HAL_ETH_MspInit+0x188>)
 80024e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	617b      	str	r3, [r7, #20]
 80024ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ec:	4b3a      	ldr	r3, [pc, #232]	; (80025d8 <HAL_ETH_MspInit+0x188>)
 80024ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024f2:	4a39      	ldr	r2, [pc, #228]	; (80025d8 <HAL_ETH_MspInit+0x188>)
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024fc:	4b36      	ldr	r3, [pc, #216]	; (80025d8 <HAL_ETH_MspInit+0x188>)
 80024fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	613b      	str	r3, [r7, #16]
 8002508:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800250a:	4b33      	ldr	r3, [pc, #204]	; (80025d8 <HAL_ETH_MspInit+0x188>)
 800250c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002510:	4a31      	ldr	r2, [pc, #196]	; (80025d8 <HAL_ETH_MspInit+0x188>)
 8002512:	f043 0302 	orr.w	r3, r3, #2
 8002516:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800251a:	4b2f      	ldr	r3, [pc, #188]	; (80025d8 <HAL_ETH_MspInit+0x188>)
 800251c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002528:	4b2b      	ldr	r3, [pc, #172]	; (80025d8 <HAL_ETH_MspInit+0x188>)
 800252a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800252e:	4a2a      	ldr	r2, [pc, #168]	; (80025d8 <HAL_ETH_MspInit+0x188>)
 8002530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002534:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002538:	4b27      	ldr	r3, [pc, #156]	; (80025d8 <HAL_ETH_MspInit+0x188>)
 800253a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800253e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002542:	60bb      	str	r3, [r7, #8]
 8002544:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002546:	2332      	movs	r3, #50	; 0x32
 8002548:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254a:	2302      	movs	r3, #2
 800254c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254e:	2300      	movs	r3, #0
 8002550:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002552:	2300      	movs	r3, #0
 8002554:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002556:	230b      	movs	r3, #11
 8002558:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800255a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800255e:	4619      	mov	r1, r3
 8002560:	481e      	ldr	r0, [pc, #120]	; (80025dc <HAL_ETH_MspInit+0x18c>)
 8002562:	f000 ff33 	bl	80033cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8002566:	2386      	movs	r3, #134	; 0x86
 8002568:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256a:	2302      	movs	r3, #2
 800256c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256e:	2300      	movs	r3, #0
 8002570:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002572:	2300      	movs	r3, #0
 8002574:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002576:	230b      	movs	r3, #11
 8002578:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800257a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800257e:	4619      	mov	r1, r3
 8002580:	4817      	ldr	r0, [pc, #92]	; (80025e0 <HAL_ETH_MspInit+0x190>)
 8002582:	f000 ff23 	bl	80033cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002586:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800258a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258c:	2302      	movs	r3, #2
 800258e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002590:	2300      	movs	r3, #0
 8002592:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002594:	2300      	movs	r3, #0
 8002596:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002598:	230b      	movs	r3, #11
 800259a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800259c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025a0:	4619      	mov	r1, r3
 80025a2:	4810      	ldr	r0, [pc, #64]	; (80025e4 <HAL_ETH_MspInit+0x194>)
 80025a4:	f000 ff12 	bl	80033cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80025a8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80025ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ae:	2302      	movs	r3, #2
 80025b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b2:	2300      	movs	r3, #0
 80025b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b6:	2300      	movs	r3, #0
 80025b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025ba:	230b      	movs	r3, #11
 80025bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025c2:	4619      	mov	r1, r3
 80025c4:	4808      	ldr	r0, [pc, #32]	; (80025e8 <HAL_ETH_MspInit+0x198>)
 80025c6:	f000 ff01 	bl	80033cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80025ca:	bf00      	nop
 80025cc:	3738      	adds	r7, #56	; 0x38
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40028000 	.word	0x40028000
 80025d8:	58024400 	.word	0x58024400
 80025dc:	58020800 	.word	0x58020800
 80025e0:	58020000 	.word	0x58020000
 80025e4:	58020400 	.word	0x58020400
 80025e8:	58021800 	.word	0x58021800

080025ec <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b0b8      	sub	sp, #224	; 0xe0
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	605a      	str	r2, [r3, #4]
 80025fe:	609a      	str	r2, [r3, #8]
 8002600:	60da      	str	r2, [r3, #12]
 8002602:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002604:	f107 0310 	add.w	r3, r7, #16
 8002608:	22bc      	movs	r2, #188	; 0xbc
 800260a:	2100      	movs	r1, #0
 800260c:	4618      	mov	r0, r3
 800260e:	f003 fe25 	bl	800625c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a36      	ldr	r2, [pc, #216]	; (80026f0 <HAL_PCD_MspInit+0x104>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d165      	bne.n	80026e8 <HAL_PCD_MspInit+0xfc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800261c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002620:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8002622:	2301      	movs	r3, #1
 8002624:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 8002626:	2318      	movs	r3, #24
 8002628:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800262a:	2302      	movs	r3, #2
 800262c:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 800262e:	2304      	movs	r3, #4
 8002630:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8002632:	2302      	movs	r3, #2
 8002634:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8002636:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800263a:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800263c:	2300      	movs	r3, #0
 800263e:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8002640:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002644:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002648:	f107 0310 	add.w	r3, r7, #16
 800264c:	4618      	mov	r0, r3
 800264e:	f002 fa0f 	bl	8004a70 <HAL_RCCEx_PeriphCLKConfig>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8002658:	f7ff fedb 	bl	8002412 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800265c:	f001 fa6a 	bl	8003b34 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002660:	4b24      	ldr	r3, [pc, #144]	; (80026f4 <HAL_PCD_MspInit+0x108>)
 8002662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002666:	4a23      	ldr	r2, [pc, #140]	; (80026f4 <HAL_PCD_MspInit+0x108>)
 8002668:	f043 0301 	orr.w	r3, r3, #1
 800266c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002670:	4b20      	ldr	r3, [pc, #128]	; (80026f4 <HAL_PCD_MspInit+0x108>)
 8002672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800267e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8002682:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002686:	2302      	movs	r3, #2
 8002688:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268c:	2300      	movs	r3, #0
 800268e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002692:	2300      	movs	r3, #0
 8002694:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002698:	230a      	movs	r3, #10
 800269a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800269e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80026a2:	4619      	mov	r1, r3
 80026a4:	4814      	ldr	r0, [pc, #80]	; (80026f8 <HAL_PCD_MspInit+0x10c>)
 80026a6:	f000 fe91 	bl	80033cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80026aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026b2:	2300      	movs	r3, #0
 80026b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b8:	2300      	movs	r3, #0
 80026ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026be:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80026c2:	4619      	mov	r1, r3
 80026c4:	480c      	ldr	r0, [pc, #48]	; (80026f8 <HAL_PCD_MspInit+0x10c>)
 80026c6:	f000 fe81 	bl	80033cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80026ca:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <HAL_PCD_MspInit+0x108>)
 80026cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80026d0:	4a08      	ldr	r2, [pc, #32]	; (80026f4 <HAL_PCD_MspInit+0x108>)
 80026d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80026d6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80026da:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <HAL_PCD_MspInit+0x108>)
 80026dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80026e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026e4:	60bb      	str	r3, [r7, #8]
 80026e6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80026e8:	bf00      	nop
 80026ea:	37e0      	adds	r7, #224	; 0xe0
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40080000 	.word	0x40080000
 80026f4:	58024400 	.word	0x58024400
 80026f8:	58020000 	.word	0x58020000

080026fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002700:	e7fe      	b.n	8002700 <NMI_Handler+0x4>

08002702 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002702:	b480      	push	{r7}
 8002704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002706:	e7fe      	b.n	8002706 <HardFault_Handler+0x4>

08002708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800270c:	e7fe      	b.n	800270c <MemManage_Handler+0x4>

0800270e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800270e:	b480      	push	{r7}
 8002710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002712:	e7fe      	b.n	8002712 <BusFault_Handler+0x4>

08002714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002718:	e7fe      	b.n	8002718 <UsageFault_Handler+0x4>

0800271a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800271a:	b480      	push	{r7}
 800271c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800271e:	bf00      	nop
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800272c:	bf00      	nop
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002736:	b480      	push	{r7}
 8002738:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002748:	f000 f8d4 	bl	80028f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800274c:	bf00      	nop
 800274e:	bd80      	pop	{r7, pc}

08002750 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002758:	4a14      	ldr	r2, [pc, #80]	; (80027ac <_sbrk+0x5c>)
 800275a:	4b15      	ldr	r3, [pc, #84]	; (80027b0 <_sbrk+0x60>)
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <_sbrk+0x64>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d102      	bne.n	8002772 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800276c:	4b11      	ldr	r3, [pc, #68]	; (80027b4 <_sbrk+0x64>)
 800276e:	4a12      	ldr	r2, [pc, #72]	; (80027b8 <_sbrk+0x68>)
 8002770:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002772:	4b10      	ldr	r3, [pc, #64]	; (80027b4 <_sbrk+0x64>)
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4413      	add	r3, r2
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	429a      	cmp	r2, r3
 800277e:	d207      	bcs.n	8002790 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002780:	f003 fd32 	bl	80061e8 <__errno>
 8002784:	4603      	mov	r3, r0
 8002786:	220c      	movs	r2, #12
 8002788:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800278a:	f04f 33ff 	mov.w	r3, #4294967295
 800278e:	e009      	b.n	80027a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002790:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <_sbrk+0x64>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002796:	4b07      	ldr	r3, [pc, #28]	; (80027b4 <_sbrk+0x64>)
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4413      	add	r3, r2
 800279e:	4a05      	ldr	r2, [pc, #20]	; (80027b4 <_sbrk+0x64>)
 80027a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027a2:	68fb      	ldr	r3, [r7, #12]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3718      	adds	r7, #24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	24080000 	.word	0x24080000
 80027b0:	00000400 	.word	0x00000400
 80027b4:	24000850 	.word	0x24000850
 80027b8:	24000868 	.word	0x24000868

080027bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80027bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80027c0:	f7fd fdde 	bl	8000380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027c4:	480c      	ldr	r0, [pc, #48]	; (80027f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027c6:	490d      	ldr	r1, [pc, #52]	; (80027fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027c8:	4a0d      	ldr	r2, [pc, #52]	; (8002800 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027cc:	e002      	b.n	80027d4 <LoopCopyDataInit>

080027ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027d2:	3304      	adds	r3, #4

080027d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027d8:	d3f9      	bcc.n	80027ce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027da:	4a0a      	ldr	r2, [pc, #40]	; (8002804 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027dc:	4c0a      	ldr	r4, [pc, #40]	; (8002808 <LoopFillZerobss+0x22>)
  movs r3, #0
 80027de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027e0:	e001      	b.n	80027e6 <LoopFillZerobss>

080027e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027e4:	3204      	adds	r2, #4

080027e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027e8:	d3fb      	bcc.n	80027e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027ea:	f003 fd03 	bl	80061f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027ee:	f7ff fa45 	bl	8001c7c <main>
  bx  lr
 80027f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80027f4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80027f8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80027fc:	240000cc 	.word	0x240000cc
  ldr r2, =_sidata
 8002800:	080187c0 	.word	0x080187c0
  ldr r2, =_sbss
 8002804:	2400018c 	.word	0x2400018c
  ldr r4, =_ebss
 8002808:	24000868 	.word	0x24000868

0800280c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800280c:	e7fe      	b.n	800280c <ADC3_IRQHandler>
	...

08002810 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002816:	2003      	movs	r0, #3
 8002818:	f000 f982 	bl	8002b20 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800281c:	f001 ff7e 	bl	800471c <HAL_RCC_GetSysClockFreq>
 8002820:	4602      	mov	r2, r0
 8002822:	4b15      	ldr	r3, [pc, #84]	; (8002878 <HAL_Init+0x68>)
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	0a1b      	lsrs	r3, r3, #8
 8002828:	f003 030f 	and.w	r3, r3, #15
 800282c:	4913      	ldr	r1, [pc, #76]	; (800287c <HAL_Init+0x6c>)
 800282e:	5ccb      	ldrb	r3, [r1, r3]
 8002830:	f003 031f 	and.w	r3, r3, #31
 8002834:	fa22 f303 	lsr.w	r3, r2, r3
 8002838:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800283a:	4b0f      	ldr	r3, [pc, #60]	; (8002878 <HAL_Init+0x68>)
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	4a0e      	ldr	r2, [pc, #56]	; (800287c <HAL_Init+0x6c>)
 8002844:	5cd3      	ldrb	r3, [r2, r3]
 8002846:	f003 031f 	and.w	r3, r3, #31
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	fa22 f303 	lsr.w	r3, r2, r3
 8002850:	4a0b      	ldr	r2, [pc, #44]	; (8002880 <HAL_Init+0x70>)
 8002852:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002854:	4a0b      	ldr	r2, [pc, #44]	; (8002884 <HAL_Init+0x74>)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800285a:	2000      	movs	r0, #0
 800285c:	f000 f814 	bl	8002888 <HAL_InitTick>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e002      	b.n	8002870 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800286a:	f7ff fdd7 	bl	800241c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	58024400 	.word	0x58024400
 800287c:	08006c5c 	.word	0x08006c5c
 8002880:	24000004 	.word	0x24000004
 8002884:	24000000 	.word	0x24000000

08002888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002890:	4b15      	ldr	r3, [pc, #84]	; (80028e8 <HAL_InitTick+0x60>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e021      	b.n	80028e0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800289c:	4b13      	ldr	r3, [pc, #76]	; (80028ec <HAL_InitTick+0x64>)
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	4b11      	ldr	r3, [pc, #68]	; (80028e8 <HAL_InitTick+0x60>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	4619      	mov	r1, r3
 80028a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80028ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 f959 	bl	8002b6a <HAL_SYSTICK_Config>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e00e      	b.n	80028e0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2b0f      	cmp	r3, #15
 80028c6:	d80a      	bhi.n	80028de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028c8:	2200      	movs	r2, #0
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	f04f 30ff 	mov.w	r0, #4294967295
 80028d0:	f000 f931 	bl	8002b36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028d4:	4a06      	ldr	r2, [pc, #24]	; (80028f0 <HAL_InitTick+0x68>)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028da:	2300      	movs	r3, #0
 80028dc:	e000      	b.n	80028e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	24000064 	.word	0x24000064
 80028ec:	24000000 	.word	0x24000000
 80028f0:	24000060 	.word	0x24000060

080028f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80028f8:	4b06      	ldr	r3, [pc, #24]	; (8002914 <HAL_IncTick+0x20>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	461a      	mov	r2, r3
 80028fe:	4b06      	ldr	r3, [pc, #24]	; (8002918 <HAL_IncTick+0x24>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4413      	add	r3, r2
 8002904:	4a04      	ldr	r2, [pc, #16]	; (8002918 <HAL_IncTick+0x24>)
 8002906:	6013      	str	r3, [r2, #0]
}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	24000064 	.word	0x24000064
 8002918:	24000854 	.word	0x24000854

0800291c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  return uwTick;
 8002920:	4b03      	ldr	r3, [pc, #12]	; (8002930 <HAL_GetTick+0x14>)
 8002922:	681b      	ldr	r3, [r3, #0]
}
 8002924:	4618      	mov	r0, r3
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	24000854 	.word	0x24000854

08002934 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800293c:	f7ff ffee 	bl	800291c <HAL_GetTick>
 8002940:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800294c:	d005      	beq.n	800295a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800294e:	4b0a      	ldr	r3, [pc, #40]	; (8002978 <HAL_Delay+0x44>)
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	461a      	mov	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	4413      	add	r3, r2
 8002958:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800295a:	bf00      	nop
 800295c:	f7ff ffde 	bl	800291c <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	429a      	cmp	r2, r3
 800296a:	d8f7      	bhi.n	800295c <HAL_Delay+0x28>
  {
  }
}
 800296c:	bf00      	nop
 800296e:	bf00      	nop
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	24000064 	.word	0x24000064

0800297c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002980:	4b03      	ldr	r3, [pc, #12]	; (8002990 <HAL_GetREVID+0x14>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	0c1b      	lsrs	r3, r3, #16
}
 8002986:	4618      	mov	r0, r3
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	5c001000 	.word	0x5c001000

08002994 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800299c:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80029a4:	4904      	ldr	r1, [pc, #16]	; (80029b8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	604b      	str	r3, [r1, #4]
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	58000400 	.word	0x58000400

080029bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029cc:	4b0b      	ldr	r3, [pc, #44]	; (80029fc <__NVIC_SetPriorityGrouping+0x40>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029d8:	4013      	ands	r3, r2
 80029da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80029e4:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <__NVIC_SetPriorityGrouping+0x44>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ea:	4a04      	ldr	r2, [pc, #16]	; (80029fc <__NVIC_SetPriorityGrouping+0x40>)
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	60d3      	str	r3, [r2, #12]
}
 80029f0:	bf00      	nop
 80029f2:	3714      	adds	r7, #20
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	e000ed00 	.word	0xe000ed00
 8002a00:	05fa0000 	.word	0x05fa0000

08002a04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a08:	4b04      	ldr	r3, [pc, #16]	; (8002a1c <__NVIC_GetPriorityGrouping+0x18>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	0a1b      	lsrs	r3, r3, #8
 8002a0e:	f003 0307 	and.w	r3, r3, #7
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	e000ed00 	.word	0xe000ed00

08002a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	6039      	str	r1, [r7, #0]
 8002a2a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	db0a      	blt.n	8002a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	490c      	ldr	r1, [pc, #48]	; (8002a6c <__NVIC_SetPriority+0x4c>)
 8002a3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a3e:	0112      	lsls	r2, r2, #4
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	440b      	add	r3, r1
 8002a44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a48:	e00a      	b.n	8002a60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	4908      	ldr	r1, [pc, #32]	; (8002a70 <__NVIC_SetPriority+0x50>)
 8002a50:	88fb      	ldrh	r3, [r7, #6]
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	3b04      	subs	r3, #4
 8002a58:	0112      	lsls	r2, r2, #4
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	761a      	strb	r2, [r3, #24]
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	e000e100 	.word	0xe000e100
 8002a70:	e000ed00 	.word	0xe000ed00

08002a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b089      	sub	sp, #36	; 0x24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f1c3 0307 	rsb	r3, r3, #7
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	bf28      	it	cs
 8002a92:	2304      	movcs	r3, #4
 8002a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	3304      	adds	r3, #4
 8002a9a:	2b06      	cmp	r3, #6
 8002a9c:	d902      	bls.n	8002aa4 <NVIC_EncodePriority+0x30>
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	3b03      	subs	r3, #3
 8002aa2:	e000      	b.n	8002aa6 <NVIC_EncodePriority+0x32>
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	43da      	mvns	r2, r3
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	401a      	ands	r2, r3
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002abc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac6:	43d9      	mvns	r1, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002acc:	4313      	orrs	r3, r2
         );
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3724      	adds	r7, #36	; 0x24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
	...

08002adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002aec:	d301      	bcc.n	8002af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aee:	2301      	movs	r3, #1
 8002af0:	e00f      	b.n	8002b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002af2:	4a0a      	ldr	r2, [pc, #40]	; (8002b1c <SysTick_Config+0x40>)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3b01      	subs	r3, #1
 8002af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002afa:	210f      	movs	r1, #15
 8002afc:	f04f 30ff 	mov.w	r0, #4294967295
 8002b00:	f7ff ff8e 	bl	8002a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b04:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <SysTick_Config+0x40>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b0a:	4b04      	ldr	r3, [pc, #16]	; (8002b1c <SysTick_Config+0x40>)
 8002b0c:	2207      	movs	r2, #7
 8002b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	e000e010 	.word	0xe000e010

08002b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f7ff ff47 	bl	80029bc <__NVIC_SetPriorityGrouping>
}
 8002b2e:	bf00      	nop
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b086      	sub	sp, #24
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	60b9      	str	r1, [r7, #8]
 8002b40:	607a      	str	r2, [r7, #4]
 8002b42:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b44:	f7ff ff5e 	bl	8002a04 <__NVIC_GetPriorityGrouping>
 8002b48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	68b9      	ldr	r1, [r7, #8]
 8002b4e:	6978      	ldr	r0, [r7, #20]
 8002b50:	f7ff ff90 	bl	8002a74 <NVIC_EncodePriority>
 8002b54:	4602      	mov	r2, r0
 8002b56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b5a:	4611      	mov	r1, r2
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff ff5f 	bl	8002a20 <__NVIC_SetPriority>
}
 8002b62:	bf00      	nop
 8002b64:	3718      	adds	r7, #24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b082      	sub	sp, #8
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7ff ffb2 	bl	8002adc <SysTick_Config>
 8002b78:	4603      	mov	r3, r0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
	...

08002b84 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e0cf      	b.n	8002d36 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d106      	bne.n	8002bae <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2223      	movs	r2, #35	; 0x23
 8002ba4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f7ff fc51 	bl	8002450 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bae:	4b64      	ldr	r3, [pc, #400]	; (8002d40 <HAL_ETH_Init+0x1bc>)
 8002bb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002bb4:	4a62      	ldr	r2, [pc, #392]	; (8002d40 <HAL_ETH_Init+0x1bc>)
 8002bb6:	f043 0302 	orr.w	r3, r3, #2
 8002bba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002bbe:	4b60      	ldr	r3, [pc, #384]	; (8002d40 <HAL_ETH_Init+0x1bc>)
 8002bc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	7a1b      	ldrb	r3, [r3, #8]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d103      	bne.n	8002bdc <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002bd4:	2000      	movs	r0, #0
 8002bd6:	f7ff fedd 	bl	8002994 <HAL_SYSCFG_ETHInterfaceSelect>
 8002bda:	e003      	b.n	8002be4 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002bdc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002be0:	f7ff fed8 	bl	8002994 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002be4:	4b57      	ldr	r3, [pc, #348]	; (8002d44 <HAL_ETH_Init+0x1c0>)
 8002be6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	6812      	ldr	r2, [r2, #0]
 8002bf6:	f043 0301 	orr.w	r3, r3, #1
 8002bfa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002bfe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c00:	f7ff fe8c 	bl	800291c <HAL_GetTick>
 8002c04:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002c06:	e011      	b.n	8002c2c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002c08:	f7ff fe88 	bl	800291c <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c16:	d909      	bls.n	8002c2c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2204      	movs	r2, #4
 8002c1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	22e0      	movs	r2, #224	; 0xe0
 8002c24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e084      	b.n	8002d36 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1e4      	bne.n	8002c08 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f886 	bl	8002d50 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002c44:	f001 fee4 	bl	8004a10 <HAL_RCC_GetHCLKFreq>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	4a3f      	ldr	r2, [pc, #252]	; (8002d48 <HAL_ETH_Init+0x1c4>)
 8002c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c50:	0c9a      	lsrs	r2, r3, #18
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	3a01      	subs	r2, #1
 8002c58:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 fa71 	bl	8003144 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c6a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002c6e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6812      	ldr	r2, [r2, #0]
 8002c76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002c7a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002c7e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	f003 0303 	and.w	r3, r3, #3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d009      	beq.n	8002ca2 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	22e0      	movs	r2, #224	; 0xe0
 8002c9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e049      	b.n	8002d36 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002caa:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002cae:	4b27      	ldr	r3, [pc, #156]	; (8002d4c <HAL_ETH_Init+0x1c8>)
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	6952      	ldr	r2, [r2, #20]
 8002cb6:	0051      	lsls	r1, r2, #1
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	6812      	ldr	r2, [r2, #0]
 8002cbc:	430b      	orrs	r3, r1
 8002cbe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002cc2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 fad9 	bl	800327e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 fb1f 	bl	8003310 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	3305      	adds	r3, #5
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	021a      	lsls	r2, r3, #8
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	3303      	adds	r3, #3
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	061a      	lsls	r2, r3, #24
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	3302      	adds	r3, #2
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	041b      	lsls	r3, r3, #16
 8002d04:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002d10:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002d1e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002d20:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2210      	movs	r2, #16
 8002d30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	58024400 	.word	0x58024400
 8002d44:	58000400 	.word	0x58000400
 8002d48:	431bde83 	.word	0x431bde83
 8002d4c:	ffff8001 	.word	0xffff8001

08002d50 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d60:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d68:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002d6a:	f001 fe51 	bl	8004a10 <HAL_RCC_GetHCLKFreq>
 8002d6e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	4a1e      	ldr	r2, [pc, #120]	; (8002dec <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d908      	bls.n	8002d8a <HAL_ETH_SetMDIOClockRange+0x3a>
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	4a1d      	ldr	r2, [pc, #116]	; (8002df0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d804      	bhi.n	8002d8a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	e027      	b.n	8002dda <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	4a18      	ldr	r2, [pc, #96]	; (8002df0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d908      	bls.n	8002da4 <HAL_ETH_SetMDIOClockRange+0x54>
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	4a17      	ldr	r2, [pc, #92]	; (8002df4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d204      	bcs.n	8002da4 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	e01a      	b.n	8002dda <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	4a13      	ldr	r2, [pc, #76]	; (8002df4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d303      	bcc.n	8002db4 <HAL_ETH_SetMDIOClockRange+0x64>
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	4a12      	ldr	r2, [pc, #72]	; (8002df8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d911      	bls.n	8002dd8 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	4a10      	ldr	r2, [pc, #64]	; (8002df8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d908      	bls.n	8002dce <HAL_ETH_SetMDIOClockRange+0x7e>
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	4a0f      	ldr	r2, [pc, #60]	; (8002dfc <HAL_ETH_SetMDIOClockRange+0xac>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d804      	bhi.n	8002dce <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	e005      	b.n	8002dda <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dd4:	60fb      	str	r3, [r7, #12]
 8002dd6:	e000      	b.n	8002dda <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002dd8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002de4:	bf00      	nop
 8002de6:	3710      	adds	r7, #16
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	01312cff 	.word	0x01312cff
 8002df0:	02160ebf 	.word	0x02160ebf
 8002df4:	03938700 	.word	0x03938700
 8002df8:	05f5e0ff 	.word	0x05f5e0ff
 8002dfc:	08f0d17f 	.word	0x08f0d17f

08002e00 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002e12:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	791b      	ldrb	r3, [r3, #4]
 8002e18:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002e1a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	7b1b      	ldrb	r3, [r3, #12]
 8002e20:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002e22:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	7b5b      	ldrb	r3, [r3, #13]
 8002e28:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002e2a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	7b9b      	ldrb	r3, [r3, #14]
 8002e30:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002e32:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	7bdb      	ldrb	r3, [r3, #15]
 8002e38:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002e3a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	7c12      	ldrb	r2, [r2, #16]
 8002e40:	2a00      	cmp	r2, #0
 8002e42:	d102      	bne.n	8002e4a <ETH_SetMACConfig+0x4a>
 8002e44:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002e48:	e000      	b.n	8002e4c <ETH_SetMACConfig+0x4c>
 8002e4a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002e4c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	7c52      	ldrb	r2, [r2, #17]
 8002e52:	2a00      	cmp	r2, #0
 8002e54:	d102      	bne.n	8002e5c <ETH_SetMACConfig+0x5c>
 8002e56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e5a:	e000      	b.n	8002e5e <ETH_SetMACConfig+0x5e>
 8002e5c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002e5e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	7c9b      	ldrb	r3, [r3, #18]
 8002e64:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002e66:	431a      	orrs	r2, r3
               macconf->Speed |
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002e6c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002e72:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	7f1b      	ldrb	r3, [r3, #28]
 8002e78:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002e7a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	7f5b      	ldrb	r3, [r3, #29]
 8002e80:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002e82:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	7f92      	ldrb	r2, [r2, #30]
 8002e88:	2a00      	cmp	r2, #0
 8002e8a:	d102      	bne.n	8002e92 <ETH_SetMACConfig+0x92>
 8002e8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e90:	e000      	b.n	8002e94 <ETH_SetMACConfig+0x94>
 8002e92:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002e94:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	7fdb      	ldrb	r3, [r3, #31]
 8002e9a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002e9c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002ea4:	2a00      	cmp	r2, #0
 8002ea6:	d102      	bne.n	8002eae <ETH_SetMACConfig+0xae>
 8002ea8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002eac:	e000      	b.n	8002eb0 <ETH_SetMACConfig+0xb0>
 8002eae:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002eb0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002eb6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ebe:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002ec0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	4b56      	ldr	r3, [pc, #344]	; (800302c <ETH_SetMACConfig+0x22c>)
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	6812      	ldr	r2, [r2, #0]
 8002ed8:	68f9      	ldr	r1, [r7, #12]
 8002eda:	430b      	orrs	r3, r1
 8002edc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002eea:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002eec:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ef4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002ef6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002efe:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002f00:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002f08:	2a00      	cmp	r2, #0
 8002f0a:	d102      	bne.n	8002f12 <ETH_SetMACConfig+0x112>
 8002f0c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002f10:	e000      	b.n	8002f14 <ETH_SetMACConfig+0x114>
 8002f12:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002f14:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	685a      	ldr	r2, [r3, #4]
 8002f24:	4b42      	ldr	r3, [pc, #264]	; (8003030 <ETH_SetMACConfig+0x230>)
 8002f26:	4013      	ands	r3, r2
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6812      	ldr	r2, [r2, #0]
 8002f2c:	68f9      	ldr	r1, [r7, #12]
 8002f2e:	430b      	orrs	r3, r1
 8002f30:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f38:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68da      	ldr	r2, [r3, #12]
 8002f48:	4b3a      	ldr	r3, [pc, #232]	; (8003034 <ETH_SetMACConfig+0x234>)
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6812      	ldr	r2, [r2, #0]
 8002f50:	68f9      	ldr	r1, [r7, #12]
 8002f52:	430b      	orrs	r3, r1
 8002f54:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002f5c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002f62:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002f6a:	2a00      	cmp	r2, #0
 8002f6c:	d101      	bne.n	8002f72 <ETH_SetMACConfig+0x172>
 8002f6e:	2280      	movs	r2, #128	; 0x80
 8002f70:	e000      	b.n	8002f74 <ETH_SetMACConfig+0x174>
 8002f72:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002f74:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f7a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f86:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6812      	ldr	r2, [r2, #0]
 8002f90:	68f9      	ldr	r1, [r7, #12]
 8002f92:	430b      	orrs	r3, r1
 8002f94:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002f9c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002fa4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb2:	f023 0103 	bic.w	r1, r3, #3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002fca:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002fe6:	2a00      	cmp	r2, #0
 8002fe8:	d101      	bne.n	8002fee <ETH_SetMACConfig+0x1ee>
 8002fea:	2240      	movs	r2, #64	; 0x40
 8002fec:	e000      	b.n	8002ff0 <ETH_SetMACConfig+0x1f0>
 8002fee:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002ff0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002ff8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002ffa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8003002:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003004:	4313      	orrs	r3, r2
 8003006:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003010:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	430a      	orrs	r2, r1
 800301c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8003020:	bf00      	nop
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	00048083 	.word	0x00048083
 8003030:	c0f88000 	.word	0xc0f88000
 8003034:	fffffef0 	.word	0xfffffef0

08003038 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	4b38      	ldr	r3, [pc, #224]	; (8003130 <ETH_SetDMAConfig+0xf8>)
 800304e:	4013      	ands	r3, r2
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	6811      	ldr	r1, [r2, #0]
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	6812      	ldr	r2, [r2, #0]
 8003058:	430b      	orrs	r3, r1
 800305a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800305e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	791b      	ldrb	r3, [r3, #4]
 8003064:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800306a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	7b1b      	ldrb	r3, [r3, #12]
 8003070:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003072:	4313      	orrs	r3, r2
 8003074:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	4b2c      	ldr	r3, [pc, #176]	; (8003134 <ETH_SetDMAConfig+0xfc>)
 8003082:	4013      	ands	r3, r2
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	6812      	ldr	r2, [r2, #0]
 8003088:	68f9      	ldr	r1, [r7, #12]
 800308a:	430b      	orrs	r3, r1
 800308c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003090:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	7b5b      	ldrb	r3, [r3, #13]
 8003096:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800309c:	4313      	orrs	r3, r2
 800309e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030a8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80030ac:	4b22      	ldr	r3, [pc, #136]	; (8003138 <ETH_SetDMAConfig+0x100>)
 80030ae:	4013      	ands	r3, r2
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6812      	ldr	r2, [r2, #0]
 80030b4:	68f9      	ldr	r1, [r7, #12]
 80030b6:	430b      	orrs	r3, r1
 80030b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80030bc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	7d1b      	ldrb	r3, [r3, #20]
 80030c8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80030ca:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	7f5b      	ldrb	r3, [r3, #29]
 80030d0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80030d2:	4313      	orrs	r3, r2
 80030d4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030de:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80030e2:	4b16      	ldr	r3, [pc, #88]	; (800313c <ETH_SetDMAConfig+0x104>)
 80030e4:	4013      	ands	r3, r2
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6812      	ldr	r2, [r2, #0]
 80030ea:	68f9      	ldr	r1, [r7, #12]
 80030ec:	430b      	orrs	r3, r1
 80030ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80030f2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	7f1b      	ldrb	r3, [r3, #28]
 80030fa:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003100:	4313      	orrs	r3, r2
 8003102:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800310c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003110:	4b0b      	ldr	r3, [pc, #44]	; (8003140 <ETH_SetDMAConfig+0x108>)
 8003112:	4013      	ands	r3, r2
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	6812      	ldr	r2, [r2, #0]
 8003118:	68f9      	ldr	r1, [r7, #12]
 800311a:	430b      	orrs	r3, r1
 800311c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003120:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8003124:	bf00      	nop
 8003126:	3714      	adds	r7, #20
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	ffff87fd 	.word	0xffff87fd
 8003134:	ffff2ffe 	.word	0xffff2ffe
 8003138:	fffec000 	.word	0xfffec000
 800313c:	ffc0efef 	.word	0xffc0efef
 8003140:	7fc0ffff 	.word	0x7fc0ffff

08003144 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b0a4      	sub	sp, #144	; 0x90
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800314c:	2301      	movs	r3, #1
 800314e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003152:	2300      	movs	r3, #0
 8003154:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003156:	2300      	movs	r3, #0
 8003158:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800315c:	2300      	movs	r3, #0
 800315e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003162:	2301      	movs	r3, #1
 8003164:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003168:	2301      	movs	r3, #1
 800316a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800316e:	2301      	movs	r3, #1
 8003170:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003174:	2300      	movs	r3, #0
 8003176:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800317a:	2301      	movs	r3, #1
 800317c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003180:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003184:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003186:	2300      	movs	r3, #0
 8003188:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800318c:	2300      	movs	r3, #0
 800318e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003190:	2300      	movs	r3, #0
 8003192:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003196:	2300      	movs	r3, #0
 8003198:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800319c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80031a0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80031a2:	2300      	movs	r3, #0
 80031a4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80031a8:	2300      	movs	r3, #0
 80031aa:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80031ac:	2301      	movs	r3, #1
 80031ae:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80031b2:	2300      	movs	r3, #0
 80031b4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80031b8:	2300      	movs	r3, #0
 80031ba:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80031be:	2300      	movs	r3, #0
 80031c0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80031c2:	2300      	movs	r3, #0
 80031c4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80031c6:	2300      	movs	r3, #0
 80031c8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80031ca:	2300      	movs	r3, #0
 80031cc:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80031d0:	2300      	movs	r3, #0
 80031d2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80031d6:	2301      	movs	r3, #1
 80031d8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80031dc:	2320      	movs	r3, #32
 80031de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80031e2:	2301      	movs	r3, #1
 80031e4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80031e8:	2300      	movs	r3, #0
 80031ea:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80031ee:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80031f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80031f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80031f8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80031fa:	2300      	movs	r3, #0
 80031fc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003200:	2302      	movs	r3, #2
 8003202:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003206:	2300      	movs	r3, #0
 8003208:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800320c:	2300      	movs	r3, #0
 800320e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003212:	2300      	movs	r3, #0
 8003214:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003218:	2301      	movs	r3, #1
 800321a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800321e:	2300      	movs	r3, #0
 8003220:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003222:	2301      	movs	r3, #1
 8003224:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003228:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800322c:	4619      	mov	r1, r3
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7ff fde6 	bl	8002e00 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003234:	2301      	movs	r3, #1
 8003236:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003238:	2301      	movs	r3, #1
 800323a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800323c:	2300      	movs	r3, #0
 800323e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003240:	2300      	movs	r3, #0
 8003242:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003246:	2300      	movs	r3, #0
 8003248:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800324a:	2300      	movs	r3, #0
 800324c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800324e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003252:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003254:	2300      	movs	r3, #0
 8003256:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003258:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800325c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800325e:	2300      	movs	r3, #0
 8003260:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8003264:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003268:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800326a:	f107 0308 	add.w	r3, r7, #8
 800326e:	4619      	mov	r1, r3
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f7ff fee1 	bl	8003038 <ETH_SetDMAConfig>
}
 8003276:	bf00      	nop
 8003278:	3790      	adds	r7, #144	; 0x90
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800327e:	b480      	push	{r7}
 8003280:	b085      	sub	sp, #20
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003286:	2300      	movs	r3, #0
 8003288:	60fb      	str	r3, [r7, #12]
 800328a:	e01d      	b.n	80032c8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68d9      	ldr	r1, [r3, #12]
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	4613      	mov	r3, r2
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	4413      	add	r3, r2
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	440b      	add	r3, r1
 800329c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	2200      	movs	r2, #0
 80032a8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	2200      	movs	r2, #0
 80032ae:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	2200      	movs	r2, #0
 80032b4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80032b6:	68b9      	ldr	r1, [r7, #8]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	3206      	adds	r2, #6
 80032be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	3301      	adds	r3, #1
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2b03      	cmp	r3, #3
 80032cc:	d9de      	bls.n	800328c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032dc:	461a      	mov	r2, r3
 80032de:	2303      	movs	r3, #3
 80032e0:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68da      	ldr	r2, [r3, #12]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032f0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003300:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8003304:	bf00      	nop
 8003306:	3714      	adds	r7, #20
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003318:	2300      	movs	r3, #0
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	e023      	b.n	8003366 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6919      	ldr	r1, [r3, #16]
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	4613      	mov	r3, r2
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	4413      	add	r3, r2
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	440b      	add	r3, r1
 800332e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	2200      	movs	r2, #0
 800333a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	2200      	movs	r2, #0
 8003340:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	2200      	movs	r2, #0
 8003346:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	2200      	movs	r2, #0
 800334c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	2200      	movs	r2, #0
 8003352:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003354:	68b9      	ldr	r1, [r7, #8]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	3212      	adds	r2, #18
 800335c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	3301      	adds	r3, #1
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2b03      	cmp	r3, #3
 800336a:	d9d8      	bls.n	800331e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003392:	461a      	mov	r2, r3
 8003394:	2303      	movs	r3, #3
 8003396:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	691a      	ldr	r2, [r3, #16]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033a6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033ba:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80033be:	bf00      	nop
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
	...

080033cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b089      	sub	sp, #36	; 0x24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80033da:	4b89      	ldr	r3, [pc, #548]	; (8003600 <HAL_GPIO_Init+0x234>)
 80033dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80033de:	e194      	b.n	800370a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	2101      	movs	r1, #1
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	fa01 f303 	lsl.w	r3, r1, r3
 80033ec:	4013      	ands	r3, r2
 80033ee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f000 8186 	beq.w	8003704 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f003 0303 	and.w	r3, r3, #3
 8003400:	2b01      	cmp	r3, #1
 8003402:	d005      	beq.n	8003410 <HAL_GPIO_Init+0x44>
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f003 0303 	and.w	r3, r3, #3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d130      	bne.n	8003472 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	2203      	movs	r2, #3
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	43db      	mvns	r3, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4013      	ands	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	68da      	ldr	r2, [r3, #12]
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	4313      	orrs	r3, r2
 8003438:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003446:	2201      	movs	r2, #1
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	fa02 f303 	lsl.w	r3, r2, r3
 800344e:	43db      	mvns	r3, r3
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	4013      	ands	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	091b      	lsrs	r3, r3, #4
 800345c:	f003 0201 	and.w	r2, r3, #1
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	fa02 f303 	lsl.w	r3, r2, r3
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	4313      	orrs	r3, r2
 800346a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f003 0303 	and.w	r3, r3, #3
 800347a:	2b03      	cmp	r3, #3
 800347c:	d017      	beq.n	80034ae <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	2203      	movs	r2, #3
 800348a:	fa02 f303 	lsl.w	r3, r2, r3
 800348e:	43db      	mvns	r3, r3
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	4013      	ands	r3, r2
 8003494:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	689a      	ldr	r2, [r3, #8]
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	fa02 f303 	lsl.w	r3, r2, r3
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f003 0303 	and.w	r3, r3, #3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d123      	bne.n	8003502 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	08da      	lsrs	r2, r3, #3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	3208      	adds	r2, #8
 80034c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	f003 0307 	and.w	r3, r3, #7
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	220f      	movs	r2, #15
 80034d2:	fa02 f303 	lsl.w	r3, r2, r3
 80034d6:	43db      	mvns	r3, r3
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	4013      	ands	r3, r2
 80034dc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	691a      	ldr	r2, [r3, #16]
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	08da      	lsrs	r2, r3, #3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3208      	adds	r2, #8
 80034fc:	69b9      	ldr	r1, [r7, #24]
 80034fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	2203      	movs	r2, #3
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	43db      	mvns	r3, r3
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	4013      	ands	r3, r2
 8003518:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f003 0203 	and.w	r2, r3, #3
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	4313      	orrs	r3, r2
 800352e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800353e:	2b00      	cmp	r3, #0
 8003540:	f000 80e0 	beq.w	8003704 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003544:	4b2f      	ldr	r3, [pc, #188]	; (8003604 <HAL_GPIO_Init+0x238>)
 8003546:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800354a:	4a2e      	ldr	r2, [pc, #184]	; (8003604 <HAL_GPIO_Init+0x238>)
 800354c:	f043 0302 	orr.w	r3, r3, #2
 8003550:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003554:	4b2b      	ldr	r3, [pc, #172]	; (8003604 <HAL_GPIO_Init+0x238>)
 8003556:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003562:	4a29      	ldr	r2, [pc, #164]	; (8003608 <HAL_GPIO_Init+0x23c>)
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	089b      	lsrs	r3, r3, #2
 8003568:	3302      	adds	r3, #2
 800356a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800356e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	f003 0303 	and.w	r3, r3, #3
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	220f      	movs	r2, #15
 800357a:	fa02 f303 	lsl.w	r3, r2, r3
 800357e:	43db      	mvns	r3, r3
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	4013      	ands	r3, r2
 8003584:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a20      	ldr	r2, [pc, #128]	; (800360c <HAL_GPIO_Init+0x240>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d052      	beq.n	8003634 <HAL_GPIO_Init+0x268>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a1f      	ldr	r2, [pc, #124]	; (8003610 <HAL_GPIO_Init+0x244>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d031      	beq.n	80035fa <HAL_GPIO_Init+0x22e>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a1e      	ldr	r2, [pc, #120]	; (8003614 <HAL_GPIO_Init+0x248>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d02b      	beq.n	80035f6 <HAL_GPIO_Init+0x22a>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a1d      	ldr	r2, [pc, #116]	; (8003618 <HAL_GPIO_Init+0x24c>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d025      	beq.n	80035f2 <HAL_GPIO_Init+0x226>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a1c      	ldr	r2, [pc, #112]	; (800361c <HAL_GPIO_Init+0x250>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d01f      	beq.n	80035ee <HAL_GPIO_Init+0x222>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a1b      	ldr	r2, [pc, #108]	; (8003620 <HAL_GPIO_Init+0x254>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d019      	beq.n	80035ea <HAL_GPIO_Init+0x21e>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a1a      	ldr	r2, [pc, #104]	; (8003624 <HAL_GPIO_Init+0x258>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d013      	beq.n	80035e6 <HAL_GPIO_Init+0x21a>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a19      	ldr	r2, [pc, #100]	; (8003628 <HAL_GPIO_Init+0x25c>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d00d      	beq.n	80035e2 <HAL_GPIO_Init+0x216>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a18      	ldr	r2, [pc, #96]	; (800362c <HAL_GPIO_Init+0x260>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d007      	beq.n	80035de <HAL_GPIO_Init+0x212>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a17      	ldr	r2, [pc, #92]	; (8003630 <HAL_GPIO_Init+0x264>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d101      	bne.n	80035da <HAL_GPIO_Init+0x20e>
 80035d6:	2309      	movs	r3, #9
 80035d8:	e02d      	b.n	8003636 <HAL_GPIO_Init+0x26a>
 80035da:	230a      	movs	r3, #10
 80035dc:	e02b      	b.n	8003636 <HAL_GPIO_Init+0x26a>
 80035de:	2308      	movs	r3, #8
 80035e0:	e029      	b.n	8003636 <HAL_GPIO_Init+0x26a>
 80035e2:	2307      	movs	r3, #7
 80035e4:	e027      	b.n	8003636 <HAL_GPIO_Init+0x26a>
 80035e6:	2306      	movs	r3, #6
 80035e8:	e025      	b.n	8003636 <HAL_GPIO_Init+0x26a>
 80035ea:	2305      	movs	r3, #5
 80035ec:	e023      	b.n	8003636 <HAL_GPIO_Init+0x26a>
 80035ee:	2304      	movs	r3, #4
 80035f0:	e021      	b.n	8003636 <HAL_GPIO_Init+0x26a>
 80035f2:	2303      	movs	r3, #3
 80035f4:	e01f      	b.n	8003636 <HAL_GPIO_Init+0x26a>
 80035f6:	2302      	movs	r3, #2
 80035f8:	e01d      	b.n	8003636 <HAL_GPIO_Init+0x26a>
 80035fa:	2301      	movs	r3, #1
 80035fc:	e01b      	b.n	8003636 <HAL_GPIO_Init+0x26a>
 80035fe:	bf00      	nop
 8003600:	58000080 	.word	0x58000080
 8003604:	58024400 	.word	0x58024400
 8003608:	58000400 	.word	0x58000400
 800360c:	58020000 	.word	0x58020000
 8003610:	58020400 	.word	0x58020400
 8003614:	58020800 	.word	0x58020800
 8003618:	58020c00 	.word	0x58020c00
 800361c:	58021000 	.word	0x58021000
 8003620:	58021400 	.word	0x58021400
 8003624:	58021800 	.word	0x58021800
 8003628:	58021c00 	.word	0x58021c00
 800362c:	58022000 	.word	0x58022000
 8003630:	58022400 	.word	0x58022400
 8003634:	2300      	movs	r3, #0
 8003636:	69fa      	ldr	r2, [r7, #28]
 8003638:	f002 0203 	and.w	r2, r2, #3
 800363c:	0092      	lsls	r2, r2, #2
 800363e:	4093      	lsls	r3, r2
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	4313      	orrs	r3, r2
 8003644:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003646:	4938      	ldr	r1, [pc, #224]	; (8003728 <HAL_GPIO_Init+0x35c>)
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	089b      	lsrs	r3, r3, #2
 800364c:	3302      	adds	r3, #2
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003654:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	43db      	mvns	r3, r3
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	4013      	ands	r3, r2
 8003664:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	4313      	orrs	r3, r2
 8003678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800367a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003682:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	43db      	mvns	r3, r3
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	4013      	ands	r3, r2
 8003692:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80036a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	43db      	mvns	r3, r3
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	4013      	ands	r3, r2
 80036be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d003      	beq.n	80036d4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	69ba      	ldr	r2, [r7, #24]
 80036d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	43db      	mvns	r3, r3
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	4013      	ands	r3, r2
 80036e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	3301      	adds	r3, #1
 8003708:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	fa22 f303 	lsr.w	r3, r2, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	f47f ae63 	bne.w	80033e0 <HAL_GPIO_Init+0x14>
  }
}
 800371a:	bf00      	nop
 800371c:	bf00      	nop
 800371e:	3724      	adds	r7, #36	; 0x24
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	58000400 	.word	0x58000400

0800372c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	460b      	mov	r3, r1
 8003736:	807b      	strh	r3, [r7, #2]
 8003738:	4613      	mov	r3, r2
 800373a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800373c:	787b      	ldrb	r3, [r7, #1]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003742:	887a      	ldrh	r2, [r7, #2]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003748:	e003      	b.n	8003752 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800374a:	887b      	ldrh	r3, [r7, #2]
 800374c:	041a      	lsls	r2, r3, #16
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	619a      	str	r2, [r3, #24]
}
 8003752:	bf00      	nop
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800375e:	b480      	push	{r7}
 8003760:	b085      	sub	sp, #20
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
 8003766:	460b      	mov	r3, r1
 8003768:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003770:	887a      	ldrh	r2, [r7, #2]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	4013      	ands	r3, r2
 8003776:	041a      	lsls	r2, r3, #16
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	43d9      	mvns	r1, r3
 800377c:	887b      	ldrh	r3, [r7, #2]
 800377e:	400b      	ands	r3, r1
 8003780:	431a      	orrs	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	619a      	str	r2, [r3, #24]
}
 8003786:	bf00      	nop
 8003788:	3714      	adds	r7, #20
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
	...

08003794 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800379c:	4a08      	ldr	r2, [pc, #32]	; (80037c0 <HAL_HSEM_FastTake+0x2c>)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	3320      	adds	r3, #32
 80037a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037a6:	4a07      	ldr	r2, [pc, #28]	; (80037c4 <HAL_HSEM_FastTake+0x30>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d101      	bne.n	80037b0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80037ac:	2300      	movs	r3, #0
 80037ae:	e000      	b.n	80037b2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	58026400 	.word	0x58026400
 80037c4:	80000300 	.word	0x80000300

080037c8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80037d2:	4906      	ldr	r1, [pc, #24]	; (80037ec <HAL_HSEM_Release+0x24>)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	58026400 	.word	0x58026400

080037f0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80037f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037f2:	b08f      	sub	sp, #60	; 0x3c
 80037f4:	af0a      	add	r7, sp, #40	; 0x28
 80037f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e116      	b.n	8003a30 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b00      	cmp	r3, #0
 8003812:	d106      	bne.n	8003822 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f7fe fee5 	bl	80025ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2203      	movs	r2, #3
 8003826:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003832:	2b00      	cmp	r3, #0
 8003834:	d102      	bne.n	800383c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4618      	mov	r0, r3
 8003842:	f002 fa2d 	bl	8005ca0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	603b      	str	r3, [r7, #0]
 800384c:	687e      	ldr	r6, [r7, #4]
 800384e:	466d      	mov	r5, sp
 8003850:	f106 0410 	add.w	r4, r6, #16
 8003854:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003856:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003858:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800385a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800385c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003860:	e885 0003 	stmia.w	r5, {r0, r1}
 8003864:	1d33      	adds	r3, r6, #4
 8003866:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003868:	6838      	ldr	r0, [r7, #0]
 800386a:	f002 f9ab 	bl	8005bc4 <USB_CoreInit>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d005      	beq.n	8003880 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2202      	movs	r2, #2
 8003878:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e0d7      	b.n	8003a30 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2100      	movs	r1, #0
 8003886:	4618      	mov	r0, r3
 8003888:	f002 fa1b 	bl	8005cc2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800388c:	2300      	movs	r3, #0
 800388e:	73fb      	strb	r3, [r7, #15]
 8003890:	e04a      	b.n	8003928 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003892:	7bfa      	ldrb	r2, [r7, #15]
 8003894:	6879      	ldr	r1, [r7, #4]
 8003896:	4613      	mov	r3, r2
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	4413      	add	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	440b      	add	r3, r1
 80038a0:	333d      	adds	r3, #61	; 0x3d
 80038a2:	2201      	movs	r2, #1
 80038a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80038a6:	7bfa      	ldrb	r2, [r7, #15]
 80038a8:	6879      	ldr	r1, [r7, #4]
 80038aa:	4613      	mov	r3, r2
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	4413      	add	r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	440b      	add	r3, r1
 80038b4:	333c      	adds	r3, #60	; 0x3c
 80038b6:	7bfa      	ldrb	r2, [r7, #15]
 80038b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80038ba:	7bfa      	ldrb	r2, [r7, #15]
 80038bc:	7bfb      	ldrb	r3, [r7, #15]
 80038be:	b298      	uxth	r0, r3
 80038c0:	6879      	ldr	r1, [r7, #4]
 80038c2:	4613      	mov	r3, r2
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	4413      	add	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	440b      	add	r3, r1
 80038cc:	3344      	adds	r3, #68	; 0x44
 80038ce:	4602      	mov	r2, r0
 80038d0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80038d2:	7bfa      	ldrb	r2, [r7, #15]
 80038d4:	6879      	ldr	r1, [r7, #4]
 80038d6:	4613      	mov	r3, r2
 80038d8:	00db      	lsls	r3, r3, #3
 80038da:	4413      	add	r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	440b      	add	r3, r1
 80038e0:	3340      	adds	r3, #64	; 0x40
 80038e2:	2200      	movs	r2, #0
 80038e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80038e6:	7bfa      	ldrb	r2, [r7, #15]
 80038e8:	6879      	ldr	r1, [r7, #4]
 80038ea:	4613      	mov	r3, r2
 80038ec:	00db      	lsls	r3, r3, #3
 80038ee:	4413      	add	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	440b      	add	r3, r1
 80038f4:	3348      	adds	r3, #72	; 0x48
 80038f6:	2200      	movs	r2, #0
 80038f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80038fa:	7bfa      	ldrb	r2, [r7, #15]
 80038fc:	6879      	ldr	r1, [r7, #4]
 80038fe:	4613      	mov	r3, r2
 8003900:	00db      	lsls	r3, r3, #3
 8003902:	4413      	add	r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	440b      	add	r3, r1
 8003908:	334c      	adds	r3, #76	; 0x4c
 800390a:	2200      	movs	r2, #0
 800390c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800390e:	7bfa      	ldrb	r2, [r7, #15]
 8003910:	6879      	ldr	r1, [r7, #4]
 8003912:	4613      	mov	r3, r2
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	4413      	add	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	440b      	add	r3, r1
 800391c:	3354      	adds	r3, #84	; 0x54
 800391e:	2200      	movs	r2, #0
 8003920:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003922:	7bfb      	ldrb	r3, [r7, #15]
 8003924:	3301      	adds	r3, #1
 8003926:	73fb      	strb	r3, [r7, #15]
 8003928:	7bfa      	ldrb	r2, [r7, #15]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	429a      	cmp	r2, r3
 8003930:	d3af      	bcc.n	8003892 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003932:	2300      	movs	r3, #0
 8003934:	73fb      	strb	r3, [r7, #15]
 8003936:	e044      	b.n	80039c2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003938:	7bfa      	ldrb	r2, [r7, #15]
 800393a:	6879      	ldr	r1, [r7, #4]
 800393c:	4613      	mov	r3, r2
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	4413      	add	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800394a:	2200      	movs	r2, #0
 800394c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800394e:	7bfa      	ldrb	r2, [r7, #15]
 8003950:	6879      	ldr	r1, [r7, #4]
 8003952:	4613      	mov	r3, r2
 8003954:	00db      	lsls	r3, r3, #3
 8003956:	4413      	add	r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	440b      	add	r3, r1
 800395c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003960:	7bfa      	ldrb	r2, [r7, #15]
 8003962:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003964:	7bfa      	ldrb	r2, [r7, #15]
 8003966:	6879      	ldr	r1, [r7, #4]
 8003968:	4613      	mov	r3, r2
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	4413      	add	r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	440b      	add	r3, r1
 8003972:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003976:	2200      	movs	r2, #0
 8003978:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800397a:	7bfa      	ldrb	r2, [r7, #15]
 800397c:	6879      	ldr	r1, [r7, #4]
 800397e:	4613      	mov	r3, r2
 8003980:	00db      	lsls	r3, r3, #3
 8003982:	4413      	add	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	440b      	add	r3, r1
 8003988:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800398c:	2200      	movs	r2, #0
 800398e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003990:	7bfa      	ldrb	r2, [r7, #15]
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	4613      	mov	r3, r2
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	4413      	add	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	440b      	add	r3, r1
 800399e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80039a2:	2200      	movs	r2, #0
 80039a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80039a6:	7bfa      	ldrb	r2, [r7, #15]
 80039a8:	6879      	ldr	r1, [r7, #4]
 80039aa:	4613      	mov	r3, r2
 80039ac:	00db      	lsls	r3, r3, #3
 80039ae:	4413      	add	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	440b      	add	r3, r1
 80039b4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80039b8:	2200      	movs	r2, #0
 80039ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039bc:	7bfb      	ldrb	r3, [r7, #15]
 80039be:	3301      	adds	r3, #1
 80039c0:	73fb      	strb	r3, [r7, #15]
 80039c2:	7bfa      	ldrb	r2, [r7, #15]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d3b5      	bcc.n	8003938 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	603b      	str	r3, [r7, #0]
 80039d2:	687e      	ldr	r6, [r7, #4]
 80039d4:	466d      	mov	r5, sp
 80039d6:	f106 0410 	add.w	r4, r6, #16
 80039da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80039ea:	1d33      	adds	r3, r6, #4
 80039ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039ee:	6838      	ldr	r0, [r7, #0]
 80039f0:	f002 f9b4 	bl	8005d5c <USB_DevInit>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d005      	beq.n	8003a06 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2202      	movs	r2, #2
 80039fe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e014      	b.n	8003a30 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d102      	bne.n	8003a24 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f80a 	bl	8003a38 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f002 fb72 	bl	8006112 <USB_DevDisconnect>

  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3714      	adds	r7, #20
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a38 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a66:	4b05      	ldr	r3, [pc, #20]	; (8003a7c <HAL_PCDEx_ActivateLPM+0x44>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3714      	adds	r7, #20
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr
 8003a7c:	10000003 	.word	0x10000003

08003a80 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003a88:	4b29      	ldr	r3, [pc, #164]	; (8003b30 <HAL_PWREx_ConfigSupply+0xb0>)
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	2b06      	cmp	r3, #6
 8003a92:	d00a      	beq.n	8003aaa <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003a94:	4b26      	ldr	r3, [pc, #152]	; (8003b30 <HAL_PWREx_ConfigSupply+0xb0>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d001      	beq.n	8003aa6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e040      	b.n	8003b28 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	e03e      	b.n	8003b28 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003aaa:	4b21      	ldr	r3, [pc, #132]	; (8003b30 <HAL_PWREx_ConfigSupply+0xb0>)
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003ab2:	491f      	ldr	r1, [pc, #124]	; (8003b30 <HAL_PWREx_ConfigSupply+0xb0>)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003aba:	f7fe ff2f 	bl	800291c <HAL_GetTick>
 8003abe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003ac0:	e009      	b.n	8003ad6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003ac2:	f7fe ff2b 	bl	800291c <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ad0:	d901      	bls.n	8003ad6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e028      	b.n	8003b28 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003ad6:	4b16      	ldr	r3, [pc, #88]	; (8003b30 <HAL_PWREx_ConfigSupply+0xb0>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ade:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ae2:	d1ee      	bne.n	8003ac2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b1e      	cmp	r3, #30
 8003ae8:	d008      	beq.n	8003afc <HAL_PWREx_ConfigSupply+0x7c>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2b2e      	cmp	r3, #46	; 0x2e
 8003aee:	d005      	beq.n	8003afc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b1d      	cmp	r3, #29
 8003af4:	d002      	beq.n	8003afc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b2d      	cmp	r3, #45	; 0x2d
 8003afa:	d114      	bne.n	8003b26 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003afc:	f7fe ff0e 	bl	800291c <HAL_GetTick>
 8003b00:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003b02:	e009      	b.n	8003b18 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003b04:	f7fe ff0a 	bl	800291c <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b12:	d901      	bls.n	8003b18 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e007      	b.n	8003b28 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003b18:	4b05      	ldr	r3, [pc, #20]	; (8003b30 <HAL_PWREx_ConfigSupply+0xb0>)
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b24:	d1ee      	bne.n	8003b04 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	58024800 	.word	0x58024800

08003b34 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003b38:	4b05      	ldr	r3, [pc, #20]	; (8003b50 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	4a04      	ldr	r2, [pc, #16]	; (8003b50 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003b3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b42:	60d3      	str	r3, [r2, #12]
}
 8003b44:	bf00      	nop
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	58024800 	.word	0x58024800

08003b54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b08c      	sub	sp, #48	; 0x30
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d102      	bne.n	8003b68 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	f000 bc1d 	b.w	80043a2 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 8087 	beq.w	8003c84 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b76:	4b99      	ldr	r3, [pc, #612]	; (8003ddc <HAL_RCC_OscConfig+0x288>)
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b80:	4b96      	ldr	r3, [pc, #600]	; (8003ddc <HAL_RCC_OscConfig+0x288>)
 8003b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b84:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b88:	2b10      	cmp	r3, #16
 8003b8a:	d007      	beq.n	8003b9c <HAL_RCC_OscConfig+0x48>
 8003b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8e:	2b18      	cmp	r3, #24
 8003b90:	d110      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x60>
 8003b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b94:	f003 0303 	and.w	r3, r3, #3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d10b      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b9c:	4b8f      	ldr	r3, [pc, #572]	; (8003ddc <HAL_RCC_OscConfig+0x288>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d06c      	beq.n	8003c82 <HAL_RCC_OscConfig+0x12e>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d168      	bne.n	8003c82 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e3f6      	b.n	80043a2 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bbc:	d106      	bne.n	8003bcc <HAL_RCC_OscConfig+0x78>
 8003bbe:	4b87      	ldr	r3, [pc, #540]	; (8003ddc <HAL_RCC_OscConfig+0x288>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a86      	ldr	r2, [pc, #536]	; (8003ddc <HAL_RCC_OscConfig+0x288>)
 8003bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc8:	6013      	str	r3, [r2, #0]
 8003bca:	e02e      	b.n	8003c2a <HAL_RCC_OscConfig+0xd6>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10c      	bne.n	8003bee <HAL_RCC_OscConfig+0x9a>
 8003bd4:	4b81      	ldr	r3, [pc, #516]	; (8003ddc <HAL_RCC_OscConfig+0x288>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a80      	ldr	r2, [pc, #512]	; (8003ddc <HAL_RCC_OscConfig+0x288>)
 8003bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bde:	6013      	str	r3, [r2, #0]
 8003be0:	4b7e      	ldr	r3, [pc, #504]	; (8003ddc <HAL_RCC_OscConfig+0x288>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a7d      	ldr	r2, [pc, #500]	; (8003ddc <HAL_RCC_OscConfig+0x288>)
 8003be6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bea:	6013      	str	r3, [r2, #0]
 8003bec:	e01d      	b.n	8003c2a <HAL_RCC_OscConfig+0xd6>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bf6:	d10c      	bne.n	8003c12 <HAL_RCC_OscConfig+0xbe>
 8003bf8:	4b78      	ldr	r3, [pc, #480]	; (8003ddc <HAL_RCC_OscConfig+0x288>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a77      	ldr	r2, [pc, #476]	; (8003ddc <HAL_RCC_OscConfig+0x288>)
 8003bfe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c02:	6013      	str	r3, [r2, #0]
 8003c04:	4b75      	ldr	r3, [pc, #468]	; (8003ddc <HAL_RCC_OscConfig+0x288>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a74      	ldr	r2, [pc, #464]	; (8003ddc <HAL_RCC_OscConfig+0x288>)
 8003c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c0e:	6013      	str	r3, [r2, #0]
 8003c10:	e00b      	b.n	8003c2a <HAL_RCC_OscConfig+0xd6>
 8003c12:	4b72      	ldr	r3, [pc, #456]	; (8003ddc <HAL_RCC_OscConfig+0x288>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a71      	ldr	r2, [pc, #452]	; (8003ddc <HAL_RCC_OscConfig+0x288>)
 8003c18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	4b6f      	ldr	r3, [pc, #444]	; (8003ddc <HAL_RCC_OscConfig+0x288>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a6e      	ldr	r2, [pc, #440]	; (8003ddc <HAL_RCC_OscConfig+0x288>)
 8003c24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c28:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d013      	beq.n	8003c5a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c32:	f7fe fe73 	bl	800291c <HAL_GetTick>
 8003c36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c38:	e008      	b.n	8003c4c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c3a:	f7fe fe6f 	bl	800291c <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b64      	cmp	r3, #100	; 0x64
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e3aa      	b.n	80043a2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c4c:	4b63      	ldr	r3, [pc, #396]	; (8003ddc <HAL_RCC_OscConfig+0x288>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d0f0      	beq.n	8003c3a <HAL_RCC_OscConfig+0xe6>
 8003c58:	e014      	b.n	8003c84 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5a:	f7fe fe5f 	bl	800291c <HAL_GetTick>
 8003c5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c60:	e008      	b.n	8003c74 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c62:	f7fe fe5b 	bl	800291c <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b64      	cmp	r3, #100	; 0x64
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e396      	b.n	80043a2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c74:	4b59      	ldr	r3, [pc, #356]	; (8003ddc <HAL_RCC_OscConfig+0x288>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1f0      	bne.n	8003c62 <HAL_RCC_OscConfig+0x10e>
 8003c80:	e000      	b.n	8003c84 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c82:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 80cb 	beq.w	8003e28 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c92:	4b52      	ldr	r3, [pc, #328]	; (8003ddc <HAL_RCC_OscConfig+0x288>)
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c9a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c9c:	4b4f      	ldr	r3, [pc, #316]	; (8003ddc <HAL_RCC_OscConfig+0x288>)
 8003c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003ca2:	6a3b      	ldr	r3, [r7, #32]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d007      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x164>
 8003ca8:	6a3b      	ldr	r3, [r7, #32]
 8003caa:	2b18      	cmp	r3, #24
 8003cac:	d156      	bne.n	8003d5c <HAL_RCC_OscConfig+0x208>
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	f003 0303 	and.w	r3, r3, #3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d151      	bne.n	8003d5c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cb8:	4b48      	ldr	r3, [pc, #288]	; (8003ddc <HAL_RCC_OscConfig+0x288>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0304 	and.w	r3, r3, #4
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d005      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x17c>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d101      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e368      	b.n	80043a2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003cd0:	4b42      	ldr	r3, [pc, #264]	; (8003ddc <HAL_RCC_OscConfig+0x288>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f023 0219 	bic.w	r2, r3, #25
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	493f      	ldr	r1, [pc, #252]	; (8003ddc <HAL_RCC_OscConfig+0x288>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003ce2:	f7fe fe1b 	bl	800291c <HAL_GetTick>
 8003ce6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ce8:	e008      	b.n	8003cfc <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cea:	f7fe fe17 	bl	800291c <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d901      	bls.n	8003cfc <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e352      	b.n	80043a2 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cfc:	4b37      	ldr	r3, [pc, #220]	; (8003ddc <HAL_RCC_OscConfig+0x288>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0304 	and.w	r3, r3, #4
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d0f0      	beq.n	8003cea <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d08:	f7fe fe38 	bl	800297c <HAL_GetREVID>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d817      	bhi.n	8003d46 <HAL_RCC_OscConfig+0x1f2>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	2b40      	cmp	r3, #64	; 0x40
 8003d1c:	d108      	bne.n	8003d30 <HAL_RCC_OscConfig+0x1dc>
 8003d1e:	4b2f      	ldr	r3, [pc, #188]	; (8003ddc <HAL_RCC_OscConfig+0x288>)
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003d26:	4a2d      	ldr	r2, [pc, #180]	; (8003ddc <HAL_RCC_OscConfig+0x288>)
 8003d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d2c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d2e:	e07b      	b.n	8003e28 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d30:	4b2a      	ldr	r3, [pc, #168]	; (8003ddc <HAL_RCC_OscConfig+0x288>)
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	031b      	lsls	r3, r3, #12
 8003d3e:	4927      	ldr	r1, [pc, #156]	; (8003ddc <HAL_RCC_OscConfig+0x288>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d44:	e070      	b.n	8003e28 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d46:	4b25      	ldr	r3, [pc, #148]	; (8003ddc <HAL_RCC_OscConfig+0x288>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	061b      	lsls	r3, r3, #24
 8003d54:	4921      	ldr	r1, [pc, #132]	; (8003ddc <HAL_RCC_OscConfig+0x288>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d5a:	e065      	b.n	8003e28 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d048      	beq.n	8003df6 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003d64:	4b1d      	ldr	r3, [pc, #116]	; (8003ddc <HAL_RCC_OscConfig+0x288>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f023 0219 	bic.w	r2, r3, #25
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	491a      	ldr	r1, [pc, #104]	; (8003ddc <HAL_RCC_OscConfig+0x288>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d76:	f7fe fdd1 	bl	800291c <HAL_GetTick>
 8003d7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d7c:	e008      	b.n	8003d90 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d7e:	f7fe fdcd 	bl	800291c <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e308      	b.n	80043a2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d90:	4b12      	ldr	r3, [pc, #72]	; (8003ddc <HAL_RCC_OscConfig+0x288>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d0f0      	beq.n	8003d7e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d9c:	f7fe fdee 	bl	800297c <HAL_GetREVID>
 8003da0:	4603      	mov	r3, r0
 8003da2:	f241 0203 	movw	r2, #4099	; 0x1003
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d81a      	bhi.n	8003de0 <HAL_RCC_OscConfig+0x28c>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	2b40      	cmp	r3, #64	; 0x40
 8003db0:	d108      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x270>
 8003db2:	4b0a      	ldr	r3, [pc, #40]	; (8003ddc <HAL_RCC_OscConfig+0x288>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003dba:	4a08      	ldr	r2, [pc, #32]	; (8003ddc <HAL_RCC_OscConfig+0x288>)
 8003dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dc0:	6053      	str	r3, [r2, #4]
 8003dc2:	e031      	b.n	8003e28 <HAL_RCC_OscConfig+0x2d4>
 8003dc4:	4b05      	ldr	r3, [pc, #20]	; (8003ddc <HAL_RCC_OscConfig+0x288>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	031b      	lsls	r3, r3, #12
 8003dd2:	4902      	ldr	r1, [pc, #8]	; (8003ddc <HAL_RCC_OscConfig+0x288>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	604b      	str	r3, [r1, #4]
 8003dd8:	e026      	b.n	8003e28 <HAL_RCC_OscConfig+0x2d4>
 8003dda:	bf00      	nop
 8003ddc:	58024400 	.word	0x58024400
 8003de0:	4b9a      	ldr	r3, [pc, #616]	; (800404c <HAL_RCC_OscConfig+0x4f8>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	061b      	lsls	r3, r3, #24
 8003dee:	4997      	ldr	r1, [pc, #604]	; (800404c <HAL_RCC_OscConfig+0x4f8>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	604b      	str	r3, [r1, #4]
 8003df4:	e018      	b.n	8003e28 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003df6:	4b95      	ldr	r3, [pc, #596]	; (800404c <HAL_RCC_OscConfig+0x4f8>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a94      	ldr	r2, [pc, #592]	; (800404c <HAL_RCC_OscConfig+0x4f8>)
 8003dfc:	f023 0301 	bic.w	r3, r3, #1
 8003e00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e02:	f7fe fd8b 	bl	800291c <HAL_GetTick>
 8003e06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e08:	e008      	b.n	8003e1c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e0a:	f7fe fd87 	bl	800291c <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d901      	bls.n	8003e1c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e2c2      	b.n	80043a2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e1c:	4b8b      	ldr	r3, [pc, #556]	; (800404c <HAL_RCC_OscConfig+0x4f8>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0304 	and.w	r3, r3, #4
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1f0      	bne.n	8003e0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0310 	and.w	r3, r3, #16
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 80a9 	beq.w	8003f88 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e36:	4b85      	ldr	r3, [pc, #532]	; (800404c <HAL_RCC_OscConfig+0x4f8>)
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e3e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e40:	4b82      	ldr	r3, [pc, #520]	; (800404c <HAL_RCC_OscConfig+0x4f8>)
 8003e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e44:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	2b08      	cmp	r3, #8
 8003e4a:	d007      	beq.n	8003e5c <HAL_RCC_OscConfig+0x308>
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	2b18      	cmp	r3, #24
 8003e50:	d13a      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x374>
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f003 0303 	and.w	r3, r3, #3
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d135      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e5c:	4b7b      	ldr	r3, [pc, #492]	; (800404c <HAL_RCC_OscConfig+0x4f8>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d005      	beq.n	8003e74 <HAL_RCC_OscConfig+0x320>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	69db      	ldr	r3, [r3, #28]
 8003e6c:	2b80      	cmp	r3, #128	; 0x80
 8003e6e:	d001      	beq.n	8003e74 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e296      	b.n	80043a2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e74:	f7fe fd82 	bl	800297c <HAL_GetREVID>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	f241 0203 	movw	r2, #4099	; 0x1003
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d817      	bhi.n	8003eb2 <HAL_RCC_OscConfig+0x35e>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	2b20      	cmp	r3, #32
 8003e88:	d108      	bne.n	8003e9c <HAL_RCC_OscConfig+0x348>
 8003e8a:	4b70      	ldr	r3, [pc, #448]	; (800404c <HAL_RCC_OscConfig+0x4f8>)
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003e92:	4a6e      	ldr	r2, [pc, #440]	; (800404c <HAL_RCC_OscConfig+0x4f8>)
 8003e94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e98:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e9a:	e075      	b.n	8003f88 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e9c:	4b6b      	ldr	r3, [pc, #428]	; (800404c <HAL_RCC_OscConfig+0x4f8>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	069b      	lsls	r3, r3, #26
 8003eaa:	4968      	ldr	r1, [pc, #416]	; (800404c <HAL_RCC_OscConfig+0x4f8>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003eb0:	e06a      	b.n	8003f88 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003eb2:	4b66      	ldr	r3, [pc, #408]	; (800404c <HAL_RCC_OscConfig+0x4f8>)
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	061b      	lsls	r3, r3, #24
 8003ec0:	4962      	ldr	r1, [pc, #392]	; (800404c <HAL_RCC_OscConfig+0x4f8>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ec6:	e05f      	b.n	8003f88 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d042      	beq.n	8003f56 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003ed0:	4b5e      	ldr	r3, [pc, #376]	; (800404c <HAL_RCC_OscConfig+0x4f8>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a5d      	ldr	r2, [pc, #372]	; (800404c <HAL_RCC_OscConfig+0x4f8>)
 8003ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003edc:	f7fe fd1e 	bl	800291c <HAL_GetTick>
 8003ee0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003ee4:	f7fe fd1a 	bl	800291c <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e255      	b.n	80043a2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ef6:	4b55      	ldr	r3, [pc, #340]	; (800404c <HAL_RCC_OscConfig+0x4f8>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d0f0      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003f02:	f7fe fd3b 	bl	800297c <HAL_GetREVID>
 8003f06:	4603      	mov	r3, r0
 8003f08:	f241 0203 	movw	r2, #4099	; 0x1003
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d817      	bhi.n	8003f40 <HAL_RCC_OscConfig+0x3ec>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a1b      	ldr	r3, [r3, #32]
 8003f14:	2b20      	cmp	r3, #32
 8003f16:	d108      	bne.n	8003f2a <HAL_RCC_OscConfig+0x3d6>
 8003f18:	4b4c      	ldr	r3, [pc, #304]	; (800404c <HAL_RCC_OscConfig+0x4f8>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003f20:	4a4a      	ldr	r2, [pc, #296]	; (800404c <HAL_RCC_OscConfig+0x4f8>)
 8003f22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f26:	6053      	str	r3, [r2, #4]
 8003f28:	e02e      	b.n	8003f88 <HAL_RCC_OscConfig+0x434>
 8003f2a:	4b48      	ldr	r3, [pc, #288]	; (800404c <HAL_RCC_OscConfig+0x4f8>)
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	069b      	lsls	r3, r3, #26
 8003f38:	4944      	ldr	r1, [pc, #272]	; (800404c <HAL_RCC_OscConfig+0x4f8>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	604b      	str	r3, [r1, #4]
 8003f3e:	e023      	b.n	8003f88 <HAL_RCC_OscConfig+0x434>
 8003f40:	4b42      	ldr	r3, [pc, #264]	; (800404c <HAL_RCC_OscConfig+0x4f8>)
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a1b      	ldr	r3, [r3, #32]
 8003f4c:	061b      	lsls	r3, r3, #24
 8003f4e:	493f      	ldr	r1, [pc, #252]	; (800404c <HAL_RCC_OscConfig+0x4f8>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	60cb      	str	r3, [r1, #12]
 8003f54:	e018      	b.n	8003f88 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003f56:	4b3d      	ldr	r3, [pc, #244]	; (800404c <HAL_RCC_OscConfig+0x4f8>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a3c      	ldr	r2, [pc, #240]	; (800404c <HAL_RCC_OscConfig+0x4f8>)
 8003f5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f62:	f7fe fcdb 	bl	800291c <HAL_GetTick>
 8003f66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003f68:	e008      	b.n	8003f7c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003f6a:	f7fe fcd7 	bl	800291c <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d901      	bls.n	8003f7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e212      	b.n	80043a2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003f7c:	4b33      	ldr	r3, [pc, #204]	; (800404c <HAL_RCC_OscConfig+0x4f8>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1f0      	bne.n	8003f6a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0308 	and.w	r3, r3, #8
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d036      	beq.n	8004002 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d019      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f9c:	4b2b      	ldr	r3, [pc, #172]	; (800404c <HAL_RCC_OscConfig+0x4f8>)
 8003f9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fa0:	4a2a      	ldr	r2, [pc, #168]	; (800404c <HAL_RCC_OscConfig+0x4f8>)
 8003fa2:	f043 0301 	orr.w	r3, r3, #1
 8003fa6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa8:	f7fe fcb8 	bl	800291c <HAL_GetTick>
 8003fac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fb0:	f7fe fcb4 	bl	800291c <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e1ef      	b.n	80043a2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003fc2:	4b22      	ldr	r3, [pc, #136]	; (800404c <HAL_RCC_OscConfig+0x4f8>)
 8003fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d0f0      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x45c>
 8003fce:	e018      	b.n	8004002 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fd0:	4b1e      	ldr	r3, [pc, #120]	; (800404c <HAL_RCC_OscConfig+0x4f8>)
 8003fd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fd4:	4a1d      	ldr	r2, [pc, #116]	; (800404c <HAL_RCC_OscConfig+0x4f8>)
 8003fd6:	f023 0301 	bic.w	r3, r3, #1
 8003fda:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fdc:	f7fe fc9e 	bl	800291c <HAL_GetTick>
 8003fe0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fe4:	f7fe fc9a 	bl	800291c <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e1d5      	b.n	80043a2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003ff6:	4b15      	ldr	r3, [pc, #84]	; (800404c <HAL_RCC_OscConfig+0x4f8>)
 8003ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1f0      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0320 	and.w	r3, r3, #32
 800400a:	2b00      	cmp	r3, #0
 800400c:	d039      	beq.n	8004082 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d01c      	beq.n	8004050 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004016:	4b0d      	ldr	r3, [pc, #52]	; (800404c <HAL_RCC_OscConfig+0x4f8>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a0c      	ldr	r2, [pc, #48]	; (800404c <HAL_RCC_OscConfig+0x4f8>)
 800401c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004020:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004022:	f7fe fc7b 	bl	800291c <HAL_GetTick>
 8004026:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004028:	e008      	b.n	800403c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800402a:	f7fe fc77 	bl	800291c <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d901      	bls.n	800403c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e1b2      	b.n	80043a2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800403c:	4b03      	ldr	r3, [pc, #12]	; (800404c <HAL_RCC_OscConfig+0x4f8>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d0f0      	beq.n	800402a <HAL_RCC_OscConfig+0x4d6>
 8004048:	e01b      	b.n	8004082 <HAL_RCC_OscConfig+0x52e>
 800404a:	bf00      	nop
 800404c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004050:	4b9b      	ldr	r3, [pc, #620]	; (80042c0 <HAL_RCC_OscConfig+0x76c>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a9a      	ldr	r2, [pc, #616]	; (80042c0 <HAL_RCC_OscConfig+0x76c>)
 8004056:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800405a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800405c:	f7fe fc5e 	bl	800291c <HAL_GetTick>
 8004060:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004062:	e008      	b.n	8004076 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004064:	f7fe fc5a 	bl	800291c <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b02      	cmp	r3, #2
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e195      	b.n	80043a2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004076:	4b92      	ldr	r3, [pc, #584]	; (80042c0 <HAL_RCC_OscConfig+0x76c>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1f0      	bne.n	8004064 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0304 	and.w	r3, r3, #4
 800408a:	2b00      	cmp	r3, #0
 800408c:	f000 8081 	beq.w	8004192 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004090:	4b8c      	ldr	r3, [pc, #560]	; (80042c4 <HAL_RCC_OscConfig+0x770>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a8b      	ldr	r2, [pc, #556]	; (80042c4 <HAL_RCC_OscConfig+0x770>)
 8004096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800409a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800409c:	f7fe fc3e 	bl	800291c <HAL_GetTick>
 80040a0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040a2:	e008      	b.n	80040b6 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80040a4:	f7fe fc3a 	bl	800291c <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b64      	cmp	r3, #100	; 0x64
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e175      	b.n	80043a2 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040b6:	4b83      	ldr	r3, [pc, #524]	; (80042c4 <HAL_RCC_OscConfig+0x770>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d0f0      	beq.n	80040a4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d106      	bne.n	80040d8 <HAL_RCC_OscConfig+0x584>
 80040ca:	4b7d      	ldr	r3, [pc, #500]	; (80042c0 <HAL_RCC_OscConfig+0x76c>)
 80040cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ce:	4a7c      	ldr	r2, [pc, #496]	; (80042c0 <HAL_RCC_OscConfig+0x76c>)
 80040d0:	f043 0301 	orr.w	r3, r3, #1
 80040d4:	6713      	str	r3, [r2, #112]	; 0x70
 80040d6:	e02d      	b.n	8004134 <HAL_RCC_OscConfig+0x5e0>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d10c      	bne.n	80040fa <HAL_RCC_OscConfig+0x5a6>
 80040e0:	4b77      	ldr	r3, [pc, #476]	; (80042c0 <HAL_RCC_OscConfig+0x76c>)
 80040e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e4:	4a76      	ldr	r2, [pc, #472]	; (80042c0 <HAL_RCC_OscConfig+0x76c>)
 80040e6:	f023 0301 	bic.w	r3, r3, #1
 80040ea:	6713      	str	r3, [r2, #112]	; 0x70
 80040ec:	4b74      	ldr	r3, [pc, #464]	; (80042c0 <HAL_RCC_OscConfig+0x76c>)
 80040ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f0:	4a73      	ldr	r2, [pc, #460]	; (80042c0 <HAL_RCC_OscConfig+0x76c>)
 80040f2:	f023 0304 	bic.w	r3, r3, #4
 80040f6:	6713      	str	r3, [r2, #112]	; 0x70
 80040f8:	e01c      	b.n	8004134 <HAL_RCC_OscConfig+0x5e0>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	2b05      	cmp	r3, #5
 8004100:	d10c      	bne.n	800411c <HAL_RCC_OscConfig+0x5c8>
 8004102:	4b6f      	ldr	r3, [pc, #444]	; (80042c0 <HAL_RCC_OscConfig+0x76c>)
 8004104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004106:	4a6e      	ldr	r2, [pc, #440]	; (80042c0 <HAL_RCC_OscConfig+0x76c>)
 8004108:	f043 0304 	orr.w	r3, r3, #4
 800410c:	6713      	str	r3, [r2, #112]	; 0x70
 800410e:	4b6c      	ldr	r3, [pc, #432]	; (80042c0 <HAL_RCC_OscConfig+0x76c>)
 8004110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004112:	4a6b      	ldr	r2, [pc, #428]	; (80042c0 <HAL_RCC_OscConfig+0x76c>)
 8004114:	f043 0301 	orr.w	r3, r3, #1
 8004118:	6713      	str	r3, [r2, #112]	; 0x70
 800411a:	e00b      	b.n	8004134 <HAL_RCC_OscConfig+0x5e0>
 800411c:	4b68      	ldr	r3, [pc, #416]	; (80042c0 <HAL_RCC_OscConfig+0x76c>)
 800411e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004120:	4a67      	ldr	r2, [pc, #412]	; (80042c0 <HAL_RCC_OscConfig+0x76c>)
 8004122:	f023 0301 	bic.w	r3, r3, #1
 8004126:	6713      	str	r3, [r2, #112]	; 0x70
 8004128:	4b65      	ldr	r3, [pc, #404]	; (80042c0 <HAL_RCC_OscConfig+0x76c>)
 800412a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412c:	4a64      	ldr	r2, [pc, #400]	; (80042c0 <HAL_RCC_OscConfig+0x76c>)
 800412e:	f023 0304 	bic.w	r3, r3, #4
 8004132:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d015      	beq.n	8004168 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800413c:	f7fe fbee 	bl	800291c <HAL_GetTick>
 8004140:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004142:	e00a      	b.n	800415a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004144:	f7fe fbea 	bl	800291c <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004152:	4293      	cmp	r3, r2
 8004154:	d901      	bls.n	800415a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e123      	b.n	80043a2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800415a:	4b59      	ldr	r3, [pc, #356]	; (80042c0 <HAL_RCC_OscConfig+0x76c>)
 800415c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d0ee      	beq.n	8004144 <HAL_RCC_OscConfig+0x5f0>
 8004166:	e014      	b.n	8004192 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004168:	f7fe fbd8 	bl	800291c <HAL_GetTick>
 800416c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800416e:	e00a      	b.n	8004186 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004170:	f7fe fbd4 	bl	800291c <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	f241 3288 	movw	r2, #5000	; 0x1388
 800417e:	4293      	cmp	r3, r2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e10d      	b.n	80043a2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004186:	4b4e      	ldr	r3, [pc, #312]	; (80042c0 <HAL_RCC_OscConfig+0x76c>)
 8004188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1ee      	bne.n	8004170 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004196:	2b00      	cmp	r3, #0
 8004198:	f000 8102 	beq.w	80043a0 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800419c:	4b48      	ldr	r3, [pc, #288]	; (80042c0 <HAL_RCC_OscConfig+0x76c>)
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041a4:	2b18      	cmp	r3, #24
 80041a6:	f000 80bd 	beq.w	8004324 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	f040 809e 	bne.w	80042f0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041b4:	4b42      	ldr	r3, [pc, #264]	; (80042c0 <HAL_RCC_OscConfig+0x76c>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a41      	ldr	r2, [pc, #260]	; (80042c0 <HAL_RCC_OscConfig+0x76c>)
 80041ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c0:	f7fe fbac 	bl	800291c <HAL_GetTick>
 80041c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041c6:	e008      	b.n	80041da <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041c8:	f7fe fba8 	bl	800291c <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e0e3      	b.n	80043a2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041da:	4b39      	ldr	r3, [pc, #228]	; (80042c0 <HAL_RCC_OscConfig+0x76c>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1f0      	bne.n	80041c8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041e6:	4b36      	ldr	r3, [pc, #216]	; (80042c0 <HAL_RCC_OscConfig+0x76c>)
 80041e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041ea:	4b37      	ldr	r3, [pc, #220]	; (80042c8 <HAL_RCC_OscConfig+0x774>)
 80041ec:	4013      	ands	r3, r2
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80041f6:	0112      	lsls	r2, r2, #4
 80041f8:	430a      	orrs	r2, r1
 80041fa:	4931      	ldr	r1, [pc, #196]	; (80042c0 <HAL_RCC_OscConfig+0x76c>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	628b      	str	r3, [r1, #40]	; 0x28
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004204:	3b01      	subs	r3, #1
 8004206:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800420e:	3b01      	subs	r3, #1
 8004210:	025b      	lsls	r3, r3, #9
 8004212:	b29b      	uxth	r3, r3
 8004214:	431a      	orrs	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421a:	3b01      	subs	r3, #1
 800421c:	041b      	lsls	r3, r3, #16
 800421e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004222:	431a      	orrs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004228:	3b01      	subs	r3, #1
 800422a:	061b      	lsls	r3, r3, #24
 800422c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004230:	4923      	ldr	r1, [pc, #140]	; (80042c0 <HAL_RCC_OscConfig+0x76c>)
 8004232:	4313      	orrs	r3, r2
 8004234:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004236:	4b22      	ldr	r3, [pc, #136]	; (80042c0 <HAL_RCC_OscConfig+0x76c>)
 8004238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423a:	4a21      	ldr	r2, [pc, #132]	; (80042c0 <HAL_RCC_OscConfig+0x76c>)
 800423c:	f023 0301 	bic.w	r3, r3, #1
 8004240:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004242:	4b1f      	ldr	r3, [pc, #124]	; (80042c0 <HAL_RCC_OscConfig+0x76c>)
 8004244:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004246:	4b21      	ldr	r3, [pc, #132]	; (80042cc <HAL_RCC_OscConfig+0x778>)
 8004248:	4013      	ands	r3, r2
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800424e:	00d2      	lsls	r2, r2, #3
 8004250:	491b      	ldr	r1, [pc, #108]	; (80042c0 <HAL_RCC_OscConfig+0x76c>)
 8004252:	4313      	orrs	r3, r2
 8004254:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004256:	4b1a      	ldr	r3, [pc, #104]	; (80042c0 <HAL_RCC_OscConfig+0x76c>)
 8004258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425a:	f023 020c 	bic.w	r2, r3, #12
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	4917      	ldr	r1, [pc, #92]	; (80042c0 <HAL_RCC_OscConfig+0x76c>)
 8004264:	4313      	orrs	r3, r2
 8004266:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004268:	4b15      	ldr	r3, [pc, #84]	; (80042c0 <HAL_RCC_OscConfig+0x76c>)
 800426a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426c:	f023 0202 	bic.w	r2, r3, #2
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004274:	4912      	ldr	r1, [pc, #72]	; (80042c0 <HAL_RCC_OscConfig+0x76c>)
 8004276:	4313      	orrs	r3, r2
 8004278:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800427a:	4b11      	ldr	r3, [pc, #68]	; (80042c0 <HAL_RCC_OscConfig+0x76c>)
 800427c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427e:	4a10      	ldr	r2, [pc, #64]	; (80042c0 <HAL_RCC_OscConfig+0x76c>)
 8004280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004284:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004286:	4b0e      	ldr	r3, [pc, #56]	; (80042c0 <HAL_RCC_OscConfig+0x76c>)
 8004288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428a:	4a0d      	ldr	r2, [pc, #52]	; (80042c0 <HAL_RCC_OscConfig+0x76c>)
 800428c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004290:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004292:	4b0b      	ldr	r3, [pc, #44]	; (80042c0 <HAL_RCC_OscConfig+0x76c>)
 8004294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004296:	4a0a      	ldr	r2, [pc, #40]	; (80042c0 <HAL_RCC_OscConfig+0x76c>)
 8004298:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800429c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800429e:	4b08      	ldr	r3, [pc, #32]	; (80042c0 <HAL_RCC_OscConfig+0x76c>)
 80042a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a2:	4a07      	ldr	r2, [pc, #28]	; (80042c0 <HAL_RCC_OscConfig+0x76c>)
 80042a4:	f043 0301 	orr.w	r3, r3, #1
 80042a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042aa:	4b05      	ldr	r3, [pc, #20]	; (80042c0 <HAL_RCC_OscConfig+0x76c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a04      	ldr	r2, [pc, #16]	; (80042c0 <HAL_RCC_OscConfig+0x76c>)
 80042b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b6:	f7fe fb31 	bl	800291c <HAL_GetTick>
 80042ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80042bc:	e011      	b.n	80042e2 <HAL_RCC_OscConfig+0x78e>
 80042be:	bf00      	nop
 80042c0:	58024400 	.word	0x58024400
 80042c4:	58024800 	.word	0x58024800
 80042c8:	fffffc0c 	.word	0xfffffc0c
 80042cc:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042d0:	f7fe fb24 	bl	800291c <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e05f      	b.n	80043a2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80042e2:	4b32      	ldr	r3, [pc, #200]	; (80043ac <HAL_RCC_OscConfig+0x858>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d0f0      	beq.n	80042d0 <HAL_RCC_OscConfig+0x77c>
 80042ee:	e057      	b.n	80043a0 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042f0:	4b2e      	ldr	r3, [pc, #184]	; (80043ac <HAL_RCC_OscConfig+0x858>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a2d      	ldr	r2, [pc, #180]	; (80043ac <HAL_RCC_OscConfig+0x858>)
 80042f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042fc:	f7fe fb0e 	bl	800291c <HAL_GetTick>
 8004300:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004302:	e008      	b.n	8004316 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004304:	f7fe fb0a 	bl	800291c <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b02      	cmp	r3, #2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e045      	b.n	80043a2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004316:	4b25      	ldr	r3, [pc, #148]	; (80043ac <HAL_RCC_OscConfig+0x858>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1f0      	bne.n	8004304 <HAL_RCC_OscConfig+0x7b0>
 8004322:	e03d      	b.n	80043a0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004324:	4b21      	ldr	r3, [pc, #132]	; (80043ac <HAL_RCC_OscConfig+0x858>)
 8004326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004328:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800432a:	4b20      	ldr	r3, [pc, #128]	; (80043ac <HAL_RCC_OscConfig+0x858>)
 800432c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004334:	2b01      	cmp	r3, #1
 8004336:	d031      	beq.n	800439c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	f003 0203 	and.w	r2, r3, #3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004342:	429a      	cmp	r2, r3
 8004344:	d12a      	bne.n	800439c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	091b      	lsrs	r3, r3, #4
 800434a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004352:	429a      	cmp	r2, r3
 8004354:	d122      	bne.n	800439c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004360:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004362:	429a      	cmp	r2, r3
 8004364:	d11a      	bne.n	800439c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	0a5b      	lsrs	r3, r3, #9
 800436a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004372:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004374:	429a      	cmp	r2, r3
 8004376:	d111      	bne.n	800439c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	0c1b      	lsrs	r3, r3, #16
 800437c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004384:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004386:	429a      	cmp	r2, r3
 8004388:	d108      	bne.n	800439c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	0e1b      	lsrs	r3, r3, #24
 800438e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004396:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004398:	429a      	cmp	r2, r3
 800439a:	d001      	beq.n	80043a0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e000      	b.n	80043a2 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3730      	adds	r7, #48	; 0x30
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	58024400 	.word	0x58024400

080043b0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d101      	bne.n	80043c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e19c      	b.n	80046fe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043c4:	4b8a      	ldr	r3, [pc, #552]	; (80045f0 <HAL_RCC_ClockConfig+0x240>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 030f 	and.w	r3, r3, #15
 80043cc:	683a      	ldr	r2, [r7, #0]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d910      	bls.n	80043f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043d2:	4b87      	ldr	r3, [pc, #540]	; (80045f0 <HAL_RCC_ClockConfig+0x240>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f023 020f 	bic.w	r2, r3, #15
 80043da:	4985      	ldr	r1, [pc, #532]	; (80045f0 <HAL_RCC_ClockConfig+0x240>)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	4313      	orrs	r3, r2
 80043e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043e2:	4b83      	ldr	r3, [pc, #524]	; (80045f0 <HAL_RCC_ClockConfig+0x240>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 030f 	and.w	r3, r3, #15
 80043ea:	683a      	ldr	r2, [r7, #0]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d001      	beq.n	80043f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e184      	b.n	80046fe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0304 	and.w	r3, r3, #4
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d010      	beq.n	8004422 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	691a      	ldr	r2, [r3, #16]
 8004404:	4b7b      	ldr	r3, [pc, #492]	; (80045f4 <HAL_RCC_ClockConfig+0x244>)
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800440c:	429a      	cmp	r2, r3
 800440e:	d908      	bls.n	8004422 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004410:	4b78      	ldr	r3, [pc, #480]	; (80045f4 <HAL_RCC_ClockConfig+0x244>)
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	4975      	ldr	r1, [pc, #468]	; (80045f4 <HAL_RCC_ClockConfig+0x244>)
 800441e:	4313      	orrs	r3, r2
 8004420:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0308 	and.w	r3, r3, #8
 800442a:	2b00      	cmp	r3, #0
 800442c:	d010      	beq.n	8004450 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	695a      	ldr	r2, [r3, #20]
 8004432:	4b70      	ldr	r3, [pc, #448]	; (80045f4 <HAL_RCC_ClockConfig+0x244>)
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800443a:	429a      	cmp	r2, r3
 800443c:	d908      	bls.n	8004450 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800443e:	4b6d      	ldr	r3, [pc, #436]	; (80045f4 <HAL_RCC_ClockConfig+0x244>)
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	496a      	ldr	r1, [pc, #424]	; (80045f4 <HAL_RCC_ClockConfig+0x244>)
 800444c:	4313      	orrs	r3, r2
 800444e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0310 	and.w	r3, r3, #16
 8004458:	2b00      	cmp	r3, #0
 800445a:	d010      	beq.n	800447e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	699a      	ldr	r2, [r3, #24]
 8004460:	4b64      	ldr	r3, [pc, #400]	; (80045f4 <HAL_RCC_ClockConfig+0x244>)
 8004462:	69db      	ldr	r3, [r3, #28]
 8004464:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004468:	429a      	cmp	r2, r3
 800446a:	d908      	bls.n	800447e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800446c:	4b61      	ldr	r3, [pc, #388]	; (80045f4 <HAL_RCC_ClockConfig+0x244>)
 800446e:	69db      	ldr	r3, [r3, #28]
 8004470:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	495e      	ldr	r1, [pc, #376]	; (80045f4 <HAL_RCC_ClockConfig+0x244>)
 800447a:	4313      	orrs	r3, r2
 800447c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0320 	and.w	r3, r3, #32
 8004486:	2b00      	cmp	r3, #0
 8004488:	d010      	beq.n	80044ac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	69da      	ldr	r2, [r3, #28]
 800448e:	4b59      	ldr	r3, [pc, #356]	; (80045f4 <HAL_RCC_ClockConfig+0x244>)
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004496:	429a      	cmp	r2, r3
 8004498:	d908      	bls.n	80044ac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800449a:	4b56      	ldr	r3, [pc, #344]	; (80045f4 <HAL_RCC_ClockConfig+0x244>)
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	69db      	ldr	r3, [r3, #28]
 80044a6:	4953      	ldr	r1, [pc, #332]	; (80045f4 <HAL_RCC_ClockConfig+0x244>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d010      	beq.n	80044da <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	68da      	ldr	r2, [r3, #12]
 80044bc:	4b4d      	ldr	r3, [pc, #308]	; (80045f4 <HAL_RCC_ClockConfig+0x244>)
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	f003 030f 	and.w	r3, r3, #15
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d908      	bls.n	80044da <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044c8:	4b4a      	ldr	r3, [pc, #296]	; (80045f4 <HAL_RCC_ClockConfig+0x244>)
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	f023 020f 	bic.w	r2, r3, #15
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	4947      	ldr	r1, [pc, #284]	; (80045f4 <HAL_RCC_ClockConfig+0x244>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d055      	beq.n	8004592 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80044e6:	4b43      	ldr	r3, [pc, #268]	; (80045f4 <HAL_RCC_ClockConfig+0x244>)
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	4940      	ldr	r1, [pc, #256]	; (80045f4 <HAL_RCC_ClockConfig+0x244>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d107      	bne.n	8004510 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004500:	4b3c      	ldr	r3, [pc, #240]	; (80045f4 <HAL_RCC_ClockConfig+0x244>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d121      	bne.n	8004550 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e0f6      	b.n	80046fe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	2b03      	cmp	r3, #3
 8004516:	d107      	bne.n	8004528 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004518:	4b36      	ldr	r3, [pc, #216]	; (80045f4 <HAL_RCC_ClockConfig+0x244>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d115      	bne.n	8004550 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e0ea      	b.n	80046fe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d107      	bne.n	8004540 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004530:	4b30      	ldr	r3, [pc, #192]	; (80045f4 <HAL_RCC_ClockConfig+0x244>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004538:	2b00      	cmp	r3, #0
 800453a:	d109      	bne.n	8004550 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e0de      	b.n	80046fe <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004540:	4b2c      	ldr	r3, [pc, #176]	; (80045f4 <HAL_RCC_ClockConfig+0x244>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0304 	and.w	r3, r3, #4
 8004548:	2b00      	cmp	r3, #0
 800454a:	d101      	bne.n	8004550 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e0d6      	b.n	80046fe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004550:	4b28      	ldr	r3, [pc, #160]	; (80045f4 <HAL_RCC_ClockConfig+0x244>)
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	f023 0207 	bic.w	r2, r3, #7
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	4925      	ldr	r1, [pc, #148]	; (80045f4 <HAL_RCC_ClockConfig+0x244>)
 800455e:	4313      	orrs	r3, r2
 8004560:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004562:	f7fe f9db 	bl	800291c <HAL_GetTick>
 8004566:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004568:	e00a      	b.n	8004580 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800456a:	f7fe f9d7 	bl	800291c <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	f241 3288 	movw	r2, #5000	; 0x1388
 8004578:	4293      	cmp	r3, r2
 800457a:	d901      	bls.n	8004580 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e0be      	b.n	80046fe <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004580:	4b1c      	ldr	r3, [pc, #112]	; (80045f4 <HAL_RCC_ClockConfig+0x244>)
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	00db      	lsls	r3, r3, #3
 800458e:	429a      	cmp	r2, r3
 8004590:	d1eb      	bne.n	800456a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d010      	beq.n	80045c0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68da      	ldr	r2, [r3, #12]
 80045a2:	4b14      	ldr	r3, [pc, #80]	; (80045f4 <HAL_RCC_ClockConfig+0x244>)
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	f003 030f 	and.w	r3, r3, #15
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d208      	bcs.n	80045c0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045ae:	4b11      	ldr	r3, [pc, #68]	; (80045f4 <HAL_RCC_ClockConfig+0x244>)
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	f023 020f 	bic.w	r2, r3, #15
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	490e      	ldr	r1, [pc, #56]	; (80045f4 <HAL_RCC_ClockConfig+0x244>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045c0:	4b0b      	ldr	r3, [pc, #44]	; (80045f0 <HAL_RCC_ClockConfig+0x240>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 030f 	and.w	r3, r3, #15
 80045c8:	683a      	ldr	r2, [r7, #0]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d214      	bcs.n	80045f8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ce:	4b08      	ldr	r3, [pc, #32]	; (80045f0 <HAL_RCC_ClockConfig+0x240>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f023 020f 	bic.w	r2, r3, #15
 80045d6:	4906      	ldr	r1, [pc, #24]	; (80045f0 <HAL_RCC_ClockConfig+0x240>)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	4313      	orrs	r3, r2
 80045dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045de:	4b04      	ldr	r3, [pc, #16]	; (80045f0 <HAL_RCC_ClockConfig+0x240>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 030f 	and.w	r3, r3, #15
 80045e6:	683a      	ldr	r2, [r7, #0]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d005      	beq.n	80045f8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e086      	b.n	80046fe <HAL_RCC_ClockConfig+0x34e>
 80045f0:	52002000 	.word	0x52002000
 80045f4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	2b00      	cmp	r3, #0
 8004602:	d010      	beq.n	8004626 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	691a      	ldr	r2, [r3, #16]
 8004608:	4b3f      	ldr	r3, [pc, #252]	; (8004708 <HAL_RCC_ClockConfig+0x358>)
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004610:	429a      	cmp	r2, r3
 8004612:	d208      	bcs.n	8004626 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004614:	4b3c      	ldr	r3, [pc, #240]	; (8004708 <HAL_RCC_ClockConfig+0x358>)
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	4939      	ldr	r1, [pc, #228]	; (8004708 <HAL_RCC_ClockConfig+0x358>)
 8004622:	4313      	orrs	r3, r2
 8004624:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0308 	and.w	r3, r3, #8
 800462e:	2b00      	cmp	r3, #0
 8004630:	d010      	beq.n	8004654 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	695a      	ldr	r2, [r3, #20]
 8004636:	4b34      	ldr	r3, [pc, #208]	; (8004708 <HAL_RCC_ClockConfig+0x358>)
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800463e:	429a      	cmp	r2, r3
 8004640:	d208      	bcs.n	8004654 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004642:	4b31      	ldr	r3, [pc, #196]	; (8004708 <HAL_RCC_ClockConfig+0x358>)
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	492e      	ldr	r1, [pc, #184]	; (8004708 <HAL_RCC_ClockConfig+0x358>)
 8004650:	4313      	orrs	r3, r2
 8004652:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0310 	and.w	r3, r3, #16
 800465c:	2b00      	cmp	r3, #0
 800465e:	d010      	beq.n	8004682 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	699a      	ldr	r2, [r3, #24]
 8004664:	4b28      	ldr	r3, [pc, #160]	; (8004708 <HAL_RCC_ClockConfig+0x358>)
 8004666:	69db      	ldr	r3, [r3, #28]
 8004668:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800466c:	429a      	cmp	r2, r3
 800466e:	d208      	bcs.n	8004682 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004670:	4b25      	ldr	r3, [pc, #148]	; (8004708 <HAL_RCC_ClockConfig+0x358>)
 8004672:	69db      	ldr	r3, [r3, #28]
 8004674:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	4922      	ldr	r1, [pc, #136]	; (8004708 <HAL_RCC_ClockConfig+0x358>)
 800467e:	4313      	orrs	r3, r2
 8004680:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0320 	and.w	r3, r3, #32
 800468a:	2b00      	cmp	r3, #0
 800468c:	d010      	beq.n	80046b0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	69da      	ldr	r2, [r3, #28]
 8004692:	4b1d      	ldr	r3, [pc, #116]	; (8004708 <HAL_RCC_ClockConfig+0x358>)
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800469a:	429a      	cmp	r2, r3
 800469c:	d208      	bcs.n	80046b0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800469e:	4b1a      	ldr	r3, [pc, #104]	; (8004708 <HAL_RCC_ClockConfig+0x358>)
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	69db      	ldr	r3, [r3, #28]
 80046aa:	4917      	ldr	r1, [pc, #92]	; (8004708 <HAL_RCC_ClockConfig+0x358>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80046b0:	f000 f834 	bl	800471c <HAL_RCC_GetSysClockFreq>
 80046b4:	4602      	mov	r2, r0
 80046b6:	4b14      	ldr	r3, [pc, #80]	; (8004708 <HAL_RCC_ClockConfig+0x358>)
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	0a1b      	lsrs	r3, r3, #8
 80046bc:	f003 030f 	and.w	r3, r3, #15
 80046c0:	4912      	ldr	r1, [pc, #72]	; (800470c <HAL_RCC_ClockConfig+0x35c>)
 80046c2:	5ccb      	ldrb	r3, [r1, r3]
 80046c4:	f003 031f 	and.w	r3, r3, #31
 80046c8:	fa22 f303 	lsr.w	r3, r2, r3
 80046cc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80046ce:	4b0e      	ldr	r3, [pc, #56]	; (8004708 <HAL_RCC_ClockConfig+0x358>)
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	f003 030f 	and.w	r3, r3, #15
 80046d6:	4a0d      	ldr	r2, [pc, #52]	; (800470c <HAL_RCC_ClockConfig+0x35c>)
 80046d8:	5cd3      	ldrb	r3, [r2, r3]
 80046da:	f003 031f 	and.w	r3, r3, #31
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	fa22 f303 	lsr.w	r3, r2, r3
 80046e4:	4a0a      	ldr	r2, [pc, #40]	; (8004710 <HAL_RCC_ClockConfig+0x360>)
 80046e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80046e8:	4a0a      	ldr	r2, [pc, #40]	; (8004714 <HAL_RCC_ClockConfig+0x364>)
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80046ee:	4b0a      	ldr	r3, [pc, #40]	; (8004718 <HAL_RCC_ClockConfig+0x368>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7fe f8c8 	bl	8002888 <HAL_InitTick>
 80046f8:	4603      	mov	r3, r0
 80046fa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80046fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3718      	adds	r7, #24
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	58024400 	.word	0x58024400
 800470c:	08006c5c 	.word	0x08006c5c
 8004710:	24000004 	.word	0x24000004
 8004714:	24000000 	.word	0x24000000
 8004718:	24000060 	.word	0x24000060

0800471c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800471c:	b480      	push	{r7}
 800471e:	b089      	sub	sp, #36	; 0x24
 8004720:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004722:	4bb3      	ldr	r3, [pc, #716]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800472a:	2b18      	cmp	r3, #24
 800472c:	f200 8155 	bhi.w	80049da <HAL_RCC_GetSysClockFreq+0x2be>
 8004730:	a201      	add	r2, pc, #4	; (adr r2, 8004738 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004736:	bf00      	nop
 8004738:	0800479d 	.word	0x0800479d
 800473c:	080049db 	.word	0x080049db
 8004740:	080049db 	.word	0x080049db
 8004744:	080049db 	.word	0x080049db
 8004748:	080049db 	.word	0x080049db
 800474c:	080049db 	.word	0x080049db
 8004750:	080049db 	.word	0x080049db
 8004754:	080049db 	.word	0x080049db
 8004758:	080047c3 	.word	0x080047c3
 800475c:	080049db 	.word	0x080049db
 8004760:	080049db 	.word	0x080049db
 8004764:	080049db 	.word	0x080049db
 8004768:	080049db 	.word	0x080049db
 800476c:	080049db 	.word	0x080049db
 8004770:	080049db 	.word	0x080049db
 8004774:	080049db 	.word	0x080049db
 8004778:	080047c9 	.word	0x080047c9
 800477c:	080049db 	.word	0x080049db
 8004780:	080049db 	.word	0x080049db
 8004784:	080049db 	.word	0x080049db
 8004788:	080049db 	.word	0x080049db
 800478c:	080049db 	.word	0x080049db
 8004790:	080049db 	.word	0x080049db
 8004794:	080049db 	.word	0x080049db
 8004798:	080047cf 	.word	0x080047cf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800479c:	4b94      	ldr	r3, [pc, #592]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0320 	and.w	r3, r3, #32
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d009      	beq.n	80047bc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80047a8:	4b91      	ldr	r3, [pc, #580]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	08db      	lsrs	r3, r3, #3
 80047ae:	f003 0303 	and.w	r3, r3, #3
 80047b2:	4a90      	ldr	r2, [pc, #576]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80047b4:	fa22 f303 	lsr.w	r3, r2, r3
 80047b8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80047ba:	e111      	b.n	80049e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80047bc:	4b8d      	ldr	r3, [pc, #564]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80047be:	61bb      	str	r3, [r7, #24]
    break;
 80047c0:	e10e      	b.n	80049e0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80047c2:	4b8d      	ldr	r3, [pc, #564]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80047c4:	61bb      	str	r3, [r7, #24]
    break;
 80047c6:	e10b      	b.n	80049e0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80047c8:	4b8c      	ldr	r3, [pc, #560]	; (80049fc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80047ca:	61bb      	str	r3, [r7, #24]
    break;
 80047cc:	e108      	b.n	80049e0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047ce:	4b88      	ldr	r3, [pc, #544]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d2:	f003 0303 	and.w	r3, r3, #3
 80047d6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80047d8:	4b85      	ldr	r3, [pc, #532]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047dc:	091b      	lsrs	r3, r3, #4
 80047de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047e2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80047e4:	4b82      	ldr	r3, [pc, #520]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80047ee:	4b80      	ldr	r3, [pc, #512]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f2:	08db      	lsrs	r3, r3, #3
 80047f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	fb02 f303 	mul.w	r3, r2, r3
 80047fe:	ee07 3a90 	vmov	s15, r3
 8004802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004806:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 80e1 	beq.w	80049d4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	2b02      	cmp	r3, #2
 8004816:	f000 8083 	beq.w	8004920 <HAL_RCC_GetSysClockFreq+0x204>
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	2b02      	cmp	r3, #2
 800481e:	f200 80a1 	bhi.w	8004964 <HAL_RCC_GetSysClockFreq+0x248>
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d003      	beq.n	8004830 <HAL_RCC_GetSysClockFreq+0x114>
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d056      	beq.n	80048dc <HAL_RCC_GetSysClockFreq+0x1c0>
 800482e:	e099      	b.n	8004964 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004830:	4b6f      	ldr	r3, [pc, #444]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0320 	and.w	r3, r3, #32
 8004838:	2b00      	cmp	r3, #0
 800483a:	d02d      	beq.n	8004898 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800483c:	4b6c      	ldr	r3, [pc, #432]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	08db      	lsrs	r3, r3, #3
 8004842:	f003 0303 	and.w	r3, r3, #3
 8004846:	4a6b      	ldr	r2, [pc, #428]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004848:	fa22 f303 	lsr.w	r3, r2, r3
 800484c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	ee07 3a90 	vmov	s15, r3
 8004854:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	ee07 3a90 	vmov	s15, r3
 800485e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004866:	4b62      	ldr	r3, [pc, #392]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800486e:	ee07 3a90 	vmov	s15, r3
 8004872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004876:	ed97 6a02 	vldr	s12, [r7, #8]
 800487a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004a00 <HAL_RCC_GetSysClockFreq+0x2e4>
 800487e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004886:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800488a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800488e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004892:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004896:	e087      	b.n	80049a8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	ee07 3a90 	vmov	s15, r3
 800489e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048a2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004a04 <HAL_RCC_GetSysClockFreq+0x2e8>
 80048a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048aa:	4b51      	ldr	r3, [pc, #324]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048b2:	ee07 3a90 	vmov	s15, r3
 80048b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80048be:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004a00 <HAL_RCC_GetSysClockFreq+0x2e4>
 80048c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048da:	e065      	b.n	80049a8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	ee07 3a90 	vmov	s15, r3
 80048e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048e6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004a08 <HAL_RCC_GetSysClockFreq+0x2ec>
 80048ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048ee:	4b40      	ldr	r3, [pc, #256]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048f6:	ee07 3a90 	vmov	s15, r3
 80048fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8004902:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004a00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800490a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800490e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800491a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800491e:	e043      	b.n	80049a8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	ee07 3a90 	vmov	s15, r3
 8004926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800492a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004a0c <HAL_RCC_GetSysClockFreq+0x2f0>
 800492e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004932:	4b2f      	ldr	r3, [pc, #188]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800493a:	ee07 3a90 	vmov	s15, r3
 800493e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004942:	ed97 6a02 	vldr	s12, [r7, #8]
 8004946:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004a00 <HAL_RCC_GetSysClockFreq+0x2e4>
 800494a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800494e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800495a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800495e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004962:	e021      	b.n	80049a8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	ee07 3a90 	vmov	s15, r3
 800496a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800496e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004a08 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004976:	4b1e      	ldr	r3, [pc, #120]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800497e:	ee07 3a90 	vmov	s15, r3
 8004982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004986:	ed97 6a02 	vldr	s12, [r7, #8]
 800498a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004a00 <HAL_RCC_GetSysClockFreq+0x2e4>
 800498e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800499a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800499e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049a6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80049a8:	4b11      	ldr	r3, [pc, #68]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ac:	0a5b      	lsrs	r3, r3, #9
 80049ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049b2:	3301      	adds	r3, #1
 80049b4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	ee07 3a90 	vmov	s15, r3
 80049bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80049c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80049c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049cc:	ee17 3a90 	vmov	r3, s15
 80049d0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80049d2:	e005      	b.n	80049e0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80049d4:	2300      	movs	r3, #0
 80049d6:	61bb      	str	r3, [r7, #24]
    break;
 80049d8:	e002      	b.n	80049e0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80049da:	4b07      	ldr	r3, [pc, #28]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80049dc:	61bb      	str	r3, [r7, #24]
    break;
 80049de:	bf00      	nop
  }

  return sysclockfreq;
 80049e0:	69bb      	ldr	r3, [r7, #24]
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3724      	adds	r7, #36	; 0x24
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	58024400 	.word	0x58024400
 80049f4:	03d09000 	.word	0x03d09000
 80049f8:	003d0900 	.word	0x003d0900
 80049fc:	007a1200 	.word	0x007a1200
 8004a00:	46000000 	.word	0x46000000
 8004a04:	4c742400 	.word	0x4c742400
 8004a08:	4a742400 	.word	0x4a742400
 8004a0c:	4af42400 	.word	0x4af42400

08004a10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004a16:	f7ff fe81 	bl	800471c <HAL_RCC_GetSysClockFreq>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	4b10      	ldr	r3, [pc, #64]	; (8004a60 <HAL_RCC_GetHCLKFreq+0x50>)
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	0a1b      	lsrs	r3, r3, #8
 8004a22:	f003 030f 	and.w	r3, r3, #15
 8004a26:	490f      	ldr	r1, [pc, #60]	; (8004a64 <HAL_RCC_GetHCLKFreq+0x54>)
 8004a28:	5ccb      	ldrb	r3, [r1, r3]
 8004a2a:	f003 031f 	and.w	r3, r3, #31
 8004a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a32:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a34:	4b0a      	ldr	r3, [pc, #40]	; (8004a60 <HAL_RCC_GetHCLKFreq+0x50>)
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	f003 030f 	and.w	r3, r3, #15
 8004a3c:	4a09      	ldr	r2, [pc, #36]	; (8004a64 <HAL_RCC_GetHCLKFreq+0x54>)
 8004a3e:	5cd3      	ldrb	r3, [r2, r3]
 8004a40:	f003 031f 	and.w	r3, r3, #31
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	fa22 f303 	lsr.w	r3, r2, r3
 8004a4a:	4a07      	ldr	r2, [pc, #28]	; (8004a68 <HAL_RCC_GetHCLKFreq+0x58>)
 8004a4c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004a4e:	4a07      	ldr	r2, [pc, #28]	; (8004a6c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004a54:	4b04      	ldr	r3, [pc, #16]	; (8004a68 <HAL_RCC_GetHCLKFreq+0x58>)
 8004a56:	681b      	ldr	r3, [r3, #0]
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3708      	adds	r7, #8
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	58024400 	.word	0x58024400
 8004a64:	08006c5c 	.word	0x08006c5c
 8004a68:	24000004 	.word	0x24000004
 8004a6c:	24000000 	.word	0x24000000

08004a70 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a78:	2300      	movs	r3, #0
 8004a7a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d03f      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a90:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a94:	d02a      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004a96:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a9a:	d824      	bhi.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004aa0:	d018      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004aa2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004aa6:	d81e      	bhi.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d003      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004aac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ab0:	d007      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004ab2:	e018      	b.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ab4:	4ba3      	ldr	r3, [pc, #652]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab8:	4aa2      	ldr	r2, [pc, #648]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004aba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004abe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004ac0:	e015      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	3304      	adds	r3, #4
 8004ac6:	2102      	movs	r1, #2
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 ff17 	bl	80058fc <RCCEx_PLL2_Config>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004ad2:	e00c      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	3324      	adds	r3, #36	; 0x24
 8004ad8:	2102      	movs	r1, #2
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 ffc0 	bl	8005a60 <RCCEx_PLL3_Config>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004ae4:	e003      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	75fb      	strb	r3, [r7, #23]
      break;
 8004aea:	e000      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004aec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004aee:	7dfb      	ldrb	r3, [r7, #23]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d109      	bne.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004af4:	4b93      	ldr	r3, [pc, #588]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004af8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b00:	4990      	ldr	r1, [pc, #576]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	650b      	str	r3, [r1, #80]	; 0x50
 8004b06:	e001      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b08:	7dfb      	ldrb	r3, [r7, #23]
 8004b0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d03d      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b1c:	2b04      	cmp	r3, #4
 8004b1e:	d826      	bhi.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004b20:	a201      	add	r2, pc, #4	; (adr r2, 8004b28 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b26:	bf00      	nop
 8004b28:	08004b3d 	.word	0x08004b3d
 8004b2c:	08004b4b 	.word	0x08004b4b
 8004b30:	08004b5d 	.word	0x08004b5d
 8004b34:	08004b75 	.word	0x08004b75
 8004b38:	08004b75 	.word	0x08004b75
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b3c:	4b81      	ldr	r3, [pc, #516]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b40:	4a80      	ldr	r2, [pc, #512]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b48:	e015      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	2100      	movs	r1, #0
 8004b50:	4618      	mov	r0, r3
 8004b52:	f000 fed3 	bl	80058fc <RCCEx_PLL2_Config>
 8004b56:	4603      	mov	r3, r0
 8004b58:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b5a:	e00c      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	3324      	adds	r3, #36	; 0x24
 8004b60:	2100      	movs	r1, #0
 8004b62:	4618      	mov	r0, r3
 8004b64:	f000 ff7c 	bl	8005a60 <RCCEx_PLL3_Config>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b6c:	e003      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	75fb      	strb	r3, [r7, #23]
      break;
 8004b72:	e000      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004b74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b76:	7dfb      	ldrb	r3, [r7, #23]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d109      	bne.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b7c:	4b71      	ldr	r3, [pc, #452]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b80:	f023 0207 	bic.w	r2, r3, #7
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b88:	496e      	ldr	r1, [pc, #440]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	650b      	str	r3, [r1, #80]	; 0x50
 8004b8e:	e001      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b90:	7dfb      	ldrb	r3, [r7, #23]
 8004b92:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d042      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ba8:	d02b      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004baa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bae:	d825      	bhi.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004bb0:	2bc0      	cmp	r3, #192	; 0xc0
 8004bb2:	d028      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004bb4:	2bc0      	cmp	r3, #192	; 0xc0
 8004bb6:	d821      	bhi.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004bb8:	2b80      	cmp	r3, #128	; 0x80
 8004bba:	d016      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004bbc:	2b80      	cmp	r3, #128	; 0x80
 8004bbe:	d81d      	bhi.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d002      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004bc4:	2b40      	cmp	r3, #64	; 0x40
 8004bc6:	d007      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004bc8:	e018      	b.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bca:	4b5e      	ldr	r3, [pc, #376]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bce:	4a5d      	ldr	r2, [pc, #372]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bd4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004bd6:	e017      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	3304      	adds	r3, #4
 8004bdc:	2100      	movs	r1, #0
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 fe8c 	bl	80058fc <RCCEx_PLL2_Config>
 8004be4:	4603      	mov	r3, r0
 8004be6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004be8:	e00e      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	3324      	adds	r3, #36	; 0x24
 8004bee:	2100      	movs	r1, #0
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f000 ff35 	bl	8005a60 <RCCEx_PLL3_Config>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004bfa:	e005      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	75fb      	strb	r3, [r7, #23]
      break;
 8004c00:	e002      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004c02:	bf00      	nop
 8004c04:	e000      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004c06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c08:	7dfb      	ldrb	r3, [r7, #23]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d109      	bne.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004c0e:	4b4d      	ldr	r3, [pc, #308]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c12:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c1a:	494a      	ldr	r1, [pc, #296]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	650b      	str	r3, [r1, #80]	; 0x50
 8004c20:	e001      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c22:	7dfb      	ldrb	r3, [r7, #23]
 8004c24:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d049      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004c38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c3c:	d030      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004c3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c42:	d82a      	bhi.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004c44:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004c48:	d02c      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004c4a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004c4e:	d824      	bhi.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004c50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c54:	d018      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004c56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c5a:	d81e      	bhi.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d003      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004c60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c64:	d007      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004c66:	e018      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c68:	4b36      	ldr	r3, [pc, #216]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6c:	4a35      	ldr	r2, [pc, #212]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004c6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004c74:	e017      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	3304      	adds	r3, #4
 8004c7a:	2100      	movs	r1, #0
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f000 fe3d 	bl	80058fc <RCCEx_PLL2_Config>
 8004c82:	4603      	mov	r3, r0
 8004c84:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004c86:	e00e      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	3324      	adds	r3, #36	; 0x24
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f000 fee6 	bl	8005a60 <RCCEx_PLL3_Config>
 8004c94:	4603      	mov	r3, r0
 8004c96:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004c98:	e005      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	75fb      	strb	r3, [r7, #23]
      break;
 8004c9e:	e002      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004ca0:	bf00      	nop
 8004ca2:	e000      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004ca4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ca6:	7dfb      	ldrb	r3, [r7, #23]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d10a      	bne.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004cac:	4b25      	ldr	r3, [pc, #148]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004cba:	4922      	ldr	r1, [pc, #136]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	658b      	str	r3, [r1, #88]	; 0x58
 8004cc0:	e001      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cc2:	7dfb      	ldrb	r3, [r7, #23]
 8004cc4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d04b      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004cd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cdc:	d030      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004cde:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ce2:	d82a      	bhi.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004ce4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ce8:	d02e      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8004cea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004cee:	d824      	bhi.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004cf0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004cf4:	d018      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004cf6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004cfa:	d81e      	bhi.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d003      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004d00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d04:	d007      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004d06:	e018      	b.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d08:	4b0e      	ldr	r3, [pc, #56]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0c:	4a0d      	ldr	r2, [pc, #52]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004d0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004d14:	e019      	b.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	3304      	adds	r3, #4
 8004d1a:	2100      	movs	r1, #0
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f000 fded 	bl	80058fc <RCCEx_PLL2_Config>
 8004d22:	4603      	mov	r3, r0
 8004d24:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004d26:	e010      	b.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	3324      	adds	r3, #36	; 0x24
 8004d2c:	2100      	movs	r1, #0
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 fe96 	bl	8005a60 <RCCEx_PLL3_Config>
 8004d34:	4603      	mov	r3, r0
 8004d36:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004d38:	e007      	b.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	75fb      	strb	r3, [r7, #23]
      break;
 8004d3e:	e004      	b.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8004d40:	bf00      	nop
 8004d42:	e002      	b.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004d44:	58024400 	.word	0x58024400
      break;
 8004d48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d4a:	7dfb      	ldrb	r3, [r7, #23]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10a      	bne.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004d50:	4b99      	ldr	r3, [pc, #612]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d54:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004d5e:	4996      	ldr	r1, [pc, #600]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	658b      	str	r3, [r1, #88]	; 0x58
 8004d64:	e001      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d66:	7dfb      	ldrb	r3, [r7, #23]
 8004d68:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d032      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d7a:	2b30      	cmp	r3, #48	; 0x30
 8004d7c:	d01c      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004d7e:	2b30      	cmp	r3, #48	; 0x30
 8004d80:	d817      	bhi.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004d82:	2b20      	cmp	r3, #32
 8004d84:	d00c      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8004d86:	2b20      	cmp	r3, #32
 8004d88:	d813      	bhi.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d016      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004d8e:	2b10      	cmp	r3, #16
 8004d90:	d10f      	bne.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d92:	4b89      	ldr	r3, [pc, #548]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d96:	4a88      	ldr	r2, [pc, #544]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d9c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004d9e:	e00e      	b.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	3304      	adds	r3, #4
 8004da4:	2102      	movs	r1, #2
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 fda8 	bl	80058fc <RCCEx_PLL2_Config>
 8004dac:	4603      	mov	r3, r0
 8004dae:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004db0:	e005      	b.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	75fb      	strb	r3, [r7, #23]
      break;
 8004db6:	e002      	b.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004db8:	bf00      	nop
 8004dba:	e000      	b.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004dbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dbe:	7dfb      	ldrb	r3, [r7, #23]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d109      	bne.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004dc4:	4b7c      	ldr	r3, [pc, #496]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dc8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dd0:	4979      	ldr	r1, [pc, #484]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004dd6:	e001      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd8:	7dfb      	ldrb	r3, [r7, #23]
 8004dda:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d047      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004df0:	d030      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004df2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004df6:	d82a      	bhi.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004df8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004dfc:	d02c      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004dfe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e02:	d824      	bhi.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004e04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e08:	d018      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8004e0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e0e:	d81e      	bhi.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d003      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8004e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e18:	d007      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8004e1a:	e018      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e1c:	4b66      	ldr	r3, [pc, #408]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e20:	4a65      	ldr	r2, [pc, #404]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004e22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004e28:	e017      	b.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	3304      	adds	r3, #4
 8004e2e:	2100      	movs	r1, #0
 8004e30:	4618      	mov	r0, r3
 8004e32:	f000 fd63 	bl	80058fc <RCCEx_PLL2_Config>
 8004e36:	4603      	mov	r3, r0
 8004e38:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004e3a:	e00e      	b.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	3324      	adds	r3, #36	; 0x24
 8004e40:	2100      	movs	r1, #0
 8004e42:	4618      	mov	r0, r3
 8004e44:	f000 fe0c 	bl	8005a60 <RCCEx_PLL3_Config>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004e4c:	e005      	b.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	75fb      	strb	r3, [r7, #23]
      break;
 8004e52:	e002      	b.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004e54:	bf00      	nop
 8004e56:	e000      	b.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004e58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e5a:	7dfb      	ldrb	r3, [r7, #23]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d109      	bne.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004e60:	4b55      	ldr	r3, [pc, #340]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e64:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e6c:	4952      	ldr	r1, [pc, #328]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	650b      	str	r3, [r1, #80]	; 0x50
 8004e72:	e001      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e74:	7dfb      	ldrb	r3, [r7, #23]
 8004e76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d049      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e8c:	d02e      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004e8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e92:	d828      	bhi.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004e94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e98:	d02a      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8004e9a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e9e:	d822      	bhi.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004ea0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ea4:	d026      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8004ea6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004eaa:	d81c      	bhi.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004eac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004eb0:	d010      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8004eb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004eb6:	d816      	bhi.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d01d      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ec0:	d111      	bne.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	3304      	adds	r3, #4
 8004ec6:	2101      	movs	r1, #1
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f000 fd17 	bl	80058fc <RCCEx_PLL2_Config>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004ed2:	e012      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	3324      	adds	r3, #36	; 0x24
 8004ed8:	2101      	movs	r1, #1
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 fdc0 	bl	8005a60 <RCCEx_PLL3_Config>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004ee4:	e009      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	75fb      	strb	r3, [r7, #23]
      break;
 8004eea:	e006      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004eec:	bf00      	nop
 8004eee:	e004      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004ef0:	bf00      	nop
 8004ef2:	e002      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004ef4:	bf00      	nop
 8004ef6:	e000      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004ef8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004efa:	7dfb      	ldrb	r3, [r7, #23]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d109      	bne.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004f00:	4b2d      	ldr	r3, [pc, #180]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f04:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f0c:	492a      	ldr	r1, [pc, #168]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	650b      	str	r3, [r1, #80]	; 0x50
 8004f12:	e001      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f14:	7dfb      	ldrb	r3, [r7, #23]
 8004f16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d04d      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004f2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f2e:	d02e      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004f30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f34:	d828      	bhi.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f3a:	d02a      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f40:	d822      	bhi.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004f42:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f46:	d026      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8004f48:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f4c:	d81c      	bhi.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004f4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f52:	d010      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004f54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f58:	d816      	bhi.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d01d      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004f5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f62:	d111      	bne.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	3304      	adds	r3, #4
 8004f68:	2101      	movs	r1, #1
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f000 fcc6 	bl	80058fc <RCCEx_PLL2_Config>
 8004f70:	4603      	mov	r3, r0
 8004f72:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004f74:	e012      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	3324      	adds	r3, #36	; 0x24
 8004f7a:	2101      	movs	r1, #1
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f000 fd6f 	bl	8005a60 <RCCEx_PLL3_Config>
 8004f82:	4603      	mov	r3, r0
 8004f84:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004f86:	e009      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	75fb      	strb	r3, [r7, #23]
      break;
 8004f8c:	e006      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004f8e:	bf00      	nop
 8004f90:	e004      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004f92:	bf00      	nop
 8004f94:	e002      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004f96:	bf00      	nop
 8004f98:	e000      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004f9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f9c:	7dfb      	ldrb	r3, [r7, #23]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10c      	bne.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004fa2:	4b05      	ldr	r3, [pc, #20]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004fb0:	4901      	ldr	r1, [pc, #4]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	658b      	str	r3, [r1, #88]	; 0x58
 8004fb6:	e003      	b.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004fb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fbc:	7dfb      	ldrb	r3, [r7, #23]
 8004fbe:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d02f      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fd4:	d00e      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8004fd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fda:	d814      	bhi.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d015      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8004fe0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fe4:	d10f      	bne.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fe6:	4baf      	ldr	r3, [pc, #700]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fea:	4aae      	ldr	r2, [pc, #696]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ff0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004ff2:	e00c      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	3304      	adds	r3, #4
 8004ff8:	2101      	movs	r1, #1
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 fc7e 	bl	80058fc <RCCEx_PLL2_Config>
 8005000:	4603      	mov	r3, r0
 8005002:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005004:	e003      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	75fb      	strb	r3, [r7, #23]
      break;
 800500a:	e000      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800500c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800500e:	7dfb      	ldrb	r3, [r7, #23]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d109      	bne.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005014:	4ba3      	ldr	r3, [pc, #652]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005018:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005020:	49a0      	ldr	r1, [pc, #640]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005022:	4313      	orrs	r3, r2
 8005024:	650b      	str	r3, [r1, #80]	; 0x50
 8005026:	e001      	b.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005028:	7dfb      	ldrb	r3, [r7, #23]
 800502a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d032      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800503c:	2b03      	cmp	r3, #3
 800503e:	d81b      	bhi.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005040:	a201      	add	r2, pc, #4	; (adr r2, 8005048 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8005042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005046:	bf00      	nop
 8005048:	0800507f 	.word	0x0800507f
 800504c:	08005059 	.word	0x08005059
 8005050:	08005067 	.word	0x08005067
 8005054:	0800507f 	.word	0x0800507f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005058:	4b92      	ldr	r3, [pc, #584]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800505a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505c:	4a91      	ldr	r2, [pc, #580]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800505e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005062:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005064:	e00c      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	3304      	adds	r3, #4
 800506a:	2102      	movs	r1, #2
 800506c:	4618      	mov	r0, r3
 800506e:	f000 fc45 	bl	80058fc <RCCEx_PLL2_Config>
 8005072:	4603      	mov	r3, r0
 8005074:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005076:	e003      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	75fb      	strb	r3, [r7, #23]
      break;
 800507c:	e000      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800507e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005080:	7dfb      	ldrb	r3, [r7, #23]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d109      	bne.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005086:	4b87      	ldr	r3, [pc, #540]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800508a:	f023 0203 	bic.w	r2, r3, #3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005092:	4984      	ldr	r1, [pc, #528]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005094:	4313      	orrs	r3, r2
 8005096:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005098:	e001      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800509a:	7dfb      	ldrb	r3, [r7, #23]
 800509c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f000 8086 	beq.w	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050ac:	4b7e      	ldr	r3, [pc, #504]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a7d      	ldr	r2, [pc, #500]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80050b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050b8:	f7fd fc30 	bl	800291c <HAL_GetTick>
 80050bc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050be:	e009      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050c0:	f7fd fc2c 	bl	800291c <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	2b64      	cmp	r3, #100	; 0x64
 80050cc:	d902      	bls.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	75fb      	strb	r3, [r7, #23]
        break;
 80050d2:	e005      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050d4:	4b74      	ldr	r3, [pc, #464]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d0ef      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80050e0:	7dfb      	ldrb	r3, [r7, #23]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d166      	bne.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80050e6:	4b6f      	ldr	r3, [pc, #444]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80050e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050f0:	4053      	eors	r3, r2
 80050f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d013      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050fa:	4b6a      	ldr	r3, [pc, #424]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80050fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005102:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005104:	4b67      	ldr	r3, [pc, #412]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005108:	4a66      	ldr	r2, [pc, #408]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800510a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800510e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005110:	4b64      	ldr	r3, [pc, #400]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005114:	4a63      	ldr	r2, [pc, #396]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800511a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800511c:	4a61      	ldr	r2, [pc, #388]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005128:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800512c:	d115      	bne.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800512e:	f7fd fbf5 	bl	800291c <HAL_GetTick>
 8005132:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005134:	e00b      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005136:	f7fd fbf1 	bl	800291c <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	f241 3288 	movw	r2, #5000	; 0x1388
 8005144:	4293      	cmp	r3, r2
 8005146:	d902      	bls.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	75fb      	strb	r3, [r7, #23]
            break;
 800514c:	e005      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800514e:	4b55      	ldr	r3, [pc, #340]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005152:	f003 0302 	and.w	r3, r3, #2
 8005156:	2b00      	cmp	r3, #0
 8005158:	d0ed      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800515a:	7dfb      	ldrb	r3, [r7, #23]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d126      	bne.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800516a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800516e:	d10d      	bne.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005170:	4b4c      	ldr	r3, [pc, #304]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800517e:	0919      	lsrs	r1, r3, #4
 8005180:	4b4a      	ldr	r3, [pc, #296]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8005182:	400b      	ands	r3, r1
 8005184:	4947      	ldr	r1, [pc, #284]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005186:	4313      	orrs	r3, r2
 8005188:	610b      	str	r3, [r1, #16]
 800518a:	e005      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800518c:	4b45      	ldr	r3, [pc, #276]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	4a44      	ldr	r2, [pc, #272]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005192:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005196:	6113      	str	r3, [r2, #16]
 8005198:	4b42      	ldr	r3, [pc, #264]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800519a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80051a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051a6:	493f      	ldr	r1, [pc, #252]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	670b      	str	r3, [r1, #112]	; 0x70
 80051ac:	e004      	b.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80051ae:	7dfb      	ldrb	r3, [r7, #23]
 80051b0:	75bb      	strb	r3, [r7, #22]
 80051b2:	e001      	b.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051b4:	7dfb      	ldrb	r3, [r7, #23]
 80051b6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0301 	and.w	r3, r3, #1
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f000 8085 	beq.w	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051ca:	2b28      	cmp	r3, #40	; 0x28
 80051cc:	d866      	bhi.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80051ce:	a201      	add	r2, pc, #4	; (adr r2, 80051d4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80051d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d4:	080052b1 	.word	0x080052b1
 80051d8:	0800529d 	.word	0x0800529d
 80051dc:	0800529d 	.word	0x0800529d
 80051e0:	0800529d 	.word	0x0800529d
 80051e4:	0800529d 	.word	0x0800529d
 80051e8:	0800529d 	.word	0x0800529d
 80051ec:	0800529d 	.word	0x0800529d
 80051f0:	0800529d 	.word	0x0800529d
 80051f4:	08005279 	.word	0x08005279
 80051f8:	0800529d 	.word	0x0800529d
 80051fc:	0800529d 	.word	0x0800529d
 8005200:	0800529d 	.word	0x0800529d
 8005204:	0800529d 	.word	0x0800529d
 8005208:	0800529d 	.word	0x0800529d
 800520c:	0800529d 	.word	0x0800529d
 8005210:	0800529d 	.word	0x0800529d
 8005214:	0800528b 	.word	0x0800528b
 8005218:	0800529d 	.word	0x0800529d
 800521c:	0800529d 	.word	0x0800529d
 8005220:	0800529d 	.word	0x0800529d
 8005224:	0800529d 	.word	0x0800529d
 8005228:	0800529d 	.word	0x0800529d
 800522c:	0800529d 	.word	0x0800529d
 8005230:	0800529d 	.word	0x0800529d
 8005234:	080052b1 	.word	0x080052b1
 8005238:	0800529d 	.word	0x0800529d
 800523c:	0800529d 	.word	0x0800529d
 8005240:	0800529d 	.word	0x0800529d
 8005244:	0800529d 	.word	0x0800529d
 8005248:	0800529d 	.word	0x0800529d
 800524c:	0800529d 	.word	0x0800529d
 8005250:	0800529d 	.word	0x0800529d
 8005254:	080052b1 	.word	0x080052b1
 8005258:	0800529d 	.word	0x0800529d
 800525c:	0800529d 	.word	0x0800529d
 8005260:	0800529d 	.word	0x0800529d
 8005264:	0800529d 	.word	0x0800529d
 8005268:	0800529d 	.word	0x0800529d
 800526c:	0800529d 	.word	0x0800529d
 8005270:	0800529d 	.word	0x0800529d
 8005274:	080052b1 	.word	0x080052b1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	3304      	adds	r3, #4
 800527c:	2101      	movs	r1, #1
 800527e:	4618      	mov	r0, r3
 8005280:	f000 fb3c 	bl	80058fc <RCCEx_PLL2_Config>
 8005284:	4603      	mov	r3, r0
 8005286:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005288:	e013      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	3324      	adds	r3, #36	; 0x24
 800528e:	2101      	movs	r1, #1
 8005290:	4618      	mov	r0, r3
 8005292:	f000 fbe5 	bl	8005a60 <RCCEx_PLL3_Config>
 8005296:	4603      	mov	r3, r0
 8005298:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800529a:	e00a      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	75fb      	strb	r3, [r7, #23]
      break;
 80052a0:	e007      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80052a2:	bf00      	nop
 80052a4:	58024400 	.word	0x58024400
 80052a8:	58024800 	.word	0x58024800
 80052ac:	00ffffcf 	.word	0x00ffffcf
      break;
 80052b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052b2:	7dfb      	ldrb	r3, [r7, #23]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d109      	bne.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80052b8:	4b96      	ldr	r3, [pc, #600]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80052ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052bc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052c4:	4993      	ldr	r1, [pc, #588]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	654b      	str	r3, [r1, #84]	; 0x54
 80052ca:	e001      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052cc:	7dfb      	ldrb	r3, [r7, #23]
 80052ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0302 	and.w	r3, r3, #2
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d038      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052e0:	2b05      	cmp	r3, #5
 80052e2:	d821      	bhi.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80052e4:	a201      	add	r2, pc, #4	; (adr r2, 80052ec <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80052e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ea:	bf00      	nop
 80052ec:	0800532f 	.word	0x0800532f
 80052f0:	08005305 	.word	0x08005305
 80052f4:	08005317 	.word	0x08005317
 80052f8:	0800532f 	.word	0x0800532f
 80052fc:	0800532f 	.word	0x0800532f
 8005300:	0800532f 	.word	0x0800532f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	3304      	adds	r3, #4
 8005308:	2101      	movs	r1, #1
 800530a:	4618      	mov	r0, r3
 800530c:	f000 faf6 	bl	80058fc <RCCEx_PLL2_Config>
 8005310:	4603      	mov	r3, r0
 8005312:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005314:	e00c      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	3324      	adds	r3, #36	; 0x24
 800531a:	2101      	movs	r1, #1
 800531c:	4618      	mov	r0, r3
 800531e:	f000 fb9f 	bl	8005a60 <RCCEx_PLL3_Config>
 8005322:	4603      	mov	r3, r0
 8005324:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005326:	e003      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	75fb      	strb	r3, [r7, #23]
      break;
 800532c:	e000      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800532e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005330:	7dfb      	ldrb	r3, [r7, #23]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d109      	bne.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005336:	4b77      	ldr	r3, [pc, #476]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800533a:	f023 0207 	bic.w	r2, r3, #7
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005342:	4974      	ldr	r1, [pc, #464]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005344:	4313      	orrs	r3, r2
 8005346:	654b      	str	r3, [r1, #84]	; 0x54
 8005348:	e001      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800534a:	7dfb      	ldrb	r3, [r7, #23]
 800534c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0304 	and.w	r3, r3, #4
 8005356:	2b00      	cmp	r3, #0
 8005358:	d03a      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005360:	2b05      	cmp	r3, #5
 8005362:	d821      	bhi.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8005364:	a201      	add	r2, pc, #4	; (adr r2, 800536c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8005366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800536a:	bf00      	nop
 800536c:	080053af 	.word	0x080053af
 8005370:	08005385 	.word	0x08005385
 8005374:	08005397 	.word	0x08005397
 8005378:	080053af 	.word	0x080053af
 800537c:	080053af 	.word	0x080053af
 8005380:	080053af 	.word	0x080053af
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	3304      	adds	r3, #4
 8005388:	2101      	movs	r1, #1
 800538a:	4618      	mov	r0, r3
 800538c:	f000 fab6 	bl	80058fc <RCCEx_PLL2_Config>
 8005390:	4603      	mov	r3, r0
 8005392:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005394:	e00c      	b.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	3324      	adds	r3, #36	; 0x24
 800539a:	2101      	movs	r1, #1
 800539c:	4618      	mov	r0, r3
 800539e:	f000 fb5f 	bl	8005a60 <RCCEx_PLL3_Config>
 80053a2:	4603      	mov	r3, r0
 80053a4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80053a6:	e003      	b.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	75fb      	strb	r3, [r7, #23]
      break;
 80053ac:	e000      	b.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80053ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053b0:	7dfb      	ldrb	r3, [r7, #23]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d10a      	bne.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053b6:	4b57      	ldr	r3, [pc, #348]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80053b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ba:	f023 0207 	bic.w	r2, r3, #7
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c4:	4953      	ldr	r1, [pc, #332]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	658b      	str	r3, [r1, #88]	; 0x58
 80053ca:	e001      	b.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053cc:	7dfb      	ldrb	r3, [r7, #23]
 80053ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0320 	and.w	r3, r3, #32
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d04b      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053e6:	d02e      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80053e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053ec:	d828      	bhi.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80053ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053f2:	d02a      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80053f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053f8:	d822      	bhi.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80053fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80053fe:	d026      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005400:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005404:	d81c      	bhi.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005406:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800540a:	d010      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800540c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005410:	d816      	bhi.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005412:	2b00      	cmp	r3, #0
 8005414:	d01d      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8005416:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800541a:	d111      	bne.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	3304      	adds	r3, #4
 8005420:	2100      	movs	r1, #0
 8005422:	4618      	mov	r0, r3
 8005424:	f000 fa6a 	bl	80058fc <RCCEx_PLL2_Config>
 8005428:	4603      	mov	r3, r0
 800542a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800542c:	e012      	b.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	3324      	adds	r3, #36	; 0x24
 8005432:	2102      	movs	r1, #2
 8005434:	4618      	mov	r0, r3
 8005436:	f000 fb13 	bl	8005a60 <RCCEx_PLL3_Config>
 800543a:	4603      	mov	r3, r0
 800543c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800543e:	e009      	b.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	75fb      	strb	r3, [r7, #23]
      break;
 8005444:	e006      	b.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005446:	bf00      	nop
 8005448:	e004      	b.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800544a:	bf00      	nop
 800544c:	e002      	b.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800544e:	bf00      	nop
 8005450:	e000      	b.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005452:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005454:	7dfb      	ldrb	r3, [r7, #23]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10a      	bne.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800545a:	4b2e      	ldr	r3, [pc, #184]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800545c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800545e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005468:	492a      	ldr	r1, [pc, #168]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800546a:	4313      	orrs	r3, r2
 800546c:	654b      	str	r3, [r1, #84]	; 0x54
 800546e:	e001      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005470:	7dfb      	ldrb	r3, [r7, #23]
 8005472:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800547c:	2b00      	cmp	r3, #0
 800547e:	d04d      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005486:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800548a:	d02e      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800548c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005490:	d828      	bhi.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005496:	d02a      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800549c:	d822      	bhi.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800549e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054a2:	d026      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80054a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054a8:	d81c      	bhi.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80054aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054ae:	d010      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80054b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054b4:	d816      	bhi.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d01d      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80054ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054be:	d111      	bne.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	3304      	adds	r3, #4
 80054c4:	2100      	movs	r1, #0
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 fa18 	bl	80058fc <RCCEx_PLL2_Config>
 80054cc:	4603      	mov	r3, r0
 80054ce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80054d0:	e012      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	3324      	adds	r3, #36	; 0x24
 80054d6:	2102      	movs	r1, #2
 80054d8:	4618      	mov	r0, r3
 80054da:	f000 fac1 	bl	8005a60 <RCCEx_PLL3_Config>
 80054de:	4603      	mov	r3, r0
 80054e0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80054e2:	e009      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	75fb      	strb	r3, [r7, #23]
      break;
 80054e8:	e006      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80054ea:	bf00      	nop
 80054ec:	e004      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80054ee:	bf00      	nop
 80054f0:	e002      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80054f2:	bf00      	nop
 80054f4:	e000      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80054f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054f8:	7dfb      	ldrb	r3, [r7, #23]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10c      	bne.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054fe:	4b05      	ldr	r3, [pc, #20]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005502:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800550c:	4901      	ldr	r1, [pc, #4]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800550e:	4313      	orrs	r3, r2
 8005510:	658b      	str	r3, [r1, #88]	; 0x58
 8005512:	e003      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005514:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005518:	7dfb      	ldrb	r3, [r7, #23]
 800551a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005524:	2b00      	cmp	r3, #0
 8005526:	d04b      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800552e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005532:	d02e      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005534:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005538:	d828      	bhi.n	800558c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800553a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800553e:	d02a      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005540:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005544:	d822      	bhi.n	800558c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005546:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800554a:	d026      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800554c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005550:	d81c      	bhi.n	800558c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005552:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005556:	d010      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8005558:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800555c:	d816      	bhi.n	800558c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800555e:	2b00      	cmp	r3, #0
 8005560:	d01d      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8005562:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005566:	d111      	bne.n	800558c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	3304      	adds	r3, #4
 800556c:	2100      	movs	r1, #0
 800556e:	4618      	mov	r0, r3
 8005570:	f000 f9c4 	bl	80058fc <RCCEx_PLL2_Config>
 8005574:	4603      	mov	r3, r0
 8005576:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005578:	e012      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	3324      	adds	r3, #36	; 0x24
 800557e:	2102      	movs	r1, #2
 8005580:	4618      	mov	r0, r3
 8005582:	f000 fa6d 	bl	8005a60 <RCCEx_PLL3_Config>
 8005586:	4603      	mov	r3, r0
 8005588:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800558a:	e009      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	75fb      	strb	r3, [r7, #23]
      break;
 8005590:	e006      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005592:	bf00      	nop
 8005594:	e004      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005596:	bf00      	nop
 8005598:	e002      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800559a:	bf00      	nop
 800559c:	e000      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800559e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055a0:	7dfb      	ldrb	r3, [r7, #23]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10a      	bne.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80055a6:	4b9d      	ldr	r3, [pc, #628]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80055a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055b4:	4999      	ldr	r1, [pc, #612]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	658b      	str	r3, [r1, #88]	; 0x58
 80055ba:	e001      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055bc:	7dfb      	ldrb	r3, [r7, #23]
 80055be:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0308 	and.w	r3, r3, #8
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d01a      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055d6:	d10a      	bne.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	3324      	adds	r3, #36	; 0x24
 80055dc:	2102      	movs	r1, #2
 80055de:	4618      	mov	r0, r3
 80055e0:	f000 fa3e 	bl	8005a60 <RCCEx_PLL3_Config>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d001      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80055ee:	4b8b      	ldr	r3, [pc, #556]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80055f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055fc:	4987      	ldr	r1, [pc, #540]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0310 	and.w	r3, r3, #16
 800560a:	2b00      	cmp	r3, #0
 800560c:	d01a      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005614:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005618:	d10a      	bne.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	3324      	adds	r3, #36	; 0x24
 800561e:	2102      	movs	r1, #2
 8005620:	4618      	mov	r0, r3
 8005622:	f000 fa1d 	bl	8005a60 <RCCEx_PLL3_Config>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d001      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005630:	4b7a      	ldr	r3, [pc, #488]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005634:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800563e:	4977      	ldr	r1, [pc, #476]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005640:	4313      	orrs	r3, r2
 8005642:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d034      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005656:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800565a:	d01d      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800565c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005660:	d817      	bhi.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8005662:	2b00      	cmp	r3, #0
 8005664:	d003      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005666:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800566a:	d009      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800566c:	e011      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	3304      	adds	r3, #4
 8005672:	2100      	movs	r1, #0
 8005674:	4618      	mov	r0, r3
 8005676:	f000 f941 	bl	80058fc <RCCEx_PLL2_Config>
 800567a:	4603      	mov	r3, r0
 800567c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800567e:	e00c      	b.n	800569a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	3324      	adds	r3, #36	; 0x24
 8005684:	2102      	movs	r1, #2
 8005686:	4618      	mov	r0, r3
 8005688:	f000 f9ea 	bl	8005a60 <RCCEx_PLL3_Config>
 800568c:	4603      	mov	r3, r0
 800568e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005690:	e003      	b.n	800569a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	75fb      	strb	r3, [r7, #23]
      break;
 8005696:	e000      	b.n	800569a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8005698:	bf00      	nop
    }

    if(ret == HAL_OK)
 800569a:	7dfb      	ldrb	r3, [r7, #23]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d10a      	bne.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80056a0:	4b5e      	ldr	r3, [pc, #376]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80056a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80056ae:	495b      	ldr	r1, [pc, #364]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80056b0:	4313      	orrs	r3, r2
 80056b2:	658b      	str	r3, [r1, #88]	; 0x58
 80056b4:	e001      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056b6:	7dfb      	ldrb	r3, [r7, #23]
 80056b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d033      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80056d0:	d01c      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80056d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80056d6:	d816      	bhi.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80056d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056dc:	d003      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80056de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056e2:	d007      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80056e4:	e00f      	b.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056e6:	4b4d      	ldr	r3, [pc, #308]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80056e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ea:	4a4c      	ldr	r2, [pc, #304]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80056ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80056f2:	e00c      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	3324      	adds	r3, #36	; 0x24
 80056f8:	2101      	movs	r1, #1
 80056fa:	4618      	mov	r0, r3
 80056fc:	f000 f9b0 	bl	8005a60 <RCCEx_PLL3_Config>
 8005700:	4603      	mov	r3, r0
 8005702:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005704:	e003      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	75fb      	strb	r3, [r7, #23]
      break;
 800570a:	e000      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800570c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800570e:	7dfb      	ldrb	r3, [r7, #23]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d10a      	bne.n	800572a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005714:	4b41      	ldr	r3, [pc, #260]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005718:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005722:	493e      	ldr	r1, [pc, #248]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005724:	4313      	orrs	r3, r2
 8005726:	654b      	str	r3, [r1, #84]	; 0x54
 8005728:	e001      	b.n	800572e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800572a:	7dfb      	ldrb	r3, [r7, #23]
 800572c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d029      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800573e:	2b00      	cmp	r3, #0
 8005740:	d003      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8005742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005746:	d007      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8005748:	e00f      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800574a:	4b34      	ldr	r3, [pc, #208]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800574c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574e:	4a33      	ldr	r2, [pc, #204]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005754:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005756:	e00b      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	3304      	adds	r3, #4
 800575c:	2102      	movs	r1, #2
 800575e:	4618      	mov	r0, r3
 8005760:	f000 f8cc 	bl	80058fc <RCCEx_PLL2_Config>
 8005764:	4603      	mov	r3, r0
 8005766:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005768:	e002      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	75fb      	strb	r3, [r7, #23]
      break;
 800576e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005770:	7dfb      	ldrb	r3, [r7, #23]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d109      	bne.n	800578a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005776:	4b29      	ldr	r3, [pc, #164]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800577a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005782:	4926      	ldr	r1, [pc, #152]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005784:	4313      	orrs	r3, r2
 8005786:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005788:	e001      	b.n	800578e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800578a:	7dfb      	ldrb	r3, [r7, #23]
 800578c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00a      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	3324      	adds	r3, #36	; 0x24
 800579e:	2102      	movs	r1, #2
 80057a0:	4618      	mov	r0, r3
 80057a2:	f000 f95d 	bl	8005a60 <RCCEx_PLL3_Config>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d001      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d033      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057c4:	d017      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80057c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057ca:	d811      	bhi.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80057cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057d0:	d013      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80057d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057d6:	d80b      	bhi.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d010      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80057dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057e0:	d106      	bne.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057e2:	4b0e      	ldr	r3, [pc, #56]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80057e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e6:	4a0d      	ldr	r2, [pc, #52]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80057e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80057ee:	e007      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	75fb      	strb	r3, [r7, #23]
      break;
 80057f4:	e004      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80057f6:	bf00      	nop
 80057f8:	e002      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80057fa:	bf00      	nop
 80057fc:	e000      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80057fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005800:	7dfb      	ldrb	r3, [r7, #23]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10c      	bne.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005806:	4b05      	ldr	r3, [pc, #20]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800580a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005812:	4902      	ldr	r1, [pc, #8]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005814:	4313      	orrs	r3, r2
 8005816:	654b      	str	r3, [r1, #84]	; 0x54
 8005818:	e004      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800581a:	bf00      	nop
 800581c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005820:	7dfb      	ldrb	r3, [r7, #23]
 8005822:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d008      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005830:	4b31      	ldr	r3, [pc, #196]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005834:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800583c:	492e      	ldr	r1, [pc, #184]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800583e:	4313      	orrs	r3, r2
 8005840:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d009      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800584e:	4b2a      	ldr	r3, [pc, #168]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800585c:	4926      	ldr	r1, [pc, #152]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800585e:	4313      	orrs	r3, r2
 8005860:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d008      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800586e:	4b22      	ldr	r3, [pc, #136]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005872:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800587a:	491f      	ldr	r1, [pc, #124]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800587c:	4313      	orrs	r3, r2
 800587e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00d      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800588c:	4b1a      	ldr	r3, [pc, #104]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	4a19      	ldr	r2, [pc, #100]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005892:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005896:	6113      	str	r3, [r2, #16]
 8005898:	4b17      	ldr	r3, [pc, #92]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800589a:	691a      	ldr	r2, [r3, #16]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80058a2:	4915      	ldr	r1, [pc, #84]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	da08      	bge.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80058b0:	4b11      	ldr	r3, [pc, #68]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80058b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058b4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058bc:	490e      	ldr	r1, [pc, #56]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d009      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80058ce:	4b0a      	ldr	r3, [pc, #40]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80058d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058dc:	4906      	ldr	r1, [pc, #24]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80058e2:	7dbb      	ldrb	r3, [r7, #22]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d101      	bne.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80058e8:	2300      	movs	r3, #0
 80058ea:	e000      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3718      	adds	r7, #24
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	58024400 	.word	0x58024400

080058fc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005906:	2300      	movs	r3, #0
 8005908:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800590a:	4b53      	ldr	r3, [pc, #332]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 800590c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590e:	f003 0303 	and.w	r3, r3, #3
 8005912:	2b03      	cmp	r3, #3
 8005914:	d101      	bne.n	800591a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e099      	b.n	8005a4e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800591a:	4b4f      	ldr	r3, [pc, #316]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a4e      	ldr	r2, [pc, #312]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 8005920:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005924:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005926:	f7fc fff9 	bl	800291c <HAL_GetTick>
 800592a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800592c:	e008      	b.n	8005940 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800592e:	f7fc fff5 	bl	800291c <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	2b02      	cmp	r3, #2
 800593a:	d901      	bls.n	8005940 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e086      	b.n	8005a4e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005940:	4b45      	ldr	r3, [pc, #276]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d1f0      	bne.n	800592e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800594c:	4b42      	ldr	r3, [pc, #264]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 800594e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005950:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	031b      	lsls	r3, r3, #12
 800595a:	493f      	ldr	r1, [pc, #252]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 800595c:	4313      	orrs	r3, r2
 800595e:	628b      	str	r3, [r1, #40]	; 0x28
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	3b01      	subs	r3, #1
 8005966:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	3b01      	subs	r3, #1
 8005970:	025b      	lsls	r3, r3, #9
 8005972:	b29b      	uxth	r3, r3
 8005974:	431a      	orrs	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	3b01      	subs	r3, #1
 800597c:	041b      	lsls	r3, r3, #16
 800597e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005982:	431a      	orrs	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	3b01      	subs	r3, #1
 800598a:	061b      	lsls	r3, r3, #24
 800598c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005990:	4931      	ldr	r1, [pc, #196]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 8005992:	4313      	orrs	r3, r2
 8005994:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005996:	4b30      	ldr	r3, [pc, #192]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 8005998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	492d      	ldr	r1, [pc, #180]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 80059a4:	4313      	orrs	r3, r2
 80059a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80059a8:	4b2b      	ldr	r3, [pc, #172]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 80059aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ac:	f023 0220 	bic.w	r2, r3, #32
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	4928      	ldr	r1, [pc, #160]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80059ba:	4b27      	ldr	r3, [pc, #156]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 80059bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059be:	4a26      	ldr	r2, [pc, #152]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 80059c0:	f023 0310 	bic.w	r3, r3, #16
 80059c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80059c6:	4b24      	ldr	r3, [pc, #144]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 80059c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059ca:	4b24      	ldr	r3, [pc, #144]	; (8005a5c <RCCEx_PLL2_Config+0x160>)
 80059cc:	4013      	ands	r3, r2
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	69d2      	ldr	r2, [r2, #28]
 80059d2:	00d2      	lsls	r2, r2, #3
 80059d4:	4920      	ldr	r1, [pc, #128]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80059da:	4b1f      	ldr	r3, [pc, #124]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 80059dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059de:	4a1e      	ldr	r2, [pc, #120]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 80059e0:	f043 0310 	orr.w	r3, r3, #16
 80059e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d106      	bne.n	80059fa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80059ec:	4b1a      	ldr	r3, [pc, #104]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 80059ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f0:	4a19      	ldr	r2, [pc, #100]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 80059f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80059f8:	e00f      	b.n	8005a1a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d106      	bne.n	8005a0e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005a00:	4b15      	ldr	r3, [pc, #84]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 8005a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a04:	4a14      	ldr	r2, [pc, #80]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 8005a06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a0c:	e005      	b.n	8005a1a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005a0e:	4b12      	ldr	r3, [pc, #72]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 8005a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a12:	4a11      	ldr	r2, [pc, #68]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 8005a14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a18:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005a1a:	4b0f      	ldr	r3, [pc, #60]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a0e      	ldr	r2, [pc, #56]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 8005a20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a26:	f7fc ff79 	bl	800291c <HAL_GetTick>
 8005a2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005a2c:	e008      	b.n	8005a40 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005a2e:	f7fc ff75 	bl	800291c <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d901      	bls.n	8005a40 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e006      	b.n	8005a4e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005a40:	4b05      	ldr	r3, [pc, #20]	; (8005a58 <RCCEx_PLL2_Config+0x15c>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d0f0      	beq.n	8005a2e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	58024400 	.word	0x58024400
 8005a5c:	ffff0007 	.word	0xffff0007

08005a60 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005a6e:	4b53      	ldr	r3, [pc, #332]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a72:	f003 0303 	and.w	r3, r3, #3
 8005a76:	2b03      	cmp	r3, #3
 8005a78:	d101      	bne.n	8005a7e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e099      	b.n	8005bb2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005a7e:	4b4f      	ldr	r3, [pc, #316]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a4e      	ldr	r2, [pc, #312]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005a84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a8a:	f7fc ff47 	bl	800291c <HAL_GetTick>
 8005a8e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005a90:	e008      	b.n	8005aa4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005a92:	f7fc ff43 	bl	800291c <HAL_GetTick>
 8005a96:	4602      	mov	r2, r0
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	d901      	bls.n	8005aa4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e086      	b.n	8005bb2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005aa4:	4b45      	ldr	r3, [pc, #276]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1f0      	bne.n	8005a92 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005ab0:	4b42      	ldr	r3, [pc, #264]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	051b      	lsls	r3, r3, #20
 8005abe:	493f      	ldr	r1, [pc, #252]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	628b      	str	r3, [r1, #40]	; 0x28
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	025b      	lsls	r3, r3, #9
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	431a      	orrs	r2, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	041b      	lsls	r3, r3, #16
 8005ae2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005ae6:	431a      	orrs	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	3b01      	subs	r3, #1
 8005aee:	061b      	lsls	r3, r3, #24
 8005af0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005af4:	4931      	ldr	r1, [pc, #196]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005afa:	4b30      	ldr	r3, [pc, #192]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	695b      	ldr	r3, [r3, #20]
 8005b06:	492d      	ldr	r1, [pc, #180]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005b0c:	4b2b      	ldr	r3, [pc, #172]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b10:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	699b      	ldr	r3, [r3, #24]
 8005b18:	4928      	ldr	r1, [pc, #160]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005b1e:	4b27      	ldr	r3, [pc, #156]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b22:	4a26      	ldr	r2, [pc, #152]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005b24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005b2a:	4b24      	ldr	r3, [pc, #144]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005b2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b2e:	4b24      	ldr	r3, [pc, #144]	; (8005bc0 <RCCEx_PLL3_Config+0x160>)
 8005b30:	4013      	ands	r3, r2
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	69d2      	ldr	r2, [r2, #28]
 8005b36:	00d2      	lsls	r2, r2, #3
 8005b38:	4920      	ldr	r1, [pc, #128]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005b3e:	4b1f      	ldr	r3, [pc, #124]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b42:	4a1e      	ldr	r2, [pc, #120]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d106      	bne.n	8005b5e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005b50:	4b1a      	ldr	r3, [pc, #104]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b54:	4a19      	ldr	r2, [pc, #100]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005b56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005b5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b5c:	e00f      	b.n	8005b7e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d106      	bne.n	8005b72 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005b64:	4b15      	ldr	r3, [pc, #84]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b68:	4a14      	ldr	r2, [pc, #80]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005b6a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005b6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b70:	e005      	b.n	8005b7e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005b72:	4b12      	ldr	r3, [pc, #72]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b76:	4a11      	ldr	r2, [pc, #68]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005b78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b7c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005b7e:	4b0f      	ldr	r3, [pc, #60]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a0e      	ldr	r2, [pc, #56]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b8a:	f7fc fec7 	bl	800291c <HAL_GetTick>
 8005b8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005b90:	e008      	b.n	8005ba4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005b92:	f7fc fec3 	bl	800291c <HAL_GetTick>
 8005b96:	4602      	mov	r2, r0
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d901      	bls.n	8005ba4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e006      	b.n	8005bb2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ba4:	4b05      	ldr	r3, [pc, #20]	; (8005bbc <RCCEx_PLL3_Config+0x15c>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d0f0      	beq.n	8005b92 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3710      	adds	r7, #16
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	58024400 	.word	0x58024400
 8005bc0:	ffff0007 	.word	0xffff0007

08005bc4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005bc4:	b084      	sub	sp, #16
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b084      	sub	sp, #16
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
 8005bce:	f107 001c 	add.w	r0, r7, #28
 8005bd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d120      	bne.n	8005c1e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	68da      	ldr	r2, [r3, #12]
 8005bec:	4b2a      	ldr	r3, [pc, #168]	; (8005c98 <USB_CoreInit+0xd4>)
 8005bee:	4013      	ands	r3, r2
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d105      	bne.n	8005c12 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 faac 	bl	8006170 <USB_CoreReset>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	73fb      	strb	r3, [r7, #15]
 8005c1c:	e01a      	b.n	8005c54 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 faa0 	bl	8006170 <USB_CoreReset>
 8005c30:	4603      	mov	r3, r0
 8005c32:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d106      	bne.n	8005c48 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	639a      	str	r2, [r3, #56]	; 0x38
 8005c46:	e005      	b.n	8005c54 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d116      	bne.n	8005c88 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c5e:	b29a      	uxth	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c68:	4b0c      	ldr	r3, [pc, #48]	; (8005c9c <USB_CoreInit+0xd8>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	f043 0206 	orr.w	r2, r3, #6
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f043 0220 	orr.w	r2, r3, #32
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3710      	adds	r7, #16
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c94:	b004      	add	sp, #16
 8005c96:	4770      	bx	lr
 8005c98:	ffbdffbf 	.word	0xffbdffbf
 8005c9c:	03ee0000 	.word	0x03ee0000

08005ca0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	f023 0201 	bic.w	r2, r3, #1
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	370c      	adds	r7, #12
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr

08005cc2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b084      	sub	sp, #16
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
 8005cca:	460b      	mov	r3, r1
 8005ccc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005cde:	78fb      	ldrb	r3, [r7, #3]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d115      	bne.n	8005d10 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005cf0:	2001      	movs	r0, #1
 8005cf2:	f7fc fe1f 	bl	8002934 <HAL_Delay>
      ms++;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 fa29 	bl	8006154 <USB_GetMode>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d01e      	beq.n	8005d46 <USB_SetCurrentMode+0x84>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2b31      	cmp	r3, #49	; 0x31
 8005d0c:	d9f0      	bls.n	8005cf0 <USB_SetCurrentMode+0x2e>
 8005d0e:	e01a      	b.n	8005d46 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005d10:	78fb      	ldrb	r3, [r7, #3]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d115      	bne.n	8005d42 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005d22:	2001      	movs	r0, #1
 8005d24:	f7fc fe06 	bl	8002934 <HAL_Delay>
      ms++;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 fa10 	bl	8006154 <USB_GetMode>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d005      	beq.n	8005d46 <USB_SetCurrentMode+0x84>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2b31      	cmp	r3, #49	; 0x31
 8005d3e:	d9f0      	bls.n	8005d22 <USB_SetCurrentMode+0x60>
 8005d40:	e001      	b.n	8005d46 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e005      	b.n	8005d52 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2b32      	cmp	r3, #50	; 0x32
 8005d4a:	d101      	bne.n	8005d50 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e000      	b.n	8005d52 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
	...

08005d5c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d5c:	b084      	sub	sp, #16
 8005d5e:	b580      	push	{r7, lr}
 8005d60:	b086      	sub	sp, #24
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
 8005d66:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005d6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005d76:	2300      	movs	r3, #0
 8005d78:	613b      	str	r3, [r7, #16]
 8005d7a:	e009      	b.n	8005d90 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	3340      	adds	r3, #64	; 0x40
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	4413      	add	r3, r2
 8005d86:	2200      	movs	r2, #0
 8005d88:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	613b      	str	r3, [r7, #16]
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	2b0e      	cmp	r3, #14
 8005d94:	d9f2      	bls.n	8005d7c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d11c      	bne.n	8005dd6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005daa:	f043 0302 	orr.w	r3, r3, #2
 8005dae:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	601a      	str	r2, [r3, #0]
 8005dd4:	e005      	b.n	8005de2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dda:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005de8:	461a      	mov	r2, r3
 8005dea:	2300      	movs	r3, #0
 8005dec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005df4:	4619      	mov	r1, r3
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	680b      	ldr	r3, [r1, #0]
 8005e00:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d10c      	bne.n	8005e22 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d104      	bne.n	8005e18 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005e0e:	2100      	movs	r1, #0
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 f965 	bl	80060e0 <USB_SetDevSpeed>
 8005e16:	e008      	b.n	8005e2a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005e18:	2101      	movs	r1, #1
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 f960 	bl	80060e0 <USB_SetDevSpeed>
 8005e20:	e003      	b.n	8005e2a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005e22:	2103      	movs	r1, #3
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 f95b 	bl	80060e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005e2a:	2110      	movs	r1, #16
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 f8f3 	bl	8006018 <USB_FlushTxFifo>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d001      	beq.n	8005e3c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 f91f 	bl	8006080 <USB_FlushRxFifo>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d001      	beq.n	8005e4c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e52:	461a      	mov	r2, r3
 8005e54:	2300      	movs	r3, #0
 8005e56:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e5e:	461a      	mov	r2, r3
 8005e60:	2300      	movs	r3, #0
 8005e62:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e70:	2300      	movs	r3, #0
 8005e72:	613b      	str	r3, [r7, #16]
 8005e74:	e043      	b.n	8005efe <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	015a      	lsls	r2, r3, #5
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e8c:	d118      	bne.n	8005ec0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d10a      	bne.n	8005eaa <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	015a      	lsls	r2, r3, #5
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005ea6:	6013      	str	r3, [r2, #0]
 8005ea8:	e013      	b.n	8005ed2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005ebc:	6013      	str	r3, [r2, #0]
 8005ebe:	e008      	b.n	8005ed2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	015a      	lsls	r2, r3, #5
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ecc:	461a      	mov	r2, r3
 8005ece:	2300      	movs	r3, #0
 8005ed0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	015a      	lsls	r2, r3, #5
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	4413      	add	r3, r2
 8005eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ede:	461a      	mov	r2, r3
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	015a      	lsls	r2, r3, #5
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ef6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	3301      	adds	r3, #1
 8005efc:	613b      	str	r3, [r7, #16]
 8005efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f00:	693a      	ldr	r2, [r7, #16]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d3b7      	bcc.n	8005e76 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f06:	2300      	movs	r3, #0
 8005f08:	613b      	str	r3, [r7, #16]
 8005f0a:	e043      	b.n	8005f94 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	015a      	lsls	r2, r3, #5
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	4413      	add	r3, r2
 8005f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f22:	d118      	bne.n	8005f56 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d10a      	bne.n	8005f40 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	015a      	lsls	r2, r3, #5
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	4413      	add	r3, r2
 8005f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f36:	461a      	mov	r2, r3
 8005f38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005f3c:	6013      	str	r3, [r2, #0]
 8005f3e:	e013      	b.n	8005f68 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	015a      	lsls	r2, r3, #5
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	4413      	add	r3, r2
 8005f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005f52:	6013      	str	r3, [r2, #0]
 8005f54:	e008      	b.n	8005f68 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f62:	461a      	mov	r2, r3
 8005f64:	2300      	movs	r3, #0
 8005f66:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	015a      	lsls	r2, r3, #5
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	4413      	add	r3, r2
 8005f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f74:	461a      	mov	r2, r3
 8005f76:	2300      	movs	r3, #0
 8005f78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	015a      	lsls	r2, r3, #5
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	4413      	add	r3, r2
 8005f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f86:	461a      	mov	r2, r3
 8005f88:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f8c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	3301      	adds	r3, #1
 8005f92:	613b      	str	r3, [r7, #16]
 8005f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f96:	693a      	ldr	r2, [r7, #16]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d3b7      	bcc.n	8005f0c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005faa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005fbc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d105      	bne.n	8005fd0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	699b      	ldr	r3, [r3, #24]
 8005fc8:	f043 0210 	orr.w	r2, r3, #16
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	699a      	ldr	r2, [r3, #24]
 8005fd4:	4b0e      	ldr	r3, [pc, #56]	; (8006010 <USB_DevInit+0x2b4>)
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d005      	beq.n	8005fee <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	f043 0208 	orr.w	r2, r3, #8
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005fee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d105      	bne.n	8006000 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	699a      	ldr	r2, [r3, #24]
 8005ff8:	4b06      	ldr	r3, [pc, #24]	; (8006014 <USB_DevInit+0x2b8>)
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006000:	7dfb      	ldrb	r3, [r7, #23]
}
 8006002:	4618      	mov	r0, r3
 8006004:	3718      	adds	r7, #24
 8006006:	46bd      	mov	sp, r7
 8006008:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800600c:	b004      	add	sp, #16
 800600e:	4770      	bx	lr
 8006010:	803c3800 	.word	0x803c3800
 8006014:	40000004 	.word	0x40000004

08006018 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006018:	b480      	push	{r7}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006022:	2300      	movs	r3, #0
 8006024:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	3301      	adds	r3, #1
 800602a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	4a13      	ldr	r2, [pc, #76]	; (800607c <USB_FlushTxFifo+0x64>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d901      	bls.n	8006038 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006034:	2303      	movs	r3, #3
 8006036:	e01b      	b.n	8006070 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	2b00      	cmp	r3, #0
 800603e:	daf2      	bge.n	8006026 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006040:	2300      	movs	r3, #0
 8006042:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	019b      	lsls	r3, r3, #6
 8006048:	f043 0220 	orr.w	r2, r3, #32
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	3301      	adds	r3, #1
 8006054:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	4a08      	ldr	r2, [pc, #32]	; (800607c <USB_FlushTxFifo+0x64>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d901      	bls.n	8006062 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e006      	b.n	8006070 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	f003 0320 	and.w	r3, r3, #32
 800606a:	2b20      	cmp	r3, #32
 800606c:	d0f0      	beq.n	8006050 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800606e:	2300      	movs	r3, #0
}
 8006070:	4618      	mov	r0, r3
 8006072:	3714      	adds	r7, #20
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr
 800607c:	00030d40 	.word	0x00030d40

08006080 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006088:	2300      	movs	r3, #0
 800608a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	3301      	adds	r3, #1
 8006090:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	4a11      	ldr	r2, [pc, #68]	; (80060dc <USB_FlushRxFifo+0x5c>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d901      	bls.n	800609e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e018      	b.n	80060d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	daf2      	bge.n	800608c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80060a6:	2300      	movs	r3, #0
 80060a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2210      	movs	r2, #16
 80060ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	3301      	adds	r3, #1
 80060b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	4a08      	ldr	r2, [pc, #32]	; (80060dc <USB_FlushRxFifo+0x5c>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d901      	bls.n	80060c2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e006      	b.n	80060d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	f003 0310 	and.w	r3, r3, #16
 80060ca:	2b10      	cmp	r3, #16
 80060cc:	d0f0      	beq.n	80060b0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3714      	adds	r7, #20
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr
 80060dc:	00030d40 	.word	0x00030d40

080060e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	460b      	mov	r3, r1
 80060ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	78fb      	ldrb	r3, [r7, #3]
 80060fa:	68f9      	ldr	r1, [r7, #12]
 80060fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006100:	4313      	orrs	r3, r2
 8006102:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3714      	adds	r7, #20
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr

08006112 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006112:	b480      	push	{r7}
 8006114:	b085      	sub	sp, #20
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800612c:	f023 0303 	bic.w	r3, r3, #3
 8006130:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006140:	f043 0302 	orr.w	r3, r3, #2
 8006144:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006146:	2300      	movs	r3, #0
}
 8006148:	4618      	mov	r0, r3
 800614a:	3714      	adds	r7, #20
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	695b      	ldr	r3, [r3, #20]
 8006160:	f003 0301 	and.w	r3, r3, #1
}
 8006164:	4618      	mov	r0, r3
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006170:	b480      	push	{r7}
 8006172:	b085      	sub	sp, #20
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006178:	2300      	movs	r3, #0
 800617a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	3301      	adds	r3, #1
 8006180:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	4a13      	ldr	r2, [pc, #76]	; (80061d4 <USB_CoreReset+0x64>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d901      	bls.n	800618e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	e01b      	b.n	80061c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	2b00      	cmp	r3, #0
 8006194:	daf2      	bge.n	800617c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006196:	2300      	movs	r3, #0
 8006198:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	f043 0201 	orr.w	r2, r3, #1
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	3301      	adds	r3, #1
 80061aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	4a09      	ldr	r2, [pc, #36]	; (80061d4 <USB_CoreReset+0x64>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d901      	bls.n	80061b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e006      	b.n	80061c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	f003 0301 	and.w	r3, r3, #1
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d0f0      	beq.n	80061a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3714      	adds	r7, #20
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	00030d40 	.word	0x00030d40

080061d8 <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 80061d8:	b480      	push	{r7}
 80061da:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 80061dc:	bf00      	nop
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
	...

080061e8 <__errno>:
 80061e8:	4b01      	ldr	r3, [pc, #4]	; (80061f0 <__errno+0x8>)
 80061ea:	6818      	ldr	r0, [r3, #0]
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop
 80061f0:	24000068 	.word	0x24000068

080061f4 <__libc_init_array>:
 80061f4:	b570      	push	{r4, r5, r6, lr}
 80061f6:	4d0d      	ldr	r5, [pc, #52]	; (800622c <__libc_init_array+0x38>)
 80061f8:	4c0d      	ldr	r4, [pc, #52]	; (8006230 <__libc_init_array+0x3c>)
 80061fa:	1b64      	subs	r4, r4, r5
 80061fc:	10a4      	asrs	r4, r4, #2
 80061fe:	2600      	movs	r6, #0
 8006200:	42a6      	cmp	r6, r4
 8006202:	d109      	bne.n	8006218 <__libc_init_array+0x24>
 8006204:	4d0b      	ldr	r5, [pc, #44]	; (8006234 <__libc_init_array+0x40>)
 8006206:	4c0c      	ldr	r4, [pc, #48]	; (8006238 <__libc_init_array+0x44>)
 8006208:	f000 fcd0 	bl	8006bac <_init>
 800620c:	1b64      	subs	r4, r4, r5
 800620e:	10a4      	asrs	r4, r4, #2
 8006210:	2600      	movs	r6, #0
 8006212:	42a6      	cmp	r6, r4
 8006214:	d105      	bne.n	8006222 <__libc_init_array+0x2e>
 8006216:	bd70      	pop	{r4, r5, r6, pc}
 8006218:	f855 3b04 	ldr.w	r3, [r5], #4
 800621c:	4798      	blx	r3
 800621e:	3601      	adds	r6, #1
 8006220:	e7ee      	b.n	8006200 <__libc_init_array+0xc>
 8006222:	f855 3b04 	ldr.w	r3, [r5], #4
 8006226:	4798      	blx	r3
 8006228:	3601      	adds	r6, #1
 800622a:	e7f2      	b.n	8006212 <__libc_init_array+0x1e>
 800622c:	080187b8 	.word	0x080187b8
 8006230:	080187b8 	.word	0x080187b8
 8006234:	080187b8 	.word	0x080187b8
 8006238:	080187bc 	.word	0x080187bc

0800623c <__retarget_lock_acquire_recursive>:
 800623c:	4770      	bx	lr

0800623e <__retarget_lock_release_recursive>:
 800623e:	4770      	bx	lr

08006240 <memcpy>:
 8006240:	440a      	add	r2, r1
 8006242:	4291      	cmp	r1, r2
 8006244:	f100 33ff 	add.w	r3, r0, #4294967295
 8006248:	d100      	bne.n	800624c <memcpy+0xc>
 800624a:	4770      	bx	lr
 800624c:	b510      	push	{r4, lr}
 800624e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006252:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006256:	4291      	cmp	r1, r2
 8006258:	d1f9      	bne.n	800624e <memcpy+0xe>
 800625a:	bd10      	pop	{r4, pc}

0800625c <memset>:
 800625c:	4402      	add	r2, r0
 800625e:	4603      	mov	r3, r0
 8006260:	4293      	cmp	r3, r2
 8006262:	d100      	bne.n	8006266 <memset+0xa>
 8006264:	4770      	bx	lr
 8006266:	f803 1b01 	strb.w	r1, [r3], #1
 800626a:	e7f9      	b.n	8006260 <memset+0x4>

0800626c <_free_r>:
 800626c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800626e:	2900      	cmp	r1, #0
 8006270:	d044      	beq.n	80062fc <_free_r+0x90>
 8006272:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006276:	9001      	str	r0, [sp, #4]
 8006278:	2b00      	cmp	r3, #0
 800627a:	f1a1 0404 	sub.w	r4, r1, #4
 800627e:	bfb8      	it	lt
 8006280:	18e4      	addlt	r4, r4, r3
 8006282:	f000 f903 	bl	800648c <__malloc_lock>
 8006286:	4a1e      	ldr	r2, [pc, #120]	; (8006300 <_free_r+0x94>)
 8006288:	9801      	ldr	r0, [sp, #4]
 800628a:	6813      	ldr	r3, [r2, #0]
 800628c:	b933      	cbnz	r3, 800629c <_free_r+0x30>
 800628e:	6063      	str	r3, [r4, #4]
 8006290:	6014      	str	r4, [r2, #0]
 8006292:	b003      	add	sp, #12
 8006294:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006298:	f000 b8fe 	b.w	8006498 <__malloc_unlock>
 800629c:	42a3      	cmp	r3, r4
 800629e:	d908      	bls.n	80062b2 <_free_r+0x46>
 80062a0:	6825      	ldr	r5, [r4, #0]
 80062a2:	1961      	adds	r1, r4, r5
 80062a4:	428b      	cmp	r3, r1
 80062a6:	bf01      	itttt	eq
 80062a8:	6819      	ldreq	r1, [r3, #0]
 80062aa:	685b      	ldreq	r3, [r3, #4]
 80062ac:	1949      	addeq	r1, r1, r5
 80062ae:	6021      	streq	r1, [r4, #0]
 80062b0:	e7ed      	b.n	800628e <_free_r+0x22>
 80062b2:	461a      	mov	r2, r3
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	b10b      	cbz	r3, 80062bc <_free_r+0x50>
 80062b8:	42a3      	cmp	r3, r4
 80062ba:	d9fa      	bls.n	80062b2 <_free_r+0x46>
 80062bc:	6811      	ldr	r1, [r2, #0]
 80062be:	1855      	adds	r5, r2, r1
 80062c0:	42a5      	cmp	r5, r4
 80062c2:	d10b      	bne.n	80062dc <_free_r+0x70>
 80062c4:	6824      	ldr	r4, [r4, #0]
 80062c6:	4421      	add	r1, r4
 80062c8:	1854      	adds	r4, r2, r1
 80062ca:	42a3      	cmp	r3, r4
 80062cc:	6011      	str	r1, [r2, #0]
 80062ce:	d1e0      	bne.n	8006292 <_free_r+0x26>
 80062d0:	681c      	ldr	r4, [r3, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	6053      	str	r3, [r2, #4]
 80062d6:	4421      	add	r1, r4
 80062d8:	6011      	str	r1, [r2, #0]
 80062da:	e7da      	b.n	8006292 <_free_r+0x26>
 80062dc:	d902      	bls.n	80062e4 <_free_r+0x78>
 80062de:	230c      	movs	r3, #12
 80062e0:	6003      	str	r3, [r0, #0]
 80062e2:	e7d6      	b.n	8006292 <_free_r+0x26>
 80062e4:	6825      	ldr	r5, [r4, #0]
 80062e6:	1961      	adds	r1, r4, r5
 80062e8:	428b      	cmp	r3, r1
 80062ea:	bf04      	itt	eq
 80062ec:	6819      	ldreq	r1, [r3, #0]
 80062ee:	685b      	ldreq	r3, [r3, #4]
 80062f0:	6063      	str	r3, [r4, #4]
 80062f2:	bf04      	itt	eq
 80062f4:	1949      	addeq	r1, r1, r5
 80062f6:	6021      	streq	r1, [r4, #0]
 80062f8:	6054      	str	r4, [r2, #4]
 80062fa:	e7ca      	b.n	8006292 <_free_r+0x26>
 80062fc:	b003      	add	sp, #12
 80062fe:	bd30      	pop	{r4, r5, pc}
 8006300:	2400085c 	.word	0x2400085c

08006304 <sbrk_aligned>:
 8006304:	b570      	push	{r4, r5, r6, lr}
 8006306:	4e0e      	ldr	r6, [pc, #56]	; (8006340 <sbrk_aligned+0x3c>)
 8006308:	460c      	mov	r4, r1
 800630a:	6831      	ldr	r1, [r6, #0]
 800630c:	4605      	mov	r5, r0
 800630e:	b911      	cbnz	r1, 8006316 <sbrk_aligned+0x12>
 8006310:	f000 f88c 	bl	800642c <_sbrk_r>
 8006314:	6030      	str	r0, [r6, #0]
 8006316:	4621      	mov	r1, r4
 8006318:	4628      	mov	r0, r5
 800631a:	f000 f887 	bl	800642c <_sbrk_r>
 800631e:	1c43      	adds	r3, r0, #1
 8006320:	d00a      	beq.n	8006338 <sbrk_aligned+0x34>
 8006322:	1cc4      	adds	r4, r0, #3
 8006324:	f024 0403 	bic.w	r4, r4, #3
 8006328:	42a0      	cmp	r0, r4
 800632a:	d007      	beq.n	800633c <sbrk_aligned+0x38>
 800632c:	1a21      	subs	r1, r4, r0
 800632e:	4628      	mov	r0, r5
 8006330:	f000 f87c 	bl	800642c <_sbrk_r>
 8006334:	3001      	adds	r0, #1
 8006336:	d101      	bne.n	800633c <sbrk_aligned+0x38>
 8006338:	f04f 34ff 	mov.w	r4, #4294967295
 800633c:	4620      	mov	r0, r4
 800633e:	bd70      	pop	{r4, r5, r6, pc}
 8006340:	24000860 	.word	0x24000860

08006344 <_malloc_r>:
 8006344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006348:	1ccd      	adds	r5, r1, #3
 800634a:	f025 0503 	bic.w	r5, r5, #3
 800634e:	3508      	adds	r5, #8
 8006350:	2d0c      	cmp	r5, #12
 8006352:	bf38      	it	cc
 8006354:	250c      	movcc	r5, #12
 8006356:	2d00      	cmp	r5, #0
 8006358:	4607      	mov	r7, r0
 800635a:	db01      	blt.n	8006360 <_malloc_r+0x1c>
 800635c:	42a9      	cmp	r1, r5
 800635e:	d905      	bls.n	800636c <_malloc_r+0x28>
 8006360:	230c      	movs	r3, #12
 8006362:	603b      	str	r3, [r7, #0]
 8006364:	2600      	movs	r6, #0
 8006366:	4630      	mov	r0, r6
 8006368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800636c:	4e2e      	ldr	r6, [pc, #184]	; (8006428 <_malloc_r+0xe4>)
 800636e:	f000 f88d 	bl	800648c <__malloc_lock>
 8006372:	6833      	ldr	r3, [r6, #0]
 8006374:	461c      	mov	r4, r3
 8006376:	bb34      	cbnz	r4, 80063c6 <_malloc_r+0x82>
 8006378:	4629      	mov	r1, r5
 800637a:	4638      	mov	r0, r7
 800637c:	f7ff ffc2 	bl	8006304 <sbrk_aligned>
 8006380:	1c43      	adds	r3, r0, #1
 8006382:	4604      	mov	r4, r0
 8006384:	d14d      	bne.n	8006422 <_malloc_r+0xde>
 8006386:	6834      	ldr	r4, [r6, #0]
 8006388:	4626      	mov	r6, r4
 800638a:	2e00      	cmp	r6, #0
 800638c:	d140      	bne.n	8006410 <_malloc_r+0xcc>
 800638e:	6823      	ldr	r3, [r4, #0]
 8006390:	4631      	mov	r1, r6
 8006392:	4638      	mov	r0, r7
 8006394:	eb04 0803 	add.w	r8, r4, r3
 8006398:	f000 f848 	bl	800642c <_sbrk_r>
 800639c:	4580      	cmp	r8, r0
 800639e:	d13a      	bne.n	8006416 <_malloc_r+0xd2>
 80063a0:	6821      	ldr	r1, [r4, #0]
 80063a2:	3503      	adds	r5, #3
 80063a4:	1a6d      	subs	r5, r5, r1
 80063a6:	f025 0503 	bic.w	r5, r5, #3
 80063aa:	3508      	adds	r5, #8
 80063ac:	2d0c      	cmp	r5, #12
 80063ae:	bf38      	it	cc
 80063b0:	250c      	movcc	r5, #12
 80063b2:	4629      	mov	r1, r5
 80063b4:	4638      	mov	r0, r7
 80063b6:	f7ff ffa5 	bl	8006304 <sbrk_aligned>
 80063ba:	3001      	adds	r0, #1
 80063bc:	d02b      	beq.n	8006416 <_malloc_r+0xd2>
 80063be:	6823      	ldr	r3, [r4, #0]
 80063c0:	442b      	add	r3, r5
 80063c2:	6023      	str	r3, [r4, #0]
 80063c4:	e00e      	b.n	80063e4 <_malloc_r+0xa0>
 80063c6:	6822      	ldr	r2, [r4, #0]
 80063c8:	1b52      	subs	r2, r2, r5
 80063ca:	d41e      	bmi.n	800640a <_malloc_r+0xc6>
 80063cc:	2a0b      	cmp	r2, #11
 80063ce:	d916      	bls.n	80063fe <_malloc_r+0xba>
 80063d0:	1961      	adds	r1, r4, r5
 80063d2:	42a3      	cmp	r3, r4
 80063d4:	6025      	str	r5, [r4, #0]
 80063d6:	bf18      	it	ne
 80063d8:	6059      	strne	r1, [r3, #4]
 80063da:	6863      	ldr	r3, [r4, #4]
 80063dc:	bf08      	it	eq
 80063de:	6031      	streq	r1, [r6, #0]
 80063e0:	5162      	str	r2, [r4, r5]
 80063e2:	604b      	str	r3, [r1, #4]
 80063e4:	4638      	mov	r0, r7
 80063e6:	f104 060b 	add.w	r6, r4, #11
 80063ea:	f000 f855 	bl	8006498 <__malloc_unlock>
 80063ee:	f026 0607 	bic.w	r6, r6, #7
 80063f2:	1d23      	adds	r3, r4, #4
 80063f4:	1af2      	subs	r2, r6, r3
 80063f6:	d0b6      	beq.n	8006366 <_malloc_r+0x22>
 80063f8:	1b9b      	subs	r3, r3, r6
 80063fa:	50a3      	str	r3, [r4, r2]
 80063fc:	e7b3      	b.n	8006366 <_malloc_r+0x22>
 80063fe:	6862      	ldr	r2, [r4, #4]
 8006400:	42a3      	cmp	r3, r4
 8006402:	bf0c      	ite	eq
 8006404:	6032      	streq	r2, [r6, #0]
 8006406:	605a      	strne	r2, [r3, #4]
 8006408:	e7ec      	b.n	80063e4 <_malloc_r+0xa0>
 800640a:	4623      	mov	r3, r4
 800640c:	6864      	ldr	r4, [r4, #4]
 800640e:	e7b2      	b.n	8006376 <_malloc_r+0x32>
 8006410:	4634      	mov	r4, r6
 8006412:	6876      	ldr	r6, [r6, #4]
 8006414:	e7b9      	b.n	800638a <_malloc_r+0x46>
 8006416:	230c      	movs	r3, #12
 8006418:	603b      	str	r3, [r7, #0]
 800641a:	4638      	mov	r0, r7
 800641c:	f000 f83c 	bl	8006498 <__malloc_unlock>
 8006420:	e7a1      	b.n	8006366 <_malloc_r+0x22>
 8006422:	6025      	str	r5, [r4, #0]
 8006424:	e7de      	b.n	80063e4 <_malloc_r+0xa0>
 8006426:	bf00      	nop
 8006428:	2400085c 	.word	0x2400085c

0800642c <_sbrk_r>:
 800642c:	b538      	push	{r3, r4, r5, lr}
 800642e:	4d06      	ldr	r5, [pc, #24]	; (8006448 <_sbrk_r+0x1c>)
 8006430:	2300      	movs	r3, #0
 8006432:	4604      	mov	r4, r0
 8006434:	4608      	mov	r0, r1
 8006436:	602b      	str	r3, [r5, #0]
 8006438:	f7fc f98a 	bl	8002750 <_sbrk>
 800643c:	1c43      	adds	r3, r0, #1
 800643e:	d102      	bne.n	8006446 <_sbrk_r+0x1a>
 8006440:	682b      	ldr	r3, [r5, #0]
 8006442:	b103      	cbz	r3, 8006446 <_sbrk_r+0x1a>
 8006444:	6023      	str	r3, [r4, #0]
 8006446:	bd38      	pop	{r3, r4, r5, pc}
 8006448:	24000864 	.word	0x24000864

0800644c <siprintf>:
 800644c:	b40e      	push	{r1, r2, r3}
 800644e:	b500      	push	{lr}
 8006450:	b09c      	sub	sp, #112	; 0x70
 8006452:	ab1d      	add	r3, sp, #116	; 0x74
 8006454:	9002      	str	r0, [sp, #8]
 8006456:	9006      	str	r0, [sp, #24]
 8006458:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800645c:	4809      	ldr	r0, [pc, #36]	; (8006484 <siprintf+0x38>)
 800645e:	9107      	str	r1, [sp, #28]
 8006460:	9104      	str	r1, [sp, #16]
 8006462:	4909      	ldr	r1, [pc, #36]	; (8006488 <siprintf+0x3c>)
 8006464:	f853 2b04 	ldr.w	r2, [r3], #4
 8006468:	9105      	str	r1, [sp, #20]
 800646a:	6800      	ldr	r0, [r0, #0]
 800646c:	9301      	str	r3, [sp, #4]
 800646e:	a902      	add	r1, sp, #8
 8006470:	f000 f874 	bl	800655c <_svfiprintf_r>
 8006474:	9b02      	ldr	r3, [sp, #8]
 8006476:	2200      	movs	r2, #0
 8006478:	701a      	strb	r2, [r3, #0]
 800647a:	b01c      	add	sp, #112	; 0x70
 800647c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006480:	b003      	add	sp, #12
 8006482:	4770      	bx	lr
 8006484:	24000068 	.word	0x24000068
 8006488:	ffff0208 	.word	0xffff0208

0800648c <__malloc_lock>:
 800648c:	4801      	ldr	r0, [pc, #4]	; (8006494 <__malloc_lock+0x8>)
 800648e:	f7ff bed5 	b.w	800623c <__retarget_lock_acquire_recursive>
 8006492:	bf00      	nop
 8006494:	24000858 	.word	0x24000858

08006498 <__malloc_unlock>:
 8006498:	4801      	ldr	r0, [pc, #4]	; (80064a0 <__malloc_unlock+0x8>)
 800649a:	f7ff bed0 	b.w	800623e <__retarget_lock_release_recursive>
 800649e:	bf00      	nop
 80064a0:	24000858 	.word	0x24000858

080064a4 <__ssputs_r>:
 80064a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064a8:	688e      	ldr	r6, [r1, #8]
 80064aa:	429e      	cmp	r6, r3
 80064ac:	4682      	mov	sl, r0
 80064ae:	460c      	mov	r4, r1
 80064b0:	4690      	mov	r8, r2
 80064b2:	461f      	mov	r7, r3
 80064b4:	d838      	bhi.n	8006528 <__ssputs_r+0x84>
 80064b6:	898a      	ldrh	r2, [r1, #12]
 80064b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80064bc:	d032      	beq.n	8006524 <__ssputs_r+0x80>
 80064be:	6825      	ldr	r5, [r4, #0]
 80064c0:	6909      	ldr	r1, [r1, #16]
 80064c2:	eba5 0901 	sub.w	r9, r5, r1
 80064c6:	6965      	ldr	r5, [r4, #20]
 80064c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80064cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80064d0:	3301      	adds	r3, #1
 80064d2:	444b      	add	r3, r9
 80064d4:	106d      	asrs	r5, r5, #1
 80064d6:	429d      	cmp	r5, r3
 80064d8:	bf38      	it	cc
 80064da:	461d      	movcc	r5, r3
 80064dc:	0553      	lsls	r3, r2, #21
 80064de:	d531      	bpl.n	8006544 <__ssputs_r+0xa0>
 80064e0:	4629      	mov	r1, r5
 80064e2:	f7ff ff2f 	bl	8006344 <_malloc_r>
 80064e6:	4606      	mov	r6, r0
 80064e8:	b950      	cbnz	r0, 8006500 <__ssputs_r+0x5c>
 80064ea:	230c      	movs	r3, #12
 80064ec:	f8ca 3000 	str.w	r3, [sl]
 80064f0:	89a3      	ldrh	r3, [r4, #12]
 80064f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064f6:	81a3      	strh	r3, [r4, #12]
 80064f8:	f04f 30ff 	mov.w	r0, #4294967295
 80064fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006500:	6921      	ldr	r1, [r4, #16]
 8006502:	464a      	mov	r2, r9
 8006504:	f7ff fe9c 	bl	8006240 <memcpy>
 8006508:	89a3      	ldrh	r3, [r4, #12]
 800650a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800650e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006512:	81a3      	strh	r3, [r4, #12]
 8006514:	6126      	str	r6, [r4, #16]
 8006516:	6165      	str	r5, [r4, #20]
 8006518:	444e      	add	r6, r9
 800651a:	eba5 0509 	sub.w	r5, r5, r9
 800651e:	6026      	str	r6, [r4, #0]
 8006520:	60a5      	str	r5, [r4, #8]
 8006522:	463e      	mov	r6, r7
 8006524:	42be      	cmp	r6, r7
 8006526:	d900      	bls.n	800652a <__ssputs_r+0x86>
 8006528:	463e      	mov	r6, r7
 800652a:	6820      	ldr	r0, [r4, #0]
 800652c:	4632      	mov	r2, r6
 800652e:	4641      	mov	r1, r8
 8006530:	f000 faa8 	bl	8006a84 <memmove>
 8006534:	68a3      	ldr	r3, [r4, #8]
 8006536:	1b9b      	subs	r3, r3, r6
 8006538:	60a3      	str	r3, [r4, #8]
 800653a:	6823      	ldr	r3, [r4, #0]
 800653c:	4433      	add	r3, r6
 800653e:	6023      	str	r3, [r4, #0]
 8006540:	2000      	movs	r0, #0
 8006542:	e7db      	b.n	80064fc <__ssputs_r+0x58>
 8006544:	462a      	mov	r2, r5
 8006546:	f000 fab7 	bl	8006ab8 <_realloc_r>
 800654a:	4606      	mov	r6, r0
 800654c:	2800      	cmp	r0, #0
 800654e:	d1e1      	bne.n	8006514 <__ssputs_r+0x70>
 8006550:	6921      	ldr	r1, [r4, #16]
 8006552:	4650      	mov	r0, sl
 8006554:	f7ff fe8a 	bl	800626c <_free_r>
 8006558:	e7c7      	b.n	80064ea <__ssputs_r+0x46>
	...

0800655c <_svfiprintf_r>:
 800655c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006560:	4698      	mov	r8, r3
 8006562:	898b      	ldrh	r3, [r1, #12]
 8006564:	061b      	lsls	r3, r3, #24
 8006566:	b09d      	sub	sp, #116	; 0x74
 8006568:	4607      	mov	r7, r0
 800656a:	460d      	mov	r5, r1
 800656c:	4614      	mov	r4, r2
 800656e:	d50e      	bpl.n	800658e <_svfiprintf_r+0x32>
 8006570:	690b      	ldr	r3, [r1, #16]
 8006572:	b963      	cbnz	r3, 800658e <_svfiprintf_r+0x32>
 8006574:	2140      	movs	r1, #64	; 0x40
 8006576:	f7ff fee5 	bl	8006344 <_malloc_r>
 800657a:	6028      	str	r0, [r5, #0]
 800657c:	6128      	str	r0, [r5, #16]
 800657e:	b920      	cbnz	r0, 800658a <_svfiprintf_r+0x2e>
 8006580:	230c      	movs	r3, #12
 8006582:	603b      	str	r3, [r7, #0]
 8006584:	f04f 30ff 	mov.w	r0, #4294967295
 8006588:	e0d1      	b.n	800672e <_svfiprintf_r+0x1d2>
 800658a:	2340      	movs	r3, #64	; 0x40
 800658c:	616b      	str	r3, [r5, #20]
 800658e:	2300      	movs	r3, #0
 8006590:	9309      	str	r3, [sp, #36]	; 0x24
 8006592:	2320      	movs	r3, #32
 8006594:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006598:	f8cd 800c 	str.w	r8, [sp, #12]
 800659c:	2330      	movs	r3, #48	; 0x30
 800659e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006748 <_svfiprintf_r+0x1ec>
 80065a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80065a6:	f04f 0901 	mov.w	r9, #1
 80065aa:	4623      	mov	r3, r4
 80065ac:	469a      	mov	sl, r3
 80065ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065b2:	b10a      	cbz	r2, 80065b8 <_svfiprintf_r+0x5c>
 80065b4:	2a25      	cmp	r2, #37	; 0x25
 80065b6:	d1f9      	bne.n	80065ac <_svfiprintf_r+0x50>
 80065b8:	ebba 0b04 	subs.w	fp, sl, r4
 80065bc:	d00b      	beq.n	80065d6 <_svfiprintf_r+0x7a>
 80065be:	465b      	mov	r3, fp
 80065c0:	4622      	mov	r2, r4
 80065c2:	4629      	mov	r1, r5
 80065c4:	4638      	mov	r0, r7
 80065c6:	f7ff ff6d 	bl	80064a4 <__ssputs_r>
 80065ca:	3001      	adds	r0, #1
 80065cc:	f000 80aa 	beq.w	8006724 <_svfiprintf_r+0x1c8>
 80065d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065d2:	445a      	add	r2, fp
 80065d4:	9209      	str	r2, [sp, #36]	; 0x24
 80065d6:	f89a 3000 	ldrb.w	r3, [sl]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	f000 80a2 	beq.w	8006724 <_svfiprintf_r+0x1c8>
 80065e0:	2300      	movs	r3, #0
 80065e2:	f04f 32ff 	mov.w	r2, #4294967295
 80065e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065ea:	f10a 0a01 	add.w	sl, sl, #1
 80065ee:	9304      	str	r3, [sp, #16]
 80065f0:	9307      	str	r3, [sp, #28]
 80065f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065f6:	931a      	str	r3, [sp, #104]	; 0x68
 80065f8:	4654      	mov	r4, sl
 80065fa:	2205      	movs	r2, #5
 80065fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006600:	4851      	ldr	r0, [pc, #324]	; (8006748 <_svfiprintf_r+0x1ec>)
 8006602:	f7f9 fe6d 	bl	80002e0 <memchr>
 8006606:	9a04      	ldr	r2, [sp, #16]
 8006608:	b9d8      	cbnz	r0, 8006642 <_svfiprintf_r+0xe6>
 800660a:	06d0      	lsls	r0, r2, #27
 800660c:	bf44      	itt	mi
 800660e:	2320      	movmi	r3, #32
 8006610:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006614:	0711      	lsls	r1, r2, #28
 8006616:	bf44      	itt	mi
 8006618:	232b      	movmi	r3, #43	; 0x2b
 800661a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800661e:	f89a 3000 	ldrb.w	r3, [sl]
 8006622:	2b2a      	cmp	r3, #42	; 0x2a
 8006624:	d015      	beq.n	8006652 <_svfiprintf_r+0xf6>
 8006626:	9a07      	ldr	r2, [sp, #28]
 8006628:	4654      	mov	r4, sl
 800662a:	2000      	movs	r0, #0
 800662c:	f04f 0c0a 	mov.w	ip, #10
 8006630:	4621      	mov	r1, r4
 8006632:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006636:	3b30      	subs	r3, #48	; 0x30
 8006638:	2b09      	cmp	r3, #9
 800663a:	d94e      	bls.n	80066da <_svfiprintf_r+0x17e>
 800663c:	b1b0      	cbz	r0, 800666c <_svfiprintf_r+0x110>
 800663e:	9207      	str	r2, [sp, #28]
 8006640:	e014      	b.n	800666c <_svfiprintf_r+0x110>
 8006642:	eba0 0308 	sub.w	r3, r0, r8
 8006646:	fa09 f303 	lsl.w	r3, r9, r3
 800664a:	4313      	orrs	r3, r2
 800664c:	9304      	str	r3, [sp, #16]
 800664e:	46a2      	mov	sl, r4
 8006650:	e7d2      	b.n	80065f8 <_svfiprintf_r+0x9c>
 8006652:	9b03      	ldr	r3, [sp, #12]
 8006654:	1d19      	adds	r1, r3, #4
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	9103      	str	r1, [sp, #12]
 800665a:	2b00      	cmp	r3, #0
 800665c:	bfbb      	ittet	lt
 800665e:	425b      	neglt	r3, r3
 8006660:	f042 0202 	orrlt.w	r2, r2, #2
 8006664:	9307      	strge	r3, [sp, #28]
 8006666:	9307      	strlt	r3, [sp, #28]
 8006668:	bfb8      	it	lt
 800666a:	9204      	strlt	r2, [sp, #16]
 800666c:	7823      	ldrb	r3, [r4, #0]
 800666e:	2b2e      	cmp	r3, #46	; 0x2e
 8006670:	d10c      	bne.n	800668c <_svfiprintf_r+0x130>
 8006672:	7863      	ldrb	r3, [r4, #1]
 8006674:	2b2a      	cmp	r3, #42	; 0x2a
 8006676:	d135      	bne.n	80066e4 <_svfiprintf_r+0x188>
 8006678:	9b03      	ldr	r3, [sp, #12]
 800667a:	1d1a      	adds	r2, r3, #4
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	9203      	str	r2, [sp, #12]
 8006680:	2b00      	cmp	r3, #0
 8006682:	bfb8      	it	lt
 8006684:	f04f 33ff 	movlt.w	r3, #4294967295
 8006688:	3402      	adds	r4, #2
 800668a:	9305      	str	r3, [sp, #20]
 800668c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006758 <_svfiprintf_r+0x1fc>
 8006690:	7821      	ldrb	r1, [r4, #0]
 8006692:	2203      	movs	r2, #3
 8006694:	4650      	mov	r0, sl
 8006696:	f7f9 fe23 	bl	80002e0 <memchr>
 800669a:	b140      	cbz	r0, 80066ae <_svfiprintf_r+0x152>
 800669c:	2340      	movs	r3, #64	; 0x40
 800669e:	eba0 000a 	sub.w	r0, r0, sl
 80066a2:	fa03 f000 	lsl.w	r0, r3, r0
 80066a6:	9b04      	ldr	r3, [sp, #16]
 80066a8:	4303      	orrs	r3, r0
 80066aa:	3401      	adds	r4, #1
 80066ac:	9304      	str	r3, [sp, #16]
 80066ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066b2:	4826      	ldr	r0, [pc, #152]	; (800674c <_svfiprintf_r+0x1f0>)
 80066b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066b8:	2206      	movs	r2, #6
 80066ba:	f7f9 fe11 	bl	80002e0 <memchr>
 80066be:	2800      	cmp	r0, #0
 80066c0:	d038      	beq.n	8006734 <_svfiprintf_r+0x1d8>
 80066c2:	4b23      	ldr	r3, [pc, #140]	; (8006750 <_svfiprintf_r+0x1f4>)
 80066c4:	bb1b      	cbnz	r3, 800670e <_svfiprintf_r+0x1b2>
 80066c6:	9b03      	ldr	r3, [sp, #12]
 80066c8:	3307      	adds	r3, #7
 80066ca:	f023 0307 	bic.w	r3, r3, #7
 80066ce:	3308      	adds	r3, #8
 80066d0:	9303      	str	r3, [sp, #12]
 80066d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066d4:	4433      	add	r3, r6
 80066d6:	9309      	str	r3, [sp, #36]	; 0x24
 80066d8:	e767      	b.n	80065aa <_svfiprintf_r+0x4e>
 80066da:	fb0c 3202 	mla	r2, ip, r2, r3
 80066de:	460c      	mov	r4, r1
 80066e0:	2001      	movs	r0, #1
 80066e2:	e7a5      	b.n	8006630 <_svfiprintf_r+0xd4>
 80066e4:	2300      	movs	r3, #0
 80066e6:	3401      	adds	r4, #1
 80066e8:	9305      	str	r3, [sp, #20]
 80066ea:	4619      	mov	r1, r3
 80066ec:	f04f 0c0a 	mov.w	ip, #10
 80066f0:	4620      	mov	r0, r4
 80066f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066f6:	3a30      	subs	r2, #48	; 0x30
 80066f8:	2a09      	cmp	r2, #9
 80066fa:	d903      	bls.n	8006704 <_svfiprintf_r+0x1a8>
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d0c5      	beq.n	800668c <_svfiprintf_r+0x130>
 8006700:	9105      	str	r1, [sp, #20]
 8006702:	e7c3      	b.n	800668c <_svfiprintf_r+0x130>
 8006704:	fb0c 2101 	mla	r1, ip, r1, r2
 8006708:	4604      	mov	r4, r0
 800670a:	2301      	movs	r3, #1
 800670c:	e7f0      	b.n	80066f0 <_svfiprintf_r+0x194>
 800670e:	ab03      	add	r3, sp, #12
 8006710:	9300      	str	r3, [sp, #0]
 8006712:	462a      	mov	r2, r5
 8006714:	4b0f      	ldr	r3, [pc, #60]	; (8006754 <_svfiprintf_r+0x1f8>)
 8006716:	a904      	add	r1, sp, #16
 8006718:	4638      	mov	r0, r7
 800671a:	f3af 8000 	nop.w
 800671e:	1c42      	adds	r2, r0, #1
 8006720:	4606      	mov	r6, r0
 8006722:	d1d6      	bne.n	80066d2 <_svfiprintf_r+0x176>
 8006724:	89ab      	ldrh	r3, [r5, #12]
 8006726:	065b      	lsls	r3, r3, #25
 8006728:	f53f af2c 	bmi.w	8006584 <_svfiprintf_r+0x28>
 800672c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800672e:	b01d      	add	sp, #116	; 0x74
 8006730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006734:	ab03      	add	r3, sp, #12
 8006736:	9300      	str	r3, [sp, #0]
 8006738:	462a      	mov	r2, r5
 800673a:	4b06      	ldr	r3, [pc, #24]	; (8006754 <_svfiprintf_r+0x1f8>)
 800673c:	a904      	add	r1, sp, #16
 800673e:	4638      	mov	r0, r7
 8006740:	f000 f87a 	bl	8006838 <_printf_i>
 8006744:	e7eb      	b.n	800671e <_svfiprintf_r+0x1c2>
 8006746:	bf00      	nop
 8006748:	08018784 	.word	0x08018784
 800674c:	0801878e 	.word	0x0801878e
 8006750:	00000000 	.word	0x00000000
 8006754:	080064a5 	.word	0x080064a5
 8006758:	0801878a 	.word	0x0801878a

0800675c <_printf_common>:
 800675c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006760:	4616      	mov	r6, r2
 8006762:	4699      	mov	r9, r3
 8006764:	688a      	ldr	r2, [r1, #8]
 8006766:	690b      	ldr	r3, [r1, #16]
 8006768:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800676c:	4293      	cmp	r3, r2
 800676e:	bfb8      	it	lt
 8006770:	4613      	movlt	r3, r2
 8006772:	6033      	str	r3, [r6, #0]
 8006774:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006778:	4607      	mov	r7, r0
 800677a:	460c      	mov	r4, r1
 800677c:	b10a      	cbz	r2, 8006782 <_printf_common+0x26>
 800677e:	3301      	adds	r3, #1
 8006780:	6033      	str	r3, [r6, #0]
 8006782:	6823      	ldr	r3, [r4, #0]
 8006784:	0699      	lsls	r1, r3, #26
 8006786:	bf42      	ittt	mi
 8006788:	6833      	ldrmi	r3, [r6, #0]
 800678a:	3302      	addmi	r3, #2
 800678c:	6033      	strmi	r3, [r6, #0]
 800678e:	6825      	ldr	r5, [r4, #0]
 8006790:	f015 0506 	ands.w	r5, r5, #6
 8006794:	d106      	bne.n	80067a4 <_printf_common+0x48>
 8006796:	f104 0a19 	add.w	sl, r4, #25
 800679a:	68e3      	ldr	r3, [r4, #12]
 800679c:	6832      	ldr	r2, [r6, #0]
 800679e:	1a9b      	subs	r3, r3, r2
 80067a0:	42ab      	cmp	r3, r5
 80067a2:	dc26      	bgt.n	80067f2 <_printf_common+0x96>
 80067a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80067a8:	1e13      	subs	r3, r2, #0
 80067aa:	6822      	ldr	r2, [r4, #0]
 80067ac:	bf18      	it	ne
 80067ae:	2301      	movne	r3, #1
 80067b0:	0692      	lsls	r2, r2, #26
 80067b2:	d42b      	bmi.n	800680c <_printf_common+0xb0>
 80067b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067b8:	4649      	mov	r1, r9
 80067ba:	4638      	mov	r0, r7
 80067bc:	47c0      	blx	r8
 80067be:	3001      	adds	r0, #1
 80067c0:	d01e      	beq.n	8006800 <_printf_common+0xa4>
 80067c2:	6823      	ldr	r3, [r4, #0]
 80067c4:	68e5      	ldr	r5, [r4, #12]
 80067c6:	6832      	ldr	r2, [r6, #0]
 80067c8:	f003 0306 	and.w	r3, r3, #6
 80067cc:	2b04      	cmp	r3, #4
 80067ce:	bf08      	it	eq
 80067d0:	1aad      	subeq	r5, r5, r2
 80067d2:	68a3      	ldr	r3, [r4, #8]
 80067d4:	6922      	ldr	r2, [r4, #16]
 80067d6:	bf0c      	ite	eq
 80067d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067dc:	2500      	movne	r5, #0
 80067de:	4293      	cmp	r3, r2
 80067e0:	bfc4      	itt	gt
 80067e2:	1a9b      	subgt	r3, r3, r2
 80067e4:	18ed      	addgt	r5, r5, r3
 80067e6:	2600      	movs	r6, #0
 80067e8:	341a      	adds	r4, #26
 80067ea:	42b5      	cmp	r5, r6
 80067ec:	d11a      	bne.n	8006824 <_printf_common+0xc8>
 80067ee:	2000      	movs	r0, #0
 80067f0:	e008      	b.n	8006804 <_printf_common+0xa8>
 80067f2:	2301      	movs	r3, #1
 80067f4:	4652      	mov	r2, sl
 80067f6:	4649      	mov	r1, r9
 80067f8:	4638      	mov	r0, r7
 80067fa:	47c0      	blx	r8
 80067fc:	3001      	adds	r0, #1
 80067fe:	d103      	bne.n	8006808 <_printf_common+0xac>
 8006800:	f04f 30ff 	mov.w	r0, #4294967295
 8006804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006808:	3501      	adds	r5, #1
 800680a:	e7c6      	b.n	800679a <_printf_common+0x3e>
 800680c:	18e1      	adds	r1, r4, r3
 800680e:	1c5a      	adds	r2, r3, #1
 8006810:	2030      	movs	r0, #48	; 0x30
 8006812:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006816:	4422      	add	r2, r4
 8006818:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800681c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006820:	3302      	adds	r3, #2
 8006822:	e7c7      	b.n	80067b4 <_printf_common+0x58>
 8006824:	2301      	movs	r3, #1
 8006826:	4622      	mov	r2, r4
 8006828:	4649      	mov	r1, r9
 800682a:	4638      	mov	r0, r7
 800682c:	47c0      	blx	r8
 800682e:	3001      	adds	r0, #1
 8006830:	d0e6      	beq.n	8006800 <_printf_common+0xa4>
 8006832:	3601      	adds	r6, #1
 8006834:	e7d9      	b.n	80067ea <_printf_common+0x8e>
	...

08006838 <_printf_i>:
 8006838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800683c:	7e0f      	ldrb	r7, [r1, #24]
 800683e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006840:	2f78      	cmp	r7, #120	; 0x78
 8006842:	4691      	mov	r9, r2
 8006844:	4680      	mov	r8, r0
 8006846:	460c      	mov	r4, r1
 8006848:	469a      	mov	sl, r3
 800684a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800684e:	d807      	bhi.n	8006860 <_printf_i+0x28>
 8006850:	2f62      	cmp	r7, #98	; 0x62
 8006852:	d80a      	bhi.n	800686a <_printf_i+0x32>
 8006854:	2f00      	cmp	r7, #0
 8006856:	f000 80d8 	beq.w	8006a0a <_printf_i+0x1d2>
 800685a:	2f58      	cmp	r7, #88	; 0x58
 800685c:	f000 80a3 	beq.w	80069a6 <_printf_i+0x16e>
 8006860:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006864:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006868:	e03a      	b.n	80068e0 <_printf_i+0xa8>
 800686a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800686e:	2b15      	cmp	r3, #21
 8006870:	d8f6      	bhi.n	8006860 <_printf_i+0x28>
 8006872:	a101      	add	r1, pc, #4	; (adr r1, 8006878 <_printf_i+0x40>)
 8006874:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006878:	080068d1 	.word	0x080068d1
 800687c:	080068e5 	.word	0x080068e5
 8006880:	08006861 	.word	0x08006861
 8006884:	08006861 	.word	0x08006861
 8006888:	08006861 	.word	0x08006861
 800688c:	08006861 	.word	0x08006861
 8006890:	080068e5 	.word	0x080068e5
 8006894:	08006861 	.word	0x08006861
 8006898:	08006861 	.word	0x08006861
 800689c:	08006861 	.word	0x08006861
 80068a0:	08006861 	.word	0x08006861
 80068a4:	080069f1 	.word	0x080069f1
 80068a8:	08006915 	.word	0x08006915
 80068ac:	080069d3 	.word	0x080069d3
 80068b0:	08006861 	.word	0x08006861
 80068b4:	08006861 	.word	0x08006861
 80068b8:	08006a13 	.word	0x08006a13
 80068bc:	08006861 	.word	0x08006861
 80068c0:	08006915 	.word	0x08006915
 80068c4:	08006861 	.word	0x08006861
 80068c8:	08006861 	.word	0x08006861
 80068cc:	080069db 	.word	0x080069db
 80068d0:	682b      	ldr	r3, [r5, #0]
 80068d2:	1d1a      	adds	r2, r3, #4
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	602a      	str	r2, [r5, #0]
 80068d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068e0:	2301      	movs	r3, #1
 80068e2:	e0a3      	b.n	8006a2c <_printf_i+0x1f4>
 80068e4:	6820      	ldr	r0, [r4, #0]
 80068e6:	6829      	ldr	r1, [r5, #0]
 80068e8:	0606      	lsls	r6, r0, #24
 80068ea:	f101 0304 	add.w	r3, r1, #4
 80068ee:	d50a      	bpl.n	8006906 <_printf_i+0xce>
 80068f0:	680e      	ldr	r6, [r1, #0]
 80068f2:	602b      	str	r3, [r5, #0]
 80068f4:	2e00      	cmp	r6, #0
 80068f6:	da03      	bge.n	8006900 <_printf_i+0xc8>
 80068f8:	232d      	movs	r3, #45	; 0x2d
 80068fa:	4276      	negs	r6, r6
 80068fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006900:	485e      	ldr	r0, [pc, #376]	; (8006a7c <_printf_i+0x244>)
 8006902:	230a      	movs	r3, #10
 8006904:	e019      	b.n	800693a <_printf_i+0x102>
 8006906:	680e      	ldr	r6, [r1, #0]
 8006908:	602b      	str	r3, [r5, #0]
 800690a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800690e:	bf18      	it	ne
 8006910:	b236      	sxthne	r6, r6
 8006912:	e7ef      	b.n	80068f4 <_printf_i+0xbc>
 8006914:	682b      	ldr	r3, [r5, #0]
 8006916:	6820      	ldr	r0, [r4, #0]
 8006918:	1d19      	adds	r1, r3, #4
 800691a:	6029      	str	r1, [r5, #0]
 800691c:	0601      	lsls	r1, r0, #24
 800691e:	d501      	bpl.n	8006924 <_printf_i+0xec>
 8006920:	681e      	ldr	r6, [r3, #0]
 8006922:	e002      	b.n	800692a <_printf_i+0xf2>
 8006924:	0646      	lsls	r6, r0, #25
 8006926:	d5fb      	bpl.n	8006920 <_printf_i+0xe8>
 8006928:	881e      	ldrh	r6, [r3, #0]
 800692a:	4854      	ldr	r0, [pc, #336]	; (8006a7c <_printf_i+0x244>)
 800692c:	2f6f      	cmp	r7, #111	; 0x6f
 800692e:	bf0c      	ite	eq
 8006930:	2308      	moveq	r3, #8
 8006932:	230a      	movne	r3, #10
 8006934:	2100      	movs	r1, #0
 8006936:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800693a:	6865      	ldr	r5, [r4, #4]
 800693c:	60a5      	str	r5, [r4, #8]
 800693e:	2d00      	cmp	r5, #0
 8006940:	bfa2      	ittt	ge
 8006942:	6821      	ldrge	r1, [r4, #0]
 8006944:	f021 0104 	bicge.w	r1, r1, #4
 8006948:	6021      	strge	r1, [r4, #0]
 800694a:	b90e      	cbnz	r6, 8006950 <_printf_i+0x118>
 800694c:	2d00      	cmp	r5, #0
 800694e:	d04d      	beq.n	80069ec <_printf_i+0x1b4>
 8006950:	4615      	mov	r5, r2
 8006952:	fbb6 f1f3 	udiv	r1, r6, r3
 8006956:	fb03 6711 	mls	r7, r3, r1, r6
 800695a:	5dc7      	ldrb	r7, [r0, r7]
 800695c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006960:	4637      	mov	r7, r6
 8006962:	42bb      	cmp	r3, r7
 8006964:	460e      	mov	r6, r1
 8006966:	d9f4      	bls.n	8006952 <_printf_i+0x11a>
 8006968:	2b08      	cmp	r3, #8
 800696a:	d10b      	bne.n	8006984 <_printf_i+0x14c>
 800696c:	6823      	ldr	r3, [r4, #0]
 800696e:	07de      	lsls	r6, r3, #31
 8006970:	d508      	bpl.n	8006984 <_printf_i+0x14c>
 8006972:	6923      	ldr	r3, [r4, #16]
 8006974:	6861      	ldr	r1, [r4, #4]
 8006976:	4299      	cmp	r1, r3
 8006978:	bfde      	ittt	le
 800697a:	2330      	movle	r3, #48	; 0x30
 800697c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006980:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006984:	1b52      	subs	r2, r2, r5
 8006986:	6122      	str	r2, [r4, #16]
 8006988:	f8cd a000 	str.w	sl, [sp]
 800698c:	464b      	mov	r3, r9
 800698e:	aa03      	add	r2, sp, #12
 8006990:	4621      	mov	r1, r4
 8006992:	4640      	mov	r0, r8
 8006994:	f7ff fee2 	bl	800675c <_printf_common>
 8006998:	3001      	adds	r0, #1
 800699a:	d14c      	bne.n	8006a36 <_printf_i+0x1fe>
 800699c:	f04f 30ff 	mov.w	r0, #4294967295
 80069a0:	b004      	add	sp, #16
 80069a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069a6:	4835      	ldr	r0, [pc, #212]	; (8006a7c <_printf_i+0x244>)
 80069a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80069ac:	6829      	ldr	r1, [r5, #0]
 80069ae:	6823      	ldr	r3, [r4, #0]
 80069b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80069b4:	6029      	str	r1, [r5, #0]
 80069b6:	061d      	lsls	r5, r3, #24
 80069b8:	d514      	bpl.n	80069e4 <_printf_i+0x1ac>
 80069ba:	07df      	lsls	r7, r3, #31
 80069bc:	bf44      	itt	mi
 80069be:	f043 0320 	orrmi.w	r3, r3, #32
 80069c2:	6023      	strmi	r3, [r4, #0]
 80069c4:	b91e      	cbnz	r6, 80069ce <_printf_i+0x196>
 80069c6:	6823      	ldr	r3, [r4, #0]
 80069c8:	f023 0320 	bic.w	r3, r3, #32
 80069cc:	6023      	str	r3, [r4, #0]
 80069ce:	2310      	movs	r3, #16
 80069d0:	e7b0      	b.n	8006934 <_printf_i+0xfc>
 80069d2:	6823      	ldr	r3, [r4, #0]
 80069d4:	f043 0320 	orr.w	r3, r3, #32
 80069d8:	6023      	str	r3, [r4, #0]
 80069da:	2378      	movs	r3, #120	; 0x78
 80069dc:	4828      	ldr	r0, [pc, #160]	; (8006a80 <_printf_i+0x248>)
 80069de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80069e2:	e7e3      	b.n	80069ac <_printf_i+0x174>
 80069e4:	0659      	lsls	r1, r3, #25
 80069e6:	bf48      	it	mi
 80069e8:	b2b6      	uxthmi	r6, r6
 80069ea:	e7e6      	b.n	80069ba <_printf_i+0x182>
 80069ec:	4615      	mov	r5, r2
 80069ee:	e7bb      	b.n	8006968 <_printf_i+0x130>
 80069f0:	682b      	ldr	r3, [r5, #0]
 80069f2:	6826      	ldr	r6, [r4, #0]
 80069f4:	6961      	ldr	r1, [r4, #20]
 80069f6:	1d18      	adds	r0, r3, #4
 80069f8:	6028      	str	r0, [r5, #0]
 80069fa:	0635      	lsls	r5, r6, #24
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	d501      	bpl.n	8006a04 <_printf_i+0x1cc>
 8006a00:	6019      	str	r1, [r3, #0]
 8006a02:	e002      	b.n	8006a0a <_printf_i+0x1d2>
 8006a04:	0670      	lsls	r0, r6, #25
 8006a06:	d5fb      	bpl.n	8006a00 <_printf_i+0x1c8>
 8006a08:	8019      	strh	r1, [r3, #0]
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	6123      	str	r3, [r4, #16]
 8006a0e:	4615      	mov	r5, r2
 8006a10:	e7ba      	b.n	8006988 <_printf_i+0x150>
 8006a12:	682b      	ldr	r3, [r5, #0]
 8006a14:	1d1a      	adds	r2, r3, #4
 8006a16:	602a      	str	r2, [r5, #0]
 8006a18:	681d      	ldr	r5, [r3, #0]
 8006a1a:	6862      	ldr	r2, [r4, #4]
 8006a1c:	2100      	movs	r1, #0
 8006a1e:	4628      	mov	r0, r5
 8006a20:	f7f9 fc5e 	bl	80002e0 <memchr>
 8006a24:	b108      	cbz	r0, 8006a2a <_printf_i+0x1f2>
 8006a26:	1b40      	subs	r0, r0, r5
 8006a28:	6060      	str	r0, [r4, #4]
 8006a2a:	6863      	ldr	r3, [r4, #4]
 8006a2c:	6123      	str	r3, [r4, #16]
 8006a2e:	2300      	movs	r3, #0
 8006a30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a34:	e7a8      	b.n	8006988 <_printf_i+0x150>
 8006a36:	6923      	ldr	r3, [r4, #16]
 8006a38:	462a      	mov	r2, r5
 8006a3a:	4649      	mov	r1, r9
 8006a3c:	4640      	mov	r0, r8
 8006a3e:	47d0      	blx	sl
 8006a40:	3001      	adds	r0, #1
 8006a42:	d0ab      	beq.n	800699c <_printf_i+0x164>
 8006a44:	6823      	ldr	r3, [r4, #0]
 8006a46:	079b      	lsls	r3, r3, #30
 8006a48:	d413      	bmi.n	8006a72 <_printf_i+0x23a>
 8006a4a:	68e0      	ldr	r0, [r4, #12]
 8006a4c:	9b03      	ldr	r3, [sp, #12]
 8006a4e:	4298      	cmp	r0, r3
 8006a50:	bfb8      	it	lt
 8006a52:	4618      	movlt	r0, r3
 8006a54:	e7a4      	b.n	80069a0 <_printf_i+0x168>
 8006a56:	2301      	movs	r3, #1
 8006a58:	4632      	mov	r2, r6
 8006a5a:	4649      	mov	r1, r9
 8006a5c:	4640      	mov	r0, r8
 8006a5e:	47d0      	blx	sl
 8006a60:	3001      	adds	r0, #1
 8006a62:	d09b      	beq.n	800699c <_printf_i+0x164>
 8006a64:	3501      	adds	r5, #1
 8006a66:	68e3      	ldr	r3, [r4, #12]
 8006a68:	9903      	ldr	r1, [sp, #12]
 8006a6a:	1a5b      	subs	r3, r3, r1
 8006a6c:	42ab      	cmp	r3, r5
 8006a6e:	dcf2      	bgt.n	8006a56 <_printf_i+0x21e>
 8006a70:	e7eb      	b.n	8006a4a <_printf_i+0x212>
 8006a72:	2500      	movs	r5, #0
 8006a74:	f104 0619 	add.w	r6, r4, #25
 8006a78:	e7f5      	b.n	8006a66 <_printf_i+0x22e>
 8006a7a:	bf00      	nop
 8006a7c:	08018795 	.word	0x08018795
 8006a80:	080187a6 	.word	0x080187a6

08006a84 <memmove>:
 8006a84:	4288      	cmp	r0, r1
 8006a86:	b510      	push	{r4, lr}
 8006a88:	eb01 0402 	add.w	r4, r1, r2
 8006a8c:	d902      	bls.n	8006a94 <memmove+0x10>
 8006a8e:	4284      	cmp	r4, r0
 8006a90:	4623      	mov	r3, r4
 8006a92:	d807      	bhi.n	8006aa4 <memmove+0x20>
 8006a94:	1e43      	subs	r3, r0, #1
 8006a96:	42a1      	cmp	r1, r4
 8006a98:	d008      	beq.n	8006aac <memmove+0x28>
 8006a9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006aa2:	e7f8      	b.n	8006a96 <memmove+0x12>
 8006aa4:	4402      	add	r2, r0
 8006aa6:	4601      	mov	r1, r0
 8006aa8:	428a      	cmp	r2, r1
 8006aaa:	d100      	bne.n	8006aae <memmove+0x2a>
 8006aac:	bd10      	pop	{r4, pc}
 8006aae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ab2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ab6:	e7f7      	b.n	8006aa8 <memmove+0x24>

08006ab8 <_realloc_r>:
 8006ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006abc:	4680      	mov	r8, r0
 8006abe:	4614      	mov	r4, r2
 8006ac0:	460e      	mov	r6, r1
 8006ac2:	b921      	cbnz	r1, 8006ace <_realloc_r+0x16>
 8006ac4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ac8:	4611      	mov	r1, r2
 8006aca:	f7ff bc3b 	b.w	8006344 <_malloc_r>
 8006ace:	b92a      	cbnz	r2, 8006adc <_realloc_r+0x24>
 8006ad0:	f7ff fbcc 	bl	800626c <_free_r>
 8006ad4:	4625      	mov	r5, r4
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006adc:	f000 f81b 	bl	8006b16 <_malloc_usable_size_r>
 8006ae0:	4284      	cmp	r4, r0
 8006ae2:	4607      	mov	r7, r0
 8006ae4:	d802      	bhi.n	8006aec <_realloc_r+0x34>
 8006ae6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006aea:	d812      	bhi.n	8006b12 <_realloc_r+0x5a>
 8006aec:	4621      	mov	r1, r4
 8006aee:	4640      	mov	r0, r8
 8006af0:	f7ff fc28 	bl	8006344 <_malloc_r>
 8006af4:	4605      	mov	r5, r0
 8006af6:	2800      	cmp	r0, #0
 8006af8:	d0ed      	beq.n	8006ad6 <_realloc_r+0x1e>
 8006afa:	42bc      	cmp	r4, r7
 8006afc:	4622      	mov	r2, r4
 8006afe:	4631      	mov	r1, r6
 8006b00:	bf28      	it	cs
 8006b02:	463a      	movcs	r2, r7
 8006b04:	f7ff fb9c 	bl	8006240 <memcpy>
 8006b08:	4631      	mov	r1, r6
 8006b0a:	4640      	mov	r0, r8
 8006b0c:	f7ff fbae 	bl	800626c <_free_r>
 8006b10:	e7e1      	b.n	8006ad6 <_realloc_r+0x1e>
 8006b12:	4635      	mov	r5, r6
 8006b14:	e7df      	b.n	8006ad6 <_realloc_r+0x1e>

08006b16 <_malloc_usable_size_r>:
 8006b16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b1a:	1f18      	subs	r0, r3, #4
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	bfbc      	itt	lt
 8006b20:	580b      	ldrlt	r3, [r1, r0]
 8006b22:	18c0      	addlt	r0, r0, r3
 8006b24:	4770      	bx	lr
	...

08006b28 <ceilf>:
 8006b28:	ee10 3a10 	vmov	r3, s0
 8006b2c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006b30:	3a7f      	subs	r2, #127	; 0x7f
 8006b32:	2a16      	cmp	r2, #22
 8006b34:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006b38:	dc2a      	bgt.n	8006b90 <ceilf+0x68>
 8006b3a:	2a00      	cmp	r2, #0
 8006b3c:	da11      	bge.n	8006b62 <ceilf+0x3a>
 8006b3e:	eddf 7a19 	vldr	s15, [pc, #100]	; 8006ba4 <ceilf+0x7c>
 8006b42:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006b46:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b4e:	dd05      	ble.n	8006b5c <ceilf+0x34>
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	db23      	blt.n	8006b9c <ceilf+0x74>
 8006b54:	2900      	cmp	r1, #0
 8006b56:	bf18      	it	ne
 8006b58:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 8006b5c:	ee00 3a10 	vmov	s0, r3
 8006b60:	4770      	bx	lr
 8006b62:	4911      	ldr	r1, [pc, #68]	; (8006ba8 <ceilf+0x80>)
 8006b64:	4111      	asrs	r1, r2
 8006b66:	420b      	tst	r3, r1
 8006b68:	d0fa      	beq.n	8006b60 <ceilf+0x38>
 8006b6a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8006ba4 <ceilf+0x7c>
 8006b6e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006b72:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b7a:	ddef      	ble.n	8006b5c <ceilf+0x34>
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	bfc2      	ittt	gt
 8006b80:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8006b84:	fa40 f202 	asrgt.w	r2, r0, r2
 8006b88:	189b      	addgt	r3, r3, r2
 8006b8a:	ea23 0301 	bic.w	r3, r3, r1
 8006b8e:	e7e5      	b.n	8006b5c <ceilf+0x34>
 8006b90:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8006b94:	d3e4      	bcc.n	8006b60 <ceilf+0x38>
 8006b96:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006b9a:	4770      	bx	lr
 8006b9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006ba0:	e7dc      	b.n	8006b5c <ceilf+0x34>
 8006ba2:	bf00      	nop
 8006ba4:	7149f2ca 	.word	0x7149f2ca
 8006ba8:	007fffff 	.word	0x007fffff

08006bac <_init>:
 8006bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bae:	bf00      	nop
 8006bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bb2:	bc08      	pop	{r3}
 8006bb4:	469e      	mov	lr, r3
 8006bb6:	4770      	bx	lr

08006bb8 <_fini>:
 8006bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bba:	bf00      	nop
 8006bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bbe:	bc08      	pop	{r3}
 8006bc0:	469e      	mov	lr, r3
 8006bc2:	4770      	bx	lr
