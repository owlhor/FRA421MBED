
H745_STAMPR_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a6c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000238a0  08006d0c  08006d0c  00016d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802a5ac  0802a5ac  00040290  2**0
                  CONTENTS
  4 .ARM          00000000  0802a5ac  0802a5ac  00040290  2**0
                  CONTENTS
  5 .preinit_array 00000000  0802a5ac  0802a5ac  00040290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802a5ac  0802a5ac  0003a5ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802a5b0  0802a5b0  0003a5b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  24000000  0802a5b4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  240001d0  0802a784  000401d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000230  0802a7e4  00040230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000006d8  24000290  0802a844  00040290  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000968  0802a844  00040968  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00040290  2**0
                  CONTENTS, READONLY
 14 .debug_info   00016501  00000000  00000000  000402be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002b37  00000000  00000000  000567bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f88  00000000  00000000  000592f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000df0  00000000  00000000  0005a280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003c60f  00000000  00000000  0005b070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014954  00000000  00000000  0009767f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0018a8aa  00000000  00000000  000abfd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0023687d  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000043f4  00000000  00000000  002368d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000290 	.word	0x24000290
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006cf4 	.word	0x08006cf4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000294 	.word	0x24000294
 80002dc:	08006cf4 	.word	0x08006cf4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000384:	4b3d      	ldr	r3, [pc, #244]	; (800047c <SystemInit+0xfc>)
 8000386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800038a:	4a3c      	ldr	r2, [pc, #240]	; (800047c <SystemInit+0xfc>)
 800038c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000394:	4b39      	ldr	r3, [pc, #228]	; (800047c <SystemInit+0xfc>)
 8000396:	691b      	ldr	r3, [r3, #16]
 8000398:	4a38      	ldr	r2, [pc, #224]	; (800047c <SystemInit+0xfc>)
 800039a:	f043 0310 	orr.w	r3, r3, #16
 800039e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003a0:	4b37      	ldr	r3, [pc, #220]	; (8000480 <SystemInit+0x100>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f003 030f 	and.w	r3, r3, #15
 80003a8:	2b06      	cmp	r3, #6
 80003aa:	d807      	bhi.n	80003bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003ac:	4b34      	ldr	r3, [pc, #208]	; (8000480 <SystemInit+0x100>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f023 030f 	bic.w	r3, r3, #15
 80003b4:	4a32      	ldr	r2, [pc, #200]	; (8000480 <SystemInit+0x100>)
 80003b6:	f043 0307 	orr.w	r3, r3, #7
 80003ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003bc:	4b31      	ldr	r3, [pc, #196]	; (8000484 <SystemInit+0x104>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a30      	ldr	r2, [pc, #192]	; (8000484 <SystemInit+0x104>)
 80003c2:	f043 0301 	orr.w	r3, r3, #1
 80003c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003c8:	4b2e      	ldr	r3, [pc, #184]	; (8000484 <SystemInit+0x104>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003ce:	4b2d      	ldr	r3, [pc, #180]	; (8000484 <SystemInit+0x104>)
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	492c      	ldr	r1, [pc, #176]	; (8000484 <SystemInit+0x104>)
 80003d4:	4b2c      	ldr	r3, [pc, #176]	; (8000488 <SystemInit+0x108>)
 80003d6:	4013      	ands	r3, r2
 80003d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003da:	4b29      	ldr	r3, [pc, #164]	; (8000480 <SystemInit+0x100>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f003 0308 	and.w	r3, r3, #8
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d007      	beq.n	80003f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003e6:	4b26      	ldr	r3, [pc, #152]	; (8000480 <SystemInit+0x100>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f023 030f 	bic.w	r3, r3, #15
 80003ee:	4a24      	ldr	r2, [pc, #144]	; (8000480 <SystemInit+0x100>)
 80003f0:	f043 0307 	orr.w	r3, r3, #7
 80003f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80003f6:	4b23      	ldr	r3, [pc, #140]	; (8000484 <SystemInit+0x104>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80003fc:	4b21      	ldr	r3, [pc, #132]	; (8000484 <SystemInit+0x104>)
 80003fe:	2200      	movs	r2, #0
 8000400:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000402:	4b20      	ldr	r3, [pc, #128]	; (8000484 <SystemInit+0x104>)
 8000404:	2200      	movs	r2, #0
 8000406:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000408:	4b1e      	ldr	r3, [pc, #120]	; (8000484 <SystemInit+0x104>)
 800040a:	4a20      	ldr	r2, [pc, #128]	; (800048c <SystemInit+0x10c>)
 800040c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800040e:	4b1d      	ldr	r3, [pc, #116]	; (8000484 <SystemInit+0x104>)
 8000410:	4a1f      	ldr	r2, [pc, #124]	; (8000490 <SystemInit+0x110>)
 8000412:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000414:	4b1b      	ldr	r3, [pc, #108]	; (8000484 <SystemInit+0x104>)
 8000416:	4a1f      	ldr	r2, [pc, #124]	; (8000494 <SystemInit+0x114>)
 8000418:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800041a:	4b1a      	ldr	r3, [pc, #104]	; (8000484 <SystemInit+0x104>)
 800041c:	2200      	movs	r2, #0
 800041e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000420:	4b18      	ldr	r3, [pc, #96]	; (8000484 <SystemInit+0x104>)
 8000422:	4a1c      	ldr	r2, [pc, #112]	; (8000494 <SystemInit+0x114>)
 8000424:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000426:	4b17      	ldr	r3, [pc, #92]	; (8000484 <SystemInit+0x104>)
 8000428:	2200      	movs	r2, #0
 800042a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800042c:	4b15      	ldr	r3, [pc, #84]	; (8000484 <SystemInit+0x104>)
 800042e:	4a19      	ldr	r2, [pc, #100]	; (8000494 <SystemInit+0x114>)
 8000430:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000432:	4b14      	ldr	r3, [pc, #80]	; (8000484 <SystemInit+0x104>)
 8000434:	2200      	movs	r2, #0
 8000436:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000438:	4b12      	ldr	r3, [pc, #72]	; (8000484 <SystemInit+0x104>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a11      	ldr	r2, [pc, #68]	; (8000484 <SystemInit+0x104>)
 800043e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000442:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000444:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <SystemInit+0x104>)
 8000446:	2200      	movs	r2, #0
 8000448:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800044a:	4b13      	ldr	r3, [pc, #76]	; (8000498 <SystemInit+0x118>)
 800044c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800044e:	4a12      	ldr	r2, [pc, #72]	; (8000498 <SystemInit+0x118>)
 8000450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000454:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000456:	4b11      	ldr	r3, [pc, #68]	; (800049c <SystemInit+0x11c>)
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	4b11      	ldr	r3, [pc, #68]	; (80004a0 <SystemInit+0x120>)
 800045c:	4013      	ands	r3, r2
 800045e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000462:	d202      	bcs.n	800046a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000464:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <SystemInit+0x124>)
 8000466:	2201      	movs	r2, #1
 8000468:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800046a:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <SystemInit+0x128>)
 800046c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000470:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000472:	bf00      	nop
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr
 800047c:	e000ed00 	.word	0xe000ed00
 8000480:	52002000 	.word	0x52002000
 8000484:	58024400 	.word	0x58024400
 8000488:	eaf6ed7f 	.word	0xeaf6ed7f
 800048c:	02020200 	.word	0x02020200
 8000490:	01ff0000 	.word	0x01ff0000
 8000494:	01010280 	.word	0x01010280
 8000498:	580000c0 	.word	0x580000c0
 800049c:	5c001000 	.word	0x5c001000
 80004a0:	ffff0000 	.word	0xffff0000
 80004a4:	51008108 	.word	0x51008108
 80004a8:	52004000 	.word	0x52004000

080004ac <ili9486_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9486_DisplayOn(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_SLPOUT);    // Exit Sleep
 80004b0:	2011      	movs	r0, #17
 80004b2:	f000 fc93 	bl	8000ddc <LCD_IO_WriteCmd8>
  ILI9486_LCDMUTEX_POP();
  LCD_IO_Bl_OnOff(1);
 80004b6:	2001      	movs	r0, #1
 80004b8:	f000 fb9b 	bl	8000bf2 <LCD_IO_Bl_OnOff>
}
 80004bc:	bf00      	nop
 80004be:	bd80      	pop	{r7, pc}

080004c0 <ili9486_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9486_GetLcdPixelWidth(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  return ILI9486_SIZE_X;
 80004c4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr

080004d2 <ili9486_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9486_GetLcdPixelHeight(void)
{
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0
  return ILI9486_SIZE_Y;
 80004d6:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80004da:	4618      	mov	r0, r3
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr

080004e4 <ili9486_Init>:
  * @brief  ILI9486 initialization
  * @param  None
  * @retval None
  */
void ili9486_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  if((Is_ili9486_Initialized & ILI9486_LCD_INITIALIZED) == 0)
 80004e8:	4b33      	ldr	r3, [pc, #204]	; (80005b8 <ili9486_Init+0xd4>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	f003 0301 	and.w	r3, r3, #1
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d115      	bne.n	8000520 <ili9486_Init+0x3c>
  {
    Is_ili9486_Initialized |= ILI9486_LCD_INITIALIZED;
 80004f4:	4b30      	ldr	r3, [pc, #192]	; (80005b8 <ili9486_Init+0xd4>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	f043 0301 	orr.w	r3, r3, #1
 80004fc:	b2da      	uxtb	r2, r3
 80004fe:	4b2e      	ldr	r3, [pc, #184]	; (80005b8 <ili9486_Init+0xd4>)
 8000500:	701a      	strb	r2, [r3, #0]
    if((Is_ili9486_Initialized & ILI9486_IO_INITIALIZED) == 0)
 8000502:	4b2d      	ldr	r3, [pc, #180]	; (80005b8 <ili9486_Init+0xd4>)
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	f003 0302 	and.w	r3, r3, #2
 800050a:	2b00      	cmp	r3, #0
 800050c:	d101      	bne.n	8000512 <ili9486_Init+0x2e>
      LCD_IO_Init();
 800050e:	f000 fb7b 	bl	8000c08 <LCD_IO_Init>
    Is_ili9486_Initialized |= ILI9486_IO_INITIALIZED;
 8000512:	4b29      	ldr	r3, [pc, #164]	; (80005b8 <ili9486_Init+0xd4>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	f043 0302 	orr.w	r3, r3, #2
 800051a:	b2da      	uxtb	r2, r3
 800051c:	4b26      	ldr	r3, [pc, #152]	; (80005b8 <ili9486_Init+0xd4>)
 800051e:	701a      	strb	r2, [r3, #0]
  }
  LCD_Delay(10);
 8000520:	200a      	movs	r0, #10
 8000522:	f000 fb5b 	bl	8000bdc <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9486_SWRESET);
 8000526:	2001      	movs	r0, #1
 8000528:	f000 fc58 	bl	8000ddc <LCD_IO_WriteCmd8>
  LCD_Delay(100);
 800052c:	2064      	movs	r0, #100	; 0x64
 800052e:	f000 fb55 	bl	8000bdc <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(ILI9486_RGB_INTERFACE, (uint8_t *)"\x00", 1); // RGB mode off (0xB0)
 8000532:	2201      	movs	r2, #1
 8000534:	4921      	ldr	r1, [pc, #132]	; (80005bc <ili9486_Init+0xd8>)
 8000536:	20b0      	movs	r0, #176	; 0xb0
 8000538:	f001 f894 	bl	8001664 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8(ILI9486_SLPOUT);    // Exit Sleep (0x11)
 800053c:	2011      	movs	r0, #17
 800053e:	f000 fc4d 	bl	8000ddc <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8000542:	200a      	movs	r0, #10
 8000544:	f000 fb4a 	bl	8000bdc <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(ILI9486_PIXFMT, (uint8_t *)"\x55", 1); // interface format (0x3A)
 8000548:	2201      	movs	r2, #1
 800054a:	491d      	ldr	r1, [pc, #116]	; (80005c0 <ili9486_Init+0xdc>)
 800054c:	203a      	movs	r0, #58	; 0x3a
 800054e:	f001 f889 	bl	8001664 <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9486_MADCTL); LCD_IO_WriteData8(ILI9486_MAD_DATA_RIGHT_THEN_DOWN);
 8000552:	2036      	movs	r0, #54	; 0x36
 8000554:	f000 fc42 	bl	8000ddc <LCD_IO_WriteCmd8>
 8000558:	2028      	movs	r0, #40	; 0x28
 800055a:	f000 fce9 	bl	8000f30 <LCD_IO_WriteData8>

  LCD_IO_WriteCmd8MultipleData8(ILI9486_PWCTR3, (uint8_t *)"\x44", 1); // 0xC2
 800055e:	2201      	movs	r2, #1
 8000560:	4918      	ldr	r1, [pc, #96]	; (80005c4 <ili9486_Init+0xe0>)
 8000562:	20c2      	movs	r0, #194	; 0xc2
 8000564:	f001 f87e 	bl	8001664 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9486_VMCTR1, (uint8_t *)"\x00\x00\x00\x00", 4); // 0xC5
 8000568:	2204      	movs	r2, #4
 800056a:	4917      	ldr	r1, [pc, #92]	; (80005c8 <ili9486_Init+0xe4>)
 800056c:	20c5      	movs	r0, #197	; 0xc5
 800056e:	f001 f879 	bl	8001664 <LCD_IO_WriteCmd8MultipleData8>

  // positive gamma control (0xE0)
  LCD_IO_WriteCmd8MultipleData8(ILI9486_GMCTRP1, (uint8_t *)"\x0F\x1F\x1C\x0C\x0F\x08\x48\x98\x37\x0A\x13\x04\x11\x0D\x00", 15);
 8000572:	220f      	movs	r2, #15
 8000574:	4915      	ldr	r1, [pc, #84]	; (80005cc <ili9486_Init+0xe8>)
 8000576:	20e0      	movs	r0, #224	; 0xe0
 8000578:	f001 f874 	bl	8001664 <LCD_IO_WriteCmd8MultipleData8>

  // negative gamma control (0xE1)
  LCD_IO_WriteCmd8MultipleData8(ILI9486_GMCTRN1, (uint8_t *)"\x0F\x32\x2E\x0B\x0D\x05\x47\x75\x37\x06\x10\x03\x24\x20\x00", 15);
 800057c:	220f      	movs	r2, #15
 800057e:	4914      	ldr	r1, [pc, #80]	; (80005d0 <ili9486_Init+0xec>)
 8000580:	20e1      	movs	r0, #225	; 0xe1
 8000582:	f001 f86f 	bl	8001664 <LCD_IO_WriteCmd8MultipleData8>

  // Digital gamma control1 (0xE2)
  LCD_IO_WriteCmd8MultipleData8(ILI9486_DGCTR1, (uint8_t *)"\x0F\x32\x2E\x0B\x0D\x05\x47\x75\x37\x06\x10\x03\x24\x20\x00", 15);
 8000586:	220f      	movs	r2, #15
 8000588:	4911      	ldr	r1, [pc, #68]	; (80005d0 <ili9486_Init+0xec>)
 800058a:	20e2      	movs	r0, #226	; 0xe2
 800058c:	f001 f86a 	bl	8001664 <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9486_NORON);     // Normal display on (0x13)
 8000590:	2013      	movs	r0, #19
 8000592:	f000 fc23 	bl	8000ddc <LCD_IO_WriteCmd8>
  LCD_IO_WriteCmd8(ILI9486_INVOFF);    // Display inversion off (0x20)
 8000596:	2020      	movs	r0, #32
 8000598:	f000 fc20 	bl	8000ddc <LCD_IO_WriteCmd8>
  LCD_IO_WriteCmd8(ILI9486_SLPOUT);    // Exit Sleep (0x11)
 800059c:	2011      	movs	r0, #17
 800059e:	f000 fc1d 	bl	8000ddc <LCD_IO_WriteCmd8>
  LCD_Delay(200);
 80005a2:	20c8      	movs	r0, #200	; 0xc8
 80005a4:	f000 fb1a 	bl	8000bdc <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9486_DISPON);    // Display on (0x29)
 80005a8:	2029      	movs	r0, #41	; 0x29
 80005aa:	f000 fc17 	bl	8000ddc <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 80005ae:	200a      	movs	r0, #10
 80005b0:	f000 fb14 	bl	8000bdc <LCD_Delay>
}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	240002ac 	.word	0x240002ac
 80005bc:	08006d0c 	.word	0x08006d0c
 80005c0:	08006d10 	.word	0x08006d10
 80005c4:	08006d14 	.word	0x08006d14
 80005c8:	08006d18 	.word	0x08006d18
 80005cc:	08006d20 	.word	0x08006d20
 80005d0:	08006d30 	.word	0x08006d30

080005d4 <ili9486_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9486_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	80fb      	strh	r3, [r7, #6]
 80005de:	460b      	mov	r3, r1
 80005e0:	80bb      	strh	r3, [r7, #4]
 80005e2:	4613      	mov	r3, r2
 80005e4:	807b      	strh	r3, [r7, #2]
  ILI9486_LCDMUTEX_PUSH();
  ILI9486_SETCURSOR(Xpos, Ypos);
 80005e6:	202a      	movs	r0, #42	; 0x2a
 80005e8:	f000 fbf8 	bl	8000ddc <LCD_IO_WriteCmd8>
 80005ec:	88fb      	ldrh	r3, [r7, #6]
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 fc9b 	bl	8000f30 <LCD_IO_WriteData8>
 80005fa:	88fb      	ldrh	r3, [r7, #6]
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 fc96 	bl	8000f30 <LCD_IO_WriteData8>
 8000604:	88fb      	ldrh	r3, [r7, #6]
 8000606:	0a1b      	lsrs	r3, r3, #8
 8000608:	b29b      	uxth	r3, r3
 800060a:	b2db      	uxtb	r3, r3
 800060c:	4618      	mov	r0, r3
 800060e:	f000 fc8f 	bl	8000f30 <LCD_IO_WriteData8>
 8000612:	88fb      	ldrh	r3, [r7, #6]
 8000614:	b2db      	uxtb	r3, r3
 8000616:	4618      	mov	r0, r3
 8000618:	f000 fc8a 	bl	8000f30 <LCD_IO_WriteData8>
 800061c:	202b      	movs	r0, #43	; 0x2b
 800061e:	f000 fbdd 	bl	8000ddc <LCD_IO_WriteCmd8>
 8000622:	88bb      	ldrh	r3, [r7, #4]
 8000624:	0a1b      	lsrs	r3, r3, #8
 8000626:	b29b      	uxth	r3, r3
 8000628:	b2db      	uxtb	r3, r3
 800062a:	4618      	mov	r0, r3
 800062c:	f000 fc80 	bl	8000f30 <LCD_IO_WriteData8>
 8000630:	88bb      	ldrh	r3, [r7, #4]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	4618      	mov	r0, r3
 8000636:	f000 fc7b 	bl	8000f30 <LCD_IO_WriteData8>
 800063a:	88bb      	ldrh	r3, [r7, #4]
 800063c:	0a1b      	lsrs	r3, r3, #8
 800063e:	b29b      	uxth	r3, r3
 8000640:	b2db      	uxtb	r3, r3
 8000642:	4618      	mov	r0, r3
 8000644:	f000 fc74 	bl	8000f30 <LCD_IO_WriteData8>
 8000648:	88bb      	ldrh	r3, [r7, #4]
 800064a:	b2db      	uxtb	r3, r3
 800064c:	4618      	mov	r0, r3
 800064e:	f000 fc6f 	bl	8000f30 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_RAMWR); LCD_IO_WriteData16(RGBCode);
 8000652:	202c      	movs	r0, #44	; 0x2c
 8000654:	f000 fbc2 	bl	8000ddc <LCD_IO_WriteCmd8>
 8000658:	887b      	ldrh	r3, [r7, #2]
 800065a:	4618      	mov	r0, r3
 800065c:	f000 fd0a 	bl	8001074 <LCD_IO_WriteData16>
  ILI9486_LCDMUTEX_POP();
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <ili9486_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9486_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8000668:	b590      	push	{r4, r7, lr}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	4604      	mov	r4, r0
 8000670:	4608      	mov	r0, r1
 8000672:	4611      	mov	r1, r2
 8000674:	461a      	mov	r2, r3
 8000676:	4623      	mov	r3, r4
 8000678:	80fb      	strh	r3, [r7, #6]
 800067a:	4603      	mov	r3, r0
 800067c:	80bb      	strh	r3, [r7, #4]
 800067e:	460b      	mov	r3, r1
 8000680:	807b      	strh	r3, [r7, #2]
 8000682:	4613      	mov	r3, r2
 8000684:	803b      	strh	r3, [r7, #0]
  yStart = Ypos; yEnd = Ypos + Height - 1;
 8000686:	4a2a      	ldr	r2, [pc, #168]	; (8000730 <ili9486_SetDisplayWindow+0xc8>)
 8000688:	88bb      	ldrh	r3, [r7, #4]
 800068a:	8013      	strh	r3, [r2, #0]
 800068c:	88ba      	ldrh	r2, [r7, #4]
 800068e:	883b      	ldrh	r3, [r7, #0]
 8000690:	4413      	add	r3, r2
 8000692:	b29b      	uxth	r3, r3
 8000694:	3b01      	subs	r3, #1
 8000696:	b29a      	uxth	r2, r3
 8000698:	4b26      	ldr	r3, [pc, #152]	; (8000734 <ili9486_SetDisplayWindow+0xcc>)
 800069a:	801a      	strh	r2, [r3, #0]
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Width - 1);
 800069c:	202a      	movs	r0, #42	; 0x2a
 800069e:	f000 fb9d 	bl	8000ddc <LCD_IO_WriteCmd8>
 80006a2:	88fb      	ldrh	r3, [r7, #6]
 80006a4:	0a1b      	lsrs	r3, r3, #8
 80006a6:	b29b      	uxth	r3, r3
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 fc40 	bl	8000f30 <LCD_IO_WriteData8>
 80006b0:	88fb      	ldrh	r3, [r7, #6]
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 fc3b 	bl	8000f30 <LCD_IO_WriteData8>
 80006ba:	88fa      	ldrh	r2, [r7, #6]
 80006bc:	887b      	ldrh	r3, [r7, #2]
 80006be:	4413      	add	r3, r2
 80006c0:	3b01      	subs	r3, #1
 80006c2:	121b      	asrs	r3, r3, #8
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 fc32 	bl	8000f30 <LCD_IO_WriteData8>
 80006cc:	88fb      	ldrh	r3, [r7, #6]
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	887b      	ldrh	r3, [r7, #2]
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	4413      	add	r3, r2
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	3b01      	subs	r3, #1
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 fc27 	bl	8000f30 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Height - 1);
 80006e2:	202b      	movs	r0, #43	; 0x2b
 80006e4:	f000 fb7a 	bl	8000ddc <LCD_IO_WriteCmd8>
 80006e8:	88bb      	ldrh	r3, [r7, #4]
 80006ea:	0a1b      	lsrs	r3, r3, #8
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 fc1d 	bl	8000f30 <LCD_IO_WriteData8>
 80006f6:	88bb      	ldrh	r3, [r7, #4]
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 fc18 	bl	8000f30 <LCD_IO_WriteData8>
 8000700:	88ba      	ldrh	r2, [r7, #4]
 8000702:	883b      	ldrh	r3, [r7, #0]
 8000704:	4413      	add	r3, r2
 8000706:	3b01      	subs	r3, #1
 8000708:	121b      	asrs	r3, r3, #8
 800070a:	b2db      	uxtb	r3, r3
 800070c:	4618      	mov	r0, r3
 800070e:	f000 fc0f 	bl	8000f30 <LCD_IO_WriteData8>
 8000712:	88bb      	ldrh	r3, [r7, #4]
 8000714:	b2da      	uxtb	r2, r3
 8000716:	883b      	ldrh	r3, [r7, #0]
 8000718:	b2db      	uxtb	r3, r3
 800071a:	4413      	add	r3, r2
 800071c:	b2db      	uxtb	r3, r3
 800071e:	3b01      	subs	r3, #1
 8000720:	b2db      	uxtb	r3, r3
 8000722:	4618      	mov	r0, r3
 8000724:	f000 fc04 	bl	8000f30 <LCD_IO_WriteData8>
  ILI9486_LCDMUTEX_POP();
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	bd90      	pop	{r4, r7, pc}
 8000730:	240002ae 	.word	0x240002ae
 8000734:	240002b0 	.word	0x240002b0

08000738 <ili9486_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9486_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 8000738:	b590      	push	{r4, r7, lr}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	4604      	mov	r4, r0
 8000740:	4608      	mov	r0, r1
 8000742:	4611      	mov	r1, r2
 8000744:	461a      	mov	r2, r3
 8000746:	4623      	mov	r3, r4
 8000748:	80fb      	strh	r3, [r7, #6]
 800074a:	4603      	mov	r3, r0
 800074c:	80bb      	strh	r3, [r7, #4]
 800074e:	460b      	mov	r3, r1
 8000750:	807b      	strh	r3, [r7, #2]
 8000752:	4613      	mov	r3, r2
 8000754:	803b      	strh	r3, [r7, #0]
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Xsize - 1);
 8000756:	202a      	movs	r0, #42	; 0x2a
 8000758:	f000 fb40 	bl	8000ddc <LCD_IO_WriteCmd8>
 800075c:	88fb      	ldrh	r3, [r7, #6]
 800075e:	0a1b      	lsrs	r3, r3, #8
 8000760:	b29b      	uxth	r3, r3
 8000762:	b2db      	uxtb	r3, r3
 8000764:	4618      	mov	r0, r3
 8000766:	f000 fbe3 	bl	8000f30 <LCD_IO_WriteData8>
 800076a:	88fb      	ldrh	r3, [r7, #6]
 800076c:	b2db      	uxtb	r3, r3
 800076e:	4618      	mov	r0, r3
 8000770:	f000 fbde 	bl	8000f30 <LCD_IO_WriteData8>
 8000774:	88fa      	ldrh	r2, [r7, #6]
 8000776:	887b      	ldrh	r3, [r7, #2]
 8000778:	4413      	add	r3, r2
 800077a:	3b01      	subs	r3, #1
 800077c:	121b      	asrs	r3, r3, #8
 800077e:	b2db      	uxtb	r3, r3
 8000780:	4618      	mov	r0, r3
 8000782:	f000 fbd5 	bl	8000f30 <LCD_IO_WriteData8>
 8000786:	88fb      	ldrh	r3, [r7, #6]
 8000788:	b2da      	uxtb	r2, r3
 800078a:	887b      	ldrh	r3, [r7, #2]
 800078c:	b2db      	uxtb	r3, r3
 800078e:	4413      	add	r3, r2
 8000790:	b2db      	uxtb	r3, r3
 8000792:	3b01      	subs	r3, #1
 8000794:	b2db      	uxtb	r3, r3
 8000796:	4618      	mov	r0, r3
 8000798:	f000 fbca 	bl	8000f30 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Ysize - 1);
 800079c:	202b      	movs	r0, #43	; 0x2b
 800079e:	f000 fb1d 	bl	8000ddc <LCD_IO_WriteCmd8>
 80007a2:	88bb      	ldrh	r3, [r7, #4]
 80007a4:	0a1b      	lsrs	r3, r3, #8
 80007a6:	b29b      	uxth	r3, r3
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 fbc0 	bl	8000f30 <LCD_IO_WriteData8>
 80007b0:	88bb      	ldrh	r3, [r7, #4]
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	4618      	mov	r0, r3
 80007b6:	f000 fbbb 	bl	8000f30 <LCD_IO_WriteData8>
 80007ba:	88ba      	ldrh	r2, [r7, #4]
 80007bc:	883b      	ldrh	r3, [r7, #0]
 80007be:	4413      	add	r3, r2
 80007c0:	3b01      	subs	r3, #1
 80007c2:	121b      	asrs	r3, r3, #8
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 fbb2 	bl	8000f30 <LCD_IO_WriteData8>
 80007cc:	88bb      	ldrh	r3, [r7, #4]
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	883b      	ldrh	r3, [r7, #0]
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	4413      	add	r3, r2
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	3b01      	subs	r3, #1
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 fba7 	bl	8000f30 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9486_RAMWR, RGBCode, Xsize * Ysize);
 80007e2:	887b      	ldrh	r3, [r7, #2]
 80007e4:	883a      	ldrh	r2, [r7, #0]
 80007e6:	fb02 f303 	mul.w	r3, r2, r3
 80007ea:	461a      	mov	r2, r3
 80007ec:	8b3b      	ldrh	r3, [r7, #24]
 80007ee:	4619      	mov	r1, r3
 80007f0:	202c      	movs	r0, #44	; 0x2c
 80007f2:	f000 fd69 	bl	80012c8 <LCD_IO_WriteCmd8DataFill16>
  ILI9486_LCDMUTEX_POP();
}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd90      	pop	{r4, r7, pc}

080007fe <ili9486_DrawRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9486_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 80007fe:	b590      	push	{r4, r7, lr}
 8000800:	b083      	sub	sp, #12
 8000802:	af00      	add	r7, sp, #0
 8000804:	4604      	mov	r4, r0
 8000806:	4608      	mov	r0, r1
 8000808:	4611      	mov	r1, r2
 800080a:	461a      	mov	r2, r3
 800080c:	4623      	mov	r3, r4
 800080e:	80fb      	strh	r3, [r7, #6]
 8000810:	4603      	mov	r3, r0
 8000812:	80bb      	strh	r3, [r7, #4]
 8000814:	460b      	mov	r3, r1
 8000816:	807b      	strh	r3, [r7, #2]
 8000818:	4613      	mov	r3, r2
 800081a:	803b      	strh	r3, [r7, #0]
  ili9486_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 800081c:	883b      	ldrh	r3, [r7, #0]
 800081e:	887a      	ldrh	r2, [r7, #2]
 8000820:	88b9      	ldrh	r1, [r7, #4]
 8000822:	88f8      	ldrh	r0, [r7, #6]
 8000824:	f7ff ff20 	bl	8000668 <ili9486_SetDisplayWindow>
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData16(ILI9486_RAMWR, pData, Xsize * Ysize);
 8000828:	887b      	ldrh	r3, [r7, #2]
 800082a:	883a      	ldrh	r2, [r7, #0]
 800082c:	fb02 f303 	mul.w	r3, r2, r3
 8000830:	461a      	mov	r2, r3
 8000832:	69b9      	ldr	r1, [r7, #24]
 8000834:	202c      	movs	r0, #44	; 0x2c
 8000836:	f001 f84f 	bl	80018d8 <LCD_IO_WriteCmd8MultipleData16>
  ILI9486_LCDMUTEX_POP();
}
 800083a:	bf00      	nop
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	bd90      	pop	{r4, r7, pc}

08000842 <ili9486_WriteChar>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Char background Color
  * @retval None
  */
void ili9486_WriteChar(uint16_t Xpo, uint16_t Ypo, char *chr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 8000842:	b082      	sub	sp, #8
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	; 0x28
 8000848:	af00      	add	r7, sp, #0
 800084a:	603a      	str	r2, [r7, #0]
 800084c:	637b      	str	r3, [r7, #52]	; 0x34
 800084e:	4603      	mov	r3, r0
 8000850:	80fb      	strh	r3, [r7, #6]
 8000852:	460b      	mov	r3, r1
 8000854:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9486_WriteChar(140, 50, "E", Font24, cl_ORANGE, cl_BLACK);
	 * */
	//// stored font data
	uint32_t hop32 = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t b8[4] = {0};
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
	 * c = i * rowbox -> jump to next column in next i rowloop
	 * k => jump to next row in that column
	 * */

	//// find num of bit rows per jump in fonts.c
	int rowbox = ceilf((float)(fonto.Width) / 8);
 800085e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000860:	ee07 3a90 	vmov	s15, r3
 8000864:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000868:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800086c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000870:	eeb0 0a47 	vmov.f32	s0, s14
 8000874:	f006 f9fc 	bl	8006c70 <ceilf>
 8000878:	eef0 7a40 	vmov.f32	s15, s0
 800087c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000880:	ee17 3a90 	vmov	r3, s15
 8000884:	617b      	str	r3, [r7, #20]

	//// choose MSB check pos for each font size
	//// 0x80 , 0x8000 , 0x 800000
	uint32_t clif_msb = 0x80 << (8 * (rowbox - 1));
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	3b01      	subs	r3, #1
 800088a:	00db      	lsls	r3, r3, #3
 800088c:	2280      	movs	r2, #128	; 0x80
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	613b      	str	r3, [r7, #16]

	//// -32 to offset sync ASCII Table start " " at 32
	//// double for loop as one char table
	for(int i = 0; i < fonto.Height; i++){
 8000894:	2300      	movs	r3, #0
 8000896:	623b      	str	r3, [r7, #32]
 8000898:	e060      	b.n	800095c <ili9486_WriteChar+0x11a>
		hop32 = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
 80008a2:	e024      	b.n	80008ee <ili9486_WriteChar+0xac>
			b8[k] = fonto.table[((int)(*chr - 32) * fonto.Height * rowbox) + (i * rowbox) + k];
 80008a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008a6:	683a      	ldr	r2, [r7, #0]
 80008a8:	7812      	ldrb	r2, [r2, #0]
 80008aa:	3a20      	subs	r2, #32
 80008ac:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 80008ae:	fb01 f202 	mul.w	r2, r1, r2
 80008b2:	6979      	ldr	r1, [r7, #20]
 80008b4:	fb02 f101 	mul.w	r1, r2, r1
 80008b8:	6a3a      	ldr	r2, [r7, #32]
 80008ba:	6978      	ldr	r0, [r7, #20]
 80008bc:	fb00 f202 	mul.w	r2, r0, r2
 80008c0:	4411      	add	r1, r2
 80008c2:	69fa      	ldr	r2, [r7, #28]
 80008c4:	440a      	add	r2, r1
 80008c6:	4413      	add	r3, r2
 80008c8:	7819      	ldrb	r1, [r3, #0]
 80008ca:	f107 020c 	add.w	r2, r7, #12
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	4413      	add	r3, r2
 80008d2:	460a      	mov	r2, r1
 80008d4:	701a      	strb	r2, [r3, #0]
			hop32 = (hop32 << 8) + b8[k];
 80008d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d8:	021b      	lsls	r3, r3, #8
 80008da:	f107 010c 	add.w	r1, r7, #12
 80008de:	69fa      	ldr	r2, [r7, #28]
 80008e0:	440a      	add	r2, r1
 80008e2:	7812      	ldrb	r2, [r2, #0]
 80008e4:	4413      	add	r3, r2
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 80008e8:	69fb      	ldr	r3, [r7, #28]
 80008ea:	3301      	adds	r3, #1
 80008ec:	61fb      	str	r3, [r7, #28]
 80008ee:	69fa      	ldr	r2, [r7, #28]
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	429a      	cmp	r2, r3
 80008f4:	dbd6      	blt.n	80008a4 <ili9486_WriteChar+0x62>
		}

		for(int j = 0; j < fonto.Width; j++){
 80008f6:	2300      	movs	r3, #0
 80008f8:	61bb      	str	r3, [r7, #24]
 80008fa:	e027      	b.n	800094c <ili9486_WriteChar+0x10a>
			//// if valuein fonttable is 1
			if((hop32 << j) & clif_msb){ // buu32.b32
 80008fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008fe:	69bb      	ldr	r3, [r7, #24]
 8000900:	409a      	lsls	r2, r3
 8000902:	693b      	ldr	r3, [r7, #16]
 8000904:	4013      	ands	r3, r2
 8000906:	2b00      	cmp	r3, #0
 8000908:	d00e      	beq.n	8000928 <ili9486_WriteChar+0xe6>
				ili9486_WritePixel(Xpo + j, Ypo + i, RGB_Coder);
 800090a:	69bb      	ldr	r3, [r7, #24]
 800090c:	b29a      	uxth	r2, r3
 800090e:	88fb      	ldrh	r3, [r7, #6]
 8000910:	4413      	add	r3, r2
 8000912:	b298      	uxth	r0, r3
 8000914:	6a3b      	ldr	r3, [r7, #32]
 8000916:	b29a      	uxth	r2, r3
 8000918:	88bb      	ldrh	r3, [r7, #4]
 800091a:	4413      	add	r3, r2
 800091c:	b29b      	uxth	r3, r3
 800091e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8000920:	4619      	mov	r1, r3
 8000922:	f7ff fe57 	bl	80005d4 <ili9486_WritePixel>
 8000926:	e00e      	b.n	8000946 <ili9486_WriteChar+0x104>
			}
			//// for background write
			else{
				ili9486_WritePixel(Xpo + j, Ypo + i, RGB_bg);
 8000928:	69bb      	ldr	r3, [r7, #24]
 800092a:	b29a      	uxth	r2, r3
 800092c:	88fb      	ldrh	r3, [r7, #6]
 800092e:	4413      	add	r3, r2
 8000930:	b298      	uxth	r0, r3
 8000932:	6a3b      	ldr	r3, [r7, #32]
 8000934:	b29a      	uxth	r2, r3
 8000936:	88bb      	ldrh	r3, [r7, #4]
 8000938:	4413      	add	r3, r2
 800093a:	b29b      	uxth	r3, r3
 800093c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8000940:	4619      	mov	r1, r3
 8000942:	f7ff fe47 	bl	80005d4 <ili9486_WritePixel>
		for(int j = 0; j < fonto.Width; j++){
 8000946:	69bb      	ldr	r3, [r7, #24]
 8000948:	3301      	adds	r3, #1
 800094a:	61bb      	str	r3, [r7, #24]
 800094c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800094e:	461a      	mov	r2, r3
 8000950:	69bb      	ldr	r3, [r7, #24]
 8000952:	4293      	cmp	r3, r2
 8000954:	dbd2      	blt.n	80008fc <ili9486_WriteChar+0xba>
	for(int i = 0; i < fonto.Height; i++){
 8000956:	6a3b      	ldr	r3, [r7, #32]
 8000958:	3301      	adds	r3, #1
 800095a:	623b      	str	r3, [r7, #32]
 800095c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800095e:	461a      	mov	r2, r3
 8000960:	6a3b      	ldr	r3, [r7, #32]
 8000962:	4293      	cmp	r3, r2
 8000964:	db99      	blt.n	800089a <ili9486_WriteChar+0x58>
			}

		}
	}
}
 8000966:	bf00      	nop
 8000968:	bf00      	nop
 800096a:	3728      	adds	r7, #40	; 0x28
 800096c:	46bd      	mov	sp, r7
 800096e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000972:	b002      	add	sp, #8
 8000974:	4770      	bx	lr

08000976 <ili9486_WriteCharNoBG>:
  * @param  chr:  Display Char
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @retval None
  */
void ili9486_WriteCharNoBG(uint16_t Xpo, uint16_t Ypo, char *chr,sFONT fonto, uint16_t RGB_Coder){
 8000976:	b082      	sub	sp, #8
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	; 0x28
 800097c:	af00      	add	r7, sp, #0
 800097e:	603a      	str	r2, [r7, #0]
 8000980:	637b      	str	r3, [r7, #52]	; 0x34
 8000982:	4603      	mov	r3, r0
 8000984:	80fb      	strh	r3, [r7, #6]
 8000986:	460b      	mov	r3, r1
 8000988:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9486_WriteCharNoBG(10, 30, "E", Font24, cl_ORANGE);
	 * */
	//// stored font data
	uint32_t hop32 = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t b8[4] = {0};
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]

	//// find num of bit rows per jump in fonts.c
	int rowbox = ceilf((float)(fonto.Width) / 8);
 8000992:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000994:	ee07 3a90 	vmov	s15, r3
 8000998:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800099c:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80009a0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80009a4:	eeb0 0a47 	vmov.f32	s0, s14
 80009a8:	f006 f962 	bl	8006c70 <ceilf>
 80009ac:	eef0 7a40 	vmov.f32	s15, s0
 80009b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009b4:	ee17 3a90 	vmov	r3, s15
 80009b8:	617b      	str	r3, [r7, #20]
	uint32_t clif_msb = 0x80 << (8 * (rowbox - 1));
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	3b01      	subs	r3, #1
 80009be:	00db      	lsls	r3, r3, #3
 80009c0:	2280      	movs	r2, #128	; 0x80
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < fonto.Height; i++){
 80009c8:	2300      	movs	r3, #0
 80009ca:	623b      	str	r3, [r7, #32]
 80009cc:	e050      	b.n	8000a70 <ili9486_WriteCharNoBG+0xfa>
		hop32 = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 80009d2:	2300      	movs	r3, #0
 80009d4:	61fb      	str	r3, [r7, #28]
 80009d6:	e024      	b.n	8000a22 <ili9486_WriteCharNoBG+0xac>
			b8[k] = fonto.table[((int)(*chr - 32) * fonto.Height * rowbox) + (i * rowbox) + k];
 80009d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009da:	683a      	ldr	r2, [r7, #0]
 80009dc:	7812      	ldrb	r2, [r2, #0]
 80009de:	3a20      	subs	r2, #32
 80009e0:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 80009e2:	fb01 f202 	mul.w	r2, r1, r2
 80009e6:	6979      	ldr	r1, [r7, #20]
 80009e8:	fb02 f101 	mul.w	r1, r2, r1
 80009ec:	6a3a      	ldr	r2, [r7, #32]
 80009ee:	6978      	ldr	r0, [r7, #20]
 80009f0:	fb00 f202 	mul.w	r2, r0, r2
 80009f4:	4411      	add	r1, r2
 80009f6:	69fa      	ldr	r2, [r7, #28]
 80009f8:	440a      	add	r2, r1
 80009fa:	4413      	add	r3, r2
 80009fc:	7819      	ldrb	r1, [r3, #0]
 80009fe:	f107 020c 	add.w	r2, r7, #12
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	4413      	add	r3, r2
 8000a06:	460a      	mov	r2, r1
 8000a08:	701a      	strb	r2, [r3, #0]
			hop32 = (hop32 << 8) + b8[k];
 8000a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0c:	021b      	lsls	r3, r3, #8
 8000a0e:	f107 010c 	add.w	r1, r7, #12
 8000a12:	69fa      	ldr	r2, [r7, #28]
 8000a14:	440a      	add	r2, r1
 8000a16:	7812      	ldrb	r2, [r2, #0]
 8000a18:	4413      	add	r3, r2
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8000a1c:	69fb      	ldr	r3, [r7, #28]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	61fb      	str	r3, [r7, #28]
 8000a22:	69fa      	ldr	r2, [r7, #28]
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	429a      	cmp	r2, r3
 8000a28:	dbd6      	blt.n	80009d8 <ili9486_WriteCharNoBG+0x62>
		}

		for(int j = 0; j < fonto.Width; j++){
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61bb      	str	r3, [r7, #24]
 8000a2e:	e017      	b.n	8000a60 <ili9486_WriteCharNoBG+0xea>
			//// if valuein fonttable is 1
			if((hop32 << j) & clif_msb){ // buu32.b32
 8000a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a32:	69bb      	ldr	r3, [r7, #24]
 8000a34:	409a      	lsls	r2, r3
 8000a36:	693b      	ldr	r3, [r7, #16]
 8000a38:	4013      	ands	r3, r2
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d00d      	beq.n	8000a5a <ili9486_WriteCharNoBG+0xe4>
				ili9486_WritePixel(Xpo + j, Ypo + i, RGB_Coder);
 8000a3e:	69bb      	ldr	r3, [r7, #24]
 8000a40:	b29a      	uxth	r2, r3
 8000a42:	88fb      	ldrh	r3, [r7, #6]
 8000a44:	4413      	add	r3, r2
 8000a46:	b298      	uxth	r0, r3
 8000a48:	6a3b      	ldr	r3, [r7, #32]
 8000a4a:	b29a      	uxth	r2, r3
 8000a4c:	88bb      	ldrh	r3, [r7, #4]
 8000a4e:	4413      	add	r3, r2
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8000a54:	4619      	mov	r1, r3
 8000a56:	f7ff fdbd 	bl	80005d4 <ili9486_WritePixel>
		for(int j = 0; j < fonto.Width; j++){
 8000a5a:	69bb      	ldr	r3, [r7, #24]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	61bb      	str	r3, [r7, #24]
 8000a60:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000a62:	461a      	mov	r2, r3
 8000a64:	69bb      	ldr	r3, [r7, #24]
 8000a66:	4293      	cmp	r3, r2
 8000a68:	dbe2      	blt.n	8000a30 <ili9486_WriteCharNoBG+0xba>
	for(int i = 0; i < fonto.Height; i++){
 8000a6a:	6a3b      	ldr	r3, [r7, #32]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	623b      	str	r3, [r7, #32]
 8000a70:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000a72:	461a      	mov	r2, r3
 8000a74:	6a3b      	ldr	r3, [r7, #32]
 8000a76:	4293      	cmp	r3, r2
 8000a78:	dba9      	blt.n	80009ce <ili9486_WriteCharNoBG+0x58>
			}
		}
	}
}
 8000a7a:	bf00      	nop
 8000a7c:	bf00      	nop
 8000a7e:	3728      	adds	r7, #40	; 0x28
 8000a80:	46bd      	mov	sp, r7
 8000a82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a86:	b002      	add	sp, #8
 8000a88:	4770      	bx	lr

08000a8a <ili9486_WriteString>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Text background Color
  * @retval None
  */
void ili9486_WriteString(uint16_t Xpo, uint16_t Ypo,const char* strr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b088      	sub	sp, #32
 8000a90:	af04      	add	r7, sp, #16
 8000a92:	603a      	str	r2, [r7, #0]
 8000a94:	61fb      	str	r3, [r7, #28]
 8000a96:	4603      	mov	r3, r0
 8000a98:	80fb      	strh	r3, [r7, #6]
 8000a9a:	460b      	mov	r3, r1
 8000a9c:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9486_WriteString(20, 300, "Helios xTerra", Font20, cl_WHITE, cl_BLACK);
	 * */
	uint16_t ili_heigh = ili9486_GetLcdPixelHeight();
 8000a9e:	f7ff fd18 	bl	80004d2 <ili9486_GetLcdPixelHeight>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	81fb      	strh	r3, [r7, #14]
	uint16_t ili_width = ili9486_GetLcdPixelWidth();
 8000aa6:	f7ff fd0b 	bl	80004c0 <ili9486_GetLcdPixelWidth>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	81bb      	strh	r3, [r7, #12]
	while(*strr){
 8000aae:	e02c      	b.n	8000b0a <ili9486_WriteString+0x80>
	//// Check screen overflow / new line
		if(Xpo + fonto.Width >= ili_width){
 8000ab0:	88fb      	ldrh	r3, [r7, #6]
 8000ab2:	8c3a      	ldrh	r2, [r7, #32]
 8000ab4:	441a      	add	r2, r3
 8000ab6:	89bb      	ldrh	r3, [r7, #12]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	db13      	blt.n	8000ae4 <ili9486_WriteString+0x5a>
			Xpo = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	80fb      	strh	r3, [r7, #6]
			Ypo += fonto.Height;
 8000ac0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000ac2:	88bb      	ldrh	r3, [r7, #4]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	80bb      	strh	r3, [r7, #4]

			if(Ypo + fonto.Height >= ili_heigh){
 8000ac8:	88bb      	ldrh	r3, [r7, #4]
 8000aca:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000acc:	441a      	add	r2, r3
 8000ace:	89fb      	ldrh	r3, [r7, #14]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	da1f      	bge.n	8000b14 <ili9486_WriteString+0x8a>
				break;
			}

			if(*strr == ' ') {
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b20      	cmp	r3, #32
 8000ada:	d103      	bne.n	8000ae4 <ili9486_WriteString+0x5a>
				// skip spaces in the beginning of the new line
				strr++;
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	603b      	str	r3, [r7, #0]
				continue;
 8000ae2:	e012      	b.n	8000b0a <ili9486_WriteString+0x80>
			}
		}
		//ST7735_WriteChar(x, y, *str, font, color, bgcolor);
		ili9486_WriteChar(Xpo, Ypo, strr, fonto, RGB_Coder, RGB_bg);
 8000ae4:	88b9      	ldrh	r1, [r7, #4]
 8000ae6:	88f8      	ldrh	r0, [r7, #6]
 8000ae8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000aea:	9302      	str	r3, [sp, #8]
 8000aec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000aee:	9301      	str	r3, [sp, #4]
 8000af0:	6a3b      	ldr	r3, [r7, #32]
 8000af2:	9300      	str	r3, [sp, #0]
 8000af4:	69fb      	ldr	r3, [r7, #28]
 8000af6:	683a      	ldr	r2, [r7, #0]
 8000af8:	f7ff fea3 	bl	8000842 <ili9486_WriteChar>
		Xpo += fonto.Width;
 8000afc:	8c3a      	ldrh	r2, [r7, #32]
 8000afe:	88fb      	ldrh	r3, [r7, #6]
 8000b00:	4413      	add	r3, r2
 8000b02:	80fb      	strh	r3, [r7, #6]
		strr++;
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	3301      	adds	r3, #1
 8000b08:	603b      	str	r3, [r7, #0]
	while(*strr){
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d1ce      	bne.n	8000ab0 <ili9486_WriteString+0x26>
	}
}
 8000b12:	e000      	b.n	8000b16 <ili9486_WriteString+0x8c>
				break;
 8000b14:	bf00      	nop
}
 8000b16:	bf00      	nop
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b20:	b002      	add	sp, #8
 8000b22:	4770      	bx	lr

08000b24 <ili9486_WriteStringNoBG>:
  * @param  Strr:  Display Text
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @retval None
  */
void ili9486_WriteStringNoBG(uint16_t Xpo, uint16_t Ypo,const char* strr,sFONT fonto, uint16_t RGB_Coder){
 8000b24:	b082      	sub	sp, #8
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b086      	sub	sp, #24
 8000b2a:	af02      	add	r7, sp, #8
 8000b2c:	603a      	str	r2, [r7, #0]
 8000b2e:	61fb      	str	r3, [r7, #28]
 8000b30:	4603      	mov	r3, r0
 8000b32:	80fb      	strh	r3, [r7, #6]
 8000b34:	460b      	mov	r3, r1
 8000b36:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9486_WriteString(20, 300, "Helios xTerra", Font20, cl_WHITE, cl_BLACK);
	 * */
	uint16_t ili_heigh = ili9486_GetLcdPixelHeight();
 8000b38:	f7ff fccb 	bl	80004d2 <ili9486_GetLcdPixelHeight>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	81fb      	strh	r3, [r7, #14]
	uint16_t ili_width = ili9486_GetLcdPixelWidth();
 8000b40:	f7ff fcbe 	bl	80004c0 <ili9486_GetLcdPixelWidth>
 8000b44:	4603      	mov	r3, r0
 8000b46:	81bb      	strh	r3, [r7, #12]
	while(*strr){
 8000b48:	e02a      	b.n	8000ba0 <ili9486_WriteStringNoBG+0x7c>
	//// Check screen overflow / new line
		if(Xpo + fonto.Width >= ili_width){
 8000b4a:	88fb      	ldrh	r3, [r7, #6]
 8000b4c:	8c3a      	ldrh	r2, [r7, #32]
 8000b4e:	441a      	add	r2, r3
 8000b50:	89bb      	ldrh	r3, [r7, #12]
 8000b52:	429a      	cmp	r2, r3
 8000b54:	db13      	blt.n	8000b7e <ili9486_WriteStringNoBG+0x5a>
			Xpo = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	80fb      	strh	r3, [r7, #6]
			Ypo += fonto.Height;
 8000b5a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000b5c:	88bb      	ldrh	r3, [r7, #4]
 8000b5e:	4413      	add	r3, r2
 8000b60:	80bb      	strh	r3, [r7, #4]

			if(Ypo + fonto.Height >= ili_heigh){
 8000b62:	88bb      	ldrh	r3, [r7, #4]
 8000b64:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000b66:	441a      	add	r2, r3
 8000b68:	89fb      	ldrh	r3, [r7, #14]
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	da1d      	bge.n	8000baa <ili9486_WriteStringNoBG+0x86>
				break;
			}
			if(*strr == ' ') {
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b20      	cmp	r3, #32
 8000b74:	d103      	bne.n	8000b7e <ili9486_WriteStringNoBG+0x5a>
				strr++;
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	603b      	str	r3, [r7, #0]
				continue;
 8000b7c:	e010      	b.n	8000ba0 <ili9486_WriteStringNoBG+0x7c>
			}
		}
		ili9486_WriteCharNoBG(Xpo, Ypo, strr, fonto, RGB_Coder);
 8000b7e:	88b9      	ldrh	r1, [r7, #4]
 8000b80:	88f8      	ldrh	r0, [r7, #6]
 8000b82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000b84:	9301      	str	r3, [sp, #4]
 8000b86:	6a3b      	ldr	r3, [r7, #32]
 8000b88:	9300      	str	r3, [sp, #0]
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	683a      	ldr	r2, [r7, #0]
 8000b8e:	f7ff fef2 	bl	8000976 <ili9486_WriteCharNoBG>
		Xpo += fonto.Width;
 8000b92:	8c3a      	ldrh	r2, [r7, #32]
 8000b94:	88fb      	ldrh	r3, [r7, #6]
 8000b96:	4413      	add	r3, r2
 8000b98:	80fb      	strh	r3, [r7, #6]
		strr++;
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	603b      	str	r3, [r7, #0]
	while(*strr){
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d1d0      	bne.n	8000b4a <ili9486_WriteStringNoBG+0x26>
	}
}
 8000ba8:	e000      	b.n	8000bac <ili9486_WriteStringNoBG+0x88>
				break;
 8000baa:	bf00      	nop
}
 8000bac:	bf00      	nop
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bb6:	b002      	add	sp, #8
 8000bb8:	4770      	bx	lr

08000bba <LCD_IO_Delay>:
#elif   defined(__CC_ARM)
#pragma push
#pragma O0
#endif
void LCD_IO_Delay(uint32_t c)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	b083      	sub	sp, #12
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
  while(c--);
 8000bc2:	bf00      	nop
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	1e5a      	subs	r2, r3, #1
 8000bc8:	607a      	str	r2, [r7, #4]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d1fa      	bne.n	8000bc4 <LCD_IO_Delay+0xa>
}
 8000bce:	bf00      	nop
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <LCD_Delay>:
#pragma pop
#endif

//-----------------------------------------------------------------------------
void LCD_Delay(uint32_t Delay)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f001 ff49 	bl	8002a7c <HAL_Delay>
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	b083      	sub	sp, #12
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	71fb      	strb	r3, [r7, #7]
    GPIOX_CLR(LCD_BL);
  else
    GPIOX_SET(LCD_BL);
  #endif
  #endif
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  #define GPIOX_CLOCK_LCD_RD    GPIOX_CLOCK(LCD_RD)
  #else
  #define GPIOX_CLOCK_LCD_RD    0
  #endif

  RCC->AHB4ENR |= (GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_WR) |
 8000c0c:	4b6c      	ldr	r3, [pc, #432]	; (8000dc0 <LCD_IO_Init+0x1b8>)
 8000c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c12:	4a6b      	ldr	r2, [pc, #428]	; (8000dc0 <LCD_IO_Init+0x1b8>)
 8000c14:	f043 035f 	orr.w	r3, r3, #95	; 0x5f
 8000c18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
                   GPIOX_CLOCK(LCD_D0) | GPIOX_CLOCK(LCD_D1) | GPIOX_CLOCK(LCD_D2) | GPIOX_CLOCK(LCD_D3) |
                   GPIOX_CLOCK(LCD_D4) | GPIOX_CLOCK(LCD_D5) | GPIOX_CLOCK(LCD_D6) | GPIOX_CLOCK(LCD_D7) |
                   GPIOX_CLOCK_LCD_RST | GPIOX_CLOCK_LCD_BL  | GPIOX_CLOCK_LCD_RD);

  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  LCD_RST_OFF;                          /* RST = 1 */
 8000c1c:	4b69      	ldr	r3, [pc, #420]	; (8000dc4 <LCD_IO_Init+0x1bc>)
 8000c1e:	2204      	movs	r2, #4
 8000c20:	619a      	str	r2, [r3, #24]
  GPIOX_MODER(MODE_OUT, LCD_RST);
 8000c22:	4b68      	ldr	r3, [pc, #416]	; (8000dc4 <LCD_IO_Init+0x1bc>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000c2a:	4a66      	ldr	r2, [pc, #408]	; (8000dc4 <LCD_IO_Init+0x1bc>)
 8000c2c:	f043 0310 	orr.w	r3, r3, #16
 8000c30:	6013      	str	r3, [r2, #0]
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  GPIOX_ODR(LCD_BL) = LCD_BLON;
  GPIOX_MODER(MODE_OUT, LCD_BL);
  #endif

  GPIOX_SET(LCD_CS);                    /* CS = 1 */
 8000c32:	4b65      	ldr	r3, [pc, #404]	; (8000dc8 <LCD_IO_Init+0x1c0>)
 8000c34:	2202      	movs	r2, #2
 8000c36:	619a      	str	r2, [r3, #24]
  LCD_RS_DATA;                          /* RS = 1 */
 8000c38:	4b62      	ldr	r3, [pc, #392]	; (8000dc4 <LCD_IO_Init+0x1bc>)
 8000c3a:	2208      	movs	r2, #8
 8000c3c:	619a      	str	r2, [r3, #24]
  GPIOX_SET(LCD_WR);                    /* WR = 1 */
 8000c3e:	4b61      	ldr	r3, [pc, #388]	; (8000dc4 <LCD_IO_Init+0x1bc>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	619a      	str	r2, [r3, #24]
  #if GPIOX_PORTNUM(LCD_RD) >=  GPIOX_PORTNUM_A
  GPIOX_SET(LCD_RD);                    /* RD = 1 */
 8000c44:	4b61      	ldr	r3, [pc, #388]	; (8000dcc <LCD_IO_Init+0x1c4>)
 8000c46:	2208      	movs	r2, #8
 8000c48:	619a      	str	r2, [r3, #24]
  #endif

  GPIOX_MODER(MODE_OUT, LCD_CS);
 8000c4a:	4b5f      	ldr	r3, [pc, #380]	; (8000dc8 <LCD_IO_Init+0x1c0>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f023 030c 	bic.w	r3, r3, #12
 8000c52:	4a5d      	ldr	r2, [pc, #372]	; (8000dc8 <LCD_IO_Init+0x1c0>)
 8000c54:	f043 0304 	orr.w	r3, r3, #4
 8000c58:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_RS);
 8000c5a:	4b5a      	ldr	r3, [pc, #360]	; (8000dc4 <LCD_IO_Init+0x1bc>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000c62:	4a58      	ldr	r2, [pc, #352]	; (8000dc4 <LCD_IO_Init+0x1bc>)
 8000c64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c68:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_WR);
 8000c6a:	4b56      	ldr	r3, [pc, #344]	; (8000dc4 <LCD_IO_Init+0x1bc>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f023 0303 	bic.w	r3, r3, #3
 8000c72:	4a54      	ldr	r2, [pc, #336]	; (8000dc4 <LCD_IO_Init+0x1bc>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6013      	str	r3, [r2, #0]
  #if GPIOX_PORTNUM(LCD_RD) >=  GPIOX_PORTNUM_A
  GPIOX_MODER(MODE_OUT, LCD_RD);
 8000c7a:	4b54      	ldr	r3, [pc, #336]	; (8000dcc <LCD_IO_Init+0x1c4>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000c82:	4a52      	ldr	r2, [pc, #328]	; (8000dcc <LCD_IO_Init+0x1c4>)
 8000c84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c88:	6013      	str	r3, [r2, #0]
  #endif

  LCD_DIRWRITE;                         /* data pins set the output direction */
 8000c8a:	4b51      	ldr	r3, [pc, #324]	; (8000dd0 <LCD_IO_Init+0x1c8>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000c92:	4a4f      	ldr	r2, [pc, #316]	; (8000dd0 <LCD_IO_Init+0x1c8>)
 8000c94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c98:	6013      	str	r3, [r2, #0]
 8000c9a:	4b4e      	ldr	r3, [pc, #312]	; (8000dd4 <LCD_IO_Init+0x1cc>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000ca2:	4a4c      	ldr	r2, [pc, #304]	; (8000dd4 <LCD_IO_Init+0x1cc>)
 8000ca4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000ca8:	6013      	str	r3, [r2, #0]
 8000caa:	4b49      	ldr	r3, [pc, #292]	; (8000dd0 <LCD_IO_Init+0x1c8>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000cb2:	4a47      	ldr	r2, [pc, #284]	; (8000dd0 <LCD_IO_Init+0x1c8>)
 8000cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb8:	6013      	str	r3, [r2, #0]
 8000cba:	4b47      	ldr	r3, [pc, #284]	; (8000dd8 <LCD_IO_Init+0x1d0>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000cc2:	4a45      	ldr	r2, [pc, #276]	; (8000dd8 <LCD_IO_Init+0x1d0>)
 8000cc4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000cc8:	6013      	str	r3, [r2, #0]
 8000cca:	4b43      	ldr	r3, [pc, #268]	; (8000dd8 <LCD_IO_Init+0x1d0>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000cd2:	4a41      	ldr	r2, [pc, #260]	; (8000dd8 <LCD_IO_Init+0x1d0>)
 8000cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd8:	6013      	str	r3, [r2, #0]
 8000cda:	4b3f      	ldr	r3, [pc, #252]	; (8000dd8 <LCD_IO_Init+0x1d0>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000ce2:	4a3d      	ldr	r2, [pc, #244]	; (8000dd8 <LCD_IO_Init+0x1d0>)
 8000ce4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ce8:	6013      	str	r3, [r2, #0]
 8000cea:	4b38      	ldr	r3, [pc, #224]	; (8000dcc <LCD_IO_Init+0x1c4>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000cf2:	4a36      	ldr	r2, [pc, #216]	; (8000dcc <LCD_IO_Init+0x1c4>)
 8000cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cf8:	6013      	str	r3, [r2, #0]
 8000cfa:	4b35      	ldr	r3, [pc, #212]	; (8000dd0 <LCD_IO_Init+0x1c8>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000d02:	4a33      	ldr	r2, [pc, #204]	; (8000dd0 <LCD_IO_Init+0x1c8>)
 8000d04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d08:	6013      	str	r3, [r2, #0]

  /* GPIO speed */
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_CS);
 8000d0a:	4b2f      	ldr	r3, [pc, #188]	; (8000dc8 <LCD_IO_Init+0x1c0>)
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	4a2e      	ldr	r2, [pc, #184]	; (8000dc8 <LCD_IO_Init+0x1c0>)
 8000d10:	f043 030c 	orr.w	r3, r3, #12
 8000d14:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RS);
 8000d16:	4b2b      	ldr	r3, [pc, #172]	; (8000dc4 <LCD_IO_Init+0x1bc>)
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	4a2a      	ldr	r2, [pc, #168]	; (8000dc4 <LCD_IO_Init+0x1bc>)
 8000d1c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000d20:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_WR);
 8000d22:	4b28      	ldr	r3, [pc, #160]	; (8000dc4 <LCD_IO_Init+0x1bc>)
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	4a27      	ldr	r2, [pc, #156]	; (8000dc4 <LCD_IO_Init+0x1bc>)
 8000d28:	f043 0303 	orr.w	r3, r3, #3
 8000d2c:	6093      	str	r3, [r2, #8]
  #if GPIOX_PORTNUM(LCD_RD) >=  GPIOX_PORTNUM_A
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RD);
 8000d2e:	4b27      	ldr	r3, [pc, #156]	; (8000dcc <LCD_IO_Init+0x1c4>)
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	4a26      	ldr	r2, [pc, #152]	; (8000dcc <LCD_IO_Init+0x1c4>)
 8000d34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000d38:	6093      	str	r3, [r2, #8]
  #endif
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D0);
 8000d3a:	4b25      	ldr	r3, [pc, #148]	; (8000dd0 <LCD_IO_Init+0x1c8>)
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	4a24      	ldr	r2, [pc, #144]	; (8000dd0 <LCD_IO_Init+0x1c8>)
 8000d40:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8000d44:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D1);
 8000d46:	4b23      	ldr	r3, [pc, #140]	; (8000dd4 <LCD_IO_Init+0x1cc>)
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	4a22      	ldr	r2, [pc, #136]	; (8000dd4 <LCD_IO_Init+0x1cc>)
 8000d4c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000d50:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D2);
 8000d52:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <LCD_IO_Init+0x1c8>)
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	4a1e      	ldr	r2, [pc, #120]	; (8000dd0 <LCD_IO_Init+0x1c8>)
 8000d58:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8000d5c:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D3);
 8000d5e:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <LCD_IO_Init+0x1d0>)
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	4a1d      	ldr	r2, [pc, #116]	; (8000dd8 <LCD_IO_Init+0x1d0>)
 8000d64:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 8000d68:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D4);
 8000d6a:	4b1b      	ldr	r3, [pc, #108]	; (8000dd8 <LCD_IO_Init+0x1d0>)
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	4a1a      	ldr	r2, [pc, #104]	; (8000dd8 <LCD_IO_Init+0x1d0>)
 8000d70:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8000d74:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D5);
 8000d76:	4b18      	ldr	r3, [pc, #96]	; (8000dd8 <LCD_IO_Init+0x1d0>)
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	4a17      	ldr	r2, [pc, #92]	; (8000dd8 <LCD_IO_Init+0x1d0>)
 8000d7c:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8000d80:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D6);
 8000d82:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <LCD_IO_Init+0x1c4>)
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	4a11      	ldr	r2, [pc, #68]	; (8000dcc <LCD_IO_Init+0x1c4>)
 8000d88:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000d8c:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D7);
 8000d8e:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <LCD_IO_Init+0x1c8>)
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	4a0f      	ldr	r2, [pc, #60]	; (8000dd0 <LCD_IO_Init+0x1c8>)
 8000d94:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8000d98:	6093      	str	r3, [r2, #8]

  /* Reset the LCD */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  LCD_Delay(1);
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	f7ff ff1e 	bl	8000bdc <LCD_Delay>
  LCD_RST_ON;                           /* RST = 0 */
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <LCD_IO_Init+0x1bc>)
 8000da2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000da6:	619a      	str	r2, [r3, #24]
  LCD_Delay(1);
 8000da8:	2001      	movs	r0, #1
 8000daa:	f7ff ff17 	bl	8000bdc <LCD_Delay>
  LCD_RST_OFF;                          /* RST = 1 */
 8000dae:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <LCD_IO_Init+0x1bc>)
 8000db0:	2204      	movs	r2, #4
 8000db2:	619a      	str	r2, [r3, #24]
  #endif
  LCD_Delay(1);
 8000db4:	2001      	movs	r0, #1
 8000db6:	f7ff ff11 	bl	8000bdc <LCD_Delay>
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	58024400 	.word	0x58024400
 8000dc4:	58020800 	.word	0x58020800
 8000dc8:	58020400 	.word	0x58020400
 8000dcc:	58020000 	.word	0x58020000
 8000dd0:	58021800 	.word	0x58021800
 8000dd4:	58020c00 	.word	0x58020c00
 8000dd8:	58021000 	.word	0x58021000

08000ddc <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
  LCD_CS_ON;
 8000de6:	4b4b      	ldr	r3, [pc, #300]	; (8000f14 <LCD_IO_WriteCmd8+0x138>)
 8000de8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dec:	619a      	str	r2, [r3, #24]
  LCD_CMD8_WRITE(Cmd);
 8000dee:	4b4a      	ldr	r3, [pc, #296]	; (8000f18 <LCD_IO_WriteCmd8+0x13c>)
 8000df0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000df4:	619a      	str	r2, [r3, #24]
 8000df6:	4a49      	ldr	r2, [pc, #292]	; (8000f1c <LCD_IO_WriteCmd8+0x140>)
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	7013      	strb	r3, [r2, #0]
 8000dfc:	4b47      	ldr	r3, [pc, #284]	; (8000f1c <LCD_IO_WriteCmd8+0x140>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	f003 0301 	and.w	r3, r3, #1
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d004      	beq.n	8000e12 <LCD_IO_WriteCmd8+0x36>
 8000e08:	4b45      	ldr	r3, [pc, #276]	; (8000f20 <LCD_IO_WriteCmd8+0x144>)
 8000e0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e0e:	619a      	str	r2, [r3, #24]
 8000e10:	e003      	b.n	8000e1a <LCD_IO_WriteCmd8+0x3e>
 8000e12:	4b43      	ldr	r3, [pc, #268]	; (8000f20 <LCD_IO_WriteCmd8+0x144>)
 8000e14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000e18:	619a      	str	r2, [r3, #24]
 8000e1a:	4b40      	ldr	r3, [pc, #256]	; (8000f1c <LCD_IO_WriteCmd8+0x140>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d004      	beq.n	8000e30 <LCD_IO_WriteCmd8+0x54>
 8000e26:	4b3f      	ldr	r3, [pc, #252]	; (8000f24 <LCD_IO_WriteCmd8+0x148>)
 8000e28:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e2c:	619a      	str	r2, [r3, #24]
 8000e2e:	e003      	b.n	8000e38 <LCD_IO_WriteCmd8+0x5c>
 8000e30:	4b3c      	ldr	r3, [pc, #240]	; (8000f24 <LCD_IO_WriteCmd8+0x148>)
 8000e32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000e36:	619a      	str	r2, [r3, #24]
 8000e38:	4b38      	ldr	r3, [pc, #224]	; (8000f1c <LCD_IO_WriteCmd8+0x140>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	f003 0304 	and.w	r3, r3, #4
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d004      	beq.n	8000e4e <LCD_IO_WriteCmd8+0x72>
 8000e44:	4b36      	ldr	r3, [pc, #216]	; (8000f20 <LCD_IO_WriteCmd8+0x144>)
 8000e46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e4a:	619a      	str	r2, [r3, #24]
 8000e4c:	e003      	b.n	8000e56 <LCD_IO_WriteCmd8+0x7a>
 8000e4e:	4b34      	ldr	r3, [pc, #208]	; (8000f20 <LCD_IO_WriteCmd8+0x144>)
 8000e50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e54:	619a      	str	r2, [r3, #24]
 8000e56:	4b31      	ldr	r3, [pc, #196]	; (8000f1c <LCD_IO_WriteCmd8+0x140>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	f003 0308 	and.w	r3, r3, #8
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d004      	beq.n	8000e6c <LCD_IO_WriteCmd8+0x90>
 8000e62:	4b31      	ldr	r3, [pc, #196]	; (8000f28 <LCD_IO_WriteCmd8+0x14c>)
 8000e64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e68:	619a      	str	r2, [r3, #24]
 8000e6a:	e003      	b.n	8000e74 <LCD_IO_WriteCmd8+0x98>
 8000e6c:	4b2e      	ldr	r3, [pc, #184]	; (8000f28 <LCD_IO_WriteCmd8+0x14c>)
 8000e6e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000e72:	619a      	str	r2, [r3, #24]
 8000e74:	4b29      	ldr	r3, [pc, #164]	; (8000f1c <LCD_IO_WriteCmd8+0x140>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	f003 0310 	and.w	r3, r3, #16
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d004      	beq.n	8000e8a <LCD_IO_WriteCmd8+0xae>
 8000e80:	4b29      	ldr	r3, [pc, #164]	; (8000f28 <LCD_IO_WriteCmd8+0x14c>)
 8000e82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e86:	619a      	str	r2, [r3, #24]
 8000e88:	e003      	b.n	8000e92 <LCD_IO_WriteCmd8+0xb6>
 8000e8a:	4b27      	ldr	r3, [pc, #156]	; (8000f28 <LCD_IO_WriteCmd8+0x14c>)
 8000e8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e90:	619a      	str	r2, [r3, #24]
 8000e92:	4b22      	ldr	r3, [pc, #136]	; (8000f1c <LCD_IO_WriteCmd8+0x140>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	f003 0320 	and.w	r3, r3, #32
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d004      	beq.n	8000ea8 <LCD_IO_WriteCmd8+0xcc>
 8000e9e:	4b22      	ldr	r3, [pc, #136]	; (8000f28 <LCD_IO_WriteCmd8+0x14c>)
 8000ea0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ea4:	619a      	str	r2, [r3, #24]
 8000ea6:	e003      	b.n	8000eb0 <LCD_IO_WriteCmd8+0xd4>
 8000ea8:	4b1f      	ldr	r3, [pc, #124]	; (8000f28 <LCD_IO_WriteCmd8+0x14c>)
 8000eaa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000eae:	619a      	str	r2, [r3, #24]
 8000eb0:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <LCD_IO_WriteCmd8+0x140>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d004      	beq.n	8000ec6 <LCD_IO_WriteCmd8+0xea>
 8000ebc:	4b1b      	ldr	r3, [pc, #108]	; (8000f2c <LCD_IO_WriteCmd8+0x150>)
 8000ebe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ec2:	619a      	str	r2, [r3, #24]
 8000ec4:	e003      	b.n	8000ece <LCD_IO_WriteCmd8+0xf2>
 8000ec6:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <LCD_IO_WriteCmd8+0x150>)
 8000ec8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000ecc:	619a      	str	r2, [r3, #24]
 8000ece:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <LCD_IO_WriteCmd8+0x140>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	b25b      	sxtb	r3, r3
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	da04      	bge.n	8000ee2 <LCD_IO_WriteCmd8+0x106>
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <LCD_IO_WriteCmd8+0x144>)
 8000eda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ede:	619a      	str	r2, [r3, #24]
 8000ee0:	e003      	b.n	8000eea <LCD_IO_WriteCmd8+0x10e>
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <LCD_IO_WriteCmd8+0x144>)
 8000ee4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ee8:	619a      	str	r2, [r3, #24]
 8000eea:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <LCD_IO_WriteCmd8+0x13c>)
 8000eec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ef0:	619a      	str	r2, [r3, #24]
 8000ef2:	2008      	movs	r0, #8
 8000ef4:	f7ff fe61 	bl	8000bba <LCD_IO_Delay>
 8000ef8:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <LCD_IO_WriteCmd8+0x13c>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	619a      	str	r2, [r3, #24]
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <LCD_IO_WriteCmd8+0x13c>)
 8000f00:	2208      	movs	r2, #8
 8000f02:	619a      	str	r2, [r3, #24]
  LCD_CS_OFF;
 8000f04:	4b03      	ldr	r3, [pc, #12]	; (8000f14 <LCD_IO_WriteCmd8+0x138>)
 8000f06:	2202      	movs	r2, #2
 8000f08:	619a      	str	r2, [r3, #24]
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	58020400 	.word	0x58020400
 8000f18:	58020800 	.word	0x58020800
 8000f1c:	240002b2 	.word	0x240002b2
 8000f20:	58021800 	.word	0x58021800
 8000f24:	58020c00 	.word	0x58020c00
 8000f28:	58021000 	.word	0x58021000
 8000f2c:	58020000 	.word	0x58020000

08000f30 <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
  LCD_CS_ON;
 8000f3a:	4b47      	ldr	r3, [pc, #284]	; (8001058 <LCD_IO_WriteData8+0x128>)
 8000f3c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f40:	619a      	str	r2, [r3, #24]
  LCD_DATA8_WRITE(Data);
 8000f42:	4a46      	ldr	r2, [pc, #280]	; (800105c <LCD_IO_WriteData8+0x12c>)
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	7013      	strb	r3, [r2, #0]
 8000f48:	4b44      	ldr	r3, [pc, #272]	; (800105c <LCD_IO_WriteData8+0x12c>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d004      	beq.n	8000f5e <LCD_IO_WriteData8+0x2e>
 8000f54:	4b42      	ldr	r3, [pc, #264]	; (8001060 <LCD_IO_WriteData8+0x130>)
 8000f56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f5a:	619a      	str	r2, [r3, #24]
 8000f5c:	e003      	b.n	8000f66 <LCD_IO_WriteData8+0x36>
 8000f5e:	4b40      	ldr	r3, [pc, #256]	; (8001060 <LCD_IO_WriteData8+0x130>)
 8000f60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f64:	619a      	str	r2, [r3, #24]
 8000f66:	4b3d      	ldr	r3, [pc, #244]	; (800105c <LCD_IO_WriteData8+0x12c>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d004      	beq.n	8000f7c <LCD_IO_WriteData8+0x4c>
 8000f72:	4b3c      	ldr	r3, [pc, #240]	; (8001064 <LCD_IO_WriteData8+0x134>)
 8000f74:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f78:	619a      	str	r2, [r3, #24]
 8000f7a:	e003      	b.n	8000f84 <LCD_IO_WriteData8+0x54>
 8000f7c:	4b39      	ldr	r3, [pc, #228]	; (8001064 <LCD_IO_WriteData8+0x134>)
 8000f7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000f82:	619a      	str	r2, [r3, #24]
 8000f84:	4b35      	ldr	r3, [pc, #212]	; (800105c <LCD_IO_WriteData8+0x12c>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	f003 0304 	and.w	r3, r3, #4
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d004      	beq.n	8000f9a <LCD_IO_WriteData8+0x6a>
 8000f90:	4b33      	ldr	r3, [pc, #204]	; (8001060 <LCD_IO_WriteData8+0x130>)
 8000f92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f96:	619a      	str	r2, [r3, #24]
 8000f98:	e003      	b.n	8000fa2 <LCD_IO_WriteData8+0x72>
 8000f9a:	4b31      	ldr	r3, [pc, #196]	; (8001060 <LCD_IO_WriteData8+0x130>)
 8000f9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fa0:	619a      	str	r2, [r3, #24]
 8000fa2:	4b2e      	ldr	r3, [pc, #184]	; (800105c <LCD_IO_WriteData8+0x12c>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	f003 0308 	and.w	r3, r3, #8
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d004      	beq.n	8000fb8 <LCD_IO_WriteData8+0x88>
 8000fae:	4b2e      	ldr	r3, [pc, #184]	; (8001068 <LCD_IO_WriteData8+0x138>)
 8000fb0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fb4:	619a      	str	r2, [r3, #24]
 8000fb6:	e003      	b.n	8000fc0 <LCD_IO_WriteData8+0x90>
 8000fb8:	4b2b      	ldr	r3, [pc, #172]	; (8001068 <LCD_IO_WriteData8+0x138>)
 8000fba:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000fbe:	619a      	str	r2, [r3, #24]
 8000fc0:	4b26      	ldr	r3, [pc, #152]	; (800105c <LCD_IO_WriteData8+0x12c>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	f003 0310 	and.w	r3, r3, #16
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d004      	beq.n	8000fd6 <LCD_IO_WriteData8+0xa6>
 8000fcc:	4b26      	ldr	r3, [pc, #152]	; (8001068 <LCD_IO_WriteData8+0x138>)
 8000fce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fd2:	619a      	str	r2, [r3, #24]
 8000fd4:	e003      	b.n	8000fde <LCD_IO_WriteData8+0xae>
 8000fd6:	4b24      	ldr	r3, [pc, #144]	; (8001068 <LCD_IO_WriteData8+0x138>)
 8000fd8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fdc:	619a      	str	r2, [r3, #24]
 8000fde:	4b1f      	ldr	r3, [pc, #124]	; (800105c <LCD_IO_WriteData8+0x12c>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	f003 0320 	and.w	r3, r3, #32
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d004      	beq.n	8000ff4 <LCD_IO_WriteData8+0xc4>
 8000fea:	4b1f      	ldr	r3, [pc, #124]	; (8001068 <LCD_IO_WriteData8+0x138>)
 8000fec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ff0:	619a      	str	r2, [r3, #24]
 8000ff2:	e003      	b.n	8000ffc <LCD_IO_WriteData8+0xcc>
 8000ff4:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <LCD_IO_WriteData8+0x138>)
 8000ff6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ffa:	619a      	str	r2, [r3, #24]
 8000ffc:	4b17      	ldr	r3, [pc, #92]	; (800105c <LCD_IO_WriteData8+0x12c>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001004:	2b00      	cmp	r3, #0
 8001006:	d004      	beq.n	8001012 <LCD_IO_WriteData8+0xe2>
 8001008:	4b18      	ldr	r3, [pc, #96]	; (800106c <LCD_IO_WriteData8+0x13c>)
 800100a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800100e:	619a      	str	r2, [r3, #24]
 8001010:	e003      	b.n	800101a <LCD_IO_WriteData8+0xea>
 8001012:	4b16      	ldr	r3, [pc, #88]	; (800106c <LCD_IO_WriteData8+0x13c>)
 8001014:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001018:	619a      	str	r2, [r3, #24]
 800101a:	4b10      	ldr	r3, [pc, #64]	; (800105c <LCD_IO_WriteData8+0x12c>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	b25b      	sxtb	r3, r3
 8001020:	2b00      	cmp	r3, #0
 8001022:	da04      	bge.n	800102e <LCD_IO_WriteData8+0xfe>
 8001024:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <LCD_IO_WriteData8+0x130>)
 8001026:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800102a:	619a      	str	r2, [r3, #24]
 800102c:	e003      	b.n	8001036 <LCD_IO_WriteData8+0x106>
 800102e:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <LCD_IO_WriteData8+0x130>)
 8001030:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001034:	619a      	str	r2, [r3, #24]
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <LCD_IO_WriteData8+0x140>)
 8001038:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800103c:	619a      	str	r2, [r3, #24]
 800103e:	2008      	movs	r0, #8
 8001040:	f7ff fdbb 	bl	8000bba <LCD_IO_Delay>
 8001044:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <LCD_IO_WriteData8+0x140>)
 8001046:	2201      	movs	r2, #1
 8001048:	619a      	str	r2, [r3, #24]
  LCD_CS_OFF;
 800104a:	4b03      	ldr	r3, [pc, #12]	; (8001058 <LCD_IO_WriteData8+0x128>)
 800104c:	2202      	movs	r2, #2
 800104e:	619a      	str	r2, [r3, #24]
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	58020400 	.word	0x58020400
 800105c:	240002b2 	.word	0x240002b2
 8001060:	58021800 	.word	0x58021800
 8001064:	58020c00 	.word	0x58020c00
 8001068:	58021000 	.word	0x58021000
 800106c:	58020000 	.word	0x58020000
 8001070:	58020800 	.word	0x58020800

08001074 <LCD_IO_WriteData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteData16(uint16_t Data)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	80fb      	strh	r3, [r7, #6]
  LCD_CS_ON;
 800107e:	4b8b      	ldr	r3, [pc, #556]	; (80012ac <LCD_IO_WriteData16+0x238>)
 8001080:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001084:	619a      	str	r2, [r3, #24]
  LCD_DATA16_WRITE(Data);
 8001086:	88fb      	ldrh	r3, [r7, #6]
 8001088:	0a1b      	lsrs	r3, r3, #8
 800108a:	b29b      	uxth	r3, r3
 800108c:	b2da      	uxtb	r2, r3
 800108e:	4b88      	ldr	r3, [pc, #544]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 8001090:	701a      	strb	r2, [r3, #0]
 8001092:	4b87      	ldr	r3, [pc, #540]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	2b00      	cmp	r3, #0
 800109c:	d004      	beq.n	80010a8 <LCD_IO_WriteData16+0x34>
 800109e:	4b85      	ldr	r3, [pc, #532]	; (80012b4 <LCD_IO_WriteData16+0x240>)
 80010a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010a4:	619a      	str	r2, [r3, #24]
 80010a6:	e003      	b.n	80010b0 <LCD_IO_WriteData16+0x3c>
 80010a8:	4b82      	ldr	r3, [pc, #520]	; (80012b4 <LCD_IO_WriteData16+0x240>)
 80010aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80010ae:	619a      	str	r2, [r3, #24]
 80010b0:	4b7f      	ldr	r3, [pc, #508]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	f003 0302 	and.w	r3, r3, #2
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d004      	beq.n	80010c6 <LCD_IO_WriteData16+0x52>
 80010bc:	4b7e      	ldr	r3, [pc, #504]	; (80012b8 <LCD_IO_WriteData16+0x244>)
 80010be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010c2:	619a      	str	r2, [r3, #24]
 80010c4:	e003      	b.n	80010ce <LCD_IO_WriteData16+0x5a>
 80010c6:	4b7c      	ldr	r3, [pc, #496]	; (80012b8 <LCD_IO_WriteData16+0x244>)
 80010c8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80010cc:	619a      	str	r2, [r3, #24]
 80010ce:	4b78      	ldr	r3, [pc, #480]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	f003 0304 	and.w	r3, r3, #4
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d004      	beq.n	80010e4 <LCD_IO_WriteData16+0x70>
 80010da:	4b76      	ldr	r3, [pc, #472]	; (80012b4 <LCD_IO_WriteData16+0x240>)
 80010dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010e0:	619a      	str	r2, [r3, #24]
 80010e2:	e003      	b.n	80010ec <LCD_IO_WriteData16+0x78>
 80010e4:	4b73      	ldr	r3, [pc, #460]	; (80012b4 <LCD_IO_WriteData16+0x240>)
 80010e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010ea:	619a      	str	r2, [r3, #24]
 80010ec:	4b70      	ldr	r3, [pc, #448]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	f003 0308 	and.w	r3, r3, #8
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d004      	beq.n	8001102 <LCD_IO_WriteData16+0x8e>
 80010f8:	4b70      	ldr	r3, [pc, #448]	; (80012bc <LCD_IO_WriteData16+0x248>)
 80010fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010fe:	619a      	str	r2, [r3, #24]
 8001100:	e003      	b.n	800110a <LCD_IO_WriteData16+0x96>
 8001102:	4b6e      	ldr	r3, [pc, #440]	; (80012bc <LCD_IO_WriteData16+0x248>)
 8001104:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001108:	619a      	str	r2, [r3, #24]
 800110a:	4b69      	ldr	r3, [pc, #420]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	f003 0310 	and.w	r3, r3, #16
 8001112:	2b00      	cmp	r3, #0
 8001114:	d004      	beq.n	8001120 <LCD_IO_WriteData16+0xac>
 8001116:	4b69      	ldr	r3, [pc, #420]	; (80012bc <LCD_IO_WriteData16+0x248>)
 8001118:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800111c:	619a      	str	r2, [r3, #24]
 800111e:	e003      	b.n	8001128 <LCD_IO_WriteData16+0xb4>
 8001120:	4b66      	ldr	r3, [pc, #408]	; (80012bc <LCD_IO_WriteData16+0x248>)
 8001122:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001126:	619a      	str	r2, [r3, #24]
 8001128:	4b61      	ldr	r3, [pc, #388]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	f003 0320 	and.w	r3, r3, #32
 8001130:	2b00      	cmp	r3, #0
 8001132:	d004      	beq.n	800113e <LCD_IO_WriteData16+0xca>
 8001134:	4b61      	ldr	r3, [pc, #388]	; (80012bc <LCD_IO_WriteData16+0x248>)
 8001136:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800113a:	619a      	str	r2, [r3, #24]
 800113c:	e003      	b.n	8001146 <LCD_IO_WriteData16+0xd2>
 800113e:	4b5f      	ldr	r3, [pc, #380]	; (80012bc <LCD_IO_WriteData16+0x248>)
 8001140:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001144:	619a      	str	r2, [r3, #24]
 8001146:	4b5a      	ldr	r3, [pc, #360]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800114e:	2b00      	cmp	r3, #0
 8001150:	d004      	beq.n	800115c <LCD_IO_WriteData16+0xe8>
 8001152:	4b5b      	ldr	r3, [pc, #364]	; (80012c0 <LCD_IO_WriteData16+0x24c>)
 8001154:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001158:	619a      	str	r2, [r3, #24]
 800115a:	e003      	b.n	8001164 <LCD_IO_WriteData16+0xf0>
 800115c:	4b58      	ldr	r3, [pc, #352]	; (80012c0 <LCD_IO_WriteData16+0x24c>)
 800115e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001162:	619a      	str	r2, [r3, #24]
 8001164:	4b52      	ldr	r3, [pc, #328]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	b25b      	sxtb	r3, r3
 800116a:	2b00      	cmp	r3, #0
 800116c:	da04      	bge.n	8001178 <LCD_IO_WriteData16+0x104>
 800116e:	4b51      	ldr	r3, [pc, #324]	; (80012b4 <LCD_IO_WriteData16+0x240>)
 8001170:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001174:	619a      	str	r2, [r3, #24]
 8001176:	e003      	b.n	8001180 <LCD_IO_WriteData16+0x10c>
 8001178:	4b4e      	ldr	r3, [pc, #312]	; (80012b4 <LCD_IO_WriteData16+0x240>)
 800117a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800117e:	619a      	str	r2, [r3, #24]
 8001180:	4b50      	ldr	r3, [pc, #320]	; (80012c4 <LCD_IO_WriteData16+0x250>)
 8001182:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001186:	619a      	str	r2, [r3, #24]
 8001188:	2008      	movs	r0, #8
 800118a:	f7ff fd16 	bl	8000bba <LCD_IO_Delay>
 800118e:	4b4d      	ldr	r3, [pc, #308]	; (80012c4 <LCD_IO_WriteData16+0x250>)
 8001190:	2201      	movs	r2, #1
 8001192:	619a      	str	r2, [r3, #24]
 8001194:	88fb      	ldrh	r3, [r7, #6]
 8001196:	b2da      	uxtb	r2, r3
 8001198:	4b45      	ldr	r3, [pc, #276]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 800119a:	701a      	strb	r2, [r3, #0]
 800119c:	4b44      	ldr	r3, [pc, #272]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d004      	beq.n	80011b2 <LCD_IO_WriteData16+0x13e>
 80011a8:	4b42      	ldr	r3, [pc, #264]	; (80012b4 <LCD_IO_WriteData16+0x240>)
 80011aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011ae:	619a      	str	r2, [r3, #24]
 80011b0:	e003      	b.n	80011ba <LCD_IO_WriteData16+0x146>
 80011b2:	4b40      	ldr	r3, [pc, #256]	; (80012b4 <LCD_IO_WriteData16+0x240>)
 80011b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80011b8:	619a      	str	r2, [r3, #24]
 80011ba:	4b3d      	ldr	r3, [pc, #244]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d004      	beq.n	80011d0 <LCD_IO_WriteData16+0x15c>
 80011c6:	4b3c      	ldr	r3, [pc, #240]	; (80012b8 <LCD_IO_WriteData16+0x244>)
 80011c8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011cc:	619a      	str	r2, [r3, #24]
 80011ce:	e003      	b.n	80011d8 <LCD_IO_WriteData16+0x164>
 80011d0:	4b39      	ldr	r3, [pc, #228]	; (80012b8 <LCD_IO_WriteData16+0x244>)
 80011d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80011d6:	619a      	str	r2, [r3, #24]
 80011d8:	4b35      	ldr	r3, [pc, #212]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	f003 0304 	and.w	r3, r3, #4
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d004      	beq.n	80011ee <LCD_IO_WriteData16+0x17a>
 80011e4:	4b33      	ldr	r3, [pc, #204]	; (80012b4 <LCD_IO_WriteData16+0x240>)
 80011e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011ea:	619a      	str	r2, [r3, #24]
 80011ec:	e003      	b.n	80011f6 <LCD_IO_WriteData16+0x182>
 80011ee:	4b31      	ldr	r3, [pc, #196]	; (80012b4 <LCD_IO_WriteData16+0x240>)
 80011f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011f4:	619a      	str	r2, [r3, #24]
 80011f6:	4b2e      	ldr	r3, [pc, #184]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	f003 0308 	and.w	r3, r3, #8
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d004      	beq.n	800120c <LCD_IO_WriteData16+0x198>
 8001202:	4b2e      	ldr	r3, [pc, #184]	; (80012bc <LCD_IO_WriteData16+0x248>)
 8001204:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001208:	619a      	str	r2, [r3, #24]
 800120a:	e003      	b.n	8001214 <LCD_IO_WriteData16+0x1a0>
 800120c:	4b2b      	ldr	r3, [pc, #172]	; (80012bc <LCD_IO_WriteData16+0x248>)
 800120e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001212:	619a      	str	r2, [r3, #24]
 8001214:	4b26      	ldr	r3, [pc, #152]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	f003 0310 	and.w	r3, r3, #16
 800121c:	2b00      	cmp	r3, #0
 800121e:	d004      	beq.n	800122a <LCD_IO_WriteData16+0x1b6>
 8001220:	4b26      	ldr	r3, [pc, #152]	; (80012bc <LCD_IO_WriteData16+0x248>)
 8001222:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001226:	619a      	str	r2, [r3, #24]
 8001228:	e003      	b.n	8001232 <LCD_IO_WriteData16+0x1be>
 800122a:	4b24      	ldr	r3, [pc, #144]	; (80012bc <LCD_IO_WriteData16+0x248>)
 800122c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001230:	619a      	str	r2, [r3, #24]
 8001232:	4b1f      	ldr	r3, [pc, #124]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	f003 0320 	and.w	r3, r3, #32
 800123a:	2b00      	cmp	r3, #0
 800123c:	d004      	beq.n	8001248 <LCD_IO_WriteData16+0x1d4>
 800123e:	4b1f      	ldr	r3, [pc, #124]	; (80012bc <LCD_IO_WriteData16+0x248>)
 8001240:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001244:	619a      	str	r2, [r3, #24]
 8001246:	e003      	b.n	8001250 <LCD_IO_WriteData16+0x1dc>
 8001248:	4b1c      	ldr	r3, [pc, #112]	; (80012bc <LCD_IO_WriteData16+0x248>)
 800124a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800124e:	619a      	str	r2, [r3, #24]
 8001250:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001258:	2b00      	cmp	r3, #0
 800125a:	d004      	beq.n	8001266 <LCD_IO_WriteData16+0x1f2>
 800125c:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <LCD_IO_WriteData16+0x24c>)
 800125e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001262:	619a      	str	r2, [r3, #24]
 8001264:	e003      	b.n	800126e <LCD_IO_WriteData16+0x1fa>
 8001266:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <LCD_IO_WriteData16+0x24c>)
 8001268:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800126c:	619a      	str	r2, [r3, #24]
 800126e:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	b25b      	sxtb	r3, r3
 8001274:	2b00      	cmp	r3, #0
 8001276:	da04      	bge.n	8001282 <LCD_IO_WriteData16+0x20e>
 8001278:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <LCD_IO_WriteData16+0x240>)
 800127a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800127e:	619a      	str	r2, [r3, #24]
 8001280:	e003      	b.n	800128a <LCD_IO_WriteData16+0x216>
 8001282:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <LCD_IO_WriteData16+0x240>)
 8001284:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001288:	619a      	str	r2, [r3, #24]
 800128a:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <LCD_IO_WriteData16+0x250>)
 800128c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001290:	619a      	str	r2, [r3, #24]
 8001292:	2008      	movs	r0, #8
 8001294:	f7ff fc91 	bl	8000bba <LCD_IO_Delay>
 8001298:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <LCD_IO_WriteData16+0x250>)
 800129a:	2201      	movs	r2, #1
 800129c:	619a      	str	r2, [r3, #24]
  LCD_CS_OFF;
 800129e:	4b03      	ldr	r3, [pc, #12]	; (80012ac <LCD_IO_WriteData16+0x238>)
 80012a0:	2202      	movs	r2, #2
 80012a2:	619a      	str	r2, [r3, #24]
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	58020400 	.word	0x58020400
 80012b0:	240002b2 	.word	0x240002b2
 80012b4:	58021800 	.word	0x58021800
 80012b8:	58020c00 	.word	0x58020c00
 80012bc:	58021000 	.word	0x58021000
 80012c0:	58020000 	.word	0x58020000
 80012c4:	58020800 	.word	0x58020800

080012c8 <LCD_IO_WriteCmd8DataFill16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	603a      	str	r2, [r7, #0]
 80012d2:	71fb      	strb	r3, [r7, #7]
 80012d4:	460b      	mov	r3, r1
 80012d6:	80bb      	strh	r3, [r7, #4]
  LCD_CS_ON;
 80012d8:	4b9a      	ldr	r3, [pc, #616]	; (8001544 <LCD_IO_WriteCmd8DataFill16+0x27c>)
 80012da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012de:	619a      	str	r2, [r3, #24]
  LCD_CMD8_WRITE(Cmd);
 80012e0:	4b99      	ldr	r3, [pc, #612]	; (8001548 <LCD_IO_WriteCmd8DataFill16+0x280>)
 80012e2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80012e6:	619a      	str	r2, [r3, #24]
 80012e8:	4a98      	ldr	r2, [pc, #608]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	7013      	strb	r3, [r2, #0]
 80012ee:	4b97      	ldr	r3, [pc, #604]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d004      	beq.n	8001304 <LCD_IO_WriteCmd8DataFill16+0x3c>
 80012fa:	4b95      	ldr	r3, [pc, #596]	; (8001550 <LCD_IO_WriteCmd8DataFill16+0x288>)
 80012fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001300:	619a      	str	r2, [r3, #24]
 8001302:	e003      	b.n	800130c <LCD_IO_WriteCmd8DataFill16+0x44>
 8001304:	4b92      	ldr	r3, [pc, #584]	; (8001550 <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001306:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800130a:	619a      	str	r2, [r3, #24]
 800130c:	4b8f      	ldr	r3, [pc, #572]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d004      	beq.n	8001322 <LCD_IO_WriteCmd8DataFill16+0x5a>
 8001318:	4b8e      	ldr	r3, [pc, #568]	; (8001554 <LCD_IO_WriteCmd8DataFill16+0x28c>)
 800131a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800131e:	619a      	str	r2, [r3, #24]
 8001320:	e003      	b.n	800132a <LCD_IO_WriteCmd8DataFill16+0x62>
 8001322:	4b8c      	ldr	r3, [pc, #560]	; (8001554 <LCD_IO_WriteCmd8DataFill16+0x28c>)
 8001324:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001328:	619a      	str	r2, [r3, #24]
 800132a:	4b88      	ldr	r3, [pc, #544]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	f003 0304 	and.w	r3, r3, #4
 8001332:	2b00      	cmp	r3, #0
 8001334:	d004      	beq.n	8001340 <LCD_IO_WriteCmd8DataFill16+0x78>
 8001336:	4b86      	ldr	r3, [pc, #536]	; (8001550 <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001338:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800133c:	619a      	str	r2, [r3, #24]
 800133e:	e003      	b.n	8001348 <LCD_IO_WriteCmd8DataFill16+0x80>
 8001340:	4b83      	ldr	r3, [pc, #524]	; (8001550 <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001342:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001346:	619a      	str	r2, [r3, #24]
 8001348:	4b80      	ldr	r3, [pc, #512]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	f003 0308 	and.w	r3, r3, #8
 8001350:	2b00      	cmp	r3, #0
 8001352:	d004      	beq.n	800135e <LCD_IO_WriteCmd8DataFill16+0x96>
 8001354:	4b80      	ldr	r3, [pc, #512]	; (8001558 <LCD_IO_WriteCmd8DataFill16+0x290>)
 8001356:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800135a:	619a      	str	r2, [r3, #24]
 800135c:	e003      	b.n	8001366 <LCD_IO_WriteCmd8DataFill16+0x9e>
 800135e:	4b7e      	ldr	r3, [pc, #504]	; (8001558 <LCD_IO_WriteCmd8DataFill16+0x290>)
 8001360:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001364:	619a      	str	r2, [r3, #24]
 8001366:	4b79      	ldr	r3, [pc, #484]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	f003 0310 	and.w	r3, r3, #16
 800136e:	2b00      	cmp	r3, #0
 8001370:	d004      	beq.n	800137c <LCD_IO_WriteCmd8DataFill16+0xb4>
 8001372:	4b79      	ldr	r3, [pc, #484]	; (8001558 <LCD_IO_WriteCmd8DataFill16+0x290>)
 8001374:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001378:	619a      	str	r2, [r3, #24]
 800137a:	e003      	b.n	8001384 <LCD_IO_WriteCmd8DataFill16+0xbc>
 800137c:	4b76      	ldr	r3, [pc, #472]	; (8001558 <LCD_IO_WriteCmd8DataFill16+0x290>)
 800137e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001382:	619a      	str	r2, [r3, #24]
 8001384:	4b71      	ldr	r3, [pc, #452]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	f003 0320 	and.w	r3, r3, #32
 800138c:	2b00      	cmp	r3, #0
 800138e:	d004      	beq.n	800139a <LCD_IO_WriteCmd8DataFill16+0xd2>
 8001390:	4b71      	ldr	r3, [pc, #452]	; (8001558 <LCD_IO_WriteCmd8DataFill16+0x290>)
 8001392:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001396:	619a      	str	r2, [r3, #24]
 8001398:	e003      	b.n	80013a2 <LCD_IO_WriteCmd8DataFill16+0xda>
 800139a:	4b6f      	ldr	r3, [pc, #444]	; (8001558 <LCD_IO_WriteCmd8DataFill16+0x290>)
 800139c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013a0:	619a      	str	r2, [r3, #24]
 80013a2:	4b6a      	ldr	r3, [pc, #424]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d004      	beq.n	80013b8 <LCD_IO_WriteCmd8DataFill16+0xf0>
 80013ae:	4b6b      	ldr	r3, [pc, #428]	; (800155c <LCD_IO_WriteCmd8DataFill16+0x294>)
 80013b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013b4:	619a      	str	r2, [r3, #24]
 80013b6:	e003      	b.n	80013c0 <LCD_IO_WriteCmd8DataFill16+0xf8>
 80013b8:	4b68      	ldr	r3, [pc, #416]	; (800155c <LCD_IO_WriteCmd8DataFill16+0x294>)
 80013ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80013be:	619a      	str	r2, [r3, #24]
 80013c0:	4b62      	ldr	r3, [pc, #392]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	b25b      	sxtb	r3, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	da04      	bge.n	80013d4 <LCD_IO_WriteCmd8DataFill16+0x10c>
 80013ca:	4b61      	ldr	r3, [pc, #388]	; (8001550 <LCD_IO_WriteCmd8DataFill16+0x288>)
 80013cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013d0:	619a      	str	r2, [r3, #24]
 80013d2:	e003      	b.n	80013dc <LCD_IO_WriteCmd8DataFill16+0x114>
 80013d4:	4b5e      	ldr	r3, [pc, #376]	; (8001550 <LCD_IO_WriteCmd8DataFill16+0x288>)
 80013d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013da:	619a      	str	r2, [r3, #24]
 80013dc:	4b5a      	ldr	r3, [pc, #360]	; (8001548 <LCD_IO_WriteCmd8DataFill16+0x280>)
 80013de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013e2:	619a      	str	r2, [r3, #24]
 80013e4:	2008      	movs	r0, #8
 80013e6:	f7ff fbe8 	bl	8000bba <LCD_IO_Delay>
 80013ea:	4b57      	ldr	r3, [pc, #348]	; (8001548 <LCD_IO_WriteCmd8DataFill16+0x280>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	619a      	str	r2, [r3, #24]
 80013f0:	4b55      	ldr	r3, [pc, #340]	; (8001548 <LCD_IO_WriteCmd8DataFill16+0x280>)
 80013f2:	2208      	movs	r2, #8
 80013f4:	619a      	str	r2, [r3, #24]
  while(Size--)
 80013f6:	e11a      	b.n	800162e <LCD_IO_WriteCmd8DataFill16+0x366>
  {
    LCD_DATA16_WRITE(Data);
 80013f8:	88bb      	ldrh	r3, [r7, #4]
 80013fa:	0a1b      	lsrs	r3, r3, #8
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	4b52      	ldr	r3, [pc, #328]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001402:	701a      	strb	r2, [r3, #0]
 8001404:	4b51      	ldr	r3, [pc, #324]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	2b00      	cmp	r3, #0
 800140e:	d004      	beq.n	800141a <LCD_IO_WriteCmd8DataFill16+0x152>
 8001410:	4b4f      	ldr	r3, [pc, #316]	; (8001550 <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001412:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001416:	619a      	str	r2, [r3, #24]
 8001418:	e003      	b.n	8001422 <LCD_IO_WriteCmd8DataFill16+0x15a>
 800141a:	4b4d      	ldr	r3, [pc, #308]	; (8001550 <LCD_IO_WriteCmd8DataFill16+0x288>)
 800141c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001420:	619a      	str	r2, [r3, #24]
 8001422:	4b4a      	ldr	r3, [pc, #296]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d004      	beq.n	8001438 <LCD_IO_WriteCmd8DataFill16+0x170>
 800142e:	4b49      	ldr	r3, [pc, #292]	; (8001554 <LCD_IO_WriteCmd8DataFill16+0x28c>)
 8001430:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001434:	619a      	str	r2, [r3, #24]
 8001436:	e003      	b.n	8001440 <LCD_IO_WriteCmd8DataFill16+0x178>
 8001438:	4b46      	ldr	r3, [pc, #280]	; (8001554 <LCD_IO_WriteCmd8DataFill16+0x28c>)
 800143a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800143e:	619a      	str	r2, [r3, #24]
 8001440:	4b42      	ldr	r3, [pc, #264]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	f003 0304 	and.w	r3, r3, #4
 8001448:	2b00      	cmp	r3, #0
 800144a:	d004      	beq.n	8001456 <LCD_IO_WriteCmd8DataFill16+0x18e>
 800144c:	4b40      	ldr	r3, [pc, #256]	; (8001550 <LCD_IO_WriteCmd8DataFill16+0x288>)
 800144e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001452:	619a      	str	r2, [r3, #24]
 8001454:	e003      	b.n	800145e <LCD_IO_WriteCmd8DataFill16+0x196>
 8001456:	4b3e      	ldr	r3, [pc, #248]	; (8001550 <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001458:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800145c:	619a      	str	r2, [r3, #24]
 800145e:	4b3b      	ldr	r3, [pc, #236]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	f003 0308 	and.w	r3, r3, #8
 8001466:	2b00      	cmp	r3, #0
 8001468:	d004      	beq.n	8001474 <LCD_IO_WriteCmd8DataFill16+0x1ac>
 800146a:	4b3b      	ldr	r3, [pc, #236]	; (8001558 <LCD_IO_WriteCmd8DataFill16+0x290>)
 800146c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001470:	619a      	str	r2, [r3, #24]
 8001472:	e003      	b.n	800147c <LCD_IO_WriteCmd8DataFill16+0x1b4>
 8001474:	4b38      	ldr	r3, [pc, #224]	; (8001558 <LCD_IO_WriteCmd8DataFill16+0x290>)
 8001476:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800147a:	619a      	str	r2, [r3, #24]
 800147c:	4b33      	ldr	r3, [pc, #204]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	f003 0310 	and.w	r3, r3, #16
 8001484:	2b00      	cmp	r3, #0
 8001486:	d004      	beq.n	8001492 <LCD_IO_WriteCmd8DataFill16+0x1ca>
 8001488:	4b33      	ldr	r3, [pc, #204]	; (8001558 <LCD_IO_WriteCmd8DataFill16+0x290>)
 800148a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800148e:	619a      	str	r2, [r3, #24]
 8001490:	e003      	b.n	800149a <LCD_IO_WriteCmd8DataFill16+0x1d2>
 8001492:	4b31      	ldr	r3, [pc, #196]	; (8001558 <LCD_IO_WriteCmd8DataFill16+0x290>)
 8001494:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001498:	619a      	str	r2, [r3, #24]
 800149a:	4b2c      	ldr	r3, [pc, #176]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	f003 0320 	and.w	r3, r3, #32
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d004      	beq.n	80014b0 <LCD_IO_WriteCmd8DataFill16+0x1e8>
 80014a6:	4b2c      	ldr	r3, [pc, #176]	; (8001558 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80014a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014ac:	619a      	str	r2, [r3, #24]
 80014ae:	e003      	b.n	80014b8 <LCD_IO_WriteCmd8DataFill16+0x1f0>
 80014b0:	4b29      	ldr	r3, [pc, #164]	; (8001558 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80014b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014b6:	619a      	str	r2, [r3, #24]
 80014b8:	4b24      	ldr	r3, [pc, #144]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d004      	beq.n	80014ce <LCD_IO_WriteCmd8DataFill16+0x206>
 80014c4:	4b25      	ldr	r3, [pc, #148]	; (800155c <LCD_IO_WriteCmd8DataFill16+0x294>)
 80014c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014ca:	619a      	str	r2, [r3, #24]
 80014cc:	e003      	b.n	80014d6 <LCD_IO_WriteCmd8DataFill16+0x20e>
 80014ce:	4b23      	ldr	r3, [pc, #140]	; (800155c <LCD_IO_WriteCmd8DataFill16+0x294>)
 80014d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80014d4:	619a      	str	r2, [r3, #24]
 80014d6:	4b1d      	ldr	r3, [pc, #116]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	b25b      	sxtb	r3, r3
 80014dc:	2b00      	cmp	r3, #0
 80014de:	da04      	bge.n	80014ea <LCD_IO_WriteCmd8DataFill16+0x222>
 80014e0:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <LCD_IO_WriteCmd8DataFill16+0x288>)
 80014e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014e6:	619a      	str	r2, [r3, #24]
 80014e8:	e003      	b.n	80014f2 <LCD_IO_WriteCmd8DataFill16+0x22a>
 80014ea:	4b19      	ldr	r3, [pc, #100]	; (8001550 <LCD_IO_WriteCmd8DataFill16+0x288>)
 80014ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014f0:	619a      	str	r2, [r3, #24]
 80014f2:	4b15      	ldr	r3, [pc, #84]	; (8001548 <LCD_IO_WriteCmd8DataFill16+0x280>)
 80014f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014f8:	619a      	str	r2, [r3, #24]
 80014fa:	2008      	movs	r0, #8
 80014fc:	f7ff fb5d 	bl	8000bba <LCD_IO_Delay>
 8001500:	4b11      	ldr	r3, [pc, #68]	; (8001548 <LCD_IO_WriteCmd8DataFill16+0x280>)
 8001502:	2201      	movs	r2, #1
 8001504:	619a      	str	r2, [r3, #24]
 8001506:	88bb      	ldrh	r3, [r7, #4]
 8001508:	b2da      	uxtb	r2, r3
 800150a:	4b10      	ldr	r3, [pc, #64]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 800150c:	701a      	strb	r2, [r3, #0]
 800150e:	4b0f      	ldr	r3, [pc, #60]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	2b00      	cmp	r3, #0
 8001518:	d004      	beq.n	8001524 <LCD_IO_WriteCmd8DataFill16+0x25c>
 800151a:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <LCD_IO_WriteCmd8DataFill16+0x288>)
 800151c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001520:	619a      	str	r2, [r3, #24]
 8001522:	e003      	b.n	800152c <LCD_IO_WriteCmd8DataFill16+0x264>
 8001524:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001526:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800152a:	619a      	str	r2, [r3, #24]
 800152c:	4b07      	ldr	r3, [pc, #28]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d013      	beq.n	8001560 <LCD_IO_WriteCmd8DataFill16+0x298>
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <LCD_IO_WriteCmd8DataFill16+0x28c>)
 800153a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800153e:	619a      	str	r2, [r3, #24]
 8001540:	e012      	b.n	8001568 <LCD_IO_WriteCmd8DataFill16+0x2a0>
 8001542:	bf00      	nop
 8001544:	58020400 	.word	0x58020400
 8001548:	58020800 	.word	0x58020800
 800154c:	240002b2 	.word	0x240002b2
 8001550:	58021800 	.word	0x58021800
 8001554:	58020c00 	.word	0x58020c00
 8001558:	58021000 	.word	0x58021000
 800155c:	58020000 	.word	0x58020000
 8001560:	4b39      	ldr	r3, [pc, #228]	; (8001648 <LCD_IO_WriteCmd8DataFill16+0x380>)
 8001562:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001566:	619a      	str	r2, [r3, #24]
 8001568:	4b38      	ldr	r3, [pc, #224]	; (800164c <LCD_IO_WriteCmd8DataFill16+0x384>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	2b00      	cmp	r3, #0
 8001572:	d004      	beq.n	800157e <LCD_IO_WriteCmd8DataFill16+0x2b6>
 8001574:	4b36      	ldr	r3, [pc, #216]	; (8001650 <LCD_IO_WriteCmd8DataFill16+0x388>)
 8001576:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800157a:	619a      	str	r2, [r3, #24]
 800157c:	e003      	b.n	8001586 <LCD_IO_WriteCmd8DataFill16+0x2be>
 800157e:	4b34      	ldr	r3, [pc, #208]	; (8001650 <LCD_IO_WriteCmd8DataFill16+0x388>)
 8001580:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001584:	619a      	str	r2, [r3, #24]
 8001586:	4b31      	ldr	r3, [pc, #196]	; (800164c <LCD_IO_WriteCmd8DataFill16+0x384>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	f003 0308 	and.w	r3, r3, #8
 800158e:	2b00      	cmp	r3, #0
 8001590:	d004      	beq.n	800159c <LCD_IO_WriteCmd8DataFill16+0x2d4>
 8001592:	4b30      	ldr	r3, [pc, #192]	; (8001654 <LCD_IO_WriteCmd8DataFill16+0x38c>)
 8001594:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001598:	619a      	str	r2, [r3, #24]
 800159a:	e003      	b.n	80015a4 <LCD_IO_WriteCmd8DataFill16+0x2dc>
 800159c:	4b2d      	ldr	r3, [pc, #180]	; (8001654 <LCD_IO_WriteCmd8DataFill16+0x38c>)
 800159e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80015a2:	619a      	str	r2, [r3, #24]
 80015a4:	4b29      	ldr	r3, [pc, #164]	; (800164c <LCD_IO_WriteCmd8DataFill16+0x384>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	f003 0310 	and.w	r3, r3, #16
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d004      	beq.n	80015ba <LCD_IO_WriteCmd8DataFill16+0x2f2>
 80015b0:	4b28      	ldr	r3, [pc, #160]	; (8001654 <LCD_IO_WriteCmd8DataFill16+0x38c>)
 80015b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015b6:	619a      	str	r2, [r3, #24]
 80015b8:	e003      	b.n	80015c2 <LCD_IO_WriteCmd8DataFill16+0x2fa>
 80015ba:	4b26      	ldr	r3, [pc, #152]	; (8001654 <LCD_IO_WriteCmd8DataFill16+0x38c>)
 80015bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015c0:	619a      	str	r2, [r3, #24]
 80015c2:	4b22      	ldr	r3, [pc, #136]	; (800164c <LCD_IO_WriteCmd8DataFill16+0x384>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	f003 0320 	and.w	r3, r3, #32
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d004      	beq.n	80015d8 <LCD_IO_WriteCmd8DataFill16+0x310>
 80015ce:	4b21      	ldr	r3, [pc, #132]	; (8001654 <LCD_IO_WriteCmd8DataFill16+0x38c>)
 80015d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015d4:	619a      	str	r2, [r3, #24]
 80015d6:	e003      	b.n	80015e0 <LCD_IO_WriteCmd8DataFill16+0x318>
 80015d8:	4b1e      	ldr	r3, [pc, #120]	; (8001654 <LCD_IO_WriteCmd8DataFill16+0x38c>)
 80015da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015de:	619a      	str	r2, [r3, #24]
 80015e0:	4b1a      	ldr	r3, [pc, #104]	; (800164c <LCD_IO_WriteCmd8DataFill16+0x384>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d004      	beq.n	80015f6 <LCD_IO_WriteCmd8DataFill16+0x32e>
 80015ec:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <LCD_IO_WriteCmd8DataFill16+0x390>)
 80015ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015f2:	619a      	str	r2, [r3, #24]
 80015f4:	e003      	b.n	80015fe <LCD_IO_WriteCmd8DataFill16+0x336>
 80015f6:	4b18      	ldr	r3, [pc, #96]	; (8001658 <LCD_IO_WriteCmd8DataFill16+0x390>)
 80015f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80015fc:	619a      	str	r2, [r3, #24]
 80015fe:	4b13      	ldr	r3, [pc, #76]	; (800164c <LCD_IO_WriteCmd8DataFill16+0x384>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	b25b      	sxtb	r3, r3
 8001604:	2b00      	cmp	r3, #0
 8001606:	da04      	bge.n	8001612 <LCD_IO_WriteCmd8DataFill16+0x34a>
 8001608:	4b11      	ldr	r3, [pc, #68]	; (8001650 <LCD_IO_WriteCmd8DataFill16+0x388>)
 800160a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800160e:	619a      	str	r2, [r3, #24]
 8001610:	e003      	b.n	800161a <LCD_IO_WriteCmd8DataFill16+0x352>
 8001612:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <LCD_IO_WriteCmd8DataFill16+0x388>)
 8001614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001618:	619a      	str	r2, [r3, #24]
 800161a:	4b10      	ldr	r3, [pc, #64]	; (800165c <LCD_IO_WriteCmd8DataFill16+0x394>)
 800161c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001620:	619a      	str	r2, [r3, #24]
 8001622:	2008      	movs	r0, #8
 8001624:	f7ff fac9 	bl	8000bba <LCD_IO_Delay>
 8001628:	4b0c      	ldr	r3, [pc, #48]	; (800165c <LCD_IO_WriteCmd8DataFill16+0x394>)
 800162a:	2201      	movs	r2, #1
 800162c:	619a      	str	r2, [r3, #24]
  while(Size--)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	1e5a      	subs	r2, r3, #1
 8001632:	603a      	str	r2, [r7, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	f47f aedf 	bne.w	80013f8 <LCD_IO_WriteCmd8DataFill16+0x130>
  }
  LCD_CS_OFF;
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <LCD_IO_WriteCmd8DataFill16+0x398>)
 800163c:	2202      	movs	r2, #2
 800163e:	619a      	str	r2, [r3, #24]
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	58020c00 	.word	0x58020c00
 800164c:	240002b2 	.word	0x240002b2
 8001650:	58021800 	.word	0x58021800
 8001654:	58021000 	.word	0x58021000
 8001658:	58020000 	.word	0x58020000
 800165c:	58020800 	.word	0x58020800
 8001660:	58020400 	.word	0x58020400

08001664 <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
 8001670:	73fb      	strb	r3, [r7, #15]
  LCD_CS_ON;
 8001672:	4b92      	ldr	r3, [pc, #584]	; (80018bc <LCD_IO_WriteCmd8MultipleData8+0x258>)
 8001674:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001678:	619a      	str	r2, [r3, #24]
  LCD_CMD8_WRITE(Cmd);
 800167a:	4b91      	ldr	r3, [pc, #580]	; (80018c0 <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 800167c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001680:	619a      	str	r2, [r3, #24]
 8001682:	4a90      	ldr	r2, [pc, #576]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001684:	7bfb      	ldrb	r3, [r7, #15]
 8001686:	7013      	strb	r3, [r2, #0]
 8001688:	4b8e      	ldr	r3, [pc, #568]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	2b00      	cmp	r3, #0
 8001692:	d004      	beq.n	800169e <LCD_IO_WriteCmd8MultipleData8+0x3a>
 8001694:	4b8c      	ldr	r3, [pc, #560]	; (80018c8 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001696:	f44f 7200 	mov.w	r2, #512	; 0x200
 800169a:	619a      	str	r2, [r3, #24]
 800169c:	e003      	b.n	80016a6 <LCD_IO_WriteCmd8MultipleData8+0x42>
 800169e:	4b8a      	ldr	r3, [pc, #552]	; (80018c8 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 80016a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016a4:	619a      	str	r2, [r3, #24]
 80016a6:	4b87      	ldr	r3, [pc, #540]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d004      	beq.n	80016bc <LCD_IO_WriteCmd8MultipleData8+0x58>
 80016b2:	4b86      	ldr	r3, [pc, #536]	; (80018cc <LCD_IO_WriteCmd8MultipleData8+0x268>)
 80016b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016b8:	619a      	str	r2, [r3, #24]
 80016ba:	e003      	b.n	80016c4 <LCD_IO_WriteCmd8MultipleData8+0x60>
 80016bc:	4b83      	ldr	r3, [pc, #524]	; (80018cc <LCD_IO_WriteCmd8MultipleData8+0x268>)
 80016be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80016c2:	619a      	str	r2, [r3, #24]
 80016c4:	4b7f      	ldr	r3, [pc, #508]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d004      	beq.n	80016da <LCD_IO_WriteCmd8MultipleData8+0x76>
 80016d0:	4b7d      	ldr	r3, [pc, #500]	; (80018c8 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 80016d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016d6:	619a      	str	r2, [r3, #24]
 80016d8:	e003      	b.n	80016e2 <LCD_IO_WriteCmd8MultipleData8+0x7e>
 80016da:	4b7b      	ldr	r3, [pc, #492]	; (80018c8 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 80016dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016e0:	619a      	str	r2, [r3, #24]
 80016e2:	4b78      	ldr	r3, [pc, #480]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	f003 0308 	and.w	r3, r3, #8
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d004      	beq.n	80016f8 <LCD_IO_WriteCmd8MultipleData8+0x94>
 80016ee:	4b78      	ldr	r3, [pc, #480]	; (80018d0 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 80016f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016f4:	619a      	str	r2, [r3, #24]
 80016f6:	e003      	b.n	8001700 <LCD_IO_WriteCmd8MultipleData8+0x9c>
 80016f8:	4b75      	ldr	r3, [pc, #468]	; (80018d0 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 80016fa:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80016fe:	619a      	str	r2, [r3, #24]
 8001700:	4b70      	ldr	r3, [pc, #448]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	f003 0310 	and.w	r3, r3, #16
 8001708:	2b00      	cmp	r3, #0
 800170a:	d004      	beq.n	8001716 <LCD_IO_WriteCmd8MultipleData8+0xb2>
 800170c:	4b70      	ldr	r3, [pc, #448]	; (80018d0 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 800170e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001712:	619a      	str	r2, [r3, #24]
 8001714:	e003      	b.n	800171e <LCD_IO_WriteCmd8MultipleData8+0xba>
 8001716:	4b6e      	ldr	r3, [pc, #440]	; (80018d0 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001718:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800171c:	619a      	str	r2, [r3, #24]
 800171e:	4b69      	ldr	r3, [pc, #420]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	f003 0320 	and.w	r3, r3, #32
 8001726:	2b00      	cmp	r3, #0
 8001728:	d004      	beq.n	8001734 <LCD_IO_WriteCmd8MultipleData8+0xd0>
 800172a:	4b69      	ldr	r3, [pc, #420]	; (80018d0 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 800172c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001730:	619a      	str	r2, [r3, #24]
 8001732:	e003      	b.n	800173c <LCD_IO_WriteCmd8MultipleData8+0xd8>
 8001734:	4b66      	ldr	r3, [pc, #408]	; (80018d0 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001736:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800173a:	619a      	str	r2, [r3, #24]
 800173c:	4b61      	ldr	r3, [pc, #388]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001744:	2b00      	cmp	r3, #0
 8001746:	d004      	beq.n	8001752 <LCD_IO_WriteCmd8MultipleData8+0xee>
 8001748:	4b62      	ldr	r3, [pc, #392]	; (80018d4 <LCD_IO_WriteCmd8MultipleData8+0x270>)
 800174a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800174e:	619a      	str	r2, [r3, #24]
 8001750:	e003      	b.n	800175a <LCD_IO_WriteCmd8MultipleData8+0xf6>
 8001752:	4b60      	ldr	r3, [pc, #384]	; (80018d4 <LCD_IO_WriteCmd8MultipleData8+0x270>)
 8001754:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001758:	619a      	str	r2, [r3, #24]
 800175a:	4b5a      	ldr	r3, [pc, #360]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	b25b      	sxtb	r3, r3
 8001760:	2b00      	cmp	r3, #0
 8001762:	da04      	bge.n	800176e <LCD_IO_WriteCmd8MultipleData8+0x10a>
 8001764:	4b58      	ldr	r3, [pc, #352]	; (80018c8 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001766:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800176a:	619a      	str	r2, [r3, #24]
 800176c:	e003      	b.n	8001776 <LCD_IO_WriteCmd8MultipleData8+0x112>
 800176e:	4b56      	ldr	r3, [pc, #344]	; (80018c8 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001770:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001774:	619a      	str	r2, [r3, #24]
 8001776:	4b52      	ldr	r3, [pc, #328]	; (80018c0 <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 8001778:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800177c:	619a      	str	r2, [r3, #24]
 800177e:	2008      	movs	r0, #8
 8001780:	f7ff fa1b 	bl	8000bba <LCD_IO_Delay>
 8001784:	4b4e      	ldr	r3, [pc, #312]	; (80018c0 <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 8001786:	2201      	movs	r2, #1
 8001788:	619a      	str	r2, [r3, #24]
 800178a:	4b4d      	ldr	r3, [pc, #308]	; (80018c0 <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 800178c:	2208      	movs	r2, #8
 800178e:	619a      	str	r2, [r3, #24]

  while(Size--)
 8001790:	e087      	b.n	80018a2 <LCD_IO_WriteCmd8MultipleData8+0x23e>
  {
    LCD_DATA8_WRITE(*pData);
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	781a      	ldrb	r2, [r3, #0]
 8001796:	4b4b      	ldr	r3, [pc, #300]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001798:	701a      	strb	r2, [r3, #0]
 800179a:	4b4a      	ldr	r3, [pc, #296]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d004      	beq.n	80017b0 <LCD_IO_WriteCmd8MultipleData8+0x14c>
 80017a6:	4b48      	ldr	r3, [pc, #288]	; (80018c8 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 80017a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017ac:	619a      	str	r2, [r3, #24]
 80017ae:	e003      	b.n	80017b8 <LCD_IO_WriteCmd8MultipleData8+0x154>
 80017b0:	4b45      	ldr	r3, [pc, #276]	; (80018c8 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 80017b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017b6:	619a      	str	r2, [r3, #24]
 80017b8:	4b42      	ldr	r3, [pc, #264]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d004      	beq.n	80017ce <LCD_IO_WriteCmd8MultipleData8+0x16a>
 80017c4:	4b41      	ldr	r3, [pc, #260]	; (80018cc <LCD_IO_WriteCmd8MultipleData8+0x268>)
 80017c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80017ca:	619a      	str	r2, [r3, #24]
 80017cc:	e003      	b.n	80017d6 <LCD_IO_WriteCmd8MultipleData8+0x172>
 80017ce:	4b3f      	ldr	r3, [pc, #252]	; (80018cc <LCD_IO_WriteCmd8MultipleData8+0x268>)
 80017d0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80017d4:	619a      	str	r2, [r3, #24]
 80017d6:	4b3b      	ldr	r3, [pc, #236]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	f003 0304 	and.w	r3, r3, #4
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d004      	beq.n	80017ec <LCD_IO_WriteCmd8MultipleData8+0x188>
 80017e2:	4b39      	ldr	r3, [pc, #228]	; (80018c8 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 80017e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017e8:	619a      	str	r2, [r3, #24]
 80017ea:	e003      	b.n	80017f4 <LCD_IO_WriteCmd8MultipleData8+0x190>
 80017ec:	4b36      	ldr	r3, [pc, #216]	; (80018c8 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 80017ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017f2:	619a      	str	r2, [r3, #24]
 80017f4:	4b33      	ldr	r3, [pc, #204]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	f003 0308 	and.w	r3, r3, #8
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d004      	beq.n	800180a <LCD_IO_WriteCmd8MultipleData8+0x1a6>
 8001800:	4b33      	ldr	r3, [pc, #204]	; (80018d0 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001802:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001806:	619a      	str	r2, [r3, #24]
 8001808:	e003      	b.n	8001812 <LCD_IO_WriteCmd8MultipleData8+0x1ae>
 800180a:	4b31      	ldr	r3, [pc, #196]	; (80018d0 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 800180c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001810:	619a      	str	r2, [r3, #24]
 8001812:	4b2c      	ldr	r3, [pc, #176]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	f003 0310 	and.w	r3, r3, #16
 800181a:	2b00      	cmp	r3, #0
 800181c:	d004      	beq.n	8001828 <LCD_IO_WriteCmd8MultipleData8+0x1c4>
 800181e:	4b2c      	ldr	r3, [pc, #176]	; (80018d0 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001820:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001824:	619a      	str	r2, [r3, #24]
 8001826:	e003      	b.n	8001830 <LCD_IO_WriteCmd8MultipleData8+0x1cc>
 8001828:	4b29      	ldr	r3, [pc, #164]	; (80018d0 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 800182a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800182e:	619a      	str	r2, [r3, #24]
 8001830:	4b24      	ldr	r3, [pc, #144]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	f003 0320 	and.w	r3, r3, #32
 8001838:	2b00      	cmp	r3, #0
 800183a:	d004      	beq.n	8001846 <LCD_IO_WriteCmd8MultipleData8+0x1e2>
 800183c:	4b24      	ldr	r3, [pc, #144]	; (80018d0 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 800183e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001842:	619a      	str	r2, [r3, #24]
 8001844:	e003      	b.n	800184e <LCD_IO_WriteCmd8MultipleData8+0x1ea>
 8001846:	4b22      	ldr	r3, [pc, #136]	; (80018d0 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001848:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800184c:	619a      	str	r2, [r3, #24]
 800184e:	4b1d      	ldr	r3, [pc, #116]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001856:	2b00      	cmp	r3, #0
 8001858:	d004      	beq.n	8001864 <LCD_IO_WriteCmd8MultipleData8+0x200>
 800185a:	4b1e      	ldr	r3, [pc, #120]	; (80018d4 <LCD_IO_WriteCmd8MultipleData8+0x270>)
 800185c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001860:	619a      	str	r2, [r3, #24]
 8001862:	e003      	b.n	800186c <LCD_IO_WriteCmd8MultipleData8+0x208>
 8001864:	4b1b      	ldr	r3, [pc, #108]	; (80018d4 <LCD_IO_WriteCmd8MultipleData8+0x270>)
 8001866:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800186a:	619a      	str	r2, [r3, #24]
 800186c:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	b25b      	sxtb	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	da04      	bge.n	8001880 <LCD_IO_WriteCmd8MultipleData8+0x21c>
 8001876:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001878:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800187c:	619a      	str	r2, [r3, #24]
 800187e:	e003      	b.n	8001888 <LCD_IO_WriteCmd8MultipleData8+0x224>
 8001880:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001886:	619a      	str	r2, [r3, #24]
 8001888:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 800188a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800188e:	619a      	str	r2, [r3, #24]
 8001890:	2008      	movs	r0, #8
 8001892:	f7ff f992 	bl	8000bba <LCD_IO_Delay>
 8001896:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 8001898:	2201      	movs	r2, #1
 800189a:	619a      	str	r2, [r3, #24]
    pData ++;
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	3301      	adds	r3, #1
 80018a0:	60bb      	str	r3, [r7, #8]
  while(Size--)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	1e5a      	subs	r2, r3, #1
 80018a6:	607a      	str	r2, [r7, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f47f af72 	bne.w	8001792 <LCD_IO_WriteCmd8MultipleData8+0x12e>
  }
  LCD_CS_OFF;
 80018ae:	4b03      	ldr	r3, [pc, #12]	; (80018bc <LCD_IO_WriteCmd8MultipleData8+0x258>)
 80018b0:	2202      	movs	r2, #2
 80018b2:	619a      	str	r2, [r3, #24]
}
 80018b4:	bf00      	nop
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	58020400 	.word	0x58020400
 80018c0:	58020800 	.word	0x58020800
 80018c4:	240002b2 	.word	0x240002b2
 80018c8:	58021800 	.word	0x58021800
 80018cc:	58020c00 	.word	0x58020c00
 80018d0:	58021000 	.word	0x58021000
 80018d4:	58020000 	.word	0x58020000

080018d8 <LCD_IO_WriteCmd8MultipleData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData16(uint8_t Cmd, uint16_t *pData, uint32_t Size)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
 80018e4:	73fb      	strb	r3, [r7, #15]
  LCD_CS_ON;
 80018e6:	4b9b      	ldr	r3, [pc, #620]	; (8001b54 <LCD_IO_WriteCmd8MultipleData16+0x27c>)
 80018e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018ec:	619a      	str	r2, [r3, #24]
  LCD_CMD8_WRITE(Cmd);
 80018ee:	4b9a      	ldr	r3, [pc, #616]	; (8001b58 <LCD_IO_WriteCmd8MultipleData16+0x280>)
 80018f0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80018f4:	619a      	str	r2, [r3, #24]
 80018f6:	4a99      	ldr	r2, [pc, #612]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
 80018fa:	7013      	strb	r3, [r2, #0]
 80018fc:	4b97      	ldr	r3, [pc, #604]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b00      	cmp	r3, #0
 8001906:	d004      	beq.n	8001912 <LCD_IO_WriteCmd8MultipleData16+0x3a>
 8001908:	4b95      	ldr	r3, [pc, #596]	; (8001b60 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 800190a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800190e:	619a      	str	r2, [r3, #24]
 8001910:	e003      	b.n	800191a <LCD_IO_WriteCmd8MultipleData16+0x42>
 8001912:	4b93      	ldr	r3, [pc, #588]	; (8001b60 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001914:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001918:	619a      	str	r2, [r3, #24]
 800191a:	4b90      	ldr	r3, [pc, #576]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d004      	beq.n	8001930 <LCD_IO_WriteCmd8MultipleData16+0x58>
 8001926:	4b8f      	ldr	r3, [pc, #572]	; (8001b64 <LCD_IO_WriteCmd8MultipleData16+0x28c>)
 8001928:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800192c:	619a      	str	r2, [r3, #24]
 800192e:	e003      	b.n	8001938 <LCD_IO_WriteCmd8MultipleData16+0x60>
 8001930:	4b8c      	ldr	r3, [pc, #560]	; (8001b64 <LCD_IO_WriteCmd8MultipleData16+0x28c>)
 8001932:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001936:	619a      	str	r2, [r3, #24]
 8001938:	4b88      	ldr	r3, [pc, #544]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	f003 0304 	and.w	r3, r3, #4
 8001940:	2b00      	cmp	r3, #0
 8001942:	d004      	beq.n	800194e <LCD_IO_WriteCmd8MultipleData16+0x76>
 8001944:	4b86      	ldr	r3, [pc, #536]	; (8001b60 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001946:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800194a:	619a      	str	r2, [r3, #24]
 800194c:	e003      	b.n	8001956 <LCD_IO_WriteCmd8MultipleData16+0x7e>
 800194e:	4b84      	ldr	r3, [pc, #528]	; (8001b60 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001950:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001954:	619a      	str	r2, [r3, #24]
 8001956:	4b81      	ldr	r3, [pc, #516]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	f003 0308 	and.w	r3, r3, #8
 800195e:	2b00      	cmp	r3, #0
 8001960:	d004      	beq.n	800196c <LCD_IO_WriteCmd8MultipleData16+0x94>
 8001962:	4b81      	ldr	r3, [pc, #516]	; (8001b68 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001964:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001968:	619a      	str	r2, [r3, #24]
 800196a:	e003      	b.n	8001974 <LCD_IO_WriteCmd8MultipleData16+0x9c>
 800196c:	4b7e      	ldr	r3, [pc, #504]	; (8001b68 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 800196e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001972:	619a      	str	r2, [r3, #24]
 8001974:	4b79      	ldr	r3, [pc, #484]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	f003 0310 	and.w	r3, r3, #16
 800197c:	2b00      	cmp	r3, #0
 800197e:	d004      	beq.n	800198a <LCD_IO_WriteCmd8MultipleData16+0xb2>
 8001980:	4b79      	ldr	r3, [pc, #484]	; (8001b68 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001982:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001986:	619a      	str	r2, [r3, #24]
 8001988:	e003      	b.n	8001992 <LCD_IO_WriteCmd8MultipleData16+0xba>
 800198a:	4b77      	ldr	r3, [pc, #476]	; (8001b68 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 800198c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001990:	619a      	str	r2, [r3, #24]
 8001992:	4b72      	ldr	r3, [pc, #456]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	f003 0320 	and.w	r3, r3, #32
 800199a:	2b00      	cmp	r3, #0
 800199c:	d004      	beq.n	80019a8 <LCD_IO_WriteCmd8MultipleData16+0xd0>
 800199e:	4b72      	ldr	r3, [pc, #456]	; (8001b68 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 80019a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019a4:	619a      	str	r2, [r3, #24]
 80019a6:	e003      	b.n	80019b0 <LCD_IO_WriteCmd8MultipleData16+0xd8>
 80019a8:	4b6f      	ldr	r3, [pc, #444]	; (8001b68 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 80019aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019ae:	619a      	str	r2, [r3, #24]
 80019b0:	4b6a      	ldr	r3, [pc, #424]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d004      	beq.n	80019c6 <LCD_IO_WriteCmd8MultipleData16+0xee>
 80019bc:	4b6b      	ldr	r3, [pc, #428]	; (8001b6c <LCD_IO_WriteCmd8MultipleData16+0x294>)
 80019be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019c2:	619a      	str	r2, [r3, #24]
 80019c4:	e003      	b.n	80019ce <LCD_IO_WriteCmd8MultipleData16+0xf6>
 80019c6:	4b69      	ldr	r3, [pc, #420]	; (8001b6c <LCD_IO_WriteCmd8MultipleData16+0x294>)
 80019c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019cc:	619a      	str	r2, [r3, #24]
 80019ce:	4b63      	ldr	r3, [pc, #396]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	b25b      	sxtb	r3, r3
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	da04      	bge.n	80019e2 <LCD_IO_WriteCmd8MultipleData16+0x10a>
 80019d8:	4b61      	ldr	r3, [pc, #388]	; (8001b60 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 80019da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019de:	619a      	str	r2, [r3, #24]
 80019e0:	e003      	b.n	80019ea <LCD_IO_WriteCmd8MultipleData16+0x112>
 80019e2:	4b5f      	ldr	r3, [pc, #380]	; (8001b60 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 80019e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019e8:	619a      	str	r2, [r3, #24]
 80019ea:	4b5b      	ldr	r3, [pc, #364]	; (8001b58 <LCD_IO_WriteCmd8MultipleData16+0x280>)
 80019ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019f0:	619a      	str	r2, [r3, #24]
 80019f2:	2008      	movs	r0, #8
 80019f4:	f7ff f8e1 	bl	8000bba <LCD_IO_Delay>
 80019f8:	4b57      	ldr	r3, [pc, #348]	; (8001b58 <LCD_IO_WriteCmd8MultipleData16+0x280>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	619a      	str	r2, [r3, #24]
 80019fe:	4b56      	ldr	r3, [pc, #344]	; (8001b58 <LCD_IO_WriteCmd8MultipleData16+0x280>)
 8001a00:	2208      	movs	r2, #8
 8001a02:	619a      	str	r2, [r3, #24]
  while(Size--)
 8001a04:	e11e      	b.n	8001c44 <LCD_IO_WriteCmd8MultipleData16+0x36c>
  {
    LCD_DATA16_WRITE(*pData);
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	881b      	ldrh	r3, [r3, #0]
 8001a0a:	0a1b      	lsrs	r3, r3, #8
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	4b52      	ldr	r3, [pc, #328]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001a12:	701a      	strb	r2, [r3, #0]
 8001a14:	4b51      	ldr	r3, [pc, #324]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d004      	beq.n	8001a2a <LCD_IO_WriteCmd8MultipleData16+0x152>
 8001a20:	4b4f      	ldr	r3, [pc, #316]	; (8001b60 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001a22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a26:	619a      	str	r2, [r3, #24]
 8001a28:	e003      	b.n	8001a32 <LCD_IO_WriteCmd8MultipleData16+0x15a>
 8001a2a:	4b4d      	ldr	r3, [pc, #308]	; (8001b60 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001a2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a30:	619a      	str	r2, [r3, #24]
 8001a32:	4b4a      	ldr	r3, [pc, #296]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d004      	beq.n	8001a48 <LCD_IO_WriteCmd8MultipleData16+0x170>
 8001a3e:	4b49      	ldr	r3, [pc, #292]	; (8001b64 <LCD_IO_WriteCmd8MultipleData16+0x28c>)
 8001a40:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a44:	619a      	str	r2, [r3, #24]
 8001a46:	e003      	b.n	8001a50 <LCD_IO_WriteCmd8MultipleData16+0x178>
 8001a48:	4b46      	ldr	r3, [pc, #280]	; (8001b64 <LCD_IO_WriteCmd8MultipleData16+0x28c>)
 8001a4a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001a4e:	619a      	str	r2, [r3, #24]
 8001a50:	4b42      	ldr	r3, [pc, #264]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d004      	beq.n	8001a66 <LCD_IO_WriteCmd8MultipleData16+0x18e>
 8001a5c:	4b40      	ldr	r3, [pc, #256]	; (8001b60 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001a5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a62:	619a      	str	r2, [r3, #24]
 8001a64:	e003      	b.n	8001a6e <LCD_IO_WriteCmd8MultipleData16+0x196>
 8001a66:	4b3e      	ldr	r3, [pc, #248]	; (8001b60 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001a68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a6c:	619a      	str	r2, [r3, #24]
 8001a6e:	4b3b      	ldr	r3, [pc, #236]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	f003 0308 	and.w	r3, r3, #8
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d004      	beq.n	8001a84 <LCD_IO_WriteCmd8MultipleData16+0x1ac>
 8001a7a:	4b3b      	ldr	r3, [pc, #236]	; (8001b68 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001a7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a80:	619a      	str	r2, [r3, #24]
 8001a82:	e003      	b.n	8001a8c <LCD_IO_WriteCmd8MultipleData16+0x1b4>
 8001a84:	4b38      	ldr	r3, [pc, #224]	; (8001b68 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001a86:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001a8a:	619a      	str	r2, [r3, #24]
 8001a8c:	4b33      	ldr	r3, [pc, #204]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	f003 0310 	and.w	r3, r3, #16
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d004      	beq.n	8001aa2 <LCD_IO_WriteCmd8MultipleData16+0x1ca>
 8001a98:	4b33      	ldr	r3, [pc, #204]	; (8001b68 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001a9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a9e:	619a      	str	r2, [r3, #24]
 8001aa0:	e003      	b.n	8001aaa <LCD_IO_WriteCmd8MultipleData16+0x1d2>
 8001aa2:	4b31      	ldr	r3, [pc, #196]	; (8001b68 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001aa4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001aa8:	619a      	str	r2, [r3, #24]
 8001aaa:	4b2c      	ldr	r3, [pc, #176]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	f003 0320 	and.w	r3, r3, #32
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d004      	beq.n	8001ac0 <LCD_IO_WriteCmd8MultipleData16+0x1e8>
 8001ab6:	4b2c      	ldr	r3, [pc, #176]	; (8001b68 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001ab8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001abc:	619a      	str	r2, [r3, #24]
 8001abe:	e003      	b.n	8001ac8 <LCD_IO_WriteCmd8MultipleData16+0x1f0>
 8001ac0:	4b29      	ldr	r3, [pc, #164]	; (8001b68 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001ac2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ac6:	619a      	str	r2, [r3, #24]
 8001ac8:	4b24      	ldr	r3, [pc, #144]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d004      	beq.n	8001ade <LCD_IO_WriteCmd8MultipleData16+0x206>
 8001ad4:	4b25      	ldr	r3, [pc, #148]	; (8001b6c <LCD_IO_WriteCmd8MultipleData16+0x294>)
 8001ad6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ada:	619a      	str	r2, [r3, #24]
 8001adc:	e003      	b.n	8001ae6 <LCD_IO_WriteCmd8MultipleData16+0x20e>
 8001ade:	4b23      	ldr	r3, [pc, #140]	; (8001b6c <LCD_IO_WriteCmd8MultipleData16+0x294>)
 8001ae0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ae4:	619a      	str	r2, [r3, #24]
 8001ae6:	4b1d      	ldr	r3, [pc, #116]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	b25b      	sxtb	r3, r3
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	da04      	bge.n	8001afa <LCD_IO_WriteCmd8MultipleData16+0x222>
 8001af0:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001af2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001af6:	619a      	str	r2, [r3, #24]
 8001af8:	e003      	b.n	8001b02 <LCD_IO_WriteCmd8MultipleData16+0x22a>
 8001afa:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001afc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b00:	619a      	str	r2, [r3, #24]
 8001b02:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <LCD_IO_WriteCmd8MultipleData16+0x280>)
 8001b04:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b08:	619a      	str	r2, [r3, #24]
 8001b0a:	2008      	movs	r0, #8
 8001b0c:	f7ff f855 	bl	8000bba <LCD_IO_Delay>
 8001b10:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <LCD_IO_WriteCmd8MultipleData16+0x280>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	619a      	str	r2, [r3, #24]
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001b1e:	701a      	strb	r2, [r3, #0]
 8001b20:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d004      	beq.n	8001b36 <LCD_IO_WriteCmd8MultipleData16+0x25e>
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001b2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b32:	619a      	str	r2, [r3, #24]
 8001b34:	e003      	b.n	8001b3e <LCD_IO_WriteCmd8MultipleData16+0x266>
 8001b36:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001b38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b3c:	619a      	str	r2, [r3, #24]
 8001b3e:	4b07      	ldr	r3, [pc, #28]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d012      	beq.n	8001b70 <LCD_IO_WriteCmd8MultipleData16+0x298>
 8001b4a:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <LCD_IO_WriteCmd8MultipleData16+0x28c>)
 8001b4c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b50:	619a      	str	r2, [r3, #24]
 8001b52:	e011      	b.n	8001b78 <LCD_IO_WriteCmd8MultipleData16+0x2a0>
 8001b54:	58020400 	.word	0x58020400
 8001b58:	58020800 	.word	0x58020800
 8001b5c:	240002b2 	.word	0x240002b2
 8001b60:	58021800 	.word	0x58021800
 8001b64:	58020c00 	.word	0x58020c00
 8001b68:	58021000 	.word	0x58021000
 8001b6c:	58020000 	.word	0x58020000
 8001b70:	4b3b      	ldr	r3, [pc, #236]	; (8001c60 <LCD_IO_WriteCmd8MultipleData16+0x388>)
 8001b72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001b76:	619a      	str	r2, [r3, #24]
 8001b78:	4b3a      	ldr	r3, [pc, #232]	; (8001c64 <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d004      	beq.n	8001b8e <LCD_IO_WriteCmd8MultipleData16+0x2b6>
 8001b84:	4b38      	ldr	r3, [pc, #224]	; (8001c68 <LCD_IO_WriteCmd8MultipleData16+0x390>)
 8001b86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b8a:	619a      	str	r2, [r3, #24]
 8001b8c:	e003      	b.n	8001b96 <LCD_IO_WriteCmd8MultipleData16+0x2be>
 8001b8e:	4b36      	ldr	r3, [pc, #216]	; (8001c68 <LCD_IO_WriteCmd8MultipleData16+0x390>)
 8001b90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b94:	619a      	str	r2, [r3, #24]
 8001b96:	4b33      	ldr	r3, [pc, #204]	; (8001c64 <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	f003 0308 	and.w	r3, r3, #8
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d004      	beq.n	8001bac <LCD_IO_WriteCmd8MultipleData16+0x2d4>
 8001ba2:	4b32      	ldr	r3, [pc, #200]	; (8001c6c <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8001ba4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ba8:	619a      	str	r2, [r3, #24]
 8001baa:	e003      	b.n	8001bb4 <LCD_IO_WriteCmd8MultipleData16+0x2dc>
 8001bac:	4b2f      	ldr	r3, [pc, #188]	; (8001c6c <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8001bae:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001bb2:	619a      	str	r2, [r3, #24]
 8001bb4:	4b2b      	ldr	r3, [pc, #172]	; (8001c64 <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	f003 0310 	and.w	r3, r3, #16
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d004      	beq.n	8001bca <LCD_IO_WriteCmd8MultipleData16+0x2f2>
 8001bc0:	4b2a      	ldr	r3, [pc, #168]	; (8001c6c <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8001bc2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bc6:	619a      	str	r2, [r3, #24]
 8001bc8:	e003      	b.n	8001bd2 <LCD_IO_WriteCmd8MultipleData16+0x2fa>
 8001bca:	4b28      	ldr	r3, [pc, #160]	; (8001c6c <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8001bcc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bd0:	619a      	str	r2, [r3, #24]
 8001bd2:	4b24      	ldr	r3, [pc, #144]	; (8001c64 <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	f003 0320 	and.w	r3, r3, #32
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d004      	beq.n	8001be8 <LCD_IO_WriteCmd8MultipleData16+0x310>
 8001bde:	4b23      	ldr	r3, [pc, #140]	; (8001c6c <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8001be0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001be4:	619a      	str	r2, [r3, #24]
 8001be6:	e003      	b.n	8001bf0 <LCD_IO_WriteCmd8MultipleData16+0x318>
 8001be8:	4b20      	ldr	r3, [pc, #128]	; (8001c6c <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8001bea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bee:	619a      	str	r2, [r3, #24]
 8001bf0:	4b1c      	ldr	r3, [pc, #112]	; (8001c64 <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d004      	beq.n	8001c06 <LCD_IO_WriteCmd8MultipleData16+0x32e>
 8001bfc:	4b1c      	ldr	r3, [pc, #112]	; (8001c70 <LCD_IO_WriteCmd8MultipleData16+0x398>)
 8001bfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c02:	619a      	str	r2, [r3, #24]
 8001c04:	e003      	b.n	8001c0e <LCD_IO_WriteCmd8MultipleData16+0x336>
 8001c06:	4b1a      	ldr	r3, [pc, #104]	; (8001c70 <LCD_IO_WriteCmd8MultipleData16+0x398>)
 8001c08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c0c:	619a      	str	r2, [r3, #24]
 8001c0e:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	b25b      	sxtb	r3, r3
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	da04      	bge.n	8001c22 <LCD_IO_WriteCmd8MultipleData16+0x34a>
 8001c18:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <LCD_IO_WriteCmd8MultipleData16+0x390>)
 8001c1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c1e:	619a      	str	r2, [r3, #24]
 8001c20:	e003      	b.n	8001c2a <LCD_IO_WriteCmd8MultipleData16+0x352>
 8001c22:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <LCD_IO_WriteCmd8MultipleData16+0x390>)
 8001c24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c28:	619a      	str	r2, [r3, #24]
 8001c2a:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <LCD_IO_WriteCmd8MultipleData16+0x39c>)
 8001c2c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c30:	619a      	str	r2, [r3, #24]
 8001c32:	2008      	movs	r0, #8
 8001c34:	f7fe ffc1 	bl	8000bba <LCD_IO_Delay>
 8001c38:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <LCD_IO_WriteCmd8MultipleData16+0x39c>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	619a      	str	r2, [r3, #24]
    pData ++;
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	3302      	adds	r3, #2
 8001c42:	60bb      	str	r3, [r7, #8]
  while(Size--)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	1e5a      	subs	r2, r3, #1
 8001c48:	607a      	str	r2, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f47f aedb 	bne.w	8001a06 <LCD_IO_WriteCmd8MultipleData16+0x12e>
  }
  LCD_CS_OFF;
 8001c50:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <LCD_IO_WriteCmd8MultipleData16+0x3a0>)
 8001c52:	2202      	movs	r2, #2
 8001c54:	619a      	str	r2, [r3, #24]
}
 8001c56:	bf00      	nop
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	58020c00 	.word	0x58020c00
 8001c64:	240002b2 	.word	0x240002b2
 8001c68:	58021800 	.word	0x58021800
 8001c6c:	58021000 	.word	0x58021000
 8001c70:	58020000 	.word	0x58020000
 8001c74:	58020800 	.word	0x58020800
 8001c78:	58020400 	.word	0x58020400

08001c7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c7c:	b5b0      	push	{r4, r5, r7, lr}
 8001c7e:	b088      	sub	sp, #32
 8001c80:	af04      	add	r7, sp, #16
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8001c82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c86:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001c88:	bf00      	nop
 8001c8a:	4bac      	ldr	r3, [pc, #688]	; (8001f3c <main+0x2c0>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d004      	beq.n	8001ca0 <main+0x24>
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	1e5a      	subs	r2, r3, #1
 8001c9a:	60fa      	str	r2, [r7, #12]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	dcf4      	bgt.n	8001c8a <main+0xe>
  if ( timeout < 0 )
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	da01      	bge.n	8001caa <main+0x2e>
  {
  Error_Handler();
 8001ca6:	f000 fc58 	bl	800255a <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001caa:	f000 fe55 	bl	8002958 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cae:	f000 fa75 	bl	800219c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8001cb2:	4ba2      	ldr	r3, [pc, #648]	; (8001f3c <main+0x2c0>)
 8001cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb8:	4aa0      	ldr	r2, [pc, #640]	; (8001f3c <main+0x2c0>)
 8001cba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cc2:	4b9e      	ldr	r3, [pc, #632]	; (8001f3c <main+0x2c0>)
 8001cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ccc:	607b      	str	r3, [r7, #4]
 8001cce:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	f001 fe03 	bl	80038dc <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	2000      	movs	r0, #0
 8001cda:	f001 fe19 	bl	8003910 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8001cde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ce2:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001ce4:	bf00      	nop
 8001ce6:	4b95      	ldr	r3, [pc, #596]	; (8001f3c <main+0x2c0>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d104      	bne.n	8001cfc <main+0x80>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	1e5a      	subs	r2, r3, #1
 8001cf6:	60fa      	str	r2, [r7, #12]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	dcf4      	bgt.n	8001ce6 <main+0x6a>
if ( timeout < 0 )
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	da01      	bge.n	8001d06 <main+0x8a>
{
Error_Handler();
 8001d02:	f000 fc2a 	bl	800255a <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d06:	f000 fb67 	bl	80023d8 <MX_GPIO_Init>
  MX_ETH_Init();
 8001d0a:	f000 facd 	bl	80022a8 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001d0e:	f000 fb17 	bl	8002340 <MX_USB_OTG_FS_PCD_Init>
  MX_DMA_Init();
 8001d12:	f000 fb47 	bl	80023a4 <MX_DMA_Init>
  MX_LIBJPEG_Init();
 8001d16:	f004 fb03 	bl	8006320 <MX_LIBJPEG_Init>
  /* USER CODE BEGIN 2 */

  	SRAM4-> flag_UID = 0;
 8001d1a:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001d1e:	2200      	movs	r2, #0
 8001d20:	771a      	strb	r2, [r3, #28]

  	ili9486_Init();
 8001d22:	f7fe fbdf 	bl	80004e4 <ili9486_Init>
    ili9486_DisplayOn();
 8001d26:	f7fe fbc1 	bl	80004ac <ili9486_DisplayOn>

    ili_scr_1();
 8001d2a:	f000 fbc9 	bl	80024c0 <ili_scr_1>

    ili9486_FillRect(0, 0, 480, 35, cl_BLUE);
 8001d2e:	231f      	movs	r3, #31
 8001d30:	9300      	str	r3, [sp, #0]
 8001d32:	2323      	movs	r3, #35	; 0x23
 8001d34:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001d38:	2100      	movs	r1, #0
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	f7fe fcfc 	bl	8000738 <ili9486_FillRect>
    ili9486_WriteStringNoBG(10, 10, " > STAMPR ----->>>-----", Font20, cl_WHITE);
 8001d40:	4b7f      	ldr	r3, [pc, #508]	; (8001f40 <main+0x2c4>)
 8001d42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d46:	9201      	str	r2, [sp, #4]
 8001d48:	685a      	ldr	r2, [r3, #4]
 8001d4a:	9200      	str	r2, [sp, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a7d      	ldr	r2, [pc, #500]	; (8001f44 <main+0x2c8>)
 8001d50:	210a      	movs	r1, #10
 8001d52:	200a      	movs	r0, #10
 8001d54:	f7fe fee6 	bl	8000b24 <ili9486_WriteStringNoBG>
    ili9486_WriteStringNoBG(400, 10, " OWL_HOR ", Font12, cl_WHITE);
 8001d58:	4b7b      	ldr	r3, [pc, #492]	; (8001f48 <main+0x2cc>)
 8001d5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d5e:	9201      	str	r2, [sp, #4]
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	9200      	str	r2, [sp, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a79      	ldr	r2, [pc, #484]	; (8001f4c <main+0x2d0>)
 8001d68:	210a      	movs	r1, #10
 8001d6a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001d6e:	f7fe fed9 	bl	8000b24 <ili9486_WriteStringNoBG>
    ili9486_DrawRGBImage(140, 120, 128, 128, (uint16_t*)test_img_128x128);
 8001d72:	4b77      	ldr	r3, [pc, #476]	; (8001f50 <main+0x2d4>)
 8001d74:	9300      	str	r3, [sp, #0]
 8001d76:	2380      	movs	r3, #128	; 0x80
 8001d78:	2280      	movs	r2, #128	; 0x80
 8001d7a:	2178      	movs	r1, #120	; 0x78
 8001d7c:	208c      	movs	r0, #140	; 0x8c
 8001d7e:	f7fe fd3e 	bl	80007fe <ili9486_DrawRGBImage>
    ili9486_WriteStringNoBG(10, 40, " Scan the RFID Tag", Font20, cl_OLIVE);
 8001d82:	4b6f      	ldr	r3, [pc, #444]	; (8001f40 <main+0x2c4>)
 8001d84:	f647 32e0 	movw	r2, #31712	; 0x7be0
 8001d88:	9201      	str	r2, [sp, #4]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	9200      	str	r2, [sp, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a70      	ldr	r2, [pc, #448]	; (8001f54 <main+0x2d8>)
 8001d92:	2128      	movs	r1, #40	; 0x28
 8001d94:	200a      	movs	r0, #10
 8001d96:	f7fe fec5 	bl	8000b24 <ili9486_WriteStringNoBG>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  //// Time Clock Manager / Independent from GranDiState
	  if(HAL_GetTick() - timestamp_one >= 500){
 8001d9a:	f000 fe63 	bl	8002a64 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	4b6d      	ldr	r3, [pc, #436]	; (8001f58 <main+0x2dc>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001daa:	d351      	bcc.n	8001e50 <main+0x1d4>
	  		  timestamp_one = HAL_GetTick();
 8001dac:	f000 fe5a 	bl	8002a64 <HAL_GetTick>
 8001db0:	4603      	mov	r3, r0
 8001db2:	4a69      	ldr	r2, [pc, #420]	; (8001f58 <main+0x2dc>)
 8001db4:	6013      	str	r3, [r2, #0]
	  		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001db6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dba:	4868      	ldr	r0, [pc, #416]	; (8001f5c <main+0x2e0>)
 8001dbc:	f001 fd73 	bl	80038a6 <HAL_GPIO_TogglePin>

	  		NowDat7 = SRAM4->NowDates;
 8001dc0:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001dc4:	4a66      	ldr	r2, [pc, #408]	; (8001f60 <main+0x2e4>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	6013      	str	r3, [r2, #0]
	  		NowTim7 = SRAM4->NowTimes;
 8001dca:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001dce:	4a65      	ldr	r2, [pc, #404]	; (8001f64 <main+0x2e8>)
 8001dd0:	4615      	mov	r5, r2
 8001dd2:	1d1c      	adds	r4, r3, #4
 8001dd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dd8:	6823      	ldr	r3, [r4, #0]
 8001dda:	602b      	str	r3, [r5, #0]

	  		sprintf(txtdispBF, "%02X:%02X:%02X", // use %02 to fill 0 front of 1 digit
	  				  NowTim7.Hours, NowTim7.Minutes, NowTim7.Seconds);
 8001ddc:	4b61      	ldr	r3, [pc, #388]	; (8001f64 <main+0x2e8>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
	  		sprintf(txtdispBF, "%02X:%02X:%02X", // use %02 to fill 0 front of 1 digit
 8001de0:	461a      	mov	r2, r3
	  				  NowTim7.Hours, NowTim7.Minutes, NowTim7.Seconds);
 8001de2:	4b60      	ldr	r3, [pc, #384]	; (8001f64 <main+0x2e8>)
 8001de4:	785b      	ldrb	r3, [r3, #1]
	  		sprintf(txtdispBF, "%02X:%02X:%02X", // use %02 to fill 0 front of 1 digit
 8001de6:	4619      	mov	r1, r3
	  				  NowTim7.Hours, NowTim7.Minutes, NowTim7.Seconds);
 8001de8:	4b5e      	ldr	r3, [pc, #376]	; (8001f64 <main+0x2e8>)
 8001dea:	789b      	ldrb	r3, [r3, #2]
	  		sprintf(txtdispBF, "%02X:%02X:%02X", // use %02 to fill 0 front of 1 digit
 8001dec:	9300      	str	r3, [sp, #0]
 8001dee:	460b      	mov	r3, r1
 8001df0:	495d      	ldr	r1, [pc, #372]	; (8001f68 <main+0x2ec>)
 8001df2:	485e      	ldr	r0, [pc, #376]	; (8001f6c <main+0x2f0>)
 8001df4:	f004 fbce 	bl	8006594 <siprintf>
	  		ili9486_WriteString(365, 40, txtdispBF, Font20, cl_YELLOW, cl_BLACK);
 8001df8:	4b51      	ldr	r3, [pc, #324]	; (8001f40 <main+0x2c4>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	9202      	str	r2, [sp, #8]
 8001dfe:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001e02:	9201      	str	r2, [sp, #4]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	9200      	str	r2, [sp, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a58      	ldr	r2, [pc, #352]	; (8001f6c <main+0x2f0>)
 8001e0c:	2128      	movs	r1, #40	; 0x28
 8001e0e:	f240 106d 	movw	r0, #365	; 0x16d
 8001e12:	f7fe fe3a 	bl	8000a8a <ili9486_WriteString>

	  		sprintf(txtdispBF, "%02x/%02x/%02x",
	  			  				  NowDat7.Date, NowDat7.Month, NowDat7.Year);
 8001e16:	4b52      	ldr	r3, [pc, #328]	; (8001f60 <main+0x2e4>)
 8001e18:	789b      	ldrb	r3, [r3, #2]
	  		sprintf(txtdispBF, "%02x/%02x/%02x",
 8001e1a:	461a      	mov	r2, r3
	  			  				  NowDat7.Date, NowDat7.Month, NowDat7.Year);
 8001e1c:	4b50      	ldr	r3, [pc, #320]	; (8001f60 <main+0x2e4>)
 8001e1e:	785b      	ldrb	r3, [r3, #1]
	  		sprintf(txtdispBF, "%02x/%02x/%02x",
 8001e20:	4619      	mov	r1, r3
	  			  				  NowDat7.Date, NowDat7.Month, NowDat7.Year);
 8001e22:	4b4f      	ldr	r3, [pc, #316]	; (8001f60 <main+0x2e4>)
 8001e24:	78db      	ldrb	r3, [r3, #3]
	  		sprintf(txtdispBF, "%02x/%02x/%02x",
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	4951      	ldr	r1, [pc, #324]	; (8001f70 <main+0x2f4>)
 8001e2c:	484f      	ldr	r0, [pc, #316]	; (8001f6c <main+0x2f0>)
 8001e2e:	f004 fbb1 	bl	8006594 <siprintf>
	  		ili9486_WriteString(365, 60, txtdispBF, Font20, cl_YELLOW, cl_BLACK);
 8001e32:	4b43      	ldr	r3, [pc, #268]	; (8001f40 <main+0x2c4>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	9202      	str	r2, [sp, #8]
 8001e38:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001e3c:	9201      	str	r2, [sp, #4]
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	9200      	str	r2, [sp, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a49      	ldr	r2, [pc, #292]	; (8001f6c <main+0x2f0>)
 8001e46:	213c      	movs	r1, #60	; 0x3c
 8001e48:	f240 106d 	movw	r0, #365	; 0x16d
 8001e4c:	f7fe fe1d 	bl	8000a8a <ili9486_WriteString>
	  	  }

	  //// State Manager
	  if(HAL_GetTick() - timestamp_grandis[0] >= 100){
 8001e50:	f000 fe08 	bl	8002a64 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	4b47      	ldr	r3, [pc, #284]	; (8001f74 <main+0x2f8>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b63      	cmp	r3, #99	; 0x63
 8001e5e:	f240 8180 	bls.w	8002162 <main+0x4e6>
		  timestamp_grandis[0] = HAL_GetTick();
 8001e62:	f000 fdff 	bl	8002a64 <HAL_GetTick>
 8001e66:	4603      	mov	r3, r0
 8001e68:	4a42      	ldr	r2, [pc, #264]	; (8001f74 <main+0x2f8>)
 8001e6a:	6013      	str	r3, [r2, #0]

		  switch (GranDiSTATE){
 8001e6c:	4b42      	ldr	r3, [pc, #264]	; (8001f78 <main+0x2fc>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b03      	cmp	r3, #3
 8001e72:	f000 8149 	beq.w	8002108 <main+0x48c>
 8001e76:	2b03      	cmp	r3, #3
 8001e78:	dc04      	bgt.n	8001e84 <main+0x208>
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d010      	beq.n	8001ea0 <main+0x224>
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	f000 8080 	beq.w	8001f84 <main+0x308>
		  default:
		  case st_lobby:
			  //// ---- wait for scanned cards----------------------------------------------
			  //if(HAL_HSEM_Take(2, 2) == HAL_OK){
			  if ( SRAM4-> flag_UID == 1){
 8001e84:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001e88:	7f1b      	ldrb	r3, [r3, #28]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	f040 816b 	bne.w	8002166 <main+0x4ea>

				  //GranDiSTATE = st_show;
				  GranDiSTATE = st_search;
 8001e90:	4b39      	ldr	r3, [pc, #228]	; (8001f78 <main+0x2fc>)
 8001e92:	2201      	movs	r2, #1
 8001e94:	701a      	strb	r2, [r3, #0]
				  SRAM4-> flag_UID = 0;
 8001e96:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	771a      	strb	r2, [r3, #28]
				  //timestamp_grandis[1] = HAL_GetTick();
			  }
			  	//  HAL_HSEM_Release(2, 2);
			  	//}
			  break;
 8001e9e:	e162      	b.n	8002166 <main+0x4ea>
			   * 3 - search from UID[0] if not match -> go to next ID
			   *   - if not found any -> return n/a status and report no data in base
			   *   - if found -> break and end the search/ return personna -> go to st_show
			   * */
#ifdef px_ID_search_datasss
			  px_ID_match = -1; //// -1 means not found preferred
 8001ea0:	4b36      	ldr	r3, [pc, #216]	; (8001f7c <main+0x300>)
 8001ea2:	22ff      	movs	r2, #255	; 0xff
 8001ea4:	701a      	strb	r2, [r3, #0]
			  //// Breadth-First-Search cat cat
			  	 for(int y = 0;y <= PERSONA_LEN; y++){
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	e03b      	b.n	8001f24 <main+0x2a8>
			  		 if (SRAM4->UUID[0] == pxs_persons[y].USID[0]){
 8001eac:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001eb0:	7f5a      	ldrb	r2, [r3, #29]
 8001eb2:	4933      	ldr	r1, [pc, #204]	; (8001f80 <main+0x304>)
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	2068      	movs	r0, #104	; 0x68
 8001eb8:	fb00 f303 	mul.w	r3, r0, r3
 8001ebc:	440b      	add	r3, r1
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d12c      	bne.n	8001f1e <main+0x2a2>
			  			 if (SRAM4->UUID[1] == pxs_persons[y].USID[1]){
 8001ec4:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001ec8:	7f9a      	ldrb	r2, [r3, #30]
 8001eca:	492d      	ldr	r1, [pc, #180]	; (8001f80 <main+0x304>)
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	2068      	movs	r0, #104	; 0x68
 8001ed0:	fb00 f303 	mul.w	r3, r0, r3
 8001ed4:	440b      	add	r3, r1
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d11f      	bne.n	8001f1e <main+0x2a2>
			  				if (SRAM4->UUID[2] == pxs_persons[y].USID[2]){
 8001ede:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001ee2:	7fda      	ldrb	r2, [r3, #31]
 8001ee4:	4926      	ldr	r1, [pc, #152]	; (8001f80 <main+0x304>)
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	2068      	movs	r0, #104	; 0x68
 8001eea:	fb00 f303 	mul.w	r3, r0, r3
 8001eee:	440b      	add	r3, r1
 8001ef0:	3302      	adds	r3, #2
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d112      	bne.n	8001f1e <main+0x2a2>
			  					if (SRAM4->UUID[3] == pxs_persons[y].USID[3]){
 8001ef8:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001efc:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001f00:	491f      	ldr	r1, [pc, #124]	; (8001f80 <main+0x304>)
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	2068      	movs	r0, #104	; 0x68
 8001f06:	fb00 f303 	mul.w	r3, r0, r3
 8001f0a:	440b      	add	r3, r1
 8001f0c:	3303      	adds	r3, #3
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d104      	bne.n	8001f1e <main+0x2a2>
			  						px_ID_match = y; //// return match ID
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	b25a      	sxtb	r2, r3
 8001f18:	4b18      	ldr	r3, [pc, #96]	; (8001f7c <main+0x300>)
 8001f1a:	701a      	strb	r2, [r3, #0]
			  						break; //// end search
 8001f1c:	e005      	b.n	8001f2a <main+0x2ae>
			  	 for(int y = 0;y <= PERSONA_LEN; y++){
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	3301      	adds	r3, #1
 8001f22:	60bb      	str	r3, [r7, #8]
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	2b05      	cmp	r3, #5
 8001f28:	ddc0      	ble.n	8001eac <main+0x230>
			  		 }// search layer 0

			  	 }// for loop search
#endif
			  /// ---------------Finally-------------------------------
			  GranDiSTATE = st_show;
 8001f2a:	4b13      	ldr	r3, [pc, #76]	; (8001f78 <main+0x2fc>)
 8001f2c:	2202      	movs	r2, #2
 8001f2e:	701a      	strb	r2, [r3, #0]
			  timestamp_grandis[1] = HAL_GetTick();
 8001f30:	f000 fd98 	bl	8002a64 <HAL_GetTick>
 8001f34:	4603      	mov	r3, r0
 8001f36:	4a0f      	ldr	r2, [pc, #60]	; (8001f74 <main+0x2f8>)
 8001f38:	6053      	str	r3, [r2, #4]

			  break;
 8001f3a:	e117      	b.n	800216c <main+0x4f0>
 8001f3c:	58024400 	.word	0x58024400
 8001f40:	24000018 	.word	0x24000018
 8001f44:	08006d44 	.word	0x08006d44
 8001f48:	24000008 	.word	0x24000008
 8001f4c:	08006d5c 	.word	0x08006d5c
 8001f50:	0800a814 	.word	0x0800a814
 8001f54:	08006d68 	.word	0x08006d68
 8001f58:	24000938 	.word	0x24000938
 8001f5c:	58020400 	.word	0x58020400
 8001f60:	24000934 	.word	0x24000934
 8001f64:	24000920 	.word	0x24000920
 8001f68:	08006d7c 	.word	0x08006d7c
 8001f6c:	240008a8 	.word	0x240008a8
 8001f70:	08006d8c 	.word	0x08006d8c
 8001f74:	2400093c 	.word	0x2400093c
 8001f78:	24000944 	.word	0x24000944
 8001f7c:	24000160 	.word	0x24000160
 8001f80:	24000028 	.word	0x24000028

		  case st_show:
			  //// ------------------------------------------------------------------------------

			  // ID Show----------------------------
			  sprintf(txtdispBF,"Scanned ID");
 8001f84:	497a      	ldr	r1, [pc, #488]	; (8002170 <main+0x4f4>)
 8001f86:	487b      	ldr	r0, [pc, #492]	; (8002174 <main+0x4f8>)
 8001f88:	f004 fb04 	bl	8006594 <siprintf>
			  ili9486_WriteString(160, 100, txtdispBF, Font20, cl_ORANGE, cl_BLACK);
 8001f8c:	4b7a      	ldr	r3, [pc, #488]	; (8002178 <main+0x4fc>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	9202      	str	r2, [sp, #8]
 8001f92:	f64f 5220 	movw	r2, #64800	; 0xfd20
 8001f96:	9201      	str	r2, [sp, #4]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	9200      	str	r2, [sp, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a75      	ldr	r2, [pc, #468]	; (8002174 <main+0x4f8>)
 8001fa0:	2164      	movs	r1, #100	; 0x64
 8001fa2:	20a0      	movs	r0, #160	; 0xa0
 8001fa4:	f7fe fd71 	bl	8000a8a <ili9486_WriteString>

			  sprintf(txtdispBF,"UID: %02X %02X %02X %02X",
					 SRAM4->UUID[0],SRAM4->UUID[1],SRAM4->UUID[2],SRAM4->UUID[3]);
 8001fa8:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001fac:	7f5b      	ldrb	r3, [r3, #29]
			  sprintf(txtdispBF,"UID: %02X %02X %02X %02X",
 8001fae:	4619      	mov	r1, r3
					 SRAM4->UUID[0],SRAM4->UUID[1],SRAM4->UUID[2],SRAM4->UUID[3]);
 8001fb0:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001fb4:	7f9b      	ldrb	r3, [r3, #30]
			  sprintf(txtdispBF,"UID: %02X %02X %02X %02X",
 8001fb6:	4618      	mov	r0, r3
					 SRAM4->UUID[0],SRAM4->UUID[1],SRAM4->UUID[2],SRAM4->UUID[3]);
 8001fb8:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001fbc:	7fdb      	ldrb	r3, [r3, #31]
			  sprintf(txtdispBF,"UID: %02X %02X %02X %02X",
 8001fbe:	461a      	mov	r2, r3
					 SRAM4->UUID[0],SRAM4->UUID[1],SRAM4->UUID[2],SRAM4->UUID[3]);
 8001fc0:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001fc4:	f893 3020 	ldrb.w	r3, [r3, #32]
			  sprintf(txtdispBF,"UID: %02X %02X %02X %02X",
 8001fc8:	9301      	str	r3, [sp, #4]
 8001fca:	9200      	str	r2, [sp, #0]
 8001fcc:	4603      	mov	r3, r0
 8001fce:	460a      	mov	r2, r1
 8001fd0:	496a      	ldr	r1, [pc, #424]	; (800217c <main+0x500>)
 8001fd2:	4868      	ldr	r0, [pc, #416]	; (8002174 <main+0x4f8>)
 8001fd4:	f004 fade 	bl	8006594 <siprintf>
			  ili9486_WriteString(160, 125, txtdispBF, Font20, cl_YELLOW, cl_BLACK);
 8001fd8:	4b67      	ldr	r3, [pc, #412]	; (8002178 <main+0x4fc>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	9202      	str	r2, [sp, #8]
 8001fde:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001fe2:	9201      	str	r2, [sp, #4]
 8001fe4:	685a      	ldr	r2, [r3, #4]
 8001fe6:	9200      	str	r2, [sp, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a62      	ldr	r2, [pc, #392]	; (8002174 <main+0x4f8>)
 8001fec:	217d      	movs	r1, #125	; 0x7d
 8001fee:	20a0      	movs	r0, #160	; 0xa0
 8001ff0:	f7fe fd4b 	bl	8000a8a <ili9486_WriteString>
//				  ili9486_WriteString(160, 175, p1_owl.Surname, Font20, cl_GREEN, cl_BLACK);
//				  ili9486_WriteString(160, 200, p1_owl.welcom_txt, Font16, cl_ORANGE, cl_BLACK);
//			  }
#ifdef px_ID_search_datasss
			  //// ---- show pic
			  if(px_ID_match == -1){
 8001ff4:	4b62      	ldr	r3, [pc, #392]	; (8002180 <main+0x504>)
 8001ff6:	f993 3000 	ldrsb.w	r3, [r3]
 8001ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ffe:	d10e      	bne.n	800201e <main+0x3a2>
				  ////ili9486_DrawRGBImage(20, 100, 128, 128, (uint16_t*)p1_owl.pic);
				  ili9486_WriteString(160, 160,"NO ID IN DATABASE", Font24, cl_RED, cl_BLACK);
 8002000:	4b60      	ldr	r3, [pc, #384]	; (8002184 <main+0x508>)
 8002002:	2200      	movs	r2, #0
 8002004:	9202      	str	r2, [sp, #8]
 8002006:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800200a:	9201      	str	r2, [sp, #4]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	9200      	str	r2, [sp, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a5d      	ldr	r2, [pc, #372]	; (8002188 <main+0x50c>)
 8002014:	21a0      	movs	r1, #160	; 0xa0
 8002016:	20a0      	movs	r0, #160	; 0xa0
 8002018:	f7fe fd37 	bl	8000a8a <ili9486_WriteString>
 800201c:	e070      	b.n	8002100 <main+0x484>

			  }else{
				  ili9486_DrawRGBImage(20, 100,
 800201e:	4b58      	ldr	r3, [pc, #352]	; (8002180 <main+0x504>)
 8002020:	f993 3000 	ldrsb.w	r3, [r3]
 8002024:	4619      	mov	r1, r3
 8002026:	4a59      	ldr	r2, [pc, #356]	; (800218c <main+0x510>)
 8002028:	2368      	movs	r3, #104	; 0x68
 800202a:	fb01 f303 	mul.w	r3, r1, r3
 800202e:	4413      	add	r3, r2
 8002030:	3364      	adds	r3, #100	; 0x64
 8002032:	881a      	ldrh	r2, [r3, #0]
 8002034:	4b52      	ldr	r3, [pc, #328]	; (8002180 <main+0x504>)
 8002036:	f993 3000 	ldrsb.w	r3, [r3]
 800203a:	4618      	mov	r0, r3
 800203c:	4953      	ldr	r1, [pc, #332]	; (800218c <main+0x510>)
 800203e:	2368      	movs	r3, #104	; 0x68
 8002040:	fb00 f303 	mul.w	r3, r0, r3
 8002044:	440b      	add	r3, r1
 8002046:	3366      	adds	r3, #102	; 0x66
 8002048:	8819      	ldrh	r1, [r3, #0]
 800204a:	4b4d      	ldr	r3, [pc, #308]	; (8002180 <main+0x504>)
 800204c:	f993 3000 	ldrsb.w	r3, [r3]
 8002050:	461c      	mov	r4, r3
						  pxs_persons[px_ID_match].picXs,
						  pxs_persons[px_ID_match].picYs,
						  (uint16_t*)pxs_persons[px_ID_match].pic);
 8002052:	484e      	ldr	r0, [pc, #312]	; (800218c <main+0x510>)
 8002054:	2368      	movs	r3, #104	; 0x68
 8002056:	fb04 f303 	mul.w	r3, r4, r3
 800205a:	4403      	add	r3, r0
 800205c:	3360      	adds	r3, #96	; 0x60
 800205e:	681b      	ldr	r3, [r3, #0]
				  ili9486_DrawRGBImage(20, 100,
 8002060:	9300      	str	r3, [sp, #0]
 8002062:	460b      	mov	r3, r1
 8002064:	2164      	movs	r1, #100	; 0x64
 8002066:	2014      	movs	r0, #20
 8002068:	f7fe fbc9 	bl	80007fe <ili9486_DrawRGBImage>
				  ili9486_WriteString(160, 150, pxs_persons[px_ID_match].Name, Font20, cl_GREEN, cl_BLACK);
 800206c:	4b44      	ldr	r3, [pc, #272]	; (8002180 <main+0x504>)
 800206e:	f993 3000 	ldrsb.w	r3, [r3]
 8002072:	461a      	mov	r2, r3
 8002074:	2368      	movs	r3, #104	; 0x68
 8002076:	fb02 f303 	mul.w	r3, r2, r3
 800207a:	4a44      	ldr	r2, [pc, #272]	; (800218c <main+0x510>)
 800207c:	4413      	add	r3, r2
 800207e:	1d59      	adds	r1, r3, #5
 8002080:	4b3d      	ldr	r3, [pc, #244]	; (8002178 <main+0x4fc>)
 8002082:	2200      	movs	r2, #0
 8002084:	9202      	str	r2, [sp, #8]
 8002086:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800208a:	9201      	str	r2, [sp, #4]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	9200      	str	r2, [sp, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	460a      	mov	r2, r1
 8002094:	2196      	movs	r1, #150	; 0x96
 8002096:	20a0      	movs	r0, #160	; 0xa0
 8002098:	f7fe fcf7 	bl	8000a8a <ili9486_WriteString>
				  ili9486_WriteString(160, 175, pxs_persons[px_ID_match].Surname, Font20, cl_GREEN, cl_BLACK);
 800209c:	4b38      	ldr	r3, [pc, #224]	; (8002180 <main+0x504>)
 800209e:	f993 3000 	ldrsb.w	r3, [r3]
 80020a2:	461a      	mov	r2, r3
 80020a4:	2368      	movs	r3, #104	; 0x68
 80020a6:	fb02 f303 	mul.w	r3, r2, r3
 80020aa:	3318      	adds	r3, #24
 80020ac:	4a37      	ldr	r2, [pc, #220]	; (800218c <main+0x510>)
 80020ae:	4413      	add	r3, r2
 80020b0:	1c59      	adds	r1, r3, #1
 80020b2:	4b31      	ldr	r3, [pc, #196]	; (8002178 <main+0x4fc>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	9202      	str	r2, [sp, #8]
 80020b8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80020bc:	9201      	str	r2, [sp, #4]
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	9200      	str	r2, [sp, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	460a      	mov	r2, r1
 80020c6:	21af      	movs	r1, #175	; 0xaf
 80020c8:	20a0      	movs	r0, #160	; 0xa0
 80020ca:	f7fe fcde 	bl	8000a8a <ili9486_WriteString>
				  ili9486_WriteString(160, 200, pxs_persons[px_ID_match].welcom_txt, Font16, cl_CYAN, cl_BLACK);
 80020ce:	4b2c      	ldr	r3, [pc, #176]	; (8002180 <main+0x504>)
 80020d0:	f993 3000 	ldrsb.w	r3, [r3]
 80020d4:	461a      	mov	r2, r3
 80020d6:	2368      	movs	r3, #104	; 0x68
 80020d8:	fb02 f303 	mul.w	r3, r2, r3
 80020dc:	3328      	adds	r3, #40	; 0x28
 80020de:	4a2b      	ldr	r2, [pc, #172]	; (800218c <main+0x510>)
 80020e0:	4413      	add	r3, r2
 80020e2:	1d59      	adds	r1, r3, #5
 80020e4:	4b2a      	ldr	r3, [pc, #168]	; (8002190 <main+0x514>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	9202      	str	r2, [sp, #8]
 80020ea:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80020ee:	9201      	str	r2, [sp, #4]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	9200      	str	r2, [sp, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	460a      	mov	r2, r1
 80020f8:	21c8      	movs	r1, #200	; 0xc8
 80020fa:	20a0      	movs	r0, #160	; 0xa0
 80020fc:	f7fe fcc5 	bl	8000a8a <ili9486_WriteString>
			  }
#endif
			  GranDiSTATE = st_waitend;
 8002100:	4b24      	ldr	r3, [pc, #144]	; (8002194 <main+0x518>)
 8002102:	2203      	movs	r2, #3
 8002104:	701a      	strb	r2, [r3, #0]

			  break;
 8002106:	e031      	b.n	800216c <main+0x4f0>

		  case st_waitend:
			  /* Using waitend to wait, if still in show -> CPU will write display continuously
			   * */
			  ////// Ending display and back to lobby------------------
			  if(HAL_GetTick() - timestamp_grandis[1] >= k_tim_show_milli){
 8002108:	f000 fcac 	bl	8002a64 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	4b22      	ldr	r3, [pc, #136]	; (8002198 <main+0x51c>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	f241 3287 	movw	r2, #4999	; 0x1387
 8002118:	4293      	cmp	r3, r2
 800211a:	d926      	bls.n	800216a <main+0x4ee>
				  GranDiSTATE = st_lobby;
 800211c:	4b1d      	ldr	r3, [pc, #116]	; (8002194 <main+0x518>)
 800211e:	2200      	movs	r2, #0
 8002120:	701a      	strb	r2, [r3, #0]
				  // clear Display
				  ili9486_FillRect(20, 100, 450, 200, cl_BLACK);
 8002122:	2300      	movs	r3, #0
 8002124:	9300      	str	r3, [sp, #0]
 8002126:	23c8      	movs	r3, #200	; 0xc8
 8002128:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 800212c:	2164      	movs	r1, #100	; 0x64
 800212e:	2014      	movs	r0, #20
 8002130:	f7fe fb02 	bl	8000738 <ili9486_FillRect>

				  //// clear UID if nothing left in queue
				  if (SRAM4->flag_UID == 0){
 8002134:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8002138:	7f1b      	ldrb	r3, [r3, #28]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d115      	bne.n	800216a <main+0x4ee>
				  SRAM4->UUID[0] = 0;
 800213e:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8002142:	2200      	movs	r2, #0
 8002144:	775a      	strb	r2, [r3, #29]
				  SRAM4->UUID[1] = 0;
 8002146:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 800214a:	2200      	movs	r2, #0
 800214c:	779a      	strb	r2, [r3, #30]
				  SRAM4->UUID[2] = 0;
 800214e:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8002152:	2200      	movs	r2, #0
 8002154:	77da      	strb	r2, [r3, #31]
				  SRAM4->UUID[3] = 0;
 8002156:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 800215a:	2200      	movs	r2, #0
 800215c:	f883 2020 	strb.w	r2, [r3, #32]
				  }
			  }
			  break;
 8002160:	e003      	b.n	800216a <main+0x4ee>

 		  } // switch
	  }// GrandState
 8002162:	bf00      	nop
 8002164:	e619      	b.n	8001d9a <main+0x11e>
			  break;
 8002166:	bf00      	nop
 8002168:	e617      	b.n	8001d9a <main+0x11e>
			  break;
 800216a:	bf00      	nop
	  if(HAL_GetTick() - timestamp_one >= 500){
 800216c:	e615      	b.n	8001d9a <main+0x11e>
 800216e:	bf00      	nop
 8002170:	08006d9c 	.word	0x08006d9c
 8002174:	240008a8 	.word	0x240008a8
 8002178:	24000018 	.word	0x24000018
 800217c:	08006da8 	.word	0x08006da8
 8002180:	24000160 	.word	0x24000160
 8002184:	24000020 	.word	0x24000020
 8002188:	08006dc4 	.word	0x08006dc4
 800218c:	24000028 	.word	0x24000028
 8002190:	24000010 	.word	0x24000010
 8002194:	24000944 	.word	0x24000944
 8002198:	2400093c 	.word	0x2400093c

0800219c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b09c      	sub	sp, #112	; 0x70
 80021a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a6:	224c      	movs	r2, #76	; 0x4c
 80021a8:	2100      	movs	r1, #0
 80021aa:	4618      	mov	r0, r3
 80021ac:	f004 f8fa 	bl	80063a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021b0:	1d3b      	adds	r3, r7, #4
 80021b2:	2220      	movs	r2, #32
 80021b4:	2100      	movs	r1, #0
 80021b6:	4618      	mov	r0, r3
 80021b8:	f004 f8f4 	bl	80063a4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80021bc:	2004      	movs	r0, #4
 80021be:	f001 fd03 	bl	8003bc8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80021c2:	2300      	movs	r3, #0
 80021c4:	603b      	str	r3, [r7, #0]
 80021c6:	4b35      	ldr	r3, [pc, #212]	; (800229c <SystemClock_Config+0x100>)
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	4a34      	ldr	r2, [pc, #208]	; (800229c <SystemClock_Config+0x100>)
 80021cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021d0:	6193      	str	r3, [r2, #24]
 80021d2:	4b32      	ldr	r3, [pc, #200]	; (800229c <SystemClock_Config+0x100>)
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021da:	603b      	str	r3, [r7, #0]
 80021dc:	4b30      	ldr	r3, [pc, #192]	; (80022a0 <SystemClock_Config+0x104>)
 80021de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e0:	4a2f      	ldr	r2, [pc, #188]	; (80022a0 <SystemClock_Config+0x104>)
 80021e2:	f043 0301 	orr.w	r3, r3, #1
 80021e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80021e8:	4b2d      	ldr	r3, [pc, #180]	; (80022a0 <SystemClock_Config+0x104>)
 80021ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	603b      	str	r3, [r7, #0]
 80021f2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80021f4:	bf00      	nop
 80021f6:	4b29      	ldr	r3, [pc, #164]	; (800229c <SystemClock_Config+0x100>)
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002202:	d1f8      	bne.n	80021f6 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002204:	4b27      	ldr	r3, [pc, #156]	; (80022a4 <SystemClock_Config+0x108>)
 8002206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002208:	f023 0303 	bic.w	r3, r3, #3
 800220c:	4a25      	ldr	r2, [pc, #148]	; (80022a4 <SystemClock_Config+0x108>)
 800220e:	f043 0302 	orr.w	r3, r3, #2
 8002212:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002214:	2309      	movs	r3, #9
 8002216:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002218:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800221c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800221e:	2301      	movs	r3, #1
 8002220:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002222:	2302      	movs	r3, #2
 8002224:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002226:	2302      	movs	r3, #2
 8002228:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800222a:	2301      	movs	r3, #1
 800222c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 800222e:	2378      	movs	r3, #120	; 0x78
 8002230:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002232:	2302      	movs	r3, #2
 8002234:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002236:	2302      	movs	r3, #2
 8002238:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800223a:	2302      	movs	r3, #2
 800223c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800223e:	230c      	movs	r3, #12
 8002240:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002242:	2300      	movs	r3, #0
 8002244:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002246:	2300      	movs	r3, #0
 8002248:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800224a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800224e:	4618      	mov	r0, r3
 8002250:	f001 fd24 	bl	8003c9c <HAL_RCC_OscConfig>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800225a:	f000 f97e 	bl	800255a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800225e:	233f      	movs	r3, #63	; 0x3f
 8002260:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002262:	2303      	movs	r3, #3
 8002264:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002266:	2300      	movs	r3, #0
 8002268:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800226a:	2308      	movs	r3, #8
 800226c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800226e:	2340      	movs	r3, #64	; 0x40
 8002270:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002272:	2340      	movs	r3, #64	; 0x40
 8002274:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002276:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800227a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800227c:	2340      	movs	r3, #64	; 0x40
 800227e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002280:	1d3b      	adds	r3, r7, #4
 8002282:	2104      	movs	r1, #4
 8002284:	4618      	mov	r0, r3
 8002286:	f002 f937 	bl	80044f8 <HAL_RCC_ClockConfig>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8002290:	f000 f963 	bl	800255a <Error_Handler>
  }
}
 8002294:	bf00      	nop
 8002296:	3770      	adds	r7, #112	; 0x70
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	58024800 	.word	0x58024800
 80022a0:	58000400 	.word	0x58000400
 80022a4:	58024400 	.word	0x58024400

080022a8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80022ac:	4b1e      	ldr	r3, [pc, #120]	; (8002328 <MX_ETH_Init+0x80>)
 80022ae:	4a1f      	ldr	r2, [pc, #124]	; (800232c <MX_ETH_Init+0x84>)
 80022b0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80022b2:	4b1f      	ldr	r3, [pc, #124]	; (8002330 <MX_ETH_Init+0x88>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80022b8:	4b1d      	ldr	r3, [pc, #116]	; (8002330 <MX_ETH_Init+0x88>)
 80022ba:	2280      	movs	r2, #128	; 0x80
 80022bc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80022be:	4b1c      	ldr	r3, [pc, #112]	; (8002330 <MX_ETH_Init+0x88>)
 80022c0:	22e1      	movs	r2, #225	; 0xe1
 80022c2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80022c4:	4b1a      	ldr	r3, [pc, #104]	; (8002330 <MX_ETH_Init+0x88>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80022ca:	4b19      	ldr	r3, [pc, #100]	; (8002330 <MX_ETH_Init+0x88>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80022d0:	4b17      	ldr	r3, [pc, #92]	; (8002330 <MX_ETH_Init+0x88>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80022d6:	4b14      	ldr	r3, [pc, #80]	; (8002328 <MX_ETH_Init+0x80>)
 80022d8:	4a15      	ldr	r2, [pc, #84]	; (8002330 <MX_ETH_Init+0x88>)
 80022da:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80022dc:	4b12      	ldr	r3, [pc, #72]	; (8002328 <MX_ETH_Init+0x80>)
 80022de:	2201      	movs	r2, #1
 80022e0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80022e2:	4b11      	ldr	r3, [pc, #68]	; (8002328 <MX_ETH_Init+0x80>)
 80022e4:	4a13      	ldr	r2, [pc, #76]	; (8002334 <MX_ETH_Init+0x8c>)
 80022e6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80022e8:	4b0f      	ldr	r3, [pc, #60]	; (8002328 <MX_ETH_Init+0x80>)
 80022ea:	4a13      	ldr	r2, [pc, #76]	; (8002338 <MX_ETH_Init+0x90>)
 80022ec:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80022ee:	4b0e      	ldr	r3, [pc, #56]	; (8002328 <MX_ETH_Init+0x80>)
 80022f0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80022f4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80022f6:	480c      	ldr	r0, [pc, #48]	; (8002328 <MX_ETH_Init+0x80>)
 80022f8:	f000 fce8 	bl	8002ccc <HAL_ETH_Init>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8002302:	f000 f92a 	bl	800255a <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8002306:	2238      	movs	r2, #56	; 0x38
 8002308:	2100      	movs	r1, #0
 800230a:	480c      	ldr	r0, [pc, #48]	; (800233c <MX_ETH_Init+0x94>)
 800230c:	f004 f84a 	bl	80063a4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8002310:	4b0a      	ldr	r3, [pc, #40]	; (800233c <MX_ETH_Init+0x94>)
 8002312:	2221      	movs	r2, #33	; 0x21
 8002314:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8002316:	4b09      	ldr	r3, [pc, #36]	; (800233c <MX_ETH_Init+0x94>)
 8002318:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800231c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800231e:	4b07      	ldr	r3, [pc, #28]	; (800233c <MX_ETH_Init+0x94>)
 8002320:	2200      	movs	r2, #0
 8002322:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8002324:	bf00      	nop
 8002326:	bd80      	pop	{r7, pc}
 8002328:	240002ec 	.word	0x240002ec
 800232c:	40028000 	.word	0x40028000
 8002330:	24000948 	.word	0x24000948
 8002334:	24000230 	.word	0x24000230
 8002338:	240001d0 	.word	0x240001d0
 800233c:	240002b4 	.word	0x240002b4

08002340 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002344:	4b15      	ldr	r3, [pc, #84]	; (800239c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002346:	4a16      	ldr	r2, [pc, #88]	; (80023a0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8002348:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800234a:	4b14      	ldr	r3, [pc, #80]	; (800239c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800234c:	2209      	movs	r2, #9
 800234e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002350:	4b12      	ldr	r3, [pc, #72]	; (800239c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002352:	2202      	movs	r2, #2
 8002354:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002356:	4b11      	ldr	r3, [pc, #68]	; (800239c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002358:	2200      	movs	r2, #0
 800235a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800235c:	4b0f      	ldr	r3, [pc, #60]	; (800239c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800235e:	2202      	movs	r2, #2
 8002360:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002362:	4b0e      	ldr	r3, [pc, #56]	; (800239c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002364:	2200      	movs	r2, #0
 8002366:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002368:	4b0c      	ldr	r3, [pc, #48]	; (800239c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800236a:	2200      	movs	r2, #0
 800236c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800236e:	4b0b      	ldr	r3, [pc, #44]	; (800239c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002370:	2200      	movs	r2, #0
 8002372:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8002374:	4b09      	ldr	r3, [pc, #36]	; (800239c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002376:	2201      	movs	r2, #1
 8002378:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800237a:	4b08      	ldr	r3, [pc, #32]	; (800239c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800237c:	2201      	movs	r2, #1
 800237e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002380:	4b06      	ldr	r3, [pc, #24]	; (800239c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002382:	2200      	movs	r2, #0
 8002384:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002386:	4805      	ldr	r0, [pc, #20]	; (800239c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002388:	f001 fad6 	bl	8003938 <HAL_PCD_Init>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8002392:	f000 f8e2 	bl	800255a <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	2400039c 	.word	0x2400039c
 80023a0:	40080000 	.word	0x40080000

080023a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023aa:	4b0a      	ldr	r3, [pc, #40]	; (80023d4 <MX_DMA_Init+0x30>)
 80023ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80023b0:	4a08      	ldr	r2, [pc, #32]	; (80023d4 <MX_DMA_Init+0x30>)
 80023b2:	f043 0301 	orr.w	r3, r3, #1
 80023b6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80023ba:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <MX_DMA_Init+0x30>)
 80023bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	607b      	str	r3, [r7, #4]
 80023c6:	687b      	ldr	r3, [r7, #4]

}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	58024400 	.word	0x58024400

080023d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08a      	sub	sp, #40	; 0x28
 80023dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023de:	f107 0314 	add.w	r3, r7, #20
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	605a      	str	r2, [r3, #4]
 80023e8:	609a      	str	r2, [r3, #8]
 80023ea:	60da      	str	r2, [r3, #12]
 80023ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ee:	4b32      	ldr	r3, [pc, #200]	; (80024b8 <MX_GPIO_Init+0xe0>)
 80023f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023f4:	4a30      	ldr	r2, [pc, #192]	; (80024b8 <MX_GPIO_Init+0xe0>)
 80023f6:	f043 0304 	orr.w	r3, r3, #4
 80023fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023fe:	4b2e      	ldr	r3, [pc, #184]	; (80024b8 <MX_GPIO_Init+0xe0>)
 8002400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002404:	f003 0304 	and.w	r3, r3, #4
 8002408:	613b      	str	r3, [r7, #16]
 800240a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800240c:	4b2a      	ldr	r3, [pc, #168]	; (80024b8 <MX_GPIO_Init+0xe0>)
 800240e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002412:	4a29      	ldr	r2, [pc, #164]	; (80024b8 <MX_GPIO_Init+0xe0>)
 8002414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002418:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800241c:	4b26      	ldr	r3, [pc, #152]	; (80024b8 <MX_GPIO_Init+0xe0>)
 800241e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800242a:	4b23      	ldr	r3, [pc, #140]	; (80024b8 <MX_GPIO_Init+0xe0>)
 800242c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002430:	4a21      	ldr	r2, [pc, #132]	; (80024b8 <MX_GPIO_Init+0xe0>)
 8002432:	f043 0301 	orr.w	r3, r3, #1
 8002436:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800243a:	4b1f      	ldr	r3, [pc, #124]	; (80024b8 <MX_GPIO_Init+0xe0>)
 800243c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	60bb      	str	r3, [r7, #8]
 8002446:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002448:	4b1b      	ldr	r3, [pc, #108]	; (80024b8 <MX_GPIO_Init+0xe0>)
 800244a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800244e:	4a1a      	ldr	r2, [pc, #104]	; (80024b8 <MX_GPIO_Init+0xe0>)
 8002450:	f043 0302 	orr.w	r3, r3, #2
 8002454:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002458:	4b17      	ldr	r3, [pc, #92]	; (80024b8 <MX_GPIO_Init+0xe0>)
 800245a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	607b      	str	r3, [r7, #4]
 8002464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002466:	4b14      	ldr	r3, [pc, #80]	; (80024b8 <MX_GPIO_Init+0xe0>)
 8002468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800246c:	4a12      	ldr	r2, [pc, #72]	; (80024b8 <MX_GPIO_Init+0xe0>)
 800246e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002472:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002476:	4b10      	ldr	r3, [pc, #64]	; (80024b8 <MX_GPIO_Init+0xe0>)
 8002478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800247c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002480:	603b      	str	r3, [r7, #0]
 8002482:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002484:	2200      	movs	r2, #0
 8002486:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800248a:	480c      	ldr	r0, [pc, #48]	; (80024bc <MX_GPIO_Init+0xe4>)
 800248c:	f001 f9f2 	bl	8003874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8002490:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002494:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002496:	2301      	movs	r3, #1
 8002498:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249a:	2300      	movs	r3, #0
 800249c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249e:	2300      	movs	r3, #0
 80024a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80024a2:	f107 0314 	add.w	r3, r7, #20
 80024a6:	4619      	mov	r1, r3
 80024a8:	4804      	ldr	r0, [pc, #16]	; (80024bc <MX_GPIO_Init+0xe4>)
 80024aa:	f001 f833 	bl	8003514 <HAL_GPIO_Init>

}
 80024ae:	bf00      	nop
 80024b0:	3728      	adds	r7, #40	; 0x28
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	58024400 	.word	0x58024400
 80024bc:	58020400 	.word	0x58020400

080024c0 <ili_scr_1>:

/* USER CODE BEGIN 4 */
void ili_scr_1(){
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af02      	add	r7, sp, #8

	  ili9486_FillRect(0, 0, 480, 320, cl_BLACK);
 80024c6:	2300      	movs	r3, #0
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80024ce:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80024d2:	2100      	movs	r1, #0
 80024d4:	2000      	movs	r0, #0
 80024d6:	f7fe f92f 	bl	8000738 <ili9486_FillRect>

	  ili9486_FillRect(0, 300, 80, 20, cl_RED); // Red
 80024da:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	2314      	movs	r3, #20
 80024e2:	2250      	movs	r2, #80	; 0x50
 80024e4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80024e8:	2000      	movs	r0, #0
 80024ea:	f7fe f925 	bl	8000738 <ili9486_FillRect>
	  ili9486_FillRect(80, 300, 80, 20, cl_GREEN); // Green RGB565
 80024ee:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	2314      	movs	r3, #20
 80024f6:	2250      	movs	r2, #80	; 0x50
 80024f8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80024fc:	2050      	movs	r0, #80	; 0x50
 80024fe:	f7fe f91b 	bl	8000738 <ili9486_FillRect>
	  ili9486_FillRect(160, 300, 80, 20, cl_BLUE); // Blue
 8002502:	231f      	movs	r3, #31
 8002504:	9300      	str	r3, [sp, #0]
 8002506:	2314      	movs	r3, #20
 8002508:	2250      	movs	r2, #80	; 0x50
 800250a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800250e:	20a0      	movs	r0, #160	; 0xa0
 8002510:	f7fe f912 	bl	8000738 <ili9486_FillRect>
	  ili9486_FillRect(240, 300,  80, 20, cl_CYAN); // C0x07FF
 8002514:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	2314      	movs	r3, #20
 800251c:	2250      	movs	r2, #80	; 0x50
 800251e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002522:	20f0      	movs	r0, #240	; 0xf0
 8002524:	f7fe f908 	bl	8000738 <ili9486_FillRect>
	  ili9486_FillRect(320, 300, 80, 20, cl_MAGENTA); // M 0xF81F
 8002528:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	2314      	movs	r3, #20
 8002530:	2250      	movs	r2, #80	; 0x50
 8002532:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002536:	f44f 70a0 	mov.w	r0, #320	; 0x140
 800253a:	f7fe f8fd 	bl	8000738 <ili9486_FillRect>
	  ili9486_FillRect(400, 300, 80, 20, cl_YELLOW); // Y0xFFE0
 800253e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	2314      	movs	r3, #20
 8002546:	2250      	movs	r2, #80	; 0x50
 8002548:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800254c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002550:	f7fe f8f2 	bl	8000738 <ili9486_FillRect>
	  //ili9486_FillRect(390, 30, 70, 230, cl_BLACK); // K
}
 8002554:	bf00      	nop
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800255a:	b480      	push	{r7}
 800255c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800255e:	b672      	cpsid	i
}
 8002560:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002562:	e7fe      	b.n	8002562 <Error_Handler+0x8>

08002564 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800256a:	4b0a      	ldr	r3, [pc, #40]	; (8002594 <HAL_MspInit+0x30>)
 800256c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002570:	4a08      	ldr	r2, [pc, #32]	; (8002594 <HAL_MspInit+0x30>)
 8002572:	f043 0302 	orr.w	r3, r3, #2
 8002576:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800257a:	4b06      	ldr	r3, [pc, #24]	; (8002594 <HAL_MspInit+0x30>)
 800257c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	607b      	str	r3, [r7, #4]
 8002586:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	58024400 	.word	0x58024400

08002598 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b08e      	sub	sp, #56	; 0x38
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	605a      	str	r2, [r3, #4]
 80025aa:	609a      	str	r2, [r3, #8]
 80025ac:	60da      	str	r2, [r3, #12]
 80025ae:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a59      	ldr	r2, [pc, #356]	; (800271c <HAL_ETH_MspInit+0x184>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	f040 80ab 	bne.w	8002712 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80025bc:	4b58      	ldr	r3, [pc, #352]	; (8002720 <HAL_ETH_MspInit+0x188>)
 80025be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80025c2:	4a57      	ldr	r2, [pc, #348]	; (8002720 <HAL_ETH_MspInit+0x188>)
 80025c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025c8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80025cc:	4b54      	ldr	r3, [pc, #336]	; (8002720 <HAL_ETH_MspInit+0x188>)
 80025ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80025d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025d6:	623b      	str	r3, [r7, #32]
 80025d8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80025da:	4b51      	ldr	r3, [pc, #324]	; (8002720 <HAL_ETH_MspInit+0x188>)
 80025dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80025e0:	4a4f      	ldr	r2, [pc, #316]	; (8002720 <HAL_ETH_MspInit+0x188>)
 80025e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80025ea:	4b4d      	ldr	r3, [pc, #308]	; (8002720 <HAL_ETH_MspInit+0x188>)
 80025ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80025f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f4:	61fb      	str	r3, [r7, #28]
 80025f6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80025f8:	4b49      	ldr	r3, [pc, #292]	; (8002720 <HAL_ETH_MspInit+0x188>)
 80025fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80025fe:	4a48      	ldr	r2, [pc, #288]	; (8002720 <HAL_ETH_MspInit+0x188>)
 8002600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002604:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002608:	4b45      	ldr	r3, [pc, #276]	; (8002720 <HAL_ETH_MspInit+0x188>)
 800260a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800260e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002612:	61bb      	str	r3, [r7, #24]
 8002614:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002616:	4b42      	ldr	r3, [pc, #264]	; (8002720 <HAL_ETH_MspInit+0x188>)
 8002618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800261c:	4a40      	ldr	r2, [pc, #256]	; (8002720 <HAL_ETH_MspInit+0x188>)
 800261e:	f043 0304 	orr.w	r3, r3, #4
 8002622:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002626:	4b3e      	ldr	r3, [pc, #248]	; (8002720 <HAL_ETH_MspInit+0x188>)
 8002628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	617b      	str	r3, [r7, #20]
 8002632:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002634:	4b3a      	ldr	r3, [pc, #232]	; (8002720 <HAL_ETH_MspInit+0x188>)
 8002636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800263a:	4a39      	ldr	r2, [pc, #228]	; (8002720 <HAL_ETH_MspInit+0x188>)
 800263c:	f043 0301 	orr.w	r3, r3, #1
 8002640:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002644:	4b36      	ldr	r3, [pc, #216]	; (8002720 <HAL_ETH_MspInit+0x188>)
 8002646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	613b      	str	r3, [r7, #16]
 8002650:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002652:	4b33      	ldr	r3, [pc, #204]	; (8002720 <HAL_ETH_MspInit+0x188>)
 8002654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002658:	4a31      	ldr	r2, [pc, #196]	; (8002720 <HAL_ETH_MspInit+0x188>)
 800265a:	f043 0302 	orr.w	r3, r3, #2
 800265e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002662:	4b2f      	ldr	r3, [pc, #188]	; (8002720 <HAL_ETH_MspInit+0x188>)
 8002664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002670:	4b2b      	ldr	r3, [pc, #172]	; (8002720 <HAL_ETH_MspInit+0x188>)
 8002672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002676:	4a2a      	ldr	r2, [pc, #168]	; (8002720 <HAL_ETH_MspInit+0x188>)
 8002678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800267c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002680:	4b27      	ldr	r3, [pc, #156]	; (8002720 <HAL_ETH_MspInit+0x188>)
 8002682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800268a:	60bb      	str	r3, [r7, #8]
 800268c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800268e:	2332      	movs	r3, #50	; 0x32
 8002690:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002692:	2302      	movs	r3, #2
 8002694:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002696:	2300      	movs	r3, #0
 8002698:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269a:	2300      	movs	r3, #0
 800269c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800269e:	230b      	movs	r3, #11
 80026a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026a6:	4619      	mov	r1, r3
 80026a8:	481e      	ldr	r0, [pc, #120]	; (8002724 <HAL_ETH_MspInit+0x18c>)
 80026aa:	f000 ff33 	bl	8003514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80026ae:	2386      	movs	r3, #134	; 0x86
 80026b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b2:	2302      	movs	r3, #2
 80026b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b6:	2300      	movs	r3, #0
 80026b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ba:	2300      	movs	r3, #0
 80026bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80026be:	230b      	movs	r3, #11
 80026c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026c6:	4619      	mov	r1, r3
 80026c8:	4817      	ldr	r0, [pc, #92]	; (8002728 <HAL_ETH_MspInit+0x190>)
 80026ca:	f000 ff23 	bl	8003514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80026ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d4:	2302      	movs	r3, #2
 80026d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d8:	2300      	movs	r3, #0
 80026da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026dc:	2300      	movs	r3, #0
 80026de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80026e0:	230b      	movs	r3, #11
 80026e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026e8:	4619      	mov	r1, r3
 80026ea:	4810      	ldr	r0, [pc, #64]	; (800272c <HAL_ETH_MspInit+0x194>)
 80026ec:	f000 ff12 	bl	8003514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80026f0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80026f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f6:	2302      	movs	r3, #2
 80026f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fa:	2300      	movs	r3, #0
 80026fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fe:	2300      	movs	r3, #0
 8002700:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002702:	230b      	movs	r3, #11
 8002704:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800270a:	4619      	mov	r1, r3
 800270c:	4808      	ldr	r0, [pc, #32]	; (8002730 <HAL_ETH_MspInit+0x198>)
 800270e:	f000 ff01 	bl	8003514 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002712:	bf00      	nop
 8002714:	3738      	adds	r7, #56	; 0x38
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40028000 	.word	0x40028000
 8002720:	58024400 	.word	0x58024400
 8002724:	58020800 	.word	0x58020800
 8002728:	58020000 	.word	0x58020000
 800272c:	58020400 	.word	0x58020400
 8002730:	58021800 	.word	0x58021800

08002734 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b0b8      	sub	sp, #224	; 0xe0
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800273c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	60da      	str	r2, [r3, #12]
 800274a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800274c:	f107 0310 	add.w	r3, r7, #16
 8002750:	22bc      	movs	r2, #188	; 0xbc
 8002752:	2100      	movs	r1, #0
 8002754:	4618      	mov	r0, r3
 8002756:	f003 fe25 	bl	80063a4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a36      	ldr	r2, [pc, #216]	; (8002838 <HAL_PCD_MspInit+0x104>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d165      	bne.n	8002830 <HAL_PCD_MspInit+0xfc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002764:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002768:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 800276a:	2301      	movs	r3, #1
 800276c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 800276e:	2318      	movs	r3, #24
 8002770:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002772:	2302      	movs	r3, #2
 8002774:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8002776:	2304      	movs	r3, #4
 8002778:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800277a:	2302      	movs	r3, #2
 800277c:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800277e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002782:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8002784:	2300      	movs	r3, #0
 8002786:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8002788:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800278c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002790:	f107 0310 	add.w	r3, r7, #16
 8002794:	4618      	mov	r0, r3
 8002796:	f002 fa0f 	bl	8004bb8 <HAL_RCCEx_PeriphCLKConfig>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80027a0:	f7ff fedb 	bl	800255a <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80027a4:	f001 fa6a 	bl	8003c7c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a8:	4b24      	ldr	r3, [pc, #144]	; (800283c <HAL_PCD_MspInit+0x108>)
 80027aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027ae:	4a23      	ldr	r2, [pc, #140]	; (800283c <HAL_PCD_MspInit+0x108>)
 80027b0:	f043 0301 	orr.w	r3, r3, #1
 80027b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027b8:	4b20      	ldr	r3, [pc, #128]	; (800283c <HAL_PCD_MspInit+0x108>)
 80027ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80027c6:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80027ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ce:	2302      	movs	r3, #2
 80027d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027da:	2300      	movs	r3, #0
 80027dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80027e0:	230a      	movs	r3, #10
 80027e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80027ea:	4619      	mov	r1, r3
 80027ec:	4814      	ldr	r0, [pc, #80]	; (8002840 <HAL_PCD_MspInit+0x10c>)
 80027ee:	f000 fe91 	bl	8003514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80027f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027fa:	2300      	movs	r3, #0
 80027fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002800:	2300      	movs	r3, #0
 8002802:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002806:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800280a:	4619      	mov	r1, r3
 800280c:	480c      	ldr	r0, [pc, #48]	; (8002840 <HAL_PCD_MspInit+0x10c>)
 800280e:	f000 fe81 	bl	8003514 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002812:	4b0a      	ldr	r3, [pc, #40]	; (800283c <HAL_PCD_MspInit+0x108>)
 8002814:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002818:	4a08      	ldr	r2, [pc, #32]	; (800283c <HAL_PCD_MspInit+0x108>)
 800281a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800281e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002822:	4b06      	ldr	r3, [pc, #24]	; (800283c <HAL_PCD_MspInit+0x108>)
 8002824:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002828:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800282c:	60bb      	str	r3, [r7, #8]
 800282e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002830:	bf00      	nop
 8002832:	37e0      	adds	r7, #224	; 0xe0
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40080000 	.word	0x40080000
 800283c:	58024400 	.word	0x58024400
 8002840:	58020000 	.word	0x58020000

08002844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002848:	e7fe      	b.n	8002848 <NMI_Handler+0x4>

0800284a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800284a:	b480      	push	{r7}
 800284c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800284e:	e7fe      	b.n	800284e <HardFault_Handler+0x4>

08002850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002854:	e7fe      	b.n	8002854 <MemManage_Handler+0x4>

08002856 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002856:	b480      	push	{r7}
 8002858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800285a:	e7fe      	b.n	800285a <BusFault_Handler+0x4>

0800285c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002860:	e7fe      	b.n	8002860 <UsageFault_Handler+0x4>

08002862 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002862:	b480      	push	{r7}
 8002864:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002866:	bf00      	nop
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002874:	bf00      	nop
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800287e:	b480      	push	{r7}
 8002880:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002882:	bf00      	nop
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002890:	f000 f8d4 	bl	8002a3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002894:	bf00      	nop
 8002896:	bd80      	pop	{r7, pc}

08002898 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028a0:	4a14      	ldr	r2, [pc, #80]	; (80028f4 <_sbrk+0x5c>)
 80028a2:	4b15      	ldr	r3, [pc, #84]	; (80028f8 <_sbrk+0x60>)
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028ac:	4b13      	ldr	r3, [pc, #76]	; (80028fc <_sbrk+0x64>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d102      	bne.n	80028ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028b4:	4b11      	ldr	r3, [pc, #68]	; (80028fc <_sbrk+0x64>)
 80028b6:	4a12      	ldr	r2, [pc, #72]	; (8002900 <_sbrk+0x68>)
 80028b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028ba:	4b10      	ldr	r3, [pc, #64]	; (80028fc <_sbrk+0x64>)
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4413      	add	r3, r2
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d207      	bcs.n	80028d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028c8:	f003 fd32 	bl	8006330 <__errno>
 80028cc:	4603      	mov	r3, r0
 80028ce:	220c      	movs	r2, #12
 80028d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028d2:	f04f 33ff 	mov.w	r3, #4294967295
 80028d6:	e009      	b.n	80028ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028d8:	4b08      	ldr	r3, [pc, #32]	; (80028fc <_sbrk+0x64>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028de:	4b07      	ldr	r3, [pc, #28]	; (80028fc <_sbrk+0x64>)
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4413      	add	r3, r2
 80028e6:	4a05      	ldr	r2, [pc, #20]	; (80028fc <_sbrk+0x64>)
 80028e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028ea:	68fb      	ldr	r3, [r7, #12]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3718      	adds	r7, #24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	24080000 	.word	0x24080000
 80028f8:	00000400 	.word	0x00000400
 80028fc:	24000950 	.word	0x24000950
 8002900:	24000968 	.word	0x24000968

08002904 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002904:	f8df d034 	ldr.w	sp, [pc, #52]	; 800293c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002908:	f7fd fd3a 	bl	8000380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800290c:	480c      	ldr	r0, [pc, #48]	; (8002940 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800290e:	490d      	ldr	r1, [pc, #52]	; (8002944 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002910:	4a0d      	ldr	r2, [pc, #52]	; (8002948 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002912:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002914:	e002      	b.n	800291c <LoopCopyDataInit>

08002916 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002916:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002918:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800291a:	3304      	adds	r3, #4

0800291c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800291c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800291e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002920:	d3f9      	bcc.n	8002916 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002922:	4a0a      	ldr	r2, [pc, #40]	; (800294c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002924:	4c0a      	ldr	r4, [pc, #40]	; (8002950 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002926:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002928:	e001      	b.n	800292e <LoopFillZerobss>

0800292a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800292a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800292c:	3204      	adds	r2, #4

0800292e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800292e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002930:	d3fb      	bcc.n	800292a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002932:	f003 fd03 	bl	800633c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002936:	f7ff f9a1 	bl	8001c7c <main>
  bx  lr
 800293a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800293c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002940:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002944:	240001d0 	.word	0x240001d0
  ldr r2, =_sidata
 8002948:	0802a5b4 	.word	0x0802a5b4
  ldr r2, =_sbss
 800294c:	24000290 	.word	0x24000290
  ldr r4, =_ebss
 8002950:	24000968 	.word	0x24000968

08002954 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002954:	e7fe      	b.n	8002954 <ADC3_IRQHandler>
	...

08002958 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800295e:	2003      	movs	r0, #3
 8002960:	f000 f982 	bl	8002c68 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002964:	f001 ff7e 	bl	8004864 <HAL_RCC_GetSysClockFreq>
 8002968:	4602      	mov	r2, r0
 800296a:	4b15      	ldr	r3, [pc, #84]	; (80029c0 <HAL_Init+0x68>)
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	0a1b      	lsrs	r3, r3, #8
 8002970:	f003 030f 	and.w	r3, r3, #15
 8002974:	4913      	ldr	r1, [pc, #76]	; (80029c4 <HAL_Init+0x6c>)
 8002976:	5ccb      	ldrb	r3, [r1, r3]
 8002978:	f003 031f 	and.w	r3, r3, #31
 800297c:	fa22 f303 	lsr.w	r3, r2, r3
 8002980:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002982:	4b0f      	ldr	r3, [pc, #60]	; (80029c0 <HAL_Init+0x68>)
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	4a0e      	ldr	r2, [pc, #56]	; (80029c4 <HAL_Init+0x6c>)
 800298c:	5cd3      	ldrb	r3, [r2, r3]
 800298e:	f003 031f 	and.w	r3, r3, #31
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	fa22 f303 	lsr.w	r3, r2, r3
 8002998:	4a0b      	ldr	r2, [pc, #44]	; (80029c8 <HAL_Init+0x70>)
 800299a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800299c:	4a0b      	ldr	r2, [pc, #44]	; (80029cc <HAL_Init+0x74>)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029a2:	2000      	movs	r0, #0
 80029a4:	f000 f814 	bl	80029d0 <HAL_InitTick>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e002      	b.n	80029b8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80029b2:	f7ff fdd7 	bl	8002564 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	58024400 	.word	0x58024400
 80029c4:	08006dd8 	.word	0x08006dd8
 80029c8:	24000004 	.word	0x24000004
 80029cc:	24000000 	.word	0x24000000

080029d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80029d8:	4b15      	ldr	r3, [pc, #84]	; (8002a30 <HAL_InitTick+0x60>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e021      	b.n	8002a28 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80029e4:	4b13      	ldr	r3, [pc, #76]	; (8002a34 <HAL_InitTick+0x64>)
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	4b11      	ldr	r3, [pc, #68]	; (8002a30 <HAL_InitTick+0x60>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	4619      	mov	r1, r3
 80029ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80029f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 f959 	bl	8002cb2 <HAL_SYSTICK_Config>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e00e      	b.n	8002a28 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b0f      	cmp	r3, #15
 8002a0e:	d80a      	bhi.n	8002a26 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a10:	2200      	movs	r2, #0
 8002a12:	6879      	ldr	r1, [r7, #4]
 8002a14:	f04f 30ff 	mov.w	r0, #4294967295
 8002a18:	f000 f931 	bl	8002c7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a1c:	4a06      	ldr	r2, [pc, #24]	; (8002a38 <HAL_InitTick+0x68>)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	e000      	b.n	8002a28 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	24000168 	.word	0x24000168
 8002a34:	24000000 	.word	0x24000000
 8002a38:	24000164 	.word	0x24000164

08002a3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a40:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <HAL_IncTick+0x20>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	461a      	mov	r2, r3
 8002a46:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <HAL_IncTick+0x24>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	4a04      	ldr	r2, [pc, #16]	; (8002a60 <HAL_IncTick+0x24>)
 8002a4e:	6013      	str	r3, [r2, #0]
}
 8002a50:	bf00      	nop
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	24000168 	.word	0x24000168
 8002a60:	24000954 	.word	0x24000954

08002a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  return uwTick;
 8002a68:	4b03      	ldr	r3, [pc, #12]	; (8002a78 <HAL_GetTick+0x14>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	24000954 	.word	0x24000954

08002a7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a84:	f7ff ffee 	bl	8002a64 <HAL_GetTick>
 8002a88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a94:	d005      	beq.n	8002aa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a96:	4b0a      	ldr	r3, [pc, #40]	; (8002ac0 <HAL_Delay+0x44>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002aa2:	bf00      	nop
 8002aa4:	f7ff ffde 	bl	8002a64 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d8f7      	bhi.n	8002aa4 <HAL_Delay+0x28>
  {
  }
}
 8002ab4:	bf00      	nop
 8002ab6:	bf00      	nop
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	24000168 	.word	0x24000168

08002ac4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002ac8:	4b03      	ldr	r3, [pc, #12]	; (8002ad8 <HAL_GetREVID+0x14>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	0c1b      	lsrs	r3, r3, #16
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	5c001000 	.word	0x5c001000

08002adc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002ae4:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002aec:	4904      	ldr	r1, [pc, #16]	; (8002b00 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	604b      	str	r3, [r1, #4]
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	58000400 	.word	0x58000400

08002b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b14:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <__NVIC_SetPriorityGrouping+0x40>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b20:	4013      	ands	r3, r2
 8002b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b2c:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <__NVIC_SetPriorityGrouping+0x44>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b32:	4a04      	ldr	r2, [pc, #16]	; (8002b44 <__NVIC_SetPriorityGrouping+0x40>)
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	60d3      	str	r3, [r2, #12]
}
 8002b38:	bf00      	nop
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	e000ed00 	.word	0xe000ed00
 8002b48:	05fa0000 	.word	0x05fa0000

08002b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b50:	4b04      	ldr	r3, [pc, #16]	; (8002b64 <__NVIC_GetPriorityGrouping+0x18>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	0a1b      	lsrs	r3, r3, #8
 8002b56:	f003 0307 	and.w	r3, r3, #7
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	e000ed00 	.word	0xe000ed00

08002b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	6039      	str	r1, [r7, #0]
 8002b72:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	db0a      	blt.n	8002b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	b2da      	uxtb	r2, r3
 8002b80:	490c      	ldr	r1, [pc, #48]	; (8002bb4 <__NVIC_SetPriority+0x4c>)
 8002b82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b86:	0112      	lsls	r2, r2, #4
 8002b88:	b2d2      	uxtb	r2, r2
 8002b8a:	440b      	add	r3, r1
 8002b8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b90:	e00a      	b.n	8002ba8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	b2da      	uxtb	r2, r3
 8002b96:	4908      	ldr	r1, [pc, #32]	; (8002bb8 <__NVIC_SetPriority+0x50>)
 8002b98:	88fb      	ldrh	r3, [r7, #6]
 8002b9a:	f003 030f 	and.w	r3, r3, #15
 8002b9e:	3b04      	subs	r3, #4
 8002ba0:	0112      	lsls	r2, r2, #4
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	761a      	strb	r2, [r3, #24]
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	e000e100 	.word	0xe000e100
 8002bb8:	e000ed00 	.word	0xe000ed00

08002bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b089      	sub	sp, #36	; 0x24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f003 0307 	and.w	r3, r3, #7
 8002bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	f1c3 0307 	rsb	r3, r3, #7
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	bf28      	it	cs
 8002bda:	2304      	movcs	r3, #4
 8002bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	3304      	adds	r3, #4
 8002be2:	2b06      	cmp	r3, #6
 8002be4:	d902      	bls.n	8002bec <NVIC_EncodePriority+0x30>
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	3b03      	subs	r3, #3
 8002bea:	e000      	b.n	8002bee <NVIC_EncodePriority+0x32>
 8002bec:	2300      	movs	r3, #0
 8002bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	43da      	mvns	r2, r3
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	401a      	ands	r2, r3
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c04:	f04f 31ff 	mov.w	r1, #4294967295
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0e:	43d9      	mvns	r1, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c14:	4313      	orrs	r3, r2
         );
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3724      	adds	r7, #36	; 0x24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
	...

08002c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c34:	d301      	bcc.n	8002c3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c36:	2301      	movs	r3, #1
 8002c38:	e00f      	b.n	8002c5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c3a:	4a0a      	ldr	r2, [pc, #40]	; (8002c64 <SysTick_Config+0x40>)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c42:	210f      	movs	r1, #15
 8002c44:	f04f 30ff 	mov.w	r0, #4294967295
 8002c48:	f7ff ff8e 	bl	8002b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c4c:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <SysTick_Config+0x40>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c52:	4b04      	ldr	r3, [pc, #16]	; (8002c64 <SysTick_Config+0x40>)
 8002c54:	2207      	movs	r2, #7
 8002c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	e000e010 	.word	0xe000e010

08002c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f7ff ff47 	bl	8002b04 <__NVIC_SetPriorityGrouping>
}
 8002c76:	bf00      	nop
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b086      	sub	sp, #24
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	4603      	mov	r3, r0
 8002c86:	60b9      	str	r1, [r7, #8]
 8002c88:	607a      	str	r2, [r7, #4]
 8002c8a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c8c:	f7ff ff5e 	bl	8002b4c <__NVIC_GetPriorityGrouping>
 8002c90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	68b9      	ldr	r1, [r7, #8]
 8002c96:	6978      	ldr	r0, [r7, #20]
 8002c98:	f7ff ff90 	bl	8002bbc <NVIC_EncodePriority>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ca2:	4611      	mov	r1, r2
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff ff5f 	bl	8002b68 <__NVIC_SetPriority>
}
 8002caa:	bf00      	nop
 8002cac:	3718      	adds	r7, #24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b082      	sub	sp, #8
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7ff ffb2 	bl	8002c24 <SysTick_Config>
 8002cc0:	4603      	mov	r3, r0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
	...

08002ccc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e0cf      	b.n	8002e7e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d106      	bne.n	8002cf6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2223      	movs	r2, #35	; 0x23
 8002cec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f7ff fc51 	bl	8002598 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cf6:	4b64      	ldr	r3, [pc, #400]	; (8002e88 <HAL_ETH_Init+0x1bc>)
 8002cf8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002cfc:	4a62      	ldr	r2, [pc, #392]	; (8002e88 <HAL_ETH_Init+0x1bc>)
 8002cfe:	f043 0302 	orr.w	r3, r3, #2
 8002d02:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002d06:	4b60      	ldr	r3, [pc, #384]	; (8002e88 <HAL_ETH_Init+0x1bc>)
 8002d08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	60bb      	str	r3, [r7, #8]
 8002d12:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	7a1b      	ldrb	r3, [r3, #8]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d103      	bne.n	8002d24 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002d1c:	2000      	movs	r0, #0
 8002d1e:	f7ff fedd 	bl	8002adc <HAL_SYSCFG_ETHInterfaceSelect>
 8002d22:	e003      	b.n	8002d2c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002d24:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002d28:	f7ff fed8 	bl	8002adc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002d2c:	4b57      	ldr	r3, [pc, #348]	; (8002e8c <HAL_ETH_Init+0x1c0>)
 8002d2e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	6812      	ldr	r2, [r2, #0]
 8002d3e:	f043 0301 	orr.w	r3, r3, #1
 8002d42:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d46:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d48:	f7ff fe8c 	bl	8002a64 <HAL_GetTick>
 8002d4c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002d4e:	e011      	b.n	8002d74 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002d50:	f7ff fe88 	bl	8002a64 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d5e:	d909      	bls.n	8002d74 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2204      	movs	r2, #4
 8002d64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	22e0      	movs	r2, #224	; 0xe0
 8002d6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e084      	b.n	8002e7e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1e4      	bne.n	8002d50 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 f886 	bl	8002e98 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002d8c:	f001 fee4 	bl	8004b58 <HAL_RCC_GetHCLKFreq>
 8002d90:	4603      	mov	r3, r0
 8002d92:	4a3f      	ldr	r2, [pc, #252]	; (8002e90 <HAL_ETH_Init+0x1c4>)
 8002d94:	fba2 2303 	umull	r2, r3, r2, r3
 8002d98:	0c9a      	lsrs	r2, r3, #18
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	3a01      	subs	r2, #1
 8002da0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 fa71 	bl	800328c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002db2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002db6:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	6812      	ldr	r2, [r2, #0]
 8002dbe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002dc2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002dc6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	f003 0303 	and.w	r3, r3, #3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d009      	beq.n	8002dea <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	22e0      	movs	r2, #224	; 0xe0
 8002de2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e049      	b.n	8002e7e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002df2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002df6:	4b27      	ldr	r3, [pc, #156]	; (8002e94 <HAL_ETH_Init+0x1c8>)
 8002df8:	4013      	ands	r3, r2
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	6952      	ldr	r2, [r2, #20]
 8002dfe:	0051      	lsls	r1, r2, #1
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	6812      	ldr	r2, [r2, #0]
 8002e04:	430b      	orrs	r3, r1
 8002e06:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e0a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 fad9 	bl	80033c6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 fb1f 	bl	8003458 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	3305      	adds	r3, #5
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	021a      	lsls	r2, r3, #8
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	3304      	adds	r3, #4
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	3303      	adds	r3, #3
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	061a      	lsls	r2, r3, #24
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	3302      	adds	r3, #2
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	041b      	lsls	r3, r3, #16
 8002e4c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	3301      	adds	r3, #1
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002e58:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002e66:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002e68:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2210      	movs	r2, #16
 8002e78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	58024400 	.word	0x58024400
 8002e8c:	58000400 	.word	0x58000400
 8002e90:	431bde83 	.word	0x431bde83
 8002e94:	ffff8001 	.word	0xffff8001

08002e98 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ea8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002eb0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002eb2:	f001 fe51 	bl	8004b58 <HAL_RCC_GetHCLKFreq>
 8002eb6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	4a1e      	ldr	r2, [pc, #120]	; (8002f34 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d908      	bls.n	8002ed2 <HAL_ETH_SetMDIOClockRange+0x3a>
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	4a1d      	ldr	r2, [pc, #116]	; (8002f38 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d804      	bhi.n	8002ed2 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	e027      	b.n	8002f22 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	4a18      	ldr	r2, [pc, #96]	; (8002f38 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d908      	bls.n	8002eec <HAL_ETH_SetMDIOClockRange+0x54>
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	4a17      	ldr	r2, [pc, #92]	; (8002f3c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d204      	bcs.n	8002eec <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002ee8:	60fb      	str	r3, [r7, #12]
 8002eea:	e01a      	b.n	8002f22 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	4a13      	ldr	r2, [pc, #76]	; (8002f3c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d303      	bcc.n	8002efc <HAL_ETH_SetMDIOClockRange+0x64>
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	4a12      	ldr	r2, [pc, #72]	; (8002f40 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d911      	bls.n	8002f20 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	4a10      	ldr	r2, [pc, #64]	; (8002f40 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d908      	bls.n	8002f16 <HAL_ETH_SetMDIOClockRange+0x7e>
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	4a0f      	ldr	r2, [pc, #60]	; (8002f44 <HAL_ETH_SetMDIOClockRange+0xac>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d804      	bhi.n	8002f16 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	e005      	b.n	8002f22 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	e000      	b.n	8002f22 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002f20:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002f2c:	bf00      	nop
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	01312cff 	.word	0x01312cff
 8002f38:	02160ebf 	.word	0x02160ebf
 8002f3c:	03938700 	.word	0x03938700
 8002f40:	05f5e0ff 	.word	0x05f5e0ff
 8002f44:	08f0d17f 	.word	0x08f0d17f

08002f48 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002f5a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	791b      	ldrb	r3, [r3, #4]
 8002f60:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002f62:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	7b1b      	ldrb	r3, [r3, #12]
 8002f68:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002f6a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	7b5b      	ldrb	r3, [r3, #13]
 8002f70:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002f72:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	7b9b      	ldrb	r3, [r3, #14]
 8002f78:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002f7a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	7bdb      	ldrb	r3, [r3, #15]
 8002f80:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002f82:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	7c12      	ldrb	r2, [r2, #16]
 8002f88:	2a00      	cmp	r2, #0
 8002f8a:	d102      	bne.n	8002f92 <ETH_SetMACConfig+0x4a>
 8002f8c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002f90:	e000      	b.n	8002f94 <ETH_SetMACConfig+0x4c>
 8002f92:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002f94:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	7c52      	ldrb	r2, [r2, #17]
 8002f9a:	2a00      	cmp	r2, #0
 8002f9c:	d102      	bne.n	8002fa4 <ETH_SetMACConfig+0x5c>
 8002f9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002fa2:	e000      	b.n	8002fa6 <ETH_SetMACConfig+0x5e>
 8002fa4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002fa6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	7c9b      	ldrb	r3, [r3, #18]
 8002fac:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002fae:	431a      	orrs	r2, r3
               macconf->Speed |
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002fb4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002fba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	7f1b      	ldrb	r3, [r3, #28]
 8002fc0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002fc2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	7f5b      	ldrb	r3, [r3, #29]
 8002fc8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002fca:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	7f92      	ldrb	r2, [r2, #30]
 8002fd0:	2a00      	cmp	r2, #0
 8002fd2:	d102      	bne.n	8002fda <ETH_SetMACConfig+0x92>
 8002fd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fd8:	e000      	b.n	8002fdc <ETH_SetMACConfig+0x94>
 8002fda:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002fdc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	7fdb      	ldrb	r3, [r3, #31]
 8002fe2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002fe4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002fec:	2a00      	cmp	r2, #0
 8002fee:	d102      	bne.n	8002ff6 <ETH_SetMACConfig+0xae>
 8002ff0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ff4:	e000      	b.n	8002ff8 <ETH_SetMACConfig+0xb0>
 8002ff6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002ff8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002ffe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003006:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8003008:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800300e:	4313      	orrs	r3, r2
 8003010:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	4b56      	ldr	r3, [pc, #344]	; (8003174 <ETH_SetMACConfig+0x22c>)
 800301a:	4013      	ands	r3, r2
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6812      	ldr	r2, [r2, #0]
 8003020:	68f9      	ldr	r1, [r7, #12]
 8003022:	430b      	orrs	r3, r1
 8003024:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800302a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003032:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003034:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800303c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800303e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003046:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003048:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8003050:	2a00      	cmp	r2, #0
 8003052:	d102      	bne.n	800305a <ETH_SetMACConfig+0x112>
 8003054:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003058:	e000      	b.n	800305c <ETH_SetMACConfig+0x114>
 800305a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800305c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003062:	4313      	orrs	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	4b42      	ldr	r3, [pc, #264]	; (8003178 <ETH_SetMACConfig+0x230>)
 800306e:	4013      	ands	r3, r2
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	6812      	ldr	r2, [r2, #0]
 8003074:	68f9      	ldr	r1, [r7, #12]
 8003076:	430b      	orrs	r3, r1
 8003078:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003080:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003086:	4313      	orrs	r3, r2
 8003088:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68da      	ldr	r2, [r3, #12]
 8003090:	4b3a      	ldr	r3, [pc, #232]	; (800317c <ETH_SetMACConfig+0x234>)
 8003092:	4013      	ands	r3, r2
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	6812      	ldr	r2, [r2, #0]
 8003098:	68f9      	ldr	r1, [r7, #12]
 800309a:	430b      	orrs	r3, r1
 800309c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80030a4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80030aa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80030b2:	2a00      	cmp	r2, #0
 80030b4:	d101      	bne.n	80030ba <ETH_SetMACConfig+0x172>
 80030b6:	2280      	movs	r2, #128	; 0x80
 80030b8:	e000      	b.n	80030bc <ETH_SetMACConfig+0x174>
 80030ba:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80030bc:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030c2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80030c4:	4313      	orrs	r3, r2
 80030c6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80030ce:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80030d2:	4013      	ands	r3, r2
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6812      	ldr	r2, [r2, #0]
 80030d8:	68f9      	ldr	r1, [r7, #12]
 80030da:	430b      	orrs	r3, r1
 80030dc:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80030e4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80030ec:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80030ee:	4313      	orrs	r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fa:	f023 0103 	bic.w	r1, r3, #3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	430a      	orrs	r2, r1
 8003106:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8003112:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	430a      	orrs	r2, r1
 8003120:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800312e:	2a00      	cmp	r2, #0
 8003130:	d101      	bne.n	8003136 <ETH_SetMACConfig+0x1ee>
 8003132:	2240      	movs	r2, #64	; 0x40
 8003134:	e000      	b.n	8003138 <ETH_SetMACConfig+0x1f0>
 8003136:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003138:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003140:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003142:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800314a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800314c:	4313      	orrs	r3, r2
 800314e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003158:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	430a      	orrs	r2, r1
 8003164:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8003168:	bf00      	nop
 800316a:	3714      	adds	r7, #20
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	00048083 	.word	0x00048083
 8003178:	c0f88000 	.word	0xc0f88000
 800317c:	fffffef0 	.word	0xfffffef0

08003180 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	4b38      	ldr	r3, [pc, #224]	; (8003278 <ETH_SetDMAConfig+0xf8>)
 8003196:	4013      	ands	r3, r2
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	6811      	ldr	r1, [r2, #0]
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	6812      	ldr	r2, [r2, #0]
 80031a0:	430b      	orrs	r3, r1
 80031a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80031a6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	791b      	ldrb	r3, [r3, #4]
 80031ac:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80031b2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	7b1b      	ldrb	r3, [r3, #12]
 80031b8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80031ba:	4313      	orrs	r3, r2
 80031bc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	4b2c      	ldr	r3, [pc, #176]	; (800327c <ETH_SetDMAConfig+0xfc>)
 80031ca:	4013      	ands	r3, r2
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	6812      	ldr	r2, [r2, #0]
 80031d0:	68f9      	ldr	r1, [r7, #12]
 80031d2:	430b      	orrs	r3, r1
 80031d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80031d8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	7b5b      	ldrb	r3, [r3, #13]
 80031de:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80031e4:	4313      	orrs	r3, r2
 80031e6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031f0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80031f4:	4b22      	ldr	r3, [pc, #136]	; (8003280 <ETH_SetDMAConfig+0x100>)
 80031f6:	4013      	ands	r3, r2
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	6812      	ldr	r2, [r2, #0]
 80031fc:	68f9      	ldr	r1, [r7, #12]
 80031fe:	430b      	orrs	r3, r1
 8003200:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003204:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	7d1b      	ldrb	r3, [r3, #20]
 8003210:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003212:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	7f5b      	ldrb	r3, [r3, #29]
 8003218:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800321a:	4313      	orrs	r3, r2
 800321c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003226:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800322a:	4b16      	ldr	r3, [pc, #88]	; (8003284 <ETH_SetDMAConfig+0x104>)
 800322c:	4013      	ands	r3, r2
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	6812      	ldr	r2, [r2, #0]
 8003232:	68f9      	ldr	r1, [r7, #12]
 8003234:	430b      	orrs	r3, r1
 8003236:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800323a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	7f1b      	ldrb	r3, [r3, #28]
 8003242:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003248:	4313      	orrs	r3, r2
 800324a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003254:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003258:	4b0b      	ldr	r3, [pc, #44]	; (8003288 <ETH_SetDMAConfig+0x108>)
 800325a:	4013      	ands	r3, r2
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	6812      	ldr	r2, [r2, #0]
 8003260:	68f9      	ldr	r1, [r7, #12]
 8003262:	430b      	orrs	r3, r1
 8003264:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003268:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 800326c:	bf00      	nop
 800326e:	3714      	adds	r7, #20
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	ffff87fd 	.word	0xffff87fd
 800327c:	ffff2ffe 	.word	0xffff2ffe
 8003280:	fffec000 	.word	0xfffec000
 8003284:	ffc0efef 	.word	0xffc0efef
 8003288:	7fc0ffff 	.word	0x7fc0ffff

0800328c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b0a4      	sub	sp, #144	; 0x90
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003294:	2301      	movs	r3, #1
 8003296:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800329a:	2300      	movs	r3, #0
 800329c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800329e:	2300      	movs	r3, #0
 80032a0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80032a4:	2300      	movs	r3, #0
 80032a6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80032aa:	2301      	movs	r3, #1
 80032ac:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80032b0:	2301      	movs	r3, #1
 80032b2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80032b6:	2301      	movs	r3, #1
 80032b8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80032bc:	2300      	movs	r3, #0
 80032be:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80032c2:	2301      	movs	r3, #1
 80032c4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80032c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032cc:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80032ce:	2300      	movs	r3, #0
 80032d0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80032d4:	2300      	movs	r3, #0
 80032d6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80032d8:	2300      	movs	r3, #0
 80032da:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80032de:	2300      	movs	r3, #0
 80032e0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80032e4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80032e8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80032ea:	2300      	movs	r3, #0
 80032ec:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80032f0:	2300      	movs	r3, #0
 80032f2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80032f4:	2301      	movs	r3, #1
 80032f6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80032fa:	2300      	movs	r3, #0
 80032fc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003300:	2300      	movs	r3, #0
 8003302:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003306:	2300      	movs	r3, #0
 8003308:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800330a:	2300      	movs	r3, #0
 800330c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800330e:	2300      	movs	r3, #0
 8003310:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003312:	2300      	movs	r3, #0
 8003314:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003318:	2300      	movs	r3, #0
 800331a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800331e:	2301      	movs	r3, #1
 8003320:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003324:	2320      	movs	r3, #32
 8003326:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800332a:	2301      	movs	r3, #1
 800332c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003330:	2300      	movs	r3, #0
 8003332:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003336:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800333a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800333c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003340:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003342:	2300      	movs	r3, #0
 8003344:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003348:	2302      	movs	r3, #2
 800334a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800334e:	2300      	movs	r3, #0
 8003350:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003354:	2300      	movs	r3, #0
 8003356:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800335a:	2300      	movs	r3, #0
 800335c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003360:	2301      	movs	r3, #1
 8003362:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003366:	2300      	movs	r3, #0
 8003368:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800336a:	2301      	movs	r3, #1
 800336c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003370:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003374:	4619      	mov	r1, r3
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7ff fde6 	bl	8002f48 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800337c:	2301      	movs	r3, #1
 800337e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003380:	2301      	movs	r3, #1
 8003382:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003384:	2300      	movs	r3, #0
 8003386:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003388:	2300      	movs	r3, #0
 800338a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800338e:	2300      	movs	r3, #0
 8003390:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003392:	2300      	movs	r3, #0
 8003394:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003396:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800339a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800339c:	2300      	movs	r3, #0
 800339e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80033a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80033a4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80033a6:	2300      	movs	r3, #0
 80033a8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80033ac:	f44f 7306 	mov.w	r3, #536	; 0x218
 80033b0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80033b2:	f107 0308 	add.w	r3, r7, #8
 80033b6:	4619      	mov	r1, r3
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f7ff fee1 	bl	8003180 <ETH_SetDMAConfig>
}
 80033be:	bf00      	nop
 80033c0:	3790      	adds	r7, #144	; 0x90
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80033c6:	b480      	push	{r7}
 80033c8:	b085      	sub	sp, #20
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80033ce:	2300      	movs	r3, #0
 80033d0:	60fb      	str	r3, [r7, #12]
 80033d2:	e01d      	b.n	8003410 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68d9      	ldr	r1, [r3, #12]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	4613      	mov	r3, r2
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	4413      	add	r3, r2
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	440b      	add	r3, r1
 80033e4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	2200      	movs	r2, #0
 80033f0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	2200      	movs	r2, #0
 80033f6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	2200      	movs	r2, #0
 80033fc:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80033fe:	68b9      	ldr	r1, [r7, #8]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	3206      	adds	r2, #6
 8003406:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	3301      	adds	r3, #1
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2b03      	cmp	r3, #3
 8003414:	d9de      	bls.n	80033d4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003424:	461a      	mov	r2, r3
 8003426:	2303      	movs	r3, #3
 8003428:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68da      	ldr	r2, [r3, #12]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003438:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68da      	ldr	r2, [r3, #12]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003448:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800344c:	bf00      	nop
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003460:	2300      	movs	r3, #0
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	e023      	b.n	80034ae <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6919      	ldr	r1, [r3, #16]
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	4613      	mov	r3, r2
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	4413      	add	r3, r2
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	440b      	add	r3, r1
 8003476:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	2200      	movs	r2, #0
 800347c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	2200      	movs	r2, #0
 8003482:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	2200      	movs	r2, #0
 8003488:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	2200      	movs	r2, #0
 800348e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	2200      	movs	r2, #0
 8003494:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	2200      	movs	r2, #0
 800349a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800349c:	68b9      	ldr	r1, [r7, #8]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	3212      	adds	r2, #18
 80034a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	3301      	adds	r3, #1
 80034ac:	60fb      	str	r3, [r7, #12]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2b03      	cmp	r3, #3
 80034b2:	d9d8      	bls.n	8003466 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034da:	461a      	mov	r2, r3
 80034dc:	2303      	movs	r3, #3
 80034de:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	691a      	ldr	r2, [r3, #16]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034ee:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003502:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8003506:	bf00      	nop
 8003508:	3714      	adds	r7, #20
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
	...

08003514 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003514:	b480      	push	{r7}
 8003516:	b089      	sub	sp, #36	; 0x24
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800351e:	2300      	movs	r3, #0
 8003520:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003522:	4b89      	ldr	r3, [pc, #548]	; (8003748 <HAL_GPIO_Init+0x234>)
 8003524:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003526:	e194      	b.n	8003852 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	2101      	movs	r1, #1
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	fa01 f303 	lsl.w	r3, r1, r3
 8003534:	4013      	ands	r3, r2
 8003536:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	2b00      	cmp	r3, #0
 800353c:	f000 8186 	beq.w	800384c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f003 0303 	and.w	r3, r3, #3
 8003548:	2b01      	cmp	r3, #1
 800354a:	d005      	beq.n	8003558 <HAL_GPIO_Init+0x44>
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f003 0303 	and.w	r3, r3, #3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d130      	bne.n	80035ba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	2203      	movs	r2, #3
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	43db      	mvns	r3, r3
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	4013      	ands	r3, r2
 800356e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	68da      	ldr	r2, [r3, #12]
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	4313      	orrs	r3, r2
 8003580:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800358e:	2201      	movs	r2, #1
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	fa02 f303 	lsl.w	r3, r2, r3
 8003596:	43db      	mvns	r3, r3
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	4013      	ands	r3, r2
 800359c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	091b      	lsrs	r3, r3, #4
 80035a4:	f003 0201 	and.w	r2, r3, #1
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	fa02 f303 	lsl.w	r3, r2, r3
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	2b03      	cmp	r3, #3
 80035c4:	d017      	beq.n	80035f6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	2203      	movs	r2, #3
 80035d2:	fa02 f303 	lsl.w	r3, r2, r3
 80035d6:	43db      	mvns	r3, r3
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	4013      	ands	r3, r2
 80035dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	689a      	ldr	r2, [r3, #8]
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f003 0303 	and.w	r3, r3, #3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d123      	bne.n	800364a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	08da      	lsrs	r2, r3, #3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	3208      	adds	r2, #8
 800360a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800360e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	220f      	movs	r2, #15
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	43db      	mvns	r3, r3
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	4013      	ands	r3, r2
 8003624:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	691a      	ldr	r2, [r3, #16]
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	4313      	orrs	r3, r2
 800363a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	08da      	lsrs	r2, r3, #3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	3208      	adds	r2, #8
 8003644:	69b9      	ldr	r1, [r7, #24]
 8003646:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	2203      	movs	r2, #3
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	43db      	mvns	r3, r3
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	4013      	ands	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f003 0203 	and.w	r2, r3, #3
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	fa02 f303 	lsl.w	r3, r2, r3
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	4313      	orrs	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003686:	2b00      	cmp	r3, #0
 8003688:	f000 80e0 	beq.w	800384c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800368c:	4b2f      	ldr	r3, [pc, #188]	; (800374c <HAL_GPIO_Init+0x238>)
 800368e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003692:	4a2e      	ldr	r2, [pc, #184]	; (800374c <HAL_GPIO_Init+0x238>)
 8003694:	f043 0302 	orr.w	r3, r3, #2
 8003698:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800369c:	4b2b      	ldr	r3, [pc, #172]	; (800374c <HAL_GPIO_Init+0x238>)
 800369e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	60fb      	str	r3, [r7, #12]
 80036a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036aa:	4a29      	ldr	r2, [pc, #164]	; (8003750 <HAL_GPIO_Init+0x23c>)
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	089b      	lsrs	r3, r3, #2
 80036b0:	3302      	adds	r3, #2
 80036b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	f003 0303 	and.w	r3, r3, #3
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	220f      	movs	r2, #15
 80036c2:	fa02 f303 	lsl.w	r3, r2, r3
 80036c6:	43db      	mvns	r3, r3
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	4013      	ands	r3, r2
 80036cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a20      	ldr	r2, [pc, #128]	; (8003754 <HAL_GPIO_Init+0x240>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d052      	beq.n	800377c <HAL_GPIO_Init+0x268>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a1f      	ldr	r2, [pc, #124]	; (8003758 <HAL_GPIO_Init+0x244>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d031      	beq.n	8003742 <HAL_GPIO_Init+0x22e>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a1e      	ldr	r2, [pc, #120]	; (800375c <HAL_GPIO_Init+0x248>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d02b      	beq.n	800373e <HAL_GPIO_Init+0x22a>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a1d      	ldr	r2, [pc, #116]	; (8003760 <HAL_GPIO_Init+0x24c>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d025      	beq.n	800373a <HAL_GPIO_Init+0x226>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a1c      	ldr	r2, [pc, #112]	; (8003764 <HAL_GPIO_Init+0x250>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d01f      	beq.n	8003736 <HAL_GPIO_Init+0x222>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a1b      	ldr	r2, [pc, #108]	; (8003768 <HAL_GPIO_Init+0x254>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d019      	beq.n	8003732 <HAL_GPIO_Init+0x21e>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a1a      	ldr	r2, [pc, #104]	; (800376c <HAL_GPIO_Init+0x258>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d013      	beq.n	800372e <HAL_GPIO_Init+0x21a>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a19      	ldr	r2, [pc, #100]	; (8003770 <HAL_GPIO_Init+0x25c>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d00d      	beq.n	800372a <HAL_GPIO_Init+0x216>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a18      	ldr	r2, [pc, #96]	; (8003774 <HAL_GPIO_Init+0x260>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d007      	beq.n	8003726 <HAL_GPIO_Init+0x212>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a17      	ldr	r2, [pc, #92]	; (8003778 <HAL_GPIO_Init+0x264>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d101      	bne.n	8003722 <HAL_GPIO_Init+0x20e>
 800371e:	2309      	movs	r3, #9
 8003720:	e02d      	b.n	800377e <HAL_GPIO_Init+0x26a>
 8003722:	230a      	movs	r3, #10
 8003724:	e02b      	b.n	800377e <HAL_GPIO_Init+0x26a>
 8003726:	2308      	movs	r3, #8
 8003728:	e029      	b.n	800377e <HAL_GPIO_Init+0x26a>
 800372a:	2307      	movs	r3, #7
 800372c:	e027      	b.n	800377e <HAL_GPIO_Init+0x26a>
 800372e:	2306      	movs	r3, #6
 8003730:	e025      	b.n	800377e <HAL_GPIO_Init+0x26a>
 8003732:	2305      	movs	r3, #5
 8003734:	e023      	b.n	800377e <HAL_GPIO_Init+0x26a>
 8003736:	2304      	movs	r3, #4
 8003738:	e021      	b.n	800377e <HAL_GPIO_Init+0x26a>
 800373a:	2303      	movs	r3, #3
 800373c:	e01f      	b.n	800377e <HAL_GPIO_Init+0x26a>
 800373e:	2302      	movs	r3, #2
 8003740:	e01d      	b.n	800377e <HAL_GPIO_Init+0x26a>
 8003742:	2301      	movs	r3, #1
 8003744:	e01b      	b.n	800377e <HAL_GPIO_Init+0x26a>
 8003746:	bf00      	nop
 8003748:	58000080 	.word	0x58000080
 800374c:	58024400 	.word	0x58024400
 8003750:	58000400 	.word	0x58000400
 8003754:	58020000 	.word	0x58020000
 8003758:	58020400 	.word	0x58020400
 800375c:	58020800 	.word	0x58020800
 8003760:	58020c00 	.word	0x58020c00
 8003764:	58021000 	.word	0x58021000
 8003768:	58021400 	.word	0x58021400
 800376c:	58021800 	.word	0x58021800
 8003770:	58021c00 	.word	0x58021c00
 8003774:	58022000 	.word	0x58022000
 8003778:	58022400 	.word	0x58022400
 800377c:	2300      	movs	r3, #0
 800377e:	69fa      	ldr	r2, [r7, #28]
 8003780:	f002 0203 	and.w	r2, r2, #3
 8003784:	0092      	lsls	r2, r2, #2
 8003786:	4093      	lsls	r3, r2
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	4313      	orrs	r3, r2
 800378c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800378e:	4938      	ldr	r1, [pc, #224]	; (8003870 <HAL_GPIO_Init+0x35c>)
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	089b      	lsrs	r3, r3, #2
 8003794:	3302      	adds	r3, #2
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800379c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	43db      	mvns	r3, r3
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	4013      	ands	r3, r2
 80037ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	4313      	orrs	r3, r2
 80037c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80037c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80037ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	43db      	mvns	r3, r3
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	4013      	ands	r3, r2
 80037da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d003      	beq.n	80037f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80037f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	43db      	mvns	r3, r3
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	4013      	ands	r3, r2
 8003806:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	4313      	orrs	r3, r2
 800381a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	43db      	mvns	r3, r3
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	4013      	ands	r3, r2
 8003830:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	4313      	orrs	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	3301      	adds	r3, #1
 8003850:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	fa22 f303 	lsr.w	r3, r2, r3
 800385c:	2b00      	cmp	r3, #0
 800385e:	f47f ae63 	bne.w	8003528 <HAL_GPIO_Init+0x14>
  }
}
 8003862:	bf00      	nop
 8003864:	bf00      	nop
 8003866:	3724      	adds	r7, #36	; 0x24
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr
 8003870:	58000400 	.word	0x58000400

08003874 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	460b      	mov	r3, r1
 800387e:	807b      	strh	r3, [r7, #2]
 8003880:	4613      	mov	r3, r2
 8003882:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003884:	787b      	ldrb	r3, [r7, #1]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d003      	beq.n	8003892 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800388a:	887a      	ldrh	r2, [r7, #2]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003890:	e003      	b.n	800389a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003892:	887b      	ldrh	r3, [r7, #2]
 8003894:	041a      	lsls	r2, r3, #16
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	619a      	str	r2, [r3, #24]
}
 800389a:	bf00      	nop
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b085      	sub	sp, #20
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
 80038ae:	460b      	mov	r3, r1
 80038b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038b8:	887a      	ldrh	r2, [r7, #2]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	4013      	ands	r3, r2
 80038be:	041a      	lsls	r2, r3, #16
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	43d9      	mvns	r1, r3
 80038c4:	887b      	ldrh	r3, [r7, #2]
 80038c6:	400b      	ands	r3, r1
 80038c8:	431a      	orrs	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	619a      	str	r2, [r3, #24]
}
 80038ce:	bf00      	nop
 80038d0:	3714      	adds	r7, #20
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
	...

080038dc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80038e4:	4a08      	ldr	r2, [pc, #32]	; (8003908 <HAL_HSEM_FastTake+0x2c>)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	3320      	adds	r3, #32
 80038ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ee:	4a07      	ldr	r2, [pc, #28]	; (800390c <HAL_HSEM_FastTake+0x30>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d101      	bne.n	80038f8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80038f4:	2300      	movs	r3, #0
 80038f6:	e000      	b.n	80038fa <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	58026400 	.word	0x58026400
 800390c:	80000300 	.word	0x80000300

08003910 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800391a:	4906      	ldr	r1, [pc, #24]	; (8003934 <HAL_HSEM_Release+0x24>)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	58026400 	.word	0x58026400

08003938 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800393a:	b08f      	sub	sp, #60	; 0x3c
 800393c:	af0a      	add	r7, sp, #40	; 0x28
 800393e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e116      	b.n	8003b78 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b00      	cmp	r3, #0
 800395a:	d106      	bne.n	800396a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f7fe fee5 	bl	8002734 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2203      	movs	r2, #3
 800396e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397a:	2b00      	cmp	r3, #0
 800397c:	d102      	bne.n	8003984 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4618      	mov	r0, r3
 800398a:	f002 fa2d 	bl	8005de8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	603b      	str	r3, [r7, #0]
 8003994:	687e      	ldr	r6, [r7, #4]
 8003996:	466d      	mov	r5, sp
 8003998:	f106 0410 	add.w	r4, r6, #16
 800399c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800399e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80039ac:	1d33      	adds	r3, r6, #4
 80039ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039b0:	6838      	ldr	r0, [r7, #0]
 80039b2:	f002 f9ab 	bl	8005d0c <USB_CoreInit>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d005      	beq.n	80039c8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2202      	movs	r2, #2
 80039c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e0d7      	b.n	8003b78 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2100      	movs	r1, #0
 80039ce:	4618      	mov	r0, r3
 80039d0:	f002 fa1b 	bl	8005e0a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039d4:	2300      	movs	r3, #0
 80039d6:	73fb      	strb	r3, [r7, #15]
 80039d8:	e04a      	b.n	8003a70 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80039da:	7bfa      	ldrb	r2, [r7, #15]
 80039dc:	6879      	ldr	r1, [r7, #4]
 80039de:	4613      	mov	r3, r2
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	4413      	add	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	440b      	add	r3, r1
 80039e8:	333d      	adds	r3, #61	; 0x3d
 80039ea:	2201      	movs	r2, #1
 80039ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80039ee:	7bfa      	ldrb	r2, [r7, #15]
 80039f0:	6879      	ldr	r1, [r7, #4]
 80039f2:	4613      	mov	r3, r2
 80039f4:	00db      	lsls	r3, r3, #3
 80039f6:	4413      	add	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	440b      	add	r3, r1
 80039fc:	333c      	adds	r3, #60	; 0x3c
 80039fe:	7bfa      	ldrb	r2, [r7, #15]
 8003a00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a02:	7bfa      	ldrb	r2, [r7, #15]
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
 8003a06:	b298      	uxth	r0, r3
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	00db      	lsls	r3, r3, #3
 8003a0e:	4413      	add	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	440b      	add	r3, r1
 8003a14:	3344      	adds	r3, #68	; 0x44
 8003a16:	4602      	mov	r2, r0
 8003a18:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a1a:	7bfa      	ldrb	r2, [r7, #15]
 8003a1c:	6879      	ldr	r1, [r7, #4]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	00db      	lsls	r3, r3, #3
 8003a22:	4413      	add	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	440b      	add	r3, r1
 8003a28:	3340      	adds	r3, #64	; 0x40
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a2e:	7bfa      	ldrb	r2, [r7, #15]
 8003a30:	6879      	ldr	r1, [r7, #4]
 8003a32:	4613      	mov	r3, r2
 8003a34:	00db      	lsls	r3, r3, #3
 8003a36:	4413      	add	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	440b      	add	r3, r1
 8003a3c:	3348      	adds	r3, #72	; 0x48
 8003a3e:	2200      	movs	r2, #0
 8003a40:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a42:	7bfa      	ldrb	r2, [r7, #15]
 8003a44:	6879      	ldr	r1, [r7, #4]
 8003a46:	4613      	mov	r3, r2
 8003a48:	00db      	lsls	r3, r3, #3
 8003a4a:	4413      	add	r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	440b      	add	r3, r1
 8003a50:	334c      	adds	r3, #76	; 0x4c
 8003a52:	2200      	movs	r2, #0
 8003a54:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a56:	7bfa      	ldrb	r2, [r7, #15]
 8003a58:	6879      	ldr	r1, [r7, #4]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	4413      	add	r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	440b      	add	r3, r1
 8003a64:	3354      	adds	r3, #84	; 0x54
 8003a66:	2200      	movs	r2, #0
 8003a68:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a6a:	7bfb      	ldrb	r3, [r7, #15]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	73fb      	strb	r3, [r7, #15]
 8003a70:	7bfa      	ldrb	r2, [r7, #15]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d3af      	bcc.n	80039da <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	73fb      	strb	r3, [r7, #15]
 8003a7e:	e044      	b.n	8003b0a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a80:	7bfa      	ldrb	r2, [r7, #15]
 8003a82:	6879      	ldr	r1, [r7, #4]
 8003a84:	4613      	mov	r3, r2
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	4413      	add	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003a92:	2200      	movs	r2, #0
 8003a94:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a96:	7bfa      	ldrb	r2, [r7, #15]
 8003a98:	6879      	ldr	r1, [r7, #4]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	00db      	lsls	r3, r3, #3
 8003a9e:	4413      	add	r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	440b      	add	r3, r1
 8003aa4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003aa8:	7bfa      	ldrb	r2, [r7, #15]
 8003aaa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003aac:	7bfa      	ldrb	r2, [r7, #15]
 8003aae:	6879      	ldr	r1, [r7, #4]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	4413      	add	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	440b      	add	r3, r1
 8003aba:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003abe:	2200      	movs	r2, #0
 8003ac0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ac2:	7bfa      	ldrb	r2, [r7, #15]
 8003ac4:	6879      	ldr	r1, [r7, #4]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	4413      	add	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	440b      	add	r3, r1
 8003ad0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003ad8:	7bfa      	ldrb	r2, [r7, #15]
 8003ada:	6879      	ldr	r1, [r7, #4]
 8003adc:	4613      	mov	r3, r2
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	4413      	add	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	440b      	add	r3, r1
 8003ae6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003aea:	2200      	movs	r2, #0
 8003aec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003aee:	7bfa      	ldrb	r2, [r7, #15]
 8003af0:	6879      	ldr	r1, [r7, #4]
 8003af2:	4613      	mov	r3, r2
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	4413      	add	r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	440b      	add	r3, r1
 8003afc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003b00:	2200      	movs	r2, #0
 8003b02:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b04:	7bfb      	ldrb	r3, [r7, #15]
 8003b06:	3301      	adds	r3, #1
 8003b08:	73fb      	strb	r3, [r7, #15]
 8003b0a:	7bfa      	ldrb	r2, [r7, #15]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d3b5      	bcc.n	8003a80 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	603b      	str	r3, [r7, #0]
 8003b1a:	687e      	ldr	r6, [r7, #4]
 8003b1c:	466d      	mov	r5, sp
 8003b1e:	f106 0410 	add.w	r4, r6, #16
 8003b22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b2e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b32:	1d33      	adds	r3, r6, #4
 8003b34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b36:	6838      	ldr	r0, [r7, #0]
 8003b38:	f002 f9b4 	bl	8005ea4 <USB_DevInit>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d005      	beq.n	8003b4e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2202      	movs	r2, #2
 8003b46:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e014      	b.n	8003b78 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d102      	bne.n	8003b6c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f80a 	bl	8003b80 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f002 fb72 	bl	800625a <USB_DevDisconnect>

  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3714      	adds	r7, #20
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b80 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bae:	4b05      	ldr	r3, [pc, #20]	; (8003bc4 <HAL_PCDEx_ActivateLPM+0x44>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3714      	adds	r7, #20
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	10000003 	.word	0x10000003

08003bc8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003bd0:	4b29      	ldr	r3, [pc, #164]	; (8003c78 <HAL_PWREx_ConfigSupply+0xb0>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f003 0307 	and.w	r3, r3, #7
 8003bd8:	2b06      	cmp	r3, #6
 8003bda:	d00a      	beq.n	8003bf2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003bdc:	4b26      	ldr	r3, [pc, #152]	; (8003c78 <HAL_PWREx_ConfigSupply+0xb0>)
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d001      	beq.n	8003bee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e040      	b.n	8003c70 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	e03e      	b.n	8003c70 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003bf2:	4b21      	ldr	r3, [pc, #132]	; (8003c78 <HAL_PWREx_ConfigSupply+0xb0>)
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003bfa:	491f      	ldr	r1, [pc, #124]	; (8003c78 <HAL_PWREx_ConfigSupply+0xb0>)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003c02:	f7fe ff2f 	bl	8002a64 <HAL_GetTick>
 8003c06:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003c08:	e009      	b.n	8003c1e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003c0a:	f7fe ff2b 	bl	8002a64 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c18:	d901      	bls.n	8003c1e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e028      	b.n	8003c70 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003c1e:	4b16      	ldr	r3, [pc, #88]	; (8003c78 <HAL_PWREx_ConfigSupply+0xb0>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c2a:	d1ee      	bne.n	8003c0a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b1e      	cmp	r3, #30
 8003c30:	d008      	beq.n	8003c44 <HAL_PWREx_ConfigSupply+0x7c>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b2e      	cmp	r3, #46	; 0x2e
 8003c36:	d005      	beq.n	8003c44 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b1d      	cmp	r3, #29
 8003c3c:	d002      	beq.n	8003c44 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2b2d      	cmp	r3, #45	; 0x2d
 8003c42:	d114      	bne.n	8003c6e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003c44:	f7fe ff0e 	bl	8002a64 <HAL_GetTick>
 8003c48:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003c4a:	e009      	b.n	8003c60 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003c4c:	f7fe ff0a 	bl	8002a64 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c5a:	d901      	bls.n	8003c60 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e007      	b.n	8003c70 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003c60:	4b05      	ldr	r3, [pc, #20]	; (8003c78 <HAL_PWREx_ConfigSupply+0xb0>)
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c6c:	d1ee      	bne.n	8003c4c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	58024800 	.word	0x58024800

08003c7c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003c80:	4b05      	ldr	r3, [pc, #20]	; (8003c98 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	4a04      	ldr	r2, [pc, #16]	; (8003c98 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003c86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c8a:	60d3      	str	r3, [r2, #12]
}
 8003c8c:	bf00      	nop
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	58024800 	.word	0x58024800

08003c9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b08c      	sub	sp, #48	; 0x30
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d102      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	f000 bc1d 	b.w	80044ea <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 8087 	beq.w	8003dcc <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cbe:	4b99      	ldr	r3, [pc, #612]	; (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003cc8:	4b96      	ldr	r3, [pc, #600]	; (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ccc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd0:	2b10      	cmp	r3, #16
 8003cd2:	d007      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x48>
 8003cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd6:	2b18      	cmp	r3, #24
 8003cd8:	d110      	bne.n	8003cfc <HAL_RCC_OscConfig+0x60>
 8003cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cdc:	f003 0303 	and.w	r3, r3, #3
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d10b      	bne.n	8003cfc <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ce4:	4b8f      	ldr	r3, [pc, #572]	; (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d06c      	beq.n	8003dca <HAL_RCC_OscConfig+0x12e>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d168      	bne.n	8003dca <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e3f6      	b.n	80044ea <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d04:	d106      	bne.n	8003d14 <HAL_RCC_OscConfig+0x78>
 8003d06:	4b87      	ldr	r3, [pc, #540]	; (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a86      	ldr	r2, [pc, #536]	; (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d10:	6013      	str	r3, [r2, #0]
 8003d12:	e02e      	b.n	8003d72 <HAL_RCC_OscConfig+0xd6>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d10c      	bne.n	8003d36 <HAL_RCC_OscConfig+0x9a>
 8003d1c:	4b81      	ldr	r3, [pc, #516]	; (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a80      	ldr	r2, [pc, #512]	; (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003d22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d26:	6013      	str	r3, [r2, #0]
 8003d28:	4b7e      	ldr	r3, [pc, #504]	; (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a7d      	ldr	r2, [pc, #500]	; (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003d2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d32:	6013      	str	r3, [r2, #0]
 8003d34:	e01d      	b.n	8003d72 <HAL_RCC_OscConfig+0xd6>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d3e:	d10c      	bne.n	8003d5a <HAL_RCC_OscConfig+0xbe>
 8003d40:	4b78      	ldr	r3, [pc, #480]	; (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a77      	ldr	r2, [pc, #476]	; (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003d46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d4a:	6013      	str	r3, [r2, #0]
 8003d4c:	4b75      	ldr	r3, [pc, #468]	; (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a74      	ldr	r2, [pc, #464]	; (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003d52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d56:	6013      	str	r3, [r2, #0]
 8003d58:	e00b      	b.n	8003d72 <HAL_RCC_OscConfig+0xd6>
 8003d5a:	4b72      	ldr	r3, [pc, #456]	; (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a71      	ldr	r2, [pc, #452]	; (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003d60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d64:	6013      	str	r3, [r2, #0]
 8003d66:	4b6f      	ldr	r3, [pc, #444]	; (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a6e      	ldr	r2, [pc, #440]	; (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003d6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d70:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d013      	beq.n	8003da2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d7a:	f7fe fe73 	bl	8002a64 <HAL_GetTick>
 8003d7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d80:	e008      	b.n	8003d94 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d82:	f7fe fe6f 	bl	8002a64 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b64      	cmp	r3, #100	; 0x64
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e3aa      	b.n	80044ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d94:	4b63      	ldr	r3, [pc, #396]	; (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d0f0      	beq.n	8003d82 <HAL_RCC_OscConfig+0xe6>
 8003da0:	e014      	b.n	8003dcc <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da2:	f7fe fe5f 	bl	8002a64 <HAL_GetTick>
 8003da6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003da8:	e008      	b.n	8003dbc <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003daa:	f7fe fe5b 	bl	8002a64 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b64      	cmp	r3, #100	; 0x64
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e396      	b.n	80044ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003dbc:	4b59      	ldr	r3, [pc, #356]	; (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1f0      	bne.n	8003daa <HAL_RCC_OscConfig+0x10e>
 8003dc8:	e000      	b.n	8003dcc <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dca:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0302 	and.w	r3, r3, #2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f000 80cb 	beq.w	8003f70 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dda:	4b52      	ldr	r3, [pc, #328]	; (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003de2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003de4:	4b4f      	ldr	r3, [pc, #316]	; (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003dea:	6a3b      	ldr	r3, [r7, #32]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d007      	beq.n	8003e00 <HAL_RCC_OscConfig+0x164>
 8003df0:	6a3b      	ldr	r3, [r7, #32]
 8003df2:	2b18      	cmp	r3, #24
 8003df4:	d156      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x208>
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	f003 0303 	and.w	r3, r3, #3
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d151      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e00:	4b48      	ldr	r3, [pc, #288]	; (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0304 	and.w	r3, r3, #4
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d005      	beq.n	8003e18 <HAL_RCC_OscConfig+0x17c>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e368      	b.n	80044ea <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003e18:	4b42      	ldr	r3, [pc, #264]	; (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f023 0219 	bic.w	r2, r3, #25
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	493f      	ldr	r1, [pc, #252]	; (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e2a:	f7fe fe1b 	bl	8002a64 <HAL_GetTick>
 8003e2e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e30:	e008      	b.n	8003e44 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e32:	f7fe fe17 	bl	8002a64 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d901      	bls.n	8003e44 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e352      	b.n	80044ea <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e44:	4b37      	ldr	r3, [pc, #220]	; (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d0f0      	beq.n	8003e32 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e50:	f7fe fe38 	bl	8002ac4 <HAL_GetREVID>
 8003e54:	4603      	mov	r3, r0
 8003e56:	f241 0203 	movw	r2, #4099	; 0x1003
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d817      	bhi.n	8003e8e <HAL_RCC_OscConfig+0x1f2>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	2b40      	cmp	r3, #64	; 0x40
 8003e64:	d108      	bne.n	8003e78 <HAL_RCC_OscConfig+0x1dc>
 8003e66:	4b2f      	ldr	r3, [pc, #188]	; (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003e6e:	4a2d      	ldr	r2, [pc, #180]	; (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e74:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e76:	e07b      	b.n	8003f70 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e78:	4b2a      	ldr	r3, [pc, #168]	; (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	031b      	lsls	r3, r3, #12
 8003e86:	4927      	ldr	r1, [pc, #156]	; (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e8c:	e070      	b.n	8003f70 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e8e:	4b25      	ldr	r3, [pc, #148]	; (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	061b      	lsls	r3, r3, #24
 8003e9c:	4921      	ldr	r1, [pc, #132]	; (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ea2:	e065      	b.n	8003f70 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d048      	beq.n	8003f3e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003eac:	4b1d      	ldr	r3, [pc, #116]	; (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f023 0219 	bic.w	r2, r3, #25
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	491a      	ldr	r1, [pc, #104]	; (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ebe:	f7fe fdd1 	bl	8002a64 <HAL_GetTick>
 8003ec2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ec4:	e008      	b.n	8003ed8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ec6:	f7fe fdcd 	bl	8002a64 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d901      	bls.n	8003ed8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e308      	b.n	80044ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ed8:	4b12      	ldr	r3, [pc, #72]	; (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0304 	and.w	r3, r3, #4
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d0f0      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ee4:	f7fe fdee 	bl	8002ac4 <HAL_GetREVID>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	f241 0203 	movw	r2, #4099	; 0x1003
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d81a      	bhi.n	8003f28 <HAL_RCC_OscConfig+0x28c>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	2b40      	cmp	r3, #64	; 0x40
 8003ef8:	d108      	bne.n	8003f0c <HAL_RCC_OscConfig+0x270>
 8003efa:	4b0a      	ldr	r3, [pc, #40]	; (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003f02:	4a08      	ldr	r2, [pc, #32]	; (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f08:	6053      	str	r3, [r2, #4]
 8003f0a:	e031      	b.n	8003f70 <HAL_RCC_OscConfig+0x2d4>
 8003f0c:	4b05      	ldr	r3, [pc, #20]	; (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	031b      	lsls	r3, r3, #12
 8003f1a:	4902      	ldr	r1, [pc, #8]	; (8003f24 <HAL_RCC_OscConfig+0x288>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	604b      	str	r3, [r1, #4]
 8003f20:	e026      	b.n	8003f70 <HAL_RCC_OscConfig+0x2d4>
 8003f22:	bf00      	nop
 8003f24:	58024400 	.word	0x58024400
 8003f28:	4b9a      	ldr	r3, [pc, #616]	; (8004194 <HAL_RCC_OscConfig+0x4f8>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	061b      	lsls	r3, r3, #24
 8003f36:	4997      	ldr	r1, [pc, #604]	; (8004194 <HAL_RCC_OscConfig+0x4f8>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	604b      	str	r3, [r1, #4]
 8003f3c:	e018      	b.n	8003f70 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f3e:	4b95      	ldr	r3, [pc, #596]	; (8004194 <HAL_RCC_OscConfig+0x4f8>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a94      	ldr	r2, [pc, #592]	; (8004194 <HAL_RCC_OscConfig+0x4f8>)
 8003f44:	f023 0301 	bic.w	r3, r3, #1
 8003f48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4a:	f7fe fd8b 	bl	8002a64 <HAL_GetTick>
 8003f4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003f50:	e008      	b.n	8003f64 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f52:	f7fe fd87 	bl	8002a64 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e2c2      	b.n	80044ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003f64:	4b8b      	ldr	r3, [pc, #556]	; (8004194 <HAL_RCC_OscConfig+0x4f8>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1f0      	bne.n	8003f52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0310 	and.w	r3, r3, #16
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f000 80a9 	beq.w	80040d0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f7e:	4b85      	ldr	r3, [pc, #532]	; (8004194 <HAL_RCC_OscConfig+0x4f8>)
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f86:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003f88:	4b82      	ldr	r3, [pc, #520]	; (8004194 <HAL_RCC_OscConfig+0x4f8>)
 8003f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	2b08      	cmp	r3, #8
 8003f92:	d007      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x308>
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	2b18      	cmp	r3, #24
 8003f98:	d13a      	bne.n	8004010 <HAL_RCC_OscConfig+0x374>
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f003 0303 	and.w	r3, r3, #3
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d135      	bne.n	8004010 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003fa4:	4b7b      	ldr	r3, [pc, #492]	; (8004194 <HAL_RCC_OscConfig+0x4f8>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d005      	beq.n	8003fbc <HAL_RCC_OscConfig+0x320>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	69db      	ldr	r3, [r3, #28]
 8003fb4:	2b80      	cmp	r3, #128	; 0x80
 8003fb6:	d001      	beq.n	8003fbc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e296      	b.n	80044ea <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003fbc:	f7fe fd82 	bl	8002ac4 <HAL_GetREVID>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	f241 0203 	movw	r2, #4099	; 0x1003
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d817      	bhi.n	8003ffa <HAL_RCC_OscConfig+0x35e>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	2b20      	cmp	r3, #32
 8003fd0:	d108      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x348>
 8003fd2:	4b70      	ldr	r3, [pc, #448]	; (8004194 <HAL_RCC_OscConfig+0x4f8>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003fda:	4a6e      	ldr	r2, [pc, #440]	; (8004194 <HAL_RCC_OscConfig+0x4f8>)
 8003fdc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003fe0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003fe2:	e075      	b.n	80040d0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003fe4:	4b6b      	ldr	r3, [pc, #428]	; (8004194 <HAL_RCC_OscConfig+0x4f8>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	069b      	lsls	r3, r3, #26
 8003ff2:	4968      	ldr	r1, [pc, #416]	; (8004194 <HAL_RCC_OscConfig+0x4f8>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ff8:	e06a      	b.n	80040d0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ffa:	4b66      	ldr	r3, [pc, #408]	; (8004194 <HAL_RCC_OscConfig+0x4f8>)
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	061b      	lsls	r3, r3, #24
 8004008:	4962      	ldr	r1, [pc, #392]	; (8004194 <HAL_RCC_OscConfig+0x4f8>)
 800400a:	4313      	orrs	r3, r2
 800400c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800400e:	e05f      	b.n	80040d0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	69db      	ldr	r3, [r3, #28]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d042      	beq.n	800409e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004018:	4b5e      	ldr	r3, [pc, #376]	; (8004194 <HAL_RCC_OscConfig+0x4f8>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a5d      	ldr	r2, [pc, #372]	; (8004194 <HAL_RCC_OscConfig+0x4f8>)
 800401e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004022:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004024:	f7fe fd1e 	bl	8002a64 <HAL_GetTick>
 8004028:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800402c:	f7fe fd1a 	bl	8002a64 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e255      	b.n	80044ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800403e:	4b55      	ldr	r3, [pc, #340]	; (8004194 <HAL_RCC_OscConfig+0x4f8>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0f0      	beq.n	800402c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800404a:	f7fe fd3b 	bl	8002ac4 <HAL_GetREVID>
 800404e:	4603      	mov	r3, r0
 8004050:	f241 0203 	movw	r2, #4099	; 0x1003
 8004054:	4293      	cmp	r3, r2
 8004056:	d817      	bhi.n	8004088 <HAL_RCC_OscConfig+0x3ec>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	2b20      	cmp	r3, #32
 800405e:	d108      	bne.n	8004072 <HAL_RCC_OscConfig+0x3d6>
 8004060:	4b4c      	ldr	r3, [pc, #304]	; (8004194 <HAL_RCC_OscConfig+0x4f8>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004068:	4a4a      	ldr	r2, [pc, #296]	; (8004194 <HAL_RCC_OscConfig+0x4f8>)
 800406a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800406e:	6053      	str	r3, [r2, #4]
 8004070:	e02e      	b.n	80040d0 <HAL_RCC_OscConfig+0x434>
 8004072:	4b48      	ldr	r3, [pc, #288]	; (8004194 <HAL_RCC_OscConfig+0x4f8>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	069b      	lsls	r3, r3, #26
 8004080:	4944      	ldr	r1, [pc, #272]	; (8004194 <HAL_RCC_OscConfig+0x4f8>)
 8004082:	4313      	orrs	r3, r2
 8004084:	604b      	str	r3, [r1, #4]
 8004086:	e023      	b.n	80040d0 <HAL_RCC_OscConfig+0x434>
 8004088:	4b42      	ldr	r3, [pc, #264]	; (8004194 <HAL_RCC_OscConfig+0x4f8>)
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	061b      	lsls	r3, r3, #24
 8004096:	493f      	ldr	r1, [pc, #252]	; (8004194 <HAL_RCC_OscConfig+0x4f8>)
 8004098:	4313      	orrs	r3, r2
 800409a:	60cb      	str	r3, [r1, #12]
 800409c:	e018      	b.n	80040d0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800409e:	4b3d      	ldr	r3, [pc, #244]	; (8004194 <HAL_RCC_OscConfig+0x4f8>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a3c      	ldr	r2, [pc, #240]	; (8004194 <HAL_RCC_OscConfig+0x4f8>)
 80040a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040aa:	f7fe fcdb 	bl	8002a64 <HAL_GetTick>
 80040ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80040b0:	e008      	b.n	80040c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80040b2:	f7fe fcd7 	bl	8002a64 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d901      	bls.n	80040c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e212      	b.n	80044ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80040c4:	4b33      	ldr	r3, [pc, #204]	; (8004194 <HAL_RCC_OscConfig+0x4f8>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1f0      	bne.n	80040b2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0308 	and.w	r3, r3, #8
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d036      	beq.n	800414a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d019      	beq.n	8004118 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040e4:	4b2b      	ldr	r3, [pc, #172]	; (8004194 <HAL_RCC_OscConfig+0x4f8>)
 80040e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040e8:	4a2a      	ldr	r2, [pc, #168]	; (8004194 <HAL_RCC_OscConfig+0x4f8>)
 80040ea:	f043 0301 	orr.w	r3, r3, #1
 80040ee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f0:	f7fe fcb8 	bl	8002a64 <HAL_GetTick>
 80040f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80040f6:	e008      	b.n	800410a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040f8:	f7fe fcb4 	bl	8002a64 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e1ef      	b.n	80044ea <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800410a:	4b22      	ldr	r3, [pc, #136]	; (8004194 <HAL_RCC_OscConfig+0x4f8>)
 800410c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d0f0      	beq.n	80040f8 <HAL_RCC_OscConfig+0x45c>
 8004116:	e018      	b.n	800414a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004118:	4b1e      	ldr	r3, [pc, #120]	; (8004194 <HAL_RCC_OscConfig+0x4f8>)
 800411a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800411c:	4a1d      	ldr	r2, [pc, #116]	; (8004194 <HAL_RCC_OscConfig+0x4f8>)
 800411e:	f023 0301 	bic.w	r3, r3, #1
 8004122:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004124:	f7fe fc9e 	bl	8002a64 <HAL_GetTick>
 8004128:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800412c:	f7fe fc9a 	bl	8002a64 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e1d5      	b.n	80044ea <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800413e:	4b15      	ldr	r3, [pc, #84]	; (8004194 <HAL_RCC_OscConfig+0x4f8>)
 8004140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1f0      	bne.n	800412c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0320 	and.w	r3, r3, #32
 8004152:	2b00      	cmp	r3, #0
 8004154:	d039      	beq.n	80041ca <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d01c      	beq.n	8004198 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800415e:	4b0d      	ldr	r3, [pc, #52]	; (8004194 <HAL_RCC_OscConfig+0x4f8>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a0c      	ldr	r2, [pc, #48]	; (8004194 <HAL_RCC_OscConfig+0x4f8>)
 8004164:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004168:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800416a:	f7fe fc7b 	bl	8002a64 <HAL_GetTick>
 800416e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004170:	e008      	b.n	8004184 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004172:	f7fe fc77 	bl	8002a64 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b02      	cmp	r3, #2
 800417e:	d901      	bls.n	8004184 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e1b2      	b.n	80044ea <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004184:	4b03      	ldr	r3, [pc, #12]	; (8004194 <HAL_RCC_OscConfig+0x4f8>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d0f0      	beq.n	8004172 <HAL_RCC_OscConfig+0x4d6>
 8004190:	e01b      	b.n	80041ca <HAL_RCC_OscConfig+0x52e>
 8004192:	bf00      	nop
 8004194:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004198:	4b9b      	ldr	r3, [pc, #620]	; (8004408 <HAL_RCC_OscConfig+0x76c>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a9a      	ldr	r2, [pc, #616]	; (8004408 <HAL_RCC_OscConfig+0x76c>)
 800419e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041a2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80041a4:	f7fe fc5e 	bl	8002a64 <HAL_GetTick>
 80041a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80041aa:	e008      	b.n	80041be <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80041ac:	f7fe fc5a 	bl	8002a64 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e195      	b.n	80044ea <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80041be:	4b92      	ldr	r3, [pc, #584]	; (8004408 <HAL_RCC_OscConfig+0x76c>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1f0      	bne.n	80041ac <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0304 	and.w	r3, r3, #4
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	f000 8081 	beq.w	80042da <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80041d8:	4b8c      	ldr	r3, [pc, #560]	; (800440c <HAL_RCC_OscConfig+0x770>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a8b      	ldr	r2, [pc, #556]	; (800440c <HAL_RCC_OscConfig+0x770>)
 80041de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041e4:	f7fe fc3e 	bl	8002a64 <HAL_GetTick>
 80041e8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041ea:	e008      	b.n	80041fe <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80041ec:	f7fe fc3a 	bl	8002a64 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b64      	cmp	r3, #100	; 0x64
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e175      	b.n	80044ea <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041fe:	4b83      	ldr	r3, [pc, #524]	; (800440c <HAL_RCC_OscConfig+0x770>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004206:	2b00      	cmp	r3, #0
 8004208:	d0f0      	beq.n	80041ec <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d106      	bne.n	8004220 <HAL_RCC_OscConfig+0x584>
 8004212:	4b7d      	ldr	r3, [pc, #500]	; (8004408 <HAL_RCC_OscConfig+0x76c>)
 8004214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004216:	4a7c      	ldr	r2, [pc, #496]	; (8004408 <HAL_RCC_OscConfig+0x76c>)
 8004218:	f043 0301 	orr.w	r3, r3, #1
 800421c:	6713      	str	r3, [r2, #112]	; 0x70
 800421e:	e02d      	b.n	800427c <HAL_RCC_OscConfig+0x5e0>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10c      	bne.n	8004242 <HAL_RCC_OscConfig+0x5a6>
 8004228:	4b77      	ldr	r3, [pc, #476]	; (8004408 <HAL_RCC_OscConfig+0x76c>)
 800422a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422c:	4a76      	ldr	r2, [pc, #472]	; (8004408 <HAL_RCC_OscConfig+0x76c>)
 800422e:	f023 0301 	bic.w	r3, r3, #1
 8004232:	6713      	str	r3, [r2, #112]	; 0x70
 8004234:	4b74      	ldr	r3, [pc, #464]	; (8004408 <HAL_RCC_OscConfig+0x76c>)
 8004236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004238:	4a73      	ldr	r2, [pc, #460]	; (8004408 <HAL_RCC_OscConfig+0x76c>)
 800423a:	f023 0304 	bic.w	r3, r3, #4
 800423e:	6713      	str	r3, [r2, #112]	; 0x70
 8004240:	e01c      	b.n	800427c <HAL_RCC_OscConfig+0x5e0>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	2b05      	cmp	r3, #5
 8004248:	d10c      	bne.n	8004264 <HAL_RCC_OscConfig+0x5c8>
 800424a:	4b6f      	ldr	r3, [pc, #444]	; (8004408 <HAL_RCC_OscConfig+0x76c>)
 800424c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424e:	4a6e      	ldr	r2, [pc, #440]	; (8004408 <HAL_RCC_OscConfig+0x76c>)
 8004250:	f043 0304 	orr.w	r3, r3, #4
 8004254:	6713      	str	r3, [r2, #112]	; 0x70
 8004256:	4b6c      	ldr	r3, [pc, #432]	; (8004408 <HAL_RCC_OscConfig+0x76c>)
 8004258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425a:	4a6b      	ldr	r2, [pc, #428]	; (8004408 <HAL_RCC_OscConfig+0x76c>)
 800425c:	f043 0301 	orr.w	r3, r3, #1
 8004260:	6713      	str	r3, [r2, #112]	; 0x70
 8004262:	e00b      	b.n	800427c <HAL_RCC_OscConfig+0x5e0>
 8004264:	4b68      	ldr	r3, [pc, #416]	; (8004408 <HAL_RCC_OscConfig+0x76c>)
 8004266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004268:	4a67      	ldr	r2, [pc, #412]	; (8004408 <HAL_RCC_OscConfig+0x76c>)
 800426a:	f023 0301 	bic.w	r3, r3, #1
 800426e:	6713      	str	r3, [r2, #112]	; 0x70
 8004270:	4b65      	ldr	r3, [pc, #404]	; (8004408 <HAL_RCC_OscConfig+0x76c>)
 8004272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004274:	4a64      	ldr	r2, [pc, #400]	; (8004408 <HAL_RCC_OscConfig+0x76c>)
 8004276:	f023 0304 	bic.w	r3, r3, #4
 800427a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d015      	beq.n	80042b0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004284:	f7fe fbee 	bl	8002a64 <HAL_GetTick>
 8004288:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800428a:	e00a      	b.n	80042a2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800428c:	f7fe fbea 	bl	8002a64 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	f241 3288 	movw	r2, #5000	; 0x1388
 800429a:	4293      	cmp	r3, r2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e123      	b.n	80044ea <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042a2:	4b59      	ldr	r3, [pc, #356]	; (8004408 <HAL_RCC_OscConfig+0x76c>)
 80042a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d0ee      	beq.n	800428c <HAL_RCC_OscConfig+0x5f0>
 80042ae:	e014      	b.n	80042da <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b0:	f7fe fbd8 	bl	8002a64 <HAL_GetTick>
 80042b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042b6:	e00a      	b.n	80042ce <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042b8:	f7fe fbd4 	bl	8002a64 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e10d      	b.n	80044ea <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042ce:	4b4e      	ldr	r3, [pc, #312]	; (8004408 <HAL_RCC_OscConfig+0x76c>)
 80042d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1ee      	bne.n	80042b8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f000 8102 	beq.w	80044e8 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80042e4:	4b48      	ldr	r3, [pc, #288]	; (8004408 <HAL_RCC_OscConfig+0x76c>)
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042ec:	2b18      	cmp	r3, #24
 80042ee:	f000 80bd 	beq.w	800446c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	f040 809e 	bne.w	8004438 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042fc:	4b42      	ldr	r3, [pc, #264]	; (8004408 <HAL_RCC_OscConfig+0x76c>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a41      	ldr	r2, [pc, #260]	; (8004408 <HAL_RCC_OscConfig+0x76c>)
 8004302:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004306:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004308:	f7fe fbac 	bl	8002a64 <HAL_GetTick>
 800430c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004310:	f7fe fba8 	bl	8002a64 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b02      	cmp	r3, #2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e0e3      	b.n	80044ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004322:	4b39      	ldr	r3, [pc, #228]	; (8004408 <HAL_RCC_OscConfig+0x76c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1f0      	bne.n	8004310 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800432e:	4b36      	ldr	r3, [pc, #216]	; (8004408 <HAL_RCC_OscConfig+0x76c>)
 8004330:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004332:	4b37      	ldr	r3, [pc, #220]	; (8004410 <HAL_RCC_OscConfig+0x774>)
 8004334:	4013      	ands	r3, r2
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800433e:	0112      	lsls	r2, r2, #4
 8004340:	430a      	orrs	r2, r1
 8004342:	4931      	ldr	r1, [pc, #196]	; (8004408 <HAL_RCC_OscConfig+0x76c>)
 8004344:	4313      	orrs	r3, r2
 8004346:	628b      	str	r3, [r1, #40]	; 0x28
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434c:	3b01      	subs	r3, #1
 800434e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004356:	3b01      	subs	r3, #1
 8004358:	025b      	lsls	r3, r3, #9
 800435a:	b29b      	uxth	r3, r3
 800435c:	431a      	orrs	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004362:	3b01      	subs	r3, #1
 8004364:	041b      	lsls	r3, r3, #16
 8004366:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800436a:	431a      	orrs	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004370:	3b01      	subs	r3, #1
 8004372:	061b      	lsls	r3, r3, #24
 8004374:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004378:	4923      	ldr	r1, [pc, #140]	; (8004408 <HAL_RCC_OscConfig+0x76c>)
 800437a:	4313      	orrs	r3, r2
 800437c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800437e:	4b22      	ldr	r3, [pc, #136]	; (8004408 <HAL_RCC_OscConfig+0x76c>)
 8004380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004382:	4a21      	ldr	r2, [pc, #132]	; (8004408 <HAL_RCC_OscConfig+0x76c>)
 8004384:	f023 0301 	bic.w	r3, r3, #1
 8004388:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800438a:	4b1f      	ldr	r3, [pc, #124]	; (8004408 <HAL_RCC_OscConfig+0x76c>)
 800438c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800438e:	4b21      	ldr	r3, [pc, #132]	; (8004414 <HAL_RCC_OscConfig+0x778>)
 8004390:	4013      	ands	r3, r2
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004396:	00d2      	lsls	r2, r2, #3
 8004398:	491b      	ldr	r1, [pc, #108]	; (8004408 <HAL_RCC_OscConfig+0x76c>)
 800439a:	4313      	orrs	r3, r2
 800439c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800439e:	4b1a      	ldr	r3, [pc, #104]	; (8004408 <HAL_RCC_OscConfig+0x76c>)
 80043a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a2:	f023 020c 	bic.w	r2, r3, #12
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	4917      	ldr	r1, [pc, #92]	; (8004408 <HAL_RCC_OscConfig+0x76c>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80043b0:	4b15      	ldr	r3, [pc, #84]	; (8004408 <HAL_RCC_OscConfig+0x76c>)
 80043b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b4:	f023 0202 	bic.w	r2, r3, #2
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043bc:	4912      	ldr	r1, [pc, #72]	; (8004408 <HAL_RCC_OscConfig+0x76c>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80043c2:	4b11      	ldr	r3, [pc, #68]	; (8004408 <HAL_RCC_OscConfig+0x76c>)
 80043c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c6:	4a10      	ldr	r2, [pc, #64]	; (8004408 <HAL_RCC_OscConfig+0x76c>)
 80043c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043ce:	4b0e      	ldr	r3, [pc, #56]	; (8004408 <HAL_RCC_OscConfig+0x76c>)
 80043d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d2:	4a0d      	ldr	r2, [pc, #52]	; (8004408 <HAL_RCC_OscConfig+0x76c>)
 80043d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80043da:	4b0b      	ldr	r3, [pc, #44]	; (8004408 <HAL_RCC_OscConfig+0x76c>)
 80043dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043de:	4a0a      	ldr	r2, [pc, #40]	; (8004408 <HAL_RCC_OscConfig+0x76c>)
 80043e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80043e6:	4b08      	ldr	r3, [pc, #32]	; (8004408 <HAL_RCC_OscConfig+0x76c>)
 80043e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ea:	4a07      	ldr	r2, [pc, #28]	; (8004408 <HAL_RCC_OscConfig+0x76c>)
 80043ec:	f043 0301 	orr.w	r3, r3, #1
 80043f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043f2:	4b05      	ldr	r3, [pc, #20]	; (8004408 <HAL_RCC_OscConfig+0x76c>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a04      	ldr	r2, [pc, #16]	; (8004408 <HAL_RCC_OscConfig+0x76c>)
 80043f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fe:	f7fe fb31 	bl	8002a64 <HAL_GetTick>
 8004402:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004404:	e011      	b.n	800442a <HAL_RCC_OscConfig+0x78e>
 8004406:	bf00      	nop
 8004408:	58024400 	.word	0x58024400
 800440c:	58024800 	.word	0x58024800
 8004410:	fffffc0c 	.word	0xfffffc0c
 8004414:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004418:	f7fe fb24 	bl	8002a64 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b02      	cmp	r3, #2
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e05f      	b.n	80044ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800442a:	4b32      	ldr	r3, [pc, #200]	; (80044f4 <HAL_RCC_OscConfig+0x858>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d0f0      	beq.n	8004418 <HAL_RCC_OscConfig+0x77c>
 8004436:	e057      	b.n	80044e8 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004438:	4b2e      	ldr	r3, [pc, #184]	; (80044f4 <HAL_RCC_OscConfig+0x858>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a2d      	ldr	r2, [pc, #180]	; (80044f4 <HAL_RCC_OscConfig+0x858>)
 800443e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004442:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004444:	f7fe fb0e 	bl	8002a64 <HAL_GetTick>
 8004448:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800444a:	e008      	b.n	800445e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800444c:	f7fe fb0a 	bl	8002a64 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e045      	b.n	80044ea <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800445e:	4b25      	ldr	r3, [pc, #148]	; (80044f4 <HAL_RCC_OscConfig+0x858>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1f0      	bne.n	800444c <HAL_RCC_OscConfig+0x7b0>
 800446a:	e03d      	b.n	80044e8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800446c:	4b21      	ldr	r3, [pc, #132]	; (80044f4 <HAL_RCC_OscConfig+0x858>)
 800446e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004470:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004472:	4b20      	ldr	r3, [pc, #128]	; (80044f4 <HAL_RCC_OscConfig+0x858>)
 8004474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004476:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	2b01      	cmp	r3, #1
 800447e:	d031      	beq.n	80044e4 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	f003 0203 	and.w	r2, r3, #3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800448a:	429a      	cmp	r2, r3
 800448c:	d12a      	bne.n	80044e4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	091b      	lsrs	r3, r3, #4
 8004492:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800449a:	429a      	cmp	r2, r3
 800449c:	d122      	bne.n	80044e4 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d11a      	bne.n	80044e4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	0a5b      	lsrs	r3, r3, #9
 80044b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ba:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80044bc:	429a      	cmp	r2, r3
 80044be:	d111      	bne.n	80044e4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	0c1b      	lsrs	r3, r3, #16
 80044c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044cc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d108      	bne.n	80044e4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	0e1b      	lsrs	r3, r3, #24
 80044d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044de:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d001      	beq.n	80044e8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e000      	b.n	80044ea <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3730      	adds	r7, #48	; 0x30
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	58024400 	.word	0x58024400

080044f8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b086      	sub	sp, #24
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d101      	bne.n	800450c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e19c      	b.n	8004846 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800450c:	4b8a      	ldr	r3, [pc, #552]	; (8004738 <HAL_RCC_ClockConfig+0x240>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 030f 	and.w	r3, r3, #15
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	429a      	cmp	r2, r3
 8004518:	d910      	bls.n	800453c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800451a:	4b87      	ldr	r3, [pc, #540]	; (8004738 <HAL_RCC_ClockConfig+0x240>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f023 020f 	bic.w	r2, r3, #15
 8004522:	4985      	ldr	r1, [pc, #532]	; (8004738 <HAL_RCC_ClockConfig+0x240>)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	4313      	orrs	r3, r2
 8004528:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800452a:	4b83      	ldr	r3, [pc, #524]	; (8004738 <HAL_RCC_ClockConfig+0x240>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 030f 	and.w	r3, r3, #15
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	429a      	cmp	r2, r3
 8004536:	d001      	beq.n	800453c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e184      	b.n	8004846 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b00      	cmp	r3, #0
 8004546:	d010      	beq.n	800456a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	691a      	ldr	r2, [r3, #16]
 800454c:	4b7b      	ldr	r3, [pc, #492]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004554:	429a      	cmp	r2, r3
 8004556:	d908      	bls.n	800456a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004558:	4b78      	ldr	r3, [pc, #480]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	4975      	ldr	r1, [pc, #468]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 8004566:	4313      	orrs	r3, r2
 8004568:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0308 	and.w	r3, r3, #8
 8004572:	2b00      	cmp	r3, #0
 8004574:	d010      	beq.n	8004598 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	695a      	ldr	r2, [r3, #20]
 800457a:	4b70      	ldr	r3, [pc, #448]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004582:	429a      	cmp	r2, r3
 8004584:	d908      	bls.n	8004598 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004586:	4b6d      	ldr	r3, [pc, #436]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	496a      	ldr	r1, [pc, #424]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 8004594:	4313      	orrs	r3, r2
 8004596:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0310 	and.w	r3, r3, #16
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d010      	beq.n	80045c6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	699a      	ldr	r2, [r3, #24]
 80045a8:	4b64      	ldr	r3, [pc, #400]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 80045aa:	69db      	ldr	r3, [r3, #28]
 80045ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d908      	bls.n	80045c6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80045b4:	4b61      	ldr	r3, [pc, #388]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 80045b6:	69db      	ldr	r3, [r3, #28]
 80045b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	495e      	ldr	r1, [pc, #376]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0320 	and.w	r3, r3, #32
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d010      	beq.n	80045f4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	69da      	ldr	r2, [r3, #28]
 80045d6:	4b59      	ldr	r3, [pc, #356]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045de:	429a      	cmp	r2, r3
 80045e0:	d908      	bls.n	80045f4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80045e2:	4b56      	ldr	r3, [pc, #344]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	4953      	ldr	r1, [pc, #332]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d010      	beq.n	8004622 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	68da      	ldr	r2, [r3, #12]
 8004604:	4b4d      	ldr	r3, [pc, #308]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	f003 030f 	and.w	r3, r3, #15
 800460c:	429a      	cmp	r2, r3
 800460e:	d908      	bls.n	8004622 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004610:	4b4a      	ldr	r3, [pc, #296]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 8004612:	699b      	ldr	r3, [r3, #24]
 8004614:	f023 020f 	bic.w	r2, r3, #15
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	4947      	ldr	r1, [pc, #284]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 800461e:	4313      	orrs	r3, r2
 8004620:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b00      	cmp	r3, #0
 800462c:	d055      	beq.n	80046da <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800462e:	4b43      	ldr	r3, [pc, #268]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	4940      	ldr	r1, [pc, #256]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 800463c:	4313      	orrs	r3, r2
 800463e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	2b02      	cmp	r3, #2
 8004646:	d107      	bne.n	8004658 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004648:	4b3c      	ldr	r3, [pc, #240]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d121      	bne.n	8004698 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e0f6      	b.n	8004846 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	2b03      	cmp	r3, #3
 800465e:	d107      	bne.n	8004670 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004660:	4b36      	ldr	r3, [pc, #216]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d115      	bne.n	8004698 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e0ea      	b.n	8004846 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d107      	bne.n	8004688 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004678:	4b30      	ldr	r3, [pc, #192]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004680:	2b00      	cmp	r3, #0
 8004682:	d109      	bne.n	8004698 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e0de      	b.n	8004846 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004688:	4b2c      	ldr	r3, [pc, #176]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0304 	and.w	r3, r3, #4
 8004690:	2b00      	cmp	r3, #0
 8004692:	d101      	bne.n	8004698 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e0d6      	b.n	8004846 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004698:	4b28      	ldr	r3, [pc, #160]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	f023 0207 	bic.w	r2, r3, #7
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	4925      	ldr	r1, [pc, #148]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046aa:	f7fe f9db 	bl	8002a64 <HAL_GetTick>
 80046ae:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046b0:	e00a      	b.n	80046c8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046b2:	f7fe f9d7 	bl	8002a64 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d901      	bls.n	80046c8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e0be      	b.n	8004846 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046c8:	4b1c      	ldr	r3, [pc, #112]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	00db      	lsls	r3, r3, #3
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d1eb      	bne.n	80046b2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d010      	beq.n	8004708 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68da      	ldr	r2, [r3, #12]
 80046ea:	4b14      	ldr	r3, [pc, #80]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	f003 030f 	and.w	r3, r3, #15
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d208      	bcs.n	8004708 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046f6:	4b11      	ldr	r3, [pc, #68]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	f023 020f 	bic.w	r2, r3, #15
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	490e      	ldr	r1, [pc, #56]	; (800473c <HAL_RCC_ClockConfig+0x244>)
 8004704:	4313      	orrs	r3, r2
 8004706:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004708:	4b0b      	ldr	r3, [pc, #44]	; (8004738 <HAL_RCC_ClockConfig+0x240>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 030f 	and.w	r3, r3, #15
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	429a      	cmp	r2, r3
 8004714:	d214      	bcs.n	8004740 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004716:	4b08      	ldr	r3, [pc, #32]	; (8004738 <HAL_RCC_ClockConfig+0x240>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f023 020f 	bic.w	r2, r3, #15
 800471e:	4906      	ldr	r1, [pc, #24]	; (8004738 <HAL_RCC_ClockConfig+0x240>)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	4313      	orrs	r3, r2
 8004724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004726:	4b04      	ldr	r3, [pc, #16]	; (8004738 <HAL_RCC_ClockConfig+0x240>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 030f 	and.w	r3, r3, #15
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	429a      	cmp	r2, r3
 8004732:	d005      	beq.n	8004740 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e086      	b.n	8004846 <HAL_RCC_ClockConfig+0x34e>
 8004738:	52002000 	.word	0x52002000
 800473c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0304 	and.w	r3, r3, #4
 8004748:	2b00      	cmp	r3, #0
 800474a:	d010      	beq.n	800476e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	691a      	ldr	r2, [r3, #16]
 8004750:	4b3f      	ldr	r3, [pc, #252]	; (8004850 <HAL_RCC_ClockConfig+0x358>)
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004758:	429a      	cmp	r2, r3
 800475a:	d208      	bcs.n	800476e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800475c:	4b3c      	ldr	r3, [pc, #240]	; (8004850 <HAL_RCC_ClockConfig+0x358>)
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	4939      	ldr	r1, [pc, #228]	; (8004850 <HAL_RCC_ClockConfig+0x358>)
 800476a:	4313      	orrs	r3, r2
 800476c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0308 	and.w	r3, r3, #8
 8004776:	2b00      	cmp	r3, #0
 8004778:	d010      	beq.n	800479c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	695a      	ldr	r2, [r3, #20]
 800477e:	4b34      	ldr	r3, [pc, #208]	; (8004850 <HAL_RCC_ClockConfig+0x358>)
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004786:	429a      	cmp	r2, r3
 8004788:	d208      	bcs.n	800479c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800478a:	4b31      	ldr	r3, [pc, #196]	; (8004850 <HAL_RCC_ClockConfig+0x358>)
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	492e      	ldr	r1, [pc, #184]	; (8004850 <HAL_RCC_ClockConfig+0x358>)
 8004798:	4313      	orrs	r3, r2
 800479a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0310 	and.w	r3, r3, #16
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d010      	beq.n	80047ca <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	699a      	ldr	r2, [r3, #24]
 80047ac:	4b28      	ldr	r3, [pc, #160]	; (8004850 <HAL_RCC_ClockConfig+0x358>)
 80047ae:	69db      	ldr	r3, [r3, #28]
 80047b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d208      	bcs.n	80047ca <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80047b8:	4b25      	ldr	r3, [pc, #148]	; (8004850 <HAL_RCC_ClockConfig+0x358>)
 80047ba:	69db      	ldr	r3, [r3, #28]
 80047bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	4922      	ldr	r1, [pc, #136]	; (8004850 <HAL_RCC_ClockConfig+0x358>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0320 	and.w	r3, r3, #32
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d010      	beq.n	80047f8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	69da      	ldr	r2, [r3, #28]
 80047da:	4b1d      	ldr	r3, [pc, #116]	; (8004850 <HAL_RCC_ClockConfig+0x358>)
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d208      	bcs.n	80047f8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80047e6:	4b1a      	ldr	r3, [pc, #104]	; (8004850 <HAL_RCC_ClockConfig+0x358>)
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	4917      	ldr	r1, [pc, #92]	; (8004850 <HAL_RCC_ClockConfig+0x358>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80047f8:	f000 f834 	bl	8004864 <HAL_RCC_GetSysClockFreq>
 80047fc:	4602      	mov	r2, r0
 80047fe:	4b14      	ldr	r3, [pc, #80]	; (8004850 <HAL_RCC_ClockConfig+0x358>)
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	0a1b      	lsrs	r3, r3, #8
 8004804:	f003 030f 	and.w	r3, r3, #15
 8004808:	4912      	ldr	r1, [pc, #72]	; (8004854 <HAL_RCC_ClockConfig+0x35c>)
 800480a:	5ccb      	ldrb	r3, [r1, r3]
 800480c:	f003 031f 	and.w	r3, r3, #31
 8004810:	fa22 f303 	lsr.w	r3, r2, r3
 8004814:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004816:	4b0e      	ldr	r3, [pc, #56]	; (8004850 <HAL_RCC_ClockConfig+0x358>)
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	f003 030f 	and.w	r3, r3, #15
 800481e:	4a0d      	ldr	r2, [pc, #52]	; (8004854 <HAL_RCC_ClockConfig+0x35c>)
 8004820:	5cd3      	ldrb	r3, [r2, r3]
 8004822:	f003 031f 	and.w	r3, r3, #31
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	fa22 f303 	lsr.w	r3, r2, r3
 800482c:	4a0a      	ldr	r2, [pc, #40]	; (8004858 <HAL_RCC_ClockConfig+0x360>)
 800482e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004830:	4a0a      	ldr	r2, [pc, #40]	; (800485c <HAL_RCC_ClockConfig+0x364>)
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004836:	4b0a      	ldr	r3, [pc, #40]	; (8004860 <HAL_RCC_ClockConfig+0x368>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4618      	mov	r0, r3
 800483c:	f7fe f8c8 	bl	80029d0 <HAL_InitTick>
 8004840:	4603      	mov	r3, r0
 8004842:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004844:	7bfb      	ldrb	r3, [r7, #15]
}
 8004846:	4618      	mov	r0, r3
 8004848:	3718      	adds	r7, #24
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	58024400 	.word	0x58024400
 8004854:	08006dd8 	.word	0x08006dd8
 8004858:	24000004 	.word	0x24000004
 800485c:	24000000 	.word	0x24000000
 8004860:	24000164 	.word	0x24000164

08004864 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004864:	b480      	push	{r7}
 8004866:	b089      	sub	sp, #36	; 0x24
 8004868:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800486a:	4bb3      	ldr	r3, [pc, #716]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004872:	2b18      	cmp	r3, #24
 8004874:	f200 8155 	bhi.w	8004b22 <HAL_RCC_GetSysClockFreq+0x2be>
 8004878:	a201      	add	r2, pc, #4	; (adr r2, 8004880 <HAL_RCC_GetSysClockFreq+0x1c>)
 800487a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800487e:	bf00      	nop
 8004880:	080048e5 	.word	0x080048e5
 8004884:	08004b23 	.word	0x08004b23
 8004888:	08004b23 	.word	0x08004b23
 800488c:	08004b23 	.word	0x08004b23
 8004890:	08004b23 	.word	0x08004b23
 8004894:	08004b23 	.word	0x08004b23
 8004898:	08004b23 	.word	0x08004b23
 800489c:	08004b23 	.word	0x08004b23
 80048a0:	0800490b 	.word	0x0800490b
 80048a4:	08004b23 	.word	0x08004b23
 80048a8:	08004b23 	.word	0x08004b23
 80048ac:	08004b23 	.word	0x08004b23
 80048b0:	08004b23 	.word	0x08004b23
 80048b4:	08004b23 	.word	0x08004b23
 80048b8:	08004b23 	.word	0x08004b23
 80048bc:	08004b23 	.word	0x08004b23
 80048c0:	08004911 	.word	0x08004911
 80048c4:	08004b23 	.word	0x08004b23
 80048c8:	08004b23 	.word	0x08004b23
 80048cc:	08004b23 	.word	0x08004b23
 80048d0:	08004b23 	.word	0x08004b23
 80048d4:	08004b23 	.word	0x08004b23
 80048d8:	08004b23 	.word	0x08004b23
 80048dc:	08004b23 	.word	0x08004b23
 80048e0:	08004917 	.word	0x08004917
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048e4:	4b94      	ldr	r3, [pc, #592]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0320 	and.w	r3, r3, #32
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d009      	beq.n	8004904 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80048f0:	4b91      	ldr	r3, [pc, #580]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	08db      	lsrs	r3, r3, #3
 80048f6:	f003 0303 	and.w	r3, r3, #3
 80048fa:	4a90      	ldr	r2, [pc, #576]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80048fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004900:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004902:	e111      	b.n	8004b28 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004904:	4b8d      	ldr	r3, [pc, #564]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004906:	61bb      	str	r3, [r7, #24]
    break;
 8004908:	e10e      	b.n	8004b28 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800490a:	4b8d      	ldr	r3, [pc, #564]	; (8004b40 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800490c:	61bb      	str	r3, [r7, #24]
    break;
 800490e:	e10b      	b.n	8004b28 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004910:	4b8c      	ldr	r3, [pc, #560]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004912:	61bb      	str	r3, [r7, #24]
    break;
 8004914:	e108      	b.n	8004b28 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004916:	4b88      	ldr	r3, [pc, #544]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491a:	f003 0303 	and.w	r3, r3, #3
 800491e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004920:	4b85      	ldr	r3, [pc, #532]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004924:	091b      	lsrs	r3, r3, #4
 8004926:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800492a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800492c:	4b82      	ldr	r3, [pc, #520]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800492e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004936:	4b80      	ldr	r3, [pc, #512]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800493a:	08db      	lsrs	r3, r3, #3
 800493c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	fb02 f303 	mul.w	r3, r2, r3
 8004946:	ee07 3a90 	vmov	s15, r3
 800494a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800494e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	2b00      	cmp	r3, #0
 8004956:	f000 80e1 	beq.w	8004b1c <HAL_RCC_GetSysClockFreq+0x2b8>
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	2b02      	cmp	r3, #2
 800495e:	f000 8083 	beq.w	8004a68 <HAL_RCC_GetSysClockFreq+0x204>
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	2b02      	cmp	r3, #2
 8004966:	f200 80a1 	bhi.w	8004aac <HAL_RCC_GetSysClockFreq+0x248>
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d003      	beq.n	8004978 <HAL_RCC_GetSysClockFreq+0x114>
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d056      	beq.n	8004a24 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004976:	e099      	b.n	8004aac <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004978:	4b6f      	ldr	r3, [pc, #444]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0320 	and.w	r3, r3, #32
 8004980:	2b00      	cmp	r3, #0
 8004982:	d02d      	beq.n	80049e0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004984:	4b6c      	ldr	r3, [pc, #432]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	08db      	lsrs	r3, r3, #3
 800498a:	f003 0303 	and.w	r3, r3, #3
 800498e:	4a6b      	ldr	r2, [pc, #428]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004990:	fa22 f303 	lsr.w	r3, r2, r3
 8004994:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	ee07 3a90 	vmov	s15, r3
 800499c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	ee07 3a90 	vmov	s15, r3
 80049a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049ae:	4b62      	ldr	r3, [pc, #392]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049b6:	ee07 3a90 	vmov	s15, r3
 80049ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049be:	ed97 6a02 	vldr	s12, [r7, #8]
 80049c2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004b48 <HAL_RCC_GetSysClockFreq+0x2e4>
 80049c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80049de:	e087      	b.n	8004af0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	ee07 3a90 	vmov	s15, r3
 80049e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ea:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004b4c <HAL_RCC_GetSysClockFreq+0x2e8>
 80049ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049f2:	4b51      	ldr	r3, [pc, #324]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049fa:	ee07 3a90 	vmov	s15, r3
 80049fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a02:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a06:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004b48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a22:	e065      	b.n	8004af0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	ee07 3a90 	vmov	s15, r3
 8004a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a2e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004b50 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a36:	4b40      	ldr	r3, [pc, #256]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a3e:	ee07 3a90 	vmov	s15, r3
 8004a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a46:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a4a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004b48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a66:	e043      	b.n	8004af0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	ee07 3a90 	vmov	s15, r3
 8004a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a72:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004b54 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a7a:	4b2f      	ldr	r3, [pc, #188]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a82:	ee07 3a90 	vmov	s15, r3
 8004a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a8e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004b48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004aaa:	e021      	b.n	8004af0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	ee07 3a90 	vmov	s15, r3
 8004ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ab6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004b50 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004abe:	4b1e      	ldr	r3, [pc, #120]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ac6:	ee07 3a90 	vmov	s15, r3
 8004aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ace:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ad2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004b48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ade:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004aee:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004af0:	4b11      	ldr	r3, [pc, #68]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af4:	0a5b      	lsrs	r3, r3, #9
 8004af6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004afa:	3301      	adds	r3, #1
 8004afc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	ee07 3a90 	vmov	s15, r3
 8004b04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004b08:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b14:	ee17 3a90 	vmov	r3, s15
 8004b18:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004b1a:	e005      	b.n	8004b28 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	61bb      	str	r3, [r7, #24]
    break;
 8004b20:	e002      	b.n	8004b28 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004b22:	4b07      	ldr	r3, [pc, #28]	; (8004b40 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004b24:	61bb      	str	r3, [r7, #24]
    break;
 8004b26:	bf00      	nop
  }

  return sysclockfreq;
 8004b28:	69bb      	ldr	r3, [r7, #24]
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3724      	adds	r7, #36	; 0x24
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	58024400 	.word	0x58024400
 8004b3c:	03d09000 	.word	0x03d09000
 8004b40:	003d0900 	.word	0x003d0900
 8004b44:	007a1200 	.word	0x007a1200
 8004b48:	46000000 	.word	0x46000000
 8004b4c:	4c742400 	.word	0x4c742400
 8004b50:	4a742400 	.word	0x4a742400
 8004b54:	4af42400 	.word	0x4af42400

08004b58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004b5e:	f7ff fe81 	bl	8004864 <HAL_RCC_GetSysClockFreq>
 8004b62:	4602      	mov	r2, r0
 8004b64:	4b10      	ldr	r3, [pc, #64]	; (8004ba8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	0a1b      	lsrs	r3, r3, #8
 8004b6a:	f003 030f 	and.w	r3, r3, #15
 8004b6e:	490f      	ldr	r1, [pc, #60]	; (8004bac <HAL_RCC_GetHCLKFreq+0x54>)
 8004b70:	5ccb      	ldrb	r3, [r1, r3]
 8004b72:	f003 031f 	and.w	r3, r3, #31
 8004b76:	fa22 f303 	lsr.w	r3, r2, r3
 8004b7a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b7c:	4b0a      	ldr	r3, [pc, #40]	; (8004ba8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	f003 030f 	and.w	r3, r3, #15
 8004b84:	4a09      	ldr	r2, [pc, #36]	; (8004bac <HAL_RCC_GetHCLKFreq+0x54>)
 8004b86:	5cd3      	ldrb	r3, [r2, r3]
 8004b88:	f003 031f 	and.w	r3, r3, #31
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b92:	4a07      	ldr	r2, [pc, #28]	; (8004bb0 <HAL_RCC_GetHCLKFreq+0x58>)
 8004b94:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004b96:	4a07      	ldr	r2, [pc, #28]	; (8004bb4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004b9c:	4b04      	ldr	r3, [pc, #16]	; (8004bb0 <HAL_RCC_GetHCLKFreq+0x58>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3708      	adds	r7, #8
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	58024400 	.word	0x58024400
 8004bac:	08006dd8 	.word	0x08006dd8
 8004bb0:	24000004 	.word	0x24000004
 8004bb4:	24000000 	.word	0x24000000

08004bb8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d03f      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bd8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004bdc:	d02a      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004bde:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004be2:	d824      	bhi.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004be4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004be8:	d018      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004bea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bee:	d81e      	bhi.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d003      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004bf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bf8:	d007      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004bfa:	e018      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bfc:	4ba3      	ldr	r3, [pc, #652]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c00:	4aa2      	ldr	r2, [pc, #648]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004c02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004c08:	e015      	b.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	3304      	adds	r3, #4
 8004c0e:	2102      	movs	r1, #2
 8004c10:	4618      	mov	r0, r3
 8004c12:	f000 ff17 	bl	8005a44 <RCCEx_PLL2_Config>
 8004c16:	4603      	mov	r3, r0
 8004c18:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004c1a:	e00c      	b.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	3324      	adds	r3, #36	; 0x24
 8004c20:	2102      	movs	r1, #2
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 ffc0 	bl	8005ba8 <RCCEx_PLL3_Config>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004c2c:	e003      	b.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	75fb      	strb	r3, [r7, #23]
      break;
 8004c32:	e000      	b.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004c34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c36:	7dfb      	ldrb	r3, [r7, #23]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d109      	bne.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004c3c:	4b93      	ldr	r3, [pc, #588]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c48:	4990      	ldr	r1, [pc, #576]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	650b      	str	r3, [r1, #80]	; 0x50
 8004c4e:	e001      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c50:	7dfb      	ldrb	r3, [r7, #23]
 8004c52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d03d      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c64:	2b04      	cmp	r3, #4
 8004c66:	d826      	bhi.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004c68:	a201      	add	r2, pc, #4	; (adr r2, 8004c70 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c6e:	bf00      	nop
 8004c70:	08004c85 	.word	0x08004c85
 8004c74:	08004c93 	.word	0x08004c93
 8004c78:	08004ca5 	.word	0x08004ca5
 8004c7c:	08004cbd 	.word	0x08004cbd
 8004c80:	08004cbd 	.word	0x08004cbd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c84:	4b81      	ldr	r3, [pc, #516]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c88:	4a80      	ldr	r2, [pc, #512]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004c8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004c90:	e015      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	3304      	adds	r3, #4
 8004c96:	2100      	movs	r1, #0
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f000 fed3 	bl	8005a44 <RCCEx_PLL2_Config>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ca2:	e00c      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	3324      	adds	r3, #36	; 0x24
 8004ca8:	2100      	movs	r1, #0
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 ff7c 	bl	8005ba8 <RCCEx_PLL3_Config>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004cb4:	e003      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	75fb      	strb	r3, [r7, #23]
      break;
 8004cba:	e000      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004cbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cbe:	7dfb      	ldrb	r3, [r7, #23]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d109      	bne.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004cc4:	4b71      	ldr	r3, [pc, #452]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cc8:	f023 0207 	bic.w	r2, r3, #7
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd0:	496e      	ldr	r1, [pc, #440]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	650b      	str	r3, [r1, #80]	; 0x50
 8004cd6:	e001      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd8:	7dfb      	ldrb	r3, [r7, #23]
 8004cda:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d042      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cf0:	d02b      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004cf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cf6:	d825      	bhi.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004cf8:	2bc0      	cmp	r3, #192	; 0xc0
 8004cfa:	d028      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004cfc:	2bc0      	cmp	r3, #192	; 0xc0
 8004cfe:	d821      	bhi.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004d00:	2b80      	cmp	r3, #128	; 0x80
 8004d02:	d016      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004d04:	2b80      	cmp	r3, #128	; 0x80
 8004d06:	d81d      	bhi.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d002      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004d0c:	2b40      	cmp	r3, #64	; 0x40
 8004d0e:	d007      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004d10:	e018      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d12:	4b5e      	ldr	r3, [pc, #376]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d16:	4a5d      	ldr	r2, [pc, #372]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004d1e:	e017      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	3304      	adds	r3, #4
 8004d24:	2100      	movs	r1, #0
 8004d26:	4618      	mov	r0, r3
 8004d28:	f000 fe8c 	bl	8005a44 <RCCEx_PLL2_Config>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004d30:	e00e      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	3324      	adds	r3, #36	; 0x24
 8004d36:	2100      	movs	r1, #0
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f000 ff35 	bl	8005ba8 <RCCEx_PLL3_Config>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004d42:	e005      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	75fb      	strb	r3, [r7, #23]
      break;
 8004d48:	e002      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004d4a:	bf00      	nop
 8004d4c:	e000      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004d4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d50:	7dfb      	ldrb	r3, [r7, #23]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d109      	bne.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004d56:	4b4d      	ldr	r3, [pc, #308]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d5a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d62:	494a      	ldr	r1, [pc, #296]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	650b      	str	r3, [r1, #80]	; 0x50
 8004d68:	e001      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d6a:	7dfb      	ldrb	r3, [r7, #23]
 8004d6c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d049      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004d80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d84:	d030      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004d86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d8a:	d82a      	bhi.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004d8c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004d90:	d02c      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004d92:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004d96:	d824      	bhi.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004d98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d9c:	d018      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004d9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004da2:	d81e      	bhi.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d003      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004da8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dac:	d007      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004dae:	e018      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004db0:	4b36      	ldr	r3, [pc, #216]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db4:	4a35      	ldr	r2, [pc, #212]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004db6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004dbc:	e017      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	3304      	adds	r3, #4
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f000 fe3d 	bl	8005a44 <RCCEx_PLL2_Config>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004dce:	e00e      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	3324      	adds	r3, #36	; 0x24
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f000 fee6 	bl	8005ba8 <RCCEx_PLL3_Config>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004de0:	e005      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	75fb      	strb	r3, [r7, #23]
      break;
 8004de6:	e002      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004de8:	bf00      	nop
 8004dea:	e000      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004dec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dee:	7dfb      	ldrb	r3, [r7, #23]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10a      	bne.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004df4:	4b25      	ldr	r3, [pc, #148]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004df8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004e02:	4922      	ldr	r1, [pc, #136]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	658b      	str	r3, [r1, #88]	; 0x58
 8004e08:	e001      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e0a:	7dfb      	ldrb	r3, [r7, #23]
 8004e0c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d04b      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004e20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e24:	d030      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004e26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e2a:	d82a      	bhi.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004e2c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004e30:	d02e      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8004e32:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004e36:	d824      	bhi.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004e38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e3c:	d018      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004e3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e42:	d81e      	bhi.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d003      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004e48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e4c:	d007      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004e4e:	e018      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e50:	4b0e      	ldr	r3, [pc, #56]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e54:	4a0d      	ldr	r2, [pc, #52]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004e56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e5c:	e019      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	3304      	adds	r3, #4
 8004e62:	2100      	movs	r1, #0
 8004e64:	4618      	mov	r0, r3
 8004e66:	f000 fded 	bl	8005a44 <RCCEx_PLL2_Config>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004e6e:	e010      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	3324      	adds	r3, #36	; 0x24
 8004e74:	2100      	movs	r1, #0
 8004e76:	4618      	mov	r0, r3
 8004e78:	f000 fe96 	bl	8005ba8 <RCCEx_PLL3_Config>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e80:	e007      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	75fb      	strb	r3, [r7, #23]
      break;
 8004e86:	e004      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8004e88:	bf00      	nop
 8004e8a:	e002      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004e8c:	58024400 	.word	0x58024400
      break;
 8004e90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e92:	7dfb      	ldrb	r3, [r7, #23]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d10a      	bne.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004e98:	4b99      	ldr	r3, [pc, #612]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e9c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004ea6:	4996      	ldr	r1, [pc, #600]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	658b      	str	r3, [r1, #88]	; 0x58
 8004eac:	e001      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eae:	7dfb      	ldrb	r3, [r7, #23]
 8004eb0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d032      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ec2:	2b30      	cmp	r3, #48	; 0x30
 8004ec4:	d01c      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004ec6:	2b30      	cmp	r3, #48	; 0x30
 8004ec8:	d817      	bhi.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004eca:	2b20      	cmp	r3, #32
 8004ecc:	d00c      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8004ece:	2b20      	cmp	r3, #32
 8004ed0:	d813      	bhi.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d016      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004ed6:	2b10      	cmp	r3, #16
 8004ed8:	d10f      	bne.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004eda:	4b89      	ldr	r3, [pc, #548]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ede:	4a88      	ldr	r2, [pc, #544]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ee4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004ee6:	e00e      	b.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	3304      	adds	r3, #4
 8004eec:	2102      	movs	r1, #2
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 fda8 	bl	8005a44 <RCCEx_PLL2_Config>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004ef8:	e005      	b.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	75fb      	strb	r3, [r7, #23]
      break;
 8004efe:	e002      	b.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004f00:	bf00      	nop
 8004f02:	e000      	b.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004f04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f06:	7dfb      	ldrb	r3, [r7, #23]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d109      	bne.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004f0c:	4b7c      	ldr	r3, [pc, #496]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f10:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f18:	4979      	ldr	r1, [pc, #484]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004f1e:	e001      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f20:	7dfb      	ldrb	r3, [r7, #23]
 8004f22:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d047      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f38:	d030      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004f3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f3e:	d82a      	bhi.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004f40:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f44:	d02c      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004f46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f4a:	d824      	bhi.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004f4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f50:	d018      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8004f52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f56:	d81e      	bhi.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d003      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8004f5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f60:	d007      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8004f62:	e018      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f64:	4b66      	ldr	r3, [pc, #408]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f68:	4a65      	ldr	r2, [pc, #404]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004f6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004f70:	e017      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	3304      	adds	r3, #4
 8004f76:	2100      	movs	r1, #0
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f000 fd63 	bl	8005a44 <RCCEx_PLL2_Config>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004f82:	e00e      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	3324      	adds	r3, #36	; 0x24
 8004f88:	2100      	movs	r1, #0
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 fe0c 	bl	8005ba8 <RCCEx_PLL3_Config>
 8004f90:	4603      	mov	r3, r0
 8004f92:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004f94:	e005      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	75fb      	strb	r3, [r7, #23]
      break;
 8004f9a:	e002      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004f9c:	bf00      	nop
 8004f9e:	e000      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004fa0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fa2:	7dfb      	ldrb	r3, [r7, #23]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d109      	bne.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004fa8:	4b55      	ldr	r3, [pc, #340]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fac:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fb4:	4952      	ldr	r1, [pc, #328]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	650b      	str	r3, [r1, #80]	; 0x50
 8004fba:	e001      	b.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fbc:	7dfb      	ldrb	r3, [r7, #23]
 8004fbe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d049      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fd4:	d02e      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004fd6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fda:	d828      	bhi.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004fdc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004fe0:	d02a      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8004fe2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004fe6:	d822      	bhi.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004fe8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004fec:	d026      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x484>
 8004fee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ff2:	d81c      	bhi.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004ff4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ff8:	d010      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x464>
 8004ffa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ffe:	d816      	bhi.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005000:	2b00      	cmp	r3, #0
 8005002:	d01d      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005008:	d111      	bne.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	3304      	adds	r3, #4
 800500e:	2101      	movs	r1, #1
 8005010:	4618      	mov	r0, r3
 8005012:	f000 fd17 	bl	8005a44 <RCCEx_PLL2_Config>
 8005016:	4603      	mov	r3, r0
 8005018:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800501a:	e012      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	3324      	adds	r3, #36	; 0x24
 8005020:	2101      	movs	r1, #1
 8005022:	4618      	mov	r0, r3
 8005024:	f000 fdc0 	bl	8005ba8 <RCCEx_PLL3_Config>
 8005028:	4603      	mov	r3, r0
 800502a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800502c:	e009      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	75fb      	strb	r3, [r7, #23]
      break;
 8005032:	e006      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005034:	bf00      	nop
 8005036:	e004      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005038:	bf00      	nop
 800503a:	e002      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800503c:	bf00      	nop
 800503e:	e000      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005040:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005042:	7dfb      	ldrb	r3, [r7, #23]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d109      	bne.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005048:	4b2d      	ldr	r3, [pc, #180]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800504a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800504c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005054:	492a      	ldr	r1, [pc, #168]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005056:	4313      	orrs	r3, r2
 8005058:	650b      	str	r3, [r1, #80]	; 0x50
 800505a:	e001      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800505c:	7dfb      	ldrb	r3, [r7, #23]
 800505e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d04d      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005072:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005076:	d02e      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8005078:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800507c:	d828      	bhi.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800507e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005082:	d02a      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x522>
 8005084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005088:	d822      	bhi.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800508a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800508e:	d026      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x526>
 8005090:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005094:	d81c      	bhi.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005096:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800509a:	d010      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x506>
 800509c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050a0:	d816      	bhi.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d01d      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80050a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050aa:	d111      	bne.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	3304      	adds	r3, #4
 80050b0:	2101      	movs	r1, #1
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 fcc6 	bl	8005a44 <RCCEx_PLL2_Config>
 80050b8:	4603      	mov	r3, r0
 80050ba:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80050bc:	e012      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	3324      	adds	r3, #36	; 0x24
 80050c2:	2101      	movs	r1, #1
 80050c4:	4618      	mov	r0, r3
 80050c6:	f000 fd6f 	bl	8005ba8 <RCCEx_PLL3_Config>
 80050ca:	4603      	mov	r3, r0
 80050cc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80050ce:	e009      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	75fb      	strb	r3, [r7, #23]
      break;
 80050d4:	e006      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80050d6:	bf00      	nop
 80050d8:	e004      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80050da:	bf00      	nop
 80050dc:	e002      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80050de:	bf00      	nop
 80050e0:	e000      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80050e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050e4:	7dfb      	ldrb	r3, [r7, #23]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d10c      	bne.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80050ea:	4b05      	ldr	r3, [pc, #20]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80050ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ee:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80050f8:	4901      	ldr	r1, [pc, #4]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	658b      	str	r3, [r1, #88]	; 0x58
 80050fe:	e003      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005100:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005104:	7dfb      	ldrb	r3, [r7, #23]
 8005106:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d02f      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005118:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800511c:	d00e      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x584>
 800511e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005122:	d814      	bhi.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8005124:	2b00      	cmp	r3, #0
 8005126:	d015      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8005128:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800512c:	d10f      	bne.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800512e:	4baf      	ldr	r3, [pc, #700]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005132:	4aae      	ldr	r2, [pc, #696]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005138:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800513a:	e00c      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	3304      	adds	r3, #4
 8005140:	2101      	movs	r1, #1
 8005142:	4618      	mov	r0, r3
 8005144:	f000 fc7e 	bl	8005a44 <RCCEx_PLL2_Config>
 8005148:	4603      	mov	r3, r0
 800514a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800514c:	e003      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	75fb      	strb	r3, [r7, #23]
      break;
 8005152:	e000      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8005154:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005156:	7dfb      	ldrb	r3, [r7, #23]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d109      	bne.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800515c:	4ba3      	ldr	r3, [pc, #652]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800515e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005160:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005168:	49a0      	ldr	r1, [pc, #640]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800516a:	4313      	orrs	r3, r2
 800516c:	650b      	str	r3, [r1, #80]	; 0x50
 800516e:	e001      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005170:	7dfb      	ldrb	r3, [r7, #23]
 8005172:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d032      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005184:	2b03      	cmp	r3, #3
 8005186:	d81b      	bhi.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005188:	a201      	add	r2, pc, #4	; (adr r2, 8005190 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800518a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800518e:	bf00      	nop
 8005190:	080051c7 	.word	0x080051c7
 8005194:	080051a1 	.word	0x080051a1
 8005198:	080051af 	.word	0x080051af
 800519c:	080051c7 	.word	0x080051c7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051a0:	4b92      	ldr	r3, [pc, #584]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80051a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a4:	4a91      	ldr	r2, [pc, #580]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80051a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80051ac:	e00c      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	3304      	adds	r3, #4
 80051b2:	2102      	movs	r1, #2
 80051b4:	4618      	mov	r0, r3
 80051b6:	f000 fc45 	bl	8005a44 <RCCEx_PLL2_Config>
 80051ba:	4603      	mov	r3, r0
 80051bc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80051be:	e003      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	75fb      	strb	r3, [r7, #23]
      break;
 80051c4:	e000      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80051c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051c8:	7dfb      	ldrb	r3, [r7, #23]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d109      	bne.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80051ce:	4b87      	ldr	r3, [pc, #540]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80051d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051d2:	f023 0203 	bic.w	r2, r3, #3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051da:	4984      	ldr	r1, [pc, #528]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	64cb      	str	r3, [r1, #76]	; 0x4c
 80051e0:	e001      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051e2:	7dfb      	ldrb	r3, [r7, #23]
 80051e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	f000 8086 	beq.w	8005300 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051f4:	4b7e      	ldr	r3, [pc, #504]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a7d      	ldr	r2, [pc, #500]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80051fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005200:	f7fd fc30 	bl	8002a64 <HAL_GetTick>
 8005204:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005206:	e009      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005208:	f7fd fc2c 	bl	8002a64 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	2b64      	cmp	r3, #100	; 0x64
 8005214:	d902      	bls.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	75fb      	strb	r3, [r7, #23]
        break;
 800521a:	e005      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800521c:	4b74      	ldr	r3, [pc, #464]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005224:	2b00      	cmp	r3, #0
 8005226:	d0ef      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005228:	7dfb      	ldrb	r3, [r7, #23]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d166      	bne.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800522e:	4b6f      	ldr	r3, [pc, #444]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005230:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005238:	4053      	eors	r3, r2
 800523a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800523e:	2b00      	cmp	r3, #0
 8005240:	d013      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005242:	4b6a      	ldr	r3, [pc, #424]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005246:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800524a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800524c:	4b67      	ldr	r3, [pc, #412]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800524e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005250:	4a66      	ldr	r2, [pc, #408]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005256:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005258:	4b64      	ldr	r3, [pc, #400]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800525a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800525c:	4a63      	ldr	r2, [pc, #396]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800525e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005262:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005264:	4a61      	ldr	r2, [pc, #388]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005270:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005274:	d115      	bne.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005276:	f7fd fbf5 	bl	8002a64 <HAL_GetTick>
 800527a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800527c:	e00b      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800527e:	f7fd fbf1 	bl	8002a64 <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	f241 3288 	movw	r2, #5000	; 0x1388
 800528c:	4293      	cmp	r3, r2
 800528e:	d902      	bls.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	75fb      	strb	r3, [r7, #23]
            break;
 8005294:	e005      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005296:	4b55      	ldr	r3, [pc, #340]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800529a:	f003 0302 	and.w	r3, r3, #2
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d0ed      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80052a2:	7dfb      	ldrb	r3, [r7, #23]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d126      	bne.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80052ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052b6:	d10d      	bne.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80052b8:	4b4c      	ldr	r3, [pc, #304]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80052c6:	0919      	lsrs	r1, r3, #4
 80052c8:	4b4a      	ldr	r3, [pc, #296]	; (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80052ca:	400b      	ands	r3, r1
 80052cc:	4947      	ldr	r1, [pc, #284]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	610b      	str	r3, [r1, #16]
 80052d2:	e005      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80052d4:	4b45      	ldr	r3, [pc, #276]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	4a44      	ldr	r2, [pc, #272]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80052da:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80052de:	6113      	str	r3, [r2, #16]
 80052e0:	4b42      	ldr	r3, [pc, #264]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80052e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80052ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052ee:	493f      	ldr	r1, [pc, #252]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80052f0:	4313      	orrs	r3, r2
 80052f2:	670b      	str	r3, [r1, #112]	; 0x70
 80052f4:	e004      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80052f6:	7dfb      	ldrb	r3, [r7, #23]
 80052f8:	75bb      	strb	r3, [r7, #22]
 80052fa:	e001      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052fc:	7dfb      	ldrb	r3, [r7, #23]
 80052fe:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0301 	and.w	r3, r3, #1
 8005308:	2b00      	cmp	r3, #0
 800530a:	f000 8085 	beq.w	8005418 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005312:	2b28      	cmp	r3, #40	; 0x28
 8005314:	d866      	bhi.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005316:	a201      	add	r2, pc, #4	; (adr r2, 800531c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800531c:	080053f9 	.word	0x080053f9
 8005320:	080053e5 	.word	0x080053e5
 8005324:	080053e5 	.word	0x080053e5
 8005328:	080053e5 	.word	0x080053e5
 800532c:	080053e5 	.word	0x080053e5
 8005330:	080053e5 	.word	0x080053e5
 8005334:	080053e5 	.word	0x080053e5
 8005338:	080053e5 	.word	0x080053e5
 800533c:	080053c1 	.word	0x080053c1
 8005340:	080053e5 	.word	0x080053e5
 8005344:	080053e5 	.word	0x080053e5
 8005348:	080053e5 	.word	0x080053e5
 800534c:	080053e5 	.word	0x080053e5
 8005350:	080053e5 	.word	0x080053e5
 8005354:	080053e5 	.word	0x080053e5
 8005358:	080053e5 	.word	0x080053e5
 800535c:	080053d3 	.word	0x080053d3
 8005360:	080053e5 	.word	0x080053e5
 8005364:	080053e5 	.word	0x080053e5
 8005368:	080053e5 	.word	0x080053e5
 800536c:	080053e5 	.word	0x080053e5
 8005370:	080053e5 	.word	0x080053e5
 8005374:	080053e5 	.word	0x080053e5
 8005378:	080053e5 	.word	0x080053e5
 800537c:	080053f9 	.word	0x080053f9
 8005380:	080053e5 	.word	0x080053e5
 8005384:	080053e5 	.word	0x080053e5
 8005388:	080053e5 	.word	0x080053e5
 800538c:	080053e5 	.word	0x080053e5
 8005390:	080053e5 	.word	0x080053e5
 8005394:	080053e5 	.word	0x080053e5
 8005398:	080053e5 	.word	0x080053e5
 800539c:	080053f9 	.word	0x080053f9
 80053a0:	080053e5 	.word	0x080053e5
 80053a4:	080053e5 	.word	0x080053e5
 80053a8:	080053e5 	.word	0x080053e5
 80053ac:	080053e5 	.word	0x080053e5
 80053b0:	080053e5 	.word	0x080053e5
 80053b4:	080053e5 	.word	0x080053e5
 80053b8:	080053e5 	.word	0x080053e5
 80053bc:	080053f9 	.word	0x080053f9
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	3304      	adds	r3, #4
 80053c4:	2101      	movs	r1, #1
 80053c6:	4618      	mov	r0, r3
 80053c8:	f000 fb3c 	bl	8005a44 <RCCEx_PLL2_Config>
 80053cc:	4603      	mov	r3, r0
 80053ce:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80053d0:	e013      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	3324      	adds	r3, #36	; 0x24
 80053d6:	2101      	movs	r1, #1
 80053d8:	4618      	mov	r0, r3
 80053da:	f000 fbe5 	bl	8005ba8 <RCCEx_PLL3_Config>
 80053de:	4603      	mov	r3, r0
 80053e0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80053e2:	e00a      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	75fb      	strb	r3, [r7, #23]
      break;
 80053e8:	e007      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x842>
 80053ea:	bf00      	nop
 80053ec:	58024400 	.word	0x58024400
 80053f0:	58024800 	.word	0x58024800
 80053f4:	00ffffcf 	.word	0x00ffffcf
      break;
 80053f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053fa:	7dfb      	ldrb	r3, [r7, #23]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d109      	bne.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005400:	4b96      	ldr	r3, [pc, #600]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005404:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800540c:	4993      	ldr	r1, [pc, #588]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800540e:	4313      	orrs	r3, r2
 8005410:	654b      	str	r3, [r1, #84]	; 0x54
 8005412:	e001      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005414:	7dfb      	ldrb	r3, [r7, #23]
 8005416:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0302 	and.w	r3, r3, #2
 8005420:	2b00      	cmp	r3, #0
 8005422:	d038      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005428:	2b05      	cmp	r3, #5
 800542a:	d821      	bhi.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800542c:	a201      	add	r2, pc, #4	; (adr r2, 8005434 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800542e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005432:	bf00      	nop
 8005434:	08005477 	.word	0x08005477
 8005438:	0800544d 	.word	0x0800544d
 800543c:	0800545f 	.word	0x0800545f
 8005440:	08005477 	.word	0x08005477
 8005444:	08005477 	.word	0x08005477
 8005448:	08005477 	.word	0x08005477
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	3304      	adds	r3, #4
 8005450:	2101      	movs	r1, #1
 8005452:	4618      	mov	r0, r3
 8005454:	f000 faf6 	bl	8005a44 <RCCEx_PLL2_Config>
 8005458:	4603      	mov	r3, r0
 800545a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800545c:	e00c      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	3324      	adds	r3, #36	; 0x24
 8005462:	2101      	movs	r1, #1
 8005464:	4618      	mov	r0, r3
 8005466:	f000 fb9f 	bl	8005ba8 <RCCEx_PLL3_Config>
 800546a:	4603      	mov	r3, r0
 800546c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800546e:	e003      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	75fb      	strb	r3, [r7, #23]
      break;
 8005474:	e000      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8005476:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005478:	7dfb      	ldrb	r3, [r7, #23]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d109      	bne.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800547e:	4b77      	ldr	r3, [pc, #476]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005482:	f023 0207 	bic.w	r2, r3, #7
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800548a:	4974      	ldr	r1, [pc, #464]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800548c:	4313      	orrs	r3, r2
 800548e:	654b      	str	r3, [r1, #84]	; 0x54
 8005490:	e001      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005492:	7dfb      	ldrb	r3, [r7, #23]
 8005494:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0304 	and.w	r3, r3, #4
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d03a      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a8:	2b05      	cmp	r3, #5
 80054aa:	d821      	bhi.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80054ac:	a201      	add	r2, pc, #4	; (adr r2, 80054b4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80054ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b2:	bf00      	nop
 80054b4:	080054f7 	.word	0x080054f7
 80054b8:	080054cd 	.word	0x080054cd
 80054bc:	080054df 	.word	0x080054df
 80054c0:	080054f7 	.word	0x080054f7
 80054c4:	080054f7 	.word	0x080054f7
 80054c8:	080054f7 	.word	0x080054f7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	3304      	adds	r3, #4
 80054d0:	2101      	movs	r1, #1
 80054d2:	4618      	mov	r0, r3
 80054d4:	f000 fab6 	bl	8005a44 <RCCEx_PLL2_Config>
 80054d8:	4603      	mov	r3, r0
 80054da:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80054dc:	e00c      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	3324      	adds	r3, #36	; 0x24
 80054e2:	2101      	movs	r1, #1
 80054e4:	4618      	mov	r0, r3
 80054e6:	f000 fb5f 	bl	8005ba8 <RCCEx_PLL3_Config>
 80054ea:	4603      	mov	r3, r0
 80054ec:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80054ee:	e003      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	75fb      	strb	r3, [r7, #23]
      break;
 80054f4:	e000      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80054f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054f8:	7dfb      	ldrb	r3, [r7, #23]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10a      	bne.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80054fe:	4b57      	ldr	r3, [pc, #348]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005502:	f023 0207 	bic.w	r2, r3, #7
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800550c:	4953      	ldr	r1, [pc, #332]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800550e:	4313      	orrs	r3, r2
 8005510:	658b      	str	r3, [r1, #88]	; 0x58
 8005512:	e001      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005514:	7dfb      	ldrb	r3, [r7, #23]
 8005516:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0320 	and.w	r3, r3, #32
 8005520:	2b00      	cmp	r3, #0
 8005522:	d04b      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800552a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800552e:	d02e      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005530:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005534:	d828      	bhi.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800553a:	d02a      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800553c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005540:	d822      	bhi.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005542:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005546:	d026      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005548:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800554c:	d81c      	bhi.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800554e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005552:	d010      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8005554:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005558:	d816      	bhi.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800555a:	2b00      	cmp	r3, #0
 800555c:	d01d      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800555e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005562:	d111      	bne.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	3304      	adds	r3, #4
 8005568:	2100      	movs	r1, #0
 800556a:	4618      	mov	r0, r3
 800556c:	f000 fa6a 	bl	8005a44 <RCCEx_PLL2_Config>
 8005570:	4603      	mov	r3, r0
 8005572:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005574:	e012      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	3324      	adds	r3, #36	; 0x24
 800557a:	2102      	movs	r1, #2
 800557c:	4618      	mov	r0, r3
 800557e:	f000 fb13 	bl	8005ba8 <RCCEx_PLL3_Config>
 8005582:	4603      	mov	r3, r0
 8005584:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005586:	e009      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	75fb      	strb	r3, [r7, #23]
      break;
 800558c:	e006      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800558e:	bf00      	nop
 8005590:	e004      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005592:	bf00      	nop
 8005594:	e002      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005596:	bf00      	nop
 8005598:	e000      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800559a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800559c:	7dfb      	ldrb	r3, [r7, #23]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d10a      	bne.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055a2:	4b2e      	ldr	r3, [pc, #184]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80055a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055b0:	492a      	ldr	r1, [pc, #168]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	654b      	str	r3, [r1, #84]	; 0x54
 80055b6:	e001      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b8:	7dfb      	ldrb	r3, [r7, #23]
 80055ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d04d      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055ce:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80055d2:	d02e      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80055d4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80055d8:	d828      	bhi.n	800562c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80055da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055de:	d02a      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80055e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055e4:	d822      	bhi.n	800562c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80055e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055ea:	d026      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80055ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055f0:	d81c      	bhi.n	800562c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80055f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055f6:	d010      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80055f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055fc:	d816      	bhi.n	800562c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d01d      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8005602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005606:	d111      	bne.n	800562c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	3304      	adds	r3, #4
 800560c:	2100      	movs	r1, #0
 800560e:	4618      	mov	r0, r3
 8005610:	f000 fa18 	bl	8005a44 <RCCEx_PLL2_Config>
 8005614:	4603      	mov	r3, r0
 8005616:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005618:	e012      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	3324      	adds	r3, #36	; 0x24
 800561e:	2102      	movs	r1, #2
 8005620:	4618      	mov	r0, r3
 8005622:	f000 fac1 	bl	8005ba8 <RCCEx_PLL3_Config>
 8005626:	4603      	mov	r3, r0
 8005628:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800562a:	e009      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	75fb      	strb	r3, [r7, #23]
      break;
 8005630:	e006      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005632:	bf00      	nop
 8005634:	e004      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005636:	bf00      	nop
 8005638:	e002      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800563a:	bf00      	nop
 800563c:	e000      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800563e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005640:	7dfb      	ldrb	r3, [r7, #23]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d10c      	bne.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005646:	4b05      	ldr	r3, [pc, #20]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800564a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005654:	4901      	ldr	r1, [pc, #4]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005656:	4313      	orrs	r3, r2
 8005658:	658b      	str	r3, [r1, #88]	; 0x58
 800565a:	e003      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800565c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005660:	7dfb      	ldrb	r3, [r7, #23]
 8005662:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800566c:	2b00      	cmp	r3, #0
 800566e:	d04b      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005676:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800567a:	d02e      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800567c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005680:	d828      	bhi.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005682:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005686:	d02a      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005688:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800568c:	d822      	bhi.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800568e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005692:	d026      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8005694:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005698:	d81c      	bhi.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800569a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800569e:	d010      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80056a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056a4:	d816      	bhi.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d01d      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80056aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056ae:	d111      	bne.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	3304      	adds	r3, #4
 80056b4:	2100      	movs	r1, #0
 80056b6:	4618      	mov	r0, r3
 80056b8:	f000 f9c4 	bl	8005a44 <RCCEx_PLL2_Config>
 80056bc:	4603      	mov	r3, r0
 80056be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80056c0:	e012      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	3324      	adds	r3, #36	; 0x24
 80056c6:	2102      	movs	r1, #2
 80056c8:	4618      	mov	r0, r3
 80056ca:	f000 fa6d 	bl	8005ba8 <RCCEx_PLL3_Config>
 80056ce:	4603      	mov	r3, r0
 80056d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80056d2:	e009      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	75fb      	strb	r3, [r7, #23]
      break;
 80056d8:	e006      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80056da:	bf00      	nop
 80056dc:	e004      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80056de:	bf00      	nop
 80056e0:	e002      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80056e2:	bf00      	nop
 80056e4:	e000      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80056e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056e8:	7dfb      	ldrb	r3, [r7, #23]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10a      	bne.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80056ee:	4b9d      	ldr	r3, [pc, #628]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80056f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056fc:	4999      	ldr	r1, [pc, #612]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	658b      	str	r3, [r1, #88]	; 0x58
 8005702:	e001      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005704:	7dfb      	ldrb	r3, [r7, #23]
 8005706:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0308 	and.w	r3, r3, #8
 8005710:	2b00      	cmp	r3, #0
 8005712:	d01a      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800571a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800571e:	d10a      	bne.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	3324      	adds	r3, #36	; 0x24
 8005724:	2102      	movs	r1, #2
 8005726:	4618      	mov	r0, r3
 8005728:	f000 fa3e 	bl	8005ba8 <RCCEx_PLL3_Config>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d001      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005736:	4b8b      	ldr	r3, [pc, #556]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800573a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005744:	4987      	ldr	r1, [pc, #540]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005746:	4313      	orrs	r3, r2
 8005748:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0310 	and.w	r3, r3, #16
 8005752:	2b00      	cmp	r3, #0
 8005754:	d01a      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800575c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005760:	d10a      	bne.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	3324      	adds	r3, #36	; 0x24
 8005766:	2102      	movs	r1, #2
 8005768:	4618      	mov	r0, r3
 800576a:	f000 fa1d 	bl	8005ba8 <RCCEx_PLL3_Config>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d001      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005778:	4b7a      	ldr	r3, [pc, #488]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800577a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800577c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005786:	4977      	ldr	r1, [pc, #476]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005788:	4313      	orrs	r3, r2
 800578a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d034      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800579e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057a2:	d01d      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80057a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057a8:	d817      	bhi.n	80057da <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d003      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80057ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057b2:	d009      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80057b4:	e011      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	3304      	adds	r3, #4
 80057ba:	2100      	movs	r1, #0
 80057bc:	4618      	mov	r0, r3
 80057be:	f000 f941 	bl	8005a44 <RCCEx_PLL2_Config>
 80057c2:	4603      	mov	r3, r0
 80057c4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80057c6:	e00c      	b.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	3324      	adds	r3, #36	; 0x24
 80057cc:	2102      	movs	r1, #2
 80057ce:	4618      	mov	r0, r3
 80057d0:	f000 f9ea 	bl	8005ba8 <RCCEx_PLL3_Config>
 80057d4:	4603      	mov	r3, r0
 80057d6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80057d8:	e003      	b.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	75fb      	strb	r3, [r7, #23]
      break;
 80057de:	e000      	b.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80057e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057e2:	7dfb      	ldrb	r3, [r7, #23]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d10a      	bne.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057e8:	4b5e      	ldr	r3, [pc, #376]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80057ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80057f6:	495b      	ldr	r1, [pc, #364]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	658b      	str	r3, [r1, #88]	; 0x58
 80057fc:	e001      	b.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057fe:	7dfb      	ldrb	r3, [r7, #23]
 8005800:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d033      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005814:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005818:	d01c      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800581a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800581e:	d816      	bhi.n	800584e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8005820:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005824:	d003      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8005826:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800582a:	d007      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800582c:	e00f      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800582e:	4b4d      	ldr	r3, [pc, #308]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005832:	4a4c      	ldr	r2, [pc, #304]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005838:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800583a:	e00c      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	3324      	adds	r3, #36	; 0x24
 8005840:	2101      	movs	r1, #1
 8005842:	4618      	mov	r0, r3
 8005844:	f000 f9b0 	bl	8005ba8 <RCCEx_PLL3_Config>
 8005848:	4603      	mov	r3, r0
 800584a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800584c:	e003      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	75fb      	strb	r3, [r7, #23]
      break;
 8005852:	e000      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8005854:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005856:	7dfb      	ldrb	r3, [r7, #23]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d10a      	bne.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800585c:	4b41      	ldr	r3, [pc, #260]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800585e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005860:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800586a:	493e      	ldr	r1, [pc, #248]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800586c:	4313      	orrs	r3, r2
 800586e:	654b      	str	r3, [r1, #84]	; 0x54
 8005870:	e001      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005872:	7dfb      	ldrb	r3, [r7, #23]
 8005874:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d029      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005886:	2b00      	cmp	r3, #0
 8005888:	d003      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800588a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800588e:	d007      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8005890:	e00f      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005892:	4b34      	ldr	r3, [pc, #208]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005896:	4a33      	ldr	r2, [pc, #204]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800589c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800589e:	e00b      	b.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	3304      	adds	r3, #4
 80058a4:	2102      	movs	r1, #2
 80058a6:	4618      	mov	r0, r3
 80058a8:	f000 f8cc 	bl	8005a44 <RCCEx_PLL2_Config>
 80058ac:	4603      	mov	r3, r0
 80058ae:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80058b0:	e002      	b.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	75fb      	strb	r3, [r7, #23]
      break;
 80058b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058b8:	7dfb      	ldrb	r3, [r7, #23]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d109      	bne.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80058be:	4b29      	ldr	r3, [pc, #164]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80058c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058ca:	4926      	ldr	r1, [pc, #152]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	64cb      	str	r3, [r1, #76]	; 0x4c
 80058d0:	e001      	b.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058d2:	7dfb      	ldrb	r3, [r7, #23]
 80058d4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00a      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	3324      	adds	r3, #36	; 0x24
 80058e6:	2102      	movs	r1, #2
 80058e8:	4618      	mov	r0, r3
 80058ea:	f000 f95d 	bl	8005ba8 <RCCEx_PLL3_Config>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d001      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d033      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005908:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800590c:	d017      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800590e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005912:	d811      	bhi.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005914:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005918:	d013      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800591a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800591e:	d80b      	bhi.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005920:	2b00      	cmp	r3, #0
 8005922:	d010      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8005924:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005928:	d106      	bne.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800592a:	4b0e      	ldr	r3, [pc, #56]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800592c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592e:	4a0d      	ldr	r2, [pc, #52]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005934:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005936:	e007      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	75fb      	strb	r3, [r7, #23]
      break;
 800593c:	e004      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800593e:	bf00      	nop
 8005940:	e002      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005942:	bf00      	nop
 8005944:	e000      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005946:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005948:	7dfb      	ldrb	r3, [r7, #23]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d10c      	bne.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800594e:	4b05      	ldr	r3, [pc, #20]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005952:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800595a:	4902      	ldr	r1, [pc, #8]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800595c:	4313      	orrs	r3, r2
 800595e:	654b      	str	r3, [r1, #84]	; 0x54
 8005960:	e004      	b.n	800596c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8005962:	bf00      	nop
 8005964:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005968:	7dfb      	ldrb	r3, [r7, #23]
 800596a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d008      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005978:	4b31      	ldr	r3, [pc, #196]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800597a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800597c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005984:	492e      	ldr	r1, [pc, #184]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005986:	4313      	orrs	r3, r2
 8005988:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d009      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005996:	4b2a      	ldr	r3, [pc, #168]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80059a4:	4926      	ldr	r1, [pc, #152]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d008      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80059b6:	4b22      	ldr	r3, [pc, #136]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80059b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059ba:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059c2:	491f      	ldr	r1, [pc, #124]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00d      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80059d4:	4b1a      	ldr	r3, [pc, #104]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	4a19      	ldr	r2, [pc, #100]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80059da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80059de:	6113      	str	r3, [r2, #16]
 80059e0:	4b17      	ldr	r3, [pc, #92]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80059e2:	691a      	ldr	r2, [r3, #16]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80059ea:	4915      	ldr	r1, [pc, #84]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80059ec:	4313      	orrs	r3, r2
 80059ee:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	da08      	bge.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80059f8:	4b11      	ldr	r3, [pc, #68]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80059fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059fc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a04:	490e      	ldr	r1, [pc, #56]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d009      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005a16:	4b0a      	ldr	r3, [pc, #40]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a1a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a24:	4906      	ldr	r1, [pc, #24]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005a2a:	7dbb      	ldrb	r3, [r7, #22]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d101      	bne.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8005a30:	2300      	movs	r3, #0
 8005a32:	e000      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3718      	adds	r7, #24
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	58024400 	.word	0x58024400

08005a44 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005a52:	4b53      	ldr	r3, [pc, #332]	; (8005ba0 <RCCEx_PLL2_Config+0x15c>)
 8005a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a56:	f003 0303 	and.w	r3, r3, #3
 8005a5a:	2b03      	cmp	r3, #3
 8005a5c:	d101      	bne.n	8005a62 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e099      	b.n	8005b96 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005a62:	4b4f      	ldr	r3, [pc, #316]	; (8005ba0 <RCCEx_PLL2_Config+0x15c>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a4e      	ldr	r2, [pc, #312]	; (8005ba0 <RCCEx_PLL2_Config+0x15c>)
 8005a68:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a6e:	f7fc fff9 	bl	8002a64 <HAL_GetTick>
 8005a72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a74:	e008      	b.n	8005a88 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005a76:	f7fc fff5 	bl	8002a64 <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d901      	bls.n	8005a88 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e086      	b.n	8005b96 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a88:	4b45      	ldr	r3, [pc, #276]	; (8005ba0 <RCCEx_PLL2_Config+0x15c>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d1f0      	bne.n	8005a76 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005a94:	4b42      	ldr	r3, [pc, #264]	; (8005ba0 <RCCEx_PLL2_Config+0x15c>)
 8005a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a98:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	031b      	lsls	r3, r3, #12
 8005aa2:	493f      	ldr	r1, [pc, #252]	; (8005ba0 <RCCEx_PLL2_Config+0x15c>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	628b      	str	r3, [r1, #40]	; 0x28
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	3b01      	subs	r3, #1
 8005aae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	025b      	lsls	r3, r3, #9
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	431a      	orrs	r2, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	041b      	lsls	r3, r3, #16
 8005ac6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005aca:	431a      	orrs	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	061b      	lsls	r3, r3, #24
 8005ad4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005ad8:	4931      	ldr	r1, [pc, #196]	; (8005ba0 <RCCEx_PLL2_Config+0x15c>)
 8005ada:	4313      	orrs	r3, r2
 8005adc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005ade:	4b30      	ldr	r3, [pc, #192]	; (8005ba0 <RCCEx_PLL2_Config+0x15c>)
 8005ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	492d      	ldr	r1, [pc, #180]	; (8005ba0 <RCCEx_PLL2_Config+0x15c>)
 8005aec:	4313      	orrs	r3, r2
 8005aee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005af0:	4b2b      	ldr	r3, [pc, #172]	; (8005ba0 <RCCEx_PLL2_Config+0x15c>)
 8005af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af4:	f023 0220 	bic.w	r2, r3, #32
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	4928      	ldr	r1, [pc, #160]	; (8005ba0 <RCCEx_PLL2_Config+0x15c>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005b02:	4b27      	ldr	r3, [pc, #156]	; (8005ba0 <RCCEx_PLL2_Config+0x15c>)
 8005b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b06:	4a26      	ldr	r2, [pc, #152]	; (8005ba0 <RCCEx_PLL2_Config+0x15c>)
 8005b08:	f023 0310 	bic.w	r3, r3, #16
 8005b0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005b0e:	4b24      	ldr	r3, [pc, #144]	; (8005ba0 <RCCEx_PLL2_Config+0x15c>)
 8005b10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b12:	4b24      	ldr	r3, [pc, #144]	; (8005ba4 <RCCEx_PLL2_Config+0x160>)
 8005b14:	4013      	ands	r3, r2
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	69d2      	ldr	r2, [r2, #28]
 8005b1a:	00d2      	lsls	r2, r2, #3
 8005b1c:	4920      	ldr	r1, [pc, #128]	; (8005ba0 <RCCEx_PLL2_Config+0x15c>)
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005b22:	4b1f      	ldr	r3, [pc, #124]	; (8005ba0 <RCCEx_PLL2_Config+0x15c>)
 8005b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b26:	4a1e      	ldr	r2, [pc, #120]	; (8005ba0 <RCCEx_PLL2_Config+0x15c>)
 8005b28:	f043 0310 	orr.w	r3, r3, #16
 8005b2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d106      	bne.n	8005b42 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005b34:	4b1a      	ldr	r3, [pc, #104]	; (8005ba0 <RCCEx_PLL2_Config+0x15c>)
 8005b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b38:	4a19      	ldr	r2, [pc, #100]	; (8005ba0 <RCCEx_PLL2_Config+0x15c>)
 8005b3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b40:	e00f      	b.n	8005b62 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d106      	bne.n	8005b56 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005b48:	4b15      	ldr	r3, [pc, #84]	; (8005ba0 <RCCEx_PLL2_Config+0x15c>)
 8005b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4c:	4a14      	ldr	r2, [pc, #80]	; (8005ba0 <RCCEx_PLL2_Config+0x15c>)
 8005b4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b54:	e005      	b.n	8005b62 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005b56:	4b12      	ldr	r3, [pc, #72]	; (8005ba0 <RCCEx_PLL2_Config+0x15c>)
 8005b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5a:	4a11      	ldr	r2, [pc, #68]	; (8005ba0 <RCCEx_PLL2_Config+0x15c>)
 8005b5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b60:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005b62:	4b0f      	ldr	r3, [pc, #60]	; (8005ba0 <RCCEx_PLL2_Config+0x15c>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a0e      	ldr	r2, [pc, #56]	; (8005ba0 <RCCEx_PLL2_Config+0x15c>)
 8005b68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b6e:	f7fc ff79 	bl	8002a64 <HAL_GetTick>
 8005b72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b74:	e008      	b.n	8005b88 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005b76:	f7fc ff75 	bl	8002a64 <HAL_GetTick>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d901      	bls.n	8005b88 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e006      	b.n	8005b96 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b88:	4b05      	ldr	r3, [pc, #20]	; (8005ba0 <RCCEx_PLL2_Config+0x15c>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d0f0      	beq.n	8005b76 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	58024400 	.word	0x58024400
 8005ba4:	ffff0007 	.word	0xffff0007

08005ba8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005bb6:	4b53      	ldr	r3, [pc, #332]	; (8005d04 <RCCEx_PLL3_Config+0x15c>)
 8005bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bba:	f003 0303 	and.w	r3, r3, #3
 8005bbe:	2b03      	cmp	r3, #3
 8005bc0:	d101      	bne.n	8005bc6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e099      	b.n	8005cfa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005bc6:	4b4f      	ldr	r3, [pc, #316]	; (8005d04 <RCCEx_PLL3_Config+0x15c>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a4e      	ldr	r2, [pc, #312]	; (8005d04 <RCCEx_PLL3_Config+0x15c>)
 8005bcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bd2:	f7fc ff47 	bl	8002a64 <HAL_GetTick>
 8005bd6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005bd8:	e008      	b.n	8005bec <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005bda:	f7fc ff43 	bl	8002a64 <HAL_GetTick>
 8005bde:	4602      	mov	r2, r0
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d901      	bls.n	8005bec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005be8:	2303      	movs	r3, #3
 8005bea:	e086      	b.n	8005cfa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005bec:	4b45      	ldr	r3, [pc, #276]	; (8005d04 <RCCEx_PLL3_Config+0x15c>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d1f0      	bne.n	8005bda <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005bf8:	4b42      	ldr	r3, [pc, #264]	; (8005d04 <RCCEx_PLL3_Config+0x15c>)
 8005bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bfc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	051b      	lsls	r3, r3, #20
 8005c06:	493f      	ldr	r1, [pc, #252]	; (8005d04 <RCCEx_PLL3_Config+0x15c>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	628b      	str	r3, [r1, #40]	; 0x28
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	3b01      	subs	r3, #1
 8005c12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	025b      	lsls	r3, r3, #9
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	431a      	orrs	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	3b01      	subs	r3, #1
 8005c28:	041b      	lsls	r3, r3, #16
 8005c2a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005c2e:	431a      	orrs	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	3b01      	subs	r3, #1
 8005c36:	061b      	lsls	r3, r3, #24
 8005c38:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005c3c:	4931      	ldr	r1, [pc, #196]	; (8005d04 <RCCEx_PLL3_Config+0x15c>)
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005c42:	4b30      	ldr	r3, [pc, #192]	; (8005d04 <RCCEx_PLL3_Config+0x15c>)
 8005c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c46:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	492d      	ldr	r1, [pc, #180]	; (8005d04 <RCCEx_PLL3_Config+0x15c>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005c54:	4b2b      	ldr	r3, [pc, #172]	; (8005d04 <RCCEx_PLL3_Config+0x15c>)
 8005c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c58:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	699b      	ldr	r3, [r3, #24]
 8005c60:	4928      	ldr	r1, [pc, #160]	; (8005d04 <RCCEx_PLL3_Config+0x15c>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005c66:	4b27      	ldr	r3, [pc, #156]	; (8005d04 <RCCEx_PLL3_Config+0x15c>)
 8005c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6a:	4a26      	ldr	r2, [pc, #152]	; (8005d04 <RCCEx_PLL3_Config+0x15c>)
 8005c6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005c72:	4b24      	ldr	r3, [pc, #144]	; (8005d04 <RCCEx_PLL3_Config+0x15c>)
 8005c74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c76:	4b24      	ldr	r3, [pc, #144]	; (8005d08 <RCCEx_PLL3_Config+0x160>)
 8005c78:	4013      	ands	r3, r2
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	69d2      	ldr	r2, [r2, #28]
 8005c7e:	00d2      	lsls	r2, r2, #3
 8005c80:	4920      	ldr	r1, [pc, #128]	; (8005d04 <RCCEx_PLL3_Config+0x15c>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005c86:	4b1f      	ldr	r3, [pc, #124]	; (8005d04 <RCCEx_PLL3_Config+0x15c>)
 8005c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8a:	4a1e      	ldr	r2, [pc, #120]	; (8005d04 <RCCEx_PLL3_Config+0x15c>)
 8005c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d106      	bne.n	8005ca6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005c98:	4b1a      	ldr	r3, [pc, #104]	; (8005d04 <RCCEx_PLL3_Config+0x15c>)
 8005c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9c:	4a19      	ldr	r2, [pc, #100]	; (8005d04 <RCCEx_PLL3_Config+0x15c>)
 8005c9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005ca2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ca4:	e00f      	b.n	8005cc6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d106      	bne.n	8005cba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005cac:	4b15      	ldr	r3, [pc, #84]	; (8005d04 <RCCEx_PLL3_Config+0x15c>)
 8005cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb0:	4a14      	ldr	r2, [pc, #80]	; (8005d04 <RCCEx_PLL3_Config+0x15c>)
 8005cb2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005cb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005cb8:	e005      	b.n	8005cc6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005cba:	4b12      	ldr	r3, [pc, #72]	; (8005d04 <RCCEx_PLL3_Config+0x15c>)
 8005cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cbe:	4a11      	ldr	r2, [pc, #68]	; (8005d04 <RCCEx_PLL3_Config+0x15c>)
 8005cc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cc4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005cc6:	4b0f      	ldr	r3, [pc, #60]	; (8005d04 <RCCEx_PLL3_Config+0x15c>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a0e      	ldr	r2, [pc, #56]	; (8005d04 <RCCEx_PLL3_Config+0x15c>)
 8005ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cd2:	f7fc fec7 	bl	8002a64 <HAL_GetTick>
 8005cd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005cd8:	e008      	b.n	8005cec <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005cda:	f7fc fec3 	bl	8002a64 <HAL_GetTick>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	d901      	bls.n	8005cec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e006      	b.n	8005cfa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005cec:	4b05      	ldr	r3, [pc, #20]	; (8005d04 <RCCEx_PLL3_Config+0x15c>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d0f0      	beq.n	8005cda <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	58024400 	.word	0x58024400
 8005d08:	ffff0007 	.word	0xffff0007

08005d0c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d0c:	b084      	sub	sp, #16
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	b084      	sub	sp, #16
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
 8005d16:	f107 001c 	add.w	r0, r7, #28
 8005d1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d120      	bne.n	8005d66 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	68da      	ldr	r2, [r3, #12]
 8005d34:	4b2a      	ldr	r3, [pc, #168]	; (8005de0 <USB_CoreInit+0xd4>)
 8005d36:	4013      	ands	r3, r2
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005d48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d105      	bne.n	8005d5a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 faac 	bl	80062b8 <USB_CoreReset>
 8005d60:	4603      	mov	r3, r0
 8005d62:	73fb      	strb	r3, [r7, #15]
 8005d64:	e01a      	b.n	8005d9c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 faa0 	bl	80062b8 <USB_CoreReset>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005d7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d106      	bne.n	8005d90 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d86:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	639a      	str	r2, [r3, #56]	; 0x38
 8005d8e:	e005      	b.n	8005d9c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d116      	bne.n	8005dd0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005db0:	4b0c      	ldr	r3, [pc, #48]	; (8005de4 <USB_CoreInit+0xd8>)
 8005db2:	4313      	orrs	r3, r2
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	f043 0206 	orr.w	r2, r3, #6
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	f043 0220 	orr.w	r2, r3, #32
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ddc:	b004      	add	sp, #16
 8005dde:	4770      	bx	lr
 8005de0:	ffbdffbf 	.word	0xffbdffbf
 8005de4:	03ee0000 	.word	0x03ee0000

08005de8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f023 0201 	bic.w	r2, r3, #1
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	370c      	adds	r7, #12
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr

08005e0a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b084      	sub	sp, #16
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
 8005e12:	460b      	mov	r3, r1
 8005e14:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005e16:	2300      	movs	r3, #0
 8005e18:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005e26:	78fb      	ldrb	r3, [r7, #3]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d115      	bne.n	8005e58 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005e38:	2001      	movs	r0, #1
 8005e3a:	f7fc fe1f 	bl	8002a7c <HAL_Delay>
      ms++;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	3301      	adds	r3, #1
 8005e42:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 fa29 	bl	800629c <USB_GetMode>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d01e      	beq.n	8005e8e <USB_SetCurrentMode+0x84>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2b31      	cmp	r3, #49	; 0x31
 8005e54:	d9f0      	bls.n	8005e38 <USB_SetCurrentMode+0x2e>
 8005e56:	e01a      	b.n	8005e8e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005e58:	78fb      	ldrb	r3, [r7, #3]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d115      	bne.n	8005e8a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005e6a:	2001      	movs	r0, #1
 8005e6c:	f7fc fe06 	bl	8002a7c <HAL_Delay>
      ms++;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	3301      	adds	r3, #1
 8005e74:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 fa10 	bl	800629c <USB_GetMode>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d005      	beq.n	8005e8e <USB_SetCurrentMode+0x84>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2b31      	cmp	r3, #49	; 0x31
 8005e86:	d9f0      	bls.n	8005e6a <USB_SetCurrentMode+0x60>
 8005e88:	e001      	b.n	8005e8e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e005      	b.n	8005e9a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2b32      	cmp	r3, #50	; 0x32
 8005e92:	d101      	bne.n	8005e98 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e000      	b.n	8005e9a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3710      	adds	r7, #16
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
	...

08005ea4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ea4:	b084      	sub	sp, #16
 8005ea6:	b580      	push	{r7, lr}
 8005ea8:	b086      	sub	sp, #24
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
 8005eae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005eb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	613b      	str	r3, [r7, #16]
 8005ec2:	e009      	b.n	8005ed8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	3340      	adds	r3, #64	; 0x40
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	4413      	add	r3, r2
 8005ece:	2200      	movs	r2, #0
 8005ed0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	613b      	str	r3, [r7, #16]
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	2b0e      	cmp	r3, #14
 8005edc:	d9f2      	bls.n	8005ec4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005ede:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d11c      	bne.n	8005f1e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ef2:	f043 0302 	orr.w	r3, r3, #2
 8005ef6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	601a      	str	r2, [r3, #0]
 8005f1c:	e005      	b.n	8005f2a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f22:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f30:	461a      	mov	r2, r3
 8005f32:	2300      	movs	r3, #0
 8005f34:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f44:	461a      	mov	r2, r3
 8005f46:	680b      	ldr	r3, [r1, #0]
 8005f48:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d10c      	bne.n	8005f6a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d104      	bne.n	8005f60 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005f56:	2100      	movs	r1, #0
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f965 	bl	8006228 <USB_SetDevSpeed>
 8005f5e:	e008      	b.n	8005f72 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005f60:	2101      	movs	r1, #1
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 f960 	bl	8006228 <USB_SetDevSpeed>
 8005f68:	e003      	b.n	8005f72 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005f6a:	2103      	movs	r1, #3
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 f95b 	bl	8006228 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005f72:	2110      	movs	r1, #16
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 f8f3 	bl	8006160 <USB_FlushTxFifo>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d001      	beq.n	8005f84 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 f91f 	bl	80061c8 <USB_FlushRxFifo>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d001      	beq.n	8005f94 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	2300      	movs	r3, #0
 8005faa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005fb8:	2300      	movs	r3, #0
 8005fba:	613b      	str	r3, [r7, #16]
 8005fbc:	e043      	b.n	8006046 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	015a      	lsls	r2, r3, #5
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fd4:	d118      	bne.n	8006008 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d10a      	bne.n	8005ff2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	015a      	lsls	r2, r3, #5
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe8:	461a      	mov	r2, r3
 8005fea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005fee:	6013      	str	r3, [r2, #0]
 8005ff0:	e013      	b.n	800601a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	015a      	lsls	r2, r3, #5
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ffe:	461a      	mov	r2, r3
 8006000:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006004:	6013      	str	r3, [r2, #0]
 8006006:	e008      	b.n	800601a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	015a      	lsls	r2, r3, #5
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	4413      	add	r3, r2
 8006010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006014:	461a      	mov	r2, r3
 8006016:	2300      	movs	r3, #0
 8006018:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	015a      	lsls	r2, r3, #5
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	4413      	add	r3, r2
 8006022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006026:	461a      	mov	r2, r3
 8006028:	2300      	movs	r3, #0
 800602a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	015a      	lsls	r2, r3, #5
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	4413      	add	r3, r2
 8006034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006038:	461a      	mov	r2, r3
 800603a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800603e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	3301      	adds	r3, #1
 8006044:	613b      	str	r3, [r7, #16]
 8006046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	429a      	cmp	r2, r3
 800604c:	d3b7      	bcc.n	8005fbe <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800604e:	2300      	movs	r3, #0
 8006050:	613b      	str	r3, [r7, #16]
 8006052:	e043      	b.n	80060dc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	4413      	add	r3, r2
 800605c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006066:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800606a:	d118      	bne.n	800609e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10a      	bne.n	8006088 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	015a      	lsls	r2, r3, #5
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	4413      	add	r3, r2
 800607a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800607e:	461a      	mov	r2, r3
 8006080:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006084:	6013      	str	r3, [r2, #0]
 8006086:	e013      	b.n	80060b0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	015a      	lsls	r2, r3, #5
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	4413      	add	r3, r2
 8006090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006094:	461a      	mov	r2, r3
 8006096:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800609a:	6013      	str	r3, [r2, #0]
 800609c:	e008      	b.n	80060b0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	015a      	lsls	r2, r3, #5
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	4413      	add	r3, r2
 80060a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060aa:	461a      	mov	r2, r3
 80060ac:	2300      	movs	r3, #0
 80060ae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	015a      	lsls	r2, r3, #5
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	4413      	add	r3, r2
 80060b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060bc:	461a      	mov	r2, r3
 80060be:	2300      	movs	r3, #0
 80060c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	015a      	lsls	r2, r3, #5
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	4413      	add	r3, r2
 80060ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ce:	461a      	mov	r2, r3
 80060d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80060d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	3301      	adds	r3, #1
 80060da:	613b      	str	r3, [r7, #16]
 80060dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060de:	693a      	ldr	r2, [r7, #16]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d3b7      	bcc.n	8006054 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060f6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006104:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006108:	2b00      	cmp	r3, #0
 800610a:	d105      	bne.n	8006118 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	699b      	ldr	r3, [r3, #24]
 8006110:	f043 0210 	orr.w	r2, r3, #16
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	699a      	ldr	r2, [r3, #24]
 800611c:	4b0e      	ldr	r3, [pc, #56]	; (8006158 <USB_DevInit+0x2b4>)
 800611e:	4313      	orrs	r3, r2
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006126:	2b00      	cmp	r3, #0
 8006128:	d005      	beq.n	8006136 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	f043 0208 	orr.w	r2, r3, #8
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006138:	2b01      	cmp	r3, #1
 800613a:	d105      	bne.n	8006148 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	699a      	ldr	r2, [r3, #24]
 8006140:	4b06      	ldr	r3, [pc, #24]	; (800615c <USB_DevInit+0x2b8>)
 8006142:	4313      	orrs	r3, r2
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006148:	7dfb      	ldrb	r3, [r7, #23]
}
 800614a:	4618      	mov	r0, r3
 800614c:	3718      	adds	r7, #24
 800614e:	46bd      	mov	sp, r7
 8006150:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006154:	b004      	add	sp, #16
 8006156:	4770      	bx	lr
 8006158:	803c3800 	.word	0x803c3800
 800615c:	40000004 	.word	0x40000004

08006160 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800616a:	2300      	movs	r3, #0
 800616c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	3301      	adds	r3, #1
 8006172:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	4a13      	ldr	r2, [pc, #76]	; (80061c4 <USB_FlushTxFifo+0x64>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d901      	bls.n	8006180 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800617c:	2303      	movs	r3, #3
 800617e:	e01b      	b.n	80061b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	2b00      	cmp	r3, #0
 8006186:	daf2      	bge.n	800616e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006188:	2300      	movs	r3, #0
 800618a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	019b      	lsls	r3, r3, #6
 8006190:	f043 0220 	orr.w	r2, r3, #32
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	3301      	adds	r3, #1
 800619c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	4a08      	ldr	r2, [pc, #32]	; (80061c4 <USB_FlushTxFifo+0x64>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d901      	bls.n	80061aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e006      	b.n	80061b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	f003 0320 	and.w	r3, r3, #32
 80061b2:	2b20      	cmp	r3, #32
 80061b4:	d0f0      	beq.n	8006198 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3714      	adds	r7, #20
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr
 80061c4:	00030d40 	.word	0x00030d40

080061c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b085      	sub	sp, #20
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061d0:	2300      	movs	r3, #0
 80061d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	3301      	adds	r3, #1
 80061d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	4a11      	ldr	r2, [pc, #68]	; (8006224 <USB_FlushRxFifo+0x5c>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d901      	bls.n	80061e6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e018      	b.n	8006218 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	daf2      	bge.n	80061d4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80061ee:	2300      	movs	r3, #0
 80061f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2210      	movs	r2, #16
 80061f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	3301      	adds	r3, #1
 80061fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	4a08      	ldr	r2, [pc, #32]	; (8006224 <USB_FlushRxFifo+0x5c>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d901      	bls.n	800620a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006206:	2303      	movs	r3, #3
 8006208:	e006      	b.n	8006218 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	f003 0310 	and.w	r3, r3, #16
 8006212:	2b10      	cmp	r3, #16
 8006214:	d0f0      	beq.n	80061f8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	3714      	adds	r7, #20
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr
 8006224:	00030d40 	.word	0x00030d40

08006228 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006228:	b480      	push	{r7}
 800622a:	b085      	sub	sp, #20
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	460b      	mov	r3, r1
 8006232:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	78fb      	ldrb	r3, [r7, #3]
 8006242:	68f9      	ldr	r1, [r7, #12]
 8006244:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006248:	4313      	orrs	r3, r2
 800624a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3714      	adds	r7, #20
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr

0800625a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800625a:	b480      	push	{r7}
 800625c:	b085      	sub	sp, #20
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006274:	f023 0303 	bic.w	r3, r3, #3
 8006278:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006288:	f043 0302 	orr.w	r3, r3, #2
 800628c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3714      	adds	r7, #20
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	695b      	ldr	r3, [r3, #20]
 80062a8:	f003 0301 	and.w	r3, r3, #1
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b085      	sub	sp, #20
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062c0:	2300      	movs	r3, #0
 80062c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	3301      	adds	r3, #1
 80062c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	4a13      	ldr	r2, [pc, #76]	; (800631c <USB_CoreReset+0x64>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d901      	bls.n	80062d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e01b      	b.n	800630e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	daf2      	bge.n	80062c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80062de:	2300      	movs	r3, #0
 80062e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	f043 0201 	orr.w	r2, r3, #1
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	3301      	adds	r3, #1
 80062f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	4a09      	ldr	r2, [pc, #36]	; (800631c <USB_CoreReset+0x64>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d901      	bls.n	8006300 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80062fc:	2303      	movs	r3, #3
 80062fe:	e006      	b.n	800630e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	f003 0301 	and.w	r3, r3, #1
 8006308:	2b01      	cmp	r3, #1
 800630a:	d0f0      	beq.n	80062ee <USB_CoreReset+0x36>

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3714      	adds	r7, #20
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	00030d40 	.word	0x00030d40

08006320 <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 8006320:	b480      	push	{r7}
 8006322:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8006324:	bf00      	nop
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
	...

08006330 <__errno>:
 8006330:	4b01      	ldr	r3, [pc, #4]	; (8006338 <__errno+0x8>)
 8006332:	6818      	ldr	r0, [r3, #0]
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	2400016c 	.word	0x2400016c

0800633c <__libc_init_array>:
 800633c:	b570      	push	{r4, r5, r6, lr}
 800633e:	4d0d      	ldr	r5, [pc, #52]	; (8006374 <__libc_init_array+0x38>)
 8006340:	4c0d      	ldr	r4, [pc, #52]	; (8006378 <__libc_init_array+0x3c>)
 8006342:	1b64      	subs	r4, r4, r5
 8006344:	10a4      	asrs	r4, r4, #2
 8006346:	2600      	movs	r6, #0
 8006348:	42a6      	cmp	r6, r4
 800634a:	d109      	bne.n	8006360 <__libc_init_array+0x24>
 800634c:	4d0b      	ldr	r5, [pc, #44]	; (800637c <__libc_init_array+0x40>)
 800634e:	4c0c      	ldr	r4, [pc, #48]	; (8006380 <__libc_init_array+0x44>)
 8006350:	f000 fcd0 	bl	8006cf4 <_init>
 8006354:	1b64      	subs	r4, r4, r5
 8006356:	10a4      	asrs	r4, r4, #2
 8006358:	2600      	movs	r6, #0
 800635a:	42a6      	cmp	r6, r4
 800635c:	d105      	bne.n	800636a <__libc_init_array+0x2e>
 800635e:	bd70      	pop	{r4, r5, r6, pc}
 8006360:	f855 3b04 	ldr.w	r3, [r5], #4
 8006364:	4798      	blx	r3
 8006366:	3601      	adds	r6, #1
 8006368:	e7ee      	b.n	8006348 <__libc_init_array+0xc>
 800636a:	f855 3b04 	ldr.w	r3, [r5], #4
 800636e:	4798      	blx	r3
 8006370:	3601      	adds	r6, #1
 8006372:	e7f2      	b.n	800635a <__libc_init_array+0x1e>
 8006374:	0802a5ac 	.word	0x0802a5ac
 8006378:	0802a5ac 	.word	0x0802a5ac
 800637c:	0802a5ac 	.word	0x0802a5ac
 8006380:	0802a5b0 	.word	0x0802a5b0

08006384 <__retarget_lock_acquire_recursive>:
 8006384:	4770      	bx	lr

08006386 <__retarget_lock_release_recursive>:
 8006386:	4770      	bx	lr

08006388 <memcpy>:
 8006388:	440a      	add	r2, r1
 800638a:	4291      	cmp	r1, r2
 800638c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006390:	d100      	bne.n	8006394 <memcpy+0xc>
 8006392:	4770      	bx	lr
 8006394:	b510      	push	{r4, lr}
 8006396:	f811 4b01 	ldrb.w	r4, [r1], #1
 800639a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800639e:	4291      	cmp	r1, r2
 80063a0:	d1f9      	bne.n	8006396 <memcpy+0xe>
 80063a2:	bd10      	pop	{r4, pc}

080063a4 <memset>:
 80063a4:	4402      	add	r2, r0
 80063a6:	4603      	mov	r3, r0
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d100      	bne.n	80063ae <memset+0xa>
 80063ac:	4770      	bx	lr
 80063ae:	f803 1b01 	strb.w	r1, [r3], #1
 80063b2:	e7f9      	b.n	80063a8 <memset+0x4>

080063b4 <_free_r>:
 80063b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063b6:	2900      	cmp	r1, #0
 80063b8:	d044      	beq.n	8006444 <_free_r+0x90>
 80063ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063be:	9001      	str	r0, [sp, #4]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f1a1 0404 	sub.w	r4, r1, #4
 80063c6:	bfb8      	it	lt
 80063c8:	18e4      	addlt	r4, r4, r3
 80063ca:	f000 f903 	bl	80065d4 <__malloc_lock>
 80063ce:	4a1e      	ldr	r2, [pc, #120]	; (8006448 <_free_r+0x94>)
 80063d0:	9801      	ldr	r0, [sp, #4]
 80063d2:	6813      	ldr	r3, [r2, #0]
 80063d4:	b933      	cbnz	r3, 80063e4 <_free_r+0x30>
 80063d6:	6063      	str	r3, [r4, #4]
 80063d8:	6014      	str	r4, [r2, #0]
 80063da:	b003      	add	sp, #12
 80063dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80063e0:	f000 b8fe 	b.w	80065e0 <__malloc_unlock>
 80063e4:	42a3      	cmp	r3, r4
 80063e6:	d908      	bls.n	80063fa <_free_r+0x46>
 80063e8:	6825      	ldr	r5, [r4, #0]
 80063ea:	1961      	adds	r1, r4, r5
 80063ec:	428b      	cmp	r3, r1
 80063ee:	bf01      	itttt	eq
 80063f0:	6819      	ldreq	r1, [r3, #0]
 80063f2:	685b      	ldreq	r3, [r3, #4]
 80063f4:	1949      	addeq	r1, r1, r5
 80063f6:	6021      	streq	r1, [r4, #0]
 80063f8:	e7ed      	b.n	80063d6 <_free_r+0x22>
 80063fa:	461a      	mov	r2, r3
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	b10b      	cbz	r3, 8006404 <_free_r+0x50>
 8006400:	42a3      	cmp	r3, r4
 8006402:	d9fa      	bls.n	80063fa <_free_r+0x46>
 8006404:	6811      	ldr	r1, [r2, #0]
 8006406:	1855      	adds	r5, r2, r1
 8006408:	42a5      	cmp	r5, r4
 800640a:	d10b      	bne.n	8006424 <_free_r+0x70>
 800640c:	6824      	ldr	r4, [r4, #0]
 800640e:	4421      	add	r1, r4
 8006410:	1854      	adds	r4, r2, r1
 8006412:	42a3      	cmp	r3, r4
 8006414:	6011      	str	r1, [r2, #0]
 8006416:	d1e0      	bne.n	80063da <_free_r+0x26>
 8006418:	681c      	ldr	r4, [r3, #0]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	6053      	str	r3, [r2, #4]
 800641e:	4421      	add	r1, r4
 8006420:	6011      	str	r1, [r2, #0]
 8006422:	e7da      	b.n	80063da <_free_r+0x26>
 8006424:	d902      	bls.n	800642c <_free_r+0x78>
 8006426:	230c      	movs	r3, #12
 8006428:	6003      	str	r3, [r0, #0]
 800642a:	e7d6      	b.n	80063da <_free_r+0x26>
 800642c:	6825      	ldr	r5, [r4, #0]
 800642e:	1961      	adds	r1, r4, r5
 8006430:	428b      	cmp	r3, r1
 8006432:	bf04      	itt	eq
 8006434:	6819      	ldreq	r1, [r3, #0]
 8006436:	685b      	ldreq	r3, [r3, #4]
 8006438:	6063      	str	r3, [r4, #4]
 800643a:	bf04      	itt	eq
 800643c:	1949      	addeq	r1, r1, r5
 800643e:	6021      	streq	r1, [r4, #0]
 8006440:	6054      	str	r4, [r2, #4]
 8006442:	e7ca      	b.n	80063da <_free_r+0x26>
 8006444:	b003      	add	sp, #12
 8006446:	bd30      	pop	{r4, r5, pc}
 8006448:	2400095c 	.word	0x2400095c

0800644c <sbrk_aligned>:
 800644c:	b570      	push	{r4, r5, r6, lr}
 800644e:	4e0e      	ldr	r6, [pc, #56]	; (8006488 <sbrk_aligned+0x3c>)
 8006450:	460c      	mov	r4, r1
 8006452:	6831      	ldr	r1, [r6, #0]
 8006454:	4605      	mov	r5, r0
 8006456:	b911      	cbnz	r1, 800645e <sbrk_aligned+0x12>
 8006458:	f000 f88c 	bl	8006574 <_sbrk_r>
 800645c:	6030      	str	r0, [r6, #0]
 800645e:	4621      	mov	r1, r4
 8006460:	4628      	mov	r0, r5
 8006462:	f000 f887 	bl	8006574 <_sbrk_r>
 8006466:	1c43      	adds	r3, r0, #1
 8006468:	d00a      	beq.n	8006480 <sbrk_aligned+0x34>
 800646a:	1cc4      	adds	r4, r0, #3
 800646c:	f024 0403 	bic.w	r4, r4, #3
 8006470:	42a0      	cmp	r0, r4
 8006472:	d007      	beq.n	8006484 <sbrk_aligned+0x38>
 8006474:	1a21      	subs	r1, r4, r0
 8006476:	4628      	mov	r0, r5
 8006478:	f000 f87c 	bl	8006574 <_sbrk_r>
 800647c:	3001      	adds	r0, #1
 800647e:	d101      	bne.n	8006484 <sbrk_aligned+0x38>
 8006480:	f04f 34ff 	mov.w	r4, #4294967295
 8006484:	4620      	mov	r0, r4
 8006486:	bd70      	pop	{r4, r5, r6, pc}
 8006488:	24000960 	.word	0x24000960

0800648c <_malloc_r>:
 800648c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006490:	1ccd      	adds	r5, r1, #3
 8006492:	f025 0503 	bic.w	r5, r5, #3
 8006496:	3508      	adds	r5, #8
 8006498:	2d0c      	cmp	r5, #12
 800649a:	bf38      	it	cc
 800649c:	250c      	movcc	r5, #12
 800649e:	2d00      	cmp	r5, #0
 80064a0:	4607      	mov	r7, r0
 80064a2:	db01      	blt.n	80064a8 <_malloc_r+0x1c>
 80064a4:	42a9      	cmp	r1, r5
 80064a6:	d905      	bls.n	80064b4 <_malloc_r+0x28>
 80064a8:	230c      	movs	r3, #12
 80064aa:	603b      	str	r3, [r7, #0]
 80064ac:	2600      	movs	r6, #0
 80064ae:	4630      	mov	r0, r6
 80064b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064b4:	4e2e      	ldr	r6, [pc, #184]	; (8006570 <_malloc_r+0xe4>)
 80064b6:	f000 f88d 	bl	80065d4 <__malloc_lock>
 80064ba:	6833      	ldr	r3, [r6, #0]
 80064bc:	461c      	mov	r4, r3
 80064be:	bb34      	cbnz	r4, 800650e <_malloc_r+0x82>
 80064c0:	4629      	mov	r1, r5
 80064c2:	4638      	mov	r0, r7
 80064c4:	f7ff ffc2 	bl	800644c <sbrk_aligned>
 80064c8:	1c43      	adds	r3, r0, #1
 80064ca:	4604      	mov	r4, r0
 80064cc:	d14d      	bne.n	800656a <_malloc_r+0xde>
 80064ce:	6834      	ldr	r4, [r6, #0]
 80064d0:	4626      	mov	r6, r4
 80064d2:	2e00      	cmp	r6, #0
 80064d4:	d140      	bne.n	8006558 <_malloc_r+0xcc>
 80064d6:	6823      	ldr	r3, [r4, #0]
 80064d8:	4631      	mov	r1, r6
 80064da:	4638      	mov	r0, r7
 80064dc:	eb04 0803 	add.w	r8, r4, r3
 80064e0:	f000 f848 	bl	8006574 <_sbrk_r>
 80064e4:	4580      	cmp	r8, r0
 80064e6:	d13a      	bne.n	800655e <_malloc_r+0xd2>
 80064e8:	6821      	ldr	r1, [r4, #0]
 80064ea:	3503      	adds	r5, #3
 80064ec:	1a6d      	subs	r5, r5, r1
 80064ee:	f025 0503 	bic.w	r5, r5, #3
 80064f2:	3508      	adds	r5, #8
 80064f4:	2d0c      	cmp	r5, #12
 80064f6:	bf38      	it	cc
 80064f8:	250c      	movcc	r5, #12
 80064fa:	4629      	mov	r1, r5
 80064fc:	4638      	mov	r0, r7
 80064fe:	f7ff ffa5 	bl	800644c <sbrk_aligned>
 8006502:	3001      	adds	r0, #1
 8006504:	d02b      	beq.n	800655e <_malloc_r+0xd2>
 8006506:	6823      	ldr	r3, [r4, #0]
 8006508:	442b      	add	r3, r5
 800650a:	6023      	str	r3, [r4, #0]
 800650c:	e00e      	b.n	800652c <_malloc_r+0xa0>
 800650e:	6822      	ldr	r2, [r4, #0]
 8006510:	1b52      	subs	r2, r2, r5
 8006512:	d41e      	bmi.n	8006552 <_malloc_r+0xc6>
 8006514:	2a0b      	cmp	r2, #11
 8006516:	d916      	bls.n	8006546 <_malloc_r+0xba>
 8006518:	1961      	adds	r1, r4, r5
 800651a:	42a3      	cmp	r3, r4
 800651c:	6025      	str	r5, [r4, #0]
 800651e:	bf18      	it	ne
 8006520:	6059      	strne	r1, [r3, #4]
 8006522:	6863      	ldr	r3, [r4, #4]
 8006524:	bf08      	it	eq
 8006526:	6031      	streq	r1, [r6, #0]
 8006528:	5162      	str	r2, [r4, r5]
 800652a:	604b      	str	r3, [r1, #4]
 800652c:	4638      	mov	r0, r7
 800652e:	f104 060b 	add.w	r6, r4, #11
 8006532:	f000 f855 	bl	80065e0 <__malloc_unlock>
 8006536:	f026 0607 	bic.w	r6, r6, #7
 800653a:	1d23      	adds	r3, r4, #4
 800653c:	1af2      	subs	r2, r6, r3
 800653e:	d0b6      	beq.n	80064ae <_malloc_r+0x22>
 8006540:	1b9b      	subs	r3, r3, r6
 8006542:	50a3      	str	r3, [r4, r2]
 8006544:	e7b3      	b.n	80064ae <_malloc_r+0x22>
 8006546:	6862      	ldr	r2, [r4, #4]
 8006548:	42a3      	cmp	r3, r4
 800654a:	bf0c      	ite	eq
 800654c:	6032      	streq	r2, [r6, #0]
 800654e:	605a      	strne	r2, [r3, #4]
 8006550:	e7ec      	b.n	800652c <_malloc_r+0xa0>
 8006552:	4623      	mov	r3, r4
 8006554:	6864      	ldr	r4, [r4, #4]
 8006556:	e7b2      	b.n	80064be <_malloc_r+0x32>
 8006558:	4634      	mov	r4, r6
 800655a:	6876      	ldr	r6, [r6, #4]
 800655c:	e7b9      	b.n	80064d2 <_malloc_r+0x46>
 800655e:	230c      	movs	r3, #12
 8006560:	603b      	str	r3, [r7, #0]
 8006562:	4638      	mov	r0, r7
 8006564:	f000 f83c 	bl	80065e0 <__malloc_unlock>
 8006568:	e7a1      	b.n	80064ae <_malloc_r+0x22>
 800656a:	6025      	str	r5, [r4, #0]
 800656c:	e7de      	b.n	800652c <_malloc_r+0xa0>
 800656e:	bf00      	nop
 8006570:	2400095c 	.word	0x2400095c

08006574 <_sbrk_r>:
 8006574:	b538      	push	{r3, r4, r5, lr}
 8006576:	4d06      	ldr	r5, [pc, #24]	; (8006590 <_sbrk_r+0x1c>)
 8006578:	2300      	movs	r3, #0
 800657a:	4604      	mov	r4, r0
 800657c:	4608      	mov	r0, r1
 800657e:	602b      	str	r3, [r5, #0]
 8006580:	f7fc f98a 	bl	8002898 <_sbrk>
 8006584:	1c43      	adds	r3, r0, #1
 8006586:	d102      	bne.n	800658e <_sbrk_r+0x1a>
 8006588:	682b      	ldr	r3, [r5, #0]
 800658a:	b103      	cbz	r3, 800658e <_sbrk_r+0x1a>
 800658c:	6023      	str	r3, [r4, #0]
 800658e:	bd38      	pop	{r3, r4, r5, pc}
 8006590:	24000964 	.word	0x24000964

08006594 <siprintf>:
 8006594:	b40e      	push	{r1, r2, r3}
 8006596:	b500      	push	{lr}
 8006598:	b09c      	sub	sp, #112	; 0x70
 800659a:	ab1d      	add	r3, sp, #116	; 0x74
 800659c:	9002      	str	r0, [sp, #8]
 800659e:	9006      	str	r0, [sp, #24]
 80065a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80065a4:	4809      	ldr	r0, [pc, #36]	; (80065cc <siprintf+0x38>)
 80065a6:	9107      	str	r1, [sp, #28]
 80065a8:	9104      	str	r1, [sp, #16]
 80065aa:	4909      	ldr	r1, [pc, #36]	; (80065d0 <siprintf+0x3c>)
 80065ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80065b0:	9105      	str	r1, [sp, #20]
 80065b2:	6800      	ldr	r0, [r0, #0]
 80065b4:	9301      	str	r3, [sp, #4]
 80065b6:	a902      	add	r1, sp, #8
 80065b8:	f000 f874 	bl	80066a4 <_svfiprintf_r>
 80065bc:	9b02      	ldr	r3, [sp, #8]
 80065be:	2200      	movs	r2, #0
 80065c0:	701a      	strb	r2, [r3, #0]
 80065c2:	b01c      	add	sp, #112	; 0x70
 80065c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80065c8:	b003      	add	sp, #12
 80065ca:	4770      	bx	lr
 80065cc:	2400016c 	.word	0x2400016c
 80065d0:	ffff0208 	.word	0xffff0208

080065d4 <__malloc_lock>:
 80065d4:	4801      	ldr	r0, [pc, #4]	; (80065dc <__malloc_lock+0x8>)
 80065d6:	f7ff bed5 	b.w	8006384 <__retarget_lock_acquire_recursive>
 80065da:	bf00      	nop
 80065dc:	24000958 	.word	0x24000958

080065e0 <__malloc_unlock>:
 80065e0:	4801      	ldr	r0, [pc, #4]	; (80065e8 <__malloc_unlock+0x8>)
 80065e2:	f7ff bed0 	b.w	8006386 <__retarget_lock_release_recursive>
 80065e6:	bf00      	nop
 80065e8:	24000958 	.word	0x24000958

080065ec <__ssputs_r>:
 80065ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065f0:	688e      	ldr	r6, [r1, #8]
 80065f2:	429e      	cmp	r6, r3
 80065f4:	4682      	mov	sl, r0
 80065f6:	460c      	mov	r4, r1
 80065f8:	4690      	mov	r8, r2
 80065fa:	461f      	mov	r7, r3
 80065fc:	d838      	bhi.n	8006670 <__ssputs_r+0x84>
 80065fe:	898a      	ldrh	r2, [r1, #12]
 8006600:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006604:	d032      	beq.n	800666c <__ssputs_r+0x80>
 8006606:	6825      	ldr	r5, [r4, #0]
 8006608:	6909      	ldr	r1, [r1, #16]
 800660a:	eba5 0901 	sub.w	r9, r5, r1
 800660e:	6965      	ldr	r5, [r4, #20]
 8006610:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006614:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006618:	3301      	adds	r3, #1
 800661a:	444b      	add	r3, r9
 800661c:	106d      	asrs	r5, r5, #1
 800661e:	429d      	cmp	r5, r3
 8006620:	bf38      	it	cc
 8006622:	461d      	movcc	r5, r3
 8006624:	0553      	lsls	r3, r2, #21
 8006626:	d531      	bpl.n	800668c <__ssputs_r+0xa0>
 8006628:	4629      	mov	r1, r5
 800662a:	f7ff ff2f 	bl	800648c <_malloc_r>
 800662e:	4606      	mov	r6, r0
 8006630:	b950      	cbnz	r0, 8006648 <__ssputs_r+0x5c>
 8006632:	230c      	movs	r3, #12
 8006634:	f8ca 3000 	str.w	r3, [sl]
 8006638:	89a3      	ldrh	r3, [r4, #12]
 800663a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800663e:	81a3      	strh	r3, [r4, #12]
 8006640:	f04f 30ff 	mov.w	r0, #4294967295
 8006644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006648:	6921      	ldr	r1, [r4, #16]
 800664a:	464a      	mov	r2, r9
 800664c:	f7ff fe9c 	bl	8006388 <memcpy>
 8006650:	89a3      	ldrh	r3, [r4, #12]
 8006652:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800665a:	81a3      	strh	r3, [r4, #12]
 800665c:	6126      	str	r6, [r4, #16]
 800665e:	6165      	str	r5, [r4, #20]
 8006660:	444e      	add	r6, r9
 8006662:	eba5 0509 	sub.w	r5, r5, r9
 8006666:	6026      	str	r6, [r4, #0]
 8006668:	60a5      	str	r5, [r4, #8]
 800666a:	463e      	mov	r6, r7
 800666c:	42be      	cmp	r6, r7
 800666e:	d900      	bls.n	8006672 <__ssputs_r+0x86>
 8006670:	463e      	mov	r6, r7
 8006672:	6820      	ldr	r0, [r4, #0]
 8006674:	4632      	mov	r2, r6
 8006676:	4641      	mov	r1, r8
 8006678:	f000 faa8 	bl	8006bcc <memmove>
 800667c:	68a3      	ldr	r3, [r4, #8]
 800667e:	1b9b      	subs	r3, r3, r6
 8006680:	60a3      	str	r3, [r4, #8]
 8006682:	6823      	ldr	r3, [r4, #0]
 8006684:	4433      	add	r3, r6
 8006686:	6023      	str	r3, [r4, #0]
 8006688:	2000      	movs	r0, #0
 800668a:	e7db      	b.n	8006644 <__ssputs_r+0x58>
 800668c:	462a      	mov	r2, r5
 800668e:	f000 fab7 	bl	8006c00 <_realloc_r>
 8006692:	4606      	mov	r6, r0
 8006694:	2800      	cmp	r0, #0
 8006696:	d1e1      	bne.n	800665c <__ssputs_r+0x70>
 8006698:	6921      	ldr	r1, [r4, #16]
 800669a:	4650      	mov	r0, sl
 800669c:	f7ff fe8a 	bl	80063b4 <_free_r>
 80066a0:	e7c7      	b.n	8006632 <__ssputs_r+0x46>
	...

080066a4 <_svfiprintf_r>:
 80066a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066a8:	4698      	mov	r8, r3
 80066aa:	898b      	ldrh	r3, [r1, #12]
 80066ac:	061b      	lsls	r3, r3, #24
 80066ae:	b09d      	sub	sp, #116	; 0x74
 80066b0:	4607      	mov	r7, r0
 80066b2:	460d      	mov	r5, r1
 80066b4:	4614      	mov	r4, r2
 80066b6:	d50e      	bpl.n	80066d6 <_svfiprintf_r+0x32>
 80066b8:	690b      	ldr	r3, [r1, #16]
 80066ba:	b963      	cbnz	r3, 80066d6 <_svfiprintf_r+0x32>
 80066bc:	2140      	movs	r1, #64	; 0x40
 80066be:	f7ff fee5 	bl	800648c <_malloc_r>
 80066c2:	6028      	str	r0, [r5, #0]
 80066c4:	6128      	str	r0, [r5, #16]
 80066c6:	b920      	cbnz	r0, 80066d2 <_svfiprintf_r+0x2e>
 80066c8:	230c      	movs	r3, #12
 80066ca:	603b      	str	r3, [r7, #0]
 80066cc:	f04f 30ff 	mov.w	r0, #4294967295
 80066d0:	e0d1      	b.n	8006876 <_svfiprintf_r+0x1d2>
 80066d2:	2340      	movs	r3, #64	; 0x40
 80066d4:	616b      	str	r3, [r5, #20]
 80066d6:	2300      	movs	r3, #0
 80066d8:	9309      	str	r3, [sp, #36]	; 0x24
 80066da:	2320      	movs	r3, #32
 80066dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80066e4:	2330      	movs	r3, #48	; 0x30
 80066e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006890 <_svfiprintf_r+0x1ec>
 80066ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066ee:	f04f 0901 	mov.w	r9, #1
 80066f2:	4623      	mov	r3, r4
 80066f4:	469a      	mov	sl, r3
 80066f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066fa:	b10a      	cbz	r2, 8006700 <_svfiprintf_r+0x5c>
 80066fc:	2a25      	cmp	r2, #37	; 0x25
 80066fe:	d1f9      	bne.n	80066f4 <_svfiprintf_r+0x50>
 8006700:	ebba 0b04 	subs.w	fp, sl, r4
 8006704:	d00b      	beq.n	800671e <_svfiprintf_r+0x7a>
 8006706:	465b      	mov	r3, fp
 8006708:	4622      	mov	r2, r4
 800670a:	4629      	mov	r1, r5
 800670c:	4638      	mov	r0, r7
 800670e:	f7ff ff6d 	bl	80065ec <__ssputs_r>
 8006712:	3001      	adds	r0, #1
 8006714:	f000 80aa 	beq.w	800686c <_svfiprintf_r+0x1c8>
 8006718:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800671a:	445a      	add	r2, fp
 800671c:	9209      	str	r2, [sp, #36]	; 0x24
 800671e:	f89a 3000 	ldrb.w	r3, [sl]
 8006722:	2b00      	cmp	r3, #0
 8006724:	f000 80a2 	beq.w	800686c <_svfiprintf_r+0x1c8>
 8006728:	2300      	movs	r3, #0
 800672a:	f04f 32ff 	mov.w	r2, #4294967295
 800672e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006732:	f10a 0a01 	add.w	sl, sl, #1
 8006736:	9304      	str	r3, [sp, #16]
 8006738:	9307      	str	r3, [sp, #28]
 800673a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800673e:	931a      	str	r3, [sp, #104]	; 0x68
 8006740:	4654      	mov	r4, sl
 8006742:	2205      	movs	r2, #5
 8006744:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006748:	4851      	ldr	r0, [pc, #324]	; (8006890 <_svfiprintf_r+0x1ec>)
 800674a:	f7f9 fdc9 	bl	80002e0 <memchr>
 800674e:	9a04      	ldr	r2, [sp, #16]
 8006750:	b9d8      	cbnz	r0, 800678a <_svfiprintf_r+0xe6>
 8006752:	06d0      	lsls	r0, r2, #27
 8006754:	bf44      	itt	mi
 8006756:	2320      	movmi	r3, #32
 8006758:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800675c:	0711      	lsls	r1, r2, #28
 800675e:	bf44      	itt	mi
 8006760:	232b      	movmi	r3, #43	; 0x2b
 8006762:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006766:	f89a 3000 	ldrb.w	r3, [sl]
 800676a:	2b2a      	cmp	r3, #42	; 0x2a
 800676c:	d015      	beq.n	800679a <_svfiprintf_r+0xf6>
 800676e:	9a07      	ldr	r2, [sp, #28]
 8006770:	4654      	mov	r4, sl
 8006772:	2000      	movs	r0, #0
 8006774:	f04f 0c0a 	mov.w	ip, #10
 8006778:	4621      	mov	r1, r4
 800677a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800677e:	3b30      	subs	r3, #48	; 0x30
 8006780:	2b09      	cmp	r3, #9
 8006782:	d94e      	bls.n	8006822 <_svfiprintf_r+0x17e>
 8006784:	b1b0      	cbz	r0, 80067b4 <_svfiprintf_r+0x110>
 8006786:	9207      	str	r2, [sp, #28]
 8006788:	e014      	b.n	80067b4 <_svfiprintf_r+0x110>
 800678a:	eba0 0308 	sub.w	r3, r0, r8
 800678e:	fa09 f303 	lsl.w	r3, r9, r3
 8006792:	4313      	orrs	r3, r2
 8006794:	9304      	str	r3, [sp, #16]
 8006796:	46a2      	mov	sl, r4
 8006798:	e7d2      	b.n	8006740 <_svfiprintf_r+0x9c>
 800679a:	9b03      	ldr	r3, [sp, #12]
 800679c:	1d19      	adds	r1, r3, #4
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	9103      	str	r1, [sp, #12]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	bfbb      	ittet	lt
 80067a6:	425b      	neglt	r3, r3
 80067a8:	f042 0202 	orrlt.w	r2, r2, #2
 80067ac:	9307      	strge	r3, [sp, #28]
 80067ae:	9307      	strlt	r3, [sp, #28]
 80067b0:	bfb8      	it	lt
 80067b2:	9204      	strlt	r2, [sp, #16]
 80067b4:	7823      	ldrb	r3, [r4, #0]
 80067b6:	2b2e      	cmp	r3, #46	; 0x2e
 80067b8:	d10c      	bne.n	80067d4 <_svfiprintf_r+0x130>
 80067ba:	7863      	ldrb	r3, [r4, #1]
 80067bc:	2b2a      	cmp	r3, #42	; 0x2a
 80067be:	d135      	bne.n	800682c <_svfiprintf_r+0x188>
 80067c0:	9b03      	ldr	r3, [sp, #12]
 80067c2:	1d1a      	adds	r2, r3, #4
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	9203      	str	r2, [sp, #12]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	bfb8      	it	lt
 80067cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80067d0:	3402      	adds	r4, #2
 80067d2:	9305      	str	r3, [sp, #20]
 80067d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80068a0 <_svfiprintf_r+0x1fc>
 80067d8:	7821      	ldrb	r1, [r4, #0]
 80067da:	2203      	movs	r2, #3
 80067dc:	4650      	mov	r0, sl
 80067de:	f7f9 fd7f 	bl	80002e0 <memchr>
 80067e2:	b140      	cbz	r0, 80067f6 <_svfiprintf_r+0x152>
 80067e4:	2340      	movs	r3, #64	; 0x40
 80067e6:	eba0 000a 	sub.w	r0, r0, sl
 80067ea:	fa03 f000 	lsl.w	r0, r3, r0
 80067ee:	9b04      	ldr	r3, [sp, #16]
 80067f0:	4303      	orrs	r3, r0
 80067f2:	3401      	adds	r4, #1
 80067f4:	9304      	str	r3, [sp, #16]
 80067f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067fa:	4826      	ldr	r0, [pc, #152]	; (8006894 <_svfiprintf_r+0x1f0>)
 80067fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006800:	2206      	movs	r2, #6
 8006802:	f7f9 fd6d 	bl	80002e0 <memchr>
 8006806:	2800      	cmp	r0, #0
 8006808:	d038      	beq.n	800687c <_svfiprintf_r+0x1d8>
 800680a:	4b23      	ldr	r3, [pc, #140]	; (8006898 <_svfiprintf_r+0x1f4>)
 800680c:	bb1b      	cbnz	r3, 8006856 <_svfiprintf_r+0x1b2>
 800680e:	9b03      	ldr	r3, [sp, #12]
 8006810:	3307      	adds	r3, #7
 8006812:	f023 0307 	bic.w	r3, r3, #7
 8006816:	3308      	adds	r3, #8
 8006818:	9303      	str	r3, [sp, #12]
 800681a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800681c:	4433      	add	r3, r6
 800681e:	9309      	str	r3, [sp, #36]	; 0x24
 8006820:	e767      	b.n	80066f2 <_svfiprintf_r+0x4e>
 8006822:	fb0c 3202 	mla	r2, ip, r2, r3
 8006826:	460c      	mov	r4, r1
 8006828:	2001      	movs	r0, #1
 800682a:	e7a5      	b.n	8006778 <_svfiprintf_r+0xd4>
 800682c:	2300      	movs	r3, #0
 800682e:	3401      	adds	r4, #1
 8006830:	9305      	str	r3, [sp, #20]
 8006832:	4619      	mov	r1, r3
 8006834:	f04f 0c0a 	mov.w	ip, #10
 8006838:	4620      	mov	r0, r4
 800683a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800683e:	3a30      	subs	r2, #48	; 0x30
 8006840:	2a09      	cmp	r2, #9
 8006842:	d903      	bls.n	800684c <_svfiprintf_r+0x1a8>
 8006844:	2b00      	cmp	r3, #0
 8006846:	d0c5      	beq.n	80067d4 <_svfiprintf_r+0x130>
 8006848:	9105      	str	r1, [sp, #20]
 800684a:	e7c3      	b.n	80067d4 <_svfiprintf_r+0x130>
 800684c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006850:	4604      	mov	r4, r0
 8006852:	2301      	movs	r3, #1
 8006854:	e7f0      	b.n	8006838 <_svfiprintf_r+0x194>
 8006856:	ab03      	add	r3, sp, #12
 8006858:	9300      	str	r3, [sp, #0]
 800685a:	462a      	mov	r2, r5
 800685c:	4b0f      	ldr	r3, [pc, #60]	; (800689c <_svfiprintf_r+0x1f8>)
 800685e:	a904      	add	r1, sp, #16
 8006860:	4638      	mov	r0, r7
 8006862:	f3af 8000 	nop.w
 8006866:	1c42      	adds	r2, r0, #1
 8006868:	4606      	mov	r6, r0
 800686a:	d1d6      	bne.n	800681a <_svfiprintf_r+0x176>
 800686c:	89ab      	ldrh	r3, [r5, #12]
 800686e:	065b      	lsls	r3, r3, #25
 8006870:	f53f af2c 	bmi.w	80066cc <_svfiprintf_r+0x28>
 8006874:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006876:	b01d      	add	sp, #116	; 0x74
 8006878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800687c:	ab03      	add	r3, sp, #12
 800687e:	9300      	str	r3, [sp, #0]
 8006880:	462a      	mov	r2, r5
 8006882:	4b06      	ldr	r3, [pc, #24]	; (800689c <_svfiprintf_r+0x1f8>)
 8006884:	a904      	add	r1, sp, #16
 8006886:	4638      	mov	r0, r7
 8006888:	f000 f87a 	bl	8006980 <_printf_i>
 800688c:	e7eb      	b.n	8006866 <_svfiprintf_r+0x1c2>
 800688e:	bf00      	nop
 8006890:	0802a578 	.word	0x0802a578
 8006894:	0802a582 	.word	0x0802a582
 8006898:	00000000 	.word	0x00000000
 800689c:	080065ed 	.word	0x080065ed
 80068a0:	0802a57e 	.word	0x0802a57e

080068a4 <_printf_common>:
 80068a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068a8:	4616      	mov	r6, r2
 80068aa:	4699      	mov	r9, r3
 80068ac:	688a      	ldr	r2, [r1, #8]
 80068ae:	690b      	ldr	r3, [r1, #16]
 80068b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80068b4:	4293      	cmp	r3, r2
 80068b6:	bfb8      	it	lt
 80068b8:	4613      	movlt	r3, r2
 80068ba:	6033      	str	r3, [r6, #0]
 80068bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80068c0:	4607      	mov	r7, r0
 80068c2:	460c      	mov	r4, r1
 80068c4:	b10a      	cbz	r2, 80068ca <_printf_common+0x26>
 80068c6:	3301      	adds	r3, #1
 80068c8:	6033      	str	r3, [r6, #0]
 80068ca:	6823      	ldr	r3, [r4, #0]
 80068cc:	0699      	lsls	r1, r3, #26
 80068ce:	bf42      	ittt	mi
 80068d0:	6833      	ldrmi	r3, [r6, #0]
 80068d2:	3302      	addmi	r3, #2
 80068d4:	6033      	strmi	r3, [r6, #0]
 80068d6:	6825      	ldr	r5, [r4, #0]
 80068d8:	f015 0506 	ands.w	r5, r5, #6
 80068dc:	d106      	bne.n	80068ec <_printf_common+0x48>
 80068de:	f104 0a19 	add.w	sl, r4, #25
 80068e2:	68e3      	ldr	r3, [r4, #12]
 80068e4:	6832      	ldr	r2, [r6, #0]
 80068e6:	1a9b      	subs	r3, r3, r2
 80068e8:	42ab      	cmp	r3, r5
 80068ea:	dc26      	bgt.n	800693a <_printf_common+0x96>
 80068ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80068f0:	1e13      	subs	r3, r2, #0
 80068f2:	6822      	ldr	r2, [r4, #0]
 80068f4:	bf18      	it	ne
 80068f6:	2301      	movne	r3, #1
 80068f8:	0692      	lsls	r2, r2, #26
 80068fa:	d42b      	bmi.n	8006954 <_printf_common+0xb0>
 80068fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006900:	4649      	mov	r1, r9
 8006902:	4638      	mov	r0, r7
 8006904:	47c0      	blx	r8
 8006906:	3001      	adds	r0, #1
 8006908:	d01e      	beq.n	8006948 <_printf_common+0xa4>
 800690a:	6823      	ldr	r3, [r4, #0]
 800690c:	68e5      	ldr	r5, [r4, #12]
 800690e:	6832      	ldr	r2, [r6, #0]
 8006910:	f003 0306 	and.w	r3, r3, #6
 8006914:	2b04      	cmp	r3, #4
 8006916:	bf08      	it	eq
 8006918:	1aad      	subeq	r5, r5, r2
 800691a:	68a3      	ldr	r3, [r4, #8]
 800691c:	6922      	ldr	r2, [r4, #16]
 800691e:	bf0c      	ite	eq
 8006920:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006924:	2500      	movne	r5, #0
 8006926:	4293      	cmp	r3, r2
 8006928:	bfc4      	itt	gt
 800692a:	1a9b      	subgt	r3, r3, r2
 800692c:	18ed      	addgt	r5, r5, r3
 800692e:	2600      	movs	r6, #0
 8006930:	341a      	adds	r4, #26
 8006932:	42b5      	cmp	r5, r6
 8006934:	d11a      	bne.n	800696c <_printf_common+0xc8>
 8006936:	2000      	movs	r0, #0
 8006938:	e008      	b.n	800694c <_printf_common+0xa8>
 800693a:	2301      	movs	r3, #1
 800693c:	4652      	mov	r2, sl
 800693e:	4649      	mov	r1, r9
 8006940:	4638      	mov	r0, r7
 8006942:	47c0      	blx	r8
 8006944:	3001      	adds	r0, #1
 8006946:	d103      	bne.n	8006950 <_printf_common+0xac>
 8006948:	f04f 30ff 	mov.w	r0, #4294967295
 800694c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006950:	3501      	adds	r5, #1
 8006952:	e7c6      	b.n	80068e2 <_printf_common+0x3e>
 8006954:	18e1      	adds	r1, r4, r3
 8006956:	1c5a      	adds	r2, r3, #1
 8006958:	2030      	movs	r0, #48	; 0x30
 800695a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800695e:	4422      	add	r2, r4
 8006960:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006964:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006968:	3302      	adds	r3, #2
 800696a:	e7c7      	b.n	80068fc <_printf_common+0x58>
 800696c:	2301      	movs	r3, #1
 800696e:	4622      	mov	r2, r4
 8006970:	4649      	mov	r1, r9
 8006972:	4638      	mov	r0, r7
 8006974:	47c0      	blx	r8
 8006976:	3001      	adds	r0, #1
 8006978:	d0e6      	beq.n	8006948 <_printf_common+0xa4>
 800697a:	3601      	adds	r6, #1
 800697c:	e7d9      	b.n	8006932 <_printf_common+0x8e>
	...

08006980 <_printf_i>:
 8006980:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006984:	7e0f      	ldrb	r7, [r1, #24]
 8006986:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006988:	2f78      	cmp	r7, #120	; 0x78
 800698a:	4691      	mov	r9, r2
 800698c:	4680      	mov	r8, r0
 800698e:	460c      	mov	r4, r1
 8006990:	469a      	mov	sl, r3
 8006992:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006996:	d807      	bhi.n	80069a8 <_printf_i+0x28>
 8006998:	2f62      	cmp	r7, #98	; 0x62
 800699a:	d80a      	bhi.n	80069b2 <_printf_i+0x32>
 800699c:	2f00      	cmp	r7, #0
 800699e:	f000 80d8 	beq.w	8006b52 <_printf_i+0x1d2>
 80069a2:	2f58      	cmp	r7, #88	; 0x58
 80069a4:	f000 80a3 	beq.w	8006aee <_printf_i+0x16e>
 80069a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80069b0:	e03a      	b.n	8006a28 <_printf_i+0xa8>
 80069b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80069b6:	2b15      	cmp	r3, #21
 80069b8:	d8f6      	bhi.n	80069a8 <_printf_i+0x28>
 80069ba:	a101      	add	r1, pc, #4	; (adr r1, 80069c0 <_printf_i+0x40>)
 80069bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069c0:	08006a19 	.word	0x08006a19
 80069c4:	08006a2d 	.word	0x08006a2d
 80069c8:	080069a9 	.word	0x080069a9
 80069cc:	080069a9 	.word	0x080069a9
 80069d0:	080069a9 	.word	0x080069a9
 80069d4:	080069a9 	.word	0x080069a9
 80069d8:	08006a2d 	.word	0x08006a2d
 80069dc:	080069a9 	.word	0x080069a9
 80069e0:	080069a9 	.word	0x080069a9
 80069e4:	080069a9 	.word	0x080069a9
 80069e8:	080069a9 	.word	0x080069a9
 80069ec:	08006b39 	.word	0x08006b39
 80069f0:	08006a5d 	.word	0x08006a5d
 80069f4:	08006b1b 	.word	0x08006b1b
 80069f8:	080069a9 	.word	0x080069a9
 80069fc:	080069a9 	.word	0x080069a9
 8006a00:	08006b5b 	.word	0x08006b5b
 8006a04:	080069a9 	.word	0x080069a9
 8006a08:	08006a5d 	.word	0x08006a5d
 8006a0c:	080069a9 	.word	0x080069a9
 8006a10:	080069a9 	.word	0x080069a9
 8006a14:	08006b23 	.word	0x08006b23
 8006a18:	682b      	ldr	r3, [r5, #0]
 8006a1a:	1d1a      	adds	r2, r3, #4
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	602a      	str	r2, [r5, #0]
 8006a20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e0a3      	b.n	8006b74 <_printf_i+0x1f4>
 8006a2c:	6820      	ldr	r0, [r4, #0]
 8006a2e:	6829      	ldr	r1, [r5, #0]
 8006a30:	0606      	lsls	r6, r0, #24
 8006a32:	f101 0304 	add.w	r3, r1, #4
 8006a36:	d50a      	bpl.n	8006a4e <_printf_i+0xce>
 8006a38:	680e      	ldr	r6, [r1, #0]
 8006a3a:	602b      	str	r3, [r5, #0]
 8006a3c:	2e00      	cmp	r6, #0
 8006a3e:	da03      	bge.n	8006a48 <_printf_i+0xc8>
 8006a40:	232d      	movs	r3, #45	; 0x2d
 8006a42:	4276      	negs	r6, r6
 8006a44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a48:	485e      	ldr	r0, [pc, #376]	; (8006bc4 <_printf_i+0x244>)
 8006a4a:	230a      	movs	r3, #10
 8006a4c:	e019      	b.n	8006a82 <_printf_i+0x102>
 8006a4e:	680e      	ldr	r6, [r1, #0]
 8006a50:	602b      	str	r3, [r5, #0]
 8006a52:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a56:	bf18      	it	ne
 8006a58:	b236      	sxthne	r6, r6
 8006a5a:	e7ef      	b.n	8006a3c <_printf_i+0xbc>
 8006a5c:	682b      	ldr	r3, [r5, #0]
 8006a5e:	6820      	ldr	r0, [r4, #0]
 8006a60:	1d19      	adds	r1, r3, #4
 8006a62:	6029      	str	r1, [r5, #0]
 8006a64:	0601      	lsls	r1, r0, #24
 8006a66:	d501      	bpl.n	8006a6c <_printf_i+0xec>
 8006a68:	681e      	ldr	r6, [r3, #0]
 8006a6a:	e002      	b.n	8006a72 <_printf_i+0xf2>
 8006a6c:	0646      	lsls	r6, r0, #25
 8006a6e:	d5fb      	bpl.n	8006a68 <_printf_i+0xe8>
 8006a70:	881e      	ldrh	r6, [r3, #0]
 8006a72:	4854      	ldr	r0, [pc, #336]	; (8006bc4 <_printf_i+0x244>)
 8006a74:	2f6f      	cmp	r7, #111	; 0x6f
 8006a76:	bf0c      	ite	eq
 8006a78:	2308      	moveq	r3, #8
 8006a7a:	230a      	movne	r3, #10
 8006a7c:	2100      	movs	r1, #0
 8006a7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a82:	6865      	ldr	r5, [r4, #4]
 8006a84:	60a5      	str	r5, [r4, #8]
 8006a86:	2d00      	cmp	r5, #0
 8006a88:	bfa2      	ittt	ge
 8006a8a:	6821      	ldrge	r1, [r4, #0]
 8006a8c:	f021 0104 	bicge.w	r1, r1, #4
 8006a90:	6021      	strge	r1, [r4, #0]
 8006a92:	b90e      	cbnz	r6, 8006a98 <_printf_i+0x118>
 8006a94:	2d00      	cmp	r5, #0
 8006a96:	d04d      	beq.n	8006b34 <_printf_i+0x1b4>
 8006a98:	4615      	mov	r5, r2
 8006a9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a9e:	fb03 6711 	mls	r7, r3, r1, r6
 8006aa2:	5dc7      	ldrb	r7, [r0, r7]
 8006aa4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006aa8:	4637      	mov	r7, r6
 8006aaa:	42bb      	cmp	r3, r7
 8006aac:	460e      	mov	r6, r1
 8006aae:	d9f4      	bls.n	8006a9a <_printf_i+0x11a>
 8006ab0:	2b08      	cmp	r3, #8
 8006ab2:	d10b      	bne.n	8006acc <_printf_i+0x14c>
 8006ab4:	6823      	ldr	r3, [r4, #0]
 8006ab6:	07de      	lsls	r6, r3, #31
 8006ab8:	d508      	bpl.n	8006acc <_printf_i+0x14c>
 8006aba:	6923      	ldr	r3, [r4, #16]
 8006abc:	6861      	ldr	r1, [r4, #4]
 8006abe:	4299      	cmp	r1, r3
 8006ac0:	bfde      	ittt	le
 8006ac2:	2330      	movle	r3, #48	; 0x30
 8006ac4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ac8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006acc:	1b52      	subs	r2, r2, r5
 8006ace:	6122      	str	r2, [r4, #16]
 8006ad0:	f8cd a000 	str.w	sl, [sp]
 8006ad4:	464b      	mov	r3, r9
 8006ad6:	aa03      	add	r2, sp, #12
 8006ad8:	4621      	mov	r1, r4
 8006ada:	4640      	mov	r0, r8
 8006adc:	f7ff fee2 	bl	80068a4 <_printf_common>
 8006ae0:	3001      	adds	r0, #1
 8006ae2:	d14c      	bne.n	8006b7e <_printf_i+0x1fe>
 8006ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ae8:	b004      	add	sp, #16
 8006aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aee:	4835      	ldr	r0, [pc, #212]	; (8006bc4 <_printf_i+0x244>)
 8006af0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006af4:	6829      	ldr	r1, [r5, #0]
 8006af6:	6823      	ldr	r3, [r4, #0]
 8006af8:	f851 6b04 	ldr.w	r6, [r1], #4
 8006afc:	6029      	str	r1, [r5, #0]
 8006afe:	061d      	lsls	r5, r3, #24
 8006b00:	d514      	bpl.n	8006b2c <_printf_i+0x1ac>
 8006b02:	07df      	lsls	r7, r3, #31
 8006b04:	bf44      	itt	mi
 8006b06:	f043 0320 	orrmi.w	r3, r3, #32
 8006b0a:	6023      	strmi	r3, [r4, #0]
 8006b0c:	b91e      	cbnz	r6, 8006b16 <_printf_i+0x196>
 8006b0e:	6823      	ldr	r3, [r4, #0]
 8006b10:	f023 0320 	bic.w	r3, r3, #32
 8006b14:	6023      	str	r3, [r4, #0]
 8006b16:	2310      	movs	r3, #16
 8006b18:	e7b0      	b.n	8006a7c <_printf_i+0xfc>
 8006b1a:	6823      	ldr	r3, [r4, #0]
 8006b1c:	f043 0320 	orr.w	r3, r3, #32
 8006b20:	6023      	str	r3, [r4, #0]
 8006b22:	2378      	movs	r3, #120	; 0x78
 8006b24:	4828      	ldr	r0, [pc, #160]	; (8006bc8 <_printf_i+0x248>)
 8006b26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b2a:	e7e3      	b.n	8006af4 <_printf_i+0x174>
 8006b2c:	0659      	lsls	r1, r3, #25
 8006b2e:	bf48      	it	mi
 8006b30:	b2b6      	uxthmi	r6, r6
 8006b32:	e7e6      	b.n	8006b02 <_printf_i+0x182>
 8006b34:	4615      	mov	r5, r2
 8006b36:	e7bb      	b.n	8006ab0 <_printf_i+0x130>
 8006b38:	682b      	ldr	r3, [r5, #0]
 8006b3a:	6826      	ldr	r6, [r4, #0]
 8006b3c:	6961      	ldr	r1, [r4, #20]
 8006b3e:	1d18      	adds	r0, r3, #4
 8006b40:	6028      	str	r0, [r5, #0]
 8006b42:	0635      	lsls	r5, r6, #24
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	d501      	bpl.n	8006b4c <_printf_i+0x1cc>
 8006b48:	6019      	str	r1, [r3, #0]
 8006b4a:	e002      	b.n	8006b52 <_printf_i+0x1d2>
 8006b4c:	0670      	lsls	r0, r6, #25
 8006b4e:	d5fb      	bpl.n	8006b48 <_printf_i+0x1c8>
 8006b50:	8019      	strh	r1, [r3, #0]
 8006b52:	2300      	movs	r3, #0
 8006b54:	6123      	str	r3, [r4, #16]
 8006b56:	4615      	mov	r5, r2
 8006b58:	e7ba      	b.n	8006ad0 <_printf_i+0x150>
 8006b5a:	682b      	ldr	r3, [r5, #0]
 8006b5c:	1d1a      	adds	r2, r3, #4
 8006b5e:	602a      	str	r2, [r5, #0]
 8006b60:	681d      	ldr	r5, [r3, #0]
 8006b62:	6862      	ldr	r2, [r4, #4]
 8006b64:	2100      	movs	r1, #0
 8006b66:	4628      	mov	r0, r5
 8006b68:	f7f9 fbba 	bl	80002e0 <memchr>
 8006b6c:	b108      	cbz	r0, 8006b72 <_printf_i+0x1f2>
 8006b6e:	1b40      	subs	r0, r0, r5
 8006b70:	6060      	str	r0, [r4, #4]
 8006b72:	6863      	ldr	r3, [r4, #4]
 8006b74:	6123      	str	r3, [r4, #16]
 8006b76:	2300      	movs	r3, #0
 8006b78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b7c:	e7a8      	b.n	8006ad0 <_printf_i+0x150>
 8006b7e:	6923      	ldr	r3, [r4, #16]
 8006b80:	462a      	mov	r2, r5
 8006b82:	4649      	mov	r1, r9
 8006b84:	4640      	mov	r0, r8
 8006b86:	47d0      	blx	sl
 8006b88:	3001      	adds	r0, #1
 8006b8a:	d0ab      	beq.n	8006ae4 <_printf_i+0x164>
 8006b8c:	6823      	ldr	r3, [r4, #0]
 8006b8e:	079b      	lsls	r3, r3, #30
 8006b90:	d413      	bmi.n	8006bba <_printf_i+0x23a>
 8006b92:	68e0      	ldr	r0, [r4, #12]
 8006b94:	9b03      	ldr	r3, [sp, #12]
 8006b96:	4298      	cmp	r0, r3
 8006b98:	bfb8      	it	lt
 8006b9a:	4618      	movlt	r0, r3
 8006b9c:	e7a4      	b.n	8006ae8 <_printf_i+0x168>
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	4632      	mov	r2, r6
 8006ba2:	4649      	mov	r1, r9
 8006ba4:	4640      	mov	r0, r8
 8006ba6:	47d0      	blx	sl
 8006ba8:	3001      	adds	r0, #1
 8006baa:	d09b      	beq.n	8006ae4 <_printf_i+0x164>
 8006bac:	3501      	adds	r5, #1
 8006bae:	68e3      	ldr	r3, [r4, #12]
 8006bb0:	9903      	ldr	r1, [sp, #12]
 8006bb2:	1a5b      	subs	r3, r3, r1
 8006bb4:	42ab      	cmp	r3, r5
 8006bb6:	dcf2      	bgt.n	8006b9e <_printf_i+0x21e>
 8006bb8:	e7eb      	b.n	8006b92 <_printf_i+0x212>
 8006bba:	2500      	movs	r5, #0
 8006bbc:	f104 0619 	add.w	r6, r4, #25
 8006bc0:	e7f5      	b.n	8006bae <_printf_i+0x22e>
 8006bc2:	bf00      	nop
 8006bc4:	0802a589 	.word	0x0802a589
 8006bc8:	0802a59a 	.word	0x0802a59a

08006bcc <memmove>:
 8006bcc:	4288      	cmp	r0, r1
 8006bce:	b510      	push	{r4, lr}
 8006bd0:	eb01 0402 	add.w	r4, r1, r2
 8006bd4:	d902      	bls.n	8006bdc <memmove+0x10>
 8006bd6:	4284      	cmp	r4, r0
 8006bd8:	4623      	mov	r3, r4
 8006bda:	d807      	bhi.n	8006bec <memmove+0x20>
 8006bdc:	1e43      	subs	r3, r0, #1
 8006bde:	42a1      	cmp	r1, r4
 8006be0:	d008      	beq.n	8006bf4 <memmove+0x28>
 8006be2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006be6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006bea:	e7f8      	b.n	8006bde <memmove+0x12>
 8006bec:	4402      	add	r2, r0
 8006bee:	4601      	mov	r1, r0
 8006bf0:	428a      	cmp	r2, r1
 8006bf2:	d100      	bne.n	8006bf6 <memmove+0x2a>
 8006bf4:	bd10      	pop	{r4, pc}
 8006bf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006bfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006bfe:	e7f7      	b.n	8006bf0 <memmove+0x24>

08006c00 <_realloc_r>:
 8006c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c04:	4680      	mov	r8, r0
 8006c06:	4614      	mov	r4, r2
 8006c08:	460e      	mov	r6, r1
 8006c0a:	b921      	cbnz	r1, 8006c16 <_realloc_r+0x16>
 8006c0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c10:	4611      	mov	r1, r2
 8006c12:	f7ff bc3b 	b.w	800648c <_malloc_r>
 8006c16:	b92a      	cbnz	r2, 8006c24 <_realloc_r+0x24>
 8006c18:	f7ff fbcc 	bl	80063b4 <_free_r>
 8006c1c:	4625      	mov	r5, r4
 8006c1e:	4628      	mov	r0, r5
 8006c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c24:	f000 f81b 	bl	8006c5e <_malloc_usable_size_r>
 8006c28:	4284      	cmp	r4, r0
 8006c2a:	4607      	mov	r7, r0
 8006c2c:	d802      	bhi.n	8006c34 <_realloc_r+0x34>
 8006c2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006c32:	d812      	bhi.n	8006c5a <_realloc_r+0x5a>
 8006c34:	4621      	mov	r1, r4
 8006c36:	4640      	mov	r0, r8
 8006c38:	f7ff fc28 	bl	800648c <_malloc_r>
 8006c3c:	4605      	mov	r5, r0
 8006c3e:	2800      	cmp	r0, #0
 8006c40:	d0ed      	beq.n	8006c1e <_realloc_r+0x1e>
 8006c42:	42bc      	cmp	r4, r7
 8006c44:	4622      	mov	r2, r4
 8006c46:	4631      	mov	r1, r6
 8006c48:	bf28      	it	cs
 8006c4a:	463a      	movcs	r2, r7
 8006c4c:	f7ff fb9c 	bl	8006388 <memcpy>
 8006c50:	4631      	mov	r1, r6
 8006c52:	4640      	mov	r0, r8
 8006c54:	f7ff fbae 	bl	80063b4 <_free_r>
 8006c58:	e7e1      	b.n	8006c1e <_realloc_r+0x1e>
 8006c5a:	4635      	mov	r5, r6
 8006c5c:	e7df      	b.n	8006c1e <_realloc_r+0x1e>

08006c5e <_malloc_usable_size_r>:
 8006c5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c62:	1f18      	subs	r0, r3, #4
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	bfbc      	itt	lt
 8006c68:	580b      	ldrlt	r3, [r1, r0]
 8006c6a:	18c0      	addlt	r0, r0, r3
 8006c6c:	4770      	bx	lr
	...

08006c70 <ceilf>:
 8006c70:	ee10 3a10 	vmov	r3, s0
 8006c74:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006c78:	3a7f      	subs	r2, #127	; 0x7f
 8006c7a:	2a16      	cmp	r2, #22
 8006c7c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006c80:	dc2a      	bgt.n	8006cd8 <ceilf+0x68>
 8006c82:	2a00      	cmp	r2, #0
 8006c84:	da11      	bge.n	8006caa <ceilf+0x3a>
 8006c86:	eddf 7a19 	vldr	s15, [pc, #100]	; 8006cec <ceilf+0x7c>
 8006c8a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006c8e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c96:	dd05      	ble.n	8006ca4 <ceilf+0x34>
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	db23      	blt.n	8006ce4 <ceilf+0x74>
 8006c9c:	2900      	cmp	r1, #0
 8006c9e:	bf18      	it	ne
 8006ca0:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 8006ca4:	ee00 3a10 	vmov	s0, r3
 8006ca8:	4770      	bx	lr
 8006caa:	4911      	ldr	r1, [pc, #68]	; (8006cf0 <ceilf+0x80>)
 8006cac:	4111      	asrs	r1, r2
 8006cae:	420b      	tst	r3, r1
 8006cb0:	d0fa      	beq.n	8006ca8 <ceilf+0x38>
 8006cb2:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8006cec <ceilf+0x7c>
 8006cb6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006cba:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cc2:	ddef      	ble.n	8006ca4 <ceilf+0x34>
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	bfc2      	ittt	gt
 8006cc8:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8006ccc:	fa40 f202 	asrgt.w	r2, r0, r2
 8006cd0:	189b      	addgt	r3, r3, r2
 8006cd2:	ea23 0301 	bic.w	r3, r3, r1
 8006cd6:	e7e5      	b.n	8006ca4 <ceilf+0x34>
 8006cd8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8006cdc:	d3e4      	bcc.n	8006ca8 <ceilf+0x38>
 8006cde:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006ce2:	4770      	bx	lr
 8006ce4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006ce8:	e7dc      	b.n	8006ca4 <ceilf+0x34>
 8006cea:	bf00      	nop
 8006cec:	7149f2ca 	.word	0x7149f2ca
 8006cf0:	007fffff 	.word	0x007fffff

08006cf4 <_init>:
 8006cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cf6:	bf00      	nop
 8006cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cfa:	bc08      	pop	{r3}
 8006cfc:	469e      	mov	lr, r3
 8006cfe:	4770      	bx	lr

08006d00 <_fini>:
 8006d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d02:	bf00      	nop
 8006d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d06:	bc08      	pop	{r3}
 8006d08:	469e      	mov	lr, r3
 8006d0a:	4770      	bx	lr
