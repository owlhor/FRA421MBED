
H745_STAMPR_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009488  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0004022c  08009728  08009728  00019728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08049954  08049954  0006034c  2**0
                  CONTENTS
  4 .ARM          00000008  08049954  08049954  00059954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0804995c  0804995c  0006034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0804995c  0804995c  0005995c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08049960  08049960  00059960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000028c  24000000  08049964  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  2400028c  08049bf0  0006028c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240002ec  08049c50  000602ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000998  2400034c  08049cb0  0006034c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24000ce4  08049cb0  00060ce4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0006034c  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0006037a  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001bc9c  00000000  00000000  000603bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00003481  00000000  00000000  0007c059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001318  00000000  00000000  0007f4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000e7e  00000000  00000000  000807f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003ccb0  00000000  00000000  00081676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001f472  00000000  00000000  000be326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0018b92b  00000000  00000000  000dd798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00005438  00000000  00000000  002690c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005b  00000000  00000000  0026e4fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400034c 	.word	0x2400034c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009710 	.word	0x08009710

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000350 	.word	0x24000350
 80002dc:	08009710 	.word	0x08009710

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b970 	b.w	8000678 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	460d      	mov	r5, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	460f      	mov	r7, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4694      	mov	ip, r2
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0xe2>
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	b143      	cbz	r3, 80003de <__udivmoddi4+0x2e>
 80003cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d0:	f1c3 0220 	rsb	r2, r3, #32
 80003d4:	409f      	lsls	r7, r3
 80003d6:	fa20 f202 	lsr.w	r2, r0, r2
 80003da:	4317      	orrs	r7, r2
 80003dc:	409c      	lsls	r4, r3
 80003de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003e2:	fa1f f58c 	uxth.w	r5, ip
 80003e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ea:	0c22      	lsrs	r2, r4, #16
 80003ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80003f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003f4:	fb01 f005 	mul.w	r0, r1, r5
 80003f8:	4290      	cmp	r0, r2
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000400:	f101 37ff 	add.w	r7, r1, #4294967295
 8000404:	f080 811c 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000408:	4290      	cmp	r0, r2
 800040a:	f240 8119 	bls.w	8000640 <__udivmoddi4+0x290>
 800040e:	3902      	subs	r1, #2
 8000410:	4462      	add	r2, ip
 8000412:	1a12      	subs	r2, r2, r0
 8000414:	b2a4      	uxth	r4, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000422:	fb00 f505 	mul.w	r5, r0, r5
 8000426:	42a5      	cmp	r5, r4
 8000428:	d90a      	bls.n	8000440 <__udivmoddi4+0x90>
 800042a:	eb1c 0404 	adds.w	r4, ip, r4
 800042e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000432:	f080 8107 	bcs.w	8000644 <__udivmoddi4+0x294>
 8000436:	42a5      	cmp	r5, r4
 8000438:	f240 8104 	bls.w	8000644 <__udivmoddi4+0x294>
 800043c:	4464      	add	r4, ip
 800043e:	3802      	subs	r0, #2
 8000440:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	2100      	movs	r1, #0
 8000448:	b11e      	cbz	r6, 8000452 <__udivmoddi4+0xa2>
 800044a:	40dc      	lsrs	r4, r3
 800044c:	2300      	movs	r3, #0
 800044e:	e9c6 4300 	strd	r4, r3, [r6]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0xbc>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80ed 	beq.w	800063a <__udivmoddi4+0x28a>
 8000460:	2100      	movs	r1, #0
 8000462:	e9c6 0500 	strd	r0, r5, [r6]
 8000466:	4608      	mov	r0, r1
 8000468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046c:	fab3 f183 	clz	r1, r3
 8000470:	2900      	cmp	r1, #0
 8000472:	d149      	bne.n	8000508 <__udivmoddi4+0x158>
 8000474:	42ab      	cmp	r3, r5
 8000476:	d302      	bcc.n	800047e <__udivmoddi4+0xce>
 8000478:	4282      	cmp	r2, r0
 800047a:	f200 80f8 	bhi.w	800066e <__udivmoddi4+0x2be>
 800047e:	1a84      	subs	r4, r0, r2
 8000480:	eb65 0203 	sbc.w	r2, r5, r3
 8000484:	2001      	movs	r0, #1
 8000486:	4617      	mov	r7, r2
 8000488:	2e00      	cmp	r6, #0
 800048a:	d0e2      	beq.n	8000452 <__udivmoddi4+0xa2>
 800048c:	e9c6 4700 	strd	r4, r7, [r6]
 8000490:	e7df      	b.n	8000452 <__udivmoddi4+0xa2>
 8000492:	b902      	cbnz	r2, 8000496 <__udivmoddi4+0xe6>
 8000494:	deff      	udf	#255	; 0xff
 8000496:	fab2 f382 	clz	r3, r2
 800049a:	2b00      	cmp	r3, #0
 800049c:	f040 8090 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a0:	1a8a      	subs	r2, r1, r2
 80004a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a6:	fa1f fe8c 	uxth.w	lr, ip
 80004aa:	2101      	movs	r1, #1
 80004ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80004b0:	fb07 2015 	mls	r0, r7, r5, r2
 80004b4:	0c22      	lsrs	r2, r4, #16
 80004b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ba:	fb0e f005 	mul.w	r0, lr, r5
 80004be:	4290      	cmp	r0, r2
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c2:	eb1c 0202 	adds.w	r2, ip, r2
 80004c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4290      	cmp	r0, r2
 80004ce:	f200 80cb 	bhi.w	8000668 <__udivmoddi4+0x2b8>
 80004d2:	4645      	mov	r5, r8
 80004d4:	1a12      	subs	r2, r2, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004dc:	fb07 2210 	mls	r2, r7, r0, r2
 80004e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004e4:	fb0e fe00 	mul.w	lr, lr, r0
 80004e8:	45a6      	cmp	lr, r4
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x14e>
 80004ec:	eb1c 0404 	adds.w	r4, ip, r4
 80004f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x14c>
 80004f6:	45a6      	cmp	lr, r4
 80004f8:	f200 80bb 	bhi.w	8000672 <__udivmoddi4+0x2c2>
 80004fc:	4610      	mov	r0, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000506:	e79f      	b.n	8000448 <__udivmoddi4+0x98>
 8000508:	f1c1 0720 	rsb	r7, r1, #32
 800050c:	408b      	lsls	r3, r1
 800050e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000512:	ea4c 0c03 	orr.w	ip, ip, r3
 8000516:	fa05 f401 	lsl.w	r4, r5, r1
 800051a:	fa20 f307 	lsr.w	r3, r0, r7
 800051e:	40fd      	lsrs	r5, r7
 8000520:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000524:	4323      	orrs	r3, r4
 8000526:	fbb5 f8f9 	udiv	r8, r5, r9
 800052a:	fa1f fe8c 	uxth.w	lr, ip
 800052e:	fb09 5518 	mls	r5, r9, r8, r5
 8000532:	0c1c      	lsrs	r4, r3, #16
 8000534:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000538:	fb08 f50e 	mul.w	r5, r8, lr
 800053c:	42a5      	cmp	r5, r4
 800053e:	fa02 f201 	lsl.w	r2, r2, r1
 8000542:	fa00 f001 	lsl.w	r0, r0, r1
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000550:	f080 8088 	bcs.w	8000664 <__udivmoddi4+0x2b4>
 8000554:	42a5      	cmp	r5, r4
 8000556:	f240 8085 	bls.w	8000664 <__udivmoddi4+0x2b4>
 800055a:	f1a8 0802 	sub.w	r8, r8, #2
 800055e:	4464      	add	r4, ip
 8000560:	1b64      	subs	r4, r4, r5
 8000562:	b29d      	uxth	r5, r3
 8000564:	fbb4 f3f9 	udiv	r3, r4, r9
 8000568:	fb09 4413 	mls	r4, r9, r3, r4
 800056c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000570:	fb03 fe0e 	mul.w	lr, r3, lr
 8000574:	45a6      	cmp	lr, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000580:	d26c      	bcs.n	800065c <__udivmoddi4+0x2ac>
 8000582:	45a6      	cmp	lr, r4
 8000584:	d96a      	bls.n	800065c <__udivmoddi4+0x2ac>
 8000586:	3b02      	subs	r3, #2
 8000588:	4464      	add	r4, ip
 800058a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800058e:	fba3 9502 	umull	r9, r5, r3, r2
 8000592:	eba4 040e 	sub.w	r4, r4, lr
 8000596:	42ac      	cmp	r4, r5
 8000598:	46c8      	mov	r8, r9
 800059a:	46ae      	mov	lr, r5
 800059c:	d356      	bcc.n	800064c <__udivmoddi4+0x29c>
 800059e:	d053      	beq.n	8000648 <__udivmoddi4+0x298>
 80005a0:	b156      	cbz	r6, 80005b8 <__udivmoddi4+0x208>
 80005a2:	ebb0 0208 	subs.w	r2, r0, r8
 80005a6:	eb64 040e 	sbc.w	r4, r4, lr
 80005aa:	fa04 f707 	lsl.w	r7, r4, r7
 80005ae:	40ca      	lsrs	r2, r1
 80005b0:	40cc      	lsrs	r4, r1
 80005b2:	4317      	orrs	r7, r2
 80005b4:	e9c6 7400 	strd	r7, r4, [r6]
 80005b8:	4618      	mov	r0, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c0:	f1c3 0120 	rsb	r1, r3, #32
 80005c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005c8:	fa20 f201 	lsr.w	r2, r0, r1
 80005cc:	fa25 f101 	lsr.w	r1, r5, r1
 80005d0:	409d      	lsls	r5, r3
 80005d2:	432a      	orrs	r2, r5
 80005d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005d8:	fa1f fe8c 	uxth.w	lr, ip
 80005dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80005e0:	fb07 1510 	mls	r5, r7, r0, r1
 80005e4:	0c11      	lsrs	r1, r2, #16
 80005e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ea:	fb00 f50e 	mul.w	r5, r0, lr
 80005ee:	428d      	cmp	r5, r1
 80005f0:	fa04 f403 	lsl.w	r4, r4, r3
 80005f4:	d908      	bls.n	8000608 <__udivmoddi4+0x258>
 80005f6:	eb1c 0101 	adds.w	r1, ip, r1
 80005fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80005fe:	d22f      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000600:	428d      	cmp	r5, r1
 8000602:	d92d      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000604:	3802      	subs	r0, #2
 8000606:	4461      	add	r1, ip
 8000608:	1b49      	subs	r1, r1, r5
 800060a:	b292      	uxth	r2, r2
 800060c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000610:	fb07 1115 	mls	r1, r7, r5, r1
 8000614:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000618:	fb05 f10e 	mul.w	r1, r5, lr
 800061c:	4291      	cmp	r1, r2
 800061e:	d908      	bls.n	8000632 <__udivmoddi4+0x282>
 8000620:	eb1c 0202 	adds.w	r2, ip, r2
 8000624:	f105 38ff 	add.w	r8, r5, #4294967295
 8000628:	d216      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 800062a:	4291      	cmp	r1, r2
 800062c:	d914      	bls.n	8000658 <__udivmoddi4+0x2a8>
 800062e:	3d02      	subs	r5, #2
 8000630:	4462      	add	r2, ip
 8000632:	1a52      	subs	r2, r2, r1
 8000634:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000638:	e738      	b.n	80004ac <__udivmoddi4+0xfc>
 800063a:	4631      	mov	r1, r6
 800063c:	4630      	mov	r0, r6
 800063e:	e708      	b.n	8000452 <__udivmoddi4+0xa2>
 8000640:	4639      	mov	r1, r7
 8000642:	e6e6      	b.n	8000412 <__udivmoddi4+0x62>
 8000644:	4610      	mov	r0, r2
 8000646:	e6fb      	b.n	8000440 <__udivmoddi4+0x90>
 8000648:	4548      	cmp	r0, r9
 800064a:	d2a9      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 800064c:	ebb9 0802 	subs.w	r8, r9, r2
 8000650:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000654:	3b01      	subs	r3, #1
 8000656:	e7a3      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000658:	4645      	mov	r5, r8
 800065a:	e7ea      	b.n	8000632 <__udivmoddi4+0x282>
 800065c:	462b      	mov	r3, r5
 800065e:	e794      	b.n	800058a <__udivmoddi4+0x1da>
 8000660:	4640      	mov	r0, r8
 8000662:	e7d1      	b.n	8000608 <__udivmoddi4+0x258>
 8000664:	46d0      	mov	r8, sl
 8000666:	e77b      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000668:	3d02      	subs	r5, #2
 800066a:	4462      	add	r2, ip
 800066c:	e732      	b.n	80004d4 <__udivmoddi4+0x124>
 800066e:	4608      	mov	r0, r1
 8000670:	e70a      	b.n	8000488 <__udivmoddi4+0xd8>
 8000672:	4464      	add	r4, ip
 8000674:	3802      	subs	r0, #2
 8000676:	e742      	b.n	80004fe <__udivmoddi4+0x14e>

08000678 <__aeabi_idiv0>:
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000680:	4b3d      	ldr	r3, [pc, #244]	; (8000778 <SystemInit+0xfc>)
 8000682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000686:	4a3c      	ldr	r2, [pc, #240]	; (8000778 <SystemInit+0xfc>)
 8000688:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800068c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000690:	4b39      	ldr	r3, [pc, #228]	; (8000778 <SystemInit+0xfc>)
 8000692:	691b      	ldr	r3, [r3, #16]
 8000694:	4a38      	ldr	r2, [pc, #224]	; (8000778 <SystemInit+0xfc>)
 8000696:	f043 0310 	orr.w	r3, r3, #16
 800069a:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800069c:	4b37      	ldr	r3, [pc, #220]	; (800077c <SystemInit+0x100>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f003 030f 	and.w	r3, r3, #15
 80006a4:	2b06      	cmp	r3, #6
 80006a6:	d807      	bhi.n	80006b8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006a8:	4b34      	ldr	r3, [pc, #208]	; (800077c <SystemInit+0x100>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f023 030f 	bic.w	r3, r3, #15
 80006b0:	4a32      	ldr	r2, [pc, #200]	; (800077c <SystemInit+0x100>)
 80006b2:	f043 0307 	orr.w	r3, r3, #7
 80006b6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006b8:	4b31      	ldr	r3, [pc, #196]	; (8000780 <SystemInit+0x104>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a30      	ldr	r2, [pc, #192]	; (8000780 <SystemInit+0x104>)
 80006be:	f043 0301 	orr.w	r3, r3, #1
 80006c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c4:	4b2e      	ldr	r3, [pc, #184]	; (8000780 <SystemInit+0x104>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ca:	4b2d      	ldr	r3, [pc, #180]	; (8000780 <SystemInit+0x104>)
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	492c      	ldr	r1, [pc, #176]	; (8000780 <SystemInit+0x104>)
 80006d0:	4b2c      	ldr	r3, [pc, #176]	; (8000784 <SystemInit+0x108>)
 80006d2:	4013      	ands	r3, r2
 80006d4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006d6:	4b29      	ldr	r3, [pc, #164]	; (800077c <SystemInit+0x100>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f003 0308 	and.w	r3, r3, #8
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d007      	beq.n	80006f2 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e2:	4b26      	ldr	r3, [pc, #152]	; (800077c <SystemInit+0x100>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f023 030f 	bic.w	r3, r3, #15
 80006ea:	4a24      	ldr	r2, [pc, #144]	; (800077c <SystemInit+0x100>)
 80006ec:	f043 0307 	orr.w	r3, r3, #7
 80006f0:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f2:	4b23      	ldr	r3, [pc, #140]	; (8000780 <SystemInit+0x104>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006f8:	4b21      	ldr	r3, [pc, #132]	; (8000780 <SystemInit+0x104>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006fe:	4b20      	ldr	r3, [pc, #128]	; (8000780 <SystemInit+0x104>)
 8000700:	2200      	movs	r2, #0
 8000702:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000704:	4b1e      	ldr	r3, [pc, #120]	; (8000780 <SystemInit+0x104>)
 8000706:	4a20      	ldr	r2, [pc, #128]	; (8000788 <SystemInit+0x10c>)
 8000708:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070a:	4b1d      	ldr	r3, [pc, #116]	; (8000780 <SystemInit+0x104>)
 800070c:	4a1f      	ldr	r2, [pc, #124]	; (800078c <SystemInit+0x110>)
 800070e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000710:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <SystemInit+0x104>)
 8000712:	4a1f      	ldr	r2, [pc, #124]	; (8000790 <SystemInit+0x114>)
 8000714:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000716:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800071c:	4b18      	ldr	r3, [pc, #96]	; (8000780 <SystemInit+0x104>)
 800071e:	4a1c      	ldr	r2, [pc, #112]	; (8000790 <SystemInit+0x114>)
 8000720:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000722:	4b17      	ldr	r3, [pc, #92]	; (8000780 <SystemInit+0x104>)
 8000724:	2200      	movs	r2, #0
 8000726:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000728:	4b15      	ldr	r3, [pc, #84]	; (8000780 <SystemInit+0x104>)
 800072a:	4a19      	ldr	r2, [pc, #100]	; (8000790 <SystemInit+0x114>)
 800072c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800072e:	4b14      	ldr	r3, [pc, #80]	; (8000780 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <SystemInit+0x104>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a11      	ldr	r2, [pc, #68]	; (8000780 <SystemInit+0x104>)
 800073a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800073e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <SystemInit+0x104>)
 8000742:	2200      	movs	r2, #0
 8000744:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000746:	4b13      	ldr	r3, [pc, #76]	; (8000794 <SystemInit+0x118>)
 8000748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074a:	4a12      	ldr	r2, [pc, #72]	; (8000794 <SystemInit+0x118>)
 800074c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000750:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <SystemInit+0x11c>)
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <SystemInit+0x120>)
 8000758:	4013      	ands	r3, r2
 800075a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800075e:	d202      	bcs.n	8000766 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <SystemInit+0x124>)
 8000762:	2201      	movs	r2, #1
 8000764:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <SystemInit+0x128>)
 8000768:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800076c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800076e:	bf00      	nop
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	e000ed00 	.word	0xe000ed00
 800077c:	52002000 	.word	0x52002000
 8000780:	58024400 	.word	0x58024400
 8000784:	eaf6ed7f 	.word	0xeaf6ed7f
 8000788:	02020200 	.word	0x02020200
 800078c:	01ff0000 	.word	0x01ff0000
 8000790:	01010280 	.word	0x01010280
 8000794:	580000c0 	.word	0x580000c0
 8000798:	5c001000 	.word	0x5c001000
 800079c:	ffff0000 	.word	0xffff0000
 80007a0:	51008108 	.word	0x51008108
 80007a4:	52004000 	.word	0x52004000

080007a8 <ili9486_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9486_DisplayOn(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_SLPOUT);    // Exit Sleep
 80007ac:	2011      	movs	r0, #17
 80007ae:	f000 fc93 	bl	80010d8 <LCD_IO_WriteCmd8>
  ILI9486_LCDMUTEX_POP();
  LCD_IO_Bl_OnOff(1);
 80007b2:	2001      	movs	r0, #1
 80007b4:	f000 fb9b 	bl	8000eee <LCD_IO_Bl_OnOff>
}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}

080007bc <ili9486_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9486_GetLcdPixelWidth(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  return ILI9486_SIZE_X;
 80007c0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr

080007ce <ili9486_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9486_GetLcdPixelHeight(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0
  return ILI9486_SIZE_Y;
 80007d2:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <ili9486_Init>:
  * @brief  ILI9486 initialization
  * @param  None
  * @retval None
  */
void ili9486_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  if((Is_ili9486_Initialized & ILI9486_LCD_INITIALIZED) == 0)
 80007e4:	4b33      	ldr	r3, [pc, #204]	; (80008b4 <ili9486_Init+0xd4>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	f003 0301 	and.w	r3, r3, #1
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d115      	bne.n	800081c <ili9486_Init+0x3c>
  {
    Is_ili9486_Initialized |= ILI9486_LCD_INITIALIZED;
 80007f0:	4b30      	ldr	r3, [pc, #192]	; (80008b4 <ili9486_Init+0xd4>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	b2da      	uxtb	r2, r3
 80007fa:	4b2e      	ldr	r3, [pc, #184]	; (80008b4 <ili9486_Init+0xd4>)
 80007fc:	701a      	strb	r2, [r3, #0]
    if((Is_ili9486_Initialized & ILI9486_IO_INITIALIZED) == 0)
 80007fe:	4b2d      	ldr	r3, [pc, #180]	; (80008b4 <ili9486_Init+0xd4>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	2b00      	cmp	r3, #0
 8000808:	d101      	bne.n	800080e <ili9486_Init+0x2e>
      LCD_IO_Init();
 800080a:	f000 fb7b 	bl	8000f04 <LCD_IO_Init>
    Is_ili9486_Initialized |= ILI9486_IO_INITIALIZED;
 800080e:	4b29      	ldr	r3, [pc, #164]	; (80008b4 <ili9486_Init+0xd4>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	f043 0302 	orr.w	r3, r3, #2
 8000816:	b2da      	uxtb	r2, r3
 8000818:	4b26      	ldr	r3, [pc, #152]	; (80008b4 <ili9486_Init+0xd4>)
 800081a:	701a      	strb	r2, [r3, #0]
  }
  LCD_Delay(10);
 800081c:	200a      	movs	r0, #10
 800081e:	f000 fb5b 	bl	8000ed8 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9486_SWRESET);
 8000822:	2001      	movs	r0, #1
 8000824:	f000 fc58 	bl	80010d8 <LCD_IO_WriteCmd8>
  LCD_Delay(100);
 8000828:	2064      	movs	r0, #100	; 0x64
 800082a:	f000 fb55 	bl	8000ed8 <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(ILI9486_RGB_INTERFACE, (uint8_t *)"\x00", 1); // RGB mode off (0xB0)
 800082e:	2201      	movs	r2, #1
 8000830:	4921      	ldr	r1, [pc, #132]	; (80008b8 <ili9486_Init+0xd8>)
 8000832:	20b0      	movs	r0, #176	; 0xb0
 8000834:	f001 f894 	bl	8001960 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8(ILI9486_SLPOUT);    // Exit Sleep (0x11)
 8000838:	2011      	movs	r0, #17
 800083a:	f000 fc4d 	bl	80010d8 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 800083e:	200a      	movs	r0, #10
 8000840:	f000 fb4a 	bl	8000ed8 <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(ILI9486_PIXFMT, (uint8_t *)"\x55", 1); // interface format (0x3A)
 8000844:	2201      	movs	r2, #1
 8000846:	491d      	ldr	r1, [pc, #116]	; (80008bc <ili9486_Init+0xdc>)
 8000848:	203a      	movs	r0, #58	; 0x3a
 800084a:	f001 f889 	bl	8001960 <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9486_MADCTL); LCD_IO_WriteData8(ILI9486_MAD_DATA_RIGHT_THEN_DOWN);
 800084e:	2036      	movs	r0, #54	; 0x36
 8000850:	f000 fc42 	bl	80010d8 <LCD_IO_WriteCmd8>
 8000854:	2028      	movs	r0, #40	; 0x28
 8000856:	f000 fce9 	bl	800122c <LCD_IO_WriteData8>

  LCD_IO_WriteCmd8MultipleData8(ILI9486_PWCTR3, (uint8_t *)"\x44", 1); // 0xC2
 800085a:	2201      	movs	r2, #1
 800085c:	4918      	ldr	r1, [pc, #96]	; (80008c0 <ili9486_Init+0xe0>)
 800085e:	20c2      	movs	r0, #194	; 0xc2
 8000860:	f001 f87e 	bl	8001960 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9486_VMCTR1, (uint8_t *)"\x00\x00\x00\x00", 4); // 0xC5
 8000864:	2204      	movs	r2, #4
 8000866:	4917      	ldr	r1, [pc, #92]	; (80008c4 <ili9486_Init+0xe4>)
 8000868:	20c5      	movs	r0, #197	; 0xc5
 800086a:	f001 f879 	bl	8001960 <LCD_IO_WriteCmd8MultipleData8>

  // positive gamma control (0xE0)
  LCD_IO_WriteCmd8MultipleData8(ILI9486_GMCTRP1, (uint8_t *)"\x0F\x1F\x1C\x0C\x0F\x08\x48\x98\x37\x0A\x13\x04\x11\x0D\x00", 15);
 800086e:	220f      	movs	r2, #15
 8000870:	4915      	ldr	r1, [pc, #84]	; (80008c8 <ili9486_Init+0xe8>)
 8000872:	20e0      	movs	r0, #224	; 0xe0
 8000874:	f001 f874 	bl	8001960 <LCD_IO_WriteCmd8MultipleData8>

  // negative gamma control (0xE1)
  LCD_IO_WriteCmd8MultipleData8(ILI9486_GMCTRN1, (uint8_t *)"\x0F\x32\x2E\x0B\x0D\x05\x47\x75\x37\x06\x10\x03\x24\x20\x00", 15);
 8000878:	220f      	movs	r2, #15
 800087a:	4914      	ldr	r1, [pc, #80]	; (80008cc <ili9486_Init+0xec>)
 800087c:	20e1      	movs	r0, #225	; 0xe1
 800087e:	f001 f86f 	bl	8001960 <LCD_IO_WriteCmd8MultipleData8>

  // Digital gamma control1 (0xE2)
  LCD_IO_WriteCmd8MultipleData8(ILI9486_DGCTR1, (uint8_t *)"\x0F\x32\x2E\x0B\x0D\x05\x47\x75\x37\x06\x10\x03\x24\x20\x00", 15);
 8000882:	220f      	movs	r2, #15
 8000884:	4911      	ldr	r1, [pc, #68]	; (80008cc <ili9486_Init+0xec>)
 8000886:	20e2      	movs	r0, #226	; 0xe2
 8000888:	f001 f86a 	bl	8001960 <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9486_NORON);     // Normal display on (0x13)
 800088c:	2013      	movs	r0, #19
 800088e:	f000 fc23 	bl	80010d8 <LCD_IO_WriteCmd8>
  LCD_IO_WriteCmd8(ILI9486_INVOFF);    // Display inversion off (0x20)
 8000892:	2020      	movs	r0, #32
 8000894:	f000 fc20 	bl	80010d8 <LCD_IO_WriteCmd8>
  LCD_IO_WriteCmd8(ILI9486_SLPOUT);    // Exit Sleep (0x11)
 8000898:	2011      	movs	r0, #17
 800089a:	f000 fc1d 	bl	80010d8 <LCD_IO_WriteCmd8>
  LCD_Delay(200);
 800089e:	20c8      	movs	r0, #200	; 0xc8
 80008a0:	f000 fb1a 	bl	8000ed8 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9486_DISPON);    // Display on (0x29)
 80008a4:	2029      	movs	r0, #41	; 0x29
 80008a6:	f000 fc17 	bl	80010d8 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 80008aa:	200a      	movs	r0, #10
 80008ac:	f000 fb14 	bl	8000ed8 <LCD_Delay>
}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	24000368 	.word	0x24000368
 80008b8:	08009728 	.word	0x08009728
 80008bc:	0800972c 	.word	0x0800972c
 80008c0:	08009730 	.word	0x08009730
 80008c4:	08009734 	.word	0x08009734
 80008c8:	0800973c 	.word	0x0800973c
 80008cc:	0800974c 	.word	0x0800974c

080008d0 <ili9486_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9486_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	80fb      	strh	r3, [r7, #6]
 80008da:	460b      	mov	r3, r1
 80008dc:	80bb      	strh	r3, [r7, #4]
 80008de:	4613      	mov	r3, r2
 80008e0:	807b      	strh	r3, [r7, #2]
  ILI9486_LCDMUTEX_PUSH();
  ILI9486_SETCURSOR(Xpos, Ypos);
 80008e2:	202a      	movs	r0, #42	; 0x2a
 80008e4:	f000 fbf8 	bl	80010d8 <LCD_IO_WriteCmd8>
 80008e8:	88fb      	ldrh	r3, [r7, #6]
 80008ea:	0a1b      	lsrs	r3, r3, #8
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	4618      	mov	r0, r3
 80008f2:	f000 fc9b 	bl	800122c <LCD_IO_WriteData8>
 80008f6:	88fb      	ldrh	r3, [r7, #6]
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 fc96 	bl	800122c <LCD_IO_WriteData8>
 8000900:	88fb      	ldrh	r3, [r7, #6]
 8000902:	0a1b      	lsrs	r3, r3, #8
 8000904:	b29b      	uxth	r3, r3
 8000906:	b2db      	uxtb	r3, r3
 8000908:	4618      	mov	r0, r3
 800090a:	f000 fc8f 	bl	800122c <LCD_IO_WriteData8>
 800090e:	88fb      	ldrh	r3, [r7, #6]
 8000910:	b2db      	uxtb	r3, r3
 8000912:	4618      	mov	r0, r3
 8000914:	f000 fc8a 	bl	800122c <LCD_IO_WriteData8>
 8000918:	202b      	movs	r0, #43	; 0x2b
 800091a:	f000 fbdd 	bl	80010d8 <LCD_IO_WriteCmd8>
 800091e:	88bb      	ldrh	r3, [r7, #4]
 8000920:	0a1b      	lsrs	r3, r3, #8
 8000922:	b29b      	uxth	r3, r3
 8000924:	b2db      	uxtb	r3, r3
 8000926:	4618      	mov	r0, r3
 8000928:	f000 fc80 	bl	800122c <LCD_IO_WriteData8>
 800092c:	88bb      	ldrh	r3, [r7, #4]
 800092e:	b2db      	uxtb	r3, r3
 8000930:	4618      	mov	r0, r3
 8000932:	f000 fc7b 	bl	800122c <LCD_IO_WriteData8>
 8000936:	88bb      	ldrh	r3, [r7, #4]
 8000938:	0a1b      	lsrs	r3, r3, #8
 800093a:	b29b      	uxth	r3, r3
 800093c:	b2db      	uxtb	r3, r3
 800093e:	4618      	mov	r0, r3
 8000940:	f000 fc74 	bl	800122c <LCD_IO_WriteData8>
 8000944:	88bb      	ldrh	r3, [r7, #4]
 8000946:	b2db      	uxtb	r3, r3
 8000948:	4618      	mov	r0, r3
 800094a:	f000 fc6f 	bl	800122c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_RAMWR); LCD_IO_WriteData16(RGBCode);
 800094e:	202c      	movs	r0, #44	; 0x2c
 8000950:	f000 fbc2 	bl	80010d8 <LCD_IO_WriteCmd8>
 8000954:	887b      	ldrh	r3, [r7, #2]
 8000956:	4618      	mov	r0, r3
 8000958:	f000 fd0a 	bl	8001370 <LCD_IO_WriteData16>
  ILI9486_LCDMUTEX_POP();
}
 800095c:	bf00      	nop
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <ili9486_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9486_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8000964:	b590      	push	{r4, r7, lr}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	4604      	mov	r4, r0
 800096c:	4608      	mov	r0, r1
 800096e:	4611      	mov	r1, r2
 8000970:	461a      	mov	r2, r3
 8000972:	4623      	mov	r3, r4
 8000974:	80fb      	strh	r3, [r7, #6]
 8000976:	4603      	mov	r3, r0
 8000978:	80bb      	strh	r3, [r7, #4]
 800097a:	460b      	mov	r3, r1
 800097c:	807b      	strh	r3, [r7, #2]
 800097e:	4613      	mov	r3, r2
 8000980:	803b      	strh	r3, [r7, #0]
  yStart = Ypos; yEnd = Ypos + Height - 1;
 8000982:	4a2a      	ldr	r2, [pc, #168]	; (8000a2c <ili9486_SetDisplayWindow+0xc8>)
 8000984:	88bb      	ldrh	r3, [r7, #4]
 8000986:	8013      	strh	r3, [r2, #0]
 8000988:	88ba      	ldrh	r2, [r7, #4]
 800098a:	883b      	ldrh	r3, [r7, #0]
 800098c:	4413      	add	r3, r2
 800098e:	b29b      	uxth	r3, r3
 8000990:	3b01      	subs	r3, #1
 8000992:	b29a      	uxth	r2, r3
 8000994:	4b26      	ldr	r3, [pc, #152]	; (8000a30 <ili9486_SetDisplayWindow+0xcc>)
 8000996:	801a      	strh	r2, [r3, #0]
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Width - 1);
 8000998:	202a      	movs	r0, #42	; 0x2a
 800099a:	f000 fb9d 	bl	80010d8 <LCD_IO_WriteCmd8>
 800099e:	88fb      	ldrh	r3, [r7, #6]
 80009a0:	0a1b      	lsrs	r3, r3, #8
 80009a2:	b29b      	uxth	r3, r3
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	4618      	mov	r0, r3
 80009a8:	f000 fc40 	bl	800122c <LCD_IO_WriteData8>
 80009ac:	88fb      	ldrh	r3, [r7, #6]
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	4618      	mov	r0, r3
 80009b2:	f000 fc3b 	bl	800122c <LCD_IO_WriteData8>
 80009b6:	88fa      	ldrh	r2, [r7, #6]
 80009b8:	887b      	ldrh	r3, [r7, #2]
 80009ba:	4413      	add	r3, r2
 80009bc:	3b01      	subs	r3, #1
 80009be:	121b      	asrs	r3, r3, #8
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 fc32 	bl	800122c <LCD_IO_WriteData8>
 80009c8:	88fb      	ldrh	r3, [r7, #6]
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	887b      	ldrh	r3, [r7, #2]
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	4413      	add	r3, r2
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	3b01      	subs	r3, #1
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	4618      	mov	r0, r3
 80009da:	f000 fc27 	bl	800122c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Height - 1);
 80009de:	202b      	movs	r0, #43	; 0x2b
 80009e0:	f000 fb7a 	bl	80010d8 <LCD_IO_WriteCmd8>
 80009e4:	88bb      	ldrh	r3, [r7, #4]
 80009e6:	0a1b      	lsrs	r3, r3, #8
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	4618      	mov	r0, r3
 80009ee:	f000 fc1d 	bl	800122c <LCD_IO_WriteData8>
 80009f2:	88bb      	ldrh	r3, [r7, #4]
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	4618      	mov	r0, r3
 80009f8:	f000 fc18 	bl	800122c <LCD_IO_WriteData8>
 80009fc:	88ba      	ldrh	r2, [r7, #4]
 80009fe:	883b      	ldrh	r3, [r7, #0]
 8000a00:	4413      	add	r3, r2
 8000a02:	3b01      	subs	r3, #1
 8000a04:	121b      	asrs	r3, r3, #8
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f000 fc0f 	bl	800122c <LCD_IO_WriteData8>
 8000a0e:	88bb      	ldrh	r3, [r7, #4]
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	883b      	ldrh	r3, [r7, #0]
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	4413      	add	r3, r2
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	3b01      	subs	r3, #1
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f000 fc04 	bl	800122c <LCD_IO_WriteData8>
  ILI9486_LCDMUTEX_POP();
}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd90      	pop	{r4, r7, pc}
 8000a2c:	2400036a 	.word	0x2400036a
 8000a30:	2400036c 	.word	0x2400036c

08000a34 <ili9486_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9486_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 8000a34:	b590      	push	{r4, r7, lr}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	4608      	mov	r0, r1
 8000a3e:	4611      	mov	r1, r2
 8000a40:	461a      	mov	r2, r3
 8000a42:	4623      	mov	r3, r4
 8000a44:	80fb      	strh	r3, [r7, #6]
 8000a46:	4603      	mov	r3, r0
 8000a48:	80bb      	strh	r3, [r7, #4]
 8000a4a:	460b      	mov	r3, r1
 8000a4c:	807b      	strh	r3, [r7, #2]
 8000a4e:	4613      	mov	r3, r2
 8000a50:	803b      	strh	r3, [r7, #0]
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Xsize - 1);
 8000a52:	202a      	movs	r0, #42	; 0x2a
 8000a54:	f000 fb40 	bl	80010d8 <LCD_IO_WriteCmd8>
 8000a58:	88fb      	ldrh	r3, [r7, #6]
 8000a5a:	0a1b      	lsrs	r3, r3, #8
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	4618      	mov	r0, r3
 8000a62:	f000 fbe3 	bl	800122c <LCD_IO_WriteData8>
 8000a66:	88fb      	ldrh	r3, [r7, #6]
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 fbde 	bl	800122c <LCD_IO_WriteData8>
 8000a70:	88fa      	ldrh	r2, [r7, #6]
 8000a72:	887b      	ldrh	r3, [r7, #2]
 8000a74:	4413      	add	r3, r2
 8000a76:	3b01      	subs	r3, #1
 8000a78:	121b      	asrs	r3, r3, #8
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f000 fbd5 	bl	800122c <LCD_IO_WriteData8>
 8000a82:	88fb      	ldrh	r3, [r7, #6]
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	887b      	ldrh	r3, [r7, #2]
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	4413      	add	r3, r2
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 fbca 	bl	800122c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Ysize - 1);
 8000a98:	202b      	movs	r0, #43	; 0x2b
 8000a9a:	f000 fb1d 	bl	80010d8 <LCD_IO_WriteCmd8>
 8000a9e:	88bb      	ldrh	r3, [r7, #4]
 8000aa0:	0a1b      	lsrs	r3, r3, #8
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f000 fbc0 	bl	800122c <LCD_IO_WriteData8>
 8000aac:	88bb      	ldrh	r3, [r7, #4]
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f000 fbbb 	bl	800122c <LCD_IO_WriteData8>
 8000ab6:	88ba      	ldrh	r2, [r7, #4]
 8000ab8:	883b      	ldrh	r3, [r7, #0]
 8000aba:	4413      	add	r3, r2
 8000abc:	3b01      	subs	r3, #1
 8000abe:	121b      	asrs	r3, r3, #8
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 fbb2 	bl	800122c <LCD_IO_WriteData8>
 8000ac8:	88bb      	ldrh	r3, [r7, #4]
 8000aca:	b2da      	uxtb	r2, r3
 8000acc:	883b      	ldrh	r3, [r7, #0]
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	4413      	add	r3, r2
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	3b01      	subs	r3, #1
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f000 fba7 	bl	800122c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9486_RAMWR, RGBCode, Xsize * Ysize);
 8000ade:	887b      	ldrh	r3, [r7, #2]
 8000ae0:	883a      	ldrh	r2, [r7, #0]
 8000ae2:	fb02 f303 	mul.w	r3, r2, r3
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	8b3b      	ldrh	r3, [r7, #24]
 8000aea:	4619      	mov	r1, r3
 8000aec:	202c      	movs	r0, #44	; 0x2c
 8000aee:	f000 fd69 	bl	80015c4 <LCD_IO_WriteCmd8DataFill16>
  ILI9486_LCDMUTEX_POP();
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd90      	pop	{r4, r7, pc}

08000afa <ili9486_DrawRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9486_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 8000afa:	b590      	push	{r4, r7, lr}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	4604      	mov	r4, r0
 8000b02:	4608      	mov	r0, r1
 8000b04:	4611      	mov	r1, r2
 8000b06:	461a      	mov	r2, r3
 8000b08:	4623      	mov	r3, r4
 8000b0a:	80fb      	strh	r3, [r7, #6]
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	80bb      	strh	r3, [r7, #4]
 8000b10:	460b      	mov	r3, r1
 8000b12:	807b      	strh	r3, [r7, #2]
 8000b14:	4613      	mov	r3, r2
 8000b16:	803b      	strh	r3, [r7, #0]
  ili9486_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8000b18:	883b      	ldrh	r3, [r7, #0]
 8000b1a:	887a      	ldrh	r2, [r7, #2]
 8000b1c:	88b9      	ldrh	r1, [r7, #4]
 8000b1e:	88f8      	ldrh	r0, [r7, #6]
 8000b20:	f7ff ff20 	bl	8000964 <ili9486_SetDisplayWindow>
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData16(ILI9486_RAMWR, pData, Xsize * Ysize);
 8000b24:	887b      	ldrh	r3, [r7, #2]
 8000b26:	883a      	ldrh	r2, [r7, #0]
 8000b28:	fb02 f303 	mul.w	r3, r2, r3
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	69b9      	ldr	r1, [r7, #24]
 8000b30:	202c      	movs	r0, #44	; 0x2c
 8000b32:	f001 f84f 	bl	8001bd4 <LCD_IO_WriteCmd8MultipleData16>
  ILI9486_LCDMUTEX_POP();
}
 8000b36:	bf00      	nop
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd90      	pop	{r4, r7, pc}

08000b3e <ili9486_WriteChar>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Char background Color
  * @retval None
  */
void ili9486_WriteChar(uint16_t Xpo, uint16_t Ypo, char *chr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 8000b3e:	b082      	sub	sp, #8
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	; 0x28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	603a      	str	r2, [r7, #0]
 8000b48:	637b      	str	r3, [r7, #52]	; 0x34
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	80fb      	strh	r3, [r7, #6]
 8000b4e:	460b      	mov	r3, r1
 8000b50:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9486_WriteChar(140, 50, "E", Font24, cl_ORANGE, cl_BLACK);
	 * */
	//// stored font data
	uint32_t hop32 = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t b8[4] = {0};
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
	 * c = i * rowbox -> jump to next column in next i rowloop
	 * k => jump to next row in that column
	 * */

	//// find num of bit rows per jump in fonts.c
	int rowbox = ceilf((float)(fonto.Width) / 8);
 8000b5a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000b5c:	ee07 3a90 	vmov	s15, r3
 8000b60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b64:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8000b68:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000b6c:	eeb0 0a47 	vmov.f32	s0, s14
 8000b70:	f008 fd8c 	bl	800968c <ceilf>
 8000b74:	eef0 7a40 	vmov.f32	s15, s0
 8000b78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b7c:	ee17 3a90 	vmov	r3, s15
 8000b80:	617b      	str	r3, [r7, #20]

	//// choose MSB check pos for each font size
	//// 0x80 , 0x8000 , 0x 800000
	uint32_t clif_msb = 0x80 << (8 * (rowbox - 1));
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	3b01      	subs	r3, #1
 8000b86:	00db      	lsls	r3, r3, #3
 8000b88:	2280      	movs	r2, #128	; 0x80
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	613b      	str	r3, [r7, #16]

	//// -32 to offset sync ASCII Table start " " at 32
	//// double for loop as one char table
	for(int i = 0; i < fonto.Height; i++){
 8000b90:	2300      	movs	r3, #0
 8000b92:	623b      	str	r3, [r7, #32]
 8000b94:	e060      	b.n	8000c58 <ili9486_WriteChar+0x11a>
		hop32 = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
 8000b9e:	e024      	b.n	8000bea <ili9486_WriteChar+0xac>
			b8[k] = fonto.table[((int)(*chr - 32) * fonto.Height * rowbox) + (i * rowbox) + k];
 8000ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ba2:	683a      	ldr	r2, [r7, #0]
 8000ba4:	7812      	ldrb	r2, [r2, #0]
 8000ba6:	3a20      	subs	r2, #32
 8000ba8:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 8000baa:	fb01 f202 	mul.w	r2, r1, r2
 8000bae:	6979      	ldr	r1, [r7, #20]
 8000bb0:	fb02 f101 	mul.w	r1, r2, r1
 8000bb4:	6a3a      	ldr	r2, [r7, #32]
 8000bb6:	6978      	ldr	r0, [r7, #20]
 8000bb8:	fb00 f202 	mul.w	r2, r0, r2
 8000bbc:	4411      	add	r1, r2
 8000bbe:	69fa      	ldr	r2, [r7, #28]
 8000bc0:	440a      	add	r2, r1
 8000bc2:	4413      	add	r3, r2
 8000bc4:	7819      	ldrb	r1, [r3, #0]
 8000bc6:	f107 020c 	add.w	r2, r7, #12
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	4413      	add	r3, r2
 8000bce:	460a      	mov	r2, r1
 8000bd0:	701a      	strb	r2, [r3, #0]
			hop32 = (hop32 << 8) + b8[k];
 8000bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd4:	021b      	lsls	r3, r3, #8
 8000bd6:	f107 010c 	add.w	r1, r7, #12
 8000bda:	69fa      	ldr	r2, [r7, #28]
 8000bdc:	440a      	add	r2, r1
 8000bde:	7812      	ldrb	r2, [r2, #0]
 8000be0:	4413      	add	r3, r2
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	3301      	adds	r3, #1
 8000be8:	61fb      	str	r3, [r7, #28]
 8000bea:	69fa      	ldr	r2, [r7, #28]
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	dbd6      	blt.n	8000ba0 <ili9486_WriteChar+0x62>
		}

		for(int j = 0; j < fonto.Width; j++){
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61bb      	str	r3, [r7, #24]
 8000bf6:	e027      	b.n	8000c48 <ili9486_WriteChar+0x10a>
			//// if valuein fonttable is 1
			if((hop32 << j) & clif_msb){ // buu32.b32
 8000bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bfa:	69bb      	ldr	r3, [r7, #24]
 8000bfc:	409a      	lsls	r2, r3
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	4013      	ands	r3, r2
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d00e      	beq.n	8000c24 <ili9486_WriteChar+0xe6>
				ili9486_WritePixel(Xpo + j, Ypo + i, RGB_Coder);
 8000c06:	69bb      	ldr	r3, [r7, #24]
 8000c08:	b29a      	uxth	r2, r3
 8000c0a:	88fb      	ldrh	r3, [r7, #6]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	b298      	uxth	r0, r3
 8000c10:	6a3b      	ldr	r3, [r7, #32]
 8000c12:	b29a      	uxth	r2, r3
 8000c14:	88bb      	ldrh	r3, [r7, #4]
 8000c16:	4413      	add	r3, r2
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	f7ff fe57 	bl	80008d0 <ili9486_WritePixel>
 8000c22:	e00e      	b.n	8000c42 <ili9486_WriteChar+0x104>
			}
			//// for background write
			else{
				ili9486_WritePixel(Xpo + j, Ypo + i, RGB_bg);
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	b29a      	uxth	r2, r3
 8000c28:	88fb      	ldrh	r3, [r7, #6]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	b298      	uxth	r0, r3
 8000c2e:	6a3b      	ldr	r3, [r7, #32]
 8000c30:	b29a      	uxth	r2, r3
 8000c32:	88bb      	ldrh	r3, [r7, #4]
 8000c34:	4413      	add	r3, r2
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f7ff fe47 	bl	80008d0 <ili9486_WritePixel>
		for(int j = 0; j < fonto.Width; j++){
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	3301      	adds	r3, #1
 8000c46:	61bb      	str	r3, [r7, #24]
 8000c48:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	dbd2      	blt.n	8000bf8 <ili9486_WriteChar+0xba>
	for(int i = 0; i < fonto.Height; i++){
 8000c52:	6a3b      	ldr	r3, [r7, #32]
 8000c54:	3301      	adds	r3, #1
 8000c56:	623b      	str	r3, [r7, #32]
 8000c58:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	6a3b      	ldr	r3, [r7, #32]
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	db99      	blt.n	8000b96 <ili9486_WriteChar+0x58>
			}

		}
	}
}
 8000c62:	bf00      	nop
 8000c64:	bf00      	nop
 8000c66:	3728      	adds	r7, #40	; 0x28
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c6e:	b002      	add	sp, #8
 8000c70:	4770      	bx	lr

08000c72 <ili9486_WriteCharNoBG>:
  * @param  chr:  Display Char
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @retval None
  */
void ili9486_WriteCharNoBG(uint16_t Xpo, uint16_t Ypo, char *chr,sFONT fonto, uint16_t RGB_Coder){
 8000c72:	b082      	sub	sp, #8
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08a      	sub	sp, #40	; 0x28
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	603a      	str	r2, [r7, #0]
 8000c7c:	637b      	str	r3, [r7, #52]	; 0x34
 8000c7e:	4603      	mov	r3, r0
 8000c80:	80fb      	strh	r3, [r7, #6]
 8000c82:	460b      	mov	r3, r1
 8000c84:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9486_WriteCharNoBG(10, 30, "E", Font24, cl_ORANGE);
	 * */
	//// stored font data
	uint32_t hop32 = 0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t b8[4] = {0};
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]

	//// find num of bit rows per jump in fonts.c
	int rowbox = ceilf((float)(fonto.Width) / 8);
 8000c8e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000c90:	ee07 3a90 	vmov	s15, r3
 8000c94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c98:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8000c9c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000ca0:	eeb0 0a47 	vmov.f32	s0, s14
 8000ca4:	f008 fcf2 	bl	800968c <ceilf>
 8000ca8:	eef0 7a40 	vmov.f32	s15, s0
 8000cac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cb0:	ee17 3a90 	vmov	r3, s15
 8000cb4:	617b      	str	r3, [r7, #20]
	uint32_t clif_msb = 0x80 << (8 * (rowbox - 1));
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	3b01      	subs	r3, #1
 8000cba:	00db      	lsls	r3, r3, #3
 8000cbc:	2280      	movs	r2, #128	; 0x80
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < fonto.Height; i++){
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	623b      	str	r3, [r7, #32]
 8000cc8:	e050      	b.n	8000d6c <ili9486_WriteCharNoBG+0xfa>
		hop32 = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
 8000cd2:	e024      	b.n	8000d1e <ili9486_WriteCharNoBG+0xac>
			b8[k] = fonto.table[((int)(*chr - 32) * fonto.Height * rowbox) + (i * rowbox) + k];
 8000cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cd6:	683a      	ldr	r2, [r7, #0]
 8000cd8:	7812      	ldrb	r2, [r2, #0]
 8000cda:	3a20      	subs	r2, #32
 8000cdc:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 8000cde:	fb01 f202 	mul.w	r2, r1, r2
 8000ce2:	6979      	ldr	r1, [r7, #20]
 8000ce4:	fb02 f101 	mul.w	r1, r2, r1
 8000ce8:	6a3a      	ldr	r2, [r7, #32]
 8000cea:	6978      	ldr	r0, [r7, #20]
 8000cec:	fb00 f202 	mul.w	r2, r0, r2
 8000cf0:	4411      	add	r1, r2
 8000cf2:	69fa      	ldr	r2, [r7, #28]
 8000cf4:	440a      	add	r2, r1
 8000cf6:	4413      	add	r3, r2
 8000cf8:	7819      	ldrb	r1, [r3, #0]
 8000cfa:	f107 020c 	add.w	r2, r7, #12
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	4413      	add	r3, r2
 8000d02:	460a      	mov	r2, r1
 8000d04:	701a      	strb	r2, [r3, #0]
			hop32 = (hop32 << 8) + b8[k];
 8000d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d08:	021b      	lsls	r3, r3, #8
 8000d0a:	f107 010c 	add.w	r1, r7, #12
 8000d0e:	69fa      	ldr	r2, [r7, #28]
 8000d10:	440a      	add	r2, r1
 8000d12:	7812      	ldrb	r2, [r2, #0]
 8000d14:	4413      	add	r3, r2
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	61fb      	str	r3, [r7, #28]
 8000d1e:	69fa      	ldr	r2, [r7, #28]
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	dbd6      	blt.n	8000cd4 <ili9486_WriteCharNoBG+0x62>
		}

		for(int j = 0; j < fonto.Width; j++){
 8000d26:	2300      	movs	r3, #0
 8000d28:	61bb      	str	r3, [r7, #24]
 8000d2a:	e017      	b.n	8000d5c <ili9486_WriteCharNoBG+0xea>
			//// if valuein fonttable is 1
			if((hop32 << j) & clif_msb){ // buu32.b32
 8000d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d2e:	69bb      	ldr	r3, [r7, #24]
 8000d30:	409a      	lsls	r2, r3
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	4013      	ands	r3, r2
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d00d      	beq.n	8000d56 <ili9486_WriteCharNoBG+0xe4>
				ili9486_WritePixel(Xpo + j, Ypo + i, RGB_Coder);
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	b29a      	uxth	r2, r3
 8000d3e:	88fb      	ldrh	r3, [r7, #6]
 8000d40:	4413      	add	r3, r2
 8000d42:	b298      	uxth	r0, r3
 8000d44:	6a3b      	ldr	r3, [r7, #32]
 8000d46:	b29a      	uxth	r2, r3
 8000d48:	88bb      	ldrh	r3, [r7, #4]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8000d50:	4619      	mov	r1, r3
 8000d52:	f7ff fdbd 	bl	80008d0 <ili9486_WritePixel>
		for(int j = 0; j < fonto.Width; j++){
 8000d56:	69bb      	ldr	r3, [r7, #24]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	61bb      	str	r3, [r7, #24]
 8000d5c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000d5e:	461a      	mov	r2, r3
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	4293      	cmp	r3, r2
 8000d64:	dbe2      	blt.n	8000d2c <ili9486_WriteCharNoBG+0xba>
	for(int i = 0; i < fonto.Height; i++){
 8000d66:	6a3b      	ldr	r3, [r7, #32]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	623b      	str	r3, [r7, #32]
 8000d6c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000d6e:	461a      	mov	r2, r3
 8000d70:	6a3b      	ldr	r3, [r7, #32]
 8000d72:	4293      	cmp	r3, r2
 8000d74:	dba9      	blt.n	8000cca <ili9486_WriteCharNoBG+0x58>
			}
		}
	}
}
 8000d76:	bf00      	nop
 8000d78:	bf00      	nop
 8000d7a:	3728      	adds	r7, #40	; 0x28
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d82:	b002      	add	sp, #8
 8000d84:	4770      	bx	lr

08000d86 <ili9486_WriteString>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Text background Color
  * @retval None
  */
void ili9486_WriteString(uint16_t Xpo, uint16_t Ypo,const char* strr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 8000d86:	b082      	sub	sp, #8
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b088      	sub	sp, #32
 8000d8c:	af04      	add	r7, sp, #16
 8000d8e:	603a      	str	r2, [r7, #0]
 8000d90:	61fb      	str	r3, [r7, #28]
 8000d92:	4603      	mov	r3, r0
 8000d94:	80fb      	strh	r3, [r7, #6]
 8000d96:	460b      	mov	r3, r1
 8000d98:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9486_WriteString(20, 300, "Helios xTerra", Font20, cl_WHITE, cl_BLACK);
	 * */
	uint16_t ili_heigh = ili9486_GetLcdPixelHeight();
 8000d9a:	f7ff fd18 	bl	80007ce <ili9486_GetLcdPixelHeight>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	81fb      	strh	r3, [r7, #14]
	uint16_t ili_width = ili9486_GetLcdPixelWidth();
 8000da2:	f7ff fd0b 	bl	80007bc <ili9486_GetLcdPixelWidth>
 8000da6:	4603      	mov	r3, r0
 8000da8:	81bb      	strh	r3, [r7, #12]
	while(*strr){
 8000daa:	e02c      	b.n	8000e06 <ili9486_WriteString+0x80>
	//// Check screen overflow / new line
		if(Xpo + fonto.Width >= ili_width){
 8000dac:	88fb      	ldrh	r3, [r7, #6]
 8000dae:	8c3a      	ldrh	r2, [r7, #32]
 8000db0:	441a      	add	r2, r3
 8000db2:	89bb      	ldrh	r3, [r7, #12]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	db13      	blt.n	8000de0 <ili9486_WriteString+0x5a>
			Xpo = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	80fb      	strh	r3, [r7, #6]
			Ypo += fonto.Height;
 8000dbc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000dbe:	88bb      	ldrh	r3, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	80bb      	strh	r3, [r7, #4]

			if(Ypo + fonto.Height >= ili_heigh){
 8000dc4:	88bb      	ldrh	r3, [r7, #4]
 8000dc6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000dc8:	441a      	add	r2, r3
 8000dca:	89fb      	ldrh	r3, [r7, #14]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	da1f      	bge.n	8000e10 <ili9486_WriteString+0x8a>
				break;
			}

			if(*strr == ' ') {
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b20      	cmp	r3, #32
 8000dd6:	d103      	bne.n	8000de0 <ili9486_WriteString+0x5a>
				// skip spaces in the beginning of the new line
				strr++;
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	603b      	str	r3, [r7, #0]
				continue;
 8000dde:	e012      	b.n	8000e06 <ili9486_WriteString+0x80>
			}
		}
		//ST7735_WriteChar(x, y, *str, font, color, bgcolor);
		ili9486_WriteChar(Xpo, Ypo, strr, fonto, RGB_Coder, RGB_bg);
 8000de0:	88b9      	ldrh	r1, [r7, #4]
 8000de2:	88f8      	ldrh	r0, [r7, #6]
 8000de4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000de6:	9302      	str	r3, [sp, #8]
 8000de8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000dea:	9301      	str	r3, [sp, #4]
 8000dec:	6a3b      	ldr	r3, [r7, #32]
 8000dee:	9300      	str	r3, [sp, #0]
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	683a      	ldr	r2, [r7, #0]
 8000df4:	f7ff fea3 	bl	8000b3e <ili9486_WriteChar>
		Xpo += fonto.Width;
 8000df8:	8c3a      	ldrh	r2, [r7, #32]
 8000dfa:	88fb      	ldrh	r3, [r7, #6]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	80fb      	strh	r3, [r7, #6]
		strr++;
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	3301      	adds	r3, #1
 8000e04:	603b      	str	r3, [r7, #0]
	while(*strr){
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d1ce      	bne.n	8000dac <ili9486_WriteString+0x26>
	}
}
 8000e0e:	e000      	b.n	8000e12 <ili9486_WriteString+0x8c>
				break;
 8000e10:	bf00      	nop
}
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e1c:	b002      	add	sp, #8
 8000e1e:	4770      	bx	lr

08000e20 <ili9486_WriteStringNoBG>:
  * @param  Strr:  Display Text
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @retval None
  */
void ili9486_WriteStringNoBG(uint16_t Xpo, uint16_t Ypo,const char* strr,sFONT fonto, uint16_t RGB_Coder){
 8000e20:	b082      	sub	sp, #8
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b086      	sub	sp, #24
 8000e26:	af02      	add	r7, sp, #8
 8000e28:	603a      	str	r2, [r7, #0]
 8000e2a:	61fb      	str	r3, [r7, #28]
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	80fb      	strh	r3, [r7, #6]
 8000e30:	460b      	mov	r3, r1
 8000e32:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9486_WriteString(20, 300, "Helios xTerra", Font20, cl_WHITE, cl_BLACK);
	 * */
	uint16_t ili_heigh = ili9486_GetLcdPixelHeight();
 8000e34:	f7ff fccb 	bl	80007ce <ili9486_GetLcdPixelHeight>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	81fb      	strh	r3, [r7, #14]
	uint16_t ili_width = ili9486_GetLcdPixelWidth();
 8000e3c:	f7ff fcbe 	bl	80007bc <ili9486_GetLcdPixelWidth>
 8000e40:	4603      	mov	r3, r0
 8000e42:	81bb      	strh	r3, [r7, #12]
	while(*strr){
 8000e44:	e02a      	b.n	8000e9c <ili9486_WriteStringNoBG+0x7c>
	//// Check screen overflow / new line
		if(Xpo + fonto.Width >= ili_width){
 8000e46:	88fb      	ldrh	r3, [r7, #6]
 8000e48:	8c3a      	ldrh	r2, [r7, #32]
 8000e4a:	441a      	add	r2, r3
 8000e4c:	89bb      	ldrh	r3, [r7, #12]
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	db13      	blt.n	8000e7a <ili9486_WriteStringNoBG+0x5a>
			Xpo = 0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	80fb      	strh	r3, [r7, #6]
			Ypo += fonto.Height;
 8000e56:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000e58:	88bb      	ldrh	r3, [r7, #4]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	80bb      	strh	r3, [r7, #4]

			if(Ypo + fonto.Height >= ili_heigh){
 8000e5e:	88bb      	ldrh	r3, [r7, #4]
 8000e60:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000e62:	441a      	add	r2, r3
 8000e64:	89fb      	ldrh	r3, [r7, #14]
 8000e66:	429a      	cmp	r2, r3
 8000e68:	da1d      	bge.n	8000ea6 <ili9486_WriteStringNoBG+0x86>
				break;
			}
			if(*strr == ' ') {
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	2b20      	cmp	r3, #32
 8000e70:	d103      	bne.n	8000e7a <ili9486_WriteStringNoBG+0x5a>
				strr++;
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	3301      	adds	r3, #1
 8000e76:	603b      	str	r3, [r7, #0]
				continue;
 8000e78:	e010      	b.n	8000e9c <ili9486_WriteStringNoBG+0x7c>
			}
		}
		ili9486_WriteCharNoBG(Xpo, Ypo, strr, fonto, RGB_Coder);
 8000e7a:	88b9      	ldrh	r1, [r7, #4]
 8000e7c:	88f8      	ldrh	r0, [r7, #6]
 8000e7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e80:	9301      	str	r3, [sp, #4]
 8000e82:	6a3b      	ldr	r3, [r7, #32]
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	683a      	ldr	r2, [r7, #0]
 8000e8a:	f7ff fef2 	bl	8000c72 <ili9486_WriteCharNoBG>
		Xpo += fonto.Width;
 8000e8e:	8c3a      	ldrh	r2, [r7, #32]
 8000e90:	88fb      	ldrh	r3, [r7, #6]
 8000e92:	4413      	add	r3, r2
 8000e94:	80fb      	strh	r3, [r7, #6]
		strr++;
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	603b      	str	r3, [r7, #0]
	while(*strr){
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d1d0      	bne.n	8000e46 <ili9486_WriteStringNoBG+0x26>
	}
}
 8000ea4:	e000      	b.n	8000ea8 <ili9486_WriteStringNoBG+0x88>
				break;
 8000ea6:	bf00      	nop
}
 8000ea8:	bf00      	nop
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000eb2:	b002      	add	sp, #8
 8000eb4:	4770      	bx	lr

08000eb6 <LCD_IO_Delay>:
#elif   defined(__CC_ARM)
#pragma push
#pragma O0
#endif
void LCD_IO_Delay(uint32_t c)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	b083      	sub	sp, #12
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
  while(c--);
 8000ebe:	bf00      	nop
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	1e5a      	subs	r2, r3, #1
 8000ec4:	607a      	str	r2, [r7, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d1fa      	bne.n	8000ec0 <LCD_IO_Delay+0xa>
}
 8000eca:	bf00      	nop
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <LCD_Delay>:
#pragma pop
#endif

//-----------------------------------------------------------------------------
void LCD_Delay(uint32_t Delay)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f002 f9e3 	bl	80032ac <HAL_Delay>
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	b083      	sub	sp, #12
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	71fb      	strb	r3, [r7, #7]
    GPIOX_CLR(LCD_BL);
  else
    GPIOX_SET(LCD_BL);
  #endif
  #endif
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  #define GPIOX_CLOCK_LCD_RD    GPIOX_CLOCK(LCD_RD)
  #else
  #define GPIOX_CLOCK_LCD_RD    0
  #endif

  RCC->AHB4ENR |= (GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_WR) |
 8000f08:	4b6c      	ldr	r3, [pc, #432]	; (80010bc <LCD_IO_Init+0x1b8>)
 8000f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0e:	4a6b      	ldr	r2, [pc, #428]	; (80010bc <LCD_IO_Init+0x1b8>)
 8000f10:	f043 035f 	orr.w	r3, r3, #95	; 0x5f
 8000f14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
                   GPIOX_CLOCK(LCD_D0) | GPIOX_CLOCK(LCD_D1) | GPIOX_CLOCK(LCD_D2) | GPIOX_CLOCK(LCD_D3) |
                   GPIOX_CLOCK(LCD_D4) | GPIOX_CLOCK(LCD_D5) | GPIOX_CLOCK(LCD_D6) | GPIOX_CLOCK(LCD_D7) |
                   GPIOX_CLOCK_LCD_RST | GPIOX_CLOCK_LCD_BL  | GPIOX_CLOCK_LCD_RD);

  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  LCD_RST_OFF;                          /* RST = 1 */
 8000f18:	4b69      	ldr	r3, [pc, #420]	; (80010c0 <LCD_IO_Init+0x1bc>)
 8000f1a:	2204      	movs	r2, #4
 8000f1c:	619a      	str	r2, [r3, #24]
  GPIOX_MODER(MODE_OUT, LCD_RST);
 8000f1e:	4b68      	ldr	r3, [pc, #416]	; (80010c0 <LCD_IO_Init+0x1bc>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000f26:	4a66      	ldr	r2, [pc, #408]	; (80010c0 <LCD_IO_Init+0x1bc>)
 8000f28:	f043 0310 	orr.w	r3, r3, #16
 8000f2c:	6013      	str	r3, [r2, #0]
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  GPIOX_ODR(LCD_BL) = LCD_BLON;
  GPIOX_MODER(MODE_OUT, LCD_BL);
  #endif

  GPIOX_SET(LCD_CS);                    /* CS = 1 */
 8000f2e:	4b65      	ldr	r3, [pc, #404]	; (80010c4 <LCD_IO_Init+0x1c0>)
 8000f30:	2202      	movs	r2, #2
 8000f32:	619a      	str	r2, [r3, #24]
  LCD_RS_DATA;                          /* RS = 1 */
 8000f34:	4b62      	ldr	r3, [pc, #392]	; (80010c0 <LCD_IO_Init+0x1bc>)
 8000f36:	2208      	movs	r2, #8
 8000f38:	619a      	str	r2, [r3, #24]
  GPIOX_SET(LCD_WR);                    /* WR = 1 */
 8000f3a:	4b61      	ldr	r3, [pc, #388]	; (80010c0 <LCD_IO_Init+0x1bc>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	619a      	str	r2, [r3, #24]
  #if GPIOX_PORTNUM(LCD_RD) >=  GPIOX_PORTNUM_A
  GPIOX_SET(LCD_RD);                    /* RD = 1 */
 8000f40:	4b61      	ldr	r3, [pc, #388]	; (80010c8 <LCD_IO_Init+0x1c4>)
 8000f42:	2208      	movs	r2, #8
 8000f44:	619a      	str	r2, [r3, #24]
  #endif

  GPIOX_MODER(MODE_OUT, LCD_CS);
 8000f46:	4b5f      	ldr	r3, [pc, #380]	; (80010c4 <LCD_IO_Init+0x1c0>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f023 030c 	bic.w	r3, r3, #12
 8000f4e:	4a5d      	ldr	r2, [pc, #372]	; (80010c4 <LCD_IO_Init+0x1c0>)
 8000f50:	f043 0304 	orr.w	r3, r3, #4
 8000f54:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_RS);
 8000f56:	4b5a      	ldr	r3, [pc, #360]	; (80010c0 <LCD_IO_Init+0x1bc>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000f5e:	4a58      	ldr	r2, [pc, #352]	; (80010c0 <LCD_IO_Init+0x1bc>)
 8000f60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f64:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_WR);
 8000f66:	4b56      	ldr	r3, [pc, #344]	; (80010c0 <LCD_IO_Init+0x1bc>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f023 0303 	bic.w	r3, r3, #3
 8000f6e:	4a54      	ldr	r2, [pc, #336]	; (80010c0 <LCD_IO_Init+0x1bc>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6013      	str	r3, [r2, #0]
  #if GPIOX_PORTNUM(LCD_RD) >=  GPIOX_PORTNUM_A
  GPIOX_MODER(MODE_OUT, LCD_RD);
 8000f76:	4b54      	ldr	r3, [pc, #336]	; (80010c8 <LCD_IO_Init+0x1c4>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000f7e:	4a52      	ldr	r2, [pc, #328]	; (80010c8 <LCD_IO_Init+0x1c4>)
 8000f80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f84:	6013      	str	r3, [r2, #0]
  #endif

  LCD_DIRWRITE;                         /* data pins set the output direction */
 8000f86:	4b51      	ldr	r3, [pc, #324]	; (80010cc <LCD_IO_Init+0x1c8>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000f8e:	4a4f      	ldr	r2, [pc, #316]	; (80010cc <LCD_IO_Init+0x1c8>)
 8000f90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f94:	6013      	str	r3, [r2, #0]
 8000f96:	4b4e      	ldr	r3, [pc, #312]	; (80010d0 <LCD_IO_Init+0x1cc>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000f9e:	4a4c      	ldr	r2, [pc, #304]	; (80010d0 <LCD_IO_Init+0x1cc>)
 8000fa0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000fa4:	6013      	str	r3, [r2, #0]
 8000fa6:	4b49      	ldr	r3, [pc, #292]	; (80010cc <LCD_IO_Init+0x1c8>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000fae:	4a47      	ldr	r2, [pc, #284]	; (80010cc <LCD_IO_Init+0x1c8>)
 8000fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb4:	6013      	str	r3, [r2, #0]
 8000fb6:	4b47      	ldr	r3, [pc, #284]	; (80010d4 <LCD_IO_Init+0x1d0>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000fbe:	4a45      	ldr	r2, [pc, #276]	; (80010d4 <LCD_IO_Init+0x1d0>)
 8000fc0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	4b43      	ldr	r3, [pc, #268]	; (80010d4 <LCD_IO_Init+0x1d0>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000fce:	4a41      	ldr	r2, [pc, #260]	; (80010d4 <LCD_IO_Init+0x1d0>)
 8000fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd4:	6013      	str	r3, [r2, #0]
 8000fd6:	4b3f      	ldr	r3, [pc, #252]	; (80010d4 <LCD_IO_Init+0x1d0>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000fde:	4a3d      	ldr	r2, [pc, #244]	; (80010d4 <LCD_IO_Init+0x1d0>)
 8000fe0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fe4:	6013      	str	r3, [r2, #0]
 8000fe6:	4b38      	ldr	r3, [pc, #224]	; (80010c8 <LCD_IO_Init+0x1c4>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000fee:	4a36      	ldr	r2, [pc, #216]	; (80010c8 <LCD_IO_Init+0x1c4>)
 8000ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ff4:	6013      	str	r3, [r2, #0]
 8000ff6:	4b35      	ldr	r3, [pc, #212]	; (80010cc <LCD_IO_Init+0x1c8>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000ffe:	4a33      	ldr	r2, [pc, #204]	; (80010cc <LCD_IO_Init+0x1c8>)
 8001000:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001004:	6013      	str	r3, [r2, #0]

  /* GPIO speed */
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_CS);
 8001006:	4b2f      	ldr	r3, [pc, #188]	; (80010c4 <LCD_IO_Init+0x1c0>)
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	4a2e      	ldr	r2, [pc, #184]	; (80010c4 <LCD_IO_Init+0x1c0>)
 800100c:	f043 030c 	orr.w	r3, r3, #12
 8001010:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RS);
 8001012:	4b2b      	ldr	r3, [pc, #172]	; (80010c0 <LCD_IO_Init+0x1bc>)
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	4a2a      	ldr	r2, [pc, #168]	; (80010c0 <LCD_IO_Init+0x1bc>)
 8001018:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800101c:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_WR);
 800101e:	4b28      	ldr	r3, [pc, #160]	; (80010c0 <LCD_IO_Init+0x1bc>)
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	4a27      	ldr	r2, [pc, #156]	; (80010c0 <LCD_IO_Init+0x1bc>)
 8001024:	f043 0303 	orr.w	r3, r3, #3
 8001028:	6093      	str	r3, [r2, #8]
  #if GPIOX_PORTNUM(LCD_RD) >=  GPIOX_PORTNUM_A
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RD);
 800102a:	4b27      	ldr	r3, [pc, #156]	; (80010c8 <LCD_IO_Init+0x1c4>)
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	4a26      	ldr	r2, [pc, #152]	; (80010c8 <LCD_IO_Init+0x1c4>)
 8001030:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001034:	6093      	str	r3, [r2, #8]
  #endif
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D0);
 8001036:	4b25      	ldr	r3, [pc, #148]	; (80010cc <LCD_IO_Init+0x1c8>)
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	4a24      	ldr	r2, [pc, #144]	; (80010cc <LCD_IO_Init+0x1c8>)
 800103c:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8001040:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D1);
 8001042:	4b23      	ldr	r3, [pc, #140]	; (80010d0 <LCD_IO_Init+0x1cc>)
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	4a22      	ldr	r2, [pc, #136]	; (80010d0 <LCD_IO_Init+0x1cc>)
 8001048:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800104c:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D2);
 800104e:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <LCD_IO_Init+0x1c8>)
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	4a1e      	ldr	r2, [pc, #120]	; (80010cc <LCD_IO_Init+0x1c8>)
 8001054:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8001058:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D3);
 800105a:	4b1e      	ldr	r3, [pc, #120]	; (80010d4 <LCD_IO_Init+0x1d0>)
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	4a1d      	ldr	r2, [pc, #116]	; (80010d4 <LCD_IO_Init+0x1d0>)
 8001060:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 8001064:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D4);
 8001066:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <LCD_IO_Init+0x1d0>)
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	4a1a      	ldr	r2, [pc, #104]	; (80010d4 <LCD_IO_Init+0x1d0>)
 800106c:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8001070:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D5);
 8001072:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <LCD_IO_Init+0x1d0>)
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	4a17      	ldr	r2, [pc, #92]	; (80010d4 <LCD_IO_Init+0x1d0>)
 8001078:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 800107c:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D6);
 800107e:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <LCD_IO_Init+0x1c4>)
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	4a11      	ldr	r2, [pc, #68]	; (80010c8 <LCD_IO_Init+0x1c4>)
 8001084:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001088:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D7);
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <LCD_IO_Init+0x1c8>)
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	4a0f      	ldr	r2, [pc, #60]	; (80010cc <LCD_IO_Init+0x1c8>)
 8001090:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8001094:	6093      	str	r3, [r2, #8]

  /* Reset the LCD */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  LCD_Delay(1);
 8001096:	2001      	movs	r0, #1
 8001098:	f7ff ff1e 	bl	8000ed8 <LCD_Delay>
  LCD_RST_ON;                           /* RST = 0 */
 800109c:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <LCD_IO_Init+0x1bc>)
 800109e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80010a2:	619a      	str	r2, [r3, #24]
  LCD_Delay(1);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff17 	bl	8000ed8 <LCD_Delay>
  LCD_RST_OFF;                          /* RST = 1 */
 80010aa:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <LCD_IO_Init+0x1bc>)
 80010ac:	2204      	movs	r2, #4
 80010ae:	619a      	str	r2, [r3, #24]
  #endif
  LCD_Delay(1);
 80010b0:	2001      	movs	r0, #1
 80010b2:	f7ff ff11 	bl	8000ed8 <LCD_Delay>
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	58024400 	.word	0x58024400
 80010c0:	58020800 	.word	0x58020800
 80010c4:	58020400 	.word	0x58020400
 80010c8:	58020000 	.word	0x58020000
 80010cc:	58021800 	.word	0x58021800
 80010d0:	58020c00 	.word	0x58020c00
 80010d4:	58021000 	.word	0x58021000

080010d8 <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
  LCD_CS_ON;
 80010e2:	4b4b      	ldr	r3, [pc, #300]	; (8001210 <LCD_IO_WriteCmd8+0x138>)
 80010e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010e8:	619a      	str	r2, [r3, #24]
  LCD_CMD8_WRITE(Cmd);
 80010ea:	4b4a      	ldr	r3, [pc, #296]	; (8001214 <LCD_IO_WriteCmd8+0x13c>)
 80010ec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80010f0:	619a      	str	r2, [r3, #24]
 80010f2:	4a49      	ldr	r2, [pc, #292]	; (8001218 <LCD_IO_WriteCmd8+0x140>)
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	7013      	strb	r3, [r2, #0]
 80010f8:	4b47      	ldr	r3, [pc, #284]	; (8001218 <LCD_IO_WriteCmd8+0x140>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	2b00      	cmp	r3, #0
 8001102:	d004      	beq.n	800110e <LCD_IO_WriteCmd8+0x36>
 8001104:	4b45      	ldr	r3, [pc, #276]	; (800121c <LCD_IO_WriteCmd8+0x144>)
 8001106:	f44f 7200 	mov.w	r2, #512	; 0x200
 800110a:	619a      	str	r2, [r3, #24]
 800110c:	e003      	b.n	8001116 <LCD_IO_WriteCmd8+0x3e>
 800110e:	4b43      	ldr	r3, [pc, #268]	; (800121c <LCD_IO_WriteCmd8+0x144>)
 8001110:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001114:	619a      	str	r2, [r3, #24]
 8001116:	4b40      	ldr	r3, [pc, #256]	; (8001218 <LCD_IO_WriteCmd8+0x140>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	2b00      	cmp	r3, #0
 8001120:	d004      	beq.n	800112c <LCD_IO_WriteCmd8+0x54>
 8001122:	4b3f      	ldr	r3, [pc, #252]	; (8001220 <LCD_IO_WriteCmd8+0x148>)
 8001124:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001128:	619a      	str	r2, [r3, #24]
 800112a:	e003      	b.n	8001134 <LCD_IO_WriteCmd8+0x5c>
 800112c:	4b3c      	ldr	r3, [pc, #240]	; (8001220 <LCD_IO_WriteCmd8+0x148>)
 800112e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001132:	619a      	str	r2, [r3, #24]
 8001134:	4b38      	ldr	r3, [pc, #224]	; (8001218 <LCD_IO_WriteCmd8+0x140>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	f003 0304 	and.w	r3, r3, #4
 800113c:	2b00      	cmp	r3, #0
 800113e:	d004      	beq.n	800114a <LCD_IO_WriteCmd8+0x72>
 8001140:	4b36      	ldr	r3, [pc, #216]	; (800121c <LCD_IO_WriteCmd8+0x144>)
 8001142:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001146:	619a      	str	r2, [r3, #24]
 8001148:	e003      	b.n	8001152 <LCD_IO_WriteCmd8+0x7a>
 800114a:	4b34      	ldr	r3, [pc, #208]	; (800121c <LCD_IO_WriteCmd8+0x144>)
 800114c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001150:	619a      	str	r2, [r3, #24]
 8001152:	4b31      	ldr	r3, [pc, #196]	; (8001218 <LCD_IO_WriteCmd8+0x140>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	f003 0308 	and.w	r3, r3, #8
 800115a:	2b00      	cmp	r3, #0
 800115c:	d004      	beq.n	8001168 <LCD_IO_WriteCmd8+0x90>
 800115e:	4b31      	ldr	r3, [pc, #196]	; (8001224 <LCD_IO_WriteCmd8+0x14c>)
 8001160:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001164:	619a      	str	r2, [r3, #24]
 8001166:	e003      	b.n	8001170 <LCD_IO_WriteCmd8+0x98>
 8001168:	4b2e      	ldr	r3, [pc, #184]	; (8001224 <LCD_IO_WriteCmd8+0x14c>)
 800116a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800116e:	619a      	str	r2, [r3, #24]
 8001170:	4b29      	ldr	r3, [pc, #164]	; (8001218 <LCD_IO_WriteCmd8+0x140>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	f003 0310 	and.w	r3, r3, #16
 8001178:	2b00      	cmp	r3, #0
 800117a:	d004      	beq.n	8001186 <LCD_IO_WriteCmd8+0xae>
 800117c:	4b29      	ldr	r3, [pc, #164]	; (8001224 <LCD_IO_WriteCmd8+0x14c>)
 800117e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001182:	619a      	str	r2, [r3, #24]
 8001184:	e003      	b.n	800118e <LCD_IO_WriteCmd8+0xb6>
 8001186:	4b27      	ldr	r3, [pc, #156]	; (8001224 <LCD_IO_WriteCmd8+0x14c>)
 8001188:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800118c:	619a      	str	r2, [r3, #24]
 800118e:	4b22      	ldr	r3, [pc, #136]	; (8001218 <LCD_IO_WriteCmd8+0x140>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	f003 0320 	and.w	r3, r3, #32
 8001196:	2b00      	cmp	r3, #0
 8001198:	d004      	beq.n	80011a4 <LCD_IO_WriteCmd8+0xcc>
 800119a:	4b22      	ldr	r3, [pc, #136]	; (8001224 <LCD_IO_WriteCmd8+0x14c>)
 800119c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011a0:	619a      	str	r2, [r3, #24]
 80011a2:	e003      	b.n	80011ac <LCD_IO_WriteCmd8+0xd4>
 80011a4:	4b1f      	ldr	r3, [pc, #124]	; (8001224 <LCD_IO_WriteCmd8+0x14c>)
 80011a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011aa:	619a      	str	r2, [r3, #24]
 80011ac:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <LCD_IO_WriteCmd8+0x140>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d004      	beq.n	80011c2 <LCD_IO_WriteCmd8+0xea>
 80011b8:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <LCD_IO_WriteCmd8+0x150>)
 80011ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011be:	619a      	str	r2, [r3, #24]
 80011c0:	e003      	b.n	80011ca <LCD_IO_WriteCmd8+0xf2>
 80011c2:	4b19      	ldr	r3, [pc, #100]	; (8001228 <LCD_IO_WriteCmd8+0x150>)
 80011c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80011c8:	619a      	str	r2, [r3, #24]
 80011ca:	4b13      	ldr	r3, [pc, #76]	; (8001218 <LCD_IO_WriteCmd8+0x140>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	b25b      	sxtb	r3, r3
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	da04      	bge.n	80011de <LCD_IO_WriteCmd8+0x106>
 80011d4:	4b11      	ldr	r3, [pc, #68]	; (800121c <LCD_IO_WriteCmd8+0x144>)
 80011d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011da:	619a      	str	r2, [r3, #24]
 80011dc:	e003      	b.n	80011e6 <LCD_IO_WriteCmd8+0x10e>
 80011de:	4b0f      	ldr	r3, [pc, #60]	; (800121c <LCD_IO_WriteCmd8+0x144>)
 80011e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011e4:	619a      	str	r2, [r3, #24]
 80011e6:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <LCD_IO_WriteCmd8+0x13c>)
 80011e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011ec:	619a      	str	r2, [r3, #24]
 80011ee:	2008      	movs	r0, #8
 80011f0:	f7ff fe61 	bl	8000eb6 <LCD_IO_Delay>
 80011f4:	4b07      	ldr	r3, [pc, #28]	; (8001214 <LCD_IO_WriteCmd8+0x13c>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	619a      	str	r2, [r3, #24]
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <LCD_IO_WriteCmd8+0x13c>)
 80011fc:	2208      	movs	r2, #8
 80011fe:	619a      	str	r2, [r3, #24]
  LCD_CS_OFF;
 8001200:	4b03      	ldr	r3, [pc, #12]	; (8001210 <LCD_IO_WriteCmd8+0x138>)
 8001202:	2202      	movs	r2, #2
 8001204:	619a      	str	r2, [r3, #24]
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	58020400 	.word	0x58020400
 8001214:	58020800 	.word	0x58020800
 8001218:	2400036e 	.word	0x2400036e
 800121c:	58021800 	.word	0x58021800
 8001220:	58020c00 	.word	0x58020c00
 8001224:	58021000 	.word	0x58021000
 8001228:	58020000 	.word	0x58020000

0800122c <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
  LCD_CS_ON;
 8001236:	4b47      	ldr	r3, [pc, #284]	; (8001354 <LCD_IO_WriteData8+0x128>)
 8001238:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800123c:	619a      	str	r2, [r3, #24]
  LCD_DATA8_WRITE(Data);
 800123e:	4a46      	ldr	r2, [pc, #280]	; (8001358 <LCD_IO_WriteData8+0x12c>)
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	7013      	strb	r3, [r2, #0]
 8001244:	4b44      	ldr	r3, [pc, #272]	; (8001358 <LCD_IO_WriteData8+0x12c>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	2b00      	cmp	r3, #0
 800124e:	d004      	beq.n	800125a <LCD_IO_WriteData8+0x2e>
 8001250:	4b42      	ldr	r3, [pc, #264]	; (800135c <LCD_IO_WriteData8+0x130>)
 8001252:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001256:	619a      	str	r2, [r3, #24]
 8001258:	e003      	b.n	8001262 <LCD_IO_WriteData8+0x36>
 800125a:	4b40      	ldr	r3, [pc, #256]	; (800135c <LCD_IO_WriteData8+0x130>)
 800125c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001260:	619a      	str	r2, [r3, #24]
 8001262:	4b3d      	ldr	r3, [pc, #244]	; (8001358 <LCD_IO_WriteData8+0x12c>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d004      	beq.n	8001278 <LCD_IO_WriteData8+0x4c>
 800126e:	4b3c      	ldr	r3, [pc, #240]	; (8001360 <LCD_IO_WriteData8+0x134>)
 8001270:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001274:	619a      	str	r2, [r3, #24]
 8001276:	e003      	b.n	8001280 <LCD_IO_WriteData8+0x54>
 8001278:	4b39      	ldr	r3, [pc, #228]	; (8001360 <LCD_IO_WriteData8+0x134>)
 800127a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800127e:	619a      	str	r2, [r3, #24]
 8001280:	4b35      	ldr	r3, [pc, #212]	; (8001358 <LCD_IO_WriteData8+0x12c>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	f003 0304 	and.w	r3, r3, #4
 8001288:	2b00      	cmp	r3, #0
 800128a:	d004      	beq.n	8001296 <LCD_IO_WriteData8+0x6a>
 800128c:	4b33      	ldr	r3, [pc, #204]	; (800135c <LCD_IO_WriteData8+0x130>)
 800128e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001292:	619a      	str	r2, [r3, #24]
 8001294:	e003      	b.n	800129e <LCD_IO_WriteData8+0x72>
 8001296:	4b31      	ldr	r3, [pc, #196]	; (800135c <LCD_IO_WriteData8+0x130>)
 8001298:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800129c:	619a      	str	r2, [r3, #24]
 800129e:	4b2e      	ldr	r3, [pc, #184]	; (8001358 <LCD_IO_WriteData8+0x12c>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	f003 0308 	and.w	r3, r3, #8
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d004      	beq.n	80012b4 <LCD_IO_WriteData8+0x88>
 80012aa:	4b2e      	ldr	r3, [pc, #184]	; (8001364 <LCD_IO_WriteData8+0x138>)
 80012ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012b0:	619a      	str	r2, [r3, #24]
 80012b2:	e003      	b.n	80012bc <LCD_IO_WriteData8+0x90>
 80012b4:	4b2b      	ldr	r3, [pc, #172]	; (8001364 <LCD_IO_WriteData8+0x138>)
 80012b6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80012ba:	619a      	str	r2, [r3, #24]
 80012bc:	4b26      	ldr	r3, [pc, #152]	; (8001358 <LCD_IO_WriteData8+0x12c>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	f003 0310 	and.w	r3, r3, #16
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d004      	beq.n	80012d2 <LCD_IO_WriteData8+0xa6>
 80012c8:	4b26      	ldr	r3, [pc, #152]	; (8001364 <LCD_IO_WriteData8+0x138>)
 80012ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012ce:	619a      	str	r2, [r3, #24]
 80012d0:	e003      	b.n	80012da <LCD_IO_WriteData8+0xae>
 80012d2:	4b24      	ldr	r3, [pc, #144]	; (8001364 <LCD_IO_WriteData8+0x138>)
 80012d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012d8:	619a      	str	r2, [r3, #24]
 80012da:	4b1f      	ldr	r3, [pc, #124]	; (8001358 <LCD_IO_WriteData8+0x12c>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	f003 0320 	and.w	r3, r3, #32
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d004      	beq.n	80012f0 <LCD_IO_WriteData8+0xc4>
 80012e6:	4b1f      	ldr	r3, [pc, #124]	; (8001364 <LCD_IO_WriteData8+0x138>)
 80012e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012ec:	619a      	str	r2, [r3, #24]
 80012ee:	e003      	b.n	80012f8 <LCD_IO_WriteData8+0xcc>
 80012f0:	4b1c      	ldr	r3, [pc, #112]	; (8001364 <LCD_IO_WriteData8+0x138>)
 80012f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012f6:	619a      	str	r2, [r3, #24]
 80012f8:	4b17      	ldr	r3, [pc, #92]	; (8001358 <LCD_IO_WriteData8+0x12c>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001300:	2b00      	cmp	r3, #0
 8001302:	d004      	beq.n	800130e <LCD_IO_WriteData8+0xe2>
 8001304:	4b18      	ldr	r3, [pc, #96]	; (8001368 <LCD_IO_WriteData8+0x13c>)
 8001306:	f44f 7280 	mov.w	r2, #256	; 0x100
 800130a:	619a      	str	r2, [r3, #24]
 800130c:	e003      	b.n	8001316 <LCD_IO_WriteData8+0xea>
 800130e:	4b16      	ldr	r3, [pc, #88]	; (8001368 <LCD_IO_WriteData8+0x13c>)
 8001310:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001314:	619a      	str	r2, [r3, #24]
 8001316:	4b10      	ldr	r3, [pc, #64]	; (8001358 <LCD_IO_WriteData8+0x12c>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	b25b      	sxtb	r3, r3
 800131c:	2b00      	cmp	r3, #0
 800131e:	da04      	bge.n	800132a <LCD_IO_WriteData8+0xfe>
 8001320:	4b0e      	ldr	r3, [pc, #56]	; (800135c <LCD_IO_WriteData8+0x130>)
 8001322:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001326:	619a      	str	r2, [r3, #24]
 8001328:	e003      	b.n	8001332 <LCD_IO_WriteData8+0x106>
 800132a:	4b0c      	ldr	r3, [pc, #48]	; (800135c <LCD_IO_WriteData8+0x130>)
 800132c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001330:	619a      	str	r2, [r3, #24]
 8001332:	4b0e      	ldr	r3, [pc, #56]	; (800136c <LCD_IO_WriteData8+0x140>)
 8001334:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001338:	619a      	str	r2, [r3, #24]
 800133a:	2008      	movs	r0, #8
 800133c:	f7ff fdbb 	bl	8000eb6 <LCD_IO_Delay>
 8001340:	4b0a      	ldr	r3, [pc, #40]	; (800136c <LCD_IO_WriteData8+0x140>)
 8001342:	2201      	movs	r2, #1
 8001344:	619a      	str	r2, [r3, #24]
  LCD_CS_OFF;
 8001346:	4b03      	ldr	r3, [pc, #12]	; (8001354 <LCD_IO_WriteData8+0x128>)
 8001348:	2202      	movs	r2, #2
 800134a:	619a      	str	r2, [r3, #24]
}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	58020400 	.word	0x58020400
 8001358:	2400036e 	.word	0x2400036e
 800135c:	58021800 	.word	0x58021800
 8001360:	58020c00 	.word	0x58020c00
 8001364:	58021000 	.word	0x58021000
 8001368:	58020000 	.word	0x58020000
 800136c:	58020800 	.word	0x58020800

08001370 <LCD_IO_WriteData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteData16(uint16_t Data)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	80fb      	strh	r3, [r7, #6]
  LCD_CS_ON;
 800137a:	4b8b      	ldr	r3, [pc, #556]	; (80015a8 <LCD_IO_WriteData16+0x238>)
 800137c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001380:	619a      	str	r2, [r3, #24]
  LCD_DATA16_WRITE(Data);
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	0a1b      	lsrs	r3, r3, #8
 8001386:	b29b      	uxth	r3, r3
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4b88      	ldr	r3, [pc, #544]	; (80015ac <LCD_IO_WriteData16+0x23c>)
 800138c:	701a      	strb	r2, [r3, #0]
 800138e:	4b87      	ldr	r3, [pc, #540]	; (80015ac <LCD_IO_WriteData16+0x23c>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	2b00      	cmp	r3, #0
 8001398:	d004      	beq.n	80013a4 <LCD_IO_WriteData16+0x34>
 800139a:	4b85      	ldr	r3, [pc, #532]	; (80015b0 <LCD_IO_WriteData16+0x240>)
 800139c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013a0:	619a      	str	r2, [r3, #24]
 80013a2:	e003      	b.n	80013ac <LCD_IO_WriteData16+0x3c>
 80013a4:	4b82      	ldr	r3, [pc, #520]	; (80015b0 <LCD_IO_WriteData16+0x240>)
 80013a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013aa:	619a      	str	r2, [r3, #24]
 80013ac:	4b7f      	ldr	r3, [pc, #508]	; (80015ac <LCD_IO_WriteData16+0x23c>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d004      	beq.n	80013c2 <LCD_IO_WriteData16+0x52>
 80013b8:	4b7e      	ldr	r3, [pc, #504]	; (80015b4 <LCD_IO_WriteData16+0x244>)
 80013ba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013be:	619a      	str	r2, [r3, #24]
 80013c0:	e003      	b.n	80013ca <LCD_IO_WriteData16+0x5a>
 80013c2:	4b7c      	ldr	r3, [pc, #496]	; (80015b4 <LCD_IO_WriteData16+0x244>)
 80013c4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80013c8:	619a      	str	r2, [r3, #24]
 80013ca:	4b78      	ldr	r3, [pc, #480]	; (80015ac <LCD_IO_WriteData16+0x23c>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	f003 0304 	and.w	r3, r3, #4
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d004      	beq.n	80013e0 <LCD_IO_WriteData16+0x70>
 80013d6:	4b76      	ldr	r3, [pc, #472]	; (80015b0 <LCD_IO_WriteData16+0x240>)
 80013d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013dc:	619a      	str	r2, [r3, #24]
 80013de:	e003      	b.n	80013e8 <LCD_IO_WriteData16+0x78>
 80013e0:	4b73      	ldr	r3, [pc, #460]	; (80015b0 <LCD_IO_WriteData16+0x240>)
 80013e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013e6:	619a      	str	r2, [r3, #24]
 80013e8:	4b70      	ldr	r3, [pc, #448]	; (80015ac <LCD_IO_WriteData16+0x23c>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	f003 0308 	and.w	r3, r3, #8
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d004      	beq.n	80013fe <LCD_IO_WriteData16+0x8e>
 80013f4:	4b70      	ldr	r3, [pc, #448]	; (80015b8 <LCD_IO_WriteData16+0x248>)
 80013f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013fa:	619a      	str	r2, [r3, #24]
 80013fc:	e003      	b.n	8001406 <LCD_IO_WriteData16+0x96>
 80013fe:	4b6e      	ldr	r3, [pc, #440]	; (80015b8 <LCD_IO_WriteData16+0x248>)
 8001400:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001404:	619a      	str	r2, [r3, #24]
 8001406:	4b69      	ldr	r3, [pc, #420]	; (80015ac <LCD_IO_WriteData16+0x23c>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	f003 0310 	and.w	r3, r3, #16
 800140e:	2b00      	cmp	r3, #0
 8001410:	d004      	beq.n	800141c <LCD_IO_WriteData16+0xac>
 8001412:	4b69      	ldr	r3, [pc, #420]	; (80015b8 <LCD_IO_WriteData16+0x248>)
 8001414:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001418:	619a      	str	r2, [r3, #24]
 800141a:	e003      	b.n	8001424 <LCD_IO_WriteData16+0xb4>
 800141c:	4b66      	ldr	r3, [pc, #408]	; (80015b8 <LCD_IO_WriteData16+0x248>)
 800141e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001422:	619a      	str	r2, [r3, #24]
 8001424:	4b61      	ldr	r3, [pc, #388]	; (80015ac <LCD_IO_WriteData16+0x23c>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	f003 0320 	and.w	r3, r3, #32
 800142c:	2b00      	cmp	r3, #0
 800142e:	d004      	beq.n	800143a <LCD_IO_WriteData16+0xca>
 8001430:	4b61      	ldr	r3, [pc, #388]	; (80015b8 <LCD_IO_WriteData16+0x248>)
 8001432:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001436:	619a      	str	r2, [r3, #24]
 8001438:	e003      	b.n	8001442 <LCD_IO_WriteData16+0xd2>
 800143a:	4b5f      	ldr	r3, [pc, #380]	; (80015b8 <LCD_IO_WriteData16+0x248>)
 800143c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001440:	619a      	str	r2, [r3, #24]
 8001442:	4b5a      	ldr	r3, [pc, #360]	; (80015ac <LCD_IO_WriteData16+0x23c>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800144a:	2b00      	cmp	r3, #0
 800144c:	d004      	beq.n	8001458 <LCD_IO_WriteData16+0xe8>
 800144e:	4b5b      	ldr	r3, [pc, #364]	; (80015bc <LCD_IO_WriteData16+0x24c>)
 8001450:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001454:	619a      	str	r2, [r3, #24]
 8001456:	e003      	b.n	8001460 <LCD_IO_WriteData16+0xf0>
 8001458:	4b58      	ldr	r3, [pc, #352]	; (80015bc <LCD_IO_WriteData16+0x24c>)
 800145a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800145e:	619a      	str	r2, [r3, #24]
 8001460:	4b52      	ldr	r3, [pc, #328]	; (80015ac <LCD_IO_WriteData16+0x23c>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	b25b      	sxtb	r3, r3
 8001466:	2b00      	cmp	r3, #0
 8001468:	da04      	bge.n	8001474 <LCD_IO_WriteData16+0x104>
 800146a:	4b51      	ldr	r3, [pc, #324]	; (80015b0 <LCD_IO_WriteData16+0x240>)
 800146c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001470:	619a      	str	r2, [r3, #24]
 8001472:	e003      	b.n	800147c <LCD_IO_WriteData16+0x10c>
 8001474:	4b4e      	ldr	r3, [pc, #312]	; (80015b0 <LCD_IO_WriteData16+0x240>)
 8001476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800147a:	619a      	str	r2, [r3, #24]
 800147c:	4b50      	ldr	r3, [pc, #320]	; (80015c0 <LCD_IO_WriteData16+0x250>)
 800147e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001482:	619a      	str	r2, [r3, #24]
 8001484:	2008      	movs	r0, #8
 8001486:	f7ff fd16 	bl	8000eb6 <LCD_IO_Delay>
 800148a:	4b4d      	ldr	r3, [pc, #308]	; (80015c0 <LCD_IO_WriteData16+0x250>)
 800148c:	2201      	movs	r2, #1
 800148e:	619a      	str	r2, [r3, #24]
 8001490:	88fb      	ldrh	r3, [r7, #6]
 8001492:	b2da      	uxtb	r2, r3
 8001494:	4b45      	ldr	r3, [pc, #276]	; (80015ac <LCD_IO_WriteData16+0x23c>)
 8001496:	701a      	strb	r2, [r3, #0]
 8001498:	4b44      	ldr	r3, [pc, #272]	; (80015ac <LCD_IO_WriteData16+0x23c>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d004      	beq.n	80014ae <LCD_IO_WriteData16+0x13e>
 80014a4:	4b42      	ldr	r3, [pc, #264]	; (80015b0 <LCD_IO_WriteData16+0x240>)
 80014a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014aa:	619a      	str	r2, [r3, #24]
 80014ac:	e003      	b.n	80014b6 <LCD_IO_WriteData16+0x146>
 80014ae:	4b40      	ldr	r3, [pc, #256]	; (80015b0 <LCD_IO_WriteData16+0x240>)
 80014b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014b4:	619a      	str	r2, [r3, #24]
 80014b6:	4b3d      	ldr	r3, [pc, #244]	; (80015ac <LCD_IO_WriteData16+0x23c>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d004      	beq.n	80014cc <LCD_IO_WriteData16+0x15c>
 80014c2:	4b3c      	ldr	r3, [pc, #240]	; (80015b4 <LCD_IO_WriteData16+0x244>)
 80014c4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80014c8:	619a      	str	r2, [r3, #24]
 80014ca:	e003      	b.n	80014d4 <LCD_IO_WriteData16+0x164>
 80014cc:	4b39      	ldr	r3, [pc, #228]	; (80015b4 <LCD_IO_WriteData16+0x244>)
 80014ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80014d2:	619a      	str	r2, [r3, #24]
 80014d4:	4b35      	ldr	r3, [pc, #212]	; (80015ac <LCD_IO_WriteData16+0x23c>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d004      	beq.n	80014ea <LCD_IO_WriteData16+0x17a>
 80014e0:	4b33      	ldr	r3, [pc, #204]	; (80015b0 <LCD_IO_WriteData16+0x240>)
 80014e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014e6:	619a      	str	r2, [r3, #24]
 80014e8:	e003      	b.n	80014f2 <LCD_IO_WriteData16+0x182>
 80014ea:	4b31      	ldr	r3, [pc, #196]	; (80015b0 <LCD_IO_WriteData16+0x240>)
 80014ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014f0:	619a      	str	r2, [r3, #24]
 80014f2:	4b2e      	ldr	r3, [pc, #184]	; (80015ac <LCD_IO_WriteData16+0x23c>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	f003 0308 	and.w	r3, r3, #8
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d004      	beq.n	8001508 <LCD_IO_WriteData16+0x198>
 80014fe:	4b2e      	ldr	r3, [pc, #184]	; (80015b8 <LCD_IO_WriteData16+0x248>)
 8001500:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001504:	619a      	str	r2, [r3, #24]
 8001506:	e003      	b.n	8001510 <LCD_IO_WriteData16+0x1a0>
 8001508:	4b2b      	ldr	r3, [pc, #172]	; (80015b8 <LCD_IO_WriteData16+0x248>)
 800150a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800150e:	619a      	str	r2, [r3, #24]
 8001510:	4b26      	ldr	r3, [pc, #152]	; (80015ac <LCD_IO_WriteData16+0x23c>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	f003 0310 	and.w	r3, r3, #16
 8001518:	2b00      	cmp	r3, #0
 800151a:	d004      	beq.n	8001526 <LCD_IO_WriteData16+0x1b6>
 800151c:	4b26      	ldr	r3, [pc, #152]	; (80015b8 <LCD_IO_WriteData16+0x248>)
 800151e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001522:	619a      	str	r2, [r3, #24]
 8001524:	e003      	b.n	800152e <LCD_IO_WriteData16+0x1be>
 8001526:	4b24      	ldr	r3, [pc, #144]	; (80015b8 <LCD_IO_WriteData16+0x248>)
 8001528:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800152c:	619a      	str	r2, [r3, #24]
 800152e:	4b1f      	ldr	r3, [pc, #124]	; (80015ac <LCD_IO_WriteData16+0x23c>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	f003 0320 	and.w	r3, r3, #32
 8001536:	2b00      	cmp	r3, #0
 8001538:	d004      	beq.n	8001544 <LCD_IO_WriteData16+0x1d4>
 800153a:	4b1f      	ldr	r3, [pc, #124]	; (80015b8 <LCD_IO_WriteData16+0x248>)
 800153c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001540:	619a      	str	r2, [r3, #24]
 8001542:	e003      	b.n	800154c <LCD_IO_WriteData16+0x1dc>
 8001544:	4b1c      	ldr	r3, [pc, #112]	; (80015b8 <LCD_IO_WriteData16+0x248>)
 8001546:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800154a:	619a      	str	r2, [r3, #24]
 800154c:	4b17      	ldr	r3, [pc, #92]	; (80015ac <LCD_IO_WriteData16+0x23c>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001554:	2b00      	cmp	r3, #0
 8001556:	d004      	beq.n	8001562 <LCD_IO_WriteData16+0x1f2>
 8001558:	4b18      	ldr	r3, [pc, #96]	; (80015bc <LCD_IO_WriteData16+0x24c>)
 800155a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800155e:	619a      	str	r2, [r3, #24]
 8001560:	e003      	b.n	800156a <LCD_IO_WriteData16+0x1fa>
 8001562:	4b16      	ldr	r3, [pc, #88]	; (80015bc <LCD_IO_WriteData16+0x24c>)
 8001564:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001568:	619a      	str	r2, [r3, #24]
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <LCD_IO_WriteData16+0x23c>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	b25b      	sxtb	r3, r3
 8001570:	2b00      	cmp	r3, #0
 8001572:	da04      	bge.n	800157e <LCD_IO_WriteData16+0x20e>
 8001574:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <LCD_IO_WriteData16+0x240>)
 8001576:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800157a:	619a      	str	r2, [r3, #24]
 800157c:	e003      	b.n	8001586 <LCD_IO_WriteData16+0x216>
 800157e:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <LCD_IO_WriteData16+0x240>)
 8001580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001584:	619a      	str	r2, [r3, #24]
 8001586:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <LCD_IO_WriteData16+0x250>)
 8001588:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800158c:	619a      	str	r2, [r3, #24]
 800158e:	2008      	movs	r0, #8
 8001590:	f7ff fc91 	bl	8000eb6 <LCD_IO_Delay>
 8001594:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <LCD_IO_WriteData16+0x250>)
 8001596:	2201      	movs	r2, #1
 8001598:	619a      	str	r2, [r3, #24]
  LCD_CS_OFF;
 800159a:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <LCD_IO_WriteData16+0x238>)
 800159c:	2202      	movs	r2, #2
 800159e:	619a      	str	r2, [r3, #24]
}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	58020400 	.word	0x58020400
 80015ac:	2400036e 	.word	0x2400036e
 80015b0:	58021800 	.word	0x58021800
 80015b4:	58020c00 	.word	0x58020c00
 80015b8:	58021000 	.word	0x58021000
 80015bc:	58020000 	.word	0x58020000
 80015c0:	58020800 	.word	0x58020800

080015c4 <LCD_IO_WriteCmd8DataFill16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	603a      	str	r2, [r7, #0]
 80015ce:	71fb      	strb	r3, [r7, #7]
 80015d0:	460b      	mov	r3, r1
 80015d2:	80bb      	strh	r3, [r7, #4]
  LCD_CS_ON;
 80015d4:	4b9a      	ldr	r3, [pc, #616]	; (8001840 <LCD_IO_WriteCmd8DataFill16+0x27c>)
 80015d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015da:	619a      	str	r2, [r3, #24]
  LCD_CMD8_WRITE(Cmd);
 80015dc:	4b99      	ldr	r3, [pc, #612]	; (8001844 <LCD_IO_WriteCmd8DataFill16+0x280>)
 80015de:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80015e2:	619a      	str	r2, [r3, #24]
 80015e4:	4a98      	ldr	r2, [pc, #608]	; (8001848 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80015e6:	79fb      	ldrb	r3, [r7, #7]
 80015e8:	7013      	strb	r3, [r2, #0]
 80015ea:	4b97      	ldr	r3, [pc, #604]	; (8001848 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d004      	beq.n	8001600 <LCD_IO_WriteCmd8DataFill16+0x3c>
 80015f6:	4b95      	ldr	r3, [pc, #596]	; (800184c <LCD_IO_WriteCmd8DataFill16+0x288>)
 80015f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015fc:	619a      	str	r2, [r3, #24]
 80015fe:	e003      	b.n	8001608 <LCD_IO_WriteCmd8DataFill16+0x44>
 8001600:	4b92      	ldr	r3, [pc, #584]	; (800184c <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001602:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001606:	619a      	str	r2, [r3, #24]
 8001608:	4b8f      	ldr	r3, [pc, #572]	; (8001848 <LCD_IO_WriteCmd8DataFill16+0x284>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d004      	beq.n	800161e <LCD_IO_WriteCmd8DataFill16+0x5a>
 8001614:	4b8e      	ldr	r3, [pc, #568]	; (8001850 <LCD_IO_WriteCmd8DataFill16+0x28c>)
 8001616:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800161a:	619a      	str	r2, [r3, #24]
 800161c:	e003      	b.n	8001626 <LCD_IO_WriteCmd8DataFill16+0x62>
 800161e:	4b8c      	ldr	r3, [pc, #560]	; (8001850 <LCD_IO_WriteCmd8DataFill16+0x28c>)
 8001620:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001624:	619a      	str	r2, [r3, #24]
 8001626:	4b88      	ldr	r3, [pc, #544]	; (8001848 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	f003 0304 	and.w	r3, r3, #4
 800162e:	2b00      	cmp	r3, #0
 8001630:	d004      	beq.n	800163c <LCD_IO_WriteCmd8DataFill16+0x78>
 8001632:	4b86      	ldr	r3, [pc, #536]	; (800184c <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001634:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001638:	619a      	str	r2, [r3, #24]
 800163a:	e003      	b.n	8001644 <LCD_IO_WriteCmd8DataFill16+0x80>
 800163c:	4b83      	ldr	r3, [pc, #524]	; (800184c <LCD_IO_WriteCmd8DataFill16+0x288>)
 800163e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001642:	619a      	str	r2, [r3, #24]
 8001644:	4b80      	ldr	r3, [pc, #512]	; (8001848 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	f003 0308 	and.w	r3, r3, #8
 800164c:	2b00      	cmp	r3, #0
 800164e:	d004      	beq.n	800165a <LCD_IO_WriteCmd8DataFill16+0x96>
 8001650:	4b80      	ldr	r3, [pc, #512]	; (8001854 <LCD_IO_WriteCmd8DataFill16+0x290>)
 8001652:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001656:	619a      	str	r2, [r3, #24]
 8001658:	e003      	b.n	8001662 <LCD_IO_WriteCmd8DataFill16+0x9e>
 800165a:	4b7e      	ldr	r3, [pc, #504]	; (8001854 <LCD_IO_WriteCmd8DataFill16+0x290>)
 800165c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001660:	619a      	str	r2, [r3, #24]
 8001662:	4b79      	ldr	r3, [pc, #484]	; (8001848 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	f003 0310 	and.w	r3, r3, #16
 800166a:	2b00      	cmp	r3, #0
 800166c:	d004      	beq.n	8001678 <LCD_IO_WriteCmd8DataFill16+0xb4>
 800166e:	4b79      	ldr	r3, [pc, #484]	; (8001854 <LCD_IO_WriteCmd8DataFill16+0x290>)
 8001670:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001674:	619a      	str	r2, [r3, #24]
 8001676:	e003      	b.n	8001680 <LCD_IO_WriteCmd8DataFill16+0xbc>
 8001678:	4b76      	ldr	r3, [pc, #472]	; (8001854 <LCD_IO_WriteCmd8DataFill16+0x290>)
 800167a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800167e:	619a      	str	r2, [r3, #24]
 8001680:	4b71      	ldr	r3, [pc, #452]	; (8001848 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	f003 0320 	and.w	r3, r3, #32
 8001688:	2b00      	cmp	r3, #0
 800168a:	d004      	beq.n	8001696 <LCD_IO_WriteCmd8DataFill16+0xd2>
 800168c:	4b71      	ldr	r3, [pc, #452]	; (8001854 <LCD_IO_WriteCmd8DataFill16+0x290>)
 800168e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001692:	619a      	str	r2, [r3, #24]
 8001694:	e003      	b.n	800169e <LCD_IO_WriteCmd8DataFill16+0xda>
 8001696:	4b6f      	ldr	r3, [pc, #444]	; (8001854 <LCD_IO_WriteCmd8DataFill16+0x290>)
 8001698:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800169c:	619a      	str	r2, [r3, #24]
 800169e:	4b6a      	ldr	r3, [pc, #424]	; (8001848 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d004      	beq.n	80016b4 <LCD_IO_WriteCmd8DataFill16+0xf0>
 80016aa:	4b6b      	ldr	r3, [pc, #428]	; (8001858 <LCD_IO_WriteCmd8DataFill16+0x294>)
 80016ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016b0:	619a      	str	r2, [r3, #24]
 80016b2:	e003      	b.n	80016bc <LCD_IO_WriteCmd8DataFill16+0xf8>
 80016b4:	4b68      	ldr	r3, [pc, #416]	; (8001858 <LCD_IO_WriteCmd8DataFill16+0x294>)
 80016b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80016ba:	619a      	str	r2, [r3, #24]
 80016bc:	4b62      	ldr	r3, [pc, #392]	; (8001848 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	b25b      	sxtb	r3, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	da04      	bge.n	80016d0 <LCD_IO_WriteCmd8DataFill16+0x10c>
 80016c6:	4b61      	ldr	r3, [pc, #388]	; (800184c <LCD_IO_WriteCmd8DataFill16+0x288>)
 80016c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016cc:	619a      	str	r2, [r3, #24]
 80016ce:	e003      	b.n	80016d8 <LCD_IO_WriteCmd8DataFill16+0x114>
 80016d0:	4b5e      	ldr	r3, [pc, #376]	; (800184c <LCD_IO_WriteCmd8DataFill16+0x288>)
 80016d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016d6:	619a      	str	r2, [r3, #24]
 80016d8:	4b5a      	ldr	r3, [pc, #360]	; (8001844 <LCD_IO_WriteCmd8DataFill16+0x280>)
 80016da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016de:	619a      	str	r2, [r3, #24]
 80016e0:	2008      	movs	r0, #8
 80016e2:	f7ff fbe8 	bl	8000eb6 <LCD_IO_Delay>
 80016e6:	4b57      	ldr	r3, [pc, #348]	; (8001844 <LCD_IO_WriteCmd8DataFill16+0x280>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	619a      	str	r2, [r3, #24]
 80016ec:	4b55      	ldr	r3, [pc, #340]	; (8001844 <LCD_IO_WriteCmd8DataFill16+0x280>)
 80016ee:	2208      	movs	r2, #8
 80016f0:	619a      	str	r2, [r3, #24]
  while(Size--)
 80016f2:	e11a      	b.n	800192a <LCD_IO_WriteCmd8DataFill16+0x366>
  {
    LCD_DATA16_WRITE(Data);
 80016f4:	88bb      	ldrh	r3, [r7, #4]
 80016f6:	0a1b      	lsrs	r3, r3, #8
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	4b52      	ldr	r3, [pc, #328]	; (8001848 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80016fe:	701a      	strb	r2, [r3, #0]
 8001700:	4b51      	ldr	r3, [pc, #324]	; (8001848 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	2b00      	cmp	r3, #0
 800170a:	d004      	beq.n	8001716 <LCD_IO_WriteCmd8DataFill16+0x152>
 800170c:	4b4f      	ldr	r3, [pc, #316]	; (800184c <LCD_IO_WriteCmd8DataFill16+0x288>)
 800170e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001712:	619a      	str	r2, [r3, #24]
 8001714:	e003      	b.n	800171e <LCD_IO_WriteCmd8DataFill16+0x15a>
 8001716:	4b4d      	ldr	r3, [pc, #308]	; (800184c <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001718:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800171c:	619a      	str	r2, [r3, #24]
 800171e:	4b4a      	ldr	r3, [pc, #296]	; (8001848 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d004      	beq.n	8001734 <LCD_IO_WriteCmd8DataFill16+0x170>
 800172a:	4b49      	ldr	r3, [pc, #292]	; (8001850 <LCD_IO_WriteCmd8DataFill16+0x28c>)
 800172c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001730:	619a      	str	r2, [r3, #24]
 8001732:	e003      	b.n	800173c <LCD_IO_WriteCmd8DataFill16+0x178>
 8001734:	4b46      	ldr	r3, [pc, #280]	; (8001850 <LCD_IO_WriteCmd8DataFill16+0x28c>)
 8001736:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800173a:	619a      	str	r2, [r3, #24]
 800173c:	4b42      	ldr	r3, [pc, #264]	; (8001848 <LCD_IO_WriteCmd8DataFill16+0x284>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	2b00      	cmp	r3, #0
 8001746:	d004      	beq.n	8001752 <LCD_IO_WriteCmd8DataFill16+0x18e>
 8001748:	4b40      	ldr	r3, [pc, #256]	; (800184c <LCD_IO_WriteCmd8DataFill16+0x288>)
 800174a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800174e:	619a      	str	r2, [r3, #24]
 8001750:	e003      	b.n	800175a <LCD_IO_WriteCmd8DataFill16+0x196>
 8001752:	4b3e      	ldr	r3, [pc, #248]	; (800184c <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001754:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001758:	619a      	str	r2, [r3, #24]
 800175a:	4b3b      	ldr	r3, [pc, #236]	; (8001848 <LCD_IO_WriteCmd8DataFill16+0x284>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	f003 0308 	and.w	r3, r3, #8
 8001762:	2b00      	cmp	r3, #0
 8001764:	d004      	beq.n	8001770 <LCD_IO_WriteCmd8DataFill16+0x1ac>
 8001766:	4b3b      	ldr	r3, [pc, #236]	; (8001854 <LCD_IO_WriteCmd8DataFill16+0x290>)
 8001768:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800176c:	619a      	str	r2, [r3, #24]
 800176e:	e003      	b.n	8001778 <LCD_IO_WriteCmd8DataFill16+0x1b4>
 8001770:	4b38      	ldr	r3, [pc, #224]	; (8001854 <LCD_IO_WriteCmd8DataFill16+0x290>)
 8001772:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001776:	619a      	str	r2, [r3, #24]
 8001778:	4b33      	ldr	r3, [pc, #204]	; (8001848 <LCD_IO_WriteCmd8DataFill16+0x284>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	f003 0310 	and.w	r3, r3, #16
 8001780:	2b00      	cmp	r3, #0
 8001782:	d004      	beq.n	800178e <LCD_IO_WriteCmd8DataFill16+0x1ca>
 8001784:	4b33      	ldr	r3, [pc, #204]	; (8001854 <LCD_IO_WriteCmd8DataFill16+0x290>)
 8001786:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800178a:	619a      	str	r2, [r3, #24]
 800178c:	e003      	b.n	8001796 <LCD_IO_WriteCmd8DataFill16+0x1d2>
 800178e:	4b31      	ldr	r3, [pc, #196]	; (8001854 <LCD_IO_WriteCmd8DataFill16+0x290>)
 8001790:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001794:	619a      	str	r2, [r3, #24]
 8001796:	4b2c      	ldr	r3, [pc, #176]	; (8001848 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	f003 0320 	and.w	r3, r3, #32
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d004      	beq.n	80017ac <LCD_IO_WriteCmd8DataFill16+0x1e8>
 80017a2:	4b2c      	ldr	r3, [pc, #176]	; (8001854 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80017a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017a8:	619a      	str	r2, [r3, #24]
 80017aa:	e003      	b.n	80017b4 <LCD_IO_WriteCmd8DataFill16+0x1f0>
 80017ac:	4b29      	ldr	r3, [pc, #164]	; (8001854 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80017ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017b2:	619a      	str	r2, [r3, #24]
 80017b4:	4b24      	ldr	r3, [pc, #144]	; (8001848 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d004      	beq.n	80017ca <LCD_IO_WriteCmd8DataFill16+0x206>
 80017c0:	4b25      	ldr	r3, [pc, #148]	; (8001858 <LCD_IO_WriteCmd8DataFill16+0x294>)
 80017c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017c6:	619a      	str	r2, [r3, #24]
 80017c8:	e003      	b.n	80017d2 <LCD_IO_WriteCmd8DataFill16+0x20e>
 80017ca:	4b23      	ldr	r3, [pc, #140]	; (8001858 <LCD_IO_WriteCmd8DataFill16+0x294>)
 80017cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80017d0:	619a      	str	r2, [r3, #24]
 80017d2:	4b1d      	ldr	r3, [pc, #116]	; (8001848 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	b25b      	sxtb	r3, r3
 80017d8:	2b00      	cmp	r3, #0
 80017da:	da04      	bge.n	80017e6 <LCD_IO_WriteCmd8DataFill16+0x222>
 80017dc:	4b1b      	ldr	r3, [pc, #108]	; (800184c <LCD_IO_WriteCmd8DataFill16+0x288>)
 80017de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017e2:	619a      	str	r2, [r3, #24]
 80017e4:	e003      	b.n	80017ee <LCD_IO_WriteCmd8DataFill16+0x22a>
 80017e6:	4b19      	ldr	r3, [pc, #100]	; (800184c <LCD_IO_WriteCmd8DataFill16+0x288>)
 80017e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017ec:	619a      	str	r2, [r3, #24]
 80017ee:	4b15      	ldr	r3, [pc, #84]	; (8001844 <LCD_IO_WriteCmd8DataFill16+0x280>)
 80017f0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017f4:	619a      	str	r2, [r3, #24]
 80017f6:	2008      	movs	r0, #8
 80017f8:	f7ff fb5d 	bl	8000eb6 <LCD_IO_Delay>
 80017fc:	4b11      	ldr	r3, [pc, #68]	; (8001844 <LCD_IO_WriteCmd8DataFill16+0x280>)
 80017fe:	2201      	movs	r2, #1
 8001800:	619a      	str	r2, [r3, #24]
 8001802:	88bb      	ldrh	r3, [r7, #4]
 8001804:	b2da      	uxtb	r2, r3
 8001806:	4b10      	ldr	r3, [pc, #64]	; (8001848 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001808:	701a      	strb	r2, [r3, #0]
 800180a:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <LCD_IO_WriteCmd8DataFill16+0x284>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b00      	cmp	r3, #0
 8001814:	d004      	beq.n	8001820 <LCD_IO_WriteCmd8DataFill16+0x25c>
 8001816:	4b0d      	ldr	r3, [pc, #52]	; (800184c <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001818:	f44f 7200 	mov.w	r2, #512	; 0x200
 800181c:	619a      	str	r2, [r3, #24]
 800181e:	e003      	b.n	8001828 <LCD_IO_WriteCmd8DataFill16+0x264>
 8001820:	4b0a      	ldr	r3, [pc, #40]	; (800184c <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001822:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001826:	619a      	str	r2, [r3, #24]
 8001828:	4b07      	ldr	r3, [pc, #28]	; (8001848 <LCD_IO_WriteCmd8DataFill16+0x284>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d013      	beq.n	800185c <LCD_IO_WriteCmd8DataFill16+0x298>
 8001834:	4b06      	ldr	r3, [pc, #24]	; (8001850 <LCD_IO_WriteCmd8DataFill16+0x28c>)
 8001836:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800183a:	619a      	str	r2, [r3, #24]
 800183c:	e012      	b.n	8001864 <LCD_IO_WriteCmd8DataFill16+0x2a0>
 800183e:	bf00      	nop
 8001840:	58020400 	.word	0x58020400
 8001844:	58020800 	.word	0x58020800
 8001848:	2400036e 	.word	0x2400036e
 800184c:	58021800 	.word	0x58021800
 8001850:	58020c00 	.word	0x58020c00
 8001854:	58021000 	.word	0x58021000
 8001858:	58020000 	.word	0x58020000
 800185c:	4b39      	ldr	r3, [pc, #228]	; (8001944 <LCD_IO_WriteCmd8DataFill16+0x380>)
 800185e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001862:	619a      	str	r2, [r3, #24]
 8001864:	4b38      	ldr	r3, [pc, #224]	; (8001948 <LCD_IO_WriteCmd8DataFill16+0x384>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	2b00      	cmp	r3, #0
 800186e:	d004      	beq.n	800187a <LCD_IO_WriteCmd8DataFill16+0x2b6>
 8001870:	4b36      	ldr	r3, [pc, #216]	; (800194c <LCD_IO_WriteCmd8DataFill16+0x388>)
 8001872:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001876:	619a      	str	r2, [r3, #24]
 8001878:	e003      	b.n	8001882 <LCD_IO_WriteCmd8DataFill16+0x2be>
 800187a:	4b34      	ldr	r3, [pc, #208]	; (800194c <LCD_IO_WriteCmd8DataFill16+0x388>)
 800187c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001880:	619a      	str	r2, [r3, #24]
 8001882:	4b31      	ldr	r3, [pc, #196]	; (8001948 <LCD_IO_WriteCmd8DataFill16+0x384>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	f003 0308 	and.w	r3, r3, #8
 800188a:	2b00      	cmp	r3, #0
 800188c:	d004      	beq.n	8001898 <LCD_IO_WriteCmd8DataFill16+0x2d4>
 800188e:	4b30      	ldr	r3, [pc, #192]	; (8001950 <LCD_IO_WriteCmd8DataFill16+0x38c>)
 8001890:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001894:	619a      	str	r2, [r3, #24]
 8001896:	e003      	b.n	80018a0 <LCD_IO_WriteCmd8DataFill16+0x2dc>
 8001898:	4b2d      	ldr	r3, [pc, #180]	; (8001950 <LCD_IO_WriteCmd8DataFill16+0x38c>)
 800189a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800189e:	619a      	str	r2, [r3, #24]
 80018a0:	4b29      	ldr	r3, [pc, #164]	; (8001948 <LCD_IO_WriteCmd8DataFill16+0x384>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	f003 0310 	and.w	r3, r3, #16
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d004      	beq.n	80018b6 <LCD_IO_WriteCmd8DataFill16+0x2f2>
 80018ac:	4b28      	ldr	r3, [pc, #160]	; (8001950 <LCD_IO_WriteCmd8DataFill16+0x38c>)
 80018ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018b2:	619a      	str	r2, [r3, #24]
 80018b4:	e003      	b.n	80018be <LCD_IO_WriteCmd8DataFill16+0x2fa>
 80018b6:	4b26      	ldr	r3, [pc, #152]	; (8001950 <LCD_IO_WriteCmd8DataFill16+0x38c>)
 80018b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018bc:	619a      	str	r2, [r3, #24]
 80018be:	4b22      	ldr	r3, [pc, #136]	; (8001948 <LCD_IO_WriteCmd8DataFill16+0x384>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	f003 0320 	and.w	r3, r3, #32
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d004      	beq.n	80018d4 <LCD_IO_WriteCmd8DataFill16+0x310>
 80018ca:	4b21      	ldr	r3, [pc, #132]	; (8001950 <LCD_IO_WriteCmd8DataFill16+0x38c>)
 80018cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018d0:	619a      	str	r2, [r3, #24]
 80018d2:	e003      	b.n	80018dc <LCD_IO_WriteCmd8DataFill16+0x318>
 80018d4:	4b1e      	ldr	r3, [pc, #120]	; (8001950 <LCD_IO_WriteCmd8DataFill16+0x38c>)
 80018d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018da:	619a      	str	r2, [r3, #24]
 80018dc:	4b1a      	ldr	r3, [pc, #104]	; (8001948 <LCD_IO_WriteCmd8DataFill16+0x384>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d004      	beq.n	80018f2 <LCD_IO_WriteCmd8DataFill16+0x32e>
 80018e8:	4b1a      	ldr	r3, [pc, #104]	; (8001954 <LCD_IO_WriteCmd8DataFill16+0x390>)
 80018ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018ee:	619a      	str	r2, [r3, #24]
 80018f0:	e003      	b.n	80018fa <LCD_IO_WriteCmd8DataFill16+0x336>
 80018f2:	4b18      	ldr	r3, [pc, #96]	; (8001954 <LCD_IO_WriteCmd8DataFill16+0x390>)
 80018f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018f8:	619a      	str	r2, [r3, #24]
 80018fa:	4b13      	ldr	r3, [pc, #76]	; (8001948 <LCD_IO_WriteCmd8DataFill16+0x384>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	b25b      	sxtb	r3, r3
 8001900:	2b00      	cmp	r3, #0
 8001902:	da04      	bge.n	800190e <LCD_IO_WriteCmd8DataFill16+0x34a>
 8001904:	4b11      	ldr	r3, [pc, #68]	; (800194c <LCD_IO_WriteCmd8DataFill16+0x388>)
 8001906:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800190a:	619a      	str	r2, [r3, #24]
 800190c:	e003      	b.n	8001916 <LCD_IO_WriteCmd8DataFill16+0x352>
 800190e:	4b0f      	ldr	r3, [pc, #60]	; (800194c <LCD_IO_WriteCmd8DataFill16+0x388>)
 8001910:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001914:	619a      	str	r2, [r3, #24]
 8001916:	4b10      	ldr	r3, [pc, #64]	; (8001958 <LCD_IO_WriteCmd8DataFill16+0x394>)
 8001918:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800191c:	619a      	str	r2, [r3, #24]
 800191e:	2008      	movs	r0, #8
 8001920:	f7ff fac9 	bl	8000eb6 <LCD_IO_Delay>
 8001924:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <LCD_IO_WriteCmd8DataFill16+0x394>)
 8001926:	2201      	movs	r2, #1
 8001928:	619a      	str	r2, [r3, #24]
  while(Size--)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	1e5a      	subs	r2, r3, #1
 800192e:	603a      	str	r2, [r7, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	f47f aedf 	bne.w	80016f4 <LCD_IO_WriteCmd8DataFill16+0x130>
  }
  LCD_CS_OFF;
 8001936:	4b09      	ldr	r3, [pc, #36]	; (800195c <LCD_IO_WriteCmd8DataFill16+0x398>)
 8001938:	2202      	movs	r2, #2
 800193a:	619a      	str	r2, [r3, #24]
}
 800193c:	bf00      	nop
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	58020c00 	.word	0x58020c00
 8001948:	2400036e 	.word	0x2400036e
 800194c:	58021800 	.word	0x58021800
 8001950:	58021000 	.word	0x58021000
 8001954:	58020000 	.word	0x58020000
 8001958:	58020800 	.word	0x58020800
 800195c:	58020400 	.word	0x58020400

08001960 <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
 800196c:	73fb      	strb	r3, [r7, #15]
  LCD_CS_ON;
 800196e:	4b92      	ldr	r3, [pc, #584]	; (8001bb8 <LCD_IO_WriteCmd8MultipleData8+0x258>)
 8001970:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001974:	619a      	str	r2, [r3, #24]
  LCD_CMD8_WRITE(Cmd);
 8001976:	4b91      	ldr	r3, [pc, #580]	; (8001bbc <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 8001978:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800197c:	619a      	str	r2, [r3, #24]
 800197e:	4a90      	ldr	r2, [pc, #576]	; (8001bc0 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001980:	7bfb      	ldrb	r3, [r7, #15]
 8001982:	7013      	strb	r3, [r2, #0]
 8001984:	4b8e      	ldr	r3, [pc, #568]	; (8001bc0 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	2b00      	cmp	r3, #0
 800198e:	d004      	beq.n	800199a <LCD_IO_WriteCmd8MultipleData8+0x3a>
 8001990:	4b8c      	ldr	r3, [pc, #560]	; (8001bc4 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001992:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001996:	619a      	str	r2, [r3, #24]
 8001998:	e003      	b.n	80019a2 <LCD_IO_WriteCmd8MultipleData8+0x42>
 800199a:	4b8a      	ldr	r3, [pc, #552]	; (8001bc4 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 800199c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019a0:	619a      	str	r2, [r3, #24]
 80019a2:	4b87      	ldr	r3, [pc, #540]	; (8001bc0 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d004      	beq.n	80019b8 <LCD_IO_WriteCmd8MultipleData8+0x58>
 80019ae:	4b86      	ldr	r3, [pc, #536]	; (8001bc8 <LCD_IO_WriteCmd8MultipleData8+0x268>)
 80019b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80019b4:	619a      	str	r2, [r3, #24]
 80019b6:	e003      	b.n	80019c0 <LCD_IO_WriteCmd8MultipleData8+0x60>
 80019b8:	4b83      	ldr	r3, [pc, #524]	; (8001bc8 <LCD_IO_WriteCmd8MultipleData8+0x268>)
 80019ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80019be:	619a      	str	r2, [r3, #24]
 80019c0:	4b7f      	ldr	r3, [pc, #508]	; (8001bc0 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	f003 0304 	and.w	r3, r3, #4
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d004      	beq.n	80019d6 <LCD_IO_WriteCmd8MultipleData8+0x76>
 80019cc:	4b7d      	ldr	r3, [pc, #500]	; (8001bc4 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 80019ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019d2:	619a      	str	r2, [r3, #24]
 80019d4:	e003      	b.n	80019de <LCD_IO_WriteCmd8MultipleData8+0x7e>
 80019d6:	4b7b      	ldr	r3, [pc, #492]	; (8001bc4 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 80019d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019dc:	619a      	str	r2, [r3, #24]
 80019de:	4b78      	ldr	r3, [pc, #480]	; (8001bc0 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	f003 0308 	and.w	r3, r3, #8
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d004      	beq.n	80019f4 <LCD_IO_WriteCmd8MultipleData8+0x94>
 80019ea:	4b78      	ldr	r3, [pc, #480]	; (8001bcc <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 80019ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019f0:	619a      	str	r2, [r3, #24]
 80019f2:	e003      	b.n	80019fc <LCD_IO_WriteCmd8MultipleData8+0x9c>
 80019f4:	4b75      	ldr	r3, [pc, #468]	; (8001bcc <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 80019f6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80019fa:	619a      	str	r2, [r3, #24]
 80019fc:	4b70      	ldr	r3, [pc, #448]	; (8001bc0 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	f003 0310 	and.w	r3, r3, #16
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d004      	beq.n	8001a12 <LCD_IO_WriteCmd8MultipleData8+0xb2>
 8001a08:	4b70      	ldr	r3, [pc, #448]	; (8001bcc <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001a0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a0e:	619a      	str	r2, [r3, #24]
 8001a10:	e003      	b.n	8001a1a <LCD_IO_WriteCmd8MultipleData8+0xba>
 8001a12:	4b6e      	ldr	r3, [pc, #440]	; (8001bcc <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001a14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a18:	619a      	str	r2, [r3, #24]
 8001a1a:	4b69      	ldr	r3, [pc, #420]	; (8001bc0 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	f003 0320 	and.w	r3, r3, #32
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d004      	beq.n	8001a30 <LCD_IO_WriteCmd8MultipleData8+0xd0>
 8001a26:	4b69      	ldr	r3, [pc, #420]	; (8001bcc <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001a28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a2c:	619a      	str	r2, [r3, #24]
 8001a2e:	e003      	b.n	8001a38 <LCD_IO_WriteCmd8MultipleData8+0xd8>
 8001a30:	4b66      	ldr	r3, [pc, #408]	; (8001bcc <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001a32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a36:	619a      	str	r2, [r3, #24]
 8001a38:	4b61      	ldr	r3, [pc, #388]	; (8001bc0 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d004      	beq.n	8001a4e <LCD_IO_WriteCmd8MultipleData8+0xee>
 8001a44:	4b62      	ldr	r3, [pc, #392]	; (8001bd0 <LCD_IO_WriteCmd8MultipleData8+0x270>)
 8001a46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a4a:	619a      	str	r2, [r3, #24]
 8001a4c:	e003      	b.n	8001a56 <LCD_IO_WriteCmd8MultipleData8+0xf6>
 8001a4e:	4b60      	ldr	r3, [pc, #384]	; (8001bd0 <LCD_IO_WriteCmd8MultipleData8+0x270>)
 8001a50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a54:	619a      	str	r2, [r3, #24]
 8001a56:	4b5a      	ldr	r3, [pc, #360]	; (8001bc0 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	b25b      	sxtb	r3, r3
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	da04      	bge.n	8001a6a <LCD_IO_WriteCmd8MultipleData8+0x10a>
 8001a60:	4b58      	ldr	r3, [pc, #352]	; (8001bc4 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001a62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a66:	619a      	str	r2, [r3, #24]
 8001a68:	e003      	b.n	8001a72 <LCD_IO_WriteCmd8MultipleData8+0x112>
 8001a6a:	4b56      	ldr	r3, [pc, #344]	; (8001bc4 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001a6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a70:	619a      	str	r2, [r3, #24]
 8001a72:	4b52      	ldr	r3, [pc, #328]	; (8001bbc <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 8001a74:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a78:	619a      	str	r2, [r3, #24]
 8001a7a:	2008      	movs	r0, #8
 8001a7c:	f7ff fa1b 	bl	8000eb6 <LCD_IO_Delay>
 8001a80:	4b4e      	ldr	r3, [pc, #312]	; (8001bbc <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	619a      	str	r2, [r3, #24]
 8001a86:	4b4d      	ldr	r3, [pc, #308]	; (8001bbc <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 8001a88:	2208      	movs	r2, #8
 8001a8a:	619a      	str	r2, [r3, #24]

  while(Size--)
 8001a8c:	e087      	b.n	8001b9e <LCD_IO_WriteCmd8MultipleData8+0x23e>
  {
    LCD_DATA8_WRITE(*pData);
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	781a      	ldrb	r2, [r3, #0]
 8001a92:	4b4b      	ldr	r3, [pc, #300]	; (8001bc0 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001a94:	701a      	strb	r2, [r3, #0]
 8001a96:	4b4a      	ldr	r3, [pc, #296]	; (8001bc0 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d004      	beq.n	8001aac <LCD_IO_WriteCmd8MultipleData8+0x14c>
 8001aa2:	4b48      	ldr	r3, [pc, #288]	; (8001bc4 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001aa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aa8:	619a      	str	r2, [r3, #24]
 8001aaa:	e003      	b.n	8001ab4 <LCD_IO_WriteCmd8MultipleData8+0x154>
 8001aac:	4b45      	ldr	r3, [pc, #276]	; (8001bc4 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001aae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ab2:	619a      	str	r2, [r3, #24]
 8001ab4:	4b42      	ldr	r3, [pc, #264]	; (8001bc0 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d004      	beq.n	8001aca <LCD_IO_WriteCmd8MultipleData8+0x16a>
 8001ac0:	4b41      	ldr	r3, [pc, #260]	; (8001bc8 <LCD_IO_WriteCmd8MultipleData8+0x268>)
 8001ac2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ac6:	619a      	str	r2, [r3, #24]
 8001ac8:	e003      	b.n	8001ad2 <LCD_IO_WriteCmd8MultipleData8+0x172>
 8001aca:	4b3f      	ldr	r3, [pc, #252]	; (8001bc8 <LCD_IO_WriteCmd8MultipleData8+0x268>)
 8001acc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001ad0:	619a      	str	r2, [r3, #24]
 8001ad2:	4b3b      	ldr	r3, [pc, #236]	; (8001bc0 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	f003 0304 	and.w	r3, r3, #4
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d004      	beq.n	8001ae8 <LCD_IO_WriteCmd8MultipleData8+0x188>
 8001ade:	4b39      	ldr	r3, [pc, #228]	; (8001bc4 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001ae0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ae4:	619a      	str	r2, [r3, #24]
 8001ae6:	e003      	b.n	8001af0 <LCD_IO_WriteCmd8MultipleData8+0x190>
 8001ae8:	4b36      	ldr	r3, [pc, #216]	; (8001bc4 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001aea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001aee:	619a      	str	r2, [r3, #24]
 8001af0:	4b33      	ldr	r3, [pc, #204]	; (8001bc0 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	f003 0308 	and.w	r3, r3, #8
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d004      	beq.n	8001b06 <LCD_IO_WriteCmd8MultipleData8+0x1a6>
 8001afc:	4b33      	ldr	r3, [pc, #204]	; (8001bcc <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001afe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b02:	619a      	str	r2, [r3, #24]
 8001b04:	e003      	b.n	8001b0e <LCD_IO_WriteCmd8MultipleData8+0x1ae>
 8001b06:	4b31      	ldr	r3, [pc, #196]	; (8001bcc <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001b08:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b0c:	619a      	str	r2, [r3, #24]
 8001b0e:	4b2c      	ldr	r3, [pc, #176]	; (8001bc0 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	f003 0310 	and.w	r3, r3, #16
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d004      	beq.n	8001b24 <LCD_IO_WriteCmd8MultipleData8+0x1c4>
 8001b1a:	4b2c      	ldr	r3, [pc, #176]	; (8001bcc <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001b1c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b20:	619a      	str	r2, [r3, #24]
 8001b22:	e003      	b.n	8001b2c <LCD_IO_WriteCmd8MultipleData8+0x1cc>
 8001b24:	4b29      	ldr	r3, [pc, #164]	; (8001bcc <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001b26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b2a:	619a      	str	r2, [r3, #24]
 8001b2c:	4b24      	ldr	r3, [pc, #144]	; (8001bc0 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	f003 0320 	and.w	r3, r3, #32
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d004      	beq.n	8001b42 <LCD_IO_WriteCmd8MultipleData8+0x1e2>
 8001b38:	4b24      	ldr	r3, [pc, #144]	; (8001bcc <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001b3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b3e:	619a      	str	r2, [r3, #24]
 8001b40:	e003      	b.n	8001b4a <LCD_IO_WriteCmd8MultipleData8+0x1ea>
 8001b42:	4b22      	ldr	r3, [pc, #136]	; (8001bcc <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001b44:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b48:	619a      	str	r2, [r3, #24]
 8001b4a:	4b1d      	ldr	r3, [pc, #116]	; (8001bc0 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d004      	beq.n	8001b60 <LCD_IO_WriteCmd8MultipleData8+0x200>
 8001b56:	4b1e      	ldr	r3, [pc, #120]	; (8001bd0 <LCD_IO_WriteCmd8MultipleData8+0x270>)
 8001b58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b5c:	619a      	str	r2, [r3, #24]
 8001b5e:	e003      	b.n	8001b68 <LCD_IO_WriteCmd8MultipleData8+0x208>
 8001b60:	4b1b      	ldr	r3, [pc, #108]	; (8001bd0 <LCD_IO_WriteCmd8MultipleData8+0x270>)
 8001b62:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b66:	619a      	str	r2, [r3, #24]
 8001b68:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	b25b      	sxtb	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	da04      	bge.n	8001b7c <LCD_IO_WriteCmd8MultipleData8+0x21c>
 8001b72:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001b74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b78:	619a      	str	r2, [r3, #24]
 8001b7a:	e003      	b.n	8001b84 <LCD_IO_WriteCmd8MultipleData8+0x224>
 8001b7c:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b82:	619a      	str	r2, [r3, #24]
 8001b84:	4b0d      	ldr	r3, [pc, #52]	; (8001bbc <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 8001b86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b8a:	619a      	str	r2, [r3, #24]
 8001b8c:	2008      	movs	r0, #8
 8001b8e:	f7ff f992 	bl	8000eb6 <LCD_IO_Delay>
 8001b92:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	619a      	str	r2, [r3, #24]
    pData ++;
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	60bb      	str	r3, [r7, #8]
  while(Size--)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	1e5a      	subs	r2, r3, #1
 8001ba2:	607a      	str	r2, [r7, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f47f af72 	bne.w	8001a8e <LCD_IO_WriteCmd8MultipleData8+0x12e>
  }
  LCD_CS_OFF;
 8001baa:	4b03      	ldr	r3, [pc, #12]	; (8001bb8 <LCD_IO_WriteCmd8MultipleData8+0x258>)
 8001bac:	2202      	movs	r2, #2
 8001bae:	619a      	str	r2, [r3, #24]
}
 8001bb0:	bf00      	nop
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	58020400 	.word	0x58020400
 8001bbc:	58020800 	.word	0x58020800
 8001bc0:	2400036e 	.word	0x2400036e
 8001bc4:	58021800 	.word	0x58021800
 8001bc8:	58020c00 	.word	0x58020c00
 8001bcc:	58021000 	.word	0x58021000
 8001bd0:	58020000 	.word	0x58020000

08001bd4 <LCD_IO_WriteCmd8MultipleData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData16(uint8_t Cmd, uint16_t *pData, uint32_t Size)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
 8001be0:	73fb      	strb	r3, [r7, #15]
  LCD_CS_ON;
 8001be2:	4b9b      	ldr	r3, [pc, #620]	; (8001e50 <LCD_IO_WriteCmd8MultipleData16+0x27c>)
 8001be4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001be8:	619a      	str	r2, [r3, #24]
  LCD_CMD8_WRITE(Cmd);
 8001bea:	4b9a      	ldr	r3, [pc, #616]	; (8001e54 <LCD_IO_WriteCmd8MultipleData16+0x280>)
 8001bec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001bf0:	619a      	str	r2, [r3, #24]
 8001bf2:	4a99      	ldr	r2, [pc, #612]	; (8001e58 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001bf4:	7bfb      	ldrb	r3, [r7, #15]
 8001bf6:	7013      	strb	r3, [r2, #0]
 8001bf8:	4b97      	ldr	r3, [pc, #604]	; (8001e58 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d004      	beq.n	8001c0e <LCD_IO_WriteCmd8MultipleData16+0x3a>
 8001c04:	4b95      	ldr	r3, [pc, #596]	; (8001e5c <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001c06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c0a:	619a      	str	r2, [r3, #24]
 8001c0c:	e003      	b.n	8001c16 <LCD_IO_WriteCmd8MultipleData16+0x42>
 8001c0e:	4b93      	ldr	r3, [pc, #588]	; (8001e5c <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001c10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c14:	619a      	str	r2, [r3, #24]
 8001c16:	4b90      	ldr	r3, [pc, #576]	; (8001e58 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d004      	beq.n	8001c2c <LCD_IO_WriteCmd8MultipleData16+0x58>
 8001c22:	4b8f      	ldr	r3, [pc, #572]	; (8001e60 <LCD_IO_WriteCmd8MultipleData16+0x28c>)
 8001c24:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c28:	619a      	str	r2, [r3, #24]
 8001c2a:	e003      	b.n	8001c34 <LCD_IO_WriteCmd8MultipleData16+0x60>
 8001c2c:	4b8c      	ldr	r3, [pc, #560]	; (8001e60 <LCD_IO_WriteCmd8MultipleData16+0x28c>)
 8001c2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001c32:	619a      	str	r2, [r3, #24]
 8001c34:	4b88      	ldr	r3, [pc, #544]	; (8001e58 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d004      	beq.n	8001c4a <LCD_IO_WriteCmd8MultipleData16+0x76>
 8001c40:	4b86      	ldr	r3, [pc, #536]	; (8001e5c <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001c42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c46:	619a      	str	r2, [r3, #24]
 8001c48:	e003      	b.n	8001c52 <LCD_IO_WriteCmd8MultipleData16+0x7e>
 8001c4a:	4b84      	ldr	r3, [pc, #528]	; (8001e5c <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001c4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c50:	619a      	str	r2, [r3, #24]
 8001c52:	4b81      	ldr	r3, [pc, #516]	; (8001e58 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	f003 0308 	and.w	r3, r3, #8
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d004      	beq.n	8001c68 <LCD_IO_WriteCmd8MultipleData16+0x94>
 8001c5e:	4b81      	ldr	r3, [pc, #516]	; (8001e64 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001c60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c64:	619a      	str	r2, [r3, #24]
 8001c66:	e003      	b.n	8001c70 <LCD_IO_WriteCmd8MultipleData16+0x9c>
 8001c68:	4b7e      	ldr	r3, [pc, #504]	; (8001e64 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001c6a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001c6e:	619a      	str	r2, [r3, #24]
 8001c70:	4b79      	ldr	r3, [pc, #484]	; (8001e58 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	f003 0310 	and.w	r3, r3, #16
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d004      	beq.n	8001c86 <LCD_IO_WriteCmd8MultipleData16+0xb2>
 8001c7c:	4b79      	ldr	r3, [pc, #484]	; (8001e64 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001c7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c82:	619a      	str	r2, [r3, #24]
 8001c84:	e003      	b.n	8001c8e <LCD_IO_WriteCmd8MultipleData16+0xba>
 8001c86:	4b77      	ldr	r3, [pc, #476]	; (8001e64 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001c88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c8c:	619a      	str	r2, [r3, #24]
 8001c8e:	4b72      	ldr	r3, [pc, #456]	; (8001e58 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	f003 0320 	and.w	r3, r3, #32
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d004      	beq.n	8001ca4 <LCD_IO_WriteCmd8MultipleData16+0xd0>
 8001c9a:	4b72      	ldr	r3, [pc, #456]	; (8001e64 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001c9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ca0:	619a      	str	r2, [r3, #24]
 8001ca2:	e003      	b.n	8001cac <LCD_IO_WriteCmd8MultipleData16+0xd8>
 8001ca4:	4b6f      	ldr	r3, [pc, #444]	; (8001e64 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001ca6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001caa:	619a      	str	r2, [r3, #24]
 8001cac:	4b6a      	ldr	r3, [pc, #424]	; (8001e58 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d004      	beq.n	8001cc2 <LCD_IO_WriteCmd8MultipleData16+0xee>
 8001cb8:	4b6b      	ldr	r3, [pc, #428]	; (8001e68 <LCD_IO_WriteCmd8MultipleData16+0x294>)
 8001cba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cbe:	619a      	str	r2, [r3, #24]
 8001cc0:	e003      	b.n	8001cca <LCD_IO_WriteCmd8MultipleData16+0xf6>
 8001cc2:	4b69      	ldr	r3, [pc, #420]	; (8001e68 <LCD_IO_WriteCmd8MultipleData16+0x294>)
 8001cc4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001cc8:	619a      	str	r2, [r3, #24]
 8001cca:	4b63      	ldr	r3, [pc, #396]	; (8001e58 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	b25b      	sxtb	r3, r3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	da04      	bge.n	8001cde <LCD_IO_WriteCmd8MultipleData16+0x10a>
 8001cd4:	4b61      	ldr	r3, [pc, #388]	; (8001e5c <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001cd6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cda:	619a      	str	r2, [r3, #24]
 8001cdc:	e003      	b.n	8001ce6 <LCD_IO_WriteCmd8MultipleData16+0x112>
 8001cde:	4b5f      	ldr	r3, [pc, #380]	; (8001e5c <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001ce0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ce4:	619a      	str	r2, [r3, #24]
 8001ce6:	4b5b      	ldr	r3, [pc, #364]	; (8001e54 <LCD_IO_WriteCmd8MultipleData16+0x280>)
 8001ce8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001cec:	619a      	str	r2, [r3, #24]
 8001cee:	2008      	movs	r0, #8
 8001cf0:	f7ff f8e1 	bl	8000eb6 <LCD_IO_Delay>
 8001cf4:	4b57      	ldr	r3, [pc, #348]	; (8001e54 <LCD_IO_WriteCmd8MultipleData16+0x280>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	619a      	str	r2, [r3, #24]
 8001cfa:	4b56      	ldr	r3, [pc, #344]	; (8001e54 <LCD_IO_WriteCmd8MultipleData16+0x280>)
 8001cfc:	2208      	movs	r2, #8
 8001cfe:	619a      	str	r2, [r3, #24]
  while(Size--)
 8001d00:	e11e      	b.n	8001f40 <LCD_IO_WriteCmd8MultipleData16+0x36c>
  {
    LCD_DATA16_WRITE(*pData);
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	881b      	ldrh	r3, [r3, #0]
 8001d06:	0a1b      	lsrs	r3, r3, #8
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	4b52      	ldr	r3, [pc, #328]	; (8001e58 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001d0e:	701a      	strb	r2, [r3, #0]
 8001d10:	4b51      	ldr	r3, [pc, #324]	; (8001e58 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d004      	beq.n	8001d26 <LCD_IO_WriteCmd8MultipleData16+0x152>
 8001d1c:	4b4f      	ldr	r3, [pc, #316]	; (8001e5c <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001d1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d22:	619a      	str	r2, [r3, #24]
 8001d24:	e003      	b.n	8001d2e <LCD_IO_WriteCmd8MultipleData16+0x15a>
 8001d26:	4b4d      	ldr	r3, [pc, #308]	; (8001e5c <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001d28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d2c:	619a      	str	r2, [r3, #24]
 8001d2e:	4b4a      	ldr	r3, [pc, #296]	; (8001e58 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d004      	beq.n	8001d44 <LCD_IO_WriteCmd8MultipleData16+0x170>
 8001d3a:	4b49      	ldr	r3, [pc, #292]	; (8001e60 <LCD_IO_WriteCmd8MultipleData16+0x28c>)
 8001d3c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d40:	619a      	str	r2, [r3, #24]
 8001d42:	e003      	b.n	8001d4c <LCD_IO_WriteCmd8MultipleData16+0x178>
 8001d44:	4b46      	ldr	r3, [pc, #280]	; (8001e60 <LCD_IO_WriteCmd8MultipleData16+0x28c>)
 8001d46:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001d4a:	619a      	str	r2, [r3, #24]
 8001d4c:	4b42      	ldr	r3, [pc, #264]	; (8001e58 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d004      	beq.n	8001d62 <LCD_IO_WriteCmd8MultipleData16+0x18e>
 8001d58:	4b40      	ldr	r3, [pc, #256]	; (8001e5c <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001d5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d5e:	619a      	str	r2, [r3, #24]
 8001d60:	e003      	b.n	8001d6a <LCD_IO_WriteCmd8MultipleData16+0x196>
 8001d62:	4b3e      	ldr	r3, [pc, #248]	; (8001e5c <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001d64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d68:	619a      	str	r2, [r3, #24]
 8001d6a:	4b3b      	ldr	r3, [pc, #236]	; (8001e58 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	f003 0308 	and.w	r3, r3, #8
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d004      	beq.n	8001d80 <LCD_IO_WriteCmd8MultipleData16+0x1ac>
 8001d76:	4b3b      	ldr	r3, [pc, #236]	; (8001e64 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001d78:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d7c:	619a      	str	r2, [r3, #24]
 8001d7e:	e003      	b.n	8001d88 <LCD_IO_WriteCmd8MultipleData16+0x1b4>
 8001d80:	4b38      	ldr	r3, [pc, #224]	; (8001e64 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001d82:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001d86:	619a      	str	r2, [r3, #24]
 8001d88:	4b33      	ldr	r3, [pc, #204]	; (8001e58 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	f003 0310 	and.w	r3, r3, #16
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d004      	beq.n	8001d9e <LCD_IO_WriteCmd8MultipleData16+0x1ca>
 8001d94:	4b33      	ldr	r3, [pc, #204]	; (8001e64 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001d96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d9a:	619a      	str	r2, [r3, #24]
 8001d9c:	e003      	b.n	8001da6 <LCD_IO_WriteCmd8MultipleData16+0x1d2>
 8001d9e:	4b31      	ldr	r3, [pc, #196]	; (8001e64 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001da0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001da4:	619a      	str	r2, [r3, #24]
 8001da6:	4b2c      	ldr	r3, [pc, #176]	; (8001e58 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	f003 0320 	and.w	r3, r3, #32
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d004      	beq.n	8001dbc <LCD_IO_WriteCmd8MultipleData16+0x1e8>
 8001db2:	4b2c      	ldr	r3, [pc, #176]	; (8001e64 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001db4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001db8:	619a      	str	r2, [r3, #24]
 8001dba:	e003      	b.n	8001dc4 <LCD_IO_WriteCmd8MultipleData16+0x1f0>
 8001dbc:	4b29      	ldr	r3, [pc, #164]	; (8001e64 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001dbe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dc2:	619a      	str	r2, [r3, #24]
 8001dc4:	4b24      	ldr	r3, [pc, #144]	; (8001e58 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d004      	beq.n	8001dda <LCD_IO_WriteCmd8MultipleData16+0x206>
 8001dd0:	4b25      	ldr	r3, [pc, #148]	; (8001e68 <LCD_IO_WriteCmd8MultipleData16+0x294>)
 8001dd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dd6:	619a      	str	r2, [r3, #24]
 8001dd8:	e003      	b.n	8001de2 <LCD_IO_WriteCmd8MultipleData16+0x20e>
 8001dda:	4b23      	ldr	r3, [pc, #140]	; (8001e68 <LCD_IO_WriteCmd8MultipleData16+0x294>)
 8001ddc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001de0:	619a      	str	r2, [r3, #24]
 8001de2:	4b1d      	ldr	r3, [pc, #116]	; (8001e58 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	b25b      	sxtb	r3, r3
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	da04      	bge.n	8001df6 <LCD_IO_WriteCmd8MultipleData16+0x222>
 8001dec:	4b1b      	ldr	r3, [pc, #108]	; (8001e5c <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001dee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001df2:	619a      	str	r2, [r3, #24]
 8001df4:	e003      	b.n	8001dfe <LCD_IO_WriteCmd8MultipleData16+0x22a>
 8001df6:	4b19      	ldr	r3, [pc, #100]	; (8001e5c <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001df8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dfc:	619a      	str	r2, [r3, #24]
 8001dfe:	4b15      	ldr	r3, [pc, #84]	; (8001e54 <LCD_IO_WriteCmd8MultipleData16+0x280>)
 8001e00:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e04:	619a      	str	r2, [r3, #24]
 8001e06:	2008      	movs	r0, #8
 8001e08:	f7ff f855 	bl	8000eb6 <LCD_IO_Delay>
 8001e0c:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <LCD_IO_WriteCmd8MultipleData16+0x280>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	619a      	str	r2, [r3, #24]
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	881b      	ldrh	r3, [r3, #0]
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	4b0f      	ldr	r3, [pc, #60]	; (8001e58 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001e1a:	701a      	strb	r2, [r3, #0]
 8001e1c:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d004      	beq.n	8001e32 <LCD_IO_WriteCmd8MultipleData16+0x25e>
 8001e28:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001e2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e2e:	619a      	str	r2, [r3, #24]
 8001e30:	e003      	b.n	8001e3a <LCD_IO_WriteCmd8MultipleData16+0x266>
 8001e32:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001e34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e38:	619a      	str	r2, [r3, #24]
 8001e3a:	4b07      	ldr	r3, [pc, #28]	; (8001e58 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d012      	beq.n	8001e6c <LCD_IO_WriteCmd8MultipleData16+0x298>
 8001e46:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <LCD_IO_WriteCmd8MultipleData16+0x28c>)
 8001e48:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e4c:	619a      	str	r2, [r3, #24]
 8001e4e:	e011      	b.n	8001e74 <LCD_IO_WriteCmd8MultipleData16+0x2a0>
 8001e50:	58020400 	.word	0x58020400
 8001e54:	58020800 	.word	0x58020800
 8001e58:	2400036e 	.word	0x2400036e
 8001e5c:	58021800 	.word	0x58021800
 8001e60:	58020c00 	.word	0x58020c00
 8001e64:	58021000 	.word	0x58021000
 8001e68:	58020000 	.word	0x58020000
 8001e6c:	4b3b      	ldr	r3, [pc, #236]	; (8001f5c <LCD_IO_WriteCmd8MultipleData16+0x388>)
 8001e6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001e72:	619a      	str	r2, [r3, #24]
 8001e74:	4b3a      	ldr	r3, [pc, #232]	; (8001f60 <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	f003 0304 	and.w	r3, r3, #4
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d004      	beq.n	8001e8a <LCD_IO_WriteCmd8MultipleData16+0x2b6>
 8001e80:	4b38      	ldr	r3, [pc, #224]	; (8001f64 <LCD_IO_WriteCmd8MultipleData16+0x390>)
 8001e82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e86:	619a      	str	r2, [r3, #24]
 8001e88:	e003      	b.n	8001e92 <LCD_IO_WriteCmd8MultipleData16+0x2be>
 8001e8a:	4b36      	ldr	r3, [pc, #216]	; (8001f64 <LCD_IO_WriteCmd8MultipleData16+0x390>)
 8001e8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e90:	619a      	str	r2, [r3, #24]
 8001e92:	4b33      	ldr	r3, [pc, #204]	; (8001f60 <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	f003 0308 	and.w	r3, r3, #8
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d004      	beq.n	8001ea8 <LCD_IO_WriteCmd8MultipleData16+0x2d4>
 8001e9e:	4b32      	ldr	r3, [pc, #200]	; (8001f68 <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8001ea0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ea4:	619a      	str	r2, [r3, #24]
 8001ea6:	e003      	b.n	8001eb0 <LCD_IO_WriteCmd8MultipleData16+0x2dc>
 8001ea8:	4b2f      	ldr	r3, [pc, #188]	; (8001f68 <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8001eaa:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001eae:	619a      	str	r2, [r3, #24]
 8001eb0:	4b2b      	ldr	r3, [pc, #172]	; (8001f60 <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	f003 0310 	and.w	r3, r3, #16
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d004      	beq.n	8001ec6 <LCD_IO_WriteCmd8MultipleData16+0x2f2>
 8001ebc:	4b2a      	ldr	r3, [pc, #168]	; (8001f68 <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8001ebe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ec2:	619a      	str	r2, [r3, #24]
 8001ec4:	e003      	b.n	8001ece <LCD_IO_WriteCmd8MultipleData16+0x2fa>
 8001ec6:	4b28      	ldr	r3, [pc, #160]	; (8001f68 <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8001ec8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ecc:	619a      	str	r2, [r3, #24]
 8001ece:	4b24      	ldr	r3, [pc, #144]	; (8001f60 <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	f003 0320 	and.w	r3, r3, #32
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d004      	beq.n	8001ee4 <LCD_IO_WriteCmd8MultipleData16+0x310>
 8001eda:	4b23      	ldr	r3, [pc, #140]	; (8001f68 <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8001edc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ee0:	619a      	str	r2, [r3, #24]
 8001ee2:	e003      	b.n	8001eec <LCD_IO_WriteCmd8MultipleData16+0x318>
 8001ee4:	4b20      	ldr	r3, [pc, #128]	; (8001f68 <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8001ee6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001eea:	619a      	str	r2, [r3, #24]
 8001eec:	4b1c      	ldr	r3, [pc, #112]	; (8001f60 <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d004      	beq.n	8001f02 <LCD_IO_WriteCmd8MultipleData16+0x32e>
 8001ef8:	4b1c      	ldr	r3, [pc, #112]	; (8001f6c <LCD_IO_WriteCmd8MultipleData16+0x398>)
 8001efa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001efe:	619a      	str	r2, [r3, #24]
 8001f00:	e003      	b.n	8001f0a <LCD_IO_WriteCmd8MultipleData16+0x336>
 8001f02:	4b1a      	ldr	r3, [pc, #104]	; (8001f6c <LCD_IO_WriteCmd8MultipleData16+0x398>)
 8001f04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f08:	619a      	str	r2, [r3, #24]
 8001f0a:	4b15      	ldr	r3, [pc, #84]	; (8001f60 <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	b25b      	sxtb	r3, r3
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	da04      	bge.n	8001f1e <LCD_IO_WriteCmd8MultipleData16+0x34a>
 8001f14:	4b13      	ldr	r3, [pc, #76]	; (8001f64 <LCD_IO_WriteCmd8MultipleData16+0x390>)
 8001f16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f1a:	619a      	str	r2, [r3, #24]
 8001f1c:	e003      	b.n	8001f26 <LCD_IO_WriteCmd8MultipleData16+0x352>
 8001f1e:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <LCD_IO_WriteCmd8MultipleData16+0x390>)
 8001f20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f24:	619a      	str	r2, [r3, #24]
 8001f26:	4b12      	ldr	r3, [pc, #72]	; (8001f70 <LCD_IO_WriteCmd8MultipleData16+0x39c>)
 8001f28:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f2c:	619a      	str	r2, [r3, #24]
 8001f2e:	2008      	movs	r0, #8
 8001f30:	f7fe ffc1 	bl	8000eb6 <LCD_IO_Delay>
 8001f34:	4b0e      	ldr	r3, [pc, #56]	; (8001f70 <LCD_IO_WriteCmd8MultipleData16+0x39c>)
 8001f36:	2201      	movs	r2, #1
 8001f38:	619a      	str	r2, [r3, #24]
    pData ++;
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	3302      	adds	r3, #2
 8001f3e:	60bb      	str	r3, [r7, #8]
  while(Size--)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	1e5a      	subs	r2, r3, #1
 8001f44:	607a      	str	r2, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f47f aedb 	bne.w	8001d02 <LCD_IO_WriteCmd8MultipleData16+0x12e>
  }
  LCD_CS_OFF;
 8001f4c:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <LCD_IO_WriteCmd8MultipleData16+0x3a0>)
 8001f4e:	2202      	movs	r2, #2
 8001f50:	619a      	str	r2, [r3, #24]
}
 8001f52:	bf00      	nop
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	58020c00 	.word	0x58020c00
 8001f60:	2400036e 	.word	0x2400036e
 8001f64:	58021800 	.word	0x58021800
 8001f68:	58021000 	.word	0x58021000
 8001f6c:	58020000 	.word	0x58020000
 8001f70:	58020800 	.word	0x58020800
 8001f74:	58020400 	.word	0x58020400

08001f78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f78:	b5b0      	push	{r4, r5, r7, lr}
 8001f7a:	b088      	sub	sp, #32
 8001f7c:	af04      	add	r7, sp, #16
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8001f7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f82:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001f84:	bf00      	nop
 8001f86:	4bae      	ldr	r3, [pc, #696]	; (8002240 <main+0x2c8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d004      	beq.n	8001f9c <main+0x24>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	1e5a      	subs	r2, r3, #1
 8001f96:	60fa      	str	r2, [r7, #12]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	dcf4      	bgt.n	8001f86 <main+0xe>
  if ( timeout < 0 )
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	da01      	bge.n	8001fa6 <main+0x2e>
  {
  Error_Handler();
 8001fa2:	f000 fe59 	bl	8002c58 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fa6:	f001 f8ef 	bl	8003188 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001faa:	f000 faeb 	bl	8002584 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8001fae:	4ba4      	ldr	r3, [pc, #656]	; (8002240 <main+0x2c8>)
 8001fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fb4:	4aa2      	ldr	r2, [pc, #648]	; (8002240 <main+0x2c8>)
 8001fb6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fbe:	4ba0      	ldr	r3, [pc, #640]	; (8002240 <main+0x2c8>)
 8001fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc8:	607b      	str	r3, [r7, #4]
 8001fca:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001fcc:	2000      	movs	r0, #0
 8001fce:	f002 fe35 	bl	8004c3c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	f002 fe4b 	bl	8004c70 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8001fda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fde:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001fe0:	bf00      	nop
 8001fe2:	4b97      	ldr	r3, [pc, #604]	; (8002240 <main+0x2c8>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d104      	bne.n	8001ff8 <main+0x80>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	1e5a      	subs	r2, r3, #1
 8001ff2:	60fa      	str	r2, [r7, #12]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	dcf4      	bgt.n	8001fe2 <main+0x6a>
if ( timeout < 0 )
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	da01      	bge.n	8002002 <main+0x8a>
{
Error_Handler();
 8001ffe:	f000 fe2b 	bl	8002c58 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002002:	f000 fc29 	bl	8002858 <MX_GPIO_Init>
  MX_ETH_Init();
 8002006:	f000 fb43 	bl	8002690 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800200a:	f000 fb8d 	bl	8002728 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800200e:	f000 fbd7 	bl	80027c0 <MX_USB_OTG_FS_PCD_Init>
  MX_DMA_Init();
 8002012:	f000 fc07 	bl	8002824 <MX_DMA_Init>
  MX_LIBJPEG_Init();
 8002016:	f006 fe8d 	bl	8008d34 <MX_LIBJPEG_Init>
  /* USER CODE BEGIN 2 */

  	SRAM4-> flag_UID = 0;
 800201a:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 800201e:	2200      	movs	r2, #0
 8002020:	771a      	strb	r2, [r3, #28]
  	SRAM4-> flag_blue_btn = 0;
 8002022:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8002026:	2200      	movs	r2, #0
 8002028:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  	//SRAM4-> flag_dis_wwdg = 0;

  	ili9486_Init();
 800202c:	f7fe fbd8 	bl	80007e0 <ili9486_Init>
    ili9486_DisplayOn();
 8002030:	f7fe fbba 	bl	80007a8 <ili9486_DisplayOn>

    ili_scr_1();
 8002034:	f000 fc84 	bl	8002940 <ili_scr_1>

    ili9486_FillRect(0, 0, 480, 35, cl_BLUE);
 8002038:	231f      	movs	r3, #31
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	2323      	movs	r3, #35	; 0x23
 800203e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002042:	2100      	movs	r1, #0
 8002044:	2000      	movs	r0, #0
 8002046:	f7fe fcf5 	bl	8000a34 <ili9486_FillRect>
    ili9486_WriteStringNoBG(10, 10, " > STAMPR ----->>>-----", Font20, cl_WHITE);
 800204a:	4b7e      	ldr	r3, [pc, #504]	; (8002244 <main+0x2cc>)
 800204c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002050:	9201      	str	r2, [sp, #4]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	9200      	str	r2, [sp, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a7b      	ldr	r2, [pc, #492]	; (8002248 <main+0x2d0>)
 800205a:	210a      	movs	r1, #10
 800205c:	200a      	movs	r0, #10
 800205e:	f7fe fedf 	bl	8000e20 <ili9486_WriteStringNoBG>
    ili9486_WriteStringNoBG(400, 10, " OWL_HOR ", Font12, cl_WHITE);
 8002062:	4b7a      	ldr	r3, [pc, #488]	; (800224c <main+0x2d4>)
 8002064:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002068:	9201      	str	r2, [sp, #4]
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	9200      	str	r2, [sp, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a77      	ldr	r2, [pc, #476]	; (8002250 <main+0x2d8>)
 8002072:	210a      	movs	r1, #10
 8002074:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002078:	f7fe fed2 	bl	8000e20 <ili9486_WriteStringNoBG>

    ili9486_WriteStringNoBG(10, 40, " Scan the RFID Tag", Font20, cl_OLIVE);
 800207c:	4b71      	ldr	r3, [pc, #452]	; (8002244 <main+0x2cc>)
 800207e:	f647 32e0 	movw	r2, #31712	; 0x7be0
 8002082:	9201      	str	r2, [sp, #4]
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	9200      	str	r2, [sp, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a72      	ldr	r2, [pc, #456]	; (8002254 <main+0x2dc>)
 800208c:	2128      	movs	r1, #40	; 0x28
 800208e:	200a      	movs	r0, #10
 8002090:	f7fe fec6 	bl	8000e20 <ili9486_WriteStringNoBG>
    //ili9486_FillRect(20, 100, 450, 200, cl_BLACK);
    ili9486_DrawRGBImage(90, 90, 277, 170, (uint16_t*)image_data_owlsOFCC);
 8002094:	4b70      	ldr	r3, [pc, #448]	; (8002258 <main+0x2e0>)
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	23aa      	movs	r3, #170	; 0xaa
 800209a:	f240 1215 	movw	r2, #277	; 0x115
 800209e:	215a      	movs	r1, #90	; 0x5a
 80020a0:	205a      	movs	r0, #90	; 0x5a
 80020a2:	f7fe fd2a 	bl	8000afa <ili9486_DrawRGBImage>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  //// Time Clock Manager / Independent from GranDiState
	  if(HAL_GetTick() - timestamp_one[0] >= 500){
 80020a6:	f001 f8f5 	bl	8003294 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	4b6b      	ldr	r3, [pc, #428]	; (800225c <main+0x2e4>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80020b6:	d351      	bcc.n	800215c <main+0x1e4>
	  		  timestamp_one[0] = HAL_GetTick();
 80020b8:	f001 f8ec 	bl	8003294 <HAL_GetTick>
 80020bc:	4603      	mov	r3, r0
 80020be:	4a67      	ldr	r2, [pc, #412]	; (800225c <main+0x2e4>)
 80020c0:	6013      	str	r3, [r2, #0]
	  		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80020c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020c6:	4866      	ldr	r0, [pc, #408]	; (8002260 <main+0x2e8>)
 80020c8:	f002 fd9d 	bl	8004c06 <HAL_GPIO_TogglePin>

	  		NowDat7 = SRAM4->NowDates;
 80020cc:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 80020d0:	4a64      	ldr	r2, [pc, #400]	; (8002264 <main+0x2ec>)
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	6013      	str	r3, [r2, #0]
	  		NowTim7 = SRAM4->NowTimes;
 80020d6:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 80020da:	4a63      	ldr	r2, [pc, #396]	; (8002268 <main+0x2f0>)
 80020dc:	4615      	mov	r5, r2
 80020de:	1d1c      	adds	r4, r3, #4
 80020e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020e4:	6823      	ldr	r3, [r4, #0]
 80020e6:	602b      	str	r3, [r5, #0]

	  		sprintf(txtdispBF, "%02X:%02X:%02X", // use %02 to fill 0 front of 1 digit
	  				  NowTim7.Hours, NowTim7.Minutes, NowTim7.Seconds);
 80020e8:	4b5f      	ldr	r3, [pc, #380]	; (8002268 <main+0x2f0>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
	  		sprintf(txtdispBF, "%02X:%02X:%02X", // use %02 to fill 0 front of 1 digit
 80020ec:	461a      	mov	r2, r3
	  				  NowTim7.Hours, NowTim7.Minutes, NowTim7.Seconds);
 80020ee:	4b5e      	ldr	r3, [pc, #376]	; (8002268 <main+0x2f0>)
 80020f0:	785b      	ldrb	r3, [r3, #1]
	  		sprintf(txtdispBF, "%02X:%02X:%02X", // use %02 to fill 0 front of 1 digit
 80020f2:	4619      	mov	r1, r3
	  				  NowTim7.Hours, NowTim7.Minutes, NowTim7.Seconds);
 80020f4:	4b5c      	ldr	r3, [pc, #368]	; (8002268 <main+0x2f0>)
 80020f6:	789b      	ldrb	r3, [r3, #2]
	  		sprintf(txtdispBF, "%02X:%02X:%02X", // use %02 to fill 0 front of 1 digit
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	460b      	mov	r3, r1
 80020fc:	495b      	ldr	r1, [pc, #364]	; (800226c <main+0x2f4>)
 80020fe:	485c      	ldr	r0, [pc, #368]	; (8002270 <main+0x2f8>)
 8002100:	f006 fecc 	bl	8008e9c <siprintf>
	  		ili9486_WriteString(365, 40, txtdispBF, Font20, cl_YELLOW, cl_BLACK);
 8002104:	4b4f      	ldr	r3, [pc, #316]	; (8002244 <main+0x2cc>)
 8002106:	2200      	movs	r2, #0
 8002108:	9202      	str	r2, [sp, #8]
 800210a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800210e:	9201      	str	r2, [sp, #4]
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	9200      	str	r2, [sp, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a56      	ldr	r2, [pc, #344]	; (8002270 <main+0x2f8>)
 8002118:	2128      	movs	r1, #40	; 0x28
 800211a:	f240 106d 	movw	r0, #365	; 0x16d
 800211e:	f7fe fe32 	bl	8000d86 <ili9486_WriteString>

	  		sprintf(txtdispBF, "%02x/%02x/%02x",
	  			  				  NowDat7.Date, NowDat7.Month, NowDat7.Year);
 8002122:	4b50      	ldr	r3, [pc, #320]	; (8002264 <main+0x2ec>)
 8002124:	789b      	ldrb	r3, [r3, #2]
	  		sprintf(txtdispBF, "%02x/%02x/%02x",
 8002126:	461a      	mov	r2, r3
	  			  				  NowDat7.Date, NowDat7.Month, NowDat7.Year);
 8002128:	4b4e      	ldr	r3, [pc, #312]	; (8002264 <main+0x2ec>)
 800212a:	785b      	ldrb	r3, [r3, #1]
	  		sprintf(txtdispBF, "%02x/%02x/%02x",
 800212c:	4619      	mov	r1, r3
	  			  				  NowDat7.Date, NowDat7.Month, NowDat7.Year);
 800212e:	4b4d      	ldr	r3, [pc, #308]	; (8002264 <main+0x2ec>)
 8002130:	78db      	ldrb	r3, [r3, #3]
	  		sprintf(txtdispBF, "%02x/%02x/%02x",
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	460b      	mov	r3, r1
 8002136:	494f      	ldr	r1, [pc, #316]	; (8002274 <main+0x2fc>)
 8002138:	484d      	ldr	r0, [pc, #308]	; (8002270 <main+0x2f8>)
 800213a:	f006 feaf 	bl	8008e9c <siprintf>
	  		ili9486_WriteString(365, 60, txtdispBF, Font20, cl_YELLOW, cl_BLACK);
 800213e:	4b41      	ldr	r3, [pc, #260]	; (8002244 <main+0x2cc>)
 8002140:	2200      	movs	r2, #0
 8002142:	9202      	str	r2, [sp, #8]
 8002144:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002148:	9201      	str	r2, [sp, #4]
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	9200      	str	r2, [sp, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a47      	ldr	r2, [pc, #284]	; (8002270 <main+0x2f8>)
 8002152:	213c      	movs	r1, #60	; 0x3c
 8002154:	f240 106d 	movw	r0, #365	; 0x16d
 8002158:	f7fe fe15 	bl	8000d86 <ili9486_WriteString>
//		  HAL_WWDG_Refresh(&hwwdg1);
//	  }


	  //// State Manager
	  if(HAL_GetTick() - timestamp_grandis[0] >= 100){
 800215c:	f001 f89a 	bl	8003294 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	4b45      	ldr	r3, [pc, #276]	; (8002278 <main+0x300>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b63      	cmp	r3, #99	; 0x63
 800216a:	d99c      	bls.n	80020a6 <main+0x12e>
		  timestamp_grandis[0] = HAL_GetTick();
 800216c:	f001 f892 	bl	8003294 <HAL_GetTick>
 8002170:	4603      	mov	r3, r0
 8002172:	4a41      	ldr	r2, [pc, #260]	; (8002278 <main+0x300>)
 8002174:	6013      	str	r3, [r2, #0]

		  ili_seq_arrow();
 8002176:	f000 fc31 	bl	80029dc <ili_seq_arrow>

		  switch (GranDiSTATE){
 800217a:	4b40      	ldr	r3, [pc, #256]	; (800227c <main+0x304>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b03      	cmp	r3, #3
 8002180:	f000 8156 	beq.w	8002430 <main+0x4b8>
 8002184:	2b03      	cmp	r3, #3
 8002186:	dc04      	bgt.n	8002192 <main+0x21a>
 8002188:	2b01      	cmp	r3, #1
 800218a:	d019      	beq.n	80021c0 <main+0x248>
 800218c:	2b02      	cmp	r3, #2
 800218e:	f000 808a 	beq.w	80022a6 <main+0x32e>
		  default:
		  case st_lobby:
			  //// ---- wait for scanned cards----------------------------------------------
			  //if(HAL_HSEM_Take(2, 2) == HAL_OK){
			  if ( SRAM4-> flag_UID == 1){
 8002192:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8002196:	7f1b      	ldrb	r3, [r3, #28]
 8002198:	2b01      	cmp	r3, #1
 800219a:	f040 81d0 	bne.w	800253e <main+0x5c6>

				  //GranDiSTATE = st_show;
				  GranDiSTATE = st_search;
 800219e:	4b37      	ldr	r3, [pc, #220]	; (800227c <main+0x304>)
 80021a0:	2201      	movs	r2, #1
 80021a2:	701a      	strb	r2, [r3, #0]
				  SRAM4-> flag_UID = 0;
 80021a4:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 80021a8:	2200      	movs	r2, #0
 80021aa:	771a      	strb	r2, [r3, #28]
				  //timestamp_grandis[1] = HAL_GetTick();

				  //// clear Lobby BG
				  ili9486_FillRect(90, 90, 277, 170, cl_BLACK);
 80021ac:	2300      	movs	r3, #0
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	23aa      	movs	r3, #170	; 0xaa
 80021b2:	f240 1215 	movw	r2, #277	; 0x115
 80021b6:	215a      	movs	r1, #90	; 0x5a
 80021b8:	205a      	movs	r0, #90	; 0x5a
 80021ba:	f7fe fc3b 	bl	8000a34 <ili9486_FillRect>
			  }
			  	//  HAL_HSEM_Release(2, 2);
			  	//}
			  break;
 80021be:	e1be      	b.n	800253e <main+0x5c6>
			   * 3 - search from UID[0] if not match -> go to next ID
			   *   - if not found any -> return n/a status and report no data in base
			   *   - if found -> break and end the search/ return personna -> go to st_show
			   * */
#ifdef px_ID_search_datasss
			  px_ID_match = -1; //// -1 means not found preferred
 80021c0:	4b2f      	ldr	r3, [pc, #188]	; (8002280 <main+0x308>)
 80021c2:	22ff      	movs	r2, #255	; 0xff
 80021c4:	701a      	strb	r2, [r3, #0]
			  //// Breadth-First-Search cat cat
			  	 for(int y = 0;y <= PERSONA_LEN; y++){
 80021c6:	2300      	movs	r3, #0
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	e060      	b.n	800228e <main+0x316>
			  		 if (SRAM4->UUID[0] == pxs_persons[y].USID[0]){
 80021cc:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 80021d0:	7f5a      	ldrb	r2, [r3, #29]
 80021d2:	492c      	ldr	r1, [pc, #176]	; (8002284 <main+0x30c>)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	2068      	movs	r0, #104	; 0x68
 80021d8:	fb00 f303 	mul.w	r3, r0, r3
 80021dc:	440b      	add	r3, r1
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d151      	bne.n	8002288 <main+0x310>
			  			 if (SRAM4->UUID[1] == pxs_persons[y].USID[1]){
 80021e4:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 80021e8:	7f9a      	ldrb	r2, [r3, #30]
 80021ea:	4926      	ldr	r1, [pc, #152]	; (8002284 <main+0x30c>)
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	2068      	movs	r0, #104	; 0x68
 80021f0:	fb00 f303 	mul.w	r3, r0, r3
 80021f4:	440b      	add	r3, r1
 80021f6:	3301      	adds	r3, #1
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d144      	bne.n	8002288 <main+0x310>
			  				if (SRAM4->UUID[2] == pxs_persons[y].USID[2]){
 80021fe:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8002202:	7fda      	ldrb	r2, [r3, #31]
 8002204:	491f      	ldr	r1, [pc, #124]	; (8002284 <main+0x30c>)
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	2068      	movs	r0, #104	; 0x68
 800220a:	fb00 f303 	mul.w	r3, r0, r3
 800220e:	440b      	add	r3, r1
 8002210:	3302      	adds	r3, #2
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	429a      	cmp	r2, r3
 8002216:	d137      	bne.n	8002288 <main+0x310>
			  					if (SRAM4->UUID[3] == pxs_persons[y].USID[3]){
 8002218:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 800221c:	f893 2020 	ldrb.w	r2, [r3, #32]
 8002220:	4918      	ldr	r1, [pc, #96]	; (8002284 <main+0x30c>)
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	2068      	movs	r0, #104	; 0x68
 8002226:	fb00 f303 	mul.w	r3, r0, r3
 800222a:	440b      	add	r3, r1
 800222c:	3303      	adds	r3, #3
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	429a      	cmp	r2, r3
 8002232:	d129      	bne.n	8002288 <main+0x310>
			  						px_ID_match = y; //// return match ID
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	b25a      	sxtb	r2, r3
 8002238:	4b11      	ldr	r3, [pc, #68]	; (8002280 <main+0x308>)
 800223a:	701a      	strb	r2, [r3, #0]
			  						break; //// end search
 800223c:	e02a      	b.n	8002294 <main+0x31c>
 800223e:	bf00      	nop
 8002240:	58024400 	.word	0x58024400
 8002244:	24000018 	.word	0x24000018
 8002248:	08009760 	.word	0x08009760
 800224c:	24000008 	.word	0x24000008
 8002250:	08009778 	.word	0x08009778
 8002254:	08009784 	.word	0x08009784
 8002258:	0800d308 	.word	0x0800d308
 800225c:	24000b74 	.word	0x24000b74
 8002260:	58020400 	.word	0x58020400
 8002264:	24000b70 	.word	0x24000b70
 8002268:	24000b5c 	.word	0x24000b5c
 800226c:	08009798 	.word	0x08009798
 8002270:	24000ae4 	.word	0x24000ae4
 8002274:	080097a8 	.word	0x080097a8
 8002278:	24000b7c 	.word	0x24000b7c
 800227c:	24000b84 	.word	0x24000b84
 8002280:	24000230 	.word	0x24000230
 8002284:	24000028 	.word	0x24000028
			  	 for(int y = 0;y <= PERSONA_LEN; y++){
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	3301      	adds	r3, #1
 800228c:	60bb      	str	r3, [r7, #8]
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	2b05      	cmp	r3, #5
 8002292:	dd9b      	ble.n	80021cc <main+0x254>
			  		 }// search layer 0

			  	 }// for loop search
#endif
			  /// ---------------Finally-------------------------------
			  GranDiSTATE = st_show;
 8002294:	4bac      	ldr	r3, [pc, #688]	; (8002548 <main+0x5d0>)
 8002296:	2202      	movs	r2, #2
 8002298:	701a      	strb	r2, [r3, #0]
			  timestamp_grandis[1] = HAL_GetTick();
 800229a:	f000 fffb 	bl	8003294 <HAL_GetTick>
 800229e:	4603      	mov	r3, r0
 80022a0:	4aaa      	ldr	r2, [pc, #680]	; (800254c <main+0x5d4>)
 80022a2:	6053      	str	r3, [r2, #4]

			  break;
 80022a4:	e14e      	b.n	8002544 <main+0x5cc>

		  case st_show:
			  //// ------------------------------------------------------------------------------

			  // ID Show----------------------------
			  sprintf(txtdispBF,"Scanned ID");
 80022a6:	49aa      	ldr	r1, [pc, #680]	; (8002550 <main+0x5d8>)
 80022a8:	48aa      	ldr	r0, [pc, #680]	; (8002554 <main+0x5dc>)
 80022aa:	f006 fdf7 	bl	8008e9c <siprintf>
			  ili9486_WriteString(160, 100, txtdispBF, Font20, cl_ORANGE, cl_BLACK);
 80022ae:	4baa      	ldr	r3, [pc, #680]	; (8002558 <main+0x5e0>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	9202      	str	r2, [sp, #8]
 80022b4:	f64f 5220 	movw	r2, #64800	; 0xfd20
 80022b8:	9201      	str	r2, [sp, #4]
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	9200      	str	r2, [sp, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4aa4      	ldr	r2, [pc, #656]	; (8002554 <main+0x5dc>)
 80022c2:	2164      	movs	r1, #100	; 0x64
 80022c4:	20a0      	movs	r0, #160	; 0xa0
 80022c6:	f7fe fd5e 	bl	8000d86 <ili9486_WriteString>

			  sprintf(txtdispBF,"UID: %02X %02X %02X %02X",
					 SRAM4->UUID[0],SRAM4->UUID[1],SRAM4->UUID[2],SRAM4->UUID[3]);
 80022ca:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 80022ce:	7f5b      	ldrb	r3, [r3, #29]
			  sprintf(txtdispBF,"UID: %02X %02X %02X %02X",
 80022d0:	4619      	mov	r1, r3
					 SRAM4->UUID[0],SRAM4->UUID[1],SRAM4->UUID[2],SRAM4->UUID[3]);
 80022d2:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 80022d6:	7f9b      	ldrb	r3, [r3, #30]
			  sprintf(txtdispBF,"UID: %02X %02X %02X %02X",
 80022d8:	4618      	mov	r0, r3
					 SRAM4->UUID[0],SRAM4->UUID[1],SRAM4->UUID[2],SRAM4->UUID[3]);
 80022da:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 80022de:	7fdb      	ldrb	r3, [r3, #31]
			  sprintf(txtdispBF,"UID: %02X %02X %02X %02X",
 80022e0:	461a      	mov	r2, r3
					 SRAM4->UUID[0],SRAM4->UUID[1],SRAM4->UUID[2],SRAM4->UUID[3]);
 80022e2:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 80022e6:	f893 3020 	ldrb.w	r3, [r3, #32]
			  sprintf(txtdispBF,"UID: %02X %02X %02X %02X",
 80022ea:	9301      	str	r3, [sp, #4]
 80022ec:	9200      	str	r2, [sp, #0]
 80022ee:	4603      	mov	r3, r0
 80022f0:	460a      	mov	r2, r1
 80022f2:	499a      	ldr	r1, [pc, #616]	; (800255c <main+0x5e4>)
 80022f4:	4897      	ldr	r0, [pc, #604]	; (8002554 <main+0x5dc>)
 80022f6:	f006 fdd1 	bl	8008e9c <siprintf>
			  ili9486_WriteString(160, 125, txtdispBF, Font20, cl_YELLOW, cl_BLACK);
 80022fa:	4b97      	ldr	r3, [pc, #604]	; (8002558 <main+0x5e0>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	9202      	str	r2, [sp, #8]
 8002300:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002304:	9201      	str	r2, [sp, #4]
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	9200      	str	r2, [sp, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a91      	ldr	r2, [pc, #580]	; (8002554 <main+0x5dc>)
 800230e:	217d      	movs	r1, #125	; 0x7d
 8002310:	20a0      	movs	r0, #160	; 0xa0
 8002312:	f7fe fd38 	bl	8000d86 <ili9486_WriteString>
//				  ili9486_WriteString(160, 175, p1_owl.Surname, Font20, cl_GREEN, cl_BLACK);
//				  ili9486_WriteString(160, 200, p1_owl.welcom_txt, Font16, cl_ORANGE, cl_BLACK);
//			  }
#ifdef px_ID_search_datasss
			  //// ---- show pic
			  if(px_ID_match == -1){
 8002316:	4b92      	ldr	r3, [pc, #584]	; (8002560 <main+0x5e8>)
 8002318:	f993 3000 	ldrsb.w	r3, [r3]
 800231c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002320:	d10e      	bne.n	8002340 <main+0x3c8>
				  ////ili9486_DrawRGBImage(20, 100, 128, 128, (uint16_t*)p1_owl.pic);
				  ili9486_WriteString(160, 160,"NO ID IN DATABASE", Font24, cl_RED, cl_BLACK);
 8002322:	4b90      	ldr	r3, [pc, #576]	; (8002564 <main+0x5ec>)
 8002324:	2200      	movs	r2, #0
 8002326:	9202      	str	r2, [sp, #8]
 8002328:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800232c:	9201      	str	r2, [sp, #4]
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	9200      	str	r2, [sp, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a8c      	ldr	r2, [pc, #560]	; (8002568 <main+0x5f0>)
 8002336:	21a0      	movs	r1, #160	; 0xa0
 8002338:	20a0      	movs	r0, #160	; 0xa0
 800233a:	f7fe fd24 	bl	8000d86 <ili9486_WriteString>
 800233e:	e070      	b.n	8002422 <main+0x4aa>

			  }else{
				  ili9486_DrawRGBImage(20, 100,
 8002340:	4b87      	ldr	r3, [pc, #540]	; (8002560 <main+0x5e8>)
 8002342:	f993 3000 	ldrsb.w	r3, [r3]
 8002346:	4619      	mov	r1, r3
						  pxs_persons[px_ID_match].picXs,
 8002348:	4a88      	ldr	r2, [pc, #544]	; (800256c <main+0x5f4>)
 800234a:	2368      	movs	r3, #104	; 0x68
 800234c:	fb01 f303 	mul.w	r3, r1, r3
 8002350:	4413      	add	r3, r2
 8002352:	3364      	adds	r3, #100	; 0x64
 8002354:	881a      	ldrh	r2, [r3, #0]
				  ili9486_DrawRGBImage(20, 100,
 8002356:	4b82      	ldr	r3, [pc, #520]	; (8002560 <main+0x5e8>)
 8002358:	f993 3000 	ldrsb.w	r3, [r3]
 800235c:	4618      	mov	r0, r3
						  pxs_persons[px_ID_match].picYs,
 800235e:	4983      	ldr	r1, [pc, #524]	; (800256c <main+0x5f4>)
 8002360:	2368      	movs	r3, #104	; 0x68
 8002362:	fb00 f303 	mul.w	r3, r0, r3
 8002366:	440b      	add	r3, r1
 8002368:	3366      	adds	r3, #102	; 0x66
 800236a:	8819      	ldrh	r1, [r3, #0]
				  ili9486_DrawRGBImage(20, 100,
 800236c:	4b7c      	ldr	r3, [pc, #496]	; (8002560 <main+0x5e8>)
 800236e:	f993 3000 	ldrsb.w	r3, [r3]
 8002372:	461c      	mov	r4, r3
						  (uint16_t*)pxs_persons[px_ID_match].pic);
 8002374:	487d      	ldr	r0, [pc, #500]	; (800256c <main+0x5f4>)
 8002376:	2368      	movs	r3, #104	; 0x68
 8002378:	fb04 f303 	mul.w	r3, r4, r3
 800237c:	4403      	add	r3, r0
 800237e:	3360      	adds	r3, #96	; 0x60
 8002380:	681b      	ldr	r3, [r3, #0]
				  ili9486_DrawRGBImage(20, 100,
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	460b      	mov	r3, r1
 8002386:	2164      	movs	r1, #100	; 0x64
 8002388:	2014      	movs	r0, #20
 800238a:	f7fe fbb6 	bl	8000afa <ili9486_DrawRGBImage>
				  ili9486_WriteString(160, 150, pxs_persons[px_ID_match].Name, Font20, cl_GREEN, cl_BLACK);
 800238e:	4b74      	ldr	r3, [pc, #464]	; (8002560 <main+0x5e8>)
 8002390:	f993 3000 	ldrsb.w	r3, [r3]
 8002394:	461a      	mov	r2, r3
 8002396:	2368      	movs	r3, #104	; 0x68
 8002398:	fb02 f303 	mul.w	r3, r2, r3
 800239c:	4a73      	ldr	r2, [pc, #460]	; (800256c <main+0x5f4>)
 800239e:	4413      	add	r3, r2
 80023a0:	1d59      	adds	r1, r3, #5
 80023a2:	4b6d      	ldr	r3, [pc, #436]	; (8002558 <main+0x5e0>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	9202      	str	r2, [sp, #8]
 80023a8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80023ac:	9201      	str	r2, [sp, #4]
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	9200      	str	r2, [sp, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	460a      	mov	r2, r1
 80023b6:	2196      	movs	r1, #150	; 0x96
 80023b8:	20a0      	movs	r0, #160	; 0xa0
 80023ba:	f7fe fce4 	bl	8000d86 <ili9486_WriteString>
				  ili9486_WriteString(160, 175, pxs_persons[px_ID_match].Surname, Font20, cl_GREEN, cl_BLACK);
 80023be:	4b68      	ldr	r3, [pc, #416]	; (8002560 <main+0x5e8>)
 80023c0:	f993 3000 	ldrsb.w	r3, [r3]
 80023c4:	461a      	mov	r2, r3
 80023c6:	2368      	movs	r3, #104	; 0x68
 80023c8:	fb02 f303 	mul.w	r3, r2, r3
 80023cc:	3318      	adds	r3, #24
 80023ce:	4a67      	ldr	r2, [pc, #412]	; (800256c <main+0x5f4>)
 80023d0:	4413      	add	r3, r2
 80023d2:	1c59      	adds	r1, r3, #1
 80023d4:	4b60      	ldr	r3, [pc, #384]	; (8002558 <main+0x5e0>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	9202      	str	r2, [sp, #8]
 80023da:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80023de:	9201      	str	r2, [sp, #4]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	9200      	str	r2, [sp, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	460a      	mov	r2, r1
 80023e8:	21af      	movs	r1, #175	; 0xaf
 80023ea:	20a0      	movs	r0, #160	; 0xa0
 80023ec:	f7fe fccb 	bl	8000d86 <ili9486_WriteString>
				  ili9486_WriteString(160, 200, pxs_persons[px_ID_match].welcom_txt, Font16, cl_CYAN, cl_BLACK);
 80023f0:	4b5b      	ldr	r3, [pc, #364]	; (8002560 <main+0x5e8>)
 80023f2:	f993 3000 	ldrsb.w	r3, [r3]
 80023f6:	461a      	mov	r2, r3
 80023f8:	2368      	movs	r3, #104	; 0x68
 80023fa:	fb02 f303 	mul.w	r3, r2, r3
 80023fe:	3328      	adds	r3, #40	; 0x28
 8002400:	4a5a      	ldr	r2, [pc, #360]	; (800256c <main+0x5f4>)
 8002402:	4413      	add	r3, r2
 8002404:	1d59      	adds	r1, r3, #5
 8002406:	4b5a      	ldr	r3, [pc, #360]	; (8002570 <main+0x5f8>)
 8002408:	2200      	movs	r2, #0
 800240a:	9202      	str	r2, [sp, #8]
 800240c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002410:	9201      	str	r2, [sp, #4]
 8002412:	685a      	ldr	r2, [r3, #4]
 8002414:	9200      	str	r2, [sp, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	460a      	mov	r2, r1
 800241a:	21c8      	movs	r1, #200	; 0xc8
 800241c:	20a0      	movs	r0, #160	; 0xa0
 800241e:	f7fe fcb2 	bl	8000d86 <ili9486_WriteString>
			  }
#endif
			  cnter_wait = 0; // start counter
 8002422:	4b54      	ldr	r3, [pc, #336]	; (8002574 <main+0x5fc>)
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
			  GranDiSTATE = st_waitend;
 8002428:	4b47      	ldr	r3, [pc, #284]	; (8002548 <main+0x5d0>)
 800242a:	2203      	movs	r2, #3
 800242c:	701a      	strb	r2, [r3, #0]

			  break;
 800242e:	e089      	b.n	8002544 <main+0x5cc>
		  case st_waitend:
			  /* Using waitend to wait, if still in show -> CPU will write display continuously
			   * */

			  //// toggle blue btn flag to pause time
			  if(SRAM4->flag_blue_btn == 1){
 8002430:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8002434:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002438:	2b01      	cmp	r3, #1
 800243a:	d130      	bne.n	800249e <main+0x526>
				  flag_waitpause += 1;
 800243c:	4b4e      	ldr	r3, [pc, #312]	; (8002578 <main+0x600>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	3301      	adds	r3, #1
 8002442:	b2da      	uxtb	r2, r3
 8002444:	4b4c      	ldr	r3, [pc, #304]	; (8002578 <main+0x600>)
 8002446:	701a      	strb	r2, [r3, #0]
				  flag_waitpause %= 2;
 8002448:	4b4b      	ldr	r3, [pc, #300]	; (8002578 <main+0x600>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	b2da      	uxtb	r2, r3
 8002452:	4b49      	ldr	r3, [pc, #292]	; (8002578 <main+0x600>)
 8002454:	701a      	strb	r2, [r3, #0]
				  if (flag_waitpause == 1){
 8002456:	4b48      	ldr	r3, [pc, #288]	; (8002578 <main+0x600>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d10f      	bne.n	800247e <main+0x506>
					  ili9486_WriteString(200, 230, "PAUSE", Font24, cl_RED, cl_YELLOW);
 800245e:	4b41      	ldr	r3, [pc, #260]	; (8002564 <main+0x5ec>)
 8002460:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002464:	9202      	str	r2, [sp, #8]
 8002466:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800246a:	9201      	str	r2, [sp, #4]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	9200      	str	r2, [sp, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a42      	ldr	r2, [pc, #264]	; (800257c <main+0x604>)
 8002474:	21e6      	movs	r1, #230	; 0xe6
 8002476:	20c8      	movs	r0, #200	; 0xc8
 8002478:	f7fe fc85 	bl	8000d86 <ili9486_WriteString>
 800247c:	e00a      	b.n	8002494 <main+0x51c>
				  }else{
					  ili9486_FillRect(200, 230, 120, 24, cl_BLACK);
 800247e:	2300      	movs	r3, #0
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	2318      	movs	r3, #24
 8002484:	2278      	movs	r2, #120	; 0x78
 8002486:	21e6      	movs	r1, #230	; 0xe6
 8002488:	20c8      	movs	r0, #200	; 0xc8
 800248a:	f7fe fad3 	bl	8000a34 <ili9486_FillRect>
					  flag_waitpause = 0; // force
 800248e:	4b3a      	ldr	r3, [pc, #232]	; (8002578 <main+0x600>)
 8002490:	2200      	movs	r2, #0
 8002492:	701a      	strb	r2, [r3, #0]
				  }
				  SRAM4->flag_blue_btn = 0;
 8002494:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			  }

			  //// time counter, run with timestamp of grandis sub[0] x main[1]
			  if(flag_waitpause == 0 &&
 800249e:	4b36      	ldr	r3, [pc, #216]	; (8002578 <main+0x600>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d110      	bne.n	80024c8 <main+0x550>
					  HAL_GetTick() - timestamp_grandis[1] >= 1){
 80024a6:	f000 fef5 	bl	8003294 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	4b27      	ldr	r3, [pc, #156]	; (800254c <main+0x5d4>)
 80024ae:	685b      	ldr	r3, [r3, #4]
			  if(flag_waitpause == 0 &&
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d009      	beq.n	80024c8 <main+0x550>
				  timestamp_grandis[1] = HAL_GetTick();
 80024b4:	f000 feee 	bl	8003294 <HAL_GetTick>
 80024b8:	4603      	mov	r3, r0
 80024ba:	4a24      	ldr	r2, [pc, #144]	; (800254c <main+0x5d4>)
 80024bc:	6053      	str	r3, [r2, #4]
				  cnter_wait++;
 80024be:	4b2d      	ldr	r3, [pc, #180]	; (8002574 <main+0x5fc>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	3301      	adds	r3, #1
 80024c4:	4a2b      	ldr	r2, [pc, #172]	; (8002574 <main+0x5fc>)
 80024c6:	6013      	str	r3, [r2, #0]
			  ////// Ending display and back to lobby------------------
			  //// timer
//			  if(flag_waitpause == 0 &&
//					  HAL_GetTick() - timestamp_grandis[1] >= k_tim_show_milli){
			  //// counter
			  if(cnter_wait >= k_cnt_show){
 80024c8:	4b2a      	ldr	r3, [pc, #168]	; (8002574 <main+0x5fc>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2b22      	cmp	r3, #34	; 0x22
 80024ce:	d938      	bls.n	8002542 <main+0x5ca>
				  cnter_wait = 0; //// counter reset
 80024d0:	4b28      	ldr	r3, [pc, #160]	; (8002574 <main+0x5fc>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]
				  GranDiSTATE = st_lobby;
 80024d6:	4b1c      	ldr	r3, [pc, #112]	; (8002548 <main+0x5d0>)
 80024d8:	2200      	movs	r2, #0
 80024da:	701a      	strb	r2, [r3, #0]
				  // clear Display
				  //ili9486_FillRect(20, 100, 450, 200, cl_BLACK);
				  //re_lobby
				  ili9486_FillRect(2, 90, 100, 200, cl_BLACK);
 80024dc:	2300      	movs	r3, #0
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	23c8      	movs	r3, #200	; 0xc8
 80024e2:	2264      	movs	r2, #100	; 0x64
 80024e4:	215a      	movs	r1, #90	; 0x5a
 80024e6:	2002      	movs	r0, #2
 80024e8:	f7fe faa4 	bl	8000a34 <ili9486_FillRect>
				  ili9486_FillRect(365, 90, 110, 200, cl_BLACK);
 80024ec:	2300      	movs	r3, #0
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	23c8      	movs	r3, #200	; 0xc8
 80024f2:	226e      	movs	r2, #110	; 0x6e
 80024f4:	215a      	movs	r1, #90	; 0x5a
 80024f6:	f240 106d 	movw	r0, #365	; 0x16d
 80024fa:	f7fe fa9b 	bl	8000a34 <ili9486_FillRect>
				  ili9486_DrawRGBImage(90, 90, 277, 170, (uint16_t*)image_data_owlsOFCC);
 80024fe:	4b20      	ldr	r3, [pc, #128]	; (8002580 <main+0x608>)
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	23aa      	movs	r3, #170	; 0xaa
 8002504:	f240 1215 	movw	r2, #277	; 0x115
 8002508:	215a      	movs	r1, #90	; 0x5a
 800250a:	205a      	movs	r0, #90	; 0x5a
 800250c:	f7fe faf5 	bl	8000afa <ili9486_DrawRGBImage>

				  //// clear UID if nothing left in queue
				  if (SRAM4->flag_UID == 0){
 8002510:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8002514:	7f1b      	ldrb	r3, [r3, #28]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d113      	bne.n	8002542 <main+0x5ca>
				  SRAM4->UUID[0] = 0;
 800251a:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 800251e:	2200      	movs	r2, #0
 8002520:	775a      	strb	r2, [r3, #29]
				  SRAM4->UUID[1] = 0;
 8002522:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8002526:	2200      	movs	r2, #0
 8002528:	779a      	strb	r2, [r3, #30]
				  SRAM4->UUID[2] = 0;
 800252a:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 800252e:	2200      	movs	r2, #0
 8002530:	77da      	strb	r2, [r3, #31]
				  SRAM4->UUID[3] = 0;
 8002532:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2020 	strb.w	r2, [r3, #32]
				  }
			  }
			  break;
 800253c:	e001      	b.n	8002542 <main+0x5ca>
			  break;
 800253e:	bf00      	nop
 8002540:	e5b1      	b.n	80020a6 <main+0x12e>
			  break;
 8002542:	bf00      	nop
	  if(HAL_GetTick() - timestamp_one[0] >= 500){
 8002544:	e5af      	b.n	80020a6 <main+0x12e>
 8002546:	bf00      	nop
 8002548:	24000b84 	.word	0x24000b84
 800254c:	24000b7c 	.word	0x24000b7c
 8002550:	080097b8 	.word	0x080097b8
 8002554:	24000ae4 	.word	0x24000ae4
 8002558:	24000018 	.word	0x24000018
 800255c:	080097c4 	.word	0x080097c4
 8002560:	24000230 	.word	0x24000230
 8002564:	24000020 	.word	0x24000020
 8002568:	080097e0 	.word	0x080097e0
 800256c:	24000028 	.word	0x24000028
 8002570:	24000010 	.word	0x24000010
 8002574:	24000b88 	.word	0x24000b88
 8002578:	24000b85 	.word	0x24000b85
 800257c:	080097f4 	.word	0x080097f4
 8002580:	0800d308 	.word	0x0800d308

08002584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b09c      	sub	sp, #112	; 0x70
 8002588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800258a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800258e:	224c      	movs	r2, #76	; 0x4c
 8002590:	2100      	movs	r1, #0
 8002592:	4618      	mov	r0, r3
 8002594:	f006 fca2 	bl	8008edc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002598:	1d3b      	adds	r3, r7, #4
 800259a:	2220      	movs	r2, #32
 800259c:	2100      	movs	r1, #0
 800259e:	4618      	mov	r0, r3
 80025a0:	f006 fc9c 	bl	8008edc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80025a4:	2004      	movs	r0, #4
 80025a6:	f002 fcbf 	bl	8004f28 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80025aa:	2300      	movs	r3, #0
 80025ac:	603b      	str	r3, [r7, #0]
 80025ae:	4b35      	ldr	r3, [pc, #212]	; (8002684 <SystemClock_Config+0x100>)
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	4a34      	ldr	r2, [pc, #208]	; (8002684 <SystemClock_Config+0x100>)
 80025b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025b8:	6193      	str	r3, [r2, #24]
 80025ba:	4b32      	ldr	r3, [pc, #200]	; (8002684 <SystemClock_Config+0x100>)
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80025c2:	603b      	str	r3, [r7, #0]
 80025c4:	4b30      	ldr	r3, [pc, #192]	; (8002688 <SystemClock_Config+0x104>)
 80025c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c8:	4a2f      	ldr	r2, [pc, #188]	; (8002688 <SystemClock_Config+0x104>)
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80025d0:	4b2d      	ldr	r3, [pc, #180]	; (8002688 <SystemClock_Config+0x104>)
 80025d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	603b      	str	r3, [r7, #0]
 80025da:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80025dc:	bf00      	nop
 80025de:	4b29      	ldr	r3, [pc, #164]	; (8002684 <SystemClock_Config+0x100>)
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025ea:	d1f8      	bne.n	80025de <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80025ec:	4b27      	ldr	r3, [pc, #156]	; (800268c <SystemClock_Config+0x108>)
 80025ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f0:	f023 0303 	bic.w	r3, r3, #3
 80025f4:	4a25      	ldr	r2, [pc, #148]	; (800268c <SystemClock_Config+0x108>)
 80025f6:	f043 0302 	orr.w	r3, r3, #2
 80025fa:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80025fc:	2309      	movs	r3, #9
 80025fe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002600:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002604:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002606:	2301      	movs	r3, #1
 8002608:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800260a:	2302      	movs	r3, #2
 800260c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800260e:	2302      	movs	r3, #2
 8002610:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002612:	2301      	movs	r3, #1
 8002614:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8002616:	2378      	movs	r3, #120	; 0x78
 8002618:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800261a:	2302      	movs	r3, #2
 800261c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800261e:	2302      	movs	r3, #2
 8002620:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002622:	2302      	movs	r3, #2
 8002624:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002626:	230c      	movs	r3, #12
 8002628:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800262a:	2300      	movs	r3, #0
 800262c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800262e:	2300      	movs	r3, #0
 8002630:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002632:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002636:	4618      	mov	r0, r3
 8002638:	f002 fce0 	bl	8004ffc <HAL_RCC_OscConfig>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002642:	f000 fb09 	bl	8002c58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002646:	233f      	movs	r3, #63	; 0x3f
 8002648:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800264a:	2303      	movs	r3, #3
 800264c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800264e:	2300      	movs	r3, #0
 8002650:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002652:	2308      	movs	r3, #8
 8002654:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002656:	2340      	movs	r3, #64	; 0x40
 8002658:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800265a:	2340      	movs	r3, #64	; 0x40
 800265c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800265e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002662:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002664:	2340      	movs	r3, #64	; 0x40
 8002666:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002668:	1d3b      	adds	r3, r7, #4
 800266a:	2104      	movs	r1, #4
 800266c:	4618      	mov	r0, r3
 800266e:	f003 f8f3 	bl	8005858 <HAL_RCC_ClockConfig>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8002678:	f000 faee 	bl	8002c58 <Error_Handler>
  }
}
 800267c:	bf00      	nop
 800267e:	3770      	adds	r7, #112	; 0x70
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	58024800 	.word	0x58024800
 8002688:	58000400 	.word	0x58000400
 800268c:	58024400 	.word	0x58024400

08002690 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8002694:	4b1e      	ldr	r3, [pc, #120]	; (8002710 <MX_ETH_Init+0x80>)
 8002696:	4a1f      	ldr	r2, [pc, #124]	; (8002714 <MX_ETH_Init+0x84>)
 8002698:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800269a:	4b1f      	ldr	r3, [pc, #124]	; (8002718 <MX_ETH_Init+0x88>)
 800269c:	2200      	movs	r2, #0
 800269e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80026a0:	4b1d      	ldr	r3, [pc, #116]	; (8002718 <MX_ETH_Init+0x88>)
 80026a2:	2280      	movs	r2, #128	; 0x80
 80026a4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80026a6:	4b1c      	ldr	r3, [pc, #112]	; (8002718 <MX_ETH_Init+0x88>)
 80026a8:	22e1      	movs	r2, #225	; 0xe1
 80026aa:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80026ac:	4b1a      	ldr	r3, [pc, #104]	; (8002718 <MX_ETH_Init+0x88>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80026b2:	4b19      	ldr	r3, [pc, #100]	; (8002718 <MX_ETH_Init+0x88>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80026b8:	4b17      	ldr	r3, [pc, #92]	; (8002718 <MX_ETH_Init+0x88>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80026be:	4b14      	ldr	r3, [pc, #80]	; (8002710 <MX_ETH_Init+0x80>)
 80026c0:	4a15      	ldr	r2, [pc, #84]	; (8002718 <MX_ETH_Init+0x88>)
 80026c2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80026c4:	4b12      	ldr	r3, [pc, #72]	; (8002710 <MX_ETH_Init+0x80>)
 80026c6:	2201      	movs	r2, #1
 80026c8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80026ca:	4b11      	ldr	r3, [pc, #68]	; (8002710 <MX_ETH_Init+0x80>)
 80026cc:	4a13      	ldr	r2, [pc, #76]	; (800271c <MX_ETH_Init+0x8c>)
 80026ce:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80026d0:	4b0f      	ldr	r3, [pc, #60]	; (8002710 <MX_ETH_Init+0x80>)
 80026d2:	4a13      	ldr	r2, [pc, #76]	; (8002720 <MX_ETH_Init+0x90>)
 80026d4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80026d6:	4b0e      	ldr	r3, [pc, #56]	; (8002710 <MX_ETH_Init+0x80>)
 80026d8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80026dc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80026de:	480c      	ldr	r0, [pc, #48]	; (8002710 <MX_ETH_Init+0x80>)
 80026e0:	f001 fca4 	bl	800402c <HAL_ETH_Init>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80026ea:	f000 fab5 	bl	8002c58 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80026ee:	2238      	movs	r2, #56	; 0x38
 80026f0:	2100      	movs	r1, #0
 80026f2:	480c      	ldr	r0, [pc, #48]	; (8002724 <MX_ETH_Init+0x94>)
 80026f4:	f006 fbf2 	bl	8008edc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80026f8:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <MX_ETH_Init+0x94>)
 80026fa:	2221      	movs	r2, #33	; 0x21
 80026fc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80026fe:	4b09      	ldr	r3, [pc, #36]	; (8002724 <MX_ETH_Init+0x94>)
 8002700:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002704:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8002706:	4b07      	ldr	r3, [pc, #28]	; (8002724 <MX_ETH_Init+0x94>)
 8002708:	2200      	movs	r2, #0
 800270a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800270c:	bf00      	nop
 800270e:	bd80      	pop	{r7, pc}
 8002710:	240003a8 	.word	0x240003a8
 8002714:	40028000 	.word	0x40028000
 8002718:	24000b8c 	.word	0x24000b8c
 800271c:	240002ec 	.word	0x240002ec
 8002720:	2400028c 	.word	0x2400028c
 8002724:	24000370 	.word	0x24000370

08002728 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800272c:	4b22      	ldr	r3, [pc, #136]	; (80027b8 <MX_USART3_UART_Init+0x90>)
 800272e:	4a23      	ldr	r2, [pc, #140]	; (80027bc <MX_USART3_UART_Init+0x94>)
 8002730:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002732:	4b21      	ldr	r3, [pc, #132]	; (80027b8 <MX_USART3_UART_Init+0x90>)
 8002734:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002738:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800273a:	4b1f      	ldr	r3, [pc, #124]	; (80027b8 <MX_USART3_UART_Init+0x90>)
 800273c:	2200      	movs	r2, #0
 800273e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002740:	4b1d      	ldr	r3, [pc, #116]	; (80027b8 <MX_USART3_UART_Init+0x90>)
 8002742:	2200      	movs	r2, #0
 8002744:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002746:	4b1c      	ldr	r3, [pc, #112]	; (80027b8 <MX_USART3_UART_Init+0x90>)
 8002748:	2200      	movs	r2, #0
 800274a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800274c:	4b1a      	ldr	r3, [pc, #104]	; (80027b8 <MX_USART3_UART_Init+0x90>)
 800274e:	220c      	movs	r2, #12
 8002750:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002752:	4b19      	ldr	r3, [pc, #100]	; (80027b8 <MX_USART3_UART_Init+0x90>)
 8002754:	2200      	movs	r2, #0
 8002756:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002758:	4b17      	ldr	r3, [pc, #92]	; (80027b8 <MX_USART3_UART_Init+0x90>)
 800275a:	2200      	movs	r2, #0
 800275c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800275e:	4b16      	ldr	r3, [pc, #88]	; (80027b8 <MX_USART3_UART_Init+0x90>)
 8002760:	2200      	movs	r2, #0
 8002762:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002764:	4b14      	ldr	r3, [pc, #80]	; (80027b8 <MX_USART3_UART_Init+0x90>)
 8002766:	2200      	movs	r2, #0
 8002768:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800276a:	4b13      	ldr	r3, [pc, #76]	; (80027b8 <MX_USART3_UART_Init+0x90>)
 800276c:	2200      	movs	r2, #0
 800276e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002770:	4811      	ldr	r0, [pc, #68]	; (80027b8 <MX_USART3_UART_Init+0x90>)
 8002772:	f004 ff65 	bl	8007640 <HAL_UART_Init>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800277c:	f000 fa6c 	bl	8002c58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002780:	2100      	movs	r1, #0
 8002782:	480d      	ldr	r0, [pc, #52]	; (80027b8 <MX_USART3_UART_Init+0x90>)
 8002784:	f005 ff02 	bl	800858c <HAL_UARTEx_SetTxFifoThreshold>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800278e:	f000 fa63 	bl	8002c58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002792:	2100      	movs	r1, #0
 8002794:	4808      	ldr	r0, [pc, #32]	; (80027b8 <MX_USART3_UART_Init+0x90>)
 8002796:	f005 ff37 	bl	8008608 <HAL_UARTEx_SetRxFifoThreshold>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80027a0:	f000 fa5a 	bl	8002c58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80027a4:	4804      	ldr	r0, [pc, #16]	; (80027b8 <MX_USART3_UART_Init+0x90>)
 80027a6:	f005 feb8 	bl	800851a <HAL_UARTEx_DisableFifoMode>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80027b0:	f000 fa52 	bl	8002c58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80027b4:	bf00      	nop
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	24000458 	.word	0x24000458
 80027bc:	40004800 	.word	0x40004800

080027c0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80027c4:	4b15      	ldr	r3, [pc, #84]	; (800281c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80027c6:	4a16      	ldr	r2, [pc, #88]	; (8002820 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80027c8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80027ca:	4b14      	ldr	r3, [pc, #80]	; (800281c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80027cc:	2209      	movs	r2, #9
 80027ce:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80027d0:	4b12      	ldr	r3, [pc, #72]	; (800281c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80027d2:	2202      	movs	r2, #2
 80027d4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80027d6:	4b11      	ldr	r3, [pc, #68]	; (800281c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80027d8:	2200      	movs	r2, #0
 80027da:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80027dc:	4b0f      	ldr	r3, [pc, #60]	; (800281c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80027de:	2202      	movs	r2, #2
 80027e0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80027e2:	4b0e      	ldr	r3, [pc, #56]	; (800281c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80027e8:	4b0c      	ldr	r3, [pc, #48]	; (800281c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80027ee:	4b0b      	ldr	r3, [pc, #44]	; (800281c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80027f4:	4b09      	ldr	r3, [pc, #36]	; (800281c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80027f6:	2201      	movs	r2, #1
 80027f8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80027fa:	4b08      	ldr	r3, [pc, #32]	; (800281c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80027fc:	2201      	movs	r2, #1
 80027fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002800:	4b06      	ldr	r3, [pc, #24]	; (800281c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002802:	2200      	movs	r2, #0
 8002804:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002806:	4805      	ldr	r0, [pc, #20]	; (800281c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002808:	f002 fa46 	bl	8004c98 <HAL_PCD_Init>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8002812:	f000 fa21 	bl	8002c58 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002816:	bf00      	nop
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	240005d8 	.word	0x240005d8
 8002820:	40080000 	.word	0x40080000

08002824 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800282a:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <MX_DMA_Init+0x30>)
 800282c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002830:	4a08      	ldr	r2, [pc, #32]	; (8002854 <MX_DMA_Init+0x30>)
 8002832:	f043 0301 	orr.w	r3, r3, #1
 8002836:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800283a:	4b06      	ldr	r3, [pc, #24]	; (8002854 <MX_DMA_Init+0x30>)
 800283c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	607b      	str	r3, [r7, #4]
 8002846:	687b      	ldr	r3, [r7, #4]

}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	58024400 	.word	0x58024400

08002858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b08a      	sub	sp, #40	; 0x28
 800285c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800285e:	f107 0314 	add.w	r3, r7, #20
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	605a      	str	r2, [r3, #4]
 8002868:	609a      	str	r2, [r3, #8]
 800286a:	60da      	str	r2, [r3, #12]
 800286c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800286e:	4b32      	ldr	r3, [pc, #200]	; (8002938 <MX_GPIO_Init+0xe0>)
 8002870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002874:	4a30      	ldr	r2, [pc, #192]	; (8002938 <MX_GPIO_Init+0xe0>)
 8002876:	f043 0304 	orr.w	r3, r3, #4
 800287a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800287e:	4b2e      	ldr	r3, [pc, #184]	; (8002938 <MX_GPIO_Init+0xe0>)
 8002880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	613b      	str	r3, [r7, #16]
 800288a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800288c:	4b2a      	ldr	r3, [pc, #168]	; (8002938 <MX_GPIO_Init+0xe0>)
 800288e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002892:	4a29      	ldr	r2, [pc, #164]	; (8002938 <MX_GPIO_Init+0xe0>)
 8002894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002898:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800289c:	4b26      	ldr	r3, [pc, #152]	; (8002938 <MX_GPIO_Init+0xe0>)
 800289e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028aa:	4b23      	ldr	r3, [pc, #140]	; (8002938 <MX_GPIO_Init+0xe0>)
 80028ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028b0:	4a21      	ldr	r2, [pc, #132]	; (8002938 <MX_GPIO_Init+0xe0>)
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028ba:	4b1f      	ldr	r3, [pc, #124]	; (8002938 <MX_GPIO_Init+0xe0>)
 80028bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	60bb      	str	r3, [r7, #8]
 80028c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028c8:	4b1b      	ldr	r3, [pc, #108]	; (8002938 <MX_GPIO_Init+0xe0>)
 80028ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028ce:	4a1a      	ldr	r2, [pc, #104]	; (8002938 <MX_GPIO_Init+0xe0>)
 80028d0:	f043 0302 	orr.w	r3, r3, #2
 80028d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028d8:	4b17      	ldr	r3, [pc, #92]	; (8002938 <MX_GPIO_Init+0xe0>)
 80028da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	607b      	str	r3, [r7, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80028e6:	4b14      	ldr	r3, [pc, #80]	; (8002938 <MX_GPIO_Init+0xe0>)
 80028e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028ec:	4a12      	ldr	r2, [pc, #72]	; (8002938 <MX_GPIO_Init+0xe0>)
 80028ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028f6:	4b10      	ldr	r3, [pc, #64]	; (8002938 <MX_GPIO_Init+0xe0>)
 80028f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002900:	603b      	str	r3, [r7, #0]
 8002902:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002904:	2200      	movs	r2, #0
 8002906:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800290a:	480c      	ldr	r0, [pc, #48]	; (800293c <MX_GPIO_Init+0xe4>)
 800290c:	f002 f962 	bl	8004bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8002910:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002916:	2301      	movs	r3, #1
 8002918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291a:	2300      	movs	r3, #0
 800291c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291e:	2300      	movs	r3, #0
 8002920:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8002922:	f107 0314 	add.w	r3, r7, #20
 8002926:	4619      	mov	r1, r3
 8002928:	4804      	ldr	r0, [pc, #16]	; (800293c <MX_GPIO_Init+0xe4>)
 800292a:	f001 ffa3 	bl	8004874 <HAL_GPIO_Init>

}
 800292e:	bf00      	nop
 8002930:	3728      	adds	r7, #40	; 0x28
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	58024400 	.word	0x58024400
 800293c:	58020400 	.word	0x58020400

08002940 <ili_scr_1>:

/* USER CODE BEGIN 4 */
void ili_scr_1(){
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af02      	add	r7, sp, #8

	  ili9486_FillRect(0, 0, 480, 320, cl_BLACK);
 8002946:	2300      	movs	r3, #0
 8002948:	9300      	str	r3, [sp, #0]
 800294a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800294e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002952:	2100      	movs	r1, #0
 8002954:	2000      	movs	r0, #0
 8002956:	f7fe f86d 	bl	8000a34 <ili9486_FillRect>

	  ili9486_FillRect(0, 300, 80, 20, cl_RED); // Red
 800295a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	2314      	movs	r3, #20
 8002962:	2250      	movs	r2, #80	; 0x50
 8002964:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002968:	2000      	movs	r0, #0
 800296a:	f7fe f863 	bl	8000a34 <ili9486_FillRect>
	  ili9486_FillRect(80, 300, 80, 20, cl_GREEN); // Green RGB565
 800296e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	2314      	movs	r3, #20
 8002976:	2250      	movs	r2, #80	; 0x50
 8002978:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800297c:	2050      	movs	r0, #80	; 0x50
 800297e:	f7fe f859 	bl	8000a34 <ili9486_FillRect>
	  ili9486_FillRect(160, 300, 80, 20, cl_BLUE); // Blue
 8002982:	231f      	movs	r3, #31
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	2314      	movs	r3, #20
 8002988:	2250      	movs	r2, #80	; 0x50
 800298a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800298e:	20a0      	movs	r0, #160	; 0xa0
 8002990:	f7fe f850 	bl	8000a34 <ili9486_FillRect>
	  ili9486_FillRect(240, 300,  80, 20, cl_CYAN); // C0x07FF
 8002994:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	2314      	movs	r3, #20
 800299c:	2250      	movs	r2, #80	; 0x50
 800299e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80029a2:	20f0      	movs	r0, #240	; 0xf0
 80029a4:	f7fe f846 	bl	8000a34 <ili9486_FillRect>
	  ili9486_FillRect(320, 300, 80, 20, cl_MAGENTA); // M 0xF81F
 80029a8:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	2314      	movs	r3, #20
 80029b0:	2250      	movs	r2, #80	; 0x50
 80029b2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80029b6:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80029ba:	f7fe f83b 	bl	8000a34 <ili9486_FillRect>
	  ili9486_FillRect(400, 300, 80, 20, cl_YELLOW); // Y0xFFE0
 80029be:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	2314      	movs	r3, #20
 80029c6:	2250      	movs	r2, #80	; 0x50
 80029c8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80029cc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80029d0:	f7fe f830 	bl	8000a34 <ili9486_FillRect>
	  //ili9486_FillRect(390, 30, 70, 230, cl_BLACK); // K
}
 80029d4:	bf00      	nop
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
	...

080029dc <ili_seq_arrow>:

void ili_seq_arrow(){
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af04      	add	r7, sp, #16
	//ili9486_WriteStringNoBG(10, 10, " > STAMPR ----->>>-----", Font20, cl_WHITE);
	static uint8_t st_arr = 0;
	uint8_t xpoo = 166;
 80029e2:	23a6      	movs	r3, #166	; 0xa6
 80029e4:	71fb      	strb	r3, [r7, #7]
	uint8_t ypoo = 10;
 80029e6:	230a      	movs	r3, #10
 80029e8:	71bb      	strb	r3, [r7, #6]

	switch(st_arr){
 80029ea:	4b8b      	ldr	r3, [pc, #556]	; (8002c18 <ili_seq_arrow+0x23c>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	3b01      	subs	r3, #1
 80029f0:	2b0b      	cmp	r3, #11
 80029f2:	d81b      	bhi.n	8002a2c <ili_seq_arrow+0x50>
 80029f4:	a201      	add	r2, pc, #4	; (adr r2, 80029fc <ili_seq_arrow+0x20>)
 80029f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029fa:	bf00      	nop
 80029fc:	08002a4f 	.word	0x08002a4f
 8002a00:	08002a71 	.word	0x08002a71
 8002a04:	08002a93 	.word	0x08002a93
 8002a08:	08002ab5 	.word	0x08002ab5
 8002a0c:	08002ad7 	.word	0x08002ad7
 8002a10:	08002af9 	.word	0x08002af9
 8002a14:	08002b1b 	.word	0x08002b1b
 8002a18:	08002b3d 	.word	0x08002b3d
 8002a1c:	08002b5f 	.word	0x08002b5f
 8002a20:	08002b81 	.word	0x08002b81
 8002a24:	08002ba3 	.word	0x08002ba3
 8002a28:	08002bc5 	.word	0x08002bc5
	default:
	case 0:
		ili9486_WriteString(xpoo, ypoo, "----->>>-----", Font20, cl_WHITE, cl_BLUE);
 8002a2c:	79fb      	ldrb	r3, [r7, #7]
 8002a2e:	b298      	uxth	r0, r3
 8002a30:	79bb      	ldrb	r3, [r7, #6]
 8002a32:	b299      	uxth	r1, r3
 8002a34:	4b79      	ldr	r3, [pc, #484]	; (8002c1c <ili_seq_arrow+0x240>)
 8002a36:	221f      	movs	r2, #31
 8002a38:	9202      	str	r2, [sp, #8]
 8002a3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a3e:	9201      	str	r2, [sp, #4]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	9200      	str	r2, [sp, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a76      	ldr	r2, [pc, #472]	; (8002c20 <ili_seq_arrow+0x244>)
 8002a48:	f7fe f99d 	bl	8000d86 <ili9486_WriteString>
		break;
 8002a4c:	e0cb      	b.n	8002be6 <ili_seq_arrow+0x20a>
	case 1:
		ili9486_WriteString(xpoo, ypoo, "------>>>----", Font20, cl_WHITE, cl_BLUE);
 8002a4e:	79fb      	ldrb	r3, [r7, #7]
 8002a50:	b298      	uxth	r0, r3
 8002a52:	79bb      	ldrb	r3, [r7, #6]
 8002a54:	b299      	uxth	r1, r3
 8002a56:	4b71      	ldr	r3, [pc, #452]	; (8002c1c <ili_seq_arrow+0x240>)
 8002a58:	221f      	movs	r2, #31
 8002a5a:	9202      	str	r2, [sp, #8]
 8002a5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a60:	9201      	str	r2, [sp, #4]
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	9200      	str	r2, [sp, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a6e      	ldr	r2, [pc, #440]	; (8002c24 <ili_seq_arrow+0x248>)
 8002a6a:	f7fe f98c 	bl	8000d86 <ili9486_WriteString>
		break;
 8002a6e:	e0ba      	b.n	8002be6 <ili_seq_arrow+0x20a>
	case 2:
		ili9486_WriteString(xpoo, ypoo, "------->>>---", Font20, cl_WHITE, cl_BLUE);
 8002a70:	79fb      	ldrb	r3, [r7, #7]
 8002a72:	b298      	uxth	r0, r3
 8002a74:	79bb      	ldrb	r3, [r7, #6]
 8002a76:	b299      	uxth	r1, r3
 8002a78:	4b68      	ldr	r3, [pc, #416]	; (8002c1c <ili_seq_arrow+0x240>)
 8002a7a:	221f      	movs	r2, #31
 8002a7c:	9202      	str	r2, [sp, #8]
 8002a7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a82:	9201      	str	r2, [sp, #4]
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	9200      	str	r2, [sp, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a67      	ldr	r2, [pc, #412]	; (8002c28 <ili_seq_arrow+0x24c>)
 8002a8c:	f7fe f97b 	bl	8000d86 <ili9486_WriteString>
		break;
 8002a90:	e0a9      	b.n	8002be6 <ili_seq_arrow+0x20a>
	case 3:
		ili9486_WriteString(xpoo, ypoo, "-------->>>--", Font20, cl_WHITE, cl_BLUE);
 8002a92:	79fb      	ldrb	r3, [r7, #7]
 8002a94:	b298      	uxth	r0, r3
 8002a96:	79bb      	ldrb	r3, [r7, #6]
 8002a98:	b299      	uxth	r1, r3
 8002a9a:	4b60      	ldr	r3, [pc, #384]	; (8002c1c <ili_seq_arrow+0x240>)
 8002a9c:	221f      	movs	r2, #31
 8002a9e:	9202      	str	r2, [sp, #8]
 8002aa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002aa4:	9201      	str	r2, [sp, #4]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	9200      	str	r2, [sp, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a5f      	ldr	r2, [pc, #380]	; (8002c2c <ili_seq_arrow+0x250>)
 8002aae:	f7fe f96a 	bl	8000d86 <ili9486_WriteString>
		break;
 8002ab2:	e098      	b.n	8002be6 <ili_seq_arrow+0x20a>
	case 4:
		ili9486_WriteString(xpoo, ypoo, "--------->>>-", Font20, cl_WHITE, cl_BLUE);
 8002ab4:	79fb      	ldrb	r3, [r7, #7]
 8002ab6:	b298      	uxth	r0, r3
 8002ab8:	79bb      	ldrb	r3, [r7, #6]
 8002aba:	b299      	uxth	r1, r3
 8002abc:	4b57      	ldr	r3, [pc, #348]	; (8002c1c <ili_seq_arrow+0x240>)
 8002abe:	221f      	movs	r2, #31
 8002ac0:	9202      	str	r2, [sp, #8]
 8002ac2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ac6:	9201      	str	r2, [sp, #4]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	9200      	str	r2, [sp, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a58      	ldr	r2, [pc, #352]	; (8002c30 <ili_seq_arrow+0x254>)
 8002ad0:	f7fe f959 	bl	8000d86 <ili9486_WriteString>
		break;
 8002ad4:	e087      	b.n	8002be6 <ili_seq_arrow+0x20a>
	case 5:
		ili9486_WriteString(xpoo, ypoo, "---------->>>", Font20, cl_WHITE, cl_BLUE);
 8002ad6:	79fb      	ldrb	r3, [r7, #7]
 8002ad8:	b298      	uxth	r0, r3
 8002ada:	79bb      	ldrb	r3, [r7, #6]
 8002adc:	b299      	uxth	r1, r3
 8002ade:	4b4f      	ldr	r3, [pc, #316]	; (8002c1c <ili_seq_arrow+0x240>)
 8002ae0:	221f      	movs	r2, #31
 8002ae2:	9202      	str	r2, [sp, #8]
 8002ae4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ae8:	9201      	str	r2, [sp, #4]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	9200      	str	r2, [sp, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a50      	ldr	r2, [pc, #320]	; (8002c34 <ili_seq_arrow+0x258>)
 8002af2:	f7fe f948 	bl	8000d86 <ili9486_WriteString>
		break;
 8002af6:	e076      	b.n	8002be6 <ili_seq_arrow+0x20a>
	case 6:
		ili9486_WriteString(xpoo, ypoo, ">---------->>", Font20, cl_WHITE, cl_BLUE);
 8002af8:	79fb      	ldrb	r3, [r7, #7]
 8002afa:	b298      	uxth	r0, r3
 8002afc:	79bb      	ldrb	r3, [r7, #6]
 8002afe:	b299      	uxth	r1, r3
 8002b00:	4b46      	ldr	r3, [pc, #280]	; (8002c1c <ili_seq_arrow+0x240>)
 8002b02:	221f      	movs	r2, #31
 8002b04:	9202      	str	r2, [sp, #8]
 8002b06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b0a:	9201      	str	r2, [sp, #4]
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	9200      	str	r2, [sp, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a49      	ldr	r2, [pc, #292]	; (8002c38 <ili_seq_arrow+0x25c>)
 8002b14:	f7fe f937 	bl	8000d86 <ili9486_WriteString>
		break;
 8002b18:	e065      	b.n	8002be6 <ili_seq_arrow+0x20a>
	case 7:
		ili9486_WriteString(xpoo, ypoo, ">>---------->", Font20, cl_WHITE, cl_BLUE);
 8002b1a:	79fb      	ldrb	r3, [r7, #7]
 8002b1c:	b298      	uxth	r0, r3
 8002b1e:	79bb      	ldrb	r3, [r7, #6]
 8002b20:	b299      	uxth	r1, r3
 8002b22:	4b3e      	ldr	r3, [pc, #248]	; (8002c1c <ili_seq_arrow+0x240>)
 8002b24:	221f      	movs	r2, #31
 8002b26:	9202      	str	r2, [sp, #8]
 8002b28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b2c:	9201      	str	r2, [sp, #4]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	9200      	str	r2, [sp, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a41      	ldr	r2, [pc, #260]	; (8002c3c <ili_seq_arrow+0x260>)
 8002b36:	f7fe f926 	bl	8000d86 <ili9486_WriteString>
		break;
 8002b3a:	e054      	b.n	8002be6 <ili_seq_arrow+0x20a>
	case 8:
		ili9486_WriteString(xpoo, ypoo, ">>>----------", Font20, cl_WHITE, cl_BLUE);
 8002b3c:	79fb      	ldrb	r3, [r7, #7]
 8002b3e:	b298      	uxth	r0, r3
 8002b40:	79bb      	ldrb	r3, [r7, #6]
 8002b42:	b299      	uxth	r1, r3
 8002b44:	4b35      	ldr	r3, [pc, #212]	; (8002c1c <ili_seq_arrow+0x240>)
 8002b46:	221f      	movs	r2, #31
 8002b48:	9202      	str	r2, [sp, #8]
 8002b4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b4e:	9201      	str	r2, [sp, #4]
 8002b50:	685a      	ldr	r2, [r3, #4]
 8002b52:	9200      	str	r2, [sp, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a3a      	ldr	r2, [pc, #232]	; (8002c40 <ili_seq_arrow+0x264>)
 8002b58:	f7fe f915 	bl	8000d86 <ili9486_WriteString>
		break;
 8002b5c:	e043      	b.n	8002be6 <ili_seq_arrow+0x20a>
	case 9:
		ili9486_WriteString(xpoo, ypoo, "->>>---------", Font20, cl_WHITE, cl_BLUE);
 8002b5e:	79fb      	ldrb	r3, [r7, #7]
 8002b60:	b298      	uxth	r0, r3
 8002b62:	79bb      	ldrb	r3, [r7, #6]
 8002b64:	b299      	uxth	r1, r3
 8002b66:	4b2d      	ldr	r3, [pc, #180]	; (8002c1c <ili_seq_arrow+0x240>)
 8002b68:	221f      	movs	r2, #31
 8002b6a:	9202      	str	r2, [sp, #8]
 8002b6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b70:	9201      	str	r2, [sp, #4]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	9200      	str	r2, [sp, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a32      	ldr	r2, [pc, #200]	; (8002c44 <ili_seq_arrow+0x268>)
 8002b7a:	f7fe f904 	bl	8000d86 <ili9486_WriteString>
		break;
 8002b7e:	e032      	b.n	8002be6 <ili_seq_arrow+0x20a>
	case 10:
		ili9486_WriteString(xpoo, ypoo, "-->>>--------", Font20, cl_WHITE, cl_BLUE);
 8002b80:	79fb      	ldrb	r3, [r7, #7]
 8002b82:	b298      	uxth	r0, r3
 8002b84:	79bb      	ldrb	r3, [r7, #6]
 8002b86:	b299      	uxth	r1, r3
 8002b88:	4b24      	ldr	r3, [pc, #144]	; (8002c1c <ili_seq_arrow+0x240>)
 8002b8a:	221f      	movs	r2, #31
 8002b8c:	9202      	str	r2, [sp, #8]
 8002b8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b92:	9201      	str	r2, [sp, #4]
 8002b94:	685a      	ldr	r2, [r3, #4]
 8002b96:	9200      	str	r2, [sp, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a2b      	ldr	r2, [pc, #172]	; (8002c48 <ili_seq_arrow+0x26c>)
 8002b9c:	f7fe f8f3 	bl	8000d86 <ili9486_WriteString>
		break;
 8002ba0:	e021      	b.n	8002be6 <ili_seq_arrow+0x20a>
	case 11:
		ili9486_WriteString(xpoo, ypoo, "--->>>-------", Font20, cl_WHITE, cl_BLUE);
 8002ba2:	79fb      	ldrb	r3, [r7, #7]
 8002ba4:	b298      	uxth	r0, r3
 8002ba6:	79bb      	ldrb	r3, [r7, #6]
 8002ba8:	b299      	uxth	r1, r3
 8002baa:	4b1c      	ldr	r3, [pc, #112]	; (8002c1c <ili_seq_arrow+0x240>)
 8002bac:	221f      	movs	r2, #31
 8002bae:	9202      	str	r2, [sp, #8]
 8002bb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bb4:	9201      	str	r2, [sp, #4]
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	9200      	str	r2, [sp, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a23      	ldr	r2, [pc, #140]	; (8002c4c <ili_seq_arrow+0x270>)
 8002bbe:	f7fe f8e2 	bl	8000d86 <ili9486_WriteString>
		break;
 8002bc2:	e010      	b.n	8002be6 <ili_seq_arrow+0x20a>
	case 12:
		ili9486_WriteString(xpoo, ypoo, "---->>>------", Font20, cl_WHITE, cl_BLUE);
 8002bc4:	79fb      	ldrb	r3, [r7, #7]
 8002bc6:	b298      	uxth	r0, r3
 8002bc8:	79bb      	ldrb	r3, [r7, #6]
 8002bca:	b299      	uxth	r1, r3
 8002bcc:	4b13      	ldr	r3, [pc, #76]	; (8002c1c <ili_seq_arrow+0x240>)
 8002bce:	221f      	movs	r2, #31
 8002bd0:	9202      	str	r2, [sp, #8]
 8002bd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bd6:	9201      	str	r2, [sp, #4]
 8002bd8:	685a      	ldr	r2, [r3, #4]
 8002bda:	9200      	str	r2, [sp, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a1c      	ldr	r2, [pc, #112]	; (8002c50 <ili_seq_arrow+0x274>)
 8002be0:	f7fe f8d1 	bl	8000d86 <ili9486_WriteString>
		break;
 8002be4:	bf00      	nop
	}
	st_arr++;
 8002be6:	4b0c      	ldr	r3, [pc, #48]	; (8002c18 <ili_seq_arrow+0x23c>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	3301      	adds	r3, #1
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	4b0a      	ldr	r3, [pc, #40]	; (8002c18 <ili_seq_arrow+0x23c>)
 8002bf0:	701a      	strb	r2, [r3, #0]
	st_arr%=13;
 8002bf2:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <ili_seq_arrow+0x23c>)
 8002bf4:	7819      	ldrb	r1, [r3, #0]
 8002bf6:	4b17      	ldr	r3, [pc, #92]	; (8002c54 <ili_seq_arrow+0x278>)
 8002bf8:	fba3 2301 	umull	r2, r3, r3, r1
 8002bfc:	089a      	lsrs	r2, r3, #2
 8002bfe:	4613      	mov	r3, r2
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	4413      	add	r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4413      	add	r3, r2
 8002c08:	1acb      	subs	r3, r1, r3
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	4b02      	ldr	r3, [pc, #8]	; (8002c18 <ili_seq_arrow+0x23c>)
 8002c0e:	701a      	strb	r2, [r3, #0]
}
 8002c10:	bf00      	nop
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	24000b92 	.word	0x24000b92
 8002c1c:	24000018 	.word	0x24000018
 8002c20:	080097fc 	.word	0x080097fc
 8002c24:	0800980c 	.word	0x0800980c
 8002c28:	0800981c 	.word	0x0800981c
 8002c2c:	0800982c 	.word	0x0800982c
 8002c30:	0800983c 	.word	0x0800983c
 8002c34:	0800984c 	.word	0x0800984c
 8002c38:	0800985c 	.word	0x0800985c
 8002c3c:	0800986c 	.word	0x0800986c
 8002c40:	0800987c 	.word	0x0800987c
 8002c44:	0800988c 	.word	0x0800988c
 8002c48:	0800989c 	.word	0x0800989c
 8002c4c:	080098ac 	.word	0x080098ac
 8002c50:	080098bc 	.word	0x080098bc
 8002c54:	4ec4ec4f 	.word	0x4ec4ec4f

08002c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c5c:	b672      	cpsid	i
}
 8002c5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c60:	e7fe      	b.n	8002c60 <Error_Handler+0x8>
	...

08002c64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c6a:	4b0a      	ldr	r3, [pc, #40]	; (8002c94 <HAL_MspInit+0x30>)
 8002c6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c70:	4a08      	ldr	r2, [pc, #32]	; (8002c94 <HAL_MspInit+0x30>)
 8002c72:	f043 0302 	orr.w	r3, r3, #2
 8002c76:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002c7a:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <HAL_MspInit+0x30>)
 8002c7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	607b      	str	r3, [r7, #4]
 8002c86:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	58024400 	.word	0x58024400

08002c98 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b08e      	sub	sp, #56	; 0x38
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	605a      	str	r2, [r3, #4]
 8002caa:	609a      	str	r2, [r3, #8]
 8002cac:	60da      	str	r2, [r3, #12]
 8002cae:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a59      	ldr	r2, [pc, #356]	; (8002e1c <HAL_ETH_MspInit+0x184>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	f040 80ab 	bne.w	8002e12 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8002cbc:	4b58      	ldr	r3, [pc, #352]	; (8002e20 <HAL_ETH_MspInit+0x188>)
 8002cbe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002cc2:	4a57      	ldr	r2, [pc, #348]	; (8002e20 <HAL_ETH_MspInit+0x188>)
 8002cc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cc8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002ccc:	4b54      	ldr	r3, [pc, #336]	; (8002e20 <HAL_ETH_MspInit+0x188>)
 8002cce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002cd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cd6:	623b      	str	r3, [r7, #32]
 8002cd8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8002cda:	4b51      	ldr	r3, [pc, #324]	; (8002e20 <HAL_ETH_MspInit+0x188>)
 8002cdc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002ce0:	4a4f      	ldr	r2, [pc, #316]	; (8002e20 <HAL_ETH_MspInit+0x188>)
 8002ce2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002cea:	4b4d      	ldr	r3, [pc, #308]	; (8002e20 <HAL_ETH_MspInit+0x188>)
 8002cec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf4:	61fb      	str	r3, [r7, #28]
 8002cf6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8002cf8:	4b49      	ldr	r3, [pc, #292]	; (8002e20 <HAL_ETH_MspInit+0x188>)
 8002cfa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002cfe:	4a48      	ldr	r2, [pc, #288]	; (8002e20 <HAL_ETH_MspInit+0x188>)
 8002d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d04:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002d08:	4b45      	ldr	r3, [pc, #276]	; (8002e20 <HAL_ETH_MspInit+0x188>)
 8002d0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d12:	61bb      	str	r3, [r7, #24]
 8002d14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d16:	4b42      	ldr	r3, [pc, #264]	; (8002e20 <HAL_ETH_MspInit+0x188>)
 8002d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d1c:	4a40      	ldr	r2, [pc, #256]	; (8002e20 <HAL_ETH_MspInit+0x188>)
 8002d1e:	f043 0304 	orr.w	r3, r3, #4
 8002d22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d26:	4b3e      	ldr	r3, [pc, #248]	; (8002e20 <HAL_ETH_MspInit+0x188>)
 8002d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	617b      	str	r3, [r7, #20]
 8002d32:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d34:	4b3a      	ldr	r3, [pc, #232]	; (8002e20 <HAL_ETH_MspInit+0x188>)
 8002d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d3a:	4a39      	ldr	r2, [pc, #228]	; (8002e20 <HAL_ETH_MspInit+0x188>)
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d44:	4b36      	ldr	r3, [pc, #216]	; (8002e20 <HAL_ETH_MspInit+0x188>)
 8002d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	613b      	str	r3, [r7, #16]
 8002d50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d52:	4b33      	ldr	r3, [pc, #204]	; (8002e20 <HAL_ETH_MspInit+0x188>)
 8002d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d58:	4a31      	ldr	r2, [pc, #196]	; (8002e20 <HAL_ETH_MspInit+0x188>)
 8002d5a:	f043 0302 	orr.w	r3, r3, #2
 8002d5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d62:	4b2f      	ldr	r3, [pc, #188]	; (8002e20 <HAL_ETH_MspInit+0x188>)
 8002d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	60fb      	str	r3, [r7, #12]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d70:	4b2b      	ldr	r3, [pc, #172]	; (8002e20 <HAL_ETH_MspInit+0x188>)
 8002d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d76:	4a2a      	ldr	r2, [pc, #168]	; (8002e20 <HAL_ETH_MspInit+0x188>)
 8002d78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d80:	4b27      	ldr	r3, [pc, #156]	; (8002e20 <HAL_ETH_MspInit+0x188>)
 8002d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d8a:	60bb      	str	r3, [r7, #8]
 8002d8c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002d8e:	2332      	movs	r3, #50	; 0x32
 8002d90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d92:	2302      	movs	r3, #2
 8002d94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d96:	2300      	movs	r3, #0
 8002d98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002d9e:	230b      	movs	r3, #11
 8002da0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002da2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002da6:	4619      	mov	r1, r3
 8002da8:	481e      	ldr	r0, [pc, #120]	; (8002e24 <HAL_ETH_MspInit+0x18c>)
 8002daa:	f001 fd63 	bl	8004874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8002dae:	2386      	movs	r3, #134	; 0x86
 8002db0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db2:	2302      	movs	r3, #2
 8002db4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db6:	2300      	movs	r3, #0
 8002db8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002dbe:	230b      	movs	r3, #11
 8002dc0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4817      	ldr	r0, [pc, #92]	; (8002e28 <HAL_ETH_MspInit+0x190>)
 8002dca:	f001 fd53 	bl	8004874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002dce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002de0:	230b      	movs	r3, #11
 8002de2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002de4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002de8:	4619      	mov	r1, r3
 8002dea:	4810      	ldr	r0, [pc, #64]	; (8002e2c <HAL_ETH_MspInit+0x194>)
 8002dec:	f001 fd42 	bl	8004874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8002df0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002df4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df6:	2302      	movs	r3, #2
 8002df8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002e02:	230b      	movs	r3, #11
 8002e04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	4808      	ldr	r0, [pc, #32]	; (8002e30 <HAL_ETH_MspInit+0x198>)
 8002e0e:	f001 fd31 	bl	8004874 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002e12:	bf00      	nop
 8002e14:	3738      	adds	r7, #56	; 0x38
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40028000 	.word	0x40028000
 8002e20:	58024400 	.word	0x58024400
 8002e24:	58020800 	.word	0x58020800
 8002e28:	58020000 	.word	0x58020000
 8002e2c:	58020400 	.word	0x58020400
 8002e30:	58021800 	.word	0x58021800

08002e34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b0b2      	sub	sp, #200	; 0xc8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e3c:	f107 030c 	add.w	r3, r7, #12
 8002e40:	22bc      	movs	r2, #188	; 0xbc
 8002e42:	2100      	movs	r1, #0
 8002e44:	4618      	mov	r0, r3
 8002e46:	f006 f849 	bl	8008edc <memset>
  if(huart->Instance==USART3)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a3f      	ldr	r2, [pc, #252]	; (8002f4c <HAL_UART_MspInit+0x118>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d177      	bne.n	8002f44 <HAL_UART_MspInit+0x110>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002e54:	2302      	movs	r3, #2
 8002e56:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e5e:	f107 030c 	add.w	r3, r7, #12
 8002e62:	4618      	mov	r0, r3
 8002e64:	f003 f884 	bl	8005f70 <HAL_RCCEx_PeriphCLKConfig>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <HAL_UART_MspInit+0x3e>
    {
      Error_Handler();
 8002e6e:	f7ff fef3 	bl	8002c58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e72:	4b37      	ldr	r3, [pc, #220]	; (8002f50 <HAL_UART_MspInit+0x11c>)
 8002e74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e78:	4a35      	ldr	r2, [pc, #212]	; (8002f50 <HAL_UART_MspInit+0x11c>)
 8002e7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e7e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e82:	4b33      	ldr	r3, [pc, #204]	; (8002f50 <HAL_UART_MspInit+0x11c>)
 8002e84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e8c:	60bb      	str	r3, [r7, #8]
 8002e8e:	68bb      	ldr	r3, [r7, #8]

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8002e90:	4b30      	ldr	r3, [pc, #192]	; (8002f54 <HAL_UART_MspInit+0x120>)
 8002e92:	4a31      	ldr	r2, [pc, #196]	; (8002f58 <HAL_UART_MspInit+0x124>)
 8002e94:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002e96:	4b2f      	ldr	r3, [pc, #188]	; (8002f54 <HAL_UART_MspInit+0x120>)
 8002e98:	222d      	movs	r2, #45	; 0x2d
 8002e9a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e9c:	4b2d      	ldr	r3, [pc, #180]	; (8002f54 <HAL_UART_MspInit+0x120>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ea2:	4b2c      	ldr	r3, [pc, #176]	; (8002f54 <HAL_UART_MspInit+0x120>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ea8:	4b2a      	ldr	r3, [pc, #168]	; (8002f54 <HAL_UART_MspInit+0x120>)
 8002eaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002eae:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002eb0:	4b28      	ldr	r3, [pc, #160]	; (8002f54 <HAL_UART_MspInit+0x120>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002eb6:	4b27      	ldr	r3, [pc, #156]	; (8002f54 <HAL_UART_MspInit+0x120>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002ebc:	4b25      	ldr	r3, [pc, #148]	; (8002f54 <HAL_UART_MspInit+0x120>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ec2:	4b24      	ldr	r3, [pc, #144]	; (8002f54 <HAL_UART_MspInit+0x120>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ec8:	4b22      	ldr	r3, [pc, #136]	; (8002f54 <HAL_UART_MspInit+0x120>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002ece:	4821      	ldr	r0, [pc, #132]	; (8002f54 <HAL_UART_MspInit+0x120>)
 8002ed0:	f000 fb14 	bl	80034fc <HAL_DMA_Init>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <HAL_UART_MspInit+0xaa>
    {
      Error_Handler();
 8002eda:	f7ff febd 	bl	8002c58 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a1c      	ldr	r2, [pc, #112]	; (8002f54 <HAL_UART_MspInit+0x120>)
 8002ee2:	67da      	str	r2, [r3, #124]	; 0x7c
 8002ee4:	4a1b      	ldr	r2, [pc, #108]	; (8002f54 <HAL_UART_MspInit+0x120>)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8002eea:	4b1c      	ldr	r3, [pc, #112]	; (8002f5c <HAL_UART_MspInit+0x128>)
 8002eec:	4a1c      	ldr	r2, [pc, #112]	; (8002f60 <HAL_UART_MspInit+0x12c>)
 8002eee:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002ef0:	4b1a      	ldr	r3, [pc, #104]	; (8002f5c <HAL_UART_MspInit+0x128>)
 8002ef2:	222e      	movs	r2, #46	; 0x2e
 8002ef4:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ef6:	4b19      	ldr	r3, [pc, #100]	; (8002f5c <HAL_UART_MspInit+0x128>)
 8002ef8:	2240      	movs	r2, #64	; 0x40
 8002efa:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002efc:	4b17      	ldr	r3, [pc, #92]	; (8002f5c <HAL_UART_MspInit+0x128>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f02:	4b16      	ldr	r3, [pc, #88]	; (8002f5c <HAL_UART_MspInit+0x128>)
 8002f04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f08:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f0a:	4b14      	ldr	r3, [pc, #80]	; (8002f5c <HAL_UART_MspInit+0x128>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f10:	4b12      	ldr	r3, [pc, #72]	; (8002f5c <HAL_UART_MspInit+0x128>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002f16:	4b11      	ldr	r3, [pc, #68]	; (8002f5c <HAL_UART_MspInit+0x128>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f1c:	4b0f      	ldr	r3, [pc, #60]	; (8002f5c <HAL_UART_MspInit+0x128>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f22:	4b0e      	ldr	r3, [pc, #56]	; (8002f5c <HAL_UART_MspInit+0x128>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002f28:	480c      	ldr	r0, [pc, #48]	; (8002f5c <HAL_UART_MspInit+0x128>)
 8002f2a:	f000 fae7 	bl	80034fc <HAL_DMA_Init>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <HAL_UART_MspInit+0x104>
    {
      Error_Handler();
 8002f34:	f7ff fe90 	bl	8002c58 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a08      	ldr	r2, [pc, #32]	; (8002f5c <HAL_UART_MspInit+0x128>)
 8002f3c:	679a      	str	r2, [r3, #120]	; 0x78
 8002f3e:	4a07      	ldr	r2, [pc, #28]	; (8002f5c <HAL_UART_MspInit+0x128>)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002f44:	bf00      	nop
 8002f46:	37c8      	adds	r7, #200	; 0xc8
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40004800 	.word	0x40004800
 8002f50:	58024400 	.word	0x58024400
 8002f54:	240004e8 	.word	0x240004e8
 8002f58:	40020010 	.word	0x40020010
 8002f5c:	24000560 	.word	0x24000560
 8002f60:	40020028 	.word	0x40020028

08002f64 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b0b8      	sub	sp, #224	; 0xe0
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f6c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	605a      	str	r2, [r3, #4]
 8002f76:	609a      	str	r2, [r3, #8]
 8002f78:	60da      	str	r2, [r3, #12]
 8002f7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f7c:	f107 0310 	add.w	r3, r7, #16
 8002f80:	22bc      	movs	r2, #188	; 0xbc
 8002f82:	2100      	movs	r1, #0
 8002f84:	4618      	mov	r0, r3
 8002f86:	f005 ffa9 	bl	8008edc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a36      	ldr	r2, [pc, #216]	; (8003068 <HAL_PCD_MspInit+0x104>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d165      	bne.n	8003060 <HAL_PCD_MspInit+0xfc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002f94:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002f98:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 8002f9e:	2318      	movs	r3, #24
 8002fa0:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8002fa6:	2304      	movs	r3, #4
 8002fa8:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8002faa:	2302      	movs	r3, #2
 8002fac:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8002fae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002fb2:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8002fb8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002fbc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fc0:	f107 0310 	add.w	r3, r7, #16
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f002 ffd3 	bl	8005f70 <HAL_RCCEx_PeriphCLKConfig>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8002fd0:	f7ff fe42 	bl	8002c58 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002fd4:	f002 f802 	bl	8004fdc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fd8:	4b24      	ldr	r3, [pc, #144]	; (800306c <HAL_PCD_MspInit+0x108>)
 8002fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fde:	4a23      	ldr	r2, [pc, #140]	; (800306c <HAL_PCD_MspInit+0x108>)
 8002fe0:	f043 0301 	orr.w	r3, r3, #1
 8002fe4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fe8:	4b20      	ldr	r3, [pc, #128]	; (800306c <HAL_PCD_MspInit+0x108>)
 8002fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	60fb      	str	r3, [r7, #12]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8002ff6:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8002ffa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ffe:	2302      	movs	r3, #2
 8003000:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003004:	2300      	movs	r3, #0
 8003006:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800300a:	2300      	movs	r3, #0
 800300c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8003010:	230a      	movs	r3, #10
 8003012:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003016:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800301a:	4619      	mov	r1, r3
 800301c:	4814      	ldr	r0, [pc, #80]	; (8003070 <HAL_PCD_MspInit+0x10c>)
 800301e:	f001 fc29 	bl	8004874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003022:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003026:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800302a:	2300      	movs	r3, #0
 800302c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003030:	2300      	movs	r3, #0
 8003032:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003036:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800303a:	4619      	mov	r1, r3
 800303c:	480c      	ldr	r0, [pc, #48]	; (8003070 <HAL_PCD_MspInit+0x10c>)
 800303e:	f001 fc19 	bl	8004874 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003042:	4b0a      	ldr	r3, [pc, #40]	; (800306c <HAL_PCD_MspInit+0x108>)
 8003044:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003048:	4a08      	ldr	r2, [pc, #32]	; (800306c <HAL_PCD_MspInit+0x108>)
 800304a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800304e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003052:	4b06      	ldr	r3, [pc, #24]	; (800306c <HAL_PCD_MspInit+0x108>)
 8003054:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003058:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800305c:	60bb      	str	r3, [r7, #8]
 800305e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003060:	bf00      	nop
 8003062:	37e0      	adds	r7, #224	; 0xe0
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40080000 	.word	0x40080000
 800306c:	58024400 	.word	0x58024400
 8003070:	58020000 	.word	0x58020000

08003074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003078:	e7fe      	b.n	8003078 <NMI_Handler+0x4>

0800307a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800307a:	b480      	push	{r7}
 800307c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800307e:	e7fe      	b.n	800307e <HardFault_Handler+0x4>

08003080 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003084:	e7fe      	b.n	8003084 <MemManage_Handler+0x4>

08003086 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003086:	b480      	push	{r7}
 8003088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800308a:	e7fe      	b.n	800308a <BusFault_Handler+0x4>

0800308c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003090:	e7fe      	b.n	8003090 <UsageFault_Handler+0x4>

08003092 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003092:	b480      	push	{r7}
 8003094:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003096:	bf00      	nop
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030a4:	bf00      	nop
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030ae:	b480      	push	{r7}
 80030b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030b2:	bf00      	nop
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030c0:	f000 f8d4 	bl	800326c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030c4:	bf00      	nop
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030d0:	4a14      	ldr	r2, [pc, #80]	; (8003124 <_sbrk+0x5c>)
 80030d2:	4b15      	ldr	r3, [pc, #84]	; (8003128 <_sbrk+0x60>)
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030dc:	4b13      	ldr	r3, [pc, #76]	; (800312c <_sbrk+0x64>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d102      	bne.n	80030ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030e4:	4b11      	ldr	r3, [pc, #68]	; (800312c <_sbrk+0x64>)
 80030e6:	4a12      	ldr	r2, [pc, #72]	; (8003130 <_sbrk+0x68>)
 80030e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030ea:	4b10      	ldr	r3, [pc, #64]	; (800312c <_sbrk+0x64>)
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4413      	add	r3, r2
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d207      	bcs.n	8003108 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030f8:	f005 ff08 	bl	8008f0c <__errno>
 80030fc:	4603      	mov	r3, r0
 80030fe:	220c      	movs	r2, #12
 8003100:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003102:	f04f 33ff 	mov.w	r3, #4294967295
 8003106:	e009      	b.n	800311c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003108:	4b08      	ldr	r3, [pc, #32]	; (800312c <_sbrk+0x64>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800310e:	4b07      	ldr	r3, [pc, #28]	; (800312c <_sbrk+0x64>)
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4413      	add	r3, r2
 8003116:	4a05      	ldr	r2, [pc, #20]	; (800312c <_sbrk+0x64>)
 8003118:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800311a:	68fb      	ldr	r3, [r7, #12]
}
 800311c:	4618      	mov	r0, r3
 800311e:	3718      	adds	r7, #24
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	24080000 	.word	0x24080000
 8003128:	00000400 	.word	0x00000400
 800312c:	24000b94 	.word	0x24000b94
 8003130:	24000ce8 	.word	0x24000ce8

08003134 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003134:	f8df d034 	ldr.w	sp, [pc, #52]	; 800316c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003138:	f7fd faa0 	bl	800067c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800313c:	480c      	ldr	r0, [pc, #48]	; (8003170 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800313e:	490d      	ldr	r1, [pc, #52]	; (8003174 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003140:	4a0d      	ldr	r2, [pc, #52]	; (8003178 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003142:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003144:	e002      	b.n	800314c <LoopCopyDataInit>

08003146 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003146:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003148:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800314a:	3304      	adds	r3, #4

0800314c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800314c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800314e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003150:	d3f9      	bcc.n	8003146 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003152:	4a0a      	ldr	r2, [pc, #40]	; (800317c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003154:	4c0a      	ldr	r4, [pc, #40]	; (8003180 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003156:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003158:	e001      	b.n	800315e <LoopFillZerobss>

0800315a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800315a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800315c:	3204      	adds	r2, #4

0800315e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800315e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003160:	d3fb      	bcc.n	800315a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003162:	f005 fed9 	bl	8008f18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003166:	f7fe ff07 	bl	8001f78 <main>
  bx  lr
 800316a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800316c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003170:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003174:	2400028c 	.word	0x2400028c
  ldr r2, =_sidata
 8003178:	08049964 	.word	0x08049964
  ldr r2, =_sbss
 800317c:	2400034c 	.word	0x2400034c
  ldr r4, =_ebss
 8003180:	24000ce4 	.word	0x24000ce4

08003184 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003184:	e7fe      	b.n	8003184 <ADC3_IRQHandler>
	...

08003188 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800318e:	2003      	movs	r0, #3
 8003190:	f000 f982 	bl	8003498 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003194:	f002 fd16 	bl	8005bc4 <HAL_RCC_GetSysClockFreq>
 8003198:	4602      	mov	r2, r0
 800319a:	4b15      	ldr	r3, [pc, #84]	; (80031f0 <HAL_Init+0x68>)
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	0a1b      	lsrs	r3, r3, #8
 80031a0:	f003 030f 	and.w	r3, r3, #15
 80031a4:	4913      	ldr	r1, [pc, #76]	; (80031f4 <HAL_Init+0x6c>)
 80031a6:	5ccb      	ldrb	r3, [r1, r3]
 80031a8:	f003 031f 	and.w	r3, r3, #31
 80031ac:	fa22 f303 	lsr.w	r3, r2, r3
 80031b0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031b2:	4b0f      	ldr	r3, [pc, #60]	; (80031f0 <HAL_Init+0x68>)
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	f003 030f 	and.w	r3, r3, #15
 80031ba:	4a0e      	ldr	r2, [pc, #56]	; (80031f4 <HAL_Init+0x6c>)
 80031bc:	5cd3      	ldrb	r3, [r2, r3]
 80031be:	f003 031f 	and.w	r3, r3, #31
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	fa22 f303 	lsr.w	r3, r2, r3
 80031c8:	4a0b      	ldr	r2, [pc, #44]	; (80031f8 <HAL_Init+0x70>)
 80031ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80031cc:	4a0b      	ldr	r2, [pc, #44]	; (80031fc <HAL_Init+0x74>)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80031d2:	2000      	movs	r0, #0
 80031d4:	f000 f814 	bl	8003200 <HAL_InitTick>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e002      	b.n	80031e8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80031e2:	f7ff fd3f 	bl	8002c64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3708      	adds	r7, #8
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	58024400 	.word	0x58024400
 80031f4:	080098cc 	.word	0x080098cc
 80031f8:	24000004 	.word	0x24000004
 80031fc:	24000000 	.word	0x24000000

08003200 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003208:	4b15      	ldr	r3, [pc, #84]	; (8003260 <HAL_InitTick+0x60>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e021      	b.n	8003258 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003214:	4b13      	ldr	r3, [pc, #76]	; (8003264 <HAL_InitTick+0x64>)
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	4b11      	ldr	r3, [pc, #68]	; (8003260 <HAL_InitTick+0x60>)
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	4619      	mov	r1, r3
 800321e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003222:	fbb3 f3f1 	udiv	r3, r3, r1
 8003226:	fbb2 f3f3 	udiv	r3, r2, r3
 800322a:	4618      	mov	r0, r3
 800322c:	f000 f959 	bl	80034e2 <HAL_SYSTICK_Config>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e00e      	b.n	8003258 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b0f      	cmp	r3, #15
 800323e:	d80a      	bhi.n	8003256 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003240:	2200      	movs	r2, #0
 8003242:	6879      	ldr	r1, [r7, #4]
 8003244:	f04f 30ff 	mov.w	r0, #4294967295
 8003248:	f000 f931 	bl	80034ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800324c:	4a06      	ldr	r2, [pc, #24]	; (8003268 <HAL_InitTick+0x68>)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003252:	2300      	movs	r3, #0
 8003254:	e000      	b.n	8003258 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
}
 8003258:	4618      	mov	r0, r3
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	24000238 	.word	0x24000238
 8003264:	24000000 	.word	0x24000000
 8003268:	24000234 	.word	0x24000234

0800326c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003270:	4b06      	ldr	r3, [pc, #24]	; (800328c <HAL_IncTick+0x20>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	461a      	mov	r2, r3
 8003276:	4b06      	ldr	r3, [pc, #24]	; (8003290 <HAL_IncTick+0x24>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4413      	add	r3, r2
 800327c:	4a04      	ldr	r2, [pc, #16]	; (8003290 <HAL_IncTick+0x24>)
 800327e:	6013      	str	r3, [r2, #0]
}
 8003280:	bf00      	nop
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	24000238 	.word	0x24000238
 8003290:	24000b98 	.word	0x24000b98

08003294 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  return uwTick;
 8003298:	4b03      	ldr	r3, [pc, #12]	; (80032a8 <HAL_GetTick+0x14>)
 800329a:	681b      	ldr	r3, [r3, #0]
}
 800329c:	4618      	mov	r0, r3
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	24000b98 	.word	0x24000b98

080032ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032b4:	f7ff ffee 	bl	8003294 <HAL_GetTick>
 80032b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c4:	d005      	beq.n	80032d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032c6:	4b0a      	ldr	r3, [pc, #40]	; (80032f0 <HAL_Delay+0x44>)
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	461a      	mov	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4413      	add	r3, r2
 80032d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032d2:	bf00      	nop
 80032d4:	f7ff ffde 	bl	8003294 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d8f7      	bhi.n	80032d4 <HAL_Delay+0x28>
  {
  }
}
 80032e4:	bf00      	nop
 80032e6:	bf00      	nop
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	24000238 	.word	0x24000238

080032f4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80032f8:	4b03      	ldr	r3, [pc, #12]	; (8003308 <HAL_GetREVID+0x14>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	0c1b      	lsrs	r3, r3, #16
}
 80032fe:	4618      	mov	r0, r3
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	5c001000 	.word	0x5c001000

0800330c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8003314:	4b06      	ldr	r3, [pc, #24]	; (8003330 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800331c:	4904      	ldr	r1, [pc, #16]	; (8003330 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4313      	orrs	r3, r2
 8003322:	604b      	str	r3, [r1, #4]
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	58000400 	.word	0x58000400

08003334 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f003 0307 	and.w	r3, r3, #7
 8003342:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003344:	4b0b      	ldr	r3, [pc, #44]	; (8003374 <__NVIC_SetPriorityGrouping+0x40>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003350:	4013      	ands	r3, r2
 8003352:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800335c:	4b06      	ldr	r3, [pc, #24]	; (8003378 <__NVIC_SetPriorityGrouping+0x44>)
 800335e:	4313      	orrs	r3, r2
 8003360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003362:	4a04      	ldr	r2, [pc, #16]	; (8003374 <__NVIC_SetPriorityGrouping+0x40>)
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	60d3      	str	r3, [r2, #12]
}
 8003368:	bf00      	nop
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	e000ed00 	.word	0xe000ed00
 8003378:	05fa0000 	.word	0x05fa0000

0800337c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003380:	4b04      	ldr	r3, [pc, #16]	; (8003394 <__NVIC_GetPriorityGrouping+0x18>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	0a1b      	lsrs	r3, r3, #8
 8003386:	f003 0307 	and.w	r3, r3, #7
}
 800338a:	4618      	mov	r0, r3
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	e000ed00 	.word	0xe000ed00

08003398 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	6039      	str	r1, [r7, #0]
 80033a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80033a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	db0a      	blt.n	80033c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	490c      	ldr	r1, [pc, #48]	; (80033e4 <__NVIC_SetPriority+0x4c>)
 80033b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033b6:	0112      	lsls	r2, r2, #4
 80033b8:	b2d2      	uxtb	r2, r2
 80033ba:	440b      	add	r3, r1
 80033bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033c0:	e00a      	b.n	80033d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	4908      	ldr	r1, [pc, #32]	; (80033e8 <__NVIC_SetPriority+0x50>)
 80033c8:	88fb      	ldrh	r3, [r7, #6]
 80033ca:	f003 030f 	and.w	r3, r3, #15
 80033ce:	3b04      	subs	r3, #4
 80033d0:	0112      	lsls	r2, r2, #4
 80033d2:	b2d2      	uxtb	r2, r2
 80033d4:	440b      	add	r3, r1
 80033d6:	761a      	strb	r2, [r3, #24]
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	e000e100 	.word	0xe000e100
 80033e8:	e000ed00 	.word	0xe000ed00

080033ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b089      	sub	sp, #36	; 0x24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f003 0307 	and.w	r3, r3, #7
 80033fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	f1c3 0307 	rsb	r3, r3, #7
 8003406:	2b04      	cmp	r3, #4
 8003408:	bf28      	it	cs
 800340a:	2304      	movcs	r3, #4
 800340c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	3304      	adds	r3, #4
 8003412:	2b06      	cmp	r3, #6
 8003414:	d902      	bls.n	800341c <NVIC_EncodePriority+0x30>
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	3b03      	subs	r3, #3
 800341a:	e000      	b.n	800341e <NVIC_EncodePriority+0x32>
 800341c:	2300      	movs	r3, #0
 800341e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003420:	f04f 32ff 	mov.w	r2, #4294967295
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	43da      	mvns	r2, r3
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	401a      	ands	r2, r3
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003434:	f04f 31ff 	mov.w	r1, #4294967295
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	fa01 f303 	lsl.w	r3, r1, r3
 800343e:	43d9      	mvns	r1, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003444:	4313      	orrs	r3, r2
         );
}
 8003446:	4618      	mov	r0, r3
 8003448:	3724      	adds	r7, #36	; 0x24
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
	...

08003454 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	3b01      	subs	r3, #1
 8003460:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003464:	d301      	bcc.n	800346a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003466:	2301      	movs	r3, #1
 8003468:	e00f      	b.n	800348a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800346a:	4a0a      	ldr	r2, [pc, #40]	; (8003494 <SysTick_Config+0x40>)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3b01      	subs	r3, #1
 8003470:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003472:	210f      	movs	r1, #15
 8003474:	f04f 30ff 	mov.w	r0, #4294967295
 8003478:	f7ff ff8e 	bl	8003398 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800347c:	4b05      	ldr	r3, [pc, #20]	; (8003494 <SysTick_Config+0x40>)
 800347e:	2200      	movs	r2, #0
 8003480:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003482:	4b04      	ldr	r3, [pc, #16]	; (8003494 <SysTick_Config+0x40>)
 8003484:	2207      	movs	r2, #7
 8003486:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	e000e010 	.word	0xe000e010

08003498 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f7ff ff47 	bl	8003334 <__NVIC_SetPriorityGrouping>
}
 80034a6:	bf00      	nop
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b086      	sub	sp, #24
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	4603      	mov	r3, r0
 80034b6:	60b9      	str	r1, [r7, #8]
 80034b8:	607a      	str	r2, [r7, #4]
 80034ba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034bc:	f7ff ff5e 	bl	800337c <__NVIC_GetPriorityGrouping>
 80034c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	68b9      	ldr	r1, [r7, #8]
 80034c6:	6978      	ldr	r0, [r7, #20]
 80034c8:	f7ff ff90 	bl	80033ec <NVIC_EncodePriority>
 80034cc:	4602      	mov	r2, r0
 80034ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80034d2:	4611      	mov	r1, r2
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7ff ff5f 	bl	8003398 <__NVIC_SetPriority>
}
 80034da:	bf00      	nop
 80034dc:	3718      	adds	r7, #24
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b082      	sub	sp, #8
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7ff ffb2 	bl	8003454 <SysTick_Config>
 80034f0:	4603      	mov	r3, r0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
	...

080034fc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003504:	f7ff fec6 	bl	8003294 <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d101      	bne.n	8003514 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e316      	b.n	8003b42 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a66      	ldr	r2, [pc, #408]	; (80036b4 <HAL_DMA_Init+0x1b8>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d04a      	beq.n	80035b4 <HAL_DMA_Init+0xb8>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a65      	ldr	r2, [pc, #404]	; (80036b8 <HAL_DMA_Init+0x1bc>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d045      	beq.n	80035b4 <HAL_DMA_Init+0xb8>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a63      	ldr	r2, [pc, #396]	; (80036bc <HAL_DMA_Init+0x1c0>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d040      	beq.n	80035b4 <HAL_DMA_Init+0xb8>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a62      	ldr	r2, [pc, #392]	; (80036c0 <HAL_DMA_Init+0x1c4>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d03b      	beq.n	80035b4 <HAL_DMA_Init+0xb8>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a60      	ldr	r2, [pc, #384]	; (80036c4 <HAL_DMA_Init+0x1c8>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d036      	beq.n	80035b4 <HAL_DMA_Init+0xb8>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a5f      	ldr	r2, [pc, #380]	; (80036c8 <HAL_DMA_Init+0x1cc>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d031      	beq.n	80035b4 <HAL_DMA_Init+0xb8>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a5d      	ldr	r2, [pc, #372]	; (80036cc <HAL_DMA_Init+0x1d0>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d02c      	beq.n	80035b4 <HAL_DMA_Init+0xb8>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a5c      	ldr	r2, [pc, #368]	; (80036d0 <HAL_DMA_Init+0x1d4>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d027      	beq.n	80035b4 <HAL_DMA_Init+0xb8>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a5a      	ldr	r2, [pc, #360]	; (80036d4 <HAL_DMA_Init+0x1d8>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d022      	beq.n	80035b4 <HAL_DMA_Init+0xb8>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a59      	ldr	r2, [pc, #356]	; (80036d8 <HAL_DMA_Init+0x1dc>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d01d      	beq.n	80035b4 <HAL_DMA_Init+0xb8>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a57      	ldr	r2, [pc, #348]	; (80036dc <HAL_DMA_Init+0x1e0>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d018      	beq.n	80035b4 <HAL_DMA_Init+0xb8>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a56      	ldr	r2, [pc, #344]	; (80036e0 <HAL_DMA_Init+0x1e4>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d013      	beq.n	80035b4 <HAL_DMA_Init+0xb8>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a54      	ldr	r2, [pc, #336]	; (80036e4 <HAL_DMA_Init+0x1e8>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d00e      	beq.n	80035b4 <HAL_DMA_Init+0xb8>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a53      	ldr	r2, [pc, #332]	; (80036e8 <HAL_DMA_Init+0x1ec>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d009      	beq.n	80035b4 <HAL_DMA_Init+0xb8>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a51      	ldr	r2, [pc, #324]	; (80036ec <HAL_DMA_Init+0x1f0>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d004      	beq.n	80035b4 <HAL_DMA_Init+0xb8>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a50      	ldr	r2, [pc, #320]	; (80036f0 <HAL_DMA_Init+0x1f4>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d101      	bne.n	80035b8 <HAL_DMA_Init+0xbc>
 80035b4:	2301      	movs	r3, #1
 80035b6:	e000      	b.n	80035ba <HAL_DMA_Init+0xbe>
 80035b8:	2300      	movs	r3, #0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 813b 	beq.w	8003836 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2202      	movs	r2, #2
 80035c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a37      	ldr	r2, [pc, #220]	; (80036b4 <HAL_DMA_Init+0x1b8>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d04a      	beq.n	8003670 <HAL_DMA_Init+0x174>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a36      	ldr	r2, [pc, #216]	; (80036b8 <HAL_DMA_Init+0x1bc>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d045      	beq.n	8003670 <HAL_DMA_Init+0x174>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a34      	ldr	r2, [pc, #208]	; (80036bc <HAL_DMA_Init+0x1c0>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d040      	beq.n	8003670 <HAL_DMA_Init+0x174>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a33      	ldr	r2, [pc, #204]	; (80036c0 <HAL_DMA_Init+0x1c4>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d03b      	beq.n	8003670 <HAL_DMA_Init+0x174>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a31      	ldr	r2, [pc, #196]	; (80036c4 <HAL_DMA_Init+0x1c8>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d036      	beq.n	8003670 <HAL_DMA_Init+0x174>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a30      	ldr	r2, [pc, #192]	; (80036c8 <HAL_DMA_Init+0x1cc>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d031      	beq.n	8003670 <HAL_DMA_Init+0x174>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a2e      	ldr	r2, [pc, #184]	; (80036cc <HAL_DMA_Init+0x1d0>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d02c      	beq.n	8003670 <HAL_DMA_Init+0x174>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a2d      	ldr	r2, [pc, #180]	; (80036d0 <HAL_DMA_Init+0x1d4>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d027      	beq.n	8003670 <HAL_DMA_Init+0x174>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a2b      	ldr	r2, [pc, #172]	; (80036d4 <HAL_DMA_Init+0x1d8>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d022      	beq.n	8003670 <HAL_DMA_Init+0x174>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a2a      	ldr	r2, [pc, #168]	; (80036d8 <HAL_DMA_Init+0x1dc>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d01d      	beq.n	8003670 <HAL_DMA_Init+0x174>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a28      	ldr	r2, [pc, #160]	; (80036dc <HAL_DMA_Init+0x1e0>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d018      	beq.n	8003670 <HAL_DMA_Init+0x174>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a27      	ldr	r2, [pc, #156]	; (80036e0 <HAL_DMA_Init+0x1e4>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d013      	beq.n	8003670 <HAL_DMA_Init+0x174>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a25      	ldr	r2, [pc, #148]	; (80036e4 <HAL_DMA_Init+0x1e8>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d00e      	beq.n	8003670 <HAL_DMA_Init+0x174>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a24      	ldr	r2, [pc, #144]	; (80036e8 <HAL_DMA_Init+0x1ec>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d009      	beq.n	8003670 <HAL_DMA_Init+0x174>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a22      	ldr	r2, [pc, #136]	; (80036ec <HAL_DMA_Init+0x1f0>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d004      	beq.n	8003670 <HAL_DMA_Init+0x174>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a21      	ldr	r2, [pc, #132]	; (80036f0 <HAL_DMA_Init+0x1f4>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d108      	bne.n	8003682 <HAL_DMA_Init+0x186>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 0201 	bic.w	r2, r2, #1
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	e007      	b.n	8003692 <HAL_DMA_Init+0x196>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 0201 	bic.w	r2, r2, #1
 8003690:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003692:	e02f      	b.n	80036f4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003694:	f7ff fdfe 	bl	8003294 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b05      	cmp	r3, #5
 80036a0:	d928      	bls.n	80036f4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2220      	movs	r2, #32
 80036a6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2203      	movs	r2, #3
 80036ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e246      	b.n	8003b42 <HAL_DMA_Init+0x646>
 80036b4:	40020010 	.word	0x40020010
 80036b8:	40020028 	.word	0x40020028
 80036bc:	40020040 	.word	0x40020040
 80036c0:	40020058 	.word	0x40020058
 80036c4:	40020070 	.word	0x40020070
 80036c8:	40020088 	.word	0x40020088
 80036cc:	400200a0 	.word	0x400200a0
 80036d0:	400200b8 	.word	0x400200b8
 80036d4:	40020410 	.word	0x40020410
 80036d8:	40020428 	.word	0x40020428
 80036dc:	40020440 	.word	0x40020440
 80036e0:	40020458 	.word	0x40020458
 80036e4:	40020470 	.word	0x40020470
 80036e8:	40020488 	.word	0x40020488
 80036ec:	400204a0 	.word	0x400204a0
 80036f0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1c8      	bne.n	8003694 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	4b83      	ldr	r3, [pc, #524]	; (800391c <HAL_DMA_Init+0x420>)
 800370e:	4013      	ands	r3, r2
 8003710:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800371a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003726:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003732:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	4313      	orrs	r3, r2
 800373e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	2b04      	cmp	r3, #4
 8003746:	d107      	bne.n	8003758 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003750:	4313      	orrs	r3, r2
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	4313      	orrs	r3, r2
 8003756:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003758:	4b71      	ldr	r3, [pc, #452]	; (8003920 <HAL_DMA_Init+0x424>)
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	4b71      	ldr	r3, [pc, #452]	; (8003924 <HAL_DMA_Init+0x428>)
 800375e:	4013      	ands	r3, r2
 8003760:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003764:	d328      	bcc.n	80037b8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b28      	cmp	r3, #40	; 0x28
 800376c:	d903      	bls.n	8003776 <HAL_DMA_Init+0x27a>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2b2e      	cmp	r3, #46	; 0x2e
 8003774:	d917      	bls.n	80037a6 <HAL_DMA_Init+0x2aa>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2b3e      	cmp	r3, #62	; 0x3e
 800377c:	d903      	bls.n	8003786 <HAL_DMA_Init+0x28a>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b42      	cmp	r3, #66	; 0x42
 8003784:	d90f      	bls.n	80037a6 <HAL_DMA_Init+0x2aa>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2b46      	cmp	r3, #70	; 0x46
 800378c:	d903      	bls.n	8003796 <HAL_DMA_Init+0x29a>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	2b48      	cmp	r3, #72	; 0x48
 8003794:	d907      	bls.n	80037a6 <HAL_DMA_Init+0x2aa>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	2b4e      	cmp	r3, #78	; 0x4e
 800379c:	d905      	bls.n	80037aa <HAL_DMA_Init+0x2ae>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	2b52      	cmp	r3, #82	; 0x52
 80037a4:	d801      	bhi.n	80037aa <HAL_DMA_Init+0x2ae>
 80037a6:	2301      	movs	r3, #1
 80037a8:	e000      	b.n	80037ac <HAL_DMA_Init+0x2b0>
 80037aa:	2300      	movs	r3, #0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d003      	beq.n	80037b8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037b6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	f023 0307 	bic.w	r3, r3, #7
 80037ce:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037de:	2b04      	cmp	r3, #4
 80037e0:	d117      	bne.n	8003812 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00e      	beq.n	8003812 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 fa8f 	bl	8003d18 <DMA_CheckFifoParam>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d008      	beq.n	8003812 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2240      	movs	r2, #64	; 0x40
 8003804:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e197      	b.n	8003b42 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f9ca 	bl	8003bb4 <DMA_CalcBaseAndBitshift>
 8003820:	4603      	mov	r3, r0
 8003822:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003828:	f003 031f 	and.w	r3, r3, #31
 800382c:	223f      	movs	r2, #63	; 0x3f
 800382e:	409a      	lsls	r2, r3
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	609a      	str	r2, [r3, #8]
 8003834:	e0cd      	b.n	80039d2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a3b      	ldr	r2, [pc, #236]	; (8003928 <HAL_DMA_Init+0x42c>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d022      	beq.n	8003886 <HAL_DMA_Init+0x38a>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a39      	ldr	r2, [pc, #228]	; (800392c <HAL_DMA_Init+0x430>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d01d      	beq.n	8003886 <HAL_DMA_Init+0x38a>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a38      	ldr	r2, [pc, #224]	; (8003930 <HAL_DMA_Init+0x434>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d018      	beq.n	8003886 <HAL_DMA_Init+0x38a>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a36      	ldr	r2, [pc, #216]	; (8003934 <HAL_DMA_Init+0x438>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d013      	beq.n	8003886 <HAL_DMA_Init+0x38a>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a35      	ldr	r2, [pc, #212]	; (8003938 <HAL_DMA_Init+0x43c>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d00e      	beq.n	8003886 <HAL_DMA_Init+0x38a>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a33      	ldr	r2, [pc, #204]	; (800393c <HAL_DMA_Init+0x440>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d009      	beq.n	8003886 <HAL_DMA_Init+0x38a>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a32      	ldr	r2, [pc, #200]	; (8003940 <HAL_DMA_Init+0x444>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d004      	beq.n	8003886 <HAL_DMA_Init+0x38a>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a30      	ldr	r2, [pc, #192]	; (8003944 <HAL_DMA_Init+0x448>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d101      	bne.n	800388a <HAL_DMA_Init+0x38e>
 8003886:	2301      	movs	r3, #1
 8003888:	e000      	b.n	800388c <HAL_DMA_Init+0x390>
 800388a:	2300      	movs	r3, #0
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 8097 	beq.w	80039c0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a24      	ldr	r2, [pc, #144]	; (8003928 <HAL_DMA_Init+0x42c>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d021      	beq.n	80038e0 <HAL_DMA_Init+0x3e4>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a22      	ldr	r2, [pc, #136]	; (800392c <HAL_DMA_Init+0x430>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d01c      	beq.n	80038e0 <HAL_DMA_Init+0x3e4>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a21      	ldr	r2, [pc, #132]	; (8003930 <HAL_DMA_Init+0x434>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d017      	beq.n	80038e0 <HAL_DMA_Init+0x3e4>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a1f      	ldr	r2, [pc, #124]	; (8003934 <HAL_DMA_Init+0x438>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d012      	beq.n	80038e0 <HAL_DMA_Init+0x3e4>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a1e      	ldr	r2, [pc, #120]	; (8003938 <HAL_DMA_Init+0x43c>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d00d      	beq.n	80038e0 <HAL_DMA_Init+0x3e4>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a1c      	ldr	r2, [pc, #112]	; (800393c <HAL_DMA_Init+0x440>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d008      	beq.n	80038e0 <HAL_DMA_Init+0x3e4>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a1b      	ldr	r2, [pc, #108]	; (8003940 <HAL_DMA_Init+0x444>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d003      	beq.n	80038e0 <HAL_DMA_Init+0x3e4>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a19      	ldr	r2, [pc, #100]	; (8003944 <HAL_DMA_Init+0x448>)
 80038de:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2202      	movs	r2, #2
 80038e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	4b13      	ldr	r3, [pc, #76]	; (8003948 <HAL_DMA_Init+0x44c>)
 80038fc:	4013      	ands	r3, r2
 80038fe:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	2b40      	cmp	r3, #64	; 0x40
 8003906:	d021      	beq.n	800394c <HAL_DMA_Init+0x450>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	2b80      	cmp	r3, #128	; 0x80
 800390e:	d102      	bne.n	8003916 <HAL_DMA_Init+0x41a>
 8003910:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003914:	e01b      	b.n	800394e <HAL_DMA_Init+0x452>
 8003916:	2300      	movs	r3, #0
 8003918:	e019      	b.n	800394e <HAL_DMA_Init+0x452>
 800391a:	bf00      	nop
 800391c:	fe10803f 	.word	0xfe10803f
 8003920:	5c001000 	.word	0x5c001000
 8003924:	ffff0000 	.word	0xffff0000
 8003928:	58025408 	.word	0x58025408
 800392c:	5802541c 	.word	0x5802541c
 8003930:	58025430 	.word	0x58025430
 8003934:	58025444 	.word	0x58025444
 8003938:	58025458 	.word	0x58025458
 800393c:	5802546c 	.word	0x5802546c
 8003940:	58025480 	.word	0x58025480
 8003944:	58025494 	.word	0x58025494
 8003948:	fffe000f 	.word	0xfffe000f
 800394c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	68d2      	ldr	r2, [r2, #12]
 8003952:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003954:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800395c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003964:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800396c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003974:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800397c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	4313      	orrs	r3, r2
 8003982:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	461a      	mov	r2, r3
 8003992:	4b6e      	ldr	r3, [pc, #440]	; (8003b4c <HAL_DMA_Init+0x650>)
 8003994:	4413      	add	r3, r2
 8003996:	4a6e      	ldr	r2, [pc, #440]	; (8003b50 <HAL_DMA_Init+0x654>)
 8003998:	fba2 2303 	umull	r2, r3, r2, r3
 800399c:	091b      	lsrs	r3, r3, #4
 800399e:	009a      	lsls	r2, r3, #2
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 f905 	bl	8003bb4 <DMA_CalcBaseAndBitshift>
 80039aa:	4603      	mov	r3, r0
 80039ac:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b2:	f003 031f 	and.w	r3, r3, #31
 80039b6:	2201      	movs	r2, #1
 80039b8:	409a      	lsls	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	605a      	str	r2, [r3, #4]
 80039be:	e008      	b.n	80039d2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2240      	movs	r2, #64	; 0x40
 80039c4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2203      	movs	r2, #3
 80039ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e0b7      	b.n	8003b42 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a5f      	ldr	r2, [pc, #380]	; (8003b54 <HAL_DMA_Init+0x658>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d072      	beq.n	8003ac2 <HAL_DMA_Init+0x5c6>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a5d      	ldr	r2, [pc, #372]	; (8003b58 <HAL_DMA_Init+0x65c>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d06d      	beq.n	8003ac2 <HAL_DMA_Init+0x5c6>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a5c      	ldr	r2, [pc, #368]	; (8003b5c <HAL_DMA_Init+0x660>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d068      	beq.n	8003ac2 <HAL_DMA_Init+0x5c6>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a5a      	ldr	r2, [pc, #360]	; (8003b60 <HAL_DMA_Init+0x664>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d063      	beq.n	8003ac2 <HAL_DMA_Init+0x5c6>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a59      	ldr	r2, [pc, #356]	; (8003b64 <HAL_DMA_Init+0x668>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d05e      	beq.n	8003ac2 <HAL_DMA_Init+0x5c6>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a57      	ldr	r2, [pc, #348]	; (8003b68 <HAL_DMA_Init+0x66c>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d059      	beq.n	8003ac2 <HAL_DMA_Init+0x5c6>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a56      	ldr	r2, [pc, #344]	; (8003b6c <HAL_DMA_Init+0x670>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d054      	beq.n	8003ac2 <HAL_DMA_Init+0x5c6>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a54      	ldr	r2, [pc, #336]	; (8003b70 <HAL_DMA_Init+0x674>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d04f      	beq.n	8003ac2 <HAL_DMA_Init+0x5c6>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a53      	ldr	r2, [pc, #332]	; (8003b74 <HAL_DMA_Init+0x678>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d04a      	beq.n	8003ac2 <HAL_DMA_Init+0x5c6>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a51      	ldr	r2, [pc, #324]	; (8003b78 <HAL_DMA_Init+0x67c>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d045      	beq.n	8003ac2 <HAL_DMA_Init+0x5c6>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a50      	ldr	r2, [pc, #320]	; (8003b7c <HAL_DMA_Init+0x680>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d040      	beq.n	8003ac2 <HAL_DMA_Init+0x5c6>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a4e      	ldr	r2, [pc, #312]	; (8003b80 <HAL_DMA_Init+0x684>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d03b      	beq.n	8003ac2 <HAL_DMA_Init+0x5c6>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a4d      	ldr	r2, [pc, #308]	; (8003b84 <HAL_DMA_Init+0x688>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d036      	beq.n	8003ac2 <HAL_DMA_Init+0x5c6>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a4b      	ldr	r2, [pc, #300]	; (8003b88 <HAL_DMA_Init+0x68c>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d031      	beq.n	8003ac2 <HAL_DMA_Init+0x5c6>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a4a      	ldr	r2, [pc, #296]	; (8003b8c <HAL_DMA_Init+0x690>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d02c      	beq.n	8003ac2 <HAL_DMA_Init+0x5c6>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a48      	ldr	r2, [pc, #288]	; (8003b90 <HAL_DMA_Init+0x694>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d027      	beq.n	8003ac2 <HAL_DMA_Init+0x5c6>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a47      	ldr	r2, [pc, #284]	; (8003b94 <HAL_DMA_Init+0x698>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d022      	beq.n	8003ac2 <HAL_DMA_Init+0x5c6>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a45      	ldr	r2, [pc, #276]	; (8003b98 <HAL_DMA_Init+0x69c>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d01d      	beq.n	8003ac2 <HAL_DMA_Init+0x5c6>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a44      	ldr	r2, [pc, #272]	; (8003b9c <HAL_DMA_Init+0x6a0>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d018      	beq.n	8003ac2 <HAL_DMA_Init+0x5c6>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a42      	ldr	r2, [pc, #264]	; (8003ba0 <HAL_DMA_Init+0x6a4>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d013      	beq.n	8003ac2 <HAL_DMA_Init+0x5c6>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a41      	ldr	r2, [pc, #260]	; (8003ba4 <HAL_DMA_Init+0x6a8>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d00e      	beq.n	8003ac2 <HAL_DMA_Init+0x5c6>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a3f      	ldr	r2, [pc, #252]	; (8003ba8 <HAL_DMA_Init+0x6ac>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d009      	beq.n	8003ac2 <HAL_DMA_Init+0x5c6>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a3e      	ldr	r2, [pc, #248]	; (8003bac <HAL_DMA_Init+0x6b0>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d004      	beq.n	8003ac2 <HAL_DMA_Init+0x5c6>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a3c      	ldr	r2, [pc, #240]	; (8003bb0 <HAL_DMA_Init+0x6b4>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d101      	bne.n	8003ac6 <HAL_DMA_Init+0x5ca>
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e000      	b.n	8003ac8 <HAL_DMA_Init+0x5cc>
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d032      	beq.n	8003b32 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 f99f 	bl	8003e10 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	2b80      	cmp	r3, #128	; 0x80
 8003ad8:	d102      	bne.n	8003ae0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ae8:	b2d2      	uxtb	r2, r2
 8003aea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003af4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d010      	beq.n	8003b20 <HAL_DMA_Init+0x624>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	2b08      	cmp	r3, #8
 8003b04:	d80c      	bhi.n	8003b20 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 fa1c 	bl	8003f44 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b10:	2200      	movs	r2, #0
 8003b12:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003b1c:	605a      	str	r2, [r3, #4]
 8003b1e:	e008      	b.n	8003b32 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3718      	adds	r7, #24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	a7fdabf8 	.word	0xa7fdabf8
 8003b50:	cccccccd 	.word	0xcccccccd
 8003b54:	40020010 	.word	0x40020010
 8003b58:	40020028 	.word	0x40020028
 8003b5c:	40020040 	.word	0x40020040
 8003b60:	40020058 	.word	0x40020058
 8003b64:	40020070 	.word	0x40020070
 8003b68:	40020088 	.word	0x40020088
 8003b6c:	400200a0 	.word	0x400200a0
 8003b70:	400200b8 	.word	0x400200b8
 8003b74:	40020410 	.word	0x40020410
 8003b78:	40020428 	.word	0x40020428
 8003b7c:	40020440 	.word	0x40020440
 8003b80:	40020458 	.word	0x40020458
 8003b84:	40020470 	.word	0x40020470
 8003b88:	40020488 	.word	0x40020488
 8003b8c:	400204a0 	.word	0x400204a0
 8003b90:	400204b8 	.word	0x400204b8
 8003b94:	58025408 	.word	0x58025408
 8003b98:	5802541c 	.word	0x5802541c
 8003b9c:	58025430 	.word	0x58025430
 8003ba0:	58025444 	.word	0x58025444
 8003ba4:	58025458 	.word	0x58025458
 8003ba8:	5802546c 	.word	0x5802546c
 8003bac:	58025480 	.word	0x58025480
 8003bb0:	58025494 	.word	0x58025494

08003bb4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a42      	ldr	r2, [pc, #264]	; (8003ccc <DMA_CalcBaseAndBitshift+0x118>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d04a      	beq.n	8003c5c <DMA_CalcBaseAndBitshift+0xa8>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a41      	ldr	r2, [pc, #260]	; (8003cd0 <DMA_CalcBaseAndBitshift+0x11c>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d045      	beq.n	8003c5c <DMA_CalcBaseAndBitshift+0xa8>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a3f      	ldr	r2, [pc, #252]	; (8003cd4 <DMA_CalcBaseAndBitshift+0x120>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d040      	beq.n	8003c5c <DMA_CalcBaseAndBitshift+0xa8>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a3e      	ldr	r2, [pc, #248]	; (8003cd8 <DMA_CalcBaseAndBitshift+0x124>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d03b      	beq.n	8003c5c <DMA_CalcBaseAndBitshift+0xa8>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a3c      	ldr	r2, [pc, #240]	; (8003cdc <DMA_CalcBaseAndBitshift+0x128>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d036      	beq.n	8003c5c <DMA_CalcBaseAndBitshift+0xa8>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a3b      	ldr	r2, [pc, #236]	; (8003ce0 <DMA_CalcBaseAndBitshift+0x12c>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d031      	beq.n	8003c5c <DMA_CalcBaseAndBitshift+0xa8>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a39      	ldr	r2, [pc, #228]	; (8003ce4 <DMA_CalcBaseAndBitshift+0x130>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d02c      	beq.n	8003c5c <DMA_CalcBaseAndBitshift+0xa8>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a38      	ldr	r2, [pc, #224]	; (8003ce8 <DMA_CalcBaseAndBitshift+0x134>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d027      	beq.n	8003c5c <DMA_CalcBaseAndBitshift+0xa8>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a36      	ldr	r2, [pc, #216]	; (8003cec <DMA_CalcBaseAndBitshift+0x138>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d022      	beq.n	8003c5c <DMA_CalcBaseAndBitshift+0xa8>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a35      	ldr	r2, [pc, #212]	; (8003cf0 <DMA_CalcBaseAndBitshift+0x13c>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d01d      	beq.n	8003c5c <DMA_CalcBaseAndBitshift+0xa8>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a33      	ldr	r2, [pc, #204]	; (8003cf4 <DMA_CalcBaseAndBitshift+0x140>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d018      	beq.n	8003c5c <DMA_CalcBaseAndBitshift+0xa8>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a32      	ldr	r2, [pc, #200]	; (8003cf8 <DMA_CalcBaseAndBitshift+0x144>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d013      	beq.n	8003c5c <DMA_CalcBaseAndBitshift+0xa8>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a30      	ldr	r2, [pc, #192]	; (8003cfc <DMA_CalcBaseAndBitshift+0x148>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d00e      	beq.n	8003c5c <DMA_CalcBaseAndBitshift+0xa8>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a2f      	ldr	r2, [pc, #188]	; (8003d00 <DMA_CalcBaseAndBitshift+0x14c>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d009      	beq.n	8003c5c <DMA_CalcBaseAndBitshift+0xa8>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a2d      	ldr	r2, [pc, #180]	; (8003d04 <DMA_CalcBaseAndBitshift+0x150>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d004      	beq.n	8003c5c <DMA_CalcBaseAndBitshift+0xa8>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a2c      	ldr	r2, [pc, #176]	; (8003d08 <DMA_CalcBaseAndBitshift+0x154>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d101      	bne.n	8003c60 <DMA_CalcBaseAndBitshift+0xac>
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e000      	b.n	8003c62 <DMA_CalcBaseAndBitshift+0xae>
 8003c60:	2300      	movs	r3, #0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d024      	beq.n	8003cb0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	3b10      	subs	r3, #16
 8003c6e:	4a27      	ldr	r2, [pc, #156]	; (8003d0c <DMA_CalcBaseAndBitshift+0x158>)
 8003c70:	fba2 2303 	umull	r2, r3, r2, r3
 8003c74:	091b      	lsrs	r3, r3, #4
 8003c76:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f003 0307 	and.w	r3, r3, #7
 8003c7e:	4a24      	ldr	r2, [pc, #144]	; (8003d10 <DMA_CalcBaseAndBitshift+0x15c>)
 8003c80:	5cd3      	ldrb	r3, [r2, r3]
 8003c82:	461a      	mov	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2b03      	cmp	r3, #3
 8003c8c:	d908      	bls.n	8003ca0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	461a      	mov	r2, r3
 8003c94:	4b1f      	ldr	r3, [pc, #124]	; (8003d14 <DMA_CalcBaseAndBitshift+0x160>)
 8003c96:	4013      	ands	r3, r2
 8003c98:	1d1a      	adds	r2, r3, #4
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	659a      	str	r2, [r3, #88]	; 0x58
 8003c9e:	e00d      	b.n	8003cbc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4b1b      	ldr	r3, [pc, #108]	; (8003d14 <DMA_CalcBaseAndBitshift+0x160>)
 8003ca8:	4013      	ands	r3, r2
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	6593      	str	r3, [r2, #88]	; 0x58
 8003cae:	e005      	b.n	8003cbc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3714      	adds	r7, #20
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr
 8003ccc:	40020010 	.word	0x40020010
 8003cd0:	40020028 	.word	0x40020028
 8003cd4:	40020040 	.word	0x40020040
 8003cd8:	40020058 	.word	0x40020058
 8003cdc:	40020070 	.word	0x40020070
 8003ce0:	40020088 	.word	0x40020088
 8003ce4:	400200a0 	.word	0x400200a0
 8003ce8:	400200b8 	.word	0x400200b8
 8003cec:	40020410 	.word	0x40020410
 8003cf0:	40020428 	.word	0x40020428
 8003cf4:	40020440 	.word	0x40020440
 8003cf8:	40020458 	.word	0x40020458
 8003cfc:	40020470 	.word	0x40020470
 8003d00:	40020488 	.word	0x40020488
 8003d04:	400204a0 	.word	0x400204a0
 8003d08:	400204b8 	.word	0x400204b8
 8003d0c:	aaaaaaab 	.word	0xaaaaaaab
 8003d10:	080498f0 	.word	0x080498f0
 8003d14:	fffffc00 	.word	0xfffffc00

08003d18 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d20:	2300      	movs	r3, #0
 8003d22:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d120      	bne.n	8003d6e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d30:	2b03      	cmp	r3, #3
 8003d32:	d858      	bhi.n	8003de6 <DMA_CheckFifoParam+0xce>
 8003d34:	a201      	add	r2, pc, #4	; (adr r2, 8003d3c <DMA_CheckFifoParam+0x24>)
 8003d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d3a:	bf00      	nop
 8003d3c:	08003d4d 	.word	0x08003d4d
 8003d40:	08003d5f 	.word	0x08003d5f
 8003d44:	08003d4d 	.word	0x08003d4d
 8003d48:	08003de7 	.word	0x08003de7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d048      	beq.n	8003dea <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d5c:	e045      	b.n	8003dea <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d66:	d142      	bne.n	8003dee <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d6c:	e03f      	b.n	8003dee <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d76:	d123      	bne.n	8003dc0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7c:	2b03      	cmp	r3, #3
 8003d7e:	d838      	bhi.n	8003df2 <DMA_CheckFifoParam+0xda>
 8003d80:	a201      	add	r2, pc, #4	; (adr r2, 8003d88 <DMA_CheckFifoParam+0x70>)
 8003d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d86:	bf00      	nop
 8003d88:	08003d99 	.word	0x08003d99
 8003d8c:	08003d9f 	.word	0x08003d9f
 8003d90:	08003d99 	.word	0x08003d99
 8003d94:	08003db1 	.word	0x08003db1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	73fb      	strb	r3, [r7, #15]
        break;
 8003d9c:	e030      	b.n	8003e00 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d025      	beq.n	8003df6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003dae:	e022      	b.n	8003df6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003db8:	d11f      	bne.n	8003dfa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003dbe:	e01c      	b.n	8003dfa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d902      	bls.n	8003dce <DMA_CheckFifoParam+0xb6>
 8003dc8:	2b03      	cmp	r3, #3
 8003dca:	d003      	beq.n	8003dd4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003dcc:	e018      	b.n	8003e00 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	73fb      	strb	r3, [r7, #15]
        break;
 8003dd2:	e015      	b.n	8003e00 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00e      	beq.n	8003dfe <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	73fb      	strb	r3, [r7, #15]
    break;
 8003de4:	e00b      	b.n	8003dfe <DMA_CheckFifoParam+0xe6>
        break;
 8003de6:	bf00      	nop
 8003de8:	e00a      	b.n	8003e00 <DMA_CheckFifoParam+0xe8>
        break;
 8003dea:	bf00      	nop
 8003dec:	e008      	b.n	8003e00 <DMA_CheckFifoParam+0xe8>
        break;
 8003dee:	bf00      	nop
 8003df0:	e006      	b.n	8003e00 <DMA_CheckFifoParam+0xe8>
        break;
 8003df2:	bf00      	nop
 8003df4:	e004      	b.n	8003e00 <DMA_CheckFifoParam+0xe8>
        break;
 8003df6:	bf00      	nop
 8003df8:	e002      	b.n	8003e00 <DMA_CheckFifoParam+0xe8>
        break;
 8003dfa:	bf00      	nop
 8003dfc:	e000      	b.n	8003e00 <DMA_CheckFifoParam+0xe8>
    break;
 8003dfe:	bf00      	nop
    }
  }

  return status;
 8003e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3714      	adds	r7, #20
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop

08003e10 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a38      	ldr	r2, [pc, #224]	; (8003f04 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d022      	beq.n	8003e6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a36      	ldr	r2, [pc, #216]	; (8003f08 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d01d      	beq.n	8003e6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a35      	ldr	r2, [pc, #212]	; (8003f0c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d018      	beq.n	8003e6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a33      	ldr	r2, [pc, #204]	; (8003f10 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d013      	beq.n	8003e6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a32      	ldr	r2, [pc, #200]	; (8003f14 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d00e      	beq.n	8003e6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a30      	ldr	r2, [pc, #192]	; (8003f18 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d009      	beq.n	8003e6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a2f      	ldr	r2, [pc, #188]	; (8003f1c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d004      	beq.n	8003e6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a2d      	ldr	r2, [pc, #180]	; (8003f20 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d101      	bne.n	8003e72 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e000      	b.n	8003e74 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003e72:	2300      	movs	r3, #0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d01a      	beq.n	8003eae <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	3b08      	subs	r3, #8
 8003e80:	4a28      	ldr	r2, [pc, #160]	; (8003f24 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003e82:	fba2 2303 	umull	r2, r3, r2, r3
 8003e86:	091b      	lsrs	r3, r3, #4
 8003e88:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	4b26      	ldr	r3, [pc, #152]	; (8003f28 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003e8e:	4413      	add	r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	461a      	mov	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a24      	ldr	r2, [pc, #144]	; (8003f2c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003e9c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f003 031f 	and.w	r3, r3, #31
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	409a      	lsls	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003eac:	e024      	b.n	8003ef8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	3b10      	subs	r3, #16
 8003eb6:	4a1e      	ldr	r2, [pc, #120]	; (8003f30 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ebc:	091b      	lsrs	r3, r3, #4
 8003ebe:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	4a1c      	ldr	r2, [pc, #112]	; (8003f34 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d806      	bhi.n	8003ed6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	4a1b      	ldr	r2, [pc, #108]	; (8003f38 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d902      	bls.n	8003ed6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	3308      	adds	r3, #8
 8003ed4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	4b18      	ldr	r3, [pc, #96]	; (8003f3c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003eda:	4413      	add	r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	461a      	mov	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a16      	ldr	r2, [pc, #88]	; (8003f40 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003ee8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f003 031f 	and.w	r3, r3, #31
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	409a      	lsls	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003ef8:	bf00      	nop
 8003efa:	3714      	adds	r7, #20
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	58025408 	.word	0x58025408
 8003f08:	5802541c 	.word	0x5802541c
 8003f0c:	58025430 	.word	0x58025430
 8003f10:	58025444 	.word	0x58025444
 8003f14:	58025458 	.word	0x58025458
 8003f18:	5802546c 	.word	0x5802546c
 8003f1c:	58025480 	.word	0x58025480
 8003f20:	58025494 	.word	0x58025494
 8003f24:	cccccccd 	.word	0xcccccccd
 8003f28:	16009600 	.word	0x16009600
 8003f2c:	58025880 	.word	0x58025880
 8003f30:	aaaaaaab 	.word	0xaaaaaaab
 8003f34:	400204b8 	.word	0x400204b8
 8003f38:	4002040f 	.word	0x4002040f
 8003f3c:	10008200 	.word	0x10008200
 8003f40:	40020880 	.word	0x40020880

08003f44 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d04a      	beq.n	8003ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2b08      	cmp	r3, #8
 8003f5e:	d847      	bhi.n	8003ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a25      	ldr	r2, [pc, #148]	; (8003ffc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d022      	beq.n	8003fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a24      	ldr	r2, [pc, #144]	; (8004000 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d01d      	beq.n	8003fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a22      	ldr	r2, [pc, #136]	; (8004004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d018      	beq.n	8003fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a21      	ldr	r2, [pc, #132]	; (8004008 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d013      	beq.n	8003fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a1f      	ldr	r2, [pc, #124]	; (800400c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d00e      	beq.n	8003fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a1e      	ldr	r2, [pc, #120]	; (8004010 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d009      	beq.n	8003fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a1c      	ldr	r2, [pc, #112]	; (8004014 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d004      	beq.n	8003fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a1b      	ldr	r2, [pc, #108]	; (8004018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d101      	bne.n	8003fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e000      	b.n	8003fb6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00a      	beq.n	8003fd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	4b17      	ldr	r3, [pc, #92]	; (800401c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003fbe:	4413      	add	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a15      	ldr	r2, [pc, #84]	; (8004020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003fcc:	671a      	str	r2, [r3, #112]	; 0x70
 8003fce:	e009      	b.n	8003fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	4b14      	ldr	r3, [pc, #80]	; (8004024 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003fd4:	4413      	add	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	461a      	mov	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a11      	ldr	r2, [pc, #68]	; (8004028 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003fe2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	2201      	movs	r2, #1
 8003fea:	409a      	lsls	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003ff0:	bf00      	nop
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	58025408 	.word	0x58025408
 8004000:	5802541c 	.word	0x5802541c
 8004004:	58025430 	.word	0x58025430
 8004008:	58025444 	.word	0x58025444
 800400c:	58025458 	.word	0x58025458
 8004010:	5802546c 	.word	0x5802546c
 8004014:	58025480 	.word	0x58025480
 8004018:	58025494 	.word	0x58025494
 800401c:	1600963f 	.word	0x1600963f
 8004020:	58025940 	.word	0x58025940
 8004024:	1000823f 	.word	0x1000823f
 8004028:	40020940 	.word	0x40020940

0800402c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e0cf      	b.n	80041de <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004044:	2b00      	cmp	r3, #0
 8004046:	d106      	bne.n	8004056 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2223      	movs	r2, #35	; 0x23
 800404c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f7fe fe21 	bl	8002c98 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004056:	4b64      	ldr	r3, [pc, #400]	; (80041e8 <HAL_ETH_Init+0x1bc>)
 8004058:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800405c:	4a62      	ldr	r2, [pc, #392]	; (80041e8 <HAL_ETH_Init+0x1bc>)
 800405e:	f043 0302 	orr.w	r3, r3, #2
 8004062:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004066:	4b60      	ldr	r3, [pc, #384]	; (80041e8 <HAL_ETH_Init+0x1bc>)
 8004068:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	60bb      	str	r3, [r7, #8]
 8004072:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	7a1b      	ldrb	r3, [r3, #8]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d103      	bne.n	8004084 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800407c:	2000      	movs	r0, #0
 800407e:	f7ff f945 	bl	800330c <HAL_SYSCFG_ETHInterfaceSelect>
 8004082:	e003      	b.n	800408c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004084:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004088:	f7ff f940 	bl	800330c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800408c:	4b57      	ldr	r3, [pc, #348]	; (80041ec <HAL_ETH_Init+0x1c0>)
 800408e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	6812      	ldr	r2, [r2, #0]
 800409e:	f043 0301 	orr.w	r3, r3, #1
 80040a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80040a6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040a8:	f7ff f8f4 	bl	8003294 <HAL_GetTick>
 80040ac:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80040ae:	e011      	b.n	80040d4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80040b0:	f7ff f8f0 	bl	8003294 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80040be:	d909      	bls.n	80040d4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2204      	movs	r2, #4
 80040c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	22e0      	movs	r2, #224	; 0xe0
 80040cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e084      	b.n	80041de <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1e4      	bne.n	80040b0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f886 	bl	80041f8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80040ec:	f001 fee4 	bl	8005eb8 <HAL_RCC_GetHCLKFreq>
 80040f0:	4603      	mov	r3, r0
 80040f2:	4a3f      	ldr	r2, [pc, #252]	; (80041f0 <HAL_ETH_Init+0x1c4>)
 80040f4:	fba2 2303 	umull	r2, r3, r2, r3
 80040f8:	0c9a      	lsrs	r2, r3, #18
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	3a01      	subs	r2, #1
 8004100:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 fa71 	bl	80045ec <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004112:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004116:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	6812      	ldr	r2, [r2, #0]
 800411e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004122:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004126:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	f003 0303 	and.w	r3, r3, #3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d009      	beq.n	800414a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	22e0      	movs	r2, #224	; 0xe0
 8004142:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e049      	b.n	80041de <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004152:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004156:	4b27      	ldr	r3, [pc, #156]	; (80041f4 <HAL_ETH_Init+0x1c8>)
 8004158:	4013      	ands	r3, r2
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	6952      	ldr	r2, [r2, #20]
 800415e:	0051      	lsls	r1, r2, #1
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	6812      	ldr	r2, [r2, #0]
 8004164:	430b      	orrs	r3, r1
 8004166:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800416a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 fad9 	bl	8004726 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 fb1f 	bl	80047b8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	3305      	adds	r3, #5
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	021a      	lsls	r2, r3, #8
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	3304      	adds	r3, #4
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	4619      	mov	r1, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	430a      	orrs	r2, r1
 8004194:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	3303      	adds	r3, #3
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	061a      	lsls	r2, r3, #24
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	3302      	adds	r3, #2
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	041b      	lsls	r3, r3, #16
 80041ac:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	3301      	adds	r3, #1
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80041b8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80041c6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80041c8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2210      	movs	r2, #16
 80041d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	58024400 	.word	0x58024400
 80041ec:	58000400 	.word	0x58000400
 80041f0:	431bde83 	.word	0x431bde83
 80041f4:	ffff8001 	.word	0xffff8001

080041f8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004208:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004210:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004212:	f001 fe51 	bl	8005eb8 <HAL_RCC_GetHCLKFreq>
 8004216:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	4a1e      	ldr	r2, [pc, #120]	; (8004294 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d908      	bls.n	8004232 <HAL_ETH_SetMDIOClockRange+0x3a>
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	4a1d      	ldr	r2, [pc, #116]	; (8004298 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d804      	bhi.n	8004232 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800422e:	60fb      	str	r3, [r7, #12]
 8004230:	e027      	b.n	8004282 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	4a18      	ldr	r2, [pc, #96]	; (8004298 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d908      	bls.n	800424c <HAL_ETH_SetMDIOClockRange+0x54>
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	4a17      	ldr	r2, [pc, #92]	; (800429c <HAL_ETH_SetMDIOClockRange+0xa4>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d204      	bcs.n	800424c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004248:	60fb      	str	r3, [r7, #12]
 800424a:	e01a      	b.n	8004282 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	4a13      	ldr	r2, [pc, #76]	; (800429c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d303      	bcc.n	800425c <HAL_ETH_SetMDIOClockRange+0x64>
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	4a12      	ldr	r2, [pc, #72]	; (80042a0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d911      	bls.n	8004280 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	4a10      	ldr	r2, [pc, #64]	; (80042a0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d908      	bls.n	8004276 <HAL_ETH_SetMDIOClockRange+0x7e>
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	4a0f      	ldr	r2, [pc, #60]	; (80042a4 <HAL_ETH_SetMDIOClockRange+0xac>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d804      	bhi.n	8004276 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004272:	60fb      	str	r3, [r7, #12]
 8004274:	e005      	b.n	8004282 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800427c:	60fb      	str	r3, [r7, #12]
 800427e:	e000      	b.n	8004282 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004280:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800428c:	bf00      	nop
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	01312cff 	.word	0x01312cff
 8004298:	02160ebf 	.word	0x02160ebf
 800429c:	03938700 	.word	0x03938700
 80042a0:	05f5e0ff 	.word	0x05f5e0ff
 80042a4:	08f0d17f 	.word	0x08f0d17f

080042a8 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80042ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	791b      	ldrb	r3, [r3, #4]
 80042c0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80042c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	7b1b      	ldrb	r3, [r3, #12]
 80042c8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80042ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	7b5b      	ldrb	r3, [r3, #13]
 80042d0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80042d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	7b9b      	ldrb	r3, [r3, #14]
 80042d8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80042da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	7bdb      	ldrb	r3, [r3, #15]
 80042e0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80042e2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	7c12      	ldrb	r2, [r2, #16]
 80042e8:	2a00      	cmp	r2, #0
 80042ea:	d102      	bne.n	80042f2 <ETH_SetMACConfig+0x4a>
 80042ec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80042f0:	e000      	b.n	80042f4 <ETH_SetMACConfig+0x4c>
 80042f2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80042f4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80042f6:	683a      	ldr	r2, [r7, #0]
 80042f8:	7c52      	ldrb	r2, [r2, #17]
 80042fa:	2a00      	cmp	r2, #0
 80042fc:	d102      	bne.n	8004304 <ETH_SetMACConfig+0x5c>
 80042fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004302:	e000      	b.n	8004306 <ETH_SetMACConfig+0x5e>
 8004304:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004306:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	7c9b      	ldrb	r3, [r3, #18]
 800430c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800430e:	431a      	orrs	r2, r3
               macconf->Speed |
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004314:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800431a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	7f1b      	ldrb	r3, [r3, #28]
 8004320:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8004322:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	7f5b      	ldrb	r3, [r3, #29]
 8004328:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800432a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	7f92      	ldrb	r2, [r2, #30]
 8004330:	2a00      	cmp	r2, #0
 8004332:	d102      	bne.n	800433a <ETH_SetMACConfig+0x92>
 8004334:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004338:	e000      	b.n	800433c <ETH_SetMACConfig+0x94>
 800433a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800433c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	7fdb      	ldrb	r3, [r3, #31]
 8004342:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004344:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004346:	683a      	ldr	r2, [r7, #0]
 8004348:	f892 2020 	ldrb.w	r2, [r2, #32]
 800434c:	2a00      	cmp	r2, #0
 800434e:	d102      	bne.n	8004356 <ETH_SetMACConfig+0xae>
 8004350:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004354:	e000      	b.n	8004358 <ETH_SetMACConfig+0xb0>
 8004356:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004358:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800435e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004366:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8004368:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800436e:	4313      	orrs	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	4b56      	ldr	r3, [pc, #344]	; (80044d4 <ETH_SetMACConfig+0x22c>)
 800437a:	4013      	ands	r3, r2
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	6812      	ldr	r2, [r2, #0]
 8004380:	68f9      	ldr	r1, [r7, #12]
 8004382:	430b      	orrs	r3, r1
 8004384:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800438a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004392:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004394:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800439c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800439e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80043a6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80043a8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80043b0:	2a00      	cmp	r2, #0
 80043b2:	d102      	bne.n	80043ba <ETH_SetMACConfig+0x112>
 80043b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80043b8:	e000      	b.n	80043bc <ETH_SetMACConfig+0x114>
 80043ba:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80043bc:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	4b42      	ldr	r3, [pc, #264]	; (80044d8 <ETH_SetMACConfig+0x230>)
 80043ce:	4013      	ands	r3, r2
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	6812      	ldr	r2, [r2, #0]
 80043d4:	68f9      	ldr	r1, [r7, #12]
 80043d6:	430b      	orrs	r3, r1
 80043d8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043e0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80043e6:	4313      	orrs	r3, r2
 80043e8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68da      	ldr	r2, [r3, #12]
 80043f0:	4b3a      	ldr	r3, [pc, #232]	; (80044dc <ETH_SetMACConfig+0x234>)
 80043f2:	4013      	ands	r3, r2
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	6812      	ldr	r2, [r2, #0]
 80043f8:	68f9      	ldr	r1, [r7, #12]
 80043fa:	430b      	orrs	r3, r1
 80043fc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004404:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800440a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800440c:	683a      	ldr	r2, [r7, #0]
 800440e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004412:	2a00      	cmp	r2, #0
 8004414:	d101      	bne.n	800441a <ETH_SetMACConfig+0x172>
 8004416:	2280      	movs	r2, #128	; 0x80
 8004418:	e000      	b.n	800441c <ETH_SetMACConfig+0x174>
 800441a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800441c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004422:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004424:	4313      	orrs	r3, r2
 8004426:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800442e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8004432:	4013      	ands	r3, r2
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	6812      	ldr	r2, [r2, #0]
 8004438:	68f9      	ldr	r1, [r7, #12]
 800443a:	430b      	orrs	r3, r1
 800443c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004444:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800444c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800444e:	4313      	orrs	r3, r2
 8004450:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445a:	f023 0103 	bic.w	r1, r3, #3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	430a      	orrs	r2, r1
 8004466:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004472:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	430a      	orrs	r2, r1
 8004480:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004488:	683a      	ldr	r2, [r7, #0]
 800448a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800448e:	2a00      	cmp	r2, #0
 8004490:	d101      	bne.n	8004496 <ETH_SetMACConfig+0x1ee>
 8004492:	2240      	movs	r2, #64	; 0x40
 8004494:	e000      	b.n	8004498 <ETH_SetMACConfig+0x1f0>
 8004496:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004498:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80044a0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80044a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80044aa:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80044ac:	4313      	orrs	r3, r2
 80044ae:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80044b8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80044c8:	bf00      	nop
 80044ca:	3714      	adds	r7, #20
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr
 80044d4:	00048083 	.word	0x00048083
 80044d8:	c0f88000 	.word	0xc0f88000
 80044dc:	fffffef0 	.word	0xfffffef0

080044e0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	4b38      	ldr	r3, [pc, #224]	; (80045d8 <ETH_SetDMAConfig+0xf8>)
 80044f6:	4013      	ands	r3, r2
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	6811      	ldr	r1, [r2, #0]
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	6812      	ldr	r2, [r2, #0]
 8004500:	430b      	orrs	r3, r1
 8004502:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004506:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	791b      	ldrb	r3, [r3, #4]
 800450c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004512:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	7b1b      	ldrb	r3, [r3, #12]
 8004518:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800451a:	4313      	orrs	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	4b2c      	ldr	r3, [pc, #176]	; (80045dc <ETH_SetDMAConfig+0xfc>)
 800452a:	4013      	ands	r3, r2
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	6812      	ldr	r2, [r2, #0]
 8004530:	68f9      	ldr	r1, [r7, #12]
 8004532:	430b      	orrs	r3, r1
 8004534:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004538:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	7b5b      	ldrb	r3, [r3, #13]
 800453e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004544:	4313      	orrs	r3, r2
 8004546:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004550:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8004554:	4b22      	ldr	r3, [pc, #136]	; (80045e0 <ETH_SetDMAConfig+0x100>)
 8004556:	4013      	ands	r3, r2
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	6812      	ldr	r2, [r2, #0]
 800455c:	68f9      	ldr	r1, [r7, #12]
 800455e:	430b      	orrs	r3, r1
 8004560:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004564:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	7d1b      	ldrb	r3, [r3, #20]
 8004570:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8004572:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	7f5b      	ldrb	r3, [r3, #29]
 8004578:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800457a:	4313      	orrs	r3, r2
 800457c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004586:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800458a:	4b16      	ldr	r3, [pc, #88]	; (80045e4 <ETH_SetDMAConfig+0x104>)
 800458c:	4013      	ands	r3, r2
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	6812      	ldr	r2, [r2, #0]
 8004592:	68f9      	ldr	r1, [r7, #12]
 8004594:	430b      	orrs	r3, r1
 8004596:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800459a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	7f1b      	ldrb	r3, [r3, #28]
 80045a2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80045a8:	4313      	orrs	r3, r2
 80045aa:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045b4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80045b8:	4b0b      	ldr	r3, [pc, #44]	; (80045e8 <ETH_SetDMAConfig+0x108>)
 80045ba:	4013      	ands	r3, r2
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	6812      	ldr	r2, [r2, #0]
 80045c0:	68f9      	ldr	r1, [r7, #12]
 80045c2:	430b      	orrs	r3, r1
 80045c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045c8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80045cc:	bf00      	nop
 80045ce:	3714      	adds	r7, #20
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	ffff87fd 	.word	0xffff87fd
 80045dc:	ffff2ffe 	.word	0xffff2ffe
 80045e0:	fffec000 	.word	0xfffec000
 80045e4:	ffc0efef 	.word	0xffc0efef
 80045e8:	7fc0ffff 	.word	0x7fc0ffff

080045ec <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b0a4      	sub	sp, #144	; 0x90
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80045f4:	2301      	movs	r3, #1
 80045f6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80045fa:	2300      	movs	r3, #0
 80045fc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80045fe:	2300      	movs	r3, #0
 8004600:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004604:	2300      	movs	r3, #0
 8004606:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800460a:	2301      	movs	r3, #1
 800460c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004610:	2301      	movs	r3, #1
 8004612:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004616:	2301      	movs	r3, #1
 8004618:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800461c:	2300      	movs	r3, #0
 800461e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004622:	2301      	movs	r3, #1
 8004624:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004628:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800462c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800462e:	2300      	movs	r3, #0
 8004630:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8004634:	2300      	movs	r3, #0
 8004636:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004638:	2300      	movs	r3, #0
 800463a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800463e:	2300      	movs	r3, #0
 8004640:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004644:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004648:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800464a:	2300      	movs	r3, #0
 800464c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004650:	2300      	movs	r3, #0
 8004652:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004654:	2301      	movs	r3, #1
 8004656:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800465a:	2300      	movs	r3, #0
 800465c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004660:	2300      	movs	r3, #0
 8004662:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004666:	2300      	movs	r3, #0
 8004668:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800466a:	2300      	movs	r3, #0
 800466c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800466e:	2300      	movs	r3, #0
 8004670:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004672:	2300      	movs	r3, #0
 8004674:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004678:	2300      	movs	r3, #0
 800467a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800467e:	2301      	movs	r3, #1
 8004680:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004684:	2320      	movs	r3, #32
 8004686:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800468a:	2301      	movs	r3, #1
 800468c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004690:	2300      	movs	r3, #0
 8004692:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004696:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800469a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800469c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80046a0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80046a2:	2300      	movs	r3, #0
 80046a4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80046a8:	2302      	movs	r3, #2
 80046aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80046ae:	2300      	movs	r3, #0
 80046b0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80046b4:	2300      	movs	r3, #0
 80046b6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80046ba:	2300      	movs	r3, #0
 80046bc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80046c0:	2301      	movs	r3, #1
 80046c2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80046c6:	2300      	movs	r3, #0
 80046c8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80046ca:	2301      	movs	r3, #1
 80046cc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80046d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80046d4:	4619      	mov	r1, r3
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7ff fde6 	bl	80042a8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80046dc:	2301      	movs	r3, #1
 80046de:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80046e0:	2301      	movs	r3, #1
 80046e2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80046e4:	2300      	movs	r3, #0
 80046e6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80046e8:	2300      	movs	r3, #0
 80046ea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80046ee:	2300      	movs	r3, #0
 80046f0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80046f2:	2300      	movs	r3, #0
 80046f4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80046f6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80046fa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80046fc:	2300      	movs	r3, #0
 80046fe:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004700:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004704:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004706:	2300      	movs	r3, #0
 8004708:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800470c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004710:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004712:	f107 0308 	add.w	r3, r7, #8
 8004716:	4619      	mov	r1, r3
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f7ff fee1 	bl	80044e0 <ETH_SetDMAConfig>
}
 800471e:	bf00      	nop
 8004720:	3790      	adds	r7, #144	; 0x90
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004726:	b480      	push	{r7}
 8004728:	b085      	sub	sp, #20
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800472e:	2300      	movs	r3, #0
 8004730:	60fb      	str	r3, [r7, #12]
 8004732:	e01d      	b.n	8004770 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	68d9      	ldr	r1, [r3, #12]
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	4613      	mov	r3, r2
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	4413      	add	r3, r2
 8004740:	00db      	lsls	r3, r3, #3
 8004742:	440b      	add	r3, r1
 8004744:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	2200      	movs	r2, #0
 800474a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	2200      	movs	r2, #0
 8004750:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	2200      	movs	r2, #0
 8004756:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	2200      	movs	r2, #0
 800475c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800475e:	68b9      	ldr	r1, [r7, #8]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	3206      	adds	r2, #6
 8004766:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	3301      	adds	r3, #1
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2b03      	cmp	r3, #3
 8004774:	d9de      	bls.n	8004734 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004784:	461a      	mov	r2, r3
 8004786:	2303      	movs	r3, #3
 8004788:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68da      	ldr	r2, [r3, #12]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004798:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	68da      	ldr	r2, [r3, #12]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047a8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80047ac:	bf00      	nop
 80047ae:	3714      	adds	r7, #20
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80047c0:	2300      	movs	r3, #0
 80047c2:	60fb      	str	r3, [r7, #12]
 80047c4:	e023      	b.n	800480e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6919      	ldr	r1, [r3, #16]
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	4613      	mov	r3, r2
 80047ce:	005b      	lsls	r3, r3, #1
 80047d0:	4413      	add	r3, r2
 80047d2:	00db      	lsls	r3, r3, #3
 80047d4:	440b      	add	r3, r1
 80047d6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	2200      	movs	r2, #0
 80047dc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	2200      	movs	r2, #0
 80047e2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	2200      	movs	r2, #0
 80047e8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	2200      	movs	r2, #0
 80047ee:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	2200      	movs	r2, #0
 80047f4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	2200      	movs	r2, #0
 80047fa:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80047fc:	68b9      	ldr	r1, [r7, #8]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	3212      	adds	r2, #18
 8004804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	3301      	adds	r3, #1
 800480c:	60fb      	str	r3, [r7, #12]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2b03      	cmp	r3, #3
 8004812:	d9d8      	bls.n	80047c6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800483a:	461a      	mov	r2, r3
 800483c:	2303      	movs	r3, #3
 800483e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	691a      	ldr	r2, [r3, #16]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800484e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004862:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8004866:	bf00      	nop
 8004868:	3714      	adds	r7, #20
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
	...

08004874 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004874:	b480      	push	{r7}
 8004876:	b089      	sub	sp, #36	; 0x24
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800487e:	2300      	movs	r3, #0
 8004880:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004882:	4b89      	ldr	r3, [pc, #548]	; (8004aa8 <HAL_GPIO_Init+0x234>)
 8004884:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004886:	e194      	b.n	8004bb2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	2101      	movs	r1, #1
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	fa01 f303 	lsl.w	r3, r1, r3
 8004894:	4013      	ands	r3, r2
 8004896:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	2b00      	cmp	r3, #0
 800489c:	f000 8186 	beq.w	8004bac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f003 0303 	and.w	r3, r3, #3
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d005      	beq.n	80048b8 <HAL_GPIO_Init+0x44>
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f003 0303 	and.w	r3, r3, #3
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d130      	bne.n	800491a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	005b      	lsls	r3, r3, #1
 80048c2:	2203      	movs	r2, #3
 80048c4:	fa02 f303 	lsl.w	r3, r2, r3
 80048c8:	43db      	mvns	r3, r3
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	4013      	ands	r3, r2
 80048ce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	68da      	ldr	r2, [r3, #12]
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	005b      	lsls	r3, r3, #1
 80048d8:	fa02 f303 	lsl.w	r3, r2, r3
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	4313      	orrs	r3, r2
 80048e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80048ee:	2201      	movs	r2, #1
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	fa02 f303 	lsl.w	r3, r2, r3
 80048f6:	43db      	mvns	r3, r3
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	4013      	ands	r3, r2
 80048fc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	091b      	lsrs	r3, r3, #4
 8004904:	f003 0201 	and.w	r2, r3, #1
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	fa02 f303 	lsl.w	r3, r2, r3
 800490e:	69ba      	ldr	r2, [r7, #24]
 8004910:	4313      	orrs	r3, r2
 8004912:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f003 0303 	and.w	r3, r3, #3
 8004922:	2b03      	cmp	r3, #3
 8004924:	d017      	beq.n	8004956 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	2203      	movs	r2, #3
 8004932:	fa02 f303 	lsl.w	r3, r2, r3
 8004936:	43db      	mvns	r3, r3
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	4013      	ands	r3, r2
 800493c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	689a      	ldr	r2, [r3, #8]
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	fa02 f303 	lsl.w	r3, r2, r3
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	4313      	orrs	r3, r2
 800494e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	69ba      	ldr	r2, [r7, #24]
 8004954:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f003 0303 	and.w	r3, r3, #3
 800495e:	2b02      	cmp	r3, #2
 8004960:	d123      	bne.n	80049aa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	08da      	lsrs	r2, r3, #3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	3208      	adds	r2, #8
 800496a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800496e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	f003 0307 	and.w	r3, r3, #7
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	220f      	movs	r2, #15
 800497a:	fa02 f303 	lsl.w	r3, r2, r3
 800497e:	43db      	mvns	r3, r3
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	4013      	ands	r3, r2
 8004984:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	691a      	ldr	r2, [r3, #16]
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	f003 0307 	and.w	r3, r3, #7
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	fa02 f303 	lsl.w	r3, r2, r3
 8004996:	69ba      	ldr	r2, [r7, #24]
 8004998:	4313      	orrs	r3, r2
 800499a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	08da      	lsrs	r2, r3, #3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	3208      	adds	r2, #8
 80049a4:	69b9      	ldr	r1, [r7, #24]
 80049a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	005b      	lsls	r3, r3, #1
 80049b4:	2203      	movs	r2, #3
 80049b6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ba:	43db      	mvns	r3, r3
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	4013      	ands	r3, r2
 80049c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f003 0203 	and.w	r2, r3, #3
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	005b      	lsls	r3, r3, #1
 80049ce:	fa02 f303 	lsl.w	r3, r2, r3
 80049d2:	69ba      	ldr	r2, [r7, #24]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	69ba      	ldr	r2, [r7, #24]
 80049dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f000 80e0 	beq.w	8004bac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049ec:	4b2f      	ldr	r3, [pc, #188]	; (8004aac <HAL_GPIO_Init+0x238>)
 80049ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80049f2:	4a2e      	ldr	r2, [pc, #184]	; (8004aac <HAL_GPIO_Init+0x238>)
 80049f4:	f043 0302 	orr.w	r3, r3, #2
 80049f8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80049fc:	4b2b      	ldr	r3, [pc, #172]	; (8004aac <HAL_GPIO_Init+0x238>)
 80049fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	60fb      	str	r3, [r7, #12]
 8004a08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a0a:	4a29      	ldr	r2, [pc, #164]	; (8004ab0 <HAL_GPIO_Init+0x23c>)
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	089b      	lsrs	r3, r3, #2
 8004a10:	3302      	adds	r3, #2
 8004a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	f003 0303 	and.w	r3, r3, #3
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	220f      	movs	r2, #15
 8004a22:	fa02 f303 	lsl.w	r3, r2, r3
 8004a26:	43db      	mvns	r3, r3
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a20      	ldr	r2, [pc, #128]	; (8004ab4 <HAL_GPIO_Init+0x240>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d052      	beq.n	8004adc <HAL_GPIO_Init+0x268>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a1f      	ldr	r2, [pc, #124]	; (8004ab8 <HAL_GPIO_Init+0x244>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d031      	beq.n	8004aa2 <HAL_GPIO_Init+0x22e>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a1e      	ldr	r2, [pc, #120]	; (8004abc <HAL_GPIO_Init+0x248>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d02b      	beq.n	8004a9e <HAL_GPIO_Init+0x22a>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a1d      	ldr	r2, [pc, #116]	; (8004ac0 <HAL_GPIO_Init+0x24c>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d025      	beq.n	8004a9a <HAL_GPIO_Init+0x226>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a1c      	ldr	r2, [pc, #112]	; (8004ac4 <HAL_GPIO_Init+0x250>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d01f      	beq.n	8004a96 <HAL_GPIO_Init+0x222>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a1b      	ldr	r2, [pc, #108]	; (8004ac8 <HAL_GPIO_Init+0x254>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d019      	beq.n	8004a92 <HAL_GPIO_Init+0x21e>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a1a      	ldr	r2, [pc, #104]	; (8004acc <HAL_GPIO_Init+0x258>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d013      	beq.n	8004a8e <HAL_GPIO_Init+0x21a>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a19      	ldr	r2, [pc, #100]	; (8004ad0 <HAL_GPIO_Init+0x25c>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d00d      	beq.n	8004a8a <HAL_GPIO_Init+0x216>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a18      	ldr	r2, [pc, #96]	; (8004ad4 <HAL_GPIO_Init+0x260>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d007      	beq.n	8004a86 <HAL_GPIO_Init+0x212>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a17      	ldr	r2, [pc, #92]	; (8004ad8 <HAL_GPIO_Init+0x264>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d101      	bne.n	8004a82 <HAL_GPIO_Init+0x20e>
 8004a7e:	2309      	movs	r3, #9
 8004a80:	e02d      	b.n	8004ade <HAL_GPIO_Init+0x26a>
 8004a82:	230a      	movs	r3, #10
 8004a84:	e02b      	b.n	8004ade <HAL_GPIO_Init+0x26a>
 8004a86:	2308      	movs	r3, #8
 8004a88:	e029      	b.n	8004ade <HAL_GPIO_Init+0x26a>
 8004a8a:	2307      	movs	r3, #7
 8004a8c:	e027      	b.n	8004ade <HAL_GPIO_Init+0x26a>
 8004a8e:	2306      	movs	r3, #6
 8004a90:	e025      	b.n	8004ade <HAL_GPIO_Init+0x26a>
 8004a92:	2305      	movs	r3, #5
 8004a94:	e023      	b.n	8004ade <HAL_GPIO_Init+0x26a>
 8004a96:	2304      	movs	r3, #4
 8004a98:	e021      	b.n	8004ade <HAL_GPIO_Init+0x26a>
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e01f      	b.n	8004ade <HAL_GPIO_Init+0x26a>
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	e01d      	b.n	8004ade <HAL_GPIO_Init+0x26a>
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e01b      	b.n	8004ade <HAL_GPIO_Init+0x26a>
 8004aa6:	bf00      	nop
 8004aa8:	58000080 	.word	0x58000080
 8004aac:	58024400 	.word	0x58024400
 8004ab0:	58000400 	.word	0x58000400
 8004ab4:	58020000 	.word	0x58020000
 8004ab8:	58020400 	.word	0x58020400
 8004abc:	58020800 	.word	0x58020800
 8004ac0:	58020c00 	.word	0x58020c00
 8004ac4:	58021000 	.word	0x58021000
 8004ac8:	58021400 	.word	0x58021400
 8004acc:	58021800 	.word	0x58021800
 8004ad0:	58021c00 	.word	0x58021c00
 8004ad4:	58022000 	.word	0x58022000
 8004ad8:	58022400 	.word	0x58022400
 8004adc:	2300      	movs	r3, #0
 8004ade:	69fa      	ldr	r2, [r7, #28]
 8004ae0:	f002 0203 	and.w	r2, r2, #3
 8004ae4:	0092      	lsls	r2, r2, #2
 8004ae6:	4093      	lsls	r3, r2
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004aee:	4938      	ldr	r1, [pc, #224]	; (8004bd0 <HAL_GPIO_Init+0x35c>)
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	089b      	lsrs	r3, r3, #2
 8004af4:	3302      	adds	r3, #2
 8004af6:	69ba      	ldr	r2, [r7, #24]
 8004af8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	43db      	mvns	r3, r3
 8004b08:	69ba      	ldr	r2, [r7, #24]
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004b1a:	69ba      	ldr	r2, [r7, #24]
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004b22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	43db      	mvns	r3, r3
 8004b36:	69ba      	ldr	r2, [r7, #24]
 8004b38:	4013      	ands	r3, r2
 8004b3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d003      	beq.n	8004b50 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004b48:	69ba      	ldr	r2, [r7, #24]
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004b50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	43db      	mvns	r3, r3
 8004b62:	69ba      	ldr	r2, [r7, #24]
 8004b64:	4013      	ands	r3, r2
 8004b66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d003      	beq.n	8004b7c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004b74:	69ba      	ldr	r2, [r7, #24]
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	69ba      	ldr	r2, [r7, #24]
 8004b80:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	43db      	mvns	r3, r3
 8004b8c:	69ba      	ldr	r2, [r7, #24]
 8004b8e:	4013      	ands	r3, r2
 8004b90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d003      	beq.n	8004ba6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004b9e:	69ba      	ldr	r2, [r7, #24]
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	69ba      	ldr	r2, [r7, #24]
 8004baa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	3301      	adds	r3, #1
 8004bb0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f47f ae63 	bne.w	8004888 <HAL_GPIO_Init+0x14>
  }
}
 8004bc2:	bf00      	nop
 8004bc4:	bf00      	nop
 8004bc6:	3724      	adds	r7, #36	; 0x24
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	58000400 	.word	0x58000400

08004bd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	460b      	mov	r3, r1
 8004bde:	807b      	strh	r3, [r7, #2]
 8004be0:	4613      	mov	r3, r2
 8004be2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004be4:	787b      	ldrb	r3, [r7, #1]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d003      	beq.n	8004bf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bea:	887a      	ldrh	r2, [r7, #2]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004bf0:	e003      	b.n	8004bfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004bf2:	887b      	ldrh	r3, [r7, #2]
 8004bf4:	041a      	lsls	r2, r3, #16
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	619a      	str	r2, [r3, #24]
}
 8004bfa:	bf00      	nop
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr

08004c06 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004c06:	b480      	push	{r7}
 8004c08:	b085      	sub	sp, #20
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
 8004c0e:	460b      	mov	r3, r1
 8004c10:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004c18:	887a      	ldrh	r2, [r7, #2]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	041a      	lsls	r2, r3, #16
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	43d9      	mvns	r1, r3
 8004c24:	887b      	ldrh	r3, [r7, #2]
 8004c26:	400b      	ands	r3, r1
 8004c28:	431a      	orrs	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	619a      	str	r2, [r3, #24]
}
 8004c2e:	bf00      	nop
 8004c30:	3714      	adds	r7, #20
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
	...

08004c3c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004c44:	4a08      	ldr	r2, [pc, #32]	; (8004c68 <HAL_HSEM_FastTake+0x2c>)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	3320      	adds	r3, #32
 8004c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c4e:	4a07      	ldr	r2, [pc, #28]	; (8004c6c <HAL_HSEM_FastTake+0x30>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d101      	bne.n	8004c58 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004c54:	2300      	movs	r3, #0
 8004c56:	e000      	b.n	8004c5a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	58026400 	.word	0x58026400
 8004c6c:	80000300 	.word	0x80000300

08004c70 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8004c7a:	4906      	ldr	r1, [pc, #24]	; (8004c94 <HAL_HSEM_Release+0x24>)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr
 8004c94:	58026400 	.word	0x58026400

08004c98 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c9a:	b08f      	sub	sp, #60	; 0x3c
 8004c9c:	af0a      	add	r7, sp, #40	; 0x28
 8004c9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e116      	b.n	8004ed8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d106      	bne.n	8004cca <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f7fe f94d 	bl	8002f64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2203      	movs	r2, #3
 8004cce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d102      	bne.n	8004ce4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f003 fd87 	bl	80087fc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	603b      	str	r3, [r7, #0]
 8004cf4:	687e      	ldr	r6, [r7, #4]
 8004cf6:	466d      	mov	r5, sp
 8004cf8:	f106 0410 	add.w	r4, r6, #16
 8004cfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d04:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004d08:	e885 0003 	stmia.w	r5, {r0, r1}
 8004d0c:	1d33      	adds	r3, r6, #4
 8004d0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d10:	6838      	ldr	r0, [r7, #0]
 8004d12:	f003 fd05 	bl	8008720 <USB_CoreInit>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d005      	beq.n	8004d28 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2202      	movs	r2, #2
 8004d20:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e0d7      	b.n	8004ed8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2100      	movs	r1, #0
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f003 fd75 	bl	800881e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d34:	2300      	movs	r3, #0
 8004d36:	73fb      	strb	r3, [r7, #15]
 8004d38:	e04a      	b.n	8004dd0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004d3a:	7bfa      	ldrb	r2, [r7, #15]
 8004d3c:	6879      	ldr	r1, [r7, #4]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	00db      	lsls	r3, r3, #3
 8004d42:	4413      	add	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	440b      	add	r3, r1
 8004d48:	333d      	adds	r3, #61	; 0x3d
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004d4e:	7bfa      	ldrb	r2, [r7, #15]
 8004d50:	6879      	ldr	r1, [r7, #4]
 8004d52:	4613      	mov	r3, r2
 8004d54:	00db      	lsls	r3, r3, #3
 8004d56:	4413      	add	r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	440b      	add	r3, r1
 8004d5c:	333c      	adds	r3, #60	; 0x3c
 8004d5e:	7bfa      	ldrb	r2, [r7, #15]
 8004d60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004d62:	7bfa      	ldrb	r2, [r7, #15]
 8004d64:	7bfb      	ldrb	r3, [r7, #15]
 8004d66:	b298      	uxth	r0, r3
 8004d68:	6879      	ldr	r1, [r7, #4]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	00db      	lsls	r3, r3, #3
 8004d6e:	4413      	add	r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	440b      	add	r3, r1
 8004d74:	3344      	adds	r3, #68	; 0x44
 8004d76:	4602      	mov	r2, r0
 8004d78:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004d7a:	7bfa      	ldrb	r2, [r7, #15]
 8004d7c:	6879      	ldr	r1, [r7, #4]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	00db      	lsls	r3, r3, #3
 8004d82:	4413      	add	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	440b      	add	r3, r1
 8004d88:	3340      	adds	r3, #64	; 0x40
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004d8e:	7bfa      	ldrb	r2, [r7, #15]
 8004d90:	6879      	ldr	r1, [r7, #4]
 8004d92:	4613      	mov	r3, r2
 8004d94:	00db      	lsls	r3, r3, #3
 8004d96:	4413      	add	r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	440b      	add	r3, r1
 8004d9c:	3348      	adds	r3, #72	; 0x48
 8004d9e:	2200      	movs	r2, #0
 8004da0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004da2:	7bfa      	ldrb	r2, [r7, #15]
 8004da4:	6879      	ldr	r1, [r7, #4]
 8004da6:	4613      	mov	r3, r2
 8004da8:	00db      	lsls	r3, r3, #3
 8004daa:	4413      	add	r3, r2
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	440b      	add	r3, r1
 8004db0:	334c      	adds	r3, #76	; 0x4c
 8004db2:	2200      	movs	r2, #0
 8004db4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004db6:	7bfa      	ldrb	r2, [r7, #15]
 8004db8:	6879      	ldr	r1, [r7, #4]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	00db      	lsls	r3, r3, #3
 8004dbe:	4413      	add	r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	440b      	add	r3, r1
 8004dc4:	3354      	adds	r3, #84	; 0x54
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dca:	7bfb      	ldrb	r3, [r7, #15]
 8004dcc:	3301      	adds	r3, #1
 8004dce:	73fb      	strb	r3, [r7, #15]
 8004dd0:	7bfa      	ldrb	r2, [r7, #15]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d3af      	bcc.n	8004d3a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dda:	2300      	movs	r3, #0
 8004ddc:	73fb      	strb	r3, [r7, #15]
 8004dde:	e044      	b.n	8004e6a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004de0:	7bfa      	ldrb	r2, [r7, #15]
 8004de2:	6879      	ldr	r1, [r7, #4]
 8004de4:	4613      	mov	r3, r2
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	4413      	add	r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	440b      	add	r3, r1
 8004dee:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004df2:	2200      	movs	r2, #0
 8004df4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004df6:	7bfa      	ldrb	r2, [r7, #15]
 8004df8:	6879      	ldr	r1, [r7, #4]
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	00db      	lsls	r3, r3, #3
 8004dfe:	4413      	add	r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	440b      	add	r3, r1
 8004e04:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004e08:	7bfa      	ldrb	r2, [r7, #15]
 8004e0a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004e0c:	7bfa      	ldrb	r2, [r7, #15]
 8004e0e:	6879      	ldr	r1, [r7, #4]
 8004e10:	4613      	mov	r3, r2
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	4413      	add	r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	440b      	add	r3, r1
 8004e1a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004e1e:	2200      	movs	r2, #0
 8004e20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004e22:	7bfa      	ldrb	r2, [r7, #15]
 8004e24:	6879      	ldr	r1, [r7, #4]
 8004e26:	4613      	mov	r3, r2
 8004e28:	00db      	lsls	r3, r3, #3
 8004e2a:	4413      	add	r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	440b      	add	r3, r1
 8004e30:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004e34:	2200      	movs	r2, #0
 8004e36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004e38:	7bfa      	ldrb	r2, [r7, #15]
 8004e3a:	6879      	ldr	r1, [r7, #4]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	00db      	lsls	r3, r3, #3
 8004e40:	4413      	add	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	440b      	add	r3, r1
 8004e46:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004e4e:	7bfa      	ldrb	r2, [r7, #15]
 8004e50:	6879      	ldr	r1, [r7, #4]
 8004e52:	4613      	mov	r3, r2
 8004e54:	00db      	lsls	r3, r3, #3
 8004e56:	4413      	add	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	440b      	add	r3, r1
 8004e5c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004e60:	2200      	movs	r2, #0
 8004e62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e64:	7bfb      	ldrb	r3, [r7, #15]
 8004e66:	3301      	adds	r3, #1
 8004e68:	73fb      	strb	r3, [r7, #15]
 8004e6a:	7bfa      	ldrb	r2, [r7, #15]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d3b5      	bcc.n	8004de0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	603b      	str	r3, [r7, #0]
 8004e7a:	687e      	ldr	r6, [r7, #4]
 8004e7c:	466d      	mov	r5, sp
 8004e7e:	f106 0410 	add.w	r4, r6, #16
 8004e82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004e8e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004e92:	1d33      	adds	r3, r6, #4
 8004e94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e96:	6838      	ldr	r0, [r7, #0]
 8004e98:	f003 fd0e 	bl	80088b8 <USB_DevInit>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d005      	beq.n	8004eae <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2202      	movs	r2, #2
 8004ea6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e014      	b.n	8004ed8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d102      	bne.n	8004ecc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 f80a 	bl	8004ee0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f003 fecc 	bl	8008c6e <USB_DevDisconnect>

  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3714      	adds	r7, #20
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ee0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f0e:	4b05      	ldr	r3, [pc, #20]	; (8004f24 <HAL_PCDEx_ActivateLPM+0x44>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3714      	adds	r7, #20
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr
 8004f24:	10000003 	.word	0x10000003

08004f28 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004f30:	4b29      	ldr	r3, [pc, #164]	; (8004fd8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	f003 0307 	and.w	r3, r3, #7
 8004f38:	2b06      	cmp	r3, #6
 8004f3a:	d00a      	beq.n	8004f52 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004f3c:	4b26      	ldr	r3, [pc, #152]	; (8004fd8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d001      	beq.n	8004f4e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e040      	b.n	8004fd0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	e03e      	b.n	8004fd0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004f52:	4b21      	ldr	r3, [pc, #132]	; (8004fd8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004f5a:	491f      	ldr	r1, [pc, #124]	; (8004fd8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004f62:	f7fe f997 	bl	8003294 <HAL_GetTick>
 8004f66:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004f68:	e009      	b.n	8004f7e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004f6a:	f7fe f993 	bl	8003294 <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f78:	d901      	bls.n	8004f7e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e028      	b.n	8004fd0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004f7e:	4b16      	ldr	r3, [pc, #88]	; (8004fd8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f8a:	d1ee      	bne.n	8004f6a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b1e      	cmp	r3, #30
 8004f90:	d008      	beq.n	8004fa4 <HAL_PWREx_ConfigSupply+0x7c>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2b2e      	cmp	r3, #46	; 0x2e
 8004f96:	d005      	beq.n	8004fa4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b1d      	cmp	r3, #29
 8004f9c:	d002      	beq.n	8004fa4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2b2d      	cmp	r3, #45	; 0x2d
 8004fa2:	d114      	bne.n	8004fce <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004fa4:	f7fe f976 	bl	8003294 <HAL_GetTick>
 8004fa8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004faa:	e009      	b.n	8004fc0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004fac:	f7fe f972 	bl	8003294 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fba:	d901      	bls.n	8004fc0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e007      	b.n	8004fd0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004fc0:	4b05      	ldr	r3, [pc, #20]	; (8004fd8 <HAL_PWREx_ConfigSupply+0xb0>)
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fcc:	d1ee      	bne.n	8004fac <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	58024800 	.word	0x58024800

08004fdc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004fe0:	4b05      	ldr	r3, [pc, #20]	; (8004ff8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	4a04      	ldr	r2, [pc, #16]	; (8004ff8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004fe6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fea:	60d3      	str	r3, [r2, #12]
}
 8004fec:	bf00      	nop
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	58024800 	.word	0x58024800

08004ffc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b08c      	sub	sp, #48	; 0x30
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d102      	bne.n	8005010 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	f000 bc1d 	b.w	800584a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0301 	and.w	r3, r3, #1
 8005018:	2b00      	cmp	r3, #0
 800501a:	f000 8087 	beq.w	800512c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800501e:	4b99      	ldr	r3, [pc, #612]	; (8005284 <HAL_RCC_OscConfig+0x288>)
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005026:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005028:	4b96      	ldr	r3, [pc, #600]	; (8005284 <HAL_RCC_OscConfig+0x288>)
 800502a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800502e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005030:	2b10      	cmp	r3, #16
 8005032:	d007      	beq.n	8005044 <HAL_RCC_OscConfig+0x48>
 8005034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005036:	2b18      	cmp	r3, #24
 8005038:	d110      	bne.n	800505c <HAL_RCC_OscConfig+0x60>
 800503a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503c:	f003 0303 	and.w	r3, r3, #3
 8005040:	2b02      	cmp	r3, #2
 8005042:	d10b      	bne.n	800505c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005044:	4b8f      	ldr	r3, [pc, #572]	; (8005284 <HAL_RCC_OscConfig+0x288>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d06c      	beq.n	800512a <HAL_RCC_OscConfig+0x12e>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d168      	bne.n	800512a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e3f6      	b.n	800584a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005064:	d106      	bne.n	8005074 <HAL_RCC_OscConfig+0x78>
 8005066:	4b87      	ldr	r3, [pc, #540]	; (8005284 <HAL_RCC_OscConfig+0x288>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a86      	ldr	r2, [pc, #536]	; (8005284 <HAL_RCC_OscConfig+0x288>)
 800506c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005070:	6013      	str	r3, [r2, #0]
 8005072:	e02e      	b.n	80050d2 <HAL_RCC_OscConfig+0xd6>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d10c      	bne.n	8005096 <HAL_RCC_OscConfig+0x9a>
 800507c:	4b81      	ldr	r3, [pc, #516]	; (8005284 <HAL_RCC_OscConfig+0x288>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a80      	ldr	r2, [pc, #512]	; (8005284 <HAL_RCC_OscConfig+0x288>)
 8005082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005086:	6013      	str	r3, [r2, #0]
 8005088:	4b7e      	ldr	r3, [pc, #504]	; (8005284 <HAL_RCC_OscConfig+0x288>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a7d      	ldr	r2, [pc, #500]	; (8005284 <HAL_RCC_OscConfig+0x288>)
 800508e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005092:	6013      	str	r3, [r2, #0]
 8005094:	e01d      	b.n	80050d2 <HAL_RCC_OscConfig+0xd6>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800509e:	d10c      	bne.n	80050ba <HAL_RCC_OscConfig+0xbe>
 80050a0:	4b78      	ldr	r3, [pc, #480]	; (8005284 <HAL_RCC_OscConfig+0x288>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a77      	ldr	r2, [pc, #476]	; (8005284 <HAL_RCC_OscConfig+0x288>)
 80050a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050aa:	6013      	str	r3, [r2, #0]
 80050ac:	4b75      	ldr	r3, [pc, #468]	; (8005284 <HAL_RCC_OscConfig+0x288>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a74      	ldr	r2, [pc, #464]	; (8005284 <HAL_RCC_OscConfig+0x288>)
 80050b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050b6:	6013      	str	r3, [r2, #0]
 80050b8:	e00b      	b.n	80050d2 <HAL_RCC_OscConfig+0xd6>
 80050ba:	4b72      	ldr	r3, [pc, #456]	; (8005284 <HAL_RCC_OscConfig+0x288>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a71      	ldr	r2, [pc, #452]	; (8005284 <HAL_RCC_OscConfig+0x288>)
 80050c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050c4:	6013      	str	r3, [r2, #0]
 80050c6:	4b6f      	ldr	r3, [pc, #444]	; (8005284 <HAL_RCC_OscConfig+0x288>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a6e      	ldr	r2, [pc, #440]	; (8005284 <HAL_RCC_OscConfig+0x288>)
 80050cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050d0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d013      	beq.n	8005102 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050da:	f7fe f8db 	bl	8003294 <HAL_GetTick>
 80050de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050e0:	e008      	b.n	80050f4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050e2:	f7fe f8d7 	bl	8003294 <HAL_GetTick>
 80050e6:	4602      	mov	r2, r0
 80050e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	2b64      	cmp	r3, #100	; 0x64
 80050ee:	d901      	bls.n	80050f4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e3aa      	b.n	800584a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050f4:	4b63      	ldr	r3, [pc, #396]	; (8005284 <HAL_RCC_OscConfig+0x288>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d0f0      	beq.n	80050e2 <HAL_RCC_OscConfig+0xe6>
 8005100:	e014      	b.n	800512c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005102:	f7fe f8c7 	bl	8003294 <HAL_GetTick>
 8005106:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005108:	e008      	b.n	800511c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800510a:	f7fe f8c3 	bl	8003294 <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	2b64      	cmp	r3, #100	; 0x64
 8005116:	d901      	bls.n	800511c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e396      	b.n	800584a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800511c:	4b59      	ldr	r3, [pc, #356]	; (8005284 <HAL_RCC_OscConfig+0x288>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1f0      	bne.n	800510a <HAL_RCC_OscConfig+0x10e>
 8005128:	e000      	b.n	800512c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800512a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0302 	and.w	r3, r3, #2
 8005134:	2b00      	cmp	r3, #0
 8005136:	f000 80cb 	beq.w	80052d0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800513a:	4b52      	ldr	r3, [pc, #328]	; (8005284 <HAL_RCC_OscConfig+0x288>)
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005142:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005144:	4b4f      	ldr	r3, [pc, #316]	; (8005284 <HAL_RCC_OscConfig+0x288>)
 8005146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005148:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800514a:	6a3b      	ldr	r3, [r7, #32]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d007      	beq.n	8005160 <HAL_RCC_OscConfig+0x164>
 8005150:	6a3b      	ldr	r3, [r7, #32]
 8005152:	2b18      	cmp	r3, #24
 8005154:	d156      	bne.n	8005204 <HAL_RCC_OscConfig+0x208>
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	f003 0303 	and.w	r3, r3, #3
 800515c:	2b00      	cmp	r3, #0
 800515e:	d151      	bne.n	8005204 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005160:	4b48      	ldr	r3, [pc, #288]	; (8005284 <HAL_RCC_OscConfig+0x288>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0304 	and.w	r3, r3, #4
 8005168:	2b00      	cmp	r3, #0
 800516a:	d005      	beq.n	8005178 <HAL_RCC_OscConfig+0x17c>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d101      	bne.n	8005178 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e368      	b.n	800584a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005178:	4b42      	ldr	r3, [pc, #264]	; (8005284 <HAL_RCC_OscConfig+0x288>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f023 0219 	bic.w	r2, r3, #25
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	493f      	ldr	r1, [pc, #252]	; (8005284 <HAL_RCC_OscConfig+0x288>)
 8005186:	4313      	orrs	r3, r2
 8005188:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800518a:	f7fe f883 	bl	8003294 <HAL_GetTick>
 800518e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005190:	e008      	b.n	80051a4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005192:	f7fe f87f 	bl	8003294 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	2b02      	cmp	r3, #2
 800519e:	d901      	bls.n	80051a4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e352      	b.n	800584a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051a4:	4b37      	ldr	r3, [pc, #220]	; (8005284 <HAL_RCC_OscConfig+0x288>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0304 	and.w	r3, r3, #4
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d0f0      	beq.n	8005192 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051b0:	f7fe f8a0 	bl	80032f4 <HAL_GetREVID>
 80051b4:	4603      	mov	r3, r0
 80051b6:	f241 0203 	movw	r2, #4099	; 0x1003
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d817      	bhi.n	80051ee <HAL_RCC_OscConfig+0x1f2>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	2b40      	cmp	r3, #64	; 0x40
 80051c4:	d108      	bne.n	80051d8 <HAL_RCC_OscConfig+0x1dc>
 80051c6:	4b2f      	ldr	r3, [pc, #188]	; (8005284 <HAL_RCC_OscConfig+0x288>)
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80051ce:	4a2d      	ldr	r2, [pc, #180]	; (8005284 <HAL_RCC_OscConfig+0x288>)
 80051d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051d4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051d6:	e07b      	b.n	80052d0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051d8:	4b2a      	ldr	r3, [pc, #168]	; (8005284 <HAL_RCC_OscConfig+0x288>)
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	031b      	lsls	r3, r3, #12
 80051e6:	4927      	ldr	r1, [pc, #156]	; (8005284 <HAL_RCC_OscConfig+0x288>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051ec:	e070      	b.n	80052d0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ee:	4b25      	ldr	r3, [pc, #148]	; (8005284 <HAL_RCC_OscConfig+0x288>)
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	061b      	lsls	r3, r3, #24
 80051fc:	4921      	ldr	r1, [pc, #132]	; (8005284 <HAL_RCC_OscConfig+0x288>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005202:	e065      	b.n	80052d0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d048      	beq.n	800529e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800520c:	4b1d      	ldr	r3, [pc, #116]	; (8005284 <HAL_RCC_OscConfig+0x288>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f023 0219 	bic.w	r2, r3, #25
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	491a      	ldr	r1, [pc, #104]	; (8005284 <HAL_RCC_OscConfig+0x288>)
 800521a:	4313      	orrs	r3, r2
 800521c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800521e:	f7fe f839 	bl	8003294 <HAL_GetTick>
 8005222:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005224:	e008      	b.n	8005238 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005226:	f7fe f835 	bl	8003294 <HAL_GetTick>
 800522a:	4602      	mov	r2, r0
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	2b02      	cmp	r3, #2
 8005232:	d901      	bls.n	8005238 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e308      	b.n	800584a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005238:	4b12      	ldr	r3, [pc, #72]	; (8005284 <HAL_RCC_OscConfig+0x288>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0304 	and.w	r3, r3, #4
 8005240:	2b00      	cmp	r3, #0
 8005242:	d0f0      	beq.n	8005226 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005244:	f7fe f856 	bl	80032f4 <HAL_GetREVID>
 8005248:	4603      	mov	r3, r0
 800524a:	f241 0203 	movw	r2, #4099	; 0x1003
 800524e:	4293      	cmp	r3, r2
 8005250:	d81a      	bhi.n	8005288 <HAL_RCC_OscConfig+0x28c>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	2b40      	cmp	r3, #64	; 0x40
 8005258:	d108      	bne.n	800526c <HAL_RCC_OscConfig+0x270>
 800525a:	4b0a      	ldr	r3, [pc, #40]	; (8005284 <HAL_RCC_OscConfig+0x288>)
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005262:	4a08      	ldr	r2, [pc, #32]	; (8005284 <HAL_RCC_OscConfig+0x288>)
 8005264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005268:	6053      	str	r3, [r2, #4]
 800526a:	e031      	b.n	80052d0 <HAL_RCC_OscConfig+0x2d4>
 800526c:	4b05      	ldr	r3, [pc, #20]	; (8005284 <HAL_RCC_OscConfig+0x288>)
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	031b      	lsls	r3, r3, #12
 800527a:	4902      	ldr	r1, [pc, #8]	; (8005284 <HAL_RCC_OscConfig+0x288>)
 800527c:	4313      	orrs	r3, r2
 800527e:	604b      	str	r3, [r1, #4]
 8005280:	e026      	b.n	80052d0 <HAL_RCC_OscConfig+0x2d4>
 8005282:	bf00      	nop
 8005284:	58024400 	.word	0x58024400
 8005288:	4b9a      	ldr	r3, [pc, #616]	; (80054f4 <HAL_RCC_OscConfig+0x4f8>)
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	061b      	lsls	r3, r3, #24
 8005296:	4997      	ldr	r1, [pc, #604]	; (80054f4 <HAL_RCC_OscConfig+0x4f8>)
 8005298:	4313      	orrs	r3, r2
 800529a:	604b      	str	r3, [r1, #4]
 800529c:	e018      	b.n	80052d0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800529e:	4b95      	ldr	r3, [pc, #596]	; (80054f4 <HAL_RCC_OscConfig+0x4f8>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a94      	ldr	r2, [pc, #592]	; (80054f4 <HAL_RCC_OscConfig+0x4f8>)
 80052a4:	f023 0301 	bic.w	r3, r3, #1
 80052a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052aa:	f7fd fff3 	bl	8003294 <HAL_GetTick>
 80052ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80052b0:	e008      	b.n	80052c4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052b2:	f7fd ffef 	bl	8003294 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d901      	bls.n	80052c4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e2c2      	b.n	800584a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80052c4:	4b8b      	ldr	r3, [pc, #556]	; (80054f4 <HAL_RCC_OscConfig+0x4f8>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1f0      	bne.n	80052b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0310 	and.w	r3, r3, #16
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 80a9 	beq.w	8005430 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052de:	4b85      	ldr	r3, [pc, #532]	; (80054f4 <HAL_RCC_OscConfig+0x4f8>)
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052e6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80052e8:	4b82      	ldr	r3, [pc, #520]	; (80054f4 <HAL_RCC_OscConfig+0x4f8>)
 80052ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ec:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	2b08      	cmp	r3, #8
 80052f2:	d007      	beq.n	8005304 <HAL_RCC_OscConfig+0x308>
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	2b18      	cmp	r3, #24
 80052f8:	d13a      	bne.n	8005370 <HAL_RCC_OscConfig+0x374>
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	f003 0303 	and.w	r3, r3, #3
 8005300:	2b01      	cmp	r3, #1
 8005302:	d135      	bne.n	8005370 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005304:	4b7b      	ldr	r3, [pc, #492]	; (80054f4 <HAL_RCC_OscConfig+0x4f8>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800530c:	2b00      	cmp	r3, #0
 800530e:	d005      	beq.n	800531c <HAL_RCC_OscConfig+0x320>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	69db      	ldr	r3, [r3, #28]
 8005314:	2b80      	cmp	r3, #128	; 0x80
 8005316:	d001      	beq.n	800531c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e296      	b.n	800584a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800531c:	f7fd ffea 	bl	80032f4 <HAL_GetREVID>
 8005320:	4603      	mov	r3, r0
 8005322:	f241 0203 	movw	r2, #4099	; 0x1003
 8005326:	4293      	cmp	r3, r2
 8005328:	d817      	bhi.n	800535a <HAL_RCC_OscConfig+0x35e>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a1b      	ldr	r3, [r3, #32]
 800532e:	2b20      	cmp	r3, #32
 8005330:	d108      	bne.n	8005344 <HAL_RCC_OscConfig+0x348>
 8005332:	4b70      	ldr	r3, [pc, #448]	; (80054f4 <HAL_RCC_OscConfig+0x4f8>)
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800533a:	4a6e      	ldr	r2, [pc, #440]	; (80054f4 <HAL_RCC_OscConfig+0x4f8>)
 800533c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005340:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005342:	e075      	b.n	8005430 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005344:	4b6b      	ldr	r3, [pc, #428]	; (80054f4 <HAL_RCC_OscConfig+0x4f8>)
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	069b      	lsls	r3, r3, #26
 8005352:	4968      	ldr	r1, [pc, #416]	; (80054f4 <HAL_RCC_OscConfig+0x4f8>)
 8005354:	4313      	orrs	r3, r2
 8005356:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005358:	e06a      	b.n	8005430 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800535a:	4b66      	ldr	r3, [pc, #408]	; (80054f4 <HAL_RCC_OscConfig+0x4f8>)
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	061b      	lsls	r3, r3, #24
 8005368:	4962      	ldr	r1, [pc, #392]	; (80054f4 <HAL_RCC_OscConfig+0x4f8>)
 800536a:	4313      	orrs	r3, r2
 800536c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800536e:	e05f      	b.n	8005430 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	69db      	ldr	r3, [r3, #28]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d042      	beq.n	80053fe <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005378:	4b5e      	ldr	r3, [pc, #376]	; (80054f4 <HAL_RCC_OscConfig+0x4f8>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a5d      	ldr	r2, [pc, #372]	; (80054f4 <HAL_RCC_OscConfig+0x4f8>)
 800537e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005382:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005384:	f7fd ff86 	bl	8003294 <HAL_GetTick>
 8005388:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800538a:	e008      	b.n	800539e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800538c:	f7fd ff82 	bl	8003294 <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	2b02      	cmp	r3, #2
 8005398:	d901      	bls.n	800539e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e255      	b.n	800584a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800539e:	4b55      	ldr	r3, [pc, #340]	; (80054f4 <HAL_RCC_OscConfig+0x4f8>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d0f0      	beq.n	800538c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80053aa:	f7fd ffa3 	bl	80032f4 <HAL_GetREVID>
 80053ae:	4603      	mov	r3, r0
 80053b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d817      	bhi.n	80053e8 <HAL_RCC_OscConfig+0x3ec>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a1b      	ldr	r3, [r3, #32]
 80053bc:	2b20      	cmp	r3, #32
 80053be:	d108      	bne.n	80053d2 <HAL_RCC_OscConfig+0x3d6>
 80053c0:	4b4c      	ldr	r3, [pc, #304]	; (80054f4 <HAL_RCC_OscConfig+0x4f8>)
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80053c8:	4a4a      	ldr	r2, [pc, #296]	; (80054f4 <HAL_RCC_OscConfig+0x4f8>)
 80053ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053ce:	6053      	str	r3, [r2, #4]
 80053d0:	e02e      	b.n	8005430 <HAL_RCC_OscConfig+0x434>
 80053d2:	4b48      	ldr	r3, [pc, #288]	; (80054f4 <HAL_RCC_OscConfig+0x4f8>)
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	069b      	lsls	r3, r3, #26
 80053e0:	4944      	ldr	r1, [pc, #272]	; (80054f4 <HAL_RCC_OscConfig+0x4f8>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	604b      	str	r3, [r1, #4]
 80053e6:	e023      	b.n	8005430 <HAL_RCC_OscConfig+0x434>
 80053e8:	4b42      	ldr	r3, [pc, #264]	; (80054f4 <HAL_RCC_OscConfig+0x4f8>)
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a1b      	ldr	r3, [r3, #32]
 80053f4:	061b      	lsls	r3, r3, #24
 80053f6:	493f      	ldr	r1, [pc, #252]	; (80054f4 <HAL_RCC_OscConfig+0x4f8>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	60cb      	str	r3, [r1, #12]
 80053fc:	e018      	b.n	8005430 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80053fe:	4b3d      	ldr	r3, [pc, #244]	; (80054f4 <HAL_RCC_OscConfig+0x4f8>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a3c      	ldr	r2, [pc, #240]	; (80054f4 <HAL_RCC_OscConfig+0x4f8>)
 8005404:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005408:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800540a:	f7fd ff43 	bl	8003294 <HAL_GetTick>
 800540e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005410:	e008      	b.n	8005424 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005412:	f7fd ff3f 	bl	8003294 <HAL_GetTick>
 8005416:	4602      	mov	r2, r0
 8005418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	2b02      	cmp	r3, #2
 800541e:	d901      	bls.n	8005424 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e212      	b.n	800584a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005424:	4b33      	ldr	r3, [pc, #204]	; (80054f4 <HAL_RCC_OscConfig+0x4f8>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1f0      	bne.n	8005412 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0308 	and.w	r3, r3, #8
 8005438:	2b00      	cmp	r3, #0
 800543a:	d036      	beq.n	80054aa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	695b      	ldr	r3, [r3, #20]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d019      	beq.n	8005478 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005444:	4b2b      	ldr	r3, [pc, #172]	; (80054f4 <HAL_RCC_OscConfig+0x4f8>)
 8005446:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005448:	4a2a      	ldr	r2, [pc, #168]	; (80054f4 <HAL_RCC_OscConfig+0x4f8>)
 800544a:	f043 0301 	orr.w	r3, r3, #1
 800544e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005450:	f7fd ff20 	bl	8003294 <HAL_GetTick>
 8005454:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005456:	e008      	b.n	800546a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005458:	f7fd ff1c 	bl	8003294 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	2b02      	cmp	r3, #2
 8005464:	d901      	bls.n	800546a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e1ef      	b.n	800584a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800546a:	4b22      	ldr	r3, [pc, #136]	; (80054f4 <HAL_RCC_OscConfig+0x4f8>)
 800546c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	2b00      	cmp	r3, #0
 8005474:	d0f0      	beq.n	8005458 <HAL_RCC_OscConfig+0x45c>
 8005476:	e018      	b.n	80054aa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005478:	4b1e      	ldr	r3, [pc, #120]	; (80054f4 <HAL_RCC_OscConfig+0x4f8>)
 800547a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800547c:	4a1d      	ldr	r2, [pc, #116]	; (80054f4 <HAL_RCC_OscConfig+0x4f8>)
 800547e:	f023 0301 	bic.w	r3, r3, #1
 8005482:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005484:	f7fd ff06 	bl	8003294 <HAL_GetTick>
 8005488:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800548a:	e008      	b.n	800549e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800548c:	f7fd ff02 	bl	8003294 <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	2b02      	cmp	r3, #2
 8005498:	d901      	bls.n	800549e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e1d5      	b.n	800584a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800549e:	4b15      	ldr	r3, [pc, #84]	; (80054f4 <HAL_RCC_OscConfig+0x4f8>)
 80054a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1f0      	bne.n	800548c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0320 	and.w	r3, r3, #32
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d039      	beq.n	800552a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d01c      	beq.n	80054f8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80054be:	4b0d      	ldr	r3, [pc, #52]	; (80054f4 <HAL_RCC_OscConfig+0x4f8>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a0c      	ldr	r2, [pc, #48]	; (80054f4 <HAL_RCC_OscConfig+0x4f8>)
 80054c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80054c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80054ca:	f7fd fee3 	bl	8003294 <HAL_GetTick>
 80054ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80054d0:	e008      	b.n	80054e4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80054d2:	f7fd fedf 	bl	8003294 <HAL_GetTick>
 80054d6:	4602      	mov	r2, r0
 80054d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d901      	bls.n	80054e4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e1b2      	b.n	800584a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80054e4:	4b03      	ldr	r3, [pc, #12]	; (80054f4 <HAL_RCC_OscConfig+0x4f8>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d0f0      	beq.n	80054d2 <HAL_RCC_OscConfig+0x4d6>
 80054f0:	e01b      	b.n	800552a <HAL_RCC_OscConfig+0x52e>
 80054f2:	bf00      	nop
 80054f4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80054f8:	4b9b      	ldr	r3, [pc, #620]	; (8005768 <HAL_RCC_OscConfig+0x76c>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a9a      	ldr	r2, [pc, #616]	; (8005768 <HAL_RCC_OscConfig+0x76c>)
 80054fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005502:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005504:	f7fd fec6 	bl	8003294 <HAL_GetTick>
 8005508:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800550a:	e008      	b.n	800551e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800550c:	f7fd fec2 	bl	8003294 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	2b02      	cmp	r3, #2
 8005518:	d901      	bls.n	800551e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e195      	b.n	800584a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800551e:	4b92      	ldr	r3, [pc, #584]	; (8005768 <HAL_RCC_OscConfig+0x76c>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1f0      	bne.n	800550c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0304 	and.w	r3, r3, #4
 8005532:	2b00      	cmp	r3, #0
 8005534:	f000 8081 	beq.w	800563a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005538:	4b8c      	ldr	r3, [pc, #560]	; (800576c <HAL_RCC_OscConfig+0x770>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a8b      	ldr	r2, [pc, #556]	; (800576c <HAL_RCC_OscConfig+0x770>)
 800553e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005542:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005544:	f7fd fea6 	bl	8003294 <HAL_GetTick>
 8005548:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800554a:	e008      	b.n	800555e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800554c:	f7fd fea2 	bl	8003294 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	2b64      	cmp	r3, #100	; 0x64
 8005558:	d901      	bls.n	800555e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e175      	b.n	800584a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800555e:	4b83      	ldr	r3, [pc, #524]	; (800576c <HAL_RCC_OscConfig+0x770>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005566:	2b00      	cmp	r3, #0
 8005568:	d0f0      	beq.n	800554c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	2b01      	cmp	r3, #1
 8005570:	d106      	bne.n	8005580 <HAL_RCC_OscConfig+0x584>
 8005572:	4b7d      	ldr	r3, [pc, #500]	; (8005768 <HAL_RCC_OscConfig+0x76c>)
 8005574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005576:	4a7c      	ldr	r2, [pc, #496]	; (8005768 <HAL_RCC_OscConfig+0x76c>)
 8005578:	f043 0301 	orr.w	r3, r3, #1
 800557c:	6713      	str	r3, [r2, #112]	; 0x70
 800557e:	e02d      	b.n	80055dc <HAL_RCC_OscConfig+0x5e0>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d10c      	bne.n	80055a2 <HAL_RCC_OscConfig+0x5a6>
 8005588:	4b77      	ldr	r3, [pc, #476]	; (8005768 <HAL_RCC_OscConfig+0x76c>)
 800558a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800558c:	4a76      	ldr	r2, [pc, #472]	; (8005768 <HAL_RCC_OscConfig+0x76c>)
 800558e:	f023 0301 	bic.w	r3, r3, #1
 8005592:	6713      	str	r3, [r2, #112]	; 0x70
 8005594:	4b74      	ldr	r3, [pc, #464]	; (8005768 <HAL_RCC_OscConfig+0x76c>)
 8005596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005598:	4a73      	ldr	r2, [pc, #460]	; (8005768 <HAL_RCC_OscConfig+0x76c>)
 800559a:	f023 0304 	bic.w	r3, r3, #4
 800559e:	6713      	str	r3, [r2, #112]	; 0x70
 80055a0:	e01c      	b.n	80055dc <HAL_RCC_OscConfig+0x5e0>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	2b05      	cmp	r3, #5
 80055a8:	d10c      	bne.n	80055c4 <HAL_RCC_OscConfig+0x5c8>
 80055aa:	4b6f      	ldr	r3, [pc, #444]	; (8005768 <HAL_RCC_OscConfig+0x76c>)
 80055ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ae:	4a6e      	ldr	r2, [pc, #440]	; (8005768 <HAL_RCC_OscConfig+0x76c>)
 80055b0:	f043 0304 	orr.w	r3, r3, #4
 80055b4:	6713      	str	r3, [r2, #112]	; 0x70
 80055b6:	4b6c      	ldr	r3, [pc, #432]	; (8005768 <HAL_RCC_OscConfig+0x76c>)
 80055b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ba:	4a6b      	ldr	r2, [pc, #428]	; (8005768 <HAL_RCC_OscConfig+0x76c>)
 80055bc:	f043 0301 	orr.w	r3, r3, #1
 80055c0:	6713      	str	r3, [r2, #112]	; 0x70
 80055c2:	e00b      	b.n	80055dc <HAL_RCC_OscConfig+0x5e0>
 80055c4:	4b68      	ldr	r3, [pc, #416]	; (8005768 <HAL_RCC_OscConfig+0x76c>)
 80055c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c8:	4a67      	ldr	r2, [pc, #412]	; (8005768 <HAL_RCC_OscConfig+0x76c>)
 80055ca:	f023 0301 	bic.w	r3, r3, #1
 80055ce:	6713      	str	r3, [r2, #112]	; 0x70
 80055d0:	4b65      	ldr	r3, [pc, #404]	; (8005768 <HAL_RCC_OscConfig+0x76c>)
 80055d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d4:	4a64      	ldr	r2, [pc, #400]	; (8005768 <HAL_RCC_OscConfig+0x76c>)
 80055d6:	f023 0304 	bic.w	r3, r3, #4
 80055da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d015      	beq.n	8005610 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055e4:	f7fd fe56 	bl	8003294 <HAL_GetTick>
 80055e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055ea:	e00a      	b.n	8005602 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055ec:	f7fd fe52 	bl	8003294 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e123      	b.n	800584a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005602:	4b59      	ldr	r3, [pc, #356]	; (8005768 <HAL_RCC_OscConfig+0x76c>)
 8005604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d0ee      	beq.n	80055ec <HAL_RCC_OscConfig+0x5f0>
 800560e:	e014      	b.n	800563a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005610:	f7fd fe40 	bl	8003294 <HAL_GetTick>
 8005614:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005616:	e00a      	b.n	800562e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005618:	f7fd fe3c 	bl	8003294 <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	f241 3288 	movw	r2, #5000	; 0x1388
 8005626:	4293      	cmp	r3, r2
 8005628:	d901      	bls.n	800562e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e10d      	b.n	800584a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800562e:	4b4e      	ldr	r3, [pc, #312]	; (8005768 <HAL_RCC_OscConfig+0x76c>)
 8005630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1ee      	bne.n	8005618 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563e:	2b00      	cmp	r3, #0
 8005640:	f000 8102 	beq.w	8005848 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005644:	4b48      	ldr	r3, [pc, #288]	; (8005768 <HAL_RCC_OscConfig+0x76c>)
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800564c:	2b18      	cmp	r3, #24
 800564e:	f000 80bd 	beq.w	80057cc <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005656:	2b02      	cmp	r3, #2
 8005658:	f040 809e 	bne.w	8005798 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800565c:	4b42      	ldr	r3, [pc, #264]	; (8005768 <HAL_RCC_OscConfig+0x76c>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a41      	ldr	r2, [pc, #260]	; (8005768 <HAL_RCC_OscConfig+0x76c>)
 8005662:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005668:	f7fd fe14 	bl	8003294 <HAL_GetTick>
 800566c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800566e:	e008      	b.n	8005682 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005670:	f7fd fe10 	bl	8003294 <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	2b02      	cmp	r3, #2
 800567c:	d901      	bls.n	8005682 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e0e3      	b.n	800584a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005682:	4b39      	ldr	r3, [pc, #228]	; (8005768 <HAL_RCC_OscConfig+0x76c>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1f0      	bne.n	8005670 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800568e:	4b36      	ldr	r3, [pc, #216]	; (8005768 <HAL_RCC_OscConfig+0x76c>)
 8005690:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005692:	4b37      	ldr	r3, [pc, #220]	; (8005770 <HAL_RCC_OscConfig+0x774>)
 8005694:	4013      	ands	r3, r2
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800569e:	0112      	lsls	r2, r2, #4
 80056a0:	430a      	orrs	r2, r1
 80056a2:	4931      	ldr	r1, [pc, #196]	; (8005768 <HAL_RCC_OscConfig+0x76c>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	628b      	str	r3, [r1, #40]	; 0x28
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ac:	3b01      	subs	r3, #1
 80056ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056b6:	3b01      	subs	r3, #1
 80056b8:	025b      	lsls	r3, r3, #9
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	431a      	orrs	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c2:	3b01      	subs	r3, #1
 80056c4:	041b      	lsls	r3, r3, #16
 80056c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80056ca:	431a      	orrs	r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d0:	3b01      	subs	r3, #1
 80056d2:	061b      	lsls	r3, r3, #24
 80056d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80056d8:	4923      	ldr	r1, [pc, #140]	; (8005768 <HAL_RCC_OscConfig+0x76c>)
 80056da:	4313      	orrs	r3, r2
 80056dc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80056de:	4b22      	ldr	r3, [pc, #136]	; (8005768 <HAL_RCC_OscConfig+0x76c>)
 80056e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e2:	4a21      	ldr	r2, [pc, #132]	; (8005768 <HAL_RCC_OscConfig+0x76c>)
 80056e4:	f023 0301 	bic.w	r3, r3, #1
 80056e8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80056ea:	4b1f      	ldr	r3, [pc, #124]	; (8005768 <HAL_RCC_OscConfig+0x76c>)
 80056ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056ee:	4b21      	ldr	r3, [pc, #132]	; (8005774 <HAL_RCC_OscConfig+0x778>)
 80056f0:	4013      	ands	r3, r2
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80056f6:	00d2      	lsls	r2, r2, #3
 80056f8:	491b      	ldr	r1, [pc, #108]	; (8005768 <HAL_RCC_OscConfig+0x76c>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80056fe:	4b1a      	ldr	r3, [pc, #104]	; (8005768 <HAL_RCC_OscConfig+0x76c>)
 8005700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005702:	f023 020c 	bic.w	r2, r3, #12
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570a:	4917      	ldr	r1, [pc, #92]	; (8005768 <HAL_RCC_OscConfig+0x76c>)
 800570c:	4313      	orrs	r3, r2
 800570e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005710:	4b15      	ldr	r3, [pc, #84]	; (8005768 <HAL_RCC_OscConfig+0x76c>)
 8005712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005714:	f023 0202 	bic.w	r2, r3, #2
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800571c:	4912      	ldr	r1, [pc, #72]	; (8005768 <HAL_RCC_OscConfig+0x76c>)
 800571e:	4313      	orrs	r3, r2
 8005720:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005722:	4b11      	ldr	r3, [pc, #68]	; (8005768 <HAL_RCC_OscConfig+0x76c>)
 8005724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005726:	4a10      	ldr	r2, [pc, #64]	; (8005768 <HAL_RCC_OscConfig+0x76c>)
 8005728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800572c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800572e:	4b0e      	ldr	r3, [pc, #56]	; (8005768 <HAL_RCC_OscConfig+0x76c>)
 8005730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005732:	4a0d      	ldr	r2, [pc, #52]	; (8005768 <HAL_RCC_OscConfig+0x76c>)
 8005734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005738:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800573a:	4b0b      	ldr	r3, [pc, #44]	; (8005768 <HAL_RCC_OscConfig+0x76c>)
 800573c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573e:	4a0a      	ldr	r2, [pc, #40]	; (8005768 <HAL_RCC_OscConfig+0x76c>)
 8005740:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005744:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005746:	4b08      	ldr	r3, [pc, #32]	; (8005768 <HAL_RCC_OscConfig+0x76c>)
 8005748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574a:	4a07      	ldr	r2, [pc, #28]	; (8005768 <HAL_RCC_OscConfig+0x76c>)
 800574c:	f043 0301 	orr.w	r3, r3, #1
 8005750:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005752:	4b05      	ldr	r3, [pc, #20]	; (8005768 <HAL_RCC_OscConfig+0x76c>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a04      	ldr	r2, [pc, #16]	; (8005768 <HAL_RCC_OscConfig+0x76c>)
 8005758:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800575c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800575e:	f7fd fd99 	bl	8003294 <HAL_GetTick>
 8005762:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005764:	e011      	b.n	800578a <HAL_RCC_OscConfig+0x78e>
 8005766:	bf00      	nop
 8005768:	58024400 	.word	0x58024400
 800576c:	58024800 	.word	0x58024800
 8005770:	fffffc0c 	.word	0xfffffc0c
 8005774:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005778:	f7fd fd8c 	bl	8003294 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	2b02      	cmp	r3, #2
 8005784:	d901      	bls.n	800578a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e05f      	b.n	800584a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800578a:	4b32      	ldr	r3, [pc, #200]	; (8005854 <HAL_RCC_OscConfig+0x858>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d0f0      	beq.n	8005778 <HAL_RCC_OscConfig+0x77c>
 8005796:	e057      	b.n	8005848 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005798:	4b2e      	ldr	r3, [pc, #184]	; (8005854 <HAL_RCC_OscConfig+0x858>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a2d      	ldr	r2, [pc, #180]	; (8005854 <HAL_RCC_OscConfig+0x858>)
 800579e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a4:	f7fd fd76 	bl	8003294 <HAL_GetTick>
 80057a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80057aa:	e008      	b.n	80057be <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057ac:	f7fd fd72 	bl	8003294 <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d901      	bls.n	80057be <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e045      	b.n	800584a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80057be:	4b25      	ldr	r3, [pc, #148]	; (8005854 <HAL_RCC_OscConfig+0x858>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1f0      	bne.n	80057ac <HAL_RCC_OscConfig+0x7b0>
 80057ca:	e03d      	b.n	8005848 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80057cc:	4b21      	ldr	r3, [pc, #132]	; (8005854 <HAL_RCC_OscConfig+0x858>)
 80057ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80057d2:	4b20      	ldr	r3, [pc, #128]	; (8005854 <HAL_RCC_OscConfig+0x858>)
 80057d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d031      	beq.n	8005844 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	f003 0203 	and.w	r2, r3, #3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d12a      	bne.n	8005844 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	091b      	lsrs	r3, r3, #4
 80057f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d122      	bne.n	8005844 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005808:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800580a:	429a      	cmp	r2, r3
 800580c:	d11a      	bne.n	8005844 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	0a5b      	lsrs	r3, r3, #9
 8005812:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800581a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800581c:	429a      	cmp	r2, r3
 800581e:	d111      	bne.n	8005844 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	0c1b      	lsrs	r3, r3, #16
 8005824:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800582e:	429a      	cmp	r2, r3
 8005830:	d108      	bne.n	8005844 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	0e1b      	lsrs	r3, r3, #24
 8005836:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800583e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005840:	429a      	cmp	r2, r3
 8005842:	d001      	beq.n	8005848 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e000      	b.n	800584a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3730      	adds	r7, #48	; 0x30
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	58024400 	.word	0x58024400

08005858 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b086      	sub	sp, #24
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d101      	bne.n	800586c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e19c      	b.n	8005ba6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800586c:	4b8a      	ldr	r3, [pc, #552]	; (8005a98 <HAL_RCC_ClockConfig+0x240>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 030f 	and.w	r3, r3, #15
 8005874:	683a      	ldr	r2, [r7, #0]
 8005876:	429a      	cmp	r2, r3
 8005878:	d910      	bls.n	800589c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800587a:	4b87      	ldr	r3, [pc, #540]	; (8005a98 <HAL_RCC_ClockConfig+0x240>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f023 020f 	bic.w	r2, r3, #15
 8005882:	4985      	ldr	r1, [pc, #532]	; (8005a98 <HAL_RCC_ClockConfig+0x240>)
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	4313      	orrs	r3, r2
 8005888:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800588a:	4b83      	ldr	r3, [pc, #524]	; (8005a98 <HAL_RCC_ClockConfig+0x240>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 030f 	and.w	r3, r3, #15
 8005892:	683a      	ldr	r2, [r7, #0]
 8005894:	429a      	cmp	r2, r3
 8005896:	d001      	beq.n	800589c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e184      	b.n	8005ba6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0304 	and.w	r3, r3, #4
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d010      	beq.n	80058ca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	691a      	ldr	r2, [r3, #16]
 80058ac:	4b7b      	ldr	r3, [pc, #492]	; (8005a9c <HAL_RCC_ClockConfig+0x244>)
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d908      	bls.n	80058ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80058b8:	4b78      	ldr	r3, [pc, #480]	; (8005a9c <HAL_RCC_ClockConfig+0x244>)
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	4975      	ldr	r1, [pc, #468]	; (8005a9c <HAL_RCC_ClockConfig+0x244>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 0308 	and.w	r3, r3, #8
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d010      	beq.n	80058f8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	695a      	ldr	r2, [r3, #20]
 80058da:	4b70      	ldr	r3, [pc, #448]	; (8005a9c <HAL_RCC_ClockConfig+0x244>)
 80058dc:	69db      	ldr	r3, [r3, #28]
 80058de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d908      	bls.n	80058f8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80058e6:	4b6d      	ldr	r3, [pc, #436]	; (8005a9c <HAL_RCC_ClockConfig+0x244>)
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	496a      	ldr	r1, [pc, #424]	; (8005a9c <HAL_RCC_ClockConfig+0x244>)
 80058f4:	4313      	orrs	r3, r2
 80058f6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0310 	and.w	r3, r3, #16
 8005900:	2b00      	cmp	r3, #0
 8005902:	d010      	beq.n	8005926 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	699a      	ldr	r2, [r3, #24]
 8005908:	4b64      	ldr	r3, [pc, #400]	; (8005a9c <HAL_RCC_ClockConfig+0x244>)
 800590a:	69db      	ldr	r3, [r3, #28]
 800590c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005910:	429a      	cmp	r2, r3
 8005912:	d908      	bls.n	8005926 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005914:	4b61      	ldr	r3, [pc, #388]	; (8005a9c <HAL_RCC_ClockConfig+0x244>)
 8005916:	69db      	ldr	r3, [r3, #28]
 8005918:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	495e      	ldr	r1, [pc, #376]	; (8005a9c <HAL_RCC_ClockConfig+0x244>)
 8005922:	4313      	orrs	r3, r2
 8005924:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0320 	and.w	r3, r3, #32
 800592e:	2b00      	cmp	r3, #0
 8005930:	d010      	beq.n	8005954 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	69da      	ldr	r2, [r3, #28]
 8005936:	4b59      	ldr	r3, [pc, #356]	; (8005a9c <HAL_RCC_ClockConfig+0x244>)
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800593e:	429a      	cmp	r2, r3
 8005940:	d908      	bls.n	8005954 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005942:	4b56      	ldr	r3, [pc, #344]	; (8005a9c <HAL_RCC_ClockConfig+0x244>)
 8005944:	6a1b      	ldr	r3, [r3, #32]
 8005946:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	69db      	ldr	r3, [r3, #28]
 800594e:	4953      	ldr	r1, [pc, #332]	; (8005a9c <HAL_RCC_ClockConfig+0x244>)
 8005950:	4313      	orrs	r3, r2
 8005952:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0302 	and.w	r3, r3, #2
 800595c:	2b00      	cmp	r3, #0
 800595e:	d010      	beq.n	8005982 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	68da      	ldr	r2, [r3, #12]
 8005964:	4b4d      	ldr	r3, [pc, #308]	; (8005a9c <HAL_RCC_ClockConfig+0x244>)
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	f003 030f 	and.w	r3, r3, #15
 800596c:	429a      	cmp	r2, r3
 800596e:	d908      	bls.n	8005982 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005970:	4b4a      	ldr	r3, [pc, #296]	; (8005a9c <HAL_RCC_ClockConfig+0x244>)
 8005972:	699b      	ldr	r3, [r3, #24]
 8005974:	f023 020f 	bic.w	r2, r3, #15
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	4947      	ldr	r1, [pc, #284]	; (8005a9c <HAL_RCC_ClockConfig+0x244>)
 800597e:	4313      	orrs	r3, r2
 8005980:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	2b00      	cmp	r3, #0
 800598c:	d055      	beq.n	8005a3a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800598e:	4b43      	ldr	r3, [pc, #268]	; (8005a9c <HAL_RCC_ClockConfig+0x244>)
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	4940      	ldr	r1, [pc, #256]	; (8005a9c <HAL_RCC_ClockConfig+0x244>)
 800599c:	4313      	orrs	r3, r2
 800599e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d107      	bne.n	80059b8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80059a8:	4b3c      	ldr	r3, [pc, #240]	; (8005a9c <HAL_RCC_ClockConfig+0x244>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d121      	bne.n	80059f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e0f6      	b.n	8005ba6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	2b03      	cmp	r3, #3
 80059be:	d107      	bne.n	80059d0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059c0:	4b36      	ldr	r3, [pc, #216]	; (8005a9c <HAL_RCC_ClockConfig+0x244>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d115      	bne.n	80059f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e0ea      	b.n	8005ba6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d107      	bne.n	80059e8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80059d8:	4b30      	ldr	r3, [pc, #192]	; (8005a9c <HAL_RCC_ClockConfig+0x244>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d109      	bne.n	80059f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e0de      	b.n	8005ba6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059e8:	4b2c      	ldr	r3, [pc, #176]	; (8005a9c <HAL_RCC_ClockConfig+0x244>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0304 	and.w	r3, r3, #4
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d101      	bne.n	80059f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e0d6      	b.n	8005ba6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80059f8:	4b28      	ldr	r3, [pc, #160]	; (8005a9c <HAL_RCC_ClockConfig+0x244>)
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	f023 0207 	bic.w	r2, r3, #7
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	4925      	ldr	r1, [pc, #148]	; (8005a9c <HAL_RCC_ClockConfig+0x244>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a0a:	f7fd fc43 	bl	8003294 <HAL_GetTick>
 8005a0e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a10:	e00a      	b.n	8005a28 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a12:	f7fd fc3f 	bl	8003294 <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d901      	bls.n	8005a28 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005a24:	2303      	movs	r3, #3
 8005a26:	e0be      	b.n	8005ba6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a28:	4b1c      	ldr	r3, [pc, #112]	; (8005a9c <HAL_RCC_ClockConfig+0x244>)
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	00db      	lsls	r3, r3, #3
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d1eb      	bne.n	8005a12 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0302 	and.w	r3, r3, #2
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d010      	beq.n	8005a68 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68da      	ldr	r2, [r3, #12]
 8005a4a:	4b14      	ldr	r3, [pc, #80]	; (8005a9c <HAL_RCC_ClockConfig+0x244>)
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	f003 030f 	and.w	r3, r3, #15
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d208      	bcs.n	8005a68 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a56:	4b11      	ldr	r3, [pc, #68]	; (8005a9c <HAL_RCC_ClockConfig+0x244>)
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	f023 020f 	bic.w	r2, r3, #15
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	490e      	ldr	r1, [pc, #56]	; (8005a9c <HAL_RCC_ClockConfig+0x244>)
 8005a64:	4313      	orrs	r3, r2
 8005a66:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a68:	4b0b      	ldr	r3, [pc, #44]	; (8005a98 <HAL_RCC_ClockConfig+0x240>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 030f 	and.w	r3, r3, #15
 8005a70:	683a      	ldr	r2, [r7, #0]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d214      	bcs.n	8005aa0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a76:	4b08      	ldr	r3, [pc, #32]	; (8005a98 <HAL_RCC_ClockConfig+0x240>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f023 020f 	bic.w	r2, r3, #15
 8005a7e:	4906      	ldr	r1, [pc, #24]	; (8005a98 <HAL_RCC_ClockConfig+0x240>)
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a86:	4b04      	ldr	r3, [pc, #16]	; (8005a98 <HAL_RCC_ClockConfig+0x240>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 030f 	and.w	r3, r3, #15
 8005a8e:	683a      	ldr	r2, [r7, #0]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d005      	beq.n	8005aa0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e086      	b.n	8005ba6 <HAL_RCC_ClockConfig+0x34e>
 8005a98:	52002000 	.word	0x52002000
 8005a9c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0304 	and.w	r3, r3, #4
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d010      	beq.n	8005ace <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	691a      	ldr	r2, [r3, #16]
 8005ab0:	4b3f      	ldr	r3, [pc, #252]	; (8005bb0 <HAL_RCC_ClockConfig+0x358>)
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d208      	bcs.n	8005ace <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005abc:	4b3c      	ldr	r3, [pc, #240]	; (8005bb0 <HAL_RCC_ClockConfig+0x358>)
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	4939      	ldr	r1, [pc, #228]	; (8005bb0 <HAL_RCC_ClockConfig+0x358>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 0308 	and.w	r3, r3, #8
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d010      	beq.n	8005afc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	695a      	ldr	r2, [r3, #20]
 8005ade:	4b34      	ldr	r3, [pc, #208]	; (8005bb0 <HAL_RCC_ClockConfig+0x358>)
 8005ae0:	69db      	ldr	r3, [r3, #28]
 8005ae2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d208      	bcs.n	8005afc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005aea:	4b31      	ldr	r3, [pc, #196]	; (8005bb0 <HAL_RCC_ClockConfig+0x358>)
 8005aec:	69db      	ldr	r3, [r3, #28]
 8005aee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	492e      	ldr	r1, [pc, #184]	; (8005bb0 <HAL_RCC_ClockConfig+0x358>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0310 	and.w	r3, r3, #16
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d010      	beq.n	8005b2a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	699a      	ldr	r2, [r3, #24]
 8005b0c:	4b28      	ldr	r3, [pc, #160]	; (8005bb0 <HAL_RCC_ClockConfig+0x358>)
 8005b0e:	69db      	ldr	r3, [r3, #28]
 8005b10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d208      	bcs.n	8005b2a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005b18:	4b25      	ldr	r3, [pc, #148]	; (8005bb0 <HAL_RCC_ClockConfig+0x358>)
 8005b1a:	69db      	ldr	r3, [r3, #28]
 8005b1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	4922      	ldr	r1, [pc, #136]	; (8005bb0 <HAL_RCC_ClockConfig+0x358>)
 8005b26:	4313      	orrs	r3, r2
 8005b28:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0320 	and.w	r3, r3, #32
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d010      	beq.n	8005b58 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	69da      	ldr	r2, [r3, #28]
 8005b3a:	4b1d      	ldr	r3, [pc, #116]	; (8005bb0 <HAL_RCC_ClockConfig+0x358>)
 8005b3c:	6a1b      	ldr	r3, [r3, #32]
 8005b3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d208      	bcs.n	8005b58 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005b46:	4b1a      	ldr	r3, [pc, #104]	; (8005bb0 <HAL_RCC_ClockConfig+0x358>)
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	69db      	ldr	r3, [r3, #28]
 8005b52:	4917      	ldr	r1, [pc, #92]	; (8005bb0 <HAL_RCC_ClockConfig+0x358>)
 8005b54:	4313      	orrs	r3, r2
 8005b56:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005b58:	f000 f834 	bl	8005bc4 <HAL_RCC_GetSysClockFreq>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	4b14      	ldr	r3, [pc, #80]	; (8005bb0 <HAL_RCC_ClockConfig+0x358>)
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	0a1b      	lsrs	r3, r3, #8
 8005b64:	f003 030f 	and.w	r3, r3, #15
 8005b68:	4912      	ldr	r1, [pc, #72]	; (8005bb4 <HAL_RCC_ClockConfig+0x35c>)
 8005b6a:	5ccb      	ldrb	r3, [r1, r3]
 8005b6c:	f003 031f 	and.w	r3, r3, #31
 8005b70:	fa22 f303 	lsr.w	r3, r2, r3
 8005b74:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005b76:	4b0e      	ldr	r3, [pc, #56]	; (8005bb0 <HAL_RCC_ClockConfig+0x358>)
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	f003 030f 	and.w	r3, r3, #15
 8005b7e:	4a0d      	ldr	r2, [pc, #52]	; (8005bb4 <HAL_RCC_ClockConfig+0x35c>)
 8005b80:	5cd3      	ldrb	r3, [r2, r3]
 8005b82:	f003 031f 	and.w	r3, r3, #31
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	fa22 f303 	lsr.w	r3, r2, r3
 8005b8c:	4a0a      	ldr	r2, [pc, #40]	; (8005bb8 <HAL_RCC_ClockConfig+0x360>)
 8005b8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005b90:	4a0a      	ldr	r2, [pc, #40]	; (8005bbc <HAL_RCC_ClockConfig+0x364>)
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005b96:	4b0a      	ldr	r3, [pc, #40]	; (8005bc0 <HAL_RCC_ClockConfig+0x368>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7fd fb30 	bl	8003200 <HAL_InitTick>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3718      	adds	r7, #24
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	58024400 	.word	0x58024400
 8005bb4:	080098cc 	.word	0x080098cc
 8005bb8:	24000004 	.word	0x24000004
 8005bbc:	24000000 	.word	0x24000000
 8005bc0:	24000234 	.word	0x24000234

08005bc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b089      	sub	sp, #36	; 0x24
 8005bc8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bca:	4bb3      	ldr	r3, [pc, #716]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bd2:	2b18      	cmp	r3, #24
 8005bd4:	f200 8155 	bhi.w	8005e82 <HAL_RCC_GetSysClockFreq+0x2be>
 8005bd8:	a201      	add	r2, pc, #4	; (adr r2, 8005be0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bde:	bf00      	nop
 8005be0:	08005c45 	.word	0x08005c45
 8005be4:	08005e83 	.word	0x08005e83
 8005be8:	08005e83 	.word	0x08005e83
 8005bec:	08005e83 	.word	0x08005e83
 8005bf0:	08005e83 	.word	0x08005e83
 8005bf4:	08005e83 	.word	0x08005e83
 8005bf8:	08005e83 	.word	0x08005e83
 8005bfc:	08005e83 	.word	0x08005e83
 8005c00:	08005c6b 	.word	0x08005c6b
 8005c04:	08005e83 	.word	0x08005e83
 8005c08:	08005e83 	.word	0x08005e83
 8005c0c:	08005e83 	.word	0x08005e83
 8005c10:	08005e83 	.word	0x08005e83
 8005c14:	08005e83 	.word	0x08005e83
 8005c18:	08005e83 	.word	0x08005e83
 8005c1c:	08005e83 	.word	0x08005e83
 8005c20:	08005c71 	.word	0x08005c71
 8005c24:	08005e83 	.word	0x08005e83
 8005c28:	08005e83 	.word	0x08005e83
 8005c2c:	08005e83 	.word	0x08005e83
 8005c30:	08005e83 	.word	0x08005e83
 8005c34:	08005e83 	.word	0x08005e83
 8005c38:	08005e83 	.word	0x08005e83
 8005c3c:	08005e83 	.word	0x08005e83
 8005c40:	08005c77 	.word	0x08005c77
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c44:	4b94      	ldr	r3, [pc, #592]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0320 	and.w	r3, r3, #32
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d009      	beq.n	8005c64 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005c50:	4b91      	ldr	r3, [pc, #580]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	08db      	lsrs	r3, r3, #3
 8005c56:	f003 0303 	and.w	r3, r3, #3
 8005c5a:	4a90      	ldr	r2, [pc, #576]	; (8005e9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c60:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005c62:	e111      	b.n	8005e88 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005c64:	4b8d      	ldr	r3, [pc, #564]	; (8005e9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005c66:	61bb      	str	r3, [r7, #24]
    break;
 8005c68:	e10e      	b.n	8005e88 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005c6a:	4b8d      	ldr	r3, [pc, #564]	; (8005ea0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005c6c:	61bb      	str	r3, [r7, #24]
    break;
 8005c6e:	e10b      	b.n	8005e88 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005c70:	4b8c      	ldr	r3, [pc, #560]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005c72:	61bb      	str	r3, [r7, #24]
    break;
 8005c74:	e108      	b.n	8005e88 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c76:	4b88      	ldr	r3, [pc, #544]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c7a:	f003 0303 	and.w	r3, r3, #3
 8005c7e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005c80:	4b85      	ldr	r3, [pc, #532]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c84:	091b      	lsrs	r3, r3, #4
 8005c86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c8a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005c8c:	4b82      	ldr	r3, [pc, #520]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c90:	f003 0301 	and.w	r3, r3, #1
 8005c94:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005c96:	4b80      	ldr	r3, [pc, #512]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c9a:	08db      	lsrs	r3, r3, #3
 8005c9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	fb02 f303 	mul.w	r3, r2, r3
 8005ca6:	ee07 3a90 	vmov	s15, r3
 8005caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cae:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f000 80e1 	beq.w	8005e7c <HAL_RCC_GetSysClockFreq+0x2b8>
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	f000 8083 	beq.w	8005dc8 <HAL_RCC_GetSysClockFreq+0x204>
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	f200 80a1 	bhi.w	8005e0c <HAL_RCC_GetSysClockFreq+0x248>
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d003      	beq.n	8005cd8 <HAL_RCC_GetSysClockFreq+0x114>
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d056      	beq.n	8005d84 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005cd6:	e099      	b.n	8005e0c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cd8:	4b6f      	ldr	r3, [pc, #444]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0320 	and.w	r3, r3, #32
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d02d      	beq.n	8005d40 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ce4:	4b6c      	ldr	r3, [pc, #432]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	08db      	lsrs	r3, r3, #3
 8005cea:	f003 0303 	and.w	r3, r3, #3
 8005cee:	4a6b      	ldr	r2, [pc, #428]	; (8005e9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8005cf4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	ee07 3a90 	vmov	s15, r3
 8005cfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	ee07 3a90 	vmov	s15, r3
 8005d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d0e:	4b62      	ldr	r3, [pc, #392]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d16:	ee07 3a90 	vmov	s15, r3
 8005d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d22:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005ea8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d3a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005d3e:	e087      	b.n	8005e50 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	ee07 3a90 	vmov	s15, r3
 8005d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d4a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005eac <HAL_RCC_GetSysClockFreq+0x2e8>
 8005d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d52:	4b51      	ldr	r3, [pc, #324]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d5a:	ee07 3a90 	vmov	s15, r3
 8005d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d62:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d66:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005ea8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d82:	e065      	b.n	8005e50 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	ee07 3a90 	vmov	s15, r3
 8005d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d8e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005eb0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d96:	4b40      	ldr	r3, [pc, #256]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d9e:	ee07 3a90 	vmov	s15, r3
 8005da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005da6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005daa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005ea8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005db6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005dc6:	e043      	b.n	8005e50 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	ee07 3a90 	vmov	s15, r3
 8005dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dd2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005eb4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dda:	4b2f      	ldr	r3, [pc, #188]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005de2:	ee07 3a90 	vmov	s15, r3
 8005de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dea:	ed97 6a02 	vldr	s12, [r7, #8]
 8005dee:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005ea8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e0a:	e021      	b.n	8005e50 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	ee07 3a90 	vmov	s15, r3
 8005e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e16:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005eb0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e1e:	4b1e      	ldr	r3, [pc, #120]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e26:	ee07 3a90 	vmov	s15, r3
 8005e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e32:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005ea8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e4e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005e50:	4b11      	ldr	r3, [pc, #68]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e54:	0a5b      	lsrs	r3, r3, #9
 8005e56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	ee07 3a90 	vmov	s15, r3
 8005e64:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005e68:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e74:	ee17 3a90 	vmov	r3, s15
 8005e78:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005e7a:	e005      	b.n	8005e88 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	61bb      	str	r3, [r7, #24]
    break;
 8005e80:	e002      	b.n	8005e88 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005e82:	4b07      	ldr	r3, [pc, #28]	; (8005ea0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005e84:	61bb      	str	r3, [r7, #24]
    break;
 8005e86:	bf00      	nop
  }

  return sysclockfreq;
 8005e88:	69bb      	ldr	r3, [r7, #24]
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3724      	adds	r7, #36	; 0x24
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	58024400 	.word	0x58024400
 8005e9c:	03d09000 	.word	0x03d09000
 8005ea0:	003d0900 	.word	0x003d0900
 8005ea4:	007a1200 	.word	0x007a1200
 8005ea8:	46000000 	.word	0x46000000
 8005eac:	4c742400 	.word	0x4c742400
 8005eb0:	4a742400 	.word	0x4a742400
 8005eb4:	4af42400 	.word	0x4af42400

08005eb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005ebe:	f7ff fe81 	bl	8005bc4 <HAL_RCC_GetSysClockFreq>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	4b10      	ldr	r3, [pc, #64]	; (8005f08 <HAL_RCC_GetHCLKFreq+0x50>)
 8005ec6:	699b      	ldr	r3, [r3, #24]
 8005ec8:	0a1b      	lsrs	r3, r3, #8
 8005eca:	f003 030f 	and.w	r3, r3, #15
 8005ece:	490f      	ldr	r1, [pc, #60]	; (8005f0c <HAL_RCC_GetHCLKFreq+0x54>)
 8005ed0:	5ccb      	ldrb	r3, [r1, r3]
 8005ed2:	f003 031f 	and.w	r3, r3, #31
 8005ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8005eda:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005edc:	4b0a      	ldr	r3, [pc, #40]	; (8005f08 <HAL_RCC_GetHCLKFreq+0x50>)
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	f003 030f 	and.w	r3, r3, #15
 8005ee4:	4a09      	ldr	r2, [pc, #36]	; (8005f0c <HAL_RCC_GetHCLKFreq+0x54>)
 8005ee6:	5cd3      	ldrb	r3, [r2, r3]
 8005ee8:	f003 031f 	and.w	r3, r3, #31
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	fa22 f303 	lsr.w	r3, r2, r3
 8005ef2:	4a07      	ldr	r2, [pc, #28]	; (8005f10 <HAL_RCC_GetHCLKFreq+0x58>)
 8005ef4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ef6:	4a07      	ldr	r2, [pc, #28]	; (8005f14 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005efc:	4b04      	ldr	r3, [pc, #16]	; (8005f10 <HAL_RCC_GetHCLKFreq+0x58>)
 8005efe:	681b      	ldr	r3, [r3, #0]
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3708      	adds	r7, #8
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	58024400 	.word	0x58024400
 8005f0c:	080098cc 	.word	0x080098cc
 8005f10:	24000004 	.word	0x24000004
 8005f14:	24000000 	.word	0x24000000

08005f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005f1c:	f7ff ffcc 	bl	8005eb8 <HAL_RCC_GetHCLKFreq>
 8005f20:	4602      	mov	r2, r0
 8005f22:	4b06      	ldr	r3, [pc, #24]	; (8005f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f24:	69db      	ldr	r3, [r3, #28]
 8005f26:	091b      	lsrs	r3, r3, #4
 8005f28:	f003 0307 	and.w	r3, r3, #7
 8005f2c:	4904      	ldr	r1, [pc, #16]	; (8005f40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f2e:	5ccb      	ldrb	r3, [r1, r3]
 8005f30:	f003 031f 	and.w	r3, r3, #31
 8005f34:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	58024400 	.word	0x58024400
 8005f40:	080098cc 	.word	0x080098cc

08005f44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005f48:	f7ff ffb6 	bl	8005eb8 <HAL_RCC_GetHCLKFreq>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	4b06      	ldr	r3, [pc, #24]	; (8005f68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f50:	69db      	ldr	r3, [r3, #28]
 8005f52:	0a1b      	lsrs	r3, r3, #8
 8005f54:	f003 0307 	and.w	r3, r3, #7
 8005f58:	4904      	ldr	r1, [pc, #16]	; (8005f6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f5a:	5ccb      	ldrb	r3, [r1, r3]
 8005f5c:	f003 031f 	and.w	r3, r3, #31
 8005f60:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	58024400 	.word	0x58024400
 8005f6c:	080098cc 	.word	0x080098cc

08005f70 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005f78:	2300      	movs	r3, #0
 8005f7a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d03f      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f90:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f94:	d02a      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005f96:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f9a:	d824      	bhi.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005f9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005fa0:	d018      	beq.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005fa2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005fa6:	d81e      	bhi.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d003      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005fac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fb0:	d007      	beq.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005fb2:	e018      	b.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fb4:	4ba3      	ldr	r3, [pc, #652]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb8:	4aa2      	ldr	r2, [pc, #648]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005fc0:	e015      	b.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	3304      	adds	r3, #4
 8005fc6:	2102      	movs	r1, #2
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f001 f9d5 	bl	8007378 <RCCEx_PLL2_Config>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005fd2:	e00c      	b.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	3324      	adds	r3, #36	; 0x24
 8005fd8:	2102      	movs	r1, #2
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f001 fa7e 	bl	80074dc <RCCEx_PLL3_Config>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005fe4:	e003      	b.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	75fb      	strb	r3, [r7, #23]
      break;
 8005fea:	e000      	b.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005fec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fee:	7dfb      	ldrb	r3, [r7, #23]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d109      	bne.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005ff4:	4b93      	ldr	r3, [pc, #588]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ff8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006000:	4990      	ldr	r1, [pc, #576]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006002:	4313      	orrs	r3, r2
 8006004:	650b      	str	r3, [r1, #80]	; 0x50
 8006006:	e001      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006008:	7dfb      	ldrb	r3, [r7, #23]
 800600a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006014:	2b00      	cmp	r3, #0
 8006016:	d03d      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800601c:	2b04      	cmp	r3, #4
 800601e:	d826      	bhi.n	800606e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006020:	a201      	add	r2, pc, #4	; (adr r2, 8006028 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006026:	bf00      	nop
 8006028:	0800603d 	.word	0x0800603d
 800602c:	0800604b 	.word	0x0800604b
 8006030:	0800605d 	.word	0x0800605d
 8006034:	08006075 	.word	0x08006075
 8006038:	08006075 	.word	0x08006075
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800603c:	4b81      	ldr	r3, [pc, #516]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800603e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006040:	4a80      	ldr	r2, [pc, #512]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006042:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006046:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006048:	e015      	b.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	3304      	adds	r3, #4
 800604e:	2100      	movs	r1, #0
 8006050:	4618      	mov	r0, r3
 8006052:	f001 f991 	bl	8007378 <RCCEx_PLL2_Config>
 8006056:	4603      	mov	r3, r0
 8006058:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800605a:	e00c      	b.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	3324      	adds	r3, #36	; 0x24
 8006060:	2100      	movs	r1, #0
 8006062:	4618      	mov	r0, r3
 8006064:	f001 fa3a 	bl	80074dc <RCCEx_PLL3_Config>
 8006068:	4603      	mov	r3, r0
 800606a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800606c:	e003      	b.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	75fb      	strb	r3, [r7, #23]
      break;
 8006072:	e000      	b.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006074:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006076:	7dfb      	ldrb	r3, [r7, #23]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d109      	bne.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800607c:	4b71      	ldr	r3, [pc, #452]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800607e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006080:	f023 0207 	bic.w	r2, r3, #7
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006088:	496e      	ldr	r1, [pc, #440]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800608a:	4313      	orrs	r3, r2
 800608c:	650b      	str	r3, [r1, #80]	; 0x50
 800608e:	e001      	b.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006090:	7dfb      	ldrb	r3, [r7, #23]
 8006092:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800609c:	2b00      	cmp	r3, #0
 800609e:	d042      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060a8:	d02b      	beq.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80060aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060ae:	d825      	bhi.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80060b0:	2bc0      	cmp	r3, #192	; 0xc0
 80060b2:	d028      	beq.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80060b4:	2bc0      	cmp	r3, #192	; 0xc0
 80060b6:	d821      	bhi.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80060b8:	2b80      	cmp	r3, #128	; 0x80
 80060ba:	d016      	beq.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80060bc:	2b80      	cmp	r3, #128	; 0x80
 80060be:	d81d      	bhi.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d002      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80060c4:	2b40      	cmp	r3, #64	; 0x40
 80060c6:	d007      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80060c8:	e018      	b.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060ca:	4b5e      	ldr	r3, [pc, #376]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80060cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ce:	4a5d      	ldr	r2, [pc, #372]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80060d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80060d6:	e017      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	3304      	adds	r3, #4
 80060dc:	2100      	movs	r1, #0
 80060de:	4618      	mov	r0, r3
 80060e0:	f001 f94a 	bl	8007378 <RCCEx_PLL2_Config>
 80060e4:	4603      	mov	r3, r0
 80060e6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80060e8:	e00e      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	3324      	adds	r3, #36	; 0x24
 80060ee:	2100      	movs	r1, #0
 80060f0:	4618      	mov	r0, r3
 80060f2:	f001 f9f3 	bl	80074dc <RCCEx_PLL3_Config>
 80060f6:	4603      	mov	r3, r0
 80060f8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80060fa:	e005      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	75fb      	strb	r3, [r7, #23]
      break;
 8006100:	e002      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006102:	bf00      	nop
 8006104:	e000      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006106:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006108:	7dfb      	ldrb	r3, [r7, #23]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d109      	bne.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800610e:	4b4d      	ldr	r3, [pc, #308]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006112:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800611a:	494a      	ldr	r1, [pc, #296]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800611c:	4313      	orrs	r3, r2
 800611e:	650b      	str	r3, [r1, #80]	; 0x50
 8006120:	e001      	b.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006122:	7dfb      	ldrb	r3, [r7, #23]
 8006124:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800612e:	2b00      	cmp	r3, #0
 8006130:	d049      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006138:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800613c:	d030      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800613e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006142:	d82a      	bhi.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006144:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006148:	d02c      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800614a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800614e:	d824      	bhi.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006150:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006154:	d018      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006156:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800615a:	d81e      	bhi.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800615c:	2b00      	cmp	r3, #0
 800615e:	d003      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006160:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006164:	d007      	beq.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006166:	e018      	b.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006168:	4b36      	ldr	r3, [pc, #216]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800616a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616c:	4a35      	ldr	r2, [pc, #212]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800616e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006172:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006174:	e017      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	3304      	adds	r3, #4
 800617a:	2100      	movs	r1, #0
 800617c:	4618      	mov	r0, r3
 800617e:	f001 f8fb 	bl	8007378 <RCCEx_PLL2_Config>
 8006182:	4603      	mov	r3, r0
 8006184:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006186:	e00e      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	3324      	adds	r3, #36	; 0x24
 800618c:	2100      	movs	r1, #0
 800618e:	4618      	mov	r0, r3
 8006190:	f001 f9a4 	bl	80074dc <RCCEx_PLL3_Config>
 8006194:	4603      	mov	r3, r0
 8006196:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006198:	e005      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	75fb      	strb	r3, [r7, #23]
      break;
 800619e:	e002      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80061a0:	bf00      	nop
 80061a2:	e000      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80061a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061a6:	7dfb      	ldrb	r3, [r7, #23]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d10a      	bne.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80061ac:	4b25      	ldr	r3, [pc, #148]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80061ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061b0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80061ba:	4922      	ldr	r1, [pc, #136]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80061bc:	4313      	orrs	r3, r2
 80061be:	658b      	str	r3, [r1, #88]	; 0x58
 80061c0:	e001      	b.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061c2:	7dfb      	ldrb	r3, [r7, #23]
 80061c4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d04b      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80061d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80061dc:	d030      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80061de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80061e2:	d82a      	bhi.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80061e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80061e8:	d02e      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80061ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80061ee:	d824      	bhi.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80061f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061f4:	d018      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80061f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061fa:	d81e      	bhi.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d003      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006200:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006204:	d007      	beq.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006206:	e018      	b.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006208:	4b0e      	ldr	r3, [pc, #56]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800620a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620c:	4a0d      	ldr	r2, [pc, #52]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800620e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006212:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006214:	e019      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	3304      	adds	r3, #4
 800621a:	2100      	movs	r1, #0
 800621c:	4618      	mov	r0, r3
 800621e:	f001 f8ab 	bl	8007378 <RCCEx_PLL2_Config>
 8006222:	4603      	mov	r3, r0
 8006224:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006226:	e010      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	3324      	adds	r3, #36	; 0x24
 800622c:	2100      	movs	r1, #0
 800622e:	4618      	mov	r0, r3
 8006230:	f001 f954 	bl	80074dc <RCCEx_PLL3_Config>
 8006234:	4603      	mov	r3, r0
 8006236:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006238:	e007      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	75fb      	strb	r3, [r7, #23]
      break;
 800623e:	e004      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8006240:	bf00      	nop
 8006242:	e002      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006244:	58024400 	.word	0x58024400
      break;
 8006248:	bf00      	nop
    }

    if(ret == HAL_OK)
 800624a:	7dfb      	ldrb	r3, [r7, #23]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d10a      	bne.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006250:	4b99      	ldr	r3, [pc, #612]	; (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006254:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800625e:	4996      	ldr	r1, [pc, #600]	; (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006260:	4313      	orrs	r3, r2
 8006262:	658b      	str	r3, [r1, #88]	; 0x58
 8006264:	e001      	b.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006266:	7dfb      	ldrb	r3, [r7, #23]
 8006268:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006272:	2b00      	cmp	r3, #0
 8006274:	d032      	beq.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800627a:	2b30      	cmp	r3, #48	; 0x30
 800627c:	d01c      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800627e:	2b30      	cmp	r3, #48	; 0x30
 8006280:	d817      	bhi.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006282:	2b20      	cmp	r3, #32
 8006284:	d00c      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8006286:	2b20      	cmp	r3, #32
 8006288:	d813      	bhi.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800628a:	2b00      	cmp	r3, #0
 800628c:	d016      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800628e:	2b10      	cmp	r3, #16
 8006290:	d10f      	bne.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006292:	4b89      	ldr	r3, [pc, #548]	; (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006296:	4a88      	ldr	r2, [pc, #544]	; (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800629c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800629e:	e00e      	b.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	3304      	adds	r3, #4
 80062a4:	2102      	movs	r1, #2
 80062a6:	4618      	mov	r0, r3
 80062a8:	f001 f866 	bl	8007378 <RCCEx_PLL2_Config>
 80062ac:	4603      	mov	r3, r0
 80062ae:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80062b0:	e005      	b.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	75fb      	strb	r3, [r7, #23]
      break;
 80062b6:	e002      	b.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80062b8:	bf00      	nop
 80062ba:	e000      	b.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80062bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062be:	7dfb      	ldrb	r3, [r7, #23]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d109      	bne.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80062c4:	4b7c      	ldr	r3, [pc, #496]	; (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80062c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062d0:	4979      	ldr	r1, [pc, #484]	; (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80062d6:	e001      	b.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062d8:	7dfb      	ldrb	r3, [r7, #23]
 80062da:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d047      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062f0:	d030      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80062f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062f6:	d82a      	bhi.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80062f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80062fc:	d02c      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80062fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006302:	d824      	bhi.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006304:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006308:	d018      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800630a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800630e:	d81e      	bhi.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006310:	2b00      	cmp	r3, #0
 8006312:	d003      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8006314:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006318:	d007      	beq.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800631a:	e018      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800631c:	4b66      	ldr	r3, [pc, #408]	; (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800631e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006320:	4a65      	ldr	r2, [pc, #404]	; (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006322:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006326:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006328:	e017      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	3304      	adds	r3, #4
 800632e:	2100      	movs	r1, #0
 8006330:	4618      	mov	r0, r3
 8006332:	f001 f821 	bl	8007378 <RCCEx_PLL2_Config>
 8006336:	4603      	mov	r3, r0
 8006338:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800633a:	e00e      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	3324      	adds	r3, #36	; 0x24
 8006340:	2100      	movs	r1, #0
 8006342:	4618      	mov	r0, r3
 8006344:	f001 f8ca 	bl	80074dc <RCCEx_PLL3_Config>
 8006348:	4603      	mov	r3, r0
 800634a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800634c:	e005      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	75fb      	strb	r3, [r7, #23]
      break;
 8006352:	e002      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006354:	bf00      	nop
 8006356:	e000      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006358:	bf00      	nop
    }

    if(ret == HAL_OK)
 800635a:	7dfb      	ldrb	r3, [r7, #23]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d109      	bne.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006360:	4b55      	ldr	r3, [pc, #340]	; (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006364:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800636c:	4952      	ldr	r1, [pc, #328]	; (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800636e:	4313      	orrs	r3, r2
 8006370:	650b      	str	r3, [r1, #80]	; 0x50
 8006372:	e001      	b.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006374:	7dfb      	ldrb	r3, [r7, #23]
 8006376:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d049      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006388:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800638c:	d02e      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800638e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006392:	d828      	bhi.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006394:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006398:	d02a      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800639a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800639e:	d822      	bhi.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80063a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80063a4:	d026      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80063a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80063aa:	d81c      	bhi.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80063ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063b0:	d010      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80063b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063b6:	d816      	bhi.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d01d      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80063bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063c0:	d111      	bne.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	3304      	adds	r3, #4
 80063c6:	2101      	movs	r1, #1
 80063c8:	4618      	mov	r0, r3
 80063ca:	f000 ffd5 	bl	8007378 <RCCEx_PLL2_Config>
 80063ce:	4603      	mov	r3, r0
 80063d0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80063d2:	e012      	b.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	3324      	adds	r3, #36	; 0x24
 80063d8:	2101      	movs	r1, #1
 80063da:	4618      	mov	r0, r3
 80063dc:	f001 f87e 	bl	80074dc <RCCEx_PLL3_Config>
 80063e0:	4603      	mov	r3, r0
 80063e2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80063e4:	e009      	b.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	75fb      	strb	r3, [r7, #23]
      break;
 80063ea:	e006      	b.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80063ec:	bf00      	nop
 80063ee:	e004      	b.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80063f0:	bf00      	nop
 80063f2:	e002      	b.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80063f4:	bf00      	nop
 80063f6:	e000      	b.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80063f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063fa:	7dfb      	ldrb	r3, [r7, #23]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d109      	bne.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006400:	4b2d      	ldr	r3, [pc, #180]	; (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006402:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006404:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800640c:	492a      	ldr	r1, [pc, #168]	; (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800640e:	4313      	orrs	r3, r2
 8006410:	650b      	str	r3, [r1, #80]	; 0x50
 8006412:	e001      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006414:	7dfb      	ldrb	r3, [r7, #23]
 8006416:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006420:	2b00      	cmp	r3, #0
 8006422:	d04d      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800642a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800642e:	d02e      	beq.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8006430:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006434:	d828      	bhi.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800643a:	d02a      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800643c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006440:	d822      	bhi.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006442:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006446:	d026      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8006448:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800644c:	d81c      	bhi.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800644e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006452:	d010      	beq.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006454:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006458:	d816      	bhi.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800645a:	2b00      	cmp	r3, #0
 800645c:	d01d      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800645e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006462:	d111      	bne.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	3304      	adds	r3, #4
 8006468:	2101      	movs	r1, #1
 800646a:	4618      	mov	r0, r3
 800646c:	f000 ff84 	bl	8007378 <RCCEx_PLL2_Config>
 8006470:	4603      	mov	r3, r0
 8006472:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006474:	e012      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	3324      	adds	r3, #36	; 0x24
 800647a:	2101      	movs	r1, #1
 800647c:	4618      	mov	r0, r3
 800647e:	f001 f82d 	bl	80074dc <RCCEx_PLL3_Config>
 8006482:	4603      	mov	r3, r0
 8006484:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006486:	e009      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	75fb      	strb	r3, [r7, #23]
      break;
 800648c:	e006      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800648e:	bf00      	nop
 8006490:	e004      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006492:	bf00      	nop
 8006494:	e002      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006496:	bf00      	nop
 8006498:	e000      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800649a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800649c:	7dfb      	ldrb	r3, [r7, #23]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d10c      	bne.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80064a2:	4b05      	ldr	r3, [pc, #20]	; (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80064a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064a6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80064b0:	4901      	ldr	r1, [pc, #4]	; (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80064b2:	4313      	orrs	r3, r2
 80064b4:	658b      	str	r3, [r1, #88]	; 0x58
 80064b6:	e003      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80064b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064bc:	7dfb      	ldrb	r3, [r7, #23]
 80064be:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d02f      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064d4:	d00e      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80064d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064da:	d814      	bhi.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x596>
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d015      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80064e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064e4:	d10f      	bne.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064e6:	4baf      	ldr	r3, [pc, #700]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80064e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ea:	4aae      	ldr	r2, [pc, #696]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80064ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80064f2:	e00c      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	3304      	adds	r3, #4
 80064f8:	2101      	movs	r1, #1
 80064fa:	4618      	mov	r0, r3
 80064fc:	f000 ff3c 	bl	8007378 <RCCEx_PLL2_Config>
 8006500:	4603      	mov	r3, r0
 8006502:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006504:	e003      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	75fb      	strb	r3, [r7, #23]
      break;
 800650a:	e000      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800650c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800650e:	7dfb      	ldrb	r3, [r7, #23]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d109      	bne.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006514:	4ba3      	ldr	r3, [pc, #652]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006518:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006520:	49a0      	ldr	r1, [pc, #640]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006522:	4313      	orrs	r3, r2
 8006524:	650b      	str	r3, [r1, #80]	; 0x50
 8006526:	e001      	b.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006528:	7dfb      	ldrb	r3, [r7, #23]
 800652a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006534:	2b00      	cmp	r3, #0
 8006536:	d032      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800653c:	2b03      	cmp	r3, #3
 800653e:	d81b      	bhi.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006540:	a201      	add	r2, pc, #4	; (adr r2, 8006548 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8006542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006546:	bf00      	nop
 8006548:	0800657f 	.word	0x0800657f
 800654c:	08006559 	.word	0x08006559
 8006550:	08006567 	.word	0x08006567
 8006554:	0800657f 	.word	0x0800657f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006558:	4b92      	ldr	r3, [pc, #584]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800655a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655c:	4a91      	ldr	r2, [pc, #580]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800655e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006562:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006564:	e00c      	b.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	3304      	adds	r3, #4
 800656a:	2102      	movs	r1, #2
 800656c:	4618      	mov	r0, r3
 800656e:	f000 ff03 	bl	8007378 <RCCEx_PLL2_Config>
 8006572:	4603      	mov	r3, r0
 8006574:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006576:	e003      	b.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	75fb      	strb	r3, [r7, #23]
      break;
 800657c:	e000      	b.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800657e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006580:	7dfb      	ldrb	r3, [r7, #23]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d109      	bne.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006586:	4b87      	ldr	r3, [pc, #540]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800658a:	f023 0203 	bic.w	r2, r3, #3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006592:	4984      	ldr	r1, [pc, #528]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006594:	4313      	orrs	r3, r2
 8006596:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006598:	e001      	b.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800659a:	7dfb      	ldrb	r3, [r7, #23]
 800659c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f000 8086 	beq.w	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80065ac:	4b7e      	ldr	r3, [pc, #504]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a7d      	ldr	r2, [pc, #500]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80065b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80065b8:	f7fc fe6c 	bl	8003294 <HAL_GetTick>
 80065bc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80065be:	e009      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065c0:	f7fc fe68 	bl	8003294 <HAL_GetTick>
 80065c4:	4602      	mov	r2, r0
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	2b64      	cmp	r3, #100	; 0x64
 80065cc:	d902      	bls.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	75fb      	strb	r3, [r7, #23]
        break;
 80065d2:	e005      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80065d4:	4b74      	ldr	r3, [pc, #464]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d0ef      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80065e0:	7dfb      	ldrb	r3, [r7, #23]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d166      	bne.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80065e6:	4b6f      	ldr	r3, [pc, #444]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80065e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80065f0:	4053      	eors	r3, r2
 80065f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d013      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80065fa:	4b6a      	ldr	r3, [pc, #424]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80065fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006602:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006604:	4b67      	ldr	r3, [pc, #412]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006608:	4a66      	ldr	r2, [pc, #408]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800660a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800660e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006610:	4b64      	ldr	r3, [pc, #400]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006614:	4a63      	ldr	r2, [pc, #396]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800661a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800661c:	4a61      	ldr	r2, [pc, #388]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006628:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800662c:	d115      	bne.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800662e:	f7fc fe31 	bl	8003294 <HAL_GetTick>
 8006632:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006634:	e00b      	b.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006636:	f7fc fe2d 	bl	8003294 <HAL_GetTick>
 800663a:	4602      	mov	r2, r0
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	f241 3288 	movw	r2, #5000	; 0x1388
 8006644:	4293      	cmp	r3, r2
 8006646:	d902      	bls.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006648:	2303      	movs	r3, #3
 800664a:	75fb      	strb	r3, [r7, #23]
            break;
 800664c:	e005      	b.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800664e:	4b55      	ldr	r3, [pc, #340]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006652:	f003 0302 	and.w	r3, r3, #2
 8006656:	2b00      	cmp	r3, #0
 8006658:	d0ed      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800665a:	7dfb      	ldrb	r3, [r7, #23]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d126      	bne.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800666a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800666e:	d10d      	bne.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006670:	4b4c      	ldr	r3, [pc, #304]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800667e:	0919      	lsrs	r1, r3, #4
 8006680:	4b4a      	ldr	r3, [pc, #296]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8006682:	400b      	ands	r3, r1
 8006684:	4947      	ldr	r1, [pc, #284]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006686:	4313      	orrs	r3, r2
 8006688:	610b      	str	r3, [r1, #16]
 800668a:	e005      	b.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800668c:	4b45      	ldr	r3, [pc, #276]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	4a44      	ldr	r2, [pc, #272]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006692:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006696:	6113      	str	r3, [r2, #16]
 8006698:	4b42      	ldr	r3, [pc, #264]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800669a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80066a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066a6:	493f      	ldr	r1, [pc, #252]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80066a8:	4313      	orrs	r3, r2
 80066aa:	670b      	str	r3, [r1, #112]	; 0x70
 80066ac:	e004      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80066ae:	7dfb      	ldrb	r3, [r7, #23]
 80066b0:	75bb      	strb	r3, [r7, #22]
 80066b2:	e001      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066b4:	7dfb      	ldrb	r3, [r7, #23]
 80066b6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 0301 	and.w	r3, r3, #1
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f000 8085 	beq.w	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066ca:	2b28      	cmp	r3, #40	; 0x28
 80066cc:	d866      	bhi.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80066ce:	a201      	add	r2, pc, #4	; (adr r2, 80066d4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80066d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d4:	080067b1 	.word	0x080067b1
 80066d8:	0800679d 	.word	0x0800679d
 80066dc:	0800679d 	.word	0x0800679d
 80066e0:	0800679d 	.word	0x0800679d
 80066e4:	0800679d 	.word	0x0800679d
 80066e8:	0800679d 	.word	0x0800679d
 80066ec:	0800679d 	.word	0x0800679d
 80066f0:	0800679d 	.word	0x0800679d
 80066f4:	08006779 	.word	0x08006779
 80066f8:	0800679d 	.word	0x0800679d
 80066fc:	0800679d 	.word	0x0800679d
 8006700:	0800679d 	.word	0x0800679d
 8006704:	0800679d 	.word	0x0800679d
 8006708:	0800679d 	.word	0x0800679d
 800670c:	0800679d 	.word	0x0800679d
 8006710:	0800679d 	.word	0x0800679d
 8006714:	0800678b 	.word	0x0800678b
 8006718:	0800679d 	.word	0x0800679d
 800671c:	0800679d 	.word	0x0800679d
 8006720:	0800679d 	.word	0x0800679d
 8006724:	0800679d 	.word	0x0800679d
 8006728:	0800679d 	.word	0x0800679d
 800672c:	0800679d 	.word	0x0800679d
 8006730:	0800679d 	.word	0x0800679d
 8006734:	080067b1 	.word	0x080067b1
 8006738:	0800679d 	.word	0x0800679d
 800673c:	0800679d 	.word	0x0800679d
 8006740:	0800679d 	.word	0x0800679d
 8006744:	0800679d 	.word	0x0800679d
 8006748:	0800679d 	.word	0x0800679d
 800674c:	0800679d 	.word	0x0800679d
 8006750:	0800679d 	.word	0x0800679d
 8006754:	080067b1 	.word	0x080067b1
 8006758:	0800679d 	.word	0x0800679d
 800675c:	0800679d 	.word	0x0800679d
 8006760:	0800679d 	.word	0x0800679d
 8006764:	0800679d 	.word	0x0800679d
 8006768:	0800679d 	.word	0x0800679d
 800676c:	0800679d 	.word	0x0800679d
 8006770:	0800679d 	.word	0x0800679d
 8006774:	080067b1 	.word	0x080067b1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	3304      	adds	r3, #4
 800677c:	2101      	movs	r1, #1
 800677e:	4618      	mov	r0, r3
 8006780:	f000 fdfa 	bl	8007378 <RCCEx_PLL2_Config>
 8006784:	4603      	mov	r3, r0
 8006786:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006788:	e013      	b.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	3324      	adds	r3, #36	; 0x24
 800678e:	2101      	movs	r1, #1
 8006790:	4618      	mov	r0, r3
 8006792:	f000 fea3 	bl	80074dc <RCCEx_PLL3_Config>
 8006796:	4603      	mov	r3, r0
 8006798:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800679a:	e00a      	b.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	75fb      	strb	r3, [r7, #23]
      break;
 80067a0:	e007      	b.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80067a2:	bf00      	nop
 80067a4:	58024400 	.word	0x58024400
 80067a8:	58024800 	.word	0x58024800
 80067ac:	00ffffcf 	.word	0x00ffffcf
      break;
 80067b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067b2:	7dfb      	ldrb	r3, [r7, #23]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d109      	bne.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80067b8:	4b96      	ldr	r3, [pc, #600]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80067ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067bc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067c4:	4993      	ldr	r1, [pc, #588]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80067c6:	4313      	orrs	r3, r2
 80067c8:	654b      	str	r3, [r1, #84]	; 0x54
 80067ca:	e001      	b.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067cc:	7dfb      	ldrb	r3, [r7, #23]
 80067ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 0302 	and.w	r3, r3, #2
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d038      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067e0:	2b05      	cmp	r3, #5
 80067e2:	d821      	bhi.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80067e4:	a201      	add	r2, pc, #4	; (adr r2, 80067ec <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80067e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ea:	bf00      	nop
 80067ec:	0800682f 	.word	0x0800682f
 80067f0:	08006805 	.word	0x08006805
 80067f4:	08006817 	.word	0x08006817
 80067f8:	0800682f 	.word	0x0800682f
 80067fc:	0800682f 	.word	0x0800682f
 8006800:	0800682f 	.word	0x0800682f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	3304      	adds	r3, #4
 8006808:	2101      	movs	r1, #1
 800680a:	4618      	mov	r0, r3
 800680c:	f000 fdb4 	bl	8007378 <RCCEx_PLL2_Config>
 8006810:	4603      	mov	r3, r0
 8006812:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006814:	e00c      	b.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	3324      	adds	r3, #36	; 0x24
 800681a:	2101      	movs	r1, #1
 800681c:	4618      	mov	r0, r3
 800681e:	f000 fe5d 	bl	80074dc <RCCEx_PLL3_Config>
 8006822:	4603      	mov	r3, r0
 8006824:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006826:	e003      	b.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	75fb      	strb	r3, [r7, #23]
      break;
 800682c:	e000      	b.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800682e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006830:	7dfb      	ldrb	r3, [r7, #23]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d109      	bne.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006836:	4b77      	ldr	r3, [pc, #476]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800683a:	f023 0207 	bic.w	r2, r3, #7
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006842:	4974      	ldr	r1, [pc, #464]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006844:	4313      	orrs	r3, r2
 8006846:	654b      	str	r3, [r1, #84]	; 0x54
 8006848:	e001      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800684a:	7dfb      	ldrb	r3, [r7, #23]
 800684c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 0304 	and.w	r3, r3, #4
 8006856:	2b00      	cmp	r3, #0
 8006858:	d03a      	beq.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006860:	2b05      	cmp	r3, #5
 8006862:	d821      	bhi.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8006864:	a201      	add	r2, pc, #4	; (adr r2, 800686c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8006866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800686a:	bf00      	nop
 800686c:	080068af 	.word	0x080068af
 8006870:	08006885 	.word	0x08006885
 8006874:	08006897 	.word	0x08006897
 8006878:	080068af 	.word	0x080068af
 800687c:	080068af 	.word	0x080068af
 8006880:	080068af 	.word	0x080068af
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	3304      	adds	r3, #4
 8006888:	2101      	movs	r1, #1
 800688a:	4618      	mov	r0, r3
 800688c:	f000 fd74 	bl	8007378 <RCCEx_PLL2_Config>
 8006890:	4603      	mov	r3, r0
 8006892:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006894:	e00c      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	3324      	adds	r3, #36	; 0x24
 800689a:	2101      	movs	r1, #1
 800689c:	4618      	mov	r0, r3
 800689e:	f000 fe1d 	bl	80074dc <RCCEx_PLL3_Config>
 80068a2:	4603      	mov	r3, r0
 80068a4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80068a6:	e003      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	75fb      	strb	r3, [r7, #23]
      break;
 80068ac:	e000      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80068ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068b0:	7dfb      	ldrb	r3, [r7, #23]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d10a      	bne.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80068b6:	4b57      	ldr	r3, [pc, #348]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80068b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ba:	f023 0207 	bic.w	r2, r3, #7
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068c4:	4953      	ldr	r1, [pc, #332]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80068c6:	4313      	orrs	r3, r2
 80068c8:	658b      	str	r3, [r1, #88]	; 0x58
 80068ca:	e001      	b.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068cc:	7dfb      	ldrb	r3, [r7, #23]
 80068ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 0320 	and.w	r3, r3, #32
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d04b      	beq.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80068e6:	d02e      	beq.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80068e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80068ec:	d828      	bhi.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80068ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068f2:	d02a      	beq.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80068f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068f8:	d822      	bhi.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80068fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80068fe:	d026      	beq.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006900:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006904:	d81c      	bhi.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006906:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800690a:	d010      	beq.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800690c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006910:	d816      	bhi.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006912:	2b00      	cmp	r3, #0
 8006914:	d01d      	beq.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8006916:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800691a:	d111      	bne.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	3304      	adds	r3, #4
 8006920:	2100      	movs	r1, #0
 8006922:	4618      	mov	r0, r3
 8006924:	f000 fd28 	bl	8007378 <RCCEx_PLL2_Config>
 8006928:	4603      	mov	r3, r0
 800692a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800692c:	e012      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	3324      	adds	r3, #36	; 0x24
 8006932:	2102      	movs	r1, #2
 8006934:	4618      	mov	r0, r3
 8006936:	f000 fdd1 	bl	80074dc <RCCEx_PLL3_Config>
 800693a:	4603      	mov	r3, r0
 800693c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800693e:	e009      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	75fb      	strb	r3, [r7, #23]
      break;
 8006944:	e006      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006946:	bf00      	nop
 8006948:	e004      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800694a:	bf00      	nop
 800694c:	e002      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800694e:	bf00      	nop
 8006950:	e000      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006952:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006954:	7dfb      	ldrb	r3, [r7, #23]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d10a      	bne.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800695a:	4b2e      	ldr	r3, [pc, #184]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800695c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800695e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006968:	492a      	ldr	r1, [pc, #168]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800696a:	4313      	orrs	r3, r2
 800696c:	654b      	str	r3, [r1, #84]	; 0x54
 800696e:	e001      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006970:	7dfb      	ldrb	r3, [r7, #23]
 8006972:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800697c:	2b00      	cmp	r3, #0
 800697e:	d04d      	beq.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006986:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800698a:	d02e      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800698c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006990:	d828      	bhi.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006996:	d02a      	beq.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006998:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800699c:	d822      	bhi.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800699e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069a2:	d026      	beq.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80069a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069a8:	d81c      	bhi.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80069aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069ae:	d010      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80069b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069b4:	d816      	bhi.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d01d      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80069ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069be:	d111      	bne.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	3304      	adds	r3, #4
 80069c4:	2100      	movs	r1, #0
 80069c6:	4618      	mov	r0, r3
 80069c8:	f000 fcd6 	bl	8007378 <RCCEx_PLL2_Config>
 80069cc:	4603      	mov	r3, r0
 80069ce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80069d0:	e012      	b.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	3324      	adds	r3, #36	; 0x24
 80069d6:	2102      	movs	r1, #2
 80069d8:	4618      	mov	r0, r3
 80069da:	f000 fd7f 	bl	80074dc <RCCEx_PLL3_Config>
 80069de:	4603      	mov	r3, r0
 80069e0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80069e2:	e009      	b.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	75fb      	strb	r3, [r7, #23]
      break;
 80069e8:	e006      	b.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80069ea:	bf00      	nop
 80069ec:	e004      	b.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80069ee:	bf00      	nop
 80069f0:	e002      	b.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80069f2:	bf00      	nop
 80069f4:	e000      	b.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80069f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069f8:	7dfb      	ldrb	r3, [r7, #23]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d10c      	bne.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80069fe:	4b05      	ldr	r3, [pc, #20]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a02:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a0c:	4901      	ldr	r1, [pc, #4]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	658b      	str	r3, [r1, #88]	; 0x58
 8006a12:	e003      	b.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006a14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a18:	7dfb      	ldrb	r3, [r7, #23]
 8006a1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d04b      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a2e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006a32:	d02e      	beq.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006a34:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006a38:	d828      	bhi.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006a3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a3e:	d02a      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006a40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a44:	d822      	bhi.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006a46:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006a4a:	d026      	beq.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8006a4c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006a50:	d81c      	bhi.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006a52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a56:	d010      	beq.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006a58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a5c:	d816      	bhi.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d01d      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8006a62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a66:	d111      	bne.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	3304      	adds	r3, #4
 8006a6c:	2100      	movs	r1, #0
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f000 fc82 	bl	8007378 <RCCEx_PLL2_Config>
 8006a74:	4603      	mov	r3, r0
 8006a76:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006a78:	e012      	b.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	3324      	adds	r3, #36	; 0x24
 8006a7e:	2102      	movs	r1, #2
 8006a80:	4618      	mov	r0, r3
 8006a82:	f000 fd2b 	bl	80074dc <RCCEx_PLL3_Config>
 8006a86:	4603      	mov	r3, r0
 8006a88:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006a8a:	e009      	b.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	75fb      	strb	r3, [r7, #23]
      break;
 8006a90:	e006      	b.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006a92:	bf00      	nop
 8006a94:	e004      	b.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006a96:	bf00      	nop
 8006a98:	e002      	b.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006a9a:	bf00      	nop
 8006a9c:	e000      	b.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006a9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006aa0:	7dfb      	ldrb	r3, [r7, #23]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d10a      	bne.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006aa6:	4b9d      	ldr	r3, [pc, #628]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aaa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ab4:	4999      	ldr	r1, [pc, #612]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	658b      	str	r3, [r1, #88]	; 0x58
 8006aba:	e001      	b.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006abc:	7dfb      	ldrb	r3, [r7, #23]
 8006abe:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 0308 	and.w	r3, r3, #8
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d01a      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ad6:	d10a      	bne.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	3324      	adds	r3, #36	; 0x24
 8006adc:	2102      	movs	r1, #2
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f000 fcfc 	bl	80074dc <RCCEx_PLL3_Config>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d001      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006aee:	4b8b      	ldr	r3, [pc, #556]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006af2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006afc:	4987      	ldr	r1, [pc, #540]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006afe:	4313      	orrs	r3, r2
 8006b00:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f003 0310 	and.w	r3, r3, #16
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d01a      	beq.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b18:	d10a      	bne.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	3324      	adds	r3, #36	; 0x24
 8006b1e:	2102      	movs	r1, #2
 8006b20:	4618      	mov	r0, r3
 8006b22:	f000 fcdb 	bl	80074dc <RCCEx_PLL3_Config>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d001      	beq.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006b30:	4b7a      	ldr	r3, [pc, #488]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b3e:	4977      	ldr	r1, [pc, #476]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006b40:	4313      	orrs	r3, r2
 8006b42:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d034      	beq.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006b56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b5a:	d01d      	beq.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8006b5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b60:	d817      	bhi.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d003      	beq.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006b66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b6a:	d009      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8006b6c:	e011      	b.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	3304      	adds	r3, #4
 8006b72:	2100      	movs	r1, #0
 8006b74:	4618      	mov	r0, r3
 8006b76:	f000 fbff 	bl	8007378 <RCCEx_PLL2_Config>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006b7e:	e00c      	b.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	3324      	adds	r3, #36	; 0x24
 8006b84:	2102      	movs	r1, #2
 8006b86:	4618      	mov	r0, r3
 8006b88:	f000 fca8 	bl	80074dc <RCCEx_PLL3_Config>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006b90:	e003      	b.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	75fb      	strb	r3, [r7, #23]
      break;
 8006b96:	e000      	b.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8006b98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b9a:	7dfb      	ldrb	r3, [r7, #23]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d10a      	bne.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ba0:	4b5e      	ldr	r3, [pc, #376]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ba4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006bae:	495b      	ldr	r1, [pc, #364]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	658b      	str	r3, [r1, #88]	; 0x58
 8006bb4:	e001      	b.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bb6:	7dfb      	ldrb	r3, [r7, #23]
 8006bb8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d033      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bcc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006bd0:	d01c      	beq.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8006bd2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006bd6:	d816      	bhi.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8006bd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bdc:	d003      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8006bde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006be2:	d007      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8006be4:	e00f      	b.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006be6:	4b4d      	ldr	r3, [pc, #308]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bea:	4a4c      	ldr	r2, [pc, #304]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bf0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006bf2:	e00c      	b.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	3324      	adds	r3, #36	; 0x24
 8006bf8:	2101      	movs	r1, #1
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f000 fc6e 	bl	80074dc <RCCEx_PLL3_Config>
 8006c00:	4603      	mov	r3, r0
 8006c02:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006c04:	e003      	b.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	75fb      	strb	r3, [r7, #23]
      break;
 8006c0a:	e000      	b.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8006c0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c0e:	7dfb      	ldrb	r3, [r7, #23]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d10a      	bne.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c14:	4b41      	ldr	r3, [pc, #260]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c22:	493e      	ldr	r1, [pc, #248]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006c24:	4313      	orrs	r3, r2
 8006c26:	654b      	str	r3, [r1, #84]	; 0x54
 8006c28:	e001      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c2a:	7dfb      	ldrb	r3, [r7, #23]
 8006c2c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d029      	beq.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d003      	beq.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8006c42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c46:	d007      	beq.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8006c48:	e00f      	b.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c4a:	4b34      	ldr	r3, [pc, #208]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c4e:	4a33      	ldr	r2, [pc, #204]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006c56:	e00b      	b.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	3304      	adds	r3, #4
 8006c5c:	2102      	movs	r1, #2
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f000 fb8a 	bl	8007378 <RCCEx_PLL2_Config>
 8006c64:	4603      	mov	r3, r0
 8006c66:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006c68:	e002      	b.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	75fb      	strb	r3, [r7, #23]
      break;
 8006c6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c70:	7dfb      	ldrb	r3, [r7, #23]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d109      	bne.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006c76:	4b29      	ldr	r3, [pc, #164]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c7a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c82:	4926      	ldr	r1, [pc, #152]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006c84:	4313      	orrs	r3, r2
 8006c86:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006c88:	e001      	b.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c8a:	7dfb      	ldrb	r3, [r7, #23]
 8006c8c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00a      	beq.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	3324      	adds	r3, #36	; 0x24
 8006c9e:	2102      	movs	r1, #2
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f000 fc1b 	bl	80074dc <RCCEx_PLL3_Config>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d001      	beq.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d033      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cc4:	d017      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006cc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cca:	d811      	bhi.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cd0:	d013      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006cd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cd6:	d80b      	bhi.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d010      	beq.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8006cdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ce0:	d106      	bne.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ce2:	4b0e      	ldr	r3, [pc, #56]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce6:	4a0d      	ldr	r2, [pc, #52]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006cee:	e007      	b.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	75fb      	strb	r3, [r7, #23]
      break;
 8006cf4:	e004      	b.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006cf6:	bf00      	nop
 8006cf8:	e002      	b.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006cfa:	bf00      	nop
 8006cfc:	e000      	b.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006cfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d00:	7dfb      	ldrb	r3, [r7, #23]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d10c      	bne.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d06:	4b05      	ldr	r3, [pc, #20]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d12:	4902      	ldr	r1, [pc, #8]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006d14:	4313      	orrs	r3, r2
 8006d16:	654b      	str	r3, [r1, #84]	; 0x54
 8006d18:	e004      	b.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8006d1a:	bf00      	nop
 8006d1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d20:	7dfb      	ldrb	r3, [r7, #23]
 8006d22:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d008      	beq.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006d30:	4b31      	ldr	r3, [pc, #196]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d34:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d3c:	492e      	ldr	r1, [pc, #184]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d009      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006d4e:	4b2a      	ldr	r3, [pc, #168]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006d5c:	4926      	ldr	r1, [pc, #152]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d008      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006d6e:	4b22      	ldr	r3, [pc, #136]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006d70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d72:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d7a:	491f      	ldr	r1, [pc, #124]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d00d      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006d8c:	4b1a      	ldr	r3, [pc, #104]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	4a19      	ldr	r2, [pc, #100]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006d92:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d96:	6113      	str	r3, [r2, #16]
 8006d98:	4b17      	ldr	r3, [pc, #92]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006d9a:	691a      	ldr	r2, [r3, #16]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006da2:	4915      	ldr	r1, [pc, #84]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006da4:	4313      	orrs	r3, r2
 8006da6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	da08      	bge.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006db0:	4b11      	ldr	r3, [pc, #68]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006db4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dbc:	490e      	ldr	r1, [pc, #56]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d009      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006dce:	4b0a      	ldr	r3, [pc, #40]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dd2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ddc:	4906      	ldr	r1, [pc, #24]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006dde:	4313      	orrs	r3, r2
 8006de0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006de2:	7dbb      	ldrb	r3, [r7, #22]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d101      	bne.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8006de8:	2300      	movs	r3, #0
 8006dea:	e000      	b.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3718      	adds	r7, #24
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	58024400 	.word	0x58024400

08006dfc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006e00:	f7ff f85a 	bl	8005eb8 <HAL_RCC_GetHCLKFreq>
 8006e04:	4602      	mov	r2, r0
 8006e06:	4b06      	ldr	r3, [pc, #24]	; (8006e20 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006e08:	6a1b      	ldr	r3, [r3, #32]
 8006e0a:	091b      	lsrs	r3, r3, #4
 8006e0c:	f003 0307 	and.w	r3, r3, #7
 8006e10:	4904      	ldr	r1, [pc, #16]	; (8006e24 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006e12:	5ccb      	ldrb	r3, [r1, r3]
 8006e14:	f003 031f 	and.w	r3, r3, #31
 8006e18:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	58024400 	.word	0x58024400
 8006e24:	080098cc 	.word	0x080098cc

08006e28 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b089      	sub	sp, #36	; 0x24
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e30:	4ba1      	ldr	r3, [pc, #644]	; (80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e34:	f003 0303 	and.w	r3, r3, #3
 8006e38:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006e3a:	4b9f      	ldr	r3, [pc, #636]	; (80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e3e:	0b1b      	lsrs	r3, r3, #12
 8006e40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e44:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006e46:	4b9c      	ldr	r3, [pc, #624]	; (80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e4a:	091b      	lsrs	r3, r3, #4
 8006e4c:	f003 0301 	and.w	r3, r3, #1
 8006e50:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006e52:	4b99      	ldr	r3, [pc, #612]	; (80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e56:	08db      	lsrs	r3, r3, #3
 8006e58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e5c:	693a      	ldr	r2, [r7, #16]
 8006e5e:	fb02 f303 	mul.w	r3, r2, r3
 8006e62:	ee07 3a90 	vmov	s15, r3
 8006e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e6a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f000 8111 	beq.w	8007098 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	2b02      	cmp	r3, #2
 8006e7a:	f000 8083 	beq.w	8006f84 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	f200 80a1 	bhi.w	8006fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d003      	beq.n	8006e94 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d056      	beq.n	8006f40 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006e92:	e099      	b.n	8006fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e94:	4b88      	ldr	r3, [pc, #544]	; (80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 0320 	and.w	r3, r3, #32
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d02d      	beq.n	8006efc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ea0:	4b85      	ldr	r3, [pc, #532]	; (80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	08db      	lsrs	r3, r3, #3
 8006ea6:	f003 0303 	and.w	r3, r3, #3
 8006eaa:	4a84      	ldr	r2, [pc, #528]	; (80070bc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006eac:	fa22 f303 	lsr.w	r3, r2, r3
 8006eb0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	ee07 3a90 	vmov	s15, r3
 8006eb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	ee07 3a90 	vmov	s15, r3
 8006ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eca:	4b7b      	ldr	r3, [pc, #492]	; (80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ed2:	ee07 3a90 	vmov	s15, r3
 8006ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eda:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ede:	eddf 5a78 	vldr	s11, [pc, #480]	; 80070c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ef6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006efa:	e087      	b.n	800700c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	ee07 3a90 	vmov	s15, r3
 8006f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f06:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80070c4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f0e:	4b6a      	ldr	r3, [pc, #424]	; (80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f16:	ee07 3a90 	vmov	s15, r3
 8006f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f22:	eddf 5a67 	vldr	s11, [pc, #412]	; 80070c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f3e:	e065      	b.n	800700c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	ee07 3a90 	vmov	s15, r3
 8006f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f4a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80070c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f52:	4b59      	ldr	r3, [pc, #356]	; (80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f5a:	ee07 3a90 	vmov	s15, r3
 8006f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f62:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f66:	eddf 5a56 	vldr	s11, [pc, #344]	; 80070c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f82:	e043      	b.n	800700c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	ee07 3a90 	vmov	s15, r3
 8006f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f8e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80070cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006f92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f96:	4b48      	ldr	r3, [pc, #288]	; (80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f9e:	ee07 3a90 	vmov	s15, r3
 8006fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006faa:	eddf 5a45 	vldr	s11, [pc, #276]	; 80070c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006fc6:	e021      	b.n	800700c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	ee07 3a90 	vmov	s15, r3
 8006fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fd2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80070c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006fd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fda:	4b37      	ldr	r3, [pc, #220]	; (80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fe2:	ee07 3a90 	vmov	s15, r3
 8006fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fea:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fee:	eddf 5a34 	vldr	s11, [pc, #208]	; 80070c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ffa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007006:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800700a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800700c:	4b2a      	ldr	r3, [pc, #168]	; (80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800700e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007010:	0a5b      	lsrs	r3, r3, #9
 8007012:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007016:	ee07 3a90 	vmov	s15, r3
 800701a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800701e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007022:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007026:	edd7 6a07 	vldr	s13, [r7, #28]
 800702a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800702e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007032:	ee17 2a90 	vmov	r2, s15
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800703a:	4b1f      	ldr	r3, [pc, #124]	; (80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800703c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800703e:	0c1b      	lsrs	r3, r3, #16
 8007040:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007044:	ee07 3a90 	vmov	s15, r3
 8007048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800704c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007050:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007054:	edd7 6a07 	vldr	s13, [r7, #28]
 8007058:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800705c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007060:	ee17 2a90 	vmov	r2, s15
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007068:	4b13      	ldr	r3, [pc, #76]	; (80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800706a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706c:	0e1b      	lsrs	r3, r3, #24
 800706e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007072:	ee07 3a90 	vmov	s15, r3
 8007076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800707a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800707e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007082:	edd7 6a07 	vldr	s13, [r7, #28]
 8007086:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800708a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800708e:	ee17 2a90 	vmov	r2, s15
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007096:	e008      	b.n	80070aa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	609a      	str	r2, [r3, #8]
}
 80070aa:	bf00      	nop
 80070ac:	3724      	adds	r7, #36	; 0x24
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	58024400 	.word	0x58024400
 80070bc:	03d09000 	.word	0x03d09000
 80070c0:	46000000 	.word	0x46000000
 80070c4:	4c742400 	.word	0x4c742400
 80070c8:	4a742400 	.word	0x4a742400
 80070cc:	4af42400 	.word	0x4af42400

080070d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b089      	sub	sp, #36	; 0x24
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070d8:	4ba1      	ldr	r3, [pc, #644]	; (8007360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070dc:	f003 0303 	and.w	r3, r3, #3
 80070e0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80070e2:	4b9f      	ldr	r3, [pc, #636]	; (8007360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e6:	0d1b      	lsrs	r3, r3, #20
 80070e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070ec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80070ee:	4b9c      	ldr	r3, [pc, #624]	; (8007360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f2:	0a1b      	lsrs	r3, r3, #8
 80070f4:	f003 0301 	and.w	r3, r3, #1
 80070f8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80070fa:	4b99      	ldr	r3, [pc, #612]	; (8007360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070fe:	08db      	lsrs	r3, r3, #3
 8007100:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007104:	693a      	ldr	r2, [r7, #16]
 8007106:	fb02 f303 	mul.w	r3, r2, r3
 800710a:	ee07 3a90 	vmov	s15, r3
 800710e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007112:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	2b00      	cmp	r3, #0
 800711a:	f000 8111 	beq.w	8007340 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	2b02      	cmp	r3, #2
 8007122:	f000 8083 	beq.w	800722c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	2b02      	cmp	r3, #2
 800712a:	f200 80a1 	bhi.w	8007270 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d003      	beq.n	800713c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	2b01      	cmp	r3, #1
 8007138:	d056      	beq.n	80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800713a:	e099      	b.n	8007270 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800713c:	4b88      	ldr	r3, [pc, #544]	; (8007360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f003 0320 	and.w	r3, r3, #32
 8007144:	2b00      	cmp	r3, #0
 8007146:	d02d      	beq.n	80071a4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007148:	4b85      	ldr	r3, [pc, #532]	; (8007360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	08db      	lsrs	r3, r3, #3
 800714e:	f003 0303 	and.w	r3, r3, #3
 8007152:	4a84      	ldr	r2, [pc, #528]	; (8007364 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007154:	fa22 f303 	lsr.w	r3, r2, r3
 8007158:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	ee07 3a90 	vmov	s15, r3
 8007160:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	ee07 3a90 	vmov	s15, r3
 800716a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800716e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007172:	4b7b      	ldr	r3, [pc, #492]	; (8007360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800717a:	ee07 3a90 	vmov	s15, r3
 800717e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007182:	ed97 6a03 	vldr	s12, [r7, #12]
 8007186:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800718a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800718e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007192:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800719a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800719e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80071a2:	e087      	b.n	80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	ee07 3a90 	vmov	s15, r3
 80071aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800736c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80071b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071b6:	4b6a      	ldr	r3, [pc, #424]	; (8007360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071be:	ee07 3a90 	vmov	s15, r3
 80071c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80071ca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071e6:	e065      	b.n	80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	ee07 3a90 	vmov	s15, r3
 80071ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071f2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007370 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80071f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071fa:	4b59      	ldr	r3, [pc, #356]	; (8007360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007202:	ee07 3a90 	vmov	s15, r3
 8007206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800720a:	ed97 6a03 	vldr	s12, [r7, #12]
 800720e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007212:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007216:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800721a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800721e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007226:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800722a:	e043      	b.n	80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	ee07 3a90 	vmov	s15, r3
 8007232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007236:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007374 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800723a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800723e:	4b48      	ldr	r3, [pc, #288]	; (8007360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007246:	ee07 3a90 	vmov	s15, r3
 800724a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800724e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007252:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007256:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800725a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800725e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800726a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800726e:	e021      	b.n	80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	ee07 3a90 	vmov	s15, r3
 8007276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800727a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007370 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800727e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007282:	4b37      	ldr	r3, [pc, #220]	; (8007360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800728a:	ee07 3a90 	vmov	s15, r3
 800728e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007292:	ed97 6a03 	vldr	s12, [r7, #12]
 8007296:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007368 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800729a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800729e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072b2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80072b4:	4b2a      	ldr	r3, [pc, #168]	; (8007360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b8:	0a5b      	lsrs	r3, r3, #9
 80072ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072be:	ee07 3a90 	vmov	s15, r3
 80072c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80072d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072da:	ee17 2a90 	vmov	r2, s15
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80072e2:	4b1f      	ldr	r3, [pc, #124]	; (8007360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e6:	0c1b      	lsrs	r3, r3, #16
 80072e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072ec:	ee07 3a90 	vmov	s15, r3
 80072f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007300:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007304:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007308:	ee17 2a90 	vmov	r2, s15
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007310:	4b13      	ldr	r3, [pc, #76]	; (8007360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007314:	0e1b      	lsrs	r3, r3, #24
 8007316:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800731a:	ee07 3a90 	vmov	s15, r3
 800731e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007322:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007326:	ee37 7a87 	vadd.f32	s14, s15, s14
 800732a:	edd7 6a07 	vldr	s13, [r7, #28]
 800732e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007332:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007336:	ee17 2a90 	vmov	r2, s15
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800733e:	e008      	b.n	8007352 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	609a      	str	r2, [r3, #8]
}
 8007352:	bf00      	nop
 8007354:	3724      	adds	r7, #36	; 0x24
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	58024400 	.word	0x58024400
 8007364:	03d09000 	.word	0x03d09000
 8007368:	46000000 	.word	0x46000000
 800736c:	4c742400 	.word	0x4c742400
 8007370:	4a742400 	.word	0x4a742400
 8007374:	4af42400 	.word	0x4af42400

08007378 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007382:	2300      	movs	r3, #0
 8007384:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007386:	4b53      	ldr	r3, [pc, #332]	; (80074d4 <RCCEx_PLL2_Config+0x15c>)
 8007388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800738a:	f003 0303 	and.w	r3, r3, #3
 800738e:	2b03      	cmp	r3, #3
 8007390:	d101      	bne.n	8007396 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	e099      	b.n	80074ca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007396:	4b4f      	ldr	r3, [pc, #316]	; (80074d4 <RCCEx_PLL2_Config+0x15c>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a4e      	ldr	r2, [pc, #312]	; (80074d4 <RCCEx_PLL2_Config+0x15c>)
 800739c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80073a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073a2:	f7fb ff77 	bl	8003294 <HAL_GetTick>
 80073a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80073a8:	e008      	b.n	80073bc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80073aa:	f7fb ff73 	bl	8003294 <HAL_GetTick>
 80073ae:	4602      	mov	r2, r0
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	1ad3      	subs	r3, r2, r3
 80073b4:	2b02      	cmp	r3, #2
 80073b6:	d901      	bls.n	80073bc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80073b8:	2303      	movs	r3, #3
 80073ba:	e086      	b.n	80074ca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80073bc:	4b45      	ldr	r3, [pc, #276]	; (80074d4 <RCCEx_PLL2_Config+0x15c>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d1f0      	bne.n	80073aa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80073c8:	4b42      	ldr	r3, [pc, #264]	; (80074d4 <RCCEx_PLL2_Config+0x15c>)
 80073ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073cc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	031b      	lsls	r3, r3, #12
 80073d6:	493f      	ldr	r1, [pc, #252]	; (80074d4 <RCCEx_PLL2_Config+0x15c>)
 80073d8:	4313      	orrs	r3, r2
 80073da:	628b      	str	r3, [r1, #40]	; 0x28
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	3b01      	subs	r3, #1
 80073e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	3b01      	subs	r3, #1
 80073ec:	025b      	lsls	r3, r3, #9
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	431a      	orrs	r2, r3
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	3b01      	subs	r3, #1
 80073f8:	041b      	lsls	r3, r3, #16
 80073fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80073fe:	431a      	orrs	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	3b01      	subs	r3, #1
 8007406:	061b      	lsls	r3, r3, #24
 8007408:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800740c:	4931      	ldr	r1, [pc, #196]	; (80074d4 <RCCEx_PLL2_Config+0x15c>)
 800740e:	4313      	orrs	r3, r2
 8007410:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007412:	4b30      	ldr	r3, [pc, #192]	; (80074d4 <RCCEx_PLL2_Config+0x15c>)
 8007414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007416:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	695b      	ldr	r3, [r3, #20]
 800741e:	492d      	ldr	r1, [pc, #180]	; (80074d4 <RCCEx_PLL2_Config+0x15c>)
 8007420:	4313      	orrs	r3, r2
 8007422:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007424:	4b2b      	ldr	r3, [pc, #172]	; (80074d4 <RCCEx_PLL2_Config+0x15c>)
 8007426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007428:	f023 0220 	bic.w	r2, r3, #32
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	699b      	ldr	r3, [r3, #24]
 8007430:	4928      	ldr	r1, [pc, #160]	; (80074d4 <RCCEx_PLL2_Config+0x15c>)
 8007432:	4313      	orrs	r3, r2
 8007434:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007436:	4b27      	ldr	r3, [pc, #156]	; (80074d4 <RCCEx_PLL2_Config+0x15c>)
 8007438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800743a:	4a26      	ldr	r2, [pc, #152]	; (80074d4 <RCCEx_PLL2_Config+0x15c>)
 800743c:	f023 0310 	bic.w	r3, r3, #16
 8007440:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007442:	4b24      	ldr	r3, [pc, #144]	; (80074d4 <RCCEx_PLL2_Config+0x15c>)
 8007444:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007446:	4b24      	ldr	r3, [pc, #144]	; (80074d8 <RCCEx_PLL2_Config+0x160>)
 8007448:	4013      	ands	r3, r2
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	69d2      	ldr	r2, [r2, #28]
 800744e:	00d2      	lsls	r2, r2, #3
 8007450:	4920      	ldr	r1, [pc, #128]	; (80074d4 <RCCEx_PLL2_Config+0x15c>)
 8007452:	4313      	orrs	r3, r2
 8007454:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007456:	4b1f      	ldr	r3, [pc, #124]	; (80074d4 <RCCEx_PLL2_Config+0x15c>)
 8007458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800745a:	4a1e      	ldr	r2, [pc, #120]	; (80074d4 <RCCEx_PLL2_Config+0x15c>)
 800745c:	f043 0310 	orr.w	r3, r3, #16
 8007460:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d106      	bne.n	8007476 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007468:	4b1a      	ldr	r3, [pc, #104]	; (80074d4 <RCCEx_PLL2_Config+0x15c>)
 800746a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746c:	4a19      	ldr	r2, [pc, #100]	; (80074d4 <RCCEx_PLL2_Config+0x15c>)
 800746e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007472:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007474:	e00f      	b.n	8007496 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	2b01      	cmp	r3, #1
 800747a:	d106      	bne.n	800748a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800747c:	4b15      	ldr	r3, [pc, #84]	; (80074d4 <RCCEx_PLL2_Config+0x15c>)
 800747e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007480:	4a14      	ldr	r2, [pc, #80]	; (80074d4 <RCCEx_PLL2_Config+0x15c>)
 8007482:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007486:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007488:	e005      	b.n	8007496 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800748a:	4b12      	ldr	r3, [pc, #72]	; (80074d4 <RCCEx_PLL2_Config+0x15c>)
 800748c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748e:	4a11      	ldr	r2, [pc, #68]	; (80074d4 <RCCEx_PLL2_Config+0x15c>)
 8007490:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007494:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007496:	4b0f      	ldr	r3, [pc, #60]	; (80074d4 <RCCEx_PLL2_Config+0x15c>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a0e      	ldr	r2, [pc, #56]	; (80074d4 <RCCEx_PLL2_Config+0x15c>)
 800749c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80074a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074a2:	f7fb fef7 	bl	8003294 <HAL_GetTick>
 80074a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80074a8:	e008      	b.n	80074bc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80074aa:	f7fb fef3 	bl	8003294 <HAL_GetTick>
 80074ae:	4602      	mov	r2, r0
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	1ad3      	subs	r3, r2, r3
 80074b4:	2b02      	cmp	r3, #2
 80074b6:	d901      	bls.n	80074bc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80074b8:	2303      	movs	r3, #3
 80074ba:	e006      	b.n	80074ca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80074bc:	4b05      	ldr	r3, [pc, #20]	; (80074d4 <RCCEx_PLL2_Config+0x15c>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d0f0      	beq.n	80074aa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80074c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3710      	adds	r7, #16
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	58024400 	.word	0x58024400
 80074d8:	ffff0007 	.word	0xffff0007

080074dc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80074e6:	2300      	movs	r3, #0
 80074e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80074ea:	4b53      	ldr	r3, [pc, #332]	; (8007638 <RCCEx_PLL3_Config+0x15c>)
 80074ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ee:	f003 0303 	and.w	r3, r3, #3
 80074f2:	2b03      	cmp	r3, #3
 80074f4:	d101      	bne.n	80074fa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e099      	b.n	800762e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80074fa:	4b4f      	ldr	r3, [pc, #316]	; (8007638 <RCCEx_PLL3_Config+0x15c>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a4e      	ldr	r2, [pc, #312]	; (8007638 <RCCEx_PLL3_Config+0x15c>)
 8007500:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007504:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007506:	f7fb fec5 	bl	8003294 <HAL_GetTick>
 800750a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800750c:	e008      	b.n	8007520 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800750e:	f7fb fec1 	bl	8003294 <HAL_GetTick>
 8007512:	4602      	mov	r2, r0
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	1ad3      	subs	r3, r2, r3
 8007518:	2b02      	cmp	r3, #2
 800751a:	d901      	bls.n	8007520 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800751c:	2303      	movs	r3, #3
 800751e:	e086      	b.n	800762e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007520:	4b45      	ldr	r3, [pc, #276]	; (8007638 <RCCEx_PLL3_Config+0x15c>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007528:	2b00      	cmp	r3, #0
 800752a:	d1f0      	bne.n	800750e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800752c:	4b42      	ldr	r3, [pc, #264]	; (8007638 <RCCEx_PLL3_Config+0x15c>)
 800752e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007530:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	051b      	lsls	r3, r3, #20
 800753a:	493f      	ldr	r1, [pc, #252]	; (8007638 <RCCEx_PLL3_Config+0x15c>)
 800753c:	4313      	orrs	r3, r2
 800753e:	628b      	str	r3, [r1, #40]	; 0x28
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	3b01      	subs	r3, #1
 8007546:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	3b01      	subs	r3, #1
 8007550:	025b      	lsls	r3, r3, #9
 8007552:	b29b      	uxth	r3, r3
 8007554:	431a      	orrs	r2, r3
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	3b01      	subs	r3, #1
 800755c:	041b      	lsls	r3, r3, #16
 800755e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007562:	431a      	orrs	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	3b01      	subs	r3, #1
 800756a:	061b      	lsls	r3, r3, #24
 800756c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007570:	4931      	ldr	r1, [pc, #196]	; (8007638 <RCCEx_PLL3_Config+0x15c>)
 8007572:	4313      	orrs	r3, r2
 8007574:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007576:	4b30      	ldr	r3, [pc, #192]	; (8007638 <RCCEx_PLL3_Config+0x15c>)
 8007578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	695b      	ldr	r3, [r3, #20]
 8007582:	492d      	ldr	r1, [pc, #180]	; (8007638 <RCCEx_PLL3_Config+0x15c>)
 8007584:	4313      	orrs	r3, r2
 8007586:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007588:	4b2b      	ldr	r3, [pc, #172]	; (8007638 <RCCEx_PLL3_Config+0x15c>)
 800758a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800758c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	699b      	ldr	r3, [r3, #24]
 8007594:	4928      	ldr	r1, [pc, #160]	; (8007638 <RCCEx_PLL3_Config+0x15c>)
 8007596:	4313      	orrs	r3, r2
 8007598:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800759a:	4b27      	ldr	r3, [pc, #156]	; (8007638 <RCCEx_PLL3_Config+0x15c>)
 800759c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800759e:	4a26      	ldr	r2, [pc, #152]	; (8007638 <RCCEx_PLL3_Config+0x15c>)
 80075a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80075a6:	4b24      	ldr	r3, [pc, #144]	; (8007638 <RCCEx_PLL3_Config+0x15c>)
 80075a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075aa:	4b24      	ldr	r3, [pc, #144]	; (800763c <RCCEx_PLL3_Config+0x160>)
 80075ac:	4013      	ands	r3, r2
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	69d2      	ldr	r2, [r2, #28]
 80075b2:	00d2      	lsls	r2, r2, #3
 80075b4:	4920      	ldr	r1, [pc, #128]	; (8007638 <RCCEx_PLL3_Config+0x15c>)
 80075b6:	4313      	orrs	r3, r2
 80075b8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80075ba:	4b1f      	ldr	r3, [pc, #124]	; (8007638 <RCCEx_PLL3_Config+0x15c>)
 80075bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075be:	4a1e      	ldr	r2, [pc, #120]	; (8007638 <RCCEx_PLL3_Config+0x15c>)
 80075c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d106      	bne.n	80075da <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80075cc:	4b1a      	ldr	r3, [pc, #104]	; (8007638 <RCCEx_PLL3_Config+0x15c>)
 80075ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d0:	4a19      	ldr	r2, [pc, #100]	; (8007638 <RCCEx_PLL3_Config+0x15c>)
 80075d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80075d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80075d8:	e00f      	b.n	80075fa <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d106      	bne.n	80075ee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80075e0:	4b15      	ldr	r3, [pc, #84]	; (8007638 <RCCEx_PLL3_Config+0x15c>)
 80075e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e4:	4a14      	ldr	r2, [pc, #80]	; (8007638 <RCCEx_PLL3_Config+0x15c>)
 80075e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80075ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80075ec:	e005      	b.n	80075fa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80075ee:	4b12      	ldr	r3, [pc, #72]	; (8007638 <RCCEx_PLL3_Config+0x15c>)
 80075f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f2:	4a11      	ldr	r2, [pc, #68]	; (8007638 <RCCEx_PLL3_Config+0x15c>)
 80075f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80075fa:	4b0f      	ldr	r3, [pc, #60]	; (8007638 <RCCEx_PLL3_Config+0x15c>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a0e      	ldr	r2, [pc, #56]	; (8007638 <RCCEx_PLL3_Config+0x15c>)
 8007600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007604:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007606:	f7fb fe45 	bl	8003294 <HAL_GetTick>
 800760a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800760c:	e008      	b.n	8007620 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800760e:	f7fb fe41 	bl	8003294 <HAL_GetTick>
 8007612:	4602      	mov	r2, r0
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	2b02      	cmp	r3, #2
 800761a:	d901      	bls.n	8007620 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800761c:	2303      	movs	r3, #3
 800761e:	e006      	b.n	800762e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007620:	4b05      	ldr	r3, [pc, #20]	; (8007638 <RCCEx_PLL3_Config+0x15c>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007628:	2b00      	cmp	r3, #0
 800762a:	d0f0      	beq.n	800760e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800762c:	7bfb      	ldrb	r3, [r7, #15]
}
 800762e:	4618      	mov	r0, r3
 8007630:	3710      	adds	r7, #16
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	58024400 	.word	0x58024400
 800763c:	ffff0007 	.word	0xffff0007

08007640 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d101      	bne.n	8007652 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	e042      	b.n	80076d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007658:	2b00      	cmp	r3, #0
 800765a:	d106      	bne.n	800766a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f7fb fbe5 	bl	8002e34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2224      	movs	r2, #36	; 0x24
 800766e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f022 0201 	bic.w	r2, r2, #1
 8007680:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 f82c 	bl	80076e0 <UART_SetConfig>
 8007688:	4603      	mov	r3, r0
 800768a:	2b01      	cmp	r3, #1
 800768c:	d101      	bne.n	8007692 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	e022      	b.n	80076d8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007696:	2b00      	cmp	r3, #0
 8007698:	d002      	beq.n	80076a0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 fd88 	bl	80081b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	685a      	ldr	r2, [r3, #4]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80076ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	689a      	ldr	r2, [r3, #8]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80076be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f042 0201 	orr.w	r2, r2, #1
 80076ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 fe0f 	bl	80082f4 <UART_CheckIdleState>
 80076d6:	4603      	mov	r3, r0
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3708      	adds	r7, #8
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076e4:	b092      	sub	sp, #72	; 0x48
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80076ea:	2300      	movs	r3, #0
 80076ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	689a      	ldr	r2, [r3, #8]
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	691b      	ldr	r3, [r3, #16]
 80076f8:	431a      	orrs	r2, r3
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	695b      	ldr	r3, [r3, #20]
 80076fe:	431a      	orrs	r2, r3
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	69db      	ldr	r3, [r3, #28]
 8007704:	4313      	orrs	r3, r2
 8007706:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	4bbe      	ldr	r3, [pc, #760]	; (8007a08 <UART_SetConfig+0x328>)
 8007710:	4013      	ands	r3, r2
 8007712:	697a      	ldr	r2, [r7, #20]
 8007714:	6812      	ldr	r2, [r2, #0]
 8007716:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007718:	430b      	orrs	r3, r1
 800771a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	68da      	ldr	r2, [r3, #12]
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	430a      	orrs	r2, r1
 8007730:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	699b      	ldr	r3, [r3, #24]
 8007736:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4ab3      	ldr	r2, [pc, #716]	; (8007a0c <UART_SetConfig+0x32c>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d004      	beq.n	800774c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	6a1b      	ldr	r3, [r3, #32]
 8007746:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007748:	4313      	orrs	r3, r2
 800774a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	689a      	ldr	r2, [r3, #8]
 8007752:	4baf      	ldr	r3, [pc, #700]	; (8007a10 <UART_SetConfig+0x330>)
 8007754:	4013      	ands	r3, r2
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	6812      	ldr	r2, [r2, #0]
 800775a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800775c:	430b      	orrs	r3, r1
 800775e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007766:	f023 010f 	bic.w	r1, r3, #15
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	430a      	orrs	r2, r1
 8007774:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4aa6      	ldr	r2, [pc, #664]	; (8007a14 <UART_SetConfig+0x334>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d177      	bne.n	8007870 <UART_SetConfig+0x190>
 8007780:	4ba5      	ldr	r3, [pc, #660]	; (8007a18 <UART_SetConfig+0x338>)
 8007782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007784:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007788:	2b28      	cmp	r3, #40	; 0x28
 800778a:	d86d      	bhi.n	8007868 <UART_SetConfig+0x188>
 800778c:	a201      	add	r2, pc, #4	; (adr r2, 8007794 <UART_SetConfig+0xb4>)
 800778e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007792:	bf00      	nop
 8007794:	08007839 	.word	0x08007839
 8007798:	08007869 	.word	0x08007869
 800779c:	08007869 	.word	0x08007869
 80077a0:	08007869 	.word	0x08007869
 80077a4:	08007869 	.word	0x08007869
 80077a8:	08007869 	.word	0x08007869
 80077ac:	08007869 	.word	0x08007869
 80077b0:	08007869 	.word	0x08007869
 80077b4:	08007841 	.word	0x08007841
 80077b8:	08007869 	.word	0x08007869
 80077bc:	08007869 	.word	0x08007869
 80077c0:	08007869 	.word	0x08007869
 80077c4:	08007869 	.word	0x08007869
 80077c8:	08007869 	.word	0x08007869
 80077cc:	08007869 	.word	0x08007869
 80077d0:	08007869 	.word	0x08007869
 80077d4:	08007849 	.word	0x08007849
 80077d8:	08007869 	.word	0x08007869
 80077dc:	08007869 	.word	0x08007869
 80077e0:	08007869 	.word	0x08007869
 80077e4:	08007869 	.word	0x08007869
 80077e8:	08007869 	.word	0x08007869
 80077ec:	08007869 	.word	0x08007869
 80077f0:	08007869 	.word	0x08007869
 80077f4:	08007851 	.word	0x08007851
 80077f8:	08007869 	.word	0x08007869
 80077fc:	08007869 	.word	0x08007869
 8007800:	08007869 	.word	0x08007869
 8007804:	08007869 	.word	0x08007869
 8007808:	08007869 	.word	0x08007869
 800780c:	08007869 	.word	0x08007869
 8007810:	08007869 	.word	0x08007869
 8007814:	08007859 	.word	0x08007859
 8007818:	08007869 	.word	0x08007869
 800781c:	08007869 	.word	0x08007869
 8007820:	08007869 	.word	0x08007869
 8007824:	08007869 	.word	0x08007869
 8007828:	08007869 	.word	0x08007869
 800782c:	08007869 	.word	0x08007869
 8007830:	08007869 	.word	0x08007869
 8007834:	08007861 	.word	0x08007861
 8007838:	2301      	movs	r3, #1
 800783a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800783e:	e222      	b.n	8007c86 <UART_SetConfig+0x5a6>
 8007840:	2304      	movs	r3, #4
 8007842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007846:	e21e      	b.n	8007c86 <UART_SetConfig+0x5a6>
 8007848:	2308      	movs	r3, #8
 800784a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800784e:	e21a      	b.n	8007c86 <UART_SetConfig+0x5a6>
 8007850:	2310      	movs	r3, #16
 8007852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007856:	e216      	b.n	8007c86 <UART_SetConfig+0x5a6>
 8007858:	2320      	movs	r3, #32
 800785a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800785e:	e212      	b.n	8007c86 <UART_SetConfig+0x5a6>
 8007860:	2340      	movs	r3, #64	; 0x40
 8007862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007866:	e20e      	b.n	8007c86 <UART_SetConfig+0x5a6>
 8007868:	2380      	movs	r3, #128	; 0x80
 800786a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800786e:	e20a      	b.n	8007c86 <UART_SetConfig+0x5a6>
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a69      	ldr	r2, [pc, #420]	; (8007a1c <UART_SetConfig+0x33c>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d130      	bne.n	80078dc <UART_SetConfig+0x1fc>
 800787a:	4b67      	ldr	r3, [pc, #412]	; (8007a18 <UART_SetConfig+0x338>)
 800787c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800787e:	f003 0307 	and.w	r3, r3, #7
 8007882:	2b05      	cmp	r3, #5
 8007884:	d826      	bhi.n	80078d4 <UART_SetConfig+0x1f4>
 8007886:	a201      	add	r2, pc, #4	; (adr r2, 800788c <UART_SetConfig+0x1ac>)
 8007888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800788c:	080078a5 	.word	0x080078a5
 8007890:	080078ad 	.word	0x080078ad
 8007894:	080078b5 	.word	0x080078b5
 8007898:	080078bd 	.word	0x080078bd
 800789c:	080078c5 	.word	0x080078c5
 80078a0:	080078cd 	.word	0x080078cd
 80078a4:	2300      	movs	r3, #0
 80078a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078aa:	e1ec      	b.n	8007c86 <UART_SetConfig+0x5a6>
 80078ac:	2304      	movs	r3, #4
 80078ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078b2:	e1e8      	b.n	8007c86 <UART_SetConfig+0x5a6>
 80078b4:	2308      	movs	r3, #8
 80078b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ba:	e1e4      	b.n	8007c86 <UART_SetConfig+0x5a6>
 80078bc:	2310      	movs	r3, #16
 80078be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078c2:	e1e0      	b.n	8007c86 <UART_SetConfig+0x5a6>
 80078c4:	2320      	movs	r3, #32
 80078c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ca:	e1dc      	b.n	8007c86 <UART_SetConfig+0x5a6>
 80078cc:	2340      	movs	r3, #64	; 0x40
 80078ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078d2:	e1d8      	b.n	8007c86 <UART_SetConfig+0x5a6>
 80078d4:	2380      	movs	r3, #128	; 0x80
 80078d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078da:	e1d4      	b.n	8007c86 <UART_SetConfig+0x5a6>
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a4f      	ldr	r2, [pc, #316]	; (8007a20 <UART_SetConfig+0x340>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d130      	bne.n	8007948 <UART_SetConfig+0x268>
 80078e6:	4b4c      	ldr	r3, [pc, #304]	; (8007a18 <UART_SetConfig+0x338>)
 80078e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ea:	f003 0307 	and.w	r3, r3, #7
 80078ee:	2b05      	cmp	r3, #5
 80078f0:	d826      	bhi.n	8007940 <UART_SetConfig+0x260>
 80078f2:	a201      	add	r2, pc, #4	; (adr r2, 80078f8 <UART_SetConfig+0x218>)
 80078f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f8:	08007911 	.word	0x08007911
 80078fc:	08007919 	.word	0x08007919
 8007900:	08007921 	.word	0x08007921
 8007904:	08007929 	.word	0x08007929
 8007908:	08007931 	.word	0x08007931
 800790c:	08007939 	.word	0x08007939
 8007910:	2300      	movs	r3, #0
 8007912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007916:	e1b6      	b.n	8007c86 <UART_SetConfig+0x5a6>
 8007918:	2304      	movs	r3, #4
 800791a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800791e:	e1b2      	b.n	8007c86 <UART_SetConfig+0x5a6>
 8007920:	2308      	movs	r3, #8
 8007922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007926:	e1ae      	b.n	8007c86 <UART_SetConfig+0x5a6>
 8007928:	2310      	movs	r3, #16
 800792a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800792e:	e1aa      	b.n	8007c86 <UART_SetConfig+0x5a6>
 8007930:	2320      	movs	r3, #32
 8007932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007936:	e1a6      	b.n	8007c86 <UART_SetConfig+0x5a6>
 8007938:	2340      	movs	r3, #64	; 0x40
 800793a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800793e:	e1a2      	b.n	8007c86 <UART_SetConfig+0x5a6>
 8007940:	2380      	movs	r3, #128	; 0x80
 8007942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007946:	e19e      	b.n	8007c86 <UART_SetConfig+0x5a6>
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a35      	ldr	r2, [pc, #212]	; (8007a24 <UART_SetConfig+0x344>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d130      	bne.n	80079b4 <UART_SetConfig+0x2d4>
 8007952:	4b31      	ldr	r3, [pc, #196]	; (8007a18 <UART_SetConfig+0x338>)
 8007954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007956:	f003 0307 	and.w	r3, r3, #7
 800795a:	2b05      	cmp	r3, #5
 800795c:	d826      	bhi.n	80079ac <UART_SetConfig+0x2cc>
 800795e:	a201      	add	r2, pc, #4	; (adr r2, 8007964 <UART_SetConfig+0x284>)
 8007960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007964:	0800797d 	.word	0x0800797d
 8007968:	08007985 	.word	0x08007985
 800796c:	0800798d 	.word	0x0800798d
 8007970:	08007995 	.word	0x08007995
 8007974:	0800799d 	.word	0x0800799d
 8007978:	080079a5 	.word	0x080079a5
 800797c:	2300      	movs	r3, #0
 800797e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007982:	e180      	b.n	8007c86 <UART_SetConfig+0x5a6>
 8007984:	2304      	movs	r3, #4
 8007986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800798a:	e17c      	b.n	8007c86 <UART_SetConfig+0x5a6>
 800798c:	2308      	movs	r3, #8
 800798e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007992:	e178      	b.n	8007c86 <UART_SetConfig+0x5a6>
 8007994:	2310      	movs	r3, #16
 8007996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800799a:	e174      	b.n	8007c86 <UART_SetConfig+0x5a6>
 800799c:	2320      	movs	r3, #32
 800799e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079a2:	e170      	b.n	8007c86 <UART_SetConfig+0x5a6>
 80079a4:	2340      	movs	r3, #64	; 0x40
 80079a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079aa:	e16c      	b.n	8007c86 <UART_SetConfig+0x5a6>
 80079ac:	2380      	movs	r3, #128	; 0x80
 80079ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079b2:	e168      	b.n	8007c86 <UART_SetConfig+0x5a6>
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a1b      	ldr	r2, [pc, #108]	; (8007a28 <UART_SetConfig+0x348>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d142      	bne.n	8007a44 <UART_SetConfig+0x364>
 80079be:	4b16      	ldr	r3, [pc, #88]	; (8007a18 <UART_SetConfig+0x338>)
 80079c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079c2:	f003 0307 	and.w	r3, r3, #7
 80079c6:	2b05      	cmp	r3, #5
 80079c8:	d838      	bhi.n	8007a3c <UART_SetConfig+0x35c>
 80079ca:	a201      	add	r2, pc, #4	; (adr r2, 80079d0 <UART_SetConfig+0x2f0>)
 80079cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d0:	080079e9 	.word	0x080079e9
 80079d4:	080079f1 	.word	0x080079f1
 80079d8:	080079f9 	.word	0x080079f9
 80079dc:	08007a01 	.word	0x08007a01
 80079e0:	08007a2d 	.word	0x08007a2d
 80079e4:	08007a35 	.word	0x08007a35
 80079e8:	2300      	movs	r3, #0
 80079ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079ee:	e14a      	b.n	8007c86 <UART_SetConfig+0x5a6>
 80079f0:	2304      	movs	r3, #4
 80079f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079f6:	e146      	b.n	8007c86 <UART_SetConfig+0x5a6>
 80079f8:	2308      	movs	r3, #8
 80079fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079fe:	e142      	b.n	8007c86 <UART_SetConfig+0x5a6>
 8007a00:	2310      	movs	r3, #16
 8007a02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a06:	e13e      	b.n	8007c86 <UART_SetConfig+0x5a6>
 8007a08:	cfff69f3 	.word	0xcfff69f3
 8007a0c:	58000c00 	.word	0x58000c00
 8007a10:	11fff4ff 	.word	0x11fff4ff
 8007a14:	40011000 	.word	0x40011000
 8007a18:	58024400 	.word	0x58024400
 8007a1c:	40004400 	.word	0x40004400
 8007a20:	40004800 	.word	0x40004800
 8007a24:	40004c00 	.word	0x40004c00
 8007a28:	40005000 	.word	0x40005000
 8007a2c:	2320      	movs	r3, #32
 8007a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a32:	e128      	b.n	8007c86 <UART_SetConfig+0x5a6>
 8007a34:	2340      	movs	r3, #64	; 0x40
 8007a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a3a:	e124      	b.n	8007c86 <UART_SetConfig+0x5a6>
 8007a3c:	2380      	movs	r3, #128	; 0x80
 8007a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a42:	e120      	b.n	8007c86 <UART_SetConfig+0x5a6>
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4acb      	ldr	r2, [pc, #812]	; (8007d78 <UART_SetConfig+0x698>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d176      	bne.n	8007b3c <UART_SetConfig+0x45c>
 8007a4e:	4bcb      	ldr	r3, [pc, #812]	; (8007d7c <UART_SetConfig+0x69c>)
 8007a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a56:	2b28      	cmp	r3, #40	; 0x28
 8007a58:	d86c      	bhi.n	8007b34 <UART_SetConfig+0x454>
 8007a5a:	a201      	add	r2, pc, #4	; (adr r2, 8007a60 <UART_SetConfig+0x380>)
 8007a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a60:	08007b05 	.word	0x08007b05
 8007a64:	08007b35 	.word	0x08007b35
 8007a68:	08007b35 	.word	0x08007b35
 8007a6c:	08007b35 	.word	0x08007b35
 8007a70:	08007b35 	.word	0x08007b35
 8007a74:	08007b35 	.word	0x08007b35
 8007a78:	08007b35 	.word	0x08007b35
 8007a7c:	08007b35 	.word	0x08007b35
 8007a80:	08007b0d 	.word	0x08007b0d
 8007a84:	08007b35 	.word	0x08007b35
 8007a88:	08007b35 	.word	0x08007b35
 8007a8c:	08007b35 	.word	0x08007b35
 8007a90:	08007b35 	.word	0x08007b35
 8007a94:	08007b35 	.word	0x08007b35
 8007a98:	08007b35 	.word	0x08007b35
 8007a9c:	08007b35 	.word	0x08007b35
 8007aa0:	08007b15 	.word	0x08007b15
 8007aa4:	08007b35 	.word	0x08007b35
 8007aa8:	08007b35 	.word	0x08007b35
 8007aac:	08007b35 	.word	0x08007b35
 8007ab0:	08007b35 	.word	0x08007b35
 8007ab4:	08007b35 	.word	0x08007b35
 8007ab8:	08007b35 	.word	0x08007b35
 8007abc:	08007b35 	.word	0x08007b35
 8007ac0:	08007b1d 	.word	0x08007b1d
 8007ac4:	08007b35 	.word	0x08007b35
 8007ac8:	08007b35 	.word	0x08007b35
 8007acc:	08007b35 	.word	0x08007b35
 8007ad0:	08007b35 	.word	0x08007b35
 8007ad4:	08007b35 	.word	0x08007b35
 8007ad8:	08007b35 	.word	0x08007b35
 8007adc:	08007b35 	.word	0x08007b35
 8007ae0:	08007b25 	.word	0x08007b25
 8007ae4:	08007b35 	.word	0x08007b35
 8007ae8:	08007b35 	.word	0x08007b35
 8007aec:	08007b35 	.word	0x08007b35
 8007af0:	08007b35 	.word	0x08007b35
 8007af4:	08007b35 	.word	0x08007b35
 8007af8:	08007b35 	.word	0x08007b35
 8007afc:	08007b35 	.word	0x08007b35
 8007b00:	08007b2d 	.word	0x08007b2d
 8007b04:	2301      	movs	r3, #1
 8007b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b0a:	e0bc      	b.n	8007c86 <UART_SetConfig+0x5a6>
 8007b0c:	2304      	movs	r3, #4
 8007b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b12:	e0b8      	b.n	8007c86 <UART_SetConfig+0x5a6>
 8007b14:	2308      	movs	r3, #8
 8007b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b1a:	e0b4      	b.n	8007c86 <UART_SetConfig+0x5a6>
 8007b1c:	2310      	movs	r3, #16
 8007b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b22:	e0b0      	b.n	8007c86 <UART_SetConfig+0x5a6>
 8007b24:	2320      	movs	r3, #32
 8007b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b2a:	e0ac      	b.n	8007c86 <UART_SetConfig+0x5a6>
 8007b2c:	2340      	movs	r3, #64	; 0x40
 8007b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b32:	e0a8      	b.n	8007c86 <UART_SetConfig+0x5a6>
 8007b34:	2380      	movs	r3, #128	; 0x80
 8007b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b3a:	e0a4      	b.n	8007c86 <UART_SetConfig+0x5a6>
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a8f      	ldr	r2, [pc, #572]	; (8007d80 <UART_SetConfig+0x6a0>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d130      	bne.n	8007ba8 <UART_SetConfig+0x4c8>
 8007b46:	4b8d      	ldr	r3, [pc, #564]	; (8007d7c <UART_SetConfig+0x69c>)
 8007b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b4a:	f003 0307 	and.w	r3, r3, #7
 8007b4e:	2b05      	cmp	r3, #5
 8007b50:	d826      	bhi.n	8007ba0 <UART_SetConfig+0x4c0>
 8007b52:	a201      	add	r2, pc, #4	; (adr r2, 8007b58 <UART_SetConfig+0x478>)
 8007b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b58:	08007b71 	.word	0x08007b71
 8007b5c:	08007b79 	.word	0x08007b79
 8007b60:	08007b81 	.word	0x08007b81
 8007b64:	08007b89 	.word	0x08007b89
 8007b68:	08007b91 	.word	0x08007b91
 8007b6c:	08007b99 	.word	0x08007b99
 8007b70:	2300      	movs	r3, #0
 8007b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b76:	e086      	b.n	8007c86 <UART_SetConfig+0x5a6>
 8007b78:	2304      	movs	r3, #4
 8007b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b7e:	e082      	b.n	8007c86 <UART_SetConfig+0x5a6>
 8007b80:	2308      	movs	r3, #8
 8007b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b86:	e07e      	b.n	8007c86 <UART_SetConfig+0x5a6>
 8007b88:	2310      	movs	r3, #16
 8007b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b8e:	e07a      	b.n	8007c86 <UART_SetConfig+0x5a6>
 8007b90:	2320      	movs	r3, #32
 8007b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b96:	e076      	b.n	8007c86 <UART_SetConfig+0x5a6>
 8007b98:	2340      	movs	r3, #64	; 0x40
 8007b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b9e:	e072      	b.n	8007c86 <UART_SetConfig+0x5a6>
 8007ba0:	2380      	movs	r3, #128	; 0x80
 8007ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ba6:	e06e      	b.n	8007c86 <UART_SetConfig+0x5a6>
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a75      	ldr	r2, [pc, #468]	; (8007d84 <UART_SetConfig+0x6a4>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d130      	bne.n	8007c14 <UART_SetConfig+0x534>
 8007bb2:	4b72      	ldr	r3, [pc, #456]	; (8007d7c <UART_SetConfig+0x69c>)
 8007bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bb6:	f003 0307 	and.w	r3, r3, #7
 8007bba:	2b05      	cmp	r3, #5
 8007bbc:	d826      	bhi.n	8007c0c <UART_SetConfig+0x52c>
 8007bbe:	a201      	add	r2, pc, #4	; (adr r2, 8007bc4 <UART_SetConfig+0x4e4>)
 8007bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc4:	08007bdd 	.word	0x08007bdd
 8007bc8:	08007be5 	.word	0x08007be5
 8007bcc:	08007bed 	.word	0x08007bed
 8007bd0:	08007bf5 	.word	0x08007bf5
 8007bd4:	08007bfd 	.word	0x08007bfd
 8007bd8:	08007c05 	.word	0x08007c05
 8007bdc:	2300      	movs	r3, #0
 8007bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007be2:	e050      	b.n	8007c86 <UART_SetConfig+0x5a6>
 8007be4:	2304      	movs	r3, #4
 8007be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bea:	e04c      	b.n	8007c86 <UART_SetConfig+0x5a6>
 8007bec:	2308      	movs	r3, #8
 8007bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bf2:	e048      	b.n	8007c86 <UART_SetConfig+0x5a6>
 8007bf4:	2310      	movs	r3, #16
 8007bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bfa:	e044      	b.n	8007c86 <UART_SetConfig+0x5a6>
 8007bfc:	2320      	movs	r3, #32
 8007bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c02:	e040      	b.n	8007c86 <UART_SetConfig+0x5a6>
 8007c04:	2340      	movs	r3, #64	; 0x40
 8007c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c0a:	e03c      	b.n	8007c86 <UART_SetConfig+0x5a6>
 8007c0c:	2380      	movs	r3, #128	; 0x80
 8007c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c12:	e038      	b.n	8007c86 <UART_SetConfig+0x5a6>
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a5b      	ldr	r2, [pc, #364]	; (8007d88 <UART_SetConfig+0x6a8>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d130      	bne.n	8007c80 <UART_SetConfig+0x5a0>
 8007c1e:	4b57      	ldr	r3, [pc, #348]	; (8007d7c <UART_SetConfig+0x69c>)
 8007c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c22:	f003 0307 	and.w	r3, r3, #7
 8007c26:	2b05      	cmp	r3, #5
 8007c28:	d826      	bhi.n	8007c78 <UART_SetConfig+0x598>
 8007c2a:	a201      	add	r2, pc, #4	; (adr r2, 8007c30 <UART_SetConfig+0x550>)
 8007c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c30:	08007c49 	.word	0x08007c49
 8007c34:	08007c51 	.word	0x08007c51
 8007c38:	08007c59 	.word	0x08007c59
 8007c3c:	08007c61 	.word	0x08007c61
 8007c40:	08007c69 	.word	0x08007c69
 8007c44:	08007c71 	.word	0x08007c71
 8007c48:	2302      	movs	r3, #2
 8007c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c4e:	e01a      	b.n	8007c86 <UART_SetConfig+0x5a6>
 8007c50:	2304      	movs	r3, #4
 8007c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c56:	e016      	b.n	8007c86 <UART_SetConfig+0x5a6>
 8007c58:	2308      	movs	r3, #8
 8007c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c5e:	e012      	b.n	8007c86 <UART_SetConfig+0x5a6>
 8007c60:	2310      	movs	r3, #16
 8007c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c66:	e00e      	b.n	8007c86 <UART_SetConfig+0x5a6>
 8007c68:	2320      	movs	r3, #32
 8007c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c6e:	e00a      	b.n	8007c86 <UART_SetConfig+0x5a6>
 8007c70:	2340      	movs	r3, #64	; 0x40
 8007c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c76:	e006      	b.n	8007c86 <UART_SetConfig+0x5a6>
 8007c78:	2380      	movs	r3, #128	; 0x80
 8007c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c7e:	e002      	b.n	8007c86 <UART_SetConfig+0x5a6>
 8007c80:	2380      	movs	r3, #128	; 0x80
 8007c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a3f      	ldr	r2, [pc, #252]	; (8007d88 <UART_SetConfig+0x6a8>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	f040 80f8 	bne.w	8007e82 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007c92:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007c96:	2b20      	cmp	r3, #32
 8007c98:	dc46      	bgt.n	8007d28 <UART_SetConfig+0x648>
 8007c9a:	2b02      	cmp	r3, #2
 8007c9c:	f2c0 8082 	blt.w	8007da4 <UART_SetConfig+0x6c4>
 8007ca0:	3b02      	subs	r3, #2
 8007ca2:	2b1e      	cmp	r3, #30
 8007ca4:	d87e      	bhi.n	8007da4 <UART_SetConfig+0x6c4>
 8007ca6:	a201      	add	r2, pc, #4	; (adr r2, 8007cac <UART_SetConfig+0x5cc>)
 8007ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cac:	08007d2f 	.word	0x08007d2f
 8007cb0:	08007da5 	.word	0x08007da5
 8007cb4:	08007d37 	.word	0x08007d37
 8007cb8:	08007da5 	.word	0x08007da5
 8007cbc:	08007da5 	.word	0x08007da5
 8007cc0:	08007da5 	.word	0x08007da5
 8007cc4:	08007d47 	.word	0x08007d47
 8007cc8:	08007da5 	.word	0x08007da5
 8007ccc:	08007da5 	.word	0x08007da5
 8007cd0:	08007da5 	.word	0x08007da5
 8007cd4:	08007da5 	.word	0x08007da5
 8007cd8:	08007da5 	.word	0x08007da5
 8007cdc:	08007da5 	.word	0x08007da5
 8007ce0:	08007da5 	.word	0x08007da5
 8007ce4:	08007d57 	.word	0x08007d57
 8007ce8:	08007da5 	.word	0x08007da5
 8007cec:	08007da5 	.word	0x08007da5
 8007cf0:	08007da5 	.word	0x08007da5
 8007cf4:	08007da5 	.word	0x08007da5
 8007cf8:	08007da5 	.word	0x08007da5
 8007cfc:	08007da5 	.word	0x08007da5
 8007d00:	08007da5 	.word	0x08007da5
 8007d04:	08007da5 	.word	0x08007da5
 8007d08:	08007da5 	.word	0x08007da5
 8007d0c:	08007da5 	.word	0x08007da5
 8007d10:	08007da5 	.word	0x08007da5
 8007d14:	08007da5 	.word	0x08007da5
 8007d18:	08007da5 	.word	0x08007da5
 8007d1c:	08007da5 	.word	0x08007da5
 8007d20:	08007da5 	.word	0x08007da5
 8007d24:	08007d97 	.word	0x08007d97
 8007d28:	2b40      	cmp	r3, #64	; 0x40
 8007d2a:	d037      	beq.n	8007d9c <UART_SetConfig+0x6bc>
 8007d2c:	e03a      	b.n	8007da4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007d2e:	f7ff f865 	bl	8006dfc <HAL_RCCEx_GetD3PCLK1Freq>
 8007d32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007d34:	e03c      	b.n	8007db0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f7ff f874 	bl	8006e28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d44:	e034      	b.n	8007db0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d46:	f107 0318 	add.w	r3, r7, #24
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7ff f9c0 	bl	80070d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d54:	e02c      	b.n	8007db0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d56:	4b09      	ldr	r3, [pc, #36]	; (8007d7c <UART_SetConfig+0x69c>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f003 0320 	and.w	r3, r3, #32
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d016      	beq.n	8007d90 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007d62:	4b06      	ldr	r3, [pc, #24]	; (8007d7c <UART_SetConfig+0x69c>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	08db      	lsrs	r3, r3, #3
 8007d68:	f003 0303 	and.w	r3, r3, #3
 8007d6c:	4a07      	ldr	r2, [pc, #28]	; (8007d8c <UART_SetConfig+0x6ac>)
 8007d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8007d72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007d74:	e01c      	b.n	8007db0 <UART_SetConfig+0x6d0>
 8007d76:	bf00      	nop
 8007d78:	40011400 	.word	0x40011400
 8007d7c:	58024400 	.word	0x58024400
 8007d80:	40007800 	.word	0x40007800
 8007d84:	40007c00 	.word	0x40007c00
 8007d88:	58000c00 	.word	0x58000c00
 8007d8c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007d90:	4b9d      	ldr	r3, [pc, #628]	; (8008008 <UART_SetConfig+0x928>)
 8007d92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d94:	e00c      	b.n	8007db0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007d96:	4b9d      	ldr	r3, [pc, #628]	; (800800c <UART_SetConfig+0x92c>)
 8007d98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d9a:	e009      	b.n	8007db0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007da0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007da2:	e005      	b.n	8007db0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007da4:	2300      	movs	r3, #0
 8007da6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007dae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007db0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	f000 81de 	beq.w	8008174 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dbc:	4a94      	ldr	r2, [pc, #592]	; (8008010 <UART_SetConfig+0x930>)
 8007dbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8007dca:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	685a      	ldr	r2, [r3, #4]
 8007dd0:	4613      	mov	r3, r2
 8007dd2:	005b      	lsls	r3, r3, #1
 8007dd4:	4413      	add	r3, r2
 8007dd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d305      	bcc.n	8007de8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007de2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d903      	bls.n	8007df0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007de8:	2301      	movs	r3, #1
 8007dea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007dee:	e1c1      	b.n	8008174 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007df2:	2200      	movs	r2, #0
 8007df4:	60bb      	str	r3, [r7, #8]
 8007df6:	60fa      	str	r2, [r7, #12]
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfc:	4a84      	ldr	r2, [pc, #528]	; (8008010 <UART_SetConfig+0x930>)
 8007dfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	2200      	movs	r2, #0
 8007e06:	603b      	str	r3, [r7, #0]
 8007e08:	607a      	str	r2, [r7, #4]
 8007e0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007e12:	f7f8 fab5 	bl	8000380 <__aeabi_uldivmod>
 8007e16:	4602      	mov	r2, r0
 8007e18:	460b      	mov	r3, r1
 8007e1a:	4610      	mov	r0, r2
 8007e1c:	4619      	mov	r1, r3
 8007e1e:	f04f 0200 	mov.w	r2, #0
 8007e22:	f04f 0300 	mov.w	r3, #0
 8007e26:	020b      	lsls	r3, r1, #8
 8007e28:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007e2c:	0202      	lsls	r2, r0, #8
 8007e2e:	6979      	ldr	r1, [r7, #20]
 8007e30:	6849      	ldr	r1, [r1, #4]
 8007e32:	0849      	lsrs	r1, r1, #1
 8007e34:	2000      	movs	r0, #0
 8007e36:	460c      	mov	r4, r1
 8007e38:	4605      	mov	r5, r0
 8007e3a:	eb12 0804 	adds.w	r8, r2, r4
 8007e3e:	eb43 0905 	adc.w	r9, r3, r5
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	469a      	mov	sl, r3
 8007e4a:	4693      	mov	fp, r2
 8007e4c:	4652      	mov	r2, sl
 8007e4e:	465b      	mov	r3, fp
 8007e50:	4640      	mov	r0, r8
 8007e52:	4649      	mov	r1, r9
 8007e54:	f7f8 fa94 	bl	8000380 <__aeabi_uldivmod>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e66:	d308      	bcc.n	8007e7a <UART_SetConfig+0x79a>
 8007e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e6e:	d204      	bcs.n	8007e7a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e76:	60da      	str	r2, [r3, #12]
 8007e78:	e17c      	b.n	8008174 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007e80:	e178      	b.n	8008174 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	69db      	ldr	r3, [r3, #28]
 8007e86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e8a:	f040 80c5 	bne.w	8008018 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007e8e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007e92:	2b20      	cmp	r3, #32
 8007e94:	dc48      	bgt.n	8007f28 <UART_SetConfig+0x848>
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	db7b      	blt.n	8007f92 <UART_SetConfig+0x8b2>
 8007e9a:	2b20      	cmp	r3, #32
 8007e9c:	d879      	bhi.n	8007f92 <UART_SetConfig+0x8b2>
 8007e9e:	a201      	add	r2, pc, #4	; (adr r2, 8007ea4 <UART_SetConfig+0x7c4>)
 8007ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ea4:	08007f2f 	.word	0x08007f2f
 8007ea8:	08007f37 	.word	0x08007f37
 8007eac:	08007f93 	.word	0x08007f93
 8007eb0:	08007f93 	.word	0x08007f93
 8007eb4:	08007f3f 	.word	0x08007f3f
 8007eb8:	08007f93 	.word	0x08007f93
 8007ebc:	08007f93 	.word	0x08007f93
 8007ec0:	08007f93 	.word	0x08007f93
 8007ec4:	08007f4f 	.word	0x08007f4f
 8007ec8:	08007f93 	.word	0x08007f93
 8007ecc:	08007f93 	.word	0x08007f93
 8007ed0:	08007f93 	.word	0x08007f93
 8007ed4:	08007f93 	.word	0x08007f93
 8007ed8:	08007f93 	.word	0x08007f93
 8007edc:	08007f93 	.word	0x08007f93
 8007ee0:	08007f93 	.word	0x08007f93
 8007ee4:	08007f5f 	.word	0x08007f5f
 8007ee8:	08007f93 	.word	0x08007f93
 8007eec:	08007f93 	.word	0x08007f93
 8007ef0:	08007f93 	.word	0x08007f93
 8007ef4:	08007f93 	.word	0x08007f93
 8007ef8:	08007f93 	.word	0x08007f93
 8007efc:	08007f93 	.word	0x08007f93
 8007f00:	08007f93 	.word	0x08007f93
 8007f04:	08007f93 	.word	0x08007f93
 8007f08:	08007f93 	.word	0x08007f93
 8007f0c:	08007f93 	.word	0x08007f93
 8007f10:	08007f93 	.word	0x08007f93
 8007f14:	08007f93 	.word	0x08007f93
 8007f18:	08007f93 	.word	0x08007f93
 8007f1c:	08007f93 	.word	0x08007f93
 8007f20:	08007f93 	.word	0x08007f93
 8007f24:	08007f85 	.word	0x08007f85
 8007f28:	2b40      	cmp	r3, #64	; 0x40
 8007f2a:	d02e      	beq.n	8007f8a <UART_SetConfig+0x8aa>
 8007f2c:	e031      	b.n	8007f92 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f2e:	f7fd fff3 	bl	8005f18 <HAL_RCC_GetPCLK1Freq>
 8007f32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007f34:	e033      	b.n	8007f9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f36:	f7fe f805 	bl	8005f44 <HAL_RCC_GetPCLK2Freq>
 8007f3a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007f3c:	e02f      	b.n	8007f9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7fe ff70 	bl	8006e28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f4c:	e027      	b.n	8007f9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f4e:	f107 0318 	add.w	r3, r7, #24
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7ff f8bc 	bl	80070d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f5c:	e01f      	b.n	8007f9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f5e:	4b2d      	ldr	r3, [pc, #180]	; (8008014 <UART_SetConfig+0x934>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f003 0320 	and.w	r3, r3, #32
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d009      	beq.n	8007f7e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007f6a:	4b2a      	ldr	r3, [pc, #168]	; (8008014 <UART_SetConfig+0x934>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	08db      	lsrs	r3, r3, #3
 8007f70:	f003 0303 	and.w	r3, r3, #3
 8007f74:	4a24      	ldr	r2, [pc, #144]	; (8008008 <UART_SetConfig+0x928>)
 8007f76:	fa22 f303 	lsr.w	r3, r2, r3
 8007f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007f7c:	e00f      	b.n	8007f9e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007f7e:	4b22      	ldr	r3, [pc, #136]	; (8008008 <UART_SetConfig+0x928>)
 8007f80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f82:	e00c      	b.n	8007f9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007f84:	4b21      	ldr	r3, [pc, #132]	; (800800c <UART_SetConfig+0x92c>)
 8007f86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f88:	e009      	b.n	8007f9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f90:	e005      	b.n	8007f9e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007f92:	2300      	movs	r3, #0
 8007f94:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007f9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	f000 80e7 	beq.w	8008174 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007faa:	4a19      	ldr	r2, [pc, #100]	; (8008010 <UART_SetConfig+0x930>)
 8007fac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fb8:	005a      	lsls	r2, r3, #1
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	085b      	lsrs	r3, r3, #1
 8007fc0:	441a      	add	r2, r3
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fca:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fce:	2b0f      	cmp	r3, #15
 8007fd0:	d916      	bls.n	8008000 <UART_SetConfig+0x920>
 8007fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fd8:	d212      	bcs.n	8008000 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	f023 030f 	bic.w	r3, r3, #15
 8007fe2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe6:	085b      	lsrs	r3, r3, #1
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	f003 0307 	and.w	r3, r3, #7
 8007fee:	b29a      	uxth	r2, r3
 8007ff0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007ffc:	60da      	str	r2, [r3, #12]
 8007ffe:	e0b9      	b.n	8008174 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008006:	e0b5      	b.n	8008174 <UART_SetConfig+0xa94>
 8008008:	03d09000 	.word	0x03d09000
 800800c:	003d0900 	.word	0x003d0900
 8008010:	080498f8 	.word	0x080498f8
 8008014:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008018:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800801c:	2b20      	cmp	r3, #32
 800801e:	dc49      	bgt.n	80080b4 <UART_SetConfig+0x9d4>
 8008020:	2b00      	cmp	r3, #0
 8008022:	db7c      	blt.n	800811e <UART_SetConfig+0xa3e>
 8008024:	2b20      	cmp	r3, #32
 8008026:	d87a      	bhi.n	800811e <UART_SetConfig+0xa3e>
 8008028:	a201      	add	r2, pc, #4	; (adr r2, 8008030 <UART_SetConfig+0x950>)
 800802a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800802e:	bf00      	nop
 8008030:	080080bb 	.word	0x080080bb
 8008034:	080080c3 	.word	0x080080c3
 8008038:	0800811f 	.word	0x0800811f
 800803c:	0800811f 	.word	0x0800811f
 8008040:	080080cb 	.word	0x080080cb
 8008044:	0800811f 	.word	0x0800811f
 8008048:	0800811f 	.word	0x0800811f
 800804c:	0800811f 	.word	0x0800811f
 8008050:	080080db 	.word	0x080080db
 8008054:	0800811f 	.word	0x0800811f
 8008058:	0800811f 	.word	0x0800811f
 800805c:	0800811f 	.word	0x0800811f
 8008060:	0800811f 	.word	0x0800811f
 8008064:	0800811f 	.word	0x0800811f
 8008068:	0800811f 	.word	0x0800811f
 800806c:	0800811f 	.word	0x0800811f
 8008070:	080080eb 	.word	0x080080eb
 8008074:	0800811f 	.word	0x0800811f
 8008078:	0800811f 	.word	0x0800811f
 800807c:	0800811f 	.word	0x0800811f
 8008080:	0800811f 	.word	0x0800811f
 8008084:	0800811f 	.word	0x0800811f
 8008088:	0800811f 	.word	0x0800811f
 800808c:	0800811f 	.word	0x0800811f
 8008090:	0800811f 	.word	0x0800811f
 8008094:	0800811f 	.word	0x0800811f
 8008098:	0800811f 	.word	0x0800811f
 800809c:	0800811f 	.word	0x0800811f
 80080a0:	0800811f 	.word	0x0800811f
 80080a4:	0800811f 	.word	0x0800811f
 80080a8:	0800811f 	.word	0x0800811f
 80080ac:	0800811f 	.word	0x0800811f
 80080b0:	08008111 	.word	0x08008111
 80080b4:	2b40      	cmp	r3, #64	; 0x40
 80080b6:	d02e      	beq.n	8008116 <UART_SetConfig+0xa36>
 80080b8:	e031      	b.n	800811e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080ba:	f7fd ff2d 	bl	8005f18 <HAL_RCC_GetPCLK1Freq>
 80080be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80080c0:	e033      	b.n	800812a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080c2:	f7fd ff3f 	bl	8005f44 <HAL_RCC_GetPCLK2Freq>
 80080c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80080c8:	e02f      	b.n	800812a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080ce:	4618      	mov	r0, r3
 80080d0:	f7fe feaa 	bl	8006e28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80080d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080d8:	e027      	b.n	800812a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080da:	f107 0318 	add.w	r3, r7, #24
 80080de:	4618      	mov	r0, r3
 80080e0:	f7fe fff6 	bl	80070d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80080e4:	69fb      	ldr	r3, [r7, #28]
 80080e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080e8:	e01f      	b.n	800812a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080ea:	4b2d      	ldr	r3, [pc, #180]	; (80081a0 <UART_SetConfig+0xac0>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f003 0320 	and.w	r3, r3, #32
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d009      	beq.n	800810a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80080f6:	4b2a      	ldr	r3, [pc, #168]	; (80081a0 <UART_SetConfig+0xac0>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	08db      	lsrs	r3, r3, #3
 80080fc:	f003 0303 	and.w	r3, r3, #3
 8008100:	4a28      	ldr	r2, [pc, #160]	; (80081a4 <UART_SetConfig+0xac4>)
 8008102:	fa22 f303 	lsr.w	r3, r2, r3
 8008106:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008108:	e00f      	b.n	800812a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800810a:	4b26      	ldr	r3, [pc, #152]	; (80081a4 <UART_SetConfig+0xac4>)
 800810c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800810e:	e00c      	b.n	800812a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008110:	4b25      	ldr	r3, [pc, #148]	; (80081a8 <UART_SetConfig+0xac8>)
 8008112:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008114:	e009      	b.n	800812a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008116:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800811a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800811c:	e005      	b.n	800812a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800811e:	2300      	movs	r3, #0
 8008120:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008128:	bf00      	nop
    }

    if (pclk != 0U)
 800812a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800812c:	2b00      	cmp	r3, #0
 800812e:	d021      	beq.n	8008174 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008134:	4a1d      	ldr	r2, [pc, #116]	; (80081ac <UART_SetConfig+0xacc>)
 8008136:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800813a:	461a      	mov	r2, r3
 800813c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800813e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	085b      	lsrs	r3, r3, #1
 8008148:	441a      	add	r2, r3
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008152:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008156:	2b0f      	cmp	r3, #15
 8008158:	d909      	bls.n	800816e <UART_SetConfig+0xa8e>
 800815a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800815c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008160:	d205      	bcs.n	800816e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008164:	b29a      	uxth	r2, r3
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	60da      	str	r2, [r3, #12]
 800816c:	e002      	b.n	8008174 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800816e:	2301      	movs	r3, #1
 8008170:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	2201      	movs	r2, #1
 8008178:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	2201      	movs	r2, #1
 8008180:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	2200      	movs	r2, #0
 8008188:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	2200      	movs	r2, #0
 800818e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008190:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008194:	4618      	mov	r0, r3
 8008196:	3748      	adds	r7, #72	; 0x48
 8008198:	46bd      	mov	sp, r7
 800819a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800819e:	bf00      	nop
 80081a0:	58024400 	.word	0x58024400
 80081a4:	03d09000 	.word	0x03d09000
 80081a8:	003d0900 	.word	0x003d0900
 80081ac:	080498f8 	.word	0x080498f8

080081b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081bc:	f003 0301 	and.w	r3, r3, #1
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d00a      	beq.n	80081da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	430a      	orrs	r2, r1
 80081d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081de:	f003 0302 	and.w	r3, r3, #2
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d00a      	beq.n	80081fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	430a      	orrs	r2, r1
 80081fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008200:	f003 0304 	and.w	r3, r3, #4
 8008204:	2b00      	cmp	r3, #0
 8008206:	d00a      	beq.n	800821e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	430a      	orrs	r2, r1
 800821c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008222:	f003 0308 	and.w	r3, r3, #8
 8008226:	2b00      	cmp	r3, #0
 8008228:	d00a      	beq.n	8008240 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	430a      	orrs	r2, r1
 800823e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008244:	f003 0310 	and.w	r3, r3, #16
 8008248:	2b00      	cmp	r3, #0
 800824a:	d00a      	beq.n	8008262 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	430a      	orrs	r2, r1
 8008260:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008266:	f003 0320 	and.w	r3, r3, #32
 800826a:	2b00      	cmp	r3, #0
 800826c:	d00a      	beq.n	8008284 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	430a      	orrs	r2, r1
 8008282:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800828c:	2b00      	cmp	r3, #0
 800828e:	d01a      	beq.n	80082c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	430a      	orrs	r2, r1
 80082a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082ae:	d10a      	bne.n	80082c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	430a      	orrs	r2, r1
 80082c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00a      	beq.n	80082e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	430a      	orrs	r2, r1
 80082e6:	605a      	str	r2, [r3, #4]
  }
}
 80082e8:	bf00      	nop
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b086      	sub	sp, #24
 80082f8:	af02      	add	r7, sp, #8
 80082fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008304:	f7fa ffc6 	bl	8003294 <HAL_GetTick>
 8008308:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f003 0308 	and.w	r3, r3, #8
 8008314:	2b08      	cmp	r3, #8
 8008316:	d10e      	bne.n	8008336 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008318:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800831c:	9300      	str	r3, [sp, #0]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2200      	movs	r2, #0
 8008322:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 f82f 	bl	800838a <UART_WaitOnFlagUntilTimeout>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d001      	beq.n	8008336 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008332:	2303      	movs	r3, #3
 8008334:	e025      	b.n	8008382 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f003 0304 	and.w	r3, r3, #4
 8008340:	2b04      	cmp	r3, #4
 8008342:	d10e      	bne.n	8008362 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008344:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008348:	9300      	str	r3, [sp, #0]
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2200      	movs	r2, #0
 800834e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 f819 	bl	800838a <UART_WaitOnFlagUntilTimeout>
 8008358:	4603      	mov	r3, r0
 800835a:	2b00      	cmp	r3, #0
 800835c:	d001      	beq.n	8008362 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800835e:	2303      	movs	r3, #3
 8008360:	e00f      	b.n	8008382 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2220      	movs	r2, #32
 8008366:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2220      	movs	r2, #32
 800836e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008380:	2300      	movs	r3, #0
}
 8008382:	4618      	mov	r0, r3
 8008384:	3710      	adds	r7, #16
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}

0800838a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800838a:	b580      	push	{r7, lr}
 800838c:	b09c      	sub	sp, #112	; 0x70
 800838e:	af00      	add	r7, sp, #0
 8008390:	60f8      	str	r0, [r7, #12]
 8008392:	60b9      	str	r1, [r7, #8]
 8008394:	603b      	str	r3, [r7, #0]
 8008396:	4613      	mov	r3, r2
 8008398:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800839a:	e0a9      	b.n	80084f0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800839c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800839e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083a2:	f000 80a5 	beq.w	80084f0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083a6:	f7fa ff75 	bl	8003294 <HAL_GetTick>
 80083aa:	4602      	mov	r2, r0
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	1ad3      	subs	r3, r2, r3
 80083b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d302      	bcc.n	80083bc <UART_WaitOnFlagUntilTimeout+0x32>
 80083b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d140      	bne.n	800843e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083c4:	e853 3f00 	ldrex	r3, [r3]
 80083c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80083ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80083d0:	667b      	str	r3, [r7, #100]	; 0x64
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	461a      	mov	r2, r3
 80083d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083dc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80083e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80083e2:	e841 2300 	strex	r3, r2, [r1]
 80083e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80083e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d1e6      	bne.n	80083bc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	3308      	adds	r3, #8
 80083f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083f8:	e853 3f00 	ldrex	r3, [r3]
 80083fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80083fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008400:	f023 0301 	bic.w	r3, r3, #1
 8008404:	663b      	str	r3, [r7, #96]	; 0x60
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	3308      	adds	r3, #8
 800840c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800840e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008410:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008412:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008414:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008416:	e841 2300 	strex	r3, r2, [r1]
 800841a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800841c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800841e:	2b00      	cmp	r3, #0
 8008420:	d1e5      	bne.n	80083ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2220      	movs	r2, #32
 8008426:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2220      	movs	r2, #32
 800842e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2200      	movs	r2, #0
 8008436:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800843a:	2303      	movs	r3, #3
 800843c:	e069      	b.n	8008512 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f003 0304 	and.w	r3, r3, #4
 8008448:	2b00      	cmp	r3, #0
 800844a:	d051      	beq.n	80084f0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	69db      	ldr	r3, [r3, #28]
 8008452:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008456:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800845a:	d149      	bne.n	80084f0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008464:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800846e:	e853 3f00 	ldrex	r3, [r3]
 8008472:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008476:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800847a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	461a      	mov	r2, r3
 8008482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008484:	637b      	str	r3, [r7, #52]	; 0x34
 8008486:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008488:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800848a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800848c:	e841 2300 	strex	r3, r2, [r1]
 8008490:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008494:	2b00      	cmp	r3, #0
 8008496:	d1e6      	bne.n	8008466 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	3308      	adds	r3, #8
 800849e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	e853 3f00 	ldrex	r3, [r3]
 80084a6:	613b      	str	r3, [r7, #16]
   return(result);
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	f023 0301 	bic.w	r3, r3, #1
 80084ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	3308      	adds	r3, #8
 80084b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80084b8:	623a      	str	r2, [r7, #32]
 80084ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084bc:	69f9      	ldr	r1, [r7, #28]
 80084be:	6a3a      	ldr	r2, [r7, #32]
 80084c0:	e841 2300 	strex	r3, r2, [r1]
 80084c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80084c6:	69bb      	ldr	r3, [r7, #24]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d1e5      	bne.n	8008498 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2220      	movs	r2, #32
 80084d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2220      	movs	r2, #32
 80084d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2220      	movs	r2, #32
 80084e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2200      	movs	r2, #0
 80084e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80084ec:	2303      	movs	r3, #3
 80084ee:	e010      	b.n	8008512 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	69da      	ldr	r2, [r3, #28]
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	4013      	ands	r3, r2
 80084fa:	68ba      	ldr	r2, [r7, #8]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	bf0c      	ite	eq
 8008500:	2301      	moveq	r3, #1
 8008502:	2300      	movne	r3, #0
 8008504:	b2db      	uxtb	r3, r3
 8008506:	461a      	mov	r2, r3
 8008508:	79fb      	ldrb	r3, [r7, #7]
 800850a:	429a      	cmp	r2, r3
 800850c:	f43f af46 	beq.w	800839c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008510:	2300      	movs	r3, #0
}
 8008512:	4618      	mov	r0, r3
 8008514:	3770      	adds	r7, #112	; 0x70
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}

0800851a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800851a:	b480      	push	{r7}
 800851c:	b085      	sub	sp, #20
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008528:	2b01      	cmp	r3, #1
 800852a:	d101      	bne.n	8008530 <HAL_UARTEx_DisableFifoMode+0x16>
 800852c:	2302      	movs	r3, #2
 800852e:	e027      	b.n	8008580 <HAL_UARTEx_DisableFifoMode+0x66>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2201      	movs	r2, #1
 8008534:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2224      	movs	r2, #36	; 0x24
 800853c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f022 0201 	bic.w	r2, r2, #1
 8008556:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800855e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	68fa      	ldr	r2, [r7, #12]
 800856c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2220      	movs	r2, #32
 8008572:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2200      	movs	r2, #0
 800857a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800857e:	2300      	movs	r3, #0
}
 8008580:	4618      	mov	r0, r3
 8008582:	3714      	adds	r7, #20
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800859c:	2b01      	cmp	r3, #1
 800859e:	d101      	bne.n	80085a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80085a0:	2302      	movs	r3, #2
 80085a2:	e02d      	b.n	8008600 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2224      	movs	r2, #36	; 0x24
 80085b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f022 0201 	bic.w	r2, r2, #1
 80085ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	683a      	ldr	r2, [r7, #0]
 80085dc:	430a      	orrs	r2, r1
 80085de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 f84f 	bl	8008684 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	68fa      	ldr	r2, [r7, #12]
 80085ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2220      	movs	r2, #32
 80085f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80085fe:	2300      	movs	r3, #0
}
 8008600:	4618      	mov	r0, r3
 8008602:	3710      	adds	r7, #16
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008618:	2b01      	cmp	r3, #1
 800861a:	d101      	bne.n	8008620 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800861c:	2302      	movs	r3, #2
 800861e:	e02d      	b.n	800867c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2201      	movs	r2, #1
 8008624:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2224      	movs	r2, #36	; 0x24
 800862c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f022 0201 	bic.w	r2, r2, #1
 8008646:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	683a      	ldr	r2, [r7, #0]
 8008658:	430a      	orrs	r2, r1
 800865a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 f811 	bl	8008684 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	68fa      	ldr	r2, [r7, #12]
 8008668:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2220      	movs	r2, #32
 800866e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800867a:	2300      	movs	r3, #0
}
 800867c:	4618      	mov	r0, r3
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008684:	b480      	push	{r7}
 8008686:	b085      	sub	sp, #20
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008690:	2b00      	cmp	r3, #0
 8008692:	d108      	bne.n	80086a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2201      	movs	r2, #1
 8008698:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2201      	movs	r2, #1
 80086a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80086a4:	e031      	b.n	800870a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80086a6:	2310      	movs	r3, #16
 80086a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80086aa:	2310      	movs	r3, #16
 80086ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	689b      	ldr	r3, [r3, #8]
 80086b4:	0e5b      	lsrs	r3, r3, #25
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	f003 0307 	and.w	r3, r3, #7
 80086bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	689b      	ldr	r3, [r3, #8]
 80086c4:	0f5b      	lsrs	r3, r3, #29
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	f003 0307 	and.w	r3, r3, #7
 80086cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80086ce:	7bbb      	ldrb	r3, [r7, #14]
 80086d0:	7b3a      	ldrb	r2, [r7, #12]
 80086d2:	4911      	ldr	r1, [pc, #68]	; (8008718 <UARTEx_SetNbDataToProcess+0x94>)
 80086d4:	5c8a      	ldrb	r2, [r1, r2]
 80086d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80086da:	7b3a      	ldrb	r2, [r7, #12]
 80086dc:	490f      	ldr	r1, [pc, #60]	; (800871c <UARTEx_SetNbDataToProcess+0x98>)
 80086de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80086e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80086e4:	b29a      	uxth	r2, r3
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80086ec:	7bfb      	ldrb	r3, [r7, #15]
 80086ee:	7b7a      	ldrb	r2, [r7, #13]
 80086f0:	4909      	ldr	r1, [pc, #36]	; (8008718 <UARTEx_SetNbDataToProcess+0x94>)
 80086f2:	5c8a      	ldrb	r2, [r1, r2]
 80086f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80086f8:	7b7a      	ldrb	r2, [r7, #13]
 80086fa:	4908      	ldr	r1, [pc, #32]	; (800871c <UARTEx_SetNbDataToProcess+0x98>)
 80086fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80086fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8008702:	b29a      	uxth	r2, r3
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800870a:	bf00      	nop
 800870c:	3714      	adds	r7, #20
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr
 8008716:	bf00      	nop
 8008718:	08049910 	.word	0x08049910
 800871c:	08049918 	.word	0x08049918

08008720 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008720:	b084      	sub	sp, #16
 8008722:	b580      	push	{r7, lr}
 8008724:	b084      	sub	sp, #16
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
 800872a:	f107 001c 	add.w	r0, r7, #28
 800872e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008734:	2b01      	cmp	r3, #1
 8008736:	d120      	bne.n	800877a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800873c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	68da      	ldr	r2, [r3, #12]
 8008748:	4b2a      	ldr	r3, [pc, #168]	; (80087f4 <USB_CoreInit+0xd4>)
 800874a:	4013      	ands	r3, r2
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800875c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800875e:	2b01      	cmp	r3, #1
 8008760:	d105      	bne.n	800876e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 faac 	bl	8008ccc <USB_CoreReset>
 8008774:	4603      	mov	r3, r0
 8008776:	73fb      	strb	r3, [r7, #15]
 8008778:	e01a      	b.n	80087b0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 faa0 	bl	8008ccc <USB_CoreReset>
 800878c:	4603      	mov	r3, r0
 800878e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008790:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008792:	2b00      	cmp	r3, #0
 8008794:	d106      	bne.n	80087a4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800879a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	639a      	str	r2, [r3, #56]	; 0x38
 80087a2:	e005      	b.n	80087b0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80087b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d116      	bne.n	80087e4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087ba:	b29a      	uxth	r2, r3
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80087c4:	4b0c      	ldr	r3, [pc, #48]	; (80087f8 <USB_CoreInit+0xd8>)
 80087c6:	4313      	orrs	r3, r2
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	689b      	ldr	r3, [r3, #8]
 80087d0:	f043 0206 	orr.w	r2, r3, #6
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	f043 0220 	orr.w	r2, r3, #32
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80087e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3710      	adds	r7, #16
 80087ea:	46bd      	mov	sp, r7
 80087ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80087f0:	b004      	add	sp, #16
 80087f2:	4770      	bx	lr
 80087f4:	ffbdffbf 	.word	0xffbdffbf
 80087f8:	03ee0000 	.word	0x03ee0000

080087fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	689b      	ldr	r3, [r3, #8]
 8008808:	f023 0201 	bic.w	r2, r3, #1
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008810:	2300      	movs	r3, #0
}
 8008812:	4618      	mov	r0, r3
 8008814:	370c      	adds	r7, #12
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr

0800881e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800881e:	b580      	push	{r7, lr}
 8008820:	b084      	sub	sp, #16
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
 8008826:	460b      	mov	r3, r1
 8008828:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800882a:	2300      	movs	r3, #0
 800882c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	68db      	ldr	r3, [r3, #12]
 8008832:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800883a:	78fb      	ldrb	r3, [r7, #3]
 800883c:	2b01      	cmp	r3, #1
 800883e:	d115      	bne.n	800886c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	68db      	ldr	r3, [r3, #12]
 8008844:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800884c:	2001      	movs	r0, #1
 800884e:	f7fa fd2d 	bl	80032ac <HAL_Delay>
      ms++;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	3301      	adds	r3, #1
 8008856:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 fa29 	bl	8008cb0 <USB_GetMode>
 800885e:	4603      	mov	r3, r0
 8008860:	2b01      	cmp	r3, #1
 8008862:	d01e      	beq.n	80088a2 <USB_SetCurrentMode+0x84>
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2b31      	cmp	r3, #49	; 0x31
 8008868:	d9f0      	bls.n	800884c <USB_SetCurrentMode+0x2e>
 800886a:	e01a      	b.n	80088a2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800886c:	78fb      	ldrb	r3, [r7, #3]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d115      	bne.n	800889e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	68db      	ldr	r3, [r3, #12]
 8008876:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800887e:	2001      	movs	r0, #1
 8008880:	f7fa fd14 	bl	80032ac <HAL_Delay>
      ms++;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	3301      	adds	r3, #1
 8008888:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 fa10 	bl	8008cb0 <USB_GetMode>
 8008890:	4603      	mov	r3, r0
 8008892:	2b00      	cmp	r3, #0
 8008894:	d005      	beq.n	80088a2 <USB_SetCurrentMode+0x84>
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2b31      	cmp	r3, #49	; 0x31
 800889a:	d9f0      	bls.n	800887e <USB_SetCurrentMode+0x60>
 800889c:	e001      	b.n	80088a2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800889e:	2301      	movs	r3, #1
 80088a0:	e005      	b.n	80088ae <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2b32      	cmp	r3, #50	; 0x32
 80088a6:	d101      	bne.n	80088ac <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80088a8:	2301      	movs	r3, #1
 80088aa:	e000      	b.n	80088ae <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3710      	adds	r7, #16
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
	...

080088b8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80088b8:	b084      	sub	sp, #16
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b086      	sub	sp, #24
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
 80088c2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80088c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80088ca:	2300      	movs	r3, #0
 80088cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80088d2:	2300      	movs	r3, #0
 80088d4:	613b      	str	r3, [r7, #16]
 80088d6:	e009      	b.n	80088ec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	3340      	adds	r3, #64	; 0x40
 80088de:	009b      	lsls	r3, r3, #2
 80088e0:	4413      	add	r3, r2
 80088e2:	2200      	movs	r2, #0
 80088e4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	3301      	adds	r3, #1
 80088ea:	613b      	str	r3, [r7, #16]
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	2b0e      	cmp	r3, #14
 80088f0:	d9f2      	bls.n	80088d8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80088f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d11c      	bne.n	8008932 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	68fa      	ldr	r2, [r7, #12]
 8008902:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008906:	f043 0302 	orr.w	r3, r3, #2
 800890a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008910:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	601a      	str	r2, [r3, #0]
 8008930:	e005      	b.n	800893e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008936:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008944:	461a      	mov	r2, r3
 8008946:	2300      	movs	r3, #0
 8008948:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008950:	4619      	mov	r1, r3
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008958:	461a      	mov	r2, r3
 800895a:	680b      	ldr	r3, [r1, #0]
 800895c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800895e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008960:	2b01      	cmp	r3, #1
 8008962:	d10c      	bne.n	800897e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008966:	2b00      	cmp	r3, #0
 8008968:	d104      	bne.n	8008974 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800896a:	2100      	movs	r1, #0
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f000 f965 	bl	8008c3c <USB_SetDevSpeed>
 8008972:	e008      	b.n	8008986 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008974:	2101      	movs	r1, #1
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 f960 	bl	8008c3c <USB_SetDevSpeed>
 800897c:	e003      	b.n	8008986 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800897e:	2103      	movs	r1, #3
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 f95b 	bl	8008c3c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008986:	2110      	movs	r1, #16
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f000 f8f3 	bl	8008b74 <USB_FlushTxFifo>
 800898e:	4603      	mov	r3, r0
 8008990:	2b00      	cmp	r3, #0
 8008992:	d001      	beq.n	8008998 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008994:	2301      	movs	r3, #1
 8008996:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 f91f 	bl	8008bdc <USB_FlushRxFifo>
 800899e:	4603      	mov	r3, r0
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d001      	beq.n	80089a8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80089a4:	2301      	movs	r3, #1
 80089a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089ae:	461a      	mov	r2, r3
 80089b0:	2300      	movs	r3, #0
 80089b2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089ba:	461a      	mov	r2, r3
 80089bc:	2300      	movs	r3, #0
 80089be:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089c6:	461a      	mov	r2, r3
 80089c8:	2300      	movs	r3, #0
 80089ca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80089cc:	2300      	movs	r3, #0
 80089ce:	613b      	str	r3, [r7, #16]
 80089d0:	e043      	b.n	8008a5a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	015a      	lsls	r2, r3, #5
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	4413      	add	r3, r2
 80089da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089e8:	d118      	bne.n	8008a1c <USB_DevInit+0x164>
    {
      if (i == 0U)
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d10a      	bne.n	8008a06 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	015a      	lsls	r2, r3, #5
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	4413      	add	r3, r2
 80089f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089fc:	461a      	mov	r2, r3
 80089fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008a02:	6013      	str	r3, [r2, #0]
 8008a04:	e013      	b.n	8008a2e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	015a      	lsls	r2, r3, #5
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	4413      	add	r3, r2
 8008a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a12:	461a      	mov	r2, r3
 8008a14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008a18:	6013      	str	r3, [r2, #0]
 8008a1a:	e008      	b.n	8008a2e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	015a      	lsls	r2, r3, #5
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	4413      	add	r3, r2
 8008a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a28:	461a      	mov	r2, r3
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	015a      	lsls	r2, r3, #5
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	4413      	add	r3, r2
 8008a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	015a      	lsls	r2, r3, #5
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	4413      	add	r3, r2
 8008a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008a52:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	3301      	adds	r3, #1
 8008a58:	613b      	str	r3, [r7, #16]
 8008a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5c:	693a      	ldr	r2, [r7, #16]
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d3b7      	bcc.n	80089d2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a62:	2300      	movs	r3, #0
 8008a64:	613b      	str	r3, [r7, #16]
 8008a66:	e043      	b.n	8008af0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	015a      	lsls	r2, r3, #5
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	4413      	add	r3, r2
 8008a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a7e:	d118      	bne.n	8008ab2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d10a      	bne.n	8008a9c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	015a      	lsls	r2, r3, #5
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	4413      	add	r3, r2
 8008a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a92:	461a      	mov	r2, r3
 8008a94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008a98:	6013      	str	r3, [r2, #0]
 8008a9a:	e013      	b.n	8008ac4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	015a      	lsls	r2, r3, #5
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	4413      	add	r3, r2
 8008aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008aae:	6013      	str	r3, [r2, #0]
 8008ab0:	e008      	b.n	8008ac4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	015a      	lsls	r2, r3, #5
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	4413      	add	r3, r2
 8008aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008abe:	461a      	mov	r2, r3
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	015a      	lsls	r2, r3, #5
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	4413      	add	r3, r2
 8008acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	015a      	lsls	r2, r3, #5
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	4413      	add	r3, r2
 8008ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008ae8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	3301      	adds	r3, #1
 8008aee:	613b      	str	r3, [r7, #16]
 8008af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af2:	693a      	ldr	r2, [r7, #16]
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d3b7      	bcc.n	8008a68 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008afe:	691b      	ldr	r3, [r3, #16]
 8008b00:	68fa      	ldr	r2, [r7, #12]
 8008b02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b0a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008b18:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d105      	bne.n	8008b2c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	699b      	ldr	r3, [r3, #24]
 8008b24:	f043 0210 	orr.w	r2, r3, #16
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	699a      	ldr	r2, [r3, #24]
 8008b30:	4b0e      	ldr	r3, [pc, #56]	; (8008b6c <USB_DevInit+0x2b4>)
 8008b32:	4313      	orrs	r3, r2
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d005      	beq.n	8008b4a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	699b      	ldr	r3, [r3, #24]
 8008b42:	f043 0208 	orr.w	r2, r3, #8
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d105      	bne.n	8008b5c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	699a      	ldr	r2, [r3, #24]
 8008b54:	4b06      	ldr	r3, [pc, #24]	; (8008b70 <USB_DevInit+0x2b8>)
 8008b56:	4313      	orrs	r3, r2
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3718      	adds	r7, #24
 8008b62:	46bd      	mov	sp, r7
 8008b64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b68:	b004      	add	sp, #16
 8008b6a:	4770      	bx	lr
 8008b6c:	803c3800 	.word	0x803c3800
 8008b70:	40000004 	.word	0x40000004

08008b74 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b085      	sub	sp, #20
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	3301      	adds	r3, #1
 8008b86:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	4a13      	ldr	r2, [pc, #76]	; (8008bd8 <USB_FlushTxFifo+0x64>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d901      	bls.n	8008b94 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008b90:	2303      	movs	r3, #3
 8008b92:	e01b      	b.n	8008bcc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	691b      	ldr	r3, [r3, #16]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	daf2      	bge.n	8008b82 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	019b      	lsls	r3, r3, #6
 8008ba4:	f043 0220 	orr.w	r2, r3, #32
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	3301      	adds	r3, #1
 8008bb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	4a08      	ldr	r2, [pc, #32]	; (8008bd8 <USB_FlushTxFifo+0x64>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d901      	bls.n	8008bbe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008bba:	2303      	movs	r3, #3
 8008bbc:	e006      	b.n	8008bcc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	691b      	ldr	r3, [r3, #16]
 8008bc2:	f003 0320 	and.w	r3, r3, #32
 8008bc6:	2b20      	cmp	r3, #32
 8008bc8:	d0f0      	beq.n	8008bac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008bca:	2300      	movs	r3, #0
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3714      	adds	r7, #20
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr
 8008bd8:	00030d40 	.word	0x00030d40

08008bdc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b085      	sub	sp, #20
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008be4:	2300      	movs	r3, #0
 8008be6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	3301      	adds	r3, #1
 8008bec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	4a11      	ldr	r2, [pc, #68]	; (8008c38 <USB_FlushRxFifo+0x5c>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d901      	bls.n	8008bfa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008bf6:	2303      	movs	r3, #3
 8008bf8:	e018      	b.n	8008c2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	691b      	ldr	r3, [r3, #16]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	daf2      	bge.n	8008be8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008c02:	2300      	movs	r3, #0
 8008c04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2210      	movs	r2, #16
 8008c0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	4a08      	ldr	r2, [pc, #32]	; (8008c38 <USB_FlushRxFifo+0x5c>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d901      	bls.n	8008c1e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008c1a:	2303      	movs	r3, #3
 8008c1c:	e006      	b.n	8008c2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	691b      	ldr	r3, [r3, #16]
 8008c22:	f003 0310 	and.w	r3, r3, #16
 8008c26:	2b10      	cmp	r3, #16
 8008c28:	d0f0      	beq.n	8008c0c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008c2a:	2300      	movs	r3, #0
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3714      	adds	r7, #20
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr
 8008c38:	00030d40 	.word	0x00030d40

08008c3c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b085      	sub	sp, #20
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	460b      	mov	r3, r1
 8008c46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	78fb      	ldrb	r3, [r7, #3]
 8008c56:	68f9      	ldr	r1, [r7, #12]
 8008c58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008c60:	2300      	movs	r3, #0
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3714      	adds	r7, #20
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr

08008c6e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008c6e:	b480      	push	{r7}
 8008c70:	b085      	sub	sp, #20
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	68fa      	ldr	r2, [r7, #12]
 8008c84:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008c88:	f023 0303 	bic.w	r3, r3, #3
 8008c8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	68fa      	ldr	r2, [r7, #12]
 8008c98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c9c:	f043 0302 	orr.w	r3, r3, #2
 8008ca0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008ca2:	2300      	movs	r3, #0
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3714      	adds	r7, #20
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr

08008cb0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b083      	sub	sp, #12
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	695b      	ldr	r3, [r3, #20]
 8008cbc:	f003 0301 	and.w	r3, r3, #1
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b085      	sub	sp, #20
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	3301      	adds	r3, #1
 8008cdc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	4a13      	ldr	r2, [pc, #76]	; (8008d30 <USB_CoreReset+0x64>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d901      	bls.n	8008cea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008ce6:	2303      	movs	r3, #3
 8008ce8:	e01b      	b.n	8008d22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	691b      	ldr	r3, [r3, #16]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	daf2      	bge.n	8008cd8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	691b      	ldr	r3, [r3, #16]
 8008cfa:	f043 0201 	orr.w	r2, r3, #1
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	3301      	adds	r3, #1
 8008d06:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	4a09      	ldr	r2, [pc, #36]	; (8008d30 <USB_CoreReset+0x64>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d901      	bls.n	8008d14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008d10:	2303      	movs	r3, #3
 8008d12:	e006      	b.n	8008d22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	691b      	ldr	r3, [r3, #16]
 8008d18:	f003 0301 	and.w	r3, r3, #1
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d0f0      	beq.n	8008d02 <USB_CoreReset+0x36>

  return HAL_OK;
 8008d20:	2300      	movs	r3, #0
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3714      	adds	r7, #20
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr
 8008d2e:	bf00      	nop
 8008d30:	00030d40 	.word	0x00030d40

08008d34 <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 8008d34:	b480      	push	{r7}
 8008d36:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8008d38:	bf00      	nop
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr
	...

08008d44 <sbrk_aligned>:
 8008d44:	b570      	push	{r4, r5, r6, lr}
 8008d46:	4e0e      	ldr	r6, [pc, #56]	; (8008d80 <sbrk_aligned+0x3c>)
 8008d48:	460c      	mov	r4, r1
 8008d4a:	6831      	ldr	r1, [r6, #0]
 8008d4c:	4605      	mov	r5, r0
 8008d4e:	b911      	cbnz	r1, 8008d56 <sbrk_aligned+0x12>
 8008d50:	f000 f8cc 	bl	8008eec <_sbrk_r>
 8008d54:	6030      	str	r0, [r6, #0]
 8008d56:	4621      	mov	r1, r4
 8008d58:	4628      	mov	r0, r5
 8008d5a:	f000 f8c7 	bl	8008eec <_sbrk_r>
 8008d5e:	1c43      	adds	r3, r0, #1
 8008d60:	d00a      	beq.n	8008d78 <sbrk_aligned+0x34>
 8008d62:	1cc4      	adds	r4, r0, #3
 8008d64:	f024 0403 	bic.w	r4, r4, #3
 8008d68:	42a0      	cmp	r0, r4
 8008d6a:	d007      	beq.n	8008d7c <sbrk_aligned+0x38>
 8008d6c:	1a21      	subs	r1, r4, r0
 8008d6e:	4628      	mov	r0, r5
 8008d70:	f000 f8bc 	bl	8008eec <_sbrk_r>
 8008d74:	3001      	adds	r0, #1
 8008d76:	d101      	bne.n	8008d7c <sbrk_aligned+0x38>
 8008d78:	f04f 34ff 	mov.w	r4, #4294967295
 8008d7c:	4620      	mov	r0, r4
 8008d7e:	bd70      	pop	{r4, r5, r6, pc}
 8008d80:	24000ba0 	.word	0x24000ba0

08008d84 <_malloc_r>:
 8008d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d88:	1ccd      	adds	r5, r1, #3
 8008d8a:	f025 0503 	bic.w	r5, r5, #3
 8008d8e:	3508      	adds	r5, #8
 8008d90:	2d0c      	cmp	r5, #12
 8008d92:	bf38      	it	cc
 8008d94:	250c      	movcc	r5, #12
 8008d96:	2d00      	cmp	r5, #0
 8008d98:	4607      	mov	r7, r0
 8008d9a:	db01      	blt.n	8008da0 <_malloc_r+0x1c>
 8008d9c:	42a9      	cmp	r1, r5
 8008d9e:	d905      	bls.n	8008dac <_malloc_r+0x28>
 8008da0:	230c      	movs	r3, #12
 8008da2:	603b      	str	r3, [r7, #0]
 8008da4:	2600      	movs	r6, #0
 8008da6:	4630      	mov	r0, r6
 8008da8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008e80 <_malloc_r+0xfc>
 8008db0:	f000 f868 	bl	8008e84 <__malloc_lock>
 8008db4:	f8d8 3000 	ldr.w	r3, [r8]
 8008db8:	461c      	mov	r4, r3
 8008dba:	bb5c      	cbnz	r4, 8008e14 <_malloc_r+0x90>
 8008dbc:	4629      	mov	r1, r5
 8008dbe:	4638      	mov	r0, r7
 8008dc0:	f7ff ffc0 	bl	8008d44 <sbrk_aligned>
 8008dc4:	1c43      	adds	r3, r0, #1
 8008dc6:	4604      	mov	r4, r0
 8008dc8:	d155      	bne.n	8008e76 <_malloc_r+0xf2>
 8008dca:	f8d8 4000 	ldr.w	r4, [r8]
 8008dce:	4626      	mov	r6, r4
 8008dd0:	2e00      	cmp	r6, #0
 8008dd2:	d145      	bne.n	8008e60 <_malloc_r+0xdc>
 8008dd4:	2c00      	cmp	r4, #0
 8008dd6:	d048      	beq.n	8008e6a <_malloc_r+0xe6>
 8008dd8:	6823      	ldr	r3, [r4, #0]
 8008dda:	4631      	mov	r1, r6
 8008ddc:	4638      	mov	r0, r7
 8008dde:	eb04 0903 	add.w	r9, r4, r3
 8008de2:	f000 f883 	bl	8008eec <_sbrk_r>
 8008de6:	4581      	cmp	r9, r0
 8008de8:	d13f      	bne.n	8008e6a <_malloc_r+0xe6>
 8008dea:	6821      	ldr	r1, [r4, #0]
 8008dec:	1a6d      	subs	r5, r5, r1
 8008dee:	4629      	mov	r1, r5
 8008df0:	4638      	mov	r0, r7
 8008df2:	f7ff ffa7 	bl	8008d44 <sbrk_aligned>
 8008df6:	3001      	adds	r0, #1
 8008df8:	d037      	beq.n	8008e6a <_malloc_r+0xe6>
 8008dfa:	6823      	ldr	r3, [r4, #0]
 8008dfc:	442b      	add	r3, r5
 8008dfe:	6023      	str	r3, [r4, #0]
 8008e00:	f8d8 3000 	ldr.w	r3, [r8]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d038      	beq.n	8008e7a <_malloc_r+0xf6>
 8008e08:	685a      	ldr	r2, [r3, #4]
 8008e0a:	42a2      	cmp	r2, r4
 8008e0c:	d12b      	bne.n	8008e66 <_malloc_r+0xe2>
 8008e0e:	2200      	movs	r2, #0
 8008e10:	605a      	str	r2, [r3, #4]
 8008e12:	e00f      	b.n	8008e34 <_malloc_r+0xb0>
 8008e14:	6822      	ldr	r2, [r4, #0]
 8008e16:	1b52      	subs	r2, r2, r5
 8008e18:	d41f      	bmi.n	8008e5a <_malloc_r+0xd6>
 8008e1a:	2a0b      	cmp	r2, #11
 8008e1c:	d917      	bls.n	8008e4e <_malloc_r+0xca>
 8008e1e:	1961      	adds	r1, r4, r5
 8008e20:	42a3      	cmp	r3, r4
 8008e22:	6025      	str	r5, [r4, #0]
 8008e24:	bf18      	it	ne
 8008e26:	6059      	strne	r1, [r3, #4]
 8008e28:	6863      	ldr	r3, [r4, #4]
 8008e2a:	bf08      	it	eq
 8008e2c:	f8c8 1000 	streq.w	r1, [r8]
 8008e30:	5162      	str	r2, [r4, r5]
 8008e32:	604b      	str	r3, [r1, #4]
 8008e34:	4638      	mov	r0, r7
 8008e36:	f104 060b 	add.w	r6, r4, #11
 8008e3a:	f000 f829 	bl	8008e90 <__malloc_unlock>
 8008e3e:	f026 0607 	bic.w	r6, r6, #7
 8008e42:	1d23      	adds	r3, r4, #4
 8008e44:	1af2      	subs	r2, r6, r3
 8008e46:	d0ae      	beq.n	8008da6 <_malloc_r+0x22>
 8008e48:	1b9b      	subs	r3, r3, r6
 8008e4a:	50a3      	str	r3, [r4, r2]
 8008e4c:	e7ab      	b.n	8008da6 <_malloc_r+0x22>
 8008e4e:	42a3      	cmp	r3, r4
 8008e50:	6862      	ldr	r2, [r4, #4]
 8008e52:	d1dd      	bne.n	8008e10 <_malloc_r+0x8c>
 8008e54:	f8c8 2000 	str.w	r2, [r8]
 8008e58:	e7ec      	b.n	8008e34 <_malloc_r+0xb0>
 8008e5a:	4623      	mov	r3, r4
 8008e5c:	6864      	ldr	r4, [r4, #4]
 8008e5e:	e7ac      	b.n	8008dba <_malloc_r+0x36>
 8008e60:	4634      	mov	r4, r6
 8008e62:	6876      	ldr	r6, [r6, #4]
 8008e64:	e7b4      	b.n	8008dd0 <_malloc_r+0x4c>
 8008e66:	4613      	mov	r3, r2
 8008e68:	e7cc      	b.n	8008e04 <_malloc_r+0x80>
 8008e6a:	230c      	movs	r3, #12
 8008e6c:	603b      	str	r3, [r7, #0]
 8008e6e:	4638      	mov	r0, r7
 8008e70:	f000 f80e 	bl	8008e90 <__malloc_unlock>
 8008e74:	e797      	b.n	8008da6 <_malloc_r+0x22>
 8008e76:	6025      	str	r5, [r4, #0]
 8008e78:	e7dc      	b.n	8008e34 <_malloc_r+0xb0>
 8008e7a:	605b      	str	r3, [r3, #4]
 8008e7c:	deff      	udf	#255	; 0xff
 8008e7e:	bf00      	nop
 8008e80:	24000b9c 	.word	0x24000b9c

08008e84 <__malloc_lock>:
 8008e84:	4801      	ldr	r0, [pc, #4]	; (8008e8c <__malloc_lock+0x8>)
 8008e86:	f000 b86b 	b.w	8008f60 <__retarget_lock_acquire_recursive>
 8008e8a:	bf00      	nop
 8008e8c:	24000ce0 	.word	0x24000ce0

08008e90 <__malloc_unlock>:
 8008e90:	4801      	ldr	r0, [pc, #4]	; (8008e98 <__malloc_unlock+0x8>)
 8008e92:	f000 b866 	b.w	8008f62 <__retarget_lock_release_recursive>
 8008e96:	bf00      	nop
 8008e98:	24000ce0 	.word	0x24000ce0

08008e9c <siprintf>:
 8008e9c:	b40e      	push	{r1, r2, r3}
 8008e9e:	b500      	push	{lr}
 8008ea0:	b09c      	sub	sp, #112	; 0x70
 8008ea2:	ab1d      	add	r3, sp, #116	; 0x74
 8008ea4:	9002      	str	r0, [sp, #8]
 8008ea6:	9006      	str	r0, [sp, #24]
 8008ea8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008eac:	4809      	ldr	r0, [pc, #36]	; (8008ed4 <siprintf+0x38>)
 8008eae:	9107      	str	r1, [sp, #28]
 8008eb0:	9104      	str	r1, [sp, #16]
 8008eb2:	4909      	ldr	r1, [pc, #36]	; (8008ed8 <siprintf+0x3c>)
 8008eb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eb8:	9105      	str	r1, [sp, #20]
 8008eba:	6800      	ldr	r0, [r0, #0]
 8008ebc:	9301      	str	r3, [sp, #4]
 8008ebe:	a902      	add	r1, sp, #8
 8008ec0:	f000 f904 	bl	80090cc <_svfiprintf_r>
 8008ec4:	9b02      	ldr	r3, [sp, #8]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	701a      	strb	r2, [r3, #0]
 8008eca:	b01c      	add	sp, #112	; 0x70
 8008ecc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ed0:	b003      	add	sp, #12
 8008ed2:	4770      	bx	lr
 8008ed4:	24000288 	.word	0x24000288
 8008ed8:	ffff0208 	.word	0xffff0208

08008edc <memset>:
 8008edc:	4402      	add	r2, r0
 8008ede:	4603      	mov	r3, r0
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d100      	bne.n	8008ee6 <memset+0xa>
 8008ee4:	4770      	bx	lr
 8008ee6:	f803 1b01 	strb.w	r1, [r3], #1
 8008eea:	e7f9      	b.n	8008ee0 <memset+0x4>

08008eec <_sbrk_r>:
 8008eec:	b538      	push	{r3, r4, r5, lr}
 8008eee:	4d06      	ldr	r5, [pc, #24]	; (8008f08 <_sbrk_r+0x1c>)
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	4604      	mov	r4, r0
 8008ef4:	4608      	mov	r0, r1
 8008ef6:	602b      	str	r3, [r5, #0]
 8008ef8:	f7fa f8e6 	bl	80030c8 <_sbrk>
 8008efc:	1c43      	adds	r3, r0, #1
 8008efe:	d102      	bne.n	8008f06 <_sbrk_r+0x1a>
 8008f00:	682b      	ldr	r3, [r5, #0]
 8008f02:	b103      	cbz	r3, 8008f06 <_sbrk_r+0x1a>
 8008f04:	6023      	str	r3, [r4, #0]
 8008f06:	bd38      	pop	{r3, r4, r5, pc}
 8008f08:	24000cdc 	.word	0x24000cdc

08008f0c <__errno>:
 8008f0c:	4b01      	ldr	r3, [pc, #4]	; (8008f14 <__errno+0x8>)
 8008f0e:	6818      	ldr	r0, [r3, #0]
 8008f10:	4770      	bx	lr
 8008f12:	bf00      	nop
 8008f14:	24000288 	.word	0x24000288

08008f18 <__libc_init_array>:
 8008f18:	b570      	push	{r4, r5, r6, lr}
 8008f1a:	4d0d      	ldr	r5, [pc, #52]	; (8008f50 <__libc_init_array+0x38>)
 8008f1c:	4c0d      	ldr	r4, [pc, #52]	; (8008f54 <__libc_init_array+0x3c>)
 8008f1e:	1b64      	subs	r4, r4, r5
 8008f20:	10a4      	asrs	r4, r4, #2
 8008f22:	2600      	movs	r6, #0
 8008f24:	42a6      	cmp	r6, r4
 8008f26:	d109      	bne.n	8008f3c <__libc_init_array+0x24>
 8008f28:	4d0b      	ldr	r5, [pc, #44]	; (8008f58 <__libc_init_array+0x40>)
 8008f2a:	4c0c      	ldr	r4, [pc, #48]	; (8008f5c <__libc_init_array+0x44>)
 8008f2c:	f000 fbf0 	bl	8009710 <_init>
 8008f30:	1b64      	subs	r4, r4, r5
 8008f32:	10a4      	asrs	r4, r4, #2
 8008f34:	2600      	movs	r6, #0
 8008f36:	42a6      	cmp	r6, r4
 8008f38:	d105      	bne.n	8008f46 <__libc_init_array+0x2e>
 8008f3a:	bd70      	pop	{r4, r5, r6, pc}
 8008f3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f40:	4798      	blx	r3
 8008f42:	3601      	adds	r6, #1
 8008f44:	e7ee      	b.n	8008f24 <__libc_init_array+0xc>
 8008f46:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f4a:	4798      	blx	r3
 8008f4c:	3601      	adds	r6, #1
 8008f4e:	e7f2      	b.n	8008f36 <__libc_init_array+0x1e>
 8008f50:	0804995c 	.word	0x0804995c
 8008f54:	0804995c 	.word	0x0804995c
 8008f58:	0804995c 	.word	0x0804995c
 8008f5c:	08049960 	.word	0x08049960

08008f60 <__retarget_lock_acquire_recursive>:
 8008f60:	4770      	bx	lr

08008f62 <__retarget_lock_release_recursive>:
 8008f62:	4770      	bx	lr

08008f64 <memcpy>:
 8008f64:	440a      	add	r2, r1
 8008f66:	4291      	cmp	r1, r2
 8008f68:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f6c:	d100      	bne.n	8008f70 <memcpy+0xc>
 8008f6e:	4770      	bx	lr
 8008f70:	b510      	push	{r4, lr}
 8008f72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f7a:	4291      	cmp	r1, r2
 8008f7c:	d1f9      	bne.n	8008f72 <memcpy+0xe>
 8008f7e:	bd10      	pop	{r4, pc}

08008f80 <_free_r>:
 8008f80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f82:	2900      	cmp	r1, #0
 8008f84:	d044      	beq.n	8009010 <_free_r+0x90>
 8008f86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f8a:	9001      	str	r0, [sp, #4]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	f1a1 0404 	sub.w	r4, r1, #4
 8008f92:	bfb8      	it	lt
 8008f94:	18e4      	addlt	r4, r4, r3
 8008f96:	f7ff ff75 	bl	8008e84 <__malloc_lock>
 8008f9a:	4a1e      	ldr	r2, [pc, #120]	; (8009014 <_free_r+0x94>)
 8008f9c:	9801      	ldr	r0, [sp, #4]
 8008f9e:	6813      	ldr	r3, [r2, #0]
 8008fa0:	b933      	cbnz	r3, 8008fb0 <_free_r+0x30>
 8008fa2:	6063      	str	r3, [r4, #4]
 8008fa4:	6014      	str	r4, [r2, #0]
 8008fa6:	b003      	add	sp, #12
 8008fa8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008fac:	f7ff bf70 	b.w	8008e90 <__malloc_unlock>
 8008fb0:	42a3      	cmp	r3, r4
 8008fb2:	d908      	bls.n	8008fc6 <_free_r+0x46>
 8008fb4:	6825      	ldr	r5, [r4, #0]
 8008fb6:	1961      	adds	r1, r4, r5
 8008fb8:	428b      	cmp	r3, r1
 8008fba:	bf01      	itttt	eq
 8008fbc:	6819      	ldreq	r1, [r3, #0]
 8008fbe:	685b      	ldreq	r3, [r3, #4]
 8008fc0:	1949      	addeq	r1, r1, r5
 8008fc2:	6021      	streq	r1, [r4, #0]
 8008fc4:	e7ed      	b.n	8008fa2 <_free_r+0x22>
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	b10b      	cbz	r3, 8008fd0 <_free_r+0x50>
 8008fcc:	42a3      	cmp	r3, r4
 8008fce:	d9fa      	bls.n	8008fc6 <_free_r+0x46>
 8008fd0:	6811      	ldr	r1, [r2, #0]
 8008fd2:	1855      	adds	r5, r2, r1
 8008fd4:	42a5      	cmp	r5, r4
 8008fd6:	d10b      	bne.n	8008ff0 <_free_r+0x70>
 8008fd8:	6824      	ldr	r4, [r4, #0]
 8008fda:	4421      	add	r1, r4
 8008fdc:	1854      	adds	r4, r2, r1
 8008fde:	42a3      	cmp	r3, r4
 8008fe0:	6011      	str	r1, [r2, #0]
 8008fe2:	d1e0      	bne.n	8008fa6 <_free_r+0x26>
 8008fe4:	681c      	ldr	r4, [r3, #0]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	6053      	str	r3, [r2, #4]
 8008fea:	440c      	add	r4, r1
 8008fec:	6014      	str	r4, [r2, #0]
 8008fee:	e7da      	b.n	8008fa6 <_free_r+0x26>
 8008ff0:	d902      	bls.n	8008ff8 <_free_r+0x78>
 8008ff2:	230c      	movs	r3, #12
 8008ff4:	6003      	str	r3, [r0, #0]
 8008ff6:	e7d6      	b.n	8008fa6 <_free_r+0x26>
 8008ff8:	6825      	ldr	r5, [r4, #0]
 8008ffa:	1961      	adds	r1, r4, r5
 8008ffc:	428b      	cmp	r3, r1
 8008ffe:	bf04      	itt	eq
 8009000:	6819      	ldreq	r1, [r3, #0]
 8009002:	685b      	ldreq	r3, [r3, #4]
 8009004:	6063      	str	r3, [r4, #4]
 8009006:	bf04      	itt	eq
 8009008:	1949      	addeq	r1, r1, r5
 800900a:	6021      	streq	r1, [r4, #0]
 800900c:	6054      	str	r4, [r2, #4]
 800900e:	e7ca      	b.n	8008fa6 <_free_r+0x26>
 8009010:	b003      	add	sp, #12
 8009012:	bd30      	pop	{r4, r5, pc}
 8009014:	24000b9c 	.word	0x24000b9c

08009018 <__ssputs_r>:
 8009018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800901c:	688e      	ldr	r6, [r1, #8]
 800901e:	461f      	mov	r7, r3
 8009020:	42be      	cmp	r6, r7
 8009022:	680b      	ldr	r3, [r1, #0]
 8009024:	4682      	mov	sl, r0
 8009026:	460c      	mov	r4, r1
 8009028:	4690      	mov	r8, r2
 800902a:	d82c      	bhi.n	8009086 <__ssputs_r+0x6e>
 800902c:	898a      	ldrh	r2, [r1, #12]
 800902e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009032:	d026      	beq.n	8009082 <__ssputs_r+0x6a>
 8009034:	6965      	ldr	r5, [r4, #20]
 8009036:	6909      	ldr	r1, [r1, #16]
 8009038:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800903c:	eba3 0901 	sub.w	r9, r3, r1
 8009040:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009044:	1c7b      	adds	r3, r7, #1
 8009046:	444b      	add	r3, r9
 8009048:	106d      	asrs	r5, r5, #1
 800904a:	429d      	cmp	r5, r3
 800904c:	bf38      	it	cc
 800904e:	461d      	movcc	r5, r3
 8009050:	0553      	lsls	r3, r2, #21
 8009052:	d527      	bpl.n	80090a4 <__ssputs_r+0x8c>
 8009054:	4629      	mov	r1, r5
 8009056:	f7ff fe95 	bl	8008d84 <_malloc_r>
 800905a:	4606      	mov	r6, r0
 800905c:	b360      	cbz	r0, 80090b8 <__ssputs_r+0xa0>
 800905e:	6921      	ldr	r1, [r4, #16]
 8009060:	464a      	mov	r2, r9
 8009062:	f7ff ff7f 	bl	8008f64 <memcpy>
 8009066:	89a3      	ldrh	r3, [r4, #12]
 8009068:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800906c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009070:	81a3      	strh	r3, [r4, #12]
 8009072:	6126      	str	r6, [r4, #16]
 8009074:	6165      	str	r5, [r4, #20]
 8009076:	444e      	add	r6, r9
 8009078:	eba5 0509 	sub.w	r5, r5, r9
 800907c:	6026      	str	r6, [r4, #0]
 800907e:	60a5      	str	r5, [r4, #8]
 8009080:	463e      	mov	r6, r7
 8009082:	42be      	cmp	r6, r7
 8009084:	d900      	bls.n	8009088 <__ssputs_r+0x70>
 8009086:	463e      	mov	r6, r7
 8009088:	6820      	ldr	r0, [r4, #0]
 800908a:	4632      	mov	r2, r6
 800908c:	4641      	mov	r1, r8
 800908e:	f000 faab 	bl	80095e8 <memmove>
 8009092:	68a3      	ldr	r3, [r4, #8]
 8009094:	1b9b      	subs	r3, r3, r6
 8009096:	60a3      	str	r3, [r4, #8]
 8009098:	6823      	ldr	r3, [r4, #0]
 800909a:	4433      	add	r3, r6
 800909c:	6023      	str	r3, [r4, #0]
 800909e:	2000      	movs	r0, #0
 80090a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090a4:	462a      	mov	r2, r5
 80090a6:	f000 fab9 	bl	800961c <_realloc_r>
 80090aa:	4606      	mov	r6, r0
 80090ac:	2800      	cmp	r0, #0
 80090ae:	d1e0      	bne.n	8009072 <__ssputs_r+0x5a>
 80090b0:	6921      	ldr	r1, [r4, #16]
 80090b2:	4650      	mov	r0, sl
 80090b4:	f7ff ff64 	bl	8008f80 <_free_r>
 80090b8:	230c      	movs	r3, #12
 80090ba:	f8ca 3000 	str.w	r3, [sl]
 80090be:	89a3      	ldrh	r3, [r4, #12]
 80090c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090c4:	81a3      	strh	r3, [r4, #12]
 80090c6:	f04f 30ff 	mov.w	r0, #4294967295
 80090ca:	e7e9      	b.n	80090a0 <__ssputs_r+0x88>

080090cc <_svfiprintf_r>:
 80090cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090d0:	4698      	mov	r8, r3
 80090d2:	898b      	ldrh	r3, [r1, #12]
 80090d4:	061b      	lsls	r3, r3, #24
 80090d6:	b09d      	sub	sp, #116	; 0x74
 80090d8:	4607      	mov	r7, r0
 80090da:	460d      	mov	r5, r1
 80090dc:	4614      	mov	r4, r2
 80090de:	d50e      	bpl.n	80090fe <_svfiprintf_r+0x32>
 80090e0:	690b      	ldr	r3, [r1, #16]
 80090e2:	b963      	cbnz	r3, 80090fe <_svfiprintf_r+0x32>
 80090e4:	2140      	movs	r1, #64	; 0x40
 80090e6:	f7ff fe4d 	bl	8008d84 <_malloc_r>
 80090ea:	6028      	str	r0, [r5, #0]
 80090ec:	6128      	str	r0, [r5, #16]
 80090ee:	b920      	cbnz	r0, 80090fa <_svfiprintf_r+0x2e>
 80090f0:	230c      	movs	r3, #12
 80090f2:	603b      	str	r3, [r7, #0]
 80090f4:	f04f 30ff 	mov.w	r0, #4294967295
 80090f8:	e0d0      	b.n	800929c <_svfiprintf_r+0x1d0>
 80090fa:	2340      	movs	r3, #64	; 0x40
 80090fc:	616b      	str	r3, [r5, #20]
 80090fe:	2300      	movs	r3, #0
 8009100:	9309      	str	r3, [sp, #36]	; 0x24
 8009102:	2320      	movs	r3, #32
 8009104:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009108:	f8cd 800c 	str.w	r8, [sp, #12]
 800910c:	2330      	movs	r3, #48	; 0x30
 800910e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80092b4 <_svfiprintf_r+0x1e8>
 8009112:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009116:	f04f 0901 	mov.w	r9, #1
 800911a:	4623      	mov	r3, r4
 800911c:	469a      	mov	sl, r3
 800911e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009122:	b10a      	cbz	r2, 8009128 <_svfiprintf_r+0x5c>
 8009124:	2a25      	cmp	r2, #37	; 0x25
 8009126:	d1f9      	bne.n	800911c <_svfiprintf_r+0x50>
 8009128:	ebba 0b04 	subs.w	fp, sl, r4
 800912c:	d00b      	beq.n	8009146 <_svfiprintf_r+0x7a>
 800912e:	465b      	mov	r3, fp
 8009130:	4622      	mov	r2, r4
 8009132:	4629      	mov	r1, r5
 8009134:	4638      	mov	r0, r7
 8009136:	f7ff ff6f 	bl	8009018 <__ssputs_r>
 800913a:	3001      	adds	r0, #1
 800913c:	f000 80a9 	beq.w	8009292 <_svfiprintf_r+0x1c6>
 8009140:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009142:	445a      	add	r2, fp
 8009144:	9209      	str	r2, [sp, #36]	; 0x24
 8009146:	f89a 3000 	ldrb.w	r3, [sl]
 800914a:	2b00      	cmp	r3, #0
 800914c:	f000 80a1 	beq.w	8009292 <_svfiprintf_r+0x1c6>
 8009150:	2300      	movs	r3, #0
 8009152:	f04f 32ff 	mov.w	r2, #4294967295
 8009156:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800915a:	f10a 0a01 	add.w	sl, sl, #1
 800915e:	9304      	str	r3, [sp, #16]
 8009160:	9307      	str	r3, [sp, #28]
 8009162:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009166:	931a      	str	r3, [sp, #104]	; 0x68
 8009168:	4654      	mov	r4, sl
 800916a:	2205      	movs	r2, #5
 800916c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009170:	4850      	ldr	r0, [pc, #320]	; (80092b4 <_svfiprintf_r+0x1e8>)
 8009172:	f7f7 f8b5 	bl	80002e0 <memchr>
 8009176:	9a04      	ldr	r2, [sp, #16]
 8009178:	b9d8      	cbnz	r0, 80091b2 <_svfiprintf_r+0xe6>
 800917a:	06d0      	lsls	r0, r2, #27
 800917c:	bf44      	itt	mi
 800917e:	2320      	movmi	r3, #32
 8009180:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009184:	0711      	lsls	r1, r2, #28
 8009186:	bf44      	itt	mi
 8009188:	232b      	movmi	r3, #43	; 0x2b
 800918a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800918e:	f89a 3000 	ldrb.w	r3, [sl]
 8009192:	2b2a      	cmp	r3, #42	; 0x2a
 8009194:	d015      	beq.n	80091c2 <_svfiprintf_r+0xf6>
 8009196:	9a07      	ldr	r2, [sp, #28]
 8009198:	4654      	mov	r4, sl
 800919a:	2000      	movs	r0, #0
 800919c:	f04f 0c0a 	mov.w	ip, #10
 80091a0:	4621      	mov	r1, r4
 80091a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091a6:	3b30      	subs	r3, #48	; 0x30
 80091a8:	2b09      	cmp	r3, #9
 80091aa:	d94d      	bls.n	8009248 <_svfiprintf_r+0x17c>
 80091ac:	b1b0      	cbz	r0, 80091dc <_svfiprintf_r+0x110>
 80091ae:	9207      	str	r2, [sp, #28]
 80091b0:	e014      	b.n	80091dc <_svfiprintf_r+0x110>
 80091b2:	eba0 0308 	sub.w	r3, r0, r8
 80091b6:	fa09 f303 	lsl.w	r3, r9, r3
 80091ba:	4313      	orrs	r3, r2
 80091bc:	9304      	str	r3, [sp, #16]
 80091be:	46a2      	mov	sl, r4
 80091c0:	e7d2      	b.n	8009168 <_svfiprintf_r+0x9c>
 80091c2:	9b03      	ldr	r3, [sp, #12]
 80091c4:	1d19      	adds	r1, r3, #4
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	9103      	str	r1, [sp, #12]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	bfbb      	ittet	lt
 80091ce:	425b      	neglt	r3, r3
 80091d0:	f042 0202 	orrlt.w	r2, r2, #2
 80091d4:	9307      	strge	r3, [sp, #28]
 80091d6:	9307      	strlt	r3, [sp, #28]
 80091d8:	bfb8      	it	lt
 80091da:	9204      	strlt	r2, [sp, #16]
 80091dc:	7823      	ldrb	r3, [r4, #0]
 80091de:	2b2e      	cmp	r3, #46	; 0x2e
 80091e0:	d10c      	bne.n	80091fc <_svfiprintf_r+0x130>
 80091e2:	7863      	ldrb	r3, [r4, #1]
 80091e4:	2b2a      	cmp	r3, #42	; 0x2a
 80091e6:	d134      	bne.n	8009252 <_svfiprintf_r+0x186>
 80091e8:	9b03      	ldr	r3, [sp, #12]
 80091ea:	1d1a      	adds	r2, r3, #4
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	9203      	str	r2, [sp, #12]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	bfb8      	it	lt
 80091f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80091f8:	3402      	adds	r4, #2
 80091fa:	9305      	str	r3, [sp, #20]
 80091fc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80092c4 <_svfiprintf_r+0x1f8>
 8009200:	7821      	ldrb	r1, [r4, #0]
 8009202:	2203      	movs	r2, #3
 8009204:	4650      	mov	r0, sl
 8009206:	f7f7 f86b 	bl	80002e0 <memchr>
 800920a:	b138      	cbz	r0, 800921c <_svfiprintf_r+0x150>
 800920c:	9b04      	ldr	r3, [sp, #16]
 800920e:	eba0 000a 	sub.w	r0, r0, sl
 8009212:	2240      	movs	r2, #64	; 0x40
 8009214:	4082      	lsls	r2, r0
 8009216:	4313      	orrs	r3, r2
 8009218:	3401      	adds	r4, #1
 800921a:	9304      	str	r3, [sp, #16]
 800921c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009220:	4825      	ldr	r0, [pc, #148]	; (80092b8 <_svfiprintf_r+0x1ec>)
 8009222:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009226:	2206      	movs	r2, #6
 8009228:	f7f7 f85a 	bl	80002e0 <memchr>
 800922c:	2800      	cmp	r0, #0
 800922e:	d038      	beq.n	80092a2 <_svfiprintf_r+0x1d6>
 8009230:	4b22      	ldr	r3, [pc, #136]	; (80092bc <_svfiprintf_r+0x1f0>)
 8009232:	bb1b      	cbnz	r3, 800927c <_svfiprintf_r+0x1b0>
 8009234:	9b03      	ldr	r3, [sp, #12]
 8009236:	3307      	adds	r3, #7
 8009238:	f023 0307 	bic.w	r3, r3, #7
 800923c:	3308      	adds	r3, #8
 800923e:	9303      	str	r3, [sp, #12]
 8009240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009242:	4433      	add	r3, r6
 8009244:	9309      	str	r3, [sp, #36]	; 0x24
 8009246:	e768      	b.n	800911a <_svfiprintf_r+0x4e>
 8009248:	fb0c 3202 	mla	r2, ip, r2, r3
 800924c:	460c      	mov	r4, r1
 800924e:	2001      	movs	r0, #1
 8009250:	e7a6      	b.n	80091a0 <_svfiprintf_r+0xd4>
 8009252:	2300      	movs	r3, #0
 8009254:	3401      	adds	r4, #1
 8009256:	9305      	str	r3, [sp, #20]
 8009258:	4619      	mov	r1, r3
 800925a:	f04f 0c0a 	mov.w	ip, #10
 800925e:	4620      	mov	r0, r4
 8009260:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009264:	3a30      	subs	r2, #48	; 0x30
 8009266:	2a09      	cmp	r2, #9
 8009268:	d903      	bls.n	8009272 <_svfiprintf_r+0x1a6>
 800926a:	2b00      	cmp	r3, #0
 800926c:	d0c6      	beq.n	80091fc <_svfiprintf_r+0x130>
 800926e:	9105      	str	r1, [sp, #20]
 8009270:	e7c4      	b.n	80091fc <_svfiprintf_r+0x130>
 8009272:	fb0c 2101 	mla	r1, ip, r1, r2
 8009276:	4604      	mov	r4, r0
 8009278:	2301      	movs	r3, #1
 800927a:	e7f0      	b.n	800925e <_svfiprintf_r+0x192>
 800927c:	ab03      	add	r3, sp, #12
 800927e:	9300      	str	r3, [sp, #0]
 8009280:	462a      	mov	r2, r5
 8009282:	4b0f      	ldr	r3, [pc, #60]	; (80092c0 <_svfiprintf_r+0x1f4>)
 8009284:	a904      	add	r1, sp, #16
 8009286:	4638      	mov	r0, r7
 8009288:	f3af 8000 	nop.w
 800928c:	1c42      	adds	r2, r0, #1
 800928e:	4606      	mov	r6, r0
 8009290:	d1d6      	bne.n	8009240 <_svfiprintf_r+0x174>
 8009292:	89ab      	ldrh	r3, [r5, #12]
 8009294:	065b      	lsls	r3, r3, #25
 8009296:	f53f af2d 	bmi.w	80090f4 <_svfiprintf_r+0x28>
 800929a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800929c:	b01d      	add	sp, #116	; 0x74
 800929e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092a2:	ab03      	add	r3, sp, #12
 80092a4:	9300      	str	r3, [sp, #0]
 80092a6:	462a      	mov	r2, r5
 80092a8:	4b05      	ldr	r3, [pc, #20]	; (80092c0 <_svfiprintf_r+0x1f4>)
 80092aa:	a904      	add	r1, sp, #16
 80092ac:	4638      	mov	r0, r7
 80092ae:	f000 f879 	bl	80093a4 <_printf_i>
 80092b2:	e7eb      	b.n	800928c <_svfiprintf_r+0x1c0>
 80092b4:	08049920 	.word	0x08049920
 80092b8:	0804992a 	.word	0x0804992a
 80092bc:	00000000 	.word	0x00000000
 80092c0:	08009019 	.word	0x08009019
 80092c4:	08049926 	.word	0x08049926

080092c8 <_printf_common>:
 80092c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092cc:	4616      	mov	r6, r2
 80092ce:	4699      	mov	r9, r3
 80092d0:	688a      	ldr	r2, [r1, #8]
 80092d2:	690b      	ldr	r3, [r1, #16]
 80092d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80092d8:	4293      	cmp	r3, r2
 80092da:	bfb8      	it	lt
 80092dc:	4613      	movlt	r3, r2
 80092de:	6033      	str	r3, [r6, #0]
 80092e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80092e4:	4607      	mov	r7, r0
 80092e6:	460c      	mov	r4, r1
 80092e8:	b10a      	cbz	r2, 80092ee <_printf_common+0x26>
 80092ea:	3301      	adds	r3, #1
 80092ec:	6033      	str	r3, [r6, #0]
 80092ee:	6823      	ldr	r3, [r4, #0]
 80092f0:	0699      	lsls	r1, r3, #26
 80092f2:	bf42      	ittt	mi
 80092f4:	6833      	ldrmi	r3, [r6, #0]
 80092f6:	3302      	addmi	r3, #2
 80092f8:	6033      	strmi	r3, [r6, #0]
 80092fa:	6825      	ldr	r5, [r4, #0]
 80092fc:	f015 0506 	ands.w	r5, r5, #6
 8009300:	d106      	bne.n	8009310 <_printf_common+0x48>
 8009302:	f104 0a19 	add.w	sl, r4, #25
 8009306:	68e3      	ldr	r3, [r4, #12]
 8009308:	6832      	ldr	r2, [r6, #0]
 800930a:	1a9b      	subs	r3, r3, r2
 800930c:	42ab      	cmp	r3, r5
 800930e:	dc26      	bgt.n	800935e <_printf_common+0x96>
 8009310:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009314:	1e13      	subs	r3, r2, #0
 8009316:	6822      	ldr	r2, [r4, #0]
 8009318:	bf18      	it	ne
 800931a:	2301      	movne	r3, #1
 800931c:	0692      	lsls	r2, r2, #26
 800931e:	d42b      	bmi.n	8009378 <_printf_common+0xb0>
 8009320:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009324:	4649      	mov	r1, r9
 8009326:	4638      	mov	r0, r7
 8009328:	47c0      	blx	r8
 800932a:	3001      	adds	r0, #1
 800932c:	d01e      	beq.n	800936c <_printf_common+0xa4>
 800932e:	6823      	ldr	r3, [r4, #0]
 8009330:	6922      	ldr	r2, [r4, #16]
 8009332:	f003 0306 	and.w	r3, r3, #6
 8009336:	2b04      	cmp	r3, #4
 8009338:	bf02      	ittt	eq
 800933a:	68e5      	ldreq	r5, [r4, #12]
 800933c:	6833      	ldreq	r3, [r6, #0]
 800933e:	1aed      	subeq	r5, r5, r3
 8009340:	68a3      	ldr	r3, [r4, #8]
 8009342:	bf0c      	ite	eq
 8009344:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009348:	2500      	movne	r5, #0
 800934a:	4293      	cmp	r3, r2
 800934c:	bfc4      	itt	gt
 800934e:	1a9b      	subgt	r3, r3, r2
 8009350:	18ed      	addgt	r5, r5, r3
 8009352:	2600      	movs	r6, #0
 8009354:	341a      	adds	r4, #26
 8009356:	42b5      	cmp	r5, r6
 8009358:	d11a      	bne.n	8009390 <_printf_common+0xc8>
 800935a:	2000      	movs	r0, #0
 800935c:	e008      	b.n	8009370 <_printf_common+0xa8>
 800935e:	2301      	movs	r3, #1
 8009360:	4652      	mov	r2, sl
 8009362:	4649      	mov	r1, r9
 8009364:	4638      	mov	r0, r7
 8009366:	47c0      	blx	r8
 8009368:	3001      	adds	r0, #1
 800936a:	d103      	bne.n	8009374 <_printf_common+0xac>
 800936c:	f04f 30ff 	mov.w	r0, #4294967295
 8009370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009374:	3501      	adds	r5, #1
 8009376:	e7c6      	b.n	8009306 <_printf_common+0x3e>
 8009378:	18e1      	adds	r1, r4, r3
 800937a:	1c5a      	adds	r2, r3, #1
 800937c:	2030      	movs	r0, #48	; 0x30
 800937e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009382:	4422      	add	r2, r4
 8009384:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009388:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800938c:	3302      	adds	r3, #2
 800938e:	e7c7      	b.n	8009320 <_printf_common+0x58>
 8009390:	2301      	movs	r3, #1
 8009392:	4622      	mov	r2, r4
 8009394:	4649      	mov	r1, r9
 8009396:	4638      	mov	r0, r7
 8009398:	47c0      	blx	r8
 800939a:	3001      	adds	r0, #1
 800939c:	d0e6      	beq.n	800936c <_printf_common+0xa4>
 800939e:	3601      	adds	r6, #1
 80093a0:	e7d9      	b.n	8009356 <_printf_common+0x8e>
	...

080093a4 <_printf_i>:
 80093a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093a8:	7e0f      	ldrb	r7, [r1, #24]
 80093aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80093ac:	2f78      	cmp	r7, #120	; 0x78
 80093ae:	4691      	mov	r9, r2
 80093b0:	4680      	mov	r8, r0
 80093b2:	460c      	mov	r4, r1
 80093b4:	469a      	mov	sl, r3
 80093b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80093ba:	d807      	bhi.n	80093cc <_printf_i+0x28>
 80093bc:	2f62      	cmp	r7, #98	; 0x62
 80093be:	d80a      	bhi.n	80093d6 <_printf_i+0x32>
 80093c0:	2f00      	cmp	r7, #0
 80093c2:	f000 80d4 	beq.w	800956e <_printf_i+0x1ca>
 80093c6:	2f58      	cmp	r7, #88	; 0x58
 80093c8:	f000 80c0 	beq.w	800954c <_printf_i+0x1a8>
 80093cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80093d4:	e03a      	b.n	800944c <_printf_i+0xa8>
 80093d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80093da:	2b15      	cmp	r3, #21
 80093dc:	d8f6      	bhi.n	80093cc <_printf_i+0x28>
 80093de:	a101      	add	r1, pc, #4	; (adr r1, 80093e4 <_printf_i+0x40>)
 80093e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80093e4:	0800943d 	.word	0x0800943d
 80093e8:	08009451 	.word	0x08009451
 80093ec:	080093cd 	.word	0x080093cd
 80093f0:	080093cd 	.word	0x080093cd
 80093f4:	080093cd 	.word	0x080093cd
 80093f8:	080093cd 	.word	0x080093cd
 80093fc:	08009451 	.word	0x08009451
 8009400:	080093cd 	.word	0x080093cd
 8009404:	080093cd 	.word	0x080093cd
 8009408:	080093cd 	.word	0x080093cd
 800940c:	080093cd 	.word	0x080093cd
 8009410:	08009555 	.word	0x08009555
 8009414:	0800947d 	.word	0x0800947d
 8009418:	0800950f 	.word	0x0800950f
 800941c:	080093cd 	.word	0x080093cd
 8009420:	080093cd 	.word	0x080093cd
 8009424:	08009577 	.word	0x08009577
 8009428:	080093cd 	.word	0x080093cd
 800942c:	0800947d 	.word	0x0800947d
 8009430:	080093cd 	.word	0x080093cd
 8009434:	080093cd 	.word	0x080093cd
 8009438:	08009517 	.word	0x08009517
 800943c:	682b      	ldr	r3, [r5, #0]
 800943e:	1d1a      	adds	r2, r3, #4
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	602a      	str	r2, [r5, #0]
 8009444:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009448:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800944c:	2301      	movs	r3, #1
 800944e:	e09f      	b.n	8009590 <_printf_i+0x1ec>
 8009450:	6820      	ldr	r0, [r4, #0]
 8009452:	682b      	ldr	r3, [r5, #0]
 8009454:	0607      	lsls	r7, r0, #24
 8009456:	f103 0104 	add.w	r1, r3, #4
 800945a:	6029      	str	r1, [r5, #0]
 800945c:	d501      	bpl.n	8009462 <_printf_i+0xbe>
 800945e:	681e      	ldr	r6, [r3, #0]
 8009460:	e003      	b.n	800946a <_printf_i+0xc6>
 8009462:	0646      	lsls	r6, r0, #25
 8009464:	d5fb      	bpl.n	800945e <_printf_i+0xba>
 8009466:	f9b3 6000 	ldrsh.w	r6, [r3]
 800946a:	2e00      	cmp	r6, #0
 800946c:	da03      	bge.n	8009476 <_printf_i+0xd2>
 800946e:	232d      	movs	r3, #45	; 0x2d
 8009470:	4276      	negs	r6, r6
 8009472:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009476:	485a      	ldr	r0, [pc, #360]	; (80095e0 <_printf_i+0x23c>)
 8009478:	230a      	movs	r3, #10
 800947a:	e012      	b.n	80094a2 <_printf_i+0xfe>
 800947c:	682b      	ldr	r3, [r5, #0]
 800947e:	6820      	ldr	r0, [r4, #0]
 8009480:	1d19      	adds	r1, r3, #4
 8009482:	6029      	str	r1, [r5, #0]
 8009484:	0605      	lsls	r5, r0, #24
 8009486:	d501      	bpl.n	800948c <_printf_i+0xe8>
 8009488:	681e      	ldr	r6, [r3, #0]
 800948a:	e002      	b.n	8009492 <_printf_i+0xee>
 800948c:	0641      	lsls	r1, r0, #25
 800948e:	d5fb      	bpl.n	8009488 <_printf_i+0xe4>
 8009490:	881e      	ldrh	r6, [r3, #0]
 8009492:	4853      	ldr	r0, [pc, #332]	; (80095e0 <_printf_i+0x23c>)
 8009494:	2f6f      	cmp	r7, #111	; 0x6f
 8009496:	bf0c      	ite	eq
 8009498:	2308      	moveq	r3, #8
 800949a:	230a      	movne	r3, #10
 800949c:	2100      	movs	r1, #0
 800949e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80094a2:	6865      	ldr	r5, [r4, #4]
 80094a4:	60a5      	str	r5, [r4, #8]
 80094a6:	2d00      	cmp	r5, #0
 80094a8:	bfa2      	ittt	ge
 80094aa:	6821      	ldrge	r1, [r4, #0]
 80094ac:	f021 0104 	bicge.w	r1, r1, #4
 80094b0:	6021      	strge	r1, [r4, #0]
 80094b2:	b90e      	cbnz	r6, 80094b8 <_printf_i+0x114>
 80094b4:	2d00      	cmp	r5, #0
 80094b6:	d04b      	beq.n	8009550 <_printf_i+0x1ac>
 80094b8:	4615      	mov	r5, r2
 80094ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80094be:	fb03 6711 	mls	r7, r3, r1, r6
 80094c2:	5dc7      	ldrb	r7, [r0, r7]
 80094c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80094c8:	4637      	mov	r7, r6
 80094ca:	42bb      	cmp	r3, r7
 80094cc:	460e      	mov	r6, r1
 80094ce:	d9f4      	bls.n	80094ba <_printf_i+0x116>
 80094d0:	2b08      	cmp	r3, #8
 80094d2:	d10b      	bne.n	80094ec <_printf_i+0x148>
 80094d4:	6823      	ldr	r3, [r4, #0]
 80094d6:	07de      	lsls	r6, r3, #31
 80094d8:	d508      	bpl.n	80094ec <_printf_i+0x148>
 80094da:	6923      	ldr	r3, [r4, #16]
 80094dc:	6861      	ldr	r1, [r4, #4]
 80094de:	4299      	cmp	r1, r3
 80094e0:	bfde      	ittt	le
 80094e2:	2330      	movle	r3, #48	; 0x30
 80094e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80094e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80094ec:	1b52      	subs	r2, r2, r5
 80094ee:	6122      	str	r2, [r4, #16]
 80094f0:	f8cd a000 	str.w	sl, [sp]
 80094f4:	464b      	mov	r3, r9
 80094f6:	aa03      	add	r2, sp, #12
 80094f8:	4621      	mov	r1, r4
 80094fa:	4640      	mov	r0, r8
 80094fc:	f7ff fee4 	bl	80092c8 <_printf_common>
 8009500:	3001      	adds	r0, #1
 8009502:	d14a      	bne.n	800959a <_printf_i+0x1f6>
 8009504:	f04f 30ff 	mov.w	r0, #4294967295
 8009508:	b004      	add	sp, #16
 800950a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800950e:	6823      	ldr	r3, [r4, #0]
 8009510:	f043 0320 	orr.w	r3, r3, #32
 8009514:	6023      	str	r3, [r4, #0]
 8009516:	4833      	ldr	r0, [pc, #204]	; (80095e4 <_printf_i+0x240>)
 8009518:	2778      	movs	r7, #120	; 0x78
 800951a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800951e:	6823      	ldr	r3, [r4, #0]
 8009520:	6829      	ldr	r1, [r5, #0]
 8009522:	061f      	lsls	r7, r3, #24
 8009524:	f851 6b04 	ldr.w	r6, [r1], #4
 8009528:	d402      	bmi.n	8009530 <_printf_i+0x18c>
 800952a:	065f      	lsls	r7, r3, #25
 800952c:	bf48      	it	mi
 800952e:	b2b6      	uxthmi	r6, r6
 8009530:	07df      	lsls	r7, r3, #31
 8009532:	bf48      	it	mi
 8009534:	f043 0320 	orrmi.w	r3, r3, #32
 8009538:	6029      	str	r1, [r5, #0]
 800953a:	bf48      	it	mi
 800953c:	6023      	strmi	r3, [r4, #0]
 800953e:	b91e      	cbnz	r6, 8009548 <_printf_i+0x1a4>
 8009540:	6823      	ldr	r3, [r4, #0]
 8009542:	f023 0320 	bic.w	r3, r3, #32
 8009546:	6023      	str	r3, [r4, #0]
 8009548:	2310      	movs	r3, #16
 800954a:	e7a7      	b.n	800949c <_printf_i+0xf8>
 800954c:	4824      	ldr	r0, [pc, #144]	; (80095e0 <_printf_i+0x23c>)
 800954e:	e7e4      	b.n	800951a <_printf_i+0x176>
 8009550:	4615      	mov	r5, r2
 8009552:	e7bd      	b.n	80094d0 <_printf_i+0x12c>
 8009554:	682b      	ldr	r3, [r5, #0]
 8009556:	6826      	ldr	r6, [r4, #0]
 8009558:	6961      	ldr	r1, [r4, #20]
 800955a:	1d18      	adds	r0, r3, #4
 800955c:	6028      	str	r0, [r5, #0]
 800955e:	0635      	lsls	r5, r6, #24
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	d501      	bpl.n	8009568 <_printf_i+0x1c4>
 8009564:	6019      	str	r1, [r3, #0]
 8009566:	e002      	b.n	800956e <_printf_i+0x1ca>
 8009568:	0670      	lsls	r0, r6, #25
 800956a:	d5fb      	bpl.n	8009564 <_printf_i+0x1c0>
 800956c:	8019      	strh	r1, [r3, #0]
 800956e:	2300      	movs	r3, #0
 8009570:	6123      	str	r3, [r4, #16]
 8009572:	4615      	mov	r5, r2
 8009574:	e7bc      	b.n	80094f0 <_printf_i+0x14c>
 8009576:	682b      	ldr	r3, [r5, #0]
 8009578:	1d1a      	adds	r2, r3, #4
 800957a:	602a      	str	r2, [r5, #0]
 800957c:	681d      	ldr	r5, [r3, #0]
 800957e:	6862      	ldr	r2, [r4, #4]
 8009580:	2100      	movs	r1, #0
 8009582:	4628      	mov	r0, r5
 8009584:	f7f6 feac 	bl	80002e0 <memchr>
 8009588:	b108      	cbz	r0, 800958e <_printf_i+0x1ea>
 800958a:	1b40      	subs	r0, r0, r5
 800958c:	6060      	str	r0, [r4, #4]
 800958e:	6863      	ldr	r3, [r4, #4]
 8009590:	6123      	str	r3, [r4, #16]
 8009592:	2300      	movs	r3, #0
 8009594:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009598:	e7aa      	b.n	80094f0 <_printf_i+0x14c>
 800959a:	6923      	ldr	r3, [r4, #16]
 800959c:	462a      	mov	r2, r5
 800959e:	4649      	mov	r1, r9
 80095a0:	4640      	mov	r0, r8
 80095a2:	47d0      	blx	sl
 80095a4:	3001      	adds	r0, #1
 80095a6:	d0ad      	beq.n	8009504 <_printf_i+0x160>
 80095a8:	6823      	ldr	r3, [r4, #0]
 80095aa:	079b      	lsls	r3, r3, #30
 80095ac:	d413      	bmi.n	80095d6 <_printf_i+0x232>
 80095ae:	68e0      	ldr	r0, [r4, #12]
 80095b0:	9b03      	ldr	r3, [sp, #12]
 80095b2:	4298      	cmp	r0, r3
 80095b4:	bfb8      	it	lt
 80095b6:	4618      	movlt	r0, r3
 80095b8:	e7a6      	b.n	8009508 <_printf_i+0x164>
 80095ba:	2301      	movs	r3, #1
 80095bc:	4632      	mov	r2, r6
 80095be:	4649      	mov	r1, r9
 80095c0:	4640      	mov	r0, r8
 80095c2:	47d0      	blx	sl
 80095c4:	3001      	adds	r0, #1
 80095c6:	d09d      	beq.n	8009504 <_printf_i+0x160>
 80095c8:	3501      	adds	r5, #1
 80095ca:	68e3      	ldr	r3, [r4, #12]
 80095cc:	9903      	ldr	r1, [sp, #12]
 80095ce:	1a5b      	subs	r3, r3, r1
 80095d0:	42ab      	cmp	r3, r5
 80095d2:	dcf2      	bgt.n	80095ba <_printf_i+0x216>
 80095d4:	e7eb      	b.n	80095ae <_printf_i+0x20a>
 80095d6:	2500      	movs	r5, #0
 80095d8:	f104 0619 	add.w	r6, r4, #25
 80095dc:	e7f5      	b.n	80095ca <_printf_i+0x226>
 80095de:	bf00      	nop
 80095e0:	08049931 	.word	0x08049931
 80095e4:	08049942 	.word	0x08049942

080095e8 <memmove>:
 80095e8:	4288      	cmp	r0, r1
 80095ea:	b510      	push	{r4, lr}
 80095ec:	eb01 0402 	add.w	r4, r1, r2
 80095f0:	d902      	bls.n	80095f8 <memmove+0x10>
 80095f2:	4284      	cmp	r4, r0
 80095f4:	4623      	mov	r3, r4
 80095f6:	d807      	bhi.n	8009608 <memmove+0x20>
 80095f8:	1e43      	subs	r3, r0, #1
 80095fa:	42a1      	cmp	r1, r4
 80095fc:	d008      	beq.n	8009610 <memmove+0x28>
 80095fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009602:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009606:	e7f8      	b.n	80095fa <memmove+0x12>
 8009608:	4402      	add	r2, r0
 800960a:	4601      	mov	r1, r0
 800960c:	428a      	cmp	r2, r1
 800960e:	d100      	bne.n	8009612 <memmove+0x2a>
 8009610:	bd10      	pop	{r4, pc}
 8009612:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009616:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800961a:	e7f7      	b.n	800960c <memmove+0x24>

0800961c <_realloc_r>:
 800961c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009620:	4680      	mov	r8, r0
 8009622:	4614      	mov	r4, r2
 8009624:	460e      	mov	r6, r1
 8009626:	b921      	cbnz	r1, 8009632 <_realloc_r+0x16>
 8009628:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800962c:	4611      	mov	r1, r2
 800962e:	f7ff bba9 	b.w	8008d84 <_malloc_r>
 8009632:	b92a      	cbnz	r2, 8009640 <_realloc_r+0x24>
 8009634:	f7ff fca4 	bl	8008f80 <_free_r>
 8009638:	4625      	mov	r5, r4
 800963a:	4628      	mov	r0, r5
 800963c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009640:	f000 f81b 	bl	800967a <_malloc_usable_size_r>
 8009644:	4284      	cmp	r4, r0
 8009646:	4607      	mov	r7, r0
 8009648:	d802      	bhi.n	8009650 <_realloc_r+0x34>
 800964a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800964e:	d812      	bhi.n	8009676 <_realloc_r+0x5a>
 8009650:	4621      	mov	r1, r4
 8009652:	4640      	mov	r0, r8
 8009654:	f7ff fb96 	bl	8008d84 <_malloc_r>
 8009658:	4605      	mov	r5, r0
 800965a:	2800      	cmp	r0, #0
 800965c:	d0ed      	beq.n	800963a <_realloc_r+0x1e>
 800965e:	42bc      	cmp	r4, r7
 8009660:	4622      	mov	r2, r4
 8009662:	4631      	mov	r1, r6
 8009664:	bf28      	it	cs
 8009666:	463a      	movcs	r2, r7
 8009668:	f7ff fc7c 	bl	8008f64 <memcpy>
 800966c:	4631      	mov	r1, r6
 800966e:	4640      	mov	r0, r8
 8009670:	f7ff fc86 	bl	8008f80 <_free_r>
 8009674:	e7e1      	b.n	800963a <_realloc_r+0x1e>
 8009676:	4635      	mov	r5, r6
 8009678:	e7df      	b.n	800963a <_realloc_r+0x1e>

0800967a <_malloc_usable_size_r>:
 800967a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800967e:	1f18      	subs	r0, r3, #4
 8009680:	2b00      	cmp	r3, #0
 8009682:	bfbc      	itt	lt
 8009684:	580b      	ldrlt	r3, [r1, r0]
 8009686:	18c0      	addlt	r0, r0, r3
 8009688:	4770      	bx	lr
	...

0800968c <ceilf>:
 800968c:	ee10 3a10 	vmov	r3, s0
 8009690:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009694:	3a7f      	subs	r2, #127	; 0x7f
 8009696:	2a16      	cmp	r2, #22
 8009698:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800969c:	dc2a      	bgt.n	80096f4 <ceilf+0x68>
 800969e:	2a00      	cmp	r2, #0
 80096a0:	da11      	bge.n	80096c6 <ceilf+0x3a>
 80096a2:	eddf 7a19 	vldr	s15, [pc, #100]	; 8009708 <ceilf+0x7c>
 80096a6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80096aa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80096ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096b2:	dd05      	ble.n	80096c0 <ceilf+0x34>
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	db23      	blt.n	8009700 <ceilf+0x74>
 80096b8:	2900      	cmp	r1, #0
 80096ba:	bf18      	it	ne
 80096bc:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 80096c0:	ee00 3a10 	vmov	s0, r3
 80096c4:	4770      	bx	lr
 80096c6:	4911      	ldr	r1, [pc, #68]	; (800970c <ceilf+0x80>)
 80096c8:	4111      	asrs	r1, r2
 80096ca:	420b      	tst	r3, r1
 80096cc:	d0fa      	beq.n	80096c4 <ceilf+0x38>
 80096ce:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8009708 <ceilf+0x7c>
 80096d2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80096d6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80096da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096de:	ddef      	ble.n	80096c0 <ceilf+0x34>
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	bfc2      	ittt	gt
 80096e4:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 80096e8:	fa40 f202 	asrgt.w	r2, r0, r2
 80096ec:	189b      	addgt	r3, r3, r2
 80096ee:	ea23 0301 	bic.w	r3, r3, r1
 80096f2:	e7e5      	b.n	80096c0 <ceilf+0x34>
 80096f4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80096f8:	d3e4      	bcc.n	80096c4 <ceilf+0x38>
 80096fa:	ee30 0a00 	vadd.f32	s0, s0, s0
 80096fe:	4770      	bx	lr
 8009700:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009704:	e7dc      	b.n	80096c0 <ceilf+0x34>
 8009706:	bf00      	nop
 8009708:	7149f2ca 	.word	0x7149f2ca
 800970c:	007fffff 	.word	0x007fffff

08009710 <_init>:
 8009710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009712:	bf00      	nop
 8009714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009716:	bc08      	pop	{r3}
 8009718:	469e      	mov	lr, r3
 800971a:	4770      	bx	lr

0800971c <_fini>:
 800971c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800971e:	bf00      	nop
 8009720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009722:	bc08      	pop	{r3}
 8009724:	469e      	mov	lr, r3
 8009726:	4770      	bx	lr
