
H745_STAMPR_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dfc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0004025c  0800709c  0800709c  0001709c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080472f8  080472f8  00060360  2**0
                  CONTENTS
  4 .ARM          00000000  080472f8  080472f8  00060360  2**0
                  CONTENTS
  5 .preinit_array 00000000  080472f8  080472f8  00060360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080472f8  080472f8  000572f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080472fc  080472fc  000572fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a0  24000000  08047300  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  240002a0  080475a0  000602a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000300  08047600  00060300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000006e0  24000360  08047660  00060360  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000a40  08047660  00060a40  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00060360  2**0
                  CONTENTS, READONLY
 14 .debug_info   00016604  00000000  00000000  0006038e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002b51  00000000  00000000  00076992  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f90  00000000  00000000  000794e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000df8  00000000  00000000  0007a478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003c629  00000000  00000000  0007b270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014a13  00000000  00000000  000b7899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0018a967  00000000  00000000  000cc2ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00256c13  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000441c  00000000  00000000  00256c64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000360 	.word	0x24000360
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08007084 	.word	0x08007084

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000364 	.word	0x24000364
 80002dc:	08007084 	.word	0x08007084

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000384:	4b3d      	ldr	r3, [pc, #244]	; (800047c <SystemInit+0xfc>)
 8000386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800038a:	4a3c      	ldr	r2, [pc, #240]	; (800047c <SystemInit+0xfc>)
 800038c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000394:	4b39      	ldr	r3, [pc, #228]	; (800047c <SystemInit+0xfc>)
 8000396:	691b      	ldr	r3, [r3, #16]
 8000398:	4a38      	ldr	r2, [pc, #224]	; (800047c <SystemInit+0xfc>)
 800039a:	f043 0310 	orr.w	r3, r3, #16
 800039e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003a0:	4b37      	ldr	r3, [pc, #220]	; (8000480 <SystemInit+0x100>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f003 030f 	and.w	r3, r3, #15
 80003a8:	2b06      	cmp	r3, #6
 80003aa:	d807      	bhi.n	80003bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003ac:	4b34      	ldr	r3, [pc, #208]	; (8000480 <SystemInit+0x100>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f023 030f 	bic.w	r3, r3, #15
 80003b4:	4a32      	ldr	r2, [pc, #200]	; (8000480 <SystemInit+0x100>)
 80003b6:	f043 0307 	orr.w	r3, r3, #7
 80003ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003bc:	4b31      	ldr	r3, [pc, #196]	; (8000484 <SystemInit+0x104>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a30      	ldr	r2, [pc, #192]	; (8000484 <SystemInit+0x104>)
 80003c2:	f043 0301 	orr.w	r3, r3, #1
 80003c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003c8:	4b2e      	ldr	r3, [pc, #184]	; (8000484 <SystemInit+0x104>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003ce:	4b2d      	ldr	r3, [pc, #180]	; (8000484 <SystemInit+0x104>)
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	492c      	ldr	r1, [pc, #176]	; (8000484 <SystemInit+0x104>)
 80003d4:	4b2c      	ldr	r3, [pc, #176]	; (8000488 <SystemInit+0x108>)
 80003d6:	4013      	ands	r3, r2
 80003d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003da:	4b29      	ldr	r3, [pc, #164]	; (8000480 <SystemInit+0x100>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f003 0308 	and.w	r3, r3, #8
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d007      	beq.n	80003f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003e6:	4b26      	ldr	r3, [pc, #152]	; (8000480 <SystemInit+0x100>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f023 030f 	bic.w	r3, r3, #15
 80003ee:	4a24      	ldr	r2, [pc, #144]	; (8000480 <SystemInit+0x100>)
 80003f0:	f043 0307 	orr.w	r3, r3, #7
 80003f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80003f6:	4b23      	ldr	r3, [pc, #140]	; (8000484 <SystemInit+0x104>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80003fc:	4b21      	ldr	r3, [pc, #132]	; (8000484 <SystemInit+0x104>)
 80003fe:	2200      	movs	r2, #0
 8000400:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000402:	4b20      	ldr	r3, [pc, #128]	; (8000484 <SystemInit+0x104>)
 8000404:	2200      	movs	r2, #0
 8000406:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000408:	4b1e      	ldr	r3, [pc, #120]	; (8000484 <SystemInit+0x104>)
 800040a:	4a20      	ldr	r2, [pc, #128]	; (800048c <SystemInit+0x10c>)
 800040c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800040e:	4b1d      	ldr	r3, [pc, #116]	; (8000484 <SystemInit+0x104>)
 8000410:	4a1f      	ldr	r2, [pc, #124]	; (8000490 <SystemInit+0x110>)
 8000412:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000414:	4b1b      	ldr	r3, [pc, #108]	; (8000484 <SystemInit+0x104>)
 8000416:	4a1f      	ldr	r2, [pc, #124]	; (8000494 <SystemInit+0x114>)
 8000418:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800041a:	4b1a      	ldr	r3, [pc, #104]	; (8000484 <SystemInit+0x104>)
 800041c:	2200      	movs	r2, #0
 800041e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000420:	4b18      	ldr	r3, [pc, #96]	; (8000484 <SystemInit+0x104>)
 8000422:	4a1c      	ldr	r2, [pc, #112]	; (8000494 <SystemInit+0x114>)
 8000424:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000426:	4b17      	ldr	r3, [pc, #92]	; (8000484 <SystemInit+0x104>)
 8000428:	2200      	movs	r2, #0
 800042a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800042c:	4b15      	ldr	r3, [pc, #84]	; (8000484 <SystemInit+0x104>)
 800042e:	4a19      	ldr	r2, [pc, #100]	; (8000494 <SystemInit+0x114>)
 8000430:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000432:	4b14      	ldr	r3, [pc, #80]	; (8000484 <SystemInit+0x104>)
 8000434:	2200      	movs	r2, #0
 8000436:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000438:	4b12      	ldr	r3, [pc, #72]	; (8000484 <SystemInit+0x104>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a11      	ldr	r2, [pc, #68]	; (8000484 <SystemInit+0x104>)
 800043e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000442:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000444:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <SystemInit+0x104>)
 8000446:	2200      	movs	r2, #0
 8000448:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800044a:	4b13      	ldr	r3, [pc, #76]	; (8000498 <SystemInit+0x118>)
 800044c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800044e:	4a12      	ldr	r2, [pc, #72]	; (8000498 <SystemInit+0x118>)
 8000450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000454:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000456:	4b11      	ldr	r3, [pc, #68]	; (800049c <SystemInit+0x11c>)
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	4b11      	ldr	r3, [pc, #68]	; (80004a0 <SystemInit+0x120>)
 800045c:	4013      	ands	r3, r2
 800045e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000462:	d202      	bcs.n	800046a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000464:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <SystemInit+0x124>)
 8000466:	2201      	movs	r2, #1
 8000468:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800046a:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <SystemInit+0x128>)
 800046c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000470:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000472:	bf00      	nop
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr
 800047c:	e000ed00 	.word	0xe000ed00
 8000480:	52002000 	.word	0x52002000
 8000484:	58024400 	.word	0x58024400
 8000488:	eaf6ed7f 	.word	0xeaf6ed7f
 800048c:	02020200 	.word	0x02020200
 8000490:	01ff0000 	.word	0x01ff0000
 8000494:	01010280 	.word	0x01010280
 8000498:	580000c0 	.word	0x580000c0
 800049c:	5c001000 	.word	0x5c001000
 80004a0:	ffff0000 	.word	0xffff0000
 80004a4:	51008108 	.word	0x51008108
 80004a8:	52004000 	.word	0x52004000

080004ac <ili9486_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9486_DisplayOn(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_SLPOUT);    // Exit Sleep
 80004b0:	2011      	movs	r0, #17
 80004b2:	f000 fc93 	bl	8000ddc <LCD_IO_WriteCmd8>
  ILI9486_LCDMUTEX_POP();
  LCD_IO_Bl_OnOff(1);
 80004b6:	2001      	movs	r0, #1
 80004b8:	f000 fb9b 	bl	8000bf2 <LCD_IO_Bl_OnOff>
}
 80004bc:	bf00      	nop
 80004be:	bd80      	pop	{r7, pc}

080004c0 <ili9486_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9486_GetLcdPixelWidth(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  return ILI9486_SIZE_X;
 80004c4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr

080004d2 <ili9486_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9486_GetLcdPixelHeight(void)
{
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0
  return ILI9486_SIZE_Y;
 80004d6:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80004da:	4618      	mov	r0, r3
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr

080004e4 <ili9486_Init>:
  * @brief  ILI9486 initialization
  * @param  None
  * @retval None
  */
void ili9486_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  if((Is_ili9486_Initialized & ILI9486_LCD_INITIALIZED) == 0)
 80004e8:	4b33      	ldr	r3, [pc, #204]	; (80005b8 <ili9486_Init+0xd4>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	f003 0301 	and.w	r3, r3, #1
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d115      	bne.n	8000520 <ili9486_Init+0x3c>
  {
    Is_ili9486_Initialized |= ILI9486_LCD_INITIALIZED;
 80004f4:	4b30      	ldr	r3, [pc, #192]	; (80005b8 <ili9486_Init+0xd4>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	f043 0301 	orr.w	r3, r3, #1
 80004fc:	b2da      	uxtb	r2, r3
 80004fe:	4b2e      	ldr	r3, [pc, #184]	; (80005b8 <ili9486_Init+0xd4>)
 8000500:	701a      	strb	r2, [r3, #0]
    if((Is_ili9486_Initialized & ILI9486_IO_INITIALIZED) == 0)
 8000502:	4b2d      	ldr	r3, [pc, #180]	; (80005b8 <ili9486_Init+0xd4>)
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	f003 0302 	and.w	r3, r3, #2
 800050a:	2b00      	cmp	r3, #0
 800050c:	d101      	bne.n	8000512 <ili9486_Init+0x2e>
      LCD_IO_Init();
 800050e:	f000 fb7b 	bl	8000c08 <LCD_IO_Init>
    Is_ili9486_Initialized |= ILI9486_IO_INITIALIZED;
 8000512:	4b29      	ldr	r3, [pc, #164]	; (80005b8 <ili9486_Init+0xd4>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	f043 0302 	orr.w	r3, r3, #2
 800051a:	b2da      	uxtb	r2, r3
 800051c:	4b26      	ldr	r3, [pc, #152]	; (80005b8 <ili9486_Init+0xd4>)
 800051e:	701a      	strb	r2, [r3, #0]
  }
  LCD_Delay(10);
 8000520:	200a      	movs	r0, #10
 8000522:	f000 fb5b 	bl	8000bdc <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9486_SWRESET);
 8000526:	2001      	movs	r0, #1
 8000528:	f000 fc58 	bl	8000ddc <LCD_IO_WriteCmd8>
  LCD_Delay(100);
 800052c:	2064      	movs	r0, #100	; 0x64
 800052e:	f000 fb55 	bl	8000bdc <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(ILI9486_RGB_INTERFACE, (uint8_t *)"\x00", 1); // RGB mode off (0xB0)
 8000532:	2201      	movs	r2, #1
 8000534:	4921      	ldr	r1, [pc, #132]	; (80005bc <ili9486_Init+0xd8>)
 8000536:	20b0      	movs	r0, #176	; 0xb0
 8000538:	f001 f894 	bl	8001664 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8(ILI9486_SLPOUT);    // Exit Sleep (0x11)
 800053c:	2011      	movs	r0, #17
 800053e:	f000 fc4d 	bl	8000ddc <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8000542:	200a      	movs	r0, #10
 8000544:	f000 fb4a 	bl	8000bdc <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(ILI9486_PIXFMT, (uint8_t *)"\x55", 1); // interface format (0x3A)
 8000548:	2201      	movs	r2, #1
 800054a:	491d      	ldr	r1, [pc, #116]	; (80005c0 <ili9486_Init+0xdc>)
 800054c:	203a      	movs	r0, #58	; 0x3a
 800054e:	f001 f889 	bl	8001664 <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9486_MADCTL); LCD_IO_WriteData8(ILI9486_MAD_DATA_RIGHT_THEN_DOWN);
 8000552:	2036      	movs	r0, #54	; 0x36
 8000554:	f000 fc42 	bl	8000ddc <LCD_IO_WriteCmd8>
 8000558:	2028      	movs	r0, #40	; 0x28
 800055a:	f000 fce9 	bl	8000f30 <LCD_IO_WriteData8>

  LCD_IO_WriteCmd8MultipleData8(ILI9486_PWCTR3, (uint8_t *)"\x44", 1); // 0xC2
 800055e:	2201      	movs	r2, #1
 8000560:	4918      	ldr	r1, [pc, #96]	; (80005c4 <ili9486_Init+0xe0>)
 8000562:	20c2      	movs	r0, #194	; 0xc2
 8000564:	f001 f87e 	bl	8001664 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9486_VMCTR1, (uint8_t *)"\x00\x00\x00\x00", 4); // 0xC5
 8000568:	2204      	movs	r2, #4
 800056a:	4917      	ldr	r1, [pc, #92]	; (80005c8 <ili9486_Init+0xe4>)
 800056c:	20c5      	movs	r0, #197	; 0xc5
 800056e:	f001 f879 	bl	8001664 <LCD_IO_WriteCmd8MultipleData8>

  // positive gamma control (0xE0)
  LCD_IO_WriteCmd8MultipleData8(ILI9486_GMCTRP1, (uint8_t *)"\x0F\x1F\x1C\x0C\x0F\x08\x48\x98\x37\x0A\x13\x04\x11\x0D\x00", 15);
 8000572:	220f      	movs	r2, #15
 8000574:	4915      	ldr	r1, [pc, #84]	; (80005cc <ili9486_Init+0xe8>)
 8000576:	20e0      	movs	r0, #224	; 0xe0
 8000578:	f001 f874 	bl	8001664 <LCD_IO_WriteCmd8MultipleData8>

  // negative gamma control (0xE1)
  LCD_IO_WriteCmd8MultipleData8(ILI9486_GMCTRN1, (uint8_t *)"\x0F\x32\x2E\x0B\x0D\x05\x47\x75\x37\x06\x10\x03\x24\x20\x00", 15);
 800057c:	220f      	movs	r2, #15
 800057e:	4914      	ldr	r1, [pc, #80]	; (80005d0 <ili9486_Init+0xec>)
 8000580:	20e1      	movs	r0, #225	; 0xe1
 8000582:	f001 f86f 	bl	8001664 <LCD_IO_WriteCmd8MultipleData8>

  // Digital gamma control1 (0xE2)
  LCD_IO_WriteCmd8MultipleData8(ILI9486_DGCTR1, (uint8_t *)"\x0F\x32\x2E\x0B\x0D\x05\x47\x75\x37\x06\x10\x03\x24\x20\x00", 15);
 8000586:	220f      	movs	r2, #15
 8000588:	4911      	ldr	r1, [pc, #68]	; (80005d0 <ili9486_Init+0xec>)
 800058a:	20e2      	movs	r0, #226	; 0xe2
 800058c:	f001 f86a 	bl	8001664 <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9486_NORON);     // Normal display on (0x13)
 8000590:	2013      	movs	r0, #19
 8000592:	f000 fc23 	bl	8000ddc <LCD_IO_WriteCmd8>
  LCD_IO_WriteCmd8(ILI9486_INVOFF);    // Display inversion off (0x20)
 8000596:	2020      	movs	r0, #32
 8000598:	f000 fc20 	bl	8000ddc <LCD_IO_WriteCmd8>
  LCD_IO_WriteCmd8(ILI9486_SLPOUT);    // Exit Sleep (0x11)
 800059c:	2011      	movs	r0, #17
 800059e:	f000 fc1d 	bl	8000ddc <LCD_IO_WriteCmd8>
  LCD_Delay(200);
 80005a2:	20c8      	movs	r0, #200	; 0xc8
 80005a4:	f000 fb1a 	bl	8000bdc <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9486_DISPON);    // Display on (0x29)
 80005a8:	2029      	movs	r0, #41	; 0x29
 80005aa:	f000 fc17 	bl	8000ddc <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 80005ae:	200a      	movs	r0, #10
 80005b0:	f000 fb14 	bl	8000bdc <LCD_Delay>
}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	2400037c 	.word	0x2400037c
 80005bc:	0800709c 	.word	0x0800709c
 80005c0:	080070a0 	.word	0x080070a0
 80005c4:	080070a4 	.word	0x080070a4
 80005c8:	080070a8 	.word	0x080070a8
 80005cc:	080070b0 	.word	0x080070b0
 80005d0:	080070c0 	.word	0x080070c0

080005d4 <ili9486_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9486_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	80fb      	strh	r3, [r7, #6]
 80005de:	460b      	mov	r3, r1
 80005e0:	80bb      	strh	r3, [r7, #4]
 80005e2:	4613      	mov	r3, r2
 80005e4:	807b      	strh	r3, [r7, #2]
  ILI9486_LCDMUTEX_PUSH();
  ILI9486_SETCURSOR(Xpos, Ypos);
 80005e6:	202a      	movs	r0, #42	; 0x2a
 80005e8:	f000 fbf8 	bl	8000ddc <LCD_IO_WriteCmd8>
 80005ec:	88fb      	ldrh	r3, [r7, #6]
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 fc9b 	bl	8000f30 <LCD_IO_WriteData8>
 80005fa:	88fb      	ldrh	r3, [r7, #6]
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 fc96 	bl	8000f30 <LCD_IO_WriteData8>
 8000604:	88fb      	ldrh	r3, [r7, #6]
 8000606:	0a1b      	lsrs	r3, r3, #8
 8000608:	b29b      	uxth	r3, r3
 800060a:	b2db      	uxtb	r3, r3
 800060c:	4618      	mov	r0, r3
 800060e:	f000 fc8f 	bl	8000f30 <LCD_IO_WriteData8>
 8000612:	88fb      	ldrh	r3, [r7, #6]
 8000614:	b2db      	uxtb	r3, r3
 8000616:	4618      	mov	r0, r3
 8000618:	f000 fc8a 	bl	8000f30 <LCD_IO_WriteData8>
 800061c:	202b      	movs	r0, #43	; 0x2b
 800061e:	f000 fbdd 	bl	8000ddc <LCD_IO_WriteCmd8>
 8000622:	88bb      	ldrh	r3, [r7, #4]
 8000624:	0a1b      	lsrs	r3, r3, #8
 8000626:	b29b      	uxth	r3, r3
 8000628:	b2db      	uxtb	r3, r3
 800062a:	4618      	mov	r0, r3
 800062c:	f000 fc80 	bl	8000f30 <LCD_IO_WriteData8>
 8000630:	88bb      	ldrh	r3, [r7, #4]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	4618      	mov	r0, r3
 8000636:	f000 fc7b 	bl	8000f30 <LCD_IO_WriteData8>
 800063a:	88bb      	ldrh	r3, [r7, #4]
 800063c:	0a1b      	lsrs	r3, r3, #8
 800063e:	b29b      	uxth	r3, r3
 8000640:	b2db      	uxtb	r3, r3
 8000642:	4618      	mov	r0, r3
 8000644:	f000 fc74 	bl	8000f30 <LCD_IO_WriteData8>
 8000648:	88bb      	ldrh	r3, [r7, #4]
 800064a:	b2db      	uxtb	r3, r3
 800064c:	4618      	mov	r0, r3
 800064e:	f000 fc6f 	bl	8000f30 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_RAMWR); LCD_IO_WriteData16(RGBCode);
 8000652:	202c      	movs	r0, #44	; 0x2c
 8000654:	f000 fbc2 	bl	8000ddc <LCD_IO_WriteCmd8>
 8000658:	887b      	ldrh	r3, [r7, #2]
 800065a:	4618      	mov	r0, r3
 800065c:	f000 fd0a 	bl	8001074 <LCD_IO_WriteData16>
  ILI9486_LCDMUTEX_POP();
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <ili9486_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9486_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8000668:	b590      	push	{r4, r7, lr}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	4604      	mov	r4, r0
 8000670:	4608      	mov	r0, r1
 8000672:	4611      	mov	r1, r2
 8000674:	461a      	mov	r2, r3
 8000676:	4623      	mov	r3, r4
 8000678:	80fb      	strh	r3, [r7, #6]
 800067a:	4603      	mov	r3, r0
 800067c:	80bb      	strh	r3, [r7, #4]
 800067e:	460b      	mov	r3, r1
 8000680:	807b      	strh	r3, [r7, #2]
 8000682:	4613      	mov	r3, r2
 8000684:	803b      	strh	r3, [r7, #0]
  yStart = Ypos; yEnd = Ypos + Height - 1;
 8000686:	4a2a      	ldr	r2, [pc, #168]	; (8000730 <ili9486_SetDisplayWindow+0xc8>)
 8000688:	88bb      	ldrh	r3, [r7, #4]
 800068a:	8013      	strh	r3, [r2, #0]
 800068c:	88ba      	ldrh	r2, [r7, #4]
 800068e:	883b      	ldrh	r3, [r7, #0]
 8000690:	4413      	add	r3, r2
 8000692:	b29b      	uxth	r3, r3
 8000694:	3b01      	subs	r3, #1
 8000696:	b29a      	uxth	r2, r3
 8000698:	4b26      	ldr	r3, [pc, #152]	; (8000734 <ili9486_SetDisplayWindow+0xcc>)
 800069a:	801a      	strh	r2, [r3, #0]
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Width - 1);
 800069c:	202a      	movs	r0, #42	; 0x2a
 800069e:	f000 fb9d 	bl	8000ddc <LCD_IO_WriteCmd8>
 80006a2:	88fb      	ldrh	r3, [r7, #6]
 80006a4:	0a1b      	lsrs	r3, r3, #8
 80006a6:	b29b      	uxth	r3, r3
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 fc40 	bl	8000f30 <LCD_IO_WriteData8>
 80006b0:	88fb      	ldrh	r3, [r7, #6]
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 fc3b 	bl	8000f30 <LCD_IO_WriteData8>
 80006ba:	88fa      	ldrh	r2, [r7, #6]
 80006bc:	887b      	ldrh	r3, [r7, #2]
 80006be:	4413      	add	r3, r2
 80006c0:	3b01      	subs	r3, #1
 80006c2:	121b      	asrs	r3, r3, #8
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 fc32 	bl	8000f30 <LCD_IO_WriteData8>
 80006cc:	88fb      	ldrh	r3, [r7, #6]
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	887b      	ldrh	r3, [r7, #2]
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	4413      	add	r3, r2
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	3b01      	subs	r3, #1
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 fc27 	bl	8000f30 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Height - 1);
 80006e2:	202b      	movs	r0, #43	; 0x2b
 80006e4:	f000 fb7a 	bl	8000ddc <LCD_IO_WriteCmd8>
 80006e8:	88bb      	ldrh	r3, [r7, #4]
 80006ea:	0a1b      	lsrs	r3, r3, #8
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 fc1d 	bl	8000f30 <LCD_IO_WriteData8>
 80006f6:	88bb      	ldrh	r3, [r7, #4]
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 fc18 	bl	8000f30 <LCD_IO_WriteData8>
 8000700:	88ba      	ldrh	r2, [r7, #4]
 8000702:	883b      	ldrh	r3, [r7, #0]
 8000704:	4413      	add	r3, r2
 8000706:	3b01      	subs	r3, #1
 8000708:	121b      	asrs	r3, r3, #8
 800070a:	b2db      	uxtb	r3, r3
 800070c:	4618      	mov	r0, r3
 800070e:	f000 fc0f 	bl	8000f30 <LCD_IO_WriteData8>
 8000712:	88bb      	ldrh	r3, [r7, #4]
 8000714:	b2da      	uxtb	r2, r3
 8000716:	883b      	ldrh	r3, [r7, #0]
 8000718:	b2db      	uxtb	r3, r3
 800071a:	4413      	add	r3, r2
 800071c:	b2db      	uxtb	r3, r3
 800071e:	3b01      	subs	r3, #1
 8000720:	b2db      	uxtb	r3, r3
 8000722:	4618      	mov	r0, r3
 8000724:	f000 fc04 	bl	8000f30 <LCD_IO_WriteData8>
  ILI9486_LCDMUTEX_POP();
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	bd90      	pop	{r4, r7, pc}
 8000730:	2400037e 	.word	0x2400037e
 8000734:	24000380 	.word	0x24000380

08000738 <ili9486_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9486_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 8000738:	b590      	push	{r4, r7, lr}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	4604      	mov	r4, r0
 8000740:	4608      	mov	r0, r1
 8000742:	4611      	mov	r1, r2
 8000744:	461a      	mov	r2, r3
 8000746:	4623      	mov	r3, r4
 8000748:	80fb      	strh	r3, [r7, #6]
 800074a:	4603      	mov	r3, r0
 800074c:	80bb      	strh	r3, [r7, #4]
 800074e:	460b      	mov	r3, r1
 8000750:	807b      	strh	r3, [r7, #2]
 8000752:	4613      	mov	r3, r2
 8000754:	803b      	strh	r3, [r7, #0]
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Xsize - 1);
 8000756:	202a      	movs	r0, #42	; 0x2a
 8000758:	f000 fb40 	bl	8000ddc <LCD_IO_WriteCmd8>
 800075c:	88fb      	ldrh	r3, [r7, #6]
 800075e:	0a1b      	lsrs	r3, r3, #8
 8000760:	b29b      	uxth	r3, r3
 8000762:	b2db      	uxtb	r3, r3
 8000764:	4618      	mov	r0, r3
 8000766:	f000 fbe3 	bl	8000f30 <LCD_IO_WriteData8>
 800076a:	88fb      	ldrh	r3, [r7, #6]
 800076c:	b2db      	uxtb	r3, r3
 800076e:	4618      	mov	r0, r3
 8000770:	f000 fbde 	bl	8000f30 <LCD_IO_WriteData8>
 8000774:	88fa      	ldrh	r2, [r7, #6]
 8000776:	887b      	ldrh	r3, [r7, #2]
 8000778:	4413      	add	r3, r2
 800077a:	3b01      	subs	r3, #1
 800077c:	121b      	asrs	r3, r3, #8
 800077e:	b2db      	uxtb	r3, r3
 8000780:	4618      	mov	r0, r3
 8000782:	f000 fbd5 	bl	8000f30 <LCD_IO_WriteData8>
 8000786:	88fb      	ldrh	r3, [r7, #6]
 8000788:	b2da      	uxtb	r2, r3
 800078a:	887b      	ldrh	r3, [r7, #2]
 800078c:	b2db      	uxtb	r3, r3
 800078e:	4413      	add	r3, r2
 8000790:	b2db      	uxtb	r3, r3
 8000792:	3b01      	subs	r3, #1
 8000794:	b2db      	uxtb	r3, r3
 8000796:	4618      	mov	r0, r3
 8000798:	f000 fbca 	bl	8000f30 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Ysize - 1);
 800079c:	202b      	movs	r0, #43	; 0x2b
 800079e:	f000 fb1d 	bl	8000ddc <LCD_IO_WriteCmd8>
 80007a2:	88bb      	ldrh	r3, [r7, #4]
 80007a4:	0a1b      	lsrs	r3, r3, #8
 80007a6:	b29b      	uxth	r3, r3
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 fbc0 	bl	8000f30 <LCD_IO_WriteData8>
 80007b0:	88bb      	ldrh	r3, [r7, #4]
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	4618      	mov	r0, r3
 80007b6:	f000 fbbb 	bl	8000f30 <LCD_IO_WriteData8>
 80007ba:	88ba      	ldrh	r2, [r7, #4]
 80007bc:	883b      	ldrh	r3, [r7, #0]
 80007be:	4413      	add	r3, r2
 80007c0:	3b01      	subs	r3, #1
 80007c2:	121b      	asrs	r3, r3, #8
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 fbb2 	bl	8000f30 <LCD_IO_WriteData8>
 80007cc:	88bb      	ldrh	r3, [r7, #4]
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	883b      	ldrh	r3, [r7, #0]
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	4413      	add	r3, r2
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	3b01      	subs	r3, #1
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 fba7 	bl	8000f30 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9486_RAMWR, RGBCode, Xsize * Ysize);
 80007e2:	887b      	ldrh	r3, [r7, #2]
 80007e4:	883a      	ldrh	r2, [r7, #0]
 80007e6:	fb02 f303 	mul.w	r3, r2, r3
 80007ea:	461a      	mov	r2, r3
 80007ec:	8b3b      	ldrh	r3, [r7, #24]
 80007ee:	4619      	mov	r1, r3
 80007f0:	202c      	movs	r0, #44	; 0x2c
 80007f2:	f000 fd69 	bl	80012c8 <LCD_IO_WriteCmd8DataFill16>
  ILI9486_LCDMUTEX_POP();
}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd90      	pop	{r4, r7, pc}

080007fe <ili9486_DrawRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9486_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 80007fe:	b590      	push	{r4, r7, lr}
 8000800:	b083      	sub	sp, #12
 8000802:	af00      	add	r7, sp, #0
 8000804:	4604      	mov	r4, r0
 8000806:	4608      	mov	r0, r1
 8000808:	4611      	mov	r1, r2
 800080a:	461a      	mov	r2, r3
 800080c:	4623      	mov	r3, r4
 800080e:	80fb      	strh	r3, [r7, #6]
 8000810:	4603      	mov	r3, r0
 8000812:	80bb      	strh	r3, [r7, #4]
 8000814:	460b      	mov	r3, r1
 8000816:	807b      	strh	r3, [r7, #2]
 8000818:	4613      	mov	r3, r2
 800081a:	803b      	strh	r3, [r7, #0]
  ili9486_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 800081c:	883b      	ldrh	r3, [r7, #0]
 800081e:	887a      	ldrh	r2, [r7, #2]
 8000820:	88b9      	ldrh	r1, [r7, #4]
 8000822:	88f8      	ldrh	r0, [r7, #6]
 8000824:	f7ff ff20 	bl	8000668 <ili9486_SetDisplayWindow>
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData16(ILI9486_RAMWR, pData, Xsize * Ysize);
 8000828:	887b      	ldrh	r3, [r7, #2]
 800082a:	883a      	ldrh	r2, [r7, #0]
 800082c:	fb02 f303 	mul.w	r3, r2, r3
 8000830:	461a      	mov	r2, r3
 8000832:	69b9      	ldr	r1, [r7, #24]
 8000834:	202c      	movs	r0, #44	; 0x2c
 8000836:	f001 f84f 	bl	80018d8 <LCD_IO_WriteCmd8MultipleData16>
  ILI9486_LCDMUTEX_POP();
}
 800083a:	bf00      	nop
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	bd90      	pop	{r4, r7, pc}

08000842 <ili9486_WriteChar>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Char background Color
  * @retval None
  */
void ili9486_WriteChar(uint16_t Xpo, uint16_t Ypo, char *chr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 8000842:	b082      	sub	sp, #8
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	; 0x28
 8000848:	af00      	add	r7, sp, #0
 800084a:	603a      	str	r2, [r7, #0]
 800084c:	637b      	str	r3, [r7, #52]	; 0x34
 800084e:	4603      	mov	r3, r0
 8000850:	80fb      	strh	r3, [r7, #6]
 8000852:	460b      	mov	r3, r1
 8000854:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9486_WriteChar(140, 50, "E", Font24, cl_ORANGE, cl_BLACK);
	 * */
	//// stored font data
	uint32_t hop32 = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t b8[4] = {0};
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
	 * c = i * rowbox -> jump to next column in next i rowloop
	 * k => jump to next row in that column
	 * */

	//// find num of bit rows per jump in fonts.c
	int rowbox = ceilf((float)(fonto.Width) / 8);
 800085e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000860:	ee07 3a90 	vmov	s15, r3
 8000864:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000868:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800086c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000870:	eeb0 0a47 	vmov.f32	s0, s14
 8000874:	f006 fbc4 	bl	8007000 <ceilf>
 8000878:	eef0 7a40 	vmov.f32	s15, s0
 800087c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000880:	ee17 3a90 	vmov	r3, s15
 8000884:	617b      	str	r3, [r7, #20]

	//// choose MSB check pos for each font size
	//// 0x80 , 0x8000 , 0x 800000
	uint32_t clif_msb = 0x80 << (8 * (rowbox - 1));
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	3b01      	subs	r3, #1
 800088a:	00db      	lsls	r3, r3, #3
 800088c:	2280      	movs	r2, #128	; 0x80
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	613b      	str	r3, [r7, #16]

	//// -32 to offset sync ASCII Table start " " at 32
	//// double for loop as one char table
	for(int i = 0; i < fonto.Height; i++){
 8000894:	2300      	movs	r3, #0
 8000896:	623b      	str	r3, [r7, #32]
 8000898:	e060      	b.n	800095c <ili9486_WriteChar+0x11a>
		hop32 = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
 80008a2:	e024      	b.n	80008ee <ili9486_WriteChar+0xac>
			b8[k] = fonto.table[((int)(*chr - 32) * fonto.Height * rowbox) + (i * rowbox) + k];
 80008a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008a6:	683a      	ldr	r2, [r7, #0]
 80008a8:	7812      	ldrb	r2, [r2, #0]
 80008aa:	3a20      	subs	r2, #32
 80008ac:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 80008ae:	fb01 f202 	mul.w	r2, r1, r2
 80008b2:	6979      	ldr	r1, [r7, #20]
 80008b4:	fb02 f101 	mul.w	r1, r2, r1
 80008b8:	6a3a      	ldr	r2, [r7, #32]
 80008ba:	6978      	ldr	r0, [r7, #20]
 80008bc:	fb00 f202 	mul.w	r2, r0, r2
 80008c0:	4411      	add	r1, r2
 80008c2:	69fa      	ldr	r2, [r7, #28]
 80008c4:	440a      	add	r2, r1
 80008c6:	4413      	add	r3, r2
 80008c8:	7819      	ldrb	r1, [r3, #0]
 80008ca:	f107 020c 	add.w	r2, r7, #12
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	4413      	add	r3, r2
 80008d2:	460a      	mov	r2, r1
 80008d4:	701a      	strb	r2, [r3, #0]
			hop32 = (hop32 << 8) + b8[k];
 80008d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d8:	021b      	lsls	r3, r3, #8
 80008da:	f107 010c 	add.w	r1, r7, #12
 80008de:	69fa      	ldr	r2, [r7, #28]
 80008e0:	440a      	add	r2, r1
 80008e2:	7812      	ldrb	r2, [r2, #0]
 80008e4:	4413      	add	r3, r2
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 80008e8:	69fb      	ldr	r3, [r7, #28]
 80008ea:	3301      	adds	r3, #1
 80008ec:	61fb      	str	r3, [r7, #28]
 80008ee:	69fa      	ldr	r2, [r7, #28]
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	429a      	cmp	r2, r3
 80008f4:	dbd6      	blt.n	80008a4 <ili9486_WriteChar+0x62>
		}

		for(int j = 0; j < fonto.Width; j++){
 80008f6:	2300      	movs	r3, #0
 80008f8:	61bb      	str	r3, [r7, #24]
 80008fa:	e027      	b.n	800094c <ili9486_WriteChar+0x10a>
			//// if valuein fonttable is 1
			if((hop32 << j) & clif_msb){ // buu32.b32
 80008fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008fe:	69bb      	ldr	r3, [r7, #24]
 8000900:	409a      	lsls	r2, r3
 8000902:	693b      	ldr	r3, [r7, #16]
 8000904:	4013      	ands	r3, r2
 8000906:	2b00      	cmp	r3, #0
 8000908:	d00e      	beq.n	8000928 <ili9486_WriteChar+0xe6>
				ili9486_WritePixel(Xpo + j, Ypo + i, RGB_Coder);
 800090a:	69bb      	ldr	r3, [r7, #24]
 800090c:	b29a      	uxth	r2, r3
 800090e:	88fb      	ldrh	r3, [r7, #6]
 8000910:	4413      	add	r3, r2
 8000912:	b298      	uxth	r0, r3
 8000914:	6a3b      	ldr	r3, [r7, #32]
 8000916:	b29a      	uxth	r2, r3
 8000918:	88bb      	ldrh	r3, [r7, #4]
 800091a:	4413      	add	r3, r2
 800091c:	b29b      	uxth	r3, r3
 800091e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8000920:	4619      	mov	r1, r3
 8000922:	f7ff fe57 	bl	80005d4 <ili9486_WritePixel>
 8000926:	e00e      	b.n	8000946 <ili9486_WriteChar+0x104>
			}
			//// for background write
			else{
				ili9486_WritePixel(Xpo + j, Ypo + i, RGB_bg);
 8000928:	69bb      	ldr	r3, [r7, #24]
 800092a:	b29a      	uxth	r2, r3
 800092c:	88fb      	ldrh	r3, [r7, #6]
 800092e:	4413      	add	r3, r2
 8000930:	b298      	uxth	r0, r3
 8000932:	6a3b      	ldr	r3, [r7, #32]
 8000934:	b29a      	uxth	r2, r3
 8000936:	88bb      	ldrh	r3, [r7, #4]
 8000938:	4413      	add	r3, r2
 800093a:	b29b      	uxth	r3, r3
 800093c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8000940:	4619      	mov	r1, r3
 8000942:	f7ff fe47 	bl	80005d4 <ili9486_WritePixel>
		for(int j = 0; j < fonto.Width; j++){
 8000946:	69bb      	ldr	r3, [r7, #24]
 8000948:	3301      	adds	r3, #1
 800094a:	61bb      	str	r3, [r7, #24]
 800094c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800094e:	461a      	mov	r2, r3
 8000950:	69bb      	ldr	r3, [r7, #24]
 8000952:	4293      	cmp	r3, r2
 8000954:	dbd2      	blt.n	80008fc <ili9486_WriteChar+0xba>
	for(int i = 0; i < fonto.Height; i++){
 8000956:	6a3b      	ldr	r3, [r7, #32]
 8000958:	3301      	adds	r3, #1
 800095a:	623b      	str	r3, [r7, #32]
 800095c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800095e:	461a      	mov	r2, r3
 8000960:	6a3b      	ldr	r3, [r7, #32]
 8000962:	4293      	cmp	r3, r2
 8000964:	db99      	blt.n	800089a <ili9486_WriteChar+0x58>
			}

		}
	}
}
 8000966:	bf00      	nop
 8000968:	bf00      	nop
 800096a:	3728      	adds	r7, #40	; 0x28
 800096c:	46bd      	mov	sp, r7
 800096e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000972:	b002      	add	sp, #8
 8000974:	4770      	bx	lr

08000976 <ili9486_WriteCharNoBG>:
  * @param  chr:  Display Char
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @retval None
  */
void ili9486_WriteCharNoBG(uint16_t Xpo, uint16_t Ypo, char *chr,sFONT fonto, uint16_t RGB_Coder){
 8000976:	b082      	sub	sp, #8
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	; 0x28
 800097c:	af00      	add	r7, sp, #0
 800097e:	603a      	str	r2, [r7, #0]
 8000980:	637b      	str	r3, [r7, #52]	; 0x34
 8000982:	4603      	mov	r3, r0
 8000984:	80fb      	strh	r3, [r7, #6]
 8000986:	460b      	mov	r3, r1
 8000988:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9486_WriteCharNoBG(10, 30, "E", Font24, cl_ORANGE);
	 * */
	//// stored font data
	uint32_t hop32 = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t b8[4] = {0};
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]

	//// find num of bit rows per jump in fonts.c
	int rowbox = ceilf((float)(fonto.Width) / 8);
 8000992:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000994:	ee07 3a90 	vmov	s15, r3
 8000998:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800099c:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80009a0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80009a4:	eeb0 0a47 	vmov.f32	s0, s14
 80009a8:	f006 fb2a 	bl	8007000 <ceilf>
 80009ac:	eef0 7a40 	vmov.f32	s15, s0
 80009b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009b4:	ee17 3a90 	vmov	r3, s15
 80009b8:	617b      	str	r3, [r7, #20]
	uint32_t clif_msb = 0x80 << (8 * (rowbox - 1));
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	3b01      	subs	r3, #1
 80009be:	00db      	lsls	r3, r3, #3
 80009c0:	2280      	movs	r2, #128	; 0x80
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < fonto.Height; i++){
 80009c8:	2300      	movs	r3, #0
 80009ca:	623b      	str	r3, [r7, #32]
 80009cc:	e050      	b.n	8000a70 <ili9486_WriteCharNoBG+0xfa>
		hop32 = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 80009d2:	2300      	movs	r3, #0
 80009d4:	61fb      	str	r3, [r7, #28]
 80009d6:	e024      	b.n	8000a22 <ili9486_WriteCharNoBG+0xac>
			b8[k] = fonto.table[((int)(*chr - 32) * fonto.Height * rowbox) + (i * rowbox) + k];
 80009d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009da:	683a      	ldr	r2, [r7, #0]
 80009dc:	7812      	ldrb	r2, [r2, #0]
 80009de:	3a20      	subs	r2, #32
 80009e0:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 80009e2:	fb01 f202 	mul.w	r2, r1, r2
 80009e6:	6979      	ldr	r1, [r7, #20]
 80009e8:	fb02 f101 	mul.w	r1, r2, r1
 80009ec:	6a3a      	ldr	r2, [r7, #32]
 80009ee:	6978      	ldr	r0, [r7, #20]
 80009f0:	fb00 f202 	mul.w	r2, r0, r2
 80009f4:	4411      	add	r1, r2
 80009f6:	69fa      	ldr	r2, [r7, #28]
 80009f8:	440a      	add	r2, r1
 80009fa:	4413      	add	r3, r2
 80009fc:	7819      	ldrb	r1, [r3, #0]
 80009fe:	f107 020c 	add.w	r2, r7, #12
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	4413      	add	r3, r2
 8000a06:	460a      	mov	r2, r1
 8000a08:	701a      	strb	r2, [r3, #0]
			hop32 = (hop32 << 8) + b8[k];
 8000a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0c:	021b      	lsls	r3, r3, #8
 8000a0e:	f107 010c 	add.w	r1, r7, #12
 8000a12:	69fa      	ldr	r2, [r7, #28]
 8000a14:	440a      	add	r2, r1
 8000a16:	7812      	ldrb	r2, [r2, #0]
 8000a18:	4413      	add	r3, r2
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8000a1c:	69fb      	ldr	r3, [r7, #28]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	61fb      	str	r3, [r7, #28]
 8000a22:	69fa      	ldr	r2, [r7, #28]
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	429a      	cmp	r2, r3
 8000a28:	dbd6      	blt.n	80009d8 <ili9486_WriteCharNoBG+0x62>
		}

		for(int j = 0; j < fonto.Width; j++){
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61bb      	str	r3, [r7, #24]
 8000a2e:	e017      	b.n	8000a60 <ili9486_WriteCharNoBG+0xea>
			//// if valuein fonttable is 1
			if((hop32 << j) & clif_msb){ // buu32.b32
 8000a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a32:	69bb      	ldr	r3, [r7, #24]
 8000a34:	409a      	lsls	r2, r3
 8000a36:	693b      	ldr	r3, [r7, #16]
 8000a38:	4013      	ands	r3, r2
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d00d      	beq.n	8000a5a <ili9486_WriteCharNoBG+0xe4>
				ili9486_WritePixel(Xpo + j, Ypo + i, RGB_Coder);
 8000a3e:	69bb      	ldr	r3, [r7, #24]
 8000a40:	b29a      	uxth	r2, r3
 8000a42:	88fb      	ldrh	r3, [r7, #6]
 8000a44:	4413      	add	r3, r2
 8000a46:	b298      	uxth	r0, r3
 8000a48:	6a3b      	ldr	r3, [r7, #32]
 8000a4a:	b29a      	uxth	r2, r3
 8000a4c:	88bb      	ldrh	r3, [r7, #4]
 8000a4e:	4413      	add	r3, r2
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8000a54:	4619      	mov	r1, r3
 8000a56:	f7ff fdbd 	bl	80005d4 <ili9486_WritePixel>
		for(int j = 0; j < fonto.Width; j++){
 8000a5a:	69bb      	ldr	r3, [r7, #24]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	61bb      	str	r3, [r7, #24]
 8000a60:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000a62:	461a      	mov	r2, r3
 8000a64:	69bb      	ldr	r3, [r7, #24]
 8000a66:	4293      	cmp	r3, r2
 8000a68:	dbe2      	blt.n	8000a30 <ili9486_WriteCharNoBG+0xba>
	for(int i = 0; i < fonto.Height; i++){
 8000a6a:	6a3b      	ldr	r3, [r7, #32]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	623b      	str	r3, [r7, #32]
 8000a70:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000a72:	461a      	mov	r2, r3
 8000a74:	6a3b      	ldr	r3, [r7, #32]
 8000a76:	4293      	cmp	r3, r2
 8000a78:	dba9      	blt.n	80009ce <ili9486_WriteCharNoBG+0x58>
			}
		}
	}
}
 8000a7a:	bf00      	nop
 8000a7c:	bf00      	nop
 8000a7e:	3728      	adds	r7, #40	; 0x28
 8000a80:	46bd      	mov	sp, r7
 8000a82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a86:	b002      	add	sp, #8
 8000a88:	4770      	bx	lr

08000a8a <ili9486_WriteString>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Text background Color
  * @retval None
  */
void ili9486_WriteString(uint16_t Xpo, uint16_t Ypo,const char* strr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b088      	sub	sp, #32
 8000a90:	af04      	add	r7, sp, #16
 8000a92:	603a      	str	r2, [r7, #0]
 8000a94:	61fb      	str	r3, [r7, #28]
 8000a96:	4603      	mov	r3, r0
 8000a98:	80fb      	strh	r3, [r7, #6]
 8000a9a:	460b      	mov	r3, r1
 8000a9c:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9486_WriteString(20, 300, "Helios xTerra", Font20, cl_WHITE, cl_BLACK);
	 * */
	uint16_t ili_heigh = ili9486_GetLcdPixelHeight();
 8000a9e:	f7ff fd18 	bl	80004d2 <ili9486_GetLcdPixelHeight>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	81fb      	strh	r3, [r7, #14]
	uint16_t ili_width = ili9486_GetLcdPixelWidth();
 8000aa6:	f7ff fd0b 	bl	80004c0 <ili9486_GetLcdPixelWidth>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	81bb      	strh	r3, [r7, #12]
	while(*strr){
 8000aae:	e02c      	b.n	8000b0a <ili9486_WriteString+0x80>
	//// Check screen overflow / new line
		if(Xpo + fonto.Width >= ili_width){
 8000ab0:	88fb      	ldrh	r3, [r7, #6]
 8000ab2:	8c3a      	ldrh	r2, [r7, #32]
 8000ab4:	441a      	add	r2, r3
 8000ab6:	89bb      	ldrh	r3, [r7, #12]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	db13      	blt.n	8000ae4 <ili9486_WriteString+0x5a>
			Xpo = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	80fb      	strh	r3, [r7, #6]
			Ypo += fonto.Height;
 8000ac0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000ac2:	88bb      	ldrh	r3, [r7, #4]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	80bb      	strh	r3, [r7, #4]

			if(Ypo + fonto.Height >= ili_heigh){
 8000ac8:	88bb      	ldrh	r3, [r7, #4]
 8000aca:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000acc:	441a      	add	r2, r3
 8000ace:	89fb      	ldrh	r3, [r7, #14]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	da1f      	bge.n	8000b14 <ili9486_WriteString+0x8a>
				break;
			}

			if(*strr == ' ') {
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b20      	cmp	r3, #32
 8000ada:	d103      	bne.n	8000ae4 <ili9486_WriteString+0x5a>
				// skip spaces in the beginning of the new line
				strr++;
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	603b      	str	r3, [r7, #0]
				continue;
 8000ae2:	e012      	b.n	8000b0a <ili9486_WriteString+0x80>
			}
		}
		//ST7735_WriteChar(x, y, *str, font, color, bgcolor);
		ili9486_WriteChar(Xpo, Ypo, strr, fonto, RGB_Coder, RGB_bg);
 8000ae4:	88b9      	ldrh	r1, [r7, #4]
 8000ae6:	88f8      	ldrh	r0, [r7, #6]
 8000ae8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000aea:	9302      	str	r3, [sp, #8]
 8000aec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000aee:	9301      	str	r3, [sp, #4]
 8000af0:	6a3b      	ldr	r3, [r7, #32]
 8000af2:	9300      	str	r3, [sp, #0]
 8000af4:	69fb      	ldr	r3, [r7, #28]
 8000af6:	683a      	ldr	r2, [r7, #0]
 8000af8:	f7ff fea3 	bl	8000842 <ili9486_WriteChar>
		Xpo += fonto.Width;
 8000afc:	8c3a      	ldrh	r2, [r7, #32]
 8000afe:	88fb      	ldrh	r3, [r7, #6]
 8000b00:	4413      	add	r3, r2
 8000b02:	80fb      	strh	r3, [r7, #6]
		strr++;
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	3301      	adds	r3, #1
 8000b08:	603b      	str	r3, [r7, #0]
	while(*strr){
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d1ce      	bne.n	8000ab0 <ili9486_WriteString+0x26>
	}
}
 8000b12:	e000      	b.n	8000b16 <ili9486_WriteString+0x8c>
				break;
 8000b14:	bf00      	nop
}
 8000b16:	bf00      	nop
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b20:	b002      	add	sp, #8
 8000b22:	4770      	bx	lr

08000b24 <ili9486_WriteStringNoBG>:
  * @param  Strr:  Display Text
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @retval None
  */
void ili9486_WriteStringNoBG(uint16_t Xpo, uint16_t Ypo,const char* strr,sFONT fonto, uint16_t RGB_Coder){
 8000b24:	b082      	sub	sp, #8
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b086      	sub	sp, #24
 8000b2a:	af02      	add	r7, sp, #8
 8000b2c:	603a      	str	r2, [r7, #0]
 8000b2e:	61fb      	str	r3, [r7, #28]
 8000b30:	4603      	mov	r3, r0
 8000b32:	80fb      	strh	r3, [r7, #6]
 8000b34:	460b      	mov	r3, r1
 8000b36:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9486_WriteString(20, 300, "Helios xTerra", Font20, cl_WHITE, cl_BLACK);
	 * */
	uint16_t ili_heigh = ili9486_GetLcdPixelHeight();
 8000b38:	f7ff fccb 	bl	80004d2 <ili9486_GetLcdPixelHeight>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	81fb      	strh	r3, [r7, #14]
	uint16_t ili_width = ili9486_GetLcdPixelWidth();
 8000b40:	f7ff fcbe 	bl	80004c0 <ili9486_GetLcdPixelWidth>
 8000b44:	4603      	mov	r3, r0
 8000b46:	81bb      	strh	r3, [r7, #12]
	while(*strr){
 8000b48:	e02a      	b.n	8000ba0 <ili9486_WriteStringNoBG+0x7c>
	//// Check screen overflow / new line
		if(Xpo + fonto.Width >= ili_width){
 8000b4a:	88fb      	ldrh	r3, [r7, #6]
 8000b4c:	8c3a      	ldrh	r2, [r7, #32]
 8000b4e:	441a      	add	r2, r3
 8000b50:	89bb      	ldrh	r3, [r7, #12]
 8000b52:	429a      	cmp	r2, r3
 8000b54:	db13      	blt.n	8000b7e <ili9486_WriteStringNoBG+0x5a>
			Xpo = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	80fb      	strh	r3, [r7, #6]
			Ypo += fonto.Height;
 8000b5a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000b5c:	88bb      	ldrh	r3, [r7, #4]
 8000b5e:	4413      	add	r3, r2
 8000b60:	80bb      	strh	r3, [r7, #4]

			if(Ypo + fonto.Height >= ili_heigh){
 8000b62:	88bb      	ldrh	r3, [r7, #4]
 8000b64:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000b66:	441a      	add	r2, r3
 8000b68:	89fb      	ldrh	r3, [r7, #14]
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	da1d      	bge.n	8000baa <ili9486_WriteStringNoBG+0x86>
				break;
			}
			if(*strr == ' ') {
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b20      	cmp	r3, #32
 8000b74:	d103      	bne.n	8000b7e <ili9486_WriteStringNoBG+0x5a>
				strr++;
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	603b      	str	r3, [r7, #0]
				continue;
 8000b7c:	e010      	b.n	8000ba0 <ili9486_WriteStringNoBG+0x7c>
			}
		}
		ili9486_WriteCharNoBG(Xpo, Ypo, strr, fonto, RGB_Coder);
 8000b7e:	88b9      	ldrh	r1, [r7, #4]
 8000b80:	88f8      	ldrh	r0, [r7, #6]
 8000b82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000b84:	9301      	str	r3, [sp, #4]
 8000b86:	6a3b      	ldr	r3, [r7, #32]
 8000b88:	9300      	str	r3, [sp, #0]
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	683a      	ldr	r2, [r7, #0]
 8000b8e:	f7ff fef2 	bl	8000976 <ili9486_WriteCharNoBG>
		Xpo += fonto.Width;
 8000b92:	8c3a      	ldrh	r2, [r7, #32]
 8000b94:	88fb      	ldrh	r3, [r7, #6]
 8000b96:	4413      	add	r3, r2
 8000b98:	80fb      	strh	r3, [r7, #6]
		strr++;
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	603b      	str	r3, [r7, #0]
	while(*strr){
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d1d0      	bne.n	8000b4a <ili9486_WriteStringNoBG+0x26>
	}
}
 8000ba8:	e000      	b.n	8000bac <ili9486_WriteStringNoBG+0x88>
				break;
 8000baa:	bf00      	nop
}
 8000bac:	bf00      	nop
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bb6:	b002      	add	sp, #8
 8000bb8:	4770      	bx	lr

08000bba <LCD_IO_Delay>:
#elif   defined(__CC_ARM)
#pragma push
#pragma O0
#endif
void LCD_IO_Delay(uint32_t c)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	b083      	sub	sp, #12
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
  while(c--);
 8000bc2:	bf00      	nop
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	1e5a      	subs	r2, r3, #1
 8000bc8:	607a      	str	r2, [r7, #4]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d1fa      	bne.n	8000bc4 <LCD_IO_Delay+0xa>
}
 8000bce:	bf00      	nop
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <LCD_Delay>:
#pragma pop
#endif

//-----------------------------------------------------------------------------
void LCD_Delay(uint32_t Delay)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f002 f911 	bl	8002e0c <HAL_Delay>
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	b083      	sub	sp, #12
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	71fb      	strb	r3, [r7, #7]
    GPIOX_CLR(LCD_BL);
  else
    GPIOX_SET(LCD_BL);
  #endif
  #endif
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  #define GPIOX_CLOCK_LCD_RD    GPIOX_CLOCK(LCD_RD)
  #else
  #define GPIOX_CLOCK_LCD_RD    0
  #endif

  RCC->AHB4ENR |= (GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_WR) |
 8000c0c:	4b6c      	ldr	r3, [pc, #432]	; (8000dc0 <LCD_IO_Init+0x1b8>)
 8000c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c12:	4a6b      	ldr	r2, [pc, #428]	; (8000dc0 <LCD_IO_Init+0x1b8>)
 8000c14:	f043 035f 	orr.w	r3, r3, #95	; 0x5f
 8000c18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
                   GPIOX_CLOCK(LCD_D0) | GPIOX_CLOCK(LCD_D1) | GPIOX_CLOCK(LCD_D2) | GPIOX_CLOCK(LCD_D3) |
                   GPIOX_CLOCK(LCD_D4) | GPIOX_CLOCK(LCD_D5) | GPIOX_CLOCK(LCD_D6) | GPIOX_CLOCK(LCD_D7) |
                   GPIOX_CLOCK_LCD_RST | GPIOX_CLOCK_LCD_BL  | GPIOX_CLOCK_LCD_RD);

  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  LCD_RST_OFF;                          /* RST = 1 */
 8000c1c:	4b69      	ldr	r3, [pc, #420]	; (8000dc4 <LCD_IO_Init+0x1bc>)
 8000c1e:	2204      	movs	r2, #4
 8000c20:	619a      	str	r2, [r3, #24]
  GPIOX_MODER(MODE_OUT, LCD_RST);
 8000c22:	4b68      	ldr	r3, [pc, #416]	; (8000dc4 <LCD_IO_Init+0x1bc>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000c2a:	4a66      	ldr	r2, [pc, #408]	; (8000dc4 <LCD_IO_Init+0x1bc>)
 8000c2c:	f043 0310 	orr.w	r3, r3, #16
 8000c30:	6013      	str	r3, [r2, #0]
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  GPIOX_ODR(LCD_BL) = LCD_BLON;
  GPIOX_MODER(MODE_OUT, LCD_BL);
  #endif

  GPIOX_SET(LCD_CS);                    /* CS = 1 */
 8000c32:	4b65      	ldr	r3, [pc, #404]	; (8000dc8 <LCD_IO_Init+0x1c0>)
 8000c34:	2202      	movs	r2, #2
 8000c36:	619a      	str	r2, [r3, #24]
  LCD_RS_DATA;                          /* RS = 1 */
 8000c38:	4b62      	ldr	r3, [pc, #392]	; (8000dc4 <LCD_IO_Init+0x1bc>)
 8000c3a:	2208      	movs	r2, #8
 8000c3c:	619a      	str	r2, [r3, #24]
  GPIOX_SET(LCD_WR);                    /* WR = 1 */
 8000c3e:	4b61      	ldr	r3, [pc, #388]	; (8000dc4 <LCD_IO_Init+0x1bc>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	619a      	str	r2, [r3, #24]
  #if GPIOX_PORTNUM(LCD_RD) >=  GPIOX_PORTNUM_A
  GPIOX_SET(LCD_RD);                    /* RD = 1 */
 8000c44:	4b61      	ldr	r3, [pc, #388]	; (8000dcc <LCD_IO_Init+0x1c4>)
 8000c46:	2208      	movs	r2, #8
 8000c48:	619a      	str	r2, [r3, #24]
  #endif

  GPIOX_MODER(MODE_OUT, LCD_CS);
 8000c4a:	4b5f      	ldr	r3, [pc, #380]	; (8000dc8 <LCD_IO_Init+0x1c0>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f023 030c 	bic.w	r3, r3, #12
 8000c52:	4a5d      	ldr	r2, [pc, #372]	; (8000dc8 <LCD_IO_Init+0x1c0>)
 8000c54:	f043 0304 	orr.w	r3, r3, #4
 8000c58:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_RS);
 8000c5a:	4b5a      	ldr	r3, [pc, #360]	; (8000dc4 <LCD_IO_Init+0x1bc>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000c62:	4a58      	ldr	r2, [pc, #352]	; (8000dc4 <LCD_IO_Init+0x1bc>)
 8000c64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c68:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_WR);
 8000c6a:	4b56      	ldr	r3, [pc, #344]	; (8000dc4 <LCD_IO_Init+0x1bc>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f023 0303 	bic.w	r3, r3, #3
 8000c72:	4a54      	ldr	r2, [pc, #336]	; (8000dc4 <LCD_IO_Init+0x1bc>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6013      	str	r3, [r2, #0]
  #if GPIOX_PORTNUM(LCD_RD) >=  GPIOX_PORTNUM_A
  GPIOX_MODER(MODE_OUT, LCD_RD);
 8000c7a:	4b54      	ldr	r3, [pc, #336]	; (8000dcc <LCD_IO_Init+0x1c4>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000c82:	4a52      	ldr	r2, [pc, #328]	; (8000dcc <LCD_IO_Init+0x1c4>)
 8000c84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c88:	6013      	str	r3, [r2, #0]
  #endif

  LCD_DIRWRITE;                         /* data pins set the output direction */
 8000c8a:	4b51      	ldr	r3, [pc, #324]	; (8000dd0 <LCD_IO_Init+0x1c8>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000c92:	4a4f      	ldr	r2, [pc, #316]	; (8000dd0 <LCD_IO_Init+0x1c8>)
 8000c94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c98:	6013      	str	r3, [r2, #0]
 8000c9a:	4b4e      	ldr	r3, [pc, #312]	; (8000dd4 <LCD_IO_Init+0x1cc>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000ca2:	4a4c      	ldr	r2, [pc, #304]	; (8000dd4 <LCD_IO_Init+0x1cc>)
 8000ca4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000ca8:	6013      	str	r3, [r2, #0]
 8000caa:	4b49      	ldr	r3, [pc, #292]	; (8000dd0 <LCD_IO_Init+0x1c8>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000cb2:	4a47      	ldr	r2, [pc, #284]	; (8000dd0 <LCD_IO_Init+0x1c8>)
 8000cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb8:	6013      	str	r3, [r2, #0]
 8000cba:	4b47      	ldr	r3, [pc, #284]	; (8000dd8 <LCD_IO_Init+0x1d0>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000cc2:	4a45      	ldr	r2, [pc, #276]	; (8000dd8 <LCD_IO_Init+0x1d0>)
 8000cc4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000cc8:	6013      	str	r3, [r2, #0]
 8000cca:	4b43      	ldr	r3, [pc, #268]	; (8000dd8 <LCD_IO_Init+0x1d0>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000cd2:	4a41      	ldr	r2, [pc, #260]	; (8000dd8 <LCD_IO_Init+0x1d0>)
 8000cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd8:	6013      	str	r3, [r2, #0]
 8000cda:	4b3f      	ldr	r3, [pc, #252]	; (8000dd8 <LCD_IO_Init+0x1d0>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000ce2:	4a3d      	ldr	r2, [pc, #244]	; (8000dd8 <LCD_IO_Init+0x1d0>)
 8000ce4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ce8:	6013      	str	r3, [r2, #0]
 8000cea:	4b38      	ldr	r3, [pc, #224]	; (8000dcc <LCD_IO_Init+0x1c4>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000cf2:	4a36      	ldr	r2, [pc, #216]	; (8000dcc <LCD_IO_Init+0x1c4>)
 8000cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cf8:	6013      	str	r3, [r2, #0]
 8000cfa:	4b35      	ldr	r3, [pc, #212]	; (8000dd0 <LCD_IO_Init+0x1c8>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000d02:	4a33      	ldr	r2, [pc, #204]	; (8000dd0 <LCD_IO_Init+0x1c8>)
 8000d04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d08:	6013      	str	r3, [r2, #0]

  /* GPIO speed */
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_CS);
 8000d0a:	4b2f      	ldr	r3, [pc, #188]	; (8000dc8 <LCD_IO_Init+0x1c0>)
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	4a2e      	ldr	r2, [pc, #184]	; (8000dc8 <LCD_IO_Init+0x1c0>)
 8000d10:	f043 030c 	orr.w	r3, r3, #12
 8000d14:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RS);
 8000d16:	4b2b      	ldr	r3, [pc, #172]	; (8000dc4 <LCD_IO_Init+0x1bc>)
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	4a2a      	ldr	r2, [pc, #168]	; (8000dc4 <LCD_IO_Init+0x1bc>)
 8000d1c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000d20:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_WR);
 8000d22:	4b28      	ldr	r3, [pc, #160]	; (8000dc4 <LCD_IO_Init+0x1bc>)
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	4a27      	ldr	r2, [pc, #156]	; (8000dc4 <LCD_IO_Init+0x1bc>)
 8000d28:	f043 0303 	orr.w	r3, r3, #3
 8000d2c:	6093      	str	r3, [r2, #8]
  #if GPIOX_PORTNUM(LCD_RD) >=  GPIOX_PORTNUM_A
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RD);
 8000d2e:	4b27      	ldr	r3, [pc, #156]	; (8000dcc <LCD_IO_Init+0x1c4>)
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	4a26      	ldr	r2, [pc, #152]	; (8000dcc <LCD_IO_Init+0x1c4>)
 8000d34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000d38:	6093      	str	r3, [r2, #8]
  #endif
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D0);
 8000d3a:	4b25      	ldr	r3, [pc, #148]	; (8000dd0 <LCD_IO_Init+0x1c8>)
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	4a24      	ldr	r2, [pc, #144]	; (8000dd0 <LCD_IO_Init+0x1c8>)
 8000d40:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8000d44:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D1);
 8000d46:	4b23      	ldr	r3, [pc, #140]	; (8000dd4 <LCD_IO_Init+0x1cc>)
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	4a22      	ldr	r2, [pc, #136]	; (8000dd4 <LCD_IO_Init+0x1cc>)
 8000d4c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000d50:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D2);
 8000d52:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <LCD_IO_Init+0x1c8>)
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	4a1e      	ldr	r2, [pc, #120]	; (8000dd0 <LCD_IO_Init+0x1c8>)
 8000d58:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8000d5c:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D3);
 8000d5e:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <LCD_IO_Init+0x1d0>)
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	4a1d      	ldr	r2, [pc, #116]	; (8000dd8 <LCD_IO_Init+0x1d0>)
 8000d64:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 8000d68:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D4);
 8000d6a:	4b1b      	ldr	r3, [pc, #108]	; (8000dd8 <LCD_IO_Init+0x1d0>)
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	4a1a      	ldr	r2, [pc, #104]	; (8000dd8 <LCD_IO_Init+0x1d0>)
 8000d70:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8000d74:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D5);
 8000d76:	4b18      	ldr	r3, [pc, #96]	; (8000dd8 <LCD_IO_Init+0x1d0>)
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	4a17      	ldr	r2, [pc, #92]	; (8000dd8 <LCD_IO_Init+0x1d0>)
 8000d7c:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8000d80:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D6);
 8000d82:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <LCD_IO_Init+0x1c4>)
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	4a11      	ldr	r2, [pc, #68]	; (8000dcc <LCD_IO_Init+0x1c4>)
 8000d88:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000d8c:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D7);
 8000d8e:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <LCD_IO_Init+0x1c8>)
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	4a0f      	ldr	r2, [pc, #60]	; (8000dd0 <LCD_IO_Init+0x1c8>)
 8000d94:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8000d98:	6093      	str	r3, [r2, #8]

  /* Reset the LCD */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  LCD_Delay(1);
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	f7ff ff1e 	bl	8000bdc <LCD_Delay>
  LCD_RST_ON;                           /* RST = 0 */
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <LCD_IO_Init+0x1bc>)
 8000da2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000da6:	619a      	str	r2, [r3, #24]
  LCD_Delay(1);
 8000da8:	2001      	movs	r0, #1
 8000daa:	f7ff ff17 	bl	8000bdc <LCD_Delay>
  LCD_RST_OFF;                          /* RST = 1 */
 8000dae:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <LCD_IO_Init+0x1bc>)
 8000db0:	2204      	movs	r2, #4
 8000db2:	619a      	str	r2, [r3, #24]
  #endif
  LCD_Delay(1);
 8000db4:	2001      	movs	r0, #1
 8000db6:	f7ff ff11 	bl	8000bdc <LCD_Delay>
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	58024400 	.word	0x58024400
 8000dc4:	58020800 	.word	0x58020800
 8000dc8:	58020400 	.word	0x58020400
 8000dcc:	58020000 	.word	0x58020000
 8000dd0:	58021800 	.word	0x58021800
 8000dd4:	58020c00 	.word	0x58020c00
 8000dd8:	58021000 	.word	0x58021000

08000ddc <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
  LCD_CS_ON;
 8000de6:	4b4b      	ldr	r3, [pc, #300]	; (8000f14 <LCD_IO_WriteCmd8+0x138>)
 8000de8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dec:	619a      	str	r2, [r3, #24]
  LCD_CMD8_WRITE(Cmd);
 8000dee:	4b4a      	ldr	r3, [pc, #296]	; (8000f18 <LCD_IO_WriteCmd8+0x13c>)
 8000df0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000df4:	619a      	str	r2, [r3, #24]
 8000df6:	4a49      	ldr	r2, [pc, #292]	; (8000f1c <LCD_IO_WriteCmd8+0x140>)
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	7013      	strb	r3, [r2, #0]
 8000dfc:	4b47      	ldr	r3, [pc, #284]	; (8000f1c <LCD_IO_WriteCmd8+0x140>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	f003 0301 	and.w	r3, r3, #1
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d004      	beq.n	8000e12 <LCD_IO_WriteCmd8+0x36>
 8000e08:	4b45      	ldr	r3, [pc, #276]	; (8000f20 <LCD_IO_WriteCmd8+0x144>)
 8000e0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e0e:	619a      	str	r2, [r3, #24]
 8000e10:	e003      	b.n	8000e1a <LCD_IO_WriteCmd8+0x3e>
 8000e12:	4b43      	ldr	r3, [pc, #268]	; (8000f20 <LCD_IO_WriteCmd8+0x144>)
 8000e14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000e18:	619a      	str	r2, [r3, #24]
 8000e1a:	4b40      	ldr	r3, [pc, #256]	; (8000f1c <LCD_IO_WriteCmd8+0x140>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d004      	beq.n	8000e30 <LCD_IO_WriteCmd8+0x54>
 8000e26:	4b3f      	ldr	r3, [pc, #252]	; (8000f24 <LCD_IO_WriteCmd8+0x148>)
 8000e28:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e2c:	619a      	str	r2, [r3, #24]
 8000e2e:	e003      	b.n	8000e38 <LCD_IO_WriteCmd8+0x5c>
 8000e30:	4b3c      	ldr	r3, [pc, #240]	; (8000f24 <LCD_IO_WriteCmd8+0x148>)
 8000e32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000e36:	619a      	str	r2, [r3, #24]
 8000e38:	4b38      	ldr	r3, [pc, #224]	; (8000f1c <LCD_IO_WriteCmd8+0x140>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	f003 0304 	and.w	r3, r3, #4
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d004      	beq.n	8000e4e <LCD_IO_WriteCmd8+0x72>
 8000e44:	4b36      	ldr	r3, [pc, #216]	; (8000f20 <LCD_IO_WriteCmd8+0x144>)
 8000e46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e4a:	619a      	str	r2, [r3, #24]
 8000e4c:	e003      	b.n	8000e56 <LCD_IO_WriteCmd8+0x7a>
 8000e4e:	4b34      	ldr	r3, [pc, #208]	; (8000f20 <LCD_IO_WriteCmd8+0x144>)
 8000e50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e54:	619a      	str	r2, [r3, #24]
 8000e56:	4b31      	ldr	r3, [pc, #196]	; (8000f1c <LCD_IO_WriteCmd8+0x140>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	f003 0308 	and.w	r3, r3, #8
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d004      	beq.n	8000e6c <LCD_IO_WriteCmd8+0x90>
 8000e62:	4b31      	ldr	r3, [pc, #196]	; (8000f28 <LCD_IO_WriteCmd8+0x14c>)
 8000e64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e68:	619a      	str	r2, [r3, #24]
 8000e6a:	e003      	b.n	8000e74 <LCD_IO_WriteCmd8+0x98>
 8000e6c:	4b2e      	ldr	r3, [pc, #184]	; (8000f28 <LCD_IO_WriteCmd8+0x14c>)
 8000e6e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000e72:	619a      	str	r2, [r3, #24]
 8000e74:	4b29      	ldr	r3, [pc, #164]	; (8000f1c <LCD_IO_WriteCmd8+0x140>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	f003 0310 	and.w	r3, r3, #16
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d004      	beq.n	8000e8a <LCD_IO_WriteCmd8+0xae>
 8000e80:	4b29      	ldr	r3, [pc, #164]	; (8000f28 <LCD_IO_WriteCmd8+0x14c>)
 8000e82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e86:	619a      	str	r2, [r3, #24]
 8000e88:	e003      	b.n	8000e92 <LCD_IO_WriteCmd8+0xb6>
 8000e8a:	4b27      	ldr	r3, [pc, #156]	; (8000f28 <LCD_IO_WriteCmd8+0x14c>)
 8000e8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e90:	619a      	str	r2, [r3, #24]
 8000e92:	4b22      	ldr	r3, [pc, #136]	; (8000f1c <LCD_IO_WriteCmd8+0x140>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	f003 0320 	and.w	r3, r3, #32
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d004      	beq.n	8000ea8 <LCD_IO_WriteCmd8+0xcc>
 8000e9e:	4b22      	ldr	r3, [pc, #136]	; (8000f28 <LCD_IO_WriteCmd8+0x14c>)
 8000ea0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ea4:	619a      	str	r2, [r3, #24]
 8000ea6:	e003      	b.n	8000eb0 <LCD_IO_WriteCmd8+0xd4>
 8000ea8:	4b1f      	ldr	r3, [pc, #124]	; (8000f28 <LCD_IO_WriteCmd8+0x14c>)
 8000eaa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000eae:	619a      	str	r2, [r3, #24]
 8000eb0:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <LCD_IO_WriteCmd8+0x140>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d004      	beq.n	8000ec6 <LCD_IO_WriteCmd8+0xea>
 8000ebc:	4b1b      	ldr	r3, [pc, #108]	; (8000f2c <LCD_IO_WriteCmd8+0x150>)
 8000ebe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ec2:	619a      	str	r2, [r3, #24]
 8000ec4:	e003      	b.n	8000ece <LCD_IO_WriteCmd8+0xf2>
 8000ec6:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <LCD_IO_WriteCmd8+0x150>)
 8000ec8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000ecc:	619a      	str	r2, [r3, #24]
 8000ece:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <LCD_IO_WriteCmd8+0x140>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	b25b      	sxtb	r3, r3
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	da04      	bge.n	8000ee2 <LCD_IO_WriteCmd8+0x106>
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <LCD_IO_WriteCmd8+0x144>)
 8000eda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ede:	619a      	str	r2, [r3, #24]
 8000ee0:	e003      	b.n	8000eea <LCD_IO_WriteCmd8+0x10e>
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <LCD_IO_WriteCmd8+0x144>)
 8000ee4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ee8:	619a      	str	r2, [r3, #24]
 8000eea:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <LCD_IO_WriteCmd8+0x13c>)
 8000eec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ef0:	619a      	str	r2, [r3, #24]
 8000ef2:	2008      	movs	r0, #8
 8000ef4:	f7ff fe61 	bl	8000bba <LCD_IO_Delay>
 8000ef8:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <LCD_IO_WriteCmd8+0x13c>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	619a      	str	r2, [r3, #24]
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <LCD_IO_WriteCmd8+0x13c>)
 8000f00:	2208      	movs	r2, #8
 8000f02:	619a      	str	r2, [r3, #24]
  LCD_CS_OFF;
 8000f04:	4b03      	ldr	r3, [pc, #12]	; (8000f14 <LCD_IO_WriteCmd8+0x138>)
 8000f06:	2202      	movs	r2, #2
 8000f08:	619a      	str	r2, [r3, #24]
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	58020400 	.word	0x58020400
 8000f18:	58020800 	.word	0x58020800
 8000f1c:	24000382 	.word	0x24000382
 8000f20:	58021800 	.word	0x58021800
 8000f24:	58020c00 	.word	0x58020c00
 8000f28:	58021000 	.word	0x58021000
 8000f2c:	58020000 	.word	0x58020000

08000f30 <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
  LCD_CS_ON;
 8000f3a:	4b47      	ldr	r3, [pc, #284]	; (8001058 <LCD_IO_WriteData8+0x128>)
 8000f3c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f40:	619a      	str	r2, [r3, #24]
  LCD_DATA8_WRITE(Data);
 8000f42:	4a46      	ldr	r2, [pc, #280]	; (800105c <LCD_IO_WriteData8+0x12c>)
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	7013      	strb	r3, [r2, #0]
 8000f48:	4b44      	ldr	r3, [pc, #272]	; (800105c <LCD_IO_WriteData8+0x12c>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d004      	beq.n	8000f5e <LCD_IO_WriteData8+0x2e>
 8000f54:	4b42      	ldr	r3, [pc, #264]	; (8001060 <LCD_IO_WriteData8+0x130>)
 8000f56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f5a:	619a      	str	r2, [r3, #24]
 8000f5c:	e003      	b.n	8000f66 <LCD_IO_WriteData8+0x36>
 8000f5e:	4b40      	ldr	r3, [pc, #256]	; (8001060 <LCD_IO_WriteData8+0x130>)
 8000f60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f64:	619a      	str	r2, [r3, #24]
 8000f66:	4b3d      	ldr	r3, [pc, #244]	; (800105c <LCD_IO_WriteData8+0x12c>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d004      	beq.n	8000f7c <LCD_IO_WriteData8+0x4c>
 8000f72:	4b3c      	ldr	r3, [pc, #240]	; (8001064 <LCD_IO_WriteData8+0x134>)
 8000f74:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f78:	619a      	str	r2, [r3, #24]
 8000f7a:	e003      	b.n	8000f84 <LCD_IO_WriteData8+0x54>
 8000f7c:	4b39      	ldr	r3, [pc, #228]	; (8001064 <LCD_IO_WriteData8+0x134>)
 8000f7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000f82:	619a      	str	r2, [r3, #24]
 8000f84:	4b35      	ldr	r3, [pc, #212]	; (800105c <LCD_IO_WriteData8+0x12c>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	f003 0304 	and.w	r3, r3, #4
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d004      	beq.n	8000f9a <LCD_IO_WriteData8+0x6a>
 8000f90:	4b33      	ldr	r3, [pc, #204]	; (8001060 <LCD_IO_WriteData8+0x130>)
 8000f92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f96:	619a      	str	r2, [r3, #24]
 8000f98:	e003      	b.n	8000fa2 <LCD_IO_WriteData8+0x72>
 8000f9a:	4b31      	ldr	r3, [pc, #196]	; (8001060 <LCD_IO_WriteData8+0x130>)
 8000f9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fa0:	619a      	str	r2, [r3, #24]
 8000fa2:	4b2e      	ldr	r3, [pc, #184]	; (800105c <LCD_IO_WriteData8+0x12c>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	f003 0308 	and.w	r3, r3, #8
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d004      	beq.n	8000fb8 <LCD_IO_WriteData8+0x88>
 8000fae:	4b2e      	ldr	r3, [pc, #184]	; (8001068 <LCD_IO_WriteData8+0x138>)
 8000fb0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fb4:	619a      	str	r2, [r3, #24]
 8000fb6:	e003      	b.n	8000fc0 <LCD_IO_WriteData8+0x90>
 8000fb8:	4b2b      	ldr	r3, [pc, #172]	; (8001068 <LCD_IO_WriteData8+0x138>)
 8000fba:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000fbe:	619a      	str	r2, [r3, #24]
 8000fc0:	4b26      	ldr	r3, [pc, #152]	; (800105c <LCD_IO_WriteData8+0x12c>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	f003 0310 	and.w	r3, r3, #16
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d004      	beq.n	8000fd6 <LCD_IO_WriteData8+0xa6>
 8000fcc:	4b26      	ldr	r3, [pc, #152]	; (8001068 <LCD_IO_WriteData8+0x138>)
 8000fce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fd2:	619a      	str	r2, [r3, #24]
 8000fd4:	e003      	b.n	8000fde <LCD_IO_WriteData8+0xae>
 8000fd6:	4b24      	ldr	r3, [pc, #144]	; (8001068 <LCD_IO_WriteData8+0x138>)
 8000fd8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fdc:	619a      	str	r2, [r3, #24]
 8000fde:	4b1f      	ldr	r3, [pc, #124]	; (800105c <LCD_IO_WriteData8+0x12c>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	f003 0320 	and.w	r3, r3, #32
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d004      	beq.n	8000ff4 <LCD_IO_WriteData8+0xc4>
 8000fea:	4b1f      	ldr	r3, [pc, #124]	; (8001068 <LCD_IO_WriteData8+0x138>)
 8000fec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ff0:	619a      	str	r2, [r3, #24]
 8000ff2:	e003      	b.n	8000ffc <LCD_IO_WriteData8+0xcc>
 8000ff4:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <LCD_IO_WriteData8+0x138>)
 8000ff6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ffa:	619a      	str	r2, [r3, #24]
 8000ffc:	4b17      	ldr	r3, [pc, #92]	; (800105c <LCD_IO_WriteData8+0x12c>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001004:	2b00      	cmp	r3, #0
 8001006:	d004      	beq.n	8001012 <LCD_IO_WriteData8+0xe2>
 8001008:	4b18      	ldr	r3, [pc, #96]	; (800106c <LCD_IO_WriteData8+0x13c>)
 800100a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800100e:	619a      	str	r2, [r3, #24]
 8001010:	e003      	b.n	800101a <LCD_IO_WriteData8+0xea>
 8001012:	4b16      	ldr	r3, [pc, #88]	; (800106c <LCD_IO_WriteData8+0x13c>)
 8001014:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001018:	619a      	str	r2, [r3, #24]
 800101a:	4b10      	ldr	r3, [pc, #64]	; (800105c <LCD_IO_WriteData8+0x12c>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	b25b      	sxtb	r3, r3
 8001020:	2b00      	cmp	r3, #0
 8001022:	da04      	bge.n	800102e <LCD_IO_WriteData8+0xfe>
 8001024:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <LCD_IO_WriteData8+0x130>)
 8001026:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800102a:	619a      	str	r2, [r3, #24]
 800102c:	e003      	b.n	8001036 <LCD_IO_WriteData8+0x106>
 800102e:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <LCD_IO_WriteData8+0x130>)
 8001030:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001034:	619a      	str	r2, [r3, #24]
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <LCD_IO_WriteData8+0x140>)
 8001038:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800103c:	619a      	str	r2, [r3, #24]
 800103e:	2008      	movs	r0, #8
 8001040:	f7ff fdbb 	bl	8000bba <LCD_IO_Delay>
 8001044:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <LCD_IO_WriteData8+0x140>)
 8001046:	2201      	movs	r2, #1
 8001048:	619a      	str	r2, [r3, #24]
  LCD_CS_OFF;
 800104a:	4b03      	ldr	r3, [pc, #12]	; (8001058 <LCD_IO_WriteData8+0x128>)
 800104c:	2202      	movs	r2, #2
 800104e:	619a      	str	r2, [r3, #24]
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	58020400 	.word	0x58020400
 800105c:	24000382 	.word	0x24000382
 8001060:	58021800 	.word	0x58021800
 8001064:	58020c00 	.word	0x58020c00
 8001068:	58021000 	.word	0x58021000
 800106c:	58020000 	.word	0x58020000
 8001070:	58020800 	.word	0x58020800

08001074 <LCD_IO_WriteData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteData16(uint16_t Data)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	80fb      	strh	r3, [r7, #6]
  LCD_CS_ON;
 800107e:	4b8b      	ldr	r3, [pc, #556]	; (80012ac <LCD_IO_WriteData16+0x238>)
 8001080:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001084:	619a      	str	r2, [r3, #24]
  LCD_DATA16_WRITE(Data);
 8001086:	88fb      	ldrh	r3, [r7, #6]
 8001088:	0a1b      	lsrs	r3, r3, #8
 800108a:	b29b      	uxth	r3, r3
 800108c:	b2da      	uxtb	r2, r3
 800108e:	4b88      	ldr	r3, [pc, #544]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 8001090:	701a      	strb	r2, [r3, #0]
 8001092:	4b87      	ldr	r3, [pc, #540]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	2b00      	cmp	r3, #0
 800109c:	d004      	beq.n	80010a8 <LCD_IO_WriteData16+0x34>
 800109e:	4b85      	ldr	r3, [pc, #532]	; (80012b4 <LCD_IO_WriteData16+0x240>)
 80010a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010a4:	619a      	str	r2, [r3, #24]
 80010a6:	e003      	b.n	80010b0 <LCD_IO_WriteData16+0x3c>
 80010a8:	4b82      	ldr	r3, [pc, #520]	; (80012b4 <LCD_IO_WriteData16+0x240>)
 80010aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80010ae:	619a      	str	r2, [r3, #24]
 80010b0:	4b7f      	ldr	r3, [pc, #508]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	f003 0302 	and.w	r3, r3, #2
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d004      	beq.n	80010c6 <LCD_IO_WriteData16+0x52>
 80010bc:	4b7e      	ldr	r3, [pc, #504]	; (80012b8 <LCD_IO_WriteData16+0x244>)
 80010be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010c2:	619a      	str	r2, [r3, #24]
 80010c4:	e003      	b.n	80010ce <LCD_IO_WriteData16+0x5a>
 80010c6:	4b7c      	ldr	r3, [pc, #496]	; (80012b8 <LCD_IO_WriteData16+0x244>)
 80010c8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80010cc:	619a      	str	r2, [r3, #24]
 80010ce:	4b78      	ldr	r3, [pc, #480]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	f003 0304 	and.w	r3, r3, #4
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d004      	beq.n	80010e4 <LCD_IO_WriteData16+0x70>
 80010da:	4b76      	ldr	r3, [pc, #472]	; (80012b4 <LCD_IO_WriteData16+0x240>)
 80010dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010e0:	619a      	str	r2, [r3, #24]
 80010e2:	e003      	b.n	80010ec <LCD_IO_WriteData16+0x78>
 80010e4:	4b73      	ldr	r3, [pc, #460]	; (80012b4 <LCD_IO_WriteData16+0x240>)
 80010e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010ea:	619a      	str	r2, [r3, #24]
 80010ec:	4b70      	ldr	r3, [pc, #448]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	f003 0308 	and.w	r3, r3, #8
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d004      	beq.n	8001102 <LCD_IO_WriteData16+0x8e>
 80010f8:	4b70      	ldr	r3, [pc, #448]	; (80012bc <LCD_IO_WriteData16+0x248>)
 80010fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010fe:	619a      	str	r2, [r3, #24]
 8001100:	e003      	b.n	800110a <LCD_IO_WriteData16+0x96>
 8001102:	4b6e      	ldr	r3, [pc, #440]	; (80012bc <LCD_IO_WriteData16+0x248>)
 8001104:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001108:	619a      	str	r2, [r3, #24]
 800110a:	4b69      	ldr	r3, [pc, #420]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	f003 0310 	and.w	r3, r3, #16
 8001112:	2b00      	cmp	r3, #0
 8001114:	d004      	beq.n	8001120 <LCD_IO_WriteData16+0xac>
 8001116:	4b69      	ldr	r3, [pc, #420]	; (80012bc <LCD_IO_WriteData16+0x248>)
 8001118:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800111c:	619a      	str	r2, [r3, #24]
 800111e:	e003      	b.n	8001128 <LCD_IO_WriteData16+0xb4>
 8001120:	4b66      	ldr	r3, [pc, #408]	; (80012bc <LCD_IO_WriteData16+0x248>)
 8001122:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001126:	619a      	str	r2, [r3, #24]
 8001128:	4b61      	ldr	r3, [pc, #388]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	f003 0320 	and.w	r3, r3, #32
 8001130:	2b00      	cmp	r3, #0
 8001132:	d004      	beq.n	800113e <LCD_IO_WriteData16+0xca>
 8001134:	4b61      	ldr	r3, [pc, #388]	; (80012bc <LCD_IO_WriteData16+0x248>)
 8001136:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800113a:	619a      	str	r2, [r3, #24]
 800113c:	e003      	b.n	8001146 <LCD_IO_WriteData16+0xd2>
 800113e:	4b5f      	ldr	r3, [pc, #380]	; (80012bc <LCD_IO_WriteData16+0x248>)
 8001140:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001144:	619a      	str	r2, [r3, #24]
 8001146:	4b5a      	ldr	r3, [pc, #360]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800114e:	2b00      	cmp	r3, #0
 8001150:	d004      	beq.n	800115c <LCD_IO_WriteData16+0xe8>
 8001152:	4b5b      	ldr	r3, [pc, #364]	; (80012c0 <LCD_IO_WriteData16+0x24c>)
 8001154:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001158:	619a      	str	r2, [r3, #24]
 800115a:	e003      	b.n	8001164 <LCD_IO_WriteData16+0xf0>
 800115c:	4b58      	ldr	r3, [pc, #352]	; (80012c0 <LCD_IO_WriteData16+0x24c>)
 800115e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001162:	619a      	str	r2, [r3, #24]
 8001164:	4b52      	ldr	r3, [pc, #328]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	b25b      	sxtb	r3, r3
 800116a:	2b00      	cmp	r3, #0
 800116c:	da04      	bge.n	8001178 <LCD_IO_WriteData16+0x104>
 800116e:	4b51      	ldr	r3, [pc, #324]	; (80012b4 <LCD_IO_WriteData16+0x240>)
 8001170:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001174:	619a      	str	r2, [r3, #24]
 8001176:	e003      	b.n	8001180 <LCD_IO_WriteData16+0x10c>
 8001178:	4b4e      	ldr	r3, [pc, #312]	; (80012b4 <LCD_IO_WriteData16+0x240>)
 800117a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800117e:	619a      	str	r2, [r3, #24]
 8001180:	4b50      	ldr	r3, [pc, #320]	; (80012c4 <LCD_IO_WriteData16+0x250>)
 8001182:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001186:	619a      	str	r2, [r3, #24]
 8001188:	2008      	movs	r0, #8
 800118a:	f7ff fd16 	bl	8000bba <LCD_IO_Delay>
 800118e:	4b4d      	ldr	r3, [pc, #308]	; (80012c4 <LCD_IO_WriteData16+0x250>)
 8001190:	2201      	movs	r2, #1
 8001192:	619a      	str	r2, [r3, #24]
 8001194:	88fb      	ldrh	r3, [r7, #6]
 8001196:	b2da      	uxtb	r2, r3
 8001198:	4b45      	ldr	r3, [pc, #276]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 800119a:	701a      	strb	r2, [r3, #0]
 800119c:	4b44      	ldr	r3, [pc, #272]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d004      	beq.n	80011b2 <LCD_IO_WriteData16+0x13e>
 80011a8:	4b42      	ldr	r3, [pc, #264]	; (80012b4 <LCD_IO_WriteData16+0x240>)
 80011aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011ae:	619a      	str	r2, [r3, #24]
 80011b0:	e003      	b.n	80011ba <LCD_IO_WriteData16+0x146>
 80011b2:	4b40      	ldr	r3, [pc, #256]	; (80012b4 <LCD_IO_WriteData16+0x240>)
 80011b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80011b8:	619a      	str	r2, [r3, #24]
 80011ba:	4b3d      	ldr	r3, [pc, #244]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d004      	beq.n	80011d0 <LCD_IO_WriteData16+0x15c>
 80011c6:	4b3c      	ldr	r3, [pc, #240]	; (80012b8 <LCD_IO_WriteData16+0x244>)
 80011c8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011cc:	619a      	str	r2, [r3, #24]
 80011ce:	e003      	b.n	80011d8 <LCD_IO_WriteData16+0x164>
 80011d0:	4b39      	ldr	r3, [pc, #228]	; (80012b8 <LCD_IO_WriteData16+0x244>)
 80011d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80011d6:	619a      	str	r2, [r3, #24]
 80011d8:	4b35      	ldr	r3, [pc, #212]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	f003 0304 	and.w	r3, r3, #4
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d004      	beq.n	80011ee <LCD_IO_WriteData16+0x17a>
 80011e4:	4b33      	ldr	r3, [pc, #204]	; (80012b4 <LCD_IO_WriteData16+0x240>)
 80011e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011ea:	619a      	str	r2, [r3, #24]
 80011ec:	e003      	b.n	80011f6 <LCD_IO_WriteData16+0x182>
 80011ee:	4b31      	ldr	r3, [pc, #196]	; (80012b4 <LCD_IO_WriteData16+0x240>)
 80011f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011f4:	619a      	str	r2, [r3, #24]
 80011f6:	4b2e      	ldr	r3, [pc, #184]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	f003 0308 	and.w	r3, r3, #8
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d004      	beq.n	800120c <LCD_IO_WriteData16+0x198>
 8001202:	4b2e      	ldr	r3, [pc, #184]	; (80012bc <LCD_IO_WriteData16+0x248>)
 8001204:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001208:	619a      	str	r2, [r3, #24]
 800120a:	e003      	b.n	8001214 <LCD_IO_WriteData16+0x1a0>
 800120c:	4b2b      	ldr	r3, [pc, #172]	; (80012bc <LCD_IO_WriteData16+0x248>)
 800120e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001212:	619a      	str	r2, [r3, #24]
 8001214:	4b26      	ldr	r3, [pc, #152]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	f003 0310 	and.w	r3, r3, #16
 800121c:	2b00      	cmp	r3, #0
 800121e:	d004      	beq.n	800122a <LCD_IO_WriteData16+0x1b6>
 8001220:	4b26      	ldr	r3, [pc, #152]	; (80012bc <LCD_IO_WriteData16+0x248>)
 8001222:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001226:	619a      	str	r2, [r3, #24]
 8001228:	e003      	b.n	8001232 <LCD_IO_WriteData16+0x1be>
 800122a:	4b24      	ldr	r3, [pc, #144]	; (80012bc <LCD_IO_WriteData16+0x248>)
 800122c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001230:	619a      	str	r2, [r3, #24]
 8001232:	4b1f      	ldr	r3, [pc, #124]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	f003 0320 	and.w	r3, r3, #32
 800123a:	2b00      	cmp	r3, #0
 800123c:	d004      	beq.n	8001248 <LCD_IO_WriteData16+0x1d4>
 800123e:	4b1f      	ldr	r3, [pc, #124]	; (80012bc <LCD_IO_WriteData16+0x248>)
 8001240:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001244:	619a      	str	r2, [r3, #24]
 8001246:	e003      	b.n	8001250 <LCD_IO_WriteData16+0x1dc>
 8001248:	4b1c      	ldr	r3, [pc, #112]	; (80012bc <LCD_IO_WriteData16+0x248>)
 800124a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800124e:	619a      	str	r2, [r3, #24]
 8001250:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001258:	2b00      	cmp	r3, #0
 800125a:	d004      	beq.n	8001266 <LCD_IO_WriteData16+0x1f2>
 800125c:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <LCD_IO_WriteData16+0x24c>)
 800125e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001262:	619a      	str	r2, [r3, #24]
 8001264:	e003      	b.n	800126e <LCD_IO_WriteData16+0x1fa>
 8001266:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <LCD_IO_WriteData16+0x24c>)
 8001268:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800126c:	619a      	str	r2, [r3, #24]
 800126e:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <LCD_IO_WriteData16+0x23c>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	b25b      	sxtb	r3, r3
 8001274:	2b00      	cmp	r3, #0
 8001276:	da04      	bge.n	8001282 <LCD_IO_WriteData16+0x20e>
 8001278:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <LCD_IO_WriteData16+0x240>)
 800127a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800127e:	619a      	str	r2, [r3, #24]
 8001280:	e003      	b.n	800128a <LCD_IO_WriteData16+0x216>
 8001282:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <LCD_IO_WriteData16+0x240>)
 8001284:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001288:	619a      	str	r2, [r3, #24]
 800128a:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <LCD_IO_WriteData16+0x250>)
 800128c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001290:	619a      	str	r2, [r3, #24]
 8001292:	2008      	movs	r0, #8
 8001294:	f7ff fc91 	bl	8000bba <LCD_IO_Delay>
 8001298:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <LCD_IO_WriteData16+0x250>)
 800129a:	2201      	movs	r2, #1
 800129c:	619a      	str	r2, [r3, #24]
  LCD_CS_OFF;
 800129e:	4b03      	ldr	r3, [pc, #12]	; (80012ac <LCD_IO_WriteData16+0x238>)
 80012a0:	2202      	movs	r2, #2
 80012a2:	619a      	str	r2, [r3, #24]
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	58020400 	.word	0x58020400
 80012b0:	24000382 	.word	0x24000382
 80012b4:	58021800 	.word	0x58021800
 80012b8:	58020c00 	.word	0x58020c00
 80012bc:	58021000 	.word	0x58021000
 80012c0:	58020000 	.word	0x58020000
 80012c4:	58020800 	.word	0x58020800

080012c8 <LCD_IO_WriteCmd8DataFill16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	603a      	str	r2, [r7, #0]
 80012d2:	71fb      	strb	r3, [r7, #7]
 80012d4:	460b      	mov	r3, r1
 80012d6:	80bb      	strh	r3, [r7, #4]
  LCD_CS_ON;
 80012d8:	4b9a      	ldr	r3, [pc, #616]	; (8001544 <LCD_IO_WriteCmd8DataFill16+0x27c>)
 80012da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012de:	619a      	str	r2, [r3, #24]
  LCD_CMD8_WRITE(Cmd);
 80012e0:	4b99      	ldr	r3, [pc, #612]	; (8001548 <LCD_IO_WriteCmd8DataFill16+0x280>)
 80012e2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80012e6:	619a      	str	r2, [r3, #24]
 80012e8:	4a98      	ldr	r2, [pc, #608]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	7013      	strb	r3, [r2, #0]
 80012ee:	4b97      	ldr	r3, [pc, #604]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d004      	beq.n	8001304 <LCD_IO_WriteCmd8DataFill16+0x3c>
 80012fa:	4b95      	ldr	r3, [pc, #596]	; (8001550 <LCD_IO_WriteCmd8DataFill16+0x288>)
 80012fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001300:	619a      	str	r2, [r3, #24]
 8001302:	e003      	b.n	800130c <LCD_IO_WriteCmd8DataFill16+0x44>
 8001304:	4b92      	ldr	r3, [pc, #584]	; (8001550 <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001306:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800130a:	619a      	str	r2, [r3, #24]
 800130c:	4b8f      	ldr	r3, [pc, #572]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d004      	beq.n	8001322 <LCD_IO_WriteCmd8DataFill16+0x5a>
 8001318:	4b8e      	ldr	r3, [pc, #568]	; (8001554 <LCD_IO_WriteCmd8DataFill16+0x28c>)
 800131a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800131e:	619a      	str	r2, [r3, #24]
 8001320:	e003      	b.n	800132a <LCD_IO_WriteCmd8DataFill16+0x62>
 8001322:	4b8c      	ldr	r3, [pc, #560]	; (8001554 <LCD_IO_WriteCmd8DataFill16+0x28c>)
 8001324:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001328:	619a      	str	r2, [r3, #24]
 800132a:	4b88      	ldr	r3, [pc, #544]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	f003 0304 	and.w	r3, r3, #4
 8001332:	2b00      	cmp	r3, #0
 8001334:	d004      	beq.n	8001340 <LCD_IO_WriteCmd8DataFill16+0x78>
 8001336:	4b86      	ldr	r3, [pc, #536]	; (8001550 <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001338:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800133c:	619a      	str	r2, [r3, #24]
 800133e:	e003      	b.n	8001348 <LCD_IO_WriteCmd8DataFill16+0x80>
 8001340:	4b83      	ldr	r3, [pc, #524]	; (8001550 <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001342:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001346:	619a      	str	r2, [r3, #24]
 8001348:	4b80      	ldr	r3, [pc, #512]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	f003 0308 	and.w	r3, r3, #8
 8001350:	2b00      	cmp	r3, #0
 8001352:	d004      	beq.n	800135e <LCD_IO_WriteCmd8DataFill16+0x96>
 8001354:	4b80      	ldr	r3, [pc, #512]	; (8001558 <LCD_IO_WriteCmd8DataFill16+0x290>)
 8001356:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800135a:	619a      	str	r2, [r3, #24]
 800135c:	e003      	b.n	8001366 <LCD_IO_WriteCmd8DataFill16+0x9e>
 800135e:	4b7e      	ldr	r3, [pc, #504]	; (8001558 <LCD_IO_WriteCmd8DataFill16+0x290>)
 8001360:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001364:	619a      	str	r2, [r3, #24]
 8001366:	4b79      	ldr	r3, [pc, #484]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	f003 0310 	and.w	r3, r3, #16
 800136e:	2b00      	cmp	r3, #0
 8001370:	d004      	beq.n	800137c <LCD_IO_WriteCmd8DataFill16+0xb4>
 8001372:	4b79      	ldr	r3, [pc, #484]	; (8001558 <LCD_IO_WriteCmd8DataFill16+0x290>)
 8001374:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001378:	619a      	str	r2, [r3, #24]
 800137a:	e003      	b.n	8001384 <LCD_IO_WriteCmd8DataFill16+0xbc>
 800137c:	4b76      	ldr	r3, [pc, #472]	; (8001558 <LCD_IO_WriteCmd8DataFill16+0x290>)
 800137e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001382:	619a      	str	r2, [r3, #24]
 8001384:	4b71      	ldr	r3, [pc, #452]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	f003 0320 	and.w	r3, r3, #32
 800138c:	2b00      	cmp	r3, #0
 800138e:	d004      	beq.n	800139a <LCD_IO_WriteCmd8DataFill16+0xd2>
 8001390:	4b71      	ldr	r3, [pc, #452]	; (8001558 <LCD_IO_WriteCmd8DataFill16+0x290>)
 8001392:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001396:	619a      	str	r2, [r3, #24]
 8001398:	e003      	b.n	80013a2 <LCD_IO_WriteCmd8DataFill16+0xda>
 800139a:	4b6f      	ldr	r3, [pc, #444]	; (8001558 <LCD_IO_WriteCmd8DataFill16+0x290>)
 800139c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013a0:	619a      	str	r2, [r3, #24]
 80013a2:	4b6a      	ldr	r3, [pc, #424]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d004      	beq.n	80013b8 <LCD_IO_WriteCmd8DataFill16+0xf0>
 80013ae:	4b6b      	ldr	r3, [pc, #428]	; (800155c <LCD_IO_WriteCmd8DataFill16+0x294>)
 80013b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013b4:	619a      	str	r2, [r3, #24]
 80013b6:	e003      	b.n	80013c0 <LCD_IO_WriteCmd8DataFill16+0xf8>
 80013b8:	4b68      	ldr	r3, [pc, #416]	; (800155c <LCD_IO_WriteCmd8DataFill16+0x294>)
 80013ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80013be:	619a      	str	r2, [r3, #24]
 80013c0:	4b62      	ldr	r3, [pc, #392]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	b25b      	sxtb	r3, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	da04      	bge.n	80013d4 <LCD_IO_WriteCmd8DataFill16+0x10c>
 80013ca:	4b61      	ldr	r3, [pc, #388]	; (8001550 <LCD_IO_WriteCmd8DataFill16+0x288>)
 80013cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013d0:	619a      	str	r2, [r3, #24]
 80013d2:	e003      	b.n	80013dc <LCD_IO_WriteCmd8DataFill16+0x114>
 80013d4:	4b5e      	ldr	r3, [pc, #376]	; (8001550 <LCD_IO_WriteCmd8DataFill16+0x288>)
 80013d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013da:	619a      	str	r2, [r3, #24]
 80013dc:	4b5a      	ldr	r3, [pc, #360]	; (8001548 <LCD_IO_WriteCmd8DataFill16+0x280>)
 80013de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013e2:	619a      	str	r2, [r3, #24]
 80013e4:	2008      	movs	r0, #8
 80013e6:	f7ff fbe8 	bl	8000bba <LCD_IO_Delay>
 80013ea:	4b57      	ldr	r3, [pc, #348]	; (8001548 <LCD_IO_WriteCmd8DataFill16+0x280>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	619a      	str	r2, [r3, #24]
 80013f0:	4b55      	ldr	r3, [pc, #340]	; (8001548 <LCD_IO_WriteCmd8DataFill16+0x280>)
 80013f2:	2208      	movs	r2, #8
 80013f4:	619a      	str	r2, [r3, #24]
  while(Size--)
 80013f6:	e11a      	b.n	800162e <LCD_IO_WriteCmd8DataFill16+0x366>
  {
    LCD_DATA16_WRITE(Data);
 80013f8:	88bb      	ldrh	r3, [r7, #4]
 80013fa:	0a1b      	lsrs	r3, r3, #8
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	4b52      	ldr	r3, [pc, #328]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001402:	701a      	strb	r2, [r3, #0]
 8001404:	4b51      	ldr	r3, [pc, #324]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	2b00      	cmp	r3, #0
 800140e:	d004      	beq.n	800141a <LCD_IO_WriteCmd8DataFill16+0x152>
 8001410:	4b4f      	ldr	r3, [pc, #316]	; (8001550 <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001412:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001416:	619a      	str	r2, [r3, #24]
 8001418:	e003      	b.n	8001422 <LCD_IO_WriteCmd8DataFill16+0x15a>
 800141a:	4b4d      	ldr	r3, [pc, #308]	; (8001550 <LCD_IO_WriteCmd8DataFill16+0x288>)
 800141c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001420:	619a      	str	r2, [r3, #24]
 8001422:	4b4a      	ldr	r3, [pc, #296]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d004      	beq.n	8001438 <LCD_IO_WriteCmd8DataFill16+0x170>
 800142e:	4b49      	ldr	r3, [pc, #292]	; (8001554 <LCD_IO_WriteCmd8DataFill16+0x28c>)
 8001430:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001434:	619a      	str	r2, [r3, #24]
 8001436:	e003      	b.n	8001440 <LCD_IO_WriteCmd8DataFill16+0x178>
 8001438:	4b46      	ldr	r3, [pc, #280]	; (8001554 <LCD_IO_WriteCmd8DataFill16+0x28c>)
 800143a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800143e:	619a      	str	r2, [r3, #24]
 8001440:	4b42      	ldr	r3, [pc, #264]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	f003 0304 	and.w	r3, r3, #4
 8001448:	2b00      	cmp	r3, #0
 800144a:	d004      	beq.n	8001456 <LCD_IO_WriteCmd8DataFill16+0x18e>
 800144c:	4b40      	ldr	r3, [pc, #256]	; (8001550 <LCD_IO_WriteCmd8DataFill16+0x288>)
 800144e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001452:	619a      	str	r2, [r3, #24]
 8001454:	e003      	b.n	800145e <LCD_IO_WriteCmd8DataFill16+0x196>
 8001456:	4b3e      	ldr	r3, [pc, #248]	; (8001550 <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001458:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800145c:	619a      	str	r2, [r3, #24]
 800145e:	4b3b      	ldr	r3, [pc, #236]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	f003 0308 	and.w	r3, r3, #8
 8001466:	2b00      	cmp	r3, #0
 8001468:	d004      	beq.n	8001474 <LCD_IO_WriteCmd8DataFill16+0x1ac>
 800146a:	4b3b      	ldr	r3, [pc, #236]	; (8001558 <LCD_IO_WriteCmd8DataFill16+0x290>)
 800146c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001470:	619a      	str	r2, [r3, #24]
 8001472:	e003      	b.n	800147c <LCD_IO_WriteCmd8DataFill16+0x1b4>
 8001474:	4b38      	ldr	r3, [pc, #224]	; (8001558 <LCD_IO_WriteCmd8DataFill16+0x290>)
 8001476:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800147a:	619a      	str	r2, [r3, #24]
 800147c:	4b33      	ldr	r3, [pc, #204]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	f003 0310 	and.w	r3, r3, #16
 8001484:	2b00      	cmp	r3, #0
 8001486:	d004      	beq.n	8001492 <LCD_IO_WriteCmd8DataFill16+0x1ca>
 8001488:	4b33      	ldr	r3, [pc, #204]	; (8001558 <LCD_IO_WriteCmd8DataFill16+0x290>)
 800148a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800148e:	619a      	str	r2, [r3, #24]
 8001490:	e003      	b.n	800149a <LCD_IO_WriteCmd8DataFill16+0x1d2>
 8001492:	4b31      	ldr	r3, [pc, #196]	; (8001558 <LCD_IO_WriteCmd8DataFill16+0x290>)
 8001494:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001498:	619a      	str	r2, [r3, #24]
 800149a:	4b2c      	ldr	r3, [pc, #176]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	f003 0320 	and.w	r3, r3, #32
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d004      	beq.n	80014b0 <LCD_IO_WriteCmd8DataFill16+0x1e8>
 80014a6:	4b2c      	ldr	r3, [pc, #176]	; (8001558 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80014a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014ac:	619a      	str	r2, [r3, #24]
 80014ae:	e003      	b.n	80014b8 <LCD_IO_WriteCmd8DataFill16+0x1f0>
 80014b0:	4b29      	ldr	r3, [pc, #164]	; (8001558 <LCD_IO_WriteCmd8DataFill16+0x290>)
 80014b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014b6:	619a      	str	r2, [r3, #24]
 80014b8:	4b24      	ldr	r3, [pc, #144]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d004      	beq.n	80014ce <LCD_IO_WriteCmd8DataFill16+0x206>
 80014c4:	4b25      	ldr	r3, [pc, #148]	; (800155c <LCD_IO_WriteCmd8DataFill16+0x294>)
 80014c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014ca:	619a      	str	r2, [r3, #24]
 80014cc:	e003      	b.n	80014d6 <LCD_IO_WriteCmd8DataFill16+0x20e>
 80014ce:	4b23      	ldr	r3, [pc, #140]	; (800155c <LCD_IO_WriteCmd8DataFill16+0x294>)
 80014d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80014d4:	619a      	str	r2, [r3, #24]
 80014d6:	4b1d      	ldr	r3, [pc, #116]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	b25b      	sxtb	r3, r3
 80014dc:	2b00      	cmp	r3, #0
 80014de:	da04      	bge.n	80014ea <LCD_IO_WriteCmd8DataFill16+0x222>
 80014e0:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <LCD_IO_WriteCmd8DataFill16+0x288>)
 80014e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014e6:	619a      	str	r2, [r3, #24]
 80014e8:	e003      	b.n	80014f2 <LCD_IO_WriteCmd8DataFill16+0x22a>
 80014ea:	4b19      	ldr	r3, [pc, #100]	; (8001550 <LCD_IO_WriteCmd8DataFill16+0x288>)
 80014ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014f0:	619a      	str	r2, [r3, #24]
 80014f2:	4b15      	ldr	r3, [pc, #84]	; (8001548 <LCD_IO_WriteCmd8DataFill16+0x280>)
 80014f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014f8:	619a      	str	r2, [r3, #24]
 80014fa:	2008      	movs	r0, #8
 80014fc:	f7ff fb5d 	bl	8000bba <LCD_IO_Delay>
 8001500:	4b11      	ldr	r3, [pc, #68]	; (8001548 <LCD_IO_WriteCmd8DataFill16+0x280>)
 8001502:	2201      	movs	r2, #1
 8001504:	619a      	str	r2, [r3, #24]
 8001506:	88bb      	ldrh	r3, [r7, #4]
 8001508:	b2da      	uxtb	r2, r3
 800150a:	4b10      	ldr	r3, [pc, #64]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 800150c:	701a      	strb	r2, [r3, #0]
 800150e:	4b0f      	ldr	r3, [pc, #60]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	2b00      	cmp	r3, #0
 8001518:	d004      	beq.n	8001524 <LCD_IO_WriteCmd8DataFill16+0x25c>
 800151a:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <LCD_IO_WriteCmd8DataFill16+0x288>)
 800151c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001520:	619a      	str	r2, [r3, #24]
 8001522:	e003      	b.n	800152c <LCD_IO_WriteCmd8DataFill16+0x264>
 8001524:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001526:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800152a:	619a      	str	r2, [r3, #24]
 800152c:	4b07      	ldr	r3, [pc, #28]	; (800154c <LCD_IO_WriteCmd8DataFill16+0x284>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d013      	beq.n	8001560 <LCD_IO_WriteCmd8DataFill16+0x298>
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <LCD_IO_WriteCmd8DataFill16+0x28c>)
 800153a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800153e:	619a      	str	r2, [r3, #24]
 8001540:	e012      	b.n	8001568 <LCD_IO_WriteCmd8DataFill16+0x2a0>
 8001542:	bf00      	nop
 8001544:	58020400 	.word	0x58020400
 8001548:	58020800 	.word	0x58020800
 800154c:	24000382 	.word	0x24000382
 8001550:	58021800 	.word	0x58021800
 8001554:	58020c00 	.word	0x58020c00
 8001558:	58021000 	.word	0x58021000
 800155c:	58020000 	.word	0x58020000
 8001560:	4b39      	ldr	r3, [pc, #228]	; (8001648 <LCD_IO_WriteCmd8DataFill16+0x380>)
 8001562:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001566:	619a      	str	r2, [r3, #24]
 8001568:	4b38      	ldr	r3, [pc, #224]	; (800164c <LCD_IO_WriteCmd8DataFill16+0x384>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	2b00      	cmp	r3, #0
 8001572:	d004      	beq.n	800157e <LCD_IO_WriteCmd8DataFill16+0x2b6>
 8001574:	4b36      	ldr	r3, [pc, #216]	; (8001650 <LCD_IO_WriteCmd8DataFill16+0x388>)
 8001576:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800157a:	619a      	str	r2, [r3, #24]
 800157c:	e003      	b.n	8001586 <LCD_IO_WriteCmd8DataFill16+0x2be>
 800157e:	4b34      	ldr	r3, [pc, #208]	; (8001650 <LCD_IO_WriteCmd8DataFill16+0x388>)
 8001580:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001584:	619a      	str	r2, [r3, #24]
 8001586:	4b31      	ldr	r3, [pc, #196]	; (800164c <LCD_IO_WriteCmd8DataFill16+0x384>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	f003 0308 	and.w	r3, r3, #8
 800158e:	2b00      	cmp	r3, #0
 8001590:	d004      	beq.n	800159c <LCD_IO_WriteCmd8DataFill16+0x2d4>
 8001592:	4b30      	ldr	r3, [pc, #192]	; (8001654 <LCD_IO_WriteCmd8DataFill16+0x38c>)
 8001594:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001598:	619a      	str	r2, [r3, #24]
 800159a:	e003      	b.n	80015a4 <LCD_IO_WriteCmd8DataFill16+0x2dc>
 800159c:	4b2d      	ldr	r3, [pc, #180]	; (8001654 <LCD_IO_WriteCmd8DataFill16+0x38c>)
 800159e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80015a2:	619a      	str	r2, [r3, #24]
 80015a4:	4b29      	ldr	r3, [pc, #164]	; (800164c <LCD_IO_WriteCmd8DataFill16+0x384>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	f003 0310 	and.w	r3, r3, #16
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d004      	beq.n	80015ba <LCD_IO_WriteCmd8DataFill16+0x2f2>
 80015b0:	4b28      	ldr	r3, [pc, #160]	; (8001654 <LCD_IO_WriteCmd8DataFill16+0x38c>)
 80015b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015b6:	619a      	str	r2, [r3, #24]
 80015b8:	e003      	b.n	80015c2 <LCD_IO_WriteCmd8DataFill16+0x2fa>
 80015ba:	4b26      	ldr	r3, [pc, #152]	; (8001654 <LCD_IO_WriteCmd8DataFill16+0x38c>)
 80015bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015c0:	619a      	str	r2, [r3, #24]
 80015c2:	4b22      	ldr	r3, [pc, #136]	; (800164c <LCD_IO_WriteCmd8DataFill16+0x384>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	f003 0320 	and.w	r3, r3, #32
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d004      	beq.n	80015d8 <LCD_IO_WriteCmd8DataFill16+0x310>
 80015ce:	4b21      	ldr	r3, [pc, #132]	; (8001654 <LCD_IO_WriteCmd8DataFill16+0x38c>)
 80015d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015d4:	619a      	str	r2, [r3, #24]
 80015d6:	e003      	b.n	80015e0 <LCD_IO_WriteCmd8DataFill16+0x318>
 80015d8:	4b1e      	ldr	r3, [pc, #120]	; (8001654 <LCD_IO_WriteCmd8DataFill16+0x38c>)
 80015da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015de:	619a      	str	r2, [r3, #24]
 80015e0:	4b1a      	ldr	r3, [pc, #104]	; (800164c <LCD_IO_WriteCmd8DataFill16+0x384>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d004      	beq.n	80015f6 <LCD_IO_WriteCmd8DataFill16+0x32e>
 80015ec:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <LCD_IO_WriteCmd8DataFill16+0x390>)
 80015ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015f2:	619a      	str	r2, [r3, #24]
 80015f4:	e003      	b.n	80015fe <LCD_IO_WriteCmd8DataFill16+0x336>
 80015f6:	4b18      	ldr	r3, [pc, #96]	; (8001658 <LCD_IO_WriteCmd8DataFill16+0x390>)
 80015f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80015fc:	619a      	str	r2, [r3, #24]
 80015fe:	4b13      	ldr	r3, [pc, #76]	; (800164c <LCD_IO_WriteCmd8DataFill16+0x384>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	b25b      	sxtb	r3, r3
 8001604:	2b00      	cmp	r3, #0
 8001606:	da04      	bge.n	8001612 <LCD_IO_WriteCmd8DataFill16+0x34a>
 8001608:	4b11      	ldr	r3, [pc, #68]	; (8001650 <LCD_IO_WriteCmd8DataFill16+0x388>)
 800160a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800160e:	619a      	str	r2, [r3, #24]
 8001610:	e003      	b.n	800161a <LCD_IO_WriteCmd8DataFill16+0x352>
 8001612:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <LCD_IO_WriteCmd8DataFill16+0x388>)
 8001614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001618:	619a      	str	r2, [r3, #24]
 800161a:	4b10      	ldr	r3, [pc, #64]	; (800165c <LCD_IO_WriteCmd8DataFill16+0x394>)
 800161c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001620:	619a      	str	r2, [r3, #24]
 8001622:	2008      	movs	r0, #8
 8001624:	f7ff fac9 	bl	8000bba <LCD_IO_Delay>
 8001628:	4b0c      	ldr	r3, [pc, #48]	; (800165c <LCD_IO_WriteCmd8DataFill16+0x394>)
 800162a:	2201      	movs	r2, #1
 800162c:	619a      	str	r2, [r3, #24]
  while(Size--)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	1e5a      	subs	r2, r3, #1
 8001632:	603a      	str	r2, [r7, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	f47f aedf 	bne.w	80013f8 <LCD_IO_WriteCmd8DataFill16+0x130>
  }
  LCD_CS_OFF;
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <LCD_IO_WriteCmd8DataFill16+0x398>)
 800163c:	2202      	movs	r2, #2
 800163e:	619a      	str	r2, [r3, #24]
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	58020c00 	.word	0x58020c00
 800164c:	24000382 	.word	0x24000382
 8001650:	58021800 	.word	0x58021800
 8001654:	58021000 	.word	0x58021000
 8001658:	58020000 	.word	0x58020000
 800165c:	58020800 	.word	0x58020800
 8001660:	58020400 	.word	0x58020400

08001664 <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
 8001670:	73fb      	strb	r3, [r7, #15]
  LCD_CS_ON;
 8001672:	4b92      	ldr	r3, [pc, #584]	; (80018bc <LCD_IO_WriteCmd8MultipleData8+0x258>)
 8001674:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001678:	619a      	str	r2, [r3, #24]
  LCD_CMD8_WRITE(Cmd);
 800167a:	4b91      	ldr	r3, [pc, #580]	; (80018c0 <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 800167c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001680:	619a      	str	r2, [r3, #24]
 8001682:	4a90      	ldr	r2, [pc, #576]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001684:	7bfb      	ldrb	r3, [r7, #15]
 8001686:	7013      	strb	r3, [r2, #0]
 8001688:	4b8e      	ldr	r3, [pc, #568]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	2b00      	cmp	r3, #0
 8001692:	d004      	beq.n	800169e <LCD_IO_WriteCmd8MultipleData8+0x3a>
 8001694:	4b8c      	ldr	r3, [pc, #560]	; (80018c8 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001696:	f44f 7200 	mov.w	r2, #512	; 0x200
 800169a:	619a      	str	r2, [r3, #24]
 800169c:	e003      	b.n	80016a6 <LCD_IO_WriteCmd8MultipleData8+0x42>
 800169e:	4b8a      	ldr	r3, [pc, #552]	; (80018c8 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 80016a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016a4:	619a      	str	r2, [r3, #24]
 80016a6:	4b87      	ldr	r3, [pc, #540]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d004      	beq.n	80016bc <LCD_IO_WriteCmd8MultipleData8+0x58>
 80016b2:	4b86      	ldr	r3, [pc, #536]	; (80018cc <LCD_IO_WriteCmd8MultipleData8+0x268>)
 80016b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016b8:	619a      	str	r2, [r3, #24]
 80016ba:	e003      	b.n	80016c4 <LCD_IO_WriteCmd8MultipleData8+0x60>
 80016bc:	4b83      	ldr	r3, [pc, #524]	; (80018cc <LCD_IO_WriteCmd8MultipleData8+0x268>)
 80016be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80016c2:	619a      	str	r2, [r3, #24]
 80016c4:	4b7f      	ldr	r3, [pc, #508]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d004      	beq.n	80016da <LCD_IO_WriteCmd8MultipleData8+0x76>
 80016d0:	4b7d      	ldr	r3, [pc, #500]	; (80018c8 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 80016d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016d6:	619a      	str	r2, [r3, #24]
 80016d8:	e003      	b.n	80016e2 <LCD_IO_WriteCmd8MultipleData8+0x7e>
 80016da:	4b7b      	ldr	r3, [pc, #492]	; (80018c8 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 80016dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016e0:	619a      	str	r2, [r3, #24]
 80016e2:	4b78      	ldr	r3, [pc, #480]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	f003 0308 	and.w	r3, r3, #8
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d004      	beq.n	80016f8 <LCD_IO_WriteCmd8MultipleData8+0x94>
 80016ee:	4b78      	ldr	r3, [pc, #480]	; (80018d0 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 80016f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016f4:	619a      	str	r2, [r3, #24]
 80016f6:	e003      	b.n	8001700 <LCD_IO_WriteCmd8MultipleData8+0x9c>
 80016f8:	4b75      	ldr	r3, [pc, #468]	; (80018d0 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 80016fa:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80016fe:	619a      	str	r2, [r3, #24]
 8001700:	4b70      	ldr	r3, [pc, #448]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	f003 0310 	and.w	r3, r3, #16
 8001708:	2b00      	cmp	r3, #0
 800170a:	d004      	beq.n	8001716 <LCD_IO_WriteCmd8MultipleData8+0xb2>
 800170c:	4b70      	ldr	r3, [pc, #448]	; (80018d0 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 800170e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001712:	619a      	str	r2, [r3, #24]
 8001714:	e003      	b.n	800171e <LCD_IO_WriteCmd8MultipleData8+0xba>
 8001716:	4b6e      	ldr	r3, [pc, #440]	; (80018d0 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001718:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800171c:	619a      	str	r2, [r3, #24]
 800171e:	4b69      	ldr	r3, [pc, #420]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	f003 0320 	and.w	r3, r3, #32
 8001726:	2b00      	cmp	r3, #0
 8001728:	d004      	beq.n	8001734 <LCD_IO_WriteCmd8MultipleData8+0xd0>
 800172a:	4b69      	ldr	r3, [pc, #420]	; (80018d0 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 800172c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001730:	619a      	str	r2, [r3, #24]
 8001732:	e003      	b.n	800173c <LCD_IO_WriteCmd8MultipleData8+0xd8>
 8001734:	4b66      	ldr	r3, [pc, #408]	; (80018d0 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001736:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800173a:	619a      	str	r2, [r3, #24]
 800173c:	4b61      	ldr	r3, [pc, #388]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001744:	2b00      	cmp	r3, #0
 8001746:	d004      	beq.n	8001752 <LCD_IO_WriteCmd8MultipleData8+0xee>
 8001748:	4b62      	ldr	r3, [pc, #392]	; (80018d4 <LCD_IO_WriteCmd8MultipleData8+0x270>)
 800174a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800174e:	619a      	str	r2, [r3, #24]
 8001750:	e003      	b.n	800175a <LCD_IO_WriteCmd8MultipleData8+0xf6>
 8001752:	4b60      	ldr	r3, [pc, #384]	; (80018d4 <LCD_IO_WriteCmd8MultipleData8+0x270>)
 8001754:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001758:	619a      	str	r2, [r3, #24]
 800175a:	4b5a      	ldr	r3, [pc, #360]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	b25b      	sxtb	r3, r3
 8001760:	2b00      	cmp	r3, #0
 8001762:	da04      	bge.n	800176e <LCD_IO_WriteCmd8MultipleData8+0x10a>
 8001764:	4b58      	ldr	r3, [pc, #352]	; (80018c8 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001766:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800176a:	619a      	str	r2, [r3, #24]
 800176c:	e003      	b.n	8001776 <LCD_IO_WriteCmd8MultipleData8+0x112>
 800176e:	4b56      	ldr	r3, [pc, #344]	; (80018c8 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001770:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001774:	619a      	str	r2, [r3, #24]
 8001776:	4b52      	ldr	r3, [pc, #328]	; (80018c0 <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 8001778:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800177c:	619a      	str	r2, [r3, #24]
 800177e:	2008      	movs	r0, #8
 8001780:	f7ff fa1b 	bl	8000bba <LCD_IO_Delay>
 8001784:	4b4e      	ldr	r3, [pc, #312]	; (80018c0 <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 8001786:	2201      	movs	r2, #1
 8001788:	619a      	str	r2, [r3, #24]
 800178a:	4b4d      	ldr	r3, [pc, #308]	; (80018c0 <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 800178c:	2208      	movs	r2, #8
 800178e:	619a      	str	r2, [r3, #24]

  while(Size--)
 8001790:	e087      	b.n	80018a2 <LCD_IO_WriteCmd8MultipleData8+0x23e>
  {
    LCD_DATA8_WRITE(*pData);
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	781a      	ldrb	r2, [r3, #0]
 8001796:	4b4b      	ldr	r3, [pc, #300]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001798:	701a      	strb	r2, [r3, #0]
 800179a:	4b4a      	ldr	r3, [pc, #296]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d004      	beq.n	80017b0 <LCD_IO_WriteCmd8MultipleData8+0x14c>
 80017a6:	4b48      	ldr	r3, [pc, #288]	; (80018c8 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 80017a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017ac:	619a      	str	r2, [r3, #24]
 80017ae:	e003      	b.n	80017b8 <LCD_IO_WriteCmd8MultipleData8+0x154>
 80017b0:	4b45      	ldr	r3, [pc, #276]	; (80018c8 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 80017b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017b6:	619a      	str	r2, [r3, #24]
 80017b8:	4b42      	ldr	r3, [pc, #264]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d004      	beq.n	80017ce <LCD_IO_WriteCmd8MultipleData8+0x16a>
 80017c4:	4b41      	ldr	r3, [pc, #260]	; (80018cc <LCD_IO_WriteCmd8MultipleData8+0x268>)
 80017c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80017ca:	619a      	str	r2, [r3, #24]
 80017cc:	e003      	b.n	80017d6 <LCD_IO_WriteCmd8MultipleData8+0x172>
 80017ce:	4b3f      	ldr	r3, [pc, #252]	; (80018cc <LCD_IO_WriteCmd8MultipleData8+0x268>)
 80017d0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80017d4:	619a      	str	r2, [r3, #24]
 80017d6:	4b3b      	ldr	r3, [pc, #236]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	f003 0304 	and.w	r3, r3, #4
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d004      	beq.n	80017ec <LCD_IO_WriteCmd8MultipleData8+0x188>
 80017e2:	4b39      	ldr	r3, [pc, #228]	; (80018c8 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 80017e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017e8:	619a      	str	r2, [r3, #24]
 80017ea:	e003      	b.n	80017f4 <LCD_IO_WriteCmd8MultipleData8+0x190>
 80017ec:	4b36      	ldr	r3, [pc, #216]	; (80018c8 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 80017ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017f2:	619a      	str	r2, [r3, #24]
 80017f4:	4b33      	ldr	r3, [pc, #204]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	f003 0308 	and.w	r3, r3, #8
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d004      	beq.n	800180a <LCD_IO_WriteCmd8MultipleData8+0x1a6>
 8001800:	4b33      	ldr	r3, [pc, #204]	; (80018d0 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001802:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001806:	619a      	str	r2, [r3, #24]
 8001808:	e003      	b.n	8001812 <LCD_IO_WriteCmd8MultipleData8+0x1ae>
 800180a:	4b31      	ldr	r3, [pc, #196]	; (80018d0 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 800180c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001810:	619a      	str	r2, [r3, #24]
 8001812:	4b2c      	ldr	r3, [pc, #176]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	f003 0310 	and.w	r3, r3, #16
 800181a:	2b00      	cmp	r3, #0
 800181c:	d004      	beq.n	8001828 <LCD_IO_WriteCmd8MultipleData8+0x1c4>
 800181e:	4b2c      	ldr	r3, [pc, #176]	; (80018d0 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001820:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001824:	619a      	str	r2, [r3, #24]
 8001826:	e003      	b.n	8001830 <LCD_IO_WriteCmd8MultipleData8+0x1cc>
 8001828:	4b29      	ldr	r3, [pc, #164]	; (80018d0 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 800182a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800182e:	619a      	str	r2, [r3, #24]
 8001830:	4b24      	ldr	r3, [pc, #144]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	f003 0320 	and.w	r3, r3, #32
 8001838:	2b00      	cmp	r3, #0
 800183a:	d004      	beq.n	8001846 <LCD_IO_WriteCmd8MultipleData8+0x1e2>
 800183c:	4b24      	ldr	r3, [pc, #144]	; (80018d0 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 800183e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001842:	619a      	str	r2, [r3, #24]
 8001844:	e003      	b.n	800184e <LCD_IO_WriteCmd8MultipleData8+0x1ea>
 8001846:	4b22      	ldr	r3, [pc, #136]	; (80018d0 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001848:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800184c:	619a      	str	r2, [r3, #24]
 800184e:	4b1d      	ldr	r3, [pc, #116]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001856:	2b00      	cmp	r3, #0
 8001858:	d004      	beq.n	8001864 <LCD_IO_WriteCmd8MultipleData8+0x200>
 800185a:	4b1e      	ldr	r3, [pc, #120]	; (80018d4 <LCD_IO_WriteCmd8MultipleData8+0x270>)
 800185c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001860:	619a      	str	r2, [r3, #24]
 8001862:	e003      	b.n	800186c <LCD_IO_WriteCmd8MultipleData8+0x208>
 8001864:	4b1b      	ldr	r3, [pc, #108]	; (80018d4 <LCD_IO_WriteCmd8MultipleData8+0x270>)
 8001866:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800186a:	619a      	str	r2, [r3, #24]
 800186c:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	b25b      	sxtb	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	da04      	bge.n	8001880 <LCD_IO_WriteCmd8MultipleData8+0x21c>
 8001876:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001878:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800187c:	619a      	str	r2, [r3, #24]
 800187e:	e003      	b.n	8001888 <LCD_IO_WriteCmd8MultipleData8+0x224>
 8001880:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001886:	619a      	str	r2, [r3, #24]
 8001888:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 800188a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800188e:	619a      	str	r2, [r3, #24]
 8001890:	2008      	movs	r0, #8
 8001892:	f7ff f992 	bl	8000bba <LCD_IO_Delay>
 8001896:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 8001898:	2201      	movs	r2, #1
 800189a:	619a      	str	r2, [r3, #24]
    pData ++;
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	3301      	adds	r3, #1
 80018a0:	60bb      	str	r3, [r7, #8]
  while(Size--)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	1e5a      	subs	r2, r3, #1
 80018a6:	607a      	str	r2, [r7, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f47f af72 	bne.w	8001792 <LCD_IO_WriteCmd8MultipleData8+0x12e>
  }
  LCD_CS_OFF;
 80018ae:	4b03      	ldr	r3, [pc, #12]	; (80018bc <LCD_IO_WriteCmd8MultipleData8+0x258>)
 80018b0:	2202      	movs	r2, #2
 80018b2:	619a      	str	r2, [r3, #24]
}
 80018b4:	bf00      	nop
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	58020400 	.word	0x58020400
 80018c0:	58020800 	.word	0x58020800
 80018c4:	24000382 	.word	0x24000382
 80018c8:	58021800 	.word	0x58021800
 80018cc:	58020c00 	.word	0x58020c00
 80018d0:	58021000 	.word	0x58021000
 80018d4:	58020000 	.word	0x58020000

080018d8 <LCD_IO_WriteCmd8MultipleData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData16(uint8_t Cmd, uint16_t *pData, uint32_t Size)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
 80018e4:	73fb      	strb	r3, [r7, #15]
  LCD_CS_ON;
 80018e6:	4b9b      	ldr	r3, [pc, #620]	; (8001b54 <LCD_IO_WriteCmd8MultipleData16+0x27c>)
 80018e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018ec:	619a      	str	r2, [r3, #24]
  LCD_CMD8_WRITE(Cmd);
 80018ee:	4b9a      	ldr	r3, [pc, #616]	; (8001b58 <LCD_IO_WriteCmd8MultipleData16+0x280>)
 80018f0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80018f4:	619a      	str	r2, [r3, #24]
 80018f6:	4a99      	ldr	r2, [pc, #612]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
 80018fa:	7013      	strb	r3, [r2, #0]
 80018fc:	4b97      	ldr	r3, [pc, #604]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b00      	cmp	r3, #0
 8001906:	d004      	beq.n	8001912 <LCD_IO_WriteCmd8MultipleData16+0x3a>
 8001908:	4b95      	ldr	r3, [pc, #596]	; (8001b60 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 800190a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800190e:	619a      	str	r2, [r3, #24]
 8001910:	e003      	b.n	800191a <LCD_IO_WriteCmd8MultipleData16+0x42>
 8001912:	4b93      	ldr	r3, [pc, #588]	; (8001b60 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001914:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001918:	619a      	str	r2, [r3, #24]
 800191a:	4b90      	ldr	r3, [pc, #576]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d004      	beq.n	8001930 <LCD_IO_WriteCmd8MultipleData16+0x58>
 8001926:	4b8f      	ldr	r3, [pc, #572]	; (8001b64 <LCD_IO_WriteCmd8MultipleData16+0x28c>)
 8001928:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800192c:	619a      	str	r2, [r3, #24]
 800192e:	e003      	b.n	8001938 <LCD_IO_WriteCmd8MultipleData16+0x60>
 8001930:	4b8c      	ldr	r3, [pc, #560]	; (8001b64 <LCD_IO_WriteCmd8MultipleData16+0x28c>)
 8001932:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001936:	619a      	str	r2, [r3, #24]
 8001938:	4b88      	ldr	r3, [pc, #544]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	f003 0304 	and.w	r3, r3, #4
 8001940:	2b00      	cmp	r3, #0
 8001942:	d004      	beq.n	800194e <LCD_IO_WriteCmd8MultipleData16+0x76>
 8001944:	4b86      	ldr	r3, [pc, #536]	; (8001b60 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001946:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800194a:	619a      	str	r2, [r3, #24]
 800194c:	e003      	b.n	8001956 <LCD_IO_WriteCmd8MultipleData16+0x7e>
 800194e:	4b84      	ldr	r3, [pc, #528]	; (8001b60 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001950:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001954:	619a      	str	r2, [r3, #24]
 8001956:	4b81      	ldr	r3, [pc, #516]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	f003 0308 	and.w	r3, r3, #8
 800195e:	2b00      	cmp	r3, #0
 8001960:	d004      	beq.n	800196c <LCD_IO_WriteCmd8MultipleData16+0x94>
 8001962:	4b81      	ldr	r3, [pc, #516]	; (8001b68 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001964:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001968:	619a      	str	r2, [r3, #24]
 800196a:	e003      	b.n	8001974 <LCD_IO_WriteCmd8MultipleData16+0x9c>
 800196c:	4b7e      	ldr	r3, [pc, #504]	; (8001b68 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 800196e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001972:	619a      	str	r2, [r3, #24]
 8001974:	4b79      	ldr	r3, [pc, #484]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	f003 0310 	and.w	r3, r3, #16
 800197c:	2b00      	cmp	r3, #0
 800197e:	d004      	beq.n	800198a <LCD_IO_WriteCmd8MultipleData16+0xb2>
 8001980:	4b79      	ldr	r3, [pc, #484]	; (8001b68 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001982:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001986:	619a      	str	r2, [r3, #24]
 8001988:	e003      	b.n	8001992 <LCD_IO_WriteCmd8MultipleData16+0xba>
 800198a:	4b77      	ldr	r3, [pc, #476]	; (8001b68 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 800198c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001990:	619a      	str	r2, [r3, #24]
 8001992:	4b72      	ldr	r3, [pc, #456]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	f003 0320 	and.w	r3, r3, #32
 800199a:	2b00      	cmp	r3, #0
 800199c:	d004      	beq.n	80019a8 <LCD_IO_WriteCmd8MultipleData16+0xd0>
 800199e:	4b72      	ldr	r3, [pc, #456]	; (8001b68 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 80019a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019a4:	619a      	str	r2, [r3, #24]
 80019a6:	e003      	b.n	80019b0 <LCD_IO_WriteCmd8MultipleData16+0xd8>
 80019a8:	4b6f      	ldr	r3, [pc, #444]	; (8001b68 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 80019aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019ae:	619a      	str	r2, [r3, #24]
 80019b0:	4b6a      	ldr	r3, [pc, #424]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d004      	beq.n	80019c6 <LCD_IO_WriteCmd8MultipleData16+0xee>
 80019bc:	4b6b      	ldr	r3, [pc, #428]	; (8001b6c <LCD_IO_WriteCmd8MultipleData16+0x294>)
 80019be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019c2:	619a      	str	r2, [r3, #24]
 80019c4:	e003      	b.n	80019ce <LCD_IO_WriteCmd8MultipleData16+0xf6>
 80019c6:	4b69      	ldr	r3, [pc, #420]	; (8001b6c <LCD_IO_WriteCmd8MultipleData16+0x294>)
 80019c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019cc:	619a      	str	r2, [r3, #24]
 80019ce:	4b63      	ldr	r3, [pc, #396]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	b25b      	sxtb	r3, r3
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	da04      	bge.n	80019e2 <LCD_IO_WriteCmd8MultipleData16+0x10a>
 80019d8:	4b61      	ldr	r3, [pc, #388]	; (8001b60 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 80019da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019de:	619a      	str	r2, [r3, #24]
 80019e0:	e003      	b.n	80019ea <LCD_IO_WriteCmd8MultipleData16+0x112>
 80019e2:	4b5f      	ldr	r3, [pc, #380]	; (8001b60 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 80019e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019e8:	619a      	str	r2, [r3, #24]
 80019ea:	4b5b      	ldr	r3, [pc, #364]	; (8001b58 <LCD_IO_WriteCmd8MultipleData16+0x280>)
 80019ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019f0:	619a      	str	r2, [r3, #24]
 80019f2:	2008      	movs	r0, #8
 80019f4:	f7ff f8e1 	bl	8000bba <LCD_IO_Delay>
 80019f8:	4b57      	ldr	r3, [pc, #348]	; (8001b58 <LCD_IO_WriteCmd8MultipleData16+0x280>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	619a      	str	r2, [r3, #24]
 80019fe:	4b56      	ldr	r3, [pc, #344]	; (8001b58 <LCD_IO_WriteCmd8MultipleData16+0x280>)
 8001a00:	2208      	movs	r2, #8
 8001a02:	619a      	str	r2, [r3, #24]
  while(Size--)
 8001a04:	e11e      	b.n	8001c44 <LCD_IO_WriteCmd8MultipleData16+0x36c>
  {
    LCD_DATA16_WRITE(*pData);
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	881b      	ldrh	r3, [r3, #0]
 8001a0a:	0a1b      	lsrs	r3, r3, #8
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	4b52      	ldr	r3, [pc, #328]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001a12:	701a      	strb	r2, [r3, #0]
 8001a14:	4b51      	ldr	r3, [pc, #324]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d004      	beq.n	8001a2a <LCD_IO_WriteCmd8MultipleData16+0x152>
 8001a20:	4b4f      	ldr	r3, [pc, #316]	; (8001b60 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001a22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a26:	619a      	str	r2, [r3, #24]
 8001a28:	e003      	b.n	8001a32 <LCD_IO_WriteCmd8MultipleData16+0x15a>
 8001a2a:	4b4d      	ldr	r3, [pc, #308]	; (8001b60 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001a2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a30:	619a      	str	r2, [r3, #24]
 8001a32:	4b4a      	ldr	r3, [pc, #296]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d004      	beq.n	8001a48 <LCD_IO_WriteCmd8MultipleData16+0x170>
 8001a3e:	4b49      	ldr	r3, [pc, #292]	; (8001b64 <LCD_IO_WriteCmd8MultipleData16+0x28c>)
 8001a40:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a44:	619a      	str	r2, [r3, #24]
 8001a46:	e003      	b.n	8001a50 <LCD_IO_WriteCmd8MultipleData16+0x178>
 8001a48:	4b46      	ldr	r3, [pc, #280]	; (8001b64 <LCD_IO_WriteCmd8MultipleData16+0x28c>)
 8001a4a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001a4e:	619a      	str	r2, [r3, #24]
 8001a50:	4b42      	ldr	r3, [pc, #264]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d004      	beq.n	8001a66 <LCD_IO_WriteCmd8MultipleData16+0x18e>
 8001a5c:	4b40      	ldr	r3, [pc, #256]	; (8001b60 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001a5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a62:	619a      	str	r2, [r3, #24]
 8001a64:	e003      	b.n	8001a6e <LCD_IO_WriteCmd8MultipleData16+0x196>
 8001a66:	4b3e      	ldr	r3, [pc, #248]	; (8001b60 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001a68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a6c:	619a      	str	r2, [r3, #24]
 8001a6e:	4b3b      	ldr	r3, [pc, #236]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	f003 0308 	and.w	r3, r3, #8
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d004      	beq.n	8001a84 <LCD_IO_WriteCmd8MultipleData16+0x1ac>
 8001a7a:	4b3b      	ldr	r3, [pc, #236]	; (8001b68 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001a7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a80:	619a      	str	r2, [r3, #24]
 8001a82:	e003      	b.n	8001a8c <LCD_IO_WriteCmd8MultipleData16+0x1b4>
 8001a84:	4b38      	ldr	r3, [pc, #224]	; (8001b68 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001a86:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001a8a:	619a      	str	r2, [r3, #24]
 8001a8c:	4b33      	ldr	r3, [pc, #204]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	f003 0310 	and.w	r3, r3, #16
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d004      	beq.n	8001aa2 <LCD_IO_WriteCmd8MultipleData16+0x1ca>
 8001a98:	4b33      	ldr	r3, [pc, #204]	; (8001b68 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001a9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a9e:	619a      	str	r2, [r3, #24]
 8001aa0:	e003      	b.n	8001aaa <LCD_IO_WriteCmd8MultipleData16+0x1d2>
 8001aa2:	4b31      	ldr	r3, [pc, #196]	; (8001b68 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001aa4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001aa8:	619a      	str	r2, [r3, #24]
 8001aaa:	4b2c      	ldr	r3, [pc, #176]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	f003 0320 	and.w	r3, r3, #32
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d004      	beq.n	8001ac0 <LCD_IO_WriteCmd8MultipleData16+0x1e8>
 8001ab6:	4b2c      	ldr	r3, [pc, #176]	; (8001b68 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001ab8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001abc:	619a      	str	r2, [r3, #24]
 8001abe:	e003      	b.n	8001ac8 <LCD_IO_WriteCmd8MultipleData16+0x1f0>
 8001ac0:	4b29      	ldr	r3, [pc, #164]	; (8001b68 <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001ac2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ac6:	619a      	str	r2, [r3, #24]
 8001ac8:	4b24      	ldr	r3, [pc, #144]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d004      	beq.n	8001ade <LCD_IO_WriteCmd8MultipleData16+0x206>
 8001ad4:	4b25      	ldr	r3, [pc, #148]	; (8001b6c <LCD_IO_WriteCmd8MultipleData16+0x294>)
 8001ad6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ada:	619a      	str	r2, [r3, #24]
 8001adc:	e003      	b.n	8001ae6 <LCD_IO_WriteCmd8MultipleData16+0x20e>
 8001ade:	4b23      	ldr	r3, [pc, #140]	; (8001b6c <LCD_IO_WriteCmd8MultipleData16+0x294>)
 8001ae0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ae4:	619a      	str	r2, [r3, #24]
 8001ae6:	4b1d      	ldr	r3, [pc, #116]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	b25b      	sxtb	r3, r3
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	da04      	bge.n	8001afa <LCD_IO_WriteCmd8MultipleData16+0x222>
 8001af0:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001af2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001af6:	619a      	str	r2, [r3, #24]
 8001af8:	e003      	b.n	8001b02 <LCD_IO_WriteCmd8MultipleData16+0x22a>
 8001afa:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001afc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b00:	619a      	str	r2, [r3, #24]
 8001b02:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <LCD_IO_WriteCmd8MultipleData16+0x280>)
 8001b04:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b08:	619a      	str	r2, [r3, #24]
 8001b0a:	2008      	movs	r0, #8
 8001b0c:	f7ff f855 	bl	8000bba <LCD_IO_Delay>
 8001b10:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <LCD_IO_WriteCmd8MultipleData16+0x280>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	619a      	str	r2, [r3, #24]
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001b1e:	701a      	strb	r2, [r3, #0]
 8001b20:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d004      	beq.n	8001b36 <LCD_IO_WriteCmd8MultipleData16+0x25e>
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001b2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b32:	619a      	str	r2, [r3, #24]
 8001b34:	e003      	b.n	8001b3e <LCD_IO_WriteCmd8MultipleData16+0x266>
 8001b36:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001b38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b3c:	619a      	str	r2, [r3, #24]
 8001b3e:	4b07      	ldr	r3, [pc, #28]	; (8001b5c <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d012      	beq.n	8001b70 <LCD_IO_WriteCmd8MultipleData16+0x298>
 8001b4a:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <LCD_IO_WriteCmd8MultipleData16+0x28c>)
 8001b4c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b50:	619a      	str	r2, [r3, #24]
 8001b52:	e011      	b.n	8001b78 <LCD_IO_WriteCmd8MultipleData16+0x2a0>
 8001b54:	58020400 	.word	0x58020400
 8001b58:	58020800 	.word	0x58020800
 8001b5c:	24000382 	.word	0x24000382
 8001b60:	58021800 	.word	0x58021800
 8001b64:	58020c00 	.word	0x58020c00
 8001b68:	58021000 	.word	0x58021000
 8001b6c:	58020000 	.word	0x58020000
 8001b70:	4b3b      	ldr	r3, [pc, #236]	; (8001c60 <LCD_IO_WriteCmd8MultipleData16+0x388>)
 8001b72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001b76:	619a      	str	r2, [r3, #24]
 8001b78:	4b3a      	ldr	r3, [pc, #232]	; (8001c64 <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d004      	beq.n	8001b8e <LCD_IO_WriteCmd8MultipleData16+0x2b6>
 8001b84:	4b38      	ldr	r3, [pc, #224]	; (8001c68 <LCD_IO_WriteCmd8MultipleData16+0x390>)
 8001b86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b8a:	619a      	str	r2, [r3, #24]
 8001b8c:	e003      	b.n	8001b96 <LCD_IO_WriteCmd8MultipleData16+0x2be>
 8001b8e:	4b36      	ldr	r3, [pc, #216]	; (8001c68 <LCD_IO_WriteCmd8MultipleData16+0x390>)
 8001b90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b94:	619a      	str	r2, [r3, #24]
 8001b96:	4b33      	ldr	r3, [pc, #204]	; (8001c64 <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	f003 0308 	and.w	r3, r3, #8
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d004      	beq.n	8001bac <LCD_IO_WriteCmd8MultipleData16+0x2d4>
 8001ba2:	4b32      	ldr	r3, [pc, #200]	; (8001c6c <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8001ba4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ba8:	619a      	str	r2, [r3, #24]
 8001baa:	e003      	b.n	8001bb4 <LCD_IO_WriteCmd8MultipleData16+0x2dc>
 8001bac:	4b2f      	ldr	r3, [pc, #188]	; (8001c6c <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8001bae:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001bb2:	619a      	str	r2, [r3, #24]
 8001bb4:	4b2b      	ldr	r3, [pc, #172]	; (8001c64 <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	f003 0310 	and.w	r3, r3, #16
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d004      	beq.n	8001bca <LCD_IO_WriteCmd8MultipleData16+0x2f2>
 8001bc0:	4b2a      	ldr	r3, [pc, #168]	; (8001c6c <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8001bc2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bc6:	619a      	str	r2, [r3, #24]
 8001bc8:	e003      	b.n	8001bd2 <LCD_IO_WriteCmd8MultipleData16+0x2fa>
 8001bca:	4b28      	ldr	r3, [pc, #160]	; (8001c6c <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8001bcc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bd0:	619a      	str	r2, [r3, #24]
 8001bd2:	4b24      	ldr	r3, [pc, #144]	; (8001c64 <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	f003 0320 	and.w	r3, r3, #32
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d004      	beq.n	8001be8 <LCD_IO_WriteCmd8MultipleData16+0x310>
 8001bde:	4b23      	ldr	r3, [pc, #140]	; (8001c6c <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8001be0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001be4:	619a      	str	r2, [r3, #24]
 8001be6:	e003      	b.n	8001bf0 <LCD_IO_WriteCmd8MultipleData16+0x318>
 8001be8:	4b20      	ldr	r3, [pc, #128]	; (8001c6c <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8001bea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bee:	619a      	str	r2, [r3, #24]
 8001bf0:	4b1c      	ldr	r3, [pc, #112]	; (8001c64 <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d004      	beq.n	8001c06 <LCD_IO_WriteCmd8MultipleData16+0x32e>
 8001bfc:	4b1c      	ldr	r3, [pc, #112]	; (8001c70 <LCD_IO_WriteCmd8MultipleData16+0x398>)
 8001bfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c02:	619a      	str	r2, [r3, #24]
 8001c04:	e003      	b.n	8001c0e <LCD_IO_WriteCmd8MultipleData16+0x336>
 8001c06:	4b1a      	ldr	r3, [pc, #104]	; (8001c70 <LCD_IO_WriteCmd8MultipleData16+0x398>)
 8001c08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c0c:	619a      	str	r2, [r3, #24]
 8001c0e:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	b25b      	sxtb	r3, r3
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	da04      	bge.n	8001c22 <LCD_IO_WriteCmd8MultipleData16+0x34a>
 8001c18:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <LCD_IO_WriteCmd8MultipleData16+0x390>)
 8001c1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c1e:	619a      	str	r2, [r3, #24]
 8001c20:	e003      	b.n	8001c2a <LCD_IO_WriteCmd8MultipleData16+0x352>
 8001c22:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <LCD_IO_WriteCmd8MultipleData16+0x390>)
 8001c24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c28:	619a      	str	r2, [r3, #24]
 8001c2a:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <LCD_IO_WriteCmd8MultipleData16+0x39c>)
 8001c2c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c30:	619a      	str	r2, [r3, #24]
 8001c32:	2008      	movs	r0, #8
 8001c34:	f7fe ffc1 	bl	8000bba <LCD_IO_Delay>
 8001c38:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <LCD_IO_WriteCmd8MultipleData16+0x39c>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	619a      	str	r2, [r3, #24]
    pData ++;
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	3302      	adds	r3, #2
 8001c42:	60bb      	str	r3, [r7, #8]
  while(Size--)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	1e5a      	subs	r2, r3, #1
 8001c48:	607a      	str	r2, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f47f aedb 	bne.w	8001a06 <LCD_IO_WriteCmd8MultipleData16+0x12e>
  }
  LCD_CS_OFF;
 8001c50:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <LCD_IO_WriteCmd8MultipleData16+0x3a0>)
 8001c52:	2202      	movs	r2, #2
 8001c54:	619a      	str	r2, [r3, #24]
}
 8001c56:	bf00      	nop
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	58020c00 	.word	0x58020c00
 8001c64:	24000382 	.word	0x24000382
 8001c68:	58021800 	.word	0x58021800
 8001c6c:	58021000 	.word	0x58021000
 8001c70:	58020000 	.word	0x58020000
 8001c74:	58020800 	.word	0x58020800
 8001c78:	58020400 	.word	0x58020400

08001c7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c7c:	b5b0      	push	{r4, r5, r7, lr}
 8001c7e:	b088      	sub	sp, #32
 8001c80:	af04      	add	r7, sp, #16
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8001c82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c86:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001c88:	bf00      	nop
 8001c8a:	4b97      	ldr	r3, [pc, #604]	; (8001ee8 <main+0x26c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d004      	beq.n	8001ca0 <main+0x24>
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	1e5a      	subs	r2, r3, #1
 8001c9a:	60fa      	str	r2, [r7, #12]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	dcf4      	bgt.n	8001c8a <main+0xe>
  if ( timeout < 0 )
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	da01      	bge.n	8001caa <main+0x2e>
  {
  Error_Handler();
 8001ca6:	f000 fe1f 	bl	80028e8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001caa:	f001 f81d 	bl	8002ce8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cae:	f000 fafd 	bl	80022ac <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8001cb2:	4b8d      	ldr	r3, [pc, #564]	; (8001ee8 <main+0x26c>)
 8001cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb8:	4a8b      	ldr	r2, [pc, #556]	; (8001ee8 <main+0x26c>)
 8001cba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cc2:	4b89      	ldr	r3, [pc, #548]	; (8001ee8 <main+0x26c>)
 8001cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ccc:	607b      	str	r3, [r7, #4]
 8001cce:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	f001 ffcb 	bl	8003c6c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	2000      	movs	r0, #0
 8001cda:	f001 ffe1 	bl	8003ca0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8001cde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ce2:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001ce4:	bf00      	nop
 8001ce6:	4b80      	ldr	r3, [pc, #512]	; (8001ee8 <main+0x26c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d104      	bne.n	8001cfc <main+0x80>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	1e5a      	subs	r2, r3, #1
 8001cf6:	60fa      	str	r2, [r7, #12]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	dcf4      	bgt.n	8001ce6 <main+0x6a>
if ( timeout < 0 )
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	da01      	bge.n	8001d06 <main+0x8a>
{
Error_Handler();
 8001d02:	f000 fdf1 	bl	80028e8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d06:	f000 fbef 	bl	80024e8 <MX_GPIO_Init>
  MX_ETH_Init();
 8001d0a:	f000 fb55 	bl	80023b8 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001d0e:	f000 fb9f 	bl	8002450 <MX_USB_OTG_FS_PCD_Init>
  MX_DMA_Init();
 8001d12:	f000 fbcf 	bl	80024b4 <MX_DMA_Init>
  MX_LIBJPEG_Init();
 8001d16:	f004 fccb 	bl	80066b0 <MX_LIBJPEG_Init>
  /* USER CODE BEGIN 2 */

  	SRAM4-> flag_UID = 0;
 8001d1a:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001d1e:	2200      	movs	r2, #0
 8001d20:	771a      	strb	r2, [r3, #28]
  	SRAM4-> flag_blue_btn = 0;
 8001d22:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  	ili9486_Init();
 8001d2c:	f7fe fbda 	bl	80004e4 <ili9486_Init>
    ili9486_DisplayOn();
 8001d30:	f7fe fbbc 	bl	80004ac <ili9486_DisplayOn>

    ili_scr_1();
 8001d34:	f000 fc4c 	bl	80025d0 <ili_scr_1>

    ili9486_FillRect(0, 0, 480, 35, cl_BLUE);
 8001d38:	231f      	movs	r3, #31
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	2323      	movs	r3, #35	; 0x23
 8001d3e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001d42:	2100      	movs	r1, #0
 8001d44:	2000      	movs	r0, #0
 8001d46:	f7fe fcf7 	bl	8000738 <ili9486_FillRect>
    ili9486_WriteStringNoBG(10, 10, " > STAMPR ----->>>-----", Font20, cl_WHITE);
 8001d4a:	4b68      	ldr	r3, [pc, #416]	; (8001eec <main+0x270>)
 8001d4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d50:	9201      	str	r2, [sp, #4]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	9200      	str	r2, [sp, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a65      	ldr	r2, [pc, #404]	; (8001ef0 <main+0x274>)
 8001d5a:	210a      	movs	r1, #10
 8001d5c:	200a      	movs	r0, #10
 8001d5e:	f7fe fee1 	bl	8000b24 <ili9486_WriteStringNoBG>
    ili9486_WriteStringNoBG(400, 10, " OWL_HOR ", Font12, cl_WHITE);
 8001d62:	4b64      	ldr	r3, [pc, #400]	; (8001ef4 <main+0x278>)
 8001d64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d68:	9201      	str	r2, [sp, #4]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	9200      	str	r2, [sp, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a61      	ldr	r2, [pc, #388]	; (8001ef8 <main+0x27c>)
 8001d72:	210a      	movs	r1, #10
 8001d74:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001d78:	f7fe fed4 	bl	8000b24 <ili9486_WriteStringNoBG>

    ili9486_WriteStringNoBG(10, 40, " Scan the RFID Tag", Font20, cl_OLIVE);
 8001d7c:	4b5b      	ldr	r3, [pc, #364]	; (8001eec <main+0x270>)
 8001d7e:	f647 32e0 	movw	r2, #31712	; 0x7be0
 8001d82:	9201      	str	r2, [sp, #4]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	9200      	str	r2, [sp, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a5c      	ldr	r2, [pc, #368]	; (8001efc <main+0x280>)
 8001d8c:	2128      	movs	r1, #40	; 0x28
 8001d8e:	200a      	movs	r0, #10
 8001d90:	f7fe fec8 	bl	8000b24 <ili9486_WriteStringNoBG>
    //ili9486_FillRect(20, 100, 450, 200, cl_BLACK);
    ili9486_DrawRGBImage(90, 90, 277, 170, (uint16_t*)image_data_owlsOFCC);
 8001d94:	4b5a      	ldr	r3, [pc, #360]	; (8001f00 <main+0x284>)
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	23aa      	movs	r3, #170	; 0xaa
 8001d9a:	f240 1215 	movw	r2, #277	; 0x115
 8001d9e:	215a      	movs	r1, #90	; 0x5a
 8001da0:	205a      	movs	r0, #90	; 0x5a
 8001da2:	f7fe fd2c 	bl	80007fe <ili9486_DrawRGBImage>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  //// Time Clock Manager / Independent from GranDiState
	  if(HAL_GetTick() - timestamp_one[0] >= 500){
 8001da6:	f001 f825 	bl	8002df4 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	4b55      	ldr	r3, [pc, #340]	; (8001f04 <main+0x288>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001db6:	d351      	bcc.n	8001e5c <main+0x1e0>
	  		  timestamp_one[0] = HAL_GetTick();
 8001db8:	f001 f81c 	bl	8002df4 <HAL_GetTick>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	4a51      	ldr	r2, [pc, #324]	; (8001f04 <main+0x288>)
 8001dc0:	6013      	str	r3, [r2, #0]
	  		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001dc2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dc6:	4850      	ldr	r0, [pc, #320]	; (8001f08 <main+0x28c>)
 8001dc8:	f001 ff35 	bl	8003c36 <HAL_GPIO_TogglePin>

	  		NowDat7 = SRAM4->NowDates;
 8001dcc:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001dd0:	4a4e      	ldr	r2, [pc, #312]	; (8001f0c <main+0x290>)
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	6013      	str	r3, [r2, #0]
	  		NowTim7 = SRAM4->NowTimes;
 8001dd6:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001dda:	4a4d      	ldr	r2, [pc, #308]	; (8001f10 <main+0x294>)
 8001ddc:	4615      	mov	r5, r2
 8001dde:	1d1c      	adds	r4, r3, #4
 8001de0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001de2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001de4:	6823      	ldr	r3, [r4, #0]
 8001de6:	602b      	str	r3, [r5, #0]

	  		sprintf(txtdispBF, "%02X:%02X:%02X", // use %02 to fill 0 front of 1 digit
	  				  NowTim7.Hours, NowTim7.Minutes, NowTim7.Seconds);
 8001de8:	4b49      	ldr	r3, [pc, #292]	; (8001f10 <main+0x294>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
	  		sprintf(txtdispBF, "%02X:%02X:%02X", // use %02 to fill 0 front of 1 digit
 8001dec:	461a      	mov	r2, r3
	  				  NowTim7.Hours, NowTim7.Minutes, NowTim7.Seconds);
 8001dee:	4b48      	ldr	r3, [pc, #288]	; (8001f10 <main+0x294>)
 8001df0:	785b      	ldrb	r3, [r3, #1]
	  		sprintf(txtdispBF, "%02X:%02X:%02X", // use %02 to fill 0 front of 1 digit
 8001df2:	4619      	mov	r1, r3
	  				  NowTim7.Hours, NowTim7.Minutes, NowTim7.Seconds);
 8001df4:	4b46      	ldr	r3, [pc, #280]	; (8001f10 <main+0x294>)
 8001df6:	789b      	ldrb	r3, [r3, #2]
	  		sprintf(txtdispBF, "%02X:%02X:%02X", // use %02 to fill 0 front of 1 digit
 8001df8:	9300      	str	r3, [sp, #0]
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	4945      	ldr	r1, [pc, #276]	; (8001f14 <main+0x298>)
 8001dfe:	4846      	ldr	r0, [pc, #280]	; (8001f18 <main+0x29c>)
 8001e00:	f004 fd90 	bl	8006924 <siprintf>
	  		ili9486_WriteString(365, 40, txtdispBF, Font20, cl_YELLOW, cl_BLACK);
 8001e04:	4b39      	ldr	r3, [pc, #228]	; (8001eec <main+0x270>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	9202      	str	r2, [sp, #8]
 8001e0a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001e0e:	9201      	str	r2, [sp, #4]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	9200      	str	r2, [sp, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a40      	ldr	r2, [pc, #256]	; (8001f18 <main+0x29c>)
 8001e18:	2128      	movs	r1, #40	; 0x28
 8001e1a:	f240 106d 	movw	r0, #365	; 0x16d
 8001e1e:	f7fe fe34 	bl	8000a8a <ili9486_WriteString>

	  		sprintf(txtdispBF, "%02x/%02x/%02x",
	  			  				  NowDat7.Date, NowDat7.Month, NowDat7.Year);
 8001e22:	4b3a      	ldr	r3, [pc, #232]	; (8001f0c <main+0x290>)
 8001e24:	789b      	ldrb	r3, [r3, #2]
	  		sprintf(txtdispBF, "%02x/%02x/%02x",
 8001e26:	461a      	mov	r2, r3
	  			  				  NowDat7.Date, NowDat7.Month, NowDat7.Year);
 8001e28:	4b38      	ldr	r3, [pc, #224]	; (8001f0c <main+0x290>)
 8001e2a:	785b      	ldrb	r3, [r3, #1]
	  		sprintf(txtdispBF, "%02x/%02x/%02x",
 8001e2c:	4619      	mov	r1, r3
	  			  				  NowDat7.Date, NowDat7.Month, NowDat7.Year);
 8001e2e:	4b37      	ldr	r3, [pc, #220]	; (8001f0c <main+0x290>)
 8001e30:	78db      	ldrb	r3, [r3, #3]
	  		sprintf(txtdispBF, "%02x/%02x/%02x",
 8001e32:	9300      	str	r3, [sp, #0]
 8001e34:	460b      	mov	r3, r1
 8001e36:	4939      	ldr	r1, [pc, #228]	; (8001f1c <main+0x2a0>)
 8001e38:	4837      	ldr	r0, [pc, #220]	; (8001f18 <main+0x29c>)
 8001e3a:	f004 fd73 	bl	8006924 <siprintf>
	  		ili9486_WriteString(365, 60, txtdispBF, Font20, cl_YELLOW, cl_BLACK);
 8001e3e:	4b2b      	ldr	r3, [pc, #172]	; (8001eec <main+0x270>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	9202      	str	r2, [sp, #8]
 8001e44:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001e48:	9201      	str	r2, [sp, #4]
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	9200      	str	r2, [sp, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a31      	ldr	r2, [pc, #196]	; (8001f18 <main+0x29c>)
 8001e52:	213c      	movs	r1, #60	; 0x3c
 8001e54:	f240 106d 	movw	r0, #365	; 0x16d
 8001e58:	f7fe fe17 	bl	8000a8a <ili9486_WriteString>

	  	  }
	  if(HAL_GetTick() - timestamp_one[1] >= 50){
 8001e5c:	f000 ffca 	bl	8002df4 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	4b28      	ldr	r3, [pc, #160]	; (8001f04 <main+0x288>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b31      	cmp	r3, #49	; 0x31
 8001e6a:	d906      	bls.n	8001e7a <main+0x1fe>
	  	  	timestamp_one[1] = HAL_GetTick();
 8001e6c:	f000 ffc2 	bl	8002df4 <HAL_GetTick>
 8001e70:	4603      	mov	r3, r0
 8001e72:	4a24      	ldr	r2, [pc, #144]	; (8001f04 <main+0x288>)
 8001e74:	6053      	str	r3, [r2, #4]
	  	  	ili_seq_arrow();
 8001e76:	f000 fbf9 	bl	800266c <ili_seq_arrow>
	  	  }

	  //// State Manager
	  if(HAL_GetTick() - timestamp_grandis[0] >= 100){
 8001e7a:	f000 ffbb 	bl	8002df4 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	4b27      	ldr	r3, [pc, #156]	; (8001f20 <main+0x2a4>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b63      	cmp	r3, #99	; 0x63
 8001e88:	f240 8200 	bls.w	800228c <main+0x610>
		  timestamp_grandis[0] = HAL_GetTick();
 8001e8c:	f000 ffb2 	bl	8002df4 <HAL_GetTick>
 8001e90:	4603      	mov	r3, r0
 8001e92:	4a23      	ldr	r2, [pc, #140]	; (8001f20 <main+0x2a4>)
 8001e94:	6013      	str	r3, [r2, #0]

		  switch (GranDiSTATE){
 8001e96:	4b23      	ldr	r3, [pc, #140]	; (8001f24 <main+0x2a8>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	2b03      	cmp	r3, #3
 8001e9c:	f000 8153 	beq.w	8002146 <main+0x4ca>
 8001ea0:	2b03      	cmp	r3, #3
 8001ea2:	dc04      	bgt.n	8001eae <main+0x232>
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d019      	beq.n	8001edc <main+0x260>
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	f000 8087 	beq.w	8001fbc <main+0x340>
		  default:
		  case st_lobby:
			  //// ---- wait for scanned cards----------------------------------------------
			  //if(HAL_HSEM_Take(2, 2) == HAL_OK){
			  if ( SRAM4-> flag_UID == 1){
 8001eae:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001eb2:	7f1b      	ldrb	r3, [r3, #28]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	f040 81eb 	bne.w	8002290 <main+0x614>

				  //GranDiSTATE = st_show;
				  GranDiSTATE = st_search;
 8001eba:	4b1a      	ldr	r3, [pc, #104]	; (8001f24 <main+0x2a8>)
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	701a      	strb	r2, [r3, #0]
				  SRAM4-> flag_UID = 0;
 8001ec0:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	771a      	strb	r2, [r3, #28]
				  //timestamp_grandis[1] = HAL_GetTick();

				  //// clear Lobby BG
				  ili9486_FillRect(90, 90, 277, 170, cl_BLACK);
 8001ec8:	2300      	movs	r3, #0
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	23aa      	movs	r3, #170	; 0xaa
 8001ece:	f240 1215 	movw	r2, #277	; 0x115
 8001ed2:	215a      	movs	r1, #90	; 0x5a
 8001ed4:	205a      	movs	r0, #90	; 0x5a
 8001ed6:	f7fe fc2f 	bl	8000738 <ili9486_FillRect>
			  }
			  	//  HAL_HSEM_Release(2, 2);
			  	//}
			  break;
 8001eda:	e1d9      	b.n	8002290 <main+0x614>
			   * 3 - search from UID[0] if not match -> go to next ID
			   *   - if not found any -> return n/a status and report no data in base
			   *   - if found -> break and end the search/ return personna -> go to st_show
			   * */
#ifdef px_ID_search_datasss
			  px_ID_match = -1; //// -1 means not found preferred
 8001edc:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <main+0x2ac>)
 8001ede:	22ff      	movs	r2, #255	; 0xff
 8001ee0:	701a      	strb	r2, [r3, #0]
			  //// Breadth-First-Search cat cat
			  	 for(int y = 0;y <= PERSONA_LEN; y++){
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60bb      	str	r3, [r7, #8]
 8001ee6:	e05d      	b.n	8001fa4 <main+0x328>
 8001ee8:	58024400 	.word	0x58024400
 8001eec:	24000018 	.word	0x24000018
 8001ef0:	080070d4 	.word	0x080070d4
 8001ef4:	24000008 	.word	0x24000008
 8001ef8:	080070ec 	.word	0x080070ec
 8001efc:	080070f8 	.word	0x080070f8
 8001f00:	0800ac7c 	.word	0x0800ac7c
 8001f04:	24000a08 	.word	0x24000a08
 8001f08:	58020400 	.word	0x58020400
 8001f0c:	24000a04 	.word	0x24000a04
 8001f10:	240009f0 	.word	0x240009f0
 8001f14:	0800710c 	.word	0x0800710c
 8001f18:	24000978 	.word	0x24000978
 8001f1c:	0800711c 	.word	0x0800711c
 8001f20:	24000a10 	.word	0x24000a10
 8001f24:	24000a18 	.word	0x24000a18
 8001f28:	24000230 	.word	0x24000230
			  		 if (SRAM4->UUID[0] == pxs_persons[y].USID[0]){
 8001f2c:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001f30:	7f5a      	ldrb	r2, [r3, #29]
 8001f32:	4998      	ldr	r1, [pc, #608]	; (8002194 <main+0x518>)
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	2068      	movs	r0, #104	; 0x68
 8001f38:	fb00 f303 	mul.w	r3, r0, r3
 8001f3c:	440b      	add	r3, r1
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d12c      	bne.n	8001f9e <main+0x322>
			  			 if (SRAM4->UUID[1] == pxs_persons[y].USID[1]){
 8001f44:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001f48:	7f9a      	ldrb	r2, [r3, #30]
 8001f4a:	4992      	ldr	r1, [pc, #584]	; (8002194 <main+0x518>)
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	2068      	movs	r0, #104	; 0x68
 8001f50:	fb00 f303 	mul.w	r3, r0, r3
 8001f54:	440b      	add	r3, r1
 8001f56:	3301      	adds	r3, #1
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d11f      	bne.n	8001f9e <main+0x322>
			  				if (SRAM4->UUID[2] == pxs_persons[y].USID[2]){
 8001f5e:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001f62:	7fda      	ldrb	r2, [r3, #31]
 8001f64:	498b      	ldr	r1, [pc, #556]	; (8002194 <main+0x518>)
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	2068      	movs	r0, #104	; 0x68
 8001f6a:	fb00 f303 	mul.w	r3, r0, r3
 8001f6e:	440b      	add	r3, r1
 8001f70:	3302      	adds	r3, #2
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d112      	bne.n	8001f9e <main+0x322>
			  					if (SRAM4->UUID[3] == pxs_persons[y].USID[3]){
 8001f78:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001f7c:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001f80:	4984      	ldr	r1, [pc, #528]	; (8002194 <main+0x518>)
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	2068      	movs	r0, #104	; 0x68
 8001f86:	fb00 f303 	mul.w	r3, r0, r3
 8001f8a:	440b      	add	r3, r1
 8001f8c:	3303      	adds	r3, #3
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d104      	bne.n	8001f9e <main+0x322>
			  						px_ID_match = y; //// return match ID
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	b25a      	sxtb	r2, r3
 8001f98:	4b7f      	ldr	r3, [pc, #508]	; (8002198 <main+0x51c>)
 8001f9a:	701a      	strb	r2, [r3, #0]
			  						break; //// end search
 8001f9c:	e005      	b.n	8001faa <main+0x32e>
			  	 for(int y = 0;y <= PERSONA_LEN; y++){
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	60bb      	str	r3, [r7, #8]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	2b05      	cmp	r3, #5
 8001fa8:	ddc0      	ble.n	8001f2c <main+0x2b0>
			  		 }// search layer 0

			  	 }// for loop search
#endif
			  /// ---------------Finally-------------------------------
			  GranDiSTATE = st_show;
 8001faa:	4b7c      	ldr	r3, [pc, #496]	; (800219c <main+0x520>)
 8001fac:	2202      	movs	r2, #2
 8001fae:	701a      	strb	r2, [r3, #0]
			  timestamp_grandis[1] = HAL_GetTick();
 8001fb0:	f000 ff20 	bl	8002df4 <HAL_GetTick>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	4a7a      	ldr	r2, [pc, #488]	; (80021a0 <main+0x524>)
 8001fb8:	6053      	str	r3, [r2, #4]

			  break;
 8001fba:	e16c      	b.n	8002296 <main+0x61a>

		  case st_show:
			  //// ------------------------------------------------------------------------------

			  // ID Show----------------------------
			  sprintf(txtdispBF,"Scanned ID");
 8001fbc:	4979      	ldr	r1, [pc, #484]	; (80021a4 <main+0x528>)
 8001fbe:	487a      	ldr	r0, [pc, #488]	; (80021a8 <main+0x52c>)
 8001fc0:	f004 fcb0 	bl	8006924 <siprintf>
			  ili9486_WriteString(160, 100, txtdispBF, Font20, cl_ORANGE, cl_BLACK);
 8001fc4:	4b79      	ldr	r3, [pc, #484]	; (80021ac <main+0x530>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	9202      	str	r2, [sp, #8]
 8001fca:	f64f 5220 	movw	r2, #64800	; 0xfd20
 8001fce:	9201      	str	r2, [sp, #4]
 8001fd0:	685a      	ldr	r2, [r3, #4]
 8001fd2:	9200      	str	r2, [sp, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a74      	ldr	r2, [pc, #464]	; (80021a8 <main+0x52c>)
 8001fd8:	2164      	movs	r1, #100	; 0x64
 8001fda:	20a0      	movs	r0, #160	; 0xa0
 8001fdc:	f7fe fd55 	bl	8000a8a <ili9486_WriteString>

			  sprintf(txtdispBF,"UID: %02X %02X %02X %02X",
					 SRAM4->UUID[0],SRAM4->UUID[1],SRAM4->UUID[2],SRAM4->UUID[3]);
 8001fe0:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001fe4:	7f5b      	ldrb	r3, [r3, #29]
			  sprintf(txtdispBF,"UID: %02X %02X %02X %02X",
 8001fe6:	4619      	mov	r1, r3
					 SRAM4->UUID[0],SRAM4->UUID[1],SRAM4->UUID[2],SRAM4->UUID[3]);
 8001fe8:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001fec:	7f9b      	ldrb	r3, [r3, #30]
			  sprintf(txtdispBF,"UID: %02X %02X %02X %02X",
 8001fee:	4618      	mov	r0, r3
					 SRAM4->UUID[0],SRAM4->UUID[1],SRAM4->UUID[2],SRAM4->UUID[3]);
 8001ff0:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001ff4:	7fdb      	ldrb	r3, [r3, #31]
			  sprintf(txtdispBF,"UID: %02X %02X %02X %02X",
 8001ff6:	461a      	mov	r2, r3
					 SRAM4->UUID[0],SRAM4->UUID[1],SRAM4->UUID[2],SRAM4->UUID[3]);
 8001ff8:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001ffc:	f893 3020 	ldrb.w	r3, [r3, #32]
			  sprintf(txtdispBF,"UID: %02X %02X %02X %02X",
 8002000:	9301      	str	r3, [sp, #4]
 8002002:	9200      	str	r2, [sp, #0]
 8002004:	4603      	mov	r3, r0
 8002006:	460a      	mov	r2, r1
 8002008:	4969      	ldr	r1, [pc, #420]	; (80021b0 <main+0x534>)
 800200a:	4867      	ldr	r0, [pc, #412]	; (80021a8 <main+0x52c>)
 800200c:	f004 fc8a 	bl	8006924 <siprintf>
			  ili9486_WriteString(160, 125, txtdispBF, Font20, cl_YELLOW, cl_BLACK);
 8002010:	4b66      	ldr	r3, [pc, #408]	; (80021ac <main+0x530>)
 8002012:	2200      	movs	r2, #0
 8002014:	9202      	str	r2, [sp, #8]
 8002016:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800201a:	9201      	str	r2, [sp, #4]
 800201c:	685a      	ldr	r2, [r3, #4]
 800201e:	9200      	str	r2, [sp, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a61      	ldr	r2, [pc, #388]	; (80021a8 <main+0x52c>)
 8002024:	217d      	movs	r1, #125	; 0x7d
 8002026:	20a0      	movs	r0, #160	; 0xa0
 8002028:	f7fe fd2f 	bl	8000a8a <ili9486_WriteString>
//				  ili9486_WriteString(160, 175, p1_owl.Surname, Font20, cl_GREEN, cl_BLACK);
//				  ili9486_WriteString(160, 200, p1_owl.welcom_txt, Font16, cl_ORANGE, cl_BLACK);
//			  }
#ifdef px_ID_search_datasss
			  //// ---- show pic
			  if(px_ID_match == -1){
 800202c:	4b5a      	ldr	r3, [pc, #360]	; (8002198 <main+0x51c>)
 800202e:	f993 3000 	ldrsb.w	r3, [r3]
 8002032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002036:	d10e      	bne.n	8002056 <main+0x3da>
				  ////ili9486_DrawRGBImage(20, 100, 128, 128, (uint16_t*)p1_owl.pic);
				  ili9486_WriteString(160, 160,"NO ID IN DATABASE", Font24, cl_RED, cl_BLACK);
 8002038:	4b5e      	ldr	r3, [pc, #376]	; (80021b4 <main+0x538>)
 800203a:	2200      	movs	r2, #0
 800203c:	9202      	str	r2, [sp, #8]
 800203e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002042:	9201      	str	r2, [sp, #4]
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	9200      	str	r2, [sp, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a5b      	ldr	r2, [pc, #364]	; (80021b8 <main+0x53c>)
 800204c:	21a0      	movs	r1, #160	; 0xa0
 800204e:	20a0      	movs	r0, #160	; 0xa0
 8002050:	f7fe fd1b 	bl	8000a8a <ili9486_WriteString>
 8002054:	e070      	b.n	8002138 <main+0x4bc>

			  }else{
				  ili9486_DrawRGBImage(20, 100,
 8002056:	4b50      	ldr	r3, [pc, #320]	; (8002198 <main+0x51c>)
 8002058:	f993 3000 	ldrsb.w	r3, [r3]
 800205c:	4619      	mov	r1, r3
 800205e:	4a4d      	ldr	r2, [pc, #308]	; (8002194 <main+0x518>)
 8002060:	2368      	movs	r3, #104	; 0x68
 8002062:	fb01 f303 	mul.w	r3, r1, r3
 8002066:	4413      	add	r3, r2
 8002068:	3364      	adds	r3, #100	; 0x64
 800206a:	881a      	ldrh	r2, [r3, #0]
 800206c:	4b4a      	ldr	r3, [pc, #296]	; (8002198 <main+0x51c>)
 800206e:	f993 3000 	ldrsb.w	r3, [r3]
 8002072:	4618      	mov	r0, r3
 8002074:	4947      	ldr	r1, [pc, #284]	; (8002194 <main+0x518>)
 8002076:	2368      	movs	r3, #104	; 0x68
 8002078:	fb00 f303 	mul.w	r3, r0, r3
 800207c:	440b      	add	r3, r1
 800207e:	3366      	adds	r3, #102	; 0x66
 8002080:	8819      	ldrh	r1, [r3, #0]
 8002082:	4b45      	ldr	r3, [pc, #276]	; (8002198 <main+0x51c>)
 8002084:	f993 3000 	ldrsb.w	r3, [r3]
 8002088:	461c      	mov	r4, r3
						  pxs_persons[px_ID_match].picXs,
						  pxs_persons[px_ID_match].picYs,
						  (uint16_t*)pxs_persons[px_ID_match].pic);
 800208a:	4842      	ldr	r0, [pc, #264]	; (8002194 <main+0x518>)
 800208c:	2368      	movs	r3, #104	; 0x68
 800208e:	fb04 f303 	mul.w	r3, r4, r3
 8002092:	4403      	add	r3, r0
 8002094:	3360      	adds	r3, #96	; 0x60
 8002096:	681b      	ldr	r3, [r3, #0]
				  ili9486_DrawRGBImage(20, 100,
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	460b      	mov	r3, r1
 800209c:	2164      	movs	r1, #100	; 0x64
 800209e:	2014      	movs	r0, #20
 80020a0:	f7fe fbad 	bl	80007fe <ili9486_DrawRGBImage>
				  ili9486_WriteString(160, 150, pxs_persons[px_ID_match].Name, Font20, cl_GREEN, cl_BLACK);
 80020a4:	4b3c      	ldr	r3, [pc, #240]	; (8002198 <main+0x51c>)
 80020a6:	f993 3000 	ldrsb.w	r3, [r3]
 80020aa:	461a      	mov	r2, r3
 80020ac:	2368      	movs	r3, #104	; 0x68
 80020ae:	fb02 f303 	mul.w	r3, r2, r3
 80020b2:	4a38      	ldr	r2, [pc, #224]	; (8002194 <main+0x518>)
 80020b4:	4413      	add	r3, r2
 80020b6:	1d59      	adds	r1, r3, #5
 80020b8:	4b3c      	ldr	r3, [pc, #240]	; (80021ac <main+0x530>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	9202      	str	r2, [sp, #8]
 80020be:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80020c2:	9201      	str	r2, [sp, #4]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	9200      	str	r2, [sp, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	460a      	mov	r2, r1
 80020cc:	2196      	movs	r1, #150	; 0x96
 80020ce:	20a0      	movs	r0, #160	; 0xa0
 80020d0:	f7fe fcdb 	bl	8000a8a <ili9486_WriteString>
				  ili9486_WriteString(160, 175, pxs_persons[px_ID_match].Surname, Font20, cl_GREEN, cl_BLACK);
 80020d4:	4b30      	ldr	r3, [pc, #192]	; (8002198 <main+0x51c>)
 80020d6:	f993 3000 	ldrsb.w	r3, [r3]
 80020da:	461a      	mov	r2, r3
 80020dc:	2368      	movs	r3, #104	; 0x68
 80020de:	fb02 f303 	mul.w	r3, r2, r3
 80020e2:	3318      	adds	r3, #24
 80020e4:	4a2b      	ldr	r2, [pc, #172]	; (8002194 <main+0x518>)
 80020e6:	4413      	add	r3, r2
 80020e8:	1c59      	adds	r1, r3, #1
 80020ea:	4b30      	ldr	r3, [pc, #192]	; (80021ac <main+0x530>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	9202      	str	r2, [sp, #8]
 80020f0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80020f4:	9201      	str	r2, [sp, #4]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	9200      	str	r2, [sp, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	460a      	mov	r2, r1
 80020fe:	21af      	movs	r1, #175	; 0xaf
 8002100:	20a0      	movs	r0, #160	; 0xa0
 8002102:	f7fe fcc2 	bl	8000a8a <ili9486_WriteString>
				  ili9486_WriteString(160, 200, pxs_persons[px_ID_match].welcom_txt, Font16, cl_CYAN, cl_BLACK);
 8002106:	4b24      	ldr	r3, [pc, #144]	; (8002198 <main+0x51c>)
 8002108:	f993 3000 	ldrsb.w	r3, [r3]
 800210c:	461a      	mov	r2, r3
 800210e:	2368      	movs	r3, #104	; 0x68
 8002110:	fb02 f303 	mul.w	r3, r2, r3
 8002114:	3328      	adds	r3, #40	; 0x28
 8002116:	4a1f      	ldr	r2, [pc, #124]	; (8002194 <main+0x518>)
 8002118:	4413      	add	r3, r2
 800211a:	1d59      	adds	r1, r3, #5
 800211c:	4b27      	ldr	r3, [pc, #156]	; (80021bc <main+0x540>)
 800211e:	2200      	movs	r2, #0
 8002120:	9202      	str	r2, [sp, #8]
 8002122:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002126:	9201      	str	r2, [sp, #4]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	9200      	str	r2, [sp, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	460a      	mov	r2, r1
 8002130:	21c8      	movs	r1, #200	; 0xc8
 8002132:	20a0      	movs	r0, #160	; 0xa0
 8002134:	f7fe fca9 	bl	8000a8a <ili9486_WriteString>
			  }
#endif
			  cnter_wait = 0; // start counter
 8002138:	4b21      	ldr	r3, [pc, #132]	; (80021c0 <main+0x544>)
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
			  GranDiSTATE = st_waitend;
 800213e:	4b17      	ldr	r3, [pc, #92]	; (800219c <main+0x520>)
 8002140:	2203      	movs	r2, #3
 8002142:	701a      	strb	r2, [r3, #0]

			  break;
 8002144:	e0a7      	b.n	8002296 <main+0x61a>
		  case st_waitend:
			  /* Using waitend to wait, if still in show -> CPU will write display continuously
			   * */

			  //// toggle blue btn flag to pause time
			  if(SRAM4->flag_blue_btn == 1){
 8002146:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 800214a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800214e:	2b01      	cmp	r3, #1
 8002150:	d14c      	bne.n	80021ec <main+0x570>
				  flag_waitpause += 1;
 8002152:	4b1c      	ldr	r3, [pc, #112]	; (80021c4 <main+0x548>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	3301      	adds	r3, #1
 8002158:	b2da      	uxtb	r2, r3
 800215a:	4b1a      	ldr	r3, [pc, #104]	; (80021c4 <main+0x548>)
 800215c:	701a      	strb	r2, [r3, #0]
				  flag_waitpause %= 2;
 800215e:	4b19      	ldr	r3, [pc, #100]	; (80021c4 <main+0x548>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	b2da      	uxtb	r2, r3
 8002168:	4b16      	ldr	r3, [pc, #88]	; (80021c4 <main+0x548>)
 800216a:	701a      	strb	r2, [r3, #0]
				  if (flag_waitpause == 1){
 800216c:	4b15      	ldr	r3, [pc, #84]	; (80021c4 <main+0x548>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d12b      	bne.n	80021cc <main+0x550>
					  ili9486_WriteString(200, 230, "PAUSE", Font24, cl_RED, cl_YELLOW);
 8002174:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <main+0x538>)
 8002176:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800217a:	9202      	str	r2, [sp, #8]
 800217c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002180:	9201      	str	r2, [sp, #4]
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	9200      	str	r2, [sp, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a0f      	ldr	r2, [pc, #60]	; (80021c8 <main+0x54c>)
 800218a:	21e6      	movs	r1, #230	; 0xe6
 800218c:	20c8      	movs	r0, #200	; 0xc8
 800218e:	f7fe fc7c 	bl	8000a8a <ili9486_WriteString>
 8002192:	e026      	b.n	80021e2 <main+0x566>
 8002194:	24000028 	.word	0x24000028
 8002198:	24000230 	.word	0x24000230
 800219c:	24000a18 	.word	0x24000a18
 80021a0:	24000a10 	.word	0x24000a10
 80021a4:	0800712c 	.word	0x0800712c
 80021a8:	24000978 	.word	0x24000978
 80021ac:	24000018 	.word	0x24000018
 80021b0:	08007138 	.word	0x08007138
 80021b4:	24000020 	.word	0x24000020
 80021b8:	08007154 	.word	0x08007154
 80021bc:	24000010 	.word	0x24000010
 80021c0:	24000a1c 	.word	0x24000a1c
 80021c4:	24000a19 	.word	0x24000a19
 80021c8:	08007168 	.word	0x08007168
				  }else{
					  ili9486_FillRect(200, 230, 120, 24, cl_BLACK);
 80021cc:	2300      	movs	r3, #0
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	2318      	movs	r3, #24
 80021d2:	2278      	movs	r2, #120	; 0x78
 80021d4:	21e6      	movs	r1, #230	; 0xe6
 80021d6:	20c8      	movs	r0, #200	; 0xc8
 80021d8:	f7fe faae 	bl	8000738 <ili9486_FillRect>
					  flag_waitpause = 0; // force
 80021dc:	4b2e      	ldr	r3, [pc, #184]	; (8002298 <main+0x61c>)
 80021de:	2200      	movs	r2, #0
 80021e0:	701a      	strb	r2, [r3, #0]
				  }
				  SRAM4->flag_blue_btn = 0;
 80021e2:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			  }

			  //// time counter, run with timestamp of grandis sub[0] x main[1]
			  if(flag_waitpause == 0 &&
 80021ec:	4b2a      	ldr	r3, [pc, #168]	; (8002298 <main+0x61c>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d110      	bne.n	8002216 <main+0x59a>
					  HAL_GetTick() - timestamp_grandis[1] >= 1){
 80021f4:	f000 fdfe 	bl	8002df4 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	4b28      	ldr	r3, [pc, #160]	; (800229c <main+0x620>)
 80021fc:	685b      	ldr	r3, [r3, #4]
			  if(flag_waitpause == 0 &&
 80021fe:	429a      	cmp	r2, r3
 8002200:	d009      	beq.n	8002216 <main+0x59a>
				  timestamp_grandis[1] = HAL_GetTick();
 8002202:	f000 fdf7 	bl	8002df4 <HAL_GetTick>
 8002206:	4603      	mov	r3, r0
 8002208:	4a24      	ldr	r2, [pc, #144]	; (800229c <main+0x620>)
 800220a:	6053      	str	r3, [r2, #4]
				  cnter_wait++;
 800220c:	4b24      	ldr	r3, [pc, #144]	; (80022a0 <main+0x624>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	3301      	adds	r3, #1
 8002212:	4a23      	ldr	r2, [pc, #140]	; (80022a0 <main+0x624>)
 8002214:	6013      	str	r3, [r2, #0]
			  ////// Ending display and back to lobby------------------
			  //// timer
//			  if(flag_waitpause == 0 &&
//					  HAL_GetTick() - timestamp_grandis[1] >= k_tim_show_milli){
			  //// counter
			  if(cnter_wait >= k_cnt_show){
 8002216:	4b22      	ldr	r3, [pc, #136]	; (80022a0 <main+0x624>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2b27      	cmp	r3, #39	; 0x27
 800221c:	d93a      	bls.n	8002294 <main+0x618>
				  cnter_wait = 0; //// counter reset
 800221e:	4b20      	ldr	r3, [pc, #128]	; (80022a0 <main+0x624>)
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
				  GranDiSTATE = st_lobby;
 8002224:	4b1f      	ldr	r3, [pc, #124]	; (80022a4 <main+0x628>)
 8002226:	2200      	movs	r2, #0
 8002228:	701a      	strb	r2, [r3, #0]
				  // clear Display
				  //ili9486_FillRect(20, 100, 450, 200, cl_BLACK);
				  //re_lobby
				  ili9486_FillRect(2, 90, 100, 200, cl_BLACK);
 800222a:	2300      	movs	r3, #0
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	23c8      	movs	r3, #200	; 0xc8
 8002230:	2264      	movs	r2, #100	; 0x64
 8002232:	215a      	movs	r1, #90	; 0x5a
 8002234:	2002      	movs	r0, #2
 8002236:	f7fe fa7f 	bl	8000738 <ili9486_FillRect>
				  ili9486_FillRect(365, 90, 110, 200, cl_BLACK);
 800223a:	2300      	movs	r3, #0
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	23c8      	movs	r3, #200	; 0xc8
 8002240:	226e      	movs	r2, #110	; 0x6e
 8002242:	215a      	movs	r1, #90	; 0x5a
 8002244:	f240 106d 	movw	r0, #365	; 0x16d
 8002248:	f7fe fa76 	bl	8000738 <ili9486_FillRect>
				  ili9486_DrawRGBImage(90, 90, 277, 170, (uint16_t*)image_data_owlsOFCC);
 800224c:	4b16      	ldr	r3, [pc, #88]	; (80022a8 <main+0x62c>)
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	23aa      	movs	r3, #170	; 0xaa
 8002252:	f240 1215 	movw	r2, #277	; 0x115
 8002256:	215a      	movs	r1, #90	; 0x5a
 8002258:	205a      	movs	r0, #90	; 0x5a
 800225a:	f7fe fad0 	bl	80007fe <ili9486_DrawRGBImage>

				  //// clear UID if nothing left in queue
				  if (SRAM4->flag_UID == 0){
 800225e:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8002262:	7f1b      	ldrb	r3, [r3, #28]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d115      	bne.n	8002294 <main+0x618>
				  SRAM4->UUID[0] = 0;
 8002268:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 800226c:	2200      	movs	r2, #0
 800226e:	775a      	strb	r2, [r3, #29]
				  SRAM4->UUID[1] = 0;
 8002270:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8002274:	2200      	movs	r2, #0
 8002276:	779a      	strb	r2, [r3, #30]
				  SRAM4->UUID[2] = 0;
 8002278:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 800227c:	2200      	movs	r2, #0
 800227e:	77da      	strb	r2, [r3, #31]
				  SRAM4->UUID[3] = 0;
 8002280:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2020 	strb.w	r2, [r3, #32]
				  }
			  }
			  break;
 800228a:	e003      	b.n	8002294 <main+0x618>

 		  } // switch
	  }// GrandState
 800228c:	bf00      	nop
 800228e:	e58a      	b.n	8001da6 <main+0x12a>
			  break;
 8002290:	bf00      	nop
 8002292:	e588      	b.n	8001da6 <main+0x12a>
			  break;
 8002294:	bf00      	nop
	  if(HAL_GetTick() - timestamp_one[0] >= 500){
 8002296:	e586      	b.n	8001da6 <main+0x12a>
 8002298:	24000a19 	.word	0x24000a19
 800229c:	24000a10 	.word	0x24000a10
 80022a0:	24000a1c 	.word	0x24000a1c
 80022a4:	24000a18 	.word	0x24000a18
 80022a8:	0800ac7c 	.word	0x0800ac7c

080022ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b09c      	sub	sp, #112	; 0x70
 80022b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022b6:	224c      	movs	r2, #76	; 0x4c
 80022b8:	2100      	movs	r1, #0
 80022ba:	4618      	mov	r0, r3
 80022bc:	f004 fa3a 	bl	8006734 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022c0:	1d3b      	adds	r3, r7, #4
 80022c2:	2220      	movs	r2, #32
 80022c4:	2100      	movs	r1, #0
 80022c6:	4618      	mov	r0, r3
 80022c8:	f004 fa34 	bl	8006734 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80022cc:	2004      	movs	r0, #4
 80022ce:	f001 fe43 	bl	8003f58 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80022d2:	2300      	movs	r3, #0
 80022d4:	603b      	str	r3, [r7, #0]
 80022d6:	4b35      	ldr	r3, [pc, #212]	; (80023ac <SystemClock_Config+0x100>)
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	4a34      	ldr	r2, [pc, #208]	; (80023ac <SystemClock_Config+0x100>)
 80022dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022e0:	6193      	str	r3, [r2, #24]
 80022e2:	4b32      	ldr	r3, [pc, #200]	; (80023ac <SystemClock_Config+0x100>)
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80022ea:	603b      	str	r3, [r7, #0]
 80022ec:	4b30      	ldr	r3, [pc, #192]	; (80023b0 <SystemClock_Config+0x104>)
 80022ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f0:	4a2f      	ldr	r2, [pc, #188]	; (80023b0 <SystemClock_Config+0x104>)
 80022f2:	f043 0301 	orr.w	r3, r3, #1
 80022f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80022f8:	4b2d      	ldr	r3, [pc, #180]	; (80023b0 <SystemClock_Config+0x104>)
 80022fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	603b      	str	r3, [r7, #0]
 8002302:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002304:	bf00      	nop
 8002306:	4b29      	ldr	r3, [pc, #164]	; (80023ac <SystemClock_Config+0x100>)
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800230e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002312:	d1f8      	bne.n	8002306 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002314:	4b27      	ldr	r3, [pc, #156]	; (80023b4 <SystemClock_Config+0x108>)
 8002316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002318:	f023 0303 	bic.w	r3, r3, #3
 800231c:	4a25      	ldr	r2, [pc, #148]	; (80023b4 <SystemClock_Config+0x108>)
 800231e:	f043 0302 	orr.w	r3, r3, #2
 8002322:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002324:	2309      	movs	r3, #9
 8002326:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002328:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800232c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800232e:	2301      	movs	r3, #1
 8002330:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002332:	2302      	movs	r3, #2
 8002334:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002336:	2302      	movs	r3, #2
 8002338:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800233a:	2301      	movs	r3, #1
 800233c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 800233e:	2378      	movs	r3, #120	; 0x78
 8002340:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002342:	2302      	movs	r3, #2
 8002344:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002346:	2302      	movs	r3, #2
 8002348:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800234a:	2302      	movs	r3, #2
 800234c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800234e:	230c      	movs	r3, #12
 8002350:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002352:	2300      	movs	r3, #0
 8002354:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002356:	2300      	movs	r3, #0
 8002358:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800235a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800235e:	4618      	mov	r0, r3
 8002360:	f001 fe64 	bl	800402c <HAL_RCC_OscConfig>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800236a:	f000 fabd 	bl	80028e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800236e:	233f      	movs	r3, #63	; 0x3f
 8002370:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002372:	2303      	movs	r3, #3
 8002374:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002376:	2300      	movs	r3, #0
 8002378:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800237a:	2308      	movs	r3, #8
 800237c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800237e:	2340      	movs	r3, #64	; 0x40
 8002380:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002382:	2340      	movs	r3, #64	; 0x40
 8002384:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002386:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800238a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800238c:	2340      	movs	r3, #64	; 0x40
 800238e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002390:	1d3b      	adds	r3, r7, #4
 8002392:	2104      	movs	r1, #4
 8002394:	4618      	mov	r0, r3
 8002396:	f002 fa77 	bl	8004888 <HAL_RCC_ClockConfig>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80023a0:	f000 faa2 	bl	80028e8 <Error_Handler>
  }
}
 80023a4:	bf00      	nop
 80023a6:	3770      	adds	r7, #112	; 0x70
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	58024800 	.word	0x58024800
 80023b0:	58000400 	.word	0x58000400
 80023b4:	58024400 	.word	0x58024400

080023b8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80023bc:	4b1e      	ldr	r3, [pc, #120]	; (8002438 <MX_ETH_Init+0x80>)
 80023be:	4a1f      	ldr	r2, [pc, #124]	; (800243c <MX_ETH_Init+0x84>)
 80023c0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80023c2:	4b1f      	ldr	r3, [pc, #124]	; (8002440 <MX_ETH_Init+0x88>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80023c8:	4b1d      	ldr	r3, [pc, #116]	; (8002440 <MX_ETH_Init+0x88>)
 80023ca:	2280      	movs	r2, #128	; 0x80
 80023cc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80023ce:	4b1c      	ldr	r3, [pc, #112]	; (8002440 <MX_ETH_Init+0x88>)
 80023d0:	22e1      	movs	r2, #225	; 0xe1
 80023d2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80023d4:	4b1a      	ldr	r3, [pc, #104]	; (8002440 <MX_ETH_Init+0x88>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80023da:	4b19      	ldr	r3, [pc, #100]	; (8002440 <MX_ETH_Init+0x88>)
 80023dc:	2200      	movs	r2, #0
 80023de:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80023e0:	4b17      	ldr	r3, [pc, #92]	; (8002440 <MX_ETH_Init+0x88>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80023e6:	4b14      	ldr	r3, [pc, #80]	; (8002438 <MX_ETH_Init+0x80>)
 80023e8:	4a15      	ldr	r2, [pc, #84]	; (8002440 <MX_ETH_Init+0x88>)
 80023ea:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80023ec:	4b12      	ldr	r3, [pc, #72]	; (8002438 <MX_ETH_Init+0x80>)
 80023ee:	2201      	movs	r2, #1
 80023f0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80023f2:	4b11      	ldr	r3, [pc, #68]	; (8002438 <MX_ETH_Init+0x80>)
 80023f4:	4a13      	ldr	r2, [pc, #76]	; (8002444 <MX_ETH_Init+0x8c>)
 80023f6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80023f8:	4b0f      	ldr	r3, [pc, #60]	; (8002438 <MX_ETH_Init+0x80>)
 80023fa:	4a13      	ldr	r2, [pc, #76]	; (8002448 <MX_ETH_Init+0x90>)
 80023fc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80023fe:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <MX_ETH_Init+0x80>)
 8002400:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002404:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8002406:	480c      	ldr	r0, [pc, #48]	; (8002438 <MX_ETH_Init+0x80>)
 8002408:	f000 fe28 	bl	800305c <HAL_ETH_Init>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8002412:	f000 fa69 	bl	80028e8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8002416:	2238      	movs	r2, #56	; 0x38
 8002418:	2100      	movs	r1, #0
 800241a:	480c      	ldr	r0, [pc, #48]	; (800244c <MX_ETH_Init+0x94>)
 800241c:	f004 f98a 	bl	8006734 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8002420:	4b0a      	ldr	r3, [pc, #40]	; (800244c <MX_ETH_Init+0x94>)
 8002422:	2221      	movs	r2, #33	; 0x21
 8002424:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8002426:	4b09      	ldr	r3, [pc, #36]	; (800244c <MX_ETH_Init+0x94>)
 8002428:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800242c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800242e:	4b07      	ldr	r3, [pc, #28]	; (800244c <MX_ETH_Init+0x94>)
 8002430:	2200      	movs	r2, #0
 8002432:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8002434:	bf00      	nop
 8002436:	bd80      	pop	{r7, pc}
 8002438:	240003bc 	.word	0x240003bc
 800243c:	40028000 	.word	0x40028000
 8002440:	24000a20 	.word	0x24000a20
 8002444:	24000300 	.word	0x24000300
 8002448:	240002a0 	.word	0x240002a0
 800244c:	24000384 	.word	0x24000384

08002450 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002454:	4b15      	ldr	r3, [pc, #84]	; (80024ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002456:	4a16      	ldr	r2, [pc, #88]	; (80024b0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8002458:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800245a:	4b14      	ldr	r3, [pc, #80]	; (80024ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800245c:	2209      	movs	r2, #9
 800245e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002460:	4b12      	ldr	r3, [pc, #72]	; (80024ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002462:	2202      	movs	r2, #2
 8002464:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002466:	4b11      	ldr	r3, [pc, #68]	; (80024ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002468:	2200      	movs	r2, #0
 800246a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800246c:	4b0f      	ldr	r3, [pc, #60]	; (80024ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800246e:	2202      	movs	r2, #2
 8002470:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002472:	4b0e      	ldr	r3, [pc, #56]	; (80024ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002474:	2200      	movs	r2, #0
 8002476:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002478:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800247a:	2200      	movs	r2, #0
 800247c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800247e:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002480:	2200      	movs	r2, #0
 8002482:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8002484:	4b09      	ldr	r3, [pc, #36]	; (80024ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002486:	2201      	movs	r2, #1
 8002488:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800248a:	4b08      	ldr	r3, [pc, #32]	; (80024ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800248c:	2201      	movs	r2, #1
 800248e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002490:	4b06      	ldr	r3, [pc, #24]	; (80024ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002492:	2200      	movs	r2, #0
 8002494:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002496:	4805      	ldr	r0, [pc, #20]	; (80024ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002498:	f001 fc16 	bl	8003cc8 <HAL_PCD_Init>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80024a2:	f000 fa21 	bl	80028e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	2400046c 	.word	0x2400046c
 80024b0:	40080000 	.word	0x40080000

080024b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024ba:	4b0a      	ldr	r3, [pc, #40]	; (80024e4 <MX_DMA_Init+0x30>)
 80024bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80024c0:	4a08      	ldr	r2, [pc, #32]	; (80024e4 <MX_DMA_Init+0x30>)
 80024c2:	f043 0301 	orr.w	r3, r3, #1
 80024c6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80024ca:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <MX_DMA_Init+0x30>)
 80024cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	607b      	str	r3, [r7, #4]
 80024d6:	687b      	ldr	r3, [r7, #4]

}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	58024400 	.word	0x58024400

080024e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b08a      	sub	sp, #40	; 0x28
 80024ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ee:	f107 0314 	add.w	r3, r7, #20
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	605a      	str	r2, [r3, #4]
 80024f8:	609a      	str	r2, [r3, #8]
 80024fa:	60da      	str	r2, [r3, #12]
 80024fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024fe:	4b32      	ldr	r3, [pc, #200]	; (80025c8 <MX_GPIO_Init+0xe0>)
 8002500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002504:	4a30      	ldr	r2, [pc, #192]	; (80025c8 <MX_GPIO_Init+0xe0>)
 8002506:	f043 0304 	orr.w	r3, r3, #4
 800250a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800250e:	4b2e      	ldr	r3, [pc, #184]	; (80025c8 <MX_GPIO_Init+0xe0>)
 8002510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	613b      	str	r3, [r7, #16]
 800251a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800251c:	4b2a      	ldr	r3, [pc, #168]	; (80025c8 <MX_GPIO_Init+0xe0>)
 800251e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002522:	4a29      	ldr	r2, [pc, #164]	; (80025c8 <MX_GPIO_Init+0xe0>)
 8002524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002528:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800252c:	4b26      	ldr	r3, [pc, #152]	; (80025c8 <MX_GPIO_Init+0xe0>)
 800252e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800253a:	4b23      	ldr	r3, [pc, #140]	; (80025c8 <MX_GPIO_Init+0xe0>)
 800253c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002540:	4a21      	ldr	r2, [pc, #132]	; (80025c8 <MX_GPIO_Init+0xe0>)
 8002542:	f043 0301 	orr.w	r3, r3, #1
 8002546:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800254a:	4b1f      	ldr	r3, [pc, #124]	; (80025c8 <MX_GPIO_Init+0xe0>)
 800254c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	60bb      	str	r3, [r7, #8]
 8002556:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002558:	4b1b      	ldr	r3, [pc, #108]	; (80025c8 <MX_GPIO_Init+0xe0>)
 800255a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800255e:	4a1a      	ldr	r2, [pc, #104]	; (80025c8 <MX_GPIO_Init+0xe0>)
 8002560:	f043 0302 	orr.w	r3, r3, #2
 8002564:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002568:	4b17      	ldr	r3, [pc, #92]	; (80025c8 <MX_GPIO_Init+0xe0>)
 800256a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	607b      	str	r3, [r7, #4]
 8002574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002576:	4b14      	ldr	r3, [pc, #80]	; (80025c8 <MX_GPIO_Init+0xe0>)
 8002578:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800257c:	4a12      	ldr	r2, [pc, #72]	; (80025c8 <MX_GPIO_Init+0xe0>)
 800257e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002582:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002586:	4b10      	ldr	r3, [pc, #64]	; (80025c8 <MX_GPIO_Init+0xe0>)
 8002588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800258c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002590:	603b      	str	r3, [r7, #0]
 8002592:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002594:	2200      	movs	r2, #0
 8002596:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800259a:	480c      	ldr	r0, [pc, #48]	; (80025cc <MX_GPIO_Init+0xe4>)
 800259c:	f001 fb32 	bl	8003c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80025a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025a6:	2301      	movs	r3, #1
 80025a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025aa:	2300      	movs	r3, #0
 80025ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ae:	2300      	movs	r3, #0
 80025b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80025b2:	f107 0314 	add.w	r3, r7, #20
 80025b6:	4619      	mov	r1, r3
 80025b8:	4804      	ldr	r0, [pc, #16]	; (80025cc <MX_GPIO_Init+0xe4>)
 80025ba:	f001 f973 	bl	80038a4 <HAL_GPIO_Init>

}
 80025be:	bf00      	nop
 80025c0:	3728      	adds	r7, #40	; 0x28
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	58024400 	.word	0x58024400
 80025cc:	58020400 	.word	0x58020400

080025d0 <ili_scr_1>:

/* USER CODE BEGIN 4 */
void ili_scr_1(){
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af02      	add	r7, sp, #8

	  ili9486_FillRect(0, 0, 480, 320, cl_BLACK);
 80025d6:	2300      	movs	r3, #0
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80025de:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80025e2:	2100      	movs	r1, #0
 80025e4:	2000      	movs	r0, #0
 80025e6:	f7fe f8a7 	bl	8000738 <ili9486_FillRect>

	  ili9486_FillRect(0, 300, 80, 20, cl_RED); // Red
 80025ea:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	2314      	movs	r3, #20
 80025f2:	2250      	movs	r2, #80	; 0x50
 80025f4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80025f8:	2000      	movs	r0, #0
 80025fa:	f7fe f89d 	bl	8000738 <ili9486_FillRect>
	  ili9486_FillRect(80, 300, 80, 20, cl_GREEN); // Green RGB565
 80025fe:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	2314      	movs	r3, #20
 8002606:	2250      	movs	r2, #80	; 0x50
 8002608:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800260c:	2050      	movs	r0, #80	; 0x50
 800260e:	f7fe f893 	bl	8000738 <ili9486_FillRect>
	  ili9486_FillRect(160, 300, 80, 20, cl_BLUE); // Blue
 8002612:	231f      	movs	r3, #31
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	2314      	movs	r3, #20
 8002618:	2250      	movs	r2, #80	; 0x50
 800261a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800261e:	20a0      	movs	r0, #160	; 0xa0
 8002620:	f7fe f88a 	bl	8000738 <ili9486_FillRect>
	  ili9486_FillRect(240, 300,  80, 20, cl_CYAN); // C0x07FF
 8002624:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	2314      	movs	r3, #20
 800262c:	2250      	movs	r2, #80	; 0x50
 800262e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002632:	20f0      	movs	r0, #240	; 0xf0
 8002634:	f7fe f880 	bl	8000738 <ili9486_FillRect>
	  ili9486_FillRect(320, 300, 80, 20, cl_MAGENTA); // M 0xF81F
 8002638:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	2314      	movs	r3, #20
 8002640:	2250      	movs	r2, #80	; 0x50
 8002642:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002646:	f44f 70a0 	mov.w	r0, #320	; 0x140
 800264a:	f7fe f875 	bl	8000738 <ili9486_FillRect>
	  ili9486_FillRect(400, 300, 80, 20, cl_YELLOW); // Y0xFFE0
 800264e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	2314      	movs	r3, #20
 8002656:	2250      	movs	r2, #80	; 0x50
 8002658:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800265c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002660:	f7fe f86a 	bl	8000738 <ili9486_FillRect>
	  //ili9486_FillRect(390, 30, 70, 230, cl_BLACK); // K
}
 8002664:	bf00      	nop
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
	...

0800266c <ili_seq_arrow>:

void ili_seq_arrow(){
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af04      	add	r7, sp, #16
	//ili9486_WriteStringNoBG(10, 10, " > STAMPR ----->>>-----", Font20, cl_WHITE);
	static uint8_t st_arr = 0;
	uint8_t xpoo = 166;
 8002672:	23a6      	movs	r3, #166	; 0xa6
 8002674:	71fb      	strb	r3, [r7, #7]
	uint8_t ypoo = 10;
 8002676:	230a      	movs	r3, #10
 8002678:	71bb      	strb	r3, [r7, #6]

	switch(st_arr){
 800267a:	4b8b      	ldr	r3, [pc, #556]	; (80028a8 <ili_seq_arrow+0x23c>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	3b01      	subs	r3, #1
 8002680:	2b0b      	cmp	r3, #11
 8002682:	d81b      	bhi.n	80026bc <ili_seq_arrow+0x50>
 8002684:	a201      	add	r2, pc, #4	; (adr r2, 800268c <ili_seq_arrow+0x20>)
 8002686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800268a:	bf00      	nop
 800268c:	080026df 	.word	0x080026df
 8002690:	08002701 	.word	0x08002701
 8002694:	08002723 	.word	0x08002723
 8002698:	08002745 	.word	0x08002745
 800269c:	08002767 	.word	0x08002767
 80026a0:	08002789 	.word	0x08002789
 80026a4:	080027ab 	.word	0x080027ab
 80026a8:	080027cd 	.word	0x080027cd
 80026ac:	080027ef 	.word	0x080027ef
 80026b0:	08002811 	.word	0x08002811
 80026b4:	08002833 	.word	0x08002833
 80026b8:	08002855 	.word	0x08002855
	default:
	case 0:
		ili9486_WriteString(xpoo, ypoo, "----->>>-----", Font20, cl_WHITE, cl_BLUE);
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	b298      	uxth	r0, r3
 80026c0:	79bb      	ldrb	r3, [r7, #6]
 80026c2:	b299      	uxth	r1, r3
 80026c4:	4b79      	ldr	r3, [pc, #484]	; (80028ac <ili_seq_arrow+0x240>)
 80026c6:	221f      	movs	r2, #31
 80026c8:	9202      	str	r2, [sp, #8]
 80026ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026ce:	9201      	str	r2, [sp, #4]
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	9200      	str	r2, [sp, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a76      	ldr	r2, [pc, #472]	; (80028b0 <ili_seq_arrow+0x244>)
 80026d8:	f7fe f9d7 	bl	8000a8a <ili9486_WriteString>
		break;
 80026dc:	e0cb      	b.n	8002876 <ili_seq_arrow+0x20a>
	case 1:
		ili9486_WriteString(xpoo, ypoo, "------>>>----", Font20, cl_WHITE, cl_BLUE);
 80026de:	79fb      	ldrb	r3, [r7, #7]
 80026e0:	b298      	uxth	r0, r3
 80026e2:	79bb      	ldrb	r3, [r7, #6]
 80026e4:	b299      	uxth	r1, r3
 80026e6:	4b71      	ldr	r3, [pc, #452]	; (80028ac <ili_seq_arrow+0x240>)
 80026e8:	221f      	movs	r2, #31
 80026ea:	9202      	str	r2, [sp, #8]
 80026ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026f0:	9201      	str	r2, [sp, #4]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	9200      	str	r2, [sp, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a6e      	ldr	r2, [pc, #440]	; (80028b4 <ili_seq_arrow+0x248>)
 80026fa:	f7fe f9c6 	bl	8000a8a <ili9486_WriteString>
		break;
 80026fe:	e0ba      	b.n	8002876 <ili_seq_arrow+0x20a>
	case 2:
		ili9486_WriteString(xpoo, ypoo, "------->>>---", Font20, cl_WHITE, cl_BLUE);
 8002700:	79fb      	ldrb	r3, [r7, #7]
 8002702:	b298      	uxth	r0, r3
 8002704:	79bb      	ldrb	r3, [r7, #6]
 8002706:	b299      	uxth	r1, r3
 8002708:	4b68      	ldr	r3, [pc, #416]	; (80028ac <ili_seq_arrow+0x240>)
 800270a:	221f      	movs	r2, #31
 800270c:	9202      	str	r2, [sp, #8]
 800270e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002712:	9201      	str	r2, [sp, #4]
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	9200      	str	r2, [sp, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a67      	ldr	r2, [pc, #412]	; (80028b8 <ili_seq_arrow+0x24c>)
 800271c:	f7fe f9b5 	bl	8000a8a <ili9486_WriteString>
		break;
 8002720:	e0a9      	b.n	8002876 <ili_seq_arrow+0x20a>
	case 3:
		ili9486_WriteString(xpoo, ypoo, "-------->>>--", Font20, cl_WHITE, cl_BLUE);
 8002722:	79fb      	ldrb	r3, [r7, #7]
 8002724:	b298      	uxth	r0, r3
 8002726:	79bb      	ldrb	r3, [r7, #6]
 8002728:	b299      	uxth	r1, r3
 800272a:	4b60      	ldr	r3, [pc, #384]	; (80028ac <ili_seq_arrow+0x240>)
 800272c:	221f      	movs	r2, #31
 800272e:	9202      	str	r2, [sp, #8]
 8002730:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002734:	9201      	str	r2, [sp, #4]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	9200      	str	r2, [sp, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a5f      	ldr	r2, [pc, #380]	; (80028bc <ili_seq_arrow+0x250>)
 800273e:	f7fe f9a4 	bl	8000a8a <ili9486_WriteString>
		break;
 8002742:	e098      	b.n	8002876 <ili_seq_arrow+0x20a>
	case 4:
		ili9486_WriteString(xpoo, ypoo, "--------->>>-", Font20, cl_WHITE, cl_BLUE);
 8002744:	79fb      	ldrb	r3, [r7, #7]
 8002746:	b298      	uxth	r0, r3
 8002748:	79bb      	ldrb	r3, [r7, #6]
 800274a:	b299      	uxth	r1, r3
 800274c:	4b57      	ldr	r3, [pc, #348]	; (80028ac <ili_seq_arrow+0x240>)
 800274e:	221f      	movs	r2, #31
 8002750:	9202      	str	r2, [sp, #8]
 8002752:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002756:	9201      	str	r2, [sp, #4]
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	9200      	str	r2, [sp, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a58      	ldr	r2, [pc, #352]	; (80028c0 <ili_seq_arrow+0x254>)
 8002760:	f7fe f993 	bl	8000a8a <ili9486_WriteString>
		break;
 8002764:	e087      	b.n	8002876 <ili_seq_arrow+0x20a>
	case 5:
		ili9486_WriteString(xpoo, ypoo, "---------->>>", Font20, cl_WHITE, cl_BLUE);
 8002766:	79fb      	ldrb	r3, [r7, #7]
 8002768:	b298      	uxth	r0, r3
 800276a:	79bb      	ldrb	r3, [r7, #6]
 800276c:	b299      	uxth	r1, r3
 800276e:	4b4f      	ldr	r3, [pc, #316]	; (80028ac <ili_seq_arrow+0x240>)
 8002770:	221f      	movs	r2, #31
 8002772:	9202      	str	r2, [sp, #8]
 8002774:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002778:	9201      	str	r2, [sp, #4]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	9200      	str	r2, [sp, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a50      	ldr	r2, [pc, #320]	; (80028c4 <ili_seq_arrow+0x258>)
 8002782:	f7fe f982 	bl	8000a8a <ili9486_WriteString>
		break;
 8002786:	e076      	b.n	8002876 <ili_seq_arrow+0x20a>
	case 6:
		ili9486_WriteString(xpoo, ypoo, ">---------->>", Font20, cl_WHITE, cl_BLUE);
 8002788:	79fb      	ldrb	r3, [r7, #7]
 800278a:	b298      	uxth	r0, r3
 800278c:	79bb      	ldrb	r3, [r7, #6]
 800278e:	b299      	uxth	r1, r3
 8002790:	4b46      	ldr	r3, [pc, #280]	; (80028ac <ili_seq_arrow+0x240>)
 8002792:	221f      	movs	r2, #31
 8002794:	9202      	str	r2, [sp, #8]
 8002796:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800279a:	9201      	str	r2, [sp, #4]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	9200      	str	r2, [sp, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a49      	ldr	r2, [pc, #292]	; (80028c8 <ili_seq_arrow+0x25c>)
 80027a4:	f7fe f971 	bl	8000a8a <ili9486_WriteString>
		break;
 80027a8:	e065      	b.n	8002876 <ili_seq_arrow+0x20a>
	case 7:
		ili9486_WriteString(xpoo, ypoo, ">>---------->", Font20, cl_WHITE, cl_BLUE);
 80027aa:	79fb      	ldrb	r3, [r7, #7]
 80027ac:	b298      	uxth	r0, r3
 80027ae:	79bb      	ldrb	r3, [r7, #6]
 80027b0:	b299      	uxth	r1, r3
 80027b2:	4b3e      	ldr	r3, [pc, #248]	; (80028ac <ili_seq_arrow+0x240>)
 80027b4:	221f      	movs	r2, #31
 80027b6:	9202      	str	r2, [sp, #8]
 80027b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027bc:	9201      	str	r2, [sp, #4]
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	9200      	str	r2, [sp, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a41      	ldr	r2, [pc, #260]	; (80028cc <ili_seq_arrow+0x260>)
 80027c6:	f7fe f960 	bl	8000a8a <ili9486_WriteString>
		break;
 80027ca:	e054      	b.n	8002876 <ili_seq_arrow+0x20a>
	case 8:
		ili9486_WriteString(xpoo, ypoo, ">>>----------", Font20, cl_WHITE, cl_BLUE);
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	b298      	uxth	r0, r3
 80027d0:	79bb      	ldrb	r3, [r7, #6]
 80027d2:	b299      	uxth	r1, r3
 80027d4:	4b35      	ldr	r3, [pc, #212]	; (80028ac <ili_seq_arrow+0x240>)
 80027d6:	221f      	movs	r2, #31
 80027d8:	9202      	str	r2, [sp, #8]
 80027da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027de:	9201      	str	r2, [sp, #4]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	9200      	str	r2, [sp, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a3a      	ldr	r2, [pc, #232]	; (80028d0 <ili_seq_arrow+0x264>)
 80027e8:	f7fe f94f 	bl	8000a8a <ili9486_WriteString>
		break;
 80027ec:	e043      	b.n	8002876 <ili_seq_arrow+0x20a>
	case 9:
		ili9486_WriteString(xpoo, ypoo, "->>>---------", Font20, cl_WHITE, cl_BLUE);
 80027ee:	79fb      	ldrb	r3, [r7, #7]
 80027f0:	b298      	uxth	r0, r3
 80027f2:	79bb      	ldrb	r3, [r7, #6]
 80027f4:	b299      	uxth	r1, r3
 80027f6:	4b2d      	ldr	r3, [pc, #180]	; (80028ac <ili_seq_arrow+0x240>)
 80027f8:	221f      	movs	r2, #31
 80027fa:	9202      	str	r2, [sp, #8]
 80027fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002800:	9201      	str	r2, [sp, #4]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	9200      	str	r2, [sp, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a32      	ldr	r2, [pc, #200]	; (80028d4 <ili_seq_arrow+0x268>)
 800280a:	f7fe f93e 	bl	8000a8a <ili9486_WriteString>
		break;
 800280e:	e032      	b.n	8002876 <ili_seq_arrow+0x20a>
	case 10:
		ili9486_WriteString(xpoo, ypoo, "-->>>--------", Font20, cl_WHITE, cl_BLUE);
 8002810:	79fb      	ldrb	r3, [r7, #7]
 8002812:	b298      	uxth	r0, r3
 8002814:	79bb      	ldrb	r3, [r7, #6]
 8002816:	b299      	uxth	r1, r3
 8002818:	4b24      	ldr	r3, [pc, #144]	; (80028ac <ili_seq_arrow+0x240>)
 800281a:	221f      	movs	r2, #31
 800281c:	9202      	str	r2, [sp, #8]
 800281e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002822:	9201      	str	r2, [sp, #4]
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	9200      	str	r2, [sp, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a2b      	ldr	r2, [pc, #172]	; (80028d8 <ili_seq_arrow+0x26c>)
 800282c:	f7fe f92d 	bl	8000a8a <ili9486_WriteString>
		break;
 8002830:	e021      	b.n	8002876 <ili_seq_arrow+0x20a>
	case 11:
		ili9486_WriteString(xpoo, ypoo, "--->>>-------", Font20, cl_WHITE, cl_BLUE);
 8002832:	79fb      	ldrb	r3, [r7, #7]
 8002834:	b298      	uxth	r0, r3
 8002836:	79bb      	ldrb	r3, [r7, #6]
 8002838:	b299      	uxth	r1, r3
 800283a:	4b1c      	ldr	r3, [pc, #112]	; (80028ac <ili_seq_arrow+0x240>)
 800283c:	221f      	movs	r2, #31
 800283e:	9202      	str	r2, [sp, #8]
 8002840:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002844:	9201      	str	r2, [sp, #4]
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	9200      	str	r2, [sp, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a23      	ldr	r2, [pc, #140]	; (80028dc <ili_seq_arrow+0x270>)
 800284e:	f7fe f91c 	bl	8000a8a <ili9486_WriteString>
		break;
 8002852:	e010      	b.n	8002876 <ili_seq_arrow+0x20a>
	case 12:
		ili9486_WriteString(xpoo, ypoo, "---->>>------", Font20, cl_WHITE, cl_BLUE);
 8002854:	79fb      	ldrb	r3, [r7, #7]
 8002856:	b298      	uxth	r0, r3
 8002858:	79bb      	ldrb	r3, [r7, #6]
 800285a:	b299      	uxth	r1, r3
 800285c:	4b13      	ldr	r3, [pc, #76]	; (80028ac <ili_seq_arrow+0x240>)
 800285e:	221f      	movs	r2, #31
 8002860:	9202      	str	r2, [sp, #8]
 8002862:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002866:	9201      	str	r2, [sp, #4]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	9200      	str	r2, [sp, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a1c      	ldr	r2, [pc, #112]	; (80028e0 <ili_seq_arrow+0x274>)
 8002870:	f7fe f90b 	bl	8000a8a <ili9486_WriteString>
		break;
 8002874:	bf00      	nop
	}
	st_arr++;
 8002876:	4b0c      	ldr	r3, [pc, #48]	; (80028a8 <ili_seq_arrow+0x23c>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	3301      	adds	r3, #1
 800287c:	b2da      	uxtb	r2, r3
 800287e:	4b0a      	ldr	r3, [pc, #40]	; (80028a8 <ili_seq_arrow+0x23c>)
 8002880:	701a      	strb	r2, [r3, #0]
	st_arr%=13;
 8002882:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <ili_seq_arrow+0x23c>)
 8002884:	7819      	ldrb	r1, [r3, #0]
 8002886:	4b17      	ldr	r3, [pc, #92]	; (80028e4 <ili_seq_arrow+0x278>)
 8002888:	fba3 2301 	umull	r2, r3, r3, r1
 800288c:	089a      	lsrs	r2, r3, #2
 800288e:	4613      	mov	r3, r2
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	4413      	add	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	1acb      	subs	r3, r1, r3
 800289a:	b2da      	uxtb	r2, r3
 800289c:	4b02      	ldr	r3, [pc, #8]	; (80028a8 <ili_seq_arrow+0x23c>)
 800289e:	701a      	strb	r2, [r3, #0]
}
 80028a0:	bf00      	nop
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	24000a26 	.word	0x24000a26
 80028ac:	24000018 	.word	0x24000018
 80028b0:	08007170 	.word	0x08007170
 80028b4:	08007180 	.word	0x08007180
 80028b8:	08007190 	.word	0x08007190
 80028bc:	080071a0 	.word	0x080071a0
 80028c0:	080071b0 	.word	0x080071b0
 80028c4:	080071c0 	.word	0x080071c0
 80028c8:	080071d0 	.word	0x080071d0
 80028cc:	080071e0 	.word	0x080071e0
 80028d0:	080071f0 	.word	0x080071f0
 80028d4:	08007200 	.word	0x08007200
 80028d8:	08007210 	.word	0x08007210
 80028dc:	08007220 	.word	0x08007220
 80028e0:	08007230 	.word	0x08007230
 80028e4:	4ec4ec4f 	.word	0x4ec4ec4f

080028e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028ec:	b672      	cpsid	i
}
 80028ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028f0:	e7fe      	b.n	80028f0 <Error_Handler+0x8>
	...

080028f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028fa:	4b0a      	ldr	r3, [pc, #40]	; (8002924 <HAL_MspInit+0x30>)
 80028fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002900:	4a08      	ldr	r2, [pc, #32]	; (8002924 <HAL_MspInit+0x30>)
 8002902:	f043 0302 	orr.w	r3, r3, #2
 8002906:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800290a:	4b06      	ldr	r3, [pc, #24]	; (8002924 <HAL_MspInit+0x30>)
 800290c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	607b      	str	r3, [r7, #4]
 8002916:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	58024400 	.word	0x58024400

08002928 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b08e      	sub	sp, #56	; 0x38
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	605a      	str	r2, [r3, #4]
 800293a:	609a      	str	r2, [r3, #8]
 800293c:	60da      	str	r2, [r3, #12]
 800293e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a59      	ldr	r2, [pc, #356]	; (8002aac <HAL_ETH_MspInit+0x184>)
 8002946:	4293      	cmp	r3, r2
 8002948:	f040 80ab 	bne.w	8002aa2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800294c:	4b58      	ldr	r3, [pc, #352]	; (8002ab0 <HAL_ETH_MspInit+0x188>)
 800294e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002952:	4a57      	ldr	r2, [pc, #348]	; (8002ab0 <HAL_ETH_MspInit+0x188>)
 8002954:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002958:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800295c:	4b54      	ldr	r3, [pc, #336]	; (8002ab0 <HAL_ETH_MspInit+0x188>)
 800295e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002962:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002966:	623b      	str	r3, [r7, #32]
 8002968:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800296a:	4b51      	ldr	r3, [pc, #324]	; (8002ab0 <HAL_ETH_MspInit+0x188>)
 800296c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002970:	4a4f      	ldr	r2, [pc, #316]	; (8002ab0 <HAL_ETH_MspInit+0x188>)
 8002972:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002976:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800297a:	4b4d      	ldr	r3, [pc, #308]	; (8002ab0 <HAL_ETH_MspInit+0x188>)
 800297c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002984:	61fb      	str	r3, [r7, #28]
 8002986:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8002988:	4b49      	ldr	r3, [pc, #292]	; (8002ab0 <HAL_ETH_MspInit+0x188>)
 800298a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800298e:	4a48      	ldr	r2, [pc, #288]	; (8002ab0 <HAL_ETH_MspInit+0x188>)
 8002990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002994:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002998:	4b45      	ldr	r3, [pc, #276]	; (8002ab0 <HAL_ETH_MspInit+0x188>)
 800299a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800299e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a2:	61bb      	str	r3, [r7, #24]
 80029a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029a6:	4b42      	ldr	r3, [pc, #264]	; (8002ab0 <HAL_ETH_MspInit+0x188>)
 80029a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029ac:	4a40      	ldr	r2, [pc, #256]	; (8002ab0 <HAL_ETH_MspInit+0x188>)
 80029ae:	f043 0304 	orr.w	r3, r3, #4
 80029b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029b6:	4b3e      	ldr	r3, [pc, #248]	; (8002ab0 <HAL_ETH_MspInit+0x188>)
 80029b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	617b      	str	r3, [r7, #20]
 80029c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c4:	4b3a      	ldr	r3, [pc, #232]	; (8002ab0 <HAL_ETH_MspInit+0x188>)
 80029c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029ca:	4a39      	ldr	r2, [pc, #228]	; (8002ab0 <HAL_ETH_MspInit+0x188>)
 80029cc:	f043 0301 	orr.w	r3, r3, #1
 80029d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029d4:	4b36      	ldr	r3, [pc, #216]	; (8002ab0 <HAL_ETH_MspInit+0x188>)
 80029d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	613b      	str	r3, [r7, #16]
 80029e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029e2:	4b33      	ldr	r3, [pc, #204]	; (8002ab0 <HAL_ETH_MspInit+0x188>)
 80029e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029e8:	4a31      	ldr	r2, [pc, #196]	; (8002ab0 <HAL_ETH_MspInit+0x188>)
 80029ea:	f043 0302 	orr.w	r3, r3, #2
 80029ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029f2:	4b2f      	ldr	r3, [pc, #188]	; (8002ab0 <HAL_ETH_MspInit+0x188>)
 80029f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a00:	4b2b      	ldr	r3, [pc, #172]	; (8002ab0 <HAL_ETH_MspInit+0x188>)
 8002a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a06:	4a2a      	ldr	r2, [pc, #168]	; (8002ab0 <HAL_ETH_MspInit+0x188>)
 8002a08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a10:	4b27      	ldr	r3, [pc, #156]	; (8002ab0 <HAL_ETH_MspInit+0x188>)
 8002a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a1a:	60bb      	str	r3, [r7, #8]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002a1e:	2332      	movs	r3, #50	; 0x32
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a22:	2302      	movs	r3, #2
 8002a24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a2e:	230b      	movs	r3, #11
 8002a30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a36:	4619      	mov	r1, r3
 8002a38:	481e      	ldr	r0, [pc, #120]	; (8002ab4 <HAL_ETH_MspInit+0x18c>)
 8002a3a:	f000 ff33 	bl	80038a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8002a3e:	2386      	movs	r3, #134	; 0x86
 8002a40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a42:	2302      	movs	r3, #2
 8002a44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a46:	2300      	movs	r3, #0
 8002a48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a4e:	230b      	movs	r3, #11
 8002a50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a56:	4619      	mov	r1, r3
 8002a58:	4817      	ldr	r0, [pc, #92]	; (8002ab8 <HAL_ETH_MspInit+0x190>)
 8002a5a:	f000 ff23 	bl	80038a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002a5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a64:	2302      	movs	r3, #2
 8002a66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a70:	230b      	movs	r3, #11
 8002a72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4810      	ldr	r0, [pc, #64]	; (8002abc <HAL_ETH_MspInit+0x194>)
 8002a7c:	f000 ff12 	bl	80038a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8002a80:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002a84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a86:	2302      	movs	r3, #2
 8002a88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a92:	230b      	movs	r3, #11
 8002a94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4808      	ldr	r0, [pc, #32]	; (8002ac0 <HAL_ETH_MspInit+0x198>)
 8002a9e:	f000 ff01 	bl	80038a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002aa2:	bf00      	nop
 8002aa4:	3738      	adds	r7, #56	; 0x38
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40028000 	.word	0x40028000
 8002ab0:	58024400 	.word	0x58024400
 8002ab4:	58020800 	.word	0x58020800
 8002ab8:	58020000 	.word	0x58020000
 8002abc:	58020400 	.word	0x58020400
 8002ac0:	58021800 	.word	0x58021800

08002ac4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b0b8      	sub	sp, #224	; 0xe0
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002acc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	605a      	str	r2, [r3, #4]
 8002ad6:	609a      	str	r2, [r3, #8]
 8002ad8:	60da      	str	r2, [r3, #12]
 8002ada:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002adc:	f107 0310 	add.w	r3, r7, #16
 8002ae0:	22bc      	movs	r2, #188	; 0xbc
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f003 fe25 	bl	8006734 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a36      	ldr	r2, [pc, #216]	; (8002bc8 <HAL_PCD_MspInit+0x104>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d165      	bne.n	8002bc0 <HAL_PCD_MspInit+0xfc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002af4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002af8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8002afa:	2301      	movs	r3, #1
 8002afc:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 8002afe:	2318      	movs	r3, #24
 8002b00:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002b02:	2302      	movs	r3, #2
 8002b04:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8002b06:	2304      	movs	r3, #4
 8002b08:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8002b0e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b12:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8002b14:	2300      	movs	r3, #0
 8002b16:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8002b18:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b1c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b20:	f107 0310 	add.w	r3, r7, #16
 8002b24:	4618      	mov	r0, r3
 8002b26:	f002 fa0f 	bl	8004f48 <HAL_RCCEx_PeriphCLKConfig>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8002b30:	f7ff feda 	bl	80028e8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002b34:	f001 fa6a 	bl	800400c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b38:	4b24      	ldr	r3, [pc, #144]	; (8002bcc <HAL_PCD_MspInit+0x108>)
 8002b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b3e:	4a23      	ldr	r2, [pc, #140]	; (8002bcc <HAL_PCD_MspInit+0x108>)
 8002b40:	f043 0301 	orr.w	r3, r3, #1
 8002b44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b48:	4b20      	ldr	r3, [pc, #128]	; (8002bcc <HAL_PCD_MspInit+0x108>)
 8002b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8002b56:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8002b5a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5e:	2302      	movs	r3, #2
 8002b60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b64:	2300      	movs	r3, #0
 8002b66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002b70:	230a      	movs	r3, #10
 8002b72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b76:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	4814      	ldr	r0, [pc, #80]	; (8002bd0 <HAL_PCD_MspInit+0x10c>)
 8002b7e:	f000 fe91 	bl	80038a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b90:	2300      	movs	r3, #0
 8002b92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b96:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	480c      	ldr	r0, [pc, #48]	; (8002bd0 <HAL_PCD_MspInit+0x10c>)
 8002b9e:	f000 fe81 	bl	80038a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002ba2:	4b0a      	ldr	r3, [pc, #40]	; (8002bcc <HAL_PCD_MspInit+0x108>)
 8002ba4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002ba8:	4a08      	ldr	r2, [pc, #32]	; (8002bcc <HAL_PCD_MspInit+0x108>)
 8002baa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002bae:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002bb2:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <HAL_PCD_MspInit+0x108>)
 8002bb4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002bb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bbc:	60bb      	str	r3, [r7, #8]
 8002bbe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002bc0:	bf00      	nop
 8002bc2:	37e0      	adds	r7, #224	; 0xe0
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40080000 	.word	0x40080000
 8002bcc:	58024400 	.word	0x58024400
 8002bd0:	58020000 	.word	0x58020000

08002bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bd8:	e7fe      	b.n	8002bd8 <NMI_Handler+0x4>

08002bda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bde:	e7fe      	b.n	8002bde <HardFault_Handler+0x4>

08002be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002be4:	e7fe      	b.n	8002be4 <MemManage_Handler+0x4>

08002be6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002be6:	b480      	push	{r7}
 8002be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bea:	e7fe      	b.n	8002bea <BusFault_Handler+0x4>

08002bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bf0:	e7fe      	b.n	8002bf0 <UsageFault_Handler+0x4>

08002bf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bf6:	bf00      	nop
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c04:	bf00      	nop
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c12:	bf00      	nop
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c20:	f000 f8d4 	bl	8002dcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c24:	bf00      	nop
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c30:	4a14      	ldr	r2, [pc, #80]	; (8002c84 <_sbrk+0x5c>)
 8002c32:	4b15      	ldr	r3, [pc, #84]	; (8002c88 <_sbrk+0x60>)
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c3c:	4b13      	ldr	r3, [pc, #76]	; (8002c8c <_sbrk+0x64>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d102      	bne.n	8002c4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c44:	4b11      	ldr	r3, [pc, #68]	; (8002c8c <_sbrk+0x64>)
 8002c46:	4a12      	ldr	r2, [pc, #72]	; (8002c90 <_sbrk+0x68>)
 8002c48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c4a:	4b10      	ldr	r3, [pc, #64]	; (8002c8c <_sbrk+0x64>)
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4413      	add	r3, r2
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d207      	bcs.n	8002c68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c58:	f003 fd32 	bl	80066c0 <__errno>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	220c      	movs	r2, #12
 8002c60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c62:	f04f 33ff 	mov.w	r3, #4294967295
 8002c66:	e009      	b.n	8002c7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c68:	4b08      	ldr	r3, [pc, #32]	; (8002c8c <_sbrk+0x64>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c6e:	4b07      	ldr	r3, [pc, #28]	; (8002c8c <_sbrk+0x64>)
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4413      	add	r3, r2
 8002c76:	4a05      	ldr	r2, [pc, #20]	; (8002c8c <_sbrk+0x64>)
 8002c78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3718      	adds	r7, #24
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	24080000 	.word	0x24080000
 8002c88:	00000400 	.word	0x00000400
 8002c8c:	24000a28 	.word	0x24000a28
 8002c90:	24000a40 	.word	0x24000a40

08002c94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002c94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ccc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002c98:	f7fd fb72 	bl	8000380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c9c:	480c      	ldr	r0, [pc, #48]	; (8002cd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c9e:	490d      	ldr	r1, [pc, #52]	; (8002cd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ca0:	4a0d      	ldr	r2, [pc, #52]	; (8002cd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ca2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ca4:	e002      	b.n	8002cac <LoopCopyDataInit>

08002ca6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ca6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ca8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002caa:	3304      	adds	r3, #4

08002cac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cb0:	d3f9      	bcc.n	8002ca6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cb2:	4a0a      	ldr	r2, [pc, #40]	; (8002cdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002cb4:	4c0a      	ldr	r4, [pc, #40]	; (8002ce0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002cb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cb8:	e001      	b.n	8002cbe <LoopFillZerobss>

08002cba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cbc:	3204      	adds	r2, #4

08002cbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cc0:	d3fb      	bcc.n	8002cba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cc2:	f003 fd03 	bl	80066cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cc6:	f7fe ffd9 	bl	8001c7c <main>
  bx  lr
 8002cca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ccc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002cd0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002cd4:	240002a0 	.word	0x240002a0
  ldr r2, =_sidata
 8002cd8:	08047300 	.word	0x08047300
  ldr r2, =_sbss
 8002cdc:	24000360 	.word	0x24000360
  ldr r4, =_ebss
 8002ce0:	24000a40 	.word	0x24000a40

08002ce4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ce4:	e7fe      	b.n	8002ce4 <ADC3_IRQHandler>
	...

08002ce8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cee:	2003      	movs	r0, #3
 8002cf0:	f000 f982 	bl	8002ff8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002cf4:	f001 ff7e 	bl	8004bf4 <HAL_RCC_GetSysClockFreq>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	4b15      	ldr	r3, [pc, #84]	; (8002d50 <HAL_Init+0x68>)
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	0a1b      	lsrs	r3, r3, #8
 8002d00:	f003 030f 	and.w	r3, r3, #15
 8002d04:	4913      	ldr	r1, [pc, #76]	; (8002d54 <HAL_Init+0x6c>)
 8002d06:	5ccb      	ldrb	r3, [r1, r3]
 8002d08:	f003 031f 	and.w	r3, r3, #31
 8002d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d10:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d12:	4b0f      	ldr	r3, [pc, #60]	; (8002d50 <HAL_Init+0x68>)
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	f003 030f 	and.w	r3, r3, #15
 8002d1a:	4a0e      	ldr	r2, [pc, #56]	; (8002d54 <HAL_Init+0x6c>)
 8002d1c:	5cd3      	ldrb	r3, [r2, r3]
 8002d1e:	f003 031f 	and.w	r3, r3, #31
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	fa22 f303 	lsr.w	r3, r2, r3
 8002d28:	4a0b      	ldr	r2, [pc, #44]	; (8002d58 <HAL_Init+0x70>)
 8002d2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d2c:	4a0b      	ldr	r2, [pc, #44]	; (8002d5c <HAL_Init+0x74>)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d32:	2000      	movs	r0, #0
 8002d34:	f000 f814 	bl	8002d60 <HAL_InitTick>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e002      	b.n	8002d48 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002d42:	f7ff fdd7 	bl	80028f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	58024400 	.word	0x58024400
 8002d54:	08007240 	.word	0x08007240
 8002d58:	24000004 	.word	0x24000004
 8002d5c:	24000000 	.word	0x24000000

08002d60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002d68:	4b15      	ldr	r3, [pc, #84]	; (8002dc0 <HAL_InitTick+0x60>)
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e021      	b.n	8002db8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002d74:	4b13      	ldr	r3, [pc, #76]	; (8002dc4 <HAL_InitTick+0x64>)
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	4b11      	ldr	r3, [pc, #68]	; (8002dc0 <HAL_InitTick+0x60>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d82:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 f959 	bl	8003042 <HAL_SYSTICK_Config>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e00e      	b.n	8002db8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b0f      	cmp	r3, #15
 8002d9e:	d80a      	bhi.n	8002db6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002da0:	2200      	movs	r2, #0
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	f04f 30ff 	mov.w	r0, #4294967295
 8002da8:	f000 f931 	bl	800300e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dac:	4a06      	ldr	r2, [pc, #24]	; (8002dc8 <HAL_InitTick+0x68>)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
 8002db4:	e000      	b.n	8002db8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3708      	adds	r7, #8
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	24000238 	.word	0x24000238
 8002dc4:	24000000 	.word	0x24000000
 8002dc8:	24000234 	.word	0x24000234

08002dcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002dd0:	4b06      	ldr	r3, [pc, #24]	; (8002dec <HAL_IncTick+0x20>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <HAL_IncTick+0x24>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4413      	add	r3, r2
 8002ddc:	4a04      	ldr	r2, [pc, #16]	; (8002df0 <HAL_IncTick+0x24>)
 8002dde:	6013      	str	r3, [r2, #0]
}
 8002de0:	bf00      	nop
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	24000238 	.word	0x24000238
 8002df0:	24000a2c 	.word	0x24000a2c

08002df4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  return uwTick;
 8002df8:	4b03      	ldr	r3, [pc, #12]	; (8002e08 <HAL_GetTick+0x14>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	24000a2c 	.word	0x24000a2c

08002e0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e14:	f7ff ffee 	bl	8002df4 <HAL_GetTick>
 8002e18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e24:	d005      	beq.n	8002e32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e26:	4b0a      	ldr	r3, [pc, #40]	; (8002e50 <HAL_Delay+0x44>)
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	4413      	add	r3, r2
 8002e30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e32:	bf00      	nop
 8002e34:	f7ff ffde 	bl	8002df4 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d8f7      	bhi.n	8002e34 <HAL_Delay+0x28>
  {
  }
}
 8002e44:	bf00      	nop
 8002e46:	bf00      	nop
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	24000238 	.word	0x24000238

08002e54 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002e58:	4b03      	ldr	r3, [pc, #12]	; (8002e68 <HAL_GetREVID+0x14>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	0c1b      	lsrs	r3, r3, #16
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	5c001000 	.word	0x5c001000

08002e6c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002e74:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002e7c:	4904      	ldr	r1, [pc, #16]	; (8002e90 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	604b      	str	r3, [r1, #4]
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	58000400 	.word	0x58000400

08002e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ea4:	4b0b      	ldr	r3, [pc, #44]	; (8002ed4 <__NVIC_SetPriorityGrouping+0x40>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eaa:	68ba      	ldr	r2, [r7, #8]
 8002eac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ebc:	4b06      	ldr	r3, [pc, #24]	; (8002ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ec2:	4a04      	ldr	r2, [pc, #16]	; (8002ed4 <__NVIC_SetPriorityGrouping+0x40>)
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	60d3      	str	r3, [r2, #12]
}
 8002ec8:	bf00      	nop
 8002eca:	3714      	adds	r7, #20
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	e000ed00 	.word	0xe000ed00
 8002ed8:	05fa0000 	.word	0x05fa0000

08002edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ee0:	4b04      	ldr	r3, [pc, #16]	; (8002ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	0a1b      	lsrs	r3, r3, #8
 8002ee6:	f003 0307 	and.w	r3, r3, #7
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	e000ed00 	.word	0xe000ed00

08002ef8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	4603      	mov	r3, r0
 8002f00:	6039      	str	r1, [r7, #0]
 8002f02:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	db0a      	blt.n	8002f22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	b2da      	uxtb	r2, r3
 8002f10:	490c      	ldr	r1, [pc, #48]	; (8002f44 <__NVIC_SetPriority+0x4c>)
 8002f12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f16:	0112      	lsls	r2, r2, #4
 8002f18:	b2d2      	uxtb	r2, r2
 8002f1a:	440b      	add	r3, r1
 8002f1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f20:	e00a      	b.n	8002f38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	4908      	ldr	r1, [pc, #32]	; (8002f48 <__NVIC_SetPriority+0x50>)
 8002f28:	88fb      	ldrh	r3, [r7, #6]
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	3b04      	subs	r3, #4
 8002f30:	0112      	lsls	r2, r2, #4
 8002f32:	b2d2      	uxtb	r2, r2
 8002f34:	440b      	add	r3, r1
 8002f36:	761a      	strb	r2, [r3, #24]
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	e000e100 	.word	0xe000e100
 8002f48:	e000ed00 	.word	0xe000ed00

08002f4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b089      	sub	sp, #36	; 0x24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	f1c3 0307 	rsb	r3, r3, #7
 8002f66:	2b04      	cmp	r3, #4
 8002f68:	bf28      	it	cs
 8002f6a:	2304      	movcs	r3, #4
 8002f6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	3304      	adds	r3, #4
 8002f72:	2b06      	cmp	r3, #6
 8002f74:	d902      	bls.n	8002f7c <NVIC_EncodePriority+0x30>
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	3b03      	subs	r3, #3
 8002f7a:	e000      	b.n	8002f7e <NVIC_EncodePriority+0x32>
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f80:	f04f 32ff 	mov.w	r2, #4294967295
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8a:	43da      	mvns	r2, r3
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	401a      	ands	r2, r3
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f94:	f04f 31ff 	mov.w	r1, #4294967295
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f9e:	43d9      	mvns	r1, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fa4:	4313      	orrs	r3, r2
         );
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3724      	adds	r7, #36	; 0x24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
	...

08002fb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fc4:	d301      	bcc.n	8002fca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e00f      	b.n	8002fea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fca:	4a0a      	ldr	r2, [pc, #40]	; (8002ff4 <SysTick_Config+0x40>)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fd2:	210f      	movs	r1, #15
 8002fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fd8:	f7ff ff8e 	bl	8002ef8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fdc:	4b05      	ldr	r3, [pc, #20]	; (8002ff4 <SysTick_Config+0x40>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fe2:	4b04      	ldr	r3, [pc, #16]	; (8002ff4 <SysTick_Config+0x40>)
 8002fe4:	2207      	movs	r2, #7
 8002fe6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	e000e010 	.word	0xe000e010

08002ff8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f7ff ff47 	bl	8002e94 <__NVIC_SetPriorityGrouping>
}
 8003006:	bf00      	nop
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b086      	sub	sp, #24
 8003012:	af00      	add	r7, sp, #0
 8003014:	4603      	mov	r3, r0
 8003016:	60b9      	str	r1, [r7, #8]
 8003018:	607a      	str	r2, [r7, #4]
 800301a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800301c:	f7ff ff5e 	bl	8002edc <__NVIC_GetPriorityGrouping>
 8003020:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	68b9      	ldr	r1, [r7, #8]
 8003026:	6978      	ldr	r0, [r7, #20]
 8003028:	f7ff ff90 	bl	8002f4c <NVIC_EncodePriority>
 800302c:	4602      	mov	r2, r0
 800302e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003032:	4611      	mov	r1, r2
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff ff5f 	bl	8002ef8 <__NVIC_SetPriority>
}
 800303a:	bf00      	nop
 800303c:	3718      	adds	r7, #24
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b082      	sub	sp, #8
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7ff ffb2 	bl	8002fb4 <SysTick_Config>
 8003050:	4603      	mov	r3, r0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
	...

0800305c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e0cf      	b.n	800320e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003074:	2b00      	cmp	r3, #0
 8003076:	d106      	bne.n	8003086 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2223      	movs	r2, #35	; 0x23
 800307c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f7ff fc51 	bl	8002928 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003086:	4b64      	ldr	r3, [pc, #400]	; (8003218 <HAL_ETH_Init+0x1bc>)
 8003088:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800308c:	4a62      	ldr	r2, [pc, #392]	; (8003218 <HAL_ETH_Init+0x1bc>)
 800308e:	f043 0302 	orr.w	r3, r3, #2
 8003092:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003096:	4b60      	ldr	r3, [pc, #384]	; (8003218 <HAL_ETH_Init+0x1bc>)
 8003098:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	60bb      	str	r3, [r7, #8]
 80030a2:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	7a1b      	ldrb	r3, [r3, #8]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d103      	bne.n	80030b4 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80030ac:	2000      	movs	r0, #0
 80030ae:	f7ff fedd 	bl	8002e6c <HAL_SYSCFG_ETHInterfaceSelect>
 80030b2:	e003      	b.n	80030bc <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80030b4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80030b8:	f7ff fed8 	bl	8002e6c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80030bc:	4b57      	ldr	r3, [pc, #348]	; (800321c <HAL_ETH_Init+0x1c0>)
 80030be:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	6812      	ldr	r2, [r2, #0]
 80030ce:	f043 0301 	orr.w	r3, r3, #1
 80030d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80030d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030d8:	f7ff fe8c 	bl	8002df4 <HAL_GetTick>
 80030dc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80030de:	e011      	b.n	8003104 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80030e0:	f7ff fe88 	bl	8002df4 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80030ee:	d909      	bls.n	8003104 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2204      	movs	r2, #4
 80030f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	22e0      	movs	r2, #224	; 0xe0
 80030fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e084      	b.n	800320e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1e4      	bne.n	80030e0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f886 	bl	8003228 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800311c:	f001 fee4 	bl	8004ee8 <HAL_RCC_GetHCLKFreq>
 8003120:	4603      	mov	r3, r0
 8003122:	4a3f      	ldr	r2, [pc, #252]	; (8003220 <HAL_ETH_Init+0x1c4>)
 8003124:	fba2 2303 	umull	r2, r3, r2, r3
 8003128:	0c9a      	lsrs	r2, r3, #18
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	3a01      	subs	r2, #1
 8003130:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 fa71 	bl	800361c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003142:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003146:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6812      	ldr	r2, [r2, #0]
 800314e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003152:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003156:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	f003 0303 	and.w	r3, r3, #3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d009      	beq.n	800317a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	22e0      	movs	r2, #224	; 0xe0
 8003172:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e049      	b.n	800320e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003182:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003186:	4b27      	ldr	r3, [pc, #156]	; (8003224 <HAL_ETH_Init+0x1c8>)
 8003188:	4013      	ands	r3, r2
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	6952      	ldr	r2, [r2, #20]
 800318e:	0051      	lsls	r1, r2, #1
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6812      	ldr	r2, [r2, #0]
 8003194:	430b      	orrs	r3, r1
 8003196:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800319a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 fad9 	bl	8003756 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 fb1f 	bl	80037e8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	3305      	adds	r3, #5
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	021a      	lsls	r2, r3, #8
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	3304      	adds	r3, #4
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	4619      	mov	r1, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	3303      	adds	r3, #3
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	061a      	lsls	r2, r3, #24
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	3302      	adds	r3, #2
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	041b      	lsls	r3, r3, #16
 80031dc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	3301      	adds	r3, #1
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80031e8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80031f6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80031f8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2210      	movs	r2, #16
 8003208:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	58024400 	.word	0x58024400
 800321c:	58000400 	.word	0x58000400
 8003220:	431bde83 	.word	0x431bde83
 8003224:	ffff8001 	.word	0xffff8001

08003228 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003238:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003240:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003242:	f001 fe51 	bl	8004ee8 <HAL_RCC_GetHCLKFreq>
 8003246:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	4a1e      	ldr	r2, [pc, #120]	; (80032c4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d908      	bls.n	8003262 <HAL_ETH_SetMDIOClockRange+0x3a>
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	4a1d      	ldr	r2, [pc, #116]	; (80032c8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d804      	bhi.n	8003262 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	e027      	b.n	80032b2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	4a18      	ldr	r2, [pc, #96]	; (80032c8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d908      	bls.n	800327c <HAL_ETH_SetMDIOClockRange+0x54>
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	4a17      	ldr	r2, [pc, #92]	; (80032cc <HAL_ETH_SetMDIOClockRange+0xa4>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d204      	bcs.n	800327c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003278:	60fb      	str	r3, [r7, #12]
 800327a:	e01a      	b.n	80032b2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	4a13      	ldr	r2, [pc, #76]	; (80032cc <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d303      	bcc.n	800328c <HAL_ETH_SetMDIOClockRange+0x64>
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	4a12      	ldr	r2, [pc, #72]	; (80032d0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d911      	bls.n	80032b0 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	4a10      	ldr	r2, [pc, #64]	; (80032d0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d908      	bls.n	80032a6 <HAL_ETH_SetMDIOClockRange+0x7e>
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	4a0f      	ldr	r2, [pc, #60]	; (80032d4 <HAL_ETH_SetMDIOClockRange+0xac>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d804      	bhi.n	80032a6 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032a2:	60fb      	str	r3, [r7, #12]
 80032a4:	e005      	b.n	80032b2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	e000      	b.n	80032b2 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80032b0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80032bc:	bf00      	nop
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	01312cff 	.word	0x01312cff
 80032c8:	02160ebf 	.word	0x02160ebf
 80032cc:	03938700 	.word	0x03938700
 80032d0:	05f5e0ff 	.word	0x05f5e0ff
 80032d4:	08f0d17f 	.word	0x08f0d17f

080032d8 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80032ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	791b      	ldrb	r3, [r3, #4]
 80032f0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80032f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	7b1b      	ldrb	r3, [r3, #12]
 80032f8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80032fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	7b5b      	ldrb	r3, [r3, #13]
 8003300:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003302:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	7b9b      	ldrb	r3, [r3, #14]
 8003308:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800330a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	7bdb      	ldrb	r3, [r3, #15]
 8003310:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003312:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	7c12      	ldrb	r2, [r2, #16]
 8003318:	2a00      	cmp	r2, #0
 800331a:	d102      	bne.n	8003322 <ETH_SetMACConfig+0x4a>
 800331c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003320:	e000      	b.n	8003324 <ETH_SetMACConfig+0x4c>
 8003322:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003324:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	7c52      	ldrb	r2, [r2, #17]
 800332a:	2a00      	cmp	r2, #0
 800332c:	d102      	bne.n	8003334 <ETH_SetMACConfig+0x5c>
 800332e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003332:	e000      	b.n	8003336 <ETH_SetMACConfig+0x5e>
 8003334:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003336:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	7c9b      	ldrb	r3, [r3, #18]
 800333c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800333e:	431a      	orrs	r2, r3
               macconf->Speed |
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8003344:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800334a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	7f1b      	ldrb	r3, [r3, #28]
 8003350:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8003352:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	7f5b      	ldrb	r3, [r3, #29]
 8003358:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800335a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	7f92      	ldrb	r2, [r2, #30]
 8003360:	2a00      	cmp	r2, #0
 8003362:	d102      	bne.n	800336a <ETH_SetMACConfig+0x92>
 8003364:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003368:	e000      	b.n	800336c <ETH_SetMACConfig+0x94>
 800336a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800336c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	7fdb      	ldrb	r3, [r3, #31]
 8003372:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003374:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	f892 2020 	ldrb.w	r2, [r2, #32]
 800337c:	2a00      	cmp	r2, #0
 800337e:	d102      	bne.n	8003386 <ETH_SetMACConfig+0xae>
 8003380:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003384:	e000      	b.n	8003388 <ETH_SetMACConfig+0xb0>
 8003386:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003388:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800338e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003396:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8003398:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800339e:	4313      	orrs	r3, r2
 80033a0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	4b56      	ldr	r3, [pc, #344]	; (8003504 <ETH_SetMACConfig+0x22c>)
 80033aa:	4013      	ands	r3, r2
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6812      	ldr	r2, [r2, #0]
 80033b0:	68f9      	ldr	r1, [r7, #12]
 80033b2:	430b      	orrs	r3, r1
 80033b4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ba:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033c2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80033c4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033cc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80033ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80033d6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80033d8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80033e0:	2a00      	cmp	r2, #0
 80033e2:	d102      	bne.n	80033ea <ETH_SetMACConfig+0x112>
 80033e4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80033e8:	e000      	b.n	80033ec <ETH_SetMACConfig+0x114>
 80033ea:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80033ec:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80033f2:	4313      	orrs	r3, r2
 80033f4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	4b42      	ldr	r3, [pc, #264]	; (8003508 <ETH_SetMACConfig+0x230>)
 80033fe:	4013      	ands	r3, r2
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6812      	ldr	r2, [r2, #0]
 8003404:	68f9      	ldr	r1, [r7, #12]
 8003406:	430b      	orrs	r3, r1
 8003408:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003410:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003416:	4313      	orrs	r3, r2
 8003418:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68da      	ldr	r2, [r3, #12]
 8003420:	4b3a      	ldr	r3, [pc, #232]	; (800350c <ETH_SetMACConfig+0x234>)
 8003422:	4013      	ands	r3, r2
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	6812      	ldr	r2, [r2, #0]
 8003428:	68f9      	ldr	r1, [r7, #12]
 800342a:	430b      	orrs	r3, r1
 800342c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003434:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800343a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003442:	2a00      	cmp	r2, #0
 8003444:	d101      	bne.n	800344a <ETH_SetMACConfig+0x172>
 8003446:	2280      	movs	r2, #128	; 0x80
 8003448:	e000      	b.n	800344c <ETH_SetMACConfig+0x174>
 800344a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800344c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003452:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003454:	4313      	orrs	r3, r2
 8003456:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800345e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8003462:	4013      	ands	r3, r2
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6812      	ldr	r2, [r2, #0]
 8003468:	68f9      	ldr	r1, [r7, #12]
 800346a:	430b      	orrs	r3, r1
 800346c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003474:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800347c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800347e:	4313      	orrs	r3, r2
 8003480:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800348a:	f023 0103 	bic.w	r1, r3, #3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	430a      	orrs	r2, r1
 8003496:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80034a2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80034be:	2a00      	cmp	r2, #0
 80034c0:	d101      	bne.n	80034c6 <ETH_SetMACConfig+0x1ee>
 80034c2:	2240      	movs	r2, #64	; 0x40
 80034c4:	e000      	b.n	80034c8 <ETH_SetMACConfig+0x1f0>
 80034c6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80034c8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80034d0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80034d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80034da:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80034dc:	4313      	orrs	r3, r2
 80034de:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80034e8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80034f8:	bf00      	nop
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr
 8003504:	00048083 	.word	0x00048083
 8003508:	c0f88000 	.word	0xc0f88000
 800350c:	fffffef0 	.word	0xfffffef0

08003510 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	4b38      	ldr	r3, [pc, #224]	; (8003608 <ETH_SetDMAConfig+0xf8>)
 8003526:	4013      	ands	r3, r2
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	6811      	ldr	r1, [r2, #0]
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	6812      	ldr	r2, [r2, #0]
 8003530:	430b      	orrs	r3, r1
 8003532:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003536:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	791b      	ldrb	r3, [r3, #4]
 800353c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003542:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	7b1b      	ldrb	r3, [r3, #12]
 8003548:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800354a:	4313      	orrs	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	4b2c      	ldr	r3, [pc, #176]	; (800360c <ETH_SetDMAConfig+0xfc>)
 800355a:	4013      	ands	r3, r2
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	6812      	ldr	r2, [r2, #0]
 8003560:	68f9      	ldr	r1, [r7, #12]
 8003562:	430b      	orrs	r3, r1
 8003564:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003568:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	7b5b      	ldrb	r3, [r3, #13]
 800356e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003574:	4313      	orrs	r3, r2
 8003576:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003580:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8003584:	4b22      	ldr	r3, [pc, #136]	; (8003610 <ETH_SetDMAConfig+0x100>)
 8003586:	4013      	ands	r3, r2
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	6812      	ldr	r2, [r2, #0]
 800358c:	68f9      	ldr	r1, [r7, #12]
 800358e:	430b      	orrs	r3, r1
 8003590:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003594:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	7d1b      	ldrb	r3, [r3, #20]
 80035a0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80035a2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	7f5b      	ldrb	r3, [r3, #29]
 80035a8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80035aa:	4313      	orrs	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035b6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80035ba:	4b16      	ldr	r3, [pc, #88]	; (8003614 <ETH_SetDMAConfig+0x104>)
 80035bc:	4013      	ands	r3, r2
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	6812      	ldr	r2, [r2, #0]
 80035c2:	68f9      	ldr	r1, [r7, #12]
 80035c4:	430b      	orrs	r3, r1
 80035c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80035ca:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	7f1b      	ldrb	r3, [r3, #28]
 80035d2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80035d8:	4313      	orrs	r3, r2
 80035da:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035e4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80035e8:	4b0b      	ldr	r3, [pc, #44]	; (8003618 <ETH_SetDMAConfig+0x108>)
 80035ea:	4013      	ands	r3, r2
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	6812      	ldr	r2, [r2, #0]
 80035f0:	68f9      	ldr	r1, [r7, #12]
 80035f2:	430b      	orrs	r3, r1
 80035f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80035f8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80035fc:	bf00      	nop
 80035fe:	3714      	adds	r7, #20
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr
 8003608:	ffff87fd 	.word	0xffff87fd
 800360c:	ffff2ffe 	.word	0xffff2ffe
 8003610:	fffec000 	.word	0xfffec000
 8003614:	ffc0efef 	.word	0xffc0efef
 8003618:	7fc0ffff 	.word	0x7fc0ffff

0800361c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b0a4      	sub	sp, #144	; 0x90
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003624:	2301      	movs	r3, #1
 8003626:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800362a:	2300      	movs	r3, #0
 800362c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800362e:	2300      	movs	r3, #0
 8003630:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003634:	2300      	movs	r3, #0
 8003636:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800363a:	2301      	movs	r3, #1
 800363c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003640:	2301      	movs	r3, #1
 8003642:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003646:	2301      	movs	r3, #1
 8003648:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800364c:	2300      	movs	r3, #0
 800364e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003652:	2301      	movs	r3, #1
 8003654:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003658:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800365c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800365e:	2300      	movs	r3, #0
 8003660:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8003664:	2300      	movs	r3, #0
 8003666:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003668:	2300      	movs	r3, #0
 800366a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800366e:	2300      	movs	r3, #0
 8003670:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8003674:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8003678:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800367a:	2300      	movs	r3, #0
 800367c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003680:	2300      	movs	r3, #0
 8003682:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8003684:	2301      	movs	r3, #1
 8003686:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800368a:	2300      	movs	r3, #0
 800368c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003690:	2300      	movs	r3, #0
 8003692:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003696:	2300      	movs	r3, #0
 8003698:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800369a:	2300      	movs	r3, #0
 800369c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800369e:	2300      	movs	r3, #0
 80036a0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80036a2:	2300      	movs	r3, #0
 80036a4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80036a8:	2300      	movs	r3, #0
 80036aa:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80036ae:	2301      	movs	r3, #1
 80036b0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80036b4:	2320      	movs	r3, #32
 80036b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80036ba:	2301      	movs	r3, #1
 80036bc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80036c0:	2300      	movs	r3, #0
 80036c2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80036c6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80036ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80036cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80036d0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80036d2:	2300      	movs	r3, #0
 80036d4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80036d8:	2302      	movs	r3, #2
 80036da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80036de:	2300      	movs	r3, #0
 80036e0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80036e4:	2300      	movs	r3, #0
 80036e6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80036ea:	2300      	movs	r3, #0
 80036ec:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80036f0:	2301      	movs	r3, #1
 80036f2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80036f6:	2300      	movs	r3, #0
 80036f8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80036fa:	2301      	movs	r3, #1
 80036fc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003700:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003704:	4619      	mov	r1, r3
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f7ff fde6 	bl	80032d8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800370c:	2301      	movs	r3, #1
 800370e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003710:	2301      	movs	r3, #1
 8003712:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003714:	2300      	movs	r3, #0
 8003716:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003718:	2300      	movs	r3, #0
 800371a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800371e:	2300      	movs	r3, #0
 8003720:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003722:	2300      	movs	r3, #0
 8003724:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003726:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800372a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800372c:	2300      	movs	r3, #0
 800372e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003730:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003734:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003736:	2300      	movs	r3, #0
 8003738:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800373c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003740:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003742:	f107 0308 	add.w	r3, r7, #8
 8003746:	4619      	mov	r1, r3
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f7ff fee1 	bl	8003510 <ETH_SetDMAConfig>
}
 800374e:	bf00      	nop
 8003750:	3790      	adds	r7, #144	; 0x90
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003756:	b480      	push	{r7}
 8003758:	b085      	sub	sp, #20
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800375e:	2300      	movs	r3, #0
 8003760:	60fb      	str	r3, [r7, #12]
 8003762:	e01d      	b.n	80037a0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68d9      	ldr	r1, [r3, #12]
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	4613      	mov	r3, r2
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	4413      	add	r3, r2
 8003770:	00db      	lsls	r3, r3, #3
 8003772:	440b      	add	r3, r1
 8003774:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	2200      	movs	r2, #0
 800377a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	2200      	movs	r2, #0
 8003780:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	2200      	movs	r2, #0
 8003786:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	2200      	movs	r2, #0
 800378c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800378e:	68b9      	ldr	r1, [r7, #8]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	3206      	adds	r2, #6
 8003796:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	3301      	adds	r3, #1
 800379e:	60fb      	str	r3, [r7, #12]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2b03      	cmp	r3, #3
 80037a4:	d9de      	bls.n	8003764 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037b4:	461a      	mov	r2, r3
 80037b6:	2303      	movs	r3, #3
 80037b8:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	68da      	ldr	r2, [r3, #12]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037c8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	68da      	ldr	r2, [r3, #12]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037d8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80037dc:	bf00      	nop
 80037de:	3714      	adds	r7, #20
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80037f0:	2300      	movs	r3, #0
 80037f2:	60fb      	str	r3, [r7, #12]
 80037f4:	e023      	b.n	800383e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6919      	ldr	r1, [r3, #16]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	4613      	mov	r3, r2
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	4413      	add	r3, r2
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	440b      	add	r3, r1
 8003806:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	2200      	movs	r2, #0
 800380c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	2200      	movs	r2, #0
 8003812:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	2200      	movs	r2, #0
 8003818:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	2200      	movs	r2, #0
 800381e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	2200      	movs	r2, #0
 8003824:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	2200      	movs	r2, #0
 800382a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800382c:	68b9      	ldr	r1, [r7, #8]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	3212      	adds	r2, #18
 8003834:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	3301      	adds	r3, #1
 800383c:	60fb      	str	r3, [r7, #12]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2b03      	cmp	r3, #3
 8003842:	d9d8      	bls.n	80037f6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800386a:	461a      	mov	r2, r3
 800386c:	2303      	movs	r3, #3
 800386e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	691a      	ldr	r2, [r3, #16]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800387e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003892:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8003896:	bf00      	nop
 8003898:	3714      	adds	r7, #20
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
	...

080038a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b089      	sub	sp, #36	; 0x24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80038ae:	2300      	movs	r3, #0
 80038b0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80038b2:	4b89      	ldr	r3, [pc, #548]	; (8003ad8 <HAL_GPIO_Init+0x234>)
 80038b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80038b6:	e194      	b.n	8003be2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	2101      	movs	r1, #1
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	fa01 f303 	lsl.w	r3, r1, r3
 80038c4:	4013      	ands	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f000 8186 	beq.w	8003bdc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f003 0303 	and.w	r3, r3, #3
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d005      	beq.n	80038e8 <HAL_GPIO_Init+0x44>
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f003 0303 	and.w	r3, r3, #3
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d130      	bne.n	800394a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	2203      	movs	r2, #3
 80038f4:	fa02 f303 	lsl.w	r3, r2, r3
 80038f8:	43db      	mvns	r3, r3
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	4013      	ands	r3, r2
 80038fe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	68da      	ldr	r2, [r3, #12]
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	4313      	orrs	r3, r2
 8003910:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800391e:	2201      	movs	r2, #1
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	fa02 f303 	lsl.w	r3, r2, r3
 8003926:	43db      	mvns	r3, r3
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	4013      	ands	r3, r2
 800392c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	091b      	lsrs	r3, r3, #4
 8003934:	f003 0201 	and.w	r2, r3, #1
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	fa02 f303 	lsl.w	r3, r2, r3
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	4313      	orrs	r3, r2
 8003942:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f003 0303 	and.w	r3, r3, #3
 8003952:	2b03      	cmp	r3, #3
 8003954:	d017      	beq.n	8003986 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	2203      	movs	r2, #3
 8003962:	fa02 f303 	lsl.w	r3, r2, r3
 8003966:	43db      	mvns	r3, r3
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	4013      	ands	r3, r2
 800396c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	689a      	ldr	r2, [r3, #8]
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	fa02 f303 	lsl.w	r3, r2, r3
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	4313      	orrs	r3, r2
 800397e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f003 0303 	and.w	r3, r3, #3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d123      	bne.n	80039da <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	08da      	lsrs	r2, r3, #3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	3208      	adds	r2, #8
 800399a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800399e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	f003 0307 	and.w	r3, r3, #7
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	220f      	movs	r2, #15
 80039aa:	fa02 f303 	lsl.w	r3, r2, r3
 80039ae:	43db      	mvns	r3, r3
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	4013      	ands	r3, r2
 80039b4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	691a      	ldr	r2, [r3, #16]
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	f003 0307 	and.w	r3, r3, #7
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	fa02 f303 	lsl.w	r3, r2, r3
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	08da      	lsrs	r2, r3, #3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3208      	adds	r2, #8
 80039d4:	69b9      	ldr	r1, [r7, #24]
 80039d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	2203      	movs	r2, #3
 80039e6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ea:	43db      	mvns	r3, r3
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	4013      	ands	r3, r2
 80039f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f003 0203 	and.w	r2, r3, #3
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f000 80e0 	beq.w	8003bdc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a1c:	4b2f      	ldr	r3, [pc, #188]	; (8003adc <HAL_GPIO_Init+0x238>)
 8003a1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a22:	4a2e      	ldr	r2, [pc, #184]	; (8003adc <HAL_GPIO_Init+0x238>)
 8003a24:	f043 0302 	orr.w	r3, r3, #2
 8003a28:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003a2c:	4b2b      	ldr	r3, [pc, #172]	; (8003adc <HAL_GPIO_Init+0x238>)
 8003a2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	60fb      	str	r3, [r7, #12]
 8003a38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a3a:	4a29      	ldr	r2, [pc, #164]	; (8003ae0 <HAL_GPIO_Init+0x23c>)
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	089b      	lsrs	r3, r3, #2
 8003a40:	3302      	adds	r3, #2
 8003a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	f003 0303 	and.w	r3, r3, #3
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	220f      	movs	r2, #15
 8003a52:	fa02 f303 	lsl.w	r3, r2, r3
 8003a56:	43db      	mvns	r3, r3
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a20      	ldr	r2, [pc, #128]	; (8003ae4 <HAL_GPIO_Init+0x240>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d052      	beq.n	8003b0c <HAL_GPIO_Init+0x268>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a1f      	ldr	r2, [pc, #124]	; (8003ae8 <HAL_GPIO_Init+0x244>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d031      	beq.n	8003ad2 <HAL_GPIO_Init+0x22e>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a1e      	ldr	r2, [pc, #120]	; (8003aec <HAL_GPIO_Init+0x248>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d02b      	beq.n	8003ace <HAL_GPIO_Init+0x22a>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a1d      	ldr	r2, [pc, #116]	; (8003af0 <HAL_GPIO_Init+0x24c>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d025      	beq.n	8003aca <HAL_GPIO_Init+0x226>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a1c      	ldr	r2, [pc, #112]	; (8003af4 <HAL_GPIO_Init+0x250>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d01f      	beq.n	8003ac6 <HAL_GPIO_Init+0x222>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a1b      	ldr	r2, [pc, #108]	; (8003af8 <HAL_GPIO_Init+0x254>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d019      	beq.n	8003ac2 <HAL_GPIO_Init+0x21e>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a1a      	ldr	r2, [pc, #104]	; (8003afc <HAL_GPIO_Init+0x258>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d013      	beq.n	8003abe <HAL_GPIO_Init+0x21a>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a19      	ldr	r2, [pc, #100]	; (8003b00 <HAL_GPIO_Init+0x25c>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d00d      	beq.n	8003aba <HAL_GPIO_Init+0x216>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a18      	ldr	r2, [pc, #96]	; (8003b04 <HAL_GPIO_Init+0x260>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d007      	beq.n	8003ab6 <HAL_GPIO_Init+0x212>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a17      	ldr	r2, [pc, #92]	; (8003b08 <HAL_GPIO_Init+0x264>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d101      	bne.n	8003ab2 <HAL_GPIO_Init+0x20e>
 8003aae:	2309      	movs	r3, #9
 8003ab0:	e02d      	b.n	8003b0e <HAL_GPIO_Init+0x26a>
 8003ab2:	230a      	movs	r3, #10
 8003ab4:	e02b      	b.n	8003b0e <HAL_GPIO_Init+0x26a>
 8003ab6:	2308      	movs	r3, #8
 8003ab8:	e029      	b.n	8003b0e <HAL_GPIO_Init+0x26a>
 8003aba:	2307      	movs	r3, #7
 8003abc:	e027      	b.n	8003b0e <HAL_GPIO_Init+0x26a>
 8003abe:	2306      	movs	r3, #6
 8003ac0:	e025      	b.n	8003b0e <HAL_GPIO_Init+0x26a>
 8003ac2:	2305      	movs	r3, #5
 8003ac4:	e023      	b.n	8003b0e <HAL_GPIO_Init+0x26a>
 8003ac6:	2304      	movs	r3, #4
 8003ac8:	e021      	b.n	8003b0e <HAL_GPIO_Init+0x26a>
 8003aca:	2303      	movs	r3, #3
 8003acc:	e01f      	b.n	8003b0e <HAL_GPIO_Init+0x26a>
 8003ace:	2302      	movs	r3, #2
 8003ad0:	e01d      	b.n	8003b0e <HAL_GPIO_Init+0x26a>
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e01b      	b.n	8003b0e <HAL_GPIO_Init+0x26a>
 8003ad6:	bf00      	nop
 8003ad8:	58000080 	.word	0x58000080
 8003adc:	58024400 	.word	0x58024400
 8003ae0:	58000400 	.word	0x58000400
 8003ae4:	58020000 	.word	0x58020000
 8003ae8:	58020400 	.word	0x58020400
 8003aec:	58020800 	.word	0x58020800
 8003af0:	58020c00 	.word	0x58020c00
 8003af4:	58021000 	.word	0x58021000
 8003af8:	58021400 	.word	0x58021400
 8003afc:	58021800 	.word	0x58021800
 8003b00:	58021c00 	.word	0x58021c00
 8003b04:	58022000 	.word	0x58022000
 8003b08:	58022400 	.word	0x58022400
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	69fa      	ldr	r2, [r7, #28]
 8003b10:	f002 0203 	and.w	r2, r2, #3
 8003b14:	0092      	lsls	r2, r2, #2
 8003b16:	4093      	lsls	r3, r2
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b1e:	4938      	ldr	r1, [pc, #224]	; (8003c00 <HAL_GPIO_Init+0x35c>)
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	089b      	lsrs	r3, r3, #2
 8003b24:	3302      	adds	r3, #2
 8003b26:	69ba      	ldr	r2, [r7, #24]
 8003b28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	43db      	mvns	r3, r3
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003b52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	43db      	mvns	r3, r3
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	4013      	ands	r3, r2
 8003b6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d003      	beq.n	8003b80 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003b80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	43db      	mvns	r3, r3
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	4013      	ands	r3, r2
 8003b96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d003      	beq.n	8003bac <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	43db      	mvns	r3, r3
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d003      	beq.n	8003bd6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	3301      	adds	r3, #1
 8003be0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	fa22 f303 	lsr.w	r3, r2, r3
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f47f ae63 	bne.w	80038b8 <HAL_GPIO_Init+0x14>
  }
}
 8003bf2:	bf00      	nop
 8003bf4:	bf00      	nop
 8003bf6:	3724      	adds	r7, #36	; 0x24
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	58000400 	.word	0x58000400

08003c04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	807b      	strh	r3, [r7, #2]
 8003c10:	4613      	mov	r3, r2
 8003c12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c14:	787b      	ldrb	r3, [r7, #1]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d003      	beq.n	8003c22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c1a:	887a      	ldrh	r2, [r7, #2]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003c20:	e003      	b.n	8003c2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003c22:	887b      	ldrh	r3, [r7, #2]
 8003c24:	041a      	lsls	r2, r3, #16
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	619a      	str	r2, [r3, #24]
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b085      	sub	sp, #20
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
 8003c3e:	460b      	mov	r3, r1
 8003c40:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c48:	887a      	ldrh	r2, [r7, #2]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	041a      	lsls	r2, r3, #16
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	43d9      	mvns	r1, r3
 8003c54:	887b      	ldrh	r3, [r7, #2]
 8003c56:	400b      	ands	r3, r1
 8003c58:	431a      	orrs	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	619a      	str	r2, [r3, #24]
}
 8003c5e:	bf00      	nop
 8003c60:	3714      	adds	r7, #20
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
	...

08003c6c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003c74:	4a08      	ldr	r2, [pc, #32]	; (8003c98 <HAL_HSEM_FastTake+0x2c>)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	3320      	adds	r3, #32
 8003c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c7e:	4a07      	ldr	r2, [pc, #28]	; (8003c9c <HAL_HSEM_FastTake+0x30>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d101      	bne.n	8003c88 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003c84:	2300      	movs	r3, #0
 8003c86:	e000      	b.n	8003c8a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	58026400 	.word	0x58026400
 8003c9c:	80000300 	.word	0x80000300

08003ca0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003caa:	4906      	ldr	r1, [pc, #24]	; (8003cc4 <HAL_HSEM_Release+0x24>)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	58026400 	.word	0x58026400

08003cc8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cca:	b08f      	sub	sp, #60	; 0x3c
 8003ccc:	af0a      	add	r7, sp, #40	; 0x28
 8003cce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e116      	b.n	8003f08 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d106      	bne.n	8003cfa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f7fe fee5 	bl	8002ac4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2203      	movs	r2, #3
 8003cfe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d102      	bne.n	8003d14 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f002 fa2d 	bl	8006178 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	603b      	str	r3, [r7, #0]
 8003d24:	687e      	ldr	r6, [r7, #4]
 8003d26:	466d      	mov	r5, sp
 8003d28:	f106 0410 	add.w	r4, r6, #16
 8003d2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d34:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d38:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d3c:	1d33      	adds	r3, r6, #4
 8003d3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d40:	6838      	ldr	r0, [r7, #0]
 8003d42:	f002 f9ab 	bl	800609c <USB_CoreInit>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d005      	beq.n	8003d58 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2202      	movs	r2, #2
 8003d50:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e0d7      	b.n	8003f08 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f002 fa1b 	bl	800619a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d64:	2300      	movs	r3, #0
 8003d66:	73fb      	strb	r3, [r7, #15]
 8003d68:	e04a      	b.n	8003e00 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003d6a:	7bfa      	ldrb	r2, [r7, #15]
 8003d6c:	6879      	ldr	r1, [r7, #4]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	4413      	add	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	440b      	add	r3, r1
 8003d78:	333d      	adds	r3, #61	; 0x3d
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003d7e:	7bfa      	ldrb	r2, [r7, #15]
 8003d80:	6879      	ldr	r1, [r7, #4]
 8003d82:	4613      	mov	r3, r2
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	4413      	add	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	440b      	add	r3, r1
 8003d8c:	333c      	adds	r3, #60	; 0x3c
 8003d8e:	7bfa      	ldrb	r2, [r7, #15]
 8003d90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003d92:	7bfa      	ldrb	r2, [r7, #15]
 8003d94:	7bfb      	ldrb	r3, [r7, #15]
 8003d96:	b298      	uxth	r0, r3
 8003d98:	6879      	ldr	r1, [r7, #4]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	4413      	add	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	440b      	add	r3, r1
 8003da4:	3344      	adds	r3, #68	; 0x44
 8003da6:	4602      	mov	r2, r0
 8003da8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003daa:	7bfa      	ldrb	r2, [r7, #15]
 8003dac:	6879      	ldr	r1, [r7, #4]
 8003dae:	4613      	mov	r3, r2
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	4413      	add	r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	440b      	add	r3, r1
 8003db8:	3340      	adds	r3, #64	; 0x40
 8003dba:	2200      	movs	r2, #0
 8003dbc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003dbe:	7bfa      	ldrb	r2, [r7, #15]
 8003dc0:	6879      	ldr	r1, [r7, #4]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	00db      	lsls	r3, r3, #3
 8003dc6:	4413      	add	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	440b      	add	r3, r1
 8003dcc:	3348      	adds	r3, #72	; 0x48
 8003dce:	2200      	movs	r2, #0
 8003dd0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003dd2:	7bfa      	ldrb	r2, [r7, #15]
 8003dd4:	6879      	ldr	r1, [r7, #4]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	00db      	lsls	r3, r3, #3
 8003dda:	4413      	add	r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	440b      	add	r3, r1
 8003de0:	334c      	adds	r3, #76	; 0x4c
 8003de2:	2200      	movs	r2, #0
 8003de4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003de6:	7bfa      	ldrb	r2, [r7, #15]
 8003de8:	6879      	ldr	r1, [r7, #4]
 8003dea:	4613      	mov	r3, r2
 8003dec:	00db      	lsls	r3, r3, #3
 8003dee:	4413      	add	r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	440b      	add	r3, r1
 8003df4:	3354      	adds	r3, #84	; 0x54
 8003df6:	2200      	movs	r2, #0
 8003df8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dfa:	7bfb      	ldrb	r3, [r7, #15]
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	73fb      	strb	r3, [r7, #15]
 8003e00:	7bfa      	ldrb	r2, [r7, #15]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d3af      	bcc.n	8003d6a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	73fb      	strb	r3, [r7, #15]
 8003e0e:	e044      	b.n	8003e9a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003e10:	7bfa      	ldrb	r2, [r7, #15]
 8003e12:	6879      	ldr	r1, [r7, #4]
 8003e14:	4613      	mov	r3, r2
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	4413      	add	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	440b      	add	r3, r1
 8003e1e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003e22:	2200      	movs	r2, #0
 8003e24:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003e26:	7bfa      	ldrb	r2, [r7, #15]
 8003e28:	6879      	ldr	r1, [r7, #4]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	00db      	lsls	r3, r3, #3
 8003e2e:	4413      	add	r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	440b      	add	r3, r1
 8003e34:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003e38:	7bfa      	ldrb	r2, [r7, #15]
 8003e3a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003e3c:	7bfa      	ldrb	r2, [r7, #15]
 8003e3e:	6879      	ldr	r1, [r7, #4]
 8003e40:	4613      	mov	r3, r2
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	4413      	add	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	440b      	add	r3, r1
 8003e4a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003e4e:	2200      	movs	r2, #0
 8003e50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003e52:	7bfa      	ldrb	r2, [r7, #15]
 8003e54:	6879      	ldr	r1, [r7, #4]
 8003e56:	4613      	mov	r3, r2
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	4413      	add	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	440b      	add	r3, r1
 8003e60:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003e64:	2200      	movs	r2, #0
 8003e66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003e68:	7bfa      	ldrb	r2, [r7, #15]
 8003e6a:	6879      	ldr	r1, [r7, #4]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	4413      	add	r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	440b      	add	r3, r1
 8003e76:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003e7e:	7bfa      	ldrb	r2, [r7, #15]
 8003e80:	6879      	ldr	r1, [r7, #4]
 8003e82:	4613      	mov	r3, r2
 8003e84:	00db      	lsls	r3, r3, #3
 8003e86:	4413      	add	r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	440b      	add	r3, r1
 8003e8c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003e90:	2200      	movs	r2, #0
 8003e92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e94:	7bfb      	ldrb	r3, [r7, #15]
 8003e96:	3301      	adds	r3, #1
 8003e98:	73fb      	strb	r3, [r7, #15]
 8003e9a:	7bfa      	ldrb	r2, [r7, #15]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d3b5      	bcc.n	8003e10 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	603b      	str	r3, [r7, #0]
 8003eaa:	687e      	ldr	r6, [r7, #4]
 8003eac:	466d      	mov	r5, sp
 8003eae:	f106 0410 	add.w	r4, r6, #16
 8003eb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003eb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003eb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003eb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003eba:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ebe:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ec2:	1d33      	adds	r3, r6, #4
 8003ec4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ec6:	6838      	ldr	r0, [r7, #0]
 8003ec8:	f002 f9b4 	bl	8006234 <USB_DevInit>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d005      	beq.n	8003ede <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2202      	movs	r2, #2
 8003ed6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e014      	b.n	8003f08 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d102      	bne.n	8003efc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f80a 	bl	8003f10 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f002 fb72 	bl	80065ea <USB_DevDisconnect>

  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3714      	adds	r7, #20
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f10 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f3e:	4b05      	ldr	r3, [pc, #20]	; (8003f54 <HAL_PCDEx_ActivateLPM+0x44>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3714      	adds	r7, #20
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr
 8003f54:	10000003 	.word	0x10000003

08003f58 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003f60:	4b29      	ldr	r3, [pc, #164]	; (8004008 <HAL_PWREx_ConfigSupply+0xb0>)
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	f003 0307 	and.w	r3, r3, #7
 8003f68:	2b06      	cmp	r3, #6
 8003f6a:	d00a      	beq.n	8003f82 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003f6c:	4b26      	ldr	r3, [pc, #152]	; (8004008 <HAL_PWREx_ConfigSupply+0xb0>)
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d001      	beq.n	8003f7e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e040      	b.n	8004000 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	e03e      	b.n	8004000 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003f82:	4b21      	ldr	r3, [pc, #132]	; (8004008 <HAL_PWREx_ConfigSupply+0xb0>)
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003f8a:	491f      	ldr	r1, [pc, #124]	; (8004008 <HAL_PWREx_ConfigSupply+0xb0>)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003f92:	f7fe ff2f 	bl	8002df4 <HAL_GetTick>
 8003f96:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003f98:	e009      	b.n	8003fae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003f9a:	f7fe ff2b 	bl	8002df4 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fa8:	d901      	bls.n	8003fae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e028      	b.n	8004000 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003fae:	4b16      	ldr	r3, [pc, #88]	; (8004008 <HAL_PWREx_ConfigSupply+0xb0>)
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fba:	d1ee      	bne.n	8003f9a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b1e      	cmp	r3, #30
 8003fc0:	d008      	beq.n	8003fd4 <HAL_PWREx_ConfigSupply+0x7c>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b2e      	cmp	r3, #46	; 0x2e
 8003fc6:	d005      	beq.n	8003fd4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b1d      	cmp	r3, #29
 8003fcc:	d002      	beq.n	8003fd4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b2d      	cmp	r3, #45	; 0x2d
 8003fd2:	d114      	bne.n	8003ffe <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003fd4:	f7fe ff0e 	bl	8002df4 <HAL_GetTick>
 8003fd8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003fda:	e009      	b.n	8003ff0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003fdc:	f7fe ff0a 	bl	8002df4 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fea:	d901      	bls.n	8003ff0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e007      	b.n	8004000 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003ff0:	4b05      	ldr	r3, [pc, #20]	; (8004008 <HAL_PWREx_ConfigSupply+0xb0>)
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ffc:	d1ee      	bne.n	8003fdc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	58024800 	.word	0x58024800

0800400c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004010:	4b05      	ldr	r3, [pc, #20]	; (8004028 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	4a04      	ldr	r2, [pc, #16]	; (8004028 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004016:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800401a:	60d3      	str	r3, [r2, #12]
}
 800401c:	bf00      	nop
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	58024800 	.word	0x58024800

0800402c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b08c      	sub	sp, #48	; 0x30
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d102      	bne.n	8004040 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	f000 bc1d 	b.w	800487a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	2b00      	cmp	r3, #0
 800404a:	f000 8087 	beq.w	800415c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800404e:	4b99      	ldr	r3, [pc, #612]	; (80042b4 <HAL_RCC_OscConfig+0x288>)
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004056:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004058:	4b96      	ldr	r3, [pc, #600]	; (80042b4 <HAL_RCC_OscConfig+0x288>)
 800405a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800405e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004060:	2b10      	cmp	r3, #16
 8004062:	d007      	beq.n	8004074 <HAL_RCC_OscConfig+0x48>
 8004064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004066:	2b18      	cmp	r3, #24
 8004068:	d110      	bne.n	800408c <HAL_RCC_OscConfig+0x60>
 800406a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406c:	f003 0303 	and.w	r3, r3, #3
 8004070:	2b02      	cmp	r3, #2
 8004072:	d10b      	bne.n	800408c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004074:	4b8f      	ldr	r3, [pc, #572]	; (80042b4 <HAL_RCC_OscConfig+0x288>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d06c      	beq.n	800415a <HAL_RCC_OscConfig+0x12e>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d168      	bne.n	800415a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e3f6      	b.n	800487a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004094:	d106      	bne.n	80040a4 <HAL_RCC_OscConfig+0x78>
 8004096:	4b87      	ldr	r3, [pc, #540]	; (80042b4 <HAL_RCC_OscConfig+0x288>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a86      	ldr	r2, [pc, #536]	; (80042b4 <HAL_RCC_OscConfig+0x288>)
 800409c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a0:	6013      	str	r3, [r2, #0]
 80040a2:	e02e      	b.n	8004102 <HAL_RCC_OscConfig+0xd6>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10c      	bne.n	80040c6 <HAL_RCC_OscConfig+0x9a>
 80040ac:	4b81      	ldr	r3, [pc, #516]	; (80042b4 <HAL_RCC_OscConfig+0x288>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a80      	ldr	r2, [pc, #512]	; (80042b4 <HAL_RCC_OscConfig+0x288>)
 80040b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040b6:	6013      	str	r3, [r2, #0]
 80040b8:	4b7e      	ldr	r3, [pc, #504]	; (80042b4 <HAL_RCC_OscConfig+0x288>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a7d      	ldr	r2, [pc, #500]	; (80042b4 <HAL_RCC_OscConfig+0x288>)
 80040be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040c2:	6013      	str	r3, [r2, #0]
 80040c4:	e01d      	b.n	8004102 <HAL_RCC_OscConfig+0xd6>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040ce:	d10c      	bne.n	80040ea <HAL_RCC_OscConfig+0xbe>
 80040d0:	4b78      	ldr	r3, [pc, #480]	; (80042b4 <HAL_RCC_OscConfig+0x288>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a77      	ldr	r2, [pc, #476]	; (80042b4 <HAL_RCC_OscConfig+0x288>)
 80040d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040da:	6013      	str	r3, [r2, #0]
 80040dc:	4b75      	ldr	r3, [pc, #468]	; (80042b4 <HAL_RCC_OscConfig+0x288>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a74      	ldr	r2, [pc, #464]	; (80042b4 <HAL_RCC_OscConfig+0x288>)
 80040e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040e6:	6013      	str	r3, [r2, #0]
 80040e8:	e00b      	b.n	8004102 <HAL_RCC_OscConfig+0xd6>
 80040ea:	4b72      	ldr	r3, [pc, #456]	; (80042b4 <HAL_RCC_OscConfig+0x288>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a71      	ldr	r2, [pc, #452]	; (80042b4 <HAL_RCC_OscConfig+0x288>)
 80040f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040f4:	6013      	str	r3, [r2, #0]
 80040f6:	4b6f      	ldr	r3, [pc, #444]	; (80042b4 <HAL_RCC_OscConfig+0x288>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a6e      	ldr	r2, [pc, #440]	; (80042b4 <HAL_RCC_OscConfig+0x288>)
 80040fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004100:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d013      	beq.n	8004132 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410a:	f7fe fe73 	bl	8002df4 <HAL_GetTick>
 800410e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004110:	e008      	b.n	8004124 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004112:	f7fe fe6f 	bl	8002df4 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	2b64      	cmp	r3, #100	; 0x64
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e3aa      	b.n	800487a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004124:	4b63      	ldr	r3, [pc, #396]	; (80042b4 <HAL_RCC_OscConfig+0x288>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d0f0      	beq.n	8004112 <HAL_RCC_OscConfig+0xe6>
 8004130:	e014      	b.n	800415c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004132:	f7fe fe5f 	bl	8002df4 <HAL_GetTick>
 8004136:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004138:	e008      	b.n	800414c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800413a:	f7fe fe5b 	bl	8002df4 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b64      	cmp	r3, #100	; 0x64
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e396      	b.n	800487a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800414c:	4b59      	ldr	r3, [pc, #356]	; (80042b4 <HAL_RCC_OscConfig+0x288>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1f0      	bne.n	800413a <HAL_RCC_OscConfig+0x10e>
 8004158:	e000      	b.n	800415c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800415a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 80cb 	beq.w	8004300 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800416a:	4b52      	ldr	r3, [pc, #328]	; (80042b4 <HAL_RCC_OscConfig+0x288>)
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004172:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004174:	4b4f      	ldr	r3, [pc, #316]	; (80042b4 <HAL_RCC_OscConfig+0x288>)
 8004176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004178:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800417a:	6a3b      	ldr	r3, [r7, #32]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d007      	beq.n	8004190 <HAL_RCC_OscConfig+0x164>
 8004180:	6a3b      	ldr	r3, [r7, #32]
 8004182:	2b18      	cmp	r3, #24
 8004184:	d156      	bne.n	8004234 <HAL_RCC_OscConfig+0x208>
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	f003 0303 	and.w	r3, r3, #3
 800418c:	2b00      	cmp	r3, #0
 800418e:	d151      	bne.n	8004234 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004190:	4b48      	ldr	r3, [pc, #288]	; (80042b4 <HAL_RCC_OscConfig+0x288>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0304 	and.w	r3, r3, #4
 8004198:	2b00      	cmp	r3, #0
 800419a:	d005      	beq.n	80041a8 <HAL_RCC_OscConfig+0x17c>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d101      	bne.n	80041a8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e368      	b.n	800487a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80041a8:	4b42      	ldr	r3, [pc, #264]	; (80042b4 <HAL_RCC_OscConfig+0x288>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f023 0219 	bic.w	r2, r3, #25
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	493f      	ldr	r1, [pc, #252]	; (80042b4 <HAL_RCC_OscConfig+0x288>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80041ba:	f7fe fe1b 	bl	8002df4 <HAL_GetTick>
 80041be:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041c0:	e008      	b.n	80041d4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041c2:	f7fe fe17 	bl	8002df4 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d901      	bls.n	80041d4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e352      	b.n	800487a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041d4:	4b37      	ldr	r3, [pc, #220]	; (80042b4 <HAL_RCC_OscConfig+0x288>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d0f0      	beq.n	80041c2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041e0:	f7fe fe38 	bl	8002e54 <HAL_GetREVID>
 80041e4:	4603      	mov	r3, r0
 80041e6:	f241 0203 	movw	r2, #4099	; 0x1003
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d817      	bhi.n	800421e <HAL_RCC_OscConfig+0x1f2>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	2b40      	cmp	r3, #64	; 0x40
 80041f4:	d108      	bne.n	8004208 <HAL_RCC_OscConfig+0x1dc>
 80041f6:	4b2f      	ldr	r3, [pc, #188]	; (80042b4 <HAL_RCC_OscConfig+0x288>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80041fe:	4a2d      	ldr	r2, [pc, #180]	; (80042b4 <HAL_RCC_OscConfig+0x288>)
 8004200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004204:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004206:	e07b      	b.n	8004300 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004208:	4b2a      	ldr	r3, [pc, #168]	; (80042b4 <HAL_RCC_OscConfig+0x288>)
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	031b      	lsls	r3, r3, #12
 8004216:	4927      	ldr	r1, [pc, #156]	; (80042b4 <HAL_RCC_OscConfig+0x288>)
 8004218:	4313      	orrs	r3, r2
 800421a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800421c:	e070      	b.n	8004300 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800421e:	4b25      	ldr	r3, [pc, #148]	; (80042b4 <HAL_RCC_OscConfig+0x288>)
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	061b      	lsls	r3, r3, #24
 800422c:	4921      	ldr	r1, [pc, #132]	; (80042b4 <HAL_RCC_OscConfig+0x288>)
 800422e:	4313      	orrs	r3, r2
 8004230:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004232:	e065      	b.n	8004300 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d048      	beq.n	80042ce <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800423c:	4b1d      	ldr	r3, [pc, #116]	; (80042b4 <HAL_RCC_OscConfig+0x288>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f023 0219 	bic.w	r2, r3, #25
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	491a      	ldr	r1, [pc, #104]	; (80042b4 <HAL_RCC_OscConfig+0x288>)
 800424a:	4313      	orrs	r3, r2
 800424c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424e:	f7fe fdd1 	bl	8002df4 <HAL_GetTick>
 8004252:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004254:	e008      	b.n	8004268 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004256:	f7fe fdcd 	bl	8002df4 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	2b02      	cmp	r3, #2
 8004262:	d901      	bls.n	8004268 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e308      	b.n	800487a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004268:	4b12      	ldr	r3, [pc, #72]	; (80042b4 <HAL_RCC_OscConfig+0x288>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0304 	and.w	r3, r3, #4
 8004270:	2b00      	cmp	r3, #0
 8004272:	d0f0      	beq.n	8004256 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004274:	f7fe fdee 	bl	8002e54 <HAL_GetREVID>
 8004278:	4603      	mov	r3, r0
 800427a:	f241 0203 	movw	r2, #4099	; 0x1003
 800427e:	4293      	cmp	r3, r2
 8004280:	d81a      	bhi.n	80042b8 <HAL_RCC_OscConfig+0x28c>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	2b40      	cmp	r3, #64	; 0x40
 8004288:	d108      	bne.n	800429c <HAL_RCC_OscConfig+0x270>
 800428a:	4b0a      	ldr	r3, [pc, #40]	; (80042b4 <HAL_RCC_OscConfig+0x288>)
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004292:	4a08      	ldr	r2, [pc, #32]	; (80042b4 <HAL_RCC_OscConfig+0x288>)
 8004294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004298:	6053      	str	r3, [r2, #4]
 800429a:	e031      	b.n	8004300 <HAL_RCC_OscConfig+0x2d4>
 800429c:	4b05      	ldr	r3, [pc, #20]	; (80042b4 <HAL_RCC_OscConfig+0x288>)
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	031b      	lsls	r3, r3, #12
 80042aa:	4902      	ldr	r1, [pc, #8]	; (80042b4 <HAL_RCC_OscConfig+0x288>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	604b      	str	r3, [r1, #4]
 80042b0:	e026      	b.n	8004300 <HAL_RCC_OscConfig+0x2d4>
 80042b2:	bf00      	nop
 80042b4:	58024400 	.word	0x58024400
 80042b8:	4b9a      	ldr	r3, [pc, #616]	; (8004524 <HAL_RCC_OscConfig+0x4f8>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	061b      	lsls	r3, r3, #24
 80042c6:	4997      	ldr	r1, [pc, #604]	; (8004524 <HAL_RCC_OscConfig+0x4f8>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	604b      	str	r3, [r1, #4]
 80042cc:	e018      	b.n	8004300 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042ce:	4b95      	ldr	r3, [pc, #596]	; (8004524 <HAL_RCC_OscConfig+0x4f8>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a94      	ldr	r2, [pc, #592]	; (8004524 <HAL_RCC_OscConfig+0x4f8>)
 80042d4:	f023 0301 	bic.w	r3, r3, #1
 80042d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042da:	f7fe fd8b 	bl	8002df4 <HAL_GetTick>
 80042de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80042e0:	e008      	b.n	80042f4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042e2:	f7fe fd87 	bl	8002df4 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d901      	bls.n	80042f4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e2c2      	b.n	800487a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80042f4:	4b8b      	ldr	r3, [pc, #556]	; (8004524 <HAL_RCC_OscConfig+0x4f8>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0304 	and.w	r3, r3, #4
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1f0      	bne.n	80042e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0310 	and.w	r3, r3, #16
 8004308:	2b00      	cmp	r3, #0
 800430a:	f000 80a9 	beq.w	8004460 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800430e:	4b85      	ldr	r3, [pc, #532]	; (8004524 <HAL_RCC_OscConfig+0x4f8>)
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004316:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004318:	4b82      	ldr	r3, [pc, #520]	; (8004524 <HAL_RCC_OscConfig+0x4f8>)
 800431a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	2b08      	cmp	r3, #8
 8004322:	d007      	beq.n	8004334 <HAL_RCC_OscConfig+0x308>
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	2b18      	cmp	r3, #24
 8004328:	d13a      	bne.n	80043a0 <HAL_RCC_OscConfig+0x374>
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f003 0303 	and.w	r3, r3, #3
 8004330:	2b01      	cmp	r3, #1
 8004332:	d135      	bne.n	80043a0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004334:	4b7b      	ldr	r3, [pc, #492]	; (8004524 <HAL_RCC_OscConfig+0x4f8>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800433c:	2b00      	cmp	r3, #0
 800433e:	d005      	beq.n	800434c <HAL_RCC_OscConfig+0x320>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	69db      	ldr	r3, [r3, #28]
 8004344:	2b80      	cmp	r3, #128	; 0x80
 8004346:	d001      	beq.n	800434c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e296      	b.n	800487a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800434c:	f7fe fd82 	bl	8002e54 <HAL_GetREVID>
 8004350:	4603      	mov	r3, r0
 8004352:	f241 0203 	movw	r2, #4099	; 0x1003
 8004356:	4293      	cmp	r3, r2
 8004358:	d817      	bhi.n	800438a <HAL_RCC_OscConfig+0x35e>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	2b20      	cmp	r3, #32
 8004360:	d108      	bne.n	8004374 <HAL_RCC_OscConfig+0x348>
 8004362:	4b70      	ldr	r3, [pc, #448]	; (8004524 <HAL_RCC_OscConfig+0x4f8>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800436a:	4a6e      	ldr	r2, [pc, #440]	; (8004524 <HAL_RCC_OscConfig+0x4f8>)
 800436c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004370:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004372:	e075      	b.n	8004460 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004374:	4b6b      	ldr	r3, [pc, #428]	; (8004524 <HAL_RCC_OscConfig+0x4f8>)
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	069b      	lsls	r3, r3, #26
 8004382:	4968      	ldr	r1, [pc, #416]	; (8004524 <HAL_RCC_OscConfig+0x4f8>)
 8004384:	4313      	orrs	r3, r2
 8004386:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004388:	e06a      	b.n	8004460 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800438a:	4b66      	ldr	r3, [pc, #408]	; (8004524 <HAL_RCC_OscConfig+0x4f8>)
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	061b      	lsls	r3, r3, #24
 8004398:	4962      	ldr	r1, [pc, #392]	; (8004524 <HAL_RCC_OscConfig+0x4f8>)
 800439a:	4313      	orrs	r3, r2
 800439c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800439e:	e05f      	b.n	8004460 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	69db      	ldr	r3, [r3, #28]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d042      	beq.n	800442e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80043a8:	4b5e      	ldr	r3, [pc, #376]	; (8004524 <HAL_RCC_OscConfig+0x4f8>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a5d      	ldr	r2, [pc, #372]	; (8004524 <HAL_RCC_OscConfig+0x4f8>)
 80043ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b4:	f7fe fd1e 	bl	8002df4 <HAL_GetTick>
 80043b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80043ba:	e008      	b.n	80043ce <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80043bc:	f7fe fd1a 	bl	8002df4 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e255      	b.n	800487a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80043ce:	4b55      	ldr	r3, [pc, #340]	; (8004524 <HAL_RCC_OscConfig+0x4f8>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d0f0      	beq.n	80043bc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043da:	f7fe fd3b 	bl	8002e54 <HAL_GetREVID>
 80043de:	4603      	mov	r3, r0
 80043e0:	f241 0203 	movw	r2, #4099	; 0x1003
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d817      	bhi.n	8004418 <HAL_RCC_OscConfig+0x3ec>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	2b20      	cmp	r3, #32
 80043ee:	d108      	bne.n	8004402 <HAL_RCC_OscConfig+0x3d6>
 80043f0:	4b4c      	ldr	r3, [pc, #304]	; (8004524 <HAL_RCC_OscConfig+0x4f8>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80043f8:	4a4a      	ldr	r2, [pc, #296]	; (8004524 <HAL_RCC_OscConfig+0x4f8>)
 80043fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043fe:	6053      	str	r3, [r2, #4]
 8004400:	e02e      	b.n	8004460 <HAL_RCC_OscConfig+0x434>
 8004402:	4b48      	ldr	r3, [pc, #288]	; (8004524 <HAL_RCC_OscConfig+0x4f8>)
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	069b      	lsls	r3, r3, #26
 8004410:	4944      	ldr	r1, [pc, #272]	; (8004524 <HAL_RCC_OscConfig+0x4f8>)
 8004412:	4313      	orrs	r3, r2
 8004414:	604b      	str	r3, [r1, #4]
 8004416:	e023      	b.n	8004460 <HAL_RCC_OscConfig+0x434>
 8004418:	4b42      	ldr	r3, [pc, #264]	; (8004524 <HAL_RCC_OscConfig+0x4f8>)
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a1b      	ldr	r3, [r3, #32]
 8004424:	061b      	lsls	r3, r3, #24
 8004426:	493f      	ldr	r1, [pc, #252]	; (8004524 <HAL_RCC_OscConfig+0x4f8>)
 8004428:	4313      	orrs	r3, r2
 800442a:	60cb      	str	r3, [r1, #12]
 800442c:	e018      	b.n	8004460 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800442e:	4b3d      	ldr	r3, [pc, #244]	; (8004524 <HAL_RCC_OscConfig+0x4f8>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a3c      	ldr	r2, [pc, #240]	; (8004524 <HAL_RCC_OscConfig+0x4f8>)
 8004434:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004438:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443a:	f7fe fcdb 	bl	8002df4 <HAL_GetTick>
 800443e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004440:	e008      	b.n	8004454 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004442:	f7fe fcd7 	bl	8002df4 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e212      	b.n	800487a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004454:	4b33      	ldr	r3, [pc, #204]	; (8004524 <HAL_RCC_OscConfig+0x4f8>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1f0      	bne.n	8004442 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0308 	and.w	r3, r3, #8
 8004468:	2b00      	cmp	r3, #0
 800446a:	d036      	beq.n	80044da <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d019      	beq.n	80044a8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004474:	4b2b      	ldr	r3, [pc, #172]	; (8004524 <HAL_RCC_OscConfig+0x4f8>)
 8004476:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004478:	4a2a      	ldr	r2, [pc, #168]	; (8004524 <HAL_RCC_OscConfig+0x4f8>)
 800447a:	f043 0301 	orr.w	r3, r3, #1
 800447e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004480:	f7fe fcb8 	bl	8002df4 <HAL_GetTick>
 8004484:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004488:	f7fe fcb4 	bl	8002df4 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e1ef      	b.n	800487a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800449a:	4b22      	ldr	r3, [pc, #136]	; (8004524 <HAL_RCC_OscConfig+0x4f8>)
 800449c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d0f0      	beq.n	8004488 <HAL_RCC_OscConfig+0x45c>
 80044a6:	e018      	b.n	80044da <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044a8:	4b1e      	ldr	r3, [pc, #120]	; (8004524 <HAL_RCC_OscConfig+0x4f8>)
 80044aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ac:	4a1d      	ldr	r2, [pc, #116]	; (8004524 <HAL_RCC_OscConfig+0x4f8>)
 80044ae:	f023 0301 	bic.w	r3, r3, #1
 80044b2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b4:	f7fe fc9e 	bl	8002df4 <HAL_GetTick>
 80044b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044bc:	f7fe fc9a 	bl	8002df4 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e1d5      	b.n	800487a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80044ce:	4b15      	ldr	r3, [pc, #84]	; (8004524 <HAL_RCC_OscConfig+0x4f8>)
 80044d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1f0      	bne.n	80044bc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0320 	and.w	r3, r3, #32
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d039      	beq.n	800455a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d01c      	beq.n	8004528 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80044ee:	4b0d      	ldr	r3, [pc, #52]	; (8004524 <HAL_RCC_OscConfig+0x4f8>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a0c      	ldr	r2, [pc, #48]	; (8004524 <HAL_RCC_OscConfig+0x4f8>)
 80044f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80044f8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80044fa:	f7fe fc7b 	bl	8002df4 <HAL_GetTick>
 80044fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004500:	e008      	b.n	8004514 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004502:	f7fe fc77 	bl	8002df4 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b02      	cmp	r3, #2
 800450e:	d901      	bls.n	8004514 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e1b2      	b.n	800487a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004514:	4b03      	ldr	r3, [pc, #12]	; (8004524 <HAL_RCC_OscConfig+0x4f8>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d0f0      	beq.n	8004502 <HAL_RCC_OscConfig+0x4d6>
 8004520:	e01b      	b.n	800455a <HAL_RCC_OscConfig+0x52e>
 8004522:	bf00      	nop
 8004524:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004528:	4b9b      	ldr	r3, [pc, #620]	; (8004798 <HAL_RCC_OscConfig+0x76c>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a9a      	ldr	r2, [pc, #616]	; (8004798 <HAL_RCC_OscConfig+0x76c>)
 800452e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004532:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004534:	f7fe fc5e 	bl	8002df4 <HAL_GetTick>
 8004538:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800453a:	e008      	b.n	800454e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800453c:	f7fe fc5a 	bl	8002df4 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e195      	b.n	800487a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800454e:	4b92      	ldr	r3, [pc, #584]	; (8004798 <HAL_RCC_OscConfig+0x76c>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1f0      	bne.n	800453c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0304 	and.w	r3, r3, #4
 8004562:	2b00      	cmp	r3, #0
 8004564:	f000 8081 	beq.w	800466a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004568:	4b8c      	ldr	r3, [pc, #560]	; (800479c <HAL_RCC_OscConfig+0x770>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a8b      	ldr	r2, [pc, #556]	; (800479c <HAL_RCC_OscConfig+0x770>)
 800456e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004572:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004574:	f7fe fc3e 	bl	8002df4 <HAL_GetTick>
 8004578:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800457a:	e008      	b.n	800458e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800457c:	f7fe fc3a 	bl	8002df4 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b64      	cmp	r3, #100	; 0x64
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e175      	b.n	800487a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800458e:	4b83      	ldr	r3, [pc, #524]	; (800479c <HAL_RCC_OscConfig+0x770>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004596:	2b00      	cmp	r3, #0
 8004598:	d0f0      	beq.n	800457c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d106      	bne.n	80045b0 <HAL_RCC_OscConfig+0x584>
 80045a2:	4b7d      	ldr	r3, [pc, #500]	; (8004798 <HAL_RCC_OscConfig+0x76c>)
 80045a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a6:	4a7c      	ldr	r2, [pc, #496]	; (8004798 <HAL_RCC_OscConfig+0x76c>)
 80045a8:	f043 0301 	orr.w	r3, r3, #1
 80045ac:	6713      	str	r3, [r2, #112]	; 0x70
 80045ae:	e02d      	b.n	800460c <HAL_RCC_OscConfig+0x5e0>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10c      	bne.n	80045d2 <HAL_RCC_OscConfig+0x5a6>
 80045b8:	4b77      	ldr	r3, [pc, #476]	; (8004798 <HAL_RCC_OscConfig+0x76c>)
 80045ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045bc:	4a76      	ldr	r2, [pc, #472]	; (8004798 <HAL_RCC_OscConfig+0x76c>)
 80045be:	f023 0301 	bic.w	r3, r3, #1
 80045c2:	6713      	str	r3, [r2, #112]	; 0x70
 80045c4:	4b74      	ldr	r3, [pc, #464]	; (8004798 <HAL_RCC_OscConfig+0x76c>)
 80045c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c8:	4a73      	ldr	r2, [pc, #460]	; (8004798 <HAL_RCC_OscConfig+0x76c>)
 80045ca:	f023 0304 	bic.w	r3, r3, #4
 80045ce:	6713      	str	r3, [r2, #112]	; 0x70
 80045d0:	e01c      	b.n	800460c <HAL_RCC_OscConfig+0x5e0>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	2b05      	cmp	r3, #5
 80045d8:	d10c      	bne.n	80045f4 <HAL_RCC_OscConfig+0x5c8>
 80045da:	4b6f      	ldr	r3, [pc, #444]	; (8004798 <HAL_RCC_OscConfig+0x76c>)
 80045dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045de:	4a6e      	ldr	r2, [pc, #440]	; (8004798 <HAL_RCC_OscConfig+0x76c>)
 80045e0:	f043 0304 	orr.w	r3, r3, #4
 80045e4:	6713      	str	r3, [r2, #112]	; 0x70
 80045e6:	4b6c      	ldr	r3, [pc, #432]	; (8004798 <HAL_RCC_OscConfig+0x76c>)
 80045e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ea:	4a6b      	ldr	r2, [pc, #428]	; (8004798 <HAL_RCC_OscConfig+0x76c>)
 80045ec:	f043 0301 	orr.w	r3, r3, #1
 80045f0:	6713      	str	r3, [r2, #112]	; 0x70
 80045f2:	e00b      	b.n	800460c <HAL_RCC_OscConfig+0x5e0>
 80045f4:	4b68      	ldr	r3, [pc, #416]	; (8004798 <HAL_RCC_OscConfig+0x76c>)
 80045f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f8:	4a67      	ldr	r2, [pc, #412]	; (8004798 <HAL_RCC_OscConfig+0x76c>)
 80045fa:	f023 0301 	bic.w	r3, r3, #1
 80045fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004600:	4b65      	ldr	r3, [pc, #404]	; (8004798 <HAL_RCC_OscConfig+0x76c>)
 8004602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004604:	4a64      	ldr	r2, [pc, #400]	; (8004798 <HAL_RCC_OscConfig+0x76c>)
 8004606:	f023 0304 	bic.w	r3, r3, #4
 800460a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d015      	beq.n	8004640 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004614:	f7fe fbee 	bl	8002df4 <HAL_GetTick>
 8004618:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800461a:	e00a      	b.n	8004632 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800461c:	f7fe fbea 	bl	8002df4 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	f241 3288 	movw	r2, #5000	; 0x1388
 800462a:	4293      	cmp	r3, r2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e123      	b.n	800487a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004632:	4b59      	ldr	r3, [pc, #356]	; (8004798 <HAL_RCC_OscConfig+0x76c>)
 8004634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d0ee      	beq.n	800461c <HAL_RCC_OscConfig+0x5f0>
 800463e:	e014      	b.n	800466a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004640:	f7fe fbd8 	bl	8002df4 <HAL_GetTick>
 8004644:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004646:	e00a      	b.n	800465e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004648:	f7fe fbd4 	bl	8002df4 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	f241 3288 	movw	r2, #5000	; 0x1388
 8004656:	4293      	cmp	r3, r2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e10d      	b.n	800487a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800465e:	4b4e      	ldr	r3, [pc, #312]	; (8004798 <HAL_RCC_OscConfig+0x76c>)
 8004660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1ee      	bne.n	8004648 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	2b00      	cmp	r3, #0
 8004670:	f000 8102 	beq.w	8004878 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004674:	4b48      	ldr	r3, [pc, #288]	; (8004798 <HAL_RCC_OscConfig+0x76c>)
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800467c:	2b18      	cmp	r3, #24
 800467e:	f000 80bd 	beq.w	80047fc <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004686:	2b02      	cmp	r3, #2
 8004688:	f040 809e 	bne.w	80047c8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800468c:	4b42      	ldr	r3, [pc, #264]	; (8004798 <HAL_RCC_OscConfig+0x76c>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a41      	ldr	r2, [pc, #260]	; (8004798 <HAL_RCC_OscConfig+0x76c>)
 8004692:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004696:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004698:	f7fe fbac 	bl	8002df4 <HAL_GetTick>
 800469c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800469e:	e008      	b.n	80046b2 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046a0:	f7fe fba8 	bl	8002df4 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e0e3      	b.n	800487a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80046b2:	4b39      	ldr	r3, [pc, #228]	; (8004798 <HAL_RCC_OscConfig+0x76c>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1f0      	bne.n	80046a0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046be:	4b36      	ldr	r3, [pc, #216]	; (8004798 <HAL_RCC_OscConfig+0x76c>)
 80046c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046c2:	4b37      	ldr	r3, [pc, #220]	; (80047a0 <HAL_RCC_OscConfig+0x774>)
 80046c4:	4013      	ands	r3, r2
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80046ce:	0112      	lsls	r2, r2, #4
 80046d0:	430a      	orrs	r2, r1
 80046d2:	4931      	ldr	r1, [pc, #196]	; (8004798 <HAL_RCC_OscConfig+0x76c>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	628b      	str	r3, [r1, #40]	; 0x28
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046dc:	3b01      	subs	r3, #1
 80046de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046e6:	3b01      	subs	r3, #1
 80046e8:	025b      	lsls	r3, r3, #9
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	431a      	orrs	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f2:	3b01      	subs	r3, #1
 80046f4:	041b      	lsls	r3, r3, #16
 80046f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80046fa:	431a      	orrs	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004700:	3b01      	subs	r3, #1
 8004702:	061b      	lsls	r3, r3, #24
 8004704:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004708:	4923      	ldr	r1, [pc, #140]	; (8004798 <HAL_RCC_OscConfig+0x76c>)
 800470a:	4313      	orrs	r3, r2
 800470c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800470e:	4b22      	ldr	r3, [pc, #136]	; (8004798 <HAL_RCC_OscConfig+0x76c>)
 8004710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004712:	4a21      	ldr	r2, [pc, #132]	; (8004798 <HAL_RCC_OscConfig+0x76c>)
 8004714:	f023 0301 	bic.w	r3, r3, #1
 8004718:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800471a:	4b1f      	ldr	r3, [pc, #124]	; (8004798 <HAL_RCC_OscConfig+0x76c>)
 800471c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800471e:	4b21      	ldr	r3, [pc, #132]	; (80047a4 <HAL_RCC_OscConfig+0x778>)
 8004720:	4013      	ands	r3, r2
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004726:	00d2      	lsls	r2, r2, #3
 8004728:	491b      	ldr	r1, [pc, #108]	; (8004798 <HAL_RCC_OscConfig+0x76c>)
 800472a:	4313      	orrs	r3, r2
 800472c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800472e:	4b1a      	ldr	r3, [pc, #104]	; (8004798 <HAL_RCC_OscConfig+0x76c>)
 8004730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004732:	f023 020c 	bic.w	r2, r3, #12
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473a:	4917      	ldr	r1, [pc, #92]	; (8004798 <HAL_RCC_OscConfig+0x76c>)
 800473c:	4313      	orrs	r3, r2
 800473e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004740:	4b15      	ldr	r3, [pc, #84]	; (8004798 <HAL_RCC_OscConfig+0x76c>)
 8004742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004744:	f023 0202 	bic.w	r2, r3, #2
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474c:	4912      	ldr	r1, [pc, #72]	; (8004798 <HAL_RCC_OscConfig+0x76c>)
 800474e:	4313      	orrs	r3, r2
 8004750:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004752:	4b11      	ldr	r3, [pc, #68]	; (8004798 <HAL_RCC_OscConfig+0x76c>)
 8004754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004756:	4a10      	ldr	r2, [pc, #64]	; (8004798 <HAL_RCC_OscConfig+0x76c>)
 8004758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800475c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800475e:	4b0e      	ldr	r3, [pc, #56]	; (8004798 <HAL_RCC_OscConfig+0x76c>)
 8004760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004762:	4a0d      	ldr	r2, [pc, #52]	; (8004798 <HAL_RCC_OscConfig+0x76c>)
 8004764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004768:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800476a:	4b0b      	ldr	r3, [pc, #44]	; (8004798 <HAL_RCC_OscConfig+0x76c>)
 800476c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476e:	4a0a      	ldr	r2, [pc, #40]	; (8004798 <HAL_RCC_OscConfig+0x76c>)
 8004770:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004774:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004776:	4b08      	ldr	r3, [pc, #32]	; (8004798 <HAL_RCC_OscConfig+0x76c>)
 8004778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477a:	4a07      	ldr	r2, [pc, #28]	; (8004798 <HAL_RCC_OscConfig+0x76c>)
 800477c:	f043 0301 	orr.w	r3, r3, #1
 8004780:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004782:	4b05      	ldr	r3, [pc, #20]	; (8004798 <HAL_RCC_OscConfig+0x76c>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a04      	ldr	r2, [pc, #16]	; (8004798 <HAL_RCC_OscConfig+0x76c>)
 8004788:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800478c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800478e:	f7fe fb31 	bl	8002df4 <HAL_GetTick>
 8004792:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004794:	e011      	b.n	80047ba <HAL_RCC_OscConfig+0x78e>
 8004796:	bf00      	nop
 8004798:	58024400 	.word	0x58024400
 800479c:	58024800 	.word	0x58024800
 80047a0:	fffffc0c 	.word	0xfffffc0c
 80047a4:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047a8:	f7fe fb24 	bl	8002df4 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e05f      	b.n	800487a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80047ba:	4b32      	ldr	r3, [pc, #200]	; (8004884 <HAL_RCC_OscConfig+0x858>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d0f0      	beq.n	80047a8 <HAL_RCC_OscConfig+0x77c>
 80047c6:	e057      	b.n	8004878 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047c8:	4b2e      	ldr	r3, [pc, #184]	; (8004884 <HAL_RCC_OscConfig+0x858>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a2d      	ldr	r2, [pc, #180]	; (8004884 <HAL_RCC_OscConfig+0x858>)
 80047ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d4:	f7fe fb0e 	bl	8002df4 <HAL_GetTick>
 80047d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047dc:	f7fe fb0a 	bl	8002df4 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e045      	b.n	800487a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047ee:	4b25      	ldr	r3, [pc, #148]	; (8004884 <HAL_RCC_OscConfig+0x858>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1f0      	bne.n	80047dc <HAL_RCC_OscConfig+0x7b0>
 80047fa:	e03d      	b.n	8004878 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80047fc:	4b21      	ldr	r3, [pc, #132]	; (8004884 <HAL_RCC_OscConfig+0x858>)
 80047fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004800:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004802:	4b20      	ldr	r3, [pc, #128]	; (8004884 <HAL_RCC_OscConfig+0x858>)
 8004804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004806:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	2b01      	cmp	r3, #1
 800480e:	d031      	beq.n	8004874 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	f003 0203 	and.w	r2, r3, #3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800481a:	429a      	cmp	r2, r3
 800481c:	d12a      	bne.n	8004874 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	091b      	lsrs	r3, r3, #4
 8004822:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800482a:	429a      	cmp	r2, r3
 800482c:	d122      	bne.n	8004874 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004838:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800483a:	429a      	cmp	r2, r3
 800483c:	d11a      	bne.n	8004874 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	0a5b      	lsrs	r3, r3, #9
 8004842:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800484a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800484c:	429a      	cmp	r2, r3
 800484e:	d111      	bne.n	8004874 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	0c1b      	lsrs	r3, r3, #16
 8004854:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800485e:	429a      	cmp	r2, r3
 8004860:	d108      	bne.n	8004874 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	0e1b      	lsrs	r3, r3, #24
 8004866:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800486e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004870:	429a      	cmp	r2, r3
 8004872:	d001      	beq.n	8004878 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e000      	b.n	800487a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3730      	adds	r7, #48	; 0x30
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	58024400 	.word	0x58024400

08004888 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d101      	bne.n	800489c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e19c      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800489c:	4b8a      	ldr	r3, [pc, #552]	; (8004ac8 <HAL_RCC_ClockConfig+0x240>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 030f 	and.w	r3, r3, #15
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d910      	bls.n	80048cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048aa:	4b87      	ldr	r3, [pc, #540]	; (8004ac8 <HAL_RCC_ClockConfig+0x240>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f023 020f 	bic.w	r2, r3, #15
 80048b2:	4985      	ldr	r1, [pc, #532]	; (8004ac8 <HAL_RCC_ClockConfig+0x240>)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ba:	4b83      	ldr	r3, [pc, #524]	; (8004ac8 <HAL_RCC_ClockConfig+0x240>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 030f 	and.w	r3, r3, #15
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d001      	beq.n	80048cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e184      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0304 	and.w	r3, r3, #4
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d010      	beq.n	80048fa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	691a      	ldr	r2, [r3, #16]
 80048dc:	4b7b      	ldr	r3, [pc, #492]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d908      	bls.n	80048fa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80048e8:	4b78      	ldr	r3, [pc, #480]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	4975      	ldr	r1, [pc, #468]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0308 	and.w	r3, r3, #8
 8004902:	2b00      	cmp	r3, #0
 8004904:	d010      	beq.n	8004928 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	695a      	ldr	r2, [r3, #20]
 800490a:	4b70      	ldr	r3, [pc, #448]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004912:	429a      	cmp	r2, r3
 8004914:	d908      	bls.n	8004928 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004916:	4b6d      	ldr	r3, [pc, #436]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 8004918:	69db      	ldr	r3, [r3, #28]
 800491a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	496a      	ldr	r1, [pc, #424]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 8004924:	4313      	orrs	r3, r2
 8004926:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0310 	and.w	r3, r3, #16
 8004930:	2b00      	cmp	r3, #0
 8004932:	d010      	beq.n	8004956 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	699a      	ldr	r2, [r3, #24]
 8004938:	4b64      	ldr	r3, [pc, #400]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 800493a:	69db      	ldr	r3, [r3, #28]
 800493c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004940:	429a      	cmp	r2, r3
 8004942:	d908      	bls.n	8004956 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004944:	4b61      	ldr	r3, [pc, #388]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 8004946:	69db      	ldr	r3, [r3, #28]
 8004948:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	495e      	ldr	r1, [pc, #376]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 8004952:	4313      	orrs	r3, r2
 8004954:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0320 	and.w	r3, r3, #32
 800495e:	2b00      	cmp	r3, #0
 8004960:	d010      	beq.n	8004984 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	69da      	ldr	r2, [r3, #28]
 8004966:	4b59      	ldr	r3, [pc, #356]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800496e:	429a      	cmp	r2, r3
 8004970:	d908      	bls.n	8004984 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004972:	4b56      	ldr	r3, [pc, #344]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 8004974:	6a1b      	ldr	r3, [r3, #32]
 8004976:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	69db      	ldr	r3, [r3, #28]
 800497e:	4953      	ldr	r1, [pc, #332]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 8004980:	4313      	orrs	r3, r2
 8004982:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0302 	and.w	r3, r3, #2
 800498c:	2b00      	cmp	r3, #0
 800498e:	d010      	beq.n	80049b2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	68da      	ldr	r2, [r3, #12]
 8004994:	4b4d      	ldr	r3, [pc, #308]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	f003 030f 	and.w	r3, r3, #15
 800499c:	429a      	cmp	r2, r3
 800499e:	d908      	bls.n	80049b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049a0:	4b4a      	ldr	r3, [pc, #296]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	f023 020f 	bic.w	r2, r3, #15
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	4947      	ldr	r1, [pc, #284]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d055      	beq.n	8004a6a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80049be:	4b43      	ldr	r3, [pc, #268]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	4940      	ldr	r1, [pc, #256]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d107      	bne.n	80049e8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049d8:	4b3c      	ldr	r3, [pc, #240]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d121      	bne.n	8004a28 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e0f6      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	2b03      	cmp	r3, #3
 80049ee:	d107      	bne.n	8004a00 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80049f0:	4b36      	ldr	r3, [pc, #216]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d115      	bne.n	8004a28 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e0ea      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d107      	bne.n	8004a18 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a08:	4b30      	ldr	r3, [pc, #192]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d109      	bne.n	8004a28 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e0de      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a18:	4b2c      	ldr	r3, [pc, #176]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0304 	and.w	r3, r3, #4
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d101      	bne.n	8004a28 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e0d6      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a28:	4b28      	ldr	r3, [pc, #160]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	f023 0207 	bic.w	r2, r3, #7
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	4925      	ldr	r1, [pc, #148]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a3a:	f7fe f9db 	bl	8002df4 <HAL_GetTick>
 8004a3e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a40:	e00a      	b.n	8004a58 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a42:	f7fe f9d7 	bl	8002df4 <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d901      	bls.n	8004a58 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e0be      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a58:	4b1c      	ldr	r3, [pc, #112]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	00db      	lsls	r3, r3, #3
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d1eb      	bne.n	8004a42 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d010      	beq.n	8004a98 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68da      	ldr	r2, [r3, #12]
 8004a7a:	4b14      	ldr	r3, [pc, #80]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	f003 030f 	and.w	r3, r3, #15
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d208      	bcs.n	8004a98 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a86:	4b11      	ldr	r3, [pc, #68]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	f023 020f 	bic.w	r2, r3, #15
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	490e      	ldr	r1, [pc, #56]	; (8004acc <HAL_RCC_ClockConfig+0x244>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a98:	4b0b      	ldr	r3, [pc, #44]	; (8004ac8 <HAL_RCC_ClockConfig+0x240>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 030f 	and.w	r3, r3, #15
 8004aa0:	683a      	ldr	r2, [r7, #0]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d214      	bcs.n	8004ad0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aa6:	4b08      	ldr	r3, [pc, #32]	; (8004ac8 <HAL_RCC_ClockConfig+0x240>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f023 020f 	bic.w	r2, r3, #15
 8004aae:	4906      	ldr	r1, [pc, #24]	; (8004ac8 <HAL_RCC_ClockConfig+0x240>)
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ab6:	4b04      	ldr	r3, [pc, #16]	; (8004ac8 <HAL_RCC_ClockConfig+0x240>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 030f 	and.w	r3, r3, #15
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d005      	beq.n	8004ad0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e086      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x34e>
 8004ac8:	52002000 	.word	0x52002000
 8004acc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0304 	and.w	r3, r3, #4
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d010      	beq.n	8004afe <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	691a      	ldr	r2, [r3, #16]
 8004ae0:	4b3f      	ldr	r3, [pc, #252]	; (8004be0 <HAL_RCC_ClockConfig+0x358>)
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d208      	bcs.n	8004afe <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004aec:	4b3c      	ldr	r3, [pc, #240]	; (8004be0 <HAL_RCC_ClockConfig+0x358>)
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	4939      	ldr	r1, [pc, #228]	; (8004be0 <HAL_RCC_ClockConfig+0x358>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0308 	and.w	r3, r3, #8
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d010      	beq.n	8004b2c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	695a      	ldr	r2, [r3, #20]
 8004b0e:	4b34      	ldr	r3, [pc, #208]	; (8004be0 <HAL_RCC_ClockConfig+0x358>)
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d208      	bcs.n	8004b2c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004b1a:	4b31      	ldr	r3, [pc, #196]	; (8004be0 <HAL_RCC_ClockConfig+0x358>)
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	492e      	ldr	r1, [pc, #184]	; (8004be0 <HAL_RCC_ClockConfig+0x358>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0310 	and.w	r3, r3, #16
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d010      	beq.n	8004b5a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	699a      	ldr	r2, [r3, #24]
 8004b3c:	4b28      	ldr	r3, [pc, #160]	; (8004be0 <HAL_RCC_ClockConfig+0x358>)
 8004b3e:	69db      	ldr	r3, [r3, #28]
 8004b40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d208      	bcs.n	8004b5a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004b48:	4b25      	ldr	r3, [pc, #148]	; (8004be0 <HAL_RCC_ClockConfig+0x358>)
 8004b4a:	69db      	ldr	r3, [r3, #28]
 8004b4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	4922      	ldr	r1, [pc, #136]	; (8004be0 <HAL_RCC_ClockConfig+0x358>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0320 	and.w	r3, r3, #32
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d010      	beq.n	8004b88 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	69da      	ldr	r2, [r3, #28]
 8004b6a:	4b1d      	ldr	r3, [pc, #116]	; (8004be0 <HAL_RCC_ClockConfig+0x358>)
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d208      	bcs.n	8004b88 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004b76:	4b1a      	ldr	r3, [pc, #104]	; (8004be0 <HAL_RCC_ClockConfig+0x358>)
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	4917      	ldr	r1, [pc, #92]	; (8004be0 <HAL_RCC_ClockConfig+0x358>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004b88:	f000 f834 	bl	8004bf4 <HAL_RCC_GetSysClockFreq>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	4b14      	ldr	r3, [pc, #80]	; (8004be0 <HAL_RCC_ClockConfig+0x358>)
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	0a1b      	lsrs	r3, r3, #8
 8004b94:	f003 030f 	and.w	r3, r3, #15
 8004b98:	4912      	ldr	r1, [pc, #72]	; (8004be4 <HAL_RCC_ClockConfig+0x35c>)
 8004b9a:	5ccb      	ldrb	r3, [r1, r3]
 8004b9c:	f003 031f 	and.w	r3, r3, #31
 8004ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ba4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ba6:	4b0e      	ldr	r3, [pc, #56]	; (8004be0 <HAL_RCC_ClockConfig+0x358>)
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	f003 030f 	and.w	r3, r3, #15
 8004bae:	4a0d      	ldr	r2, [pc, #52]	; (8004be4 <HAL_RCC_ClockConfig+0x35c>)
 8004bb0:	5cd3      	ldrb	r3, [r2, r3]
 8004bb2:	f003 031f 	and.w	r3, r3, #31
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8004bbc:	4a0a      	ldr	r2, [pc, #40]	; (8004be8 <HAL_RCC_ClockConfig+0x360>)
 8004bbe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004bc0:	4a0a      	ldr	r2, [pc, #40]	; (8004bec <HAL_RCC_ClockConfig+0x364>)
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004bc6:	4b0a      	ldr	r3, [pc, #40]	; (8004bf0 <HAL_RCC_ClockConfig+0x368>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7fe f8c8 	bl	8002d60 <HAL_InitTick>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3718      	adds	r7, #24
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	58024400 	.word	0x58024400
 8004be4:	08007240 	.word	0x08007240
 8004be8:	24000004 	.word	0x24000004
 8004bec:	24000000 	.word	0x24000000
 8004bf0:	24000234 	.word	0x24000234

08004bf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b089      	sub	sp, #36	; 0x24
 8004bf8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bfa:	4bb3      	ldr	r3, [pc, #716]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c02:	2b18      	cmp	r3, #24
 8004c04:	f200 8155 	bhi.w	8004eb2 <HAL_RCC_GetSysClockFreq+0x2be>
 8004c08:	a201      	add	r2, pc, #4	; (adr r2, 8004c10 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c0e:	bf00      	nop
 8004c10:	08004c75 	.word	0x08004c75
 8004c14:	08004eb3 	.word	0x08004eb3
 8004c18:	08004eb3 	.word	0x08004eb3
 8004c1c:	08004eb3 	.word	0x08004eb3
 8004c20:	08004eb3 	.word	0x08004eb3
 8004c24:	08004eb3 	.word	0x08004eb3
 8004c28:	08004eb3 	.word	0x08004eb3
 8004c2c:	08004eb3 	.word	0x08004eb3
 8004c30:	08004c9b 	.word	0x08004c9b
 8004c34:	08004eb3 	.word	0x08004eb3
 8004c38:	08004eb3 	.word	0x08004eb3
 8004c3c:	08004eb3 	.word	0x08004eb3
 8004c40:	08004eb3 	.word	0x08004eb3
 8004c44:	08004eb3 	.word	0x08004eb3
 8004c48:	08004eb3 	.word	0x08004eb3
 8004c4c:	08004eb3 	.word	0x08004eb3
 8004c50:	08004ca1 	.word	0x08004ca1
 8004c54:	08004eb3 	.word	0x08004eb3
 8004c58:	08004eb3 	.word	0x08004eb3
 8004c5c:	08004eb3 	.word	0x08004eb3
 8004c60:	08004eb3 	.word	0x08004eb3
 8004c64:	08004eb3 	.word	0x08004eb3
 8004c68:	08004eb3 	.word	0x08004eb3
 8004c6c:	08004eb3 	.word	0x08004eb3
 8004c70:	08004ca7 	.word	0x08004ca7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c74:	4b94      	ldr	r3, [pc, #592]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0320 	and.w	r3, r3, #32
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d009      	beq.n	8004c94 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004c80:	4b91      	ldr	r3, [pc, #580]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	08db      	lsrs	r3, r3, #3
 8004c86:	f003 0303 	and.w	r3, r3, #3
 8004c8a:	4a90      	ldr	r2, [pc, #576]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c90:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004c92:	e111      	b.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004c94:	4b8d      	ldr	r3, [pc, #564]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004c96:	61bb      	str	r3, [r7, #24]
    break;
 8004c98:	e10e      	b.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004c9a:	4b8d      	ldr	r3, [pc, #564]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004c9c:	61bb      	str	r3, [r7, #24]
    break;
 8004c9e:	e10b      	b.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004ca0:	4b8c      	ldr	r3, [pc, #560]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004ca2:	61bb      	str	r3, [r7, #24]
    break;
 8004ca4:	e108      	b.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ca6:	4b88      	ldr	r3, [pc, #544]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004caa:	f003 0303 	and.w	r3, r3, #3
 8004cae:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004cb0:	4b85      	ldr	r3, [pc, #532]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb4:	091b      	lsrs	r3, r3, #4
 8004cb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cba:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004cbc:	4b82      	ldr	r3, [pc, #520]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004cc6:	4b80      	ldr	r3, [pc, #512]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cca:	08db      	lsrs	r3, r3, #3
 8004ccc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	fb02 f303 	mul.w	r3, r2, r3
 8004cd6:	ee07 3a90 	vmov	s15, r3
 8004cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cde:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f000 80e1 	beq.w	8004eac <HAL_RCC_GetSysClockFreq+0x2b8>
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	f000 8083 	beq.w	8004df8 <HAL_RCC_GetSysClockFreq+0x204>
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	f200 80a1 	bhi.w	8004e3c <HAL_RCC_GetSysClockFreq+0x248>
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d003      	beq.n	8004d08 <HAL_RCC_GetSysClockFreq+0x114>
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d056      	beq.n	8004db4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004d06:	e099      	b.n	8004e3c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d08:	4b6f      	ldr	r3, [pc, #444]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0320 	and.w	r3, r3, #32
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d02d      	beq.n	8004d70 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d14:	4b6c      	ldr	r3, [pc, #432]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	08db      	lsrs	r3, r3, #3
 8004d1a:	f003 0303 	and.w	r3, r3, #3
 8004d1e:	4a6b      	ldr	r2, [pc, #428]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d20:	fa22 f303 	lsr.w	r3, r2, r3
 8004d24:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	ee07 3a90 	vmov	s15, r3
 8004d2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	ee07 3a90 	vmov	s15, r3
 8004d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d3e:	4b62      	ldr	r3, [pc, #392]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d46:	ee07 3a90 	vmov	s15, r3
 8004d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d52:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004ed8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d6a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004d6e:	e087      	b.n	8004e80 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	ee07 3a90 	vmov	s15, r3
 8004d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d7a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004edc <HAL_RCC_GetSysClockFreq+0x2e8>
 8004d7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d82:	4b51      	ldr	r3, [pc, #324]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d8a:	ee07 3a90 	vmov	s15, r3
 8004d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d92:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d96:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004ed8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004da2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004db2:	e065      	b.n	8004e80 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	ee07 3a90 	vmov	s15, r3
 8004dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dbe:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004ee0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dc6:	4b40      	ldr	r3, [pc, #256]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dce:	ee07 3a90 	vmov	s15, r3
 8004dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004dda:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004ed8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004de6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004df2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004df6:	e043      	b.n	8004e80 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	ee07 3a90 	vmov	s15, r3
 8004dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e02:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004ee4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e0a:	4b2f      	ldr	r3, [pc, #188]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e12:	ee07 3a90 	vmov	s15, r3
 8004e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e1e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004ed8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e3a:	e021      	b.n	8004e80 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	ee07 3a90 	vmov	s15, r3
 8004e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e46:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004ee0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e4e:	4b1e      	ldr	r3, [pc, #120]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e56:	ee07 3a90 	vmov	s15, r3
 8004e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e62:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004ed8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e7e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004e80:	4b11      	ldr	r3, [pc, #68]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e84:	0a5b      	lsrs	r3, r3, #9
 8004e86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	ee07 3a90 	vmov	s15, r3
 8004e94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004e98:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ea0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ea4:	ee17 3a90 	vmov	r3, s15
 8004ea8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004eaa:	e005      	b.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004eac:	2300      	movs	r3, #0
 8004eae:	61bb      	str	r3, [r7, #24]
    break;
 8004eb0:	e002      	b.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004eb2:	4b07      	ldr	r3, [pc, #28]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004eb4:	61bb      	str	r3, [r7, #24]
    break;
 8004eb6:	bf00      	nop
  }

  return sysclockfreq;
 8004eb8:	69bb      	ldr	r3, [r7, #24]
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3724      	adds	r7, #36	; 0x24
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	58024400 	.word	0x58024400
 8004ecc:	03d09000 	.word	0x03d09000
 8004ed0:	003d0900 	.word	0x003d0900
 8004ed4:	007a1200 	.word	0x007a1200
 8004ed8:	46000000 	.word	0x46000000
 8004edc:	4c742400 	.word	0x4c742400
 8004ee0:	4a742400 	.word	0x4a742400
 8004ee4:	4af42400 	.word	0x4af42400

08004ee8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004eee:	f7ff fe81 	bl	8004bf4 <HAL_RCC_GetSysClockFreq>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	4b10      	ldr	r3, [pc, #64]	; (8004f38 <HAL_RCC_GetHCLKFreq+0x50>)
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	0a1b      	lsrs	r3, r3, #8
 8004efa:	f003 030f 	and.w	r3, r3, #15
 8004efe:	490f      	ldr	r1, [pc, #60]	; (8004f3c <HAL_RCC_GetHCLKFreq+0x54>)
 8004f00:	5ccb      	ldrb	r3, [r1, r3]
 8004f02:	f003 031f 	and.w	r3, r3, #31
 8004f06:	fa22 f303 	lsr.w	r3, r2, r3
 8004f0a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f0c:	4b0a      	ldr	r3, [pc, #40]	; (8004f38 <HAL_RCC_GetHCLKFreq+0x50>)
 8004f0e:	699b      	ldr	r3, [r3, #24]
 8004f10:	f003 030f 	and.w	r3, r3, #15
 8004f14:	4a09      	ldr	r2, [pc, #36]	; (8004f3c <HAL_RCC_GetHCLKFreq+0x54>)
 8004f16:	5cd3      	ldrb	r3, [r2, r3]
 8004f18:	f003 031f 	and.w	r3, r3, #31
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f22:	4a07      	ldr	r2, [pc, #28]	; (8004f40 <HAL_RCC_GetHCLKFreq+0x58>)
 8004f24:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004f26:	4a07      	ldr	r2, [pc, #28]	; (8004f44 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004f2c:	4b04      	ldr	r3, [pc, #16]	; (8004f40 <HAL_RCC_GetHCLKFreq+0x58>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3708      	adds	r7, #8
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	58024400 	.word	0x58024400
 8004f3c:	08007240 	.word	0x08007240
 8004f40:	24000004 	.word	0x24000004
 8004f44:	24000000 	.word	0x24000000

08004f48 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b086      	sub	sp, #24
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f50:	2300      	movs	r3, #0
 8004f52:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f54:	2300      	movs	r3, #0
 8004f56:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d03f      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f68:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f6c:	d02a      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004f6e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f72:	d824      	bhi.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f78:	d018      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004f7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f7e:	d81e      	bhi.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d003      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004f84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f88:	d007      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004f8a:	e018      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f8c:	4ba3      	ldr	r3, [pc, #652]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f90:	4aa2      	ldr	r2, [pc, #648]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004f92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004f98:	e015      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	3304      	adds	r3, #4
 8004f9e:	2102      	movs	r1, #2
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f000 ff17 	bl	8005dd4 <RCCEx_PLL2_Config>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004faa:	e00c      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	3324      	adds	r3, #36	; 0x24
 8004fb0:	2102      	movs	r1, #2
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f000 ffc0 	bl	8005f38 <RCCEx_PLL3_Config>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004fbc:	e003      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	75fb      	strb	r3, [r7, #23]
      break;
 8004fc2:	e000      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004fc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fc6:	7dfb      	ldrb	r3, [r7, #23]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d109      	bne.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004fcc:	4b93      	ldr	r3, [pc, #588]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fd8:	4990      	ldr	r1, [pc, #576]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	650b      	str	r3, [r1, #80]	; 0x50
 8004fde:	e001      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fe0:	7dfb      	ldrb	r3, [r7, #23]
 8004fe2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d03d      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff4:	2b04      	cmp	r3, #4
 8004ff6:	d826      	bhi.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004ff8:	a201      	add	r2, pc, #4	; (adr r2, 8005000 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ffe:	bf00      	nop
 8005000:	08005015 	.word	0x08005015
 8005004:	08005023 	.word	0x08005023
 8005008:	08005035 	.word	0x08005035
 800500c:	0800504d 	.word	0x0800504d
 8005010:	0800504d 	.word	0x0800504d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005014:	4b81      	ldr	r3, [pc, #516]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005018:	4a80      	ldr	r2, [pc, #512]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800501a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800501e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005020:	e015      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	3304      	adds	r3, #4
 8005026:	2100      	movs	r1, #0
 8005028:	4618      	mov	r0, r3
 800502a:	f000 fed3 	bl	8005dd4 <RCCEx_PLL2_Config>
 800502e:	4603      	mov	r3, r0
 8005030:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005032:	e00c      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	3324      	adds	r3, #36	; 0x24
 8005038:	2100      	movs	r1, #0
 800503a:	4618      	mov	r0, r3
 800503c:	f000 ff7c 	bl	8005f38 <RCCEx_PLL3_Config>
 8005040:	4603      	mov	r3, r0
 8005042:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005044:	e003      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	75fb      	strb	r3, [r7, #23]
      break;
 800504a:	e000      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800504c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800504e:	7dfb      	ldrb	r3, [r7, #23]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d109      	bne.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005054:	4b71      	ldr	r3, [pc, #452]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005058:	f023 0207 	bic.w	r2, r3, #7
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005060:	496e      	ldr	r1, [pc, #440]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005062:	4313      	orrs	r3, r2
 8005064:	650b      	str	r3, [r1, #80]	; 0x50
 8005066:	e001      	b.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005068:	7dfb      	ldrb	r3, [r7, #23]
 800506a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005074:	2b00      	cmp	r3, #0
 8005076:	d042      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800507c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005080:	d02b      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005086:	d825      	bhi.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005088:	2bc0      	cmp	r3, #192	; 0xc0
 800508a:	d028      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x196>
 800508c:	2bc0      	cmp	r3, #192	; 0xc0
 800508e:	d821      	bhi.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005090:	2b80      	cmp	r3, #128	; 0x80
 8005092:	d016      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005094:	2b80      	cmp	r3, #128	; 0x80
 8005096:	d81d      	bhi.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005098:	2b00      	cmp	r3, #0
 800509a:	d002      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800509c:	2b40      	cmp	r3, #64	; 0x40
 800509e:	d007      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80050a0:	e018      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050a2:	4b5e      	ldr	r3, [pc, #376]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80050a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a6:	4a5d      	ldr	r2, [pc, #372]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80050a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80050ae:	e017      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	3304      	adds	r3, #4
 80050b4:	2100      	movs	r1, #0
 80050b6:	4618      	mov	r0, r3
 80050b8:	f000 fe8c 	bl	8005dd4 <RCCEx_PLL2_Config>
 80050bc:	4603      	mov	r3, r0
 80050be:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80050c0:	e00e      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	3324      	adds	r3, #36	; 0x24
 80050c6:	2100      	movs	r1, #0
 80050c8:	4618      	mov	r0, r3
 80050ca:	f000 ff35 	bl	8005f38 <RCCEx_PLL3_Config>
 80050ce:	4603      	mov	r3, r0
 80050d0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80050d2:	e005      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	75fb      	strb	r3, [r7, #23]
      break;
 80050d8:	e002      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80050da:	bf00      	nop
 80050dc:	e000      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80050de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050e0:	7dfb      	ldrb	r3, [r7, #23]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d109      	bne.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80050e6:	4b4d      	ldr	r3, [pc, #308]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80050e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ea:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f2:	494a      	ldr	r1, [pc, #296]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	650b      	str	r3, [r1, #80]	; 0x50
 80050f8:	e001      	b.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050fa:	7dfb      	ldrb	r3, [r7, #23]
 80050fc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005106:	2b00      	cmp	r3, #0
 8005108:	d049      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005110:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005114:	d030      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005116:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800511a:	d82a      	bhi.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800511c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005120:	d02c      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005122:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005126:	d824      	bhi.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005128:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800512c:	d018      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800512e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005132:	d81e      	bhi.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005134:	2b00      	cmp	r3, #0
 8005136:	d003      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005138:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800513c:	d007      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800513e:	e018      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005140:	4b36      	ldr	r3, [pc, #216]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005144:	4a35      	ldr	r2, [pc, #212]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005146:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800514a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800514c:	e017      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	3304      	adds	r3, #4
 8005152:	2100      	movs	r1, #0
 8005154:	4618      	mov	r0, r3
 8005156:	f000 fe3d 	bl	8005dd4 <RCCEx_PLL2_Config>
 800515a:	4603      	mov	r3, r0
 800515c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800515e:	e00e      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	3324      	adds	r3, #36	; 0x24
 8005164:	2100      	movs	r1, #0
 8005166:	4618      	mov	r0, r3
 8005168:	f000 fee6 	bl	8005f38 <RCCEx_PLL3_Config>
 800516c:	4603      	mov	r3, r0
 800516e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005170:	e005      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	75fb      	strb	r3, [r7, #23]
      break;
 8005176:	e002      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005178:	bf00      	nop
 800517a:	e000      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800517c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800517e:	7dfb      	ldrb	r3, [r7, #23]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d10a      	bne.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005184:	4b25      	ldr	r3, [pc, #148]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005188:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005192:	4922      	ldr	r1, [pc, #136]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005194:	4313      	orrs	r3, r2
 8005196:	658b      	str	r3, [r1, #88]	; 0x58
 8005198:	e001      	b.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800519a:	7dfb      	ldrb	r3, [r7, #23]
 800519c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d04b      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80051b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051b4:	d030      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80051b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051ba:	d82a      	bhi.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80051bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80051c0:	d02e      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80051c2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80051c6:	d824      	bhi.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80051c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051cc:	d018      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80051ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051d2:	d81e      	bhi.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d003      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80051d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051dc:	d007      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80051de:	e018      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051e0:	4b0e      	ldr	r3, [pc, #56]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80051e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e4:	4a0d      	ldr	r2, [pc, #52]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80051e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80051ec:	e019      	b.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	3304      	adds	r3, #4
 80051f2:	2100      	movs	r1, #0
 80051f4:	4618      	mov	r0, r3
 80051f6:	f000 fded 	bl	8005dd4 <RCCEx_PLL2_Config>
 80051fa:	4603      	mov	r3, r0
 80051fc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80051fe:	e010      	b.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	3324      	adds	r3, #36	; 0x24
 8005204:	2100      	movs	r1, #0
 8005206:	4618      	mov	r0, r3
 8005208:	f000 fe96 	bl	8005f38 <RCCEx_PLL3_Config>
 800520c:	4603      	mov	r3, r0
 800520e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005210:	e007      	b.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	75fb      	strb	r3, [r7, #23]
      break;
 8005216:	e004      	b.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8005218:	bf00      	nop
 800521a:	e002      	b.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800521c:	58024400 	.word	0x58024400
      break;
 8005220:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005222:	7dfb      	ldrb	r3, [r7, #23]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d10a      	bne.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005228:	4b99      	ldr	r3, [pc, #612]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800522a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800522c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005236:	4996      	ldr	r1, [pc, #600]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005238:	4313      	orrs	r3, r2
 800523a:	658b      	str	r3, [r1, #88]	; 0x58
 800523c:	e001      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800523e:	7dfb      	ldrb	r3, [r7, #23]
 8005240:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d032      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005252:	2b30      	cmp	r3, #48	; 0x30
 8005254:	d01c      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8005256:	2b30      	cmp	r3, #48	; 0x30
 8005258:	d817      	bhi.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800525a:	2b20      	cmp	r3, #32
 800525c:	d00c      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800525e:	2b20      	cmp	r3, #32
 8005260:	d813      	bhi.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005262:	2b00      	cmp	r3, #0
 8005264:	d016      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005266:	2b10      	cmp	r3, #16
 8005268:	d10f      	bne.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800526a:	4b89      	ldr	r3, [pc, #548]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800526c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526e:	4a88      	ldr	r2, [pc, #544]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005274:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005276:	e00e      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	3304      	adds	r3, #4
 800527c:	2102      	movs	r1, #2
 800527e:	4618      	mov	r0, r3
 8005280:	f000 fda8 	bl	8005dd4 <RCCEx_PLL2_Config>
 8005284:	4603      	mov	r3, r0
 8005286:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005288:	e005      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	75fb      	strb	r3, [r7, #23]
      break;
 800528e:	e002      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005290:	bf00      	nop
 8005292:	e000      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005294:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005296:	7dfb      	ldrb	r3, [r7, #23]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d109      	bne.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800529c:	4b7c      	ldr	r3, [pc, #496]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800529e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052a8:	4979      	ldr	r1, [pc, #484]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	64cb      	str	r3, [r1, #76]	; 0x4c
 80052ae:	e001      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052b0:	7dfb      	ldrb	r3, [r7, #23]
 80052b2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d047      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052c8:	d030      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80052ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052ce:	d82a      	bhi.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80052d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80052d4:	d02c      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80052d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80052da:	d824      	bhi.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80052dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052e0:	d018      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80052e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052e6:	d81e      	bhi.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d003      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80052ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052f0:	d007      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80052f2:	e018      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052f4:	4b66      	ldr	r3, [pc, #408]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80052f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f8:	4a65      	ldr	r2, [pc, #404]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80052fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005300:	e017      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	3304      	adds	r3, #4
 8005306:	2100      	movs	r1, #0
 8005308:	4618      	mov	r0, r3
 800530a:	f000 fd63 	bl	8005dd4 <RCCEx_PLL2_Config>
 800530e:	4603      	mov	r3, r0
 8005310:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005312:	e00e      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	3324      	adds	r3, #36	; 0x24
 8005318:	2100      	movs	r1, #0
 800531a:	4618      	mov	r0, r3
 800531c:	f000 fe0c 	bl	8005f38 <RCCEx_PLL3_Config>
 8005320:	4603      	mov	r3, r0
 8005322:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005324:	e005      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	75fb      	strb	r3, [r7, #23]
      break;
 800532a:	e002      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800532c:	bf00      	nop
 800532e:	e000      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005330:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005332:	7dfb      	ldrb	r3, [r7, #23]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d109      	bne.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005338:	4b55      	ldr	r3, [pc, #340]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800533a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800533c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005344:	4952      	ldr	r1, [pc, #328]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005346:	4313      	orrs	r3, r2
 8005348:	650b      	str	r3, [r1, #80]	; 0x50
 800534a:	e001      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800534c:	7dfb      	ldrb	r3, [r7, #23]
 800534e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d049      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005360:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005364:	d02e      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005366:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800536a:	d828      	bhi.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x476>
 800536c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005370:	d02a      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8005372:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005376:	d822      	bhi.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005378:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800537c:	d026      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x484>
 800537e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005382:	d81c      	bhi.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005384:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005388:	d010      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x464>
 800538a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800538e:	d816      	bhi.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005390:	2b00      	cmp	r3, #0
 8005392:	d01d      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005398:	d111      	bne.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	3304      	adds	r3, #4
 800539e:	2101      	movs	r1, #1
 80053a0:	4618      	mov	r0, r3
 80053a2:	f000 fd17 	bl	8005dd4 <RCCEx_PLL2_Config>
 80053a6:	4603      	mov	r3, r0
 80053a8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80053aa:	e012      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	3324      	adds	r3, #36	; 0x24
 80053b0:	2101      	movs	r1, #1
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 fdc0 	bl	8005f38 <RCCEx_PLL3_Config>
 80053b8:	4603      	mov	r3, r0
 80053ba:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80053bc:	e009      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	75fb      	strb	r3, [r7, #23]
      break;
 80053c2:	e006      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80053c4:	bf00      	nop
 80053c6:	e004      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80053c8:	bf00      	nop
 80053ca:	e002      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80053cc:	bf00      	nop
 80053ce:	e000      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80053d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053d2:	7dfb      	ldrb	r3, [r7, #23]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d109      	bne.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80053d8:	4b2d      	ldr	r3, [pc, #180]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80053da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053dc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053e4:	492a      	ldr	r1, [pc, #168]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	650b      	str	r3, [r1, #80]	; 0x50
 80053ea:	e001      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ec:	7dfb      	ldrb	r3, [r7, #23]
 80053ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d04d      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005402:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005406:	d02e      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8005408:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800540c:	d828      	bhi.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800540e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005412:	d02a      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8005414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005418:	d822      	bhi.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800541a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800541e:	d026      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8005420:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005424:	d81c      	bhi.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005426:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800542a:	d010      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800542c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005430:	d816      	bhi.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005432:	2b00      	cmp	r3, #0
 8005434:	d01d      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8005436:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800543a:	d111      	bne.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	3304      	adds	r3, #4
 8005440:	2101      	movs	r1, #1
 8005442:	4618      	mov	r0, r3
 8005444:	f000 fcc6 	bl	8005dd4 <RCCEx_PLL2_Config>
 8005448:	4603      	mov	r3, r0
 800544a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800544c:	e012      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	3324      	adds	r3, #36	; 0x24
 8005452:	2101      	movs	r1, #1
 8005454:	4618      	mov	r0, r3
 8005456:	f000 fd6f 	bl	8005f38 <RCCEx_PLL3_Config>
 800545a:	4603      	mov	r3, r0
 800545c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800545e:	e009      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	75fb      	strb	r3, [r7, #23]
      break;
 8005464:	e006      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005466:	bf00      	nop
 8005468:	e004      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800546a:	bf00      	nop
 800546c:	e002      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800546e:	bf00      	nop
 8005470:	e000      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005472:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005474:	7dfb      	ldrb	r3, [r7, #23]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10c      	bne.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800547a:	4b05      	ldr	r3, [pc, #20]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800547c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800547e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005488:	4901      	ldr	r1, [pc, #4]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800548a:	4313      	orrs	r3, r2
 800548c:	658b      	str	r3, [r1, #88]	; 0x58
 800548e:	e003      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005490:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005494:	7dfb      	ldrb	r3, [r7, #23]
 8005496:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d02f      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054ac:	d00e      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x584>
 80054ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054b2:	d814      	bhi.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x596>
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d015      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80054b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054bc:	d10f      	bne.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054be:	4baf      	ldr	r3, [pc, #700]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80054c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c2:	4aae      	ldr	r2, [pc, #696]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80054c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80054ca:	e00c      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	3304      	adds	r3, #4
 80054d0:	2101      	movs	r1, #1
 80054d2:	4618      	mov	r0, r3
 80054d4:	f000 fc7e 	bl	8005dd4 <RCCEx_PLL2_Config>
 80054d8:	4603      	mov	r3, r0
 80054da:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80054dc:	e003      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	75fb      	strb	r3, [r7, #23]
      break;
 80054e2:	e000      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80054e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054e6:	7dfb      	ldrb	r3, [r7, #23]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d109      	bne.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80054ec:	4ba3      	ldr	r3, [pc, #652]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80054ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054f0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054f8:	49a0      	ldr	r1, [pc, #640]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	650b      	str	r3, [r1, #80]	; 0x50
 80054fe:	e001      	b.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005500:	7dfb      	ldrb	r3, [r7, #23]
 8005502:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d032      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005514:	2b03      	cmp	r3, #3
 8005516:	d81b      	bhi.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005518:	a201      	add	r2, pc, #4	; (adr r2, 8005520 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800551a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800551e:	bf00      	nop
 8005520:	08005557 	.word	0x08005557
 8005524:	08005531 	.word	0x08005531
 8005528:	0800553f 	.word	0x0800553f
 800552c:	08005557 	.word	0x08005557
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005530:	4b92      	ldr	r3, [pc, #584]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005534:	4a91      	ldr	r2, [pc, #580]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005536:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800553a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800553c:	e00c      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	3304      	adds	r3, #4
 8005542:	2102      	movs	r1, #2
 8005544:	4618      	mov	r0, r3
 8005546:	f000 fc45 	bl	8005dd4 <RCCEx_PLL2_Config>
 800554a:	4603      	mov	r3, r0
 800554c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800554e:	e003      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	75fb      	strb	r3, [r7, #23]
      break;
 8005554:	e000      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005556:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005558:	7dfb      	ldrb	r3, [r7, #23]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d109      	bne.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800555e:	4b87      	ldr	r3, [pc, #540]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005562:	f023 0203 	bic.w	r2, r3, #3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800556a:	4984      	ldr	r1, [pc, #528]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800556c:	4313      	orrs	r3, r2
 800556e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005570:	e001      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005572:	7dfb      	ldrb	r3, [r7, #23]
 8005574:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800557e:	2b00      	cmp	r3, #0
 8005580:	f000 8086 	beq.w	8005690 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005584:	4b7e      	ldr	r3, [pc, #504]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a7d      	ldr	r2, [pc, #500]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800558a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800558e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005590:	f7fd fc30 	bl	8002df4 <HAL_GetTick>
 8005594:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005596:	e009      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005598:	f7fd fc2c 	bl	8002df4 <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	2b64      	cmp	r3, #100	; 0x64
 80055a4:	d902      	bls.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	75fb      	strb	r3, [r7, #23]
        break;
 80055aa:	e005      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055ac:	4b74      	ldr	r3, [pc, #464]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d0ef      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80055b8:	7dfb      	ldrb	r3, [r7, #23]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d166      	bne.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80055be:	4b6f      	ldr	r3, [pc, #444]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80055c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80055c8:	4053      	eors	r3, r2
 80055ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d013      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055d2:	4b6a      	ldr	r3, [pc, #424]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80055d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055da:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055dc:	4b67      	ldr	r3, [pc, #412]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80055de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e0:	4a66      	ldr	r2, [pc, #408]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80055e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055e6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055e8:	4b64      	ldr	r3, [pc, #400]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80055ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ec:	4a63      	ldr	r2, [pc, #396]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80055ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055f2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80055f4:	4a61      	ldr	r2, [pc, #388]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005600:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005604:	d115      	bne.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005606:	f7fd fbf5 	bl	8002df4 <HAL_GetTick>
 800560a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800560c:	e00b      	b.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800560e:	f7fd fbf1 	bl	8002df4 <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	f241 3288 	movw	r2, #5000	; 0x1388
 800561c:	4293      	cmp	r3, r2
 800561e:	d902      	bls.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	75fb      	strb	r3, [r7, #23]
            break;
 8005624:	e005      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005626:	4b55      	ldr	r3, [pc, #340]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b00      	cmp	r3, #0
 8005630:	d0ed      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8005632:	7dfb      	ldrb	r3, [r7, #23]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d126      	bne.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800563e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005642:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005646:	d10d      	bne.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005648:	4b4c      	ldr	r3, [pc, #304]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005656:	0919      	lsrs	r1, r3, #4
 8005658:	4b4a      	ldr	r3, [pc, #296]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800565a:	400b      	ands	r3, r1
 800565c:	4947      	ldr	r1, [pc, #284]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800565e:	4313      	orrs	r3, r2
 8005660:	610b      	str	r3, [r1, #16]
 8005662:	e005      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005664:	4b45      	ldr	r3, [pc, #276]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	4a44      	ldr	r2, [pc, #272]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800566a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800566e:	6113      	str	r3, [r2, #16]
 8005670:	4b42      	ldr	r3, [pc, #264]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005672:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800567a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800567e:	493f      	ldr	r1, [pc, #252]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005680:	4313      	orrs	r3, r2
 8005682:	670b      	str	r3, [r1, #112]	; 0x70
 8005684:	e004      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005686:	7dfb      	ldrb	r3, [r7, #23]
 8005688:	75bb      	strb	r3, [r7, #22]
 800568a:	e001      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800568c:	7dfb      	ldrb	r3, [r7, #23]
 800568e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0301 	and.w	r3, r3, #1
 8005698:	2b00      	cmp	r3, #0
 800569a:	f000 8085 	beq.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056a2:	2b28      	cmp	r3, #40	; 0x28
 80056a4:	d866      	bhi.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80056a6:	a201      	add	r2, pc, #4	; (adr r2, 80056ac <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80056a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ac:	08005789 	.word	0x08005789
 80056b0:	08005775 	.word	0x08005775
 80056b4:	08005775 	.word	0x08005775
 80056b8:	08005775 	.word	0x08005775
 80056bc:	08005775 	.word	0x08005775
 80056c0:	08005775 	.word	0x08005775
 80056c4:	08005775 	.word	0x08005775
 80056c8:	08005775 	.word	0x08005775
 80056cc:	08005751 	.word	0x08005751
 80056d0:	08005775 	.word	0x08005775
 80056d4:	08005775 	.word	0x08005775
 80056d8:	08005775 	.word	0x08005775
 80056dc:	08005775 	.word	0x08005775
 80056e0:	08005775 	.word	0x08005775
 80056e4:	08005775 	.word	0x08005775
 80056e8:	08005775 	.word	0x08005775
 80056ec:	08005763 	.word	0x08005763
 80056f0:	08005775 	.word	0x08005775
 80056f4:	08005775 	.word	0x08005775
 80056f8:	08005775 	.word	0x08005775
 80056fc:	08005775 	.word	0x08005775
 8005700:	08005775 	.word	0x08005775
 8005704:	08005775 	.word	0x08005775
 8005708:	08005775 	.word	0x08005775
 800570c:	08005789 	.word	0x08005789
 8005710:	08005775 	.word	0x08005775
 8005714:	08005775 	.word	0x08005775
 8005718:	08005775 	.word	0x08005775
 800571c:	08005775 	.word	0x08005775
 8005720:	08005775 	.word	0x08005775
 8005724:	08005775 	.word	0x08005775
 8005728:	08005775 	.word	0x08005775
 800572c:	08005789 	.word	0x08005789
 8005730:	08005775 	.word	0x08005775
 8005734:	08005775 	.word	0x08005775
 8005738:	08005775 	.word	0x08005775
 800573c:	08005775 	.word	0x08005775
 8005740:	08005775 	.word	0x08005775
 8005744:	08005775 	.word	0x08005775
 8005748:	08005775 	.word	0x08005775
 800574c:	08005789 	.word	0x08005789
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	3304      	adds	r3, #4
 8005754:	2101      	movs	r1, #1
 8005756:	4618      	mov	r0, r3
 8005758:	f000 fb3c 	bl	8005dd4 <RCCEx_PLL2_Config>
 800575c:	4603      	mov	r3, r0
 800575e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005760:	e013      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	3324      	adds	r3, #36	; 0x24
 8005766:	2101      	movs	r1, #1
 8005768:	4618      	mov	r0, r3
 800576a:	f000 fbe5 	bl	8005f38 <RCCEx_PLL3_Config>
 800576e:	4603      	mov	r3, r0
 8005770:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005772:	e00a      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	75fb      	strb	r3, [r7, #23]
      break;
 8005778:	e007      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800577a:	bf00      	nop
 800577c:	58024400 	.word	0x58024400
 8005780:	58024800 	.word	0x58024800
 8005784:	00ffffcf 	.word	0x00ffffcf
      break;
 8005788:	bf00      	nop
    }

    if(ret == HAL_OK)
 800578a:	7dfb      	ldrb	r3, [r7, #23]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d109      	bne.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005790:	4b96      	ldr	r3, [pc, #600]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005794:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800579c:	4993      	ldr	r1, [pc, #588]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	654b      	str	r3, [r1, #84]	; 0x54
 80057a2:	e001      	b.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a4:	7dfb      	ldrb	r3, [r7, #23]
 80057a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0302 	and.w	r3, r3, #2
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d038      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057b8:	2b05      	cmp	r3, #5
 80057ba:	d821      	bhi.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80057bc:	a201      	add	r2, pc, #4	; (adr r2, 80057c4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80057be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c2:	bf00      	nop
 80057c4:	08005807 	.word	0x08005807
 80057c8:	080057dd 	.word	0x080057dd
 80057cc:	080057ef 	.word	0x080057ef
 80057d0:	08005807 	.word	0x08005807
 80057d4:	08005807 	.word	0x08005807
 80057d8:	08005807 	.word	0x08005807
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	3304      	adds	r3, #4
 80057e0:	2101      	movs	r1, #1
 80057e2:	4618      	mov	r0, r3
 80057e4:	f000 faf6 	bl	8005dd4 <RCCEx_PLL2_Config>
 80057e8:	4603      	mov	r3, r0
 80057ea:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80057ec:	e00c      	b.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	3324      	adds	r3, #36	; 0x24
 80057f2:	2101      	movs	r1, #1
 80057f4:	4618      	mov	r0, r3
 80057f6:	f000 fb9f 	bl	8005f38 <RCCEx_PLL3_Config>
 80057fa:	4603      	mov	r3, r0
 80057fc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80057fe:	e003      	b.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	75fb      	strb	r3, [r7, #23]
      break;
 8005804:	e000      	b.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8005806:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005808:	7dfb      	ldrb	r3, [r7, #23]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d109      	bne.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800580e:	4b77      	ldr	r3, [pc, #476]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005812:	f023 0207 	bic.w	r2, r3, #7
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800581a:	4974      	ldr	r1, [pc, #464]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800581c:	4313      	orrs	r3, r2
 800581e:	654b      	str	r3, [r1, #84]	; 0x54
 8005820:	e001      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005822:	7dfb      	ldrb	r3, [r7, #23]
 8005824:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0304 	and.w	r3, r3, #4
 800582e:	2b00      	cmp	r3, #0
 8005830:	d03a      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005838:	2b05      	cmp	r3, #5
 800583a:	d821      	bhi.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800583c:	a201      	add	r2, pc, #4	; (adr r2, 8005844 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800583e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005842:	bf00      	nop
 8005844:	08005887 	.word	0x08005887
 8005848:	0800585d 	.word	0x0800585d
 800584c:	0800586f 	.word	0x0800586f
 8005850:	08005887 	.word	0x08005887
 8005854:	08005887 	.word	0x08005887
 8005858:	08005887 	.word	0x08005887
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	3304      	adds	r3, #4
 8005860:	2101      	movs	r1, #1
 8005862:	4618      	mov	r0, r3
 8005864:	f000 fab6 	bl	8005dd4 <RCCEx_PLL2_Config>
 8005868:	4603      	mov	r3, r0
 800586a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800586c:	e00c      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	3324      	adds	r3, #36	; 0x24
 8005872:	2101      	movs	r1, #1
 8005874:	4618      	mov	r0, r3
 8005876:	f000 fb5f 	bl	8005f38 <RCCEx_PLL3_Config>
 800587a:	4603      	mov	r3, r0
 800587c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800587e:	e003      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	75fb      	strb	r3, [r7, #23]
      break;
 8005884:	e000      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8005886:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005888:	7dfb      	ldrb	r3, [r7, #23]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10a      	bne.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800588e:	4b57      	ldr	r3, [pc, #348]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005892:	f023 0207 	bic.w	r2, r3, #7
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800589c:	4953      	ldr	r1, [pc, #332]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	658b      	str	r3, [r1, #88]	; 0x58
 80058a2:	e001      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058a4:	7dfb      	ldrb	r3, [r7, #23]
 80058a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0320 	and.w	r3, r3, #32
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d04b      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80058be:	d02e      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80058c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80058c4:	d828      	bhi.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80058c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ca:	d02a      	beq.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80058cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058d0:	d822      	bhi.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80058d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80058d6:	d026      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80058d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80058dc:	d81c      	bhi.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80058de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058e2:	d010      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80058e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058e8:	d816      	bhi.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d01d      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80058ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058f2:	d111      	bne.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	3304      	adds	r3, #4
 80058f8:	2100      	movs	r1, #0
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 fa6a 	bl	8005dd4 <RCCEx_PLL2_Config>
 8005900:	4603      	mov	r3, r0
 8005902:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005904:	e012      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	3324      	adds	r3, #36	; 0x24
 800590a:	2102      	movs	r1, #2
 800590c:	4618      	mov	r0, r3
 800590e:	f000 fb13 	bl	8005f38 <RCCEx_PLL3_Config>
 8005912:	4603      	mov	r3, r0
 8005914:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005916:	e009      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	75fb      	strb	r3, [r7, #23]
      break;
 800591c:	e006      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800591e:	bf00      	nop
 8005920:	e004      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005922:	bf00      	nop
 8005924:	e002      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005926:	bf00      	nop
 8005928:	e000      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800592a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800592c:	7dfb      	ldrb	r3, [r7, #23]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d10a      	bne.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005932:	4b2e      	ldr	r3, [pc, #184]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005936:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005940:	492a      	ldr	r1, [pc, #168]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005942:	4313      	orrs	r3, r2
 8005944:	654b      	str	r3, [r1, #84]	; 0x54
 8005946:	e001      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005948:	7dfb      	ldrb	r3, [r7, #23]
 800594a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005954:	2b00      	cmp	r3, #0
 8005956:	d04d      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800595e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005962:	d02e      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005964:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005968:	d828      	bhi.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800596a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800596e:	d02a      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005974:	d822      	bhi.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005976:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800597a:	d026      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800597c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005980:	d81c      	bhi.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005982:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005986:	d010      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8005988:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800598c:	d816      	bhi.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800598e:	2b00      	cmp	r3, #0
 8005990:	d01d      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8005992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005996:	d111      	bne.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	3304      	adds	r3, #4
 800599c:	2100      	movs	r1, #0
 800599e:	4618      	mov	r0, r3
 80059a0:	f000 fa18 	bl	8005dd4 <RCCEx_PLL2_Config>
 80059a4:	4603      	mov	r3, r0
 80059a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80059a8:	e012      	b.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	3324      	adds	r3, #36	; 0x24
 80059ae:	2102      	movs	r1, #2
 80059b0:	4618      	mov	r0, r3
 80059b2:	f000 fac1 	bl	8005f38 <RCCEx_PLL3_Config>
 80059b6:	4603      	mov	r3, r0
 80059b8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80059ba:	e009      	b.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	75fb      	strb	r3, [r7, #23]
      break;
 80059c0:	e006      	b.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80059c2:	bf00      	nop
 80059c4:	e004      	b.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80059c6:	bf00      	nop
 80059c8:	e002      	b.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80059ca:	bf00      	nop
 80059cc:	e000      	b.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80059ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059d0:	7dfb      	ldrb	r3, [r7, #23]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d10c      	bne.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80059d6:	4b05      	ldr	r3, [pc, #20]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80059d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059da:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059e4:	4901      	ldr	r1, [pc, #4]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80059e6:	4313      	orrs	r3, r2
 80059e8:	658b      	str	r3, [r1, #88]	; 0x58
 80059ea:	e003      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80059ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059f0:	7dfb      	ldrb	r3, [r7, #23]
 80059f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d04b      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a06:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005a0a:	d02e      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005a0c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005a10:	d828      	bhi.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005a12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a16:	d02a      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005a18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a1c:	d822      	bhi.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005a1e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005a22:	d026      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8005a24:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005a28:	d81c      	bhi.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005a2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a2e:	d010      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8005a30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a34:	d816      	bhi.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d01d      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8005a3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a3e:	d111      	bne.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	3304      	adds	r3, #4
 8005a44:	2100      	movs	r1, #0
 8005a46:	4618      	mov	r0, r3
 8005a48:	f000 f9c4 	bl	8005dd4 <RCCEx_PLL2_Config>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005a50:	e012      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	3324      	adds	r3, #36	; 0x24
 8005a56:	2102      	movs	r1, #2
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f000 fa6d 	bl	8005f38 <RCCEx_PLL3_Config>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005a62:	e009      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	75fb      	strb	r3, [r7, #23]
      break;
 8005a68:	e006      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005a6a:	bf00      	nop
 8005a6c:	e004      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005a6e:	bf00      	nop
 8005a70:	e002      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005a72:	bf00      	nop
 8005a74:	e000      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005a76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a78:	7dfb      	ldrb	r3, [r7, #23]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10a      	bne.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005a7e:	4b9d      	ldr	r3, [pc, #628]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a8c:	4999      	ldr	r1, [pc, #612]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	658b      	str	r3, [r1, #88]	; 0x58
 8005a92:	e001      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a94:	7dfb      	ldrb	r3, [r7, #23]
 8005a96:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 0308 	and.w	r3, r3, #8
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d01a      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aae:	d10a      	bne.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	3324      	adds	r3, #36	; 0x24
 8005ab4:	2102      	movs	r1, #2
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f000 fa3e 	bl	8005f38 <RCCEx_PLL3_Config>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d001      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005ac6:	4b8b      	ldr	r3, [pc, #556]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ad4:	4987      	ldr	r1, [pc, #540]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0310 	and.w	r3, r3, #16
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d01a      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005aec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005af0:	d10a      	bne.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	3324      	adds	r3, #36	; 0x24
 8005af6:	2102      	movs	r1, #2
 8005af8:	4618      	mov	r0, r3
 8005afa:	f000 fa1d 	bl	8005f38 <RCCEx_PLL3_Config>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d001      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005b08:	4b7a      	ldr	r3, [pc, #488]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b16:	4977      	ldr	r1, [pc, #476]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d034      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005b2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b32:	d01d      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005b34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b38:	d817      	bhi.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d003      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b42:	d009      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8005b44:	e011      	b.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	3304      	adds	r3, #4
 8005b4a:	2100      	movs	r1, #0
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f000 f941 	bl	8005dd4 <RCCEx_PLL2_Config>
 8005b52:	4603      	mov	r3, r0
 8005b54:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005b56:	e00c      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	3324      	adds	r3, #36	; 0x24
 8005b5c:	2102      	movs	r1, #2
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f000 f9ea 	bl	8005f38 <RCCEx_PLL3_Config>
 8005b64:	4603      	mov	r3, r0
 8005b66:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005b68:	e003      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	75fb      	strb	r3, [r7, #23]
      break;
 8005b6e:	e000      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8005b70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b72:	7dfb      	ldrb	r3, [r7, #23]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d10a      	bne.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b78:	4b5e      	ldr	r3, [pc, #376]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005b86:	495b      	ldr	r1, [pc, #364]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	658b      	str	r3, [r1, #88]	; 0x58
 8005b8c:	e001      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b8e:	7dfb      	ldrb	r3, [r7, #23]
 8005b90:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d033      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ba4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ba8:	d01c      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8005baa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005bae:	d816      	bhi.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8005bb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bb4:	d003      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8005bb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bba:	d007      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8005bbc:	e00f      	b.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bbe:	4b4d      	ldr	r3, [pc, #308]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc2:	4a4c      	ldr	r2, [pc, #304]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bc8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005bca:	e00c      	b.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	3324      	adds	r3, #36	; 0x24
 8005bd0:	2101      	movs	r1, #1
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 f9b0 	bl	8005f38 <RCCEx_PLL3_Config>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005bdc:	e003      	b.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	75fb      	strb	r3, [r7, #23]
      break;
 8005be2:	e000      	b.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8005be4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005be6:	7dfb      	ldrb	r3, [r7, #23]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d10a      	bne.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005bec:	4b41      	ldr	r3, [pc, #260]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bfa:	493e      	ldr	r1, [pc, #248]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	654b      	str	r3, [r1, #84]	; 0x54
 8005c00:	e001      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c02:	7dfb      	ldrb	r3, [r7, #23]
 8005c04:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d029      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d003      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8005c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c1e:	d007      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8005c20:	e00f      	b.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c22:	4b34      	ldr	r3, [pc, #208]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c26:	4a33      	ldr	r2, [pc, #204]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005c2e:	e00b      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	3304      	adds	r3, #4
 8005c34:	2102      	movs	r1, #2
 8005c36:	4618      	mov	r0, r3
 8005c38:	f000 f8cc 	bl	8005dd4 <RCCEx_PLL2_Config>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005c40:	e002      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	75fb      	strb	r3, [r7, #23]
      break;
 8005c46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c48:	7dfb      	ldrb	r3, [r7, #23]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d109      	bne.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005c4e:	4b29      	ldr	r3, [pc, #164]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c52:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c5a:	4926      	ldr	r1, [pc, #152]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005c60:	e001      	b.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c62:	7dfb      	ldrb	r3, [r7, #23]
 8005c64:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00a      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	3324      	adds	r3, #36	; 0x24
 8005c76:	2102      	movs	r1, #2
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f000 f95d 	bl	8005f38 <RCCEx_PLL3_Config>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d001      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d033      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c9c:	d017      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005c9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ca2:	d811      	bhi.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005ca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ca8:	d013      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005caa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cae:	d80b      	bhi.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d010      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8005cb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cb8:	d106      	bne.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cba:	4b0e      	ldr	r3, [pc, #56]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cbe:	4a0d      	ldr	r2, [pc, #52]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cc4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005cc6:	e007      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	75fb      	strb	r3, [r7, #23]
      break;
 8005ccc:	e004      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005cce:	bf00      	nop
 8005cd0:	e002      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005cd2:	bf00      	nop
 8005cd4:	e000      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005cd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cd8:	7dfb      	ldrb	r3, [r7, #23]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10c      	bne.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005cde:	4b05      	ldr	r3, [pc, #20]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ce2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cea:	4902      	ldr	r1, [pc, #8]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005cec:	4313      	orrs	r3, r2
 8005cee:	654b      	str	r3, [r1, #84]	; 0x54
 8005cf0:	e004      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8005cf2:	bf00      	nop
 8005cf4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cf8:	7dfb      	ldrb	r3, [r7, #23]
 8005cfa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d008      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005d08:	4b31      	ldr	r3, [pc, #196]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d14:	492e      	ldr	r1, [pc, #184]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d009      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005d26:	4b2a      	ldr	r3, [pc, #168]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005d34:	4926      	ldr	r1, [pc, #152]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005d36:	4313      	orrs	r3, r2
 8005d38:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d008      	beq.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005d46:	4b22      	ldr	r3, [pc, #136]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d4a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d52:	491f      	ldr	r1, [pc, #124]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00d      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005d64:	4b1a      	ldr	r3, [pc, #104]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	4a19      	ldr	r2, [pc, #100]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005d6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d6e:	6113      	str	r3, [r2, #16]
 8005d70:	4b17      	ldr	r3, [pc, #92]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005d72:	691a      	ldr	r2, [r3, #16]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005d7a:	4915      	ldr	r1, [pc, #84]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	da08      	bge.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005d88:	4b11      	ldr	r3, [pc, #68]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d8c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d94:	490e      	ldr	r1, [pc, #56]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005d96:	4313      	orrs	r3, r2
 8005d98:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d009      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005da6:	4b0a      	ldr	r3, [pc, #40]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005daa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db4:	4906      	ldr	r1, [pc, #24]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005db6:	4313      	orrs	r3, r2
 8005db8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005dba:	7dbb      	ldrb	r3, [r7, #22]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d101      	bne.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	e000      	b.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3718      	adds	r7, #24
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	58024400 	.word	0x58024400

08005dd4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005dde:	2300      	movs	r3, #0
 8005de0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005de2:	4b53      	ldr	r3, [pc, #332]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de6:	f003 0303 	and.w	r3, r3, #3
 8005dea:	2b03      	cmp	r3, #3
 8005dec:	d101      	bne.n	8005df2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e099      	b.n	8005f26 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005df2:	4b4f      	ldr	r3, [pc, #316]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a4e      	ldr	r2, [pc, #312]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005df8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005dfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dfe:	f7fc fff9 	bl	8002df4 <HAL_GetTick>
 8005e02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e04:	e008      	b.n	8005e18 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005e06:	f7fc fff5 	bl	8002df4 <HAL_GetTick>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	1ad3      	subs	r3, r2, r3
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	d901      	bls.n	8005e18 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005e14:	2303      	movs	r3, #3
 8005e16:	e086      	b.n	8005f26 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e18:	4b45      	ldr	r3, [pc, #276]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1f0      	bne.n	8005e06 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005e24:	4b42      	ldr	r3, [pc, #264]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e28:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	031b      	lsls	r3, r3, #12
 8005e32:	493f      	ldr	r1, [pc, #252]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005e34:	4313      	orrs	r3, r2
 8005e36:	628b      	str	r3, [r1, #40]	; 0x28
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	3b01      	subs	r3, #1
 8005e48:	025b      	lsls	r3, r3, #9
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	431a      	orrs	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	3b01      	subs	r3, #1
 8005e54:	041b      	lsls	r3, r3, #16
 8005e56:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005e5a:	431a      	orrs	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	3b01      	subs	r3, #1
 8005e62:	061b      	lsls	r3, r3, #24
 8005e64:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005e68:	4931      	ldr	r1, [pc, #196]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005e6e:	4b30      	ldr	r3, [pc, #192]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e72:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	492d      	ldr	r1, [pc, #180]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005e80:	4b2b      	ldr	r3, [pc, #172]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e84:	f023 0220 	bic.w	r2, r3, #32
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	699b      	ldr	r3, [r3, #24]
 8005e8c:	4928      	ldr	r1, [pc, #160]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005e92:	4b27      	ldr	r3, [pc, #156]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e96:	4a26      	ldr	r2, [pc, #152]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005e98:	f023 0310 	bic.w	r3, r3, #16
 8005e9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005e9e:	4b24      	ldr	r3, [pc, #144]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005ea0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ea2:	4b24      	ldr	r3, [pc, #144]	; (8005f34 <RCCEx_PLL2_Config+0x160>)
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	69d2      	ldr	r2, [r2, #28]
 8005eaa:	00d2      	lsls	r2, r2, #3
 8005eac:	4920      	ldr	r1, [pc, #128]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005eb2:	4b1f      	ldr	r3, [pc, #124]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb6:	4a1e      	ldr	r2, [pc, #120]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005eb8:	f043 0310 	orr.w	r3, r3, #16
 8005ebc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d106      	bne.n	8005ed2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005ec4:	4b1a      	ldr	r3, [pc, #104]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec8:	4a19      	ldr	r2, [pc, #100]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005eca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ece:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ed0:	e00f      	b.n	8005ef2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d106      	bne.n	8005ee6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005ed8:	4b15      	ldr	r3, [pc, #84]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005edc:	4a14      	ldr	r2, [pc, #80]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005ede:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ee2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ee4:	e005      	b.n	8005ef2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005ee6:	4b12      	ldr	r3, [pc, #72]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eea:	4a11      	ldr	r2, [pc, #68]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005eec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ef0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005ef2:	4b0f      	ldr	r3, [pc, #60]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a0e      	ldr	r2, [pc, #56]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005ef8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005efc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005efe:	f7fc ff79 	bl	8002df4 <HAL_GetTick>
 8005f02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005f04:	e008      	b.n	8005f18 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005f06:	f7fc ff75 	bl	8002df4 <HAL_GetTick>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	d901      	bls.n	8005f18 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e006      	b.n	8005f26 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005f18:	4b05      	ldr	r3, [pc, #20]	; (8005f30 <RCCEx_PLL2_Config+0x15c>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d0f0      	beq.n	8005f06 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	58024400 	.word	0x58024400
 8005f34:	ffff0007 	.word	0xffff0007

08005f38 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f42:	2300      	movs	r3, #0
 8005f44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005f46:	4b53      	ldr	r3, [pc, #332]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8005f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4a:	f003 0303 	and.w	r3, r3, #3
 8005f4e:	2b03      	cmp	r3, #3
 8005f50:	d101      	bne.n	8005f56 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e099      	b.n	800608a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005f56:	4b4f      	ldr	r3, [pc, #316]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a4e      	ldr	r2, [pc, #312]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8005f5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f62:	f7fc ff47 	bl	8002df4 <HAL_GetTick>
 8005f66:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005f68:	e008      	b.n	8005f7c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005f6a:	f7fc ff43 	bl	8002df4 <HAL_GetTick>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d901      	bls.n	8005f7c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e086      	b.n	800608a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005f7c:	4b45      	ldr	r3, [pc, #276]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d1f0      	bne.n	8005f6a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005f88:	4b42      	ldr	r3, [pc, #264]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8005f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	051b      	lsls	r3, r3, #20
 8005f96:	493f      	ldr	r1, [pc, #252]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	628b      	str	r3, [r1, #40]	; 0x28
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	3b01      	subs	r3, #1
 8005fac:	025b      	lsls	r3, r3, #9
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	431a      	orrs	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	3b01      	subs	r3, #1
 8005fb8:	041b      	lsls	r3, r3, #16
 8005fba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005fbe:	431a      	orrs	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	061b      	lsls	r3, r3, #24
 8005fc8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005fcc:	4931      	ldr	r1, [pc, #196]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005fd2:	4b30      	ldr	r3, [pc, #192]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8005fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	695b      	ldr	r3, [r3, #20]
 8005fde:	492d      	ldr	r1, [pc, #180]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005fe4:	4b2b      	ldr	r3, [pc, #172]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8005fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	699b      	ldr	r3, [r3, #24]
 8005ff0:	4928      	ldr	r1, [pc, #160]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005ff6:	4b27      	ldr	r3, [pc, #156]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8005ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffa:	4a26      	ldr	r2, [pc, #152]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8005ffc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006000:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006002:	4b24      	ldr	r3, [pc, #144]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8006004:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006006:	4b24      	ldr	r3, [pc, #144]	; (8006098 <RCCEx_PLL3_Config+0x160>)
 8006008:	4013      	ands	r3, r2
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	69d2      	ldr	r2, [r2, #28]
 800600e:	00d2      	lsls	r2, r2, #3
 8006010:	4920      	ldr	r1, [pc, #128]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8006012:	4313      	orrs	r3, r2
 8006014:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006016:	4b1f      	ldr	r3, [pc, #124]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8006018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601a:	4a1e      	ldr	r2, [pc, #120]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 800601c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006020:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d106      	bne.n	8006036 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006028:	4b1a      	ldr	r3, [pc, #104]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 800602a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602c:	4a19      	ldr	r2, [pc, #100]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 800602e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006032:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006034:	e00f      	b.n	8006056 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d106      	bne.n	800604a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800603c:	4b15      	ldr	r3, [pc, #84]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 800603e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006040:	4a14      	ldr	r2, [pc, #80]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8006042:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006046:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006048:	e005      	b.n	8006056 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800604a:	4b12      	ldr	r3, [pc, #72]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 800604c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604e:	4a11      	ldr	r2, [pc, #68]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8006050:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006054:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006056:	4b0f      	ldr	r3, [pc, #60]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a0e      	ldr	r2, [pc, #56]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 800605c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006060:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006062:	f7fc fec7 	bl	8002df4 <HAL_GetTick>
 8006066:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006068:	e008      	b.n	800607c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800606a:	f7fc fec3 	bl	8002df4 <HAL_GetTick>
 800606e:	4602      	mov	r2, r0
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	2b02      	cmp	r3, #2
 8006076:	d901      	bls.n	800607c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006078:	2303      	movs	r3, #3
 800607a:	e006      	b.n	800608a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800607c:	4b05      	ldr	r3, [pc, #20]	; (8006094 <RCCEx_PLL3_Config+0x15c>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006084:	2b00      	cmp	r3, #0
 8006086:	d0f0      	beq.n	800606a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006088:	7bfb      	ldrb	r3, [r7, #15]
}
 800608a:	4618      	mov	r0, r3
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	58024400 	.word	0x58024400
 8006098:	ffff0007 	.word	0xffff0007

0800609c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800609c:	b084      	sub	sp, #16
 800609e:	b580      	push	{r7, lr}
 80060a0:	b084      	sub	sp, #16
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
 80060a6:	f107 001c 	add.w	r0, r7, #28
 80060aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80060ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d120      	bne.n	80060f6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	68da      	ldr	r2, [r3, #12]
 80060c4:	4b2a      	ldr	r3, [pc, #168]	; (8006170 <USB_CoreInit+0xd4>)
 80060c6:	4013      	ands	r3, r2
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80060d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d105      	bne.n	80060ea <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 faac 	bl	8006648 <USB_CoreReset>
 80060f0:	4603      	mov	r3, r0
 80060f2:	73fb      	strb	r3, [r7, #15]
 80060f4:	e01a      	b.n	800612c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 faa0 	bl	8006648 <USB_CoreReset>
 8006108:	4603      	mov	r3, r0
 800610a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800610c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800610e:	2b00      	cmp	r3, #0
 8006110:	d106      	bne.n	8006120 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006116:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	639a      	str	r2, [r3, #56]	; 0x38
 800611e:	e005      	b.n	800612c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006124:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800612c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612e:	2b01      	cmp	r3, #1
 8006130:	d116      	bne.n	8006160 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006136:	b29a      	uxth	r2, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006140:	4b0c      	ldr	r3, [pc, #48]	; (8006174 <USB_CoreInit+0xd8>)
 8006142:	4313      	orrs	r3, r2
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	f043 0206 	orr.w	r2, r3, #6
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f043 0220 	orr.w	r2, r3, #32
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006160:	7bfb      	ldrb	r3, [r7, #15]
}
 8006162:	4618      	mov	r0, r3
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800616c:	b004      	add	sp, #16
 800616e:	4770      	bx	lr
 8006170:	ffbdffbf 	.word	0xffbdffbf
 8006174:	03ee0000 	.word	0x03ee0000

08006178 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	f023 0201 	bic.w	r2, r3, #1
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	370c      	adds	r7, #12
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800619a:	b580      	push	{r7, lr}
 800619c:	b084      	sub	sp, #16
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
 80061a2:	460b      	mov	r3, r1
 80061a4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80061a6:	2300      	movs	r3, #0
 80061a8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80061b6:	78fb      	ldrb	r3, [r7, #3]
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d115      	bne.n	80061e8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80061c8:	2001      	movs	r0, #1
 80061ca:	f7fc fe1f 	bl	8002e0c <HAL_Delay>
      ms++;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	3301      	adds	r3, #1
 80061d2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 fa29 	bl	800662c <USB_GetMode>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d01e      	beq.n	800621e <USB_SetCurrentMode+0x84>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2b31      	cmp	r3, #49	; 0x31
 80061e4:	d9f0      	bls.n	80061c8 <USB_SetCurrentMode+0x2e>
 80061e6:	e01a      	b.n	800621e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80061e8:	78fb      	ldrb	r3, [r7, #3]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d115      	bne.n	800621a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80061fa:	2001      	movs	r0, #1
 80061fc:	f7fc fe06 	bl	8002e0c <HAL_Delay>
      ms++;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	3301      	adds	r3, #1
 8006204:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 fa10 	bl	800662c <USB_GetMode>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d005      	beq.n	800621e <USB_SetCurrentMode+0x84>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2b31      	cmp	r3, #49	; 0x31
 8006216:	d9f0      	bls.n	80061fa <USB_SetCurrentMode+0x60>
 8006218:	e001      	b.n	800621e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e005      	b.n	800622a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2b32      	cmp	r3, #50	; 0x32
 8006222:	d101      	bne.n	8006228 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e000      	b.n	800622a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	4618      	mov	r0, r3
 800622c:	3710      	adds	r7, #16
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
	...

08006234 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006234:	b084      	sub	sp, #16
 8006236:	b580      	push	{r7, lr}
 8006238:	b086      	sub	sp, #24
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
 800623e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006242:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006246:	2300      	movs	r3, #0
 8006248:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800624e:	2300      	movs	r3, #0
 8006250:	613b      	str	r3, [r7, #16]
 8006252:	e009      	b.n	8006268 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	3340      	adds	r3, #64	; 0x40
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	4413      	add	r3, r2
 800625e:	2200      	movs	r2, #0
 8006260:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	3301      	adds	r3, #1
 8006266:	613b      	str	r3, [r7, #16]
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	2b0e      	cmp	r3, #14
 800626c:	d9f2      	bls.n	8006254 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800626e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006270:	2b00      	cmp	r3, #0
 8006272:	d11c      	bne.n	80062ae <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006282:	f043 0302 	orr.w	r3, r3, #2
 8006286:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	601a      	str	r2, [r3, #0]
 80062ac:	e005      	b.n	80062ba <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80062c0:	461a      	mov	r2, r3
 80062c2:	2300      	movs	r3, #0
 80062c4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062cc:	4619      	mov	r1, r3
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062d4:	461a      	mov	r2, r3
 80062d6:	680b      	ldr	r3, [r1, #0]
 80062d8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80062da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d10c      	bne.n	80062fa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80062e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d104      	bne.n	80062f0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80062e6:	2100      	movs	r1, #0
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f000 f965 	bl	80065b8 <USB_SetDevSpeed>
 80062ee:	e008      	b.n	8006302 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80062f0:	2101      	movs	r1, #1
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 f960 	bl	80065b8 <USB_SetDevSpeed>
 80062f8:	e003      	b.n	8006302 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80062fa:	2103      	movs	r1, #3
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 f95b 	bl	80065b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006302:	2110      	movs	r1, #16
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 f8f3 	bl	80064f0 <USB_FlushTxFifo>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d001      	beq.n	8006314 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 f91f 	bl	8006558 <USB_FlushRxFifo>
 800631a:	4603      	mov	r3, r0
 800631c:	2b00      	cmp	r3, #0
 800631e:	d001      	beq.n	8006324 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800632a:	461a      	mov	r2, r3
 800632c:	2300      	movs	r3, #0
 800632e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006336:	461a      	mov	r2, r3
 8006338:	2300      	movs	r3, #0
 800633a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006342:	461a      	mov	r2, r3
 8006344:	2300      	movs	r3, #0
 8006346:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006348:	2300      	movs	r3, #0
 800634a:	613b      	str	r3, [r7, #16]
 800634c:	e043      	b.n	80063d6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	015a      	lsls	r2, r3, #5
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	4413      	add	r3, r2
 8006356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006360:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006364:	d118      	bne.n	8006398 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d10a      	bne.n	8006382 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	015a      	lsls	r2, r3, #5
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	4413      	add	r3, r2
 8006374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006378:	461a      	mov	r2, r3
 800637a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800637e:	6013      	str	r3, [r2, #0]
 8006380:	e013      	b.n	80063aa <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	015a      	lsls	r2, r3, #5
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	4413      	add	r3, r2
 800638a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800638e:	461a      	mov	r2, r3
 8006390:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006394:	6013      	str	r3, [r2, #0]
 8006396:	e008      	b.n	80063aa <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	015a      	lsls	r2, r3, #5
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	4413      	add	r3, r2
 80063a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063a4:	461a      	mov	r2, r3
 80063a6:	2300      	movs	r3, #0
 80063a8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	015a      	lsls	r2, r3, #5
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	4413      	add	r3, r2
 80063b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063b6:	461a      	mov	r2, r3
 80063b8:	2300      	movs	r3, #0
 80063ba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	015a      	lsls	r2, r3, #5
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	4413      	add	r3, r2
 80063c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c8:	461a      	mov	r2, r3
 80063ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80063ce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	3301      	adds	r3, #1
 80063d4:	613b      	str	r3, [r7, #16]
 80063d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d8:	693a      	ldr	r2, [r7, #16]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d3b7      	bcc.n	800634e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063de:	2300      	movs	r3, #0
 80063e0:	613b      	str	r3, [r7, #16]
 80063e2:	e043      	b.n	800646c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	015a      	lsls	r2, r3, #5
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	4413      	add	r3, r2
 80063ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063fa:	d118      	bne.n	800642e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d10a      	bne.n	8006418 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	015a      	lsls	r2, r3, #5
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	4413      	add	r3, r2
 800640a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800640e:	461a      	mov	r2, r3
 8006410:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006414:	6013      	str	r3, [r2, #0]
 8006416:	e013      	b.n	8006440 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	015a      	lsls	r2, r3, #5
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	4413      	add	r3, r2
 8006420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006424:	461a      	mov	r2, r3
 8006426:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800642a:	6013      	str	r3, [r2, #0]
 800642c:	e008      	b.n	8006440 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	015a      	lsls	r2, r3, #5
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	4413      	add	r3, r2
 8006436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800643a:	461a      	mov	r2, r3
 800643c:	2300      	movs	r3, #0
 800643e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	015a      	lsls	r2, r3, #5
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	4413      	add	r3, r2
 8006448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800644c:	461a      	mov	r2, r3
 800644e:	2300      	movs	r3, #0
 8006450:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	015a      	lsls	r2, r3, #5
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	4413      	add	r3, r2
 800645a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800645e:	461a      	mov	r2, r3
 8006460:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006464:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	3301      	adds	r3, #1
 800646a:	613b      	str	r3, [r7, #16]
 800646c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646e:	693a      	ldr	r2, [r7, #16]
 8006470:	429a      	cmp	r2, r3
 8006472:	d3b7      	bcc.n	80063e4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006482:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006486:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006494:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006498:	2b00      	cmp	r3, #0
 800649a:	d105      	bne.n	80064a8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	699b      	ldr	r3, [r3, #24]
 80064a0:	f043 0210 	orr.w	r2, r3, #16
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	699a      	ldr	r2, [r3, #24]
 80064ac:	4b0e      	ldr	r3, [pc, #56]	; (80064e8 <USB_DevInit+0x2b4>)
 80064ae:	4313      	orrs	r3, r2
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80064b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d005      	beq.n	80064c6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	f043 0208 	orr.w	r2, r3, #8
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80064c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d105      	bne.n	80064d8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	699a      	ldr	r2, [r3, #24]
 80064d0:	4b06      	ldr	r3, [pc, #24]	; (80064ec <USB_DevInit+0x2b8>)
 80064d2:	4313      	orrs	r3, r2
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80064d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3718      	adds	r7, #24
 80064de:	46bd      	mov	sp, r7
 80064e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064e4:	b004      	add	sp, #16
 80064e6:	4770      	bx	lr
 80064e8:	803c3800 	.word	0x803c3800
 80064ec:	40000004 	.word	0x40000004

080064f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80064fa:	2300      	movs	r3, #0
 80064fc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	3301      	adds	r3, #1
 8006502:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	4a13      	ldr	r2, [pc, #76]	; (8006554 <USB_FlushTxFifo+0x64>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d901      	bls.n	8006510 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800650c:	2303      	movs	r3, #3
 800650e:	e01b      	b.n	8006548 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	2b00      	cmp	r3, #0
 8006516:	daf2      	bge.n	80064fe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006518:	2300      	movs	r3, #0
 800651a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	019b      	lsls	r3, r3, #6
 8006520:	f043 0220 	orr.w	r2, r3, #32
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	3301      	adds	r3, #1
 800652c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	4a08      	ldr	r2, [pc, #32]	; (8006554 <USB_FlushTxFifo+0x64>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d901      	bls.n	800653a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e006      	b.n	8006548 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	f003 0320 	and.w	r3, r3, #32
 8006542:	2b20      	cmp	r3, #32
 8006544:	d0f0      	beq.n	8006528 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006546:	2300      	movs	r3, #0
}
 8006548:	4618      	mov	r0, r3
 800654a:	3714      	adds	r7, #20
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr
 8006554:	00030d40 	.word	0x00030d40

08006558 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006560:	2300      	movs	r3, #0
 8006562:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	3301      	adds	r3, #1
 8006568:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	4a11      	ldr	r2, [pc, #68]	; (80065b4 <USB_FlushRxFifo+0x5c>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d901      	bls.n	8006576 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006572:	2303      	movs	r3, #3
 8006574:	e018      	b.n	80065a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	2b00      	cmp	r3, #0
 800657c:	daf2      	bge.n	8006564 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800657e:	2300      	movs	r3, #0
 8006580:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2210      	movs	r2, #16
 8006586:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	3301      	adds	r3, #1
 800658c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	4a08      	ldr	r2, [pc, #32]	; (80065b4 <USB_FlushRxFifo+0x5c>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d901      	bls.n	800659a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	e006      	b.n	80065a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	f003 0310 	and.w	r3, r3, #16
 80065a2:	2b10      	cmp	r3, #16
 80065a4:	d0f0      	beq.n	8006588 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3714      	adds	r7, #20
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr
 80065b4:	00030d40 	.word	0x00030d40

080065b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	460b      	mov	r3, r1
 80065c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	78fb      	ldrb	r3, [r7, #3]
 80065d2:	68f9      	ldr	r1, [r7, #12]
 80065d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065d8:	4313      	orrs	r3, r2
 80065da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3714      	adds	r7, #20
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr

080065ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80065ea:	b480      	push	{r7}
 80065ec:	b085      	sub	sp, #20
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006604:	f023 0303 	bic.w	r3, r3, #3
 8006608:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006618:	f043 0302 	orr.w	r3, r3, #2
 800661c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	3714      	adds	r7, #20
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	695b      	ldr	r3, [r3, #20]
 8006638:	f003 0301 	and.w	r3, r3, #1
}
 800663c:	4618      	mov	r0, r3
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006650:	2300      	movs	r3, #0
 8006652:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	3301      	adds	r3, #1
 8006658:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	4a13      	ldr	r2, [pc, #76]	; (80066ac <USB_CoreReset+0x64>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d901      	bls.n	8006666 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e01b      	b.n	800669e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	2b00      	cmp	r3, #0
 800666c:	daf2      	bge.n	8006654 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800666e:	2300      	movs	r3, #0
 8006670:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	f043 0201 	orr.w	r2, r3, #1
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	3301      	adds	r3, #1
 8006682:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	4a09      	ldr	r2, [pc, #36]	; (80066ac <USB_CoreReset+0x64>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d901      	bls.n	8006690 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800668c:	2303      	movs	r3, #3
 800668e:	e006      	b.n	800669e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	f003 0301 	and.w	r3, r3, #1
 8006698:	2b01      	cmp	r3, #1
 800669a:	d0f0      	beq.n	800667e <USB_CoreReset+0x36>

  return HAL_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3714      	adds	r7, #20
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	00030d40 	.word	0x00030d40

080066b0 <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 80066b0:	b480      	push	{r7}
 80066b2:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 80066b4:	bf00      	nop
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
	...

080066c0 <__errno>:
 80066c0:	4b01      	ldr	r3, [pc, #4]	; (80066c8 <__errno+0x8>)
 80066c2:	6818      	ldr	r0, [r3, #0]
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	2400023c 	.word	0x2400023c

080066cc <__libc_init_array>:
 80066cc:	b570      	push	{r4, r5, r6, lr}
 80066ce:	4d0d      	ldr	r5, [pc, #52]	; (8006704 <__libc_init_array+0x38>)
 80066d0:	4c0d      	ldr	r4, [pc, #52]	; (8006708 <__libc_init_array+0x3c>)
 80066d2:	1b64      	subs	r4, r4, r5
 80066d4:	10a4      	asrs	r4, r4, #2
 80066d6:	2600      	movs	r6, #0
 80066d8:	42a6      	cmp	r6, r4
 80066da:	d109      	bne.n	80066f0 <__libc_init_array+0x24>
 80066dc:	4d0b      	ldr	r5, [pc, #44]	; (800670c <__libc_init_array+0x40>)
 80066de:	4c0c      	ldr	r4, [pc, #48]	; (8006710 <__libc_init_array+0x44>)
 80066e0:	f000 fcd0 	bl	8007084 <_init>
 80066e4:	1b64      	subs	r4, r4, r5
 80066e6:	10a4      	asrs	r4, r4, #2
 80066e8:	2600      	movs	r6, #0
 80066ea:	42a6      	cmp	r6, r4
 80066ec:	d105      	bne.n	80066fa <__libc_init_array+0x2e>
 80066ee:	bd70      	pop	{r4, r5, r6, pc}
 80066f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80066f4:	4798      	blx	r3
 80066f6:	3601      	adds	r6, #1
 80066f8:	e7ee      	b.n	80066d8 <__libc_init_array+0xc>
 80066fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80066fe:	4798      	blx	r3
 8006700:	3601      	adds	r6, #1
 8006702:	e7f2      	b.n	80066ea <__libc_init_array+0x1e>
 8006704:	080472f8 	.word	0x080472f8
 8006708:	080472f8 	.word	0x080472f8
 800670c:	080472f8 	.word	0x080472f8
 8006710:	080472fc 	.word	0x080472fc

08006714 <__retarget_lock_acquire_recursive>:
 8006714:	4770      	bx	lr

08006716 <__retarget_lock_release_recursive>:
 8006716:	4770      	bx	lr

08006718 <memcpy>:
 8006718:	440a      	add	r2, r1
 800671a:	4291      	cmp	r1, r2
 800671c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006720:	d100      	bne.n	8006724 <memcpy+0xc>
 8006722:	4770      	bx	lr
 8006724:	b510      	push	{r4, lr}
 8006726:	f811 4b01 	ldrb.w	r4, [r1], #1
 800672a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800672e:	4291      	cmp	r1, r2
 8006730:	d1f9      	bne.n	8006726 <memcpy+0xe>
 8006732:	bd10      	pop	{r4, pc}

08006734 <memset>:
 8006734:	4402      	add	r2, r0
 8006736:	4603      	mov	r3, r0
 8006738:	4293      	cmp	r3, r2
 800673a:	d100      	bne.n	800673e <memset+0xa>
 800673c:	4770      	bx	lr
 800673e:	f803 1b01 	strb.w	r1, [r3], #1
 8006742:	e7f9      	b.n	8006738 <memset+0x4>

08006744 <_free_r>:
 8006744:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006746:	2900      	cmp	r1, #0
 8006748:	d044      	beq.n	80067d4 <_free_r+0x90>
 800674a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800674e:	9001      	str	r0, [sp, #4]
 8006750:	2b00      	cmp	r3, #0
 8006752:	f1a1 0404 	sub.w	r4, r1, #4
 8006756:	bfb8      	it	lt
 8006758:	18e4      	addlt	r4, r4, r3
 800675a:	f000 f903 	bl	8006964 <__malloc_lock>
 800675e:	4a1e      	ldr	r2, [pc, #120]	; (80067d8 <_free_r+0x94>)
 8006760:	9801      	ldr	r0, [sp, #4]
 8006762:	6813      	ldr	r3, [r2, #0]
 8006764:	b933      	cbnz	r3, 8006774 <_free_r+0x30>
 8006766:	6063      	str	r3, [r4, #4]
 8006768:	6014      	str	r4, [r2, #0]
 800676a:	b003      	add	sp, #12
 800676c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006770:	f000 b8fe 	b.w	8006970 <__malloc_unlock>
 8006774:	42a3      	cmp	r3, r4
 8006776:	d908      	bls.n	800678a <_free_r+0x46>
 8006778:	6825      	ldr	r5, [r4, #0]
 800677a:	1961      	adds	r1, r4, r5
 800677c:	428b      	cmp	r3, r1
 800677e:	bf01      	itttt	eq
 8006780:	6819      	ldreq	r1, [r3, #0]
 8006782:	685b      	ldreq	r3, [r3, #4]
 8006784:	1949      	addeq	r1, r1, r5
 8006786:	6021      	streq	r1, [r4, #0]
 8006788:	e7ed      	b.n	8006766 <_free_r+0x22>
 800678a:	461a      	mov	r2, r3
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	b10b      	cbz	r3, 8006794 <_free_r+0x50>
 8006790:	42a3      	cmp	r3, r4
 8006792:	d9fa      	bls.n	800678a <_free_r+0x46>
 8006794:	6811      	ldr	r1, [r2, #0]
 8006796:	1855      	adds	r5, r2, r1
 8006798:	42a5      	cmp	r5, r4
 800679a:	d10b      	bne.n	80067b4 <_free_r+0x70>
 800679c:	6824      	ldr	r4, [r4, #0]
 800679e:	4421      	add	r1, r4
 80067a0:	1854      	adds	r4, r2, r1
 80067a2:	42a3      	cmp	r3, r4
 80067a4:	6011      	str	r1, [r2, #0]
 80067a6:	d1e0      	bne.n	800676a <_free_r+0x26>
 80067a8:	681c      	ldr	r4, [r3, #0]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	6053      	str	r3, [r2, #4]
 80067ae:	4421      	add	r1, r4
 80067b0:	6011      	str	r1, [r2, #0]
 80067b2:	e7da      	b.n	800676a <_free_r+0x26>
 80067b4:	d902      	bls.n	80067bc <_free_r+0x78>
 80067b6:	230c      	movs	r3, #12
 80067b8:	6003      	str	r3, [r0, #0]
 80067ba:	e7d6      	b.n	800676a <_free_r+0x26>
 80067bc:	6825      	ldr	r5, [r4, #0]
 80067be:	1961      	adds	r1, r4, r5
 80067c0:	428b      	cmp	r3, r1
 80067c2:	bf04      	itt	eq
 80067c4:	6819      	ldreq	r1, [r3, #0]
 80067c6:	685b      	ldreq	r3, [r3, #4]
 80067c8:	6063      	str	r3, [r4, #4]
 80067ca:	bf04      	itt	eq
 80067cc:	1949      	addeq	r1, r1, r5
 80067ce:	6021      	streq	r1, [r4, #0]
 80067d0:	6054      	str	r4, [r2, #4]
 80067d2:	e7ca      	b.n	800676a <_free_r+0x26>
 80067d4:	b003      	add	sp, #12
 80067d6:	bd30      	pop	{r4, r5, pc}
 80067d8:	24000a34 	.word	0x24000a34

080067dc <sbrk_aligned>:
 80067dc:	b570      	push	{r4, r5, r6, lr}
 80067de:	4e0e      	ldr	r6, [pc, #56]	; (8006818 <sbrk_aligned+0x3c>)
 80067e0:	460c      	mov	r4, r1
 80067e2:	6831      	ldr	r1, [r6, #0]
 80067e4:	4605      	mov	r5, r0
 80067e6:	b911      	cbnz	r1, 80067ee <sbrk_aligned+0x12>
 80067e8:	f000 f88c 	bl	8006904 <_sbrk_r>
 80067ec:	6030      	str	r0, [r6, #0]
 80067ee:	4621      	mov	r1, r4
 80067f0:	4628      	mov	r0, r5
 80067f2:	f000 f887 	bl	8006904 <_sbrk_r>
 80067f6:	1c43      	adds	r3, r0, #1
 80067f8:	d00a      	beq.n	8006810 <sbrk_aligned+0x34>
 80067fa:	1cc4      	adds	r4, r0, #3
 80067fc:	f024 0403 	bic.w	r4, r4, #3
 8006800:	42a0      	cmp	r0, r4
 8006802:	d007      	beq.n	8006814 <sbrk_aligned+0x38>
 8006804:	1a21      	subs	r1, r4, r0
 8006806:	4628      	mov	r0, r5
 8006808:	f000 f87c 	bl	8006904 <_sbrk_r>
 800680c:	3001      	adds	r0, #1
 800680e:	d101      	bne.n	8006814 <sbrk_aligned+0x38>
 8006810:	f04f 34ff 	mov.w	r4, #4294967295
 8006814:	4620      	mov	r0, r4
 8006816:	bd70      	pop	{r4, r5, r6, pc}
 8006818:	24000a38 	.word	0x24000a38

0800681c <_malloc_r>:
 800681c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006820:	1ccd      	adds	r5, r1, #3
 8006822:	f025 0503 	bic.w	r5, r5, #3
 8006826:	3508      	adds	r5, #8
 8006828:	2d0c      	cmp	r5, #12
 800682a:	bf38      	it	cc
 800682c:	250c      	movcc	r5, #12
 800682e:	2d00      	cmp	r5, #0
 8006830:	4607      	mov	r7, r0
 8006832:	db01      	blt.n	8006838 <_malloc_r+0x1c>
 8006834:	42a9      	cmp	r1, r5
 8006836:	d905      	bls.n	8006844 <_malloc_r+0x28>
 8006838:	230c      	movs	r3, #12
 800683a:	603b      	str	r3, [r7, #0]
 800683c:	2600      	movs	r6, #0
 800683e:	4630      	mov	r0, r6
 8006840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006844:	4e2e      	ldr	r6, [pc, #184]	; (8006900 <_malloc_r+0xe4>)
 8006846:	f000 f88d 	bl	8006964 <__malloc_lock>
 800684a:	6833      	ldr	r3, [r6, #0]
 800684c:	461c      	mov	r4, r3
 800684e:	bb34      	cbnz	r4, 800689e <_malloc_r+0x82>
 8006850:	4629      	mov	r1, r5
 8006852:	4638      	mov	r0, r7
 8006854:	f7ff ffc2 	bl	80067dc <sbrk_aligned>
 8006858:	1c43      	adds	r3, r0, #1
 800685a:	4604      	mov	r4, r0
 800685c:	d14d      	bne.n	80068fa <_malloc_r+0xde>
 800685e:	6834      	ldr	r4, [r6, #0]
 8006860:	4626      	mov	r6, r4
 8006862:	2e00      	cmp	r6, #0
 8006864:	d140      	bne.n	80068e8 <_malloc_r+0xcc>
 8006866:	6823      	ldr	r3, [r4, #0]
 8006868:	4631      	mov	r1, r6
 800686a:	4638      	mov	r0, r7
 800686c:	eb04 0803 	add.w	r8, r4, r3
 8006870:	f000 f848 	bl	8006904 <_sbrk_r>
 8006874:	4580      	cmp	r8, r0
 8006876:	d13a      	bne.n	80068ee <_malloc_r+0xd2>
 8006878:	6821      	ldr	r1, [r4, #0]
 800687a:	3503      	adds	r5, #3
 800687c:	1a6d      	subs	r5, r5, r1
 800687e:	f025 0503 	bic.w	r5, r5, #3
 8006882:	3508      	adds	r5, #8
 8006884:	2d0c      	cmp	r5, #12
 8006886:	bf38      	it	cc
 8006888:	250c      	movcc	r5, #12
 800688a:	4629      	mov	r1, r5
 800688c:	4638      	mov	r0, r7
 800688e:	f7ff ffa5 	bl	80067dc <sbrk_aligned>
 8006892:	3001      	adds	r0, #1
 8006894:	d02b      	beq.n	80068ee <_malloc_r+0xd2>
 8006896:	6823      	ldr	r3, [r4, #0]
 8006898:	442b      	add	r3, r5
 800689a:	6023      	str	r3, [r4, #0]
 800689c:	e00e      	b.n	80068bc <_malloc_r+0xa0>
 800689e:	6822      	ldr	r2, [r4, #0]
 80068a0:	1b52      	subs	r2, r2, r5
 80068a2:	d41e      	bmi.n	80068e2 <_malloc_r+0xc6>
 80068a4:	2a0b      	cmp	r2, #11
 80068a6:	d916      	bls.n	80068d6 <_malloc_r+0xba>
 80068a8:	1961      	adds	r1, r4, r5
 80068aa:	42a3      	cmp	r3, r4
 80068ac:	6025      	str	r5, [r4, #0]
 80068ae:	bf18      	it	ne
 80068b0:	6059      	strne	r1, [r3, #4]
 80068b2:	6863      	ldr	r3, [r4, #4]
 80068b4:	bf08      	it	eq
 80068b6:	6031      	streq	r1, [r6, #0]
 80068b8:	5162      	str	r2, [r4, r5]
 80068ba:	604b      	str	r3, [r1, #4]
 80068bc:	4638      	mov	r0, r7
 80068be:	f104 060b 	add.w	r6, r4, #11
 80068c2:	f000 f855 	bl	8006970 <__malloc_unlock>
 80068c6:	f026 0607 	bic.w	r6, r6, #7
 80068ca:	1d23      	adds	r3, r4, #4
 80068cc:	1af2      	subs	r2, r6, r3
 80068ce:	d0b6      	beq.n	800683e <_malloc_r+0x22>
 80068d0:	1b9b      	subs	r3, r3, r6
 80068d2:	50a3      	str	r3, [r4, r2]
 80068d4:	e7b3      	b.n	800683e <_malloc_r+0x22>
 80068d6:	6862      	ldr	r2, [r4, #4]
 80068d8:	42a3      	cmp	r3, r4
 80068da:	bf0c      	ite	eq
 80068dc:	6032      	streq	r2, [r6, #0]
 80068de:	605a      	strne	r2, [r3, #4]
 80068e0:	e7ec      	b.n	80068bc <_malloc_r+0xa0>
 80068e2:	4623      	mov	r3, r4
 80068e4:	6864      	ldr	r4, [r4, #4]
 80068e6:	e7b2      	b.n	800684e <_malloc_r+0x32>
 80068e8:	4634      	mov	r4, r6
 80068ea:	6876      	ldr	r6, [r6, #4]
 80068ec:	e7b9      	b.n	8006862 <_malloc_r+0x46>
 80068ee:	230c      	movs	r3, #12
 80068f0:	603b      	str	r3, [r7, #0]
 80068f2:	4638      	mov	r0, r7
 80068f4:	f000 f83c 	bl	8006970 <__malloc_unlock>
 80068f8:	e7a1      	b.n	800683e <_malloc_r+0x22>
 80068fa:	6025      	str	r5, [r4, #0]
 80068fc:	e7de      	b.n	80068bc <_malloc_r+0xa0>
 80068fe:	bf00      	nop
 8006900:	24000a34 	.word	0x24000a34

08006904 <_sbrk_r>:
 8006904:	b538      	push	{r3, r4, r5, lr}
 8006906:	4d06      	ldr	r5, [pc, #24]	; (8006920 <_sbrk_r+0x1c>)
 8006908:	2300      	movs	r3, #0
 800690a:	4604      	mov	r4, r0
 800690c:	4608      	mov	r0, r1
 800690e:	602b      	str	r3, [r5, #0]
 8006910:	f7fc f98a 	bl	8002c28 <_sbrk>
 8006914:	1c43      	adds	r3, r0, #1
 8006916:	d102      	bne.n	800691e <_sbrk_r+0x1a>
 8006918:	682b      	ldr	r3, [r5, #0]
 800691a:	b103      	cbz	r3, 800691e <_sbrk_r+0x1a>
 800691c:	6023      	str	r3, [r4, #0]
 800691e:	bd38      	pop	{r3, r4, r5, pc}
 8006920:	24000a3c 	.word	0x24000a3c

08006924 <siprintf>:
 8006924:	b40e      	push	{r1, r2, r3}
 8006926:	b500      	push	{lr}
 8006928:	b09c      	sub	sp, #112	; 0x70
 800692a:	ab1d      	add	r3, sp, #116	; 0x74
 800692c:	9002      	str	r0, [sp, #8]
 800692e:	9006      	str	r0, [sp, #24]
 8006930:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006934:	4809      	ldr	r0, [pc, #36]	; (800695c <siprintf+0x38>)
 8006936:	9107      	str	r1, [sp, #28]
 8006938:	9104      	str	r1, [sp, #16]
 800693a:	4909      	ldr	r1, [pc, #36]	; (8006960 <siprintf+0x3c>)
 800693c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006940:	9105      	str	r1, [sp, #20]
 8006942:	6800      	ldr	r0, [r0, #0]
 8006944:	9301      	str	r3, [sp, #4]
 8006946:	a902      	add	r1, sp, #8
 8006948:	f000 f874 	bl	8006a34 <_svfiprintf_r>
 800694c:	9b02      	ldr	r3, [sp, #8]
 800694e:	2200      	movs	r2, #0
 8006950:	701a      	strb	r2, [r3, #0]
 8006952:	b01c      	add	sp, #112	; 0x70
 8006954:	f85d eb04 	ldr.w	lr, [sp], #4
 8006958:	b003      	add	sp, #12
 800695a:	4770      	bx	lr
 800695c:	2400023c 	.word	0x2400023c
 8006960:	ffff0208 	.word	0xffff0208

08006964 <__malloc_lock>:
 8006964:	4801      	ldr	r0, [pc, #4]	; (800696c <__malloc_lock+0x8>)
 8006966:	f7ff bed5 	b.w	8006714 <__retarget_lock_acquire_recursive>
 800696a:	bf00      	nop
 800696c:	24000a30 	.word	0x24000a30

08006970 <__malloc_unlock>:
 8006970:	4801      	ldr	r0, [pc, #4]	; (8006978 <__malloc_unlock+0x8>)
 8006972:	f7ff bed0 	b.w	8006716 <__retarget_lock_release_recursive>
 8006976:	bf00      	nop
 8006978:	24000a30 	.word	0x24000a30

0800697c <__ssputs_r>:
 800697c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006980:	688e      	ldr	r6, [r1, #8]
 8006982:	429e      	cmp	r6, r3
 8006984:	4682      	mov	sl, r0
 8006986:	460c      	mov	r4, r1
 8006988:	4690      	mov	r8, r2
 800698a:	461f      	mov	r7, r3
 800698c:	d838      	bhi.n	8006a00 <__ssputs_r+0x84>
 800698e:	898a      	ldrh	r2, [r1, #12]
 8006990:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006994:	d032      	beq.n	80069fc <__ssputs_r+0x80>
 8006996:	6825      	ldr	r5, [r4, #0]
 8006998:	6909      	ldr	r1, [r1, #16]
 800699a:	eba5 0901 	sub.w	r9, r5, r1
 800699e:	6965      	ldr	r5, [r4, #20]
 80069a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80069a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80069a8:	3301      	adds	r3, #1
 80069aa:	444b      	add	r3, r9
 80069ac:	106d      	asrs	r5, r5, #1
 80069ae:	429d      	cmp	r5, r3
 80069b0:	bf38      	it	cc
 80069b2:	461d      	movcc	r5, r3
 80069b4:	0553      	lsls	r3, r2, #21
 80069b6:	d531      	bpl.n	8006a1c <__ssputs_r+0xa0>
 80069b8:	4629      	mov	r1, r5
 80069ba:	f7ff ff2f 	bl	800681c <_malloc_r>
 80069be:	4606      	mov	r6, r0
 80069c0:	b950      	cbnz	r0, 80069d8 <__ssputs_r+0x5c>
 80069c2:	230c      	movs	r3, #12
 80069c4:	f8ca 3000 	str.w	r3, [sl]
 80069c8:	89a3      	ldrh	r3, [r4, #12]
 80069ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069ce:	81a3      	strh	r3, [r4, #12]
 80069d0:	f04f 30ff 	mov.w	r0, #4294967295
 80069d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069d8:	6921      	ldr	r1, [r4, #16]
 80069da:	464a      	mov	r2, r9
 80069dc:	f7ff fe9c 	bl	8006718 <memcpy>
 80069e0:	89a3      	ldrh	r3, [r4, #12]
 80069e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80069e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069ea:	81a3      	strh	r3, [r4, #12]
 80069ec:	6126      	str	r6, [r4, #16]
 80069ee:	6165      	str	r5, [r4, #20]
 80069f0:	444e      	add	r6, r9
 80069f2:	eba5 0509 	sub.w	r5, r5, r9
 80069f6:	6026      	str	r6, [r4, #0]
 80069f8:	60a5      	str	r5, [r4, #8]
 80069fa:	463e      	mov	r6, r7
 80069fc:	42be      	cmp	r6, r7
 80069fe:	d900      	bls.n	8006a02 <__ssputs_r+0x86>
 8006a00:	463e      	mov	r6, r7
 8006a02:	6820      	ldr	r0, [r4, #0]
 8006a04:	4632      	mov	r2, r6
 8006a06:	4641      	mov	r1, r8
 8006a08:	f000 faa8 	bl	8006f5c <memmove>
 8006a0c:	68a3      	ldr	r3, [r4, #8]
 8006a0e:	1b9b      	subs	r3, r3, r6
 8006a10:	60a3      	str	r3, [r4, #8]
 8006a12:	6823      	ldr	r3, [r4, #0]
 8006a14:	4433      	add	r3, r6
 8006a16:	6023      	str	r3, [r4, #0]
 8006a18:	2000      	movs	r0, #0
 8006a1a:	e7db      	b.n	80069d4 <__ssputs_r+0x58>
 8006a1c:	462a      	mov	r2, r5
 8006a1e:	f000 fab7 	bl	8006f90 <_realloc_r>
 8006a22:	4606      	mov	r6, r0
 8006a24:	2800      	cmp	r0, #0
 8006a26:	d1e1      	bne.n	80069ec <__ssputs_r+0x70>
 8006a28:	6921      	ldr	r1, [r4, #16]
 8006a2a:	4650      	mov	r0, sl
 8006a2c:	f7ff fe8a 	bl	8006744 <_free_r>
 8006a30:	e7c7      	b.n	80069c2 <__ssputs_r+0x46>
	...

08006a34 <_svfiprintf_r>:
 8006a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a38:	4698      	mov	r8, r3
 8006a3a:	898b      	ldrh	r3, [r1, #12]
 8006a3c:	061b      	lsls	r3, r3, #24
 8006a3e:	b09d      	sub	sp, #116	; 0x74
 8006a40:	4607      	mov	r7, r0
 8006a42:	460d      	mov	r5, r1
 8006a44:	4614      	mov	r4, r2
 8006a46:	d50e      	bpl.n	8006a66 <_svfiprintf_r+0x32>
 8006a48:	690b      	ldr	r3, [r1, #16]
 8006a4a:	b963      	cbnz	r3, 8006a66 <_svfiprintf_r+0x32>
 8006a4c:	2140      	movs	r1, #64	; 0x40
 8006a4e:	f7ff fee5 	bl	800681c <_malloc_r>
 8006a52:	6028      	str	r0, [r5, #0]
 8006a54:	6128      	str	r0, [r5, #16]
 8006a56:	b920      	cbnz	r0, 8006a62 <_svfiprintf_r+0x2e>
 8006a58:	230c      	movs	r3, #12
 8006a5a:	603b      	str	r3, [r7, #0]
 8006a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a60:	e0d1      	b.n	8006c06 <_svfiprintf_r+0x1d2>
 8006a62:	2340      	movs	r3, #64	; 0x40
 8006a64:	616b      	str	r3, [r5, #20]
 8006a66:	2300      	movs	r3, #0
 8006a68:	9309      	str	r3, [sp, #36]	; 0x24
 8006a6a:	2320      	movs	r3, #32
 8006a6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a70:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a74:	2330      	movs	r3, #48	; 0x30
 8006a76:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006c20 <_svfiprintf_r+0x1ec>
 8006a7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a7e:	f04f 0901 	mov.w	r9, #1
 8006a82:	4623      	mov	r3, r4
 8006a84:	469a      	mov	sl, r3
 8006a86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a8a:	b10a      	cbz	r2, 8006a90 <_svfiprintf_r+0x5c>
 8006a8c:	2a25      	cmp	r2, #37	; 0x25
 8006a8e:	d1f9      	bne.n	8006a84 <_svfiprintf_r+0x50>
 8006a90:	ebba 0b04 	subs.w	fp, sl, r4
 8006a94:	d00b      	beq.n	8006aae <_svfiprintf_r+0x7a>
 8006a96:	465b      	mov	r3, fp
 8006a98:	4622      	mov	r2, r4
 8006a9a:	4629      	mov	r1, r5
 8006a9c:	4638      	mov	r0, r7
 8006a9e:	f7ff ff6d 	bl	800697c <__ssputs_r>
 8006aa2:	3001      	adds	r0, #1
 8006aa4:	f000 80aa 	beq.w	8006bfc <_svfiprintf_r+0x1c8>
 8006aa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006aaa:	445a      	add	r2, fp
 8006aac:	9209      	str	r2, [sp, #36]	; 0x24
 8006aae:	f89a 3000 	ldrb.w	r3, [sl]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f000 80a2 	beq.w	8006bfc <_svfiprintf_r+0x1c8>
 8006ab8:	2300      	movs	r3, #0
 8006aba:	f04f 32ff 	mov.w	r2, #4294967295
 8006abe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ac2:	f10a 0a01 	add.w	sl, sl, #1
 8006ac6:	9304      	str	r3, [sp, #16]
 8006ac8:	9307      	str	r3, [sp, #28]
 8006aca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ace:	931a      	str	r3, [sp, #104]	; 0x68
 8006ad0:	4654      	mov	r4, sl
 8006ad2:	2205      	movs	r2, #5
 8006ad4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ad8:	4851      	ldr	r0, [pc, #324]	; (8006c20 <_svfiprintf_r+0x1ec>)
 8006ada:	f7f9 fc01 	bl	80002e0 <memchr>
 8006ade:	9a04      	ldr	r2, [sp, #16]
 8006ae0:	b9d8      	cbnz	r0, 8006b1a <_svfiprintf_r+0xe6>
 8006ae2:	06d0      	lsls	r0, r2, #27
 8006ae4:	bf44      	itt	mi
 8006ae6:	2320      	movmi	r3, #32
 8006ae8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006aec:	0711      	lsls	r1, r2, #28
 8006aee:	bf44      	itt	mi
 8006af0:	232b      	movmi	r3, #43	; 0x2b
 8006af2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006af6:	f89a 3000 	ldrb.w	r3, [sl]
 8006afa:	2b2a      	cmp	r3, #42	; 0x2a
 8006afc:	d015      	beq.n	8006b2a <_svfiprintf_r+0xf6>
 8006afe:	9a07      	ldr	r2, [sp, #28]
 8006b00:	4654      	mov	r4, sl
 8006b02:	2000      	movs	r0, #0
 8006b04:	f04f 0c0a 	mov.w	ip, #10
 8006b08:	4621      	mov	r1, r4
 8006b0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b0e:	3b30      	subs	r3, #48	; 0x30
 8006b10:	2b09      	cmp	r3, #9
 8006b12:	d94e      	bls.n	8006bb2 <_svfiprintf_r+0x17e>
 8006b14:	b1b0      	cbz	r0, 8006b44 <_svfiprintf_r+0x110>
 8006b16:	9207      	str	r2, [sp, #28]
 8006b18:	e014      	b.n	8006b44 <_svfiprintf_r+0x110>
 8006b1a:	eba0 0308 	sub.w	r3, r0, r8
 8006b1e:	fa09 f303 	lsl.w	r3, r9, r3
 8006b22:	4313      	orrs	r3, r2
 8006b24:	9304      	str	r3, [sp, #16]
 8006b26:	46a2      	mov	sl, r4
 8006b28:	e7d2      	b.n	8006ad0 <_svfiprintf_r+0x9c>
 8006b2a:	9b03      	ldr	r3, [sp, #12]
 8006b2c:	1d19      	adds	r1, r3, #4
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	9103      	str	r1, [sp, #12]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	bfbb      	ittet	lt
 8006b36:	425b      	neglt	r3, r3
 8006b38:	f042 0202 	orrlt.w	r2, r2, #2
 8006b3c:	9307      	strge	r3, [sp, #28]
 8006b3e:	9307      	strlt	r3, [sp, #28]
 8006b40:	bfb8      	it	lt
 8006b42:	9204      	strlt	r2, [sp, #16]
 8006b44:	7823      	ldrb	r3, [r4, #0]
 8006b46:	2b2e      	cmp	r3, #46	; 0x2e
 8006b48:	d10c      	bne.n	8006b64 <_svfiprintf_r+0x130>
 8006b4a:	7863      	ldrb	r3, [r4, #1]
 8006b4c:	2b2a      	cmp	r3, #42	; 0x2a
 8006b4e:	d135      	bne.n	8006bbc <_svfiprintf_r+0x188>
 8006b50:	9b03      	ldr	r3, [sp, #12]
 8006b52:	1d1a      	adds	r2, r3, #4
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	9203      	str	r2, [sp, #12]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	bfb8      	it	lt
 8006b5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b60:	3402      	adds	r4, #2
 8006b62:	9305      	str	r3, [sp, #20]
 8006b64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006c30 <_svfiprintf_r+0x1fc>
 8006b68:	7821      	ldrb	r1, [r4, #0]
 8006b6a:	2203      	movs	r2, #3
 8006b6c:	4650      	mov	r0, sl
 8006b6e:	f7f9 fbb7 	bl	80002e0 <memchr>
 8006b72:	b140      	cbz	r0, 8006b86 <_svfiprintf_r+0x152>
 8006b74:	2340      	movs	r3, #64	; 0x40
 8006b76:	eba0 000a 	sub.w	r0, r0, sl
 8006b7a:	fa03 f000 	lsl.w	r0, r3, r0
 8006b7e:	9b04      	ldr	r3, [sp, #16]
 8006b80:	4303      	orrs	r3, r0
 8006b82:	3401      	adds	r4, #1
 8006b84:	9304      	str	r3, [sp, #16]
 8006b86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b8a:	4826      	ldr	r0, [pc, #152]	; (8006c24 <_svfiprintf_r+0x1f0>)
 8006b8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b90:	2206      	movs	r2, #6
 8006b92:	f7f9 fba5 	bl	80002e0 <memchr>
 8006b96:	2800      	cmp	r0, #0
 8006b98:	d038      	beq.n	8006c0c <_svfiprintf_r+0x1d8>
 8006b9a:	4b23      	ldr	r3, [pc, #140]	; (8006c28 <_svfiprintf_r+0x1f4>)
 8006b9c:	bb1b      	cbnz	r3, 8006be6 <_svfiprintf_r+0x1b2>
 8006b9e:	9b03      	ldr	r3, [sp, #12]
 8006ba0:	3307      	adds	r3, #7
 8006ba2:	f023 0307 	bic.w	r3, r3, #7
 8006ba6:	3308      	adds	r3, #8
 8006ba8:	9303      	str	r3, [sp, #12]
 8006baa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bac:	4433      	add	r3, r6
 8006bae:	9309      	str	r3, [sp, #36]	; 0x24
 8006bb0:	e767      	b.n	8006a82 <_svfiprintf_r+0x4e>
 8006bb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006bb6:	460c      	mov	r4, r1
 8006bb8:	2001      	movs	r0, #1
 8006bba:	e7a5      	b.n	8006b08 <_svfiprintf_r+0xd4>
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	3401      	adds	r4, #1
 8006bc0:	9305      	str	r3, [sp, #20]
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	f04f 0c0a 	mov.w	ip, #10
 8006bc8:	4620      	mov	r0, r4
 8006bca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bce:	3a30      	subs	r2, #48	; 0x30
 8006bd0:	2a09      	cmp	r2, #9
 8006bd2:	d903      	bls.n	8006bdc <_svfiprintf_r+0x1a8>
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d0c5      	beq.n	8006b64 <_svfiprintf_r+0x130>
 8006bd8:	9105      	str	r1, [sp, #20]
 8006bda:	e7c3      	b.n	8006b64 <_svfiprintf_r+0x130>
 8006bdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006be0:	4604      	mov	r4, r0
 8006be2:	2301      	movs	r3, #1
 8006be4:	e7f0      	b.n	8006bc8 <_svfiprintf_r+0x194>
 8006be6:	ab03      	add	r3, sp, #12
 8006be8:	9300      	str	r3, [sp, #0]
 8006bea:	462a      	mov	r2, r5
 8006bec:	4b0f      	ldr	r3, [pc, #60]	; (8006c2c <_svfiprintf_r+0x1f8>)
 8006bee:	a904      	add	r1, sp, #16
 8006bf0:	4638      	mov	r0, r7
 8006bf2:	f3af 8000 	nop.w
 8006bf6:	1c42      	adds	r2, r0, #1
 8006bf8:	4606      	mov	r6, r0
 8006bfa:	d1d6      	bne.n	8006baa <_svfiprintf_r+0x176>
 8006bfc:	89ab      	ldrh	r3, [r5, #12]
 8006bfe:	065b      	lsls	r3, r3, #25
 8006c00:	f53f af2c 	bmi.w	8006a5c <_svfiprintf_r+0x28>
 8006c04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c06:	b01d      	add	sp, #116	; 0x74
 8006c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c0c:	ab03      	add	r3, sp, #12
 8006c0e:	9300      	str	r3, [sp, #0]
 8006c10:	462a      	mov	r2, r5
 8006c12:	4b06      	ldr	r3, [pc, #24]	; (8006c2c <_svfiprintf_r+0x1f8>)
 8006c14:	a904      	add	r1, sp, #16
 8006c16:	4638      	mov	r0, r7
 8006c18:	f000 f87a 	bl	8006d10 <_printf_i>
 8006c1c:	e7eb      	b.n	8006bf6 <_svfiprintf_r+0x1c2>
 8006c1e:	bf00      	nop
 8006c20:	080472c4 	.word	0x080472c4
 8006c24:	080472ce 	.word	0x080472ce
 8006c28:	00000000 	.word	0x00000000
 8006c2c:	0800697d 	.word	0x0800697d
 8006c30:	080472ca 	.word	0x080472ca

08006c34 <_printf_common>:
 8006c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c38:	4616      	mov	r6, r2
 8006c3a:	4699      	mov	r9, r3
 8006c3c:	688a      	ldr	r2, [r1, #8]
 8006c3e:	690b      	ldr	r3, [r1, #16]
 8006c40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c44:	4293      	cmp	r3, r2
 8006c46:	bfb8      	it	lt
 8006c48:	4613      	movlt	r3, r2
 8006c4a:	6033      	str	r3, [r6, #0]
 8006c4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c50:	4607      	mov	r7, r0
 8006c52:	460c      	mov	r4, r1
 8006c54:	b10a      	cbz	r2, 8006c5a <_printf_common+0x26>
 8006c56:	3301      	adds	r3, #1
 8006c58:	6033      	str	r3, [r6, #0]
 8006c5a:	6823      	ldr	r3, [r4, #0]
 8006c5c:	0699      	lsls	r1, r3, #26
 8006c5e:	bf42      	ittt	mi
 8006c60:	6833      	ldrmi	r3, [r6, #0]
 8006c62:	3302      	addmi	r3, #2
 8006c64:	6033      	strmi	r3, [r6, #0]
 8006c66:	6825      	ldr	r5, [r4, #0]
 8006c68:	f015 0506 	ands.w	r5, r5, #6
 8006c6c:	d106      	bne.n	8006c7c <_printf_common+0x48>
 8006c6e:	f104 0a19 	add.w	sl, r4, #25
 8006c72:	68e3      	ldr	r3, [r4, #12]
 8006c74:	6832      	ldr	r2, [r6, #0]
 8006c76:	1a9b      	subs	r3, r3, r2
 8006c78:	42ab      	cmp	r3, r5
 8006c7a:	dc26      	bgt.n	8006cca <_printf_common+0x96>
 8006c7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c80:	1e13      	subs	r3, r2, #0
 8006c82:	6822      	ldr	r2, [r4, #0]
 8006c84:	bf18      	it	ne
 8006c86:	2301      	movne	r3, #1
 8006c88:	0692      	lsls	r2, r2, #26
 8006c8a:	d42b      	bmi.n	8006ce4 <_printf_common+0xb0>
 8006c8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c90:	4649      	mov	r1, r9
 8006c92:	4638      	mov	r0, r7
 8006c94:	47c0      	blx	r8
 8006c96:	3001      	adds	r0, #1
 8006c98:	d01e      	beq.n	8006cd8 <_printf_common+0xa4>
 8006c9a:	6823      	ldr	r3, [r4, #0]
 8006c9c:	68e5      	ldr	r5, [r4, #12]
 8006c9e:	6832      	ldr	r2, [r6, #0]
 8006ca0:	f003 0306 	and.w	r3, r3, #6
 8006ca4:	2b04      	cmp	r3, #4
 8006ca6:	bf08      	it	eq
 8006ca8:	1aad      	subeq	r5, r5, r2
 8006caa:	68a3      	ldr	r3, [r4, #8]
 8006cac:	6922      	ldr	r2, [r4, #16]
 8006cae:	bf0c      	ite	eq
 8006cb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006cb4:	2500      	movne	r5, #0
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	bfc4      	itt	gt
 8006cba:	1a9b      	subgt	r3, r3, r2
 8006cbc:	18ed      	addgt	r5, r5, r3
 8006cbe:	2600      	movs	r6, #0
 8006cc0:	341a      	adds	r4, #26
 8006cc2:	42b5      	cmp	r5, r6
 8006cc4:	d11a      	bne.n	8006cfc <_printf_common+0xc8>
 8006cc6:	2000      	movs	r0, #0
 8006cc8:	e008      	b.n	8006cdc <_printf_common+0xa8>
 8006cca:	2301      	movs	r3, #1
 8006ccc:	4652      	mov	r2, sl
 8006cce:	4649      	mov	r1, r9
 8006cd0:	4638      	mov	r0, r7
 8006cd2:	47c0      	blx	r8
 8006cd4:	3001      	adds	r0, #1
 8006cd6:	d103      	bne.n	8006ce0 <_printf_common+0xac>
 8006cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ce0:	3501      	adds	r5, #1
 8006ce2:	e7c6      	b.n	8006c72 <_printf_common+0x3e>
 8006ce4:	18e1      	adds	r1, r4, r3
 8006ce6:	1c5a      	adds	r2, r3, #1
 8006ce8:	2030      	movs	r0, #48	; 0x30
 8006cea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006cee:	4422      	add	r2, r4
 8006cf0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006cf4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006cf8:	3302      	adds	r3, #2
 8006cfa:	e7c7      	b.n	8006c8c <_printf_common+0x58>
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	4622      	mov	r2, r4
 8006d00:	4649      	mov	r1, r9
 8006d02:	4638      	mov	r0, r7
 8006d04:	47c0      	blx	r8
 8006d06:	3001      	adds	r0, #1
 8006d08:	d0e6      	beq.n	8006cd8 <_printf_common+0xa4>
 8006d0a:	3601      	adds	r6, #1
 8006d0c:	e7d9      	b.n	8006cc2 <_printf_common+0x8e>
	...

08006d10 <_printf_i>:
 8006d10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d14:	7e0f      	ldrb	r7, [r1, #24]
 8006d16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006d18:	2f78      	cmp	r7, #120	; 0x78
 8006d1a:	4691      	mov	r9, r2
 8006d1c:	4680      	mov	r8, r0
 8006d1e:	460c      	mov	r4, r1
 8006d20:	469a      	mov	sl, r3
 8006d22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006d26:	d807      	bhi.n	8006d38 <_printf_i+0x28>
 8006d28:	2f62      	cmp	r7, #98	; 0x62
 8006d2a:	d80a      	bhi.n	8006d42 <_printf_i+0x32>
 8006d2c:	2f00      	cmp	r7, #0
 8006d2e:	f000 80d8 	beq.w	8006ee2 <_printf_i+0x1d2>
 8006d32:	2f58      	cmp	r7, #88	; 0x58
 8006d34:	f000 80a3 	beq.w	8006e7e <_printf_i+0x16e>
 8006d38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006d40:	e03a      	b.n	8006db8 <_printf_i+0xa8>
 8006d42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006d46:	2b15      	cmp	r3, #21
 8006d48:	d8f6      	bhi.n	8006d38 <_printf_i+0x28>
 8006d4a:	a101      	add	r1, pc, #4	; (adr r1, 8006d50 <_printf_i+0x40>)
 8006d4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d50:	08006da9 	.word	0x08006da9
 8006d54:	08006dbd 	.word	0x08006dbd
 8006d58:	08006d39 	.word	0x08006d39
 8006d5c:	08006d39 	.word	0x08006d39
 8006d60:	08006d39 	.word	0x08006d39
 8006d64:	08006d39 	.word	0x08006d39
 8006d68:	08006dbd 	.word	0x08006dbd
 8006d6c:	08006d39 	.word	0x08006d39
 8006d70:	08006d39 	.word	0x08006d39
 8006d74:	08006d39 	.word	0x08006d39
 8006d78:	08006d39 	.word	0x08006d39
 8006d7c:	08006ec9 	.word	0x08006ec9
 8006d80:	08006ded 	.word	0x08006ded
 8006d84:	08006eab 	.word	0x08006eab
 8006d88:	08006d39 	.word	0x08006d39
 8006d8c:	08006d39 	.word	0x08006d39
 8006d90:	08006eeb 	.word	0x08006eeb
 8006d94:	08006d39 	.word	0x08006d39
 8006d98:	08006ded 	.word	0x08006ded
 8006d9c:	08006d39 	.word	0x08006d39
 8006da0:	08006d39 	.word	0x08006d39
 8006da4:	08006eb3 	.word	0x08006eb3
 8006da8:	682b      	ldr	r3, [r5, #0]
 8006daa:	1d1a      	adds	r2, r3, #4
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	602a      	str	r2, [r5, #0]
 8006db0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006db4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006db8:	2301      	movs	r3, #1
 8006dba:	e0a3      	b.n	8006f04 <_printf_i+0x1f4>
 8006dbc:	6820      	ldr	r0, [r4, #0]
 8006dbe:	6829      	ldr	r1, [r5, #0]
 8006dc0:	0606      	lsls	r6, r0, #24
 8006dc2:	f101 0304 	add.w	r3, r1, #4
 8006dc6:	d50a      	bpl.n	8006dde <_printf_i+0xce>
 8006dc8:	680e      	ldr	r6, [r1, #0]
 8006dca:	602b      	str	r3, [r5, #0]
 8006dcc:	2e00      	cmp	r6, #0
 8006dce:	da03      	bge.n	8006dd8 <_printf_i+0xc8>
 8006dd0:	232d      	movs	r3, #45	; 0x2d
 8006dd2:	4276      	negs	r6, r6
 8006dd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dd8:	485e      	ldr	r0, [pc, #376]	; (8006f54 <_printf_i+0x244>)
 8006dda:	230a      	movs	r3, #10
 8006ddc:	e019      	b.n	8006e12 <_printf_i+0x102>
 8006dde:	680e      	ldr	r6, [r1, #0]
 8006de0:	602b      	str	r3, [r5, #0]
 8006de2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006de6:	bf18      	it	ne
 8006de8:	b236      	sxthne	r6, r6
 8006dea:	e7ef      	b.n	8006dcc <_printf_i+0xbc>
 8006dec:	682b      	ldr	r3, [r5, #0]
 8006dee:	6820      	ldr	r0, [r4, #0]
 8006df0:	1d19      	adds	r1, r3, #4
 8006df2:	6029      	str	r1, [r5, #0]
 8006df4:	0601      	lsls	r1, r0, #24
 8006df6:	d501      	bpl.n	8006dfc <_printf_i+0xec>
 8006df8:	681e      	ldr	r6, [r3, #0]
 8006dfa:	e002      	b.n	8006e02 <_printf_i+0xf2>
 8006dfc:	0646      	lsls	r6, r0, #25
 8006dfe:	d5fb      	bpl.n	8006df8 <_printf_i+0xe8>
 8006e00:	881e      	ldrh	r6, [r3, #0]
 8006e02:	4854      	ldr	r0, [pc, #336]	; (8006f54 <_printf_i+0x244>)
 8006e04:	2f6f      	cmp	r7, #111	; 0x6f
 8006e06:	bf0c      	ite	eq
 8006e08:	2308      	moveq	r3, #8
 8006e0a:	230a      	movne	r3, #10
 8006e0c:	2100      	movs	r1, #0
 8006e0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e12:	6865      	ldr	r5, [r4, #4]
 8006e14:	60a5      	str	r5, [r4, #8]
 8006e16:	2d00      	cmp	r5, #0
 8006e18:	bfa2      	ittt	ge
 8006e1a:	6821      	ldrge	r1, [r4, #0]
 8006e1c:	f021 0104 	bicge.w	r1, r1, #4
 8006e20:	6021      	strge	r1, [r4, #0]
 8006e22:	b90e      	cbnz	r6, 8006e28 <_printf_i+0x118>
 8006e24:	2d00      	cmp	r5, #0
 8006e26:	d04d      	beq.n	8006ec4 <_printf_i+0x1b4>
 8006e28:	4615      	mov	r5, r2
 8006e2a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006e2e:	fb03 6711 	mls	r7, r3, r1, r6
 8006e32:	5dc7      	ldrb	r7, [r0, r7]
 8006e34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006e38:	4637      	mov	r7, r6
 8006e3a:	42bb      	cmp	r3, r7
 8006e3c:	460e      	mov	r6, r1
 8006e3e:	d9f4      	bls.n	8006e2a <_printf_i+0x11a>
 8006e40:	2b08      	cmp	r3, #8
 8006e42:	d10b      	bne.n	8006e5c <_printf_i+0x14c>
 8006e44:	6823      	ldr	r3, [r4, #0]
 8006e46:	07de      	lsls	r6, r3, #31
 8006e48:	d508      	bpl.n	8006e5c <_printf_i+0x14c>
 8006e4a:	6923      	ldr	r3, [r4, #16]
 8006e4c:	6861      	ldr	r1, [r4, #4]
 8006e4e:	4299      	cmp	r1, r3
 8006e50:	bfde      	ittt	le
 8006e52:	2330      	movle	r3, #48	; 0x30
 8006e54:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006e58:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006e5c:	1b52      	subs	r2, r2, r5
 8006e5e:	6122      	str	r2, [r4, #16]
 8006e60:	f8cd a000 	str.w	sl, [sp]
 8006e64:	464b      	mov	r3, r9
 8006e66:	aa03      	add	r2, sp, #12
 8006e68:	4621      	mov	r1, r4
 8006e6a:	4640      	mov	r0, r8
 8006e6c:	f7ff fee2 	bl	8006c34 <_printf_common>
 8006e70:	3001      	adds	r0, #1
 8006e72:	d14c      	bne.n	8006f0e <_printf_i+0x1fe>
 8006e74:	f04f 30ff 	mov.w	r0, #4294967295
 8006e78:	b004      	add	sp, #16
 8006e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e7e:	4835      	ldr	r0, [pc, #212]	; (8006f54 <_printf_i+0x244>)
 8006e80:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006e84:	6829      	ldr	r1, [r5, #0]
 8006e86:	6823      	ldr	r3, [r4, #0]
 8006e88:	f851 6b04 	ldr.w	r6, [r1], #4
 8006e8c:	6029      	str	r1, [r5, #0]
 8006e8e:	061d      	lsls	r5, r3, #24
 8006e90:	d514      	bpl.n	8006ebc <_printf_i+0x1ac>
 8006e92:	07df      	lsls	r7, r3, #31
 8006e94:	bf44      	itt	mi
 8006e96:	f043 0320 	orrmi.w	r3, r3, #32
 8006e9a:	6023      	strmi	r3, [r4, #0]
 8006e9c:	b91e      	cbnz	r6, 8006ea6 <_printf_i+0x196>
 8006e9e:	6823      	ldr	r3, [r4, #0]
 8006ea0:	f023 0320 	bic.w	r3, r3, #32
 8006ea4:	6023      	str	r3, [r4, #0]
 8006ea6:	2310      	movs	r3, #16
 8006ea8:	e7b0      	b.n	8006e0c <_printf_i+0xfc>
 8006eaa:	6823      	ldr	r3, [r4, #0]
 8006eac:	f043 0320 	orr.w	r3, r3, #32
 8006eb0:	6023      	str	r3, [r4, #0]
 8006eb2:	2378      	movs	r3, #120	; 0x78
 8006eb4:	4828      	ldr	r0, [pc, #160]	; (8006f58 <_printf_i+0x248>)
 8006eb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006eba:	e7e3      	b.n	8006e84 <_printf_i+0x174>
 8006ebc:	0659      	lsls	r1, r3, #25
 8006ebe:	bf48      	it	mi
 8006ec0:	b2b6      	uxthmi	r6, r6
 8006ec2:	e7e6      	b.n	8006e92 <_printf_i+0x182>
 8006ec4:	4615      	mov	r5, r2
 8006ec6:	e7bb      	b.n	8006e40 <_printf_i+0x130>
 8006ec8:	682b      	ldr	r3, [r5, #0]
 8006eca:	6826      	ldr	r6, [r4, #0]
 8006ecc:	6961      	ldr	r1, [r4, #20]
 8006ece:	1d18      	adds	r0, r3, #4
 8006ed0:	6028      	str	r0, [r5, #0]
 8006ed2:	0635      	lsls	r5, r6, #24
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	d501      	bpl.n	8006edc <_printf_i+0x1cc>
 8006ed8:	6019      	str	r1, [r3, #0]
 8006eda:	e002      	b.n	8006ee2 <_printf_i+0x1d2>
 8006edc:	0670      	lsls	r0, r6, #25
 8006ede:	d5fb      	bpl.n	8006ed8 <_printf_i+0x1c8>
 8006ee0:	8019      	strh	r1, [r3, #0]
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	6123      	str	r3, [r4, #16]
 8006ee6:	4615      	mov	r5, r2
 8006ee8:	e7ba      	b.n	8006e60 <_printf_i+0x150>
 8006eea:	682b      	ldr	r3, [r5, #0]
 8006eec:	1d1a      	adds	r2, r3, #4
 8006eee:	602a      	str	r2, [r5, #0]
 8006ef0:	681d      	ldr	r5, [r3, #0]
 8006ef2:	6862      	ldr	r2, [r4, #4]
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	4628      	mov	r0, r5
 8006ef8:	f7f9 f9f2 	bl	80002e0 <memchr>
 8006efc:	b108      	cbz	r0, 8006f02 <_printf_i+0x1f2>
 8006efe:	1b40      	subs	r0, r0, r5
 8006f00:	6060      	str	r0, [r4, #4]
 8006f02:	6863      	ldr	r3, [r4, #4]
 8006f04:	6123      	str	r3, [r4, #16]
 8006f06:	2300      	movs	r3, #0
 8006f08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f0c:	e7a8      	b.n	8006e60 <_printf_i+0x150>
 8006f0e:	6923      	ldr	r3, [r4, #16]
 8006f10:	462a      	mov	r2, r5
 8006f12:	4649      	mov	r1, r9
 8006f14:	4640      	mov	r0, r8
 8006f16:	47d0      	blx	sl
 8006f18:	3001      	adds	r0, #1
 8006f1a:	d0ab      	beq.n	8006e74 <_printf_i+0x164>
 8006f1c:	6823      	ldr	r3, [r4, #0]
 8006f1e:	079b      	lsls	r3, r3, #30
 8006f20:	d413      	bmi.n	8006f4a <_printf_i+0x23a>
 8006f22:	68e0      	ldr	r0, [r4, #12]
 8006f24:	9b03      	ldr	r3, [sp, #12]
 8006f26:	4298      	cmp	r0, r3
 8006f28:	bfb8      	it	lt
 8006f2a:	4618      	movlt	r0, r3
 8006f2c:	e7a4      	b.n	8006e78 <_printf_i+0x168>
 8006f2e:	2301      	movs	r3, #1
 8006f30:	4632      	mov	r2, r6
 8006f32:	4649      	mov	r1, r9
 8006f34:	4640      	mov	r0, r8
 8006f36:	47d0      	blx	sl
 8006f38:	3001      	adds	r0, #1
 8006f3a:	d09b      	beq.n	8006e74 <_printf_i+0x164>
 8006f3c:	3501      	adds	r5, #1
 8006f3e:	68e3      	ldr	r3, [r4, #12]
 8006f40:	9903      	ldr	r1, [sp, #12]
 8006f42:	1a5b      	subs	r3, r3, r1
 8006f44:	42ab      	cmp	r3, r5
 8006f46:	dcf2      	bgt.n	8006f2e <_printf_i+0x21e>
 8006f48:	e7eb      	b.n	8006f22 <_printf_i+0x212>
 8006f4a:	2500      	movs	r5, #0
 8006f4c:	f104 0619 	add.w	r6, r4, #25
 8006f50:	e7f5      	b.n	8006f3e <_printf_i+0x22e>
 8006f52:	bf00      	nop
 8006f54:	080472d5 	.word	0x080472d5
 8006f58:	080472e6 	.word	0x080472e6

08006f5c <memmove>:
 8006f5c:	4288      	cmp	r0, r1
 8006f5e:	b510      	push	{r4, lr}
 8006f60:	eb01 0402 	add.w	r4, r1, r2
 8006f64:	d902      	bls.n	8006f6c <memmove+0x10>
 8006f66:	4284      	cmp	r4, r0
 8006f68:	4623      	mov	r3, r4
 8006f6a:	d807      	bhi.n	8006f7c <memmove+0x20>
 8006f6c:	1e43      	subs	r3, r0, #1
 8006f6e:	42a1      	cmp	r1, r4
 8006f70:	d008      	beq.n	8006f84 <memmove+0x28>
 8006f72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f7a:	e7f8      	b.n	8006f6e <memmove+0x12>
 8006f7c:	4402      	add	r2, r0
 8006f7e:	4601      	mov	r1, r0
 8006f80:	428a      	cmp	r2, r1
 8006f82:	d100      	bne.n	8006f86 <memmove+0x2a>
 8006f84:	bd10      	pop	{r4, pc}
 8006f86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f8e:	e7f7      	b.n	8006f80 <memmove+0x24>

08006f90 <_realloc_r>:
 8006f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f94:	4680      	mov	r8, r0
 8006f96:	4614      	mov	r4, r2
 8006f98:	460e      	mov	r6, r1
 8006f9a:	b921      	cbnz	r1, 8006fa6 <_realloc_r+0x16>
 8006f9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fa0:	4611      	mov	r1, r2
 8006fa2:	f7ff bc3b 	b.w	800681c <_malloc_r>
 8006fa6:	b92a      	cbnz	r2, 8006fb4 <_realloc_r+0x24>
 8006fa8:	f7ff fbcc 	bl	8006744 <_free_r>
 8006fac:	4625      	mov	r5, r4
 8006fae:	4628      	mov	r0, r5
 8006fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fb4:	f000 f81b 	bl	8006fee <_malloc_usable_size_r>
 8006fb8:	4284      	cmp	r4, r0
 8006fba:	4607      	mov	r7, r0
 8006fbc:	d802      	bhi.n	8006fc4 <_realloc_r+0x34>
 8006fbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006fc2:	d812      	bhi.n	8006fea <_realloc_r+0x5a>
 8006fc4:	4621      	mov	r1, r4
 8006fc6:	4640      	mov	r0, r8
 8006fc8:	f7ff fc28 	bl	800681c <_malloc_r>
 8006fcc:	4605      	mov	r5, r0
 8006fce:	2800      	cmp	r0, #0
 8006fd0:	d0ed      	beq.n	8006fae <_realloc_r+0x1e>
 8006fd2:	42bc      	cmp	r4, r7
 8006fd4:	4622      	mov	r2, r4
 8006fd6:	4631      	mov	r1, r6
 8006fd8:	bf28      	it	cs
 8006fda:	463a      	movcs	r2, r7
 8006fdc:	f7ff fb9c 	bl	8006718 <memcpy>
 8006fe0:	4631      	mov	r1, r6
 8006fe2:	4640      	mov	r0, r8
 8006fe4:	f7ff fbae 	bl	8006744 <_free_r>
 8006fe8:	e7e1      	b.n	8006fae <_realloc_r+0x1e>
 8006fea:	4635      	mov	r5, r6
 8006fec:	e7df      	b.n	8006fae <_realloc_r+0x1e>

08006fee <_malloc_usable_size_r>:
 8006fee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ff2:	1f18      	subs	r0, r3, #4
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	bfbc      	itt	lt
 8006ff8:	580b      	ldrlt	r3, [r1, r0]
 8006ffa:	18c0      	addlt	r0, r0, r3
 8006ffc:	4770      	bx	lr
	...

08007000 <ceilf>:
 8007000:	ee10 3a10 	vmov	r3, s0
 8007004:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007008:	3a7f      	subs	r2, #127	; 0x7f
 800700a:	2a16      	cmp	r2, #22
 800700c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007010:	dc2a      	bgt.n	8007068 <ceilf+0x68>
 8007012:	2a00      	cmp	r2, #0
 8007014:	da11      	bge.n	800703a <ceilf+0x3a>
 8007016:	eddf 7a19 	vldr	s15, [pc, #100]	; 800707c <ceilf+0x7c>
 800701a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800701e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007026:	dd05      	ble.n	8007034 <ceilf+0x34>
 8007028:	2b00      	cmp	r3, #0
 800702a:	db23      	blt.n	8007074 <ceilf+0x74>
 800702c:	2900      	cmp	r1, #0
 800702e:	bf18      	it	ne
 8007030:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 8007034:	ee00 3a10 	vmov	s0, r3
 8007038:	4770      	bx	lr
 800703a:	4911      	ldr	r1, [pc, #68]	; (8007080 <ceilf+0x80>)
 800703c:	4111      	asrs	r1, r2
 800703e:	420b      	tst	r3, r1
 8007040:	d0fa      	beq.n	8007038 <ceilf+0x38>
 8007042:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800707c <ceilf+0x7c>
 8007046:	ee30 0a27 	vadd.f32	s0, s0, s15
 800704a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800704e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007052:	ddef      	ble.n	8007034 <ceilf+0x34>
 8007054:	2b00      	cmp	r3, #0
 8007056:	bfc2      	ittt	gt
 8007058:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 800705c:	fa40 f202 	asrgt.w	r2, r0, r2
 8007060:	189b      	addgt	r3, r3, r2
 8007062:	ea23 0301 	bic.w	r3, r3, r1
 8007066:	e7e5      	b.n	8007034 <ceilf+0x34>
 8007068:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800706c:	d3e4      	bcc.n	8007038 <ceilf+0x38>
 800706e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007072:	4770      	bx	lr
 8007074:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007078:	e7dc      	b.n	8007034 <ceilf+0x34>
 800707a:	bf00      	nop
 800707c:	7149f2ca 	.word	0x7149f2ca
 8007080:	007fffff 	.word	0x007fffff

08007084 <_init>:
 8007084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007086:	bf00      	nop
 8007088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800708a:	bc08      	pop	{r3}
 800708c:	469e      	mov	lr, r3
 800708e:	4770      	bx	lr

08007090 <_fini>:
 8007090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007092:	bf00      	nop
 8007094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007096:	bc08      	pop	{r3}
 8007098:	469e      	mov	lr, r3
 800709a:	4770      	bx	lr
