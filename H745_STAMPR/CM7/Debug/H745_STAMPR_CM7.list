
H745_STAMPR_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d60  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005ff8  08005ff8  00015ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006030  08006030  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  08006030  08006030  00016030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006038  08006038  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006038  08006038  00016038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800603c  0800603c  0001603c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08006040  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  08006050  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  080060b0  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000006ac  240000d0  08006110  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2400077c  08006110  0002077c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00019b58  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000028fe  00000000  00000000  00039c56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001048  00000000  00000000  0003c558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000f60  00000000  00000000  0003d5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003afca  00000000  00000000  0003e500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014a66  00000000  00000000  000794ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00187610  00000000  00000000  0008df30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00215540  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004510  00000000  00000000  00215590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005fe0 	.word	0x08005fe0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08005fe0 	.word	0x08005fe0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800070e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000712:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000714:	bf00      	nop
 8000716:	4b23      	ldr	r3, [pc, #140]	; (80007a4 <main+0x9c>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800071e:	2b00      	cmp	r3, #0
 8000720:	d004      	beq.n	800072c <main+0x24>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	1e5a      	subs	r2, r3, #1
 8000726:	607a      	str	r2, [r7, #4]
 8000728:	2b00      	cmp	r3, #0
 800072a:	dcf4      	bgt.n	8000716 <main+0xe>
  if ( timeout < 0 )
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b00      	cmp	r3, #0
 8000730:	da01      	bge.n	8000736 <main+0x2e>
  {
  Error_Handler();
 8000732:	f000 f9ef 	bl	8000b14 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000736:	f000 fc1d 	bl	8000f74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073a:	f000 f835 	bl	80007a8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800073e:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <main+0x9c>)
 8000740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000744:	4a17      	ldr	r2, [pc, #92]	; (80007a4 <main+0x9c>)
 8000746:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800074a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <main+0x9c>)
 8000750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800075c:	2000      	movs	r0, #0
 800075e:	f001 fb97 	bl	8001e90 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000762:	2100      	movs	r1, #0
 8000764:	2000      	movs	r0, #0
 8000766:	f001 fbad 	bl	8001ec4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800076a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800076e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000770:	bf00      	nop
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <main+0x9c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800077a:	2b00      	cmp	r3, #0
 800077c:	d104      	bne.n	8000788 <main+0x80>
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	1e5a      	subs	r2, r3, #1
 8000782:	607a      	str	r2, [r7, #4]
 8000784:	2b00      	cmp	r3, #0
 8000786:	dcf4      	bgt.n	8000772 <main+0x6a>
if ( timeout < 0 )
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2b00      	cmp	r3, #0
 800078c:	da01      	bge.n	8000792 <main+0x8a>
{
Error_Handler();
 800078e:	f000 f9c1 	bl	8000b14 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000792:	f000 f959 	bl	8000a48 <MX_GPIO_Init>
  MX_ETH_Init();
 8000796:	f000 f88d 	bl	80008b4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800079a:	f000 f8d7 	bl	800094c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800079e:	f000 f921 	bl	80009e4 <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007a2:	e7fe      	b.n	80007a2 <main+0x9a>
 80007a4:	58024400 	.word	0x58024400

080007a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b09c      	sub	sp, #112	; 0x70
 80007ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b2:	224c      	movs	r2, #76	; 0x4c
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f005 fc0a 	bl	8005fd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	2220      	movs	r2, #32
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f005 fc04 	bl	8005fd0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007c8:	2004      	movs	r0, #4
 80007ca:	f001 fcd7 	bl	800217c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007ce:	2300      	movs	r3, #0
 80007d0:	603b      	str	r3, [r7, #0]
 80007d2:	4b35      	ldr	r3, [pc, #212]	; (80008a8 <SystemClock_Config+0x100>)
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	4a34      	ldr	r2, [pc, #208]	; (80008a8 <SystemClock_Config+0x100>)
 80007d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007dc:	6193      	str	r3, [r2, #24]
 80007de:	4b32      	ldr	r3, [pc, #200]	; (80008a8 <SystemClock_Config+0x100>)
 80007e0:	699b      	ldr	r3, [r3, #24]
 80007e2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	4b30      	ldr	r3, [pc, #192]	; (80008ac <SystemClock_Config+0x104>)
 80007ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ec:	4a2f      	ldr	r2, [pc, #188]	; (80008ac <SystemClock_Config+0x104>)
 80007ee:	f043 0301 	orr.w	r3, r3, #1
 80007f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007f4:	4b2d      	ldr	r3, [pc, #180]	; (80008ac <SystemClock_Config+0x104>)
 80007f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007f8:	f003 0301 	and.w	r3, r3, #1
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000800:	bf00      	nop
 8000802:	4b29      	ldr	r3, [pc, #164]	; (80008a8 <SystemClock_Config+0x100>)
 8000804:	699b      	ldr	r3, [r3, #24]
 8000806:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800080a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800080e:	d1f8      	bne.n	8000802 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000810:	4b27      	ldr	r3, [pc, #156]	; (80008b0 <SystemClock_Config+0x108>)
 8000812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000814:	f023 0303 	bic.w	r3, r3, #3
 8000818:	4a25      	ldr	r2, [pc, #148]	; (80008b0 <SystemClock_Config+0x108>)
 800081a:	f043 0302 	orr.w	r3, r3, #2
 800081e:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000820:	2309      	movs	r3, #9
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000824:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800082a:	2301      	movs	r3, #1
 800082c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082e:	2302      	movs	r3, #2
 8000830:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000832:	2302      	movs	r3, #2
 8000834:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000836:	2301      	movs	r3, #1
 8000838:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 800083a:	2378      	movs	r3, #120	; 0x78
 800083c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800083e:	2302      	movs	r3, #2
 8000840:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000842:	2302      	movs	r3, #2
 8000844:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000846:	2302      	movs	r3, #2
 8000848:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800084a:	230c      	movs	r3, #12
 800084c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800084e:	2300      	movs	r3, #0
 8000850:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000856:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800085a:	4618      	mov	r0, r3
 800085c:	f001 fcf8 	bl	8002250 <HAL_RCC_OscConfig>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000866:	f000 f955 	bl	8000b14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086a:	233f      	movs	r3, #63	; 0x3f
 800086c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800086e:	2303      	movs	r3, #3
 8000870:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000876:	2308      	movs	r3, #8
 8000878:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800087a:	2340      	movs	r3, #64	; 0x40
 800087c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800087e:	2340      	movs	r3, #64	; 0x40
 8000880:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000882:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000886:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000888:	2340      	movs	r3, #64	; 0x40
 800088a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	2104      	movs	r1, #4
 8000890:	4618      	mov	r0, r3
 8000892:	f002 f90b 	bl	8002aac <HAL_RCC_ClockConfig>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 800089c:	f000 f93a 	bl	8000b14 <Error_Handler>
  }
}
 80008a0:	bf00      	nop
 80008a2:	3770      	adds	r7, #112	; 0x70
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	58024800 	.word	0x58024800
 80008ac:	58000400 	.word	0x58000400
 80008b0:	58024400 	.word	0x58024400

080008b4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008b8:	4b1e      	ldr	r3, [pc, #120]	; (8000934 <MX_ETH_Init+0x80>)
 80008ba:	4a1f      	ldr	r2, [pc, #124]	; (8000938 <MX_ETH_Init+0x84>)
 80008bc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008be:	4b1f      	ldr	r3, [pc, #124]	; (800093c <MX_ETH_Init+0x88>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008c4:	4b1d      	ldr	r3, [pc, #116]	; (800093c <MX_ETH_Init+0x88>)
 80008c6:	2280      	movs	r2, #128	; 0x80
 80008c8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008ca:	4b1c      	ldr	r3, [pc, #112]	; (800093c <MX_ETH_Init+0x88>)
 80008cc:	22e1      	movs	r2, #225	; 0xe1
 80008ce:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008d0:	4b1a      	ldr	r3, [pc, #104]	; (800093c <MX_ETH_Init+0x88>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008d6:	4b19      	ldr	r3, [pc, #100]	; (800093c <MX_ETH_Init+0x88>)
 80008d8:	2200      	movs	r2, #0
 80008da:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008dc:	4b17      	ldr	r3, [pc, #92]	; (800093c <MX_ETH_Init+0x88>)
 80008de:	2200      	movs	r2, #0
 80008e0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008e2:	4b14      	ldr	r3, [pc, #80]	; (8000934 <MX_ETH_Init+0x80>)
 80008e4:	4a15      	ldr	r2, [pc, #84]	; (800093c <MX_ETH_Init+0x88>)
 80008e6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <MX_ETH_Init+0x80>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <MX_ETH_Init+0x80>)
 80008f0:	4a13      	ldr	r2, [pc, #76]	; (8000940 <MX_ETH_Init+0x8c>)
 80008f2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008f4:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <MX_ETH_Init+0x80>)
 80008f6:	4a13      	ldr	r2, [pc, #76]	; (8000944 <MX_ETH_Init+0x90>)
 80008f8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <MX_ETH_Init+0x80>)
 80008fc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000900:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000902:	480c      	ldr	r0, [pc, #48]	; (8000934 <MX_ETH_Init+0x80>)
 8000904:	f000 fcf0 	bl	80012e8 <HAL_ETH_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800090e:	f000 f901 	bl	8000b14 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000912:	2238      	movs	r2, #56	; 0x38
 8000914:	2100      	movs	r1, #0
 8000916:	480c      	ldr	r0, [pc, #48]	; (8000948 <MX_ETH_Init+0x94>)
 8000918:	f005 fb5a 	bl	8005fd0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800091c:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <MX_ETH_Init+0x94>)
 800091e:	2221      	movs	r2, #33	; 0x21
 8000920:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_ETH_Init+0x94>)
 8000924:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000928:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800092a:	4b07      	ldr	r3, [pc, #28]	; (8000948 <MX_ETH_Init+0x94>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	24000124 	.word	0x24000124
 8000938:	40028000 	.word	0x40028000
 800093c:	24000770 	.word	0x24000770
 8000940:	24000070 	.word	0x24000070
 8000944:	24000010 	.word	0x24000010
 8000948:	240000ec 	.word	0x240000ec

0800094c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000950:	4b22      	ldr	r3, [pc, #136]	; (80009dc <MX_USART3_UART_Init+0x90>)
 8000952:	4a23      	ldr	r2, [pc, #140]	; (80009e0 <MX_USART3_UART_Init+0x94>)
 8000954:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000956:	4b21      	ldr	r3, [pc, #132]	; (80009dc <MX_USART3_UART_Init+0x90>)
 8000958:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800095c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800095e:	4b1f      	ldr	r3, [pc, #124]	; (80009dc <MX_USART3_UART_Init+0x90>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000964:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <MX_USART3_UART_Init+0x90>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800096a:	4b1c      	ldr	r3, [pc, #112]	; (80009dc <MX_USART3_UART_Init+0x90>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000970:	4b1a      	ldr	r3, [pc, #104]	; (80009dc <MX_USART3_UART_Init+0x90>)
 8000972:	220c      	movs	r2, #12
 8000974:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000976:	4b19      	ldr	r3, [pc, #100]	; (80009dc <MX_USART3_UART_Init+0x90>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800097c:	4b17      	ldr	r3, [pc, #92]	; (80009dc <MX_USART3_UART_Init+0x90>)
 800097e:	2200      	movs	r2, #0
 8000980:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000982:	4b16      	ldr	r3, [pc, #88]	; (80009dc <MX_USART3_UART_Init+0x90>)
 8000984:	2200      	movs	r2, #0
 8000986:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000988:	4b14      	ldr	r3, [pc, #80]	; (80009dc <MX_USART3_UART_Init+0x90>)
 800098a:	2200      	movs	r2, #0
 800098c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800098e:	4b13      	ldr	r3, [pc, #76]	; (80009dc <MX_USART3_UART_Init+0x90>)
 8000990:	2200      	movs	r2, #0
 8000992:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000994:	4811      	ldr	r0, [pc, #68]	; (80009dc <MX_USART3_UART_Init+0x90>)
 8000996:	f003 ff7d 	bl	8004894 <HAL_UART_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009a0:	f000 f8b8 	bl	8000b14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a4:	2100      	movs	r1, #0
 80009a6:	480d      	ldr	r0, [pc, #52]	; (80009dc <MX_USART3_UART_Init+0x90>)
 80009a8:	f004 ff1a 	bl	80057e0 <HAL_UARTEx_SetTxFifoThreshold>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009b2:	f000 f8af 	bl	8000b14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b6:	2100      	movs	r1, #0
 80009b8:	4808      	ldr	r0, [pc, #32]	; (80009dc <MX_USART3_UART_Init+0x90>)
 80009ba:	f004 ff4f 	bl	800585c <HAL_UARTEx_SetRxFifoThreshold>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009c4:	f000 f8a6 	bl	8000b14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009c8:	4804      	ldr	r0, [pc, #16]	; (80009dc <MX_USART3_UART_Init+0x90>)
 80009ca:	f004 fed0 	bl	800576e <HAL_UARTEx_DisableFifoMode>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009d4:	f000 f89e 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	240001d4 	.word	0x240001d4
 80009e0:	40004800 	.word	0x40004800

080009e4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009e8:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009ea:	4a16      	ldr	r2, [pc, #88]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80009ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80009ee:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009f0:	2209      	movs	r2, #9
 80009f2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009f4:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009f6:	2202      	movs	r2, #2
 80009f8:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009fa:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a00:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a02:	2202      	movs	r2, #2
 8000a04:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a2a:	4805      	ldr	r0, [pc, #20]	; (8000a40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a2c:	f001 fa5e 	bl	8001eec <HAL_PCD_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000a36:	f000 f86d 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	24000264 	.word	0x24000264
 8000a44:	40080000 	.word	0x40080000

08000a48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b087      	sub	sp, #28
 8000a4c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4e:	4b30      	ldr	r3, [pc, #192]	; (8000b10 <MX_GPIO_Init+0xc8>)
 8000a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a54:	4a2e      	ldr	r2, [pc, #184]	; (8000b10 <MX_GPIO_Init+0xc8>)
 8000a56:	f043 0304 	orr.w	r3, r3, #4
 8000a5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a5e:	4b2c      	ldr	r3, [pc, #176]	; (8000b10 <MX_GPIO_Init+0xc8>)
 8000a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a64:	f003 0304 	and.w	r3, r3, #4
 8000a68:	617b      	str	r3, [r7, #20]
 8000a6a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a6c:	4b28      	ldr	r3, [pc, #160]	; (8000b10 <MX_GPIO_Init+0xc8>)
 8000a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a72:	4a27      	ldr	r2, [pc, #156]	; (8000b10 <MX_GPIO_Init+0xc8>)
 8000a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a7c:	4b24      	ldr	r3, [pc, #144]	; (8000b10 <MX_GPIO_Init+0xc8>)
 8000a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a86:	613b      	str	r3, [r7, #16]
 8000a88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8a:	4b21      	ldr	r3, [pc, #132]	; (8000b10 <MX_GPIO_Init+0xc8>)
 8000a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a90:	4a1f      	ldr	r2, [pc, #124]	; (8000b10 <MX_GPIO_Init+0xc8>)
 8000a92:	f043 0301 	orr.w	r3, r3, #1
 8000a96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a9a:	4b1d      	ldr	r3, [pc, #116]	; (8000b10 <MX_GPIO_Init+0xc8>)
 8000a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa0:	f003 0301 	and.w	r3, r3, #1
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa8:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <MX_GPIO_Init+0xc8>)
 8000aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aae:	4a18      	ldr	r2, [pc, #96]	; (8000b10 <MX_GPIO_Init+0xc8>)
 8000ab0:	f043 0302 	orr.w	r3, r3, #2
 8000ab4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ab8:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <MX_GPIO_Init+0xc8>)
 8000aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000abe:	f003 0302 	and.w	r3, r3, #2
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ac6:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <MX_GPIO_Init+0xc8>)
 8000ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000acc:	4a10      	ldr	r2, [pc, #64]	; (8000b10 <MX_GPIO_Init+0xc8>)
 8000ace:	f043 0308 	orr.w	r3, r3, #8
 8000ad2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <MX_GPIO_Init+0xc8>)
 8000ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000adc:	f003 0308 	and.w	r3, r3, #8
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ae4:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <MX_GPIO_Init+0xc8>)
 8000ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aea:	4a09      	ldr	r2, [pc, #36]	; (8000b10 <MX_GPIO_Init+0xc8>)
 8000aec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000af0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <MX_GPIO_Init+0xc8>)
 8000af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000afe:	603b      	str	r3, [r7, #0]
 8000b00:	683b      	ldr	r3, [r7, #0]

}
 8000b02:	bf00      	nop
 8000b04:	371c      	adds	r7, #28
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	58024400 	.word	0x58024400

08000b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b18:	b672      	cpsid	i
}
 8000b1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <Error_Handler+0x8>
	...

08000b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b26:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <HAL_MspInit+0x30>)
 8000b28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b2c:	4a08      	ldr	r2, [pc, #32]	; (8000b50 <HAL_MspInit+0x30>)
 8000b2e:	f043 0302 	orr.w	r3, r3, #2
 8000b32:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_MspInit+0x30>)
 8000b38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b3c:	f003 0302 	and.w	r3, r3, #2
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	58024400 	.word	0x58024400

08000b54 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08e      	sub	sp, #56	; 0x38
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a59      	ldr	r2, [pc, #356]	; (8000cd8 <HAL_ETH_MspInit+0x184>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	f040 80ab 	bne.w	8000cce <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000b78:	4b58      	ldr	r3, [pc, #352]	; (8000cdc <HAL_ETH_MspInit+0x188>)
 8000b7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b7e:	4a57      	ldr	r2, [pc, #348]	; (8000cdc <HAL_ETH_MspInit+0x188>)
 8000b80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b84:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b88:	4b54      	ldr	r3, [pc, #336]	; (8000cdc <HAL_ETH_MspInit+0x188>)
 8000b8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b92:	623b      	str	r3, [r7, #32]
 8000b94:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000b96:	4b51      	ldr	r3, [pc, #324]	; (8000cdc <HAL_ETH_MspInit+0x188>)
 8000b98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b9c:	4a4f      	ldr	r2, [pc, #316]	; (8000cdc <HAL_ETH_MspInit+0x188>)
 8000b9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ba2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ba6:	4b4d      	ldr	r3, [pc, #308]	; (8000cdc <HAL_ETH_MspInit+0x188>)
 8000ba8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bb0:	61fb      	str	r3, [r7, #28]
 8000bb2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000bb4:	4b49      	ldr	r3, [pc, #292]	; (8000cdc <HAL_ETH_MspInit+0x188>)
 8000bb6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bba:	4a48      	ldr	r2, [pc, #288]	; (8000cdc <HAL_ETH_MspInit+0x188>)
 8000bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bc4:	4b45      	ldr	r3, [pc, #276]	; (8000cdc <HAL_ETH_MspInit+0x188>)
 8000bc6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bce:	61bb      	str	r3, [r7, #24]
 8000bd0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd2:	4b42      	ldr	r3, [pc, #264]	; (8000cdc <HAL_ETH_MspInit+0x188>)
 8000bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd8:	4a40      	ldr	r2, [pc, #256]	; (8000cdc <HAL_ETH_MspInit+0x188>)
 8000bda:	f043 0304 	orr.w	r3, r3, #4
 8000bde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000be2:	4b3e      	ldr	r3, [pc, #248]	; (8000cdc <HAL_ETH_MspInit+0x188>)
 8000be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be8:	f003 0304 	and.w	r3, r3, #4
 8000bec:	617b      	str	r3, [r7, #20]
 8000bee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf0:	4b3a      	ldr	r3, [pc, #232]	; (8000cdc <HAL_ETH_MspInit+0x188>)
 8000bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf6:	4a39      	ldr	r2, [pc, #228]	; (8000cdc <HAL_ETH_MspInit+0x188>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c00:	4b36      	ldr	r3, [pc, #216]	; (8000cdc <HAL_ETH_MspInit+0x188>)
 8000c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0e:	4b33      	ldr	r3, [pc, #204]	; (8000cdc <HAL_ETH_MspInit+0x188>)
 8000c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c14:	4a31      	ldr	r2, [pc, #196]	; (8000cdc <HAL_ETH_MspInit+0x188>)
 8000c16:	f043 0302 	orr.w	r3, r3, #2
 8000c1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c1e:	4b2f      	ldr	r3, [pc, #188]	; (8000cdc <HAL_ETH_MspInit+0x188>)
 8000c20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c24:	f003 0302 	and.w	r3, r3, #2
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c2c:	4b2b      	ldr	r3, [pc, #172]	; (8000cdc <HAL_ETH_MspInit+0x188>)
 8000c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c32:	4a2a      	ldr	r2, [pc, #168]	; (8000cdc <HAL_ETH_MspInit+0x188>)
 8000c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c3c:	4b27      	ldr	r3, [pc, #156]	; (8000cdc <HAL_ETH_MspInit+0x188>)
 8000c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000c4a:	2332      	movs	r3, #50	; 0x32
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c5a:	230b      	movs	r3, #11
 8000c5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c62:	4619      	mov	r1, r3
 8000c64:	481e      	ldr	r0, [pc, #120]	; (8000ce0 <HAL_ETH_MspInit+0x18c>)
 8000c66:	f000 ff63 	bl	8001b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000c6a:	2386      	movs	r3, #134	; 0x86
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c76:	2300      	movs	r3, #0
 8000c78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c7a:	230b      	movs	r3, #11
 8000c7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c82:	4619      	mov	r1, r3
 8000c84:	4817      	ldr	r0, [pc, #92]	; (8000ce4 <HAL_ETH_MspInit+0x190>)
 8000c86:	f000 ff53 	bl	8001b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	2302      	movs	r3, #2
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c9c:	230b      	movs	r3, #11
 8000c9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4810      	ldr	r0, [pc, #64]	; (8000ce8 <HAL_ETH_MspInit+0x194>)
 8000ca8:	f000 ff42 	bl	8001b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000cac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cbe:	230b      	movs	r3, #11
 8000cc0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4808      	ldr	r0, [pc, #32]	; (8000cec <HAL_ETH_MspInit+0x198>)
 8000cca:	f000 ff31 	bl	8001b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000cce:	bf00      	nop
 8000cd0:	3738      	adds	r7, #56	; 0x38
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40028000 	.word	0x40028000
 8000cdc:	58024400 	.word	0x58024400
 8000ce0:	58020800 	.word	0x58020800
 8000ce4:	58020000 	.word	0x58020000
 8000ce8:	58020400 	.word	0x58020400
 8000cec:	58021800 	.word	0x58021800

08000cf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b0b8      	sub	sp, #224	; 0xe0
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d08:	f107 0310 	add.w	r3, r7, #16
 8000d0c:	22bc      	movs	r2, #188	; 0xbc
 8000d0e:	2100      	movs	r1, #0
 8000d10:	4618      	mov	r0, r3
 8000d12:	f005 f95d 	bl	8005fd0 <memset>
  if(huart->Instance==USART3)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a25      	ldr	r2, [pc, #148]	; (8000db0 <HAL_UART_MspInit+0xc0>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d142      	bne.n	8000da6 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d20:	2302      	movs	r3, #2
 8000d22:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d24:	2300      	movs	r3, #0
 8000d26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d2a:	f107 0310 	add.w	r3, r7, #16
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f002 fa48 	bl	80031c4 <HAL_RCCEx_PeriphCLKConfig>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d3a:	f7ff feeb 	bl	8000b14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d3e:	4b1d      	ldr	r3, [pc, #116]	; (8000db4 <HAL_UART_MspInit+0xc4>)
 8000d40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d44:	4a1b      	ldr	r2, [pc, #108]	; (8000db4 <HAL_UART_MspInit+0xc4>)
 8000d46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d4a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d4e:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <HAL_UART_MspInit+0xc4>)
 8000d50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d5c:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <HAL_UART_MspInit+0xc4>)
 8000d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d62:	4a14      	ldr	r2, [pc, #80]	; (8000db4 <HAL_UART_MspInit+0xc4>)
 8000d64:	f043 0308 	orr.w	r3, r3, #8
 8000d68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d6c:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <HAL_UART_MspInit+0xc4>)
 8000d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d72:	f003 0308 	and.w	r3, r3, #8
 8000d76:	60bb      	str	r3, [r7, #8]
 8000d78:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000d7a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d7e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d82:	2302      	movs	r3, #2
 8000d84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d94:	2307      	movs	r3, #7
 8000d96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d9a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4805      	ldr	r0, [pc, #20]	; (8000db8 <HAL_UART_MspInit+0xc8>)
 8000da2:	f000 fec5 	bl	8001b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000da6:	bf00      	nop
 8000da8:	37e0      	adds	r7, #224	; 0xe0
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40004800 	.word	0x40004800
 8000db4:	58024400 	.word	0x58024400
 8000db8:	58020c00 	.word	0x58020c00

08000dbc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b0b8      	sub	sp, #224	; 0xe0
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dd4:	f107 0310 	add.w	r3, r7, #16
 8000dd8:	22bc      	movs	r2, #188	; 0xbc
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f005 f8f7 	bl	8005fd0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a36      	ldr	r2, [pc, #216]	; (8000ec0 <HAL_PCD_MspInit+0x104>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d165      	bne.n	8000eb8 <HAL_PCD_MspInit+0xfc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000dec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000df0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000df2:	2301      	movs	r3, #1
 8000df4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 8000df6:	2318      	movs	r3, #24
 8000df8:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000dfe:	2304      	movs	r3, #4
 8000e00:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000e02:	2302      	movs	r3, #2
 8000e04:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000e06:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e0a:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000e10:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000e14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e18:	f107 0310 	add.w	r3, r7, #16
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f002 f9d1 	bl	80031c4 <HAL_RCCEx_PeriphCLKConfig>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8000e28:	f7ff fe74 	bl	8000b14 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000e2c:	f001 fa00 	bl	8002230 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e30:	4b24      	ldr	r3, [pc, #144]	; (8000ec4 <HAL_PCD_MspInit+0x108>)
 8000e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e36:	4a23      	ldr	r2, [pc, #140]	; (8000ec4 <HAL_PCD_MspInit+0x108>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e40:	4b20      	ldr	r3, [pc, #128]	; (8000ec4 <HAL_PCD_MspInit+0x108>)
 8000e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000e4e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000e52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e56:	2302      	movs	r3, #2
 8000e58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	2300      	movs	r3, #0
 8000e64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000e68:	230a      	movs	r3, #10
 8000e6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e72:	4619      	mov	r1, r3
 8000e74:	4814      	ldr	r0, [pc, #80]	; (8000ec8 <HAL_PCD_MspInit+0x10c>)
 8000e76:	f000 fe5b 	bl	8001b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e7e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e82:	2300      	movs	r3, #0
 8000e84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e92:	4619      	mov	r1, r3
 8000e94:	480c      	ldr	r0, [pc, #48]	; (8000ec8 <HAL_PCD_MspInit+0x10c>)
 8000e96:	f000 fe4b 	bl	8001b30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <HAL_PCD_MspInit+0x108>)
 8000e9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ea0:	4a08      	ldr	r2, [pc, #32]	; (8000ec4 <HAL_PCD_MspInit+0x108>)
 8000ea2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000ea6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_PCD_MspInit+0x108>)
 8000eac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000eb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000eb8:	bf00      	nop
 8000eba:	37e0      	adds	r7, #224	; 0xe0
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40080000 	.word	0x40080000
 8000ec4:	58024400 	.word	0x58024400
 8000ec8:	58020000 	.word	0x58020000

08000ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <NMI_Handler+0x4>

08000ed2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed6:	e7fe      	b.n	8000ed6 <HardFault_Handler+0x4>

08000ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <MemManage_Handler+0x4>

08000ede <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <BusFault_Handler+0x4>

08000ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <UsageFault_Handler+0x4>

08000eea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f18:	f000 f89e 	bl	8001058 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f58 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f24:	f7ff fb5a 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f28:	480c      	ldr	r0, [pc, #48]	; (8000f5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f2a:	490d      	ldr	r1, [pc, #52]	; (8000f60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f2c:	4a0d      	ldr	r2, [pc, #52]	; (8000f64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f30:	e002      	b.n	8000f38 <LoopCopyDataInit>

08000f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f36:	3304      	adds	r3, #4

08000f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f3c:	d3f9      	bcc.n	8000f32 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f40:	4c0a      	ldr	r4, [pc, #40]	; (8000f6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f44:	e001      	b.n	8000f4a <LoopFillZerobss>

08000f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f48:	3204      	adds	r2, #4

08000f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f4c:	d3fb      	bcc.n	8000f46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f4e:	f005 f81b 	bl	8005f88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f52:	f7ff fbd9 	bl	8000708 <main>
  bx  lr
 8000f56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f58:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f5c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f60:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000f64:	08006040 	.word	0x08006040
  ldr r2, =_sbss
 8000f68:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8000f6c:	2400077c 	.word	0x2400077c

08000f70 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f70:	e7fe      	b.n	8000f70 <ADC3_IRQHandler>
	...

08000f74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f7a:	2003      	movs	r0, #3
 8000f7c:	f000 f982 	bl	8001284 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f80:	f001 ff4a 	bl	8002e18 <HAL_RCC_GetSysClockFreq>
 8000f84:	4602      	mov	r2, r0
 8000f86:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <HAL_Init+0x68>)
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	0a1b      	lsrs	r3, r3, #8
 8000f8c:	f003 030f 	and.w	r3, r3, #15
 8000f90:	4913      	ldr	r1, [pc, #76]	; (8000fe0 <HAL_Init+0x6c>)
 8000f92:	5ccb      	ldrb	r3, [r1, r3]
 8000f94:	f003 031f 	and.w	r3, r3, #31
 8000f98:	fa22 f303 	lsr.w	r3, r2, r3
 8000f9c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f9e:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <HAL_Init+0x68>)
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	f003 030f 	and.w	r3, r3, #15
 8000fa6:	4a0e      	ldr	r2, [pc, #56]	; (8000fe0 <HAL_Init+0x6c>)
 8000fa8:	5cd3      	ldrb	r3, [r2, r3]
 8000faa:	f003 031f 	and.w	r3, r3, #31
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fb4:	4a0b      	ldr	r2, [pc, #44]	; (8000fe4 <HAL_Init+0x70>)
 8000fb6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fb8:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <HAL_Init+0x74>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f000 f814 	bl	8000fec <HAL_InitTick>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e002      	b.n	8000fd4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fce:	f7ff fda7 	bl	8000b20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd2:	2300      	movs	r3, #0
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	58024400 	.word	0x58024400
 8000fe0:	08005ff8 	.word	0x08005ff8
 8000fe4:	24000004 	.word	0x24000004
 8000fe8:	24000000 	.word	0x24000000

08000fec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ff4:	4b15      	ldr	r3, [pc, #84]	; (800104c <HAL_InitTick+0x60>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d101      	bne.n	8001000 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e021      	b.n	8001044 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001000:	4b13      	ldr	r3, [pc, #76]	; (8001050 <HAL_InitTick+0x64>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <HAL_InitTick+0x60>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	4619      	mov	r1, r3
 800100a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800100e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001012:	fbb2 f3f3 	udiv	r3, r2, r3
 8001016:	4618      	mov	r0, r3
 8001018:	f000 f959 	bl	80012ce <HAL_SYSTICK_Config>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e00e      	b.n	8001044 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2b0f      	cmp	r3, #15
 800102a:	d80a      	bhi.n	8001042 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800102c:	2200      	movs	r2, #0
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	f04f 30ff 	mov.w	r0, #4294967295
 8001034:	f000 f931 	bl	800129a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001038:	4a06      	ldr	r2, [pc, #24]	; (8001054 <HAL_InitTick+0x68>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800103e:	2300      	movs	r3, #0
 8001040:	e000      	b.n	8001044 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
}
 8001044:	4618      	mov	r0, r3
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	2400000c 	.word	0x2400000c
 8001050:	24000000 	.word	0x24000000
 8001054:	24000008 	.word	0x24000008

08001058 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_IncTick+0x20>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	461a      	mov	r2, r3
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_IncTick+0x24>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4413      	add	r3, r2
 8001068:	4a04      	ldr	r2, [pc, #16]	; (800107c <HAL_IncTick+0x24>)
 800106a:	6013      	str	r3, [r2, #0]
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	2400000c 	.word	0x2400000c
 800107c:	24000778 	.word	0x24000778

08001080 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  return uwTick;
 8001084:	4b03      	ldr	r3, [pc, #12]	; (8001094 <HAL_GetTick+0x14>)
 8001086:	681b      	ldr	r3, [r3, #0]
}
 8001088:	4618      	mov	r0, r3
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	24000778 	.word	0x24000778

08001098 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a0:	f7ff ffee 	bl	8001080 <HAL_GetTick>
 80010a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b0:	d005      	beq.n	80010be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010b2:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <HAL_Delay+0x44>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	461a      	mov	r2, r3
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4413      	add	r3, r2
 80010bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010be:	bf00      	nop
 80010c0:	f7ff ffde 	bl	8001080 <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d8f7      	bhi.n	80010c0 <HAL_Delay+0x28>
  {
  }
}
 80010d0:	bf00      	nop
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	2400000c 	.word	0x2400000c

080010e0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80010e4:	4b03      	ldr	r3, [pc, #12]	; (80010f4 <HAL_GetREVID+0x14>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	0c1b      	lsrs	r3, r3, #16
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	5c001000 	.word	0x5c001000

080010f8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001108:	4904      	ldr	r1, [pc, #16]	; (800111c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4313      	orrs	r3, r2
 800110e:	604b      	str	r3, [r1, #4]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	58000400 	.word	0x58000400

08001120 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001130:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <__NVIC_SetPriorityGrouping+0x40>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800113c:	4013      	ands	r3, r2
 800113e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <__NVIC_SetPriorityGrouping+0x44>)
 800114a:	4313      	orrs	r3, r2
 800114c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800114e:	4a04      	ldr	r2, [pc, #16]	; (8001160 <__NVIC_SetPriorityGrouping+0x40>)
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	60d3      	str	r3, [r2, #12]
}
 8001154:	bf00      	nop
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000ed00 	.word	0xe000ed00
 8001164:	05fa0000 	.word	0x05fa0000

08001168 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800116c:	4b04      	ldr	r3, [pc, #16]	; (8001180 <__NVIC_GetPriorityGrouping+0x18>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	0a1b      	lsrs	r3, r3, #8
 8001172:	f003 0307 	and.w	r3, r3, #7
}
 8001176:	4618      	mov	r0, r3
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	6039      	str	r1, [r7, #0]
 800118e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001190:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001194:	2b00      	cmp	r3, #0
 8001196:	db0a      	blt.n	80011ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	b2da      	uxtb	r2, r3
 800119c:	490c      	ldr	r1, [pc, #48]	; (80011d0 <__NVIC_SetPriority+0x4c>)
 800119e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011a2:	0112      	lsls	r2, r2, #4
 80011a4:	b2d2      	uxtb	r2, r2
 80011a6:	440b      	add	r3, r1
 80011a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011ac:	e00a      	b.n	80011c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4908      	ldr	r1, [pc, #32]	; (80011d4 <__NVIC_SetPriority+0x50>)
 80011b4:	88fb      	ldrh	r3, [r7, #6]
 80011b6:	f003 030f 	and.w	r3, r3, #15
 80011ba:	3b04      	subs	r3, #4
 80011bc:	0112      	lsls	r2, r2, #4
 80011be:	b2d2      	uxtb	r2, r2
 80011c0:	440b      	add	r3, r1
 80011c2:	761a      	strb	r2, [r3, #24]
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	e000e100 	.word	0xe000e100
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d8:	b480      	push	{r7}
 80011da:	b089      	sub	sp, #36	; 0x24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	f1c3 0307 	rsb	r3, r3, #7
 80011f2:	2b04      	cmp	r3, #4
 80011f4:	bf28      	it	cs
 80011f6:	2304      	movcs	r3, #4
 80011f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3304      	adds	r3, #4
 80011fe:	2b06      	cmp	r3, #6
 8001200:	d902      	bls.n	8001208 <NVIC_EncodePriority+0x30>
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3b03      	subs	r3, #3
 8001206:	e000      	b.n	800120a <NVIC_EncodePriority+0x32>
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	f04f 32ff 	mov.w	r2, #4294967295
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43da      	mvns	r2, r3
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	401a      	ands	r2, r3
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001220:	f04f 31ff 	mov.w	r1, #4294967295
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	fa01 f303 	lsl.w	r3, r1, r3
 800122a:	43d9      	mvns	r1, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001230:	4313      	orrs	r3, r2
         );
}
 8001232:	4618      	mov	r0, r3
 8001234:	3724      	adds	r7, #36	; 0x24
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
	...

08001240 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3b01      	subs	r3, #1
 800124c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001250:	d301      	bcc.n	8001256 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001252:	2301      	movs	r3, #1
 8001254:	e00f      	b.n	8001276 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001256:	4a0a      	ldr	r2, [pc, #40]	; (8001280 <SysTick_Config+0x40>)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3b01      	subs	r3, #1
 800125c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800125e:	210f      	movs	r1, #15
 8001260:	f04f 30ff 	mov.w	r0, #4294967295
 8001264:	f7ff ff8e 	bl	8001184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001268:	4b05      	ldr	r3, [pc, #20]	; (8001280 <SysTick_Config+0x40>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800126e:	4b04      	ldr	r3, [pc, #16]	; (8001280 <SysTick_Config+0x40>)
 8001270:	2207      	movs	r2, #7
 8001272:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	e000e010 	.word	0xe000e010

08001284 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f7ff ff47 	bl	8001120 <__NVIC_SetPriorityGrouping>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b086      	sub	sp, #24
 800129e:	af00      	add	r7, sp, #0
 80012a0:	4603      	mov	r3, r0
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	607a      	str	r2, [r7, #4]
 80012a6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012a8:	f7ff ff5e 	bl	8001168 <__NVIC_GetPriorityGrouping>
 80012ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	68b9      	ldr	r1, [r7, #8]
 80012b2:	6978      	ldr	r0, [r7, #20]
 80012b4:	f7ff ff90 	bl	80011d8 <NVIC_EncodePriority>
 80012b8:	4602      	mov	r2, r0
 80012ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012be:	4611      	mov	r1, r2
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff5f 	bl	8001184 <__NVIC_SetPriority>
}
 80012c6:	bf00      	nop
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff ffb2 	bl	8001240 <SysTick_Config>
 80012dc:	4603      	mov	r3, r0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e0cf      	b.n	800149a <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001300:	2b00      	cmp	r3, #0
 8001302:	d106      	bne.n	8001312 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2223      	movs	r2, #35	; 0x23
 8001308:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff fc21 	bl	8000b54 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001312:	4b64      	ldr	r3, [pc, #400]	; (80014a4 <HAL_ETH_Init+0x1bc>)
 8001314:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001318:	4a62      	ldr	r2, [pc, #392]	; (80014a4 <HAL_ETH_Init+0x1bc>)
 800131a:	f043 0302 	orr.w	r3, r3, #2
 800131e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001322:	4b60      	ldr	r3, [pc, #384]	; (80014a4 <HAL_ETH_Init+0x1bc>)
 8001324:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	7a1b      	ldrb	r3, [r3, #8]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d103      	bne.n	8001340 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001338:	2000      	movs	r0, #0
 800133a:	f7ff fedd 	bl	80010f8 <HAL_SYSCFG_ETHInterfaceSelect>
 800133e:	e003      	b.n	8001348 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001340:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001344:	f7ff fed8 	bl	80010f8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001348:	4b57      	ldr	r3, [pc, #348]	; (80014a8 <HAL_ETH_Init+0x1c0>)
 800134a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	6812      	ldr	r2, [r2, #0]
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001362:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001364:	f7ff fe8c 	bl	8001080 <HAL_GetTick>
 8001368:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800136a:	e011      	b.n	8001390 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800136c:	f7ff fe88 	bl	8001080 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800137a:	d909      	bls.n	8001390 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2204      	movs	r2, #4
 8001380:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	22e0      	movs	r2, #224	; 0xe0
 8001388:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e084      	b.n	800149a <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d1e4      	bne.n	800136c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f000 f886 	bl	80014b4 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80013a8:	f001 feb0 	bl	800310c <HAL_RCC_GetHCLKFreq>
 80013ac:	4603      	mov	r3, r0
 80013ae:	4a3f      	ldr	r2, [pc, #252]	; (80014ac <HAL_ETH_Init+0x1c4>)
 80013b0:	fba2 2303 	umull	r2, r3, r2, r3
 80013b4:	0c9a      	lsrs	r2, r3, #18
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	3a01      	subs	r2, #1
 80013bc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f000 fa71 	bl	80018a8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013ce:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80013d2:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	6812      	ldr	r2, [r2, #0]
 80013da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80013de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013e2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	695b      	ldr	r3, [r3, #20]
 80013ea:	f003 0303 	and.w	r3, r3, #3
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d009      	beq.n	8001406 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2201      	movs	r2, #1
 80013f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	22e0      	movs	r2, #224	; 0xe0
 80013fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e049      	b.n	800149a <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800140e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001412:	4b27      	ldr	r3, [pc, #156]	; (80014b0 <HAL_ETH_Init+0x1c8>)
 8001414:	4013      	ands	r3, r2
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	6952      	ldr	r2, [r2, #20]
 800141a:	0051      	lsls	r1, r2, #1
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	6812      	ldr	r2, [r2, #0]
 8001420:	430b      	orrs	r3, r1
 8001422:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001426:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 fad9 	bl	80019e2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f000 fb1f 	bl	8001a74 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	3305      	adds	r3, #5
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	021a      	lsls	r2, r3, #8
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	3304      	adds	r3, #4
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	4619      	mov	r1, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	430a      	orrs	r2, r1
 8001450:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	3303      	adds	r3, #3
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	061a      	lsls	r2, r3, #24
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	3302      	adds	r3, #2
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	041b      	lsls	r3, r3, #16
 8001468:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	3301      	adds	r3, #1
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001474:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001482:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001484:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2210      	movs	r2, #16
 8001494:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	58024400 	.word	0x58024400
 80014a8:	58000400 	.word	0x58000400
 80014ac:	431bde83 	.word	0x431bde83
 80014b0:	ffff8001 	.word	0xffff8001

080014b4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80014c4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80014cc:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80014ce:	f001 fe1d 	bl	800310c <HAL_RCC_GetHCLKFreq>
 80014d2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	4a1e      	ldr	r2, [pc, #120]	; (8001550 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d908      	bls.n	80014ee <HAL_ETH_SetMDIOClockRange+0x3a>
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	4a1d      	ldr	r2, [pc, #116]	; (8001554 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d804      	bhi.n	80014ee <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	e027      	b.n	800153e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	4a18      	ldr	r2, [pc, #96]	; (8001554 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d908      	bls.n	8001508 <HAL_ETH_SetMDIOClockRange+0x54>
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	4a17      	ldr	r2, [pc, #92]	; (8001558 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d204      	bcs.n	8001508 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	e01a      	b.n	800153e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	4a13      	ldr	r2, [pc, #76]	; (8001558 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d303      	bcc.n	8001518 <HAL_ETH_SetMDIOClockRange+0x64>
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	4a12      	ldr	r2, [pc, #72]	; (800155c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d911      	bls.n	800153c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	4a10      	ldr	r2, [pc, #64]	; (800155c <HAL_ETH_SetMDIOClockRange+0xa8>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d908      	bls.n	8001532 <HAL_ETH_SetMDIOClockRange+0x7e>
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	4a0f      	ldr	r2, [pc, #60]	; (8001560 <HAL_ETH_SetMDIOClockRange+0xac>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d804      	bhi.n	8001532 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	e005      	b.n	800153e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	e000      	b.n	800153e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800153c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001548:	bf00      	nop
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	01312cff 	.word	0x01312cff
 8001554:	02160ebf 	.word	0x02160ebf
 8001558:	03938700 	.word	0x03938700
 800155c:	05f5e0ff 	.word	0x05f5e0ff
 8001560:	08f0d17f 	.word	0x08f0d17f

08001564 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001576:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	791b      	ldrb	r3, [r3, #4]
 800157c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800157e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	7b1b      	ldrb	r3, [r3, #12]
 8001584:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001586:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	7b5b      	ldrb	r3, [r3, #13]
 800158c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800158e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	7b9b      	ldrb	r3, [r3, #14]
 8001594:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001596:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	7bdb      	ldrb	r3, [r3, #15]
 800159c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800159e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	7c12      	ldrb	r2, [r2, #16]
 80015a4:	2a00      	cmp	r2, #0
 80015a6:	d102      	bne.n	80015ae <ETH_SetMACConfig+0x4a>
 80015a8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80015ac:	e000      	b.n	80015b0 <ETH_SetMACConfig+0x4c>
 80015ae:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80015b0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	7c52      	ldrb	r2, [r2, #17]
 80015b6:	2a00      	cmp	r2, #0
 80015b8:	d102      	bne.n	80015c0 <ETH_SetMACConfig+0x5c>
 80015ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015be:	e000      	b.n	80015c2 <ETH_SetMACConfig+0x5e>
 80015c0:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80015c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	7c9b      	ldrb	r3, [r3, #18]
 80015c8:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80015ca:	431a      	orrs	r2, r3
               macconf->Speed |
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80015d0:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80015d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	7f1b      	ldrb	r3, [r3, #28]
 80015dc:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80015de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	7f5b      	ldrb	r3, [r3, #29]
 80015e4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80015e6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80015e8:	683a      	ldr	r2, [r7, #0]
 80015ea:	7f92      	ldrb	r2, [r2, #30]
 80015ec:	2a00      	cmp	r2, #0
 80015ee:	d102      	bne.n	80015f6 <ETH_SetMACConfig+0x92>
 80015f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015f4:	e000      	b.n	80015f8 <ETH_SetMACConfig+0x94>
 80015f6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80015f8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	7fdb      	ldrb	r3, [r3, #31]
 80015fe:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001600:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001602:	683a      	ldr	r2, [r7, #0]
 8001604:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001608:	2a00      	cmp	r2, #0
 800160a:	d102      	bne.n	8001612 <ETH_SetMACConfig+0xae>
 800160c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001610:	e000      	b.n	8001614 <ETH_SetMACConfig+0xb0>
 8001612:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001614:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800161a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001622:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001624:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800162a:	4313      	orrs	r3, r2
 800162c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4b56      	ldr	r3, [pc, #344]	; (8001790 <ETH_SetMACConfig+0x22c>)
 8001636:	4013      	ands	r3, r2
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	6812      	ldr	r2, [r2, #0]
 800163c:	68f9      	ldr	r1, [r7, #12]
 800163e:	430b      	orrs	r3, r1
 8001640:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001646:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800164e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001650:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001658:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800165a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001662:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001664:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800166c:	2a00      	cmp	r2, #0
 800166e:	d102      	bne.n	8001676 <ETH_SetMACConfig+0x112>
 8001670:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001674:	e000      	b.n	8001678 <ETH_SetMACConfig+0x114>
 8001676:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001678:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800167e:	4313      	orrs	r3, r2
 8001680:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	4b42      	ldr	r3, [pc, #264]	; (8001794 <ETH_SetMACConfig+0x230>)
 800168a:	4013      	ands	r3, r2
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	6812      	ldr	r2, [r2, #0]
 8001690:	68f9      	ldr	r1, [r7, #12]
 8001692:	430b      	orrs	r3, r1
 8001694:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800169c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80016a2:	4313      	orrs	r3, r2
 80016a4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	68da      	ldr	r2, [r3, #12]
 80016ac:	4b3a      	ldr	r3, [pc, #232]	; (8001798 <ETH_SetMACConfig+0x234>)
 80016ae:	4013      	ands	r3, r2
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	6812      	ldr	r2, [r2, #0]
 80016b4:	68f9      	ldr	r1, [r7, #12]
 80016b6:	430b      	orrs	r3, r1
 80016b8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80016c0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80016c6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80016ce:	2a00      	cmp	r2, #0
 80016d0:	d101      	bne.n	80016d6 <ETH_SetMACConfig+0x172>
 80016d2:	2280      	movs	r2, #128	; 0x80
 80016d4:	e000      	b.n	80016d8 <ETH_SetMACConfig+0x174>
 80016d6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80016d8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016de:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80016e0:	4313      	orrs	r3, r2
 80016e2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80016ea:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80016ee:	4013      	ands	r3, r2
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	6812      	ldr	r2, [r2, #0]
 80016f4:	68f9      	ldr	r1, [r7, #12]
 80016f6:	430b      	orrs	r3, r1
 80016f8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001700:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001708:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800170a:	4313      	orrs	r3, r2
 800170c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001716:	f023 0103 	bic.w	r1, r3, #3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	430a      	orrs	r2, r1
 8001722:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800172e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	430a      	orrs	r2, r1
 800173c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800174a:	2a00      	cmp	r2, #0
 800174c:	d101      	bne.n	8001752 <ETH_SetMACConfig+0x1ee>
 800174e:	2240      	movs	r2, #64	; 0x40
 8001750:	e000      	b.n	8001754 <ETH_SetMACConfig+0x1f0>
 8001752:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001754:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800175c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800175e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001766:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001768:	4313      	orrs	r3, r2
 800176a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001774:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	68fa      	ldr	r2, [r7, #12]
 800177e:	430a      	orrs	r2, r1
 8001780:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001784:	bf00      	nop
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	00048083 	.word	0x00048083
 8001794:	c0f88000 	.word	0xc0f88000
 8001798:	fffffef0 	.word	0xfffffef0

0800179c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	4b38      	ldr	r3, [pc, #224]	; (8001894 <ETH_SetDMAConfig+0xf8>)
 80017b2:	4013      	ands	r3, r2
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	6811      	ldr	r1, [r2, #0]
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	6812      	ldr	r2, [r2, #0]
 80017bc:	430b      	orrs	r3, r1
 80017be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017c2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	791b      	ldrb	r3, [r3, #4]
 80017c8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80017ce:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	7b1b      	ldrb	r3, [r3, #12]
 80017d4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80017d6:	4313      	orrs	r3, r2
 80017d8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017e2:	685a      	ldr	r2, [r3, #4]
 80017e4:	4b2c      	ldr	r3, [pc, #176]	; (8001898 <ETH_SetDMAConfig+0xfc>)
 80017e6:	4013      	ands	r3, r2
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	6812      	ldr	r2, [r2, #0]
 80017ec:	68f9      	ldr	r1, [r7, #12]
 80017ee:	430b      	orrs	r3, r1
 80017f0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017f4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	7b5b      	ldrb	r3, [r3, #13]
 80017fa:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001800:	4313      	orrs	r3, r2
 8001802:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800180c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001810:	4b22      	ldr	r3, [pc, #136]	; (800189c <ETH_SetDMAConfig+0x100>)
 8001812:	4013      	ands	r3, r2
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	6812      	ldr	r2, [r2, #0]
 8001818:	68f9      	ldr	r1, [r7, #12]
 800181a:	430b      	orrs	r3, r1
 800181c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001820:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	7d1b      	ldrb	r3, [r3, #20]
 800182c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800182e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	7f5b      	ldrb	r3, [r3, #29]
 8001834:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001836:	4313      	orrs	r3, r2
 8001838:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001842:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001846:	4b16      	ldr	r3, [pc, #88]	; (80018a0 <ETH_SetDMAConfig+0x104>)
 8001848:	4013      	ands	r3, r2
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	6812      	ldr	r2, [r2, #0]
 800184e:	68f9      	ldr	r1, [r7, #12]
 8001850:	430b      	orrs	r3, r1
 8001852:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001856:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	7f1b      	ldrb	r3, [r3, #28]
 800185e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001864:	4313      	orrs	r3, r2
 8001866:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001870:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001874:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <ETH_SetDMAConfig+0x108>)
 8001876:	4013      	ands	r3, r2
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	6812      	ldr	r2, [r2, #0]
 800187c:	68f9      	ldr	r1, [r7, #12]
 800187e:	430b      	orrs	r3, r1
 8001880:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001884:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001888:	bf00      	nop
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	ffff87fd 	.word	0xffff87fd
 8001898:	ffff2ffe 	.word	0xffff2ffe
 800189c:	fffec000 	.word	0xfffec000
 80018a0:	ffc0efef 	.word	0xffc0efef
 80018a4:	7fc0ffff 	.word	0x7fc0ffff

080018a8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b0a4      	sub	sp, #144	; 0x90
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80018b0:	2301      	movs	r3, #1
 80018b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80018b6:	2300      	movs	r3, #0
 80018b8:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80018ba:	2300      	movs	r3, #0
 80018bc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80018c0:	2300      	movs	r3, #0
 80018c2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80018c6:	2301      	movs	r3, #1
 80018c8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80018cc:	2301      	movs	r3, #1
 80018ce:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80018d2:	2301      	movs	r3, #1
 80018d4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80018d8:	2300      	movs	r3, #0
 80018da:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80018de:	2301      	movs	r3, #1
 80018e0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80018e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018e8:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80018ea:	2300      	movs	r3, #0
 80018ec:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80018f0:	2300      	movs	r3, #0
 80018f2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80018f4:	2300      	movs	r3, #0
 80018f6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001900:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001904:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001906:	2300      	movs	r3, #0
 8001908:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800190c:	2300      	movs	r3, #0
 800190e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001910:	2301      	movs	r3, #1
 8001912:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001916:	2300      	movs	r3, #0
 8001918:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800191c:	2300      	movs	r3, #0
 800191e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001922:	2300      	movs	r3, #0
 8001924:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001926:	2300      	movs	r3, #0
 8001928:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800192a:	2300      	movs	r3, #0
 800192c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800192e:	2300      	movs	r3, #0
 8001930:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001934:	2300      	movs	r3, #0
 8001936:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800193a:	2301      	movs	r3, #1
 800193c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001940:	2320      	movs	r3, #32
 8001942:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001946:	2301      	movs	r3, #1
 8001948:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800194c:	2300      	movs	r3, #0
 800194e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001952:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001956:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001958:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800195c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800195e:	2300      	movs	r3, #0
 8001960:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001964:	2302      	movs	r3, #2
 8001966:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800196a:	2300      	movs	r3, #0
 800196c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001970:	2300      	movs	r3, #0
 8001972:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001976:	2300      	movs	r3, #0
 8001978:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800197c:	2301      	movs	r3, #1
 800197e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001982:	2300      	movs	r3, #0
 8001984:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001986:	2301      	movs	r3, #1
 8001988:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800198c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001990:	4619      	mov	r1, r3
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7ff fde6 	bl	8001564 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001998:	2301      	movs	r3, #1
 800199a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800199c:	2301      	movs	r3, #1
 800199e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80019a0:	2300      	movs	r3, #0
 80019a2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80019a4:	2300      	movs	r3, #0
 80019a6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80019aa:	2300      	movs	r3, #0
 80019ac:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80019ae:	2300      	movs	r3, #0
 80019b0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80019b2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80019b6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80019b8:	2300      	movs	r3, #0
 80019ba:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80019bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80019c0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80019c2:	2300      	movs	r3, #0
 80019c4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80019c8:	f44f 7306 	mov.w	r3, #536	; 0x218
 80019cc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80019ce:	f107 0308 	add.w	r3, r7, #8
 80019d2:	4619      	mov	r1, r3
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f7ff fee1 	bl	800179c <ETH_SetDMAConfig>
}
 80019da:	bf00      	nop
 80019dc:	3790      	adds	r7, #144	; 0x90
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b085      	sub	sp, #20
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80019ea:	2300      	movs	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	e01d      	b.n	8001a2c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68d9      	ldr	r1, [r3, #12]
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	4613      	mov	r3, r2
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	4413      	add	r3, r2
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	440b      	add	r3, r1
 8001a00:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	2200      	movs	r2, #0
 8001a12:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	2200      	movs	r2, #0
 8001a18:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001a1a:	68b9      	ldr	r1, [r7, #8]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	3206      	adds	r2, #6
 8001a22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2b03      	cmp	r3, #3
 8001a30:	d9de      	bls.n	80019f0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a40:	461a      	mov	r2, r3
 8001a42:	2303      	movs	r3, #3
 8001a44:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68da      	ldr	r2, [r3, #12]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a54:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	68da      	ldr	r2, [r3, #12]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a64:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001a68:	bf00      	nop
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	e023      	b.n	8001aca <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6919      	ldr	r1, [r3, #16]
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	4413      	add	r3, r2
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	440b      	add	r3, r1
 8001a92:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001ab8:	68b9      	ldr	r1, [r7, #8]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	3212      	adds	r2, #18
 8001ac0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2b03      	cmp	r3, #3
 8001ace:	d9d8      	bls.n	8001a82 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001af6:	461a      	mov	r2, r3
 8001af8:	2303      	movs	r3, #3
 8001afa:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	691a      	ldr	r2, [r3, #16]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b0a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b1e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001b22:	bf00      	nop
 8001b24:	3714      	adds	r7, #20
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
	...

08001b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b089      	sub	sp, #36	; 0x24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001b3e:	4b89      	ldr	r3, [pc, #548]	; (8001d64 <HAL_GPIO_Init+0x234>)
 8001b40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b42:	e194      	b.n	8001e6e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	2101      	movs	r1, #1
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b50:	4013      	ands	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 8186 	beq.w	8001e68 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 0303 	and.w	r3, r3, #3
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d005      	beq.n	8001b74 <HAL_GPIO_Init+0x44>
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 0303 	and.w	r3, r3, #3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d130      	bne.n	8001bd6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	2203      	movs	r2, #3
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	43db      	mvns	r3, r3
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	68da      	ldr	r2, [r3, #12]
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001baa:	2201      	movs	r2, #1
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	091b      	lsrs	r3, r3, #4
 8001bc0:	f003 0201 	and.w	r2, r3, #1
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f003 0303 	and.w	r3, r3, #3
 8001bde:	2b03      	cmp	r3, #3
 8001be0:	d017      	beq.n	8001c12 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	2203      	movs	r2, #3
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	689a      	ldr	r2, [r3, #8]
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f003 0303 	and.w	r3, r3, #3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d123      	bne.n	8001c66 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	08da      	lsrs	r2, r3, #3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	3208      	adds	r2, #8
 8001c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	220f      	movs	r2, #15
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	691a      	ldr	r2, [r3, #16]
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	08da      	lsrs	r2, r3, #3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3208      	adds	r2, #8
 8001c60:	69b9      	ldr	r1, [r7, #24]
 8001c62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	2203      	movs	r2, #3
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	43db      	mvns	r3, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f003 0203 	and.w	r2, r3, #3
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f000 80e0 	beq.w	8001e68 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca8:	4b2f      	ldr	r3, [pc, #188]	; (8001d68 <HAL_GPIO_Init+0x238>)
 8001caa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cae:	4a2e      	ldr	r2, [pc, #184]	; (8001d68 <HAL_GPIO_Init+0x238>)
 8001cb0:	f043 0302 	orr.w	r3, r3, #2
 8001cb4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001cb8:	4b2b      	ldr	r3, [pc, #172]	; (8001d68 <HAL_GPIO_Init+0x238>)
 8001cba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cc6:	4a29      	ldr	r2, [pc, #164]	; (8001d6c <HAL_GPIO_Init+0x23c>)
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	089b      	lsrs	r3, r3, #2
 8001ccc:	3302      	adds	r3, #2
 8001cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	220f      	movs	r2, #15
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a20      	ldr	r2, [pc, #128]	; (8001d70 <HAL_GPIO_Init+0x240>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d052      	beq.n	8001d98 <HAL_GPIO_Init+0x268>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a1f      	ldr	r2, [pc, #124]	; (8001d74 <HAL_GPIO_Init+0x244>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d031      	beq.n	8001d5e <HAL_GPIO_Init+0x22e>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a1e      	ldr	r2, [pc, #120]	; (8001d78 <HAL_GPIO_Init+0x248>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d02b      	beq.n	8001d5a <HAL_GPIO_Init+0x22a>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a1d      	ldr	r2, [pc, #116]	; (8001d7c <HAL_GPIO_Init+0x24c>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d025      	beq.n	8001d56 <HAL_GPIO_Init+0x226>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a1c      	ldr	r2, [pc, #112]	; (8001d80 <HAL_GPIO_Init+0x250>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d01f      	beq.n	8001d52 <HAL_GPIO_Init+0x222>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a1b      	ldr	r2, [pc, #108]	; (8001d84 <HAL_GPIO_Init+0x254>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d019      	beq.n	8001d4e <HAL_GPIO_Init+0x21e>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a1a      	ldr	r2, [pc, #104]	; (8001d88 <HAL_GPIO_Init+0x258>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d013      	beq.n	8001d4a <HAL_GPIO_Init+0x21a>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a19      	ldr	r2, [pc, #100]	; (8001d8c <HAL_GPIO_Init+0x25c>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d00d      	beq.n	8001d46 <HAL_GPIO_Init+0x216>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a18      	ldr	r2, [pc, #96]	; (8001d90 <HAL_GPIO_Init+0x260>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d007      	beq.n	8001d42 <HAL_GPIO_Init+0x212>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a17      	ldr	r2, [pc, #92]	; (8001d94 <HAL_GPIO_Init+0x264>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d101      	bne.n	8001d3e <HAL_GPIO_Init+0x20e>
 8001d3a:	2309      	movs	r3, #9
 8001d3c:	e02d      	b.n	8001d9a <HAL_GPIO_Init+0x26a>
 8001d3e:	230a      	movs	r3, #10
 8001d40:	e02b      	b.n	8001d9a <HAL_GPIO_Init+0x26a>
 8001d42:	2308      	movs	r3, #8
 8001d44:	e029      	b.n	8001d9a <HAL_GPIO_Init+0x26a>
 8001d46:	2307      	movs	r3, #7
 8001d48:	e027      	b.n	8001d9a <HAL_GPIO_Init+0x26a>
 8001d4a:	2306      	movs	r3, #6
 8001d4c:	e025      	b.n	8001d9a <HAL_GPIO_Init+0x26a>
 8001d4e:	2305      	movs	r3, #5
 8001d50:	e023      	b.n	8001d9a <HAL_GPIO_Init+0x26a>
 8001d52:	2304      	movs	r3, #4
 8001d54:	e021      	b.n	8001d9a <HAL_GPIO_Init+0x26a>
 8001d56:	2303      	movs	r3, #3
 8001d58:	e01f      	b.n	8001d9a <HAL_GPIO_Init+0x26a>
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	e01d      	b.n	8001d9a <HAL_GPIO_Init+0x26a>
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e01b      	b.n	8001d9a <HAL_GPIO_Init+0x26a>
 8001d62:	bf00      	nop
 8001d64:	58000080 	.word	0x58000080
 8001d68:	58024400 	.word	0x58024400
 8001d6c:	58000400 	.word	0x58000400
 8001d70:	58020000 	.word	0x58020000
 8001d74:	58020400 	.word	0x58020400
 8001d78:	58020800 	.word	0x58020800
 8001d7c:	58020c00 	.word	0x58020c00
 8001d80:	58021000 	.word	0x58021000
 8001d84:	58021400 	.word	0x58021400
 8001d88:	58021800 	.word	0x58021800
 8001d8c:	58021c00 	.word	0x58021c00
 8001d90:	58022000 	.word	0x58022000
 8001d94:	58022400 	.word	0x58022400
 8001d98:	2300      	movs	r3, #0
 8001d9a:	69fa      	ldr	r2, [r7, #28]
 8001d9c:	f002 0203 	and.w	r2, r2, #3
 8001da0:	0092      	lsls	r2, r2, #2
 8001da2:	4093      	lsls	r3, r2
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001daa:	4938      	ldr	r1, [pc, #224]	; (8001e8c <HAL_GPIO_Init+0x35c>)
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	089b      	lsrs	r3, r3, #2
 8001db0:	3302      	adds	r3, #2
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001dde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	43db      	mvns	r3, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d003      	beq.n	8001e0c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001e0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4013      	ands	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d003      	beq.n	8001e38 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	43db      	mvns	r3, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	fa22 f303 	lsr.w	r3, r2, r3
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f47f ae63 	bne.w	8001b44 <HAL_GPIO_Init+0x14>
  }
}
 8001e7e:	bf00      	nop
 8001e80:	bf00      	nop
 8001e82:	3724      	adds	r7, #36	; 0x24
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	58000400 	.word	0x58000400

08001e90 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001e98:	4a08      	ldr	r2, [pc, #32]	; (8001ebc <HAL_HSEM_FastTake+0x2c>)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	3320      	adds	r3, #32
 8001e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea2:	4a07      	ldr	r2, [pc, #28]	; (8001ec0 <HAL_HSEM_FastTake+0x30>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d101      	bne.n	8001eac <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	e000      	b.n	8001eae <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	58026400 	.word	0x58026400
 8001ec0:	80000300 	.word	0x80000300

08001ec4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001ece:	4906      	ldr	r1, [pc, #24]	; (8001ee8 <HAL_HSEM_Release+0x24>)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	58026400 	.word	0x58026400

08001eec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eee:	b08f      	sub	sp, #60	; 0x3c
 8001ef0:	af0a      	add	r7, sp, #40	; 0x28
 8001ef2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e116      	b.n	800212c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d106      	bne.n	8001f1e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7fe ff4f 	bl	8000dbc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2203      	movs	r2, #3
 8001f22:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d102      	bne.n	8001f38 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f003 fd87 	bl	8005a50 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	603b      	str	r3, [r7, #0]
 8001f48:	687e      	ldr	r6, [r7, #4]
 8001f4a:	466d      	mov	r5, sp
 8001f4c:	f106 0410 	add.w	r4, r6, #16
 8001f50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f58:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f5c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f60:	1d33      	adds	r3, r6, #4
 8001f62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f64:	6838      	ldr	r0, [r7, #0]
 8001f66:	f003 fd05 	bl	8005974 <USB_CoreInit>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d005      	beq.n	8001f7c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2202      	movs	r2, #2
 8001f74:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e0d7      	b.n	800212c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2100      	movs	r1, #0
 8001f82:	4618      	mov	r0, r3
 8001f84:	f003 fd75 	bl	8005a72 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f88:	2300      	movs	r3, #0
 8001f8a:	73fb      	strb	r3, [r7, #15]
 8001f8c:	e04a      	b.n	8002024 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f8e:	7bfa      	ldrb	r2, [r7, #15]
 8001f90:	6879      	ldr	r1, [r7, #4]
 8001f92:	4613      	mov	r3, r2
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	4413      	add	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	440b      	add	r3, r1
 8001f9c:	333d      	adds	r3, #61	; 0x3d
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fa2:	7bfa      	ldrb	r2, [r7, #15]
 8001fa4:	6879      	ldr	r1, [r7, #4]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	4413      	add	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	440b      	add	r3, r1
 8001fb0:	333c      	adds	r3, #60	; 0x3c
 8001fb2:	7bfa      	ldrb	r2, [r7, #15]
 8001fb4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fb6:	7bfa      	ldrb	r2, [r7, #15]
 8001fb8:	7bfb      	ldrb	r3, [r7, #15]
 8001fba:	b298      	uxth	r0, r3
 8001fbc:	6879      	ldr	r1, [r7, #4]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	4413      	add	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	440b      	add	r3, r1
 8001fc8:	3344      	adds	r3, #68	; 0x44
 8001fca:	4602      	mov	r2, r0
 8001fcc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fce:	7bfa      	ldrb	r2, [r7, #15]
 8001fd0:	6879      	ldr	r1, [r7, #4]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	4413      	add	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	440b      	add	r3, r1
 8001fdc:	3340      	adds	r3, #64	; 0x40
 8001fde:	2200      	movs	r2, #0
 8001fe0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fe2:	7bfa      	ldrb	r2, [r7, #15]
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	4413      	add	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	440b      	add	r3, r1
 8001ff0:	3348      	adds	r3, #72	; 0x48
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ff6:	7bfa      	ldrb	r2, [r7, #15]
 8001ff8:	6879      	ldr	r1, [r7, #4]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	4413      	add	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	440b      	add	r3, r1
 8002004:	334c      	adds	r3, #76	; 0x4c
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800200a:	7bfa      	ldrb	r2, [r7, #15]
 800200c:	6879      	ldr	r1, [r7, #4]
 800200e:	4613      	mov	r3, r2
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	4413      	add	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	440b      	add	r3, r1
 8002018:	3354      	adds	r3, #84	; 0x54
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800201e:	7bfb      	ldrb	r3, [r7, #15]
 8002020:	3301      	adds	r3, #1
 8002022:	73fb      	strb	r3, [r7, #15]
 8002024:	7bfa      	ldrb	r2, [r7, #15]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	429a      	cmp	r2, r3
 800202c:	d3af      	bcc.n	8001f8e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800202e:	2300      	movs	r3, #0
 8002030:	73fb      	strb	r3, [r7, #15]
 8002032:	e044      	b.n	80020be <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002034:	7bfa      	ldrb	r2, [r7, #15]
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	4613      	mov	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	4413      	add	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	440b      	add	r3, r1
 8002042:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002046:	2200      	movs	r2, #0
 8002048:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800204a:	7bfa      	ldrb	r2, [r7, #15]
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	4613      	mov	r3, r2
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	4413      	add	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	440b      	add	r3, r1
 8002058:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800205c:	7bfa      	ldrb	r2, [r7, #15]
 800205e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002060:	7bfa      	ldrb	r2, [r7, #15]
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	4613      	mov	r3, r2
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	4413      	add	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	440b      	add	r3, r1
 800206e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002072:	2200      	movs	r2, #0
 8002074:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002076:	7bfa      	ldrb	r2, [r7, #15]
 8002078:	6879      	ldr	r1, [r7, #4]
 800207a:	4613      	mov	r3, r2
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	4413      	add	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	440b      	add	r3, r1
 8002084:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800208c:	7bfa      	ldrb	r2, [r7, #15]
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	4613      	mov	r3, r2
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	4413      	add	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	440b      	add	r3, r1
 800209a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020a2:	7bfa      	ldrb	r2, [r7, #15]
 80020a4:	6879      	ldr	r1, [r7, #4]
 80020a6:	4613      	mov	r3, r2
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	4413      	add	r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	440b      	add	r3, r1
 80020b0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020b8:	7bfb      	ldrb	r3, [r7, #15]
 80020ba:	3301      	adds	r3, #1
 80020bc:	73fb      	strb	r3, [r7, #15]
 80020be:	7bfa      	ldrb	r2, [r7, #15]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d3b5      	bcc.n	8002034 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	603b      	str	r3, [r7, #0]
 80020ce:	687e      	ldr	r6, [r7, #4]
 80020d0:	466d      	mov	r5, sp
 80020d2:	f106 0410 	add.w	r4, r6, #16
 80020d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80020e6:	1d33      	adds	r3, r6, #4
 80020e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020ea:	6838      	ldr	r0, [r7, #0]
 80020ec:	f003 fd0e 	bl	8005b0c <USB_DevInit>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d005      	beq.n	8002102 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2202      	movs	r2, #2
 80020fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e014      	b.n	800212c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	2b01      	cmp	r3, #1
 8002118:	d102      	bne.n	8002120 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 f80a 	bl	8002134 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f003 fecc 	bl	8005ec2 <USB_DevDisconnect>

  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002134 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2201      	movs	r2, #1
 8002146:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002162:	4b05      	ldr	r3, [pc, #20]	; (8002178 <HAL_PCDEx_ActivateLPM+0x44>)
 8002164:	4313      	orrs	r3, r2
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	10000003 	.word	0x10000003

0800217c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002184:	4b29      	ldr	r3, [pc, #164]	; (800222c <HAL_PWREx_ConfigSupply+0xb0>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	2b06      	cmp	r3, #6
 800218e:	d00a      	beq.n	80021a6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002190:	4b26      	ldr	r3, [pc, #152]	; (800222c <HAL_PWREx_ConfigSupply+0xb0>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	429a      	cmp	r2, r3
 800219c:	d001      	beq.n	80021a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e040      	b.n	8002224 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80021a2:	2300      	movs	r3, #0
 80021a4:	e03e      	b.n	8002224 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80021a6:	4b21      	ldr	r3, [pc, #132]	; (800222c <HAL_PWREx_ConfigSupply+0xb0>)
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80021ae:	491f      	ldr	r1, [pc, #124]	; (800222c <HAL_PWREx_ConfigSupply+0xb0>)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80021b6:	f7fe ff63 	bl	8001080 <HAL_GetTick>
 80021ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80021bc:	e009      	b.n	80021d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80021be:	f7fe ff5f 	bl	8001080 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021cc:	d901      	bls.n	80021d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e028      	b.n	8002224 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80021d2:	4b16      	ldr	r3, [pc, #88]	; (800222c <HAL_PWREx_ConfigSupply+0xb0>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021de:	d1ee      	bne.n	80021be <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b1e      	cmp	r3, #30
 80021e4:	d008      	beq.n	80021f8 <HAL_PWREx_ConfigSupply+0x7c>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b2e      	cmp	r3, #46	; 0x2e
 80021ea:	d005      	beq.n	80021f8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b1d      	cmp	r3, #29
 80021f0:	d002      	beq.n	80021f8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b2d      	cmp	r3, #45	; 0x2d
 80021f6:	d114      	bne.n	8002222 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80021f8:	f7fe ff42 	bl	8001080 <HAL_GetTick>
 80021fc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80021fe:	e009      	b.n	8002214 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002200:	f7fe ff3e 	bl	8001080 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800220e:	d901      	bls.n	8002214 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e007      	b.n	8002224 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002214:	4b05      	ldr	r3, [pc, #20]	; (800222c <HAL_PWREx_ConfigSupply+0xb0>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800221c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002220:	d1ee      	bne.n	8002200 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	58024800 	.word	0x58024800

08002230 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002234:	4b05      	ldr	r3, [pc, #20]	; (800224c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	4a04      	ldr	r2, [pc, #16]	; (800224c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800223a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800223e:	60d3      	str	r3, [r2, #12]
}
 8002240:	bf00      	nop
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	58024800 	.word	0x58024800

08002250 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b08c      	sub	sp, #48	; 0x30
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d102      	bne.n	8002264 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	f000 bc1d 	b.w	8002a9e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 8087 	beq.w	8002380 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002272:	4b99      	ldr	r3, [pc, #612]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800227a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800227c:	4b96      	ldr	r3, [pc, #600]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 800227e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002280:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002284:	2b10      	cmp	r3, #16
 8002286:	d007      	beq.n	8002298 <HAL_RCC_OscConfig+0x48>
 8002288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800228a:	2b18      	cmp	r3, #24
 800228c:	d110      	bne.n	80022b0 <HAL_RCC_OscConfig+0x60>
 800228e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002290:	f003 0303 	and.w	r3, r3, #3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d10b      	bne.n	80022b0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002298:	4b8f      	ldr	r3, [pc, #572]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d06c      	beq.n	800237e <HAL_RCC_OscConfig+0x12e>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d168      	bne.n	800237e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e3f6      	b.n	8002a9e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b8:	d106      	bne.n	80022c8 <HAL_RCC_OscConfig+0x78>
 80022ba:	4b87      	ldr	r3, [pc, #540]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a86      	ldr	r2, [pc, #536]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 80022c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c4:	6013      	str	r3, [r2, #0]
 80022c6:	e02e      	b.n	8002326 <HAL_RCC_OscConfig+0xd6>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10c      	bne.n	80022ea <HAL_RCC_OscConfig+0x9a>
 80022d0:	4b81      	ldr	r3, [pc, #516]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a80      	ldr	r2, [pc, #512]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 80022d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022da:	6013      	str	r3, [r2, #0]
 80022dc:	4b7e      	ldr	r3, [pc, #504]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a7d      	ldr	r2, [pc, #500]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 80022e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022e6:	6013      	str	r3, [r2, #0]
 80022e8:	e01d      	b.n	8002326 <HAL_RCC_OscConfig+0xd6>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022f2:	d10c      	bne.n	800230e <HAL_RCC_OscConfig+0xbe>
 80022f4:	4b78      	ldr	r3, [pc, #480]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a77      	ldr	r2, [pc, #476]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 80022fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022fe:	6013      	str	r3, [r2, #0]
 8002300:	4b75      	ldr	r3, [pc, #468]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a74      	ldr	r2, [pc, #464]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 8002306:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800230a:	6013      	str	r3, [r2, #0]
 800230c:	e00b      	b.n	8002326 <HAL_RCC_OscConfig+0xd6>
 800230e:	4b72      	ldr	r3, [pc, #456]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a71      	ldr	r2, [pc, #452]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 8002314:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002318:	6013      	str	r3, [r2, #0]
 800231a:	4b6f      	ldr	r3, [pc, #444]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a6e      	ldr	r2, [pc, #440]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 8002320:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002324:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d013      	beq.n	8002356 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232e:	f7fe fea7 	bl	8001080 <HAL_GetTick>
 8002332:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002334:	e008      	b.n	8002348 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002336:	f7fe fea3 	bl	8001080 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b64      	cmp	r3, #100	; 0x64
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e3aa      	b.n	8002a9e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002348:	4b63      	ldr	r3, [pc, #396]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d0f0      	beq.n	8002336 <HAL_RCC_OscConfig+0xe6>
 8002354:	e014      	b.n	8002380 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002356:	f7fe fe93 	bl	8001080 <HAL_GetTick>
 800235a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800235e:	f7fe fe8f 	bl	8001080 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b64      	cmp	r3, #100	; 0x64
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e396      	b.n	8002a9e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002370:	4b59      	ldr	r3, [pc, #356]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1f0      	bne.n	800235e <HAL_RCC_OscConfig+0x10e>
 800237c:	e000      	b.n	8002380 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800237e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 80cb 	beq.w	8002524 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800238e:	4b52      	ldr	r3, [pc, #328]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002396:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002398:	4b4f      	ldr	r3, [pc, #316]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 800239a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800239e:	6a3b      	ldr	r3, [r7, #32]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d007      	beq.n	80023b4 <HAL_RCC_OscConfig+0x164>
 80023a4:	6a3b      	ldr	r3, [r7, #32]
 80023a6:	2b18      	cmp	r3, #24
 80023a8:	d156      	bne.n	8002458 <HAL_RCC_OscConfig+0x208>
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	f003 0303 	and.w	r3, r3, #3
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d151      	bne.n	8002458 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023b4:	4b48      	ldr	r3, [pc, #288]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d005      	beq.n	80023cc <HAL_RCC_OscConfig+0x17c>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e368      	b.n	8002a9e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80023cc:	4b42      	ldr	r3, [pc, #264]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f023 0219 	bic.w	r2, r3, #25
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	493f      	ldr	r1, [pc, #252]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023de:	f7fe fe4f 	bl	8001080 <HAL_GetTick>
 80023e2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023e4:	e008      	b.n	80023f8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023e6:	f7fe fe4b 	bl	8001080 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e352      	b.n	8002a9e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023f8:	4b37      	ldr	r3, [pc, #220]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	2b00      	cmp	r3, #0
 8002402:	d0f0      	beq.n	80023e6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002404:	f7fe fe6c 	bl	80010e0 <HAL_GetREVID>
 8002408:	4603      	mov	r3, r0
 800240a:	f241 0203 	movw	r2, #4099	; 0x1003
 800240e:	4293      	cmp	r3, r2
 8002410:	d817      	bhi.n	8002442 <HAL_RCC_OscConfig+0x1f2>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	2b40      	cmp	r3, #64	; 0x40
 8002418:	d108      	bne.n	800242c <HAL_RCC_OscConfig+0x1dc>
 800241a:	4b2f      	ldr	r3, [pc, #188]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002422:	4a2d      	ldr	r2, [pc, #180]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 8002424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002428:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800242a:	e07b      	b.n	8002524 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800242c:	4b2a      	ldr	r3, [pc, #168]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	031b      	lsls	r3, r3, #12
 800243a:	4927      	ldr	r1, [pc, #156]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 800243c:	4313      	orrs	r3, r2
 800243e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002440:	e070      	b.n	8002524 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002442:	4b25      	ldr	r3, [pc, #148]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	061b      	lsls	r3, r3, #24
 8002450:	4921      	ldr	r1, [pc, #132]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 8002452:	4313      	orrs	r3, r2
 8002454:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002456:	e065      	b.n	8002524 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d048      	beq.n	80024f2 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002460:	4b1d      	ldr	r3, [pc, #116]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f023 0219 	bic.w	r2, r3, #25
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	491a      	ldr	r1, [pc, #104]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 800246e:	4313      	orrs	r3, r2
 8002470:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002472:	f7fe fe05 	bl	8001080 <HAL_GetTick>
 8002476:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800247a:	f7fe fe01 	bl	8001080 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e308      	b.n	8002a9e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800248c:	4b12      	ldr	r3, [pc, #72]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0f0      	beq.n	800247a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002498:	f7fe fe22 	bl	80010e0 <HAL_GetREVID>
 800249c:	4603      	mov	r3, r0
 800249e:	f241 0203 	movw	r2, #4099	; 0x1003
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d81a      	bhi.n	80024dc <HAL_RCC_OscConfig+0x28c>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	2b40      	cmp	r3, #64	; 0x40
 80024ac:	d108      	bne.n	80024c0 <HAL_RCC_OscConfig+0x270>
 80024ae:	4b0a      	ldr	r3, [pc, #40]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80024b6:	4a08      	ldr	r2, [pc, #32]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 80024b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024bc:	6053      	str	r3, [r2, #4]
 80024be:	e031      	b.n	8002524 <HAL_RCC_OscConfig+0x2d4>
 80024c0:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	031b      	lsls	r3, r3, #12
 80024ce:	4902      	ldr	r1, [pc, #8]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	604b      	str	r3, [r1, #4]
 80024d4:	e026      	b.n	8002524 <HAL_RCC_OscConfig+0x2d4>
 80024d6:	bf00      	nop
 80024d8:	58024400 	.word	0x58024400
 80024dc:	4b9a      	ldr	r3, [pc, #616]	; (8002748 <HAL_RCC_OscConfig+0x4f8>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	061b      	lsls	r3, r3, #24
 80024ea:	4997      	ldr	r1, [pc, #604]	; (8002748 <HAL_RCC_OscConfig+0x4f8>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	604b      	str	r3, [r1, #4]
 80024f0:	e018      	b.n	8002524 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024f2:	4b95      	ldr	r3, [pc, #596]	; (8002748 <HAL_RCC_OscConfig+0x4f8>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a94      	ldr	r2, [pc, #592]	; (8002748 <HAL_RCC_OscConfig+0x4f8>)
 80024f8:	f023 0301 	bic.w	r3, r3, #1
 80024fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fe:	f7fe fdbf 	bl	8001080 <HAL_GetTick>
 8002502:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002504:	e008      	b.n	8002518 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002506:	f7fe fdbb 	bl	8001080 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e2c2      	b.n	8002a9e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002518:	4b8b      	ldr	r3, [pc, #556]	; (8002748 <HAL_RCC_OscConfig+0x4f8>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1f0      	bne.n	8002506 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0310 	and.w	r3, r3, #16
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 80a9 	beq.w	8002684 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002532:	4b85      	ldr	r3, [pc, #532]	; (8002748 <HAL_RCC_OscConfig+0x4f8>)
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800253a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800253c:	4b82      	ldr	r3, [pc, #520]	; (8002748 <HAL_RCC_OscConfig+0x4f8>)
 800253e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002540:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	2b08      	cmp	r3, #8
 8002546:	d007      	beq.n	8002558 <HAL_RCC_OscConfig+0x308>
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	2b18      	cmp	r3, #24
 800254c:	d13a      	bne.n	80025c4 <HAL_RCC_OscConfig+0x374>
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	f003 0303 	and.w	r3, r3, #3
 8002554:	2b01      	cmp	r3, #1
 8002556:	d135      	bne.n	80025c4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002558:	4b7b      	ldr	r3, [pc, #492]	; (8002748 <HAL_RCC_OscConfig+0x4f8>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002560:	2b00      	cmp	r3, #0
 8002562:	d005      	beq.n	8002570 <HAL_RCC_OscConfig+0x320>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	69db      	ldr	r3, [r3, #28]
 8002568:	2b80      	cmp	r3, #128	; 0x80
 800256a:	d001      	beq.n	8002570 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e296      	b.n	8002a9e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002570:	f7fe fdb6 	bl	80010e0 <HAL_GetREVID>
 8002574:	4603      	mov	r3, r0
 8002576:	f241 0203 	movw	r2, #4099	; 0x1003
 800257a:	4293      	cmp	r3, r2
 800257c:	d817      	bhi.n	80025ae <HAL_RCC_OscConfig+0x35e>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	2b20      	cmp	r3, #32
 8002584:	d108      	bne.n	8002598 <HAL_RCC_OscConfig+0x348>
 8002586:	4b70      	ldr	r3, [pc, #448]	; (8002748 <HAL_RCC_OscConfig+0x4f8>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800258e:	4a6e      	ldr	r2, [pc, #440]	; (8002748 <HAL_RCC_OscConfig+0x4f8>)
 8002590:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002594:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002596:	e075      	b.n	8002684 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002598:	4b6b      	ldr	r3, [pc, #428]	; (8002748 <HAL_RCC_OscConfig+0x4f8>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	069b      	lsls	r3, r3, #26
 80025a6:	4968      	ldr	r1, [pc, #416]	; (8002748 <HAL_RCC_OscConfig+0x4f8>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025ac:	e06a      	b.n	8002684 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025ae:	4b66      	ldr	r3, [pc, #408]	; (8002748 <HAL_RCC_OscConfig+0x4f8>)
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	061b      	lsls	r3, r3, #24
 80025bc:	4962      	ldr	r1, [pc, #392]	; (8002748 <HAL_RCC_OscConfig+0x4f8>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025c2:	e05f      	b.n	8002684 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	69db      	ldr	r3, [r3, #28]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d042      	beq.n	8002652 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80025cc:	4b5e      	ldr	r3, [pc, #376]	; (8002748 <HAL_RCC_OscConfig+0x4f8>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a5d      	ldr	r2, [pc, #372]	; (8002748 <HAL_RCC_OscConfig+0x4f8>)
 80025d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d8:	f7fe fd52 	bl	8001080 <HAL_GetTick>
 80025dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80025e0:	f7fe fd4e 	bl	8001080 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e255      	b.n	8002a9e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025f2:	4b55      	ldr	r3, [pc, #340]	; (8002748 <HAL_RCC_OscConfig+0x4f8>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0f0      	beq.n	80025e0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025fe:	f7fe fd6f 	bl	80010e0 <HAL_GetREVID>
 8002602:	4603      	mov	r3, r0
 8002604:	f241 0203 	movw	r2, #4099	; 0x1003
 8002608:	4293      	cmp	r3, r2
 800260a:	d817      	bhi.n	800263c <HAL_RCC_OscConfig+0x3ec>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	2b20      	cmp	r3, #32
 8002612:	d108      	bne.n	8002626 <HAL_RCC_OscConfig+0x3d6>
 8002614:	4b4c      	ldr	r3, [pc, #304]	; (8002748 <HAL_RCC_OscConfig+0x4f8>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800261c:	4a4a      	ldr	r2, [pc, #296]	; (8002748 <HAL_RCC_OscConfig+0x4f8>)
 800261e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002622:	6053      	str	r3, [r2, #4]
 8002624:	e02e      	b.n	8002684 <HAL_RCC_OscConfig+0x434>
 8002626:	4b48      	ldr	r3, [pc, #288]	; (8002748 <HAL_RCC_OscConfig+0x4f8>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	069b      	lsls	r3, r3, #26
 8002634:	4944      	ldr	r1, [pc, #272]	; (8002748 <HAL_RCC_OscConfig+0x4f8>)
 8002636:	4313      	orrs	r3, r2
 8002638:	604b      	str	r3, [r1, #4]
 800263a:	e023      	b.n	8002684 <HAL_RCC_OscConfig+0x434>
 800263c:	4b42      	ldr	r3, [pc, #264]	; (8002748 <HAL_RCC_OscConfig+0x4f8>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	061b      	lsls	r3, r3, #24
 800264a:	493f      	ldr	r1, [pc, #252]	; (8002748 <HAL_RCC_OscConfig+0x4f8>)
 800264c:	4313      	orrs	r3, r2
 800264e:	60cb      	str	r3, [r1, #12]
 8002650:	e018      	b.n	8002684 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002652:	4b3d      	ldr	r3, [pc, #244]	; (8002748 <HAL_RCC_OscConfig+0x4f8>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a3c      	ldr	r2, [pc, #240]	; (8002748 <HAL_RCC_OscConfig+0x4f8>)
 8002658:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800265c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265e:	f7fe fd0f 	bl	8001080 <HAL_GetTick>
 8002662:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002666:	f7fe fd0b 	bl	8001080 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e212      	b.n	8002a9e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002678:	4b33      	ldr	r3, [pc, #204]	; (8002748 <HAL_RCC_OscConfig+0x4f8>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1f0      	bne.n	8002666 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0308 	and.w	r3, r3, #8
 800268c:	2b00      	cmp	r3, #0
 800268e:	d036      	beq.n	80026fe <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d019      	beq.n	80026cc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002698:	4b2b      	ldr	r3, [pc, #172]	; (8002748 <HAL_RCC_OscConfig+0x4f8>)
 800269a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800269c:	4a2a      	ldr	r2, [pc, #168]	; (8002748 <HAL_RCC_OscConfig+0x4f8>)
 800269e:	f043 0301 	orr.w	r3, r3, #1
 80026a2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a4:	f7fe fcec 	bl	8001080 <HAL_GetTick>
 80026a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ac:	f7fe fce8 	bl	8001080 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e1ef      	b.n	8002a9e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026be:	4b22      	ldr	r3, [pc, #136]	; (8002748 <HAL_RCC_OscConfig+0x4f8>)
 80026c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f0      	beq.n	80026ac <HAL_RCC_OscConfig+0x45c>
 80026ca:	e018      	b.n	80026fe <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026cc:	4b1e      	ldr	r3, [pc, #120]	; (8002748 <HAL_RCC_OscConfig+0x4f8>)
 80026ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026d0:	4a1d      	ldr	r2, [pc, #116]	; (8002748 <HAL_RCC_OscConfig+0x4f8>)
 80026d2:	f023 0301 	bic.w	r3, r3, #1
 80026d6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d8:	f7fe fcd2 	bl	8001080 <HAL_GetTick>
 80026dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026e0:	f7fe fcce 	bl	8001080 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e1d5      	b.n	8002a9e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026f2:	4b15      	ldr	r3, [pc, #84]	; (8002748 <HAL_RCC_OscConfig+0x4f8>)
 80026f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f0      	bne.n	80026e0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0320 	and.w	r3, r3, #32
 8002706:	2b00      	cmp	r3, #0
 8002708:	d039      	beq.n	800277e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d01c      	beq.n	800274c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002712:	4b0d      	ldr	r3, [pc, #52]	; (8002748 <HAL_RCC_OscConfig+0x4f8>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a0c      	ldr	r2, [pc, #48]	; (8002748 <HAL_RCC_OscConfig+0x4f8>)
 8002718:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800271c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800271e:	f7fe fcaf 	bl	8001080 <HAL_GetTick>
 8002722:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002726:	f7fe fcab 	bl	8001080 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e1b2      	b.n	8002a9e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002738:	4b03      	ldr	r3, [pc, #12]	; (8002748 <HAL_RCC_OscConfig+0x4f8>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d0f0      	beq.n	8002726 <HAL_RCC_OscConfig+0x4d6>
 8002744:	e01b      	b.n	800277e <HAL_RCC_OscConfig+0x52e>
 8002746:	bf00      	nop
 8002748:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800274c:	4b9b      	ldr	r3, [pc, #620]	; (80029bc <HAL_RCC_OscConfig+0x76c>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a9a      	ldr	r2, [pc, #616]	; (80029bc <HAL_RCC_OscConfig+0x76c>)
 8002752:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002756:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002758:	f7fe fc92 	bl	8001080 <HAL_GetTick>
 800275c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002760:	f7fe fc8e 	bl	8001080 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e195      	b.n	8002a9e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002772:	4b92      	ldr	r3, [pc, #584]	; (80029bc <HAL_RCC_OscConfig+0x76c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1f0      	bne.n	8002760 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0304 	and.w	r3, r3, #4
 8002786:	2b00      	cmp	r3, #0
 8002788:	f000 8081 	beq.w	800288e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800278c:	4b8c      	ldr	r3, [pc, #560]	; (80029c0 <HAL_RCC_OscConfig+0x770>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a8b      	ldr	r2, [pc, #556]	; (80029c0 <HAL_RCC_OscConfig+0x770>)
 8002792:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002796:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002798:	f7fe fc72 	bl	8001080 <HAL_GetTick>
 800279c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80027a0:	f7fe fc6e 	bl	8001080 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b64      	cmp	r3, #100	; 0x64
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e175      	b.n	8002a9e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027b2:	4b83      	ldr	r3, [pc, #524]	; (80029c0 <HAL_RCC_OscConfig+0x770>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d0f0      	beq.n	80027a0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d106      	bne.n	80027d4 <HAL_RCC_OscConfig+0x584>
 80027c6:	4b7d      	ldr	r3, [pc, #500]	; (80029bc <HAL_RCC_OscConfig+0x76c>)
 80027c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ca:	4a7c      	ldr	r2, [pc, #496]	; (80029bc <HAL_RCC_OscConfig+0x76c>)
 80027cc:	f043 0301 	orr.w	r3, r3, #1
 80027d0:	6713      	str	r3, [r2, #112]	; 0x70
 80027d2:	e02d      	b.n	8002830 <HAL_RCC_OscConfig+0x5e0>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10c      	bne.n	80027f6 <HAL_RCC_OscConfig+0x5a6>
 80027dc:	4b77      	ldr	r3, [pc, #476]	; (80029bc <HAL_RCC_OscConfig+0x76c>)
 80027de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e0:	4a76      	ldr	r2, [pc, #472]	; (80029bc <HAL_RCC_OscConfig+0x76c>)
 80027e2:	f023 0301 	bic.w	r3, r3, #1
 80027e6:	6713      	str	r3, [r2, #112]	; 0x70
 80027e8:	4b74      	ldr	r3, [pc, #464]	; (80029bc <HAL_RCC_OscConfig+0x76c>)
 80027ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ec:	4a73      	ldr	r2, [pc, #460]	; (80029bc <HAL_RCC_OscConfig+0x76c>)
 80027ee:	f023 0304 	bic.w	r3, r3, #4
 80027f2:	6713      	str	r3, [r2, #112]	; 0x70
 80027f4:	e01c      	b.n	8002830 <HAL_RCC_OscConfig+0x5e0>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	2b05      	cmp	r3, #5
 80027fc:	d10c      	bne.n	8002818 <HAL_RCC_OscConfig+0x5c8>
 80027fe:	4b6f      	ldr	r3, [pc, #444]	; (80029bc <HAL_RCC_OscConfig+0x76c>)
 8002800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002802:	4a6e      	ldr	r2, [pc, #440]	; (80029bc <HAL_RCC_OscConfig+0x76c>)
 8002804:	f043 0304 	orr.w	r3, r3, #4
 8002808:	6713      	str	r3, [r2, #112]	; 0x70
 800280a:	4b6c      	ldr	r3, [pc, #432]	; (80029bc <HAL_RCC_OscConfig+0x76c>)
 800280c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280e:	4a6b      	ldr	r2, [pc, #428]	; (80029bc <HAL_RCC_OscConfig+0x76c>)
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	6713      	str	r3, [r2, #112]	; 0x70
 8002816:	e00b      	b.n	8002830 <HAL_RCC_OscConfig+0x5e0>
 8002818:	4b68      	ldr	r3, [pc, #416]	; (80029bc <HAL_RCC_OscConfig+0x76c>)
 800281a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281c:	4a67      	ldr	r2, [pc, #412]	; (80029bc <HAL_RCC_OscConfig+0x76c>)
 800281e:	f023 0301 	bic.w	r3, r3, #1
 8002822:	6713      	str	r3, [r2, #112]	; 0x70
 8002824:	4b65      	ldr	r3, [pc, #404]	; (80029bc <HAL_RCC_OscConfig+0x76c>)
 8002826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002828:	4a64      	ldr	r2, [pc, #400]	; (80029bc <HAL_RCC_OscConfig+0x76c>)
 800282a:	f023 0304 	bic.w	r3, r3, #4
 800282e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d015      	beq.n	8002864 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002838:	f7fe fc22 	bl	8001080 <HAL_GetTick>
 800283c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800283e:	e00a      	b.n	8002856 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002840:	f7fe fc1e 	bl	8001080 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	f241 3288 	movw	r2, #5000	; 0x1388
 800284e:	4293      	cmp	r3, r2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e123      	b.n	8002a9e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002856:	4b59      	ldr	r3, [pc, #356]	; (80029bc <HAL_RCC_OscConfig+0x76c>)
 8002858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d0ee      	beq.n	8002840 <HAL_RCC_OscConfig+0x5f0>
 8002862:	e014      	b.n	800288e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002864:	f7fe fc0c 	bl	8001080 <HAL_GetTick>
 8002868:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800286a:	e00a      	b.n	8002882 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800286c:	f7fe fc08 	bl	8001080 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	f241 3288 	movw	r2, #5000	; 0x1388
 800287a:	4293      	cmp	r3, r2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e10d      	b.n	8002a9e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002882:	4b4e      	ldr	r3, [pc, #312]	; (80029bc <HAL_RCC_OscConfig+0x76c>)
 8002884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1ee      	bne.n	800286c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	2b00      	cmp	r3, #0
 8002894:	f000 8102 	beq.w	8002a9c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002898:	4b48      	ldr	r3, [pc, #288]	; (80029bc <HAL_RCC_OscConfig+0x76c>)
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028a0:	2b18      	cmp	r3, #24
 80028a2:	f000 80bd 	beq.w	8002a20 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	f040 809e 	bne.w	80029ec <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028b0:	4b42      	ldr	r3, [pc, #264]	; (80029bc <HAL_RCC_OscConfig+0x76c>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a41      	ldr	r2, [pc, #260]	; (80029bc <HAL_RCC_OscConfig+0x76c>)
 80028b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028bc:	f7fe fbe0 	bl	8001080 <HAL_GetTick>
 80028c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c4:	f7fe fbdc 	bl	8001080 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e0e3      	b.n	8002a9e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028d6:	4b39      	ldr	r3, [pc, #228]	; (80029bc <HAL_RCC_OscConfig+0x76c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f0      	bne.n	80028c4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028e2:	4b36      	ldr	r3, [pc, #216]	; (80029bc <HAL_RCC_OscConfig+0x76c>)
 80028e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028e6:	4b37      	ldr	r3, [pc, #220]	; (80029c4 <HAL_RCC_OscConfig+0x774>)
 80028e8:	4013      	ands	r3, r2
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80028f2:	0112      	lsls	r2, r2, #4
 80028f4:	430a      	orrs	r2, r1
 80028f6:	4931      	ldr	r1, [pc, #196]	; (80029bc <HAL_RCC_OscConfig+0x76c>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	628b      	str	r3, [r1, #40]	; 0x28
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002900:	3b01      	subs	r3, #1
 8002902:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800290a:	3b01      	subs	r3, #1
 800290c:	025b      	lsls	r3, r3, #9
 800290e:	b29b      	uxth	r3, r3
 8002910:	431a      	orrs	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002916:	3b01      	subs	r3, #1
 8002918:	041b      	lsls	r3, r3, #16
 800291a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002924:	3b01      	subs	r3, #1
 8002926:	061b      	lsls	r3, r3, #24
 8002928:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800292c:	4923      	ldr	r1, [pc, #140]	; (80029bc <HAL_RCC_OscConfig+0x76c>)
 800292e:	4313      	orrs	r3, r2
 8002930:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002932:	4b22      	ldr	r3, [pc, #136]	; (80029bc <HAL_RCC_OscConfig+0x76c>)
 8002934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002936:	4a21      	ldr	r2, [pc, #132]	; (80029bc <HAL_RCC_OscConfig+0x76c>)
 8002938:	f023 0301 	bic.w	r3, r3, #1
 800293c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800293e:	4b1f      	ldr	r3, [pc, #124]	; (80029bc <HAL_RCC_OscConfig+0x76c>)
 8002940:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002942:	4b21      	ldr	r3, [pc, #132]	; (80029c8 <HAL_RCC_OscConfig+0x778>)
 8002944:	4013      	ands	r3, r2
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800294a:	00d2      	lsls	r2, r2, #3
 800294c:	491b      	ldr	r1, [pc, #108]	; (80029bc <HAL_RCC_OscConfig+0x76c>)
 800294e:	4313      	orrs	r3, r2
 8002950:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002952:	4b1a      	ldr	r3, [pc, #104]	; (80029bc <HAL_RCC_OscConfig+0x76c>)
 8002954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002956:	f023 020c 	bic.w	r2, r3, #12
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	4917      	ldr	r1, [pc, #92]	; (80029bc <HAL_RCC_OscConfig+0x76c>)
 8002960:	4313      	orrs	r3, r2
 8002962:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002964:	4b15      	ldr	r3, [pc, #84]	; (80029bc <HAL_RCC_OscConfig+0x76c>)
 8002966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002968:	f023 0202 	bic.w	r2, r3, #2
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002970:	4912      	ldr	r1, [pc, #72]	; (80029bc <HAL_RCC_OscConfig+0x76c>)
 8002972:	4313      	orrs	r3, r2
 8002974:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002976:	4b11      	ldr	r3, [pc, #68]	; (80029bc <HAL_RCC_OscConfig+0x76c>)
 8002978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297a:	4a10      	ldr	r2, [pc, #64]	; (80029bc <HAL_RCC_OscConfig+0x76c>)
 800297c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002980:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002982:	4b0e      	ldr	r3, [pc, #56]	; (80029bc <HAL_RCC_OscConfig+0x76c>)
 8002984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002986:	4a0d      	ldr	r2, [pc, #52]	; (80029bc <HAL_RCC_OscConfig+0x76c>)
 8002988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800298c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800298e:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <HAL_RCC_OscConfig+0x76c>)
 8002990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002992:	4a0a      	ldr	r2, [pc, #40]	; (80029bc <HAL_RCC_OscConfig+0x76c>)
 8002994:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002998:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800299a:	4b08      	ldr	r3, [pc, #32]	; (80029bc <HAL_RCC_OscConfig+0x76c>)
 800299c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299e:	4a07      	ldr	r2, [pc, #28]	; (80029bc <HAL_RCC_OscConfig+0x76c>)
 80029a0:	f043 0301 	orr.w	r3, r3, #1
 80029a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029a6:	4b05      	ldr	r3, [pc, #20]	; (80029bc <HAL_RCC_OscConfig+0x76c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a04      	ldr	r2, [pc, #16]	; (80029bc <HAL_RCC_OscConfig+0x76c>)
 80029ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b2:	f7fe fb65 	bl	8001080 <HAL_GetTick>
 80029b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029b8:	e011      	b.n	80029de <HAL_RCC_OscConfig+0x78e>
 80029ba:	bf00      	nop
 80029bc:	58024400 	.word	0x58024400
 80029c0:	58024800 	.word	0x58024800
 80029c4:	fffffc0c 	.word	0xfffffc0c
 80029c8:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029cc:	f7fe fb58 	bl	8001080 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e05f      	b.n	8002a9e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029de:	4b32      	ldr	r3, [pc, #200]	; (8002aa8 <HAL_RCC_OscConfig+0x858>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d0f0      	beq.n	80029cc <HAL_RCC_OscConfig+0x77c>
 80029ea:	e057      	b.n	8002a9c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ec:	4b2e      	ldr	r3, [pc, #184]	; (8002aa8 <HAL_RCC_OscConfig+0x858>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a2d      	ldr	r2, [pc, #180]	; (8002aa8 <HAL_RCC_OscConfig+0x858>)
 80029f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f8:	f7fe fb42 	bl	8001080 <HAL_GetTick>
 80029fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a00:	f7fe fb3e 	bl	8001080 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e045      	b.n	8002a9e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a12:	4b25      	ldr	r3, [pc, #148]	; (8002aa8 <HAL_RCC_OscConfig+0x858>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1f0      	bne.n	8002a00 <HAL_RCC_OscConfig+0x7b0>
 8002a1e:	e03d      	b.n	8002a9c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002a20:	4b21      	ldr	r3, [pc, #132]	; (8002aa8 <HAL_RCC_OscConfig+0x858>)
 8002a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a24:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002a26:	4b20      	ldr	r3, [pc, #128]	; (8002aa8 <HAL_RCC_OscConfig+0x858>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d031      	beq.n	8002a98 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	f003 0203 	and.w	r2, r3, #3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d12a      	bne.n	8002a98 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	091b      	lsrs	r3, r3, #4
 8002a46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d122      	bne.n	8002a98 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d11a      	bne.n	8002a98 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	0a5b      	lsrs	r3, r3, #9
 8002a66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a6e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d111      	bne.n	8002a98 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	0c1b      	lsrs	r3, r3, #16
 8002a78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a80:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d108      	bne.n	8002a98 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	0e1b      	lsrs	r3, r3, #24
 8002a8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a92:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d001      	beq.n	8002a9c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e000      	b.n	8002a9e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3730      	adds	r7, #48	; 0x30
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	58024400 	.word	0x58024400

08002aac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e19c      	b.n	8002dfa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ac0:	4b8a      	ldr	r3, [pc, #552]	; (8002cec <HAL_RCC_ClockConfig+0x240>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 030f 	and.w	r3, r3, #15
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d910      	bls.n	8002af0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ace:	4b87      	ldr	r3, [pc, #540]	; (8002cec <HAL_RCC_ClockConfig+0x240>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f023 020f 	bic.w	r2, r3, #15
 8002ad6:	4985      	ldr	r1, [pc, #532]	; (8002cec <HAL_RCC_ClockConfig+0x240>)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ade:	4b83      	ldr	r3, [pc, #524]	; (8002cec <HAL_RCC_ClockConfig+0x240>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 030f 	and.w	r3, r3, #15
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d001      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e184      	b.n	8002dfa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d010      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	691a      	ldr	r2, [r3, #16]
 8002b00:	4b7b      	ldr	r3, [pc, #492]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d908      	bls.n	8002b1e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b0c:	4b78      	ldr	r3, [pc, #480]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	4975      	ldr	r1, [pc, #468]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0308 	and.w	r3, r3, #8
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d010      	beq.n	8002b4c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	695a      	ldr	r2, [r3, #20]
 8002b2e:	4b70      	ldr	r3, [pc, #448]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d908      	bls.n	8002b4c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b3a:	4b6d      	ldr	r3, [pc, #436]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	496a      	ldr	r1, [pc, #424]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0310 	and.w	r3, r3, #16
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d010      	beq.n	8002b7a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	699a      	ldr	r2, [r3, #24]
 8002b5c:	4b64      	ldr	r3, [pc, #400]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002b5e:	69db      	ldr	r3, [r3, #28]
 8002b60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d908      	bls.n	8002b7a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002b68:	4b61      	ldr	r3, [pc, #388]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002b6a:	69db      	ldr	r3, [r3, #28]
 8002b6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	495e      	ldr	r1, [pc, #376]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0320 	and.w	r3, r3, #32
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d010      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69da      	ldr	r2, [r3, #28]
 8002b8a:	4b59      	ldr	r3, [pc, #356]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d908      	bls.n	8002ba8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002b96:	4b56      	ldr	r3, [pc, #344]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	69db      	ldr	r3, [r3, #28]
 8002ba2:	4953      	ldr	r1, [pc, #332]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d010      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68da      	ldr	r2, [r3, #12]
 8002bb8:	4b4d      	ldr	r3, [pc, #308]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	f003 030f 	and.w	r3, r3, #15
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d908      	bls.n	8002bd6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc4:	4b4a      	ldr	r3, [pc, #296]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	f023 020f 	bic.w	r2, r3, #15
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	4947      	ldr	r1, [pc, #284]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d055      	beq.n	8002c8e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002be2:	4b43      	ldr	r3, [pc, #268]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	4940      	ldr	r1, [pc, #256]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d107      	bne.n	8002c0c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bfc:	4b3c      	ldr	r3, [pc, #240]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d121      	bne.n	8002c4c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e0f6      	b.n	8002dfa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2b03      	cmp	r3, #3
 8002c12:	d107      	bne.n	8002c24 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c14:	4b36      	ldr	r3, [pc, #216]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d115      	bne.n	8002c4c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e0ea      	b.n	8002dfa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d107      	bne.n	8002c3c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c2c:	4b30      	ldr	r3, [pc, #192]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d109      	bne.n	8002c4c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e0de      	b.n	8002dfa <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c3c:	4b2c      	ldr	r3, [pc, #176]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d101      	bne.n	8002c4c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e0d6      	b.n	8002dfa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c4c:	4b28      	ldr	r3, [pc, #160]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	f023 0207 	bic.w	r2, r3, #7
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	4925      	ldr	r1, [pc, #148]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c5e:	f7fe fa0f 	bl	8001080 <HAL_GetTick>
 8002c62:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c64:	e00a      	b.n	8002c7c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c66:	f7fe fa0b 	bl	8001080 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e0be      	b.n	8002dfa <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c7c:	4b1c      	ldr	r3, [pc, #112]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d1eb      	bne.n	8002c66 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d010      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	4b14      	ldr	r3, [pc, #80]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d208      	bcs.n	8002cbc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002caa:	4b11      	ldr	r3, [pc, #68]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	f023 020f 	bic.w	r2, r3, #15
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	490e      	ldr	r1, [pc, #56]	; (8002cf0 <HAL_RCC_ClockConfig+0x244>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cbc:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <HAL_RCC_ClockConfig+0x240>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 030f 	and.w	r3, r3, #15
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d214      	bcs.n	8002cf4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cca:	4b08      	ldr	r3, [pc, #32]	; (8002cec <HAL_RCC_ClockConfig+0x240>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f023 020f 	bic.w	r2, r3, #15
 8002cd2:	4906      	ldr	r1, [pc, #24]	; (8002cec <HAL_RCC_ClockConfig+0x240>)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cda:	4b04      	ldr	r3, [pc, #16]	; (8002cec <HAL_RCC_ClockConfig+0x240>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d005      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e086      	b.n	8002dfa <HAL_RCC_ClockConfig+0x34e>
 8002cec:	52002000 	.word	0x52002000
 8002cf0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d010      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691a      	ldr	r2, [r3, #16]
 8002d04:	4b3f      	ldr	r3, [pc, #252]	; (8002e04 <HAL_RCC_ClockConfig+0x358>)
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d208      	bcs.n	8002d22 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d10:	4b3c      	ldr	r3, [pc, #240]	; (8002e04 <HAL_RCC_ClockConfig+0x358>)
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	4939      	ldr	r1, [pc, #228]	; (8002e04 <HAL_RCC_ClockConfig+0x358>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d010      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	695a      	ldr	r2, [r3, #20]
 8002d32:	4b34      	ldr	r3, [pc, #208]	; (8002e04 <HAL_RCC_ClockConfig+0x358>)
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d208      	bcs.n	8002d50 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d3e:	4b31      	ldr	r3, [pc, #196]	; (8002e04 <HAL_RCC_ClockConfig+0x358>)
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	492e      	ldr	r1, [pc, #184]	; (8002e04 <HAL_RCC_ClockConfig+0x358>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0310 	and.w	r3, r3, #16
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d010      	beq.n	8002d7e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	699a      	ldr	r2, [r3, #24]
 8002d60:	4b28      	ldr	r3, [pc, #160]	; (8002e04 <HAL_RCC_ClockConfig+0x358>)
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d208      	bcs.n	8002d7e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d6c:	4b25      	ldr	r3, [pc, #148]	; (8002e04 <HAL_RCC_ClockConfig+0x358>)
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	4922      	ldr	r1, [pc, #136]	; (8002e04 <HAL_RCC_ClockConfig+0x358>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0320 	and.w	r3, r3, #32
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d010      	beq.n	8002dac <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69da      	ldr	r2, [r3, #28]
 8002d8e:	4b1d      	ldr	r3, [pc, #116]	; (8002e04 <HAL_RCC_ClockConfig+0x358>)
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d208      	bcs.n	8002dac <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002d9a:	4b1a      	ldr	r3, [pc, #104]	; (8002e04 <HAL_RCC_ClockConfig+0x358>)
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	4917      	ldr	r1, [pc, #92]	; (8002e04 <HAL_RCC_ClockConfig+0x358>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002dac:	f000 f834 	bl	8002e18 <HAL_RCC_GetSysClockFreq>
 8002db0:	4602      	mov	r2, r0
 8002db2:	4b14      	ldr	r3, [pc, #80]	; (8002e04 <HAL_RCC_ClockConfig+0x358>)
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	0a1b      	lsrs	r3, r3, #8
 8002db8:	f003 030f 	and.w	r3, r3, #15
 8002dbc:	4912      	ldr	r1, [pc, #72]	; (8002e08 <HAL_RCC_ClockConfig+0x35c>)
 8002dbe:	5ccb      	ldrb	r3, [r1, r3]
 8002dc0:	f003 031f 	and.w	r3, r3, #31
 8002dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002dca:	4b0e      	ldr	r3, [pc, #56]	; (8002e04 <HAL_RCC_ClockConfig+0x358>)
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	f003 030f 	and.w	r3, r3, #15
 8002dd2:	4a0d      	ldr	r2, [pc, #52]	; (8002e08 <HAL_RCC_ClockConfig+0x35c>)
 8002dd4:	5cd3      	ldrb	r3, [r2, r3]
 8002dd6:	f003 031f 	and.w	r3, r3, #31
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8002de0:	4a0a      	ldr	r2, [pc, #40]	; (8002e0c <HAL_RCC_ClockConfig+0x360>)
 8002de2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002de4:	4a0a      	ldr	r2, [pc, #40]	; (8002e10 <HAL_RCC_ClockConfig+0x364>)
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002dea:	4b0a      	ldr	r3, [pc, #40]	; (8002e14 <HAL_RCC_ClockConfig+0x368>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fe f8fc 	bl	8000fec <HAL_InitTick>
 8002df4:	4603      	mov	r3, r0
 8002df6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3718      	adds	r7, #24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	58024400 	.word	0x58024400
 8002e08:	08005ff8 	.word	0x08005ff8
 8002e0c:	24000004 	.word	0x24000004
 8002e10:	24000000 	.word	0x24000000
 8002e14:	24000008 	.word	0x24000008

08002e18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b089      	sub	sp, #36	; 0x24
 8002e1c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e1e:	4bb3      	ldr	r3, [pc, #716]	; (80030ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e26:	2b18      	cmp	r3, #24
 8002e28:	f200 8155 	bhi.w	80030d6 <HAL_RCC_GetSysClockFreq+0x2be>
 8002e2c:	a201      	add	r2, pc, #4	; (adr r2, 8002e34 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e32:	bf00      	nop
 8002e34:	08002e99 	.word	0x08002e99
 8002e38:	080030d7 	.word	0x080030d7
 8002e3c:	080030d7 	.word	0x080030d7
 8002e40:	080030d7 	.word	0x080030d7
 8002e44:	080030d7 	.word	0x080030d7
 8002e48:	080030d7 	.word	0x080030d7
 8002e4c:	080030d7 	.word	0x080030d7
 8002e50:	080030d7 	.word	0x080030d7
 8002e54:	08002ebf 	.word	0x08002ebf
 8002e58:	080030d7 	.word	0x080030d7
 8002e5c:	080030d7 	.word	0x080030d7
 8002e60:	080030d7 	.word	0x080030d7
 8002e64:	080030d7 	.word	0x080030d7
 8002e68:	080030d7 	.word	0x080030d7
 8002e6c:	080030d7 	.word	0x080030d7
 8002e70:	080030d7 	.word	0x080030d7
 8002e74:	08002ec5 	.word	0x08002ec5
 8002e78:	080030d7 	.word	0x080030d7
 8002e7c:	080030d7 	.word	0x080030d7
 8002e80:	080030d7 	.word	0x080030d7
 8002e84:	080030d7 	.word	0x080030d7
 8002e88:	080030d7 	.word	0x080030d7
 8002e8c:	080030d7 	.word	0x080030d7
 8002e90:	080030d7 	.word	0x080030d7
 8002e94:	08002ecb 	.word	0x08002ecb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e98:	4b94      	ldr	r3, [pc, #592]	; (80030ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0320 	and.w	r3, r3, #32
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d009      	beq.n	8002eb8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002ea4:	4b91      	ldr	r3, [pc, #580]	; (80030ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	08db      	lsrs	r3, r3, #3
 8002eaa:	f003 0303 	and.w	r3, r3, #3
 8002eae:	4a90      	ldr	r2, [pc, #576]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002eb6:	e111      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002eb8:	4b8d      	ldr	r3, [pc, #564]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002eba:	61bb      	str	r3, [r7, #24]
    break;
 8002ebc:	e10e      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002ebe:	4b8d      	ldr	r3, [pc, #564]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002ec0:	61bb      	str	r3, [r7, #24]
    break;
 8002ec2:	e10b      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002ec4:	4b8c      	ldr	r3, [pc, #560]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002ec6:	61bb      	str	r3, [r7, #24]
    break;
 8002ec8:	e108      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002eca:	4b88      	ldr	r3, [pc, #544]	; (80030ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ece:	f003 0303 	and.w	r3, r3, #3
 8002ed2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002ed4:	4b85      	ldr	r3, [pc, #532]	; (80030ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed8:	091b      	lsrs	r3, r3, #4
 8002eda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ede:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002ee0:	4b82      	ldr	r3, [pc, #520]	; (80030ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002eea:	4b80      	ldr	r3, [pc, #512]	; (80030ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eee:	08db      	lsrs	r3, r3, #3
 8002ef0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	fb02 f303 	mul.w	r3, r2, r3
 8002efa:	ee07 3a90 	vmov	s15, r3
 8002efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f02:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 80e1 	beq.w	80030d0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	f000 8083 	beq.w	800301c <HAL_RCC_GetSysClockFreq+0x204>
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	f200 80a1 	bhi.w	8003060 <HAL_RCC_GetSysClockFreq+0x248>
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d003      	beq.n	8002f2c <HAL_RCC_GetSysClockFreq+0x114>
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d056      	beq.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002f2a:	e099      	b.n	8003060 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f2c:	4b6f      	ldr	r3, [pc, #444]	; (80030ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0320 	and.w	r3, r3, #32
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d02d      	beq.n	8002f94 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002f38:	4b6c      	ldr	r3, [pc, #432]	; (80030ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	08db      	lsrs	r3, r3, #3
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	4a6b      	ldr	r2, [pc, #428]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f44:	fa22 f303 	lsr.w	r3, r2, r3
 8002f48:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	ee07 3a90 	vmov	s15, r3
 8002f50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	ee07 3a90 	vmov	s15, r3
 8002f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f62:	4b62      	ldr	r3, [pc, #392]	; (80030ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f6a:	ee07 3a90 	vmov	s15, r3
 8002f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f72:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f76:	eddf 5a61 	vldr	s11, [pc, #388]	; 80030fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f8e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002f92:	e087      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	ee07 3a90 	vmov	s15, r3
 8002f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f9e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003100 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002fa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fa6:	4b51      	ldr	r3, [pc, #324]	; (80030ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fae:	ee07 3a90 	vmov	s15, r3
 8002fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fba:	eddf 5a50 	vldr	s11, [pc, #320]	; 80030fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002fd6:	e065      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	ee07 3a90 	vmov	s15, r3
 8002fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fe2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003104 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002fe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fea:	4b40      	ldr	r3, [pc, #256]	; (80030ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ff2:	ee07 3a90 	vmov	s15, r3
 8002ff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ffa:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ffe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80030fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800300a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800300e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003016:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800301a:	e043      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	ee07 3a90 	vmov	s15, r3
 8003022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003026:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003108 <HAL_RCC_GetSysClockFreq+0x2f0>
 800302a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800302e:	4b2f      	ldr	r3, [pc, #188]	; (80030ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003036:	ee07 3a90 	vmov	s15, r3
 800303a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800303e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003042:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80030fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800304a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800304e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800305a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800305e:	e021      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	ee07 3a90 	vmov	s15, r3
 8003066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800306a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003104 <HAL_RCC_GetSysClockFreq+0x2ec>
 800306e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003072:	4b1e      	ldr	r3, [pc, #120]	; (80030ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800307a:	ee07 3a90 	vmov	s15, r3
 800307e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003082:	ed97 6a02 	vldr	s12, [r7, #8]
 8003086:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80030fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800308a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800308e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003092:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800309a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800309e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80030a2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80030a4:	4b11      	ldr	r3, [pc, #68]	; (80030ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a8:	0a5b      	lsrs	r3, r3, #9
 80030aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030ae:	3301      	adds	r3, #1
 80030b0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	ee07 3a90 	vmov	s15, r3
 80030b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80030c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030c8:	ee17 3a90 	vmov	r3, s15
 80030cc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80030ce:	e005      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80030d0:	2300      	movs	r3, #0
 80030d2:	61bb      	str	r3, [r7, #24]
    break;
 80030d4:	e002      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80030d6:	4b07      	ldr	r3, [pc, #28]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80030d8:	61bb      	str	r3, [r7, #24]
    break;
 80030da:	bf00      	nop
  }

  return sysclockfreq;
 80030dc:	69bb      	ldr	r3, [r7, #24]
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3724      	adds	r7, #36	; 0x24
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	58024400 	.word	0x58024400
 80030f0:	03d09000 	.word	0x03d09000
 80030f4:	003d0900 	.word	0x003d0900
 80030f8:	007a1200 	.word	0x007a1200
 80030fc:	46000000 	.word	0x46000000
 8003100:	4c742400 	.word	0x4c742400
 8003104:	4a742400 	.word	0x4a742400
 8003108:	4af42400 	.word	0x4af42400

0800310c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003112:	f7ff fe81 	bl	8002e18 <HAL_RCC_GetSysClockFreq>
 8003116:	4602      	mov	r2, r0
 8003118:	4b10      	ldr	r3, [pc, #64]	; (800315c <HAL_RCC_GetHCLKFreq+0x50>)
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	0a1b      	lsrs	r3, r3, #8
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	490f      	ldr	r1, [pc, #60]	; (8003160 <HAL_RCC_GetHCLKFreq+0x54>)
 8003124:	5ccb      	ldrb	r3, [r1, r3]
 8003126:	f003 031f 	and.w	r3, r3, #31
 800312a:	fa22 f303 	lsr.w	r3, r2, r3
 800312e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003130:	4b0a      	ldr	r3, [pc, #40]	; (800315c <HAL_RCC_GetHCLKFreq+0x50>)
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	f003 030f 	and.w	r3, r3, #15
 8003138:	4a09      	ldr	r2, [pc, #36]	; (8003160 <HAL_RCC_GetHCLKFreq+0x54>)
 800313a:	5cd3      	ldrb	r3, [r2, r3]
 800313c:	f003 031f 	and.w	r3, r3, #31
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	fa22 f303 	lsr.w	r3, r2, r3
 8003146:	4a07      	ldr	r2, [pc, #28]	; (8003164 <HAL_RCC_GetHCLKFreq+0x58>)
 8003148:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800314a:	4a07      	ldr	r2, [pc, #28]	; (8003168 <HAL_RCC_GetHCLKFreq+0x5c>)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003150:	4b04      	ldr	r3, [pc, #16]	; (8003164 <HAL_RCC_GetHCLKFreq+0x58>)
 8003152:	681b      	ldr	r3, [r3, #0]
}
 8003154:	4618      	mov	r0, r3
 8003156:	3708      	adds	r7, #8
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	58024400 	.word	0x58024400
 8003160:	08005ff8 	.word	0x08005ff8
 8003164:	24000004 	.word	0x24000004
 8003168:	24000000 	.word	0x24000000

0800316c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003170:	f7ff ffcc 	bl	800310c <HAL_RCC_GetHCLKFreq>
 8003174:	4602      	mov	r2, r0
 8003176:	4b06      	ldr	r3, [pc, #24]	; (8003190 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	091b      	lsrs	r3, r3, #4
 800317c:	f003 0307 	and.w	r3, r3, #7
 8003180:	4904      	ldr	r1, [pc, #16]	; (8003194 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003182:	5ccb      	ldrb	r3, [r1, r3]
 8003184:	f003 031f 	and.w	r3, r3, #31
 8003188:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800318c:	4618      	mov	r0, r3
 800318e:	bd80      	pop	{r7, pc}
 8003190:	58024400 	.word	0x58024400
 8003194:	08005ff8 	.word	0x08005ff8

08003198 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800319c:	f7ff ffb6 	bl	800310c <HAL_RCC_GetHCLKFreq>
 80031a0:	4602      	mov	r2, r0
 80031a2:	4b06      	ldr	r3, [pc, #24]	; (80031bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	0a1b      	lsrs	r3, r3, #8
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	4904      	ldr	r1, [pc, #16]	; (80031c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031ae:	5ccb      	ldrb	r3, [r1, r3]
 80031b0:	f003 031f 	and.w	r3, r3, #31
 80031b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	58024400 	.word	0x58024400
 80031c0:	08005ff8 	.word	0x08005ff8

080031c4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031cc:	2300      	movs	r3, #0
 80031ce:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031d0:	2300      	movs	r3, #0
 80031d2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d03f      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80031e8:	d02a      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80031ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80031ee:	d824      	bhi.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031f4:	d018      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80031f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031fa:	d81e      	bhi.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d003      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003200:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003204:	d007      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003206:	e018      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003208:	4ba3      	ldr	r3, [pc, #652]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800320a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320c:	4aa2      	ldr	r2, [pc, #648]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800320e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003212:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003214:	e015      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	3304      	adds	r3, #4
 800321a:	2102      	movs	r1, #2
 800321c:	4618      	mov	r0, r3
 800321e:	f001 f9d5 	bl	80045cc <RCCEx_PLL2_Config>
 8003222:	4603      	mov	r3, r0
 8003224:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003226:	e00c      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	3324      	adds	r3, #36	; 0x24
 800322c:	2102      	movs	r1, #2
 800322e:	4618      	mov	r0, r3
 8003230:	f001 fa7e 	bl	8004730 <RCCEx_PLL3_Config>
 8003234:	4603      	mov	r3, r0
 8003236:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003238:	e003      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	75fb      	strb	r3, [r7, #23]
      break;
 800323e:	e000      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003240:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003242:	7dfb      	ldrb	r3, [r7, #23]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d109      	bne.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003248:	4b93      	ldr	r3, [pc, #588]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800324a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800324c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003254:	4990      	ldr	r1, [pc, #576]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003256:	4313      	orrs	r3, r2
 8003258:	650b      	str	r3, [r1, #80]	; 0x50
 800325a:	e001      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800325c:	7dfb      	ldrb	r3, [r7, #23]
 800325e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003268:	2b00      	cmp	r3, #0
 800326a:	d03d      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003270:	2b04      	cmp	r3, #4
 8003272:	d826      	bhi.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003274:	a201      	add	r2, pc, #4	; (adr r2, 800327c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800327a:	bf00      	nop
 800327c:	08003291 	.word	0x08003291
 8003280:	0800329f 	.word	0x0800329f
 8003284:	080032b1 	.word	0x080032b1
 8003288:	080032c9 	.word	0x080032c9
 800328c:	080032c9 	.word	0x080032c9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003290:	4b81      	ldr	r3, [pc, #516]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003294:	4a80      	ldr	r2, [pc, #512]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003296:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800329a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800329c:	e015      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	3304      	adds	r3, #4
 80032a2:	2100      	movs	r1, #0
 80032a4:	4618      	mov	r0, r3
 80032a6:	f001 f991 	bl	80045cc <RCCEx_PLL2_Config>
 80032aa:	4603      	mov	r3, r0
 80032ac:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80032ae:	e00c      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3324      	adds	r3, #36	; 0x24
 80032b4:	2100      	movs	r1, #0
 80032b6:	4618      	mov	r0, r3
 80032b8:	f001 fa3a 	bl	8004730 <RCCEx_PLL3_Config>
 80032bc:	4603      	mov	r3, r0
 80032be:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80032c0:	e003      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	75fb      	strb	r3, [r7, #23]
      break;
 80032c6:	e000      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80032c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032ca:	7dfb      	ldrb	r3, [r7, #23]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d109      	bne.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032d0:	4b71      	ldr	r3, [pc, #452]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80032d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d4:	f023 0207 	bic.w	r2, r3, #7
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032dc:	496e      	ldr	r1, [pc, #440]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	650b      	str	r3, [r1, #80]	; 0x50
 80032e2:	e001      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e4:	7dfb      	ldrb	r3, [r7, #23]
 80032e6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d042      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032fc:	d02b      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80032fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003302:	d825      	bhi.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003304:	2bc0      	cmp	r3, #192	; 0xc0
 8003306:	d028      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003308:	2bc0      	cmp	r3, #192	; 0xc0
 800330a:	d821      	bhi.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800330c:	2b80      	cmp	r3, #128	; 0x80
 800330e:	d016      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003310:	2b80      	cmp	r3, #128	; 0x80
 8003312:	d81d      	bhi.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003314:	2b00      	cmp	r3, #0
 8003316:	d002      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003318:	2b40      	cmp	r3, #64	; 0x40
 800331a:	d007      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800331c:	e018      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800331e:	4b5e      	ldr	r3, [pc, #376]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003322:	4a5d      	ldr	r2, [pc, #372]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003324:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003328:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800332a:	e017      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	3304      	adds	r3, #4
 8003330:	2100      	movs	r1, #0
 8003332:	4618      	mov	r0, r3
 8003334:	f001 f94a 	bl	80045cc <RCCEx_PLL2_Config>
 8003338:	4603      	mov	r3, r0
 800333a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800333c:	e00e      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	3324      	adds	r3, #36	; 0x24
 8003342:	2100      	movs	r1, #0
 8003344:	4618      	mov	r0, r3
 8003346:	f001 f9f3 	bl	8004730 <RCCEx_PLL3_Config>
 800334a:	4603      	mov	r3, r0
 800334c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800334e:	e005      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	75fb      	strb	r3, [r7, #23]
      break;
 8003354:	e002      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003356:	bf00      	nop
 8003358:	e000      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800335a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800335c:	7dfb      	ldrb	r3, [r7, #23]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d109      	bne.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003362:	4b4d      	ldr	r3, [pc, #308]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003366:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800336e:	494a      	ldr	r1, [pc, #296]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003370:	4313      	orrs	r3, r2
 8003372:	650b      	str	r3, [r1, #80]	; 0x50
 8003374:	e001      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003376:	7dfb      	ldrb	r3, [r7, #23]
 8003378:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003382:	2b00      	cmp	r3, #0
 8003384:	d049      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800338c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003390:	d030      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003392:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003396:	d82a      	bhi.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003398:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800339c:	d02c      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800339e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80033a2:	d824      	bhi.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80033a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033a8:	d018      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x218>
 80033aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033ae:	d81e      	bhi.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d003      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80033b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033b8:	d007      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x206>
 80033ba:	e018      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033bc:	4b36      	ldr	r3, [pc, #216]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80033be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c0:	4a35      	ldr	r2, [pc, #212]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80033c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80033c8:	e017      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	3304      	adds	r3, #4
 80033ce:	2100      	movs	r1, #0
 80033d0:	4618      	mov	r0, r3
 80033d2:	f001 f8fb 	bl	80045cc <RCCEx_PLL2_Config>
 80033d6:	4603      	mov	r3, r0
 80033d8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80033da:	e00e      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	3324      	adds	r3, #36	; 0x24
 80033e0:	2100      	movs	r1, #0
 80033e2:	4618      	mov	r0, r3
 80033e4:	f001 f9a4 	bl	8004730 <RCCEx_PLL3_Config>
 80033e8:	4603      	mov	r3, r0
 80033ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80033ec:	e005      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	75fb      	strb	r3, [r7, #23]
      break;
 80033f2:	e002      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80033f4:	bf00      	nop
 80033f6:	e000      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80033f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033fa:	7dfb      	ldrb	r3, [r7, #23]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10a      	bne.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003400:	4b25      	ldr	r3, [pc, #148]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003404:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800340e:	4922      	ldr	r1, [pc, #136]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003410:	4313      	orrs	r3, r2
 8003412:	658b      	str	r3, [r1, #88]	; 0x58
 8003414:	e001      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003416:	7dfb      	ldrb	r3, [r7, #23]
 8003418:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003422:	2b00      	cmp	r3, #0
 8003424:	d04b      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800342c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003430:	d030      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003432:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003436:	d82a      	bhi.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003438:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800343c:	d02e      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800343e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003442:	d824      	bhi.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003444:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003448:	d018      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800344a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800344e:	d81e      	bhi.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003454:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003458:	d007      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800345a:	e018      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800345c:	4b0e      	ldr	r3, [pc, #56]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800345e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003460:	4a0d      	ldr	r2, [pc, #52]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003466:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003468:	e019      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	3304      	adds	r3, #4
 800346e:	2100      	movs	r1, #0
 8003470:	4618      	mov	r0, r3
 8003472:	f001 f8ab 	bl	80045cc <RCCEx_PLL2_Config>
 8003476:	4603      	mov	r3, r0
 8003478:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800347a:	e010      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3324      	adds	r3, #36	; 0x24
 8003480:	2100      	movs	r1, #0
 8003482:	4618      	mov	r0, r3
 8003484:	f001 f954 	bl	8004730 <RCCEx_PLL3_Config>
 8003488:	4603      	mov	r3, r0
 800348a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800348c:	e007      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	75fb      	strb	r3, [r7, #23]
      break;
 8003492:	e004      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8003494:	bf00      	nop
 8003496:	e002      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003498:	58024400 	.word	0x58024400
      break;
 800349c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800349e:	7dfb      	ldrb	r3, [r7, #23]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10a      	bne.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80034a4:	4b99      	ldr	r3, [pc, #612]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80034a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80034b2:	4996      	ldr	r1, [pc, #600]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	658b      	str	r3, [r1, #88]	; 0x58
 80034b8:	e001      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ba:	7dfb      	ldrb	r3, [r7, #23]
 80034bc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d032      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ce:	2b30      	cmp	r3, #48	; 0x30
 80034d0:	d01c      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x348>
 80034d2:	2b30      	cmp	r3, #48	; 0x30
 80034d4:	d817      	bhi.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80034d6:	2b20      	cmp	r3, #32
 80034d8:	d00c      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80034da:	2b20      	cmp	r3, #32
 80034dc:	d813      	bhi.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d016      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80034e2:	2b10      	cmp	r3, #16
 80034e4:	d10f      	bne.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034e6:	4b89      	ldr	r3, [pc, #548]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80034e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ea:	4a88      	ldr	r2, [pc, #544]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80034ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80034f2:	e00e      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3304      	adds	r3, #4
 80034f8:	2102      	movs	r1, #2
 80034fa:	4618      	mov	r0, r3
 80034fc:	f001 f866 	bl	80045cc <RCCEx_PLL2_Config>
 8003500:	4603      	mov	r3, r0
 8003502:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003504:	e005      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	75fb      	strb	r3, [r7, #23]
      break;
 800350a:	e002      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800350c:	bf00      	nop
 800350e:	e000      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003510:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003512:	7dfb      	ldrb	r3, [r7, #23]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d109      	bne.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003518:	4b7c      	ldr	r3, [pc, #496]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800351a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800351c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003524:	4979      	ldr	r1, [pc, #484]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003526:	4313      	orrs	r3, r2
 8003528:	64cb      	str	r3, [r1, #76]	; 0x4c
 800352a:	e001      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800352c:	7dfb      	ldrb	r3, [r7, #23]
 800352e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d047      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003540:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003544:	d030      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003546:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800354a:	d82a      	bhi.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800354c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003550:	d02c      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003552:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003556:	d824      	bhi.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003558:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800355c:	d018      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800355e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003562:	d81e      	bhi.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003564:	2b00      	cmp	r3, #0
 8003566:	d003      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800356c:	d007      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800356e:	e018      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003570:	4b66      	ldr	r3, [pc, #408]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003574:	4a65      	ldr	r2, [pc, #404]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003576:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800357a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800357c:	e017      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	3304      	adds	r3, #4
 8003582:	2100      	movs	r1, #0
 8003584:	4618      	mov	r0, r3
 8003586:	f001 f821 	bl	80045cc <RCCEx_PLL2_Config>
 800358a:	4603      	mov	r3, r0
 800358c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800358e:	e00e      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3324      	adds	r3, #36	; 0x24
 8003594:	2100      	movs	r1, #0
 8003596:	4618      	mov	r0, r3
 8003598:	f001 f8ca 	bl	8004730 <RCCEx_PLL3_Config>
 800359c:	4603      	mov	r3, r0
 800359e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80035a0:	e005      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	75fb      	strb	r3, [r7, #23]
      break;
 80035a6:	e002      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80035a8:	bf00      	nop
 80035aa:	e000      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80035ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035ae:	7dfb      	ldrb	r3, [r7, #23]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d109      	bne.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80035b4:	4b55      	ldr	r3, [pc, #340]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80035b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035b8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c0:	4952      	ldr	r1, [pc, #328]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	650b      	str	r3, [r1, #80]	; 0x50
 80035c6:	e001      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c8:	7dfb      	ldrb	r3, [r7, #23]
 80035ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d049      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035e0:	d02e      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80035e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035e6:	d828      	bhi.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x476>
 80035e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035ec:	d02a      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80035ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035f2:	d822      	bhi.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x476>
 80035f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80035f8:	d026      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80035fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80035fe:	d81c      	bhi.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003600:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003604:	d010      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8003606:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800360a:	d816      	bhi.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800360c:	2b00      	cmp	r3, #0
 800360e:	d01d      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003614:	d111      	bne.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	3304      	adds	r3, #4
 800361a:	2101      	movs	r1, #1
 800361c:	4618      	mov	r0, r3
 800361e:	f000 ffd5 	bl	80045cc <RCCEx_PLL2_Config>
 8003622:	4603      	mov	r3, r0
 8003624:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003626:	e012      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	3324      	adds	r3, #36	; 0x24
 800362c:	2101      	movs	r1, #1
 800362e:	4618      	mov	r0, r3
 8003630:	f001 f87e 	bl	8004730 <RCCEx_PLL3_Config>
 8003634:	4603      	mov	r3, r0
 8003636:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003638:	e009      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	75fb      	strb	r3, [r7, #23]
      break;
 800363e:	e006      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003640:	bf00      	nop
 8003642:	e004      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003644:	bf00      	nop
 8003646:	e002      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003648:	bf00      	nop
 800364a:	e000      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800364c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800364e:	7dfb      	ldrb	r3, [r7, #23]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d109      	bne.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003654:	4b2d      	ldr	r3, [pc, #180]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003658:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003660:	492a      	ldr	r1, [pc, #168]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003662:	4313      	orrs	r3, r2
 8003664:	650b      	str	r3, [r1, #80]	; 0x50
 8003666:	e001      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003668:	7dfb      	ldrb	r3, [r7, #23]
 800366a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d04d      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800367e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003682:	d02e      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003684:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003688:	d828      	bhi.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x518>
 800368a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800368e:	d02a      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003694:	d822      	bhi.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003696:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800369a:	d026      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x526>
 800369c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80036a0:	d81c      	bhi.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x518>
 80036a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036a6:	d010      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x506>
 80036a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036ac:	d816      	bhi.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x518>
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d01d      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80036b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036b6:	d111      	bne.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	3304      	adds	r3, #4
 80036bc:	2101      	movs	r1, #1
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 ff84 	bl	80045cc <RCCEx_PLL2_Config>
 80036c4:	4603      	mov	r3, r0
 80036c6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80036c8:	e012      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	3324      	adds	r3, #36	; 0x24
 80036ce:	2101      	movs	r1, #1
 80036d0:	4618      	mov	r0, r3
 80036d2:	f001 f82d 	bl	8004730 <RCCEx_PLL3_Config>
 80036d6:	4603      	mov	r3, r0
 80036d8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80036da:	e009      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	75fb      	strb	r3, [r7, #23]
      break;
 80036e0:	e006      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80036e2:	bf00      	nop
 80036e4:	e004      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80036e6:	bf00      	nop
 80036e8:	e002      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80036ea:	bf00      	nop
 80036ec:	e000      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80036ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036f0:	7dfb      	ldrb	r3, [r7, #23]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10c      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80036f6:	4b05      	ldr	r3, [pc, #20]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80036f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003704:	4901      	ldr	r1, [pc, #4]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003706:	4313      	orrs	r3, r2
 8003708:	658b      	str	r3, [r1, #88]	; 0x58
 800370a:	e003      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800370c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003710:	7dfb      	ldrb	r3, [r7, #23]
 8003712:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d02f      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003724:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003728:	d00e      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800372a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800372e:	d814      	bhi.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003730:	2b00      	cmp	r3, #0
 8003732:	d015      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003734:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003738:	d10f      	bne.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800373a:	4baf      	ldr	r3, [pc, #700]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800373c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373e:	4aae      	ldr	r2, [pc, #696]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003744:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003746:	e00c      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3304      	adds	r3, #4
 800374c:	2101      	movs	r1, #1
 800374e:	4618      	mov	r0, r3
 8003750:	f000 ff3c 	bl	80045cc <RCCEx_PLL2_Config>
 8003754:	4603      	mov	r3, r0
 8003756:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003758:	e003      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	75fb      	strb	r3, [r7, #23]
      break;
 800375e:	e000      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003760:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003762:	7dfb      	ldrb	r3, [r7, #23]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d109      	bne.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003768:	4ba3      	ldr	r3, [pc, #652]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800376a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800376c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003774:	49a0      	ldr	r1, [pc, #640]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003776:	4313      	orrs	r3, r2
 8003778:	650b      	str	r3, [r1, #80]	; 0x50
 800377a:	e001      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800377c:	7dfb      	ldrb	r3, [r7, #23]
 800377e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d032      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003790:	2b03      	cmp	r3, #3
 8003792:	d81b      	bhi.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003794:	a201      	add	r2, pc, #4	; (adr r2, 800379c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8003796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800379a:	bf00      	nop
 800379c:	080037d3 	.word	0x080037d3
 80037a0:	080037ad 	.word	0x080037ad
 80037a4:	080037bb 	.word	0x080037bb
 80037a8:	080037d3 	.word	0x080037d3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037ac:	4b92      	ldr	r3, [pc, #584]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80037ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b0:	4a91      	ldr	r2, [pc, #580]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80037b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80037b8:	e00c      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	3304      	adds	r3, #4
 80037be:	2102      	movs	r1, #2
 80037c0:	4618      	mov	r0, r3
 80037c2:	f000 ff03 	bl	80045cc <RCCEx_PLL2_Config>
 80037c6:	4603      	mov	r3, r0
 80037c8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80037ca:	e003      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	75fb      	strb	r3, [r7, #23]
      break;
 80037d0:	e000      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80037d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037d4:	7dfb      	ldrb	r3, [r7, #23]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d109      	bne.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80037da:	4b87      	ldr	r3, [pc, #540]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80037dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037de:	f023 0203 	bic.w	r2, r3, #3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e6:	4984      	ldr	r1, [pc, #528]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	64cb      	str	r3, [r1, #76]	; 0x4c
 80037ec:	e001      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ee:	7dfb      	ldrb	r3, [r7, #23]
 80037f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 8086 	beq.w	800390c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003800:	4b7e      	ldr	r3, [pc, #504]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a7d      	ldr	r2, [pc, #500]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800380a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800380c:	f7fd fc38 	bl	8001080 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003812:	e009      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003814:	f7fd fc34 	bl	8001080 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b64      	cmp	r3, #100	; 0x64
 8003820:	d902      	bls.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	75fb      	strb	r3, [r7, #23]
        break;
 8003826:	e005      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003828:	4b74      	ldr	r3, [pc, #464]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003830:	2b00      	cmp	r3, #0
 8003832:	d0ef      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003834:	7dfb      	ldrb	r3, [r7, #23]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d166      	bne.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800383a:	4b6f      	ldr	r3, [pc, #444]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800383c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003844:	4053      	eors	r3, r2
 8003846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800384a:	2b00      	cmp	r3, #0
 800384c:	d013      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800384e:	4b6a      	ldr	r3, [pc, #424]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003852:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003856:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003858:	4b67      	ldr	r3, [pc, #412]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800385a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385c:	4a66      	ldr	r2, [pc, #408]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800385e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003862:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003864:	4b64      	ldr	r3, [pc, #400]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003868:	4a63      	ldr	r2, [pc, #396]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800386a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800386e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003870:	4a61      	ldr	r2, [pc, #388]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800387c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003880:	d115      	bne.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003882:	f7fd fbfd 	bl	8001080 <HAL_GetTick>
 8003886:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003888:	e00b      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800388a:	f7fd fbf9 	bl	8001080 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	f241 3288 	movw	r2, #5000	; 0x1388
 8003898:	4293      	cmp	r3, r2
 800389a:	d902      	bls.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	75fb      	strb	r3, [r7, #23]
            break;
 80038a0:	e005      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038a2:	4b55      	ldr	r3, [pc, #340]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80038a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d0ed      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80038ae:	7dfb      	ldrb	r3, [r7, #23]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d126      	bne.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038c2:	d10d      	bne.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80038c4:	4b4c      	ldr	r3, [pc, #304]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038d2:	0919      	lsrs	r1, r3, #4
 80038d4:	4b4a      	ldr	r3, [pc, #296]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80038d6:	400b      	ands	r3, r1
 80038d8:	4947      	ldr	r1, [pc, #284]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	610b      	str	r3, [r1, #16]
 80038de:	e005      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x728>
 80038e0:	4b45      	ldr	r3, [pc, #276]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	4a44      	ldr	r2, [pc, #272]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80038e6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80038ea:	6113      	str	r3, [r2, #16]
 80038ec:	4b42      	ldr	r3, [pc, #264]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80038ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038fa:	493f      	ldr	r1, [pc, #252]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	670b      	str	r3, [r1, #112]	; 0x70
 8003900:	e004      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003902:	7dfb      	ldrb	r3, [r7, #23]
 8003904:	75bb      	strb	r3, [r7, #22]
 8003906:	e001      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003908:	7dfb      	ldrb	r3, [r7, #23]
 800390a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 8085 	beq.w	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800391e:	2b28      	cmp	r3, #40	; 0x28
 8003920:	d866      	bhi.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003922:	a201      	add	r2, pc, #4	; (adr r2, 8003928 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003928:	08003a05 	.word	0x08003a05
 800392c:	080039f1 	.word	0x080039f1
 8003930:	080039f1 	.word	0x080039f1
 8003934:	080039f1 	.word	0x080039f1
 8003938:	080039f1 	.word	0x080039f1
 800393c:	080039f1 	.word	0x080039f1
 8003940:	080039f1 	.word	0x080039f1
 8003944:	080039f1 	.word	0x080039f1
 8003948:	080039cd 	.word	0x080039cd
 800394c:	080039f1 	.word	0x080039f1
 8003950:	080039f1 	.word	0x080039f1
 8003954:	080039f1 	.word	0x080039f1
 8003958:	080039f1 	.word	0x080039f1
 800395c:	080039f1 	.word	0x080039f1
 8003960:	080039f1 	.word	0x080039f1
 8003964:	080039f1 	.word	0x080039f1
 8003968:	080039df 	.word	0x080039df
 800396c:	080039f1 	.word	0x080039f1
 8003970:	080039f1 	.word	0x080039f1
 8003974:	080039f1 	.word	0x080039f1
 8003978:	080039f1 	.word	0x080039f1
 800397c:	080039f1 	.word	0x080039f1
 8003980:	080039f1 	.word	0x080039f1
 8003984:	080039f1 	.word	0x080039f1
 8003988:	08003a05 	.word	0x08003a05
 800398c:	080039f1 	.word	0x080039f1
 8003990:	080039f1 	.word	0x080039f1
 8003994:	080039f1 	.word	0x080039f1
 8003998:	080039f1 	.word	0x080039f1
 800399c:	080039f1 	.word	0x080039f1
 80039a0:	080039f1 	.word	0x080039f1
 80039a4:	080039f1 	.word	0x080039f1
 80039a8:	08003a05 	.word	0x08003a05
 80039ac:	080039f1 	.word	0x080039f1
 80039b0:	080039f1 	.word	0x080039f1
 80039b4:	080039f1 	.word	0x080039f1
 80039b8:	080039f1 	.word	0x080039f1
 80039bc:	080039f1 	.word	0x080039f1
 80039c0:	080039f1 	.word	0x080039f1
 80039c4:	080039f1 	.word	0x080039f1
 80039c8:	08003a05 	.word	0x08003a05
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	3304      	adds	r3, #4
 80039d0:	2101      	movs	r1, #1
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 fdfa 	bl	80045cc <RCCEx_PLL2_Config>
 80039d8:	4603      	mov	r3, r0
 80039da:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80039dc:	e013      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	3324      	adds	r3, #36	; 0x24
 80039e2:	2101      	movs	r1, #1
 80039e4:	4618      	mov	r0, r3
 80039e6:	f000 fea3 	bl	8004730 <RCCEx_PLL3_Config>
 80039ea:	4603      	mov	r3, r0
 80039ec:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80039ee:	e00a      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	75fb      	strb	r3, [r7, #23]
      break;
 80039f4:	e007      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80039f6:	bf00      	nop
 80039f8:	58024400 	.word	0x58024400
 80039fc:	58024800 	.word	0x58024800
 8003a00:	00ffffcf 	.word	0x00ffffcf
      break;
 8003a04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a06:	7dfb      	ldrb	r3, [r7, #23]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d109      	bne.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003a0c:	4b96      	ldr	r3, [pc, #600]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a10:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a18:	4993      	ldr	r1, [pc, #588]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	654b      	str	r3, [r1, #84]	; 0x54
 8003a1e:	e001      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a20:	7dfb      	ldrb	r3, [r7, #23]
 8003a22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d038      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a34:	2b05      	cmp	r3, #5
 8003a36:	d821      	bhi.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003a38:	a201      	add	r2, pc, #4	; (adr r2, 8003a40 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8003a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a3e:	bf00      	nop
 8003a40:	08003a83 	.word	0x08003a83
 8003a44:	08003a59 	.word	0x08003a59
 8003a48:	08003a6b 	.word	0x08003a6b
 8003a4c:	08003a83 	.word	0x08003a83
 8003a50:	08003a83 	.word	0x08003a83
 8003a54:	08003a83 	.word	0x08003a83
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	3304      	adds	r3, #4
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 fdb4 	bl	80045cc <RCCEx_PLL2_Config>
 8003a64:	4603      	mov	r3, r0
 8003a66:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003a68:	e00c      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	3324      	adds	r3, #36	; 0x24
 8003a6e:	2101      	movs	r1, #1
 8003a70:	4618      	mov	r0, r3
 8003a72:	f000 fe5d 	bl	8004730 <RCCEx_PLL3_Config>
 8003a76:	4603      	mov	r3, r0
 8003a78:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003a7a:	e003      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	75fb      	strb	r3, [r7, #23]
      break;
 8003a80:	e000      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003a82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a84:	7dfb      	ldrb	r3, [r7, #23]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d109      	bne.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003a8a:	4b77      	ldr	r3, [pc, #476]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a8e:	f023 0207 	bic.w	r2, r3, #7
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a96:	4974      	ldr	r1, [pc, #464]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	654b      	str	r3, [r1, #84]	; 0x54
 8003a9c:	e001      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a9e:	7dfb      	ldrb	r3, [r7, #23]
 8003aa0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0304 	and.w	r3, r3, #4
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d03a      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab4:	2b05      	cmp	r3, #5
 8003ab6:	d821      	bhi.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003ab8:	a201      	add	r2, pc, #4	; (adr r2, 8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8003aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003abe:	bf00      	nop
 8003ac0:	08003b03 	.word	0x08003b03
 8003ac4:	08003ad9 	.word	0x08003ad9
 8003ac8:	08003aeb 	.word	0x08003aeb
 8003acc:	08003b03 	.word	0x08003b03
 8003ad0:	08003b03 	.word	0x08003b03
 8003ad4:	08003b03 	.word	0x08003b03
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3304      	adds	r3, #4
 8003adc:	2101      	movs	r1, #1
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f000 fd74 	bl	80045cc <RCCEx_PLL2_Config>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003ae8:	e00c      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	3324      	adds	r3, #36	; 0x24
 8003aee:	2101      	movs	r1, #1
 8003af0:	4618      	mov	r0, r3
 8003af2:	f000 fe1d 	bl	8004730 <RCCEx_PLL3_Config>
 8003af6:	4603      	mov	r3, r0
 8003af8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003afa:	e003      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	75fb      	strb	r3, [r7, #23]
      break;
 8003b00:	e000      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003b02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b04:	7dfb      	ldrb	r3, [r7, #23]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10a      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b0a:	4b57      	ldr	r3, [pc, #348]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0e:	f023 0207 	bic.w	r2, r3, #7
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b18:	4953      	ldr	r1, [pc, #332]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	658b      	str	r3, [r1, #88]	; 0x58
 8003b1e:	e001      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b20:	7dfb      	ldrb	r3, [r7, #23]
 8003b22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0320 	and.w	r3, r3, #32
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d04b      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b3a:	d02e      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003b3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b40:	d828      	bhi.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b46:	d02a      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b4c:	d822      	bhi.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003b4e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b52:	d026      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003b54:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b58:	d81c      	bhi.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003b5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b5e:	d010      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003b60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b64:	d816      	bhi.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d01d      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8003b6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b6e:	d111      	bne.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	3304      	adds	r3, #4
 8003b74:	2100      	movs	r1, #0
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 fd28 	bl	80045cc <RCCEx_PLL2_Config>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003b80:	e012      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	3324      	adds	r3, #36	; 0x24
 8003b86:	2102      	movs	r1, #2
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 fdd1 	bl	8004730 <RCCEx_PLL3_Config>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003b92:	e009      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	75fb      	strb	r3, [r7, #23]
      break;
 8003b98:	e006      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003b9a:	bf00      	nop
 8003b9c:	e004      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003b9e:	bf00      	nop
 8003ba0:	e002      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003ba2:	bf00      	nop
 8003ba4:	e000      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003ba6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ba8:	7dfb      	ldrb	r3, [r7, #23]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10a      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bae:	4b2e      	ldr	r3, [pc, #184]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bbc:	492a      	ldr	r1, [pc, #168]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	654b      	str	r3, [r1, #84]	; 0x54
 8003bc2:	e001      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc4:	7dfb      	ldrb	r3, [r7, #23]
 8003bc6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d04d      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bda:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003bde:	d02e      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003be0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003be4:	d828      	bhi.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bea:	d02a      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003bec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bf0:	d822      	bhi.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003bf2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bf6:	d026      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003bf8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bfc:	d81c      	bhi.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003bfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c02:	d010      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003c04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c08:	d816      	bhi.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d01d      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003c0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c12:	d111      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	3304      	adds	r3, #4
 8003c18:	2100      	movs	r1, #0
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f000 fcd6 	bl	80045cc <RCCEx_PLL2_Config>
 8003c20:	4603      	mov	r3, r0
 8003c22:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003c24:	e012      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	3324      	adds	r3, #36	; 0x24
 8003c2a:	2102      	movs	r1, #2
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f000 fd7f 	bl	8004730 <RCCEx_PLL3_Config>
 8003c32:	4603      	mov	r3, r0
 8003c34:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003c36:	e009      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	75fb      	strb	r3, [r7, #23]
      break;
 8003c3c:	e006      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003c3e:	bf00      	nop
 8003c40:	e004      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003c42:	bf00      	nop
 8003c44:	e002      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003c46:	bf00      	nop
 8003c48:	e000      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003c4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c4c:	7dfb      	ldrb	r3, [r7, #23]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10c      	bne.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c52:	4b05      	ldr	r3, [pc, #20]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c56:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c60:	4901      	ldr	r1, [pc, #4]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	658b      	str	r3, [r1, #88]	; 0x58
 8003c66:	e003      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003c68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c6c:	7dfb      	ldrb	r3, [r7, #23]
 8003c6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d04b      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c82:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003c86:	d02e      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003c88:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003c8c:	d828      	bhi.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003c8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c92:	d02a      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003c94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c98:	d822      	bhi.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003c9a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003c9e:	d026      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003ca0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003ca4:	d81c      	bhi.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003ca6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003caa:	d010      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003cac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cb0:	d816      	bhi.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d01d      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8003cb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cba:	d111      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3304      	adds	r3, #4
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 fc82 	bl	80045cc <RCCEx_PLL2_Config>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003ccc:	e012      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	3324      	adds	r3, #36	; 0x24
 8003cd2:	2102      	movs	r1, #2
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f000 fd2b 	bl	8004730 <RCCEx_PLL3_Config>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003cde:	e009      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ce4:	e006      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003ce6:	bf00      	nop
 8003ce8:	e004      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003cea:	bf00      	nop
 8003cec:	e002      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003cee:	bf00      	nop
 8003cf0:	e000      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003cf2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cf4:	7dfb      	ldrb	r3, [r7, #23]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10a      	bne.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003cfa:	4b9d      	ldr	r3, [pc, #628]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d08:	4999      	ldr	r1, [pc, #612]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	658b      	str	r3, [r1, #88]	; 0x58
 8003d0e:	e001      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d10:	7dfb      	ldrb	r3, [r7, #23]
 8003d12:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0308 	and.w	r3, r3, #8
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d01a      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d2a:	d10a      	bne.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	3324      	adds	r3, #36	; 0x24
 8003d30:	2102      	movs	r1, #2
 8003d32:	4618      	mov	r0, r3
 8003d34:	f000 fcfc 	bl	8004730 <RCCEx_PLL3_Config>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d001      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003d42:	4b8b      	ldr	r3, [pc, #556]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d46:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d50:	4987      	ldr	r1, [pc, #540]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0310 	and.w	r3, r3, #16
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d01a      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d6c:	d10a      	bne.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	3324      	adds	r3, #36	; 0x24
 8003d72:	2102      	movs	r1, #2
 8003d74:	4618      	mov	r0, r3
 8003d76:	f000 fcdb 	bl	8004730 <RCCEx_PLL3_Config>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d001      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d84:	4b7a      	ldr	r3, [pc, #488]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d92:	4977      	ldr	r1, [pc, #476]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d034      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003daa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003dae:	d01d      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003db0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003db4:	d817      	bhi.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d003      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003dba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dbe:	d009      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003dc0:	e011      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	3304      	adds	r3, #4
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 fbff 	bl	80045cc <RCCEx_PLL2_Config>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003dd2:	e00c      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	3324      	adds	r3, #36	; 0x24
 8003dd8:	2102      	movs	r1, #2
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 fca8 	bl	8004730 <RCCEx_PLL3_Config>
 8003de0:	4603      	mov	r3, r0
 8003de2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003de4:	e003      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	75fb      	strb	r3, [r7, #23]
      break;
 8003dea:	e000      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003dec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dee:	7dfb      	ldrb	r3, [r7, #23]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d10a      	bne.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003df4:	4b5e      	ldr	r3, [pc, #376]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e02:	495b      	ldr	r1, [pc, #364]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	658b      	str	r3, [r1, #88]	; 0x58
 8003e08:	e001      	b.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e0a:	7dfb      	ldrb	r3, [r7, #23]
 8003e0c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d033      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e20:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e24:	d01c      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8003e26:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e2a:	d816      	bhi.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8003e2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e30:	d003      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8003e32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e36:	d007      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8003e38:	e00f      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e3a:	4b4d      	ldr	r3, [pc, #308]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3e:	4a4c      	ldr	r2, [pc, #304]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003e46:	e00c      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	3324      	adds	r3, #36	; 0x24
 8003e4c:	2101      	movs	r1, #1
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 fc6e 	bl	8004730 <RCCEx_PLL3_Config>
 8003e54:	4603      	mov	r3, r0
 8003e56:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003e58:	e003      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	75fb      	strb	r3, [r7, #23]
      break;
 8003e5e:	e000      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8003e60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e62:	7dfb      	ldrb	r3, [r7, #23]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d10a      	bne.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e68:	4b41      	ldr	r3, [pc, #260]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e76:	493e      	ldr	r1, [pc, #248]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	654b      	str	r3, [r1, #84]	; 0x54
 8003e7c:	e001      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7e:	7dfb      	ldrb	r3, [r7, #23]
 8003e80:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d029      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8003e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e9a:	d007      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8003e9c:	e00f      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e9e:	4b34      	ldr	r3, [pc, #208]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea2:	4a33      	ldr	r2, [pc, #204]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ea8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003eaa:	e00b      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3304      	adds	r3, #4
 8003eb0:	2102      	movs	r1, #2
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 fb8a 	bl	80045cc <RCCEx_PLL2_Config>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003ebc:	e002      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	75fb      	strb	r3, [r7, #23]
      break;
 8003ec2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ec4:	7dfb      	ldrb	r3, [r7, #23]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d109      	bne.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003eca:	4b29      	ldr	r3, [pc, #164]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ece:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ed6:	4926      	ldr	r1, [pc, #152]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003edc:	e001      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ede:	7dfb      	ldrb	r3, [r7, #23]
 8003ee0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00a      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	3324      	adds	r3, #36	; 0x24
 8003ef2:	2102      	movs	r1, #2
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f000 fc1b 	bl	8004730 <RCCEx_PLL3_Config>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d033      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f18:	d017      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003f1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f1e:	d811      	bhi.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f24:	d013      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003f26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f2a:	d80b      	bhi.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d010      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8003f30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f34:	d106      	bne.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f36:	4b0e      	ldr	r3, [pc, #56]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3a:	4a0d      	ldr	r2, [pc, #52]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003f42:	e007      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	75fb      	strb	r3, [r7, #23]
      break;
 8003f48:	e004      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003f4a:	bf00      	nop
 8003f4c:	e002      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003f4e:	bf00      	nop
 8003f50:	e000      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003f52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f54:	7dfb      	ldrb	r3, [r7, #23]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10c      	bne.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f5a:	4b05      	ldr	r3, [pc, #20]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f66:	4902      	ldr	r1, [pc, #8]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	654b      	str	r3, [r1, #84]	; 0x54
 8003f6c:	e004      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8003f6e:	bf00      	nop
 8003f70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f74:	7dfb      	ldrb	r3, [r7, #23]
 8003f76:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d008      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f84:	4b31      	ldr	r3, [pc, #196]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f88:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f90:	492e      	ldr	r1, [pc, #184]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d009      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003fa2:	4b2a      	ldr	r3, [pc, #168]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003fb0:	4926      	ldr	r1, [pc, #152]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d008      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003fc2:	4b22      	ldr	r3, [pc, #136]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003fc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fc6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fce:	491f      	ldr	r1, [pc, #124]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00d      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003fe0:	4b1a      	ldr	r3, [pc, #104]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	4a19      	ldr	r2, [pc, #100]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003fe6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003fea:	6113      	str	r3, [r2, #16]
 8003fec:	4b17      	ldr	r3, [pc, #92]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003fee:	691a      	ldr	r2, [r3, #16]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003ff6:	4915      	ldr	r1, [pc, #84]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	da08      	bge.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004004:	4b11      	ldr	r3, [pc, #68]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004008:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004010:	490e      	ldr	r1, [pc, #56]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004012:	4313      	orrs	r3, r2
 8004014:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d009      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004022:	4b0a      	ldr	r3, [pc, #40]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004026:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004030:	4906      	ldr	r1, [pc, #24]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004032:	4313      	orrs	r3, r2
 8004034:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004036:	7dbb      	ldrb	r3, [r7, #22]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d101      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800403c:	2300      	movs	r3, #0
 800403e:	e000      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
}
 8004042:	4618      	mov	r0, r3
 8004044:	3718      	adds	r7, #24
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	58024400 	.word	0x58024400

08004050 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004054:	f7ff f85a 	bl	800310c <HAL_RCC_GetHCLKFreq>
 8004058:	4602      	mov	r2, r0
 800405a:	4b06      	ldr	r3, [pc, #24]	; (8004074 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	091b      	lsrs	r3, r3, #4
 8004060:	f003 0307 	and.w	r3, r3, #7
 8004064:	4904      	ldr	r1, [pc, #16]	; (8004078 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004066:	5ccb      	ldrb	r3, [r1, r3]
 8004068:	f003 031f 	and.w	r3, r3, #31
 800406c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004070:	4618      	mov	r0, r3
 8004072:	bd80      	pop	{r7, pc}
 8004074:	58024400 	.word	0x58024400
 8004078:	08005ff8 	.word	0x08005ff8

0800407c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800407c:	b480      	push	{r7}
 800407e:	b089      	sub	sp, #36	; 0x24
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004084:	4ba1      	ldr	r3, [pc, #644]	; (800430c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004088:	f003 0303 	and.w	r3, r3, #3
 800408c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800408e:	4b9f      	ldr	r3, [pc, #636]	; (800430c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004092:	0b1b      	lsrs	r3, r3, #12
 8004094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004098:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800409a:	4b9c      	ldr	r3, [pc, #624]	; (800430c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800409c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409e:	091b      	lsrs	r3, r3, #4
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80040a6:	4b99      	ldr	r3, [pc, #612]	; (800430c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040aa:	08db      	lsrs	r3, r3, #3
 80040ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	fb02 f303 	mul.w	r3, r2, r3
 80040b6:	ee07 3a90 	vmov	s15, r3
 80040ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f000 8111 	beq.w	80042ec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	f000 8083 	beq.w	80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	f200 80a1 	bhi.w	800421c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d003      	beq.n	80040e8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d056      	beq.n	8004194 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80040e6:	e099      	b.n	800421c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80040e8:	4b88      	ldr	r3, [pc, #544]	; (800430c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0320 	and.w	r3, r3, #32
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d02d      	beq.n	8004150 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80040f4:	4b85      	ldr	r3, [pc, #532]	; (800430c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	08db      	lsrs	r3, r3, #3
 80040fa:	f003 0303 	and.w	r3, r3, #3
 80040fe:	4a84      	ldr	r2, [pc, #528]	; (8004310 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004100:	fa22 f303 	lsr.w	r3, r2, r3
 8004104:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	ee07 3a90 	vmov	s15, r3
 800410c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	ee07 3a90 	vmov	s15, r3
 8004116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800411a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800411e:	4b7b      	ldr	r3, [pc, #492]	; (800430c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004126:	ee07 3a90 	vmov	s15, r3
 800412a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800412e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004132:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004314 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800413a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800413e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800414a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800414e:	e087      	b.n	8004260 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	ee07 3a90 	vmov	s15, r3
 8004156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800415a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004318 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800415e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004162:	4b6a      	ldr	r3, [pc, #424]	; (800430c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800416a:	ee07 3a90 	vmov	s15, r3
 800416e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004172:	ed97 6a03 	vldr	s12, [r7, #12]
 8004176:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004314 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800417a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800417e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004182:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800418a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800418e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004192:	e065      	b.n	8004260 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	ee07 3a90 	vmov	s15, r3
 800419a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800419e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800431c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80041a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041a6:	4b59      	ldr	r3, [pc, #356]	; (800430c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ae:	ee07 3a90 	vmov	s15, r3
 80041b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80041ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004314 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80041be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80041d6:	e043      	b.n	8004260 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	ee07 3a90 	vmov	s15, r3
 80041de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004320 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80041e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041ea:	4b48      	ldr	r3, [pc, #288]	; (800430c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041f2:	ee07 3a90 	vmov	s15, r3
 80041f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80041fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004314 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800420a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800420e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004216:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800421a:	e021      	b.n	8004260 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	ee07 3a90 	vmov	s15, r3
 8004222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004226:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800431c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800422a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800422e:	4b37      	ldr	r3, [pc, #220]	; (800430c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004236:	ee07 3a90 	vmov	s15, r3
 800423a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800423e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004242:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004314 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800424a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800424e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800425a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800425e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004260:	4b2a      	ldr	r3, [pc, #168]	; (800430c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004264:	0a5b      	lsrs	r3, r3, #9
 8004266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800426a:	ee07 3a90 	vmov	s15, r3
 800426e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004272:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004276:	ee37 7a87 	vadd.f32	s14, s15, s14
 800427a:	edd7 6a07 	vldr	s13, [r7, #28]
 800427e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004282:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004286:	ee17 2a90 	vmov	r2, s15
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800428e:	4b1f      	ldr	r3, [pc, #124]	; (800430c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004292:	0c1b      	lsrs	r3, r3, #16
 8004294:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004298:	ee07 3a90 	vmov	s15, r3
 800429c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80042ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042b4:	ee17 2a90 	vmov	r2, s15
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80042bc:	4b13      	ldr	r3, [pc, #76]	; (800430c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c0:	0e1b      	lsrs	r3, r3, #24
 80042c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042c6:	ee07 3a90 	vmov	s15, r3
 80042ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80042da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042e2:	ee17 2a90 	vmov	r2, s15
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80042ea:	e008      	b.n	80042fe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	609a      	str	r2, [r3, #8]
}
 80042fe:	bf00      	nop
 8004300:	3724      	adds	r7, #36	; 0x24
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	58024400 	.word	0x58024400
 8004310:	03d09000 	.word	0x03d09000
 8004314:	46000000 	.word	0x46000000
 8004318:	4c742400 	.word	0x4c742400
 800431c:	4a742400 	.word	0x4a742400
 8004320:	4af42400 	.word	0x4af42400

08004324 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004324:	b480      	push	{r7}
 8004326:	b089      	sub	sp, #36	; 0x24
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800432c:	4ba1      	ldr	r3, [pc, #644]	; (80045b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800432e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004330:	f003 0303 	and.w	r3, r3, #3
 8004334:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004336:	4b9f      	ldr	r3, [pc, #636]	; (80045b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433a:	0d1b      	lsrs	r3, r3, #20
 800433c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004340:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004342:	4b9c      	ldr	r3, [pc, #624]	; (80045b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004346:	0a1b      	lsrs	r3, r3, #8
 8004348:	f003 0301 	and.w	r3, r3, #1
 800434c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800434e:	4b99      	ldr	r3, [pc, #612]	; (80045b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004352:	08db      	lsrs	r3, r3, #3
 8004354:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	fb02 f303 	mul.w	r3, r2, r3
 800435e:	ee07 3a90 	vmov	s15, r3
 8004362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004366:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	2b00      	cmp	r3, #0
 800436e:	f000 8111 	beq.w	8004594 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	2b02      	cmp	r3, #2
 8004376:	f000 8083 	beq.w	8004480 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	2b02      	cmp	r3, #2
 800437e:	f200 80a1 	bhi.w	80044c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d003      	beq.n	8004390 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d056      	beq.n	800443c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800438e:	e099      	b.n	80044c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004390:	4b88      	ldr	r3, [pc, #544]	; (80045b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0320 	and.w	r3, r3, #32
 8004398:	2b00      	cmp	r3, #0
 800439a:	d02d      	beq.n	80043f8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800439c:	4b85      	ldr	r3, [pc, #532]	; (80045b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	08db      	lsrs	r3, r3, #3
 80043a2:	f003 0303 	and.w	r3, r3, #3
 80043a6:	4a84      	ldr	r2, [pc, #528]	; (80045b8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80043a8:	fa22 f303 	lsr.w	r3, r2, r3
 80043ac:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	ee07 3a90 	vmov	s15, r3
 80043b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	ee07 3a90 	vmov	s15, r3
 80043be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043c6:	4b7b      	ldr	r3, [pc, #492]	; (80045b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ce:	ee07 3a90 	vmov	s15, r3
 80043d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80043da:	eddf 5a78 	vldr	s11, [pc, #480]	; 80045bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80043de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043f2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80043f6:	e087      	b.n	8004508 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	ee07 3a90 	vmov	s15, r3
 80043fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004402:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80045c0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800440a:	4b6a      	ldr	r3, [pc, #424]	; (80045b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004412:	ee07 3a90 	vmov	s15, r3
 8004416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800441a:	ed97 6a03 	vldr	s12, [r7, #12]
 800441e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80045bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800442a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800442e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004436:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800443a:	e065      	b.n	8004508 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	ee07 3a90 	vmov	s15, r3
 8004442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004446:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80045c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800444a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800444e:	4b59      	ldr	r3, [pc, #356]	; (80045b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004456:	ee07 3a90 	vmov	s15, r3
 800445a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800445e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004462:	eddf 5a56 	vldr	s11, [pc, #344]	; 80045bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800446a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800446e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800447a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800447e:	e043      	b.n	8004508 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	ee07 3a90 	vmov	s15, r3
 8004486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800448a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80045c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800448e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004492:	4b48      	ldr	r3, [pc, #288]	; (80045b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800449a:	ee07 3a90 	vmov	s15, r3
 800449e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80044a6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80045bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80044aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044c2:	e021      	b.n	8004508 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	ee07 3a90 	vmov	s15, r3
 80044ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80045c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80044d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044d6:	4b37      	ldr	r3, [pc, #220]	; (80045b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044de:	ee07 3a90 	vmov	s15, r3
 80044e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80044ea:	eddf 5a34 	vldr	s11, [pc, #208]	; 80045bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80044ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004502:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004506:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004508:	4b2a      	ldr	r3, [pc, #168]	; (80045b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800450a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450c:	0a5b      	lsrs	r3, r3, #9
 800450e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004512:	ee07 3a90 	vmov	s15, r3
 8004516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800451a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800451e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004522:	edd7 6a07 	vldr	s13, [r7, #28]
 8004526:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800452a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800452e:	ee17 2a90 	vmov	r2, s15
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004536:	4b1f      	ldr	r3, [pc, #124]	; (80045b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453a:	0c1b      	lsrs	r3, r3, #16
 800453c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004540:	ee07 3a90 	vmov	s15, r3
 8004544:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004548:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800454c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004550:	edd7 6a07 	vldr	s13, [r7, #28]
 8004554:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004558:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800455c:	ee17 2a90 	vmov	r2, s15
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004564:	4b13      	ldr	r3, [pc, #76]	; (80045b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004568:	0e1b      	lsrs	r3, r3, #24
 800456a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800456e:	ee07 3a90 	vmov	s15, r3
 8004572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004576:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800457a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800457e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004582:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004586:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800458a:	ee17 2a90 	vmov	r2, s15
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004592:	e008      	b.n	80045a6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	609a      	str	r2, [r3, #8]
}
 80045a6:	bf00      	nop
 80045a8:	3724      	adds	r7, #36	; 0x24
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	58024400 	.word	0x58024400
 80045b8:	03d09000 	.word	0x03d09000
 80045bc:	46000000 	.word	0x46000000
 80045c0:	4c742400 	.word	0x4c742400
 80045c4:	4a742400 	.word	0x4a742400
 80045c8:	4af42400 	.word	0x4af42400

080045cc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045d6:	2300      	movs	r3, #0
 80045d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80045da:	4b53      	ldr	r3, [pc, #332]	; (8004728 <RCCEx_PLL2_Config+0x15c>)
 80045dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045de:	f003 0303 	and.w	r3, r3, #3
 80045e2:	2b03      	cmp	r3, #3
 80045e4:	d101      	bne.n	80045ea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e099      	b.n	800471e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80045ea:	4b4f      	ldr	r3, [pc, #316]	; (8004728 <RCCEx_PLL2_Config+0x15c>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a4e      	ldr	r2, [pc, #312]	; (8004728 <RCCEx_PLL2_Config+0x15c>)
 80045f0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045f6:	f7fc fd43 	bl	8001080 <HAL_GetTick>
 80045fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80045fc:	e008      	b.n	8004610 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80045fe:	f7fc fd3f 	bl	8001080 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d901      	bls.n	8004610 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e086      	b.n	800471e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004610:	4b45      	ldr	r3, [pc, #276]	; (8004728 <RCCEx_PLL2_Config+0x15c>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1f0      	bne.n	80045fe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800461c:	4b42      	ldr	r3, [pc, #264]	; (8004728 <RCCEx_PLL2_Config+0x15c>)
 800461e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004620:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	031b      	lsls	r3, r3, #12
 800462a:	493f      	ldr	r1, [pc, #252]	; (8004728 <RCCEx_PLL2_Config+0x15c>)
 800462c:	4313      	orrs	r3, r2
 800462e:	628b      	str	r3, [r1, #40]	; 0x28
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	3b01      	subs	r3, #1
 8004636:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	3b01      	subs	r3, #1
 8004640:	025b      	lsls	r3, r3, #9
 8004642:	b29b      	uxth	r3, r3
 8004644:	431a      	orrs	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	3b01      	subs	r3, #1
 800464c:	041b      	lsls	r3, r3, #16
 800464e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004652:	431a      	orrs	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	3b01      	subs	r3, #1
 800465a:	061b      	lsls	r3, r3, #24
 800465c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004660:	4931      	ldr	r1, [pc, #196]	; (8004728 <RCCEx_PLL2_Config+0x15c>)
 8004662:	4313      	orrs	r3, r2
 8004664:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004666:	4b30      	ldr	r3, [pc, #192]	; (8004728 <RCCEx_PLL2_Config+0x15c>)
 8004668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	492d      	ldr	r1, [pc, #180]	; (8004728 <RCCEx_PLL2_Config+0x15c>)
 8004674:	4313      	orrs	r3, r2
 8004676:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004678:	4b2b      	ldr	r3, [pc, #172]	; (8004728 <RCCEx_PLL2_Config+0x15c>)
 800467a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467c:	f023 0220 	bic.w	r2, r3, #32
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	4928      	ldr	r1, [pc, #160]	; (8004728 <RCCEx_PLL2_Config+0x15c>)
 8004686:	4313      	orrs	r3, r2
 8004688:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800468a:	4b27      	ldr	r3, [pc, #156]	; (8004728 <RCCEx_PLL2_Config+0x15c>)
 800468c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468e:	4a26      	ldr	r2, [pc, #152]	; (8004728 <RCCEx_PLL2_Config+0x15c>)
 8004690:	f023 0310 	bic.w	r3, r3, #16
 8004694:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004696:	4b24      	ldr	r3, [pc, #144]	; (8004728 <RCCEx_PLL2_Config+0x15c>)
 8004698:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800469a:	4b24      	ldr	r3, [pc, #144]	; (800472c <RCCEx_PLL2_Config+0x160>)
 800469c:	4013      	ands	r3, r2
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	69d2      	ldr	r2, [r2, #28]
 80046a2:	00d2      	lsls	r2, r2, #3
 80046a4:	4920      	ldr	r1, [pc, #128]	; (8004728 <RCCEx_PLL2_Config+0x15c>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80046aa:	4b1f      	ldr	r3, [pc, #124]	; (8004728 <RCCEx_PLL2_Config+0x15c>)
 80046ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ae:	4a1e      	ldr	r2, [pc, #120]	; (8004728 <RCCEx_PLL2_Config+0x15c>)
 80046b0:	f043 0310 	orr.w	r3, r3, #16
 80046b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d106      	bne.n	80046ca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80046bc:	4b1a      	ldr	r3, [pc, #104]	; (8004728 <RCCEx_PLL2_Config+0x15c>)
 80046be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c0:	4a19      	ldr	r2, [pc, #100]	; (8004728 <RCCEx_PLL2_Config+0x15c>)
 80046c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80046c8:	e00f      	b.n	80046ea <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d106      	bne.n	80046de <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80046d0:	4b15      	ldr	r3, [pc, #84]	; (8004728 <RCCEx_PLL2_Config+0x15c>)
 80046d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d4:	4a14      	ldr	r2, [pc, #80]	; (8004728 <RCCEx_PLL2_Config+0x15c>)
 80046d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80046dc:	e005      	b.n	80046ea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80046de:	4b12      	ldr	r3, [pc, #72]	; (8004728 <RCCEx_PLL2_Config+0x15c>)
 80046e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e2:	4a11      	ldr	r2, [pc, #68]	; (8004728 <RCCEx_PLL2_Config+0x15c>)
 80046e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80046e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80046ea:	4b0f      	ldr	r3, [pc, #60]	; (8004728 <RCCEx_PLL2_Config+0x15c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a0e      	ldr	r2, [pc, #56]	; (8004728 <RCCEx_PLL2_Config+0x15c>)
 80046f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046f6:	f7fc fcc3 	bl	8001080 <HAL_GetTick>
 80046fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80046fc:	e008      	b.n	8004710 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80046fe:	f7fc fcbf 	bl	8001080 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d901      	bls.n	8004710 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e006      	b.n	800471e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004710:	4b05      	ldr	r3, [pc, #20]	; (8004728 <RCCEx_PLL2_Config+0x15c>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d0f0      	beq.n	80046fe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800471c:	7bfb      	ldrb	r3, [r7, #15]
}
 800471e:	4618      	mov	r0, r3
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	58024400 	.word	0x58024400
 800472c:	ffff0007 	.word	0xffff0007

08004730 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800473a:	2300      	movs	r3, #0
 800473c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800473e:	4b53      	ldr	r3, [pc, #332]	; (800488c <RCCEx_PLL3_Config+0x15c>)
 8004740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004742:	f003 0303 	and.w	r3, r3, #3
 8004746:	2b03      	cmp	r3, #3
 8004748:	d101      	bne.n	800474e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e099      	b.n	8004882 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800474e:	4b4f      	ldr	r3, [pc, #316]	; (800488c <RCCEx_PLL3_Config+0x15c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a4e      	ldr	r2, [pc, #312]	; (800488c <RCCEx_PLL3_Config+0x15c>)
 8004754:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004758:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800475a:	f7fc fc91 	bl	8001080 <HAL_GetTick>
 800475e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004760:	e008      	b.n	8004774 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004762:	f7fc fc8d 	bl	8001080 <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	2b02      	cmp	r3, #2
 800476e:	d901      	bls.n	8004774 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e086      	b.n	8004882 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004774:	4b45      	ldr	r3, [pc, #276]	; (800488c <RCCEx_PLL3_Config+0x15c>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1f0      	bne.n	8004762 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004780:	4b42      	ldr	r3, [pc, #264]	; (800488c <RCCEx_PLL3_Config+0x15c>)
 8004782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004784:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	051b      	lsls	r3, r3, #20
 800478e:	493f      	ldr	r1, [pc, #252]	; (800488c <RCCEx_PLL3_Config+0x15c>)
 8004790:	4313      	orrs	r3, r2
 8004792:	628b      	str	r3, [r1, #40]	; 0x28
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	3b01      	subs	r3, #1
 800479a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	3b01      	subs	r3, #1
 80047a4:	025b      	lsls	r3, r3, #9
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	431a      	orrs	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	3b01      	subs	r3, #1
 80047b0:	041b      	lsls	r3, r3, #16
 80047b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80047b6:	431a      	orrs	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	3b01      	subs	r3, #1
 80047be:	061b      	lsls	r3, r3, #24
 80047c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80047c4:	4931      	ldr	r1, [pc, #196]	; (800488c <RCCEx_PLL3_Config+0x15c>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80047ca:	4b30      	ldr	r3, [pc, #192]	; (800488c <RCCEx_PLL3_Config+0x15c>)
 80047cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	492d      	ldr	r1, [pc, #180]	; (800488c <RCCEx_PLL3_Config+0x15c>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80047dc:	4b2b      	ldr	r3, [pc, #172]	; (800488c <RCCEx_PLL3_Config+0x15c>)
 80047de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	4928      	ldr	r1, [pc, #160]	; (800488c <RCCEx_PLL3_Config+0x15c>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80047ee:	4b27      	ldr	r3, [pc, #156]	; (800488c <RCCEx_PLL3_Config+0x15c>)
 80047f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f2:	4a26      	ldr	r2, [pc, #152]	; (800488c <RCCEx_PLL3_Config+0x15c>)
 80047f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80047fa:	4b24      	ldr	r3, [pc, #144]	; (800488c <RCCEx_PLL3_Config+0x15c>)
 80047fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047fe:	4b24      	ldr	r3, [pc, #144]	; (8004890 <RCCEx_PLL3_Config+0x160>)
 8004800:	4013      	ands	r3, r2
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	69d2      	ldr	r2, [r2, #28]
 8004806:	00d2      	lsls	r2, r2, #3
 8004808:	4920      	ldr	r1, [pc, #128]	; (800488c <RCCEx_PLL3_Config+0x15c>)
 800480a:	4313      	orrs	r3, r2
 800480c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800480e:	4b1f      	ldr	r3, [pc, #124]	; (800488c <RCCEx_PLL3_Config+0x15c>)
 8004810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004812:	4a1e      	ldr	r2, [pc, #120]	; (800488c <RCCEx_PLL3_Config+0x15c>)
 8004814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004818:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d106      	bne.n	800482e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004820:	4b1a      	ldr	r3, [pc, #104]	; (800488c <RCCEx_PLL3_Config+0x15c>)
 8004822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004824:	4a19      	ldr	r2, [pc, #100]	; (800488c <RCCEx_PLL3_Config+0x15c>)
 8004826:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800482a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800482c:	e00f      	b.n	800484e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d106      	bne.n	8004842 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004834:	4b15      	ldr	r3, [pc, #84]	; (800488c <RCCEx_PLL3_Config+0x15c>)
 8004836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004838:	4a14      	ldr	r2, [pc, #80]	; (800488c <RCCEx_PLL3_Config+0x15c>)
 800483a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800483e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004840:	e005      	b.n	800484e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004842:	4b12      	ldr	r3, [pc, #72]	; (800488c <RCCEx_PLL3_Config+0x15c>)
 8004844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004846:	4a11      	ldr	r2, [pc, #68]	; (800488c <RCCEx_PLL3_Config+0x15c>)
 8004848:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800484c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800484e:	4b0f      	ldr	r3, [pc, #60]	; (800488c <RCCEx_PLL3_Config+0x15c>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a0e      	ldr	r2, [pc, #56]	; (800488c <RCCEx_PLL3_Config+0x15c>)
 8004854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004858:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800485a:	f7fc fc11 	bl	8001080 <HAL_GetTick>
 800485e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004860:	e008      	b.n	8004874 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004862:	f7fc fc0d 	bl	8001080 <HAL_GetTick>
 8004866:	4602      	mov	r2, r0
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	2b02      	cmp	r3, #2
 800486e:	d901      	bls.n	8004874 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e006      	b.n	8004882 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004874:	4b05      	ldr	r3, [pc, #20]	; (800488c <RCCEx_PLL3_Config+0x15c>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d0f0      	beq.n	8004862 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004880:	7bfb      	ldrb	r3, [r7, #15]
}
 8004882:	4618      	mov	r0, r3
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	58024400 	.word	0x58024400
 8004890:	ffff0007 	.word	0xffff0007

08004894 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e042      	b.n	800492c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d106      	bne.n	80048be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f7fc fa19 	bl	8000cf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2224      	movs	r2, #36	; 0x24
 80048c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f022 0201 	bic.w	r2, r2, #1
 80048d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f82c 	bl	8004934 <UART_SetConfig>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d101      	bne.n	80048e6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e022      	b.n	800492c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d002      	beq.n	80048f4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 fd88 	bl	8005404 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	685a      	ldr	r2, [r3, #4]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004902:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	689a      	ldr	r2, [r3, #8]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004912:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f042 0201 	orr.w	r2, r2, #1
 8004922:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 fe0f 	bl	8005548 <UART_CheckIdleState>
 800492a:	4603      	mov	r3, r0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3708      	adds	r7, #8
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004934:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004938:	b092      	sub	sp, #72	; 0x48
 800493a:	af00      	add	r7, sp, #0
 800493c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800493e:	2300      	movs	r3, #0
 8004940:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	689a      	ldr	r2, [r3, #8]
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	431a      	orrs	r2, r3
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	431a      	orrs	r2, r3
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	69db      	ldr	r3, [r3, #28]
 8004958:	4313      	orrs	r3, r2
 800495a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	4bbe      	ldr	r3, [pc, #760]	; (8004c5c <UART_SetConfig+0x328>)
 8004964:	4013      	ands	r3, r2
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	6812      	ldr	r2, [r2, #0]
 800496a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800496c:	430b      	orrs	r3, r1
 800496e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	68da      	ldr	r2, [r3, #12]
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	430a      	orrs	r2, r1
 8004984:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4ab3      	ldr	r2, [pc, #716]	; (8004c60 <UART_SetConfig+0x32c>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d004      	beq.n	80049a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800499c:	4313      	orrs	r3, r2
 800499e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	689a      	ldr	r2, [r3, #8]
 80049a6:	4baf      	ldr	r3, [pc, #700]	; (8004c64 <UART_SetConfig+0x330>)
 80049a8:	4013      	ands	r3, r2
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	6812      	ldr	r2, [r2, #0]
 80049ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80049b0:	430b      	orrs	r3, r1
 80049b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ba:	f023 010f 	bic.w	r1, r3, #15
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	430a      	orrs	r2, r1
 80049c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4aa6      	ldr	r2, [pc, #664]	; (8004c68 <UART_SetConfig+0x334>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d177      	bne.n	8004ac4 <UART_SetConfig+0x190>
 80049d4:	4ba5      	ldr	r3, [pc, #660]	; (8004c6c <UART_SetConfig+0x338>)
 80049d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049dc:	2b28      	cmp	r3, #40	; 0x28
 80049de:	d86d      	bhi.n	8004abc <UART_SetConfig+0x188>
 80049e0:	a201      	add	r2, pc, #4	; (adr r2, 80049e8 <UART_SetConfig+0xb4>)
 80049e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e6:	bf00      	nop
 80049e8:	08004a8d 	.word	0x08004a8d
 80049ec:	08004abd 	.word	0x08004abd
 80049f0:	08004abd 	.word	0x08004abd
 80049f4:	08004abd 	.word	0x08004abd
 80049f8:	08004abd 	.word	0x08004abd
 80049fc:	08004abd 	.word	0x08004abd
 8004a00:	08004abd 	.word	0x08004abd
 8004a04:	08004abd 	.word	0x08004abd
 8004a08:	08004a95 	.word	0x08004a95
 8004a0c:	08004abd 	.word	0x08004abd
 8004a10:	08004abd 	.word	0x08004abd
 8004a14:	08004abd 	.word	0x08004abd
 8004a18:	08004abd 	.word	0x08004abd
 8004a1c:	08004abd 	.word	0x08004abd
 8004a20:	08004abd 	.word	0x08004abd
 8004a24:	08004abd 	.word	0x08004abd
 8004a28:	08004a9d 	.word	0x08004a9d
 8004a2c:	08004abd 	.word	0x08004abd
 8004a30:	08004abd 	.word	0x08004abd
 8004a34:	08004abd 	.word	0x08004abd
 8004a38:	08004abd 	.word	0x08004abd
 8004a3c:	08004abd 	.word	0x08004abd
 8004a40:	08004abd 	.word	0x08004abd
 8004a44:	08004abd 	.word	0x08004abd
 8004a48:	08004aa5 	.word	0x08004aa5
 8004a4c:	08004abd 	.word	0x08004abd
 8004a50:	08004abd 	.word	0x08004abd
 8004a54:	08004abd 	.word	0x08004abd
 8004a58:	08004abd 	.word	0x08004abd
 8004a5c:	08004abd 	.word	0x08004abd
 8004a60:	08004abd 	.word	0x08004abd
 8004a64:	08004abd 	.word	0x08004abd
 8004a68:	08004aad 	.word	0x08004aad
 8004a6c:	08004abd 	.word	0x08004abd
 8004a70:	08004abd 	.word	0x08004abd
 8004a74:	08004abd 	.word	0x08004abd
 8004a78:	08004abd 	.word	0x08004abd
 8004a7c:	08004abd 	.word	0x08004abd
 8004a80:	08004abd 	.word	0x08004abd
 8004a84:	08004abd 	.word	0x08004abd
 8004a88:	08004ab5 	.word	0x08004ab5
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a92:	e222      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004a94:	2304      	movs	r3, #4
 8004a96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a9a:	e21e      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004a9c:	2308      	movs	r3, #8
 8004a9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004aa2:	e21a      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004aa4:	2310      	movs	r3, #16
 8004aa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004aaa:	e216      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004aac:	2320      	movs	r3, #32
 8004aae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ab2:	e212      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004ab4:	2340      	movs	r3, #64	; 0x40
 8004ab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004aba:	e20e      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004abc:	2380      	movs	r3, #128	; 0x80
 8004abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ac2:	e20a      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a69      	ldr	r2, [pc, #420]	; (8004c70 <UART_SetConfig+0x33c>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d130      	bne.n	8004b30 <UART_SetConfig+0x1fc>
 8004ace:	4b67      	ldr	r3, [pc, #412]	; (8004c6c <UART_SetConfig+0x338>)
 8004ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad2:	f003 0307 	and.w	r3, r3, #7
 8004ad6:	2b05      	cmp	r3, #5
 8004ad8:	d826      	bhi.n	8004b28 <UART_SetConfig+0x1f4>
 8004ada:	a201      	add	r2, pc, #4	; (adr r2, 8004ae0 <UART_SetConfig+0x1ac>)
 8004adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae0:	08004af9 	.word	0x08004af9
 8004ae4:	08004b01 	.word	0x08004b01
 8004ae8:	08004b09 	.word	0x08004b09
 8004aec:	08004b11 	.word	0x08004b11
 8004af0:	08004b19 	.word	0x08004b19
 8004af4:	08004b21 	.word	0x08004b21
 8004af8:	2300      	movs	r3, #0
 8004afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004afe:	e1ec      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004b00:	2304      	movs	r3, #4
 8004b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b06:	e1e8      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004b08:	2308      	movs	r3, #8
 8004b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b0e:	e1e4      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004b10:	2310      	movs	r3, #16
 8004b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b16:	e1e0      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004b18:	2320      	movs	r3, #32
 8004b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b1e:	e1dc      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004b20:	2340      	movs	r3, #64	; 0x40
 8004b22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b26:	e1d8      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004b28:	2380      	movs	r3, #128	; 0x80
 8004b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b2e:	e1d4      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a4f      	ldr	r2, [pc, #316]	; (8004c74 <UART_SetConfig+0x340>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d130      	bne.n	8004b9c <UART_SetConfig+0x268>
 8004b3a:	4b4c      	ldr	r3, [pc, #304]	; (8004c6c <UART_SetConfig+0x338>)
 8004b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b3e:	f003 0307 	and.w	r3, r3, #7
 8004b42:	2b05      	cmp	r3, #5
 8004b44:	d826      	bhi.n	8004b94 <UART_SetConfig+0x260>
 8004b46:	a201      	add	r2, pc, #4	; (adr r2, 8004b4c <UART_SetConfig+0x218>)
 8004b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b4c:	08004b65 	.word	0x08004b65
 8004b50:	08004b6d 	.word	0x08004b6d
 8004b54:	08004b75 	.word	0x08004b75
 8004b58:	08004b7d 	.word	0x08004b7d
 8004b5c:	08004b85 	.word	0x08004b85
 8004b60:	08004b8d 	.word	0x08004b8d
 8004b64:	2300      	movs	r3, #0
 8004b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b6a:	e1b6      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004b6c:	2304      	movs	r3, #4
 8004b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b72:	e1b2      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004b74:	2308      	movs	r3, #8
 8004b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b7a:	e1ae      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004b7c:	2310      	movs	r3, #16
 8004b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b82:	e1aa      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004b84:	2320      	movs	r3, #32
 8004b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b8a:	e1a6      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004b8c:	2340      	movs	r3, #64	; 0x40
 8004b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b92:	e1a2      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004b94:	2380      	movs	r3, #128	; 0x80
 8004b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b9a:	e19e      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a35      	ldr	r2, [pc, #212]	; (8004c78 <UART_SetConfig+0x344>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d130      	bne.n	8004c08 <UART_SetConfig+0x2d4>
 8004ba6:	4b31      	ldr	r3, [pc, #196]	; (8004c6c <UART_SetConfig+0x338>)
 8004ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004baa:	f003 0307 	and.w	r3, r3, #7
 8004bae:	2b05      	cmp	r3, #5
 8004bb0:	d826      	bhi.n	8004c00 <UART_SetConfig+0x2cc>
 8004bb2:	a201      	add	r2, pc, #4	; (adr r2, 8004bb8 <UART_SetConfig+0x284>)
 8004bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb8:	08004bd1 	.word	0x08004bd1
 8004bbc:	08004bd9 	.word	0x08004bd9
 8004bc0:	08004be1 	.word	0x08004be1
 8004bc4:	08004be9 	.word	0x08004be9
 8004bc8:	08004bf1 	.word	0x08004bf1
 8004bcc:	08004bf9 	.word	0x08004bf9
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bd6:	e180      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004bd8:	2304      	movs	r3, #4
 8004bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bde:	e17c      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004be0:	2308      	movs	r3, #8
 8004be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004be6:	e178      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004be8:	2310      	movs	r3, #16
 8004bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bee:	e174      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004bf0:	2320      	movs	r3, #32
 8004bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bf6:	e170      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004bf8:	2340      	movs	r3, #64	; 0x40
 8004bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bfe:	e16c      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004c00:	2380      	movs	r3, #128	; 0x80
 8004c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c06:	e168      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a1b      	ldr	r2, [pc, #108]	; (8004c7c <UART_SetConfig+0x348>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d142      	bne.n	8004c98 <UART_SetConfig+0x364>
 8004c12:	4b16      	ldr	r3, [pc, #88]	; (8004c6c <UART_SetConfig+0x338>)
 8004c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c16:	f003 0307 	and.w	r3, r3, #7
 8004c1a:	2b05      	cmp	r3, #5
 8004c1c:	d838      	bhi.n	8004c90 <UART_SetConfig+0x35c>
 8004c1e:	a201      	add	r2, pc, #4	; (adr r2, 8004c24 <UART_SetConfig+0x2f0>)
 8004c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c24:	08004c3d 	.word	0x08004c3d
 8004c28:	08004c45 	.word	0x08004c45
 8004c2c:	08004c4d 	.word	0x08004c4d
 8004c30:	08004c55 	.word	0x08004c55
 8004c34:	08004c81 	.word	0x08004c81
 8004c38:	08004c89 	.word	0x08004c89
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c42:	e14a      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004c44:	2304      	movs	r3, #4
 8004c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c4a:	e146      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004c4c:	2308      	movs	r3, #8
 8004c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c52:	e142      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004c54:	2310      	movs	r3, #16
 8004c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c5a:	e13e      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004c5c:	cfff69f3 	.word	0xcfff69f3
 8004c60:	58000c00 	.word	0x58000c00
 8004c64:	11fff4ff 	.word	0x11fff4ff
 8004c68:	40011000 	.word	0x40011000
 8004c6c:	58024400 	.word	0x58024400
 8004c70:	40004400 	.word	0x40004400
 8004c74:	40004800 	.word	0x40004800
 8004c78:	40004c00 	.word	0x40004c00
 8004c7c:	40005000 	.word	0x40005000
 8004c80:	2320      	movs	r3, #32
 8004c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c86:	e128      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004c88:	2340      	movs	r3, #64	; 0x40
 8004c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c8e:	e124      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004c90:	2380      	movs	r3, #128	; 0x80
 8004c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c96:	e120      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4acb      	ldr	r2, [pc, #812]	; (8004fcc <UART_SetConfig+0x698>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d176      	bne.n	8004d90 <UART_SetConfig+0x45c>
 8004ca2:	4bcb      	ldr	r3, [pc, #812]	; (8004fd0 <UART_SetConfig+0x69c>)
 8004ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004caa:	2b28      	cmp	r3, #40	; 0x28
 8004cac:	d86c      	bhi.n	8004d88 <UART_SetConfig+0x454>
 8004cae:	a201      	add	r2, pc, #4	; (adr r2, 8004cb4 <UART_SetConfig+0x380>)
 8004cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb4:	08004d59 	.word	0x08004d59
 8004cb8:	08004d89 	.word	0x08004d89
 8004cbc:	08004d89 	.word	0x08004d89
 8004cc0:	08004d89 	.word	0x08004d89
 8004cc4:	08004d89 	.word	0x08004d89
 8004cc8:	08004d89 	.word	0x08004d89
 8004ccc:	08004d89 	.word	0x08004d89
 8004cd0:	08004d89 	.word	0x08004d89
 8004cd4:	08004d61 	.word	0x08004d61
 8004cd8:	08004d89 	.word	0x08004d89
 8004cdc:	08004d89 	.word	0x08004d89
 8004ce0:	08004d89 	.word	0x08004d89
 8004ce4:	08004d89 	.word	0x08004d89
 8004ce8:	08004d89 	.word	0x08004d89
 8004cec:	08004d89 	.word	0x08004d89
 8004cf0:	08004d89 	.word	0x08004d89
 8004cf4:	08004d69 	.word	0x08004d69
 8004cf8:	08004d89 	.word	0x08004d89
 8004cfc:	08004d89 	.word	0x08004d89
 8004d00:	08004d89 	.word	0x08004d89
 8004d04:	08004d89 	.word	0x08004d89
 8004d08:	08004d89 	.word	0x08004d89
 8004d0c:	08004d89 	.word	0x08004d89
 8004d10:	08004d89 	.word	0x08004d89
 8004d14:	08004d71 	.word	0x08004d71
 8004d18:	08004d89 	.word	0x08004d89
 8004d1c:	08004d89 	.word	0x08004d89
 8004d20:	08004d89 	.word	0x08004d89
 8004d24:	08004d89 	.word	0x08004d89
 8004d28:	08004d89 	.word	0x08004d89
 8004d2c:	08004d89 	.word	0x08004d89
 8004d30:	08004d89 	.word	0x08004d89
 8004d34:	08004d79 	.word	0x08004d79
 8004d38:	08004d89 	.word	0x08004d89
 8004d3c:	08004d89 	.word	0x08004d89
 8004d40:	08004d89 	.word	0x08004d89
 8004d44:	08004d89 	.word	0x08004d89
 8004d48:	08004d89 	.word	0x08004d89
 8004d4c:	08004d89 	.word	0x08004d89
 8004d50:	08004d89 	.word	0x08004d89
 8004d54:	08004d81 	.word	0x08004d81
 8004d58:	2301      	movs	r3, #1
 8004d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d5e:	e0bc      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004d60:	2304      	movs	r3, #4
 8004d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d66:	e0b8      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004d68:	2308      	movs	r3, #8
 8004d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d6e:	e0b4      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004d70:	2310      	movs	r3, #16
 8004d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d76:	e0b0      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004d78:	2320      	movs	r3, #32
 8004d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d7e:	e0ac      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004d80:	2340      	movs	r3, #64	; 0x40
 8004d82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d86:	e0a8      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004d88:	2380      	movs	r3, #128	; 0x80
 8004d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d8e:	e0a4      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a8f      	ldr	r2, [pc, #572]	; (8004fd4 <UART_SetConfig+0x6a0>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d130      	bne.n	8004dfc <UART_SetConfig+0x4c8>
 8004d9a:	4b8d      	ldr	r3, [pc, #564]	; (8004fd0 <UART_SetConfig+0x69c>)
 8004d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d9e:	f003 0307 	and.w	r3, r3, #7
 8004da2:	2b05      	cmp	r3, #5
 8004da4:	d826      	bhi.n	8004df4 <UART_SetConfig+0x4c0>
 8004da6:	a201      	add	r2, pc, #4	; (adr r2, 8004dac <UART_SetConfig+0x478>)
 8004da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dac:	08004dc5 	.word	0x08004dc5
 8004db0:	08004dcd 	.word	0x08004dcd
 8004db4:	08004dd5 	.word	0x08004dd5
 8004db8:	08004ddd 	.word	0x08004ddd
 8004dbc:	08004de5 	.word	0x08004de5
 8004dc0:	08004ded 	.word	0x08004ded
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dca:	e086      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004dcc:	2304      	movs	r3, #4
 8004dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dd2:	e082      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004dd4:	2308      	movs	r3, #8
 8004dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dda:	e07e      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004ddc:	2310      	movs	r3, #16
 8004dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004de2:	e07a      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004de4:	2320      	movs	r3, #32
 8004de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dea:	e076      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004dec:	2340      	movs	r3, #64	; 0x40
 8004dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004df2:	e072      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004df4:	2380      	movs	r3, #128	; 0x80
 8004df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dfa:	e06e      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a75      	ldr	r2, [pc, #468]	; (8004fd8 <UART_SetConfig+0x6a4>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d130      	bne.n	8004e68 <UART_SetConfig+0x534>
 8004e06:	4b72      	ldr	r3, [pc, #456]	; (8004fd0 <UART_SetConfig+0x69c>)
 8004e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e0a:	f003 0307 	and.w	r3, r3, #7
 8004e0e:	2b05      	cmp	r3, #5
 8004e10:	d826      	bhi.n	8004e60 <UART_SetConfig+0x52c>
 8004e12:	a201      	add	r2, pc, #4	; (adr r2, 8004e18 <UART_SetConfig+0x4e4>)
 8004e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e18:	08004e31 	.word	0x08004e31
 8004e1c:	08004e39 	.word	0x08004e39
 8004e20:	08004e41 	.word	0x08004e41
 8004e24:	08004e49 	.word	0x08004e49
 8004e28:	08004e51 	.word	0x08004e51
 8004e2c:	08004e59 	.word	0x08004e59
 8004e30:	2300      	movs	r3, #0
 8004e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e36:	e050      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004e38:	2304      	movs	r3, #4
 8004e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e3e:	e04c      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004e40:	2308      	movs	r3, #8
 8004e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e46:	e048      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004e48:	2310      	movs	r3, #16
 8004e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e4e:	e044      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004e50:	2320      	movs	r3, #32
 8004e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e56:	e040      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004e58:	2340      	movs	r3, #64	; 0x40
 8004e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e5e:	e03c      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004e60:	2380      	movs	r3, #128	; 0x80
 8004e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e66:	e038      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a5b      	ldr	r2, [pc, #364]	; (8004fdc <UART_SetConfig+0x6a8>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d130      	bne.n	8004ed4 <UART_SetConfig+0x5a0>
 8004e72:	4b57      	ldr	r3, [pc, #348]	; (8004fd0 <UART_SetConfig+0x69c>)
 8004e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e76:	f003 0307 	and.w	r3, r3, #7
 8004e7a:	2b05      	cmp	r3, #5
 8004e7c:	d826      	bhi.n	8004ecc <UART_SetConfig+0x598>
 8004e7e:	a201      	add	r2, pc, #4	; (adr r2, 8004e84 <UART_SetConfig+0x550>)
 8004e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e84:	08004e9d 	.word	0x08004e9d
 8004e88:	08004ea5 	.word	0x08004ea5
 8004e8c:	08004ead 	.word	0x08004ead
 8004e90:	08004eb5 	.word	0x08004eb5
 8004e94:	08004ebd 	.word	0x08004ebd
 8004e98:	08004ec5 	.word	0x08004ec5
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ea2:	e01a      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004ea4:	2304      	movs	r3, #4
 8004ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eaa:	e016      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004eac:	2308      	movs	r3, #8
 8004eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eb2:	e012      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004eb4:	2310      	movs	r3, #16
 8004eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eba:	e00e      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004ebc:	2320      	movs	r3, #32
 8004ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ec2:	e00a      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004ec4:	2340      	movs	r3, #64	; 0x40
 8004ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eca:	e006      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004ecc:	2380      	movs	r3, #128	; 0x80
 8004ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ed2:	e002      	b.n	8004eda <UART_SetConfig+0x5a6>
 8004ed4:	2380      	movs	r3, #128	; 0x80
 8004ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a3f      	ldr	r2, [pc, #252]	; (8004fdc <UART_SetConfig+0x6a8>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	f040 80f8 	bne.w	80050d6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ee6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004eea:	2b20      	cmp	r3, #32
 8004eec:	dc46      	bgt.n	8004f7c <UART_SetConfig+0x648>
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	f2c0 8082 	blt.w	8004ff8 <UART_SetConfig+0x6c4>
 8004ef4:	3b02      	subs	r3, #2
 8004ef6:	2b1e      	cmp	r3, #30
 8004ef8:	d87e      	bhi.n	8004ff8 <UART_SetConfig+0x6c4>
 8004efa:	a201      	add	r2, pc, #4	; (adr r2, 8004f00 <UART_SetConfig+0x5cc>)
 8004efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f00:	08004f83 	.word	0x08004f83
 8004f04:	08004ff9 	.word	0x08004ff9
 8004f08:	08004f8b 	.word	0x08004f8b
 8004f0c:	08004ff9 	.word	0x08004ff9
 8004f10:	08004ff9 	.word	0x08004ff9
 8004f14:	08004ff9 	.word	0x08004ff9
 8004f18:	08004f9b 	.word	0x08004f9b
 8004f1c:	08004ff9 	.word	0x08004ff9
 8004f20:	08004ff9 	.word	0x08004ff9
 8004f24:	08004ff9 	.word	0x08004ff9
 8004f28:	08004ff9 	.word	0x08004ff9
 8004f2c:	08004ff9 	.word	0x08004ff9
 8004f30:	08004ff9 	.word	0x08004ff9
 8004f34:	08004ff9 	.word	0x08004ff9
 8004f38:	08004fab 	.word	0x08004fab
 8004f3c:	08004ff9 	.word	0x08004ff9
 8004f40:	08004ff9 	.word	0x08004ff9
 8004f44:	08004ff9 	.word	0x08004ff9
 8004f48:	08004ff9 	.word	0x08004ff9
 8004f4c:	08004ff9 	.word	0x08004ff9
 8004f50:	08004ff9 	.word	0x08004ff9
 8004f54:	08004ff9 	.word	0x08004ff9
 8004f58:	08004ff9 	.word	0x08004ff9
 8004f5c:	08004ff9 	.word	0x08004ff9
 8004f60:	08004ff9 	.word	0x08004ff9
 8004f64:	08004ff9 	.word	0x08004ff9
 8004f68:	08004ff9 	.word	0x08004ff9
 8004f6c:	08004ff9 	.word	0x08004ff9
 8004f70:	08004ff9 	.word	0x08004ff9
 8004f74:	08004ff9 	.word	0x08004ff9
 8004f78:	08004feb 	.word	0x08004feb
 8004f7c:	2b40      	cmp	r3, #64	; 0x40
 8004f7e:	d037      	beq.n	8004ff0 <UART_SetConfig+0x6bc>
 8004f80:	e03a      	b.n	8004ff8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004f82:	f7ff f865 	bl	8004050 <HAL_RCCEx_GetD3PCLK1Freq>
 8004f86:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004f88:	e03c      	b.n	8005004 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7ff f874 	bl	800407c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f98:	e034      	b.n	8005004 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f9a:	f107 0318 	add.w	r3, r7, #24
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7ff f9c0 	bl	8004324 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fa8:	e02c      	b.n	8005004 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004faa:	4b09      	ldr	r3, [pc, #36]	; (8004fd0 <UART_SetConfig+0x69c>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0320 	and.w	r3, r3, #32
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d016      	beq.n	8004fe4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004fb6:	4b06      	ldr	r3, [pc, #24]	; (8004fd0 <UART_SetConfig+0x69c>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	08db      	lsrs	r3, r3, #3
 8004fbc:	f003 0303 	and.w	r3, r3, #3
 8004fc0:	4a07      	ldr	r2, [pc, #28]	; (8004fe0 <UART_SetConfig+0x6ac>)
 8004fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8004fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004fc8:	e01c      	b.n	8005004 <UART_SetConfig+0x6d0>
 8004fca:	bf00      	nop
 8004fcc:	40011400 	.word	0x40011400
 8004fd0:	58024400 	.word	0x58024400
 8004fd4:	40007800 	.word	0x40007800
 8004fd8:	40007c00 	.word	0x40007c00
 8004fdc:	58000c00 	.word	0x58000c00
 8004fe0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004fe4:	4b9d      	ldr	r3, [pc, #628]	; (800525c <UART_SetConfig+0x928>)
 8004fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fe8:	e00c      	b.n	8005004 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004fea:	4b9d      	ldr	r3, [pc, #628]	; (8005260 <UART_SetConfig+0x92c>)
 8004fec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fee:	e009      	b.n	8005004 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ff0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ff6:	e005      	b.n	8005004 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005002:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005006:	2b00      	cmp	r3, #0
 8005008:	f000 81de 	beq.w	80053c8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005010:	4a94      	ldr	r2, [pc, #592]	; (8005264 <UART_SetConfig+0x930>)
 8005012:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005016:	461a      	mov	r2, r3
 8005018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800501a:	fbb3 f3f2 	udiv	r3, r3, r2
 800501e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	4613      	mov	r3, r2
 8005026:	005b      	lsls	r3, r3, #1
 8005028:	4413      	add	r3, r2
 800502a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800502c:	429a      	cmp	r2, r3
 800502e:	d305      	bcc.n	800503c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005036:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005038:	429a      	cmp	r2, r3
 800503a:	d903      	bls.n	8005044 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005042:	e1c1      	b.n	80053c8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005046:	2200      	movs	r2, #0
 8005048:	60bb      	str	r3, [r7, #8]
 800504a:	60fa      	str	r2, [r7, #12]
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	4a84      	ldr	r2, [pc, #528]	; (8005264 <UART_SetConfig+0x930>)
 8005052:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005056:	b29b      	uxth	r3, r3
 8005058:	2200      	movs	r2, #0
 800505a:	603b      	str	r3, [r7, #0]
 800505c:	607a      	str	r2, [r7, #4]
 800505e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005062:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005066:	f7fb f937 	bl	80002d8 <__aeabi_uldivmod>
 800506a:	4602      	mov	r2, r0
 800506c:	460b      	mov	r3, r1
 800506e:	4610      	mov	r0, r2
 8005070:	4619      	mov	r1, r3
 8005072:	f04f 0200 	mov.w	r2, #0
 8005076:	f04f 0300 	mov.w	r3, #0
 800507a:	020b      	lsls	r3, r1, #8
 800507c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005080:	0202      	lsls	r2, r0, #8
 8005082:	6979      	ldr	r1, [r7, #20]
 8005084:	6849      	ldr	r1, [r1, #4]
 8005086:	0849      	lsrs	r1, r1, #1
 8005088:	2000      	movs	r0, #0
 800508a:	460c      	mov	r4, r1
 800508c:	4605      	mov	r5, r0
 800508e:	eb12 0804 	adds.w	r8, r2, r4
 8005092:	eb43 0905 	adc.w	r9, r3, r5
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	469a      	mov	sl, r3
 800509e:	4693      	mov	fp, r2
 80050a0:	4652      	mov	r2, sl
 80050a2:	465b      	mov	r3, fp
 80050a4:	4640      	mov	r0, r8
 80050a6:	4649      	mov	r1, r9
 80050a8:	f7fb f916 	bl	80002d8 <__aeabi_uldivmod>
 80050ac:	4602      	mov	r2, r0
 80050ae:	460b      	mov	r3, r1
 80050b0:	4613      	mov	r3, r2
 80050b2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80050b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050ba:	d308      	bcc.n	80050ce <UART_SetConfig+0x79a>
 80050bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050c2:	d204      	bcs.n	80050ce <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050ca:	60da      	str	r2, [r3, #12]
 80050cc:	e17c      	b.n	80053c8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80050d4:	e178      	b.n	80053c8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050de:	f040 80c5 	bne.w	800526c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80050e2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80050e6:	2b20      	cmp	r3, #32
 80050e8:	dc48      	bgt.n	800517c <UART_SetConfig+0x848>
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	db7b      	blt.n	80051e6 <UART_SetConfig+0x8b2>
 80050ee:	2b20      	cmp	r3, #32
 80050f0:	d879      	bhi.n	80051e6 <UART_SetConfig+0x8b2>
 80050f2:	a201      	add	r2, pc, #4	; (adr r2, 80050f8 <UART_SetConfig+0x7c4>)
 80050f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f8:	08005183 	.word	0x08005183
 80050fc:	0800518b 	.word	0x0800518b
 8005100:	080051e7 	.word	0x080051e7
 8005104:	080051e7 	.word	0x080051e7
 8005108:	08005193 	.word	0x08005193
 800510c:	080051e7 	.word	0x080051e7
 8005110:	080051e7 	.word	0x080051e7
 8005114:	080051e7 	.word	0x080051e7
 8005118:	080051a3 	.word	0x080051a3
 800511c:	080051e7 	.word	0x080051e7
 8005120:	080051e7 	.word	0x080051e7
 8005124:	080051e7 	.word	0x080051e7
 8005128:	080051e7 	.word	0x080051e7
 800512c:	080051e7 	.word	0x080051e7
 8005130:	080051e7 	.word	0x080051e7
 8005134:	080051e7 	.word	0x080051e7
 8005138:	080051b3 	.word	0x080051b3
 800513c:	080051e7 	.word	0x080051e7
 8005140:	080051e7 	.word	0x080051e7
 8005144:	080051e7 	.word	0x080051e7
 8005148:	080051e7 	.word	0x080051e7
 800514c:	080051e7 	.word	0x080051e7
 8005150:	080051e7 	.word	0x080051e7
 8005154:	080051e7 	.word	0x080051e7
 8005158:	080051e7 	.word	0x080051e7
 800515c:	080051e7 	.word	0x080051e7
 8005160:	080051e7 	.word	0x080051e7
 8005164:	080051e7 	.word	0x080051e7
 8005168:	080051e7 	.word	0x080051e7
 800516c:	080051e7 	.word	0x080051e7
 8005170:	080051e7 	.word	0x080051e7
 8005174:	080051e7 	.word	0x080051e7
 8005178:	080051d9 	.word	0x080051d9
 800517c:	2b40      	cmp	r3, #64	; 0x40
 800517e:	d02e      	beq.n	80051de <UART_SetConfig+0x8aa>
 8005180:	e031      	b.n	80051e6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005182:	f7fd fff3 	bl	800316c <HAL_RCC_GetPCLK1Freq>
 8005186:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005188:	e033      	b.n	80051f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800518a:	f7fe f805 	bl	8003198 <HAL_RCC_GetPCLK2Freq>
 800518e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005190:	e02f      	b.n	80051f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005196:	4618      	mov	r0, r3
 8005198:	f7fe ff70 	bl	800407c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800519c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051a0:	e027      	b.n	80051f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051a2:	f107 0318 	add.w	r3, r7, #24
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7ff f8bc 	bl	8004324 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051b0:	e01f      	b.n	80051f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051b2:	4b2d      	ldr	r3, [pc, #180]	; (8005268 <UART_SetConfig+0x934>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0320 	and.w	r3, r3, #32
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d009      	beq.n	80051d2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80051be:	4b2a      	ldr	r3, [pc, #168]	; (8005268 <UART_SetConfig+0x934>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	08db      	lsrs	r3, r3, #3
 80051c4:	f003 0303 	and.w	r3, r3, #3
 80051c8:	4a24      	ldr	r2, [pc, #144]	; (800525c <UART_SetConfig+0x928>)
 80051ca:	fa22 f303 	lsr.w	r3, r2, r3
 80051ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80051d0:	e00f      	b.n	80051f2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80051d2:	4b22      	ldr	r3, [pc, #136]	; (800525c <UART_SetConfig+0x928>)
 80051d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051d6:	e00c      	b.n	80051f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80051d8:	4b21      	ldr	r3, [pc, #132]	; (8005260 <UART_SetConfig+0x92c>)
 80051da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051dc:	e009      	b.n	80051f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051e4:	e005      	b.n	80051f2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80051e6:	2300      	movs	r3, #0
 80051e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80051f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 80e7 	beq.w	80053c8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fe:	4a19      	ldr	r2, [pc, #100]	; (8005264 <UART_SetConfig+0x930>)
 8005200:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005204:	461a      	mov	r2, r3
 8005206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005208:	fbb3 f3f2 	udiv	r3, r3, r2
 800520c:	005a      	lsls	r2, r3, #1
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	085b      	lsrs	r3, r3, #1
 8005214:	441a      	add	r2, r3
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	fbb2 f3f3 	udiv	r3, r2, r3
 800521e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005222:	2b0f      	cmp	r3, #15
 8005224:	d916      	bls.n	8005254 <UART_SetConfig+0x920>
 8005226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800522c:	d212      	bcs.n	8005254 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800522e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005230:	b29b      	uxth	r3, r3
 8005232:	f023 030f 	bic.w	r3, r3, #15
 8005236:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523a:	085b      	lsrs	r3, r3, #1
 800523c:	b29b      	uxth	r3, r3
 800523e:	f003 0307 	and.w	r3, r3, #7
 8005242:	b29a      	uxth	r2, r3
 8005244:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005246:	4313      	orrs	r3, r2
 8005248:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005250:	60da      	str	r2, [r3, #12]
 8005252:	e0b9      	b.n	80053c8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800525a:	e0b5      	b.n	80053c8 <UART_SetConfig+0xa94>
 800525c:	03d09000 	.word	0x03d09000
 8005260:	003d0900 	.word	0x003d0900
 8005264:	08006008 	.word	0x08006008
 8005268:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800526c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005270:	2b20      	cmp	r3, #32
 8005272:	dc49      	bgt.n	8005308 <UART_SetConfig+0x9d4>
 8005274:	2b00      	cmp	r3, #0
 8005276:	db7c      	blt.n	8005372 <UART_SetConfig+0xa3e>
 8005278:	2b20      	cmp	r3, #32
 800527a:	d87a      	bhi.n	8005372 <UART_SetConfig+0xa3e>
 800527c:	a201      	add	r2, pc, #4	; (adr r2, 8005284 <UART_SetConfig+0x950>)
 800527e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005282:	bf00      	nop
 8005284:	0800530f 	.word	0x0800530f
 8005288:	08005317 	.word	0x08005317
 800528c:	08005373 	.word	0x08005373
 8005290:	08005373 	.word	0x08005373
 8005294:	0800531f 	.word	0x0800531f
 8005298:	08005373 	.word	0x08005373
 800529c:	08005373 	.word	0x08005373
 80052a0:	08005373 	.word	0x08005373
 80052a4:	0800532f 	.word	0x0800532f
 80052a8:	08005373 	.word	0x08005373
 80052ac:	08005373 	.word	0x08005373
 80052b0:	08005373 	.word	0x08005373
 80052b4:	08005373 	.word	0x08005373
 80052b8:	08005373 	.word	0x08005373
 80052bc:	08005373 	.word	0x08005373
 80052c0:	08005373 	.word	0x08005373
 80052c4:	0800533f 	.word	0x0800533f
 80052c8:	08005373 	.word	0x08005373
 80052cc:	08005373 	.word	0x08005373
 80052d0:	08005373 	.word	0x08005373
 80052d4:	08005373 	.word	0x08005373
 80052d8:	08005373 	.word	0x08005373
 80052dc:	08005373 	.word	0x08005373
 80052e0:	08005373 	.word	0x08005373
 80052e4:	08005373 	.word	0x08005373
 80052e8:	08005373 	.word	0x08005373
 80052ec:	08005373 	.word	0x08005373
 80052f0:	08005373 	.word	0x08005373
 80052f4:	08005373 	.word	0x08005373
 80052f8:	08005373 	.word	0x08005373
 80052fc:	08005373 	.word	0x08005373
 8005300:	08005373 	.word	0x08005373
 8005304:	08005365 	.word	0x08005365
 8005308:	2b40      	cmp	r3, #64	; 0x40
 800530a:	d02e      	beq.n	800536a <UART_SetConfig+0xa36>
 800530c:	e031      	b.n	8005372 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800530e:	f7fd ff2d 	bl	800316c <HAL_RCC_GetPCLK1Freq>
 8005312:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005314:	e033      	b.n	800537e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005316:	f7fd ff3f 	bl	8003198 <HAL_RCC_GetPCLK2Freq>
 800531a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800531c:	e02f      	b.n	800537e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800531e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005322:	4618      	mov	r0, r3
 8005324:	f7fe feaa 	bl	800407c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800532c:	e027      	b.n	800537e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800532e:	f107 0318 	add.w	r3, r7, #24
 8005332:	4618      	mov	r0, r3
 8005334:	f7fe fff6 	bl	8004324 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800533c:	e01f      	b.n	800537e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800533e:	4b2d      	ldr	r3, [pc, #180]	; (80053f4 <UART_SetConfig+0xac0>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0320 	and.w	r3, r3, #32
 8005346:	2b00      	cmp	r3, #0
 8005348:	d009      	beq.n	800535e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800534a:	4b2a      	ldr	r3, [pc, #168]	; (80053f4 <UART_SetConfig+0xac0>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	08db      	lsrs	r3, r3, #3
 8005350:	f003 0303 	and.w	r3, r3, #3
 8005354:	4a28      	ldr	r2, [pc, #160]	; (80053f8 <UART_SetConfig+0xac4>)
 8005356:	fa22 f303 	lsr.w	r3, r2, r3
 800535a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800535c:	e00f      	b.n	800537e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800535e:	4b26      	ldr	r3, [pc, #152]	; (80053f8 <UART_SetConfig+0xac4>)
 8005360:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005362:	e00c      	b.n	800537e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005364:	4b25      	ldr	r3, [pc, #148]	; (80053fc <UART_SetConfig+0xac8>)
 8005366:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005368:	e009      	b.n	800537e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800536a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800536e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005370:	e005      	b.n	800537e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005372:	2300      	movs	r3, #0
 8005374:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800537c:	bf00      	nop
    }

    if (pclk != 0U)
 800537e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005380:	2b00      	cmp	r3, #0
 8005382:	d021      	beq.n	80053c8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005388:	4a1d      	ldr	r2, [pc, #116]	; (8005400 <UART_SetConfig+0xacc>)
 800538a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800538e:	461a      	mov	r2, r3
 8005390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005392:	fbb3 f2f2 	udiv	r2, r3, r2
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	085b      	lsrs	r3, r3, #1
 800539c:	441a      	add	r2, r3
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053aa:	2b0f      	cmp	r3, #15
 80053ac:	d909      	bls.n	80053c2 <UART_SetConfig+0xa8e>
 80053ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053b4:	d205      	bcs.n	80053c2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b8:	b29a      	uxth	r2, r3
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	60da      	str	r2, [r3, #12]
 80053c0:	e002      	b.n	80053c8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	2200      	movs	r2, #0
 80053dc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	2200      	movs	r2, #0
 80053e2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80053e4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3748      	adds	r7, #72	; 0x48
 80053ec:	46bd      	mov	sp, r7
 80053ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053f2:	bf00      	nop
 80053f4:	58024400 	.word	0x58024400
 80053f8:	03d09000 	.word	0x03d09000
 80053fc:	003d0900 	.word	0x003d0900
 8005400:	08006008 	.word	0x08006008

08005404 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005410:	f003 0301 	and.w	r3, r3, #1
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00a      	beq.n	800542e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	430a      	orrs	r2, r1
 800542c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00a      	beq.n	8005450 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	430a      	orrs	r2, r1
 800544e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005454:	f003 0304 	and.w	r3, r3, #4
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00a      	beq.n	8005472 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	430a      	orrs	r2, r1
 8005470:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005476:	f003 0308 	and.w	r3, r3, #8
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00a      	beq.n	8005494 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	430a      	orrs	r2, r1
 8005492:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005498:	f003 0310 	and.w	r3, r3, #16
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00a      	beq.n	80054b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	430a      	orrs	r2, r1
 80054b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ba:	f003 0320 	and.w	r3, r3, #32
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00a      	beq.n	80054d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	430a      	orrs	r2, r1
 80054d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d01a      	beq.n	800551a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	430a      	orrs	r2, r1
 80054f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005502:	d10a      	bne.n	800551a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	430a      	orrs	r2, r1
 8005518:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800551e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00a      	beq.n	800553c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	430a      	orrs	r2, r1
 800553a:	605a      	str	r2, [r3, #4]
  }
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b086      	sub	sp, #24
 800554c:	af02      	add	r7, sp, #8
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005558:	f7fb fd92 	bl	8001080 <HAL_GetTick>
 800555c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0308 	and.w	r3, r3, #8
 8005568:	2b08      	cmp	r3, #8
 800556a:	d10e      	bne.n	800558a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800556c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f82f 	bl	80055de <UART_WaitOnFlagUntilTimeout>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e025      	b.n	80055d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0304 	and.w	r3, r3, #4
 8005594:	2b04      	cmp	r3, #4
 8005596:	d10e      	bne.n	80055b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005598:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800559c:	9300      	str	r3, [sp, #0]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 f819 	bl	80055de <UART_WaitOnFlagUntilTimeout>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d001      	beq.n	80055b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e00f      	b.n	80055d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2220      	movs	r2, #32
 80055ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2220      	movs	r2, #32
 80055c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b09c      	sub	sp, #112	; 0x70
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	60f8      	str	r0, [r7, #12]
 80055e6:	60b9      	str	r1, [r7, #8]
 80055e8:	603b      	str	r3, [r7, #0]
 80055ea:	4613      	mov	r3, r2
 80055ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055ee:	e0a9      	b.n	8005744 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f6:	f000 80a5 	beq.w	8005744 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055fa:	f7fb fd41 	bl	8001080 <HAL_GetTick>
 80055fe:	4602      	mov	r2, r0
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005606:	429a      	cmp	r2, r3
 8005608:	d302      	bcc.n	8005610 <UART_WaitOnFlagUntilTimeout+0x32>
 800560a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800560c:	2b00      	cmp	r3, #0
 800560e:	d140      	bne.n	8005692 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005616:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005618:	e853 3f00 	ldrex	r3, [r3]
 800561c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800561e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005620:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005624:	667b      	str	r3, [r7, #100]	; 0x64
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	461a      	mov	r2, r3
 800562c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800562e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005630:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005632:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005634:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005636:	e841 2300 	strex	r3, r2, [r1]
 800563a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800563c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1e6      	bne.n	8005610 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	3308      	adds	r3, #8
 8005648:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800564c:	e853 3f00 	ldrex	r3, [r3]
 8005650:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005654:	f023 0301 	bic.w	r3, r3, #1
 8005658:	663b      	str	r3, [r7, #96]	; 0x60
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	3308      	adds	r3, #8
 8005660:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005662:	64ba      	str	r2, [r7, #72]	; 0x48
 8005664:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005666:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005668:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800566a:	e841 2300 	strex	r3, r2, [r1]
 800566e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005670:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1e5      	bne.n	8005642 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2220      	movs	r2, #32
 800567a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2220      	movs	r2, #32
 8005682:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e069      	b.n	8005766 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0304 	and.w	r3, r3, #4
 800569c:	2b00      	cmp	r3, #0
 800569e:	d051      	beq.n	8005744 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	69db      	ldr	r3, [r3, #28]
 80056a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056ae:	d149      	bne.n	8005744 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056b8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c2:	e853 3f00 	ldrex	r3, [r3]
 80056c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	461a      	mov	r2, r3
 80056d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056d8:	637b      	str	r3, [r7, #52]	; 0x34
 80056da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056e0:	e841 2300 	strex	r3, r2, [r1]
 80056e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80056e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1e6      	bne.n	80056ba <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	3308      	adds	r3, #8
 80056f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	e853 3f00 	ldrex	r3, [r3]
 80056fa:	613b      	str	r3, [r7, #16]
   return(result);
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	f023 0301 	bic.w	r3, r3, #1
 8005702:	66bb      	str	r3, [r7, #104]	; 0x68
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	3308      	adds	r3, #8
 800570a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800570c:	623a      	str	r2, [r7, #32]
 800570e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005710:	69f9      	ldr	r1, [r7, #28]
 8005712:	6a3a      	ldr	r2, [r7, #32]
 8005714:	e841 2300 	strex	r3, r2, [r1]
 8005718:	61bb      	str	r3, [r7, #24]
   return(result);
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1e5      	bne.n	80056ec <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2220      	movs	r2, #32
 8005724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2220      	movs	r2, #32
 800572c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2220      	movs	r2, #32
 8005734:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e010      	b.n	8005766 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	69da      	ldr	r2, [r3, #28]
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	4013      	ands	r3, r2
 800574e:	68ba      	ldr	r2, [r7, #8]
 8005750:	429a      	cmp	r2, r3
 8005752:	bf0c      	ite	eq
 8005754:	2301      	moveq	r3, #1
 8005756:	2300      	movne	r3, #0
 8005758:	b2db      	uxtb	r3, r3
 800575a:	461a      	mov	r2, r3
 800575c:	79fb      	ldrb	r3, [r7, #7]
 800575e:	429a      	cmp	r2, r3
 8005760:	f43f af46 	beq.w	80055f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3770      	adds	r7, #112	; 0x70
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}

0800576e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800576e:	b480      	push	{r7}
 8005770:	b085      	sub	sp, #20
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800577c:	2b01      	cmp	r3, #1
 800577e:	d101      	bne.n	8005784 <HAL_UARTEx_DisableFifoMode+0x16>
 8005780:	2302      	movs	r3, #2
 8005782:	e027      	b.n	80057d4 <HAL_UARTEx_DisableFifoMode+0x66>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2224      	movs	r2, #36	; 0x24
 8005790:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f022 0201 	bic.w	r2, r2, #1
 80057aa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80057b2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2220      	movs	r2, #32
 80057c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3714      	adds	r7, #20
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d101      	bne.n	80057f8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80057f4:	2302      	movs	r3, #2
 80057f6:	e02d      	b.n	8005854 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2224      	movs	r2, #36	; 0x24
 8005804:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f022 0201 	bic.w	r2, r2, #1
 800581e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	683a      	ldr	r2, [r7, #0]
 8005830:	430a      	orrs	r2, r1
 8005832:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 f84f 	bl	80058d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2220      	movs	r2, #32
 8005846:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	3710      	adds	r7, #16
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800586c:	2b01      	cmp	r3, #1
 800586e:	d101      	bne.n	8005874 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005870:	2302      	movs	r3, #2
 8005872:	e02d      	b.n	80058d0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2224      	movs	r2, #36	; 0x24
 8005880:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f022 0201 	bic.w	r2, r2, #1
 800589a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	683a      	ldr	r2, [r7, #0]
 80058ac:	430a      	orrs	r2, r1
 80058ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 f811 	bl	80058d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2220      	movs	r2, #32
 80058c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80058d8:	b480      	push	{r7}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d108      	bne.n	80058fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80058f8:	e031      	b.n	800595e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80058fa:	2310      	movs	r3, #16
 80058fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80058fe:	2310      	movs	r3, #16
 8005900:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	0e5b      	lsrs	r3, r3, #25
 800590a:	b2db      	uxtb	r3, r3
 800590c:	f003 0307 	and.w	r3, r3, #7
 8005910:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	0f5b      	lsrs	r3, r3, #29
 800591a:	b2db      	uxtb	r3, r3
 800591c:	f003 0307 	and.w	r3, r3, #7
 8005920:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005922:	7bbb      	ldrb	r3, [r7, #14]
 8005924:	7b3a      	ldrb	r2, [r7, #12]
 8005926:	4911      	ldr	r1, [pc, #68]	; (800596c <UARTEx_SetNbDataToProcess+0x94>)
 8005928:	5c8a      	ldrb	r2, [r1, r2]
 800592a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800592e:	7b3a      	ldrb	r2, [r7, #12]
 8005930:	490f      	ldr	r1, [pc, #60]	; (8005970 <UARTEx_SetNbDataToProcess+0x98>)
 8005932:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005934:	fb93 f3f2 	sdiv	r3, r3, r2
 8005938:	b29a      	uxth	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005940:	7bfb      	ldrb	r3, [r7, #15]
 8005942:	7b7a      	ldrb	r2, [r7, #13]
 8005944:	4909      	ldr	r1, [pc, #36]	; (800596c <UARTEx_SetNbDataToProcess+0x94>)
 8005946:	5c8a      	ldrb	r2, [r1, r2]
 8005948:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800594c:	7b7a      	ldrb	r2, [r7, #13]
 800594e:	4908      	ldr	r1, [pc, #32]	; (8005970 <UARTEx_SetNbDataToProcess+0x98>)
 8005950:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005952:	fb93 f3f2 	sdiv	r3, r3, r2
 8005956:	b29a      	uxth	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800595e:	bf00      	nop
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	08006020 	.word	0x08006020
 8005970:	08006028 	.word	0x08006028

08005974 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005974:	b084      	sub	sp, #16
 8005976:	b580      	push	{r7, lr}
 8005978:	b084      	sub	sp, #16
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
 800597e:	f107 001c 	add.w	r0, r7, #28
 8005982:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005988:	2b01      	cmp	r3, #1
 800598a:	d120      	bne.n	80059ce <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005990:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68da      	ldr	r2, [r3, #12]
 800599c:	4b2a      	ldr	r3, [pc, #168]	; (8005a48 <USB_CoreInit+0xd4>)
 800599e:	4013      	ands	r3, r2
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80059b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d105      	bne.n	80059c2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 faac 	bl	8005f20 <USB_CoreReset>
 80059c8:	4603      	mov	r3, r0
 80059ca:	73fb      	strb	r3, [r7, #15]
 80059cc:	e01a      	b.n	8005a04 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 faa0 	bl	8005f20 <USB_CoreReset>
 80059e0:	4603      	mov	r3, r0
 80059e2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80059e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d106      	bne.n	80059f8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	639a      	str	r2, [r3, #56]	; 0x38
 80059f6:	e005      	b.n	8005a04 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d116      	bne.n	8005a38 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005a18:	4b0c      	ldr	r3, [pc, #48]	; (8005a4c <USB_CoreInit+0xd8>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	f043 0206 	orr.w	r2, r3, #6
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	f043 0220 	orr.w	r2, r3, #32
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3710      	adds	r7, #16
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a44:	b004      	add	sp, #16
 8005a46:	4770      	bx	lr
 8005a48:	ffbdffbf 	.word	0xffbdffbf
 8005a4c:	03ee0000 	.word	0x03ee0000

08005a50 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f023 0201 	bic.w	r2, r3, #1
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b084      	sub	sp, #16
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a8e:	78fb      	ldrb	r3, [r7, #3]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d115      	bne.n	8005ac0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005aa0:	2001      	movs	r0, #1
 8005aa2:	f7fb faf9 	bl	8001098 <HAL_Delay>
      ms++;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 fa29 	bl	8005f04 <USB_GetMode>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d01e      	beq.n	8005af6 <USB_SetCurrentMode+0x84>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2b31      	cmp	r3, #49	; 0x31
 8005abc:	d9f0      	bls.n	8005aa0 <USB_SetCurrentMode+0x2e>
 8005abe:	e01a      	b.n	8005af6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005ac0:	78fb      	ldrb	r3, [r7, #3]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d115      	bne.n	8005af2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005ad2:	2001      	movs	r0, #1
 8005ad4:	f7fb fae0 	bl	8001098 <HAL_Delay>
      ms++;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	3301      	adds	r3, #1
 8005adc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 fa10 	bl	8005f04 <USB_GetMode>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d005      	beq.n	8005af6 <USB_SetCurrentMode+0x84>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2b31      	cmp	r3, #49	; 0x31
 8005aee:	d9f0      	bls.n	8005ad2 <USB_SetCurrentMode+0x60>
 8005af0:	e001      	b.n	8005af6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e005      	b.n	8005b02 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2b32      	cmp	r3, #50	; 0x32
 8005afa:	d101      	bne.n	8005b00 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e000      	b.n	8005b02 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3710      	adds	r7, #16
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
	...

08005b0c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b0c:	b084      	sub	sp, #16
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b086      	sub	sp, #24
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
 8005b16:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005b1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005b26:	2300      	movs	r3, #0
 8005b28:	613b      	str	r3, [r7, #16]
 8005b2a:	e009      	b.n	8005b40 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	3340      	adds	r3, #64	; 0x40
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	4413      	add	r3, r2
 8005b36:	2200      	movs	r2, #0
 8005b38:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	613b      	str	r3, [r7, #16]
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	2b0e      	cmp	r3, #14
 8005b44:	d9f2      	bls.n	8005b2c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d11c      	bne.n	8005b86 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b5a:	f043 0302 	orr.w	r3, r3, #2
 8005b5e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b64:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	601a      	str	r2, [r3, #0]
 8005b84:	e005      	b.n	8005b92 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b98:	461a      	mov	r2, r3
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bac:	461a      	mov	r2, r3
 8005bae:	680b      	ldr	r3, [r1, #0]
 8005bb0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d10c      	bne.n	8005bd2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d104      	bne.n	8005bc8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 f965 	bl	8005e90 <USB_SetDevSpeed>
 8005bc6:	e008      	b.n	8005bda <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005bc8:	2101      	movs	r1, #1
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 f960 	bl	8005e90 <USB_SetDevSpeed>
 8005bd0:	e003      	b.n	8005bda <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005bd2:	2103      	movs	r1, #3
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 f95b 	bl	8005e90 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005bda:	2110      	movs	r1, #16
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 f8f3 	bl	8005dc8 <USB_FlushTxFifo>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d001      	beq.n	8005bec <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 f91f 	bl	8005e30 <USB_FlushRxFifo>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d001      	beq.n	8005bfc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c02:	461a      	mov	r2, r3
 8005c04:	2300      	movs	r3, #0
 8005c06:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c0e:	461a      	mov	r2, r3
 8005c10:	2300      	movs	r3, #0
 8005c12:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c20:	2300      	movs	r3, #0
 8005c22:	613b      	str	r3, [r7, #16]
 8005c24:	e043      	b.n	8005cae <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	015a      	lsls	r2, r3, #5
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c3c:	d118      	bne.n	8005c70 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d10a      	bne.n	8005c5a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	015a      	lsls	r2, r3, #5
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c50:	461a      	mov	r2, r3
 8005c52:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c56:	6013      	str	r3, [r2, #0]
 8005c58:	e013      	b.n	8005c82 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	015a      	lsls	r2, r3, #5
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	4413      	add	r3, r2
 8005c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c66:	461a      	mov	r2, r3
 8005c68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c6c:	6013      	str	r3, [r2, #0]
 8005c6e:	e008      	b.n	8005c82 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	015a      	lsls	r2, r3, #5
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	4413      	add	r3, r2
 8005c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	2300      	movs	r3, #0
 8005c80:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	015a      	lsls	r2, r3, #5
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	4413      	add	r3, r2
 8005c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c8e:	461a      	mov	r2, r3
 8005c90:	2300      	movs	r3, #0
 8005c92:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	015a      	lsls	r2, r3, #5
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ca6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	3301      	adds	r3, #1
 8005cac:	613b      	str	r3, [r7, #16]
 8005cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d3b7      	bcc.n	8005c26 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	613b      	str	r3, [r7, #16]
 8005cba:	e043      	b.n	8005d44 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	015a      	lsls	r2, r3, #5
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cd2:	d118      	bne.n	8005d06 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10a      	bne.n	8005cf0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	015a      	lsls	r2, r3, #5
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005cec:	6013      	str	r3, [r2, #0]
 8005cee:	e013      	b.n	8005d18 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	015a      	lsls	r2, r3, #5
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d02:	6013      	str	r3, [r2, #0]
 8005d04:	e008      	b.n	8005d18 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	015a      	lsls	r2, r3, #5
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d12:	461a      	mov	r2, r3
 8005d14:	2300      	movs	r3, #0
 8005d16:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	015a      	lsls	r2, r3, #5
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d24:	461a      	mov	r2, r3
 8005d26:	2300      	movs	r3, #0
 8005d28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	015a      	lsls	r2, r3, #5
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	4413      	add	r3, r2
 8005d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d36:	461a      	mov	r2, r3
 8005d38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d3c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	3301      	adds	r3, #1
 8005d42:	613b      	str	r3, [r7, #16]
 8005d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d46:	693a      	ldr	r2, [r7, #16]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d3b7      	bcc.n	8005cbc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d5e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005d6c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d105      	bne.n	8005d80 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	f043 0210 	orr.w	r2, r3, #16
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	699a      	ldr	r2, [r3, #24]
 8005d84:	4b0e      	ldr	r3, [pc, #56]	; (8005dc0 <USB_DevInit+0x2b4>)
 8005d86:	4313      	orrs	r3, r2
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d005      	beq.n	8005d9e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	f043 0208 	orr.w	r2, r3, #8
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d105      	bne.n	8005db0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	699a      	ldr	r2, [r3, #24]
 8005da8:	4b06      	ldr	r3, [pc, #24]	; (8005dc4 <USB_DevInit+0x2b8>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005db0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3718      	adds	r7, #24
 8005db6:	46bd      	mov	sp, r7
 8005db8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005dbc:	b004      	add	sp, #16
 8005dbe:	4770      	bx	lr
 8005dc0:	803c3800 	.word	0x803c3800
 8005dc4:	40000004 	.word	0x40000004

08005dc8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	4a13      	ldr	r2, [pc, #76]	; (8005e2c <USB_FlushTxFifo+0x64>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d901      	bls.n	8005de8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e01b      	b.n	8005e20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	daf2      	bge.n	8005dd6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005df0:	2300      	movs	r3, #0
 8005df2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	019b      	lsls	r3, r3, #6
 8005df8:	f043 0220 	orr.w	r2, r3, #32
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	3301      	adds	r3, #1
 8005e04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	4a08      	ldr	r2, [pc, #32]	; (8005e2c <USB_FlushTxFifo+0x64>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d901      	bls.n	8005e12 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e006      	b.n	8005e20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	f003 0320 	and.w	r3, r3, #32
 8005e1a:	2b20      	cmp	r3, #32
 8005e1c:	d0f0      	beq.n	8005e00 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3714      	adds	r7, #20
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr
 8005e2c:	00030d40 	.word	0x00030d40

08005e30 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	3301      	adds	r3, #1
 8005e40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	4a11      	ldr	r2, [pc, #68]	; (8005e8c <USB_FlushRxFifo+0x5c>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d901      	bls.n	8005e4e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e018      	b.n	8005e80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	daf2      	bge.n	8005e3c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005e56:	2300      	movs	r3, #0
 8005e58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2210      	movs	r2, #16
 8005e5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	3301      	adds	r3, #1
 8005e64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	4a08      	ldr	r2, [pc, #32]	; (8005e8c <USB_FlushRxFifo+0x5c>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d901      	bls.n	8005e72 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e006      	b.n	8005e80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	f003 0310 	and.w	r3, r3, #16
 8005e7a:	2b10      	cmp	r3, #16
 8005e7c:	d0f0      	beq.n	8005e60 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3714      	adds	r7, #20
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr
 8005e8c:	00030d40 	.word	0x00030d40

08005e90 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b085      	sub	sp, #20
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	460b      	mov	r3, r1
 8005e9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	78fb      	ldrb	r3, [r7, #3]
 8005eaa:	68f9      	ldr	r1, [r7, #12]
 8005eac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3714      	adds	r7, #20
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr

08005ec2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005ec2:	b480      	push	{r7}
 8005ec4:	b085      	sub	sp, #20
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005edc:	f023 0303 	bic.w	r3, r3, #3
 8005ee0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ef0:	f043 0302 	orr.w	r3, r3, #2
 8005ef4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3714      	adds	r7, #20
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	695b      	ldr	r3, [r3, #20]
 8005f10:	f003 0301 	and.w	r3, r3, #1
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b085      	sub	sp, #20
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	4a13      	ldr	r2, [pc, #76]	; (8005f84 <USB_CoreReset+0x64>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d901      	bls.n	8005f3e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e01b      	b.n	8005f76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	daf2      	bge.n	8005f2c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005f46:	2300      	movs	r3, #0
 8005f48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	f043 0201 	orr.w	r2, r3, #1
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	3301      	adds	r3, #1
 8005f5a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	4a09      	ldr	r2, [pc, #36]	; (8005f84 <USB_CoreReset+0x64>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d901      	bls.n	8005f68 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e006      	b.n	8005f76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	f003 0301 	and.w	r3, r3, #1
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d0f0      	beq.n	8005f56 <USB_CoreReset+0x36>

  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3714      	adds	r7, #20
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	00030d40 	.word	0x00030d40

08005f88 <__libc_init_array>:
 8005f88:	b570      	push	{r4, r5, r6, lr}
 8005f8a:	4d0d      	ldr	r5, [pc, #52]	; (8005fc0 <__libc_init_array+0x38>)
 8005f8c:	4c0d      	ldr	r4, [pc, #52]	; (8005fc4 <__libc_init_array+0x3c>)
 8005f8e:	1b64      	subs	r4, r4, r5
 8005f90:	10a4      	asrs	r4, r4, #2
 8005f92:	2600      	movs	r6, #0
 8005f94:	42a6      	cmp	r6, r4
 8005f96:	d109      	bne.n	8005fac <__libc_init_array+0x24>
 8005f98:	4d0b      	ldr	r5, [pc, #44]	; (8005fc8 <__libc_init_array+0x40>)
 8005f9a:	4c0c      	ldr	r4, [pc, #48]	; (8005fcc <__libc_init_array+0x44>)
 8005f9c:	f000 f820 	bl	8005fe0 <_init>
 8005fa0:	1b64      	subs	r4, r4, r5
 8005fa2:	10a4      	asrs	r4, r4, #2
 8005fa4:	2600      	movs	r6, #0
 8005fa6:	42a6      	cmp	r6, r4
 8005fa8:	d105      	bne.n	8005fb6 <__libc_init_array+0x2e>
 8005faa:	bd70      	pop	{r4, r5, r6, pc}
 8005fac:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fb0:	4798      	blx	r3
 8005fb2:	3601      	adds	r6, #1
 8005fb4:	e7ee      	b.n	8005f94 <__libc_init_array+0xc>
 8005fb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fba:	4798      	blx	r3
 8005fbc:	3601      	adds	r6, #1
 8005fbe:	e7f2      	b.n	8005fa6 <__libc_init_array+0x1e>
 8005fc0:	08006038 	.word	0x08006038
 8005fc4:	08006038 	.word	0x08006038
 8005fc8:	08006038 	.word	0x08006038
 8005fcc:	0800603c 	.word	0x0800603c

08005fd0 <memset>:
 8005fd0:	4402      	add	r2, r0
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d100      	bne.n	8005fda <memset+0xa>
 8005fd8:	4770      	bx	lr
 8005fda:	f803 1b01 	strb.w	r1, [r3], #1
 8005fde:	e7f9      	b.n	8005fd4 <memset+0x4>

08005fe0 <_init>:
 8005fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fe2:	bf00      	nop
 8005fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fe6:	bc08      	pop	{r3}
 8005fe8:	469e      	mov	lr, r3
 8005fea:	4770      	bx	lr

08005fec <_fini>:
 8005fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fee:	bf00      	nop
 8005ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ff2:	bc08      	pop	{r3}
 8005ff4:	469e      	mov	lr, r3
 8005ff6:	4770      	bx	lr
