
H745_STAMPR_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000948c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0004028c  0800972c  0800972c  0001972c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080499b8  080499b8  00060360  2**0
                  CONTENTS
  4 .ARM          00000008  080499b8  080499b8  000599b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080499c0  080499c0  00060360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080499c0  080499c0  000599c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080499c4  080499c4  000599c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a0  24000000  080499c8  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  240002a0  08049c68  000602a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000300  08049cc8  00060300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000860  24000360  08049d28  00060360  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000bc0  08049d28  00060bc0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00060360  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001cf4b  00000000  00000000  0006038e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003352  00000000  00000000  0007d2d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001318  00000000  00000000  00080630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001180  00000000  00000000  00081948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003cf62  00000000  00000000  00082ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c060  00000000  00000000  000bfa2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0018be6f  00000000  00000000  000dba8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  002678f9  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005460  00000000  00000000  0026794c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000360 	.word	0x24000360
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009714 	.word	0x08009714

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000364 	.word	0x24000364
 80002dc:	08009714 	.word	0x08009714

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000688:	4b3d      	ldr	r3, [pc, #244]	; (8000780 <SystemInit+0xfc>)
 800068a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068e:	4a3c      	ldr	r2, [pc, #240]	; (8000780 <SystemInit+0xfc>)
 8000690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <SystemInit+0xfc>)
 800069a:	691b      	ldr	r3, [r3, #16]
 800069c:	4a38      	ldr	r2, [pc, #224]	; (8000780 <SystemInit+0xfc>)
 800069e:	f043 0310 	orr.w	r3, r3, #16
 80006a2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a4:	4b37      	ldr	r3, [pc, #220]	; (8000784 <SystemInit+0x100>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f003 030f 	and.w	r3, r3, #15
 80006ac:	2b06      	cmp	r3, #6
 80006ae:	d807      	bhi.n	80006c0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b0:	4b34      	ldr	r3, [pc, #208]	; (8000784 <SystemInit+0x100>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f023 030f 	bic.w	r3, r3, #15
 80006b8:	4a32      	ldr	r2, [pc, #200]	; (8000784 <SystemInit+0x100>)
 80006ba:	f043 0307 	orr.w	r3, r3, #7
 80006be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c0:	4b31      	ldr	r3, [pc, #196]	; (8000788 <SystemInit+0x104>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a30      	ldr	r2, [pc, #192]	; (8000788 <SystemInit+0x104>)
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <SystemInit+0x104>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d2:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <SystemInit+0x104>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	492c      	ldr	r1, [pc, #176]	; (8000788 <SystemInit+0x104>)
 80006d8:	4b2c      	ldr	r3, [pc, #176]	; (800078c <SystemInit+0x108>)
 80006da:	4013      	ands	r3, r2
 80006dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006de:	4b29      	ldr	r3, [pc, #164]	; (8000784 <SystemInit+0x100>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f003 0308 	and.w	r3, r3, #8
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d007      	beq.n	80006fa <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <SystemInit+0x100>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f023 030f 	bic.w	r3, r3, #15
 80006f2:	4a24      	ldr	r2, [pc, #144]	; (8000784 <SystemInit+0x100>)
 80006f4:	f043 0307 	orr.w	r3, r3, #7
 80006f8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <SystemInit+0x104>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <SystemInit+0x104>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <SystemInit+0x104>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <SystemInit+0x104>)
 800070e:	4a20      	ldr	r2, [pc, #128]	; (8000790 <SystemInit+0x10c>)
 8000710:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <SystemInit+0x104>)
 8000714:	4a1f      	ldr	r2, [pc, #124]	; (8000794 <SystemInit+0x110>)
 8000716:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <SystemInit+0x104>)
 800071a:	4a1f      	ldr	r2, [pc, #124]	; (8000798 <SystemInit+0x114>)
 800071c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <SystemInit+0x104>)
 8000720:	2200      	movs	r2, #0
 8000722:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <SystemInit+0x104>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <SystemInit+0x114>)
 8000728:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <SystemInit+0x104>)
 800072c:	2200      	movs	r2, #0
 800072e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <SystemInit+0x104>)
 8000732:	4a19      	ldr	r2, [pc, #100]	; (8000798 <SystemInit+0x114>)
 8000734:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <SystemInit+0x104>)
 8000738:	2200      	movs	r2, #0
 800073a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <SystemInit+0x104>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a11      	ldr	r2, [pc, #68]	; (8000788 <SystemInit+0x104>)
 8000742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000746:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <SystemInit+0x104>)
 800074a:	2200      	movs	r2, #0
 800074c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemInit+0x118>)
 8000750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <SystemInit+0x118>)
 8000754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000758:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <SystemInit+0x11c>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <SystemInit+0x120>)
 8000760:	4013      	ands	r3, r2
 8000762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000766:	d202      	bcs.n	800076e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <SystemInit+0x124>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <SystemInit+0x128>)
 8000770:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000774:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00
 8000784:	52002000 	.word	0x52002000
 8000788:	58024400 	.word	0x58024400
 800078c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000790:	02020200 	.word	0x02020200
 8000794:	01ff0000 	.word	0x01ff0000
 8000798:	01010280 	.word	0x01010280
 800079c:	580000c0 	.word	0x580000c0
 80007a0:	5c001000 	.word	0x5c001000
 80007a4:	ffff0000 	.word	0xffff0000
 80007a8:	51008108 	.word	0x51008108
 80007ac:	52004000 	.word	0x52004000

080007b0 <ili9486_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9486_DisplayOn(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_SLPOUT);    // Exit Sleep
 80007b4:	2011      	movs	r0, #17
 80007b6:	f000 fc93 	bl	80010e0 <LCD_IO_WriteCmd8>
  ILI9486_LCDMUTEX_POP();
  LCD_IO_Bl_OnOff(1);
 80007ba:	2001      	movs	r0, #1
 80007bc:	f000 fb9b 	bl	8000ef6 <LCD_IO_Bl_OnOff>
}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <ili9486_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9486_GetLcdPixelWidth(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  return ILI9486_SIZE_X;
 80007c8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr

080007d6 <ili9486_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9486_GetLcdPixelHeight(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0
  return ILI9486_SIZE_Y;
 80007da:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80007de:	4618      	mov	r0, r3
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <ili9486_Init>:
  * @brief  ILI9486 initialization
  * @param  None
  * @retval None
  */
void ili9486_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  if((Is_ili9486_Initialized & ILI9486_LCD_INITIALIZED) == 0)
 80007ec:	4b33      	ldr	r3, [pc, #204]	; (80008bc <ili9486_Init+0xd4>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	f003 0301 	and.w	r3, r3, #1
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d115      	bne.n	8000824 <ili9486_Init+0x3c>
  {
    Is_ili9486_Initialized |= ILI9486_LCD_INITIALIZED;
 80007f8:	4b30      	ldr	r3, [pc, #192]	; (80008bc <ili9486_Init+0xd4>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4b2e      	ldr	r3, [pc, #184]	; (80008bc <ili9486_Init+0xd4>)
 8000804:	701a      	strb	r2, [r3, #0]
    if((Is_ili9486_Initialized & ILI9486_IO_INITIALIZED) == 0)
 8000806:	4b2d      	ldr	r3, [pc, #180]	; (80008bc <ili9486_Init+0xd4>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	f003 0302 	and.w	r3, r3, #2
 800080e:	2b00      	cmp	r3, #0
 8000810:	d101      	bne.n	8000816 <ili9486_Init+0x2e>
      LCD_IO_Init();
 8000812:	f000 fb7b 	bl	8000f0c <LCD_IO_Init>
    Is_ili9486_Initialized |= ILI9486_IO_INITIALIZED;
 8000816:	4b29      	ldr	r3, [pc, #164]	; (80008bc <ili9486_Init+0xd4>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	f043 0302 	orr.w	r3, r3, #2
 800081e:	b2da      	uxtb	r2, r3
 8000820:	4b26      	ldr	r3, [pc, #152]	; (80008bc <ili9486_Init+0xd4>)
 8000822:	701a      	strb	r2, [r3, #0]
  }
  LCD_Delay(10);
 8000824:	200a      	movs	r0, #10
 8000826:	f000 fb5b 	bl	8000ee0 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9486_SWRESET);
 800082a:	2001      	movs	r0, #1
 800082c:	f000 fc58 	bl	80010e0 <LCD_IO_WriteCmd8>
  LCD_Delay(100);
 8000830:	2064      	movs	r0, #100	; 0x64
 8000832:	f000 fb55 	bl	8000ee0 <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(ILI9486_RGB_INTERFACE, (uint8_t *)"\x00", 1); // RGB mode off (0xB0)
 8000836:	2201      	movs	r2, #1
 8000838:	4921      	ldr	r1, [pc, #132]	; (80008c0 <ili9486_Init+0xd8>)
 800083a:	20b0      	movs	r0, #176	; 0xb0
 800083c:	f001 f894 	bl	8001968 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8(ILI9486_SLPOUT);    // Exit Sleep (0x11)
 8000840:	2011      	movs	r0, #17
 8000842:	f000 fc4d 	bl	80010e0 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8000846:	200a      	movs	r0, #10
 8000848:	f000 fb4a 	bl	8000ee0 <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(ILI9486_PIXFMT, (uint8_t *)"\x55", 1); // interface format (0x3A)
 800084c:	2201      	movs	r2, #1
 800084e:	491d      	ldr	r1, [pc, #116]	; (80008c4 <ili9486_Init+0xdc>)
 8000850:	203a      	movs	r0, #58	; 0x3a
 8000852:	f001 f889 	bl	8001968 <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9486_MADCTL); LCD_IO_WriteData8(ILI9486_MAD_DATA_RIGHT_THEN_DOWN);
 8000856:	2036      	movs	r0, #54	; 0x36
 8000858:	f000 fc42 	bl	80010e0 <LCD_IO_WriteCmd8>
 800085c:	2028      	movs	r0, #40	; 0x28
 800085e:	f000 fce9 	bl	8001234 <LCD_IO_WriteData8>

  LCD_IO_WriteCmd8MultipleData8(ILI9486_PWCTR3, (uint8_t *)"\x44", 1); // 0xC2
 8000862:	2201      	movs	r2, #1
 8000864:	4918      	ldr	r1, [pc, #96]	; (80008c8 <ili9486_Init+0xe0>)
 8000866:	20c2      	movs	r0, #194	; 0xc2
 8000868:	f001 f87e 	bl	8001968 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9486_VMCTR1, (uint8_t *)"\x00\x00\x00\x00", 4); // 0xC5
 800086c:	2204      	movs	r2, #4
 800086e:	4917      	ldr	r1, [pc, #92]	; (80008cc <ili9486_Init+0xe4>)
 8000870:	20c5      	movs	r0, #197	; 0xc5
 8000872:	f001 f879 	bl	8001968 <LCD_IO_WriteCmd8MultipleData8>

  // positive gamma control (0xE0)
  LCD_IO_WriteCmd8MultipleData8(ILI9486_GMCTRP1, (uint8_t *)"\x0F\x1F\x1C\x0C\x0F\x08\x48\x98\x37\x0A\x13\x04\x11\x0D\x00", 15);
 8000876:	220f      	movs	r2, #15
 8000878:	4915      	ldr	r1, [pc, #84]	; (80008d0 <ili9486_Init+0xe8>)
 800087a:	20e0      	movs	r0, #224	; 0xe0
 800087c:	f001 f874 	bl	8001968 <LCD_IO_WriteCmd8MultipleData8>

  // negative gamma control (0xE1)
  LCD_IO_WriteCmd8MultipleData8(ILI9486_GMCTRN1, (uint8_t *)"\x0F\x32\x2E\x0B\x0D\x05\x47\x75\x37\x06\x10\x03\x24\x20\x00", 15);
 8000880:	220f      	movs	r2, #15
 8000882:	4914      	ldr	r1, [pc, #80]	; (80008d4 <ili9486_Init+0xec>)
 8000884:	20e1      	movs	r0, #225	; 0xe1
 8000886:	f001 f86f 	bl	8001968 <LCD_IO_WriteCmd8MultipleData8>

  // Digital gamma control1 (0xE2)
  LCD_IO_WriteCmd8MultipleData8(ILI9486_DGCTR1, (uint8_t *)"\x0F\x32\x2E\x0B\x0D\x05\x47\x75\x37\x06\x10\x03\x24\x20\x00", 15);
 800088a:	220f      	movs	r2, #15
 800088c:	4911      	ldr	r1, [pc, #68]	; (80008d4 <ili9486_Init+0xec>)
 800088e:	20e2      	movs	r0, #226	; 0xe2
 8000890:	f001 f86a 	bl	8001968 <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9486_NORON);     // Normal display on (0x13)
 8000894:	2013      	movs	r0, #19
 8000896:	f000 fc23 	bl	80010e0 <LCD_IO_WriteCmd8>
  LCD_IO_WriteCmd8(ILI9486_INVOFF);    // Display inversion off (0x20)
 800089a:	2020      	movs	r0, #32
 800089c:	f000 fc20 	bl	80010e0 <LCD_IO_WriteCmd8>
  LCD_IO_WriteCmd8(ILI9486_SLPOUT);    // Exit Sleep (0x11)
 80008a0:	2011      	movs	r0, #17
 80008a2:	f000 fc1d 	bl	80010e0 <LCD_IO_WriteCmd8>
  LCD_Delay(200);
 80008a6:	20c8      	movs	r0, #200	; 0xc8
 80008a8:	f000 fb1a 	bl	8000ee0 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9486_DISPON);    // Display on (0x29)
 80008ac:	2029      	movs	r0, #41	; 0x29
 80008ae:	f000 fc17 	bl	80010e0 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 80008b2:	200a      	movs	r0, #10
 80008b4:	f000 fb14 	bl	8000ee0 <LCD_Delay>
}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	2400037c 	.word	0x2400037c
 80008c0:	0800972c 	.word	0x0800972c
 80008c4:	08009730 	.word	0x08009730
 80008c8:	08009734 	.word	0x08009734
 80008cc:	08009738 	.word	0x08009738
 80008d0:	08009740 	.word	0x08009740
 80008d4:	08009750 	.word	0x08009750

080008d8 <ili9486_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9486_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	80fb      	strh	r3, [r7, #6]
 80008e2:	460b      	mov	r3, r1
 80008e4:	80bb      	strh	r3, [r7, #4]
 80008e6:	4613      	mov	r3, r2
 80008e8:	807b      	strh	r3, [r7, #2]
  ILI9486_LCDMUTEX_PUSH();
  ILI9486_SETCURSOR(Xpos, Ypos);
 80008ea:	202a      	movs	r0, #42	; 0x2a
 80008ec:	f000 fbf8 	bl	80010e0 <LCD_IO_WriteCmd8>
 80008f0:	88fb      	ldrh	r3, [r7, #6]
 80008f2:	0a1b      	lsrs	r3, r3, #8
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	4618      	mov	r0, r3
 80008fa:	f000 fc9b 	bl	8001234 <LCD_IO_WriteData8>
 80008fe:	88fb      	ldrh	r3, [r7, #6]
 8000900:	b2db      	uxtb	r3, r3
 8000902:	4618      	mov	r0, r3
 8000904:	f000 fc96 	bl	8001234 <LCD_IO_WriteData8>
 8000908:	88fb      	ldrh	r3, [r7, #6]
 800090a:	0a1b      	lsrs	r3, r3, #8
 800090c:	b29b      	uxth	r3, r3
 800090e:	b2db      	uxtb	r3, r3
 8000910:	4618      	mov	r0, r3
 8000912:	f000 fc8f 	bl	8001234 <LCD_IO_WriteData8>
 8000916:	88fb      	ldrh	r3, [r7, #6]
 8000918:	b2db      	uxtb	r3, r3
 800091a:	4618      	mov	r0, r3
 800091c:	f000 fc8a 	bl	8001234 <LCD_IO_WriteData8>
 8000920:	202b      	movs	r0, #43	; 0x2b
 8000922:	f000 fbdd 	bl	80010e0 <LCD_IO_WriteCmd8>
 8000926:	88bb      	ldrh	r3, [r7, #4]
 8000928:	0a1b      	lsrs	r3, r3, #8
 800092a:	b29b      	uxth	r3, r3
 800092c:	b2db      	uxtb	r3, r3
 800092e:	4618      	mov	r0, r3
 8000930:	f000 fc80 	bl	8001234 <LCD_IO_WriteData8>
 8000934:	88bb      	ldrh	r3, [r7, #4]
 8000936:	b2db      	uxtb	r3, r3
 8000938:	4618      	mov	r0, r3
 800093a:	f000 fc7b 	bl	8001234 <LCD_IO_WriteData8>
 800093e:	88bb      	ldrh	r3, [r7, #4]
 8000940:	0a1b      	lsrs	r3, r3, #8
 8000942:	b29b      	uxth	r3, r3
 8000944:	b2db      	uxtb	r3, r3
 8000946:	4618      	mov	r0, r3
 8000948:	f000 fc74 	bl	8001234 <LCD_IO_WriteData8>
 800094c:	88bb      	ldrh	r3, [r7, #4]
 800094e:	b2db      	uxtb	r3, r3
 8000950:	4618      	mov	r0, r3
 8000952:	f000 fc6f 	bl	8001234 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_RAMWR); LCD_IO_WriteData16(RGBCode);
 8000956:	202c      	movs	r0, #44	; 0x2c
 8000958:	f000 fbc2 	bl	80010e0 <LCD_IO_WriteCmd8>
 800095c:	887b      	ldrh	r3, [r7, #2]
 800095e:	4618      	mov	r0, r3
 8000960:	f000 fd0a 	bl	8001378 <LCD_IO_WriteData16>
  ILI9486_LCDMUTEX_POP();
}
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}

0800096c <ili9486_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9486_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800096c:	b590      	push	{r4, r7, lr}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	4604      	mov	r4, r0
 8000974:	4608      	mov	r0, r1
 8000976:	4611      	mov	r1, r2
 8000978:	461a      	mov	r2, r3
 800097a:	4623      	mov	r3, r4
 800097c:	80fb      	strh	r3, [r7, #6]
 800097e:	4603      	mov	r3, r0
 8000980:	80bb      	strh	r3, [r7, #4]
 8000982:	460b      	mov	r3, r1
 8000984:	807b      	strh	r3, [r7, #2]
 8000986:	4613      	mov	r3, r2
 8000988:	803b      	strh	r3, [r7, #0]
  yStart = Ypos; yEnd = Ypos + Height - 1;
 800098a:	4a2a      	ldr	r2, [pc, #168]	; (8000a34 <ili9486_SetDisplayWindow+0xc8>)
 800098c:	88bb      	ldrh	r3, [r7, #4]
 800098e:	8013      	strh	r3, [r2, #0]
 8000990:	88ba      	ldrh	r2, [r7, #4]
 8000992:	883b      	ldrh	r3, [r7, #0]
 8000994:	4413      	add	r3, r2
 8000996:	b29b      	uxth	r3, r3
 8000998:	3b01      	subs	r3, #1
 800099a:	b29a      	uxth	r2, r3
 800099c:	4b26      	ldr	r3, [pc, #152]	; (8000a38 <ili9486_SetDisplayWindow+0xcc>)
 800099e:	801a      	strh	r2, [r3, #0]
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Width - 1);
 80009a0:	202a      	movs	r0, #42	; 0x2a
 80009a2:	f000 fb9d 	bl	80010e0 <LCD_IO_WriteCmd8>
 80009a6:	88fb      	ldrh	r3, [r7, #6]
 80009a8:	0a1b      	lsrs	r3, r3, #8
 80009aa:	b29b      	uxth	r3, r3
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	4618      	mov	r0, r3
 80009b0:	f000 fc40 	bl	8001234 <LCD_IO_WriteData8>
 80009b4:	88fb      	ldrh	r3, [r7, #6]
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	4618      	mov	r0, r3
 80009ba:	f000 fc3b 	bl	8001234 <LCD_IO_WriteData8>
 80009be:	88fa      	ldrh	r2, [r7, #6]
 80009c0:	887b      	ldrh	r3, [r7, #2]
 80009c2:	4413      	add	r3, r2
 80009c4:	3b01      	subs	r3, #1
 80009c6:	121b      	asrs	r3, r3, #8
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	4618      	mov	r0, r3
 80009cc:	f000 fc32 	bl	8001234 <LCD_IO_WriteData8>
 80009d0:	88fb      	ldrh	r3, [r7, #6]
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	887b      	ldrh	r3, [r7, #2]
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	4413      	add	r3, r2
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	3b01      	subs	r3, #1
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	4618      	mov	r0, r3
 80009e2:	f000 fc27 	bl	8001234 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Height - 1);
 80009e6:	202b      	movs	r0, #43	; 0x2b
 80009e8:	f000 fb7a 	bl	80010e0 <LCD_IO_WriteCmd8>
 80009ec:	88bb      	ldrh	r3, [r7, #4]
 80009ee:	0a1b      	lsrs	r3, r3, #8
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	4618      	mov	r0, r3
 80009f6:	f000 fc1d 	bl	8001234 <LCD_IO_WriteData8>
 80009fa:	88bb      	ldrh	r3, [r7, #4]
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	4618      	mov	r0, r3
 8000a00:	f000 fc18 	bl	8001234 <LCD_IO_WriteData8>
 8000a04:	88ba      	ldrh	r2, [r7, #4]
 8000a06:	883b      	ldrh	r3, [r7, #0]
 8000a08:	4413      	add	r3, r2
 8000a0a:	3b01      	subs	r3, #1
 8000a0c:	121b      	asrs	r3, r3, #8
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	4618      	mov	r0, r3
 8000a12:	f000 fc0f 	bl	8001234 <LCD_IO_WriteData8>
 8000a16:	88bb      	ldrh	r3, [r7, #4]
 8000a18:	b2da      	uxtb	r2, r3
 8000a1a:	883b      	ldrh	r3, [r7, #0]
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	4413      	add	r3, r2
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	3b01      	subs	r3, #1
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	4618      	mov	r0, r3
 8000a28:	f000 fc04 	bl	8001234 <LCD_IO_WriteData8>
  ILI9486_LCDMUTEX_POP();
}
 8000a2c:	bf00      	nop
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd90      	pop	{r4, r7, pc}
 8000a34:	2400037e 	.word	0x2400037e
 8000a38:	24000380 	.word	0x24000380

08000a3c <ili9486_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9486_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 8000a3c:	b590      	push	{r4, r7, lr}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4604      	mov	r4, r0
 8000a44:	4608      	mov	r0, r1
 8000a46:	4611      	mov	r1, r2
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4623      	mov	r3, r4
 8000a4c:	80fb      	strh	r3, [r7, #6]
 8000a4e:	4603      	mov	r3, r0
 8000a50:	80bb      	strh	r3, [r7, #4]
 8000a52:	460b      	mov	r3, r1
 8000a54:	807b      	strh	r3, [r7, #2]
 8000a56:	4613      	mov	r3, r2
 8000a58:	803b      	strh	r3, [r7, #0]
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9486_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Xsize - 1);
 8000a5a:	202a      	movs	r0, #42	; 0x2a
 8000a5c:	f000 fb40 	bl	80010e0 <LCD_IO_WriteCmd8>
 8000a60:	88fb      	ldrh	r3, [r7, #6]
 8000a62:	0a1b      	lsrs	r3, r3, #8
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f000 fbe3 	bl	8001234 <LCD_IO_WriteData8>
 8000a6e:	88fb      	ldrh	r3, [r7, #6]
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 fbde 	bl	8001234 <LCD_IO_WriteData8>
 8000a78:	88fa      	ldrh	r2, [r7, #6]
 8000a7a:	887b      	ldrh	r3, [r7, #2]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	3b01      	subs	r3, #1
 8000a80:	121b      	asrs	r3, r3, #8
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	4618      	mov	r0, r3
 8000a86:	f000 fbd5 	bl	8001234 <LCD_IO_WriteData8>
 8000a8a:	88fb      	ldrh	r3, [r7, #6]
 8000a8c:	b2da      	uxtb	r2, r3
 8000a8e:	887b      	ldrh	r3, [r7, #2]
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	4413      	add	r3, r2
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	3b01      	subs	r3, #1
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 fbca 	bl	8001234 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9486_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Ysize - 1);
 8000aa0:	202b      	movs	r0, #43	; 0x2b
 8000aa2:	f000 fb1d 	bl	80010e0 <LCD_IO_WriteCmd8>
 8000aa6:	88bb      	ldrh	r3, [r7, #4]
 8000aa8:	0a1b      	lsrs	r3, r3, #8
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 fbc0 	bl	8001234 <LCD_IO_WriteData8>
 8000ab4:	88bb      	ldrh	r3, [r7, #4]
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f000 fbbb 	bl	8001234 <LCD_IO_WriteData8>
 8000abe:	88ba      	ldrh	r2, [r7, #4]
 8000ac0:	883b      	ldrh	r3, [r7, #0]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	3b01      	subs	r3, #1
 8000ac6:	121b      	asrs	r3, r3, #8
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	4618      	mov	r0, r3
 8000acc:	f000 fbb2 	bl	8001234 <LCD_IO_WriteData8>
 8000ad0:	88bb      	ldrh	r3, [r7, #4]
 8000ad2:	b2da      	uxtb	r2, r3
 8000ad4:	883b      	ldrh	r3, [r7, #0]
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	4413      	add	r3, r2
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	3b01      	subs	r3, #1
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f000 fba7 	bl	8001234 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9486_RAMWR, RGBCode, Xsize * Ysize);
 8000ae6:	887b      	ldrh	r3, [r7, #2]
 8000ae8:	883a      	ldrh	r2, [r7, #0]
 8000aea:	fb02 f303 	mul.w	r3, r2, r3
 8000aee:	461a      	mov	r2, r3
 8000af0:	8b3b      	ldrh	r3, [r7, #24]
 8000af2:	4619      	mov	r1, r3
 8000af4:	202c      	movs	r0, #44	; 0x2c
 8000af6:	f000 fd69 	bl	80015cc <LCD_IO_WriteCmd8DataFill16>
  ILI9486_LCDMUTEX_POP();
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd90      	pop	{r4, r7, pc}

08000b02 <ili9486_DrawRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9486_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 8000b02:	b590      	push	{r4, r7, lr}
 8000b04:	b083      	sub	sp, #12
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	4604      	mov	r4, r0
 8000b0a:	4608      	mov	r0, r1
 8000b0c:	4611      	mov	r1, r2
 8000b0e:	461a      	mov	r2, r3
 8000b10:	4623      	mov	r3, r4
 8000b12:	80fb      	strh	r3, [r7, #6]
 8000b14:	4603      	mov	r3, r0
 8000b16:	80bb      	strh	r3, [r7, #4]
 8000b18:	460b      	mov	r3, r1
 8000b1a:	807b      	strh	r3, [r7, #2]
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	803b      	strh	r3, [r7, #0]
  ili9486_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8000b20:	883b      	ldrh	r3, [r7, #0]
 8000b22:	887a      	ldrh	r2, [r7, #2]
 8000b24:	88b9      	ldrh	r1, [r7, #4]
 8000b26:	88f8      	ldrh	r0, [r7, #6]
 8000b28:	f7ff ff20 	bl	800096c <ili9486_SetDisplayWindow>
  ILI9486_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData16(ILI9486_RAMWR, pData, Xsize * Ysize);
 8000b2c:	887b      	ldrh	r3, [r7, #2]
 8000b2e:	883a      	ldrh	r2, [r7, #0]
 8000b30:	fb02 f303 	mul.w	r3, r2, r3
 8000b34:	461a      	mov	r2, r3
 8000b36:	69b9      	ldr	r1, [r7, #24]
 8000b38:	202c      	movs	r0, #44	; 0x2c
 8000b3a:	f001 f84f 	bl	8001bdc <LCD_IO_WriteCmd8MultipleData16>
  ILI9486_LCDMUTEX_POP();
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd90      	pop	{r4, r7, pc}

08000b46 <ili9486_WriteChar>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Char background Color
  * @retval None
  */
void ili9486_WriteChar(uint16_t Xpo, uint16_t Ypo, char *chr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 8000b46:	b082      	sub	sp, #8
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	; 0x28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	603a      	str	r2, [r7, #0]
 8000b50:	637b      	str	r3, [r7, #52]	; 0x34
 8000b52:	4603      	mov	r3, r0
 8000b54:	80fb      	strh	r3, [r7, #6]
 8000b56:	460b      	mov	r3, r1
 8000b58:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9486_WriteChar(140, 50, "E", Font24, cl_ORANGE, cl_BLACK);
	 * */
	//// stored font data
	uint32_t hop32 = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t b8[4] = {0};
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
	 * c = i * rowbox -> jump to next column in next i rowloop
	 * k => jump to next row in that column
	 * */

	//// find num of bit rows per jump in fonts.c
	int rowbox = ceilf((float)(fonto.Width) / 8);
 8000b62:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000b64:	ee07 3a90 	vmov	s15, r3
 8000b68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b6c:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8000b70:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000b74:	eeb0 0a47 	vmov.f32	s0, s14
 8000b78:	f008 fd8a 	bl	8009690 <ceilf>
 8000b7c:	eef0 7a40 	vmov.f32	s15, s0
 8000b80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b84:	ee17 3a90 	vmov	r3, s15
 8000b88:	617b      	str	r3, [r7, #20]

	//// choose MSB check pos for each font size
	//// 0x80 , 0x8000 , 0x 800000
	uint32_t clif_msb = 0x80 << (8 * (rowbox - 1));
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	3b01      	subs	r3, #1
 8000b8e:	00db      	lsls	r3, r3, #3
 8000b90:	2280      	movs	r2, #128	; 0x80
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	613b      	str	r3, [r7, #16]

	//// -32 to offset sync ASCII Table start " " at 32
	//// double for loop as one char table
	for(int i = 0; i < fonto.Height; i++){
 8000b98:	2300      	movs	r3, #0
 8000b9a:	623b      	str	r3, [r7, #32]
 8000b9c:	e060      	b.n	8000c60 <ili9486_WriteChar+0x11a>
		hop32 = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
 8000ba6:	e024      	b.n	8000bf2 <ili9486_WriteChar+0xac>
			b8[k] = fonto.table[((int)(*chr - 32) * fonto.Height * rowbox) + (i * rowbox) + k];
 8000ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000baa:	683a      	ldr	r2, [r7, #0]
 8000bac:	7812      	ldrb	r2, [r2, #0]
 8000bae:	3a20      	subs	r2, #32
 8000bb0:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 8000bb2:	fb01 f202 	mul.w	r2, r1, r2
 8000bb6:	6979      	ldr	r1, [r7, #20]
 8000bb8:	fb02 f101 	mul.w	r1, r2, r1
 8000bbc:	6a3a      	ldr	r2, [r7, #32]
 8000bbe:	6978      	ldr	r0, [r7, #20]
 8000bc0:	fb00 f202 	mul.w	r2, r0, r2
 8000bc4:	4411      	add	r1, r2
 8000bc6:	69fa      	ldr	r2, [r7, #28]
 8000bc8:	440a      	add	r2, r1
 8000bca:	4413      	add	r3, r2
 8000bcc:	7819      	ldrb	r1, [r3, #0]
 8000bce:	f107 020c 	add.w	r2, r7, #12
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	460a      	mov	r2, r1
 8000bd8:	701a      	strb	r2, [r3, #0]
			hop32 = (hop32 << 8) + b8[k];
 8000bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bdc:	021b      	lsls	r3, r3, #8
 8000bde:	f107 010c 	add.w	r1, r7, #12
 8000be2:	69fa      	ldr	r2, [r7, #28]
 8000be4:	440a      	add	r2, r1
 8000be6:	7812      	ldrb	r2, [r2, #0]
 8000be8:	4413      	add	r3, r2
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	61fb      	str	r3, [r7, #28]
 8000bf2:	69fa      	ldr	r2, [r7, #28]
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	dbd6      	blt.n	8000ba8 <ili9486_WriteChar+0x62>
		}

		for(int j = 0; j < fonto.Width; j++){
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61bb      	str	r3, [r7, #24]
 8000bfe:	e027      	b.n	8000c50 <ili9486_WriteChar+0x10a>
			//// if valuein fonttable is 1
			if((hop32 << j) & clif_msb){ // buu32.b32
 8000c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c02:	69bb      	ldr	r3, [r7, #24]
 8000c04:	409a      	lsls	r2, r3
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d00e      	beq.n	8000c2c <ili9486_WriteChar+0xe6>
				ili9486_WritePixel(Xpo + j, Ypo + i, RGB_Coder);
 8000c0e:	69bb      	ldr	r3, [r7, #24]
 8000c10:	b29a      	uxth	r2, r3
 8000c12:	88fb      	ldrh	r3, [r7, #6]
 8000c14:	4413      	add	r3, r2
 8000c16:	b298      	uxth	r0, r3
 8000c18:	6a3b      	ldr	r3, [r7, #32]
 8000c1a:	b29a      	uxth	r2, r3
 8000c1c:	88bb      	ldrh	r3, [r7, #4]
 8000c1e:	4413      	add	r3, r2
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8000c24:	4619      	mov	r1, r3
 8000c26:	f7ff fe57 	bl	80008d8 <ili9486_WritePixel>
 8000c2a:	e00e      	b.n	8000c4a <ili9486_WriteChar+0x104>
			}
			//// for background write
			else{
				ili9486_WritePixel(Xpo + j, Ypo + i, RGB_bg);
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	b29a      	uxth	r2, r3
 8000c30:	88fb      	ldrh	r3, [r7, #6]
 8000c32:	4413      	add	r3, r2
 8000c34:	b298      	uxth	r0, r3
 8000c36:	6a3b      	ldr	r3, [r7, #32]
 8000c38:	b29a      	uxth	r2, r3
 8000c3a:	88bb      	ldrh	r3, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	b29b      	uxth	r3, r3
 8000c40:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8000c44:	4619      	mov	r1, r3
 8000c46:	f7ff fe47 	bl	80008d8 <ili9486_WritePixel>
		for(int j = 0; j < fonto.Width; j++){
 8000c4a:	69bb      	ldr	r3, [r7, #24]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	61bb      	str	r3, [r7, #24]
 8000c50:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000c52:	461a      	mov	r2, r3
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	4293      	cmp	r3, r2
 8000c58:	dbd2      	blt.n	8000c00 <ili9486_WriteChar+0xba>
	for(int i = 0; i < fonto.Height; i++){
 8000c5a:	6a3b      	ldr	r3, [r7, #32]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	623b      	str	r3, [r7, #32]
 8000c60:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000c62:	461a      	mov	r2, r3
 8000c64:	6a3b      	ldr	r3, [r7, #32]
 8000c66:	4293      	cmp	r3, r2
 8000c68:	db99      	blt.n	8000b9e <ili9486_WriteChar+0x58>
			}

		}
	}
}
 8000c6a:	bf00      	nop
 8000c6c:	bf00      	nop
 8000c6e:	3728      	adds	r7, #40	; 0x28
 8000c70:	46bd      	mov	sp, r7
 8000c72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c76:	b002      	add	sp, #8
 8000c78:	4770      	bx	lr

08000c7a <ili9486_WriteCharNoBG>:
  * @param  chr:  Display Char
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @retval None
  */
void ili9486_WriteCharNoBG(uint16_t Xpo, uint16_t Ypo, char *chr,sFONT fonto, uint16_t RGB_Coder){
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08a      	sub	sp, #40	; 0x28
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	603a      	str	r2, [r7, #0]
 8000c84:	637b      	str	r3, [r7, #52]	; 0x34
 8000c86:	4603      	mov	r3, r0
 8000c88:	80fb      	strh	r3, [r7, #6]
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9486_WriteCharNoBG(10, 30, "E", Font24, cl_ORANGE);
	 * */
	//// stored font data
	uint32_t hop32 = 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t b8[4] = {0};
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]

	//// find num of bit rows per jump in fonts.c
	int rowbox = ceilf((float)(fonto.Width) / 8);
 8000c96:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000c98:	ee07 3a90 	vmov	s15, r3
 8000c9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ca0:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8000ca4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000ca8:	eeb0 0a47 	vmov.f32	s0, s14
 8000cac:	f008 fcf0 	bl	8009690 <ceilf>
 8000cb0:	eef0 7a40 	vmov.f32	s15, s0
 8000cb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cb8:	ee17 3a90 	vmov	r3, s15
 8000cbc:	617b      	str	r3, [r7, #20]
	uint32_t clif_msb = 0x80 << (8 * (rowbox - 1));
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	3b01      	subs	r3, #1
 8000cc2:	00db      	lsls	r3, r3, #3
 8000cc4:	2280      	movs	r2, #128	; 0x80
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < fonto.Height; i++){
 8000ccc:	2300      	movs	r3, #0
 8000cce:	623b      	str	r3, [r7, #32]
 8000cd0:	e050      	b.n	8000d74 <ili9486_WriteCharNoBG+0xfa>
		hop32 = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]
 8000cda:	e024      	b.n	8000d26 <ili9486_WriteCharNoBG+0xac>
			b8[k] = fonto.table[((int)(*chr - 32) * fonto.Height * rowbox) + (i * rowbox) + k];
 8000cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cde:	683a      	ldr	r2, [r7, #0]
 8000ce0:	7812      	ldrb	r2, [r2, #0]
 8000ce2:	3a20      	subs	r2, #32
 8000ce4:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 8000ce6:	fb01 f202 	mul.w	r2, r1, r2
 8000cea:	6979      	ldr	r1, [r7, #20]
 8000cec:	fb02 f101 	mul.w	r1, r2, r1
 8000cf0:	6a3a      	ldr	r2, [r7, #32]
 8000cf2:	6978      	ldr	r0, [r7, #20]
 8000cf4:	fb00 f202 	mul.w	r2, r0, r2
 8000cf8:	4411      	add	r1, r2
 8000cfa:	69fa      	ldr	r2, [r7, #28]
 8000cfc:	440a      	add	r2, r1
 8000cfe:	4413      	add	r3, r2
 8000d00:	7819      	ldrb	r1, [r3, #0]
 8000d02:	f107 020c 	add.w	r2, r7, #12
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	4413      	add	r3, r2
 8000d0a:	460a      	mov	r2, r1
 8000d0c:	701a      	strb	r2, [r3, #0]
			hop32 = (hop32 << 8) + b8[k];
 8000d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d10:	021b      	lsls	r3, r3, #8
 8000d12:	f107 010c 	add.w	r1, r7, #12
 8000d16:	69fa      	ldr	r2, [r7, #28]
 8000d18:	440a      	add	r2, r1
 8000d1a:	7812      	ldrb	r2, [r2, #0]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	3301      	adds	r3, #1
 8000d24:	61fb      	str	r3, [r7, #28]
 8000d26:	69fa      	ldr	r2, [r7, #28]
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	dbd6      	blt.n	8000cdc <ili9486_WriteCharNoBG+0x62>
		}

		for(int j = 0; j < fonto.Width; j++){
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61bb      	str	r3, [r7, #24]
 8000d32:	e017      	b.n	8000d64 <ili9486_WriteCharNoBG+0xea>
			//// if valuein fonttable is 1
			if((hop32 << j) & clif_msb){ // buu32.b32
 8000d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	409a      	lsls	r2, r3
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d00d      	beq.n	8000d5e <ili9486_WriteCharNoBG+0xe4>
				ili9486_WritePixel(Xpo + j, Ypo + i, RGB_Coder);
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	b29a      	uxth	r2, r3
 8000d46:	88fb      	ldrh	r3, [r7, #6]
 8000d48:	4413      	add	r3, r2
 8000d4a:	b298      	uxth	r0, r3
 8000d4c:	6a3b      	ldr	r3, [r7, #32]
 8000d4e:	b29a      	uxth	r2, r3
 8000d50:	88bb      	ldrh	r3, [r7, #4]
 8000d52:	4413      	add	r3, r2
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f7ff fdbd 	bl	80008d8 <ili9486_WritePixel>
		for(int j = 0; j < fonto.Width; j++){
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	3301      	adds	r3, #1
 8000d62:	61bb      	str	r3, [r7, #24]
 8000d64:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000d66:	461a      	mov	r2, r3
 8000d68:	69bb      	ldr	r3, [r7, #24]
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	dbe2      	blt.n	8000d34 <ili9486_WriteCharNoBG+0xba>
	for(int i = 0; i < fonto.Height; i++){
 8000d6e:	6a3b      	ldr	r3, [r7, #32]
 8000d70:	3301      	adds	r3, #1
 8000d72:	623b      	str	r3, [r7, #32]
 8000d74:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000d76:	461a      	mov	r2, r3
 8000d78:	6a3b      	ldr	r3, [r7, #32]
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	dba9      	blt.n	8000cd2 <ili9486_WriteCharNoBG+0x58>
			}
		}
	}
}
 8000d7e:	bf00      	nop
 8000d80:	bf00      	nop
 8000d82:	3728      	adds	r7, #40	; 0x28
 8000d84:	46bd      	mov	sp, r7
 8000d86:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d8a:	b002      	add	sp, #8
 8000d8c:	4770      	bx	lr

08000d8e <ili9486_WriteString>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Text background Color
  * @retval None
  */
void ili9486_WriteString(uint16_t Xpo, uint16_t Ypo,const char* strr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 8000d8e:	b082      	sub	sp, #8
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af04      	add	r7, sp, #16
 8000d96:	603a      	str	r2, [r7, #0]
 8000d98:	61fb      	str	r3, [r7, #28]
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	80fb      	strh	r3, [r7, #6]
 8000d9e:	460b      	mov	r3, r1
 8000da0:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9486_WriteString(20, 300, "Helios xTerra", Font20, cl_WHITE, cl_BLACK);
	 * */
	uint16_t ili_heigh = ili9486_GetLcdPixelHeight();
 8000da2:	f7ff fd18 	bl	80007d6 <ili9486_GetLcdPixelHeight>
 8000da6:	4603      	mov	r3, r0
 8000da8:	81fb      	strh	r3, [r7, #14]
	uint16_t ili_width = ili9486_GetLcdPixelWidth();
 8000daa:	f7ff fd0b 	bl	80007c4 <ili9486_GetLcdPixelWidth>
 8000dae:	4603      	mov	r3, r0
 8000db0:	81bb      	strh	r3, [r7, #12]
	while(*strr){
 8000db2:	e02c      	b.n	8000e0e <ili9486_WriteString+0x80>
	//// Check screen overflow / new line
		if(Xpo + fonto.Width >= ili_width){
 8000db4:	88fb      	ldrh	r3, [r7, #6]
 8000db6:	8c3a      	ldrh	r2, [r7, #32]
 8000db8:	441a      	add	r2, r3
 8000dba:	89bb      	ldrh	r3, [r7, #12]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	db13      	blt.n	8000de8 <ili9486_WriteString+0x5a>
			Xpo = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	80fb      	strh	r3, [r7, #6]
			Ypo += fonto.Height;
 8000dc4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000dc6:	88bb      	ldrh	r3, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	80bb      	strh	r3, [r7, #4]

			if(Ypo + fonto.Height >= ili_heigh){
 8000dcc:	88bb      	ldrh	r3, [r7, #4]
 8000dce:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000dd0:	441a      	add	r2, r3
 8000dd2:	89fb      	ldrh	r3, [r7, #14]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	da1f      	bge.n	8000e18 <ili9486_WriteString+0x8a>
				break;
			}

			if(*strr == ' ') {
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b20      	cmp	r3, #32
 8000dde:	d103      	bne.n	8000de8 <ili9486_WriteString+0x5a>
				// skip spaces in the beginning of the new line
				strr++;
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	3301      	adds	r3, #1
 8000de4:	603b      	str	r3, [r7, #0]
				continue;
 8000de6:	e012      	b.n	8000e0e <ili9486_WriteString+0x80>
			}
		}
		//ST7735_WriteChar(x, y, *str, font, color, bgcolor);
		ili9486_WriteChar(Xpo, Ypo, strr, fonto, RGB_Coder, RGB_bg);
 8000de8:	88b9      	ldrh	r1, [r7, #4]
 8000dea:	88f8      	ldrh	r0, [r7, #6]
 8000dec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000dee:	9302      	str	r3, [sp, #8]
 8000df0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000df2:	9301      	str	r3, [sp, #4]
 8000df4:	6a3b      	ldr	r3, [r7, #32]
 8000df6:	9300      	str	r3, [sp, #0]
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	683a      	ldr	r2, [r7, #0]
 8000dfc:	f7ff fea3 	bl	8000b46 <ili9486_WriteChar>
		Xpo += fonto.Width;
 8000e00:	8c3a      	ldrh	r2, [r7, #32]
 8000e02:	88fb      	ldrh	r3, [r7, #6]
 8000e04:	4413      	add	r3, r2
 8000e06:	80fb      	strh	r3, [r7, #6]
		strr++;
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	603b      	str	r3, [r7, #0]
	while(*strr){
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d1ce      	bne.n	8000db4 <ili9486_WriteString+0x26>
	}
}
 8000e16:	e000      	b.n	8000e1a <ili9486_WriteString+0x8c>
				break;
 8000e18:	bf00      	nop
}
 8000e1a:	bf00      	nop
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e24:	b002      	add	sp, #8
 8000e26:	4770      	bx	lr

08000e28 <ili9486_WriteStringNoBG>:
  * @param  Strr:  Display Text
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @retval None
  */
void ili9486_WriteStringNoBG(uint16_t Xpo, uint16_t Ypo,const char* strr,sFONT fonto, uint16_t RGB_Coder){
 8000e28:	b082      	sub	sp, #8
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b086      	sub	sp, #24
 8000e2e:	af02      	add	r7, sp, #8
 8000e30:	603a      	str	r2, [r7, #0]
 8000e32:	61fb      	str	r3, [r7, #28]
 8000e34:	4603      	mov	r3, r0
 8000e36:	80fb      	strh	r3, [r7, #6]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9486_WriteString(20, 300, "Helios xTerra", Font20, cl_WHITE, cl_BLACK);
	 * */
	uint16_t ili_heigh = ili9486_GetLcdPixelHeight();
 8000e3c:	f7ff fccb 	bl	80007d6 <ili9486_GetLcdPixelHeight>
 8000e40:	4603      	mov	r3, r0
 8000e42:	81fb      	strh	r3, [r7, #14]
	uint16_t ili_width = ili9486_GetLcdPixelWidth();
 8000e44:	f7ff fcbe 	bl	80007c4 <ili9486_GetLcdPixelWidth>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	81bb      	strh	r3, [r7, #12]
	while(*strr){
 8000e4c:	e02a      	b.n	8000ea4 <ili9486_WriteStringNoBG+0x7c>
	//// Check screen overflow / new line
		if(Xpo + fonto.Width >= ili_width){
 8000e4e:	88fb      	ldrh	r3, [r7, #6]
 8000e50:	8c3a      	ldrh	r2, [r7, #32]
 8000e52:	441a      	add	r2, r3
 8000e54:	89bb      	ldrh	r3, [r7, #12]
 8000e56:	429a      	cmp	r2, r3
 8000e58:	db13      	blt.n	8000e82 <ili9486_WriteStringNoBG+0x5a>
			Xpo = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	80fb      	strh	r3, [r7, #6]
			Ypo += fonto.Height;
 8000e5e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000e60:	88bb      	ldrh	r3, [r7, #4]
 8000e62:	4413      	add	r3, r2
 8000e64:	80bb      	strh	r3, [r7, #4]

			if(Ypo + fonto.Height >= ili_heigh){
 8000e66:	88bb      	ldrh	r3, [r7, #4]
 8000e68:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000e6a:	441a      	add	r2, r3
 8000e6c:	89fb      	ldrh	r3, [r7, #14]
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	da1d      	bge.n	8000eae <ili9486_WriteStringNoBG+0x86>
				break;
			}
			if(*strr == ' ') {
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b20      	cmp	r3, #32
 8000e78:	d103      	bne.n	8000e82 <ili9486_WriteStringNoBG+0x5a>
				strr++;
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	603b      	str	r3, [r7, #0]
				continue;
 8000e80:	e010      	b.n	8000ea4 <ili9486_WriteStringNoBG+0x7c>
			}
		}
		ili9486_WriteCharNoBG(Xpo, Ypo, strr, fonto, RGB_Coder);
 8000e82:	88b9      	ldrh	r1, [r7, #4]
 8000e84:	88f8      	ldrh	r0, [r7, #6]
 8000e86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e88:	9301      	str	r3, [sp, #4]
 8000e8a:	6a3b      	ldr	r3, [r7, #32]
 8000e8c:	9300      	str	r3, [sp, #0]
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	683a      	ldr	r2, [r7, #0]
 8000e92:	f7ff fef2 	bl	8000c7a <ili9486_WriteCharNoBG>
		Xpo += fonto.Width;
 8000e96:	8c3a      	ldrh	r2, [r7, #32]
 8000e98:	88fb      	ldrh	r3, [r7, #6]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	80fb      	strh	r3, [r7, #6]
		strr++;
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	603b      	str	r3, [r7, #0]
	while(*strr){
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d1d0      	bne.n	8000e4e <ili9486_WriteStringNoBG+0x26>
	}
}
 8000eac:	e000      	b.n	8000eb0 <ili9486_WriteStringNoBG+0x88>
				break;
 8000eae:	bf00      	nop
}
 8000eb0:	bf00      	nop
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000eba:	b002      	add	sp, #8
 8000ebc:	4770      	bx	lr

08000ebe <LCD_IO_Delay>:
#elif   defined(__CC_ARM)
#pragma push
#pragma O0
#endif
void LCD_IO_Delay(uint32_t c)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	b083      	sub	sp, #12
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
  while(c--);
 8000ec6:	bf00      	nop
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	1e5a      	subs	r2, r3, #1
 8000ecc:	607a      	str	r2, [r7, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d1fa      	bne.n	8000ec8 <LCD_IO_Delay+0xa>
}
 8000ed2:	bf00      	nop
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <LCD_Delay>:
#pragma pop
#endif

//-----------------------------------------------------------------------------
void LCD_Delay(uint32_t Delay)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f002 f9e5 	bl	80032b8 <HAL_Delay>
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	b083      	sub	sp, #12
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	4603      	mov	r3, r0
 8000efe:	71fb      	strb	r3, [r7, #7]
    GPIOX_CLR(LCD_BL);
  else
    GPIOX_SET(LCD_BL);
  #endif
  #endif
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  #define GPIOX_CLOCK_LCD_RD    GPIOX_CLOCK(LCD_RD)
  #else
  #define GPIOX_CLOCK_LCD_RD    0
  #endif

  RCC->AHB4ENR |= (GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_WR) |
 8000f10:	4b6c      	ldr	r3, [pc, #432]	; (80010c4 <LCD_IO_Init+0x1b8>)
 8000f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f16:	4a6b      	ldr	r2, [pc, #428]	; (80010c4 <LCD_IO_Init+0x1b8>)
 8000f18:	f043 035f 	orr.w	r3, r3, #95	; 0x5f
 8000f1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
                   GPIOX_CLOCK(LCD_D0) | GPIOX_CLOCK(LCD_D1) | GPIOX_CLOCK(LCD_D2) | GPIOX_CLOCK(LCD_D3) |
                   GPIOX_CLOCK(LCD_D4) | GPIOX_CLOCK(LCD_D5) | GPIOX_CLOCK(LCD_D6) | GPIOX_CLOCK(LCD_D7) |
                   GPIOX_CLOCK_LCD_RST | GPIOX_CLOCK_LCD_BL  | GPIOX_CLOCK_LCD_RD);

  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  LCD_RST_OFF;                          /* RST = 1 */
 8000f20:	4b69      	ldr	r3, [pc, #420]	; (80010c8 <LCD_IO_Init+0x1bc>)
 8000f22:	2204      	movs	r2, #4
 8000f24:	619a      	str	r2, [r3, #24]
  GPIOX_MODER(MODE_OUT, LCD_RST);
 8000f26:	4b68      	ldr	r3, [pc, #416]	; (80010c8 <LCD_IO_Init+0x1bc>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000f2e:	4a66      	ldr	r2, [pc, #408]	; (80010c8 <LCD_IO_Init+0x1bc>)
 8000f30:	f043 0310 	orr.w	r3, r3, #16
 8000f34:	6013      	str	r3, [r2, #0]
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  GPIOX_ODR(LCD_BL) = LCD_BLON;
  GPIOX_MODER(MODE_OUT, LCD_BL);
  #endif

  GPIOX_SET(LCD_CS);                    /* CS = 1 */
 8000f36:	4b65      	ldr	r3, [pc, #404]	; (80010cc <LCD_IO_Init+0x1c0>)
 8000f38:	2202      	movs	r2, #2
 8000f3a:	619a      	str	r2, [r3, #24]
  LCD_RS_DATA;                          /* RS = 1 */
 8000f3c:	4b62      	ldr	r3, [pc, #392]	; (80010c8 <LCD_IO_Init+0x1bc>)
 8000f3e:	2208      	movs	r2, #8
 8000f40:	619a      	str	r2, [r3, #24]
  GPIOX_SET(LCD_WR);                    /* WR = 1 */
 8000f42:	4b61      	ldr	r3, [pc, #388]	; (80010c8 <LCD_IO_Init+0x1bc>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	619a      	str	r2, [r3, #24]
  #if GPIOX_PORTNUM(LCD_RD) >=  GPIOX_PORTNUM_A
  GPIOX_SET(LCD_RD);                    /* RD = 1 */
 8000f48:	4b61      	ldr	r3, [pc, #388]	; (80010d0 <LCD_IO_Init+0x1c4>)
 8000f4a:	2208      	movs	r2, #8
 8000f4c:	619a      	str	r2, [r3, #24]
  #endif

  GPIOX_MODER(MODE_OUT, LCD_CS);
 8000f4e:	4b5f      	ldr	r3, [pc, #380]	; (80010cc <LCD_IO_Init+0x1c0>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f023 030c 	bic.w	r3, r3, #12
 8000f56:	4a5d      	ldr	r2, [pc, #372]	; (80010cc <LCD_IO_Init+0x1c0>)
 8000f58:	f043 0304 	orr.w	r3, r3, #4
 8000f5c:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_RS);
 8000f5e:	4b5a      	ldr	r3, [pc, #360]	; (80010c8 <LCD_IO_Init+0x1bc>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000f66:	4a58      	ldr	r2, [pc, #352]	; (80010c8 <LCD_IO_Init+0x1bc>)
 8000f68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f6c:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_WR);
 8000f6e:	4b56      	ldr	r3, [pc, #344]	; (80010c8 <LCD_IO_Init+0x1bc>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f023 0303 	bic.w	r3, r3, #3
 8000f76:	4a54      	ldr	r2, [pc, #336]	; (80010c8 <LCD_IO_Init+0x1bc>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6013      	str	r3, [r2, #0]
  #if GPIOX_PORTNUM(LCD_RD) >=  GPIOX_PORTNUM_A
  GPIOX_MODER(MODE_OUT, LCD_RD);
 8000f7e:	4b54      	ldr	r3, [pc, #336]	; (80010d0 <LCD_IO_Init+0x1c4>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000f86:	4a52      	ldr	r2, [pc, #328]	; (80010d0 <LCD_IO_Init+0x1c4>)
 8000f88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f8c:	6013      	str	r3, [r2, #0]
  #endif

  LCD_DIRWRITE;                         /* data pins set the output direction */
 8000f8e:	4b51      	ldr	r3, [pc, #324]	; (80010d4 <LCD_IO_Init+0x1c8>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000f96:	4a4f      	ldr	r2, [pc, #316]	; (80010d4 <LCD_IO_Init+0x1c8>)
 8000f98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f9c:	6013      	str	r3, [r2, #0]
 8000f9e:	4b4e      	ldr	r3, [pc, #312]	; (80010d8 <LCD_IO_Init+0x1cc>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000fa6:	4a4c      	ldr	r2, [pc, #304]	; (80010d8 <LCD_IO_Init+0x1cc>)
 8000fa8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000fac:	6013      	str	r3, [r2, #0]
 8000fae:	4b49      	ldr	r3, [pc, #292]	; (80010d4 <LCD_IO_Init+0x1c8>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000fb6:	4a47      	ldr	r2, [pc, #284]	; (80010d4 <LCD_IO_Init+0x1c8>)
 8000fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fbc:	6013      	str	r3, [r2, #0]
 8000fbe:	4b47      	ldr	r3, [pc, #284]	; (80010dc <LCD_IO_Init+0x1d0>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000fc6:	4a45      	ldr	r2, [pc, #276]	; (80010dc <LCD_IO_Init+0x1d0>)
 8000fc8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000fcc:	6013      	str	r3, [r2, #0]
 8000fce:	4b43      	ldr	r3, [pc, #268]	; (80010dc <LCD_IO_Init+0x1d0>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000fd6:	4a41      	ldr	r2, [pc, #260]	; (80010dc <LCD_IO_Init+0x1d0>)
 8000fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fdc:	6013      	str	r3, [r2, #0]
 8000fde:	4b3f      	ldr	r3, [pc, #252]	; (80010dc <LCD_IO_Init+0x1d0>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000fe6:	4a3d      	ldr	r2, [pc, #244]	; (80010dc <LCD_IO_Init+0x1d0>)
 8000fe8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fec:	6013      	str	r3, [r2, #0]
 8000fee:	4b38      	ldr	r3, [pc, #224]	; (80010d0 <LCD_IO_Init+0x1c4>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000ff6:	4a36      	ldr	r2, [pc, #216]	; (80010d0 <LCD_IO_Init+0x1c4>)
 8000ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ffc:	6013      	str	r3, [r2, #0]
 8000ffe:	4b35      	ldr	r3, [pc, #212]	; (80010d4 <LCD_IO_Init+0x1c8>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001006:	4a33      	ldr	r2, [pc, #204]	; (80010d4 <LCD_IO_Init+0x1c8>)
 8001008:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800100c:	6013      	str	r3, [r2, #0]

  /* GPIO speed */
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_CS);
 800100e:	4b2f      	ldr	r3, [pc, #188]	; (80010cc <LCD_IO_Init+0x1c0>)
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	4a2e      	ldr	r2, [pc, #184]	; (80010cc <LCD_IO_Init+0x1c0>)
 8001014:	f043 030c 	orr.w	r3, r3, #12
 8001018:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RS);
 800101a:	4b2b      	ldr	r3, [pc, #172]	; (80010c8 <LCD_IO_Init+0x1bc>)
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	4a2a      	ldr	r2, [pc, #168]	; (80010c8 <LCD_IO_Init+0x1bc>)
 8001020:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001024:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_WR);
 8001026:	4b28      	ldr	r3, [pc, #160]	; (80010c8 <LCD_IO_Init+0x1bc>)
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	4a27      	ldr	r2, [pc, #156]	; (80010c8 <LCD_IO_Init+0x1bc>)
 800102c:	f043 0303 	orr.w	r3, r3, #3
 8001030:	6093      	str	r3, [r2, #8]
  #if GPIOX_PORTNUM(LCD_RD) >=  GPIOX_PORTNUM_A
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RD);
 8001032:	4b27      	ldr	r3, [pc, #156]	; (80010d0 <LCD_IO_Init+0x1c4>)
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	4a26      	ldr	r2, [pc, #152]	; (80010d0 <LCD_IO_Init+0x1c4>)
 8001038:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800103c:	6093      	str	r3, [r2, #8]
  #endif
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D0);
 800103e:	4b25      	ldr	r3, [pc, #148]	; (80010d4 <LCD_IO_Init+0x1c8>)
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	4a24      	ldr	r2, [pc, #144]	; (80010d4 <LCD_IO_Init+0x1c8>)
 8001044:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8001048:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D1);
 800104a:	4b23      	ldr	r3, [pc, #140]	; (80010d8 <LCD_IO_Init+0x1cc>)
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	4a22      	ldr	r2, [pc, #136]	; (80010d8 <LCD_IO_Init+0x1cc>)
 8001050:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001054:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D2);
 8001056:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <LCD_IO_Init+0x1c8>)
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	4a1e      	ldr	r2, [pc, #120]	; (80010d4 <LCD_IO_Init+0x1c8>)
 800105c:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8001060:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D3);
 8001062:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <LCD_IO_Init+0x1d0>)
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	4a1d      	ldr	r2, [pc, #116]	; (80010dc <LCD_IO_Init+0x1d0>)
 8001068:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 800106c:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D4);
 800106e:	4b1b      	ldr	r3, [pc, #108]	; (80010dc <LCD_IO_Init+0x1d0>)
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	4a1a      	ldr	r2, [pc, #104]	; (80010dc <LCD_IO_Init+0x1d0>)
 8001074:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8001078:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D5);
 800107a:	4b18      	ldr	r3, [pc, #96]	; (80010dc <LCD_IO_Init+0x1d0>)
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	4a17      	ldr	r2, [pc, #92]	; (80010dc <LCD_IO_Init+0x1d0>)
 8001080:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8001084:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D6);
 8001086:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <LCD_IO_Init+0x1c4>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	4a11      	ldr	r2, [pc, #68]	; (80010d0 <LCD_IO_Init+0x1c4>)
 800108c:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001090:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_D7);
 8001092:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <LCD_IO_Init+0x1c8>)
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	4a0f      	ldr	r2, [pc, #60]	; (80010d4 <LCD_IO_Init+0x1c8>)
 8001098:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 800109c:	6093      	str	r3, [r2, #8]

  /* Reset the LCD */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  LCD_Delay(1);
 800109e:	2001      	movs	r0, #1
 80010a0:	f7ff ff1e 	bl	8000ee0 <LCD_Delay>
  LCD_RST_ON;                           /* RST = 0 */
 80010a4:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <LCD_IO_Init+0x1bc>)
 80010a6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80010aa:	619a      	str	r2, [r3, #24]
  LCD_Delay(1);
 80010ac:	2001      	movs	r0, #1
 80010ae:	f7ff ff17 	bl	8000ee0 <LCD_Delay>
  LCD_RST_OFF;                          /* RST = 1 */
 80010b2:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <LCD_IO_Init+0x1bc>)
 80010b4:	2204      	movs	r2, #4
 80010b6:	619a      	str	r2, [r3, #24]
  #endif
  LCD_Delay(1);
 80010b8:	2001      	movs	r0, #1
 80010ba:	f7ff ff11 	bl	8000ee0 <LCD_Delay>
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	58024400 	.word	0x58024400
 80010c8:	58020800 	.word	0x58020800
 80010cc:	58020400 	.word	0x58020400
 80010d0:	58020000 	.word	0x58020000
 80010d4:	58021800 	.word	0x58021800
 80010d8:	58020c00 	.word	0x58020c00
 80010dc:	58021000 	.word	0x58021000

080010e0 <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
  LCD_CS_ON;
 80010ea:	4b4b      	ldr	r3, [pc, #300]	; (8001218 <LCD_IO_WriteCmd8+0x138>)
 80010ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010f0:	619a      	str	r2, [r3, #24]
  LCD_CMD8_WRITE(Cmd);
 80010f2:	4b4a      	ldr	r3, [pc, #296]	; (800121c <LCD_IO_WriteCmd8+0x13c>)
 80010f4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80010f8:	619a      	str	r2, [r3, #24]
 80010fa:	4a49      	ldr	r2, [pc, #292]	; (8001220 <LCD_IO_WriteCmd8+0x140>)
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	7013      	strb	r3, [r2, #0]
 8001100:	4b47      	ldr	r3, [pc, #284]	; (8001220 <LCD_IO_WriteCmd8+0x140>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	2b00      	cmp	r3, #0
 800110a:	d004      	beq.n	8001116 <LCD_IO_WriteCmd8+0x36>
 800110c:	4b45      	ldr	r3, [pc, #276]	; (8001224 <LCD_IO_WriteCmd8+0x144>)
 800110e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001112:	619a      	str	r2, [r3, #24]
 8001114:	e003      	b.n	800111e <LCD_IO_WriteCmd8+0x3e>
 8001116:	4b43      	ldr	r3, [pc, #268]	; (8001224 <LCD_IO_WriteCmd8+0x144>)
 8001118:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800111c:	619a      	str	r2, [r3, #24]
 800111e:	4b40      	ldr	r3, [pc, #256]	; (8001220 <LCD_IO_WriteCmd8+0x140>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d004      	beq.n	8001134 <LCD_IO_WriteCmd8+0x54>
 800112a:	4b3f      	ldr	r3, [pc, #252]	; (8001228 <LCD_IO_WriteCmd8+0x148>)
 800112c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001130:	619a      	str	r2, [r3, #24]
 8001132:	e003      	b.n	800113c <LCD_IO_WriteCmd8+0x5c>
 8001134:	4b3c      	ldr	r3, [pc, #240]	; (8001228 <LCD_IO_WriteCmd8+0x148>)
 8001136:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800113a:	619a      	str	r2, [r3, #24]
 800113c:	4b38      	ldr	r3, [pc, #224]	; (8001220 <LCD_IO_WriteCmd8+0x140>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	f003 0304 	and.w	r3, r3, #4
 8001144:	2b00      	cmp	r3, #0
 8001146:	d004      	beq.n	8001152 <LCD_IO_WriteCmd8+0x72>
 8001148:	4b36      	ldr	r3, [pc, #216]	; (8001224 <LCD_IO_WriteCmd8+0x144>)
 800114a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800114e:	619a      	str	r2, [r3, #24]
 8001150:	e003      	b.n	800115a <LCD_IO_WriteCmd8+0x7a>
 8001152:	4b34      	ldr	r3, [pc, #208]	; (8001224 <LCD_IO_WriteCmd8+0x144>)
 8001154:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001158:	619a      	str	r2, [r3, #24]
 800115a:	4b31      	ldr	r3, [pc, #196]	; (8001220 <LCD_IO_WriteCmd8+0x140>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	f003 0308 	and.w	r3, r3, #8
 8001162:	2b00      	cmp	r3, #0
 8001164:	d004      	beq.n	8001170 <LCD_IO_WriteCmd8+0x90>
 8001166:	4b31      	ldr	r3, [pc, #196]	; (800122c <LCD_IO_WriteCmd8+0x14c>)
 8001168:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800116c:	619a      	str	r2, [r3, #24]
 800116e:	e003      	b.n	8001178 <LCD_IO_WriteCmd8+0x98>
 8001170:	4b2e      	ldr	r3, [pc, #184]	; (800122c <LCD_IO_WriteCmd8+0x14c>)
 8001172:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001176:	619a      	str	r2, [r3, #24]
 8001178:	4b29      	ldr	r3, [pc, #164]	; (8001220 <LCD_IO_WriteCmd8+0x140>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	f003 0310 	and.w	r3, r3, #16
 8001180:	2b00      	cmp	r3, #0
 8001182:	d004      	beq.n	800118e <LCD_IO_WriteCmd8+0xae>
 8001184:	4b29      	ldr	r3, [pc, #164]	; (800122c <LCD_IO_WriteCmd8+0x14c>)
 8001186:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800118a:	619a      	str	r2, [r3, #24]
 800118c:	e003      	b.n	8001196 <LCD_IO_WriteCmd8+0xb6>
 800118e:	4b27      	ldr	r3, [pc, #156]	; (800122c <LCD_IO_WriteCmd8+0x14c>)
 8001190:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001194:	619a      	str	r2, [r3, #24]
 8001196:	4b22      	ldr	r3, [pc, #136]	; (8001220 <LCD_IO_WriteCmd8+0x140>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	f003 0320 	and.w	r3, r3, #32
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d004      	beq.n	80011ac <LCD_IO_WriteCmd8+0xcc>
 80011a2:	4b22      	ldr	r3, [pc, #136]	; (800122c <LCD_IO_WriteCmd8+0x14c>)
 80011a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011a8:	619a      	str	r2, [r3, #24]
 80011aa:	e003      	b.n	80011b4 <LCD_IO_WriteCmd8+0xd4>
 80011ac:	4b1f      	ldr	r3, [pc, #124]	; (800122c <LCD_IO_WriteCmd8+0x14c>)
 80011ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011b2:	619a      	str	r2, [r3, #24]
 80011b4:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <LCD_IO_WriteCmd8+0x140>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d004      	beq.n	80011ca <LCD_IO_WriteCmd8+0xea>
 80011c0:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <LCD_IO_WriteCmd8+0x150>)
 80011c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011c6:	619a      	str	r2, [r3, #24]
 80011c8:	e003      	b.n	80011d2 <LCD_IO_WriteCmd8+0xf2>
 80011ca:	4b19      	ldr	r3, [pc, #100]	; (8001230 <LCD_IO_WriteCmd8+0x150>)
 80011cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80011d0:	619a      	str	r2, [r3, #24]
 80011d2:	4b13      	ldr	r3, [pc, #76]	; (8001220 <LCD_IO_WriteCmd8+0x140>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	b25b      	sxtb	r3, r3
 80011d8:	2b00      	cmp	r3, #0
 80011da:	da04      	bge.n	80011e6 <LCD_IO_WriteCmd8+0x106>
 80011dc:	4b11      	ldr	r3, [pc, #68]	; (8001224 <LCD_IO_WriteCmd8+0x144>)
 80011de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011e2:	619a      	str	r2, [r3, #24]
 80011e4:	e003      	b.n	80011ee <LCD_IO_WriteCmd8+0x10e>
 80011e6:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <LCD_IO_WriteCmd8+0x144>)
 80011e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011ec:	619a      	str	r2, [r3, #24]
 80011ee:	4b0b      	ldr	r3, [pc, #44]	; (800121c <LCD_IO_WriteCmd8+0x13c>)
 80011f0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011f4:	619a      	str	r2, [r3, #24]
 80011f6:	2008      	movs	r0, #8
 80011f8:	f7ff fe61 	bl	8000ebe <LCD_IO_Delay>
 80011fc:	4b07      	ldr	r3, [pc, #28]	; (800121c <LCD_IO_WriteCmd8+0x13c>)
 80011fe:	2201      	movs	r2, #1
 8001200:	619a      	str	r2, [r3, #24]
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <LCD_IO_WriteCmd8+0x13c>)
 8001204:	2208      	movs	r2, #8
 8001206:	619a      	str	r2, [r3, #24]
  LCD_CS_OFF;
 8001208:	4b03      	ldr	r3, [pc, #12]	; (8001218 <LCD_IO_WriteCmd8+0x138>)
 800120a:	2202      	movs	r2, #2
 800120c:	619a      	str	r2, [r3, #24]
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	58020400 	.word	0x58020400
 800121c:	58020800 	.word	0x58020800
 8001220:	24000382 	.word	0x24000382
 8001224:	58021800 	.word	0x58021800
 8001228:	58020c00 	.word	0x58020c00
 800122c:	58021000 	.word	0x58021000
 8001230:	58020000 	.word	0x58020000

08001234 <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
  LCD_CS_ON;
 800123e:	4b47      	ldr	r3, [pc, #284]	; (800135c <LCD_IO_WriteData8+0x128>)
 8001240:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001244:	619a      	str	r2, [r3, #24]
  LCD_DATA8_WRITE(Data);
 8001246:	4a46      	ldr	r2, [pc, #280]	; (8001360 <LCD_IO_WriteData8+0x12c>)
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	7013      	strb	r3, [r2, #0]
 800124c:	4b44      	ldr	r3, [pc, #272]	; (8001360 <LCD_IO_WriteData8+0x12c>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	2b00      	cmp	r3, #0
 8001256:	d004      	beq.n	8001262 <LCD_IO_WriteData8+0x2e>
 8001258:	4b42      	ldr	r3, [pc, #264]	; (8001364 <LCD_IO_WriteData8+0x130>)
 800125a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800125e:	619a      	str	r2, [r3, #24]
 8001260:	e003      	b.n	800126a <LCD_IO_WriteData8+0x36>
 8001262:	4b40      	ldr	r3, [pc, #256]	; (8001364 <LCD_IO_WriteData8+0x130>)
 8001264:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001268:	619a      	str	r2, [r3, #24]
 800126a:	4b3d      	ldr	r3, [pc, #244]	; (8001360 <LCD_IO_WriteData8+0x12c>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d004      	beq.n	8001280 <LCD_IO_WriteData8+0x4c>
 8001276:	4b3c      	ldr	r3, [pc, #240]	; (8001368 <LCD_IO_WriteData8+0x134>)
 8001278:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800127c:	619a      	str	r2, [r3, #24]
 800127e:	e003      	b.n	8001288 <LCD_IO_WriteData8+0x54>
 8001280:	4b39      	ldr	r3, [pc, #228]	; (8001368 <LCD_IO_WriteData8+0x134>)
 8001282:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001286:	619a      	str	r2, [r3, #24]
 8001288:	4b35      	ldr	r3, [pc, #212]	; (8001360 <LCD_IO_WriteData8+0x12c>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	2b00      	cmp	r3, #0
 8001292:	d004      	beq.n	800129e <LCD_IO_WriteData8+0x6a>
 8001294:	4b33      	ldr	r3, [pc, #204]	; (8001364 <LCD_IO_WriteData8+0x130>)
 8001296:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800129a:	619a      	str	r2, [r3, #24]
 800129c:	e003      	b.n	80012a6 <LCD_IO_WriteData8+0x72>
 800129e:	4b31      	ldr	r3, [pc, #196]	; (8001364 <LCD_IO_WriteData8+0x130>)
 80012a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012a4:	619a      	str	r2, [r3, #24]
 80012a6:	4b2e      	ldr	r3, [pc, #184]	; (8001360 <LCD_IO_WriteData8+0x12c>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	f003 0308 	and.w	r3, r3, #8
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d004      	beq.n	80012bc <LCD_IO_WriteData8+0x88>
 80012b2:	4b2e      	ldr	r3, [pc, #184]	; (800136c <LCD_IO_WriteData8+0x138>)
 80012b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012b8:	619a      	str	r2, [r3, #24]
 80012ba:	e003      	b.n	80012c4 <LCD_IO_WriteData8+0x90>
 80012bc:	4b2b      	ldr	r3, [pc, #172]	; (800136c <LCD_IO_WriteData8+0x138>)
 80012be:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80012c2:	619a      	str	r2, [r3, #24]
 80012c4:	4b26      	ldr	r3, [pc, #152]	; (8001360 <LCD_IO_WriteData8+0x12c>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	f003 0310 	and.w	r3, r3, #16
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d004      	beq.n	80012da <LCD_IO_WriteData8+0xa6>
 80012d0:	4b26      	ldr	r3, [pc, #152]	; (800136c <LCD_IO_WriteData8+0x138>)
 80012d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012d6:	619a      	str	r2, [r3, #24]
 80012d8:	e003      	b.n	80012e2 <LCD_IO_WriteData8+0xae>
 80012da:	4b24      	ldr	r3, [pc, #144]	; (800136c <LCD_IO_WriteData8+0x138>)
 80012dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012e0:	619a      	str	r2, [r3, #24]
 80012e2:	4b1f      	ldr	r3, [pc, #124]	; (8001360 <LCD_IO_WriteData8+0x12c>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	f003 0320 	and.w	r3, r3, #32
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d004      	beq.n	80012f8 <LCD_IO_WriteData8+0xc4>
 80012ee:	4b1f      	ldr	r3, [pc, #124]	; (800136c <LCD_IO_WriteData8+0x138>)
 80012f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012f4:	619a      	str	r2, [r3, #24]
 80012f6:	e003      	b.n	8001300 <LCD_IO_WriteData8+0xcc>
 80012f8:	4b1c      	ldr	r3, [pc, #112]	; (800136c <LCD_IO_WriteData8+0x138>)
 80012fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012fe:	619a      	str	r2, [r3, #24]
 8001300:	4b17      	ldr	r3, [pc, #92]	; (8001360 <LCD_IO_WriteData8+0x12c>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001308:	2b00      	cmp	r3, #0
 800130a:	d004      	beq.n	8001316 <LCD_IO_WriteData8+0xe2>
 800130c:	4b18      	ldr	r3, [pc, #96]	; (8001370 <LCD_IO_WriteData8+0x13c>)
 800130e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001312:	619a      	str	r2, [r3, #24]
 8001314:	e003      	b.n	800131e <LCD_IO_WriteData8+0xea>
 8001316:	4b16      	ldr	r3, [pc, #88]	; (8001370 <LCD_IO_WriteData8+0x13c>)
 8001318:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800131c:	619a      	str	r2, [r3, #24]
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <LCD_IO_WriteData8+0x12c>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	b25b      	sxtb	r3, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	da04      	bge.n	8001332 <LCD_IO_WriteData8+0xfe>
 8001328:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <LCD_IO_WriteData8+0x130>)
 800132a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800132e:	619a      	str	r2, [r3, #24]
 8001330:	e003      	b.n	800133a <LCD_IO_WriteData8+0x106>
 8001332:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <LCD_IO_WriteData8+0x130>)
 8001334:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001338:	619a      	str	r2, [r3, #24]
 800133a:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <LCD_IO_WriteData8+0x140>)
 800133c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001340:	619a      	str	r2, [r3, #24]
 8001342:	2008      	movs	r0, #8
 8001344:	f7ff fdbb 	bl	8000ebe <LCD_IO_Delay>
 8001348:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <LCD_IO_WriteData8+0x140>)
 800134a:	2201      	movs	r2, #1
 800134c:	619a      	str	r2, [r3, #24]
  LCD_CS_OFF;
 800134e:	4b03      	ldr	r3, [pc, #12]	; (800135c <LCD_IO_WriteData8+0x128>)
 8001350:	2202      	movs	r2, #2
 8001352:	619a      	str	r2, [r3, #24]
}
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	58020400 	.word	0x58020400
 8001360:	24000382 	.word	0x24000382
 8001364:	58021800 	.word	0x58021800
 8001368:	58020c00 	.word	0x58020c00
 800136c:	58021000 	.word	0x58021000
 8001370:	58020000 	.word	0x58020000
 8001374:	58020800 	.word	0x58020800

08001378 <LCD_IO_WriteData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteData16(uint16_t Data)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	80fb      	strh	r3, [r7, #6]
  LCD_CS_ON;
 8001382:	4b8b      	ldr	r3, [pc, #556]	; (80015b0 <LCD_IO_WriteData16+0x238>)
 8001384:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001388:	619a      	str	r2, [r3, #24]
  LCD_DATA16_WRITE(Data);
 800138a:	88fb      	ldrh	r3, [r7, #6]
 800138c:	0a1b      	lsrs	r3, r3, #8
 800138e:	b29b      	uxth	r3, r3
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4b88      	ldr	r3, [pc, #544]	; (80015b4 <LCD_IO_WriteData16+0x23c>)
 8001394:	701a      	strb	r2, [r3, #0]
 8001396:	4b87      	ldr	r3, [pc, #540]	; (80015b4 <LCD_IO_WriteData16+0x23c>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d004      	beq.n	80013ac <LCD_IO_WriteData16+0x34>
 80013a2:	4b85      	ldr	r3, [pc, #532]	; (80015b8 <LCD_IO_WriteData16+0x240>)
 80013a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013a8:	619a      	str	r2, [r3, #24]
 80013aa:	e003      	b.n	80013b4 <LCD_IO_WriteData16+0x3c>
 80013ac:	4b82      	ldr	r3, [pc, #520]	; (80015b8 <LCD_IO_WriteData16+0x240>)
 80013ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013b2:	619a      	str	r2, [r3, #24]
 80013b4:	4b7f      	ldr	r3, [pc, #508]	; (80015b4 <LCD_IO_WriteData16+0x23c>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d004      	beq.n	80013ca <LCD_IO_WriteData16+0x52>
 80013c0:	4b7e      	ldr	r3, [pc, #504]	; (80015bc <LCD_IO_WriteData16+0x244>)
 80013c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013c6:	619a      	str	r2, [r3, #24]
 80013c8:	e003      	b.n	80013d2 <LCD_IO_WriteData16+0x5a>
 80013ca:	4b7c      	ldr	r3, [pc, #496]	; (80015bc <LCD_IO_WriteData16+0x244>)
 80013cc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80013d0:	619a      	str	r2, [r3, #24]
 80013d2:	4b78      	ldr	r3, [pc, #480]	; (80015b4 <LCD_IO_WriteData16+0x23c>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	f003 0304 	and.w	r3, r3, #4
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d004      	beq.n	80013e8 <LCD_IO_WriteData16+0x70>
 80013de:	4b76      	ldr	r3, [pc, #472]	; (80015b8 <LCD_IO_WriteData16+0x240>)
 80013e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013e4:	619a      	str	r2, [r3, #24]
 80013e6:	e003      	b.n	80013f0 <LCD_IO_WriteData16+0x78>
 80013e8:	4b73      	ldr	r3, [pc, #460]	; (80015b8 <LCD_IO_WriteData16+0x240>)
 80013ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013ee:	619a      	str	r2, [r3, #24]
 80013f0:	4b70      	ldr	r3, [pc, #448]	; (80015b4 <LCD_IO_WriteData16+0x23c>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	f003 0308 	and.w	r3, r3, #8
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d004      	beq.n	8001406 <LCD_IO_WriteData16+0x8e>
 80013fc:	4b70      	ldr	r3, [pc, #448]	; (80015c0 <LCD_IO_WriteData16+0x248>)
 80013fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001402:	619a      	str	r2, [r3, #24]
 8001404:	e003      	b.n	800140e <LCD_IO_WriteData16+0x96>
 8001406:	4b6e      	ldr	r3, [pc, #440]	; (80015c0 <LCD_IO_WriteData16+0x248>)
 8001408:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800140c:	619a      	str	r2, [r3, #24]
 800140e:	4b69      	ldr	r3, [pc, #420]	; (80015b4 <LCD_IO_WriteData16+0x23c>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	f003 0310 	and.w	r3, r3, #16
 8001416:	2b00      	cmp	r3, #0
 8001418:	d004      	beq.n	8001424 <LCD_IO_WriteData16+0xac>
 800141a:	4b69      	ldr	r3, [pc, #420]	; (80015c0 <LCD_IO_WriteData16+0x248>)
 800141c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001420:	619a      	str	r2, [r3, #24]
 8001422:	e003      	b.n	800142c <LCD_IO_WriteData16+0xb4>
 8001424:	4b66      	ldr	r3, [pc, #408]	; (80015c0 <LCD_IO_WriteData16+0x248>)
 8001426:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800142a:	619a      	str	r2, [r3, #24]
 800142c:	4b61      	ldr	r3, [pc, #388]	; (80015b4 <LCD_IO_WriteData16+0x23c>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	f003 0320 	and.w	r3, r3, #32
 8001434:	2b00      	cmp	r3, #0
 8001436:	d004      	beq.n	8001442 <LCD_IO_WriteData16+0xca>
 8001438:	4b61      	ldr	r3, [pc, #388]	; (80015c0 <LCD_IO_WriteData16+0x248>)
 800143a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800143e:	619a      	str	r2, [r3, #24]
 8001440:	e003      	b.n	800144a <LCD_IO_WriteData16+0xd2>
 8001442:	4b5f      	ldr	r3, [pc, #380]	; (80015c0 <LCD_IO_WriteData16+0x248>)
 8001444:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001448:	619a      	str	r2, [r3, #24]
 800144a:	4b5a      	ldr	r3, [pc, #360]	; (80015b4 <LCD_IO_WriteData16+0x23c>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001452:	2b00      	cmp	r3, #0
 8001454:	d004      	beq.n	8001460 <LCD_IO_WriteData16+0xe8>
 8001456:	4b5b      	ldr	r3, [pc, #364]	; (80015c4 <LCD_IO_WriteData16+0x24c>)
 8001458:	f44f 7280 	mov.w	r2, #256	; 0x100
 800145c:	619a      	str	r2, [r3, #24]
 800145e:	e003      	b.n	8001468 <LCD_IO_WriteData16+0xf0>
 8001460:	4b58      	ldr	r3, [pc, #352]	; (80015c4 <LCD_IO_WriteData16+0x24c>)
 8001462:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001466:	619a      	str	r2, [r3, #24]
 8001468:	4b52      	ldr	r3, [pc, #328]	; (80015b4 <LCD_IO_WriteData16+0x23c>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	b25b      	sxtb	r3, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	da04      	bge.n	800147c <LCD_IO_WriteData16+0x104>
 8001472:	4b51      	ldr	r3, [pc, #324]	; (80015b8 <LCD_IO_WriteData16+0x240>)
 8001474:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001478:	619a      	str	r2, [r3, #24]
 800147a:	e003      	b.n	8001484 <LCD_IO_WriteData16+0x10c>
 800147c:	4b4e      	ldr	r3, [pc, #312]	; (80015b8 <LCD_IO_WriteData16+0x240>)
 800147e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001482:	619a      	str	r2, [r3, #24]
 8001484:	4b50      	ldr	r3, [pc, #320]	; (80015c8 <LCD_IO_WriteData16+0x250>)
 8001486:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800148a:	619a      	str	r2, [r3, #24]
 800148c:	2008      	movs	r0, #8
 800148e:	f7ff fd16 	bl	8000ebe <LCD_IO_Delay>
 8001492:	4b4d      	ldr	r3, [pc, #308]	; (80015c8 <LCD_IO_WriteData16+0x250>)
 8001494:	2201      	movs	r2, #1
 8001496:	619a      	str	r2, [r3, #24]
 8001498:	88fb      	ldrh	r3, [r7, #6]
 800149a:	b2da      	uxtb	r2, r3
 800149c:	4b45      	ldr	r3, [pc, #276]	; (80015b4 <LCD_IO_WriteData16+0x23c>)
 800149e:	701a      	strb	r2, [r3, #0]
 80014a0:	4b44      	ldr	r3, [pc, #272]	; (80015b4 <LCD_IO_WriteData16+0x23c>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d004      	beq.n	80014b6 <LCD_IO_WriteData16+0x13e>
 80014ac:	4b42      	ldr	r3, [pc, #264]	; (80015b8 <LCD_IO_WriteData16+0x240>)
 80014ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014b2:	619a      	str	r2, [r3, #24]
 80014b4:	e003      	b.n	80014be <LCD_IO_WriteData16+0x146>
 80014b6:	4b40      	ldr	r3, [pc, #256]	; (80015b8 <LCD_IO_WriteData16+0x240>)
 80014b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014bc:	619a      	str	r2, [r3, #24]
 80014be:	4b3d      	ldr	r3, [pc, #244]	; (80015b4 <LCD_IO_WriteData16+0x23c>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d004      	beq.n	80014d4 <LCD_IO_WriteData16+0x15c>
 80014ca:	4b3c      	ldr	r3, [pc, #240]	; (80015bc <LCD_IO_WriteData16+0x244>)
 80014cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80014d0:	619a      	str	r2, [r3, #24]
 80014d2:	e003      	b.n	80014dc <LCD_IO_WriteData16+0x164>
 80014d4:	4b39      	ldr	r3, [pc, #228]	; (80015bc <LCD_IO_WriteData16+0x244>)
 80014d6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80014da:	619a      	str	r2, [r3, #24]
 80014dc:	4b35      	ldr	r3, [pc, #212]	; (80015b4 <LCD_IO_WriteData16+0x23c>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	f003 0304 	and.w	r3, r3, #4
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d004      	beq.n	80014f2 <LCD_IO_WriteData16+0x17a>
 80014e8:	4b33      	ldr	r3, [pc, #204]	; (80015b8 <LCD_IO_WriteData16+0x240>)
 80014ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014ee:	619a      	str	r2, [r3, #24]
 80014f0:	e003      	b.n	80014fa <LCD_IO_WriteData16+0x182>
 80014f2:	4b31      	ldr	r3, [pc, #196]	; (80015b8 <LCD_IO_WriteData16+0x240>)
 80014f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014f8:	619a      	str	r2, [r3, #24]
 80014fa:	4b2e      	ldr	r3, [pc, #184]	; (80015b4 <LCD_IO_WriteData16+0x23c>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	f003 0308 	and.w	r3, r3, #8
 8001502:	2b00      	cmp	r3, #0
 8001504:	d004      	beq.n	8001510 <LCD_IO_WriteData16+0x198>
 8001506:	4b2e      	ldr	r3, [pc, #184]	; (80015c0 <LCD_IO_WriteData16+0x248>)
 8001508:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800150c:	619a      	str	r2, [r3, #24]
 800150e:	e003      	b.n	8001518 <LCD_IO_WriteData16+0x1a0>
 8001510:	4b2b      	ldr	r3, [pc, #172]	; (80015c0 <LCD_IO_WriteData16+0x248>)
 8001512:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001516:	619a      	str	r2, [r3, #24]
 8001518:	4b26      	ldr	r3, [pc, #152]	; (80015b4 <LCD_IO_WriteData16+0x23c>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	f003 0310 	and.w	r3, r3, #16
 8001520:	2b00      	cmp	r3, #0
 8001522:	d004      	beq.n	800152e <LCD_IO_WriteData16+0x1b6>
 8001524:	4b26      	ldr	r3, [pc, #152]	; (80015c0 <LCD_IO_WriteData16+0x248>)
 8001526:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800152a:	619a      	str	r2, [r3, #24]
 800152c:	e003      	b.n	8001536 <LCD_IO_WriteData16+0x1be>
 800152e:	4b24      	ldr	r3, [pc, #144]	; (80015c0 <LCD_IO_WriteData16+0x248>)
 8001530:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001534:	619a      	str	r2, [r3, #24]
 8001536:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <LCD_IO_WriteData16+0x23c>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	f003 0320 	and.w	r3, r3, #32
 800153e:	2b00      	cmp	r3, #0
 8001540:	d004      	beq.n	800154c <LCD_IO_WriteData16+0x1d4>
 8001542:	4b1f      	ldr	r3, [pc, #124]	; (80015c0 <LCD_IO_WriteData16+0x248>)
 8001544:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001548:	619a      	str	r2, [r3, #24]
 800154a:	e003      	b.n	8001554 <LCD_IO_WriteData16+0x1dc>
 800154c:	4b1c      	ldr	r3, [pc, #112]	; (80015c0 <LCD_IO_WriteData16+0x248>)
 800154e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001552:	619a      	str	r2, [r3, #24]
 8001554:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <LCD_IO_WriteData16+0x23c>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800155c:	2b00      	cmp	r3, #0
 800155e:	d004      	beq.n	800156a <LCD_IO_WriteData16+0x1f2>
 8001560:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <LCD_IO_WriteData16+0x24c>)
 8001562:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001566:	619a      	str	r2, [r3, #24]
 8001568:	e003      	b.n	8001572 <LCD_IO_WriteData16+0x1fa>
 800156a:	4b16      	ldr	r3, [pc, #88]	; (80015c4 <LCD_IO_WriteData16+0x24c>)
 800156c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001570:	619a      	str	r2, [r3, #24]
 8001572:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <LCD_IO_WriteData16+0x23c>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	b25b      	sxtb	r3, r3
 8001578:	2b00      	cmp	r3, #0
 800157a:	da04      	bge.n	8001586 <LCD_IO_WriteData16+0x20e>
 800157c:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <LCD_IO_WriteData16+0x240>)
 800157e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001582:	619a      	str	r2, [r3, #24]
 8001584:	e003      	b.n	800158e <LCD_IO_WriteData16+0x216>
 8001586:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <LCD_IO_WriteData16+0x240>)
 8001588:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800158c:	619a      	str	r2, [r3, #24]
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <LCD_IO_WriteData16+0x250>)
 8001590:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001594:	619a      	str	r2, [r3, #24]
 8001596:	2008      	movs	r0, #8
 8001598:	f7ff fc91 	bl	8000ebe <LCD_IO_Delay>
 800159c:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <LCD_IO_WriteData16+0x250>)
 800159e:	2201      	movs	r2, #1
 80015a0:	619a      	str	r2, [r3, #24]
  LCD_CS_OFF;
 80015a2:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <LCD_IO_WriteData16+0x238>)
 80015a4:	2202      	movs	r2, #2
 80015a6:	619a      	str	r2, [r3, #24]
}
 80015a8:	bf00      	nop
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	58020400 	.word	0x58020400
 80015b4:	24000382 	.word	0x24000382
 80015b8:	58021800 	.word	0x58021800
 80015bc:	58020c00 	.word	0x58020c00
 80015c0:	58021000 	.word	0x58021000
 80015c4:	58020000 	.word	0x58020000
 80015c8:	58020800 	.word	0x58020800

080015cc <LCD_IO_WriteCmd8DataFill16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	603a      	str	r2, [r7, #0]
 80015d6:	71fb      	strb	r3, [r7, #7]
 80015d8:	460b      	mov	r3, r1
 80015da:	80bb      	strh	r3, [r7, #4]
  LCD_CS_ON;
 80015dc:	4b9a      	ldr	r3, [pc, #616]	; (8001848 <LCD_IO_WriteCmd8DataFill16+0x27c>)
 80015de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015e2:	619a      	str	r2, [r3, #24]
  LCD_CMD8_WRITE(Cmd);
 80015e4:	4b99      	ldr	r3, [pc, #612]	; (800184c <LCD_IO_WriteCmd8DataFill16+0x280>)
 80015e6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80015ea:	619a      	str	r2, [r3, #24]
 80015ec:	4a98      	ldr	r2, [pc, #608]	; (8001850 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	7013      	strb	r3, [r2, #0]
 80015f2:	4b97      	ldr	r3, [pc, #604]	; (8001850 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d004      	beq.n	8001608 <LCD_IO_WriteCmd8DataFill16+0x3c>
 80015fe:	4b95      	ldr	r3, [pc, #596]	; (8001854 <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001600:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001604:	619a      	str	r2, [r3, #24]
 8001606:	e003      	b.n	8001610 <LCD_IO_WriteCmd8DataFill16+0x44>
 8001608:	4b92      	ldr	r3, [pc, #584]	; (8001854 <LCD_IO_WriteCmd8DataFill16+0x288>)
 800160a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800160e:	619a      	str	r2, [r3, #24]
 8001610:	4b8f      	ldr	r3, [pc, #572]	; (8001850 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d004      	beq.n	8001626 <LCD_IO_WriteCmd8DataFill16+0x5a>
 800161c:	4b8e      	ldr	r3, [pc, #568]	; (8001858 <LCD_IO_WriteCmd8DataFill16+0x28c>)
 800161e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001622:	619a      	str	r2, [r3, #24]
 8001624:	e003      	b.n	800162e <LCD_IO_WriteCmd8DataFill16+0x62>
 8001626:	4b8c      	ldr	r3, [pc, #560]	; (8001858 <LCD_IO_WriteCmd8DataFill16+0x28c>)
 8001628:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800162c:	619a      	str	r2, [r3, #24]
 800162e:	4b88      	ldr	r3, [pc, #544]	; (8001850 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	f003 0304 	and.w	r3, r3, #4
 8001636:	2b00      	cmp	r3, #0
 8001638:	d004      	beq.n	8001644 <LCD_IO_WriteCmd8DataFill16+0x78>
 800163a:	4b86      	ldr	r3, [pc, #536]	; (8001854 <LCD_IO_WriteCmd8DataFill16+0x288>)
 800163c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001640:	619a      	str	r2, [r3, #24]
 8001642:	e003      	b.n	800164c <LCD_IO_WriteCmd8DataFill16+0x80>
 8001644:	4b83      	ldr	r3, [pc, #524]	; (8001854 <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001646:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800164a:	619a      	str	r2, [r3, #24]
 800164c:	4b80      	ldr	r3, [pc, #512]	; (8001850 <LCD_IO_WriteCmd8DataFill16+0x284>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	f003 0308 	and.w	r3, r3, #8
 8001654:	2b00      	cmp	r3, #0
 8001656:	d004      	beq.n	8001662 <LCD_IO_WriteCmd8DataFill16+0x96>
 8001658:	4b80      	ldr	r3, [pc, #512]	; (800185c <LCD_IO_WriteCmd8DataFill16+0x290>)
 800165a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800165e:	619a      	str	r2, [r3, #24]
 8001660:	e003      	b.n	800166a <LCD_IO_WriteCmd8DataFill16+0x9e>
 8001662:	4b7e      	ldr	r3, [pc, #504]	; (800185c <LCD_IO_WriteCmd8DataFill16+0x290>)
 8001664:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001668:	619a      	str	r2, [r3, #24]
 800166a:	4b79      	ldr	r3, [pc, #484]	; (8001850 <LCD_IO_WriteCmd8DataFill16+0x284>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	f003 0310 	and.w	r3, r3, #16
 8001672:	2b00      	cmp	r3, #0
 8001674:	d004      	beq.n	8001680 <LCD_IO_WriteCmd8DataFill16+0xb4>
 8001676:	4b79      	ldr	r3, [pc, #484]	; (800185c <LCD_IO_WriteCmd8DataFill16+0x290>)
 8001678:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800167c:	619a      	str	r2, [r3, #24]
 800167e:	e003      	b.n	8001688 <LCD_IO_WriteCmd8DataFill16+0xbc>
 8001680:	4b76      	ldr	r3, [pc, #472]	; (800185c <LCD_IO_WriteCmd8DataFill16+0x290>)
 8001682:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001686:	619a      	str	r2, [r3, #24]
 8001688:	4b71      	ldr	r3, [pc, #452]	; (8001850 <LCD_IO_WriteCmd8DataFill16+0x284>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	f003 0320 	and.w	r3, r3, #32
 8001690:	2b00      	cmp	r3, #0
 8001692:	d004      	beq.n	800169e <LCD_IO_WriteCmd8DataFill16+0xd2>
 8001694:	4b71      	ldr	r3, [pc, #452]	; (800185c <LCD_IO_WriteCmd8DataFill16+0x290>)
 8001696:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800169a:	619a      	str	r2, [r3, #24]
 800169c:	e003      	b.n	80016a6 <LCD_IO_WriteCmd8DataFill16+0xda>
 800169e:	4b6f      	ldr	r3, [pc, #444]	; (800185c <LCD_IO_WriteCmd8DataFill16+0x290>)
 80016a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016a4:	619a      	str	r2, [r3, #24]
 80016a6:	4b6a      	ldr	r3, [pc, #424]	; (8001850 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d004      	beq.n	80016bc <LCD_IO_WriteCmd8DataFill16+0xf0>
 80016b2:	4b6b      	ldr	r3, [pc, #428]	; (8001860 <LCD_IO_WriteCmd8DataFill16+0x294>)
 80016b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016b8:	619a      	str	r2, [r3, #24]
 80016ba:	e003      	b.n	80016c4 <LCD_IO_WriteCmd8DataFill16+0xf8>
 80016bc:	4b68      	ldr	r3, [pc, #416]	; (8001860 <LCD_IO_WriteCmd8DataFill16+0x294>)
 80016be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80016c2:	619a      	str	r2, [r3, #24]
 80016c4:	4b62      	ldr	r3, [pc, #392]	; (8001850 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	b25b      	sxtb	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	da04      	bge.n	80016d8 <LCD_IO_WriteCmd8DataFill16+0x10c>
 80016ce:	4b61      	ldr	r3, [pc, #388]	; (8001854 <LCD_IO_WriteCmd8DataFill16+0x288>)
 80016d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016d4:	619a      	str	r2, [r3, #24]
 80016d6:	e003      	b.n	80016e0 <LCD_IO_WriteCmd8DataFill16+0x114>
 80016d8:	4b5e      	ldr	r3, [pc, #376]	; (8001854 <LCD_IO_WriteCmd8DataFill16+0x288>)
 80016da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016de:	619a      	str	r2, [r3, #24]
 80016e0:	4b5a      	ldr	r3, [pc, #360]	; (800184c <LCD_IO_WriteCmd8DataFill16+0x280>)
 80016e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016e6:	619a      	str	r2, [r3, #24]
 80016e8:	2008      	movs	r0, #8
 80016ea:	f7ff fbe8 	bl	8000ebe <LCD_IO_Delay>
 80016ee:	4b57      	ldr	r3, [pc, #348]	; (800184c <LCD_IO_WriteCmd8DataFill16+0x280>)
 80016f0:	2201      	movs	r2, #1
 80016f2:	619a      	str	r2, [r3, #24]
 80016f4:	4b55      	ldr	r3, [pc, #340]	; (800184c <LCD_IO_WriteCmd8DataFill16+0x280>)
 80016f6:	2208      	movs	r2, #8
 80016f8:	619a      	str	r2, [r3, #24]
  while(Size--)
 80016fa:	e11a      	b.n	8001932 <LCD_IO_WriteCmd8DataFill16+0x366>
  {
    LCD_DATA16_WRITE(Data);
 80016fc:	88bb      	ldrh	r3, [r7, #4]
 80016fe:	0a1b      	lsrs	r3, r3, #8
 8001700:	b29b      	uxth	r3, r3
 8001702:	b2da      	uxtb	r2, r3
 8001704:	4b52      	ldr	r3, [pc, #328]	; (8001850 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001706:	701a      	strb	r2, [r3, #0]
 8001708:	4b51      	ldr	r3, [pc, #324]	; (8001850 <LCD_IO_WriteCmd8DataFill16+0x284>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	2b00      	cmp	r3, #0
 8001712:	d004      	beq.n	800171e <LCD_IO_WriteCmd8DataFill16+0x152>
 8001714:	4b4f      	ldr	r3, [pc, #316]	; (8001854 <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001716:	f44f 7200 	mov.w	r2, #512	; 0x200
 800171a:	619a      	str	r2, [r3, #24]
 800171c:	e003      	b.n	8001726 <LCD_IO_WriteCmd8DataFill16+0x15a>
 800171e:	4b4d      	ldr	r3, [pc, #308]	; (8001854 <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001720:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001724:	619a      	str	r2, [r3, #24]
 8001726:	4b4a      	ldr	r3, [pc, #296]	; (8001850 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d004      	beq.n	800173c <LCD_IO_WriteCmd8DataFill16+0x170>
 8001732:	4b49      	ldr	r3, [pc, #292]	; (8001858 <LCD_IO_WriteCmd8DataFill16+0x28c>)
 8001734:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001738:	619a      	str	r2, [r3, #24]
 800173a:	e003      	b.n	8001744 <LCD_IO_WriteCmd8DataFill16+0x178>
 800173c:	4b46      	ldr	r3, [pc, #280]	; (8001858 <LCD_IO_WriteCmd8DataFill16+0x28c>)
 800173e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001742:	619a      	str	r2, [r3, #24]
 8001744:	4b42      	ldr	r3, [pc, #264]	; (8001850 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	f003 0304 	and.w	r3, r3, #4
 800174c:	2b00      	cmp	r3, #0
 800174e:	d004      	beq.n	800175a <LCD_IO_WriteCmd8DataFill16+0x18e>
 8001750:	4b40      	ldr	r3, [pc, #256]	; (8001854 <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001752:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001756:	619a      	str	r2, [r3, #24]
 8001758:	e003      	b.n	8001762 <LCD_IO_WriteCmd8DataFill16+0x196>
 800175a:	4b3e      	ldr	r3, [pc, #248]	; (8001854 <LCD_IO_WriteCmd8DataFill16+0x288>)
 800175c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001760:	619a      	str	r2, [r3, #24]
 8001762:	4b3b      	ldr	r3, [pc, #236]	; (8001850 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	f003 0308 	and.w	r3, r3, #8
 800176a:	2b00      	cmp	r3, #0
 800176c:	d004      	beq.n	8001778 <LCD_IO_WriteCmd8DataFill16+0x1ac>
 800176e:	4b3b      	ldr	r3, [pc, #236]	; (800185c <LCD_IO_WriteCmd8DataFill16+0x290>)
 8001770:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001774:	619a      	str	r2, [r3, #24]
 8001776:	e003      	b.n	8001780 <LCD_IO_WriteCmd8DataFill16+0x1b4>
 8001778:	4b38      	ldr	r3, [pc, #224]	; (800185c <LCD_IO_WriteCmd8DataFill16+0x290>)
 800177a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800177e:	619a      	str	r2, [r3, #24]
 8001780:	4b33      	ldr	r3, [pc, #204]	; (8001850 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	f003 0310 	and.w	r3, r3, #16
 8001788:	2b00      	cmp	r3, #0
 800178a:	d004      	beq.n	8001796 <LCD_IO_WriteCmd8DataFill16+0x1ca>
 800178c:	4b33      	ldr	r3, [pc, #204]	; (800185c <LCD_IO_WriteCmd8DataFill16+0x290>)
 800178e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001792:	619a      	str	r2, [r3, #24]
 8001794:	e003      	b.n	800179e <LCD_IO_WriteCmd8DataFill16+0x1d2>
 8001796:	4b31      	ldr	r3, [pc, #196]	; (800185c <LCD_IO_WriteCmd8DataFill16+0x290>)
 8001798:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800179c:	619a      	str	r2, [r3, #24]
 800179e:	4b2c      	ldr	r3, [pc, #176]	; (8001850 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	f003 0320 	and.w	r3, r3, #32
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d004      	beq.n	80017b4 <LCD_IO_WriteCmd8DataFill16+0x1e8>
 80017aa:	4b2c      	ldr	r3, [pc, #176]	; (800185c <LCD_IO_WriteCmd8DataFill16+0x290>)
 80017ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017b0:	619a      	str	r2, [r3, #24]
 80017b2:	e003      	b.n	80017bc <LCD_IO_WriteCmd8DataFill16+0x1f0>
 80017b4:	4b29      	ldr	r3, [pc, #164]	; (800185c <LCD_IO_WriteCmd8DataFill16+0x290>)
 80017b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017ba:	619a      	str	r2, [r3, #24]
 80017bc:	4b24      	ldr	r3, [pc, #144]	; (8001850 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d004      	beq.n	80017d2 <LCD_IO_WriteCmd8DataFill16+0x206>
 80017c8:	4b25      	ldr	r3, [pc, #148]	; (8001860 <LCD_IO_WriteCmd8DataFill16+0x294>)
 80017ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017ce:	619a      	str	r2, [r3, #24]
 80017d0:	e003      	b.n	80017da <LCD_IO_WriteCmd8DataFill16+0x20e>
 80017d2:	4b23      	ldr	r3, [pc, #140]	; (8001860 <LCD_IO_WriteCmd8DataFill16+0x294>)
 80017d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80017d8:	619a      	str	r2, [r3, #24]
 80017da:	4b1d      	ldr	r3, [pc, #116]	; (8001850 <LCD_IO_WriteCmd8DataFill16+0x284>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	b25b      	sxtb	r3, r3
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	da04      	bge.n	80017ee <LCD_IO_WriteCmd8DataFill16+0x222>
 80017e4:	4b1b      	ldr	r3, [pc, #108]	; (8001854 <LCD_IO_WriteCmd8DataFill16+0x288>)
 80017e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017ea:	619a      	str	r2, [r3, #24]
 80017ec:	e003      	b.n	80017f6 <LCD_IO_WriteCmd8DataFill16+0x22a>
 80017ee:	4b19      	ldr	r3, [pc, #100]	; (8001854 <LCD_IO_WriteCmd8DataFill16+0x288>)
 80017f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017f4:	619a      	str	r2, [r3, #24]
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <LCD_IO_WriteCmd8DataFill16+0x280>)
 80017f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017fc:	619a      	str	r2, [r3, #24]
 80017fe:	2008      	movs	r0, #8
 8001800:	f7ff fb5d 	bl	8000ebe <LCD_IO_Delay>
 8001804:	4b11      	ldr	r3, [pc, #68]	; (800184c <LCD_IO_WriteCmd8DataFill16+0x280>)
 8001806:	2201      	movs	r2, #1
 8001808:	619a      	str	r2, [r3, #24]
 800180a:	88bb      	ldrh	r3, [r7, #4]
 800180c:	b2da      	uxtb	r2, r3
 800180e:	4b10      	ldr	r3, [pc, #64]	; (8001850 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001810:	701a      	strb	r2, [r3, #0]
 8001812:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b00      	cmp	r3, #0
 800181c:	d004      	beq.n	8001828 <LCD_IO_WriteCmd8DataFill16+0x25c>
 800181e:	4b0d      	ldr	r3, [pc, #52]	; (8001854 <LCD_IO_WriteCmd8DataFill16+0x288>)
 8001820:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001824:	619a      	str	r2, [r3, #24]
 8001826:	e003      	b.n	8001830 <LCD_IO_WriteCmd8DataFill16+0x264>
 8001828:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <LCD_IO_WriteCmd8DataFill16+0x288>)
 800182a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800182e:	619a      	str	r2, [r3, #24]
 8001830:	4b07      	ldr	r3, [pc, #28]	; (8001850 <LCD_IO_WriteCmd8DataFill16+0x284>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d013      	beq.n	8001864 <LCD_IO_WriteCmd8DataFill16+0x298>
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <LCD_IO_WriteCmd8DataFill16+0x28c>)
 800183e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001842:	619a      	str	r2, [r3, #24]
 8001844:	e012      	b.n	800186c <LCD_IO_WriteCmd8DataFill16+0x2a0>
 8001846:	bf00      	nop
 8001848:	58020400 	.word	0x58020400
 800184c:	58020800 	.word	0x58020800
 8001850:	24000382 	.word	0x24000382
 8001854:	58021800 	.word	0x58021800
 8001858:	58020c00 	.word	0x58020c00
 800185c:	58021000 	.word	0x58021000
 8001860:	58020000 	.word	0x58020000
 8001864:	4b39      	ldr	r3, [pc, #228]	; (800194c <LCD_IO_WriteCmd8DataFill16+0x380>)
 8001866:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800186a:	619a      	str	r2, [r3, #24]
 800186c:	4b38      	ldr	r3, [pc, #224]	; (8001950 <LCD_IO_WriteCmd8DataFill16+0x384>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b00      	cmp	r3, #0
 8001876:	d004      	beq.n	8001882 <LCD_IO_WriteCmd8DataFill16+0x2b6>
 8001878:	4b36      	ldr	r3, [pc, #216]	; (8001954 <LCD_IO_WriteCmd8DataFill16+0x388>)
 800187a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800187e:	619a      	str	r2, [r3, #24]
 8001880:	e003      	b.n	800188a <LCD_IO_WriteCmd8DataFill16+0x2be>
 8001882:	4b34      	ldr	r3, [pc, #208]	; (8001954 <LCD_IO_WriteCmd8DataFill16+0x388>)
 8001884:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001888:	619a      	str	r2, [r3, #24]
 800188a:	4b31      	ldr	r3, [pc, #196]	; (8001950 <LCD_IO_WriteCmd8DataFill16+0x384>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	f003 0308 	and.w	r3, r3, #8
 8001892:	2b00      	cmp	r3, #0
 8001894:	d004      	beq.n	80018a0 <LCD_IO_WriteCmd8DataFill16+0x2d4>
 8001896:	4b30      	ldr	r3, [pc, #192]	; (8001958 <LCD_IO_WriteCmd8DataFill16+0x38c>)
 8001898:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800189c:	619a      	str	r2, [r3, #24]
 800189e:	e003      	b.n	80018a8 <LCD_IO_WriteCmd8DataFill16+0x2dc>
 80018a0:	4b2d      	ldr	r3, [pc, #180]	; (8001958 <LCD_IO_WriteCmd8DataFill16+0x38c>)
 80018a2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80018a6:	619a      	str	r2, [r3, #24]
 80018a8:	4b29      	ldr	r3, [pc, #164]	; (8001950 <LCD_IO_WriteCmd8DataFill16+0x384>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	f003 0310 	and.w	r3, r3, #16
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d004      	beq.n	80018be <LCD_IO_WriteCmd8DataFill16+0x2f2>
 80018b4:	4b28      	ldr	r3, [pc, #160]	; (8001958 <LCD_IO_WriteCmd8DataFill16+0x38c>)
 80018b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018ba:	619a      	str	r2, [r3, #24]
 80018bc:	e003      	b.n	80018c6 <LCD_IO_WriteCmd8DataFill16+0x2fa>
 80018be:	4b26      	ldr	r3, [pc, #152]	; (8001958 <LCD_IO_WriteCmd8DataFill16+0x38c>)
 80018c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018c4:	619a      	str	r2, [r3, #24]
 80018c6:	4b22      	ldr	r3, [pc, #136]	; (8001950 <LCD_IO_WriteCmd8DataFill16+0x384>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	f003 0320 	and.w	r3, r3, #32
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d004      	beq.n	80018dc <LCD_IO_WriteCmd8DataFill16+0x310>
 80018d2:	4b21      	ldr	r3, [pc, #132]	; (8001958 <LCD_IO_WriteCmd8DataFill16+0x38c>)
 80018d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018d8:	619a      	str	r2, [r3, #24]
 80018da:	e003      	b.n	80018e4 <LCD_IO_WriteCmd8DataFill16+0x318>
 80018dc:	4b1e      	ldr	r3, [pc, #120]	; (8001958 <LCD_IO_WriteCmd8DataFill16+0x38c>)
 80018de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018e2:	619a      	str	r2, [r3, #24]
 80018e4:	4b1a      	ldr	r3, [pc, #104]	; (8001950 <LCD_IO_WriteCmd8DataFill16+0x384>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d004      	beq.n	80018fa <LCD_IO_WriteCmd8DataFill16+0x32e>
 80018f0:	4b1a      	ldr	r3, [pc, #104]	; (800195c <LCD_IO_WriteCmd8DataFill16+0x390>)
 80018f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018f6:	619a      	str	r2, [r3, #24]
 80018f8:	e003      	b.n	8001902 <LCD_IO_WriteCmd8DataFill16+0x336>
 80018fa:	4b18      	ldr	r3, [pc, #96]	; (800195c <LCD_IO_WriteCmd8DataFill16+0x390>)
 80018fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001900:	619a      	str	r2, [r3, #24]
 8001902:	4b13      	ldr	r3, [pc, #76]	; (8001950 <LCD_IO_WriteCmd8DataFill16+0x384>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	b25b      	sxtb	r3, r3
 8001908:	2b00      	cmp	r3, #0
 800190a:	da04      	bge.n	8001916 <LCD_IO_WriteCmd8DataFill16+0x34a>
 800190c:	4b11      	ldr	r3, [pc, #68]	; (8001954 <LCD_IO_WriteCmd8DataFill16+0x388>)
 800190e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001912:	619a      	str	r2, [r3, #24]
 8001914:	e003      	b.n	800191e <LCD_IO_WriteCmd8DataFill16+0x352>
 8001916:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <LCD_IO_WriteCmd8DataFill16+0x388>)
 8001918:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800191c:	619a      	str	r2, [r3, #24]
 800191e:	4b10      	ldr	r3, [pc, #64]	; (8001960 <LCD_IO_WriteCmd8DataFill16+0x394>)
 8001920:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001924:	619a      	str	r2, [r3, #24]
 8001926:	2008      	movs	r0, #8
 8001928:	f7ff fac9 	bl	8000ebe <LCD_IO_Delay>
 800192c:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <LCD_IO_WriteCmd8DataFill16+0x394>)
 800192e:	2201      	movs	r2, #1
 8001930:	619a      	str	r2, [r3, #24]
  while(Size--)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	1e5a      	subs	r2, r3, #1
 8001936:	603a      	str	r2, [r7, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	f47f aedf 	bne.w	80016fc <LCD_IO_WriteCmd8DataFill16+0x130>
  }
  LCD_CS_OFF;
 800193e:	4b09      	ldr	r3, [pc, #36]	; (8001964 <LCD_IO_WriteCmd8DataFill16+0x398>)
 8001940:	2202      	movs	r2, #2
 8001942:	619a      	str	r2, [r3, #24]
}
 8001944:	bf00      	nop
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	58020c00 	.word	0x58020c00
 8001950:	24000382 	.word	0x24000382
 8001954:	58021800 	.word	0x58021800
 8001958:	58021000 	.word	0x58021000
 800195c:	58020000 	.word	0x58020000
 8001960:	58020800 	.word	0x58020800
 8001964:	58020400 	.word	0x58020400

08001968 <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
 8001974:	73fb      	strb	r3, [r7, #15]
  LCD_CS_ON;
 8001976:	4b92      	ldr	r3, [pc, #584]	; (8001bc0 <LCD_IO_WriteCmd8MultipleData8+0x258>)
 8001978:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800197c:	619a      	str	r2, [r3, #24]
  LCD_CMD8_WRITE(Cmd);
 800197e:	4b91      	ldr	r3, [pc, #580]	; (8001bc4 <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 8001980:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001984:	619a      	str	r2, [r3, #24]
 8001986:	4a90      	ldr	r2, [pc, #576]	; (8001bc8 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001988:	7bfb      	ldrb	r3, [r7, #15]
 800198a:	7013      	strb	r3, [r2, #0]
 800198c:	4b8e      	ldr	r3, [pc, #568]	; (8001bc8 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	2b00      	cmp	r3, #0
 8001996:	d004      	beq.n	80019a2 <LCD_IO_WriteCmd8MultipleData8+0x3a>
 8001998:	4b8c      	ldr	r3, [pc, #560]	; (8001bcc <LCD_IO_WriteCmd8MultipleData8+0x264>)
 800199a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800199e:	619a      	str	r2, [r3, #24]
 80019a0:	e003      	b.n	80019aa <LCD_IO_WriteCmd8MultipleData8+0x42>
 80019a2:	4b8a      	ldr	r3, [pc, #552]	; (8001bcc <LCD_IO_WriteCmd8MultipleData8+0x264>)
 80019a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019a8:	619a      	str	r2, [r3, #24]
 80019aa:	4b87      	ldr	r3, [pc, #540]	; (8001bc8 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d004      	beq.n	80019c0 <LCD_IO_WriteCmd8MultipleData8+0x58>
 80019b6:	4b86      	ldr	r3, [pc, #536]	; (8001bd0 <LCD_IO_WriteCmd8MultipleData8+0x268>)
 80019b8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80019bc:	619a      	str	r2, [r3, #24]
 80019be:	e003      	b.n	80019c8 <LCD_IO_WriteCmd8MultipleData8+0x60>
 80019c0:	4b83      	ldr	r3, [pc, #524]	; (8001bd0 <LCD_IO_WriteCmd8MultipleData8+0x268>)
 80019c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80019c6:	619a      	str	r2, [r3, #24]
 80019c8:	4b7f      	ldr	r3, [pc, #508]	; (8001bc8 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d004      	beq.n	80019de <LCD_IO_WriteCmd8MultipleData8+0x76>
 80019d4:	4b7d      	ldr	r3, [pc, #500]	; (8001bcc <LCD_IO_WriteCmd8MultipleData8+0x264>)
 80019d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019da:	619a      	str	r2, [r3, #24]
 80019dc:	e003      	b.n	80019e6 <LCD_IO_WriteCmd8MultipleData8+0x7e>
 80019de:	4b7b      	ldr	r3, [pc, #492]	; (8001bcc <LCD_IO_WriteCmd8MultipleData8+0x264>)
 80019e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019e4:	619a      	str	r2, [r3, #24]
 80019e6:	4b78      	ldr	r3, [pc, #480]	; (8001bc8 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	f003 0308 	and.w	r3, r3, #8
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d004      	beq.n	80019fc <LCD_IO_WriteCmd8MultipleData8+0x94>
 80019f2:	4b78      	ldr	r3, [pc, #480]	; (8001bd4 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 80019f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019f8:	619a      	str	r2, [r3, #24]
 80019fa:	e003      	b.n	8001a04 <LCD_IO_WriteCmd8MultipleData8+0x9c>
 80019fc:	4b75      	ldr	r3, [pc, #468]	; (8001bd4 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 80019fe:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001a02:	619a      	str	r2, [r3, #24]
 8001a04:	4b70      	ldr	r3, [pc, #448]	; (8001bc8 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	f003 0310 	and.w	r3, r3, #16
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d004      	beq.n	8001a1a <LCD_IO_WriteCmd8MultipleData8+0xb2>
 8001a10:	4b70      	ldr	r3, [pc, #448]	; (8001bd4 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001a12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a16:	619a      	str	r2, [r3, #24]
 8001a18:	e003      	b.n	8001a22 <LCD_IO_WriteCmd8MultipleData8+0xba>
 8001a1a:	4b6e      	ldr	r3, [pc, #440]	; (8001bd4 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001a1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a20:	619a      	str	r2, [r3, #24]
 8001a22:	4b69      	ldr	r3, [pc, #420]	; (8001bc8 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	f003 0320 	and.w	r3, r3, #32
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d004      	beq.n	8001a38 <LCD_IO_WriteCmd8MultipleData8+0xd0>
 8001a2e:	4b69      	ldr	r3, [pc, #420]	; (8001bd4 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001a30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a34:	619a      	str	r2, [r3, #24]
 8001a36:	e003      	b.n	8001a40 <LCD_IO_WriteCmd8MultipleData8+0xd8>
 8001a38:	4b66      	ldr	r3, [pc, #408]	; (8001bd4 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001a3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a3e:	619a      	str	r2, [r3, #24]
 8001a40:	4b61      	ldr	r3, [pc, #388]	; (8001bc8 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d004      	beq.n	8001a56 <LCD_IO_WriteCmd8MultipleData8+0xee>
 8001a4c:	4b62      	ldr	r3, [pc, #392]	; (8001bd8 <LCD_IO_WriteCmd8MultipleData8+0x270>)
 8001a4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a52:	619a      	str	r2, [r3, #24]
 8001a54:	e003      	b.n	8001a5e <LCD_IO_WriteCmd8MultipleData8+0xf6>
 8001a56:	4b60      	ldr	r3, [pc, #384]	; (8001bd8 <LCD_IO_WriteCmd8MultipleData8+0x270>)
 8001a58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a5c:	619a      	str	r2, [r3, #24]
 8001a5e:	4b5a      	ldr	r3, [pc, #360]	; (8001bc8 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	b25b      	sxtb	r3, r3
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	da04      	bge.n	8001a72 <LCD_IO_WriteCmd8MultipleData8+0x10a>
 8001a68:	4b58      	ldr	r3, [pc, #352]	; (8001bcc <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001a6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a6e:	619a      	str	r2, [r3, #24]
 8001a70:	e003      	b.n	8001a7a <LCD_IO_WriteCmd8MultipleData8+0x112>
 8001a72:	4b56      	ldr	r3, [pc, #344]	; (8001bcc <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001a74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a78:	619a      	str	r2, [r3, #24]
 8001a7a:	4b52      	ldr	r3, [pc, #328]	; (8001bc4 <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 8001a7c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a80:	619a      	str	r2, [r3, #24]
 8001a82:	2008      	movs	r0, #8
 8001a84:	f7ff fa1b 	bl	8000ebe <LCD_IO_Delay>
 8001a88:	4b4e      	ldr	r3, [pc, #312]	; (8001bc4 <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	619a      	str	r2, [r3, #24]
 8001a8e:	4b4d      	ldr	r3, [pc, #308]	; (8001bc4 <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 8001a90:	2208      	movs	r2, #8
 8001a92:	619a      	str	r2, [r3, #24]

  while(Size--)
 8001a94:	e087      	b.n	8001ba6 <LCD_IO_WriteCmd8MultipleData8+0x23e>
  {
    LCD_DATA8_WRITE(*pData);
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	781a      	ldrb	r2, [r3, #0]
 8001a9a:	4b4b      	ldr	r3, [pc, #300]	; (8001bc8 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001a9c:	701a      	strb	r2, [r3, #0]
 8001a9e:	4b4a      	ldr	r3, [pc, #296]	; (8001bc8 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d004      	beq.n	8001ab4 <LCD_IO_WriteCmd8MultipleData8+0x14c>
 8001aaa:	4b48      	ldr	r3, [pc, #288]	; (8001bcc <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001aac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ab0:	619a      	str	r2, [r3, #24]
 8001ab2:	e003      	b.n	8001abc <LCD_IO_WriteCmd8MultipleData8+0x154>
 8001ab4:	4b45      	ldr	r3, [pc, #276]	; (8001bcc <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001ab6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aba:	619a      	str	r2, [r3, #24]
 8001abc:	4b42      	ldr	r3, [pc, #264]	; (8001bc8 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d004      	beq.n	8001ad2 <LCD_IO_WriteCmd8MultipleData8+0x16a>
 8001ac8:	4b41      	ldr	r3, [pc, #260]	; (8001bd0 <LCD_IO_WriteCmd8MultipleData8+0x268>)
 8001aca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ace:	619a      	str	r2, [r3, #24]
 8001ad0:	e003      	b.n	8001ada <LCD_IO_WriteCmd8MultipleData8+0x172>
 8001ad2:	4b3f      	ldr	r3, [pc, #252]	; (8001bd0 <LCD_IO_WriteCmd8MultipleData8+0x268>)
 8001ad4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001ad8:	619a      	str	r2, [r3, #24]
 8001ada:	4b3b      	ldr	r3, [pc, #236]	; (8001bc8 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	f003 0304 	and.w	r3, r3, #4
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d004      	beq.n	8001af0 <LCD_IO_WriteCmd8MultipleData8+0x188>
 8001ae6:	4b39      	ldr	r3, [pc, #228]	; (8001bcc <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001ae8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001aec:	619a      	str	r2, [r3, #24]
 8001aee:	e003      	b.n	8001af8 <LCD_IO_WriteCmd8MultipleData8+0x190>
 8001af0:	4b36      	ldr	r3, [pc, #216]	; (8001bcc <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001af2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001af6:	619a      	str	r2, [r3, #24]
 8001af8:	4b33      	ldr	r3, [pc, #204]	; (8001bc8 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	f003 0308 	and.w	r3, r3, #8
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d004      	beq.n	8001b0e <LCD_IO_WriteCmd8MultipleData8+0x1a6>
 8001b04:	4b33      	ldr	r3, [pc, #204]	; (8001bd4 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001b06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b0a:	619a      	str	r2, [r3, #24]
 8001b0c:	e003      	b.n	8001b16 <LCD_IO_WriteCmd8MultipleData8+0x1ae>
 8001b0e:	4b31      	ldr	r3, [pc, #196]	; (8001bd4 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001b10:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b14:	619a      	str	r2, [r3, #24]
 8001b16:	4b2c      	ldr	r3, [pc, #176]	; (8001bc8 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	f003 0310 	and.w	r3, r3, #16
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d004      	beq.n	8001b2c <LCD_IO_WriteCmd8MultipleData8+0x1c4>
 8001b22:	4b2c      	ldr	r3, [pc, #176]	; (8001bd4 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001b24:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b28:	619a      	str	r2, [r3, #24]
 8001b2a:	e003      	b.n	8001b34 <LCD_IO_WriteCmd8MultipleData8+0x1cc>
 8001b2c:	4b29      	ldr	r3, [pc, #164]	; (8001bd4 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001b2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b32:	619a      	str	r2, [r3, #24]
 8001b34:	4b24      	ldr	r3, [pc, #144]	; (8001bc8 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	f003 0320 	and.w	r3, r3, #32
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d004      	beq.n	8001b4a <LCD_IO_WriteCmd8MultipleData8+0x1e2>
 8001b40:	4b24      	ldr	r3, [pc, #144]	; (8001bd4 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001b42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b46:	619a      	str	r2, [r3, #24]
 8001b48:	e003      	b.n	8001b52 <LCD_IO_WriteCmd8MultipleData8+0x1ea>
 8001b4a:	4b22      	ldr	r3, [pc, #136]	; (8001bd4 <LCD_IO_WriteCmd8MultipleData8+0x26c>)
 8001b4c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b50:	619a      	str	r2, [r3, #24]
 8001b52:	4b1d      	ldr	r3, [pc, #116]	; (8001bc8 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d004      	beq.n	8001b68 <LCD_IO_WriteCmd8MultipleData8+0x200>
 8001b5e:	4b1e      	ldr	r3, [pc, #120]	; (8001bd8 <LCD_IO_WriteCmd8MultipleData8+0x270>)
 8001b60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b64:	619a      	str	r2, [r3, #24]
 8001b66:	e003      	b.n	8001b70 <LCD_IO_WriteCmd8MultipleData8+0x208>
 8001b68:	4b1b      	ldr	r3, [pc, #108]	; (8001bd8 <LCD_IO_WriteCmd8MultipleData8+0x270>)
 8001b6a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b6e:	619a      	str	r2, [r3, #24]
 8001b70:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <LCD_IO_WriteCmd8MultipleData8+0x260>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	b25b      	sxtb	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	da04      	bge.n	8001b84 <LCD_IO_WriteCmd8MultipleData8+0x21c>
 8001b7a:	4b14      	ldr	r3, [pc, #80]	; (8001bcc <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001b7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b80:	619a      	str	r2, [r3, #24]
 8001b82:	e003      	b.n	8001b8c <LCD_IO_WriteCmd8MultipleData8+0x224>
 8001b84:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <LCD_IO_WriteCmd8MultipleData8+0x264>)
 8001b86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b8a:	619a      	str	r2, [r3, #24]
 8001b8c:	4b0d      	ldr	r3, [pc, #52]	; (8001bc4 <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 8001b8e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b92:	619a      	str	r2, [r3, #24]
 8001b94:	2008      	movs	r0, #8
 8001b96:	f7ff f992 	bl	8000ebe <LCD_IO_Delay>
 8001b9a:	4b0a      	ldr	r3, [pc, #40]	; (8001bc4 <LCD_IO_WriteCmd8MultipleData8+0x25c>)
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	619a      	str	r2, [r3, #24]
    pData ++;
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	60bb      	str	r3, [r7, #8]
  while(Size--)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	1e5a      	subs	r2, r3, #1
 8001baa:	607a      	str	r2, [r7, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f47f af72 	bne.w	8001a96 <LCD_IO_WriteCmd8MultipleData8+0x12e>
  }
  LCD_CS_OFF;
 8001bb2:	4b03      	ldr	r3, [pc, #12]	; (8001bc0 <LCD_IO_WriteCmd8MultipleData8+0x258>)
 8001bb4:	2202      	movs	r2, #2
 8001bb6:	619a      	str	r2, [r3, #24]
}
 8001bb8:	bf00      	nop
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	58020400 	.word	0x58020400
 8001bc4:	58020800 	.word	0x58020800
 8001bc8:	24000382 	.word	0x24000382
 8001bcc:	58021800 	.word	0x58021800
 8001bd0:	58020c00 	.word	0x58020c00
 8001bd4:	58021000 	.word	0x58021000
 8001bd8:	58020000 	.word	0x58020000

08001bdc <LCD_IO_WriteCmd8MultipleData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData16(uint8_t Cmd, uint16_t *pData, uint32_t Size)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
 8001be8:	73fb      	strb	r3, [r7, #15]
  LCD_CS_ON;
 8001bea:	4b9b      	ldr	r3, [pc, #620]	; (8001e58 <LCD_IO_WriteCmd8MultipleData16+0x27c>)
 8001bec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bf0:	619a      	str	r2, [r3, #24]
  LCD_CMD8_WRITE(Cmd);
 8001bf2:	4b9a      	ldr	r3, [pc, #616]	; (8001e5c <LCD_IO_WriteCmd8MultipleData16+0x280>)
 8001bf4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001bf8:	619a      	str	r2, [r3, #24]
 8001bfa:	4a99      	ldr	r2, [pc, #612]	; (8001e60 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001bfc:	7bfb      	ldrb	r3, [r7, #15]
 8001bfe:	7013      	strb	r3, [r2, #0]
 8001c00:	4b97      	ldr	r3, [pc, #604]	; (8001e60 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d004      	beq.n	8001c16 <LCD_IO_WriteCmd8MultipleData16+0x3a>
 8001c0c:	4b95      	ldr	r3, [pc, #596]	; (8001e64 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001c0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c12:	619a      	str	r2, [r3, #24]
 8001c14:	e003      	b.n	8001c1e <LCD_IO_WriteCmd8MultipleData16+0x42>
 8001c16:	4b93      	ldr	r3, [pc, #588]	; (8001e64 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001c18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c1c:	619a      	str	r2, [r3, #24]
 8001c1e:	4b90      	ldr	r3, [pc, #576]	; (8001e60 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d004      	beq.n	8001c34 <LCD_IO_WriteCmd8MultipleData16+0x58>
 8001c2a:	4b8f      	ldr	r3, [pc, #572]	; (8001e68 <LCD_IO_WriteCmd8MultipleData16+0x28c>)
 8001c2c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c30:	619a      	str	r2, [r3, #24]
 8001c32:	e003      	b.n	8001c3c <LCD_IO_WriteCmd8MultipleData16+0x60>
 8001c34:	4b8c      	ldr	r3, [pc, #560]	; (8001e68 <LCD_IO_WriteCmd8MultipleData16+0x28c>)
 8001c36:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001c3a:	619a      	str	r2, [r3, #24]
 8001c3c:	4b88      	ldr	r3, [pc, #544]	; (8001e60 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d004      	beq.n	8001c52 <LCD_IO_WriteCmd8MultipleData16+0x76>
 8001c48:	4b86      	ldr	r3, [pc, #536]	; (8001e64 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001c4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c4e:	619a      	str	r2, [r3, #24]
 8001c50:	e003      	b.n	8001c5a <LCD_IO_WriteCmd8MultipleData16+0x7e>
 8001c52:	4b84      	ldr	r3, [pc, #528]	; (8001e64 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001c54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c58:	619a      	str	r2, [r3, #24]
 8001c5a:	4b81      	ldr	r3, [pc, #516]	; (8001e60 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	f003 0308 	and.w	r3, r3, #8
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d004      	beq.n	8001c70 <LCD_IO_WriteCmd8MultipleData16+0x94>
 8001c66:	4b81      	ldr	r3, [pc, #516]	; (8001e6c <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001c68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c6c:	619a      	str	r2, [r3, #24]
 8001c6e:	e003      	b.n	8001c78 <LCD_IO_WriteCmd8MultipleData16+0x9c>
 8001c70:	4b7e      	ldr	r3, [pc, #504]	; (8001e6c <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001c72:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001c76:	619a      	str	r2, [r3, #24]
 8001c78:	4b79      	ldr	r3, [pc, #484]	; (8001e60 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	f003 0310 	and.w	r3, r3, #16
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d004      	beq.n	8001c8e <LCD_IO_WriteCmd8MultipleData16+0xb2>
 8001c84:	4b79      	ldr	r3, [pc, #484]	; (8001e6c <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001c86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c8a:	619a      	str	r2, [r3, #24]
 8001c8c:	e003      	b.n	8001c96 <LCD_IO_WriteCmd8MultipleData16+0xba>
 8001c8e:	4b77      	ldr	r3, [pc, #476]	; (8001e6c <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001c90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c94:	619a      	str	r2, [r3, #24]
 8001c96:	4b72      	ldr	r3, [pc, #456]	; (8001e60 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	f003 0320 	and.w	r3, r3, #32
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d004      	beq.n	8001cac <LCD_IO_WriteCmd8MultipleData16+0xd0>
 8001ca2:	4b72      	ldr	r3, [pc, #456]	; (8001e6c <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001ca4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ca8:	619a      	str	r2, [r3, #24]
 8001caa:	e003      	b.n	8001cb4 <LCD_IO_WriteCmd8MultipleData16+0xd8>
 8001cac:	4b6f      	ldr	r3, [pc, #444]	; (8001e6c <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001cae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cb2:	619a      	str	r2, [r3, #24]
 8001cb4:	4b6a      	ldr	r3, [pc, #424]	; (8001e60 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d004      	beq.n	8001cca <LCD_IO_WriteCmd8MultipleData16+0xee>
 8001cc0:	4b6b      	ldr	r3, [pc, #428]	; (8001e70 <LCD_IO_WriteCmd8MultipleData16+0x294>)
 8001cc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cc6:	619a      	str	r2, [r3, #24]
 8001cc8:	e003      	b.n	8001cd2 <LCD_IO_WriteCmd8MultipleData16+0xf6>
 8001cca:	4b69      	ldr	r3, [pc, #420]	; (8001e70 <LCD_IO_WriteCmd8MultipleData16+0x294>)
 8001ccc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001cd0:	619a      	str	r2, [r3, #24]
 8001cd2:	4b63      	ldr	r3, [pc, #396]	; (8001e60 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	b25b      	sxtb	r3, r3
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	da04      	bge.n	8001ce6 <LCD_IO_WriteCmd8MultipleData16+0x10a>
 8001cdc:	4b61      	ldr	r3, [pc, #388]	; (8001e64 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001cde:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ce2:	619a      	str	r2, [r3, #24]
 8001ce4:	e003      	b.n	8001cee <LCD_IO_WriteCmd8MultipleData16+0x112>
 8001ce6:	4b5f      	ldr	r3, [pc, #380]	; (8001e64 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001ce8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cec:	619a      	str	r2, [r3, #24]
 8001cee:	4b5b      	ldr	r3, [pc, #364]	; (8001e5c <LCD_IO_WriteCmd8MultipleData16+0x280>)
 8001cf0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001cf4:	619a      	str	r2, [r3, #24]
 8001cf6:	2008      	movs	r0, #8
 8001cf8:	f7ff f8e1 	bl	8000ebe <LCD_IO_Delay>
 8001cfc:	4b57      	ldr	r3, [pc, #348]	; (8001e5c <LCD_IO_WriteCmd8MultipleData16+0x280>)
 8001cfe:	2201      	movs	r2, #1
 8001d00:	619a      	str	r2, [r3, #24]
 8001d02:	4b56      	ldr	r3, [pc, #344]	; (8001e5c <LCD_IO_WriteCmd8MultipleData16+0x280>)
 8001d04:	2208      	movs	r2, #8
 8001d06:	619a      	str	r2, [r3, #24]
  while(Size--)
 8001d08:	e11e      	b.n	8001f48 <LCD_IO_WriteCmd8MultipleData16+0x36c>
  {
    LCD_DATA16_WRITE(*pData);
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	881b      	ldrh	r3, [r3, #0]
 8001d0e:	0a1b      	lsrs	r3, r3, #8
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	4b52      	ldr	r3, [pc, #328]	; (8001e60 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001d16:	701a      	strb	r2, [r3, #0]
 8001d18:	4b51      	ldr	r3, [pc, #324]	; (8001e60 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d004      	beq.n	8001d2e <LCD_IO_WriteCmd8MultipleData16+0x152>
 8001d24:	4b4f      	ldr	r3, [pc, #316]	; (8001e64 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001d26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d2a:	619a      	str	r2, [r3, #24]
 8001d2c:	e003      	b.n	8001d36 <LCD_IO_WriteCmd8MultipleData16+0x15a>
 8001d2e:	4b4d      	ldr	r3, [pc, #308]	; (8001e64 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001d30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d34:	619a      	str	r2, [r3, #24]
 8001d36:	4b4a      	ldr	r3, [pc, #296]	; (8001e60 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d004      	beq.n	8001d4c <LCD_IO_WriteCmd8MultipleData16+0x170>
 8001d42:	4b49      	ldr	r3, [pc, #292]	; (8001e68 <LCD_IO_WriteCmd8MultipleData16+0x28c>)
 8001d44:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d48:	619a      	str	r2, [r3, #24]
 8001d4a:	e003      	b.n	8001d54 <LCD_IO_WriteCmd8MultipleData16+0x178>
 8001d4c:	4b46      	ldr	r3, [pc, #280]	; (8001e68 <LCD_IO_WriteCmd8MultipleData16+0x28c>)
 8001d4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001d52:	619a      	str	r2, [r3, #24]
 8001d54:	4b42      	ldr	r3, [pc, #264]	; (8001e60 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d004      	beq.n	8001d6a <LCD_IO_WriteCmd8MultipleData16+0x18e>
 8001d60:	4b40      	ldr	r3, [pc, #256]	; (8001e64 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001d62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d66:	619a      	str	r2, [r3, #24]
 8001d68:	e003      	b.n	8001d72 <LCD_IO_WriteCmd8MultipleData16+0x196>
 8001d6a:	4b3e      	ldr	r3, [pc, #248]	; (8001e64 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001d6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d70:	619a      	str	r2, [r3, #24]
 8001d72:	4b3b      	ldr	r3, [pc, #236]	; (8001e60 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	f003 0308 	and.w	r3, r3, #8
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d004      	beq.n	8001d88 <LCD_IO_WriteCmd8MultipleData16+0x1ac>
 8001d7e:	4b3b      	ldr	r3, [pc, #236]	; (8001e6c <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001d80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d84:	619a      	str	r2, [r3, #24]
 8001d86:	e003      	b.n	8001d90 <LCD_IO_WriteCmd8MultipleData16+0x1b4>
 8001d88:	4b38      	ldr	r3, [pc, #224]	; (8001e6c <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001d8a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001d8e:	619a      	str	r2, [r3, #24]
 8001d90:	4b33      	ldr	r3, [pc, #204]	; (8001e60 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	f003 0310 	and.w	r3, r3, #16
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d004      	beq.n	8001da6 <LCD_IO_WriteCmd8MultipleData16+0x1ca>
 8001d9c:	4b33      	ldr	r3, [pc, #204]	; (8001e6c <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001d9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001da2:	619a      	str	r2, [r3, #24]
 8001da4:	e003      	b.n	8001dae <LCD_IO_WriteCmd8MultipleData16+0x1d2>
 8001da6:	4b31      	ldr	r3, [pc, #196]	; (8001e6c <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001da8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dac:	619a      	str	r2, [r3, #24]
 8001dae:	4b2c      	ldr	r3, [pc, #176]	; (8001e60 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	f003 0320 	and.w	r3, r3, #32
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d004      	beq.n	8001dc4 <LCD_IO_WriteCmd8MultipleData16+0x1e8>
 8001dba:	4b2c      	ldr	r3, [pc, #176]	; (8001e6c <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001dbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001dc0:	619a      	str	r2, [r3, #24]
 8001dc2:	e003      	b.n	8001dcc <LCD_IO_WriteCmd8MultipleData16+0x1f0>
 8001dc4:	4b29      	ldr	r3, [pc, #164]	; (8001e6c <LCD_IO_WriteCmd8MultipleData16+0x290>)
 8001dc6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dca:	619a      	str	r2, [r3, #24]
 8001dcc:	4b24      	ldr	r3, [pc, #144]	; (8001e60 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d004      	beq.n	8001de2 <LCD_IO_WriteCmd8MultipleData16+0x206>
 8001dd8:	4b25      	ldr	r3, [pc, #148]	; (8001e70 <LCD_IO_WriteCmd8MultipleData16+0x294>)
 8001dda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dde:	619a      	str	r2, [r3, #24]
 8001de0:	e003      	b.n	8001dea <LCD_IO_WriteCmd8MultipleData16+0x20e>
 8001de2:	4b23      	ldr	r3, [pc, #140]	; (8001e70 <LCD_IO_WriteCmd8MultipleData16+0x294>)
 8001de4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001de8:	619a      	str	r2, [r3, #24]
 8001dea:	4b1d      	ldr	r3, [pc, #116]	; (8001e60 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	b25b      	sxtb	r3, r3
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	da04      	bge.n	8001dfe <LCD_IO_WriteCmd8MultipleData16+0x222>
 8001df4:	4b1b      	ldr	r3, [pc, #108]	; (8001e64 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001df6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001dfa:	619a      	str	r2, [r3, #24]
 8001dfc:	e003      	b.n	8001e06 <LCD_IO_WriteCmd8MultipleData16+0x22a>
 8001dfe:	4b19      	ldr	r3, [pc, #100]	; (8001e64 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001e00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e04:	619a      	str	r2, [r3, #24]
 8001e06:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <LCD_IO_WriteCmd8MultipleData16+0x280>)
 8001e08:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e0c:	619a      	str	r2, [r3, #24]
 8001e0e:	2008      	movs	r0, #8
 8001e10:	f7ff f855 	bl	8000ebe <LCD_IO_Delay>
 8001e14:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <LCD_IO_WriteCmd8MultipleData16+0x280>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	619a      	str	r2, [r3, #24]
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	881b      	ldrh	r3, [r3, #0]
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001e22:	701a      	strb	r2, [r3, #0]
 8001e24:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d004      	beq.n	8001e3a <LCD_IO_WriteCmd8MultipleData16+0x25e>
 8001e30:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001e32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e36:	619a      	str	r2, [r3, #24]
 8001e38:	e003      	b.n	8001e42 <LCD_IO_WriteCmd8MultipleData16+0x266>
 8001e3a:	4b0a      	ldr	r3, [pc, #40]	; (8001e64 <LCD_IO_WriteCmd8MultipleData16+0x288>)
 8001e3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e40:	619a      	str	r2, [r3, #24]
 8001e42:	4b07      	ldr	r3, [pc, #28]	; (8001e60 <LCD_IO_WriteCmd8MultipleData16+0x284>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d012      	beq.n	8001e74 <LCD_IO_WriteCmd8MultipleData16+0x298>
 8001e4e:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <LCD_IO_WriteCmd8MultipleData16+0x28c>)
 8001e50:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e54:	619a      	str	r2, [r3, #24]
 8001e56:	e011      	b.n	8001e7c <LCD_IO_WriteCmd8MultipleData16+0x2a0>
 8001e58:	58020400 	.word	0x58020400
 8001e5c:	58020800 	.word	0x58020800
 8001e60:	24000382 	.word	0x24000382
 8001e64:	58021800 	.word	0x58021800
 8001e68:	58020c00 	.word	0x58020c00
 8001e6c:	58021000 	.word	0x58021000
 8001e70:	58020000 	.word	0x58020000
 8001e74:	4b3b      	ldr	r3, [pc, #236]	; (8001f64 <LCD_IO_WriteCmd8MultipleData16+0x388>)
 8001e76:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001e7a:	619a      	str	r2, [r3, #24]
 8001e7c:	4b3a      	ldr	r3, [pc, #232]	; (8001f68 <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	f003 0304 	and.w	r3, r3, #4
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d004      	beq.n	8001e92 <LCD_IO_WriteCmd8MultipleData16+0x2b6>
 8001e88:	4b38      	ldr	r3, [pc, #224]	; (8001f6c <LCD_IO_WriteCmd8MultipleData16+0x390>)
 8001e8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e8e:	619a      	str	r2, [r3, #24]
 8001e90:	e003      	b.n	8001e9a <LCD_IO_WriteCmd8MultipleData16+0x2be>
 8001e92:	4b36      	ldr	r3, [pc, #216]	; (8001f6c <LCD_IO_WriteCmd8MultipleData16+0x390>)
 8001e94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e98:	619a      	str	r2, [r3, #24]
 8001e9a:	4b33      	ldr	r3, [pc, #204]	; (8001f68 <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d004      	beq.n	8001eb0 <LCD_IO_WriteCmd8MultipleData16+0x2d4>
 8001ea6:	4b32      	ldr	r3, [pc, #200]	; (8001f70 <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8001ea8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eac:	619a      	str	r2, [r3, #24]
 8001eae:	e003      	b.n	8001eb8 <LCD_IO_WriteCmd8MultipleData16+0x2dc>
 8001eb0:	4b2f      	ldr	r3, [pc, #188]	; (8001f70 <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8001eb2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001eb6:	619a      	str	r2, [r3, #24]
 8001eb8:	4b2b      	ldr	r3, [pc, #172]	; (8001f68 <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	f003 0310 	and.w	r3, r3, #16
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d004      	beq.n	8001ece <LCD_IO_WriteCmd8MultipleData16+0x2f2>
 8001ec4:	4b2a      	ldr	r3, [pc, #168]	; (8001f70 <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8001ec6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001eca:	619a      	str	r2, [r3, #24]
 8001ecc:	e003      	b.n	8001ed6 <LCD_IO_WriteCmd8MultipleData16+0x2fa>
 8001ece:	4b28      	ldr	r3, [pc, #160]	; (8001f70 <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8001ed0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ed4:	619a      	str	r2, [r3, #24]
 8001ed6:	4b24      	ldr	r3, [pc, #144]	; (8001f68 <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	f003 0320 	and.w	r3, r3, #32
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d004      	beq.n	8001eec <LCD_IO_WriteCmd8MultipleData16+0x310>
 8001ee2:	4b23      	ldr	r3, [pc, #140]	; (8001f70 <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8001ee4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ee8:	619a      	str	r2, [r3, #24]
 8001eea:	e003      	b.n	8001ef4 <LCD_IO_WriteCmd8MultipleData16+0x318>
 8001eec:	4b20      	ldr	r3, [pc, #128]	; (8001f70 <LCD_IO_WriteCmd8MultipleData16+0x394>)
 8001eee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ef2:	619a      	str	r2, [r3, #24]
 8001ef4:	4b1c      	ldr	r3, [pc, #112]	; (8001f68 <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d004      	beq.n	8001f0a <LCD_IO_WriteCmd8MultipleData16+0x32e>
 8001f00:	4b1c      	ldr	r3, [pc, #112]	; (8001f74 <LCD_IO_WriteCmd8MultipleData16+0x398>)
 8001f02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f06:	619a      	str	r2, [r3, #24]
 8001f08:	e003      	b.n	8001f12 <LCD_IO_WriteCmd8MultipleData16+0x336>
 8001f0a:	4b1a      	ldr	r3, [pc, #104]	; (8001f74 <LCD_IO_WriteCmd8MultipleData16+0x398>)
 8001f0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f10:	619a      	str	r2, [r3, #24]
 8001f12:	4b15      	ldr	r3, [pc, #84]	; (8001f68 <LCD_IO_WriteCmd8MultipleData16+0x38c>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	b25b      	sxtb	r3, r3
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	da04      	bge.n	8001f26 <LCD_IO_WriteCmd8MultipleData16+0x34a>
 8001f1c:	4b13      	ldr	r3, [pc, #76]	; (8001f6c <LCD_IO_WriteCmd8MultipleData16+0x390>)
 8001f1e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f22:	619a      	str	r2, [r3, #24]
 8001f24:	e003      	b.n	8001f2e <LCD_IO_WriteCmd8MultipleData16+0x352>
 8001f26:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <LCD_IO_WriteCmd8MultipleData16+0x390>)
 8001f28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f2c:	619a      	str	r2, [r3, #24]
 8001f2e:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <LCD_IO_WriteCmd8MultipleData16+0x39c>)
 8001f30:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f34:	619a      	str	r2, [r3, #24]
 8001f36:	2008      	movs	r0, #8
 8001f38:	f7fe ffc1 	bl	8000ebe <LCD_IO_Delay>
 8001f3c:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <LCD_IO_WriteCmd8MultipleData16+0x39c>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	619a      	str	r2, [r3, #24]
    pData ++;
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	3302      	adds	r3, #2
 8001f46:	60bb      	str	r3, [r7, #8]
  while(Size--)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	1e5a      	subs	r2, r3, #1
 8001f4c:	607a      	str	r2, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f47f aedb 	bne.w	8001d0a <LCD_IO_WriteCmd8MultipleData16+0x12e>
  }
  LCD_CS_OFF;
 8001f54:	4b09      	ldr	r3, [pc, #36]	; (8001f7c <LCD_IO_WriteCmd8MultipleData16+0x3a0>)
 8001f56:	2202      	movs	r2, #2
 8001f58:	619a      	str	r2, [r3, #24]
}
 8001f5a:	bf00      	nop
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	58020c00 	.word	0x58020c00
 8001f68:	24000382 	.word	0x24000382
 8001f6c:	58021800 	.word	0x58021800
 8001f70:	58021000 	.word	0x58021000
 8001f74:	58020000 	.word	0x58020000
 8001f78:	58020800 	.word	0x58020800
 8001f7c:	58020400 	.word	0x58020400

08001f80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f80:	b5b0      	push	{r4, r5, r7, lr}
 8001f82:	b088      	sub	sp, #32
 8001f84:	af04      	add	r7, sp, #16
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8001f86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f8a:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001f8c:	bf00      	nop
 8001f8e:	4bae      	ldr	r3, [pc, #696]	; (8002248 <main+0x2c8>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d004      	beq.n	8001fa4 <main+0x24>
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	1e5a      	subs	r2, r3, #1
 8001f9e:	60fa      	str	r2, [r7, #12]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	dcf4      	bgt.n	8001f8e <main+0xe>
  if ( timeout < 0 )
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	da01      	bge.n	8001fae <main+0x2e>
  {
  Error_Handler();
 8001faa:	f000 fe5b 	bl	8002c64 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fae:	f001 f8f1 	bl	8003194 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fb2:	f000 faed 	bl	8002590 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8001fb6:	4ba4      	ldr	r3, [pc, #656]	; (8002248 <main+0x2c8>)
 8001fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fbc:	4aa2      	ldr	r2, [pc, #648]	; (8002248 <main+0x2c8>)
 8001fbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fc6:	4ba0      	ldr	r3, [pc, #640]	; (8002248 <main+0x2c8>)
 8001fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd0:	607b      	str	r3, [r7, #4]
 8001fd2:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	f002 fe37 	bl	8004c48 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001fda:	2100      	movs	r1, #0
 8001fdc:	2000      	movs	r0, #0
 8001fde:	f002 fe4d 	bl	8004c7c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8001fe2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fe6:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001fe8:	bf00      	nop
 8001fea:	4b97      	ldr	r3, [pc, #604]	; (8002248 <main+0x2c8>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d104      	bne.n	8002000 <main+0x80>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	1e5a      	subs	r2, r3, #1
 8001ffa:	60fa      	str	r2, [r7, #12]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	dcf4      	bgt.n	8001fea <main+0x6a>
if ( timeout < 0 )
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2b00      	cmp	r3, #0
 8002004:	da01      	bge.n	800200a <main+0x8a>
{
Error_Handler();
 8002006:	f000 fe2d 	bl	8002c64 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800200a:	f000 fc2b 	bl	8002864 <MX_GPIO_Init>
  MX_ETH_Init();
 800200e:	f000 fb45 	bl	800269c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8002012:	f000 fb8f 	bl	8002734 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002016:	f000 fbd9 	bl	80027cc <MX_USB_OTG_FS_PCD_Init>
  MX_DMA_Init();
 800201a:	f000 fc09 	bl	8002830 <MX_DMA_Init>
  MX_LIBJPEG_Init();
 800201e:	f006 fe8f 	bl	8008d40 <MX_LIBJPEG_Init>
  /* USER CODE BEGIN 2 */

  	SRAM4-> flag_UID = 0;
 8002022:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8002026:	2200      	movs	r2, #0
 8002028:	771a      	strb	r2, [r3, #28]
  	SRAM4-> flag_blue_btn = 0;
 800202a:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 800202e:	2200      	movs	r2, #0
 8002030:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  	//SRAM4-> flag_dis_wwdg = 0;

  	ili9486_Init();
 8002034:	f7fe fbd8 	bl	80007e8 <ili9486_Init>
    ili9486_DisplayOn();
 8002038:	f7fe fbba 	bl	80007b0 <ili9486_DisplayOn>

    ili_scr_1();
 800203c:	f000 fc86 	bl	800294c <ili_scr_1>

    ili9486_FillRect(0, 0, 480, 35, cl_BLUE);
 8002040:	231f      	movs	r3, #31
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	2323      	movs	r3, #35	; 0x23
 8002046:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800204a:	2100      	movs	r1, #0
 800204c:	2000      	movs	r0, #0
 800204e:	f7fe fcf5 	bl	8000a3c <ili9486_FillRect>
    ili9486_WriteStringNoBG(10, 10, " > STAMPR ----->>>-----", Font20, cl_WHITE);
 8002052:	4b7e      	ldr	r3, [pc, #504]	; (800224c <main+0x2cc>)
 8002054:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002058:	9201      	str	r2, [sp, #4]
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	9200      	str	r2, [sp, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a7b      	ldr	r2, [pc, #492]	; (8002250 <main+0x2d0>)
 8002062:	210a      	movs	r1, #10
 8002064:	200a      	movs	r0, #10
 8002066:	f7fe fedf 	bl	8000e28 <ili9486_WriteStringNoBG>
    ili9486_WriteStringNoBG(400, 10, " OWL_HOR ", Font12, cl_WHITE);
 800206a:	4b7a      	ldr	r3, [pc, #488]	; (8002254 <main+0x2d4>)
 800206c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002070:	9201      	str	r2, [sp, #4]
 8002072:	685a      	ldr	r2, [r3, #4]
 8002074:	9200      	str	r2, [sp, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a77      	ldr	r2, [pc, #476]	; (8002258 <main+0x2d8>)
 800207a:	210a      	movs	r1, #10
 800207c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002080:	f7fe fed2 	bl	8000e28 <ili9486_WriteStringNoBG>

    ili9486_WriteStringNoBG(10, 40, " Scan the RFID Tag", Font20, cl_OLIVE);
 8002084:	4b71      	ldr	r3, [pc, #452]	; (800224c <main+0x2cc>)
 8002086:	f647 32e0 	movw	r2, #31712	; 0x7be0
 800208a:	9201      	str	r2, [sp, #4]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	9200      	str	r2, [sp, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a72      	ldr	r2, [pc, #456]	; (800225c <main+0x2dc>)
 8002094:	2128      	movs	r1, #40	; 0x28
 8002096:	200a      	movs	r0, #10
 8002098:	f7fe fec6 	bl	8000e28 <ili9486_WriteStringNoBG>
    //ili9486_FillRect(20, 100, 450, 200, cl_BLACK);
    ili9486_DrawRGBImage(90, 90, 277, 170, (uint16_t*)image_data_owlsOFCC);
 800209c:	4b70      	ldr	r3, [pc, #448]	; (8002260 <main+0x2e0>)
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	23aa      	movs	r3, #170	; 0xaa
 80020a2:	f240 1215 	movw	r2, #277	; 0x115
 80020a6:	215a      	movs	r1, #90	; 0x5a
 80020a8:	205a      	movs	r0, #90	; 0x5a
 80020aa:	f7fe fd2a 	bl	8000b02 <ili9486_DrawRGBImage>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  //// Time Clock Manager / Independent from GranDiState
	  if(HAL_GetTick() - timestamp_one[0] >= 500){
 80020ae:	f001 f8f7 	bl	80032a0 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	4b6b      	ldr	r3, [pc, #428]	; (8002264 <main+0x2e4>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80020be:	d351      	bcc.n	8002164 <main+0x1e4>
	  		  timestamp_one[0] = HAL_GetTick();
 80020c0:	f001 f8ee 	bl	80032a0 <HAL_GetTick>
 80020c4:	4603      	mov	r3, r0
 80020c6:	4a67      	ldr	r2, [pc, #412]	; (8002264 <main+0x2e4>)
 80020c8:	6013      	str	r3, [r2, #0]
	  		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80020ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020ce:	4866      	ldr	r0, [pc, #408]	; (8002268 <main+0x2e8>)
 80020d0:	f002 fd9f 	bl	8004c12 <HAL_GPIO_TogglePin>

	  		NowDat7 = SRAM4->NowDates;
 80020d4:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 80020d8:	4a64      	ldr	r2, [pc, #400]	; (800226c <main+0x2ec>)
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	6013      	str	r3, [r2, #0]
	  		NowTim7 = SRAM4->NowTimes;
 80020de:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 80020e2:	4a63      	ldr	r2, [pc, #396]	; (8002270 <main+0x2f0>)
 80020e4:	4615      	mov	r5, r2
 80020e6:	1d1c      	adds	r4, r3, #4
 80020e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ec:	6823      	ldr	r3, [r4, #0]
 80020ee:	602b      	str	r3, [r5, #0]

	  		sprintf(txtdispBF, "%02X:%02X:%02X", // use %02 to fill 0 front of 1 digit
	  				  NowTim7.Hours, NowTim7.Minutes, NowTim7.Seconds);
 80020f0:	4b5f      	ldr	r3, [pc, #380]	; (8002270 <main+0x2f0>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
	  		sprintf(txtdispBF, "%02X:%02X:%02X", // use %02 to fill 0 front of 1 digit
 80020f4:	461a      	mov	r2, r3
	  				  NowTim7.Hours, NowTim7.Minutes, NowTim7.Seconds);
 80020f6:	4b5e      	ldr	r3, [pc, #376]	; (8002270 <main+0x2f0>)
 80020f8:	785b      	ldrb	r3, [r3, #1]
	  		sprintf(txtdispBF, "%02X:%02X:%02X", // use %02 to fill 0 front of 1 digit
 80020fa:	4619      	mov	r1, r3
	  				  NowTim7.Hours, NowTim7.Minutes, NowTim7.Seconds);
 80020fc:	4b5c      	ldr	r3, [pc, #368]	; (8002270 <main+0x2f0>)
 80020fe:	789b      	ldrb	r3, [r3, #2]
	  		sprintf(txtdispBF, "%02X:%02X:%02X", // use %02 to fill 0 front of 1 digit
 8002100:	9300      	str	r3, [sp, #0]
 8002102:	460b      	mov	r3, r1
 8002104:	495b      	ldr	r1, [pc, #364]	; (8002274 <main+0x2f4>)
 8002106:	485c      	ldr	r0, [pc, #368]	; (8002278 <main+0x2f8>)
 8002108:	f006 ff54 	bl	8008fb4 <siprintf>
	  		ili9486_WriteString(365, 40, txtdispBF, Font20, cl_YELLOW, cl_BLACK);
 800210c:	4b4f      	ldr	r3, [pc, #316]	; (800224c <main+0x2cc>)
 800210e:	2200      	movs	r2, #0
 8002110:	9202      	str	r2, [sp, #8]
 8002112:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002116:	9201      	str	r2, [sp, #4]
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	9200      	str	r2, [sp, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a56      	ldr	r2, [pc, #344]	; (8002278 <main+0x2f8>)
 8002120:	2128      	movs	r1, #40	; 0x28
 8002122:	f240 106d 	movw	r0, #365	; 0x16d
 8002126:	f7fe fe32 	bl	8000d8e <ili9486_WriteString>

	  		sprintf(txtdispBF, "%02x/%02x/%02x",
	  			  				  NowDat7.Date, NowDat7.Month, NowDat7.Year);
 800212a:	4b50      	ldr	r3, [pc, #320]	; (800226c <main+0x2ec>)
 800212c:	789b      	ldrb	r3, [r3, #2]
	  		sprintf(txtdispBF, "%02x/%02x/%02x",
 800212e:	461a      	mov	r2, r3
	  			  				  NowDat7.Date, NowDat7.Month, NowDat7.Year);
 8002130:	4b4e      	ldr	r3, [pc, #312]	; (800226c <main+0x2ec>)
 8002132:	785b      	ldrb	r3, [r3, #1]
	  		sprintf(txtdispBF, "%02x/%02x/%02x",
 8002134:	4619      	mov	r1, r3
	  			  				  NowDat7.Date, NowDat7.Month, NowDat7.Year);
 8002136:	4b4d      	ldr	r3, [pc, #308]	; (800226c <main+0x2ec>)
 8002138:	78db      	ldrb	r3, [r3, #3]
	  		sprintf(txtdispBF, "%02x/%02x/%02x",
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	460b      	mov	r3, r1
 800213e:	494f      	ldr	r1, [pc, #316]	; (800227c <main+0x2fc>)
 8002140:	484d      	ldr	r0, [pc, #308]	; (8002278 <main+0x2f8>)
 8002142:	f006 ff37 	bl	8008fb4 <siprintf>
	  		ili9486_WriteString(365, 60, txtdispBF, Font20, cl_YELLOW, cl_BLACK);
 8002146:	4b41      	ldr	r3, [pc, #260]	; (800224c <main+0x2cc>)
 8002148:	2200      	movs	r2, #0
 800214a:	9202      	str	r2, [sp, #8]
 800214c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002150:	9201      	str	r2, [sp, #4]
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	9200      	str	r2, [sp, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a47      	ldr	r2, [pc, #284]	; (8002278 <main+0x2f8>)
 800215a:	213c      	movs	r1, #60	; 0x3c
 800215c:	f240 106d 	movw	r0, #365	; 0x16d
 8002160:	f7fe fe15 	bl	8000d8e <ili9486_WriteString>
//		  HAL_WWDG_Refresh(&hwwdg1);
//	  }


	  //// State Manager
	  if(HAL_GetTick() - timestamp_grandis[0] >= 100){
 8002164:	f001 f89c 	bl	80032a0 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	4b45      	ldr	r3, [pc, #276]	; (8002280 <main+0x300>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b63      	cmp	r3, #99	; 0x63
 8002172:	f240 81e8 	bls.w	8002546 <main+0x5c6>
		  timestamp_grandis[0] = HAL_GetTick();
 8002176:	f001 f893 	bl	80032a0 <HAL_GetTick>
 800217a:	4603      	mov	r3, r0
 800217c:	4a40      	ldr	r2, [pc, #256]	; (8002280 <main+0x300>)
 800217e:	6013      	str	r3, [r2, #0]

		  ili_seq_arrow();
 8002180:	f000 fc32 	bl	80029e8 <ili_seq_arrow>

		  switch (GranDiSTATE){
 8002184:	4b3f      	ldr	r3, [pc, #252]	; (8002284 <main+0x304>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b03      	cmp	r3, #3
 800218a:	f000 8155 	beq.w	8002438 <main+0x4b8>
 800218e:	2b03      	cmp	r3, #3
 8002190:	dc04      	bgt.n	800219c <main+0x21c>
 8002192:	2b01      	cmp	r3, #1
 8002194:	d019      	beq.n	80021ca <main+0x24a>
 8002196:	2b02      	cmp	r3, #2
 8002198:	f000 8089 	beq.w	80022ae <main+0x32e>
		  default:
		  case st_lobby:
			  //// ---- wait for scanned cards----------------------------------------------
			  //if(HAL_HSEM_Take(2, 2) == HAL_OK){
			  if ( SRAM4-> flag_UID == 1){
 800219c:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 80021a0:	7f1b      	ldrb	r3, [r3, #28]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	f040 81d1 	bne.w	800254a <main+0x5ca>

				  //GranDiSTATE = st_show;
				  GranDiSTATE = st_search;
 80021a8:	4b36      	ldr	r3, [pc, #216]	; (8002284 <main+0x304>)
 80021aa:	2201      	movs	r2, #1
 80021ac:	701a      	strb	r2, [r3, #0]
				  SRAM4-> flag_UID = 0;
 80021ae:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 80021b2:	2200      	movs	r2, #0
 80021b4:	771a      	strb	r2, [r3, #28]
				  //timestamp_grandis[1] = HAL_GetTick();

				  //// clear Lobby BG
				  ili9486_FillRect(90, 90, 277, 170, cl_BLACK);
 80021b6:	2300      	movs	r3, #0
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	23aa      	movs	r3, #170	; 0xaa
 80021bc:	f240 1215 	movw	r2, #277	; 0x115
 80021c0:	215a      	movs	r1, #90	; 0x5a
 80021c2:	205a      	movs	r0, #90	; 0x5a
 80021c4:	f7fe fc3a 	bl	8000a3c <ili9486_FillRect>
			  }
			  	//  HAL_HSEM_Release(2, 2);
			  	//}
			  break;
 80021c8:	e1bf      	b.n	800254a <main+0x5ca>
			   * 3 - search from UID[0] if not match -> go to next ID
			   *   - if not found any -> return n/a status and report no data in base
			   *   - if found -> break and end the search/ return personna -> go to st_show
			   * */
#ifdef px_ID_search_datasss
			  px_ID_match = -1; //// -1 means not found preferred
 80021ca:	4b2f      	ldr	r3, [pc, #188]	; (8002288 <main+0x308>)
 80021cc:	22ff      	movs	r2, #255	; 0xff
 80021ce:	701a      	strb	r2, [r3, #0]
			  //// Breadth-First-Search cat cat
			  	 for(int y = 0;y <= PERSONA_LEN; y++){
 80021d0:	2300      	movs	r3, #0
 80021d2:	60bb      	str	r3, [r7, #8]
 80021d4:	e05f      	b.n	8002296 <main+0x316>
			  		 if (SRAM4->UUID[0] == pxs_persons[y].USID[0]){
 80021d6:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 80021da:	7f5a      	ldrb	r2, [r3, #29]
 80021dc:	492b      	ldr	r1, [pc, #172]	; (800228c <main+0x30c>)
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	2068      	movs	r0, #104	; 0x68
 80021e2:	fb00 f303 	mul.w	r3, r0, r3
 80021e6:	440b      	add	r3, r1
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d150      	bne.n	8002290 <main+0x310>
			  			 if (SRAM4->UUID[1] == pxs_persons[y].USID[1]){
 80021ee:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 80021f2:	7f9a      	ldrb	r2, [r3, #30]
 80021f4:	4925      	ldr	r1, [pc, #148]	; (800228c <main+0x30c>)
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	2068      	movs	r0, #104	; 0x68
 80021fa:	fb00 f303 	mul.w	r3, r0, r3
 80021fe:	440b      	add	r3, r1
 8002200:	3301      	adds	r3, #1
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	429a      	cmp	r2, r3
 8002206:	d143      	bne.n	8002290 <main+0x310>
			  				if (SRAM4->UUID[2] == pxs_persons[y].USID[2]){
 8002208:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 800220c:	7fda      	ldrb	r2, [r3, #31]
 800220e:	491f      	ldr	r1, [pc, #124]	; (800228c <main+0x30c>)
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	2068      	movs	r0, #104	; 0x68
 8002214:	fb00 f303 	mul.w	r3, r0, r3
 8002218:	440b      	add	r3, r1
 800221a:	3302      	adds	r3, #2
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	429a      	cmp	r2, r3
 8002220:	d136      	bne.n	8002290 <main+0x310>
			  					if (SRAM4->UUID[3] == pxs_persons[y].USID[3]){
 8002222:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8002226:	f893 2020 	ldrb.w	r2, [r3, #32]
 800222a:	4918      	ldr	r1, [pc, #96]	; (800228c <main+0x30c>)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	2068      	movs	r0, #104	; 0x68
 8002230:	fb00 f303 	mul.w	r3, r0, r3
 8002234:	440b      	add	r3, r1
 8002236:	3303      	adds	r3, #3
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	429a      	cmp	r2, r3
 800223c:	d128      	bne.n	8002290 <main+0x310>
			  						px_ID_match = y; //// return match ID
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	b25a      	sxtb	r2, r3
 8002242:	4b11      	ldr	r3, [pc, #68]	; (8002288 <main+0x308>)
 8002244:	701a      	strb	r2, [r3, #0]
			  						break; //// end search
 8002246:	e029      	b.n	800229c <main+0x31c>
 8002248:	58024400 	.word	0x58024400
 800224c:	24000018 	.word	0x24000018
 8002250:	08009764 	.word	0x08009764
 8002254:	24000008 	.word	0x24000008
 8002258:	0800977c 	.word	0x0800977c
 800225c:	08009788 	.word	0x08009788
 8002260:	0800d30c 	.word	0x0800d30c
 8002264:	24000b88 	.word	0x24000b88
 8002268:	58020400 	.word	0x58020400
 800226c:	24000b84 	.word	0x24000b84
 8002270:	24000b70 	.word	0x24000b70
 8002274:	0800979c 	.word	0x0800979c
 8002278:	24000af8 	.word	0x24000af8
 800227c:	080097ac 	.word	0x080097ac
 8002280:	24000b90 	.word	0x24000b90
 8002284:	24000b98 	.word	0x24000b98
 8002288:	24000230 	.word	0x24000230
 800228c:	24000028 	.word	0x24000028
			  	 for(int y = 0;y <= PERSONA_LEN; y++){
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	3301      	adds	r3, #1
 8002294:	60bb      	str	r3, [r7, #8]
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	2b05      	cmp	r3, #5
 800229a:	dd9c      	ble.n	80021d6 <main+0x256>
			  		 }// search layer 0

			  	 }// for loop search
#endif
			  /// ---------------Finally-------------------------------
			  GranDiSTATE = st_show;
 800229c:	4bad      	ldr	r3, [pc, #692]	; (8002554 <main+0x5d4>)
 800229e:	2202      	movs	r2, #2
 80022a0:	701a      	strb	r2, [r3, #0]
			  timestamp_grandis[1] = HAL_GetTick();
 80022a2:	f000 fffd 	bl	80032a0 <HAL_GetTick>
 80022a6:	4603      	mov	r3, r0
 80022a8:	4aab      	ldr	r2, [pc, #684]	; (8002558 <main+0x5d8>)
 80022aa:	6053      	str	r3, [r2, #4]

			  break;
 80022ac:	e150      	b.n	8002550 <main+0x5d0>

		  case st_show:
			  //// ------------------------------------------------------------------------------

			  // ID Show----------------------------
			  sprintf(txtdispBF,"Scanned ID");
 80022ae:	49ab      	ldr	r1, [pc, #684]	; (800255c <main+0x5dc>)
 80022b0:	48ab      	ldr	r0, [pc, #684]	; (8002560 <main+0x5e0>)
 80022b2:	f006 fe7f 	bl	8008fb4 <siprintf>
			  ili9486_WriteString(160, 100, txtdispBF, Font20, cl_ORANGE, cl_BLACK);
 80022b6:	4bab      	ldr	r3, [pc, #684]	; (8002564 <main+0x5e4>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	9202      	str	r2, [sp, #8]
 80022bc:	f64f 5220 	movw	r2, #64800	; 0xfd20
 80022c0:	9201      	str	r2, [sp, #4]
 80022c2:	685a      	ldr	r2, [r3, #4]
 80022c4:	9200      	str	r2, [sp, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4aa5      	ldr	r2, [pc, #660]	; (8002560 <main+0x5e0>)
 80022ca:	2164      	movs	r1, #100	; 0x64
 80022cc:	20a0      	movs	r0, #160	; 0xa0
 80022ce:	f7fe fd5e 	bl	8000d8e <ili9486_WriteString>

			  sprintf(txtdispBF,"UID: %02X %02X %02X %02X",
					 SRAM4->UUID[0],SRAM4->UUID[1],SRAM4->UUID[2],SRAM4->UUID[3]);
 80022d2:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 80022d6:	7f5b      	ldrb	r3, [r3, #29]
			  sprintf(txtdispBF,"UID: %02X %02X %02X %02X",
 80022d8:	4619      	mov	r1, r3
					 SRAM4->UUID[0],SRAM4->UUID[1],SRAM4->UUID[2],SRAM4->UUID[3]);
 80022da:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 80022de:	7f9b      	ldrb	r3, [r3, #30]
			  sprintf(txtdispBF,"UID: %02X %02X %02X %02X",
 80022e0:	4618      	mov	r0, r3
					 SRAM4->UUID[0],SRAM4->UUID[1],SRAM4->UUID[2],SRAM4->UUID[3]);
 80022e2:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 80022e6:	7fdb      	ldrb	r3, [r3, #31]
			  sprintf(txtdispBF,"UID: %02X %02X %02X %02X",
 80022e8:	461a      	mov	r2, r3
					 SRAM4->UUID[0],SRAM4->UUID[1],SRAM4->UUID[2],SRAM4->UUID[3]);
 80022ea:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 80022ee:	f893 3020 	ldrb.w	r3, [r3, #32]
			  sprintf(txtdispBF,"UID: %02X %02X %02X %02X",
 80022f2:	9301      	str	r3, [sp, #4]
 80022f4:	9200      	str	r2, [sp, #0]
 80022f6:	4603      	mov	r3, r0
 80022f8:	460a      	mov	r2, r1
 80022fa:	499b      	ldr	r1, [pc, #620]	; (8002568 <main+0x5e8>)
 80022fc:	4898      	ldr	r0, [pc, #608]	; (8002560 <main+0x5e0>)
 80022fe:	f006 fe59 	bl	8008fb4 <siprintf>
			  ili9486_WriteString(160, 125, txtdispBF, Font20, cl_YELLOW, cl_BLACK);
 8002302:	4b98      	ldr	r3, [pc, #608]	; (8002564 <main+0x5e4>)
 8002304:	2200      	movs	r2, #0
 8002306:	9202      	str	r2, [sp, #8]
 8002308:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800230c:	9201      	str	r2, [sp, #4]
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	9200      	str	r2, [sp, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a92      	ldr	r2, [pc, #584]	; (8002560 <main+0x5e0>)
 8002316:	217d      	movs	r1, #125	; 0x7d
 8002318:	20a0      	movs	r0, #160	; 0xa0
 800231a:	f7fe fd38 	bl	8000d8e <ili9486_WriteString>
//				  ili9486_WriteString(160, 175, p1_owl.Surname, Font20, cl_GREEN, cl_BLACK);
//				  ili9486_WriteString(160, 200, p1_owl.welcom_txt, Font16, cl_ORANGE, cl_BLACK);
//			  }
#ifdef px_ID_search_datasss
			  //// ---- show pic
			  if(px_ID_match == -1){
 800231e:	4b93      	ldr	r3, [pc, #588]	; (800256c <main+0x5ec>)
 8002320:	f993 3000 	ldrsb.w	r3, [r3]
 8002324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002328:	d10e      	bne.n	8002348 <main+0x3c8>
				  ////ili9486_DrawRGBImage(20, 100, 128, 128, (uint16_t*)p1_owl.pic);
				  ili9486_WriteString(160, 160,"NO ID IN DATABASE", Font24, cl_RED, cl_BLACK);
 800232a:	4b91      	ldr	r3, [pc, #580]	; (8002570 <main+0x5f0>)
 800232c:	2200      	movs	r2, #0
 800232e:	9202      	str	r2, [sp, #8]
 8002330:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002334:	9201      	str	r2, [sp, #4]
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	9200      	str	r2, [sp, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a8d      	ldr	r2, [pc, #564]	; (8002574 <main+0x5f4>)
 800233e:	21a0      	movs	r1, #160	; 0xa0
 8002340:	20a0      	movs	r0, #160	; 0xa0
 8002342:	f7fe fd24 	bl	8000d8e <ili9486_WriteString>
 8002346:	e070      	b.n	800242a <main+0x4aa>

			  }else{
				  ili9486_DrawRGBImage(20, 100,
 8002348:	4b88      	ldr	r3, [pc, #544]	; (800256c <main+0x5ec>)
 800234a:	f993 3000 	ldrsb.w	r3, [r3]
 800234e:	4619      	mov	r1, r3
 8002350:	4a89      	ldr	r2, [pc, #548]	; (8002578 <main+0x5f8>)
 8002352:	2368      	movs	r3, #104	; 0x68
 8002354:	fb01 f303 	mul.w	r3, r1, r3
 8002358:	4413      	add	r3, r2
 800235a:	3364      	adds	r3, #100	; 0x64
 800235c:	881a      	ldrh	r2, [r3, #0]
 800235e:	4b83      	ldr	r3, [pc, #524]	; (800256c <main+0x5ec>)
 8002360:	f993 3000 	ldrsb.w	r3, [r3]
 8002364:	4618      	mov	r0, r3
 8002366:	4984      	ldr	r1, [pc, #528]	; (8002578 <main+0x5f8>)
 8002368:	2368      	movs	r3, #104	; 0x68
 800236a:	fb00 f303 	mul.w	r3, r0, r3
 800236e:	440b      	add	r3, r1
 8002370:	3366      	adds	r3, #102	; 0x66
 8002372:	8819      	ldrh	r1, [r3, #0]
 8002374:	4b7d      	ldr	r3, [pc, #500]	; (800256c <main+0x5ec>)
 8002376:	f993 3000 	ldrsb.w	r3, [r3]
 800237a:	461c      	mov	r4, r3
						  pxs_persons[px_ID_match].picXs,
						  pxs_persons[px_ID_match].picYs,
						  (uint16_t*)pxs_persons[px_ID_match].pic);
 800237c:	487e      	ldr	r0, [pc, #504]	; (8002578 <main+0x5f8>)
 800237e:	2368      	movs	r3, #104	; 0x68
 8002380:	fb04 f303 	mul.w	r3, r4, r3
 8002384:	4403      	add	r3, r0
 8002386:	3360      	adds	r3, #96	; 0x60
 8002388:	681b      	ldr	r3, [r3, #0]
				  ili9486_DrawRGBImage(20, 100,
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	460b      	mov	r3, r1
 800238e:	2164      	movs	r1, #100	; 0x64
 8002390:	2014      	movs	r0, #20
 8002392:	f7fe fbb6 	bl	8000b02 <ili9486_DrawRGBImage>
				  ili9486_WriteString(160, 150, pxs_persons[px_ID_match].Name, Font20, cl_GREEN, cl_BLACK);
 8002396:	4b75      	ldr	r3, [pc, #468]	; (800256c <main+0x5ec>)
 8002398:	f993 3000 	ldrsb.w	r3, [r3]
 800239c:	461a      	mov	r2, r3
 800239e:	2368      	movs	r3, #104	; 0x68
 80023a0:	fb02 f303 	mul.w	r3, r2, r3
 80023a4:	4a74      	ldr	r2, [pc, #464]	; (8002578 <main+0x5f8>)
 80023a6:	4413      	add	r3, r2
 80023a8:	1d59      	adds	r1, r3, #5
 80023aa:	4b6e      	ldr	r3, [pc, #440]	; (8002564 <main+0x5e4>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	9202      	str	r2, [sp, #8]
 80023b0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80023b4:	9201      	str	r2, [sp, #4]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	9200      	str	r2, [sp, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	460a      	mov	r2, r1
 80023be:	2196      	movs	r1, #150	; 0x96
 80023c0:	20a0      	movs	r0, #160	; 0xa0
 80023c2:	f7fe fce4 	bl	8000d8e <ili9486_WriteString>
				  ili9486_WriteString(160, 175, pxs_persons[px_ID_match].Surname, Font20, cl_GREEN, cl_BLACK);
 80023c6:	4b69      	ldr	r3, [pc, #420]	; (800256c <main+0x5ec>)
 80023c8:	f993 3000 	ldrsb.w	r3, [r3]
 80023cc:	461a      	mov	r2, r3
 80023ce:	2368      	movs	r3, #104	; 0x68
 80023d0:	fb02 f303 	mul.w	r3, r2, r3
 80023d4:	3318      	adds	r3, #24
 80023d6:	4a68      	ldr	r2, [pc, #416]	; (8002578 <main+0x5f8>)
 80023d8:	4413      	add	r3, r2
 80023da:	1c59      	adds	r1, r3, #1
 80023dc:	4b61      	ldr	r3, [pc, #388]	; (8002564 <main+0x5e4>)
 80023de:	2200      	movs	r2, #0
 80023e0:	9202      	str	r2, [sp, #8]
 80023e2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80023e6:	9201      	str	r2, [sp, #4]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	9200      	str	r2, [sp, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	460a      	mov	r2, r1
 80023f0:	21af      	movs	r1, #175	; 0xaf
 80023f2:	20a0      	movs	r0, #160	; 0xa0
 80023f4:	f7fe fccb 	bl	8000d8e <ili9486_WriteString>
				  ili9486_WriteString(160, 200, pxs_persons[px_ID_match].welcom_txt, Font16, cl_CYAN, cl_BLACK);
 80023f8:	4b5c      	ldr	r3, [pc, #368]	; (800256c <main+0x5ec>)
 80023fa:	f993 3000 	ldrsb.w	r3, [r3]
 80023fe:	461a      	mov	r2, r3
 8002400:	2368      	movs	r3, #104	; 0x68
 8002402:	fb02 f303 	mul.w	r3, r2, r3
 8002406:	3328      	adds	r3, #40	; 0x28
 8002408:	4a5b      	ldr	r2, [pc, #364]	; (8002578 <main+0x5f8>)
 800240a:	4413      	add	r3, r2
 800240c:	1d59      	adds	r1, r3, #5
 800240e:	4b5b      	ldr	r3, [pc, #364]	; (800257c <main+0x5fc>)
 8002410:	2200      	movs	r2, #0
 8002412:	9202      	str	r2, [sp, #8]
 8002414:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002418:	9201      	str	r2, [sp, #4]
 800241a:	685a      	ldr	r2, [r3, #4]
 800241c:	9200      	str	r2, [sp, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	460a      	mov	r2, r1
 8002422:	21c8      	movs	r1, #200	; 0xc8
 8002424:	20a0      	movs	r0, #160	; 0xa0
 8002426:	f7fe fcb2 	bl	8000d8e <ili9486_WriteString>
			  }
#endif
			  cnter_wait = 0; // start counter
 800242a:	4b55      	ldr	r3, [pc, #340]	; (8002580 <main+0x600>)
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
			  GranDiSTATE = st_waitend;
 8002430:	4b48      	ldr	r3, [pc, #288]	; (8002554 <main+0x5d4>)
 8002432:	2203      	movs	r2, #3
 8002434:	701a      	strb	r2, [r3, #0]

			  break;
 8002436:	e08b      	b.n	8002550 <main+0x5d0>
		  case st_waitend:
			  /* Using waitend to wait, if still in show -> CPU will write display continuously
			   * */

			  //// toggle blue btn flag to pause time
			  if(SRAM4->flag_blue_btn == 1){
 8002438:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 800243c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002440:	2b01      	cmp	r3, #1
 8002442:	d130      	bne.n	80024a6 <main+0x526>
				  flag_waitpause += 1;
 8002444:	4b4f      	ldr	r3, [pc, #316]	; (8002584 <main+0x604>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	3301      	adds	r3, #1
 800244a:	b2da      	uxtb	r2, r3
 800244c:	4b4d      	ldr	r3, [pc, #308]	; (8002584 <main+0x604>)
 800244e:	701a      	strb	r2, [r3, #0]
				  flag_waitpause %= 2;
 8002450:	4b4c      	ldr	r3, [pc, #304]	; (8002584 <main+0x604>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	b2da      	uxtb	r2, r3
 800245a:	4b4a      	ldr	r3, [pc, #296]	; (8002584 <main+0x604>)
 800245c:	701a      	strb	r2, [r3, #0]
				  if (flag_waitpause == 1){
 800245e:	4b49      	ldr	r3, [pc, #292]	; (8002584 <main+0x604>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d10f      	bne.n	8002486 <main+0x506>
					  ili9486_WriteString(200, 230, "PAUSE", Font24, cl_RED, cl_YELLOW);
 8002466:	4b42      	ldr	r3, [pc, #264]	; (8002570 <main+0x5f0>)
 8002468:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800246c:	9202      	str	r2, [sp, #8]
 800246e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002472:	9201      	str	r2, [sp, #4]
 8002474:	685a      	ldr	r2, [r3, #4]
 8002476:	9200      	str	r2, [sp, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a43      	ldr	r2, [pc, #268]	; (8002588 <main+0x608>)
 800247c:	21e6      	movs	r1, #230	; 0xe6
 800247e:	20c8      	movs	r0, #200	; 0xc8
 8002480:	f7fe fc85 	bl	8000d8e <ili9486_WriteString>
 8002484:	e00a      	b.n	800249c <main+0x51c>
				  }else{
					  ili9486_FillRect(200, 230, 120, 24, cl_BLACK);
 8002486:	2300      	movs	r3, #0
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	2318      	movs	r3, #24
 800248c:	2278      	movs	r2, #120	; 0x78
 800248e:	21e6      	movs	r1, #230	; 0xe6
 8002490:	20c8      	movs	r0, #200	; 0xc8
 8002492:	f7fe fad3 	bl	8000a3c <ili9486_FillRect>
					  flag_waitpause = 0; // force
 8002496:	4b3b      	ldr	r3, [pc, #236]	; (8002584 <main+0x604>)
 8002498:	2200      	movs	r2, #0
 800249a:	701a      	strb	r2, [r3, #0]
				  }
				  SRAM4->flag_blue_btn = 0;
 800249c:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			  }

			  //// time counter, run with timestamp of grandis sub[0] x main[1]
			  if(flag_waitpause == 0 &&
 80024a6:	4b37      	ldr	r3, [pc, #220]	; (8002584 <main+0x604>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d110      	bne.n	80024d0 <main+0x550>
					  HAL_GetTick() - timestamp_grandis[1] >= 1){
 80024ae:	f000 fef7 	bl	80032a0 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	4b28      	ldr	r3, [pc, #160]	; (8002558 <main+0x5d8>)
 80024b6:	685b      	ldr	r3, [r3, #4]
			  if(flag_waitpause == 0 &&
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d009      	beq.n	80024d0 <main+0x550>
				  timestamp_grandis[1] = HAL_GetTick();
 80024bc:	f000 fef0 	bl	80032a0 <HAL_GetTick>
 80024c0:	4603      	mov	r3, r0
 80024c2:	4a25      	ldr	r2, [pc, #148]	; (8002558 <main+0x5d8>)
 80024c4:	6053      	str	r3, [r2, #4]
				  cnter_wait++;
 80024c6:	4b2e      	ldr	r3, [pc, #184]	; (8002580 <main+0x600>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	3301      	adds	r3, #1
 80024cc:	4a2c      	ldr	r2, [pc, #176]	; (8002580 <main+0x600>)
 80024ce:	6013      	str	r3, [r2, #0]
			  ////// Ending display and back to lobby------------------
			  //// timer
//			  if(flag_waitpause == 0 &&
//					  HAL_GetTick() - timestamp_grandis[1] >= k_tim_show_milli){
			  //// counter
			  if(cnter_wait >= k_cnt_show){
 80024d0:	4b2b      	ldr	r3, [pc, #172]	; (8002580 <main+0x600>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2b22      	cmp	r3, #34	; 0x22
 80024d6:	d93a      	bls.n	800254e <main+0x5ce>
				  cnter_wait = 0; //// counter reset
 80024d8:	4b29      	ldr	r3, [pc, #164]	; (8002580 <main+0x600>)
 80024da:	2200      	movs	r2, #0
 80024dc:	601a      	str	r2, [r3, #0]
				  GranDiSTATE = st_lobby;
 80024de:	4b1d      	ldr	r3, [pc, #116]	; (8002554 <main+0x5d4>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	701a      	strb	r2, [r3, #0]
				  // clear Display
				  //ili9486_FillRect(20, 100, 450, 200, cl_BLACK);
				  //re_lobby
				  ili9486_FillRect(2, 90, 100, 200, cl_BLACK);
 80024e4:	2300      	movs	r3, #0
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	23c8      	movs	r3, #200	; 0xc8
 80024ea:	2264      	movs	r2, #100	; 0x64
 80024ec:	215a      	movs	r1, #90	; 0x5a
 80024ee:	2002      	movs	r0, #2
 80024f0:	f7fe faa4 	bl	8000a3c <ili9486_FillRect>
				  ili9486_FillRect(365, 90, 110, 200, cl_BLACK);
 80024f4:	2300      	movs	r3, #0
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	23c8      	movs	r3, #200	; 0xc8
 80024fa:	226e      	movs	r2, #110	; 0x6e
 80024fc:	215a      	movs	r1, #90	; 0x5a
 80024fe:	f240 106d 	movw	r0, #365	; 0x16d
 8002502:	f7fe fa9b 	bl	8000a3c <ili9486_FillRect>
				  ili9486_DrawRGBImage(90, 90, 277, 170, (uint16_t*)image_data_owlsOFCC);
 8002506:	4b21      	ldr	r3, [pc, #132]	; (800258c <main+0x60c>)
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	23aa      	movs	r3, #170	; 0xaa
 800250c:	f240 1215 	movw	r2, #277	; 0x115
 8002510:	215a      	movs	r1, #90	; 0x5a
 8002512:	205a      	movs	r0, #90	; 0x5a
 8002514:	f7fe faf5 	bl	8000b02 <ili9486_DrawRGBImage>

				  //// clear UID if nothing left in queue
				  if (SRAM4->flag_UID == 0){
 8002518:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 800251c:	7f1b      	ldrb	r3, [r3, #28]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d115      	bne.n	800254e <main+0x5ce>
				  SRAM4->UUID[0] = 0;
 8002522:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8002526:	2200      	movs	r2, #0
 8002528:	775a      	strb	r2, [r3, #29]
				  SRAM4->UUID[1] = 0;
 800252a:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 800252e:	2200      	movs	r2, #0
 8002530:	779a      	strb	r2, [r3, #30]
				  SRAM4->UUID[2] = 0;
 8002532:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8002536:	2200      	movs	r2, #0
 8002538:	77da      	strb	r2, [r3, #31]
				  SRAM4->UUID[3] = 0;
 800253a:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2020 	strb.w	r2, [r3, #32]
				  }
			  }
			  break;
 8002544:	e003      	b.n	800254e <main+0x5ce>

 		  } // switch
	  }// GrandState
 8002546:	bf00      	nop
 8002548:	e5b1      	b.n	80020ae <main+0x12e>
			  break;
 800254a:	bf00      	nop
 800254c:	e5af      	b.n	80020ae <main+0x12e>
			  break;
 800254e:	bf00      	nop
	  if(HAL_GetTick() - timestamp_one[0] >= 500){
 8002550:	e5ad      	b.n	80020ae <main+0x12e>
 8002552:	bf00      	nop
 8002554:	24000b98 	.word	0x24000b98
 8002558:	24000b90 	.word	0x24000b90
 800255c:	080097bc 	.word	0x080097bc
 8002560:	24000af8 	.word	0x24000af8
 8002564:	24000018 	.word	0x24000018
 8002568:	080097c8 	.word	0x080097c8
 800256c:	24000230 	.word	0x24000230
 8002570:	24000020 	.word	0x24000020
 8002574:	080097e4 	.word	0x080097e4
 8002578:	24000028 	.word	0x24000028
 800257c:	24000010 	.word	0x24000010
 8002580:	24000b9c 	.word	0x24000b9c
 8002584:	24000b99 	.word	0x24000b99
 8002588:	080097f8 	.word	0x080097f8
 800258c:	0800d30c 	.word	0x0800d30c

08002590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b09c      	sub	sp, #112	; 0x70
 8002594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002596:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800259a:	224c      	movs	r2, #76	; 0x4c
 800259c:	2100      	movs	r1, #0
 800259e:	4618      	mov	r0, r3
 80025a0:	f006 fc10 	bl	8008dc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025a4:	1d3b      	adds	r3, r7, #4
 80025a6:	2220      	movs	r2, #32
 80025a8:	2100      	movs	r1, #0
 80025aa:	4618      	mov	r0, r3
 80025ac:	f006 fc0a 	bl	8008dc4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80025b0:	2004      	movs	r0, #4
 80025b2:	f002 fcbf 	bl	8004f34 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80025b6:	2300      	movs	r3, #0
 80025b8:	603b      	str	r3, [r7, #0]
 80025ba:	4b35      	ldr	r3, [pc, #212]	; (8002690 <SystemClock_Config+0x100>)
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	4a34      	ldr	r2, [pc, #208]	; (8002690 <SystemClock_Config+0x100>)
 80025c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025c4:	6193      	str	r3, [r2, #24]
 80025c6:	4b32      	ldr	r3, [pc, #200]	; (8002690 <SystemClock_Config+0x100>)
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80025ce:	603b      	str	r3, [r7, #0]
 80025d0:	4b30      	ldr	r3, [pc, #192]	; (8002694 <SystemClock_Config+0x104>)
 80025d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d4:	4a2f      	ldr	r2, [pc, #188]	; (8002694 <SystemClock_Config+0x104>)
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80025dc:	4b2d      	ldr	r3, [pc, #180]	; (8002694 <SystemClock_Config+0x104>)
 80025de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	603b      	str	r3, [r7, #0]
 80025e6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80025e8:	bf00      	nop
 80025ea:	4b29      	ldr	r3, [pc, #164]	; (8002690 <SystemClock_Config+0x100>)
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025f6:	d1f8      	bne.n	80025ea <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80025f8:	4b27      	ldr	r3, [pc, #156]	; (8002698 <SystemClock_Config+0x108>)
 80025fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fc:	f023 0303 	bic.w	r3, r3, #3
 8002600:	4a25      	ldr	r2, [pc, #148]	; (8002698 <SystemClock_Config+0x108>)
 8002602:	f043 0302 	orr.w	r3, r3, #2
 8002606:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002608:	2309      	movs	r3, #9
 800260a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800260c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002610:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002612:	2301      	movs	r3, #1
 8002614:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002616:	2302      	movs	r3, #2
 8002618:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800261a:	2302      	movs	r3, #2
 800261c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800261e:	2301      	movs	r3, #1
 8002620:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8002622:	2378      	movs	r3, #120	; 0x78
 8002624:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002626:	2302      	movs	r3, #2
 8002628:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800262a:	2302      	movs	r3, #2
 800262c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800262e:	2302      	movs	r3, #2
 8002630:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002632:	230c      	movs	r3, #12
 8002634:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002636:	2300      	movs	r3, #0
 8002638:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800263a:	2300      	movs	r3, #0
 800263c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800263e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002642:	4618      	mov	r0, r3
 8002644:	f002 fce0 	bl	8005008 <HAL_RCC_OscConfig>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800264e:	f000 fb09 	bl	8002c64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002652:	233f      	movs	r3, #63	; 0x3f
 8002654:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002656:	2303      	movs	r3, #3
 8002658:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800265a:	2300      	movs	r3, #0
 800265c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800265e:	2308      	movs	r3, #8
 8002660:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002662:	2340      	movs	r3, #64	; 0x40
 8002664:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002666:	2340      	movs	r3, #64	; 0x40
 8002668:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800266a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800266e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002670:	2340      	movs	r3, #64	; 0x40
 8002672:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002674:	1d3b      	adds	r3, r7, #4
 8002676:	2104      	movs	r1, #4
 8002678:	4618      	mov	r0, r3
 800267a:	f003 f8f3 	bl	8005864 <HAL_RCC_ClockConfig>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8002684:	f000 faee 	bl	8002c64 <Error_Handler>
  }
}
 8002688:	bf00      	nop
 800268a:	3770      	adds	r7, #112	; 0x70
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	58024800 	.word	0x58024800
 8002694:	58000400 	.word	0x58000400
 8002698:	58024400 	.word	0x58024400

0800269c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80026a0:	4b1e      	ldr	r3, [pc, #120]	; (800271c <MX_ETH_Init+0x80>)
 80026a2:	4a1f      	ldr	r2, [pc, #124]	; (8002720 <MX_ETH_Init+0x84>)
 80026a4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80026a6:	4b1f      	ldr	r3, [pc, #124]	; (8002724 <MX_ETH_Init+0x88>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80026ac:	4b1d      	ldr	r3, [pc, #116]	; (8002724 <MX_ETH_Init+0x88>)
 80026ae:	2280      	movs	r2, #128	; 0x80
 80026b0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80026b2:	4b1c      	ldr	r3, [pc, #112]	; (8002724 <MX_ETH_Init+0x88>)
 80026b4:	22e1      	movs	r2, #225	; 0xe1
 80026b6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80026b8:	4b1a      	ldr	r3, [pc, #104]	; (8002724 <MX_ETH_Init+0x88>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80026be:	4b19      	ldr	r3, [pc, #100]	; (8002724 <MX_ETH_Init+0x88>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80026c4:	4b17      	ldr	r3, [pc, #92]	; (8002724 <MX_ETH_Init+0x88>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80026ca:	4b14      	ldr	r3, [pc, #80]	; (800271c <MX_ETH_Init+0x80>)
 80026cc:	4a15      	ldr	r2, [pc, #84]	; (8002724 <MX_ETH_Init+0x88>)
 80026ce:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80026d0:	4b12      	ldr	r3, [pc, #72]	; (800271c <MX_ETH_Init+0x80>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80026d6:	4b11      	ldr	r3, [pc, #68]	; (800271c <MX_ETH_Init+0x80>)
 80026d8:	4a13      	ldr	r2, [pc, #76]	; (8002728 <MX_ETH_Init+0x8c>)
 80026da:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80026dc:	4b0f      	ldr	r3, [pc, #60]	; (800271c <MX_ETH_Init+0x80>)
 80026de:	4a13      	ldr	r2, [pc, #76]	; (800272c <MX_ETH_Init+0x90>)
 80026e0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80026e2:	4b0e      	ldr	r3, [pc, #56]	; (800271c <MX_ETH_Init+0x80>)
 80026e4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80026e8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80026ea:	480c      	ldr	r0, [pc, #48]	; (800271c <MX_ETH_Init+0x80>)
 80026ec:	f001 fca4 	bl	8004038 <HAL_ETH_Init>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80026f6:	f000 fab5 	bl	8002c64 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80026fa:	2238      	movs	r2, #56	; 0x38
 80026fc:	2100      	movs	r1, #0
 80026fe:	480c      	ldr	r0, [pc, #48]	; (8002730 <MX_ETH_Init+0x94>)
 8002700:	f006 fb60 	bl	8008dc4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8002704:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <MX_ETH_Init+0x94>)
 8002706:	2221      	movs	r2, #33	; 0x21
 8002708:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800270a:	4b09      	ldr	r3, [pc, #36]	; (8002730 <MX_ETH_Init+0x94>)
 800270c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002710:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8002712:	4b07      	ldr	r3, [pc, #28]	; (8002730 <MX_ETH_Init+0x94>)
 8002714:	2200      	movs	r2, #0
 8002716:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8002718:	bf00      	nop
 800271a:	bd80      	pop	{r7, pc}
 800271c:	240003bc 	.word	0x240003bc
 8002720:	40028000 	.word	0x40028000
 8002724:	24000ba0 	.word	0x24000ba0
 8002728:	24000300 	.word	0x24000300
 800272c:	240002a0 	.word	0x240002a0
 8002730:	24000384 	.word	0x24000384

08002734 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002738:	4b22      	ldr	r3, [pc, #136]	; (80027c4 <MX_USART3_UART_Init+0x90>)
 800273a:	4a23      	ldr	r2, [pc, #140]	; (80027c8 <MX_USART3_UART_Init+0x94>)
 800273c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800273e:	4b21      	ldr	r3, [pc, #132]	; (80027c4 <MX_USART3_UART_Init+0x90>)
 8002740:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002744:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002746:	4b1f      	ldr	r3, [pc, #124]	; (80027c4 <MX_USART3_UART_Init+0x90>)
 8002748:	2200      	movs	r2, #0
 800274a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800274c:	4b1d      	ldr	r3, [pc, #116]	; (80027c4 <MX_USART3_UART_Init+0x90>)
 800274e:	2200      	movs	r2, #0
 8002750:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002752:	4b1c      	ldr	r3, [pc, #112]	; (80027c4 <MX_USART3_UART_Init+0x90>)
 8002754:	2200      	movs	r2, #0
 8002756:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002758:	4b1a      	ldr	r3, [pc, #104]	; (80027c4 <MX_USART3_UART_Init+0x90>)
 800275a:	220c      	movs	r2, #12
 800275c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800275e:	4b19      	ldr	r3, [pc, #100]	; (80027c4 <MX_USART3_UART_Init+0x90>)
 8002760:	2200      	movs	r2, #0
 8002762:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002764:	4b17      	ldr	r3, [pc, #92]	; (80027c4 <MX_USART3_UART_Init+0x90>)
 8002766:	2200      	movs	r2, #0
 8002768:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800276a:	4b16      	ldr	r3, [pc, #88]	; (80027c4 <MX_USART3_UART_Init+0x90>)
 800276c:	2200      	movs	r2, #0
 800276e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002770:	4b14      	ldr	r3, [pc, #80]	; (80027c4 <MX_USART3_UART_Init+0x90>)
 8002772:	2200      	movs	r2, #0
 8002774:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002776:	4b13      	ldr	r3, [pc, #76]	; (80027c4 <MX_USART3_UART_Init+0x90>)
 8002778:	2200      	movs	r2, #0
 800277a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800277c:	4811      	ldr	r0, [pc, #68]	; (80027c4 <MX_USART3_UART_Init+0x90>)
 800277e:	f004 ff65 	bl	800764c <HAL_UART_Init>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002788:	f000 fa6c 	bl	8002c64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800278c:	2100      	movs	r1, #0
 800278e:	480d      	ldr	r0, [pc, #52]	; (80027c4 <MX_USART3_UART_Init+0x90>)
 8002790:	f005 ff02 	bl	8008598 <HAL_UARTEx_SetTxFifoThreshold>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800279a:	f000 fa63 	bl	8002c64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800279e:	2100      	movs	r1, #0
 80027a0:	4808      	ldr	r0, [pc, #32]	; (80027c4 <MX_USART3_UART_Init+0x90>)
 80027a2:	f005 ff37 	bl	8008614 <HAL_UARTEx_SetRxFifoThreshold>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80027ac:	f000 fa5a 	bl	8002c64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80027b0:	4804      	ldr	r0, [pc, #16]	; (80027c4 <MX_USART3_UART_Init+0x90>)
 80027b2:	f005 feb8 	bl	8008526 <HAL_UARTEx_DisableFifoMode>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80027bc:	f000 fa52 	bl	8002c64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80027c0:	bf00      	nop
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	2400046c 	.word	0x2400046c
 80027c8:	40004800 	.word	0x40004800

080027cc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80027d0:	4b15      	ldr	r3, [pc, #84]	; (8002828 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80027d2:	4a16      	ldr	r2, [pc, #88]	; (800282c <MX_USB_OTG_FS_PCD_Init+0x60>)
 80027d4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80027d6:	4b14      	ldr	r3, [pc, #80]	; (8002828 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80027d8:	2209      	movs	r2, #9
 80027da:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80027dc:	4b12      	ldr	r3, [pc, #72]	; (8002828 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80027de:	2202      	movs	r2, #2
 80027e0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80027e2:	4b11      	ldr	r3, [pc, #68]	; (8002828 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80027e8:	4b0f      	ldr	r3, [pc, #60]	; (8002828 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80027ea:	2202      	movs	r2, #2
 80027ec:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80027ee:	4b0e      	ldr	r3, [pc, #56]	; (8002828 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80027f4:	4b0c      	ldr	r3, [pc, #48]	; (8002828 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80027fa:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8002800:	4b09      	ldr	r3, [pc, #36]	; (8002828 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002802:	2201      	movs	r2, #1
 8002804:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002806:	4b08      	ldr	r3, [pc, #32]	; (8002828 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002808:	2201      	movs	r2, #1
 800280a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800280c:	4b06      	ldr	r3, [pc, #24]	; (8002828 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800280e:	2200      	movs	r2, #0
 8002810:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002812:	4805      	ldr	r0, [pc, #20]	; (8002828 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002814:	f002 fa46 	bl	8004ca4 <HAL_PCD_Init>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800281e:	f000 fa21 	bl	8002c64 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002822:	bf00      	nop
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	240005ec 	.word	0x240005ec
 800282c:	40080000 	.word	0x40080000

08002830 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002836:	4b0a      	ldr	r3, [pc, #40]	; (8002860 <MX_DMA_Init+0x30>)
 8002838:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800283c:	4a08      	ldr	r2, [pc, #32]	; (8002860 <MX_DMA_Init+0x30>)
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002846:	4b06      	ldr	r3, [pc, #24]	; (8002860 <MX_DMA_Init+0x30>)
 8002848:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	607b      	str	r3, [r7, #4]
 8002852:	687b      	ldr	r3, [r7, #4]

}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	58024400 	.word	0x58024400

08002864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b08a      	sub	sp, #40	; 0x28
 8002868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800286a:	f107 0314 	add.w	r3, r7, #20
 800286e:	2200      	movs	r2, #0
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	605a      	str	r2, [r3, #4]
 8002874:	609a      	str	r2, [r3, #8]
 8002876:	60da      	str	r2, [r3, #12]
 8002878:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800287a:	4b32      	ldr	r3, [pc, #200]	; (8002944 <MX_GPIO_Init+0xe0>)
 800287c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002880:	4a30      	ldr	r2, [pc, #192]	; (8002944 <MX_GPIO_Init+0xe0>)
 8002882:	f043 0304 	orr.w	r3, r3, #4
 8002886:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800288a:	4b2e      	ldr	r3, [pc, #184]	; (8002944 <MX_GPIO_Init+0xe0>)
 800288c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	613b      	str	r3, [r7, #16]
 8002896:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002898:	4b2a      	ldr	r3, [pc, #168]	; (8002944 <MX_GPIO_Init+0xe0>)
 800289a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800289e:	4a29      	ldr	r2, [pc, #164]	; (8002944 <MX_GPIO_Init+0xe0>)
 80028a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028a8:	4b26      	ldr	r3, [pc, #152]	; (8002944 <MX_GPIO_Init+0xe0>)
 80028aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b2:	60fb      	str	r3, [r7, #12]
 80028b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b6:	4b23      	ldr	r3, [pc, #140]	; (8002944 <MX_GPIO_Init+0xe0>)
 80028b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028bc:	4a21      	ldr	r2, [pc, #132]	; (8002944 <MX_GPIO_Init+0xe0>)
 80028be:	f043 0301 	orr.w	r3, r3, #1
 80028c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028c6:	4b1f      	ldr	r3, [pc, #124]	; (8002944 <MX_GPIO_Init+0xe0>)
 80028c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	60bb      	str	r3, [r7, #8]
 80028d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028d4:	4b1b      	ldr	r3, [pc, #108]	; (8002944 <MX_GPIO_Init+0xe0>)
 80028d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028da:	4a1a      	ldr	r2, [pc, #104]	; (8002944 <MX_GPIO_Init+0xe0>)
 80028dc:	f043 0302 	orr.w	r3, r3, #2
 80028e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028e4:	4b17      	ldr	r3, [pc, #92]	; (8002944 <MX_GPIO_Init+0xe0>)
 80028e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	607b      	str	r3, [r7, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80028f2:	4b14      	ldr	r3, [pc, #80]	; (8002944 <MX_GPIO_Init+0xe0>)
 80028f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028f8:	4a12      	ldr	r2, [pc, #72]	; (8002944 <MX_GPIO_Init+0xe0>)
 80028fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002902:	4b10      	ldr	r3, [pc, #64]	; (8002944 <MX_GPIO_Init+0xe0>)
 8002904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800290c:	603b      	str	r3, [r7, #0]
 800290e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002910:	2200      	movs	r2, #0
 8002912:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002916:	480c      	ldr	r0, [pc, #48]	; (8002948 <MX_GPIO_Init+0xe4>)
 8002918:	f002 f962 	bl	8004be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800291c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002920:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002922:	2301      	movs	r3, #1
 8002924:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002926:	2300      	movs	r3, #0
 8002928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800292a:	2300      	movs	r3, #0
 800292c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800292e:	f107 0314 	add.w	r3, r7, #20
 8002932:	4619      	mov	r1, r3
 8002934:	4804      	ldr	r0, [pc, #16]	; (8002948 <MX_GPIO_Init+0xe4>)
 8002936:	f001 ffa3 	bl	8004880 <HAL_GPIO_Init>

}
 800293a:	bf00      	nop
 800293c:	3728      	adds	r7, #40	; 0x28
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	58024400 	.word	0x58024400
 8002948:	58020400 	.word	0x58020400

0800294c <ili_scr_1>:

/* USER CODE BEGIN 4 */
void ili_scr_1(){
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af02      	add	r7, sp, #8

	  ili9486_FillRect(0, 0, 480, 320, cl_BLACK);
 8002952:	2300      	movs	r3, #0
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800295a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800295e:	2100      	movs	r1, #0
 8002960:	2000      	movs	r0, #0
 8002962:	f7fe f86b 	bl	8000a3c <ili9486_FillRect>

	  ili9486_FillRect(0, 300, 80, 20, cl_RED); // Red
 8002966:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800296a:	9300      	str	r3, [sp, #0]
 800296c:	2314      	movs	r3, #20
 800296e:	2250      	movs	r2, #80	; 0x50
 8002970:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002974:	2000      	movs	r0, #0
 8002976:	f7fe f861 	bl	8000a3c <ili9486_FillRect>
	  ili9486_FillRect(80, 300, 80, 20, cl_GREEN); // Green RGB565
 800297a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800297e:	9300      	str	r3, [sp, #0]
 8002980:	2314      	movs	r3, #20
 8002982:	2250      	movs	r2, #80	; 0x50
 8002984:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002988:	2050      	movs	r0, #80	; 0x50
 800298a:	f7fe f857 	bl	8000a3c <ili9486_FillRect>
	  ili9486_FillRect(160, 300, 80, 20, cl_BLUE); // Blue
 800298e:	231f      	movs	r3, #31
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	2314      	movs	r3, #20
 8002994:	2250      	movs	r2, #80	; 0x50
 8002996:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800299a:	20a0      	movs	r0, #160	; 0xa0
 800299c:	f7fe f84e 	bl	8000a3c <ili9486_FillRect>
	  ili9486_FillRect(240, 300,  80, 20, cl_CYAN); // C0x07FF
 80029a0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	2314      	movs	r3, #20
 80029a8:	2250      	movs	r2, #80	; 0x50
 80029aa:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80029ae:	20f0      	movs	r0, #240	; 0xf0
 80029b0:	f7fe f844 	bl	8000a3c <ili9486_FillRect>
	  ili9486_FillRect(320, 300, 80, 20, cl_MAGENTA); // M 0xF81F
 80029b4:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	2314      	movs	r3, #20
 80029bc:	2250      	movs	r2, #80	; 0x50
 80029be:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80029c2:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80029c6:	f7fe f839 	bl	8000a3c <ili9486_FillRect>
	  ili9486_FillRect(400, 300, 80, 20, cl_YELLOW); // Y0xFFE0
 80029ca:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	2314      	movs	r3, #20
 80029d2:	2250      	movs	r2, #80	; 0x50
 80029d4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80029d8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80029dc:	f7fe f82e 	bl	8000a3c <ili9486_FillRect>
	  //ili9486_FillRect(390, 30, 70, 230, cl_BLACK); // K
}
 80029e0:	bf00      	nop
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
	...

080029e8 <ili_seq_arrow>:

void ili_seq_arrow(){
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af04      	add	r7, sp, #16
	//ili9486_WriteStringNoBG(10, 10, " > STAMPR ----->>>-----", Font20, cl_WHITE);
	static uint8_t st_arr = 0;
	uint8_t xpoo = 166;
 80029ee:	23a6      	movs	r3, #166	; 0xa6
 80029f0:	71fb      	strb	r3, [r7, #7]
	uint8_t ypoo = 10;
 80029f2:	230a      	movs	r3, #10
 80029f4:	71bb      	strb	r3, [r7, #6]

	switch(st_arr){
 80029f6:	4b8b      	ldr	r3, [pc, #556]	; (8002c24 <ili_seq_arrow+0x23c>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	3b01      	subs	r3, #1
 80029fc:	2b0b      	cmp	r3, #11
 80029fe:	d81b      	bhi.n	8002a38 <ili_seq_arrow+0x50>
 8002a00:	a201      	add	r2, pc, #4	; (adr r2, 8002a08 <ili_seq_arrow+0x20>)
 8002a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a06:	bf00      	nop
 8002a08:	08002a5b 	.word	0x08002a5b
 8002a0c:	08002a7d 	.word	0x08002a7d
 8002a10:	08002a9f 	.word	0x08002a9f
 8002a14:	08002ac1 	.word	0x08002ac1
 8002a18:	08002ae3 	.word	0x08002ae3
 8002a1c:	08002b05 	.word	0x08002b05
 8002a20:	08002b27 	.word	0x08002b27
 8002a24:	08002b49 	.word	0x08002b49
 8002a28:	08002b6b 	.word	0x08002b6b
 8002a2c:	08002b8d 	.word	0x08002b8d
 8002a30:	08002baf 	.word	0x08002baf
 8002a34:	08002bd1 	.word	0x08002bd1
	default:
	case 0:
		ili9486_WriteString(xpoo, ypoo, "----->>>-----", Font20, cl_WHITE, cl_BLUE);
 8002a38:	79fb      	ldrb	r3, [r7, #7]
 8002a3a:	b298      	uxth	r0, r3
 8002a3c:	79bb      	ldrb	r3, [r7, #6]
 8002a3e:	b299      	uxth	r1, r3
 8002a40:	4b79      	ldr	r3, [pc, #484]	; (8002c28 <ili_seq_arrow+0x240>)
 8002a42:	221f      	movs	r2, #31
 8002a44:	9202      	str	r2, [sp, #8]
 8002a46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a4a:	9201      	str	r2, [sp, #4]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	9200      	str	r2, [sp, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a76      	ldr	r2, [pc, #472]	; (8002c2c <ili_seq_arrow+0x244>)
 8002a54:	f7fe f99b 	bl	8000d8e <ili9486_WriteString>
		break;
 8002a58:	e0cb      	b.n	8002bf2 <ili_seq_arrow+0x20a>
	case 1:
		ili9486_WriteString(xpoo, ypoo, "------>>>----", Font20, cl_WHITE, cl_BLUE);
 8002a5a:	79fb      	ldrb	r3, [r7, #7]
 8002a5c:	b298      	uxth	r0, r3
 8002a5e:	79bb      	ldrb	r3, [r7, #6]
 8002a60:	b299      	uxth	r1, r3
 8002a62:	4b71      	ldr	r3, [pc, #452]	; (8002c28 <ili_seq_arrow+0x240>)
 8002a64:	221f      	movs	r2, #31
 8002a66:	9202      	str	r2, [sp, #8]
 8002a68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a6c:	9201      	str	r2, [sp, #4]
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	9200      	str	r2, [sp, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a6e      	ldr	r2, [pc, #440]	; (8002c30 <ili_seq_arrow+0x248>)
 8002a76:	f7fe f98a 	bl	8000d8e <ili9486_WriteString>
		break;
 8002a7a:	e0ba      	b.n	8002bf2 <ili_seq_arrow+0x20a>
	case 2:
		ili9486_WriteString(xpoo, ypoo, "------->>>---", Font20, cl_WHITE, cl_BLUE);
 8002a7c:	79fb      	ldrb	r3, [r7, #7]
 8002a7e:	b298      	uxth	r0, r3
 8002a80:	79bb      	ldrb	r3, [r7, #6]
 8002a82:	b299      	uxth	r1, r3
 8002a84:	4b68      	ldr	r3, [pc, #416]	; (8002c28 <ili_seq_arrow+0x240>)
 8002a86:	221f      	movs	r2, #31
 8002a88:	9202      	str	r2, [sp, #8]
 8002a8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a8e:	9201      	str	r2, [sp, #4]
 8002a90:	685a      	ldr	r2, [r3, #4]
 8002a92:	9200      	str	r2, [sp, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a67      	ldr	r2, [pc, #412]	; (8002c34 <ili_seq_arrow+0x24c>)
 8002a98:	f7fe f979 	bl	8000d8e <ili9486_WriteString>
		break;
 8002a9c:	e0a9      	b.n	8002bf2 <ili_seq_arrow+0x20a>
	case 3:
		ili9486_WriteString(xpoo, ypoo, "-------->>>--", Font20, cl_WHITE, cl_BLUE);
 8002a9e:	79fb      	ldrb	r3, [r7, #7]
 8002aa0:	b298      	uxth	r0, r3
 8002aa2:	79bb      	ldrb	r3, [r7, #6]
 8002aa4:	b299      	uxth	r1, r3
 8002aa6:	4b60      	ldr	r3, [pc, #384]	; (8002c28 <ili_seq_arrow+0x240>)
 8002aa8:	221f      	movs	r2, #31
 8002aaa:	9202      	str	r2, [sp, #8]
 8002aac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ab0:	9201      	str	r2, [sp, #4]
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	9200      	str	r2, [sp, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a5f      	ldr	r2, [pc, #380]	; (8002c38 <ili_seq_arrow+0x250>)
 8002aba:	f7fe f968 	bl	8000d8e <ili9486_WriteString>
		break;
 8002abe:	e098      	b.n	8002bf2 <ili_seq_arrow+0x20a>
	case 4:
		ili9486_WriteString(xpoo, ypoo, "--------->>>-", Font20, cl_WHITE, cl_BLUE);
 8002ac0:	79fb      	ldrb	r3, [r7, #7]
 8002ac2:	b298      	uxth	r0, r3
 8002ac4:	79bb      	ldrb	r3, [r7, #6]
 8002ac6:	b299      	uxth	r1, r3
 8002ac8:	4b57      	ldr	r3, [pc, #348]	; (8002c28 <ili_seq_arrow+0x240>)
 8002aca:	221f      	movs	r2, #31
 8002acc:	9202      	str	r2, [sp, #8]
 8002ace:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ad2:	9201      	str	r2, [sp, #4]
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	9200      	str	r2, [sp, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a58      	ldr	r2, [pc, #352]	; (8002c3c <ili_seq_arrow+0x254>)
 8002adc:	f7fe f957 	bl	8000d8e <ili9486_WriteString>
		break;
 8002ae0:	e087      	b.n	8002bf2 <ili_seq_arrow+0x20a>
	case 5:
		ili9486_WriteString(xpoo, ypoo, "---------->>>", Font20, cl_WHITE, cl_BLUE);
 8002ae2:	79fb      	ldrb	r3, [r7, #7]
 8002ae4:	b298      	uxth	r0, r3
 8002ae6:	79bb      	ldrb	r3, [r7, #6]
 8002ae8:	b299      	uxth	r1, r3
 8002aea:	4b4f      	ldr	r3, [pc, #316]	; (8002c28 <ili_seq_arrow+0x240>)
 8002aec:	221f      	movs	r2, #31
 8002aee:	9202      	str	r2, [sp, #8]
 8002af0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002af4:	9201      	str	r2, [sp, #4]
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	9200      	str	r2, [sp, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a50      	ldr	r2, [pc, #320]	; (8002c40 <ili_seq_arrow+0x258>)
 8002afe:	f7fe f946 	bl	8000d8e <ili9486_WriteString>
		break;
 8002b02:	e076      	b.n	8002bf2 <ili_seq_arrow+0x20a>
	case 6:
		ili9486_WriteString(xpoo, ypoo, ">---------->>", Font20, cl_WHITE, cl_BLUE);
 8002b04:	79fb      	ldrb	r3, [r7, #7]
 8002b06:	b298      	uxth	r0, r3
 8002b08:	79bb      	ldrb	r3, [r7, #6]
 8002b0a:	b299      	uxth	r1, r3
 8002b0c:	4b46      	ldr	r3, [pc, #280]	; (8002c28 <ili_seq_arrow+0x240>)
 8002b0e:	221f      	movs	r2, #31
 8002b10:	9202      	str	r2, [sp, #8]
 8002b12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b16:	9201      	str	r2, [sp, #4]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	9200      	str	r2, [sp, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a49      	ldr	r2, [pc, #292]	; (8002c44 <ili_seq_arrow+0x25c>)
 8002b20:	f7fe f935 	bl	8000d8e <ili9486_WriteString>
		break;
 8002b24:	e065      	b.n	8002bf2 <ili_seq_arrow+0x20a>
	case 7:
		ili9486_WriteString(xpoo, ypoo, ">>---------->", Font20, cl_WHITE, cl_BLUE);
 8002b26:	79fb      	ldrb	r3, [r7, #7]
 8002b28:	b298      	uxth	r0, r3
 8002b2a:	79bb      	ldrb	r3, [r7, #6]
 8002b2c:	b299      	uxth	r1, r3
 8002b2e:	4b3e      	ldr	r3, [pc, #248]	; (8002c28 <ili_seq_arrow+0x240>)
 8002b30:	221f      	movs	r2, #31
 8002b32:	9202      	str	r2, [sp, #8]
 8002b34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b38:	9201      	str	r2, [sp, #4]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	9200      	str	r2, [sp, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a41      	ldr	r2, [pc, #260]	; (8002c48 <ili_seq_arrow+0x260>)
 8002b42:	f7fe f924 	bl	8000d8e <ili9486_WriteString>
		break;
 8002b46:	e054      	b.n	8002bf2 <ili_seq_arrow+0x20a>
	case 8:
		ili9486_WriteString(xpoo, ypoo, ">>>----------", Font20, cl_WHITE, cl_BLUE);
 8002b48:	79fb      	ldrb	r3, [r7, #7]
 8002b4a:	b298      	uxth	r0, r3
 8002b4c:	79bb      	ldrb	r3, [r7, #6]
 8002b4e:	b299      	uxth	r1, r3
 8002b50:	4b35      	ldr	r3, [pc, #212]	; (8002c28 <ili_seq_arrow+0x240>)
 8002b52:	221f      	movs	r2, #31
 8002b54:	9202      	str	r2, [sp, #8]
 8002b56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b5a:	9201      	str	r2, [sp, #4]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	9200      	str	r2, [sp, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a3a      	ldr	r2, [pc, #232]	; (8002c4c <ili_seq_arrow+0x264>)
 8002b64:	f7fe f913 	bl	8000d8e <ili9486_WriteString>
		break;
 8002b68:	e043      	b.n	8002bf2 <ili_seq_arrow+0x20a>
	case 9:
		ili9486_WriteString(xpoo, ypoo, "->>>---------", Font20, cl_WHITE, cl_BLUE);
 8002b6a:	79fb      	ldrb	r3, [r7, #7]
 8002b6c:	b298      	uxth	r0, r3
 8002b6e:	79bb      	ldrb	r3, [r7, #6]
 8002b70:	b299      	uxth	r1, r3
 8002b72:	4b2d      	ldr	r3, [pc, #180]	; (8002c28 <ili_seq_arrow+0x240>)
 8002b74:	221f      	movs	r2, #31
 8002b76:	9202      	str	r2, [sp, #8]
 8002b78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b7c:	9201      	str	r2, [sp, #4]
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	9200      	str	r2, [sp, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a32      	ldr	r2, [pc, #200]	; (8002c50 <ili_seq_arrow+0x268>)
 8002b86:	f7fe f902 	bl	8000d8e <ili9486_WriteString>
		break;
 8002b8a:	e032      	b.n	8002bf2 <ili_seq_arrow+0x20a>
	case 10:
		ili9486_WriteString(xpoo, ypoo, "-->>>--------", Font20, cl_WHITE, cl_BLUE);
 8002b8c:	79fb      	ldrb	r3, [r7, #7]
 8002b8e:	b298      	uxth	r0, r3
 8002b90:	79bb      	ldrb	r3, [r7, #6]
 8002b92:	b299      	uxth	r1, r3
 8002b94:	4b24      	ldr	r3, [pc, #144]	; (8002c28 <ili_seq_arrow+0x240>)
 8002b96:	221f      	movs	r2, #31
 8002b98:	9202      	str	r2, [sp, #8]
 8002b9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b9e:	9201      	str	r2, [sp, #4]
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	9200      	str	r2, [sp, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a2b      	ldr	r2, [pc, #172]	; (8002c54 <ili_seq_arrow+0x26c>)
 8002ba8:	f7fe f8f1 	bl	8000d8e <ili9486_WriteString>
		break;
 8002bac:	e021      	b.n	8002bf2 <ili_seq_arrow+0x20a>
	case 11:
		ili9486_WriteString(xpoo, ypoo, "--->>>-------", Font20, cl_WHITE, cl_BLUE);
 8002bae:	79fb      	ldrb	r3, [r7, #7]
 8002bb0:	b298      	uxth	r0, r3
 8002bb2:	79bb      	ldrb	r3, [r7, #6]
 8002bb4:	b299      	uxth	r1, r3
 8002bb6:	4b1c      	ldr	r3, [pc, #112]	; (8002c28 <ili_seq_arrow+0x240>)
 8002bb8:	221f      	movs	r2, #31
 8002bba:	9202      	str	r2, [sp, #8]
 8002bbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bc0:	9201      	str	r2, [sp, #4]
 8002bc2:	685a      	ldr	r2, [r3, #4]
 8002bc4:	9200      	str	r2, [sp, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a23      	ldr	r2, [pc, #140]	; (8002c58 <ili_seq_arrow+0x270>)
 8002bca:	f7fe f8e0 	bl	8000d8e <ili9486_WriteString>
		break;
 8002bce:	e010      	b.n	8002bf2 <ili_seq_arrow+0x20a>
	case 12:
		ili9486_WriteString(xpoo, ypoo, "---->>>------", Font20, cl_WHITE, cl_BLUE);
 8002bd0:	79fb      	ldrb	r3, [r7, #7]
 8002bd2:	b298      	uxth	r0, r3
 8002bd4:	79bb      	ldrb	r3, [r7, #6]
 8002bd6:	b299      	uxth	r1, r3
 8002bd8:	4b13      	ldr	r3, [pc, #76]	; (8002c28 <ili_seq_arrow+0x240>)
 8002bda:	221f      	movs	r2, #31
 8002bdc:	9202      	str	r2, [sp, #8]
 8002bde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002be2:	9201      	str	r2, [sp, #4]
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	9200      	str	r2, [sp, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a1c      	ldr	r2, [pc, #112]	; (8002c5c <ili_seq_arrow+0x274>)
 8002bec:	f7fe f8cf 	bl	8000d8e <ili9486_WriteString>
		break;
 8002bf0:	bf00      	nop
	}
	st_arr++;
 8002bf2:	4b0c      	ldr	r3, [pc, #48]	; (8002c24 <ili_seq_arrow+0x23c>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	4b0a      	ldr	r3, [pc, #40]	; (8002c24 <ili_seq_arrow+0x23c>)
 8002bfc:	701a      	strb	r2, [r3, #0]
	st_arr%=13;
 8002bfe:	4b09      	ldr	r3, [pc, #36]	; (8002c24 <ili_seq_arrow+0x23c>)
 8002c00:	7819      	ldrb	r1, [r3, #0]
 8002c02:	4b17      	ldr	r3, [pc, #92]	; (8002c60 <ili_seq_arrow+0x278>)
 8002c04:	fba3 2301 	umull	r2, r3, r3, r1
 8002c08:	089a      	lsrs	r2, r3, #2
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	4413      	add	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	1acb      	subs	r3, r1, r3
 8002c16:	b2da      	uxtb	r2, r3
 8002c18:	4b02      	ldr	r3, [pc, #8]	; (8002c24 <ili_seq_arrow+0x23c>)
 8002c1a:	701a      	strb	r2, [r3, #0]
}
 8002c1c:	bf00      	nop
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	24000ba6 	.word	0x24000ba6
 8002c28:	24000018 	.word	0x24000018
 8002c2c:	08009800 	.word	0x08009800
 8002c30:	08009810 	.word	0x08009810
 8002c34:	08009820 	.word	0x08009820
 8002c38:	08009830 	.word	0x08009830
 8002c3c:	08009840 	.word	0x08009840
 8002c40:	08009850 	.word	0x08009850
 8002c44:	08009860 	.word	0x08009860
 8002c48:	08009870 	.word	0x08009870
 8002c4c:	08009880 	.word	0x08009880
 8002c50:	08009890 	.word	0x08009890
 8002c54:	080098a0 	.word	0x080098a0
 8002c58:	080098b0 	.word	0x080098b0
 8002c5c:	080098c0 	.word	0x080098c0
 8002c60:	4ec4ec4f 	.word	0x4ec4ec4f

08002c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c68:	b672      	cpsid	i
}
 8002c6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c6c:	e7fe      	b.n	8002c6c <Error_Handler+0x8>
	...

08002c70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c76:	4b0a      	ldr	r3, [pc, #40]	; (8002ca0 <HAL_MspInit+0x30>)
 8002c78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c7c:	4a08      	ldr	r2, [pc, #32]	; (8002ca0 <HAL_MspInit+0x30>)
 8002c7e:	f043 0302 	orr.w	r3, r3, #2
 8002c82:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002c86:	4b06      	ldr	r3, [pc, #24]	; (8002ca0 <HAL_MspInit+0x30>)
 8002c88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	607b      	str	r3, [r7, #4]
 8002c92:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	58024400 	.word	0x58024400

08002ca4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b08e      	sub	sp, #56	; 0x38
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	605a      	str	r2, [r3, #4]
 8002cb6:	609a      	str	r2, [r3, #8]
 8002cb8:	60da      	str	r2, [r3, #12]
 8002cba:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a59      	ldr	r2, [pc, #356]	; (8002e28 <HAL_ETH_MspInit+0x184>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	f040 80ab 	bne.w	8002e1e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8002cc8:	4b58      	ldr	r3, [pc, #352]	; (8002e2c <HAL_ETH_MspInit+0x188>)
 8002cca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002cce:	4a57      	ldr	r2, [pc, #348]	; (8002e2c <HAL_ETH_MspInit+0x188>)
 8002cd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cd4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002cd8:	4b54      	ldr	r3, [pc, #336]	; (8002e2c <HAL_ETH_MspInit+0x188>)
 8002cda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002cde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ce2:	623b      	str	r3, [r7, #32]
 8002ce4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8002ce6:	4b51      	ldr	r3, [pc, #324]	; (8002e2c <HAL_ETH_MspInit+0x188>)
 8002ce8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002cec:	4a4f      	ldr	r2, [pc, #316]	; (8002e2c <HAL_ETH_MspInit+0x188>)
 8002cee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002cf6:	4b4d      	ldr	r3, [pc, #308]	; (8002e2c <HAL_ETH_MspInit+0x188>)
 8002cf8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d00:	61fb      	str	r3, [r7, #28]
 8002d02:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8002d04:	4b49      	ldr	r3, [pc, #292]	; (8002e2c <HAL_ETH_MspInit+0x188>)
 8002d06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002d0a:	4a48      	ldr	r2, [pc, #288]	; (8002e2c <HAL_ETH_MspInit+0x188>)
 8002d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d10:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002d14:	4b45      	ldr	r3, [pc, #276]	; (8002e2c <HAL_ETH_MspInit+0x188>)
 8002d16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1e:	61bb      	str	r3, [r7, #24]
 8002d20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d22:	4b42      	ldr	r3, [pc, #264]	; (8002e2c <HAL_ETH_MspInit+0x188>)
 8002d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d28:	4a40      	ldr	r2, [pc, #256]	; (8002e2c <HAL_ETH_MspInit+0x188>)
 8002d2a:	f043 0304 	orr.w	r3, r3, #4
 8002d2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d32:	4b3e      	ldr	r3, [pc, #248]	; (8002e2c <HAL_ETH_MspInit+0x188>)
 8002d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	617b      	str	r3, [r7, #20]
 8002d3e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d40:	4b3a      	ldr	r3, [pc, #232]	; (8002e2c <HAL_ETH_MspInit+0x188>)
 8002d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d46:	4a39      	ldr	r2, [pc, #228]	; (8002e2c <HAL_ETH_MspInit+0x188>)
 8002d48:	f043 0301 	orr.w	r3, r3, #1
 8002d4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d50:	4b36      	ldr	r3, [pc, #216]	; (8002e2c <HAL_ETH_MspInit+0x188>)
 8002d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	613b      	str	r3, [r7, #16]
 8002d5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d5e:	4b33      	ldr	r3, [pc, #204]	; (8002e2c <HAL_ETH_MspInit+0x188>)
 8002d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d64:	4a31      	ldr	r2, [pc, #196]	; (8002e2c <HAL_ETH_MspInit+0x188>)
 8002d66:	f043 0302 	orr.w	r3, r3, #2
 8002d6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d6e:	4b2f      	ldr	r3, [pc, #188]	; (8002e2c <HAL_ETH_MspInit+0x188>)
 8002d70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d7c:	4b2b      	ldr	r3, [pc, #172]	; (8002e2c <HAL_ETH_MspInit+0x188>)
 8002d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d82:	4a2a      	ldr	r2, [pc, #168]	; (8002e2c <HAL_ETH_MspInit+0x188>)
 8002d84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d8c:	4b27      	ldr	r3, [pc, #156]	; (8002e2c <HAL_ETH_MspInit+0x188>)
 8002d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d96:	60bb      	str	r3, [r7, #8]
 8002d98:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002d9a:	2332      	movs	r3, #50	; 0x32
 8002d9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da6:	2300      	movs	r3, #0
 8002da8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002daa:	230b      	movs	r3, #11
 8002dac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002db2:	4619      	mov	r1, r3
 8002db4:	481e      	ldr	r0, [pc, #120]	; (8002e30 <HAL_ETH_MspInit+0x18c>)
 8002db6:	f001 fd63 	bl	8004880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8002dba:	2386      	movs	r3, #134	; 0x86
 8002dbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002dca:	230b      	movs	r3, #11
 8002dcc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4817      	ldr	r0, [pc, #92]	; (8002e34 <HAL_ETH_MspInit+0x190>)
 8002dd6:	f001 fd53 	bl	8004880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002dda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de0:	2302      	movs	r3, #2
 8002de2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de4:	2300      	movs	r3, #0
 8002de6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de8:	2300      	movs	r3, #0
 8002dea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002dec:	230b      	movs	r3, #11
 8002dee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002df0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002df4:	4619      	mov	r1, r3
 8002df6:	4810      	ldr	r0, [pc, #64]	; (8002e38 <HAL_ETH_MspInit+0x194>)
 8002df8:	f001 fd42 	bl	8004880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8002dfc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002e00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e02:	2302      	movs	r3, #2
 8002e04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e06:	2300      	movs	r3, #0
 8002e08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002e0e:	230b      	movs	r3, #11
 8002e10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e16:	4619      	mov	r1, r3
 8002e18:	4808      	ldr	r0, [pc, #32]	; (8002e3c <HAL_ETH_MspInit+0x198>)
 8002e1a:	f001 fd31 	bl	8004880 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002e1e:	bf00      	nop
 8002e20:	3738      	adds	r7, #56	; 0x38
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40028000 	.word	0x40028000
 8002e2c:	58024400 	.word	0x58024400
 8002e30:	58020800 	.word	0x58020800
 8002e34:	58020000 	.word	0x58020000
 8002e38:	58020400 	.word	0x58020400
 8002e3c:	58021800 	.word	0x58021800

08002e40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b0b2      	sub	sp, #200	; 0xc8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e48:	f107 030c 	add.w	r3, r7, #12
 8002e4c:	22bc      	movs	r2, #188	; 0xbc
 8002e4e:	2100      	movs	r1, #0
 8002e50:	4618      	mov	r0, r3
 8002e52:	f005 ffb7 	bl	8008dc4 <memset>
  if(huart->Instance==USART3)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a3f      	ldr	r2, [pc, #252]	; (8002f58 <HAL_UART_MspInit+0x118>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d177      	bne.n	8002f50 <HAL_UART_MspInit+0x110>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002e60:	2302      	movs	r3, #2
 8002e62:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002e64:	2300      	movs	r3, #0
 8002e66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e6a:	f107 030c 	add.w	r3, r7, #12
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f003 f884 	bl	8005f7c <HAL_RCCEx_PeriphCLKConfig>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <HAL_UART_MspInit+0x3e>
    {
      Error_Handler();
 8002e7a:	f7ff fef3 	bl	8002c64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e7e:	4b37      	ldr	r3, [pc, #220]	; (8002f5c <HAL_UART_MspInit+0x11c>)
 8002e80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e84:	4a35      	ldr	r2, [pc, #212]	; (8002f5c <HAL_UART_MspInit+0x11c>)
 8002e86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e8a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e8e:	4b33      	ldr	r3, [pc, #204]	; (8002f5c <HAL_UART_MspInit+0x11c>)
 8002e90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e98:	60bb      	str	r3, [r7, #8]
 8002e9a:	68bb      	ldr	r3, [r7, #8]

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8002e9c:	4b30      	ldr	r3, [pc, #192]	; (8002f60 <HAL_UART_MspInit+0x120>)
 8002e9e:	4a31      	ldr	r2, [pc, #196]	; (8002f64 <HAL_UART_MspInit+0x124>)
 8002ea0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002ea2:	4b2f      	ldr	r3, [pc, #188]	; (8002f60 <HAL_UART_MspInit+0x120>)
 8002ea4:	222d      	movs	r2, #45	; 0x2d
 8002ea6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ea8:	4b2d      	ldr	r3, [pc, #180]	; (8002f60 <HAL_UART_MspInit+0x120>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002eae:	4b2c      	ldr	r3, [pc, #176]	; (8002f60 <HAL_UART_MspInit+0x120>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002eb4:	4b2a      	ldr	r3, [pc, #168]	; (8002f60 <HAL_UART_MspInit+0x120>)
 8002eb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002eba:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ebc:	4b28      	ldr	r3, [pc, #160]	; (8002f60 <HAL_UART_MspInit+0x120>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ec2:	4b27      	ldr	r3, [pc, #156]	; (8002f60 <HAL_UART_MspInit+0x120>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002ec8:	4b25      	ldr	r3, [pc, #148]	; (8002f60 <HAL_UART_MspInit+0x120>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ece:	4b24      	ldr	r3, [pc, #144]	; (8002f60 <HAL_UART_MspInit+0x120>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ed4:	4b22      	ldr	r3, [pc, #136]	; (8002f60 <HAL_UART_MspInit+0x120>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002eda:	4821      	ldr	r0, [pc, #132]	; (8002f60 <HAL_UART_MspInit+0x120>)
 8002edc:	f000 fb14 	bl	8003508 <HAL_DMA_Init>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <HAL_UART_MspInit+0xaa>
    {
      Error_Handler();
 8002ee6:	f7ff febd 	bl	8002c64 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a1c      	ldr	r2, [pc, #112]	; (8002f60 <HAL_UART_MspInit+0x120>)
 8002eee:	67da      	str	r2, [r3, #124]	; 0x7c
 8002ef0:	4a1b      	ldr	r2, [pc, #108]	; (8002f60 <HAL_UART_MspInit+0x120>)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8002ef6:	4b1c      	ldr	r3, [pc, #112]	; (8002f68 <HAL_UART_MspInit+0x128>)
 8002ef8:	4a1c      	ldr	r2, [pc, #112]	; (8002f6c <HAL_UART_MspInit+0x12c>)
 8002efa:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002efc:	4b1a      	ldr	r3, [pc, #104]	; (8002f68 <HAL_UART_MspInit+0x128>)
 8002efe:	222e      	movs	r2, #46	; 0x2e
 8002f00:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f02:	4b19      	ldr	r3, [pc, #100]	; (8002f68 <HAL_UART_MspInit+0x128>)
 8002f04:	2240      	movs	r2, #64	; 0x40
 8002f06:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f08:	4b17      	ldr	r3, [pc, #92]	; (8002f68 <HAL_UART_MspInit+0x128>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f0e:	4b16      	ldr	r3, [pc, #88]	; (8002f68 <HAL_UART_MspInit+0x128>)
 8002f10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f14:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f16:	4b14      	ldr	r3, [pc, #80]	; (8002f68 <HAL_UART_MspInit+0x128>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f1c:	4b12      	ldr	r3, [pc, #72]	; (8002f68 <HAL_UART_MspInit+0x128>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002f22:	4b11      	ldr	r3, [pc, #68]	; (8002f68 <HAL_UART_MspInit+0x128>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f28:	4b0f      	ldr	r3, [pc, #60]	; (8002f68 <HAL_UART_MspInit+0x128>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f2e:	4b0e      	ldr	r3, [pc, #56]	; (8002f68 <HAL_UART_MspInit+0x128>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002f34:	480c      	ldr	r0, [pc, #48]	; (8002f68 <HAL_UART_MspInit+0x128>)
 8002f36:	f000 fae7 	bl	8003508 <HAL_DMA_Init>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <HAL_UART_MspInit+0x104>
    {
      Error_Handler();
 8002f40:	f7ff fe90 	bl	8002c64 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a08      	ldr	r2, [pc, #32]	; (8002f68 <HAL_UART_MspInit+0x128>)
 8002f48:	679a      	str	r2, [r3, #120]	; 0x78
 8002f4a:	4a07      	ldr	r2, [pc, #28]	; (8002f68 <HAL_UART_MspInit+0x128>)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002f50:	bf00      	nop
 8002f52:	37c8      	adds	r7, #200	; 0xc8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40004800 	.word	0x40004800
 8002f5c:	58024400 	.word	0x58024400
 8002f60:	240004fc 	.word	0x240004fc
 8002f64:	40020010 	.word	0x40020010
 8002f68:	24000574 	.word	0x24000574
 8002f6c:	40020028 	.word	0x40020028

08002f70 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b0b8      	sub	sp, #224	; 0xe0
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f78:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	605a      	str	r2, [r3, #4]
 8002f82:	609a      	str	r2, [r3, #8]
 8002f84:	60da      	str	r2, [r3, #12]
 8002f86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f88:	f107 0310 	add.w	r3, r7, #16
 8002f8c:	22bc      	movs	r2, #188	; 0xbc
 8002f8e:	2100      	movs	r1, #0
 8002f90:	4618      	mov	r0, r3
 8002f92:	f005 ff17 	bl	8008dc4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a36      	ldr	r2, [pc, #216]	; (8003074 <HAL_PCD_MspInit+0x104>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d165      	bne.n	800306c <HAL_PCD_MspInit+0xfc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002fa0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002fa4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 8002faa:	2318      	movs	r3, #24
 8002fac:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002fae:	2302      	movs	r3, #2
 8002fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8002fb2:	2304      	movs	r3, #4
 8002fb4:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8002fba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002fbe:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8002fc4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002fc8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fcc:	f107 0310 	add.w	r3, r7, #16
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f002 ffd3 	bl	8005f7c <HAL_RCCEx_PeriphCLKConfig>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8002fdc:	f7ff fe42 	bl	8002c64 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002fe0:	f002 f802 	bl	8004fe8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fe4:	4b24      	ldr	r3, [pc, #144]	; (8003078 <HAL_PCD_MspInit+0x108>)
 8002fe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fea:	4a23      	ldr	r2, [pc, #140]	; (8003078 <HAL_PCD_MspInit+0x108>)
 8002fec:	f043 0301 	orr.w	r3, r3, #1
 8002ff0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ff4:	4b20      	ldr	r3, [pc, #128]	; (8003078 <HAL_PCD_MspInit+0x108>)
 8002ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8003002:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8003006:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800300a:	2302      	movs	r3, #2
 800300c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003010:	2300      	movs	r3, #0
 8003012:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003016:	2300      	movs	r3, #0
 8003018:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800301c:	230a      	movs	r3, #10
 800301e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003022:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003026:	4619      	mov	r1, r3
 8003028:	4814      	ldr	r0, [pc, #80]	; (800307c <HAL_PCD_MspInit+0x10c>)
 800302a:	f001 fc29 	bl	8004880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800302e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003032:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003036:	2300      	movs	r3, #0
 8003038:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303c:	2300      	movs	r3, #0
 800303e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003042:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003046:	4619      	mov	r1, r3
 8003048:	480c      	ldr	r0, [pc, #48]	; (800307c <HAL_PCD_MspInit+0x10c>)
 800304a:	f001 fc19 	bl	8004880 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800304e:	4b0a      	ldr	r3, [pc, #40]	; (8003078 <HAL_PCD_MspInit+0x108>)
 8003050:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003054:	4a08      	ldr	r2, [pc, #32]	; (8003078 <HAL_PCD_MspInit+0x108>)
 8003056:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800305a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800305e:	4b06      	ldr	r3, [pc, #24]	; (8003078 <HAL_PCD_MspInit+0x108>)
 8003060:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003064:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003068:	60bb      	str	r3, [r7, #8]
 800306a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800306c:	bf00      	nop
 800306e:	37e0      	adds	r7, #224	; 0xe0
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40080000 	.word	0x40080000
 8003078:	58024400 	.word	0x58024400
 800307c:	58020000 	.word	0x58020000

08003080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003084:	e7fe      	b.n	8003084 <NMI_Handler+0x4>

08003086 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003086:	b480      	push	{r7}
 8003088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800308a:	e7fe      	b.n	800308a <HardFault_Handler+0x4>

0800308c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003090:	e7fe      	b.n	8003090 <MemManage_Handler+0x4>

08003092 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003092:	b480      	push	{r7}
 8003094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003096:	e7fe      	b.n	8003096 <BusFault_Handler+0x4>

08003098 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800309c:	e7fe      	b.n	800309c <UsageFault_Handler+0x4>

0800309e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800309e:	b480      	push	{r7}
 80030a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030a2:	bf00      	nop
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030b0:	bf00      	nop
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030ba:	b480      	push	{r7}
 80030bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030be:	bf00      	nop
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030cc:	f000 f8d4 	bl	8003278 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030d0:	bf00      	nop
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030dc:	4a14      	ldr	r2, [pc, #80]	; (8003130 <_sbrk+0x5c>)
 80030de:	4b15      	ldr	r3, [pc, #84]	; (8003134 <_sbrk+0x60>)
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030e8:	4b13      	ldr	r3, [pc, #76]	; (8003138 <_sbrk+0x64>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d102      	bne.n	80030f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030f0:	4b11      	ldr	r3, [pc, #68]	; (8003138 <_sbrk+0x64>)
 80030f2:	4a12      	ldr	r2, [pc, #72]	; (800313c <_sbrk+0x68>)
 80030f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030f6:	4b10      	ldr	r3, [pc, #64]	; (8003138 <_sbrk+0x64>)
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4413      	add	r3, r2
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	429a      	cmp	r2, r3
 8003102:	d207      	bcs.n	8003114 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003104:	f005 fe24 	bl	8008d50 <__errno>
 8003108:	4603      	mov	r3, r0
 800310a:	220c      	movs	r2, #12
 800310c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800310e:	f04f 33ff 	mov.w	r3, #4294967295
 8003112:	e009      	b.n	8003128 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003114:	4b08      	ldr	r3, [pc, #32]	; (8003138 <_sbrk+0x64>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800311a:	4b07      	ldr	r3, [pc, #28]	; (8003138 <_sbrk+0x64>)
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4413      	add	r3, r2
 8003122:	4a05      	ldr	r2, [pc, #20]	; (8003138 <_sbrk+0x64>)
 8003124:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003126:	68fb      	ldr	r3, [r7, #12]
}
 8003128:	4618      	mov	r0, r3
 800312a:	3718      	adds	r7, #24
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	24080000 	.word	0x24080000
 8003134:	00000400 	.word	0x00000400
 8003138:	24000ba8 	.word	0x24000ba8
 800313c:	24000bc0 	.word	0x24000bc0

08003140 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003140:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003178 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003144:	f7fd fa9e 	bl	8000684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003148:	480c      	ldr	r0, [pc, #48]	; (800317c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800314a:	490d      	ldr	r1, [pc, #52]	; (8003180 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800314c:	4a0d      	ldr	r2, [pc, #52]	; (8003184 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800314e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003150:	e002      	b.n	8003158 <LoopCopyDataInit>

08003152 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003152:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003154:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003156:	3304      	adds	r3, #4

08003158 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003158:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800315a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800315c:	d3f9      	bcc.n	8003152 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800315e:	4a0a      	ldr	r2, [pc, #40]	; (8003188 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003160:	4c0a      	ldr	r4, [pc, #40]	; (800318c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003162:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003164:	e001      	b.n	800316a <LoopFillZerobss>

08003166 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003166:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003168:	3204      	adds	r2, #4

0800316a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800316a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800316c:	d3fb      	bcc.n	8003166 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800316e:	f005 fdf5 	bl	8008d5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003172:	f7fe ff05 	bl	8001f80 <main>
  bx  lr
 8003176:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003178:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800317c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003180:	240002a0 	.word	0x240002a0
  ldr r2, =_sidata
 8003184:	080499c8 	.word	0x080499c8
  ldr r2, =_sbss
 8003188:	24000360 	.word	0x24000360
  ldr r4, =_ebss
 800318c:	24000bc0 	.word	0x24000bc0

08003190 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003190:	e7fe      	b.n	8003190 <ADC3_IRQHandler>
	...

08003194 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800319a:	2003      	movs	r0, #3
 800319c:	f000 f982 	bl	80034a4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80031a0:	f002 fd16 	bl	8005bd0 <HAL_RCC_GetSysClockFreq>
 80031a4:	4602      	mov	r2, r0
 80031a6:	4b15      	ldr	r3, [pc, #84]	; (80031fc <HAL_Init+0x68>)
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	0a1b      	lsrs	r3, r3, #8
 80031ac:	f003 030f 	and.w	r3, r3, #15
 80031b0:	4913      	ldr	r1, [pc, #76]	; (8003200 <HAL_Init+0x6c>)
 80031b2:	5ccb      	ldrb	r3, [r1, r3]
 80031b4:	f003 031f 	and.w	r3, r3, #31
 80031b8:	fa22 f303 	lsr.w	r3, r2, r3
 80031bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031be:	4b0f      	ldr	r3, [pc, #60]	; (80031fc <HAL_Init+0x68>)
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	4a0e      	ldr	r2, [pc, #56]	; (8003200 <HAL_Init+0x6c>)
 80031c8:	5cd3      	ldrb	r3, [r2, r3]
 80031ca:	f003 031f 	and.w	r3, r3, #31
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	fa22 f303 	lsr.w	r3, r2, r3
 80031d4:	4a0b      	ldr	r2, [pc, #44]	; (8003204 <HAL_Init+0x70>)
 80031d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80031d8:	4a0b      	ldr	r2, [pc, #44]	; (8003208 <HAL_Init+0x74>)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80031de:	2000      	movs	r0, #0
 80031e0:	f000 f814 	bl	800320c <HAL_InitTick>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e002      	b.n	80031f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80031ee:	f7ff fd3f 	bl	8002c70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3708      	adds	r7, #8
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	58024400 	.word	0x58024400
 8003200:	080098d0 	.word	0x080098d0
 8003204:	24000004 	.word	0x24000004
 8003208:	24000000 	.word	0x24000000

0800320c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003214:	4b15      	ldr	r3, [pc, #84]	; (800326c <HAL_InitTick+0x60>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e021      	b.n	8003264 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003220:	4b13      	ldr	r3, [pc, #76]	; (8003270 <HAL_InitTick+0x64>)
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	4b11      	ldr	r3, [pc, #68]	; (800326c <HAL_InitTick+0x60>)
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	4619      	mov	r1, r3
 800322a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800322e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003232:	fbb2 f3f3 	udiv	r3, r2, r3
 8003236:	4618      	mov	r0, r3
 8003238:	f000 f959 	bl	80034ee <HAL_SYSTICK_Config>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e00e      	b.n	8003264 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2b0f      	cmp	r3, #15
 800324a:	d80a      	bhi.n	8003262 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800324c:	2200      	movs	r2, #0
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	f04f 30ff 	mov.w	r0, #4294967295
 8003254:	f000 f931 	bl	80034ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003258:	4a06      	ldr	r2, [pc, #24]	; (8003274 <HAL_InitTick+0x68>)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800325e:	2300      	movs	r3, #0
 8003260:	e000      	b.n	8003264 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
}
 8003264:	4618      	mov	r0, r3
 8003266:	3708      	adds	r7, #8
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	24000238 	.word	0x24000238
 8003270:	24000000 	.word	0x24000000
 8003274:	24000234 	.word	0x24000234

08003278 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800327c:	4b06      	ldr	r3, [pc, #24]	; (8003298 <HAL_IncTick+0x20>)
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	461a      	mov	r2, r3
 8003282:	4b06      	ldr	r3, [pc, #24]	; (800329c <HAL_IncTick+0x24>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4413      	add	r3, r2
 8003288:	4a04      	ldr	r2, [pc, #16]	; (800329c <HAL_IncTick+0x24>)
 800328a:	6013      	str	r3, [r2, #0]
}
 800328c:	bf00      	nop
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	24000238 	.word	0x24000238
 800329c:	24000bac 	.word	0x24000bac

080032a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
  return uwTick;
 80032a4:	4b03      	ldr	r3, [pc, #12]	; (80032b4 <HAL_GetTick+0x14>)
 80032a6:	681b      	ldr	r3, [r3, #0]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	24000bac 	.word	0x24000bac

080032b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032c0:	f7ff ffee 	bl	80032a0 <HAL_GetTick>
 80032c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d0:	d005      	beq.n	80032de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032d2:	4b0a      	ldr	r3, [pc, #40]	; (80032fc <HAL_Delay+0x44>)
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	461a      	mov	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4413      	add	r3, r2
 80032dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032de:	bf00      	nop
 80032e0:	f7ff ffde 	bl	80032a0 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d8f7      	bhi.n	80032e0 <HAL_Delay+0x28>
  {
  }
}
 80032f0:	bf00      	nop
 80032f2:	bf00      	nop
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	24000238 	.word	0x24000238

08003300 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003304:	4b03      	ldr	r3, [pc, #12]	; (8003314 <HAL_GetREVID+0x14>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	0c1b      	lsrs	r3, r3, #16
}
 800330a:	4618      	mov	r0, r3
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	5c001000 	.word	0x5c001000

08003318 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8003320:	4b06      	ldr	r3, [pc, #24]	; (800333c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003328:	4904      	ldr	r1, [pc, #16]	; (800333c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4313      	orrs	r3, r2
 800332e:	604b      	str	r3, [r1, #4]
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	58000400 	.word	0x58000400

08003340 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003350:	4b0b      	ldr	r3, [pc, #44]	; (8003380 <__NVIC_SetPriorityGrouping+0x40>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800335c:	4013      	ands	r3, r2
 800335e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003368:	4b06      	ldr	r3, [pc, #24]	; (8003384 <__NVIC_SetPriorityGrouping+0x44>)
 800336a:	4313      	orrs	r3, r2
 800336c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800336e:	4a04      	ldr	r2, [pc, #16]	; (8003380 <__NVIC_SetPriorityGrouping+0x40>)
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	60d3      	str	r3, [r2, #12]
}
 8003374:	bf00      	nop
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	e000ed00 	.word	0xe000ed00
 8003384:	05fa0000 	.word	0x05fa0000

08003388 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800338c:	4b04      	ldr	r3, [pc, #16]	; (80033a0 <__NVIC_GetPriorityGrouping+0x18>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	0a1b      	lsrs	r3, r3, #8
 8003392:	f003 0307 	and.w	r3, r3, #7
}
 8003396:	4618      	mov	r0, r3
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr
 80033a0:	e000ed00 	.word	0xe000ed00

080033a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	4603      	mov	r3, r0
 80033ac:	6039      	str	r1, [r7, #0]
 80033ae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80033b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	db0a      	blt.n	80033ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	b2da      	uxtb	r2, r3
 80033bc:	490c      	ldr	r1, [pc, #48]	; (80033f0 <__NVIC_SetPriority+0x4c>)
 80033be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033c2:	0112      	lsls	r2, r2, #4
 80033c4:	b2d2      	uxtb	r2, r2
 80033c6:	440b      	add	r3, r1
 80033c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033cc:	e00a      	b.n	80033e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	4908      	ldr	r1, [pc, #32]	; (80033f4 <__NVIC_SetPriority+0x50>)
 80033d4:	88fb      	ldrh	r3, [r7, #6]
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	3b04      	subs	r3, #4
 80033dc:	0112      	lsls	r2, r2, #4
 80033de:	b2d2      	uxtb	r2, r2
 80033e0:	440b      	add	r3, r1
 80033e2:	761a      	strb	r2, [r3, #24]
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr
 80033f0:	e000e100 	.word	0xe000e100
 80033f4:	e000ed00 	.word	0xe000ed00

080033f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b089      	sub	sp, #36	; 0x24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f003 0307 	and.w	r3, r3, #7
 800340a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	f1c3 0307 	rsb	r3, r3, #7
 8003412:	2b04      	cmp	r3, #4
 8003414:	bf28      	it	cs
 8003416:	2304      	movcs	r3, #4
 8003418:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	3304      	adds	r3, #4
 800341e:	2b06      	cmp	r3, #6
 8003420:	d902      	bls.n	8003428 <NVIC_EncodePriority+0x30>
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	3b03      	subs	r3, #3
 8003426:	e000      	b.n	800342a <NVIC_EncodePriority+0x32>
 8003428:	2300      	movs	r3, #0
 800342a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800342c:	f04f 32ff 	mov.w	r2, #4294967295
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	fa02 f303 	lsl.w	r3, r2, r3
 8003436:	43da      	mvns	r2, r3
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	401a      	ands	r2, r3
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003440:	f04f 31ff 	mov.w	r1, #4294967295
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	fa01 f303 	lsl.w	r3, r1, r3
 800344a:	43d9      	mvns	r1, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003450:	4313      	orrs	r3, r2
         );
}
 8003452:	4618      	mov	r0, r3
 8003454:	3724      	adds	r7, #36	; 0x24
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
	...

08003460 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3b01      	subs	r3, #1
 800346c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003470:	d301      	bcc.n	8003476 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003472:	2301      	movs	r3, #1
 8003474:	e00f      	b.n	8003496 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003476:	4a0a      	ldr	r2, [pc, #40]	; (80034a0 <SysTick_Config+0x40>)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	3b01      	subs	r3, #1
 800347c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800347e:	210f      	movs	r1, #15
 8003480:	f04f 30ff 	mov.w	r0, #4294967295
 8003484:	f7ff ff8e 	bl	80033a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003488:	4b05      	ldr	r3, [pc, #20]	; (80034a0 <SysTick_Config+0x40>)
 800348a:	2200      	movs	r2, #0
 800348c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800348e:	4b04      	ldr	r3, [pc, #16]	; (80034a0 <SysTick_Config+0x40>)
 8003490:	2207      	movs	r2, #7
 8003492:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	e000e010 	.word	0xe000e010

080034a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f7ff ff47 	bl	8003340 <__NVIC_SetPriorityGrouping>
}
 80034b2:	bf00      	nop
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b086      	sub	sp, #24
 80034be:	af00      	add	r7, sp, #0
 80034c0:	4603      	mov	r3, r0
 80034c2:	60b9      	str	r1, [r7, #8]
 80034c4:	607a      	str	r2, [r7, #4]
 80034c6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034c8:	f7ff ff5e 	bl	8003388 <__NVIC_GetPriorityGrouping>
 80034cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	68b9      	ldr	r1, [r7, #8]
 80034d2:	6978      	ldr	r0, [r7, #20]
 80034d4:	f7ff ff90 	bl	80033f8 <NVIC_EncodePriority>
 80034d8:	4602      	mov	r2, r0
 80034da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80034de:	4611      	mov	r1, r2
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff ff5f 	bl	80033a4 <__NVIC_SetPriority>
}
 80034e6:	bf00      	nop
 80034e8:	3718      	adds	r7, #24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b082      	sub	sp, #8
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7ff ffb2 	bl	8003460 <SysTick_Config>
 80034fc:	4603      	mov	r3, r0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
	...

08003508 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003510:	f7ff fec6 	bl	80032a0 <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d101      	bne.n	8003520 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e316      	b.n	8003b4e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a66      	ldr	r2, [pc, #408]	; (80036c0 <HAL_DMA_Init+0x1b8>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d04a      	beq.n	80035c0 <HAL_DMA_Init+0xb8>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a65      	ldr	r2, [pc, #404]	; (80036c4 <HAL_DMA_Init+0x1bc>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d045      	beq.n	80035c0 <HAL_DMA_Init+0xb8>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a63      	ldr	r2, [pc, #396]	; (80036c8 <HAL_DMA_Init+0x1c0>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d040      	beq.n	80035c0 <HAL_DMA_Init+0xb8>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a62      	ldr	r2, [pc, #392]	; (80036cc <HAL_DMA_Init+0x1c4>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d03b      	beq.n	80035c0 <HAL_DMA_Init+0xb8>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a60      	ldr	r2, [pc, #384]	; (80036d0 <HAL_DMA_Init+0x1c8>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d036      	beq.n	80035c0 <HAL_DMA_Init+0xb8>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a5f      	ldr	r2, [pc, #380]	; (80036d4 <HAL_DMA_Init+0x1cc>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d031      	beq.n	80035c0 <HAL_DMA_Init+0xb8>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a5d      	ldr	r2, [pc, #372]	; (80036d8 <HAL_DMA_Init+0x1d0>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d02c      	beq.n	80035c0 <HAL_DMA_Init+0xb8>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a5c      	ldr	r2, [pc, #368]	; (80036dc <HAL_DMA_Init+0x1d4>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d027      	beq.n	80035c0 <HAL_DMA_Init+0xb8>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a5a      	ldr	r2, [pc, #360]	; (80036e0 <HAL_DMA_Init+0x1d8>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d022      	beq.n	80035c0 <HAL_DMA_Init+0xb8>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a59      	ldr	r2, [pc, #356]	; (80036e4 <HAL_DMA_Init+0x1dc>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d01d      	beq.n	80035c0 <HAL_DMA_Init+0xb8>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a57      	ldr	r2, [pc, #348]	; (80036e8 <HAL_DMA_Init+0x1e0>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d018      	beq.n	80035c0 <HAL_DMA_Init+0xb8>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a56      	ldr	r2, [pc, #344]	; (80036ec <HAL_DMA_Init+0x1e4>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d013      	beq.n	80035c0 <HAL_DMA_Init+0xb8>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a54      	ldr	r2, [pc, #336]	; (80036f0 <HAL_DMA_Init+0x1e8>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d00e      	beq.n	80035c0 <HAL_DMA_Init+0xb8>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a53      	ldr	r2, [pc, #332]	; (80036f4 <HAL_DMA_Init+0x1ec>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d009      	beq.n	80035c0 <HAL_DMA_Init+0xb8>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a51      	ldr	r2, [pc, #324]	; (80036f8 <HAL_DMA_Init+0x1f0>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d004      	beq.n	80035c0 <HAL_DMA_Init+0xb8>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a50      	ldr	r2, [pc, #320]	; (80036fc <HAL_DMA_Init+0x1f4>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d101      	bne.n	80035c4 <HAL_DMA_Init+0xbc>
 80035c0:	2301      	movs	r3, #1
 80035c2:	e000      	b.n	80035c6 <HAL_DMA_Init+0xbe>
 80035c4:	2300      	movs	r3, #0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f000 813b 	beq.w	8003842 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2202      	movs	r2, #2
 80035d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a37      	ldr	r2, [pc, #220]	; (80036c0 <HAL_DMA_Init+0x1b8>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d04a      	beq.n	800367c <HAL_DMA_Init+0x174>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a36      	ldr	r2, [pc, #216]	; (80036c4 <HAL_DMA_Init+0x1bc>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d045      	beq.n	800367c <HAL_DMA_Init+0x174>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a34      	ldr	r2, [pc, #208]	; (80036c8 <HAL_DMA_Init+0x1c0>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d040      	beq.n	800367c <HAL_DMA_Init+0x174>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a33      	ldr	r2, [pc, #204]	; (80036cc <HAL_DMA_Init+0x1c4>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d03b      	beq.n	800367c <HAL_DMA_Init+0x174>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a31      	ldr	r2, [pc, #196]	; (80036d0 <HAL_DMA_Init+0x1c8>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d036      	beq.n	800367c <HAL_DMA_Init+0x174>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a30      	ldr	r2, [pc, #192]	; (80036d4 <HAL_DMA_Init+0x1cc>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d031      	beq.n	800367c <HAL_DMA_Init+0x174>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a2e      	ldr	r2, [pc, #184]	; (80036d8 <HAL_DMA_Init+0x1d0>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d02c      	beq.n	800367c <HAL_DMA_Init+0x174>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a2d      	ldr	r2, [pc, #180]	; (80036dc <HAL_DMA_Init+0x1d4>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d027      	beq.n	800367c <HAL_DMA_Init+0x174>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a2b      	ldr	r2, [pc, #172]	; (80036e0 <HAL_DMA_Init+0x1d8>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d022      	beq.n	800367c <HAL_DMA_Init+0x174>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a2a      	ldr	r2, [pc, #168]	; (80036e4 <HAL_DMA_Init+0x1dc>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d01d      	beq.n	800367c <HAL_DMA_Init+0x174>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a28      	ldr	r2, [pc, #160]	; (80036e8 <HAL_DMA_Init+0x1e0>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d018      	beq.n	800367c <HAL_DMA_Init+0x174>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a27      	ldr	r2, [pc, #156]	; (80036ec <HAL_DMA_Init+0x1e4>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d013      	beq.n	800367c <HAL_DMA_Init+0x174>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a25      	ldr	r2, [pc, #148]	; (80036f0 <HAL_DMA_Init+0x1e8>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d00e      	beq.n	800367c <HAL_DMA_Init+0x174>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a24      	ldr	r2, [pc, #144]	; (80036f4 <HAL_DMA_Init+0x1ec>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d009      	beq.n	800367c <HAL_DMA_Init+0x174>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a22      	ldr	r2, [pc, #136]	; (80036f8 <HAL_DMA_Init+0x1f0>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d004      	beq.n	800367c <HAL_DMA_Init+0x174>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a21      	ldr	r2, [pc, #132]	; (80036fc <HAL_DMA_Init+0x1f4>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d108      	bne.n	800368e <HAL_DMA_Init+0x186>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 0201 	bic.w	r2, r2, #1
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	e007      	b.n	800369e <HAL_DMA_Init+0x196>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 0201 	bic.w	r2, r2, #1
 800369c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800369e:	e02f      	b.n	8003700 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036a0:	f7ff fdfe 	bl	80032a0 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b05      	cmp	r3, #5
 80036ac:	d928      	bls.n	8003700 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2220      	movs	r2, #32
 80036b2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2203      	movs	r2, #3
 80036b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e246      	b.n	8003b4e <HAL_DMA_Init+0x646>
 80036c0:	40020010 	.word	0x40020010
 80036c4:	40020028 	.word	0x40020028
 80036c8:	40020040 	.word	0x40020040
 80036cc:	40020058 	.word	0x40020058
 80036d0:	40020070 	.word	0x40020070
 80036d4:	40020088 	.word	0x40020088
 80036d8:	400200a0 	.word	0x400200a0
 80036dc:	400200b8 	.word	0x400200b8
 80036e0:	40020410 	.word	0x40020410
 80036e4:	40020428 	.word	0x40020428
 80036e8:	40020440 	.word	0x40020440
 80036ec:	40020458 	.word	0x40020458
 80036f0:	40020470 	.word	0x40020470
 80036f4:	40020488 	.word	0x40020488
 80036f8:	400204a0 	.word	0x400204a0
 80036fc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1c8      	bne.n	80036a0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	4b83      	ldr	r3, [pc, #524]	; (8003928 <HAL_DMA_Init+0x420>)
 800371a:	4013      	ands	r3, r2
 800371c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003726:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003732:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800373e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	4313      	orrs	r3, r2
 800374a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	2b04      	cmp	r3, #4
 8003752:	d107      	bne.n	8003764 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375c:	4313      	orrs	r3, r2
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	4313      	orrs	r3, r2
 8003762:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003764:	4b71      	ldr	r3, [pc, #452]	; (800392c <HAL_DMA_Init+0x424>)
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	4b71      	ldr	r3, [pc, #452]	; (8003930 <HAL_DMA_Init+0x428>)
 800376a:	4013      	ands	r3, r2
 800376c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003770:	d328      	bcc.n	80037c4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	2b28      	cmp	r3, #40	; 0x28
 8003778:	d903      	bls.n	8003782 <HAL_DMA_Init+0x27a>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2b2e      	cmp	r3, #46	; 0x2e
 8003780:	d917      	bls.n	80037b2 <HAL_DMA_Init+0x2aa>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	2b3e      	cmp	r3, #62	; 0x3e
 8003788:	d903      	bls.n	8003792 <HAL_DMA_Init+0x28a>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	2b42      	cmp	r3, #66	; 0x42
 8003790:	d90f      	bls.n	80037b2 <HAL_DMA_Init+0x2aa>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2b46      	cmp	r3, #70	; 0x46
 8003798:	d903      	bls.n	80037a2 <HAL_DMA_Init+0x29a>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b48      	cmp	r3, #72	; 0x48
 80037a0:	d907      	bls.n	80037b2 <HAL_DMA_Init+0x2aa>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2b4e      	cmp	r3, #78	; 0x4e
 80037a8:	d905      	bls.n	80037b6 <HAL_DMA_Init+0x2ae>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	2b52      	cmp	r3, #82	; 0x52
 80037b0:	d801      	bhi.n	80037b6 <HAL_DMA_Init+0x2ae>
 80037b2:	2301      	movs	r3, #1
 80037b4:	e000      	b.n	80037b8 <HAL_DMA_Init+0x2b0>
 80037b6:	2300      	movs	r3, #0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037c2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	f023 0307 	bic.w	r3, r3, #7
 80037da:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ea:	2b04      	cmp	r3, #4
 80037ec:	d117      	bne.n	800381e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00e      	beq.n	800381e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 fa8f 	bl	8003d24 <DMA_CheckFifoParam>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d008      	beq.n	800381e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2240      	movs	r2, #64	; 0x40
 8003810:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e197      	b.n	8003b4e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f9ca 	bl	8003bc0 <DMA_CalcBaseAndBitshift>
 800382c:	4603      	mov	r3, r0
 800382e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003834:	f003 031f 	and.w	r3, r3, #31
 8003838:	223f      	movs	r2, #63	; 0x3f
 800383a:	409a      	lsls	r2, r3
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	609a      	str	r2, [r3, #8]
 8003840:	e0cd      	b.n	80039de <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a3b      	ldr	r2, [pc, #236]	; (8003934 <HAL_DMA_Init+0x42c>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d022      	beq.n	8003892 <HAL_DMA_Init+0x38a>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a39      	ldr	r2, [pc, #228]	; (8003938 <HAL_DMA_Init+0x430>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d01d      	beq.n	8003892 <HAL_DMA_Init+0x38a>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a38      	ldr	r2, [pc, #224]	; (800393c <HAL_DMA_Init+0x434>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d018      	beq.n	8003892 <HAL_DMA_Init+0x38a>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a36      	ldr	r2, [pc, #216]	; (8003940 <HAL_DMA_Init+0x438>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d013      	beq.n	8003892 <HAL_DMA_Init+0x38a>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a35      	ldr	r2, [pc, #212]	; (8003944 <HAL_DMA_Init+0x43c>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d00e      	beq.n	8003892 <HAL_DMA_Init+0x38a>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a33      	ldr	r2, [pc, #204]	; (8003948 <HAL_DMA_Init+0x440>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d009      	beq.n	8003892 <HAL_DMA_Init+0x38a>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a32      	ldr	r2, [pc, #200]	; (800394c <HAL_DMA_Init+0x444>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d004      	beq.n	8003892 <HAL_DMA_Init+0x38a>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a30      	ldr	r2, [pc, #192]	; (8003950 <HAL_DMA_Init+0x448>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d101      	bne.n	8003896 <HAL_DMA_Init+0x38e>
 8003892:	2301      	movs	r3, #1
 8003894:	e000      	b.n	8003898 <HAL_DMA_Init+0x390>
 8003896:	2300      	movs	r3, #0
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 8097 	beq.w	80039cc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a24      	ldr	r2, [pc, #144]	; (8003934 <HAL_DMA_Init+0x42c>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d021      	beq.n	80038ec <HAL_DMA_Init+0x3e4>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a22      	ldr	r2, [pc, #136]	; (8003938 <HAL_DMA_Init+0x430>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d01c      	beq.n	80038ec <HAL_DMA_Init+0x3e4>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a21      	ldr	r2, [pc, #132]	; (800393c <HAL_DMA_Init+0x434>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d017      	beq.n	80038ec <HAL_DMA_Init+0x3e4>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a1f      	ldr	r2, [pc, #124]	; (8003940 <HAL_DMA_Init+0x438>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d012      	beq.n	80038ec <HAL_DMA_Init+0x3e4>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a1e      	ldr	r2, [pc, #120]	; (8003944 <HAL_DMA_Init+0x43c>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d00d      	beq.n	80038ec <HAL_DMA_Init+0x3e4>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a1c      	ldr	r2, [pc, #112]	; (8003948 <HAL_DMA_Init+0x440>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d008      	beq.n	80038ec <HAL_DMA_Init+0x3e4>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a1b      	ldr	r2, [pc, #108]	; (800394c <HAL_DMA_Init+0x444>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d003      	beq.n	80038ec <HAL_DMA_Init+0x3e4>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a19      	ldr	r2, [pc, #100]	; (8003950 <HAL_DMA_Init+0x448>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2202      	movs	r2, #2
 80038f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	4b12      	ldr	r3, [pc, #72]	; (8003954 <HAL_DMA_Init+0x44c>)
 800390a:	4013      	ands	r3, r2
 800390c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	2b40      	cmp	r3, #64	; 0x40
 8003914:	d020      	beq.n	8003958 <HAL_DMA_Init+0x450>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	2b80      	cmp	r3, #128	; 0x80
 800391c:	d102      	bne.n	8003924 <HAL_DMA_Init+0x41c>
 800391e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003922:	e01a      	b.n	800395a <HAL_DMA_Init+0x452>
 8003924:	2300      	movs	r3, #0
 8003926:	e018      	b.n	800395a <HAL_DMA_Init+0x452>
 8003928:	fe10803f 	.word	0xfe10803f
 800392c:	5c001000 	.word	0x5c001000
 8003930:	ffff0000 	.word	0xffff0000
 8003934:	58025408 	.word	0x58025408
 8003938:	5802541c 	.word	0x5802541c
 800393c:	58025430 	.word	0x58025430
 8003940:	58025444 	.word	0x58025444
 8003944:	58025458 	.word	0x58025458
 8003948:	5802546c 	.word	0x5802546c
 800394c:	58025480 	.word	0x58025480
 8003950:	58025494 	.word	0x58025494
 8003954:	fffe000f 	.word	0xfffe000f
 8003958:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	68d2      	ldr	r2, [r2, #12]
 800395e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003960:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003968:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003970:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003978:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003980:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003988:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	4313      	orrs	r3, r2
 800398e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	461a      	mov	r2, r3
 800399e:	4b6e      	ldr	r3, [pc, #440]	; (8003b58 <HAL_DMA_Init+0x650>)
 80039a0:	4413      	add	r3, r2
 80039a2:	4a6e      	ldr	r2, [pc, #440]	; (8003b5c <HAL_DMA_Init+0x654>)
 80039a4:	fba2 2303 	umull	r2, r3, r2, r3
 80039a8:	091b      	lsrs	r3, r3, #4
 80039aa:	009a      	lsls	r2, r3, #2
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 f905 	bl	8003bc0 <DMA_CalcBaseAndBitshift>
 80039b6:	4603      	mov	r3, r0
 80039b8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039be:	f003 031f 	and.w	r3, r3, #31
 80039c2:	2201      	movs	r2, #1
 80039c4:	409a      	lsls	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	605a      	str	r2, [r3, #4]
 80039ca:	e008      	b.n	80039de <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2240      	movs	r2, #64	; 0x40
 80039d0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2203      	movs	r2, #3
 80039d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e0b7      	b.n	8003b4e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a5f      	ldr	r2, [pc, #380]	; (8003b60 <HAL_DMA_Init+0x658>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d072      	beq.n	8003ace <HAL_DMA_Init+0x5c6>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a5d      	ldr	r2, [pc, #372]	; (8003b64 <HAL_DMA_Init+0x65c>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d06d      	beq.n	8003ace <HAL_DMA_Init+0x5c6>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a5c      	ldr	r2, [pc, #368]	; (8003b68 <HAL_DMA_Init+0x660>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d068      	beq.n	8003ace <HAL_DMA_Init+0x5c6>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a5a      	ldr	r2, [pc, #360]	; (8003b6c <HAL_DMA_Init+0x664>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d063      	beq.n	8003ace <HAL_DMA_Init+0x5c6>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a59      	ldr	r2, [pc, #356]	; (8003b70 <HAL_DMA_Init+0x668>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d05e      	beq.n	8003ace <HAL_DMA_Init+0x5c6>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a57      	ldr	r2, [pc, #348]	; (8003b74 <HAL_DMA_Init+0x66c>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d059      	beq.n	8003ace <HAL_DMA_Init+0x5c6>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a56      	ldr	r2, [pc, #344]	; (8003b78 <HAL_DMA_Init+0x670>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d054      	beq.n	8003ace <HAL_DMA_Init+0x5c6>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a54      	ldr	r2, [pc, #336]	; (8003b7c <HAL_DMA_Init+0x674>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d04f      	beq.n	8003ace <HAL_DMA_Init+0x5c6>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a53      	ldr	r2, [pc, #332]	; (8003b80 <HAL_DMA_Init+0x678>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d04a      	beq.n	8003ace <HAL_DMA_Init+0x5c6>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a51      	ldr	r2, [pc, #324]	; (8003b84 <HAL_DMA_Init+0x67c>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d045      	beq.n	8003ace <HAL_DMA_Init+0x5c6>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a50      	ldr	r2, [pc, #320]	; (8003b88 <HAL_DMA_Init+0x680>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d040      	beq.n	8003ace <HAL_DMA_Init+0x5c6>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a4e      	ldr	r2, [pc, #312]	; (8003b8c <HAL_DMA_Init+0x684>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d03b      	beq.n	8003ace <HAL_DMA_Init+0x5c6>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a4d      	ldr	r2, [pc, #308]	; (8003b90 <HAL_DMA_Init+0x688>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d036      	beq.n	8003ace <HAL_DMA_Init+0x5c6>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a4b      	ldr	r2, [pc, #300]	; (8003b94 <HAL_DMA_Init+0x68c>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d031      	beq.n	8003ace <HAL_DMA_Init+0x5c6>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a4a      	ldr	r2, [pc, #296]	; (8003b98 <HAL_DMA_Init+0x690>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d02c      	beq.n	8003ace <HAL_DMA_Init+0x5c6>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a48      	ldr	r2, [pc, #288]	; (8003b9c <HAL_DMA_Init+0x694>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d027      	beq.n	8003ace <HAL_DMA_Init+0x5c6>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a47      	ldr	r2, [pc, #284]	; (8003ba0 <HAL_DMA_Init+0x698>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d022      	beq.n	8003ace <HAL_DMA_Init+0x5c6>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a45      	ldr	r2, [pc, #276]	; (8003ba4 <HAL_DMA_Init+0x69c>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d01d      	beq.n	8003ace <HAL_DMA_Init+0x5c6>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a44      	ldr	r2, [pc, #272]	; (8003ba8 <HAL_DMA_Init+0x6a0>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d018      	beq.n	8003ace <HAL_DMA_Init+0x5c6>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a42      	ldr	r2, [pc, #264]	; (8003bac <HAL_DMA_Init+0x6a4>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d013      	beq.n	8003ace <HAL_DMA_Init+0x5c6>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a41      	ldr	r2, [pc, #260]	; (8003bb0 <HAL_DMA_Init+0x6a8>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d00e      	beq.n	8003ace <HAL_DMA_Init+0x5c6>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a3f      	ldr	r2, [pc, #252]	; (8003bb4 <HAL_DMA_Init+0x6ac>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d009      	beq.n	8003ace <HAL_DMA_Init+0x5c6>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a3e      	ldr	r2, [pc, #248]	; (8003bb8 <HAL_DMA_Init+0x6b0>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d004      	beq.n	8003ace <HAL_DMA_Init+0x5c6>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a3c      	ldr	r2, [pc, #240]	; (8003bbc <HAL_DMA_Init+0x6b4>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d101      	bne.n	8003ad2 <HAL_DMA_Init+0x5ca>
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e000      	b.n	8003ad4 <HAL_DMA_Init+0x5cc>
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d032      	beq.n	8003b3e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 f99f 	bl	8003e1c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	2b80      	cmp	r3, #128	; 0x80
 8003ae4:	d102      	bne.n	8003aec <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003af4:	b2d2      	uxtb	r2, r2
 8003af6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003b00:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d010      	beq.n	8003b2c <HAL_DMA_Init+0x624>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	2b08      	cmp	r3, #8
 8003b10:	d80c      	bhi.n	8003b2c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 fa1c 	bl	8003f50 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003b28:	605a      	str	r2, [r3, #4]
 8003b2a:	e008      	b.n	8003b3e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3718      	adds	r7, #24
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	a7fdabf8 	.word	0xa7fdabf8
 8003b5c:	cccccccd 	.word	0xcccccccd
 8003b60:	40020010 	.word	0x40020010
 8003b64:	40020028 	.word	0x40020028
 8003b68:	40020040 	.word	0x40020040
 8003b6c:	40020058 	.word	0x40020058
 8003b70:	40020070 	.word	0x40020070
 8003b74:	40020088 	.word	0x40020088
 8003b78:	400200a0 	.word	0x400200a0
 8003b7c:	400200b8 	.word	0x400200b8
 8003b80:	40020410 	.word	0x40020410
 8003b84:	40020428 	.word	0x40020428
 8003b88:	40020440 	.word	0x40020440
 8003b8c:	40020458 	.word	0x40020458
 8003b90:	40020470 	.word	0x40020470
 8003b94:	40020488 	.word	0x40020488
 8003b98:	400204a0 	.word	0x400204a0
 8003b9c:	400204b8 	.word	0x400204b8
 8003ba0:	58025408 	.word	0x58025408
 8003ba4:	5802541c 	.word	0x5802541c
 8003ba8:	58025430 	.word	0x58025430
 8003bac:	58025444 	.word	0x58025444
 8003bb0:	58025458 	.word	0x58025458
 8003bb4:	5802546c 	.word	0x5802546c
 8003bb8:	58025480 	.word	0x58025480
 8003bbc:	58025494 	.word	0x58025494

08003bc0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a42      	ldr	r2, [pc, #264]	; (8003cd8 <DMA_CalcBaseAndBitshift+0x118>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d04a      	beq.n	8003c68 <DMA_CalcBaseAndBitshift+0xa8>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a41      	ldr	r2, [pc, #260]	; (8003cdc <DMA_CalcBaseAndBitshift+0x11c>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d045      	beq.n	8003c68 <DMA_CalcBaseAndBitshift+0xa8>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a3f      	ldr	r2, [pc, #252]	; (8003ce0 <DMA_CalcBaseAndBitshift+0x120>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d040      	beq.n	8003c68 <DMA_CalcBaseAndBitshift+0xa8>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a3e      	ldr	r2, [pc, #248]	; (8003ce4 <DMA_CalcBaseAndBitshift+0x124>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d03b      	beq.n	8003c68 <DMA_CalcBaseAndBitshift+0xa8>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a3c      	ldr	r2, [pc, #240]	; (8003ce8 <DMA_CalcBaseAndBitshift+0x128>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d036      	beq.n	8003c68 <DMA_CalcBaseAndBitshift+0xa8>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a3b      	ldr	r2, [pc, #236]	; (8003cec <DMA_CalcBaseAndBitshift+0x12c>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d031      	beq.n	8003c68 <DMA_CalcBaseAndBitshift+0xa8>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a39      	ldr	r2, [pc, #228]	; (8003cf0 <DMA_CalcBaseAndBitshift+0x130>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d02c      	beq.n	8003c68 <DMA_CalcBaseAndBitshift+0xa8>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a38      	ldr	r2, [pc, #224]	; (8003cf4 <DMA_CalcBaseAndBitshift+0x134>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d027      	beq.n	8003c68 <DMA_CalcBaseAndBitshift+0xa8>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a36      	ldr	r2, [pc, #216]	; (8003cf8 <DMA_CalcBaseAndBitshift+0x138>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d022      	beq.n	8003c68 <DMA_CalcBaseAndBitshift+0xa8>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a35      	ldr	r2, [pc, #212]	; (8003cfc <DMA_CalcBaseAndBitshift+0x13c>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d01d      	beq.n	8003c68 <DMA_CalcBaseAndBitshift+0xa8>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a33      	ldr	r2, [pc, #204]	; (8003d00 <DMA_CalcBaseAndBitshift+0x140>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d018      	beq.n	8003c68 <DMA_CalcBaseAndBitshift+0xa8>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a32      	ldr	r2, [pc, #200]	; (8003d04 <DMA_CalcBaseAndBitshift+0x144>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d013      	beq.n	8003c68 <DMA_CalcBaseAndBitshift+0xa8>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a30      	ldr	r2, [pc, #192]	; (8003d08 <DMA_CalcBaseAndBitshift+0x148>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d00e      	beq.n	8003c68 <DMA_CalcBaseAndBitshift+0xa8>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a2f      	ldr	r2, [pc, #188]	; (8003d0c <DMA_CalcBaseAndBitshift+0x14c>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d009      	beq.n	8003c68 <DMA_CalcBaseAndBitshift+0xa8>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a2d      	ldr	r2, [pc, #180]	; (8003d10 <DMA_CalcBaseAndBitshift+0x150>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d004      	beq.n	8003c68 <DMA_CalcBaseAndBitshift+0xa8>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a2c      	ldr	r2, [pc, #176]	; (8003d14 <DMA_CalcBaseAndBitshift+0x154>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d101      	bne.n	8003c6c <DMA_CalcBaseAndBitshift+0xac>
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e000      	b.n	8003c6e <DMA_CalcBaseAndBitshift+0xae>
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d024      	beq.n	8003cbc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	3b10      	subs	r3, #16
 8003c7a:	4a27      	ldr	r2, [pc, #156]	; (8003d18 <DMA_CalcBaseAndBitshift+0x158>)
 8003c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c80:	091b      	lsrs	r3, r3, #4
 8003c82:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f003 0307 	and.w	r3, r3, #7
 8003c8a:	4a24      	ldr	r2, [pc, #144]	; (8003d1c <DMA_CalcBaseAndBitshift+0x15c>)
 8003c8c:	5cd3      	ldrb	r3, [r2, r3]
 8003c8e:	461a      	mov	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2b03      	cmp	r3, #3
 8003c98:	d908      	bls.n	8003cac <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	4b1f      	ldr	r3, [pc, #124]	; (8003d20 <DMA_CalcBaseAndBitshift+0x160>)
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	1d1a      	adds	r2, r3, #4
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	659a      	str	r2, [r3, #88]	; 0x58
 8003caa:	e00d      	b.n	8003cc8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	4b1b      	ldr	r3, [pc, #108]	; (8003d20 <DMA_CalcBaseAndBitshift+0x160>)
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	6593      	str	r3, [r2, #88]	; 0x58
 8003cba:	e005      	b.n	8003cc8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3714      	adds	r7, #20
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr
 8003cd8:	40020010 	.word	0x40020010
 8003cdc:	40020028 	.word	0x40020028
 8003ce0:	40020040 	.word	0x40020040
 8003ce4:	40020058 	.word	0x40020058
 8003ce8:	40020070 	.word	0x40020070
 8003cec:	40020088 	.word	0x40020088
 8003cf0:	400200a0 	.word	0x400200a0
 8003cf4:	400200b8 	.word	0x400200b8
 8003cf8:	40020410 	.word	0x40020410
 8003cfc:	40020428 	.word	0x40020428
 8003d00:	40020440 	.word	0x40020440
 8003d04:	40020458 	.word	0x40020458
 8003d08:	40020470 	.word	0x40020470
 8003d0c:	40020488 	.word	0x40020488
 8003d10:	400204a0 	.word	0x400204a0
 8003d14:	400204b8 	.word	0x400204b8
 8003d18:	aaaaaaab 	.word	0xaaaaaaab
 8003d1c:	080498f4 	.word	0x080498f4
 8003d20:	fffffc00 	.word	0xfffffc00

08003d24 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d120      	bne.n	8003d7a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d3c:	2b03      	cmp	r3, #3
 8003d3e:	d858      	bhi.n	8003df2 <DMA_CheckFifoParam+0xce>
 8003d40:	a201      	add	r2, pc, #4	; (adr r2, 8003d48 <DMA_CheckFifoParam+0x24>)
 8003d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d46:	bf00      	nop
 8003d48:	08003d59 	.word	0x08003d59
 8003d4c:	08003d6b 	.word	0x08003d6b
 8003d50:	08003d59 	.word	0x08003d59
 8003d54:	08003df3 	.word	0x08003df3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d048      	beq.n	8003df6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d68:	e045      	b.n	8003df6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d72:	d142      	bne.n	8003dfa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d78:	e03f      	b.n	8003dfa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d82:	d123      	bne.n	8003dcc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d88:	2b03      	cmp	r3, #3
 8003d8a:	d838      	bhi.n	8003dfe <DMA_CheckFifoParam+0xda>
 8003d8c:	a201      	add	r2, pc, #4	; (adr r2, 8003d94 <DMA_CheckFifoParam+0x70>)
 8003d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d92:	bf00      	nop
 8003d94:	08003da5 	.word	0x08003da5
 8003d98:	08003dab 	.word	0x08003dab
 8003d9c:	08003da5 	.word	0x08003da5
 8003da0:	08003dbd 	.word	0x08003dbd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	73fb      	strb	r3, [r7, #15]
        break;
 8003da8:	e030      	b.n	8003e0c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d025      	beq.n	8003e02 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003dba:	e022      	b.n	8003e02 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003dc4:	d11f      	bne.n	8003e06 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003dca:	e01c      	b.n	8003e06 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d902      	bls.n	8003dda <DMA_CheckFifoParam+0xb6>
 8003dd4:	2b03      	cmp	r3, #3
 8003dd6:	d003      	beq.n	8003de0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003dd8:	e018      	b.n	8003e0c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	73fb      	strb	r3, [r7, #15]
        break;
 8003dde:	e015      	b.n	8003e0c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00e      	beq.n	8003e0a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	73fb      	strb	r3, [r7, #15]
    break;
 8003df0:	e00b      	b.n	8003e0a <DMA_CheckFifoParam+0xe6>
        break;
 8003df2:	bf00      	nop
 8003df4:	e00a      	b.n	8003e0c <DMA_CheckFifoParam+0xe8>
        break;
 8003df6:	bf00      	nop
 8003df8:	e008      	b.n	8003e0c <DMA_CheckFifoParam+0xe8>
        break;
 8003dfa:	bf00      	nop
 8003dfc:	e006      	b.n	8003e0c <DMA_CheckFifoParam+0xe8>
        break;
 8003dfe:	bf00      	nop
 8003e00:	e004      	b.n	8003e0c <DMA_CheckFifoParam+0xe8>
        break;
 8003e02:	bf00      	nop
 8003e04:	e002      	b.n	8003e0c <DMA_CheckFifoParam+0xe8>
        break;
 8003e06:	bf00      	nop
 8003e08:	e000      	b.n	8003e0c <DMA_CheckFifoParam+0xe8>
    break;
 8003e0a:	bf00      	nop
    }
  }

  return status;
 8003e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3714      	adds	r7, #20
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop

08003e1c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a38      	ldr	r2, [pc, #224]	; (8003f10 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d022      	beq.n	8003e7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a36      	ldr	r2, [pc, #216]	; (8003f14 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d01d      	beq.n	8003e7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a35      	ldr	r2, [pc, #212]	; (8003f18 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d018      	beq.n	8003e7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a33      	ldr	r2, [pc, #204]	; (8003f1c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d013      	beq.n	8003e7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a32      	ldr	r2, [pc, #200]	; (8003f20 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d00e      	beq.n	8003e7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a30      	ldr	r2, [pc, #192]	; (8003f24 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d009      	beq.n	8003e7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a2f      	ldr	r2, [pc, #188]	; (8003f28 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d004      	beq.n	8003e7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a2d      	ldr	r2, [pc, #180]	; (8003f2c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d101      	bne.n	8003e7e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e000      	b.n	8003e80 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003e7e:	2300      	movs	r3, #0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d01a      	beq.n	8003eba <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	3b08      	subs	r3, #8
 8003e8c:	4a28      	ldr	r2, [pc, #160]	; (8003f30 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e92:	091b      	lsrs	r3, r3, #4
 8003e94:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	4b26      	ldr	r3, [pc, #152]	; (8003f34 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003e9a:	4413      	add	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a24      	ldr	r2, [pc, #144]	; (8003f38 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003ea8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f003 031f 	and.w	r3, r3, #31
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	409a      	lsls	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003eb8:	e024      	b.n	8003f04 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	3b10      	subs	r3, #16
 8003ec2:	4a1e      	ldr	r2, [pc, #120]	; (8003f3c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec8:	091b      	lsrs	r3, r3, #4
 8003eca:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	4a1c      	ldr	r2, [pc, #112]	; (8003f40 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d806      	bhi.n	8003ee2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	4a1b      	ldr	r2, [pc, #108]	; (8003f44 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d902      	bls.n	8003ee2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	3308      	adds	r3, #8
 8003ee0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	4b18      	ldr	r3, [pc, #96]	; (8003f48 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003ee6:	4413      	add	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	461a      	mov	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a16      	ldr	r2, [pc, #88]	; (8003f4c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003ef4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f003 031f 	and.w	r3, r3, #31
 8003efc:	2201      	movs	r2, #1
 8003efe:	409a      	lsls	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003f04:	bf00      	nop
 8003f06:	3714      	adds	r7, #20
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	58025408 	.word	0x58025408
 8003f14:	5802541c 	.word	0x5802541c
 8003f18:	58025430 	.word	0x58025430
 8003f1c:	58025444 	.word	0x58025444
 8003f20:	58025458 	.word	0x58025458
 8003f24:	5802546c 	.word	0x5802546c
 8003f28:	58025480 	.word	0x58025480
 8003f2c:	58025494 	.word	0x58025494
 8003f30:	cccccccd 	.word	0xcccccccd
 8003f34:	16009600 	.word	0x16009600
 8003f38:	58025880 	.word	0x58025880
 8003f3c:	aaaaaaab 	.word	0xaaaaaaab
 8003f40:	400204b8 	.word	0x400204b8
 8003f44:	4002040f 	.word	0x4002040f
 8003f48:	10008200 	.word	0x10008200
 8003f4c:	40020880 	.word	0x40020880

08003f50 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d04a      	beq.n	8003ffc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2b08      	cmp	r3, #8
 8003f6a:	d847      	bhi.n	8003ffc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a25      	ldr	r2, [pc, #148]	; (8004008 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d022      	beq.n	8003fbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a24      	ldr	r2, [pc, #144]	; (800400c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d01d      	beq.n	8003fbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a22      	ldr	r2, [pc, #136]	; (8004010 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d018      	beq.n	8003fbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a21      	ldr	r2, [pc, #132]	; (8004014 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d013      	beq.n	8003fbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a1f      	ldr	r2, [pc, #124]	; (8004018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d00e      	beq.n	8003fbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a1e      	ldr	r2, [pc, #120]	; (800401c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d009      	beq.n	8003fbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a1c      	ldr	r2, [pc, #112]	; (8004020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d004      	beq.n	8003fbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a1b      	ldr	r2, [pc, #108]	; (8004024 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d101      	bne.n	8003fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e000      	b.n	8003fc2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00a      	beq.n	8003fdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	4b17      	ldr	r3, [pc, #92]	; (8004028 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003fca:	4413      	add	r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	461a      	mov	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a15      	ldr	r2, [pc, #84]	; (800402c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003fd8:	671a      	str	r2, [r3, #112]	; 0x70
 8003fda:	e009      	b.n	8003ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	4b14      	ldr	r3, [pc, #80]	; (8004030 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003fe0:	4413      	add	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a11      	ldr	r2, [pc, #68]	; (8004034 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003fee:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	409a      	lsls	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003ffc:	bf00      	nop
 8003ffe:	3714      	adds	r7, #20
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr
 8004008:	58025408 	.word	0x58025408
 800400c:	5802541c 	.word	0x5802541c
 8004010:	58025430 	.word	0x58025430
 8004014:	58025444 	.word	0x58025444
 8004018:	58025458 	.word	0x58025458
 800401c:	5802546c 	.word	0x5802546c
 8004020:	58025480 	.word	0x58025480
 8004024:	58025494 	.word	0x58025494
 8004028:	1600963f 	.word	0x1600963f
 800402c:	58025940 	.word	0x58025940
 8004030:	1000823f 	.word	0x1000823f
 8004034:	40020940 	.word	0x40020940

08004038 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e0cf      	b.n	80041ea <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004050:	2b00      	cmp	r3, #0
 8004052:	d106      	bne.n	8004062 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2223      	movs	r2, #35	; 0x23
 8004058:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f7fe fe21 	bl	8002ca4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004062:	4b64      	ldr	r3, [pc, #400]	; (80041f4 <HAL_ETH_Init+0x1bc>)
 8004064:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004068:	4a62      	ldr	r2, [pc, #392]	; (80041f4 <HAL_ETH_Init+0x1bc>)
 800406a:	f043 0302 	orr.w	r3, r3, #2
 800406e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004072:	4b60      	ldr	r3, [pc, #384]	; (80041f4 <HAL_ETH_Init+0x1bc>)
 8004074:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	60bb      	str	r3, [r7, #8]
 800407e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	7a1b      	ldrb	r3, [r3, #8]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d103      	bne.n	8004090 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004088:	2000      	movs	r0, #0
 800408a:	f7ff f945 	bl	8003318 <HAL_SYSCFG_ETHInterfaceSelect>
 800408e:	e003      	b.n	8004098 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004090:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004094:	f7ff f940 	bl	8003318 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8004098:	4b57      	ldr	r3, [pc, #348]	; (80041f8 <HAL_ETH_Init+0x1c0>)
 800409a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	6812      	ldr	r2, [r2, #0]
 80040aa:	f043 0301 	orr.w	r3, r3, #1
 80040ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80040b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040b4:	f7ff f8f4 	bl	80032a0 <HAL_GetTick>
 80040b8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80040ba:	e011      	b.n	80040e0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80040bc:	f7ff f8f0 	bl	80032a0 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80040ca:	d909      	bls.n	80040e0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2204      	movs	r2, #4
 80040d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	22e0      	movs	r2, #224	; 0xe0
 80040d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e084      	b.n	80041ea <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1e4      	bne.n	80040bc <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f886 	bl	8004204 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80040f8:	f001 fee4 	bl	8005ec4 <HAL_RCC_GetHCLKFreq>
 80040fc:	4603      	mov	r3, r0
 80040fe:	4a3f      	ldr	r2, [pc, #252]	; (80041fc <HAL_ETH_Init+0x1c4>)
 8004100:	fba2 2303 	umull	r2, r3, r2, r3
 8004104:	0c9a      	lsrs	r2, r3, #18
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	3a01      	subs	r2, #1
 800410c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 fa71 	bl	80045f8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800411e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004122:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	6812      	ldr	r2, [r2, #0]
 800412a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800412e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004132:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	f003 0303 	and.w	r3, r3, #3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d009      	beq.n	8004156 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	22e0      	movs	r2, #224	; 0xe0
 800414e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e049      	b.n	80041ea <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800415e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004162:	4b27      	ldr	r3, [pc, #156]	; (8004200 <HAL_ETH_Init+0x1c8>)
 8004164:	4013      	ands	r3, r2
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	6952      	ldr	r2, [r2, #20]
 800416a:	0051      	lsls	r1, r2, #1
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	6812      	ldr	r2, [r2, #0]
 8004170:	430b      	orrs	r3, r1
 8004172:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004176:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 fad9 	bl	8004732 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 fb1f 	bl	80047c4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	3305      	adds	r3, #5
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	021a      	lsls	r2, r3, #8
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	3304      	adds	r3, #4
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	4619      	mov	r1, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	3303      	adds	r3, #3
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	061a      	lsls	r2, r3, #24
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	3302      	adds	r3, #2
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	041b      	lsls	r3, r3, #16
 80041b8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	3301      	adds	r3, #1
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80041c4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80041d2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80041d4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2210      	movs	r2, #16
 80041e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3710      	adds	r7, #16
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	58024400 	.word	0x58024400
 80041f8:	58000400 	.word	0x58000400
 80041fc:	431bde83 	.word	0x431bde83
 8004200:	ffff8001 	.word	0xffff8001

08004204 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004214:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800421c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800421e:	f001 fe51 	bl	8005ec4 <HAL_RCC_GetHCLKFreq>
 8004222:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	4a1e      	ldr	r2, [pc, #120]	; (80042a0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d908      	bls.n	800423e <HAL_ETH_SetMDIOClockRange+0x3a>
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	4a1d      	ldr	r2, [pc, #116]	; (80042a4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d804      	bhi.n	800423e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800423a:	60fb      	str	r3, [r7, #12]
 800423c:	e027      	b.n	800428e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	4a18      	ldr	r2, [pc, #96]	; (80042a4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d908      	bls.n	8004258 <HAL_ETH_SetMDIOClockRange+0x54>
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	4a17      	ldr	r2, [pc, #92]	; (80042a8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d204      	bcs.n	8004258 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	e01a      	b.n	800428e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	4a13      	ldr	r2, [pc, #76]	; (80042a8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d303      	bcc.n	8004268 <HAL_ETH_SetMDIOClockRange+0x64>
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	4a12      	ldr	r2, [pc, #72]	; (80042ac <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d911      	bls.n	800428c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	4a10      	ldr	r2, [pc, #64]	; (80042ac <HAL_ETH_SetMDIOClockRange+0xa8>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d908      	bls.n	8004282 <HAL_ETH_SetMDIOClockRange+0x7e>
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	4a0f      	ldr	r2, [pc, #60]	; (80042b0 <HAL_ETH_SetMDIOClockRange+0xac>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d804      	bhi.n	8004282 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800427e:	60fb      	str	r3, [r7, #12]
 8004280:	e005      	b.n	800428e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004288:	60fb      	str	r3, [r7, #12]
 800428a:	e000      	b.n	800428e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800428c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004298:	bf00      	nop
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	01312cff 	.word	0x01312cff
 80042a4:	02160ebf 	.word	0x02160ebf
 80042a8:	03938700 	.word	0x03938700
 80042ac:	05f5e0ff 	.word	0x05f5e0ff
 80042b0:	08f0d17f 	.word	0x08f0d17f

080042b4 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80042c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	791b      	ldrb	r3, [r3, #4]
 80042cc:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80042ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	7b1b      	ldrb	r3, [r3, #12]
 80042d4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80042d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	7b5b      	ldrb	r3, [r3, #13]
 80042dc:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80042de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	7b9b      	ldrb	r3, [r3, #14]
 80042e4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80042e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	7bdb      	ldrb	r3, [r3, #15]
 80042ec:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80042ee:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80042f0:	683a      	ldr	r2, [r7, #0]
 80042f2:	7c12      	ldrb	r2, [r2, #16]
 80042f4:	2a00      	cmp	r2, #0
 80042f6:	d102      	bne.n	80042fe <ETH_SetMACConfig+0x4a>
 80042f8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80042fc:	e000      	b.n	8004300 <ETH_SetMACConfig+0x4c>
 80042fe:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004300:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004302:	683a      	ldr	r2, [r7, #0]
 8004304:	7c52      	ldrb	r2, [r2, #17]
 8004306:	2a00      	cmp	r2, #0
 8004308:	d102      	bne.n	8004310 <ETH_SetMACConfig+0x5c>
 800430a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800430e:	e000      	b.n	8004312 <ETH_SetMACConfig+0x5e>
 8004310:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004312:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	7c9b      	ldrb	r3, [r3, #18]
 8004318:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800431a:	431a      	orrs	r2, r3
               macconf->Speed |
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004320:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8004326:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	7f1b      	ldrb	r3, [r3, #28]
 800432c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800432e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	7f5b      	ldrb	r3, [r3, #29]
 8004334:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004336:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004338:	683a      	ldr	r2, [r7, #0]
 800433a:	7f92      	ldrb	r2, [r2, #30]
 800433c:	2a00      	cmp	r2, #0
 800433e:	d102      	bne.n	8004346 <ETH_SetMACConfig+0x92>
 8004340:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004344:	e000      	b.n	8004348 <ETH_SetMACConfig+0x94>
 8004346:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004348:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	7fdb      	ldrb	r3, [r3, #31]
 800434e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004350:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004358:	2a00      	cmp	r2, #0
 800435a:	d102      	bne.n	8004362 <ETH_SetMACConfig+0xae>
 800435c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004360:	e000      	b.n	8004364 <ETH_SetMACConfig+0xb0>
 8004362:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004364:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800436a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004372:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8004374:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800437a:	4313      	orrs	r3, r2
 800437c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	4b56      	ldr	r3, [pc, #344]	; (80044e0 <ETH_SetMACConfig+0x22c>)
 8004386:	4013      	ands	r3, r2
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	6812      	ldr	r2, [r2, #0]
 800438c:	68f9      	ldr	r1, [r7, #12]
 800438e:	430b      	orrs	r3, r1
 8004390:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004396:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800439e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80043a0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80043a8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80043aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80043b2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80043b4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80043bc:	2a00      	cmp	r2, #0
 80043be:	d102      	bne.n	80043c6 <ETH_SetMACConfig+0x112>
 80043c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80043c4:	e000      	b.n	80043c8 <ETH_SetMACConfig+0x114>
 80043c6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80043c8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80043ce:	4313      	orrs	r3, r2
 80043d0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	685a      	ldr	r2, [r3, #4]
 80043d8:	4b42      	ldr	r3, [pc, #264]	; (80044e4 <ETH_SetMACConfig+0x230>)
 80043da:	4013      	ands	r3, r2
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	6812      	ldr	r2, [r2, #0]
 80043e0:	68f9      	ldr	r1, [r7, #12]
 80043e2:	430b      	orrs	r3, r1
 80043e4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043ec:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80043f2:	4313      	orrs	r3, r2
 80043f4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68da      	ldr	r2, [r3, #12]
 80043fc:	4b3a      	ldr	r3, [pc, #232]	; (80044e8 <ETH_SetMACConfig+0x234>)
 80043fe:	4013      	ands	r3, r2
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	6812      	ldr	r2, [r2, #0]
 8004404:	68f9      	ldr	r1, [r7, #12]
 8004406:	430b      	orrs	r3, r1
 8004408:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004410:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004416:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800441e:	2a00      	cmp	r2, #0
 8004420:	d101      	bne.n	8004426 <ETH_SetMACConfig+0x172>
 8004422:	2280      	movs	r2, #128	; 0x80
 8004424:	e000      	b.n	8004428 <ETH_SetMACConfig+0x174>
 8004426:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004428:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800442e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004430:	4313      	orrs	r3, r2
 8004432:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800443a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800443e:	4013      	ands	r3, r2
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	6812      	ldr	r2, [r2, #0]
 8004444:	68f9      	ldr	r1, [r7, #12]
 8004446:	430b      	orrs	r3, r1
 8004448:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004450:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004458:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800445a:	4313      	orrs	r3, r2
 800445c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004466:	f023 0103 	bic.w	r1, r3, #3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	430a      	orrs	r2, r1
 8004472:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800447e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	430a      	orrs	r2, r1
 800448c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004494:	683a      	ldr	r2, [r7, #0]
 8004496:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800449a:	2a00      	cmp	r2, #0
 800449c:	d101      	bne.n	80044a2 <ETH_SetMACConfig+0x1ee>
 800449e:	2240      	movs	r2, #64	; 0x40
 80044a0:	e000      	b.n	80044a4 <ETH_SetMACConfig+0x1f0>
 80044a2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80044a4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80044ac:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80044ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80044b6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80044b8:	4313      	orrs	r3, r2
 80044ba:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80044c4:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	430a      	orrs	r2, r1
 80044d0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80044d4:	bf00      	nop
 80044d6:	3714      	adds	r7, #20
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr
 80044e0:	00048083 	.word	0x00048083
 80044e4:	c0f88000 	.word	0xc0f88000
 80044e8:	fffffef0 	.word	0xfffffef0

080044ec <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	4b38      	ldr	r3, [pc, #224]	; (80045e4 <ETH_SetDMAConfig+0xf8>)
 8004502:	4013      	ands	r3, r2
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	6811      	ldr	r1, [r2, #0]
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	6812      	ldr	r2, [r2, #0]
 800450c:	430b      	orrs	r3, r1
 800450e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004512:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	791b      	ldrb	r3, [r3, #4]
 8004518:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800451e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	7b1b      	ldrb	r3, [r3, #12]
 8004524:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004526:	4313      	orrs	r3, r2
 8004528:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	4b2c      	ldr	r3, [pc, #176]	; (80045e8 <ETH_SetDMAConfig+0xfc>)
 8004536:	4013      	ands	r3, r2
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	6812      	ldr	r2, [r2, #0]
 800453c:	68f9      	ldr	r1, [r7, #12]
 800453e:	430b      	orrs	r3, r1
 8004540:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004544:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	7b5b      	ldrb	r3, [r3, #13]
 800454a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004550:	4313      	orrs	r3, r2
 8004552:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800455c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8004560:	4b22      	ldr	r3, [pc, #136]	; (80045ec <ETH_SetDMAConfig+0x100>)
 8004562:	4013      	ands	r3, r2
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	6812      	ldr	r2, [r2, #0]
 8004568:	68f9      	ldr	r1, [r7, #12]
 800456a:	430b      	orrs	r3, r1
 800456c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004570:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	7d1b      	ldrb	r3, [r3, #20]
 800457c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800457e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	7f5b      	ldrb	r3, [r3, #29]
 8004584:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004586:	4313      	orrs	r3, r2
 8004588:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004592:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8004596:	4b16      	ldr	r3, [pc, #88]	; (80045f0 <ETH_SetDMAConfig+0x104>)
 8004598:	4013      	ands	r3, r2
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	6812      	ldr	r2, [r2, #0]
 800459e:	68f9      	ldr	r1, [r7, #12]
 80045a0:	430b      	orrs	r3, r1
 80045a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045a6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	7f1b      	ldrb	r3, [r3, #28]
 80045ae:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80045b4:	4313      	orrs	r3, r2
 80045b6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045c0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80045c4:	4b0b      	ldr	r3, [pc, #44]	; (80045f4 <ETH_SetDMAConfig+0x108>)
 80045c6:	4013      	ands	r3, r2
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	6812      	ldr	r2, [r2, #0]
 80045cc:	68f9      	ldr	r1, [r7, #12]
 80045ce:	430b      	orrs	r3, r1
 80045d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045d4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80045d8:	bf00      	nop
 80045da:	3714      	adds	r7, #20
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr
 80045e4:	ffff87fd 	.word	0xffff87fd
 80045e8:	ffff2ffe 	.word	0xffff2ffe
 80045ec:	fffec000 	.word	0xfffec000
 80045f0:	ffc0efef 	.word	0xffc0efef
 80045f4:	7fc0ffff 	.word	0x7fc0ffff

080045f8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b0a4      	sub	sp, #144	; 0x90
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004600:	2301      	movs	r3, #1
 8004602:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004606:	2300      	movs	r3, #0
 8004608:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800460a:	2300      	movs	r3, #0
 800460c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004610:	2300      	movs	r3, #0
 8004612:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004616:	2301      	movs	r3, #1
 8004618:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800461c:	2301      	movs	r3, #1
 800461e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004622:	2301      	movs	r3, #1
 8004624:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004628:	2300      	movs	r3, #0
 800462a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800462e:	2301      	movs	r3, #1
 8004630:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004634:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004638:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800463a:	2300      	movs	r3, #0
 800463c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8004640:	2300      	movs	r3, #0
 8004642:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004644:	2300      	movs	r3, #0
 8004646:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800464a:	2300      	movs	r3, #0
 800464c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004650:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004654:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004656:	2300      	movs	r3, #0
 8004658:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800465c:	2300      	movs	r3, #0
 800465e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004660:	2301      	movs	r3, #1
 8004662:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004666:	2300      	movs	r3, #0
 8004668:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800466c:	2300      	movs	r3, #0
 800466e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004672:	2300      	movs	r3, #0
 8004674:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8004676:	2300      	movs	r3, #0
 8004678:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800467a:	2300      	movs	r3, #0
 800467c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800467e:	2300      	movs	r3, #0
 8004680:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004684:	2300      	movs	r3, #0
 8004686:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800468a:	2301      	movs	r3, #1
 800468c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004690:	2320      	movs	r3, #32
 8004692:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004696:	2301      	movs	r3, #1
 8004698:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800469c:	2300      	movs	r3, #0
 800469e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80046a2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80046a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80046a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80046ac:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80046ae:	2300      	movs	r3, #0
 80046b0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80046b4:	2302      	movs	r3, #2
 80046b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80046ba:	2300      	movs	r3, #0
 80046bc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80046c0:	2300      	movs	r3, #0
 80046c2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80046c6:	2300      	movs	r3, #0
 80046c8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80046cc:	2301      	movs	r3, #1
 80046ce:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80046d2:	2300      	movs	r3, #0
 80046d4:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80046d6:	2301      	movs	r3, #1
 80046d8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80046dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80046e0:	4619      	mov	r1, r3
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f7ff fde6 	bl	80042b4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80046e8:	2301      	movs	r3, #1
 80046ea:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80046ec:	2301      	movs	r3, #1
 80046ee:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80046f0:	2300      	movs	r3, #0
 80046f2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80046f4:	2300      	movs	r3, #0
 80046f6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80046fa:	2300      	movs	r3, #0
 80046fc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80046fe:	2300      	movs	r3, #0
 8004700:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004702:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004706:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004708:	2300      	movs	r3, #0
 800470a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800470c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004710:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004712:	2300      	movs	r3, #0
 8004714:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004718:	f44f 7306 	mov.w	r3, #536	; 0x218
 800471c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800471e:	f107 0308 	add.w	r3, r7, #8
 8004722:	4619      	mov	r1, r3
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f7ff fee1 	bl	80044ec <ETH_SetDMAConfig>
}
 800472a:	bf00      	nop
 800472c:	3790      	adds	r7, #144	; 0x90
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004732:	b480      	push	{r7}
 8004734:	b085      	sub	sp, #20
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800473a:	2300      	movs	r3, #0
 800473c:	60fb      	str	r3, [r7, #12]
 800473e:	e01d      	b.n	800477c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	68d9      	ldr	r1, [r3, #12]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	4613      	mov	r3, r2
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	4413      	add	r3, r2
 800474c:	00db      	lsls	r3, r3, #3
 800474e:	440b      	add	r3, r1
 8004750:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	2200      	movs	r2, #0
 8004756:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	2200      	movs	r2, #0
 800475c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	2200      	movs	r2, #0
 8004762:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	2200      	movs	r2, #0
 8004768:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800476a:	68b9      	ldr	r1, [r7, #8]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	3206      	adds	r2, #6
 8004772:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	3301      	adds	r3, #1
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2b03      	cmp	r3, #3
 8004780:	d9de      	bls.n	8004740 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004790:	461a      	mov	r2, r3
 8004792:	2303      	movs	r3, #3
 8004794:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68da      	ldr	r2, [r3, #12]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047a4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68da      	ldr	r2, [r3, #12]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047b4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80047b8:	bf00      	nop
 80047ba:	3714      	adds	r7, #20
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80047cc:	2300      	movs	r3, #0
 80047ce:	60fb      	str	r3, [r7, #12]
 80047d0:	e023      	b.n	800481a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6919      	ldr	r1, [r3, #16]
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	4613      	mov	r3, r2
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	4413      	add	r3, r2
 80047de:	00db      	lsls	r3, r3, #3
 80047e0:	440b      	add	r3, r1
 80047e2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	2200      	movs	r2, #0
 80047e8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	2200      	movs	r2, #0
 80047ee:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	2200      	movs	r2, #0
 80047f4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	2200      	movs	r2, #0
 80047fa:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	2200      	movs	r2, #0
 8004800:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	2200      	movs	r2, #0
 8004806:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004808:	68b9      	ldr	r1, [r7, #8]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	3212      	adds	r2, #18
 8004810:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	3301      	adds	r3, #1
 8004818:	60fb      	str	r3, [r7, #12]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2b03      	cmp	r3, #3
 800481e:	d9d8      	bls.n	80047d2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004846:	461a      	mov	r2, r3
 8004848:	2303      	movs	r3, #3
 800484a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	691a      	ldr	r2, [r3, #16]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800485a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800486e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8004872:	bf00      	nop
 8004874:	3714      	adds	r7, #20
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
	...

08004880 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004880:	b480      	push	{r7}
 8004882:	b089      	sub	sp, #36	; 0x24
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800488a:	2300      	movs	r3, #0
 800488c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800488e:	4b89      	ldr	r3, [pc, #548]	; (8004ab4 <HAL_GPIO_Init+0x234>)
 8004890:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004892:	e194      	b.n	8004bbe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	2101      	movs	r1, #1
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	fa01 f303 	lsl.w	r3, r1, r3
 80048a0:	4013      	ands	r3, r2
 80048a2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f000 8186 	beq.w	8004bb8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f003 0303 	and.w	r3, r3, #3
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d005      	beq.n	80048c4 <HAL_GPIO_Init+0x44>
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f003 0303 	and.w	r3, r3, #3
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d130      	bne.n	8004926 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	2203      	movs	r2, #3
 80048d0:	fa02 f303 	lsl.w	r3, r2, r3
 80048d4:	43db      	mvns	r3, r3
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	4013      	ands	r3, r2
 80048da:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	68da      	ldr	r2, [r3, #12]
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	005b      	lsls	r3, r3, #1
 80048e4:	fa02 f303 	lsl.w	r3, r2, r3
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80048fa:	2201      	movs	r2, #1
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004902:	43db      	mvns	r3, r3
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	4013      	ands	r3, r2
 8004908:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	091b      	lsrs	r3, r3, #4
 8004910:	f003 0201 	and.w	r2, r3, #1
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	fa02 f303 	lsl.w	r3, r2, r3
 800491a:	69ba      	ldr	r2, [r7, #24]
 800491c:	4313      	orrs	r3, r2
 800491e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	69ba      	ldr	r2, [r7, #24]
 8004924:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f003 0303 	and.w	r3, r3, #3
 800492e:	2b03      	cmp	r3, #3
 8004930:	d017      	beq.n	8004962 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	005b      	lsls	r3, r3, #1
 800493c:	2203      	movs	r2, #3
 800493e:	fa02 f303 	lsl.w	r3, r2, r3
 8004942:	43db      	mvns	r3, r3
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	4013      	ands	r3, r2
 8004948:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	689a      	ldr	r2, [r3, #8]
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	fa02 f303 	lsl.w	r3, r2, r3
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	4313      	orrs	r3, r2
 800495a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	69ba      	ldr	r2, [r7, #24]
 8004960:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f003 0303 	and.w	r3, r3, #3
 800496a:	2b02      	cmp	r3, #2
 800496c:	d123      	bne.n	80049b6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	08da      	lsrs	r2, r3, #3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	3208      	adds	r2, #8
 8004976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800497a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	f003 0307 	and.w	r3, r3, #7
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	220f      	movs	r2, #15
 8004986:	fa02 f303 	lsl.w	r3, r2, r3
 800498a:	43db      	mvns	r3, r3
 800498c:	69ba      	ldr	r2, [r7, #24]
 800498e:	4013      	ands	r3, r2
 8004990:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	691a      	ldr	r2, [r3, #16]
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	f003 0307 	and.w	r3, r3, #7
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	fa02 f303 	lsl.w	r3, r2, r3
 80049a2:	69ba      	ldr	r2, [r7, #24]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	08da      	lsrs	r2, r3, #3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	3208      	adds	r2, #8
 80049b0:	69b9      	ldr	r1, [r7, #24]
 80049b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	005b      	lsls	r3, r3, #1
 80049c0:	2203      	movs	r2, #3
 80049c2:	fa02 f303 	lsl.w	r3, r2, r3
 80049c6:	43db      	mvns	r3, r3
 80049c8:	69ba      	ldr	r2, [r7, #24]
 80049ca:	4013      	ands	r3, r2
 80049cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f003 0203 	and.w	r2, r3, #3
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	005b      	lsls	r3, r3, #1
 80049da:	fa02 f303 	lsl.w	r3, r2, r3
 80049de:	69ba      	ldr	r2, [r7, #24]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f000 80e0 	beq.w	8004bb8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049f8:	4b2f      	ldr	r3, [pc, #188]	; (8004ab8 <HAL_GPIO_Init+0x238>)
 80049fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80049fe:	4a2e      	ldr	r2, [pc, #184]	; (8004ab8 <HAL_GPIO_Init+0x238>)
 8004a00:	f043 0302 	orr.w	r3, r3, #2
 8004a04:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004a08:	4b2b      	ldr	r3, [pc, #172]	; (8004ab8 <HAL_GPIO_Init+0x238>)
 8004a0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a16:	4a29      	ldr	r2, [pc, #164]	; (8004abc <HAL_GPIO_Init+0x23c>)
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	089b      	lsrs	r3, r3, #2
 8004a1c:	3302      	adds	r3, #2
 8004a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	f003 0303 	and.w	r3, r3, #3
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	220f      	movs	r2, #15
 8004a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a32:	43db      	mvns	r3, r3
 8004a34:	69ba      	ldr	r2, [r7, #24]
 8004a36:	4013      	ands	r3, r2
 8004a38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a20      	ldr	r2, [pc, #128]	; (8004ac0 <HAL_GPIO_Init+0x240>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d052      	beq.n	8004ae8 <HAL_GPIO_Init+0x268>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a1f      	ldr	r2, [pc, #124]	; (8004ac4 <HAL_GPIO_Init+0x244>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d031      	beq.n	8004aae <HAL_GPIO_Init+0x22e>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a1e      	ldr	r2, [pc, #120]	; (8004ac8 <HAL_GPIO_Init+0x248>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d02b      	beq.n	8004aaa <HAL_GPIO_Init+0x22a>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a1d      	ldr	r2, [pc, #116]	; (8004acc <HAL_GPIO_Init+0x24c>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d025      	beq.n	8004aa6 <HAL_GPIO_Init+0x226>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a1c      	ldr	r2, [pc, #112]	; (8004ad0 <HAL_GPIO_Init+0x250>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d01f      	beq.n	8004aa2 <HAL_GPIO_Init+0x222>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a1b      	ldr	r2, [pc, #108]	; (8004ad4 <HAL_GPIO_Init+0x254>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d019      	beq.n	8004a9e <HAL_GPIO_Init+0x21e>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a1a      	ldr	r2, [pc, #104]	; (8004ad8 <HAL_GPIO_Init+0x258>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d013      	beq.n	8004a9a <HAL_GPIO_Init+0x21a>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a19      	ldr	r2, [pc, #100]	; (8004adc <HAL_GPIO_Init+0x25c>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d00d      	beq.n	8004a96 <HAL_GPIO_Init+0x216>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a18      	ldr	r2, [pc, #96]	; (8004ae0 <HAL_GPIO_Init+0x260>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d007      	beq.n	8004a92 <HAL_GPIO_Init+0x212>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a17      	ldr	r2, [pc, #92]	; (8004ae4 <HAL_GPIO_Init+0x264>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d101      	bne.n	8004a8e <HAL_GPIO_Init+0x20e>
 8004a8a:	2309      	movs	r3, #9
 8004a8c:	e02d      	b.n	8004aea <HAL_GPIO_Init+0x26a>
 8004a8e:	230a      	movs	r3, #10
 8004a90:	e02b      	b.n	8004aea <HAL_GPIO_Init+0x26a>
 8004a92:	2308      	movs	r3, #8
 8004a94:	e029      	b.n	8004aea <HAL_GPIO_Init+0x26a>
 8004a96:	2307      	movs	r3, #7
 8004a98:	e027      	b.n	8004aea <HAL_GPIO_Init+0x26a>
 8004a9a:	2306      	movs	r3, #6
 8004a9c:	e025      	b.n	8004aea <HAL_GPIO_Init+0x26a>
 8004a9e:	2305      	movs	r3, #5
 8004aa0:	e023      	b.n	8004aea <HAL_GPIO_Init+0x26a>
 8004aa2:	2304      	movs	r3, #4
 8004aa4:	e021      	b.n	8004aea <HAL_GPIO_Init+0x26a>
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e01f      	b.n	8004aea <HAL_GPIO_Init+0x26a>
 8004aaa:	2302      	movs	r3, #2
 8004aac:	e01d      	b.n	8004aea <HAL_GPIO_Init+0x26a>
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e01b      	b.n	8004aea <HAL_GPIO_Init+0x26a>
 8004ab2:	bf00      	nop
 8004ab4:	58000080 	.word	0x58000080
 8004ab8:	58024400 	.word	0x58024400
 8004abc:	58000400 	.word	0x58000400
 8004ac0:	58020000 	.word	0x58020000
 8004ac4:	58020400 	.word	0x58020400
 8004ac8:	58020800 	.word	0x58020800
 8004acc:	58020c00 	.word	0x58020c00
 8004ad0:	58021000 	.word	0x58021000
 8004ad4:	58021400 	.word	0x58021400
 8004ad8:	58021800 	.word	0x58021800
 8004adc:	58021c00 	.word	0x58021c00
 8004ae0:	58022000 	.word	0x58022000
 8004ae4:	58022400 	.word	0x58022400
 8004ae8:	2300      	movs	r3, #0
 8004aea:	69fa      	ldr	r2, [r7, #28]
 8004aec:	f002 0203 	and.w	r2, r2, #3
 8004af0:	0092      	lsls	r2, r2, #2
 8004af2:	4093      	lsls	r3, r2
 8004af4:	69ba      	ldr	r2, [r7, #24]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004afa:	4938      	ldr	r1, [pc, #224]	; (8004bdc <HAL_GPIO_Init+0x35c>)
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	089b      	lsrs	r3, r3, #2
 8004b00:	3302      	adds	r3, #2
 8004b02:	69ba      	ldr	r2, [r7, #24]
 8004b04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	43db      	mvns	r3, r3
 8004b14:	69ba      	ldr	r2, [r7, #24]
 8004b16:	4013      	ands	r3, r2
 8004b18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d003      	beq.n	8004b2e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004b26:	69ba      	ldr	r2, [r7, #24]
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004b2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	43db      	mvns	r3, r3
 8004b42:	69ba      	ldr	r2, [r7, #24]
 8004b44:	4013      	ands	r3, r2
 8004b46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d003      	beq.n	8004b5c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004b54:	69ba      	ldr	r2, [r7, #24]
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004b5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	43db      	mvns	r3, r3
 8004b6e:	69ba      	ldr	r2, [r7, #24]
 8004b70:	4013      	ands	r3, r2
 8004b72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d003      	beq.n	8004b88 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	69ba      	ldr	r2, [r7, #24]
 8004b8c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	43db      	mvns	r3, r3
 8004b98:	69ba      	ldr	r2, [r7, #24]
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d003      	beq.n	8004bb2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004baa:	69ba      	ldr	r2, [r7, #24]
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	69ba      	ldr	r2, [r7, #24]
 8004bb6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	3301      	adds	r3, #1
 8004bbc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f47f ae63 	bne.w	8004894 <HAL_GPIO_Init+0x14>
  }
}
 8004bce:	bf00      	nop
 8004bd0:	bf00      	nop
 8004bd2:	3724      	adds	r7, #36	; 0x24
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr
 8004bdc:	58000400 	.word	0x58000400

08004be0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	460b      	mov	r3, r1
 8004bea:	807b      	strh	r3, [r7, #2]
 8004bec:	4613      	mov	r3, r2
 8004bee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004bf0:	787b      	ldrb	r3, [r7, #1]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d003      	beq.n	8004bfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bf6:	887a      	ldrh	r2, [r7, #2]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004bfc:	e003      	b.n	8004c06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004bfe:	887b      	ldrh	r3, [r7, #2]
 8004c00:	041a      	lsls	r2, r3, #16
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	619a      	str	r2, [r3, #24]
}
 8004c06:	bf00      	nop
 8004c08:	370c      	adds	r7, #12
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr

08004c12 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004c12:	b480      	push	{r7}
 8004c14:	b085      	sub	sp, #20
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004c24:	887a      	ldrh	r2, [r7, #2]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	4013      	ands	r3, r2
 8004c2a:	041a      	lsls	r2, r3, #16
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	43d9      	mvns	r1, r3
 8004c30:	887b      	ldrh	r3, [r7, #2]
 8004c32:	400b      	ands	r3, r1
 8004c34:	431a      	orrs	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	619a      	str	r2, [r3, #24]
}
 8004c3a:	bf00      	nop
 8004c3c:	3714      	adds	r7, #20
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
	...

08004c48 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004c50:	4a08      	ldr	r2, [pc, #32]	; (8004c74 <HAL_HSEM_FastTake+0x2c>)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	3320      	adds	r3, #32
 8004c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c5a:	4a07      	ldr	r2, [pc, #28]	; (8004c78 <HAL_HSEM_FastTake+0x30>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d101      	bne.n	8004c64 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004c60:	2300      	movs	r3, #0
 8004c62:	e000      	b.n	8004c66 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	370c      	adds	r7, #12
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	58026400 	.word	0x58026400
 8004c78:	80000300 	.word	0x80000300

08004c7c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8004c86:	4906      	ldr	r1, [pc, #24]	; (8004ca0 <HAL_HSEM_Release+0x24>)
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr
 8004ca0:	58026400 	.word	0x58026400

08004ca4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ca6:	b08f      	sub	sp, #60	; 0x3c
 8004ca8:	af0a      	add	r7, sp, #40	; 0x28
 8004caa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e116      	b.n	8004ee4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d106      	bne.n	8004cd6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f7fe f94d 	bl	8002f70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2203      	movs	r2, #3
 8004cda:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d102      	bne.n	8004cf0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f003 fd87 	bl	8008808 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	603b      	str	r3, [r7, #0]
 8004d00:	687e      	ldr	r6, [r7, #4]
 8004d02:	466d      	mov	r5, sp
 8004d04:	f106 0410 	add.w	r4, r6, #16
 8004d08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d10:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004d14:	e885 0003 	stmia.w	r5, {r0, r1}
 8004d18:	1d33      	adds	r3, r6, #4
 8004d1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d1c:	6838      	ldr	r0, [r7, #0]
 8004d1e:	f003 fd05 	bl	800872c <USB_CoreInit>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d005      	beq.n	8004d34 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e0d7      	b.n	8004ee4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2100      	movs	r1, #0
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f003 fd75 	bl	800882a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d40:	2300      	movs	r3, #0
 8004d42:	73fb      	strb	r3, [r7, #15]
 8004d44:	e04a      	b.n	8004ddc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004d46:	7bfa      	ldrb	r2, [r7, #15]
 8004d48:	6879      	ldr	r1, [r7, #4]
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	00db      	lsls	r3, r3, #3
 8004d4e:	4413      	add	r3, r2
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	440b      	add	r3, r1
 8004d54:	333d      	adds	r3, #61	; 0x3d
 8004d56:	2201      	movs	r2, #1
 8004d58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004d5a:	7bfa      	ldrb	r2, [r7, #15]
 8004d5c:	6879      	ldr	r1, [r7, #4]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	00db      	lsls	r3, r3, #3
 8004d62:	4413      	add	r3, r2
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	440b      	add	r3, r1
 8004d68:	333c      	adds	r3, #60	; 0x3c
 8004d6a:	7bfa      	ldrb	r2, [r7, #15]
 8004d6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004d6e:	7bfa      	ldrb	r2, [r7, #15]
 8004d70:	7bfb      	ldrb	r3, [r7, #15]
 8004d72:	b298      	uxth	r0, r3
 8004d74:	6879      	ldr	r1, [r7, #4]
 8004d76:	4613      	mov	r3, r2
 8004d78:	00db      	lsls	r3, r3, #3
 8004d7a:	4413      	add	r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	440b      	add	r3, r1
 8004d80:	3344      	adds	r3, #68	; 0x44
 8004d82:	4602      	mov	r2, r0
 8004d84:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004d86:	7bfa      	ldrb	r2, [r7, #15]
 8004d88:	6879      	ldr	r1, [r7, #4]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	00db      	lsls	r3, r3, #3
 8004d8e:	4413      	add	r3, r2
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	440b      	add	r3, r1
 8004d94:	3340      	adds	r3, #64	; 0x40
 8004d96:	2200      	movs	r2, #0
 8004d98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004d9a:	7bfa      	ldrb	r2, [r7, #15]
 8004d9c:	6879      	ldr	r1, [r7, #4]
 8004d9e:	4613      	mov	r3, r2
 8004da0:	00db      	lsls	r3, r3, #3
 8004da2:	4413      	add	r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	440b      	add	r3, r1
 8004da8:	3348      	adds	r3, #72	; 0x48
 8004daa:	2200      	movs	r2, #0
 8004dac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004dae:	7bfa      	ldrb	r2, [r7, #15]
 8004db0:	6879      	ldr	r1, [r7, #4]
 8004db2:	4613      	mov	r3, r2
 8004db4:	00db      	lsls	r3, r3, #3
 8004db6:	4413      	add	r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	440b      	add	r3, r1
 8004dbc:	334c      	adds	r3, #76	; 0x4c
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004dc2:	7bfa      	ldrb	r2, [r7, #15]
 8004dc4:	6879      	ldr	r1, [r7, #4]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	00db      	lsls	r3, r3, #3
 8004dca:	4413      	add	r3, r2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	440b      	add	r3, r1
 8004dd0:	3354      	adds	r3, #84	; 0x54
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dd6:	7bfb      	ldrb	r3, [r7, #15]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	73fb      	strb	r3, [r7, #15]
 8004ddc:	7bfa      	ldrb	r2, [r7, #15]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d3af      	bcc.n	8004d46 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004de6:	2300      	movs	r3, #0
 8004de8:	73fb      	strb	r3, [r7, #15]
 8004dea:	e044      	b.n	8004e76 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004dec:	7bfa      	ldrb	r2, [r7, #15]
 8004dee:	6879      	ldr	r1, [r7, #4]
 8004df0:	4613      	mov	r3, r2
 8004df2:	00db      	lsls	r3, r3, #3
 8004df4:	4413      	add	r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	440b      	add	r3, r1
 8004dfa:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004dfe:	2200      	movs	r2, #0
 8004e00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004e02:	7bfa      	ldrb	r2, [r7, #15]
 8004e04:	6879      	ldr	r1, [r7, #4]
 8004e06:	4613      	mov	r3, r2
 8004e08:	00db      	lsls	r3, r3, #3
 8004e0a:	4413      	add	r3, r2
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	440b      	add	r3, r1
 8004e10:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004e14:	7bfa      	ldrb	r2, [r7, #15]
 8004e16:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004e18:	7bfa      	ldrb	r2, [r7, #15]
 8004e1a:	6879      	ldr	r1, [r7, #4]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	00db      	lsls	r3, r3, #3
 8004e20:	4413      	add	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	440b      	add	r3, r1
 8004e26:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004e2e:	7bfa      	ldrb	r2, [r7, #15]
 8004e30:	6879      	ldr	r1, [r7, #4]
 8004e32:	4613      	mov	r3, r2
 8004e34:	00db      	lsls	r3, r3, #3
 8004e36:	4413      	add	r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	440b      	add	r3, r1
 8004e3c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004e40:	2200      	movs	r2, #0
 8004e42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004e44:	7bfa      	ldrb	r2, [r7, #15]
 8004e46:	6879      	ldr	r1, [r7, #4]
 8004e48:	4613      	mov	r3, r2
 8004e4a:	00db      	lsls	r3, r3, #3
 8004e4c:	4413      	add	r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	440b      	add	r3, r1
 8004e52:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004e56:	2200      	movs	r2, #0
 8004e58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004e5a:	7bfa      	ldrb	r2, [r7, #15]
 8004e5c:	6879      	ldr	r1, [r7, #4]
 8004e5e:	4613      	mov	r3, r2
 8004e60:	00db      	lsls	r3, r3, #3
 8004e62:	4413      	add	r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	440b      	add	r3, r1
 8004e68:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e70:	7bfb      	ldrb	r3, [r7, #15]
 8004e72:	3301      	adds	r3, #1
 8004e74:	73fb      	strb	r3, [r7, #15]
 8004e76:	7bfa      	ldrb	r2, [r7, #15]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d3b5      	bcc.n	8004dec <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	603b      	str	r3, [r7, #0]
 8004e86:	687e      	ldr	r6, [r7, #4]
 8004e88:	466d      	mov	r5, sp
 8004e8a:	f106 0410 	add.w	r4, r6, #16
 8004e8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e96:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004e9a:	e885 0003 	stmia.w	r5, {r0, r1}
 8004e9e:	1d33      	adds	r3, r6, #4
 8004ea0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ea2:	6838      	ldr	r0, [r7, #0]
 8004ea4:	f003 fd0e 	bl	80088c4 <USB_DevInit>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d005      	beq.n	8004eba <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2202      	movs	r2, #2
 8004eb2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e014      	b.n	8004ee4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d102      	bne.n	8004ed8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f80a 	bl	8004eec <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4618      	mov	r0, r3
 8004ede:	f003 fecc 	bl	8008c7a <USB_DevDisconnect>

  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3714      	adds	r7, #20
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004eec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f1a:	4b05      	ldr	r3, [pc, #20]	; (8004f30 <HAL_PCDEx_ActivateLPM+0x44>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3714      	adds	r7, #20
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr
 8004f30:	10000003 	.word	0x10000003

08004f34 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004f3c:	4b29      	ldr	r3, [pc, #164]	; (8004fe4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	f003 0307 	and.w	r3, r3, #7
 8004f44:	2b06      	cmp	r3, #6
 8004f46:	d00a      	beq.n	8004f5e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004f48:	4b26      	ldr	r3, [pc, #152]	; (8004fe4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d001      	beq.n	8004f5a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e040      	b.n	8004fdc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	e03e      	b.n	8004fdc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004f5e:	4b21      	ldr	r3, [pc, #132]	; (8004fe4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004f66:	491f      	ldr	r1, [pc, #124]	; (8004fe4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004f6e:	f7fe f997 	bl	80032a0 <HAL_GetTick>
 8004f72:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004f74:	e009      	b.n	8004f8a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004f76:	f7fe f993 	bl	80032a0 <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f84:	d901      	bls.n	8004f8a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e028      	b.n	8004fdc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004f8a:	4b16      	ldr	r3, [pc, #88]	; (8004fe4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f96:	d1ee      	bne.n	8004f76 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b1e      	cmp	r3, #30
 8004f9c:	d008      	beq.n	8004fb0 <HAL_PWREx_ConfigSupply+0x7c>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2b2e      	cmp	r3, #46	; 0x2e
 8004fa2:	d005      	beq.n	8004fb0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b1d      	cmp	r3, #29
 8004fa8:	d002      	beq.n	8004fb0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2b2d      	cmp	r3, #45	; 0x2d
 8004fae:	d114      	bne.n	8004fda <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004fb0:	f7fe f976 	bl	80032a0 <HAL_GetTick>
 8004fb4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004fb6:	e009      	b.n	8004fcc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004fb8:	f7fe f972 	bl	80032a0 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fc6:	d901      	bls.n	8004fcc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e007      	b.n	8004fdc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004fcc:	4b05      	ldr	r3, [pc, #20]	; (8004fe4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fd8:	d1ee      	bne.n	8004fb8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3710      	adds	r7, #16
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	58024800 	.word	0x58024800

08004fe8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004fec:	4b05      	ldr	r3, [pc, #20]	; (8005004 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	4a04      	ldr	r2, [pc, #16]	; (8005004 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004ff2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ff6:	60d3      	str	r3, [r2, #12]
}
 8004ff8:	bf00      	nop
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	58024800 	.word	0x58024800

08005008 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b08c      	sub	sp, #48	; 0x30
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d102      	bne.n	800501c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	f000 bc1d 	b.w	8005856 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0301 	and.w	r3, r3, #1
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 8087 	beq.w	8005138 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800502a:	4b99      	ldr	r3, [pc, #612]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005032:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005034:	4b96      	ldr	r3, [pc, #600]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 8005036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005038:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800503a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800503c:	2b10      	cmp	r3, #16
 800503e:	d007      	beq.n	8005050 <HAL_RCC_OscConfig+0x48>
 8005040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005042:	2b18      	cmp	r3, #24
 8005044:	d110      	bne.n	8005068 <HAL_RCC_OscConfig+0x60>
 8005046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005048:	f003 0303 	and.w	r3, r3, #3
 800504c:	2b02      	cmp	r3, #2
 800504e:	d10b      	bne.n	8005068 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005050:	4b8f      	ldr	r3, [pc, #572]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d06c      	beq.n	8005136 <HAL_RCC_OscConfig+0x12e>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d168      	bne.n	8005136 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e3f6      	b.n	8005856 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005070:	d106      	bne.n	8005080 <HAL_RCC_OscConfig+0x78>
 8005072:	4b87      	ldr	r3, [pc, #540]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a86      	ldr	r2, [pc, #536]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 8005078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800507c:	6013      	str	r3, [r2, #0]
 800507e:	e02e      	b.n	80050de <HAL_RCC_OscConfig+0xd6>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d10c      	bne.n	80050a2 <HAL_RCC_OscConfig+0x9a>
 8005088:	4b81      	ldr	r3, [pc, #516]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a80      	ldr	r2, [pc, #512]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 800508e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005092:	6013      	str	r3, [r2, #0]
 8005094:	4b7e      	ldr	r3, [pc, #504]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a7d      	ldr	r2, [pc, #500]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 800509a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800509e:	6013      	str	r3, [r2, #0]
 80050a0:	e01d      	b.n	80050de <HAL_RCC_OscConfig+0xd6>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050aa:	d10c      	bne.n	80050c6 <HAL_RCC_OscConfig+0xbe>
 80050ac:	4b78      	ldr	r3, [pc, #480]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a77      	ldr	r2, [pc, #476]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 80050b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050b6:	6013      	str	r3, [r2, #0]
 80050b8:	4b75      	ldr	r3, [pc, #468]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a74      	ldr	r2, [pc, #464]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 80050be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050c2:	6013      	str	r3, [r2, #0]
 80050c4:	e00b      	b.n	80050de <HAL_RCC_OscConfig+0xd6>
 80050c6:	4b72      	ldr	r3, [pc, #456]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a71      	ldr	r2, [pc, #452]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 80050cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050d0:	6013      	str	r3, [r2, #0]
 80050d2:	4b6f      	ldr	r3, [pc, #444]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a6e      	ldr	r2, [pc, #440]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 80050d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050dc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d013      	beq.n	800510e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e6:	f7fe f8db 	bl	80032a0 <HAL_GetTick>
 80050ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050ec:	e008      	b.n	8005100 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050ee:	f7fe f8d7 	bl	80032a0 <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	2b64      	cmp	r3, #100	; 0x64
 80050fa:	d901      	bls.n	8005100 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e3aa      	b.n	8005856 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005100:	4b63      	ldr	r3, [pc, #396]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d0f0      	beq.n	80050ee <HAL_RCC_OscConfig+0xe6>
 800510c:	e014      	b.n	8005138 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800510e:	f7fe f8c7 	bl	80032a0 <HAL_GetTick>
 8005112:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005114:	e008      	b.n	8005128 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005116:	f7fe f8c3 	bl	80032a0 <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	2b64      	cmp	r3, #100	; 0x64
 8005122:	d901      	bls.n	8005128 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e396      	b.n	8005856 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005128:	4b59      	ldr	r3, [pc, #356]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1f0      	bne.n	8005116 <HAL_RCC_OscConfig+0x10e>
 8005134:	e000      	b.n	8005138 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005136:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0302 	and.w	r3, r3, #2
 8005140:	2b00      	cmp	r3, #0
 8005142:	f000 80cb 	beq.w	80052dc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005146:	4b52      	ldr	r3, [pc, #328]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800514e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005150:	4b4f      	ldr	r3, [pc, #316]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 8005152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005154:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005156:	6a3b      	ldr	r3, [r7, #32]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d007      	beq.n	800516c <HAL_RCC_OscConfig+0x164>
 800515c:	6a3b      	ldr	r3, [r7, #32]
 800515e:	2b18      	cmp	r3, #24
 8005160:	d156      	bne.n	8005210 <HAL_RCC_OscConfig+0x208>
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	f003 0303 	and.w	r3, r3, #3
 8005168:	2b00      	cmp	r3, #0
 800516a:	d151      	bne.n	8005210 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800516c:	4b48      	ldr	r3, [pc, #288]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0304 	and.w	r3, r3, #4
 8005174:	2b00      	cmp	r3, #0
 8005176:	d005      	beq.n	8005184 <HAL_RCC_OscConfig+0x17c>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e368      	b.n	8005856 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005184:	4b42      	ldr	r3, [pc, #264]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f023 0219 	bic.w	r2, r3, #25
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	493f      	ldr	r1, [pc, #252]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 8005192:	4313      	orrs	r3, r2
 8005194:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005196:	f7fe f883 	bl	80032a0 <HAL_GetTick>
 800519a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800519c:	e008      	b.n	80051b0 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800519e:	f7fe f87f 	bl	80032a0 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d901      	bls.n	80051b0 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e352      	b.n	8005856 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051b0:	4b37      	ldr	r3, [pc, #220]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0304 	and.w	r3, r3, #4
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d0f0      	beq.n	800519e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051bc:	f7fe f8a0 	bl	8003300 <HAL_GetREVID>
 80051c0:	4603      	mov	r3, r0
 80051c2:	f241 0203 	movw	r2, #4099	; 0x1003
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d817      	bhi.n	80051fa <HAL_RCC_OscConfig+0x1f2>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	2b40      	cmp	r3, #64	; 0x40
 80051d0:	d108      	bne.n	80051e4 <HAL_RCC_OscConfig+0x1dc>
 80051d2:	4b2f      	ldr	r3, [pc, #188]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80051da:	4a2d      	ldr	r2, [pc, #180]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 80051dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051e0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051e2:	e07b      	b.n	80052dc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051e4:	4b2a      	ldr	r3, [pc, #168]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	031b      	lsls	r3, r3, #12
 80051f2:	4927      	ldr	r1, [pc, #156]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051f8:	e070      	b.n	80052dc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051fa:	4b25      	ldr	r3, [pc, #148]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	061b      	lsls	r3, r3, #24
 8005208:	4921      	ldr	r1, [pc, #132]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 800520a:	4313      	orrs	r3, r2
 800520c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800520e:	e065      	b.n	80052dc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d048      	beq.n	80052aa <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005218:	4b1d      	ldr	r3, [pc, #116]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f023 0219 	bic.w	r2, r3, #25
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	491a      	ldr	r1, [pc, #104]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 8005226:	4313      	orrs	r3, r2
 8005228:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800522a:	f7fe f839 	bl	80032a0 <HAL_GetTick>
 800522e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005230:	e008      	b.n	8005244 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005232:	f7fe f835 	bl	80032a0 <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	2b02      	cmp	r3, #2
 800523e:	d901      	bls.n	8005244 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e308      	b.n	8005856 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005244:	4b12      	ldr	r3, [pc, #72]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0304 	and.w	r3, r3, #4
 800524c:	2b00      	cmp	r3, #0
 800524e:	d0f0      	beq.n	8005232 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005250:	f7fe f856 	bl	8003300 <HAL_GetREVID>
 8005254:	4603      	mov	r3, r0
 8005256:	f241 0203 	movw	r2, #4099	; 0x1003
 800525a:	4293      	cmp	r3, r2
 800525c:	d81a      	bhi.n	8005294 <HAL_RCC_OscConfig+0x28c>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	2b40      	cmp	r3, #64	; 0x40
 8005264:	d108      	bne.n	8005278 <HAL_RCC_OscConfig+0x270>
 8005266:	4b0a      	ldr	r3, [pc, #40]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800526e:	4a08      	ldr	r2, [pc, #32]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 8005270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005274:	6053      	str	r3, [r2, #4]
 8005276:	e031      	b.n	80052dc <HAL_RCC_OscConfig+0x2d4>
 8005278:	4b05      	ldr	r3, [pc, #20]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	031b      	lsls	r3, r3, #12
 8005286:	4902      	ldr	r1, [pc, #8]	; (8005290 <HAL_RCC_OscConfig+0x288>)
 8005288:	4313      	orrs	r3, r2
 800528a:	604b      	str	r3, [r1, #4]
 800528c:	e026      	b.n	80052dc <HAL_RCC_OscConfig+0x2d4>
 800528e:	bf00      	nop
 8005290:	58024400 	.word	0x58024400
 8005294:	4b9a      	ldr	r3, [pc, #616]	; (8005500 <HAL_RCC_OscConfig+0x4f8>)
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	061b      	lsls	r3, r3, #24
 80052a2:	4997      	ldr	r1, [pc, #604]	; (8005500 <HAL_RCC_OscConfig+0x4f8>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	604b      	str	r3, [r1, #4]
 80052a8:	e018      	b.n	80052dc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052aa:	4b95      	ldr	r3, [pc, #596]	; (8005500 <HAL_RCC_OscConfig+0x4f8>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a94      	ldr	r2, [pc, #592]	; (8005500 <HAL_RCC_OscConfig+0x4f8>)
 80052b0:	f023 0301 	bic.w	r3, r3, #1
 80052b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b6:	f7fd fff3 	bl	80032a0 <HAL_GetTick>
 80052ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80052bc:	e008      	b.n	80052d0 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052be:	f7fd ffef 	bl	80032a0 <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d901      	bls.n	80052d0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e2c2      	b.n	8005856 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80052d0:	4b8b      	ldr	r3, [pc, #556]	; (8005500 <HAL_RCC_OscConfig+0x4f8>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0304 	and.w	r3, r3, #4
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1f0      	bne.n	80052be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0310 	and.w	r3, r3, #16
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f000 80a9 	beq.w	800543c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052ea:	4b85      	ldr	r3, [pc, #532]	; (8005500 <HAL_RCC_OscConfig+0x4f8>)
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052f2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80052f4:	4b82      	ldr	r3, [pc, #520]	; (8005500 <HAL_RCC_OscConfig+0x4f8>)
 80052f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	2b08      	cmp	r3, #8
 80052fe:	d007      	beq.n	8005310 <HAL_RCC_OscConfig+0x308>
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	2b18      	cmp	r3, #24
 8005304:	d13a      	bne.n	800537c <HAL_RCC_OscConfig+0x374>
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f003 0303 	and.w	r3, r3, #3
 800530c:	2b01      	cmp	r3, #1
 800530e:	d135      	bne.n	800537c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005310:	4b7b      	ldr	r3, [pc, #492]	; (8005500 <HAL_RCC_OscConfig+0x4f8>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005318:	2b00      	cmp	r3, #0
 800531a:	d005      	beq.n	8005328 <HAL_RCC_OscConfig+0x320>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	69db      	ldr	r3, [r3, #28]
 8005320:	2b80      	cmp	r3, #128	; 0x80
 8005322:	d001      	beq.n	8005328 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e296      	b.n	8005856 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005328:	f7fd ffea 	bl	8003300 <HAL_GetREVID>
 800532c:	4603      	mov	r3, r0
 800532e:	f241 0203 	movw	r2, #4099	; 0x1003
 8005332:	4293      	cmp	r3, r2
 8005334:	d817      	bhi.n	8005366 <HAL_RCC_OscConfig+0x35e>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	2b20      	cmp	r3, #32
 800533c:	d108      	bne.n	8005350 <HAL_RCC_OscConfig+0x348>
 800533e:	4b70      	ldr	r3, [pc, #448]	; (8005500 <HAL_RCC_OscConfig+0x4f8>)
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005346:	4a6e      	ldr	r2, [pc, #440]	; (8005500 <HAL_RCC_OscConfig+0x4f8>)
 8005348:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800534c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800534e:	e075      	b.n	800543c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005350:	4b6b      	ldr	r3, [pc, #428]	; (8005500 <HAL_RCC_OscConfig+0x4f8>)
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a1b      	ldr	r3, [r3, #32]
 800535c:	069b      	lsls	r3, r3, #26
 800535e:	4968      	ldr	r1, [pc, #416]	; (8005500 <HAL_RCC_OscConfig+0x4f8>)
 8005360:	4313      	orrs	r3, r2
 8005362:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005364:	e06a      	b.n	800543c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005366:	4b66      	ldr	r3, [pc, #408]	; (8005500 <HAL_RCC_OscConfig+0x4f8>)
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	061b      	lsls	r3, r3, #24
 8005374:	4962      	ldr	r1, [pc, #392]	; (8005500 <HAL_RCC_OscConfig+0x4f8>)
 8005376:	4313      	orrs	r3, r2
 8005378:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800537a:	e05f      	b.n	800543c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	69db      	ldr	r3, [r3, #28]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d042      	beq.n	800540a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005384:	4b5e      	ldr	r3, [pc, #376]	; (8005500 <HAL_RCC_OscConfig+0x4f8>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a5d      	ldr	r2, [pc, #372]	; (8005500 <HAL_RCC_OscConfig+0x4f8>)
 800538a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800538e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005390:	f7fd ff86 	bl	80032a0 <HAL_GetTick>
 8005394:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005396:	e008      	b.n	80053aa <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005398:	f7fd ff82 	bl	80032a0 <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d901      	bls.n	80053aa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e255      	b.n	8005856 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80053aa:	4b55      	ldr	r3, [pc, #340]	; (8005500 <HAL_RCC_OscConfig+0x4f8>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d0f0      	beq.n	8005398 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80053b6:	f7fd ffa3 	bl	8003300 <HAL_GetREVID>
 80053ba:	4603      	mov	r3, r0
 80053bc:	f241 0203 	movw	r2, #4099	; 0x1003
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d817      	bhi.n	80053f4 <HAL_RCC_OscConfig+0x3ec>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a1b      	ldr	r3, [r3, #32]
 80053c8:	2b20      	cmp	r3, #32
 80053ca:	d108      	bne.n	80053de <HAL_RCC_OscConfig+0x3d6>
 80053cc:	4b4c      	ldr	r3, [pc, #304]	; (8005500 <HAL_RCC_OscConfig+0x4f8>)
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80053d4:	4a4a      	ldr	r2, [pc, #296]	; (8005500 <HAL_RCC_OscConfig+0x4f8>)
 80053d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053da:	6053      	str	r3, [r2, #4]
 80053dc:	e02e      	b.n	800543c <HAL_RCC_OscConfig+0x434>
 80053de:	4b48      	ldr	r3, [pc, #288]	; (8005500 <HAL_RCC_OscConfig+0x4f8>)
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	069b      	lsls	r3, r3, #26
 80053ec:	4944      	ldr	r1, [pc, #272]	; (8005500 <HAL_RCC_OscConfig+0x4f8>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	604b      	str	r3, [r1, #4]
 80053f2:	e023      	b.n	800543c <HAL_RCC_OscConfig+0x434>
 80053f4:	4b42      	ldr	r3, [pc, #264]	; (8005500 <HAL_RCC_OscConfig+0x4f8>)
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	061b      	lsls	r3, r3, #24
 8005402:	493f      	ldr	r1, [pc, #252]	; (8005500 <HAL_RCC_OscConfig+0x4f8>)
 8005404:	4313      	orrs	r3, r2
 8005406:	60cb      	str	r3, [r1, #12]
 8005408:	e018      	b.n	800543c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800540a:	4b3d      	ldr	r3, [pc, #244]	; (8005500 <HAL_RCC_OscConfig+0x4f8>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a3c      	ldr	r2, [pc, #240]	; (8005500 <HAL_RCC_OscConfig+0x4f8>)
 8005410:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005414:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005416:	f7fd ff43 	bl	80032a0 <HAL_GetTick>
 800541a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800541c:	e008      	b.n	8005430 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800541e:	f7fd ff3f 	bl	80032a0 <HAL_GetTick>
 8005422:	4602      	mov	r2, r0
 8005424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	2b02      	cmp	r3, #2
 800542a:	d901      	bls.n	8005430 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e212      	b.n	8005856 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005430:	4b33      	ldr	r3, [pc, #204]	; (8005500 <HAL_RCC_OscConfig+0x4f8>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1f0      	bne.n	800541e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0308 	and.w	r3, r3, #8
 8005444:	2b00      	cmp	r3, #0
 8005446:	d036      	beq.n	80054b6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	695b      	ldr	r3, [r3, #20]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d019      	beq.n	8005484 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005450:	4b2b      	ldr	r3, [pc, #172]	; (8005500 <HAL_RCC_OscConfig+0x4f8>)
 8005452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005454:	4a2a      	ldr	r2, [pc, #168]	; (8005500 <HAL_RCC_OscConfig+0x4f8>)
 8005456:	f043 0301 	orr.w	r3, r3, #1
 800545a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800545c:	f7fd ff20 	bl	80032a0 <HAL_GetTick>
 8005460:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005462:	e008      	b.n	8005476 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005464:	f7fd ff1c 	bl	80032a0 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	2b02      	cmp	r3, #2
 8005470:	d901      	bls.n	8005476 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e1ef      	b.n	8005856 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005476:	4b22      	ldr	r3, [pc, #136]	; (8005500 <HAL_RCC_OscConfig+0x4f8>)
 8005478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800547a:	f003 0302 	and.w	r3, r3, #2
 800547e:	2b00      	cmp	r3, #0
 8005480:	d0f0      	beq.n	8005464 <HAL_RCC_OscConfig+0x45c>
 8005482:	e018      	b.n	80054b6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005484:	4b1e      	ldr	r3, [pc, #120]	; (8005500 <HAL_RCC_OscConfig+0x4f8>)
 8005486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005488:	4a1d      	ldr	r2, [pc, #116]	; (8005500 <HAL_RCC_OscConfig+0x4f8>)
 800548a:	f023 0301 	bic.w	r3, r3, #1
 800548e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005490:	f7fd ff06 	bl	80032a0 <HAL_GetTick>
 8005494:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005496:	e008      	b.n	80054aa <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005498:	f7fd ff02 	bl	80032a0 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d901      	bls.n	80054aa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e1d5      	b.n	8005856 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80054aa:	4b15      	ldr	r3, [pc, #84]	; (8005500 <HAL_RCC_OscConfig+0x4f8>)
 80054ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054ae:	f003 0302 	and.w	r3, r3, #2
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1f0      	bne.n	8005498 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0320 	and.w	r3, r3, #32
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d039      	beq.n	8005536 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d01c      	beq.n	8005504 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80054ca:	4b0d      	ldr	r3, [pc, #52]	; (8005500 <HAL_RCC_OscConfig+0x4f8>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a0c      	ldr	r2, [pc, #48]	; (8005500 <HAL_RCC_OscConfig+0x4f8>)
 80054d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80054d4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80054d6:	f7fd fee3 	bl	80032a0 <HAL_GetTick>
 80054da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80054dc:	e008      	b.n	80054f0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80054de:	f7fd fedf 	bl	80032a0 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d901      	bls.n	80054f0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e1b2      	b.n	8005856 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80054f0:	4b03      	ldr	r3, [pc, #12]	; (8005500 <HAL_RCC_OscConfig+0x4f8>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d0f0      	beq.n	80054de <HAL_RCC_OscConfig+0x4d6>
 80054fc:	e01b      	b.n	8005536 <HAL_RCC_OscConfig+0x52e>
 80054fe:	bf00      	nop
 8005500:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005504:	4b9b      	ldr	r3, [pc, #620]	; (8005774 <HAL_RCC_OscConfig+0x76c>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a9a      	ldr	r2, [pc, #616]	; (8005774 <HAL_RCC_OscConfig+0x76c>)
 800550a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800550e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005510:	f7fd fec6 	bl	80032a0 <HAL_GetTick>
 8005514:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005516:	e008      	b.n	800552a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005518:	f7fd fec2 	bl	80032a0 <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	2b02      	cmp	r3, #2
 8005524:	d901      	bls.n	800552a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e195      	b.n	8005856 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800552a:	4b92      	ldr	r3, [pc, #584]	; (8005774 <HAL_RCC_OscConfig+0x76c>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1f0      	bne.n	8005518 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0304 	and.w	r3, r3, #4
 800553e:	2b00      	cmp	r3, #0
 8005540:	f000 8081 	beq.w	8005646 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005544:	4b8c      	ldr	r3, [pc, #560]	; (8005778 <HAL_RCC_OscConfig+0x770>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a8b      	ldr	r2, [pc, #556]	; (8005778 <HAL_RCC_OscConfig+0x770>)
 800554a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800554e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005550:	f7fd fea6 	bl	80032a0 <HAL_GetTick>
 8005554:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005556:	e008      	b.n	800556a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005558:	f7fd fea2 	bl	80032a0 <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	2b64      	cmp	r3, #100	; 0x64
 8005564:	d901      	bls.n	800556a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e175      	b.n	8005856 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800556a:	4b83      	ldr	r3, [pc, #524]	; (8005778 <HAL_RCC_OscConfig+0x770>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005572:	2b00      	cmp	r3, #0
 8005574:	d0f0      	beq.n	8005558 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	2b01      	cmp	r3, #1
 800557c:	d106      	bne.n	800558c <HAL_RCC_OscConfig+0x584>
 800557e:	4b7d      	ldr	r3, [pc, #500]	; (8005774 <HAL_RCC_OscConfig+0x76c>)
 8005580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005582:	4a7c      	ldr	r2, [pc, #496]	; (8005774 <HAL_RCC_OscConfig+0x76c>)
 8005584:	f043 0301 	orr.w	r3, r3, #1
 8005588:	6713      	str	r3, [r2, #112]	; 0x70
 800558a:	e02d      	b.n	80055e8 <HAL_RCC_OscConfig+0x5e0>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10c      	bne.n	80055ae <HAL_RCC_OscConfig+0x5a6>
 8005594:	4b77      	ldr	r3, [pc, #476]	; (8005774 <HAL_RCC_OscConfig+0x76c>)
 8005596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005598:	4a76      	ldr	r2, [pc, #472]	; (8005774 <HAL_RCC_OscConfig+0x76c>)
 800559a:	f023 0301 	bic.w	r3, r3, #1
 800559e:	6713      	str	r3, [r2, #112]	; 0x70
 80055a0:	4b74      	ldr	r3, [pc, #464]	; (8005774 <HAL_RCC_OscConfig+0x76c>)
 80055a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a4:	4a73      	ldr	r2, [pc, #460]	; (8005774 <HAL_RCC_OscConfig+0x76c>)
 80055a6:	f023 0304 	bic.w	r3, r3, #4
 80055aa:	6713      	str	r3, [r2, #112]	; 0x70
 80055ac:	e01c      	b.n	80055e8 <HAL_RCC_OscConfig+0x5e0>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	2b05      	cmp	r3, #5
 80055b4:	d10c      	bne.n	80055d0 <HAL_RCC_OscConfig+0x5c8>
 80055b6:	4b6f      	ldr	r3, [pc, #444]	; (8005774 <HAL_RCC_OscConfig+0x76c>)
 80055b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ba:	4a6e      	ldr	r2, [pc, #440]	; (8005774 <HAL_RCC_OscConfig+0x76c>)
 80055bc:	f043 0304 	orr.w	r3, r3, #4
 80055c0:	6713      	str	r3, [r2, #112]	; 0x70
 80055c2:	4b6c      	ldr	r3, [pc, #432]	; (8005774 <HAL_RCC_OscConfig+0x76c>)
 80055c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c6:	4a6b      	ldr	r2, [pc, #428]	; (8005774 <HAL_RCC_OscConfig+0x76c>)
 80055c8:	f043 0301 	orr.w	r3, r3, #1
 80055cc:	6713      	str	r3, [r2, #112]	; 0x70
 80055ce:	e00b      	b.n	80055e8 <HAL_RCC_OscConfig+0x5e0>
 80055d0:	4b68      	ldr	r3, [pc, #416]	; (8005774 <HAL_RCC_OscConfig+0x76c>)
 80055d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d4:	4a67      	ldr	r2, [pc, #412]	; (8005774 <HAL_RCC_OscConfig+0x76c>)
 80055d6:	f023 0301 	bic.w	r3, r3, #1
 80055da:	6713      	str	r3, [r2, #112]	; 0x70
 80055dc:	4b65      	ldr	r3, [pc, #404]	; (8005774 <HAL_RCC_OscConfig+0x76c>)
 80055de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e0:	4a64      	ldr	r2, [pc, #400]	; (8005774 <HAL_RCC_OscConfig+0x76c>)
 80055e2:	f023 0304 	bic.w	r3, r3, #4
 80055e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d015      	beq.n	800561c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055f0:	f7fd fe56 	bl	80032a0 <HAL_GetTick>
 80055f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055f6:	e00a      	b.n	800560e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055f8:	f7fd fe52 	bl	80032a0 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	f241 3288 	movw	r2, #5000	; 0x1388
 8005606:	4293      	cmp	r3, r2
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e123      	b.n	8005856 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800560e:	4b59      	ldr	r3, [pc, #356]	; (8005774 <HAL_RCC_OscConfig+0x76c>)
 8005610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d0ee      	beq.n	80055f8 <HAL_RCC_OscConfig+0x5f0>
 800561a:	e014      	b.n	8005646 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800561c:	f7fd fe40 	bl	80032a0 <HAL_GetTick>
 8005620:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005622:	e00a      	b.n	800563a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005624:	f7fd fe3c 	bl	80032a0 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005632:	4293      	cmp	r3, r2
 8005634:	d901      	bls.n	800563a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e10d      	b.n	8005856 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800563a:	4b4e      	ldr	r3, [pc, #312]	; (8005774 <HAL_RCC_OscConfig+0x76c>)
 800563c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1ee      	bne.n	8005624 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564a:	2b00      	cmp	r3, #0
 800564c:	f000 8102 	beq.w	8005854 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005650:	4b48      	ldr	r3, [pc, #288]	; (8005774 <HAL_RCC_OscConfig+0x76c>)
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005658:	2b18      	cmp	r3, #24
 800565a:	f000 80bd 	beq.w	80057d8 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005662:	2b02      	cmp	r3, #2
 8005664:	f040 809e 	bne.w	80057a4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005668:	4b42      	ldr	r3, [pc, #264]	; (8005774 <HAL_RCC_OscConfig+0x76c>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a41      	ldr	r2, [pc, #260]	; (8005774 <HAL_RCC_OscConfig+0x76c>)
 800566e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005672:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005674:	f7fd fe14 	bl	80032a0 <HAL_GetTick>
 8005678:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800567a:	e008      	b.n	800568e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800567c:	f7fd fe10 	bl	80032a0 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	2b02      	cmp	r3, #2
 8005688:	d901      	bls.n	800568e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e0e3      	b.n	8005856 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800568e:	4b39      	ldr	r3, [pc, #228]	; (8005774 <HAL_RCC_OscConfig+0x76c>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1f0      	bne.n	800567c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800569a:	4b36      	ldr	r3, [pc, #216]	; (8005774 <HAL_RCC_OscConfig+0x76c>)
 800569c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800569e:	4b37      	ldr	r3, [pc, #220]	; (800577c <HAL_RCC_OscConfig+0x774>)
 80056a0:	4013      	ands	r3, r2
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80056aa:	0112      	lsls	r2, r2, #4
 80056ac:	430a      	orrs	r2, r1
 80056ae:	4931      	ldr	r1, [pc, #196]	; (8005774 <HAL_RCC_OscConfig+0x76c>)
 80056b0:	4313      	orrs	r3, r2
 80056b2:	628b      	str	r3, [r1, #40]	; 0x28
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b8:	3b01      	subs	r3, #1
 80056ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c2:	3b01      	subs	r3, #1
 80056c4:	025b      	lsls	r3, r3, #9
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	431a      	orrs	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ce:	3b01      	subs	r3, #1
 80056d0:	041b      	lsls	r3, r3, #16
 80056d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80056d6:	431a      	orrs	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056dc:	3b01      	subs	r3, #1
 80056de:	061b      	lsls	r3, r3, #24
 80056e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80056e4:	4923      	ldr	r1, [pc, #140]	; (8005774 <HAL_RCC_OscConfig+0x76c>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80056ea:	4b22      	ldr	r3, [pc, #136]	; (8005774 <HAL_RCC_OscConfig+0x76c>)
 80056ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ee:	4a21      	ldr	r2, [pc, #132]	; (8005774 <HAL_RCC_OscConfig+0x76c>)
 80056f0:	f023 0301 	bic.w	r3, r3, #1
 80056f4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80056f6:	4b1f      	ldr	r3, [pc, #124]	; (8005774 <HAL_RCC_OscConfig+0x76c>)
 80056f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056fa:	4b21      	ldr	r3, [pc, #132]	; (8005780 <HAL_RCC_OscConfig+0x778>)
 80056fc:	4013      	ands	r3, r2
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005702:	00d2      	lsls	r2, r2, #3
 8005704:	491b      	ldr	r1, [pc, #108]	; (8005774 <HAL_RCC_OscConfig+0x76c>)
 8005706:	4313      	orrs	r3, r2
 8005708:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800570a:	4b1a      	ldr	r3, [pc, #104]	; (8005774 <HAL_RCC_OscConfig+0x76c>)
 800570c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800570e:	f023 020c 	bic.w	r2, r3, #12
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005716:	4917      	ldr	r1, [pc, #92]	; (8005774 <HAL_RCC_OscConfig+0x76c>)
 8005718:	4313      	orrs	r3, r2
 800571a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800571c:	4b15      	ldr	r3, [pc, #84]	; (8005774 <HAL_RCC_OscConfig+0x76c>)
 800571e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005720:	f023 0202 	bic.w	r2, r3, #2
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005728:	4912      	ldr	r1, [pc, #72]	; (8005774 <HAL_RCC_OscConfig+0x76c>)
 800572a:	4313      	orrs	r3, r2
 800572c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800572e:	4b11      	ldr	r3, [pc, #68]	; (8005774 <HAL_RCC_OscConfig+0x76c>)
 8005730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005732:	4a10      	ldr	r2, [pc, #64]	; (8005774 <HAL_RCC_OscConfig+0x76c>)
 8005734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005738:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800573a:	4b0e      	ldr	r3, [pc, #56]	; (8005774 <HAL_RCC_OscConfig+0x76c>)
 800573c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573e:	4a0d      	ldr	r2, [pc, #52]	; (8005774 <HAL_RCC_OscConfig+0x76c>)
 8005740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005744:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005746:	4b0b      	ldr	r3, [pc, #44]	; (8005774 <HAL_RCC_OscConfig+0x76c>)
 8005748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574a:	4a0a      	ldr	r2, [pc, #40]	; (8005774 <HAL_RCC_OscConfig+0x76c>)
 800574c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005750:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005752:	4b08      	ldr	r3, [pc, #32]	; (8005774 <HAL_RCC_OscConfig+0x76c>)
 8005754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005756:	4a07      	ldr	r2, [pc, #28]	; (8005774 <HAL_RCC_OscConfig+0x76c>)
 8005758:	f043 0301 	orr.w	r3, r3, #1
 800575c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800575e:	4b05      	ldr	r3, [pc, #20]	; (8005774 <HAL_RCC_OscConfig+0x76c>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a04      	ldr	r2, [pc, #16]	; (8005774 <HAL_RCC_OscConfig+0x76c>)
 8005764:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005768:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800576a:	f7fd fd99 	bl	80032a0 <HAL_GetTick>
 800576e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005770:	e011      	b.n	8005796 <HAL_RCC_OscConfig+0x78e>
 8005772:	bf00      	nop
 8005774:	58024400 	.word	0x58024400
 8005778:	58024800 	.word	0x58024800
 800577c:	fffffc0c 	.word	0xfffffc0c
 8005780:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005784:	f7fd fd8c 	bl	80032a0 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b02      	cmp	r3, #2
 8005790:	d901      	bls.n	8005796 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e05f      	b.n	8005856 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005796:	4b32      	ldr	r3, [pc, #200]	; (8005860 <HAL_RCC_OscConfig+0x858>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d0f0      	beq.n	8005784 <HAL_RCC_OscConfig+0x77c>
 80057a2:	e057      	b.n	8005854 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057a4:	4b2e      	ldr	r3, [pc, #184]	; (8005860 <HAL_RCC_OscConfig+0x858>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a2d      	ldr	r2, [pc, #180]	; (8005860 <HAL_RCC_OscConfig+0x858>)
 80057aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b0:	f7fd fd76 	bl	80032a0 <HAL_GetTick>
 80057b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80057b6:	e008      	b.n	80057ca <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057b8:	f7fd fd72 	bl	80032a0 <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d901      	bls.n	80057ca <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e045      	b.n	8005856 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80057ca:	4b25      	ldr	r3, [pc, #148]	; (8005860 <HAL_RCC_OscConfig+0x858>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1f0      	bne.n	80057b8 <HAL_RCC_OscConfig+0x7b0>
 80057d6:	e03d      	b.n	8005854 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80057d8:	4b21      	ldr	r3, [pc, #132]	; (8005860 <HAL_RCC_OscConfig+0x858>)
 80057da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057dc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80057de:	4b20      	ldr	r3, [pc, #128]	; (8005860 <HAL_RCC_OscConfig+0x858>)
 80057e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d031      	beq.n	8005850 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	f003 0203 	and.w	r2, r3, #3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d12a      	bne.n	8005850 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	091b      	lsrs	r3, r3, #4
 80057fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005806:	429a      	cmp	r2, r3
 8005808:	d122      	bne.n	8005850 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005814:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005816:	429a      	cmp	r2, r3
 8005818:	d11a      	bne.n	8005850 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	0a5b      	lsrs	r3, r3, #9
 800581e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005826:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005828:	429a      	cmp	r2, r3
 800582a:	d111      	bne.n	8005850 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	0c1b      	lsrs	r3, r3, #16
 8005830:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005838:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800583a:	429a      	cmp	r2, r3
 800583c:	d108      	bne.n	8005850 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	0e1b      	lsrs	r3, r3, #24
 8005842:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800584a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800584c:	429a      	cmp	r2, r3
 800584e:	d001      	beq.n	8005854 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e000      	b.n	8005856 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3730      	adds	r7, #48	; 0x30
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	58024400 	.word	0x58024400

08005864 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b086      	sub	sp, #24
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d101      	bne.n	8005878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e19c      	b.n	8005bb2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005878:	4b8a      	ldr	r3, [pc, #552]	; (8005aa4 <HAL_RCC_ClockConfig+0x240>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 030f 	and.w	r3, r3, #15
 8005880:	683a      	ldr	r2, [r7, #0]
 8005882:	429a      	cmp	r2, r3
 8005884:	d910      	bls.n	80058a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005886:	4b87      	ldr	r3, [pc, #540]	; (8005aa4 <HAL_RCC_ClockConfig+0x240>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f023 020f 	bic.w	r2, r3, #15
 800588e:	4985      	ldr	r1, [pc, #532]	; (8005aa4 <HAL_RCC_ClockConfig+0x240>)
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	4313      	orrs	r3, r2
 8005894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005896:	4b83      	ldr	r3, [pc, #524]	; (8005aa4 <HAL_RCC_ClockConfig+0x240>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 030f 	and.w	r3, r3, #15
 800589e:	683a      	ldr	r2, [r7, #0]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d001      	beq.n	80058a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e184      	b.n	8005bb2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d010      	beq.n	80058d6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	691a      	ldr	r2, [r3, #16]
 80058b8:	4b7b      	ldr	r3, [pc, #492]	; (8005aa8 <HAL_RCC_ClockConfig+0x244>)
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d908      	bls.n	80058d6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80058c4:	4b78      	ldr	r3, [pc, #480]	; (8005aa8 <HAL_RCC_ClockConfig+0x244>)
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	4975      	ldr	r1, [pc, #468]	; (8005aa8 <HAL_RCC_ClockConfig+0x244>)
 80058d2:	4313      	orrs	r3, r2
 80058d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0308 	and.w	r3, r3, #8
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d010      	beq.n	8005904 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	695a      	ldr	r2, [r3, #20]
 80058e6:	4b70      	ldr	r3, [pc, #448]	; (8005aa8 <HAL_RCC_ClockConfig+0x244>)
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d908      	bls.n	8005904 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80058f2:	4b6d      	ldr	r3, [pc, #436]	; (8005aa8 <HAL_RCC_ClockConfig+0x244>)
 80058f4:	69db      	ldr	r3, [r3, #28]
 80058f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	496a      	ldr	r1, [pc, #424]	; (8005aa8 <HAL_RCC_ClockConfig+0x244>)
 8005900:	4313      	orrs	r3, r2
 8005902:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0310 	and.w	r3, r3, #16
 800590c:	2b00      	cmp	r3, #0
 800590e:	d010      	beq.n	8005932 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	699a      	ldr	r2, [r3, #24]
 8005914:	4b64      	ldr	r3, [pc, #400]	; (8005aa8 <HAL_RCC_ClockConfig+0x244>)
 8005916:	69db      	ldr	r3, [r3, #28]
 8005918:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800591c:	429a      	cmp	r2, r3
 800591e:	d908      	bls.n	8005932 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005920:	4b61      	ldr	r3, [pc, #388]	; (8005aa8 <HAL_RCC_ClockConfig+0x244>)
 8005922:	69db      	ldr	r3, [r3, #28]
 8005924:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	495e      	ldr	r1, [pc, #376]	; (8005aa8 <HAL_RCC_ClockConfig+0x244>)
 800592e:	4313      	orrs	r3, r2
 8005930:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0320 	and.w	r3, r3, #32
 800593a:	2b00      	cmp	r3, #0
 800593c:	d010      	beq.n	8005960 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	69da      	ldr	r2, [r3, #28]
 8005942:	4b59      	ldr	r3, [pc, #356]	; (8005aa8 <HAL_RCC_ClockConfig+0x244>)
 8005944:	6a1b      	ldr	r3, [r3, #32]
 8005946:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800594a:	429a      	cmp	r2, r3
 800594c:	d908      	bls.n	8005960 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800594e:	4b56      	ldr	r3, [pc, #344]	; (8005aa8 <HAL_RCC_ClockConfig+0x244>)
 8005950:	6a1b      	ldr	r3, [r3, #32]
 8005952:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	69db      	ldr	r3, [r3, #28]
 800595a:	4953      	ldr	r1, [pc, #332]	; (8005aa8 <HAL_RCC_ClockConfig+0x244>)
 800595c:	4313      	orrs	r3, r2
 800595e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0302 	and.w	r3, r3, #2
 8005968:	2b00      	cmp	r3, #0
 800596a:	d010      	beq.n	800598e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	68da      	ldr	r2, [r3, #12]
 8005970:	4b4d      	ldr	r3, [pc, #308]	; (8005aa8 <HAL_RCC_ClockConfig+0x244>)
 8005972:	699b      	ldr	r3, [r3, #24]
 8005974:	f003 030f 	and.w	r3, r3, #15
 8005978:	429a      	cmp	r2, r3
 800597a:	d908      	bls.n	800598e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800597c:	4b4a      	ldr	r3, [pc, #296]	; (8005aa8 <HAL_RCC_ClockConfig+0x244>)
 800597e:	699b      	ldr	r3, [r3, #24]
 8005980:	f023 020f 	bic.w	r2, r3, #15
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	4947      	ldr	r1, [pc, #284]	; (8005aa8 <HAL_RCC_ClockConfig+0x244>)
 800598a:	4313      	orrs	r3, r2
 800598c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0301 	and.w	r3, r3, #1
 8005996:	2b00      	cmp	r3, #0
 8005998:	d055      	beq.n	8005a46 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800599a:	4b43      	ldr	r3, [pc, #268]	; (8005aa8 <HAL_RCC_ClockConfig+0x244>)
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	4940      	ldr	r1, [pc, #256]	; (8005aa8 <HAL_RCC_ClockConfig+0x244>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d107      	bne.n	80059c4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80059b4:	4b3c      	ldr	r3, [pc, #240]	; (8005aa8 <HAL_RCC_ClockConfig+0x244>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d121      	bne.n	8005a04 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e0f6      	b.n	8005bb2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	2b03      	cmp	r3, #3
 80059ca:	d107      	bne.n	80059dc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059cc:	4b36      	ldr	r3, [pc, #216]	; (8005aa8 <HAL_RCC_ClockConfig+0x244>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d115      	bne.n	8005a04 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e0ea      	b.n	8005bb2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d107      	bne.n	80059f4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80059e4:	4b30      	ldr	r3, [pc, #192]	; (8005aa8 <HAL_RCC_ClockConfig+0x244>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d109      	bne.n	8005a04 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e0de      	b.n	8005bb2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059f4:	4b2c      	ldr	r3, [pc, #176]	; (8005aa8 <HAL_RCC_ClockConfig+0x244>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0304 	and.w	r3, r3, #4
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d101      	bne.n	8005a04 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e0d6      	b.n	8005bb2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a04:	4b28      	ldr	r3, [pc, #160]	; (8005aa8 <HAL_RCC_ClockConfig+0x244>)
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	f023 0207 	bic.w	r2, r3, #7
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	4925      	ldr	r1, [pc, #148]	; (8005aa8 <HAL_RCC_ClockConfig+0x244>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a16:	f7fd fc43 	bl	80032a0 <HAL_GetTick>
 8005a1a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a1c:	e00a      	b.n	8005a34 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a1e:	f7fd fc3f 	bl	80032a0 <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d901      	bls.n	8005a34 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e0be      	b.n	8005bb2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a34:	4b1c      	ldr	r3, [pc, #112]	; (8005aa8 <HAL_RCC_ClockConfig+0x244>)
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	00db      	lsls	r3, r3, #3
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d1eb      	bne.n	8005a1e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 0302 	and.w	r3, r3, #2
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d010      	beq.n	8005a74 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	68da      	ldr	r2, [r3, #12]
 8005a56:	4b14      	ldr	r3, [pc, #80]	; (8005aa8 <HAL_RCC_ClockConfig+0x244>)
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	f003 030f 	and.w	r3, r3, #15
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d208      	bcs.n	8005a74 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a62:	4b11      	ldr	r3, [pc, #68]	; (8005aa8 <HAL_RCC_ClockConfig+0x244>)
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	f023 020f 	bic.w	r2, r3, #15
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	490e      	ldr	r1, [pc, #56]	; (8005aa8 <HAL_RCC_ClockConfig+0x244>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a74:	4b0b      	ldr	r3, [pc, #44]	; (8005aa4 <HAL_RCC_ClockConfig+0x240>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 030f 	and.w	r3, r3, #15
 8005a7c:	683a      	ldr	r2, [r7, #0]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d214      	bcs.n	8005aac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a82:	4b08      	ldr	r3, [pc, #32]	; (8005aa4 <HAL_RCC_ClockConfig+0x240>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f023 020f 	bic.w	r2, r3, #15
 8005a8a:	4906      	ldr	r1, [pc, #24]	; (8005aa4 <HAL_RCC_ClockConfig+0x240>)
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a92:	4b04      	ldr	r3, [pc, #16]	; (8005aa4 <HAL_RCC_ClockConfig+0x240>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 030f 	and.w	r3, r3, #15
 8005a9a:	683a      	ldr	r2, [r7, #0]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d005      	beq.n	8005aac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e086      	b.n	8005bb2 <HAL_RCC_ClockConfig+0x34e>
 8005aa4:	52002000 	.word	0x52002000
 8005aa8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 0304 	and.w	r3, r3, #4
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d010      	beq.n	8005ada <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	691a      	ldr	r2, [r3, #16]
 8005abc:	4b3f      	ldr	r3, [pc, #252]	; (8005bbc <HAL_RCC_ClockConfig+0x358>)
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d208      	bcs.n	8005ada <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005ac8:	4b3c      	ldr	r3, [pc, #240]	; (8005bbc <HAL_RCC_ClockConfig+0x358>)
 8005aca:	699b      	ldr	r3, [r3, #24]
 8005acc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	4939      	ldr	r1, [pc, #228]	; (8005bbc <HAL_RCC_ClockConfig+0x358>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0308 	and.w	r3, r3, #8
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d010      	beq.n	8005b08 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	695a      	ldr	r2, [r3, #20]
 8005aea:	4b34      	ldr	r3, [pc, #208]	; (8005bbc <HAL_RCC_ClockConfig+0x358>)
 8005aec:	69db      	ldr	r3, [r3, #28]
 8005aee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d208      	bcs.n	8005b08 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005af6:	4b31      	ldr	r3, [pc, #196]	; (8005bbc <HAL_RCC_ClockConfig+0x358>)
 8005af8:	69db      	ldr	r3, [r3, #28]
 8005afa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	492e      	ldr	r1, [pc, #184]	; (8005bbc <HAL_RCC_ClockConfig+0x358>)
 8005b04:	4313      	orrs	r3, r2
 8005b06:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0310 	and.w	r3, r3, #16
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d010      	beq.n	8005b36 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	699a      	ldr	r2, [r3, #24]
 8005b18:	4b28      	ldr	r3, [pc, #160]	; (8005bbc <HAL_RCC_ClockConfig+0x358>)
 8005b1a:	69db      	ldr	r3, [r3, #28]
 8005b1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d208      	bcs.n	8005b36 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005b24:	4b25      	ldr	r3, [pc, #148]	; (8005bbc <HAL_RCC_ClockConfig+0x358>)
 8005b26:	69db      	ldr	r3, [r3, #28]
 8005b28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	4922      	ldr	r1, [pc, #136]	; (8005bbc <HAL_RCC_ClockConfig+0x358>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0320 	and.w	r3, r3, #32
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d010      	beq.n	8005b64 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	69da      	ldr	r2, [r3, #28]
 8005b46:	4b1d      	ldr	r3, [pc, #116]	; (8005bbc <HAL_RCC_ClockConfig+0x358>)
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d208      	bcs.n	8005b64 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005b52:	4b1a      	ldr	r3, [pc, #104]	; (8005bbc <HAL_RCC_ClockConfig+0x358>)
 8005b54:	6a1b      	ldr	r3, [r3, #32]
 8005b56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	69db      	ldr	r3, [r3, #28]
 8005b5e:	4917      	ldr	r1, [pc, #92]	; (8005bbc <HAL_RCC_ClockConfig+0x358>)
 8005b60:	4313      	orrs	r3, r2
 8005b62:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005b64:	f000 f834 	bl	8005bd0 <HAL_RCC_GetSysClockFreq>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	4b14      	ldr	r3, [pc, #80]	; (8005bbc <HAL_RCC_ClockConfig+0x358>)
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	0a1b      	lsrs	r3, r3, #8
 8005b70:	f003 030f 	and.w	r3, r3, #15
 8005b74:	4912      	ldr	r1, [pc, #72]	; (8005bc0 <HAL_RCC_ClockConfig+0x35c>)
 8005b76:	5ccb      	ldrb	r3, [r1, r3]
 8005b78:	f003 031f 	and.w	r3, r3, #31
 8005b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b80:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005b82:	4b0e      	ldr	r3, [pc, #56]	; (8005bbc <HAL_RCC_ClockConfig+0x358>)
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	f003 030f 	and.w	r3, r3, #15
 8005b8a:	4a0d      	ldr	r2, [pc, #52]	; (8005bc0 <HAL_RCC_ClockConfig+0x35c>)
 8005b8c:	5cd3      	ldrb	r3, [r2, r3]
 8005b8e:	f003 031f 	and.w	r3, r3, #31
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	fa22 f303 	lsr.w	r3, r2, r3
 8005b98:	4a0a      	ldr	r2, [pc, #40]	; (8005bc4 <HAL_RCC_ClockConfig+0x360>)
 8005b9a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005b9c:	4a0a      	ldr	r2, [pc, #40]	; (8005bc8 <HAL_RCC_ClockConfig+0x364>)
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005ba2:	4b0a      	ldr	r3, [pc, #40]	; (8005bcc <HAL_RCC_ClockConfig+0x368>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7fd fb30 	bl	800320c <HAL_InitTick>
 8005bac:	4603      	mov	r3, r0
 8005bae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3718      	adds	r7, #24
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	58024400 	.word	0x58024400
 8005bc0:	080098d0 	.word	0x080098d0
 8005bc4:	24000004 	.word	0x24000004
 8005bc8:	24000000 	.word	0x24000000
 8005bcc:	24000234 	.word	0x24000234

08005bd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b089      	sub	sp, #36	; 0x24
 8005bd4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bd6:	4bb3      	ldr	r3, [pc, #716]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bde:	2b18      	cmp	r3, #24
 8005be0:	f200 8155 	bhi.w	8005e8e <HAL_RCC_GetSysClockFreq+0x2be>
 8005be4:	a201      	add	r2, pc, #4	; (adr r2, 8005bec <HAL_RCC_GetSysClockFreq+0x1c>)
 8005be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bea:	bf00      	nop
 8005bec:	08005c51 	.word	0x08005c51
 8005bf0:	08005e8f 	.word	0x08005e8f
 8005bf4:	08005e8f 	.word	0x08005e8f
 8005bf8:	08005e8f 	.word	0x08005e8f
 8005bfc:	08005e8f 	.word	0x08005e8f
 8005c00:	08005e8f 	.word	0x08005e8f
 8005c04:	08005e8f 	.word	0x08005e8f
 8005c08:	08005e8f 	.word	0x08005e8f
 8005c0c:	08005c77 	.word	0x08005c77
 8005c10:	08005e8f 	.word	0x08005e8f
 8005c14:	08005e8f 	.word	0x08005e8f
 8005c18:	08005e8f 	.word	0x08005e8f
 8005c1c:	08005e8f 	.word	0x08005e8f
 8005c20:	08005e8f 	.word	0x08005e8f
 8005c24:	08005e8f 	.word	0x08005e8f
 8005c28:	08005e8f 	.word	0x08005e8f
 8005c2c:	08005c7d 	.word	0x08005c7d
 8005c30:	08005e8f 	.word	0x08005e8f
 8005c34:	08005e8f 	.word	0x08005e8f
 8005c38:	08005e8f 	.word	0x08005e8f
 8005c3c:	08005e8f 	.word	0x08005e8f
 8005c40:	08005e8f 	.word	0x08005e8f
 8005c44:	08005e8f 	.word	0x08005e8f
 8005c48:	08005e8f 	.word	0x08005e8f
 8005c4c:	08005c83 	.word	0x08005c83
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c50:	4b94      	ldr	r3, [pc, #592]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 0320 	and.w	r3, r3, #32
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d009      	beq.n	8005c70 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005c5c:	4b91      	ldr	r3, [pc, #580]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	08db      	lsrs	r3, r3, #3
 8005c62:	f003 0303 	and.w	r3, r3, #3
 8005c66:	4a90      	ldr	r2, [pc, #576]	; (8005ea8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005c68:	fa22 f303 	lsr.w	r3, r2, r3
 8005c6c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005c6e:	e111      	b.n	8005e94 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005c70:	4b8d      	ldr	r3, [pc, #564]	; (8005ea8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005c72:	61bb      	str	r3, [r7, #24]
    break;
 8005c74:	e10e      	b.n	8005e94 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005c76:	4b8d      	ldr	r3, [pc, #564]	; (8005eac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005c78:	61bb      	str	r3, [r7, #24]
    break;
 8005c7a:	e10b      	b.n	8005e94 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005c7c:	4b8c      	ldr	r3, [pc, #560]	; (8005eb0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005c7e:	61bb      	str	r3, [r7, #24]
    break;
 8005c80:	e108      	b.n	8005e94 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c82:	4b88      	ldr	r3, [pc, #544]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c86:	f003 0303 	and.w	r3, r3, #3
 8005c8a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005c8c:	4b85      	ldr	r3, [pc, #532]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c90:	091b      	lsrs	r3, r3, #4
 8005c92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c96:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005c98:	4b82      	ldr	r3, [pc, #520]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9c:	f003 0301 	and.w	r3, r3, #1
 8005ca0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005ca2:	4b80      	ldr	r3, [pc, #512]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ca6:	08db      	lsrs	r3, r3, #3
 8005ca8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	fb02 f303 	mul.w	r3, r2, r3
 8005cb2:	ee07 3a90 	vmov	s15, r3
 8005cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cba:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f000 80e1 	beq.w	8005e88 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	f000 8083 	beq.w	8005dd4 <HAL_RCC_GetSysClockFreq+0x204>
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	f200 80a1 	bhi.w	8005e18 <HAL_RCC_GetSysClockFreq+0x248>
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d003      	beq.n	8005ce4 <HAL_RCC_GetSysClockFreq+0x114>
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d056      	beq.n	8005d90 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005ce2:	e099      	b.n	8005e18 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ce4:	4b6f      	ldr	r3, [pc, #444]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 0320 	and.w	r3, r3, #32
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d02d      	beq.n	8005d4c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005cf0:	4b6c      	ldr	r3, [pc, #432]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	08db      	lsrs	r3, r3, #3
 8005cf6:	f003 0303 	and.w	r3, r3, #3
 8005cfa:	4a6b      	ldr	r2, [pc, #428]	; (8005ea8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8005d00:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	ee07 3a90 	vmov	s15, r3
 8005d08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	ee07 3a90 	vmov	s15, r3
 8005d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d1a:	4b62      	ldr	r3, [pc, #392]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d22:	ee07 3a90 	vmov	s15, r3
 8005d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d2e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005eb4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d46:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005d4a:	e087      	b.n	8005e5c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	ee07 3a90 	vmov	s15, r3
 8005d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d56:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005eb8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005d5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d5e:	4b51      	ldr	r3, [pc, #324]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d66:	ee07 3a90 	vmov	s15, r3
 8005d6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d72:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005eb4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d8e:	e065      	b.n	8005e5c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	ee07 3a90 	vmov	s15, r3
 8005d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d9a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005ebc <HAL_RCC_GetSysClockFreq+0x2ec>
 8005d9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005da2:	4b40      	ldr	r3, [pc, #256]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005daa:	ee07 3a90 	vmov	s15, r3
 8005dae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005db2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005db6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005eb4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005dba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005dd2:	e043      	b.n	8005e5c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	ee07 3a90 	vmov	s15, r3
 8005dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dde:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005ec0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005de2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005de6:	4b2f      	ldr	r3, [pc, #188]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dee:	ee07 3a90 	vmov	s15, r3
 8005df2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005df6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005dfa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005eb4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005dfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e16:	e021      	b.n	8005e5c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	ee07 3a90 	vmov	s15, r3
 8005e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e22:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005ebc <HAL_RCC_GetSysClockFreq+0x2ec>
 8005e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e2a:	4b1e      	ldr	r3, [pc, #120]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e32:	ee07 3a90 	vmov	s15, r3
 8005e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e3e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005eb4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e5a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005e5c:	4b11      	ldr	r3, [pc, #68]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e60:	0a5b      	lsrs	r3, r3, #9
 8005e62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e66:	3301      	adds	r3, #1
 8005e68:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	ee07 3a90 	vmov	s15, r3
 8005e70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005e74:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e80:	ee17 3a90 	vmov	r3, s15
 8005e84:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005e86:	e005      	b.n	8005e94 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	61bb      	str	r3, [r7, #24]
    break;
 8005e8c:	e002      	b.n	8005e94 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005e8e:	4b07      	ldr	r3, [pc, #28]	; (8005eac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005e90:	61bb      	str	r3, [r7, #24]
    break;
 8005e92:	bf00      	nop
  }

  return sysclockfreq;
 8005e94:	69bb      	ldr	r3, [r7, #24]
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3724      	adds	r7, #36	; 0x24
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	58024400 	.word	0x58024400
 8005ea8:	03d09000 	.word	0x03d09000
 8005eac:	003d0900 	.word	0x003d0900
 8005eb0:	007a1200 	.word	0x007a1200
 8005eb4:	46000000 	.word	0x46000000
 8005eb8:	4c742400 	.word	0x4c742400
 8005ebc:	4a742400 	.word	0x4a742400
 8005ec0:	4af42400 	.word	0x4af42400

08005ec4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005eca:	f7ff fe81 	bl	8005bd0 <HAL_RCC_GetSysClockFreq>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	4b10      	ldr	r3, [pc, #64]	; (8005f14 <HAL_RCC_GetHCLKFreq+0x50>)
 8005ed2:	699b      	ldr	r3, [r3, #24]
 8005ed4:	0a1b      	lsrs	r3, r3, #8
 8005ed6:	f003 030f 	and.w	r3, r3, #15
 8005eda:	490f      	ldr	r1, [pc, #60]	; (8005f18 <HAL_RCC_GetHCLKFreq+0x54>)
 8005edc:	5ccb      	ldrb	r3, [r1, r3]
 8005ede:	f003 031f 	and.w	r3, r3, #31
 8005ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ee6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ee8:	4b0a      	ldr	r3, [pc, #40]	; (8005f14 <HAL_RCC_GetHCLKFreq+0x50>)
 8005eea:	699b      	ldr	r3, [r3, #24]
 8005eec:	f003 030f 	and.w	r3, r3, #15
 8005ef0:	4a09      	ldr	r2, [pc, #36]	; (8005f18 <HAL_RCC_GetHCLKFreq+0x54>)
 8005ef2:	5cd3      	ldrb	r3, [r2, r3]
 8005ef4:	f003 031f 	and.w	r3, r3, #31
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	fa22 f303 	lsr.w	r3, r2, r3
 8005efe:	4a07      	ldr	r2, [pc, #28]	; (8005f1c <HAL_RCC_GetHCLKFreq+0x58>)
 8005f00:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005f02:	4a07      	ldr	r2, [pc, #28]	; (8005f20 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005f08:	4b04      	ldr	r3, [pc, #16]	; (8005f1c <HAL_RCC_GetHCLKFreq+0x58>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3708      	adds	r7, #8
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	58024400 	.word	0x58024400
 8005f18:	080098d0 	.word	0x080098d0
 8005f1c:	24000004 	.word	0x24000004
 8005f20:	24000000 	.word	0x24000000

08005f24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005f28:	f7ff ffcc 	bl	8005ec4 <HAL_RCC_GetHCLKFreq>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	4b06      	ldr	r3, [pc, #24]	; (8005f48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f30:	69db      	ldr	r3, [r3, #28]
 8005f32:	091b      	lsrs	r3, r3, #4
 8005f34:	f003 0307 	and.w	r3, r3, #7
 8005f38:	4904      	ldr	r1, [pc, #16]	; (8005f4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f3a:	5ccb      	ldrb	r3, [r1, r3]
 8005f3c:	f003 031f 	and.w	r3, r3, #31
 8005f40:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	58024400 	.word	0x58024400
 8005f4c:	080098d0 	.word	0x080098d0

08005f50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005f54:	f7ff ffb6 	bl	8005ec4 <HAL_RCC_GetHCLKFreq>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	4b06      	ldr	r3, [pc, #24]	; (8005f74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f5c:	69db      	ldr	r3, [r3, #28]
 8005f5e:	0a1b      	lsrs	r3, r3, #8
 8005f60:	f003 0307 	and.w	r3, r3, #7
 8005f64:	4904      	ldr	r1, [pc, #16]	; (8005f78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f66:	5ccb      	ldrb	r3, [r1, r3]
 8005f68:	f003 031f 	and.w	r3, r3, #31
 8005f6c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	58024400 	.word	0x58024400
 8005f78:	080098d0 	.word	0x080098d0

08005f7c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b086      	sub	sp, #24
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005f84:	2300      	movs	r3, #0
 8005f86:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005f88:	2300      	movs	r3, #0
 8005f8a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d03f      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f9c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005fa0:	d02a      	beq.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005fa2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005fa6:	d824      	bhi.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005fa8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005fac:	d018      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005fae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005fb2:	d81e      	bhi.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d003      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005fb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fbc:	d007      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005fbe:	e018      	b.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fc0:	4ba3      	ldr	r3, [pc, #652]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc4:	4aa2      	ldr	r2, [pc, #648]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005fc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005fcc:	e015      	b.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	3304      	adds	r3, #4
 8005fd2:	2102      	movs	r1, #2
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f001 f9d5 	bl	8007384 <RCCEx_PLL2_Config>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005fde:	e00c      	b.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	3324      	adds	r3, #36	; 0x24
 8005fe4:	2102      	movs	r1, #2
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f001 fa7e 	bl	80074e8 <RCCEx_PLL3_Config>
 8005fec:	4603      	mov	r3, r0
 8005fee:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005ff0:	e003      	b.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	75fb      	strb	r3, [r7, #23]
      break;
 8005ff6:	e000      	b.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005ff8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ffa:	7dfb      	ldrb	r3, [r7, #23]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d109      	bne.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006000:	4b93      	ldr	r3, [pc, #588]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006004:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800600c:	4990      	ldr	r1, [pc, #576]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800600e:	4313      	orrs	r3, r2
 8006010:	650b      	str	r3, [r1, #80]	; 0x50
 8006012:	e001      	b.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006014:	7dfb      	ldrb	r3, [r7, #23]
 8006016:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006020:	2b00      	cmp	r3, #0
 8006022:	d03d      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006028:	2b04      	cmp	r3, #4
 800602a:	d826      	bhi.n	800607a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800602c:	a201      	add	r2, pc, #4	; (adr r2, 8006034 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800602e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006032:	bf00      	nop
 8006034:	08006049 	.word	0x08006049
 8006038:	08006057 	.word	0x08006057
 800603c:	08006069 	.word	0x08006069
 8006040:	08006081 	.word	0x08006081
 8006044:	08006081 	.word	0x08006081
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006048:	4b81      	ldr	r3, [pc, #516]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800604a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604c:	4a80      	ldr	r2, [pc, #512]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800604e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006052:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006054:	e015      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	3304      	adds	r3, #4
 800605a:	2100      	movs	r1, #0
 800605c:	4618      	mov	r0, r3
 800605e:	f001 f991 	bl	8007384 <RCCEx_PLL2_Config>
 8006062:	4603      	mov	r3, r0
 8006064:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006066:	e00c      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	3324      	adds	r3, #36	; 0x24
 800606c:	2100      	movs	r1, #0
 800606e:	4618      	mov	r0, r3
 8006070:	f001 fa3a 	bl	80074e8 <RCCEx_PLL3_Config>
 8006074:	4603      	mov	r3, r0
 8006076:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006078:	e003      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	75fb      	strb	r3, [r7, #23]
      break;
 800607e:	e000      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006080:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006082:	7dfb      	ldrb	r3, [r7, #23]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d109      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006088:	4b71      	ldr	r3, [pc, #452]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800608a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800608c:	f023 0207 	bic.w	r2, r3, #7
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006094:	496e      	ldr	r1, [pc, #440]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006096:	4313      	orrs	r3, r2
 8006098:	650b      	str	r3, [r1, #80]	; 0x50
 800609a:	e001      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800609c:	7dfb      	ldrb	r3, [r7, #23]
 800609e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d042      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060b4:	d02b      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x192>
 80060b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060ba:	d825      	bhi.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80060bc:	2bc0      	cmp	r3, #192	; 0xc0
 80060be:	d028      	beq.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80060c0:	2bc0      	cmp	r3, #192	; 0xc0
 80060c2:	d821      	bhi.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80060c4:	2b80      	cmp	r3, #128	; 0x80
 80060c6:	d016      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80060c8:	2b80      	cmp	r3, #128	; 0x80
 80060ca:	d81d      	bhi.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d002      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80060d0:	2b40      	cmp	r3, #64	; 0x40
 80060d2:	d007      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80060d4:	e018      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060d6:	4b5e      	ldr	r3, [pc, #376]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80060d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060da:	4a5d      	ldr	r2, [pc, #372]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80060dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80060e2:	e017      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	3304      	adds	r3, #4
 80060e8:	2100      	movs	r1, #0
 80060ea:	4618      	mov	r0, r3
 80060ec:	f001 f94a 	bl	8007384 <RCCEx_PLL2_Config>
 80060f0:	4603      	mov	r3, r0
 80060f2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80060f4:	e00e      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	3324      	adds	r3, #36	; 0x24
 80060fa:	2100      	movs	r1, #0
 80060fc:	4618      	mov	r0, r3
 80060fe:	f001 f9f3 	bl	80074e8 <RCCEx_PLL3_Config>
 8006102:	4603      	mov	r3, r0
 8006104:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006106:	e005      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	75fb      	strb	r3, [r7, #23]
      break;
 800610c:	e002      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800610e:	bf00      	nop
 8006110:	e000      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006112:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006114:	7dfb      	ldrb	r3, [r7, #23]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d109      	bne.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800611a:	4b4d      	ldr	r3, [pc, #308]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800611c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800611e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006126:	494a      	ldr	r1, [pc, #296]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006128:	4313      	orrs	r3, r2
 800612a:	650b      	str	r3, [r1, #80]	; 0x50
 800612c:	e001      	b.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800612e:	7dfb      	ldrb	r3, [r7, #23]
 8006130:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800613a:	2b00      	cmp	r3, #0
 800613c:	d049      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006144:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006148:	d030      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x230>
 800614a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800614e:	d82a      	bhi.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006150:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006154:	d02c      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006156:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800615a:	d824      	bhi.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800615c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006160:	d018      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006162:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006166:	d81e      	bhi.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006168:	2b00      	cmp	r3, #0
 800616a:	d003      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800616c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006170:	d007      	beq.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006172:	e018      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006174:	4b36      	ldr	r3, [pc, #216]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006178:	4a35      	ldr	r2, [pc, #212]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800617a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800617e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006180:	e017      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	3304      	adds	r3, #4
 8006186:	2100      	movs	r1, #0
 8006188:	4618      	mov	r0, r3
 800618a:	f001 f8fb 	bl	8007384 <RCCEx_PLL2_Config>
 800618e:	4603      	mov	r3, r0
 8006190:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006192:	e00e      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	3324      	adds	r3, #36	; 0x24
 8006198:	2100      	movs	r1, #0
 800619a:	4618      	mov	r0, r3
 800619c:	f001 f9a4 	bl	80074e8 <RCCEx_PLL3_Config>
 80061a0:	4603      	mov	r3, r0
 80061a2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80061a4:	e005      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	75fb      	strb	r3, [r7, #23]
      break;
 80061aa:	e002      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80061ac:	bf00      	nop
 80061ae:	e000      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80061b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061b2:	7dfb      	ldrb	r3, [r7, #23]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d10a      	bne.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80061b8:	4b25      	ldr	r3, [pc, #148]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80061ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061bc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80061c6:	4922      	ldr	r1, [pc, #136]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80061c8:	4313      	orrs	r3, r2
 80061ca:	658b      	str	r3, [r1, #88]	; 0x58
 80061cc:	e001      	b.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ce:	7dfb      	ldrb	r3, [r7, #23]
 80061d0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d04b      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80061e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80061e8:	d030      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80061ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80061ee:	d82a      	bhi.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80061f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80061f4:	d02e      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80061f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80061fa:	d824      	bhi.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80061fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006200:	d018      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006202:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006206:	d81e      	bhi.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006208:	2b00      	cmp	r3, #0
 800620a:	d003      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800620c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006210:	d007      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006212:	e018      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006214:	4b0e      	ldr	r3, [pc, #56]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006218:	4a0d      	ldr	r2, [pc, #52]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800621a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800621e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006220:	e019      	b.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	3304      	adds	r3, #4
 8006226:	2100      	movs	r1, #0
 8006228:	4618      	mov	r0, r3
 800622a:	f001 f8ab 	bl	8007384 <RCCEx_PLL2_Config>
 800622e:	4603      	mov	r3, r0
 8006230:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006232:	e010      	b.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	3324      	adds	r3, #36	; 0x24
 8006238:	2100      	movs	r1, #0
 800623a:	4618      	mov	r0, r3
 800623c:	f001 f954 	bl	80074e8 <RCCEx_PLL3_Config>
 8006240:	4603      	mov	r3, r0
 8006242:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006244:	e007      	b.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	75fb      	strb	r3, [r7, #23]
      break;
 800624a:	e004      	b.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800624c:	bf00      	nop
 800624e:	e002      	b.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006250:	58024400 	.word	0x58024400
      break;
 8006254:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006256:	7dfb      	ldrb	r3, [r7, #23]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d10a      	bne.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800625c:	4b99      	ldr	r3, [pc, #612]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800625e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006260:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800626a:	4996      	ldr	r1, [pc, #600]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800626c:	4313      	orrs	r3, r2
 800626e:	658b      	str	r3, [r1, #88]	; 0x58
 8006270:	e001      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006272:	7dfb      	ldrb	r3, [r7, #23]
 8006274:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800627e:	2b00      	cmp	r3, #0
 8006280:	d032      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006286:	2b30      	cmp	r3, #48	; 0x30
 8006288:	d01c      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800628a:	2b30      	cmp	r3, #48	; 0x30
 800628c:	d817      	bhi.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x342>
 800628e:	2b20      	cmp	r3, #32
 8006290:	d00c      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x330>
 8006292:	2b20      	cmp	r3, #32
 8006294:	d813      	bhi.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006296:	2b00      	cmp	r3, #0
 8006298:	d016      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800629a:	2b10      	cmp	r3, #16
 800629c:	d10f      	bne.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800629e:	4b89      	ldr	r3, [pc, #548]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80062a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a2:	4a88      	ldr	r2, [pc, #544]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80062a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80062aa:	e00e      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	3304      	adds	r3, #4
 80062b0:	2102      	movs	r1, #2
 80062b2:	4618      	mov	r0, r3
 80062b4:	f001 f866 	bl	8007384 <RCCEx_PLL2_Config>
 80062b8:	4603      	mov	r3, r0
 80062ba:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80062bc:	e005      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	75fb      	strb	r3, [r7, #23]
      break;
 80062c2:	e002      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80062c4:	bf00      	nop
 80062c6:	e000      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80062c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062ca:	7dfb      	ldrb	r3, [r7, #23]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d109      	bne.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80062d0:	4b7c      	ldr	r3, [pc, #496]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80062d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062dc:	4979      	ldr	r1, [pc, #484]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80062e2:	e001      	b.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062e4:	7dfb      	ldrb	r3, [r7, #23]
 80062e6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d047      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062fc:	d030      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80062fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006302:	d82a      	bhi.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006304:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006308:	d02c      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800630a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800630e:	d824      	bhi.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006310:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006314:	d018      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8006316:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800631a:	d81e      	bhi.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800631c:	2b00      	cmp	r3, #0
 800631e:	d003      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8006320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006324:	d007      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8006326:	e018      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006328:	4b66      	ldr	r3, [pc, #408]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800632a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800632c:	4a65      	ldr	r2, [pc, #404]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800632e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006332:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006334:	e017      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	3304      	adds	r3, #4
 800633a:	2100      	movs	r1, #0
 800633c:	4618      	mov	r0, r3
 800633e:	f001 f821 	bl	8007384 <RCCEx_PLL2_Config>
 8006342:	4603      	mov	r3, r0
 8006344:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006346:	e00e      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	3324      	adds	r3, #36	; 0x24
 800634c:	2100      	movs	r1, #0
 800634e:	4618      	mov	r0, r3
 8006350:	f001 f8ca 	bl	80074e8 <RCCEx_PLL3_Config>
 8006354:	4603      	mov	r3, r0
 8006356:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006358:	e005      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	75fb      	strb	r3, [r7, #23]
      break;
 800635e:	e002      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006360:	bf00      	nop
 8006362:	e000      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006364:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006366:	7dfb      	ldrb	r3, [r7, #23]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d109      	bne.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800636c:	4b55      	ldr	r3, [pc, #340]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800636e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006370:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006378:	4952      	ldr	r1, [pc, #328]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800637a:	4313      	orrs	r3, r2
 800637c:	650b      	str	r3, [r1, #80]	; 0x50
 800637e:	e001      	b.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006380:	7dfb      	ldrb	r3, [r7, #23]
 8006382:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800638c:	2b00      	cmp	r3, #0
 800638e:	d049      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006394:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006398:	d02e      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800639a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800639e:	d828      	bhi.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80063a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80063a4:	d02a      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x480>
 80063a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80063aa:	d822      	bhi.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80063ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80063b0:	d026      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80063b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80063b6:	d81c      	bhi.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80063b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063bc:	d010      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80063be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063c2:	d816      	bhi.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d01d      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80063c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063cc:	d111      	bne.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	3304      	adds	r3, #4
 80063d2:	2101      	movs	r1, #1
 80063d4:	4618      	mov	r0, r3
 80063d6:	f000 ffd5 	bl	8007384 <RCCEx_PLL2_Config>
 80063da:	4603      	mov	r3, r0
 80063dc:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80063de:	e012      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	3324      	adds	r3, #36	; 0x24
 80063e4:	2101      	movs	r1, #1
 80063e6:	4618      	mov	r0, r3
 80063e8:	f001 f87e 	bl	80074e8 <RCCEx_PLL3_Config>
 80063ec:	4603      	mov	r3, r0
 80063ee:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80063f0:	e009      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	75fb      	strb	r3, [r7, #23]
      break;
 80063f6:	e006      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80063f8:	bf00      	nop
 80063fa:	e004      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80063fc:	bf00      	nop
 80063fe:	e002      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006400:	bf00      	nop
 8006402:	e000      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006404:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006406:	7dfb      	ldrb	r3, [r7, #23]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d109      	bne.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800640c:	4b2d      	ldr	r3, [pc, #180]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800640e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006410:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006418:	492a      	ldr	r1, [pc, #168]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800641a:	4313      	orrs	r3, r2
 800641c:	650b      	str	r3, [r1, #80]	; 0x50
 800641e:	e001      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006420:	7dfb      	ldrb	r3, [r7, #23]
 8006422:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d04d      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006436:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800643a:	d02e      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800643c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006440:	d828      	bhi.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006446:	d02a      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8006448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800644c:	d822      	bhi.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800644e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006452:	d026      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8006454:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006458:	d81c      	bhi.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800645a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800645e:	d010      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006460:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006464:	d816      	bhi.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006466:	2b00      	cmp	r3, #0
 8006468:	d01d      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800646a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800646e:	d111      	bne.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	3304      	adds	r3, #4
 8006474:	2101      	movs	r1, #1
 8006476:	4618      	mov	r0, r3
 8006478:	f000 ff84 	bl	8007384 <RCCEx_PLL2_Config>
 800647c:	4603      	mov	r3, r0
 800647e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006480:	e012      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	3324      	adds	r3, #36	; 0x24
 8006486:	2101      	movs	r1, #1
 8006488:	4618      	mov	r0, r3
 800648a:	f001 f82d 	bl	80074e8 <RCCEx_PLL3_Config>
 800648e:	4603      	mov	r3, r0
 8006490:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006492:	e009      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	75fb      	strb	r3, [r7, #23]
      break;
 8006498:	e006      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800649a:	bf00      	nop
 800649c:	e004      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800649e:	bf00      	nop
 80064a0:	e002      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80064a2:	bf00      	nop
 80064a4:	e000      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80064a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064a8:	7dfb      	ldrb	r3, [r7, #23]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d10c      	bne.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80064ae:	4b05      	ldr	r3, [pc, #20]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80064b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80064bc:	4901      	ldr	r1, [pc, #4]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80064be:	4313      	orrs	r3, r2
 80064c0:	658b      	str	r3, [r1, #88]	; 0x58
 80064c2:	e003      	b.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x550>
 80064c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064c8:	7dfb      	ldrb	r3, [r7, #23]
 80064ca:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d02f      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064e0:	d00e      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80064e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064e6:	d814      	bhi.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x596>
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d015      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80064ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064f0:	d10f      	bne.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064f2:	4baf      	ldr	r3, [pc, #700]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80064f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f6:	4aae      	ldr	r2, [pc, #696]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80064f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80064fe:	e00c      	b.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	3304      	adds	r3, #4
 8006504:	2101      	movs	r1, #1
 8006506:	4618      	mov	r0, r3
 8006508:	f000 ff3c 	bl	8007384 <RCCEx_PLL2_Config>
 800650c:	4603      	mov	r3, r0
 800650e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006510:	e003      	b.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	75fb      	strb	r3, [r7, #23]
      break;
 8006516:	e000      	b.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8006518:	bf00      	nop
    }

    if(ret == HAL_OK)
 800651a:	7dfb      	ldrb	r3, [r7, #23]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d109      	bne.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006520:	4ba3      	ldr	r3, [pc, #652]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006524:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800652c:	49a0      	ldr	r1, [pc, #640]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800652e:	4313      	orrs	r3, r2
 8006530:	650b      	str	r3, [r1, #80]	; 0x50
 8006532:	e001      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006534:	7dfb      	ldrb	r3, [r7, #23]
 8006536:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006540:	2b00      	cmp	r3, #0
 8006542:	d032      	beq.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006548:	2b03      	cmp	r3, #3
 800654a:	d81b      	bhi.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800654c:	a201      	add	r2, pc, #4	; (adr r2, 8006554 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800654e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006552:	bf00      	nop
 8006554:	0800658b 	.word	0x0800658b
 8006558:	08006565 	.word	0x08006565
 800655c:	08006573 	.word	0x08006573
 8006560:	0800658b 	.word	0x0800658b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006564:	4b92      	ldr	r3, [pc, #584]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006568:	4a91      	ldr	r2, [pc, #580]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800656a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800656e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006570:	e00c      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	3304      	adds	r3, #4
 8006576:	2102      	movs	r1, #2
 8006578:	4618      	mov	r0, r3
 800657a:	f000 ff03 	bl	8007384 <RCCEx_PLL2_Config>
 800657e:	4603      	mov	r3, r0
 8006580:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006582:	e003      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	75fb      	strb	r3, [r7, #23]
      break;
 8006588:	e000      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800658a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800658c:	7dfb      	ldrb	r3, [r7, #23]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d109      	bne.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006592:	4b87      	ldr	r3, [pc, #540]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006596:	f023 0203 	bic.w	r2, r3, #3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800659e:	4984      	ldr	r1, [pc, #528]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80065a0:	4313      	orrs	r3, r2
 80065a2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80065a4:	e001      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065a6:	7dfb      	ldrb	r3, [r7, #23]
 80065a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	f000 8086 	beq.w	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80065b8:	4b7e      	ldr	r3, [pc, #504]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a7d      	ldr	r2, [pc, #500]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80065be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80065c4:	f7fc fe6c 	bl	80032a0 <HAL_GetTick>
 80065c8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80065ca:	e009      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065cc:	f7fc fe68 	bl	80032a0 <HAL_GetTick>
 80065d0:	4602      	mov	r2, r0
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	2b64      	cmp	r3, #100	; 0x64
 80065d8:	d902      	bls.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	75fb      	strb	r3, [r7, #23]
        break;
 80065de:	e005      	b.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80065e0:	4b74      	ldr	r3, [pc, #464]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d0ef      	beq.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80065ec:	7dfb      	ldrb	r3, [r7, #23]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d166      	bne.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80065f2:	4b6f      	ldr	r3, [pc, #444]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80065f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80065fc:	4053      	eors	r3, r2
 80065fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006602:	2b00      	cmp	r3, #0
 8006604:	d013      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006606:	4b6a      	ldr	r3, [pc, #424]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800660a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800660e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006610:	4b67      	ldr	r3, [pc, #412]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006614:	4a66      	ldr	r2, [pc, #408]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006616:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800661a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800661c:	4b64      	ldr	r3, [pc, #400]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800661e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006620:	4a63      	ldr	r2, [pc, #396]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006626:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006628:	4a61      	ldr	r2, [pc, #388]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006634:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006638:	d115      	bne.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800663a:	f7fc fe31 	bl	80032a0 <HAL_GetTick>
 800663e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006640:	e00b      	b.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006642:	f7fc fe2d 	bl	80032a0 <HAL_GetTick>
 8006646:	4602      	mov	r2, r0
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006650:	4293      	cmp	r3, r2
 8006652:	d902      	bls.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	75fb      	strb	r3, [r7, #23]
            break;
 8006658:	e005      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800665a:	4b55      	ldr	r3, [pc, #340]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800665c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800665e:	f003 0302 	and.w	r3, r3, #2
 8006662:	2b00      	cmp	r3, #0
 8006664:	d0ed      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8006666:	7dfb      	ldrb	r3, [r7, #23]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d126      	bne.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006676:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800667a:	d10d      	bne.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800667c:	4b4c      	ldr	r3, [pc, #304]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800668a:	0919      	lsrs	r1, r3, #4
 800668c:	4b4a      	ldr	r3, [pc, #296]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800668e:	400b      	ands	r3, r1
 8006690:	4947      	ldr	r1, [pc, #284]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006692:	4313      	orrs	r3, r2
 8006694:	610b      	str	r3, [r1, #16]
 8006696:	e005      	b.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006698:	4b45      	ldr	r3, [pc, #276]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	4a44      	ldr	r2, [pc, #272]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800669e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80066a2:	6113      	str	r3, [r2, #16]
 80066a4:	4b42      	ldr	r3, [pc, #264]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80066a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80066ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066b2:	493f      	ldr	r1, [pc, #252]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80066b4:	4313      	orrs	r3, r2
 80066b6:	670b      	str	r3, [r1, #112]	; 0x70
 80066b8:	e004      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80066ba:	7dfb      	ldrb	r3, [r7, #23]
 80066bc:	75bb      	strb	r3, [r7, #22]
 80066be:	e001      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066c0:	7dfb      	ldrb	r3, [r7, #23]
 80066c2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 0301 	and.w	r3, r3, #1
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f000 8085 	beq.w	80067dc <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066d6:	2b28      	cmp	r3, #40	; 0x28
 80066d8:	d866      	bhi.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80066da:	a201      	add	r2, pc, #4	; (adr r2, 80066e0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80066dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e0:	080067bd 	.word	0x080067bd
 80066e4:	080067a9 	.word	0x080067a9
 80066e8:	080067a9 	.word	0x080067a9
 80066ec:	080067a9 	.word	0x080067a9
 80066f0:	080067a9 	.word	0x080067a9
 80066f4:	080067a9 	.word	0x080067a9
 80066f8:	080067a9 	.word	0x080067a9
 80066fc:	080067a9 	.word	0x080067a9
 8006700:	08006785 	.word	0x08006785
 8006704:	080067a9 	.word	0x080067a9
 8006708:	080067a9 	.word	0x080067a9
 800670c:	080067a9 	.word	0x080067a9
 8006710:	080067a9 	.word	0x080067a9
 8006714:	080067a9 	.word	0x080067a9
 8006718:	080067a9 	.word	0x080067a9
 800671c:	080067a9 	.word	0x080067a9
 8006720:	08006797 	.word	0x08006797
 8006724:	080067a9 	.word	0x080067a9
 8006728:	080067a9 	.word	0x080067a9
 800672c:	080067a9 	.word	0x080067a9
 8006730:	080067a9 	.word	0x080067a9
 8006734:	080067a9 	.word	0x080067a9
 8006738:	080067a9 	.word	0x080067a9
 800673c:	080067a9 	.word	0x080067a9
 8006740:	080067bd 	.word	0x080067bd
 8006744:	080067a9 	.word	0x080067a9
 8006748:	080067a9 	.word	0x080067a9
 800674c:	080067a9 	.word	0x080067a9
 8006750:	080067a9 	.word	0x080067a9
 8006754:	080067a9 	.word	0x080067a9
 8006758:	080067a9 	.word	0x080067a9
 800675c:	080067a9 	.word	0x080067a9
 8006760:	080067bd 	.word	0x080067bd
 8006764:	080067a9 	.word	0x080067a9
 8006768:	080067a9 	.word	0x080067a9
 800676c:	080067a9 	.word	0x080067a9
 8006770:	080067a9 	.word	0x080067a9
 8006774:	080067a9 	.word	0x080067a9
 8006778:	080067a9 	.word	0x080067a9
 800677c:	080067a9 	.word	0x080067a9
 8006780:	080067bd 	.word	0x080067bd
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	3304      	adds	r3, #4
 8006788:	2101      	movs	r1, #1
 800678a:	4618      	mov	r0, r3
 800678c:	f000 fdfa 	bl	8007384 <RCCEx_PLL2_Config>
 8006790:	4603      	mov	r3, r0
 8006792:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006794:	e013      	b.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	3324      	adds	r3, #36	; 0x24
 800679a:	2101      	movs	r1, #1
 800679c:	4618      	mov	r0, r3
 800679e:	f000 fea3 	bl	80074e8 <RCCEx_PLL3_Config>
 80067a2:	4603      	mov	r3, r0
 80067a4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80067a6:	e00a      	b.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	75fb      	strb	r3, [r7, #23]
      break;
 80067ac:	e007      	b.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x842>
 80067ae:	bf00      	nop
 80067b0:	58024400 	.word	0x58024400
 80067b4:	58024800 	.word	0x58024800
 80067b8:	00ffffcf 	.word	0x00ffffcf
      break;
 80067bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067be:	7dfb      	ldrb	r3, [r7, #23]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d109      	bne.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80067c4:	4b96      	ldr	r3, [pc, #600]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80067c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067c8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067d0:	4993      	ldr	r1, [pc, #588]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80067d2:	4313      	orrs	r3, r2
 80067d4:	654b      	str	r3, [r1, #84]	; 0x54
 80067d6:	e001      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067d8:	7dfb      	ldrb	r3, [r7, #23]
 80067da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 0302 	and.w	r3, r3, #2
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d038      	beq.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067ec:	2b05      	cmp	r3, #5
 80067ee:	d821      	bhi.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80067f0:	a201      	add	r2, pc, #4	; (adr r2, 80067f8 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80067f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f6:	bf00      	nop
 80067f8:	0800683b 	.word	0x0800683b
 80067fc:	08006811 	.word	0x08006811
 8006800:	08006823 	.word	0x08006823
 8006804:	0800683b 	.word	0x0800683b
 8006808:	0800683b 	.word	0x0800683b
 800680c:	0800683b 	.word	0x0800683b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	3304      	adds	r3, #4
 8006814:	2101      	movs	r1, #1
 8006816:	4618      	mov	r0, r3
 8006818:	f000 fdb4 	bl	8007384 <RCCEx_PLL2_Config>
 800681c:	4603      	mov	r3, r0
 800681e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006820:	e00c      	b.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	3324      	adds	r3, #36	; 0x24
 8006826:	2101      	movs	r1, #1
 8006828:	4618      	mov	r0, r3
 800682a:	f000 fe5d 	bl	80074e8 <RCCEx_PLL3_Config>
 800682e:	4603      	mov	r3, r0
 8006830:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006832:	e003      	b.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	75fb      	strb	r3, [r7, #23]
      break;
 8006838:	e000      	b.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800683a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800683c:	7dfb      	ldrb	r3, [r7, #23]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d109      	bne.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006842:	4b77      	ldr	r3, [pc, #476]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006846:	f023 0207 	bic.w	r2, r3, #7
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800684e:	4974      	ldr	r1, [pc, #464]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006850:	4313      	orrs	r3, r2
 8006852:	654b      	str	r3, [r1, #84]	; 0x54
 8006854:	e001      	b.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006856:	7dfb      	ldrb	r3, [r7, #23]
 8006858:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 0304 	and.w	r3, r3, #4
 8006862:	2b00      	cmp	r3, #0
 8006864:	d03a      	beq.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800686c:	2b05      	cmp	r3, #5
 800686e:	d821      	bhi.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8006870:	a201      	add	r2, pc, #4	; (adr r2, 8006878 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8006872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006876:	bf00      	nop
 8006878:	080068bb 	.word	0x080068bb
 800687c:	08006891 	.word	0x08006891
 8006880:	080068a3 	.word	0x080068a3
 8006884:	080068bb 	.word	0x080068bb
 8006888:	080068bb 	.word	0x080068bb
 800688c:	080068bb 	.word	0x080068bb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	3304      	adds	r3, #4
 8006894:	2101      	movs	r1, #1
 8006896:	4618      	mov	r0, r3
 8006898:	f000 fd74 	bl	8007384 <RCCEx_PLL2_Config>
 800689c:	4603      	mov	r3, r0
 800689e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80068a0:	e00c      	b.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	3324      	adds	r3, #36	; 0x24
 80068a6:	2101      	movs	r1, #1
 80068a8:	4618      	mov	r0, r3
 80068aa:	f000 fe1d 	bl	80074e8 <RCCEx_PLL3_Config>
 80068ae:	4603      	mov	r3, r0
 80068b0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80068b2:	e003      	b.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	75fb      	strb	r3, [r7, #23]
      break;
 80068b8:	e000      	b.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80068ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068bc:	7dfb      	ldrb	r3, [r7, #23]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d10a      	bne.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80068c2:	4b57      	ldr	r3, [pc, #348]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80068c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068c6:	f023 0207 	bic.w	r2, r3, #7
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068d0:	4953      	ldr	r1, [pc, #332]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80068d2:	4313      	orrs	r3, r2
 80068d4:	658b      	str	r3, [r1, #88]	; 0x58
 80068d6:	e001      	b.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068d8:	7dfb      	ldrb	r3, [r7, #23]
 80068da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 0320 	and.w	r3, r3, #32
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d04b      	beq.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80068f2:	d02e      	beq.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80068f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80068f8:	d828      	bhi.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80068fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068fe:	d02a      	beq.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006904:	d822      	bhi.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006906:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800690a:	d026      	beq.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800690c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006910:	d81c      	bhi.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006912:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006916:	d010      	beq.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8006918:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800691c:	d816      	bhi.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800691e:	2b00      	cmp	r3, #0
 8006920:	d01d      	beq.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8006922:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006926:	d111      	bne.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	3304      	adds	r3, #4
 800692c:	2100      	movs	r1, #0
 800692e:	4618      	mov	r0, r3
 8006930:	f000 fd28 	bl	8007384 <RCCEx_PLL2_Config>
 8006934:	4603      	mov	r3, r0
 8006936:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006938:	e012      	b.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	3324      	adds	r3, #36	; 0x24
 800693e:	2102      	movs	r1, #2
 8006940:	4618      	mov	r0, r3
 8006942:	f000 fdd1 	bl	80074e8 <RCCEx_PLL3_Config>
 8006946:	4603      	mov	r3, r0
 8006948:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800694a:	e009      	b.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	75fb      	strb	r3, [r7, #23]
      break;
 8006950:	e006      	b.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006952:	bf00      	nop
 8006954:	e004      	b.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006956:	bf00      	nop
 8006958:	e002      	b.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800695a:	bf00      	nop
 800695c:	e000      	b.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800695e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006960:	7dfb      	ldrb	r3, [r7, #23]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d10a      	bne.n	800697c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006966:	4b2e      	ldr	r3, [pc, #184]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800696a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006974:	492a      	ldr	r1, [pc, #168]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006976:	4313      	orrs	r3, r2
 8006978:	654b      	str	r3, [r1, #84]	; 0x54
 800697a:	e001      	b.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800697c:	7dfb      	ldrb	r3, [r7, #23]
 800697e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006988:	2b00      	cmp	r3, #0
 800698a:	d04d      	beq.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006992:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006996:	d02e      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006998:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800699c:	d828      	bhi.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800699e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069a2:	d02a      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80069a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069a8:	d822      	bhi.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80069aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069ae:	d026      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80069b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069b4:	d81c      	bhi.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80069b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069ba:	d010      	beq.n	80069de <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80069bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069c0:	d816      	bhi.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d01d      	beq.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80069c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069ca:	d111      	bne.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	3304      	adds	r3, #4
 80069d0:	2100      	movs	r1, #0
 80069d2:	4618      	mov	r0, r3
 80069d4:	f000 fcd6 	bl	8007384 <RCCEx_PLL2_Config>
 80069d8:	4603      	mov	r3, r0
 80069da:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80069dc:	e012      	b.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	3324      	adds	r3, #36	; 0x24
 80069e2:	2102      	movs	r1, #2
 80069e4:	4618      	mov	r0, r3
 80069e6:	f000 fd7f 	bl	80074e8 <RCCEx_PLL3_Config>
 80069ea:	4603      	mov	r3, r0
 80069ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80069ee:	e009      	b.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	75fb      	strb	r3, [r7, #23]
      break;
 80069f4:	e006      	b.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80069f6:	bf00      	nop
 80069f8:	e004      	b.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80069fa:	bf00      	nop
 80069fc:	e002      	b.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80069fe:	bf00      	nop
 8006a00:	e000      	b.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006a02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a04:	7dfb      	ldrb	r3, [r7, #23]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d10c      	bne.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006a0a:	4b05      	ldr	r3, [pc, #20]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a0e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a18:	4901      	ldr	r1, [pc, #4]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	658b      	str	r3, [r1, #88]	; 0x58
 8006a1e:	e003      	b.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006a20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a24:	7dfb      	ldrb	r3, [r7, #23]
 8006a26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d04b      	beq.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a3a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006a3e:	d02e      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006a40:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006a44:	d828      	bhi.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006a46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a4a:	d02a      	beq.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006a4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a50:	d822      	bhi.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006a52:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006a56:	d026      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8006a58:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006a5c:	d81c      	bhi.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006a5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a62:	d010      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006a64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a68:	d816      	bhi.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d01d      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8006a6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a72:	d111      	bne.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	3304      	adds	r3, #4
 8006a78:	2100      	movs	r1, #0
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f000 fc82 	bl	8007384 <RCCEx_PLL2_Config>
 8006a80:	4603      	mov	r3, r0
 8006a82:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006a84:	e012      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	3324      	adds	r3, #36	; 0x24
 8006a8a:	2102      	movs	r1, #2
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f000 fd2b 	bl	80074e8 <RCCEx_PLL3_Config>
 8006a92:	4603      	mov	r3, r0
 8006a94:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006a96:	e009      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	75fb      	strb	r3, [r7, #23]
      break;
 8006a9c:	e006      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006a9e:	bf00      	nop
 8006aa0:	e004      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006aa2:	bf00      	nop
 8006aa4:	e002      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006aa6:	bf00      	nop
 8006aa8:	e000      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006aaa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006aac:	7dfb      	ldrb	r3, [r7, #23]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d10a      	bne.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006ab2:	4b9d      	ldr	r3, [pc, #628]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ab6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ac0:	4999      	ldr	r1, [pc, #612]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	658b      	str	r3, [r1, #88]	; 0x58
 8006ac6:	e001      	b.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ac8:	7dfb      	ldrb	r3, [r7, #23]
 8006aca:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 0308 	and.w	r3, r3, #8
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d01a      	beq.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ae2:	d10a      	bne.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	3324      	adds	r3, #36	; 0x24
 8006ae8:	2102      	movs	r1, #2
 8006aea:	4618      	mov	r0, r3
 8006aec:	f000 fcfc 	bl	80074e8 <RCCEx_PLL3_Config>
 8006af0:	4603      	mov	r3, r0
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d001      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006afa:	4b8b      	ldr	r3, [pc, #556]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006afe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b08:	4987      	ldr	r1, [pc, #540]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f003 0310 	and.w	r3, r3, #16
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d01a      	beq.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b24:	d10a      	bne.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	3324      	adds	r3, #36	; 0x24
 8006b2a:	2102      	movs	r1, #2
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f000 fcdb 	bl	80074e8 <RCCEx_PLL3_Config>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d001      	beq.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006b3c:	4b7a      	ldr	r3, [pc, #488]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b4a:	4977      	ldr	r1, [pc, #476]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d034      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006b62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b66:	d01d      	beq.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8006b68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b6c:	d817      	bhi.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d003      	beq.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006b72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b76:	d009      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8006b78:	e011      	b.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	3304      	adds	r3, #4
 8006b7e:	2100      	movs	r1, #0
 8006b80:	4618      	mov	r0, r3
 8006b82:	f000 fbff 	bl	8007384 <RCCEx_PLL2_Config>
 8006b86:	4603      	mov	r3, r0
 8006b88:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006b8a:	e00c      	b.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	3324      	adds	r3, #36	; 0x24
 8006b90:	2102      	movs	r1, #2
 8006b92:	4618      	mov	r0, r3
 8006b94:	f000 fca8 	bl	80074e8 <RCCEx_PLL3_Config>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006b9c:	e003      	b.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	75fb      	strb	r3, [r7, #23]
      break;
 8006ba2:	e000      	b.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8006ba4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ba6:	7dfb      	ldrb	r3, [r7, #23]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d10a      	bne.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006bac:	4b5e      	ldr	r3, [pc, #376]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bb0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006bba:	495b      	ldr	r1, [pc, #364]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	658b      	str	r3, [r1, #88]	; 0x58
 8006bc0:	e001      	b.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bc2:	7dfb      	ldrb	r3, [r7, #23]
 8006bc4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d033      	beq.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bd8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006bdc:	d01c      	beq.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8006bde:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006be2:	d816      	bhi.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8006be4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006be8:	d003      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8006bea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006bee:	d007      	beq.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8006bf0:	e00f      	b.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bf2:	4b4d      	ldr	r3, [pc, #308]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf6:	4a4c      	ldr	r2, [pc, #304]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bfc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006bfe:	e00c      	b.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	3324      	adds	r3, #36	; 0x24
 8006c04:	2101      	movs	r1, #1
 8006c06:	4618      	mov	r0, r3
 8006c08:	f000 fc6e 	bl	80074e8 <RCCEx_PLL3_Config>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006c10:	e003      	b.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	75fb      	strb	r3, [r7, #23]
      break;
 8006c16:	e000      	b.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8006c18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c1a:	7dfb      	ldrb	r3, [r7, #23]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d10a      	bne.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c20:	4b41      	ldr	r3, [pc, #260]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c2e:	493e      	ldr	r1, [pc, #248]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006c30:	4313      	orrs	r3, r2
 8006c32:	654b      	str	r3, [r1, #84]	; 0x54
 8006c34:	e001      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c36:	7dfb      	ldrb	r3, [r7, #23]
 8006c38:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d029      	beq.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d003      	beq.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8006c4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c52:	d007      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8006c54:	e00f      	b.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c56:	4b34      	ldr	r3, [pc, #208]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c5a:	4a33      	ldr	r2, [pc, #204]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006c62:	e00b      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	3304      	adds	r3, #4
 8006c68:	2102      	movs	r1, #2
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f000 fb8a 	bl	8007384 <RCCEx_PLL2_Config>
 8006c70:	4603      	mov	r3, r0
 8006c72:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006c74:	e002      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	75fb      	strb	r3, [r7, #23]
      break;
 8006c7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c7c:	7dfb      	ldrb	r3, [r7, #23]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d109      	bne.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006c82:	4b29      	ldr	r3, [pc, #164]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c86:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c8e:	4926      	ldr	r1, [pc, #152]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006c90:	4313      	orrs	r3, r2
 8006c92:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006c94:	e001      	b.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c96:	7dfb      	ldrb	r3, [r7, #23]
 8006c98:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00a      	beq.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	3324      	adds	r3, #36	; 0x24
 8006caa:	2102      	movs	r1, #2
 8006cac:	4618      	mov	r0, r3
 8006cae:	f000 fc1b 	bl	80074e8 <RCCEx_PLL3_Config>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d001      	beq.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d033      	beq.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ccc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cd0:	d017      	beq.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006cd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cd6:	d811      	bhi.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006cd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cdc:	d013      	beq.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006cde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ce2:	d80b      	bhi.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d010      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8006ce8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cec:	d106      	bne.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cee:	4b0e      	ldr	r3, [pc, #56]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf2:	4a0d      	ldr	r2, [pc, #52]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cf8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006cfa:	e007      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	75fb      	strb	r3, [r7, #23]
      break;
 8006d00:	e004      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006d02:	bf00      	nop
 8006d04:	e002      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006d06:	bf00      	nop
 8006d08:	e000      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006d0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d0c:	7dfb      	ldrb	r3, [r7, #23]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d10c      	bne.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d12:	4b05      	ldr	r3, [pc, #20]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d1e:	4902      	ldr	r1, [pc, #8]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006d20:	4313      	orrs	r3, r2
 8006d22:	654b      	str	r3, [r1, #84]	; 0x54
 8006d24:	e004      	b.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8006d26:	bf00      	nop
 8006d28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d2c:	7dfb      	ldrb	r3, [r7, #23]
 8006d2e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d008      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006d3c:	4b31      	ldr	r3, [pc, #196]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006d3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d40:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d48:	492e      	ldr	r1, [pc, #184]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d009      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006d5a:	4b2a      	ldr	r3, [pc, #168]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006d68:	4926      	ldr	r1, [pc, #152]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d008      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006d7a:	4b22      	ldr	r3, [pc, #136]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006d7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d7e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d86:	491f      	ldr	r1, [pc, #124]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d00d      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006d98:	4b1a      	ldr	r3, [pc, #104]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	4a19      	ldr	r2, [pc, #100]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006d9e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006da2:	6113      	str	r3, [r2, #16]
 8006da4:	4b17      	ldr	r3, [pc, #92]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006da6:	691a      	ldr	r2, [r3, #16]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006dae:	4915      	ldr	r1, [pc, #84]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006db0:	4313      	orrs	r3, r2
 8006db2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	da08      	bge.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006dbc:	4b11      	ldr	r3, [pc, #68]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dc0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dc8:	490e      	ldr	r1, [pc, #56]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d009      	beq.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006dda:	4b0a      	ldr	r3, [pc, #40]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dde:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006de8:	4906      	ldr	r1, [pc, #24]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006dea:	4313      	orrs	r3, r2
 8006dec:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006dee:	7dbb      	ldrb	r3, [r7, #22]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d101      	bne.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8006df4:	2300      	movs	r3, #0
 8006df6:	e000      	b.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3718      	adds	r7, #24
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	58024400 	.word	0x58024400

08006e08 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006e0c:	f7ff f85a 	bl	8005ec4 <HAL_RCC_GetHCLKFreq>
 8006e10:	4602      	mov	r2, r0
 8006e12:	4b06      	ldr	r3, [pc, #24]	; (8006e2c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006e14:	6a1b      	ldr	r3, [r3, #32]
 8006e16:	091b      	lsrs	r3, r3, #4
 8006e18:	f003 0307 	and.w	r3, r3, #7
 8006e1c:	4904      	ldr	r1, [pc, #16]	; (8006e30 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006e1e:	5ccb      	ldrb	r3, [r1, r3]
 8006e20:	f003 031f 	and.w	r3, r3, #31
 8006e24:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	58024400 	.word	0x58024400
 8006e30:	080098d0 	.word	0x080098d0

08006e34 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b089      	sub	sp, #36	; 0x24
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e3c:	4ba1      	ldr	r3, [pc, #644]	; (80070c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e40:	f003 0303 	and.w	r3, r3, #3
 8006e44:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006e46:	4b9f      	ldr	r3, [pc, #636]	; (80070c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e4a:	0b1b      	lsrs	r3, r3, #12
 8006e4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e50:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006e52:	4b9c      	ldr	r3, [pc, #624]	; (80070c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e56:	091b      	lsrs	r3, r3, #4
 8006e58:	f003 0301 	and.w	r3, r3, #1
 8006e5c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006e5e:	4b99      	ldr	r3, [pc, #612]	; (80070c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e62:	08db      	lsrs	r3, r3, #3
 8006e64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e68:	693a      	ldr	r2, [r7, #16]
 8006e6a:	fb02 f303 	mul.w	r3, r2, r3
 8006e6e:	ee07 3a90 	vmov	s15, r3
 8006e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e76:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	f000 8111 	beq.w	80070a4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	2b02      	cmp	r3, #2
 8006e86:	f000 8083 	beq.w	8006f90 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	2b02      	cmp	r3, #2
 8006e8e:	f200 80a1 	bhi.w	8006fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006e92:	69bb      	ldr	r3, [r7, #24]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d003      	beq.n	8006ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d056      	beq.n	8006f4c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006e9e:	e099      	b.n	8006fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ea0:	4b88      	ldr	r3, [pc, #544]	; (80070c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 0320 	and.w	r3, r3, #32
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d02d      	beq.n	8006f08 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006eac:	4b85      	ldr	r3, [pc, #532]	; (80070c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	08db      	lsrs	r3, r3, #3
 8006eb2:	f003 0303 	and.w	r3, r3, #3
 8006eb6:	4a84      	ldr	r2, [pc, #528]	; (80070c8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8006ebc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	ee07 3a90 	vmov	s15, r3
 8006ec4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	ee07 3a90 	vmov	s15, r3
 8006ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ed6:	4b7b      	ldr	r3, [pc, #492]	; (80070c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ede:	ee07 3a90 	vmov	s15, r3
 8006ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ee6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006eea:	eddf 5a78 	vldr	s11, [pc, #480]	; 80070cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ef6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f02:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006f06:	e087      	b.n	8007018 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	ee07 3a90 	vmov	s15, r3
 8006f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f12:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80070d0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f1a:	4b6a      	ldr	r3, [pc, #424]	; (80070c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f22:	ee07 3a90 	vmov	s15, r3
 8006f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f2e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80070cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f4a:	e065      	b.n	8007018 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	ee07 3a90 	vmov	s15, r3
 8006f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f56:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80070d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f5e:	4b59      	ldr	r3, [pc, #356]	; (80070c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f66:	ee07 3a90 	vmov	s15, r3
 8006f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f72:	eddf 5a56 	vldr	s11, [pc, #344]	; 80070cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f8e:	e043      	b.n	8007018 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	ee07 3a90 	vmov	s15, r3
 8006f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f9a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80070d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fa2:	4b48      	ldr	r3, [pc, #288]	; (80070c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006faa:	ee07 3a90 	vmov	s15, r3
 8006fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fb6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80070cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006fd2:	e021      	b.n	8007018 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	ee07 3a90 	vmov	s15, r3
 8006fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fde:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80070d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fe6:	4b37      	ldr	r3, [pc, #220]	; (80070c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fee:	ee07 3a90 	vmov	s15, r3
 8006ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ff6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ffa:	eddf 5a34 	vldr	s11, [pc, #208]	; 80070cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007006:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800700a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800700e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007012:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007016:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007018:	4b2a      	ldr	r3, [pc, #168]	; (80070c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800701a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701c:	0a5b      	lsrs	r3, r3, #9
 800701e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007022:	ee07 3a90 	vmov	s15, r3
 8007026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800702a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800702e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007032:	edd7 6a07 	vldr	s13, [r7, #28]
 8007036:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800703a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800703e:	ee17 2a90 	vmov	r2, s15
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007046:	4b1f      	ldr	r3, [pc, #124]	; (80070c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704a:	0c1b      	lsrs	r3, r3, #16
 800704c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007050:	ee07 3a90 	vmov	s15, r3
 8007054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007058:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800705c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007060:	edd7 6a07 	vldr	s13, [r7, #28]
 8007064:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007068:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800706c:	ee17 2a90 	vmov	r2, s15
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007074:	4b13      	ldr	r3, [pc, #76]	; (80070c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007078:	0e1b      	lsrs	r3, r3, #24
 800707a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800707e:	ee07 3a90 	vmov	s15, r3
 8007082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007086:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800708a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800708e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007092:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007096:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800709a:	ee17 2a90 	vmov	r2, s15
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80070a2:	e008      	b.n	80070b6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	609a      	str	r2, [r3, #8]
}
 80070b6:	bf00      	nop
 80070b8:	3724      	adds	r7, #36	; 0x24
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	58024400 	.word	0x58024400
 80070c8:	03d09000 	.word	0x03d09000
 80070cc:	46000000 	.word	0x46000000
 80070d0:	4c742400 	.word	0x4c742400
 80070d4:	4a742400 	.word	0x4a742400
 80070d8:	4af42400 	.word	0x4af42400

080070dc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80070dc:	b480      	push	{r7}
 80070de:	b089      	sub	sp, #36	; 0x24
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070e4:	4ba1      	ldr	r3, [pc, #644]	; (800736c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e8:	f003 0303 	and.w	r3, r3, #3
 80070ec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80070ee:	4b9f      	ldr	r3, [pc, #636]	; (800736c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f2:	0d1b      	lsrs	r3, r3, #20
 80070f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070f8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80070fa:	4b9c      	ldr	r3, [pc, #624]	; (800736c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070fe:	0a1b      	lsrs	r3, r3, #8
 8007100:	f003 0301 	and.w	r3, r3, #1
 8007104:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007106:	4b99      	ldr	r3, [pc, #612]	; (800736c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800710a:	08db      	lsrs	r3, r3, #3
 800710c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007110:	693a      	ldr	r2, [r7, #16]
 8007112:	fb02 f303 	mul.w	r3, r2, r3
 8007116:	ee07 3a90 	vmov	s15, r3
 800711a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800711e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	2b00      	cmp	r3, #0
 8007126:	f000 8111 	beq.w	800734c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	2b02      	cmp	r3, #2
 800712e:	f000 8083 	beq.w	8007238 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	2b02      	cmp	r3, #2
 8007136:	f200 80a1 	bhi.w	800727c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d003      	beq.n	8007148 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	2b01      	cmp	r3, #1
 8007144:	d056      	beq.n	80071f4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007146:	e099      	b.n	800727c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007148:	4b88      	ldr	r3, [pc, #544]	; (800736c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 0320 	and.w	r3, r3, #32
 8007150:	2b00      	cmp	r3, #0
 8007152:	d02d      	beq.n	80071b0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007154:	4b85      	ldr	r3, [pc, #532]	; (800736c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	08db      	lsrs	r3, r3, #3
 800715a:	f003 0303 	and.w	r3, r3, #3
 800715e:	4a84      	ldr	r2, [pc, #528]	; (8007370 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007160:	fa22 f303 	lsr.w	r3, r2, r3
 8007164:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	ee07 3a90 	vmov	s15, r3
 800716c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	ee07 3a90 	vmov	s15, r3
 8007176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800717a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800717e:	4b7b      	ldr	r3, [pc, #492]	; (800736c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007186:	ee07 3a90 	vmov	s15, r3
 800718a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800718e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007192:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007374 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800719a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800719e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071aa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80071ae:	e087      	b.n	80072c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	ee07 3a90 	vmov	s15, r3
 80071b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007378 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80071be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071c2:	4b6a      	ldr	r3, [pc, #424]	; (800736c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ca:	ee07 3a90 	vmov	s15, r3
 80071ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80071d6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007374 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071f2:	e065      	b.n	80072c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	ee07 3a90 	vmov	s15, r3
 80071fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071fe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800737c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007206:	4b59      	ldr	r3, [pc, #356]	; (800736c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800720e:	ee07 3a90 	vmov	s15, r3
 8007212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007216:	ed97 6a03 	vldr	s12, [r7, #12]
 800721a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007374 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800721e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007226:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800722a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800722e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007232:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007236:	e043      	b.n	80072c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	ee07 3a90 	vmov	s15, r3
 800723e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007242:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007380 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007246:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800724a:	4b48      	ldr	r3, [pc, #288]	; (800736c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800724c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800724e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007252:	ee07 3a90 	vmov	s15, r3
 8007256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800725a:	ed97 6a03 	vldr	s12, [r7, #12]
 800725e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007374 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800726a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800726e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007276:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800727a:	e021      	b.n	80072c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	ee07 3a90 	vmov	s15, r3
 8007282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007286:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800737c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800728a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800728e:	4b37      	ldr	r3, [pc, #220]	; (800736c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007296:	ee07 3a90 	vmov	s15, r3
 800729a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800729e:	ed97 6a03 	vldr	s12, [r7, #12]
 80072a2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007374 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072be:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80072c0:	4b2a      	ldr	r3, [pc, #168]	; (800736c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c4:	0a5b      	lsrs	r3, r3, #9
 80072c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072ca:	ee07 3a90 	vmov	s15, r3
 80072ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072da:	edd7 6a07 	vldr	s13, [r7, #28]
 80072de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072e6:	ee17 2a90 	vmov	r2, s15
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80072ee:	4b1f      	ldr	r3, [pc, #124]	; (800736c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f2:	0c1b      	lsrs	r3, r3, #16
 80072f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072f8:	ee07 3a90 	vmov	s15, r3
 80072fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007300:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007304:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007308:	edd7 6a07 	vldr	s13, [r7, #28]
 800730c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007310:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007314:	ee17 2a90 	vmov	r2, s15
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800731c:	4b13      	ldr	r3, [pc, #76]	; (800736c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800731e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007320:	0e1b      	lsrs	r3, r3, #24
 8007322:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007326:	ee07 3a90 	vmov	s15, r3
 800732a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800732e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007332:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007336:	edd7 6a07 	vldr	s13, [r7, #28]
 800733a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800733e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007342:	ee17 2a90 	vmov	r2, s15
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800734a:	e008      	b.n	800735e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	609a      	str	r2, [r3, #8]
}
 800735e:	bf00      	nop
 8007360:	3724      	adds	r7, #36	; 0x24
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	58024400 	.word	0x58024400
 8007370:	03d09000 	.word	0x03d09000
 8007374:	46000000 	.word	0x46000000
 8007378:	4c742400 	.word	0x4c742400
 800737c:	4a742400 	.word	0x4a742400
 8007380:	4af42400 	.word	0x4af42400

08007384 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800738e:	2300      	movs	r3, #0
 8007390:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007392:	4b53      	ldr	r3, [pc, #332]	; (80074e0 <RCCEx_PLL2_Config+0x15c>)
 8007394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007396:	f003 0303 	and.w	r3, r3, #3
 800739a:	2b03      	cmp	r3, #3
 800739c:	d101      	bne.n	80073a2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e099      	b.n	80074d6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80073a2:	4b4f      	ldr	r3, [pc, #316]	; (80074e0 <RCCEx_PLL2_Config+0x15c>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a4e      	ldr	r2, [pc, #312]	; (80074e0 <RCCEx_PLL2_Config+0x15c>)
 80073a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80073ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073ae:	f7fb ff77 	bl	80032a0 <HAL_GetTick>
 80073b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80073b4:	e008      	b.n	80073c8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80073b6:	f7fb ff73 	bl	80032a0 <HAL_GetTick>
 80073ba:	4602      	mov	r2, r0
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	1ad3      	subs	r3, r2, r3
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d901      	bls.n	80073c8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80073c4:	2303      	movs	r3, #3
 80073c6:	e086      	b.n	80074d6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80073c8:	4b45      	ldr	r3, [pc, #276]	; (80074e0 <RCCEx_PLL2_Config+0x15c>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d1f0      	bne.n	80073b6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80073d4:	4b42      	ldr	r3, [pc, #264]	; (80074e0 <RCCEx_PLL2_Config+0x15c>)
 80073d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	031b      	lsls	r3, r3, #12
 80073e2:	493f      	ldr	r1, [pc, #252]	; (80074e0 <RCCEx_PLL2_Config+0x15c>)
 80073e4:	4313      	orrs	r3, r2
 80073e6:	628b      	str	r3, [r1, #40]	; 0x28
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	3b01      	subs	r3, #1
 80073ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	3b01      	subs	r3, #1
 80073f8:	025b      	lsls	r3, r3, #9
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	431a      	orrs	r2, r3
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	3b01      	subs	r3, #1
 8007404:	041b      	lsls	r3, r3, #16
 8007406:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800740a:	431a      	orrs	r2, r3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	691b      	ldr	r3, [r3, #16]
 8007410:	3b01      	subs	r3, #1
 8007412:	061b      	lsls	r3, r3, #24
 8007414:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007418:	4931      	ldr	r1, [pc, #196]	; (80074e0 <RCCEx_PLL2_Config+0x15c>)
 800741a:	4313      	orrs	r3, r2
 800741c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800741e:	4b30      	ldr	r3, [pc, #192]	; (80074e0 <RCCEx_PLL2_Config+0x15c>)
 8007420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007422:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	695b      	ldr	r3, [r3, #20]
 800742a:	492d      	ldr	r1, [pc, #180]	; (80074e0 <RCCEx_PLL2_Config+0x15c>)
 800742c:	4313      	orrs	r3, r2
 800742e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007430:	4b2b      	ldr	r3, [pc, #172]	; (80074e0 <RCCEx_PLL2_Config+0x15c>)
 8007432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007434:	f023 0220 	bic.w	r2, r3, #32
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	699b      	ldr	r3, [r3, #24]
 800743c:	4928      	ldr	r1, [pc, #160]	; (80074e0 <RCCEx_PLL2_Config+0x15c>)
 800743e:	4313      	orrs	r3, r2
 8007440:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007442:	4b27      	ldr	r3, [pc, #156]	; (80074e0 <RCCEx_PLL2_Config+0x15c>)
 8007444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007446:	4a26      	ldr	r2, [pc, #152]	; (80074e0 <RCCEx_PLL2_Config+0x15c>)
 8007448:	f023 0310 	bic.w	r3, r3, #16
 800744c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800744e:	4b24      	ldr	r3, [pc, #144]	; (80074e0 <RCCEx_PLL2_Config+0x15c>)
 8007450:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007452:	4b24      	ldr	r3, [pc, #144]	; (80074e4 <RCCEx_PLL2_Config+0x160>)
 8007454:	4013      	ands	r3, r2
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	69d2      	ldr	r2, [r2, #28]
 800745a:	00d2      	lsls	r2, r2, #3
 800745c:	4920      	ldr	r1, [pc, #128]	; (80074e0 <RCCEx_PLL2_Config+0x15c>)
 800745e:	4313      	orrs	r3, r2
 8007460:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007462:	4b1f      	ldr	r3, [pc, #124]	; (80074e0 <RCCEx_PLL2_Config+0x15c>)
 8007464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007466:	4a1e      	ldr	r2, [pc, #120]	; (80074e0 <RCCEx_PLL2_Config+0x15c>)
 8007468:	f043 0310 	orr.w	r3, r3, #16
 800746c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d106      	bne.n	8007482 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007474:	4b1a      	ldr	r3, [pc, #104]	; (80074e0 <RCCEx_PLL2_Config+0x15c>)
 8007476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007478:	4a19      	ldr	r2, [pc, #100]	; (80074e0 <RCCEx_PLL2_Config+0x15c>)
 800747a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800747e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007480:	e00f      	b.n	80074a2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	2b01      	cmp	r3, #1
 8007486:	d106      	bne.n	8007496 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007488:	4b15      	ldr	r3, [pc, #84]	; (80074e0 <RCCEx_PLL2_Config+0x15c>)
 800748a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748c:	4a14      	ldr	r2, [pc, #80]	; (80074e0 <RCCEx_PLL2_Config+0x15c>)
 800748e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007492:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007494:	e005      	b.n	80074a2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007496:	4b12      	ldr	r3, [pc, #72]	; (80074e0 <RCCEx_PLL2_Config+0x15c>)
 8007498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749a:	4a11      	ldr	r2, [pc, #68]	; (80074e0 <RCCEx_PLL2_Config+0x15c>)
 800749c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80074a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80074a2:	4b0f      	ldr	r3, [pc, #60]	; (80074e0 <RCCEx_PLL2_Config+0x15c>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a0e      	ldr	r2, [pc, #56]	; (80074e0 <RCCEx_PLL2_Config+0x15c>)
 80074a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80074ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074ae:	f7fb fef7 	bl	80032a0 <HAL_GetTick>
 80074b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80074b4:	e008      	b.n	80074c8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80074b6:	f7fb fef3 	bl	80032a0 <HAL_GetTick>
 80074ba:	4602      	mov	r2, r0
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	d901      	bls.n	80074c8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80074c4:	2303      	movs	r3, #3
 80074c6:	e006      	b.n	80074d6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80074c8:	4b05      	ldr	r3, [pc, #20]	; (80074e0 <RCCEx_PLL2_Config+0x15c>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d0f0      	beq.n	80074b6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80074d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	58024400 	.word	0x58024400
 80074e4:	ffff0007 	.word	0xffff0007

080074e8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80074f2:	2300      	movs	r3, #0
 80074f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80074f6:	4b53      	ldr	r3, [pc, #332]	; (8007644 <RCCEx_PLL3_Config+0x15c>)
 80074f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074fa:	f003 0303 	and.w	r3, r3, #3
 80074fe:	2b03      	cmp	r3, #3
 8007500:	d101      	bne.n	8007506 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	e099      	b.n	800763a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007506:	4b4f      	ldr	r3, [pc, #316]	; (8007644 <RCCEx_PLL3_Config+0x15c>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a4e      	ldr	r2, [pc, #312]	; (8007644 <RCCEx_PLL3_Config+0x15c>)
 800750c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007510:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007512:	f7fb fec5 	bl	80032a0 <HAL_GetTick>
 8007516:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007518:	e008      	b.n	800752c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800751a:	f7fb fec1 	bl	80032a0 <HAL_GetTick>
 800751e:	4602      	mov	r2, r0
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	1ad3      	subs	r3, r2, r3
 8007524:	2b02      	cmp	r3, #2
 8007526:	d901      	bls.n	800752c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007528:	2303      	movs	r3, #3
 800752a:	e086      	b.n	800763a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800752c:	4b45      	ldr	r3, [pc, #276]	; (8007644 <RCCEx_PLL3_Config+0x15c>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007534:	2b00      	cmp	r3, #0
 8007536:	d1f0      	bne.n	800751a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007538:	4b42      	ldr	r3, [pc, #264]	; (8007644 <RCCEx_PLL3_Config+0x15c>)
 800753a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800753c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	051b      	lsls	r3, r3, #20
 8007546:	493f      	ldr	r1, [pc, #252]	; (8007644 <RCCEx_PLL3_Config+0x15c>)
 8007548:	4313      	orrs	r3, r2
 800754a:	628b      	str	r3, [r1, #40]	; 0x28
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	3b01      	subs	r3, #1
 8007552:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	3b01      	subs	r3, #1
 800755c:	025b      	lsls	r3, r3, #9
 800755e:	b29b      	uxth	r3, r3
 8007560:	431a      	orrs	r2, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	3b01      	subs	r3, #1
 8007568:	041b      	lsls	r3, r3, #16
 800756a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800756e:	431a      	orrs	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	691b      	ldr	r3, [r3, #16]
 8007574:	3b01      	subs	r3, #1
 8007576:	061b      	lsls	r3, r3, #24
 8007578:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800757c:	4931      	ldr	r1, [pc, #196]	; (8007644 <RCCEx_PLL3_Config+0x15c>)
 800757e:	4313      	orrs	r3, r2
 8007580:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007582:	4b30      	ldr	r3, [pc, #192]	; (8007644 <RCCEx_PLL3_Config+0x15c>)
 8007584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007586:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	695b      	ldr	r3, [r3, #20]
 800758e:	492d      	ldr	r1, [pc, #180]	; (8007644 <RCCEx_PLL3_Config+0x15c>)
 8007590:	4313      	orrs	r3, r2
 8007592:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007594:	4b2b      	ldr	r3, [pc, #172]	; (8007644 <RCCEx_PLL3_Config+0x15c>)
 8007596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007598:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	699b      	ldr	r3, [r3, #24]
 80075a0:	4928      	ldr	r1, [pc, #160]	; (8007644 <RCCEx_PLL3_Config+0x15c>)
 80075a2:	4313      	orrs	r3, r2
 80075a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80075a6:	4b27      	ldr	r3, [pc, #156]	; (8007644 <RCCEx_PLL3_Config+0x15c>)
 80075a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075aa:	4a26      	ldr	r2, [pc, #152]	; (8007644 <RCCEx_PLL3_Config+0x15c>)
 80075ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80075b2:	4b24      	ldr	r3, [pc, #144]	; (8007644 <RCCEx_PLL3_Config+0x15c>)
 80075b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075b6:	4b24      	ldr	r3, [pc, #144]	; (8007648 <RCCEx_PLL3_Config+0x160>)
 80075b8:	4013      	ands	r3, r2
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	69d2      	ldr	r2, [r2, #28]
 80075be:	00d2      	lsls	r2, r2, #3
 80075c0:	4920      	ldr	r1, [pc, #128]	; (8007644 <RCCEx_PLL3_Config+0x15c>)
 80075c2:	4313      	orrs	r3, r2
 80075c4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80075c6:	4b1f      	ldr	r3, [pc, #124]	; (8007644 <RCCEx_PLL3_Config+0x15c>)
 80075c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ca:	4a1e      	ldr	r2, [pc, #120]	; (8007644 <RCCEx_PLL3_Config+0x15c>)
 80075cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d106      	bne.n	80075e6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80075d8:	4b1a      	ldr	r3, [pc, #104]	; (8007644 <RCCEx_PLL3_Config+0x15c>)
 80075da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075dc:	4a19      	ldr	r2, [pc, #100]	; (8007644 <RCCEx_PLL3_Config+0x15c>)
 80075de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80075e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80075e4:	e00f      	b.n	8007606 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d106      	bne.n	80075fa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80075ec:	4b15      	ldr	r3, [pc, #84]	; (8007644 <RCCEx_PLL3_Config+0x15c>)
 80075ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f0:	4a14      	ldr	r2, [pc, #80]	; (8007644 <RCCEx_PLL3_Config+0x15c>)
 80075f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80075f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80075f8:	e005      	b.n	8007606 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80075fa:	4b12      	ldr	r3, [pc, #72]	; (8007644 <RCCEx_PLL3_Config+0x15c>)
 80075fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075fe:	4a11      	ldr	r2, [pc, #68]	; (8007644 <RCCEx_PLL3_Config+0x15c>)
 8007600:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007604:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007606:	4b0f      	ldr	r3, [pc, #60]	; (8007644 <RCCEx_PLL3_Config+0x15c>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a0e      	ldr	r2, [pc, #56]	; (8007644 <RCCEx_PLL3_Config+0x15c>)
 800760c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007610:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007612:	f7fb fe45 	bl	80032a0 <HAL_GetTick>
 8007616:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007618:	e008      	b.n	800762c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800761a:	f7fb fe41 	bl	80032a0 <HAL_GetTick>
 800761e:	4602      	mov	r2, r0
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	1ad3      	subs	r3, r2, r3
 8007624:	2b02      	cmp	r3, #2
 8007626:	d901      	bls.n	800762c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007628:	2303      	movs	r3, #3
 800762a:	e006      	b.n	800763a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800762c:	4b05      	ldr	r3, [pc, #20]	; (8007644 <RCCEx_PLL3_Config+0x15c>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007634:	2b00      	cmp	r3, #0
 8007636:	d0f0      	beq.n	800761a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007638:	7bfb      	ldrb	r3, [r7, #15]
}
 800763a:	4618      	mov	r0, r3
 800763c:	3710      	adds	r7, #16
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	58024400 	.word	0x58024400
 8007648:	ffff0007 	.word	0xffff0007

0800764c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d101      	bne.n	800765e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	e042      	b.n	80076e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007664:	2b00      	cmp	r3, #0
 8007666:	d106      	bne.n	8007676 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f7fb fbe5 	bl	8002e40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2224      	movs	r2, #36	; 0x24
 800767a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f022 0201 	bic.w	r2, r2, #1
 800768c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 f82c 	bl	80076ec <UART_SetConfig>
 8007694:	4603      	mov	r3, r0
 8007696:	2b01      	cmp	r3, #1
 8007698:	d101      	bne.n	800769e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	e022      	b.n	80076e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d002      	beq.n	80076ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 fd88 	bl	80081bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	685a      	ldr	r2, [r3, #4]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80076ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	689a      	ldr	r2, [r3, #8]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80076ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f042 0201 	orr.w	r2, r2, #1
 80076da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 fe0f 	bl	8008300 <UART_CheckIdleState>
 80076e2:	4603      	mov	r3, r0
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3708      	adds	r7, #8
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076f0:	b092      	sub	sp, #72	; 0x48
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80076f6:	2300      	movs	r3, #0
 80076f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	689a      	ldr	r2, [r3, #8]
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	691b      	ldr	r3, [r3, #16]
 8007704:	431a      	orrs	r2, r3
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	695b      	ldr	r3, [r3, #20]
 800770a:	431a      	orrs	r2, r3
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	69db      	ldr	r3, [r3, #28]
 8007710:	4313      	orrs	r3, r2
 8007712:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	4bbe      	ldr	r3, [pc, #760]	; (8007a14 <UART_SetConfig+0x328>)
 800771c:	4013      	ands	r3, r2
 800771e:	697a      	ldr	r2, [r7, #20]
 8007720:	6812      	ldr	r2, [r2, #0]
 8007722:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007724:	430b      	orrs	r3, r1
 8007726:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	68da      	ldr	r2, [r3, #12]
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	430a      	orrs	r2, r1
 800773c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	699b      	ldr	r3, [r3, #24]
 8007742:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4ab3      	ldr	r2, [pc, #716]	; (8007a18 <UART_SetConfig+0x32c>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d004      	beq.n	8007758 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	6a1b      	ldr	r3, [r3, #32]
 8007752:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007754:	4313      	orrs	r3, r2
 8007756:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	689a      	ldr	r2, [r3, #8]
 800775e:	4baf      	ldr	r3, [pc, #700]	; (8007a1c <UART_SetConfig+0x330>)
 8007760:	4013      	ands	r3, r2
 8007762:	697a      	ldr	r2, [r7, #20]
 8007764:	6812      	ldr	r2, [r2, #0]
 8007766:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007768:	430b      	orrs	r3, r1
 800776a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007772:	f023 010f 	bic.w	r1, r3, #15
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	430a      	orrs	r2, r1
 8007780:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4aa6      	ldr	r2, [pc, #664]	; (8007a20 <UART_SetConfig+0x334>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d177      	bne.n	800787c <UART_SetConfig+0x190>
 800778c:	4ba5      	ldr	r3, [pc, #660]	; (8007a24 <UART_SetConfig+0x338>)
 800778e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007790:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007794:	2b28      	cmp	r3, #40	; 0x28
 8007796:	d86d      	bhi.n	8007874 <UART_SetConfig+0x188>
 8007798:	a201      	add	r2, pc, #4	; (adr r2, 80077a0 <UART_SetConfig+0xb4>)
 800779a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800779e:	bf00      	nop
 80077a0:	08007845 	.word	0x08007845
 80077a4:	08007875 	.word	0x08007875
 80077a8:	08007875 	.word	0x08007875
 80077ac:	08007875 	.word	0x08007875
 80077b0:	08007875 	.word	0x08007875
 80077b4:	08007875 	.word	0x08007875
 80077b8:	08007875 	.word	0x08007875
 80077bc:	08007875 	.word	0x08007875
 80077c0:	0800784d 	.word	0x0800784d
 80077c4:	08007875 	.word	0x08007875
 80077c8:	08007875 	.word	0x08007875
 80077cc:	08007875 	.word	0x08007875
 80077d0:	08007875 	.word	0x08007875
 80077d4:	08007875 	.word	0x08007875
 80077d8:	08007875 	.word	0x08007875
 80077dc:	08007875 	.word	0x08007875
 80077e0:	08007855 	.word	0x08007855
 80077e4:	08007875 	.word	0x08007875
 80077e8:	08007875 	.word	0x08007875
 80077ec:	08007875 	.word	0x08007875
 80077f0:	08007875 	.word	0x08007875
 80077f4:	08007875 	.word	0x08007875
 80077f8:	08007875 	.word	0x08007875
 80077fc:	08007875 	.word	0x08007875
 8007800:	0800785d 	.word	0x0800785d
 8007804:	08007875 	.word	0x08007875
 8007808:	08007875 	.word	0x08007875
 800780c:	08007875 	.word	0x08007875
 8007810:	08007875 	.word	0x08007875
 8007814:	08007875 	.word	0x08007875
 8007818:	08007875 	.word	0x08007875
 800781c:	08007875 	.word	0x08007875
 8007820:	08007865 	.word	0x08007865
 8007824:	08007875 	.word	0x08007875
 8007828:	08007875 	.word	0x08007875
 800782c:	08007875 	.word	0x08007875
 8007830:	08007875 	.word	0x08007875
 8007834:	08007875 	.word	0x08007875
 8007838:	08007875 	.word	0x08007875
 800783c:	08007875 	.word	0x08007875
 8007840:	0800786d 	.word	0x0800786d
 8007844:	2301      	movs	r3, #1
 8007846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800784a:	e222      	b.n	8007c92 <UART_SetConfig+0x5a6>
 800784c:	2304      	movs	r3, #4
 800784e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007852:	e21e      	b.n	8007c92 <UART_SetConfig+0x5a6>
 8007854:	2308      	movs	r3, #8
 8007856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800785a:	e21a      	b.n	8007c92 <UART_SetConfig+0x5a6>
 800785c:	2310      	movs	r3, #16
 800785e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007862:	e216      	b.n	8007c92 <UART_SetConfig+0x5a6>
 8007864:	2320      	movs	r3, #32
 8007866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800786a:	e212      	b.n	8007c92 <UART_SetConfig+0x5a6>
 800786c:	2340      	movs	r3, #64	; 0x40
 800786e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007872:	e20e      	b.n	8007c92 <UART_SetConfig+0x5a6>
 8007874:	2380      	movs	r3, #128	; 0x80
 8007876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800787a:	e20a      	b.n	8007c92 <UART_SetConfig+0x5a6>
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a69      	ldr	r2, [pc, #420]	; (8007a28 <UART_SetConfig+0x33c>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d130      	bne.n	80078e8 <UART_SetConfig+0x1fc>
 8007886:	4b67      	ldr	r3, [pc, #412]	; (8007a24 <UART_SetConfig+0x338>)
 8007888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800788a:	f003 0307 	and.w	r3, r3, #7
 800788e:	2b05      	cmp	r3, #5
 8007890:	d826      	bhi.n	80078e0 <UART_SetConfig+0x1f4>
 8007892:	a201      	add	r2, pc, #4	; (adr r2, 8007898 <UART_SetConfig+0x1ac>)
 8007894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007898:	080078b1 	.word	0x080078b1
 800789c:	080078b9 	.word	0x080078b9
 80078a0:	080078c1 	.word	0x080078c1
 80078a4:	080078c9 	.word	0x080078c9
 80078a8:	080078d1 	.word	0x080078d1
 80078ac:	080078d9 	.word	0x080078d9
 80078b0:	2300      	movs	r3, #0
 80078b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078b6:	e1ec      	b.n	8007c92 <UART_SetConfig+0x5a6>
 80078b8:	2304      	movs	r3, #4
 80078ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078be:	e1e8      	b.n	8007c92 <UART_SetConfig+0x5a6>
 80078c0:	2308      	movs	r3, #8
 80078c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078c6:	e1e4      	b.n	8007c92 <UART_SetConfig+0x5a6>
 80078c8:	2310      	movs	r3, #16
 80078ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ce:	e1e0      	b.n	8007c92 <UART_SetConfig+0x5a6>
 80078d0:	2320      	movs	r3, #32
 80078d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078d6:	e1dc      	b.n	8007c92 <UART_SetConfig+0x5a6>
 80078d8:	2340      	movs	r3, #64	; 0x40
 80078da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078de:	e1d8      	b.n	8007c92 <UART_SetConfig+0x5a6>
 80078e0:	2380      	movs	r3, #128	; 0x80
 80078e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078e6:	e1d4      	b.n	8007c92 <UART_SetConfig+0x5a6>
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a4f      	ldr	r2, [pc, #316]	; (8007a2c <UART_SetConfig+0x340>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d130      	bne.n	8007954 <UART_SetConfig+0x268>
 80078f2:	4b4c      	ldr	r3, [pc, #304]	; (8007a24 <UART_SetConfig+0x338>)
 80078f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078f6:	f003 0307 	and.w	r3, r3, #7
 80078fa:	2b05      	cmp	r3, #5
 80078fc:	d826      	bhi.n	800794c <UART_SetConfig+0x260>
 80078fe:	a201      	add	r2, pc, #4	; (adr r2, 8007904 <UART_SetConfig+0x218>)
 8007900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007904:	0800791d 	.word	0x0800791d
 8007908:	08007925 	.word	0x08007925
 800790c:	0800792d 	.word	0x0800792d
 8007910:	08007935 	.word	0x08007935
 8007914:	0800793d 	.word	0x0800793d
 8007918:	08007945 	.word	0x08007945
 800791c:	2300      	movs	r3, #0
 800791e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007922:	e1b6      	b.n	8007c92 <UART_SetConfig+0x5a6>
 8007924:	2304      	movs	r3, #4
 8007926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800792a:	e1b2      	b.n	8007c92 <UART_SetConfig+0x5a6>
 800792c:	2308      	movs	r3, #8
 800792e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007932:	e1ae      	b.n	8007c92 <UART_SetConfig+0x5a6>
 8007934:	2310      	movs	r3, #16
 8007936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800793a:	e1aa      	b.n	8007c92 <UART_SetConfig+0x5a6>
 800793c:	2320      	movs	r3, #32
 800793e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007942:	e1a6      	b.n	8007c92 <UART_SetConfig+0x5a6>
 8007944:	2340      	movs	r3, #64	; 0x40
 8007946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800794a:	e1a2      	b.n	8007c92 <UART_SetConfig+0x5a6>
 800794c:	2380      	movs	r3, #128	; 0x80
 800794e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007952:	e19e      	b.n	8007c92 <UART_SetConfig+0x5a6>
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a35      	ldr	r2, [pc, #212]	; (8007a30 <UART_SetConfig+0x344>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d130      	bne.n	80079c0 <UART_SetConfig+0x2d4>
 800795e:	4b31      	ldr	r3, [pc, #196]	; (8007a24 <UART_SetConfig+0x338>)
 8007960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007962:	f003 0307 	and.w	r3, r3, #7
 8007966:	2b05      	cmp	r3, #5
 8007968:	d826      	bhi.n	80079b8 <UART_SetConfig+0x2cc>
 800796a:	a201      	add	r2, pc, #4	; (adr r2, 8007970 <UART_SetConfig+0x284>)
 800796c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007970:	08007989 	.word	0x08007989
 8007974:	08007991 	.word	0x08007991
 8007978:	08007999 	.word	0x08007999
 800797c:	080079a1 	.word	0x080079a1
 8007980:	080079a9 	.word	0x080079a9
 8007984:	080079b1 	.word	0x080079b1
 8007988:	2300      	movs	r3, #0
 800798a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800798e:	e180      	b.n	8007c92 <UART_SetConfig+0x5a6>
 8007990:	2304      	movs	r3, #4
 8007992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007996:	e17c      	b.n	8007c92 <UART_SetConfig+0x5a6>
 8007998:	2308      	movs	r3, #8
 800799a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800799e:	e178      	b.n	8007c92 <UART_SetConfig+0x5a6>
 80079a0:	2310      	movs	r3, #16
 80079a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079a6:	e174      	b.n	8007c92 <UART_SetConfig+0x5a6>
 80079a8:	2320      	movs	r3, #32
 80079aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079ae:	e170      	b.n	8007c92 <UART_SetConfig+0x5a6>
 80079b0:	2340      	movs	r3, #64	; 0x40
 80079b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079b6:	e16c      	b.n	8007c92 <UART_SetConfig+0x5a6>
 80079b8:	2380      	movs	r3, #128	; 0x80
 80079ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079be:	e168      	b.n	8007c92 <UART_SetConfig+0x5a6>
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a1b      	ldr	r2, [pc, #108]	; (8007a34 <UART_SetConfig+0x348>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d142      	bne.n	8007a50 <UART_SetConfig+0x364>
 80079ca:	4b16      	ldr	r3, [pc, #88]	; (8007a24 <UART_SetConfig+0x338>)
 80079cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ce:	f003 0307 	and.w	r3, r3, #7
 80079d2:	2b05      	cmp	r3, #5
 80079d4:	d838      	bhi.n	8007a48 <UART_SetConfig+0x35c>
 80079d6:	a201      	add	r2, pc, #4	; (adr r2, 80079dc <UART_SetConfig+0x2f0>)
 80079d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079dc:	080079f5 	.word	0x080079f5
 80079e0:	080079fd 	.word	0x080079fd
 80079e4:	08007a05 	.word	0x08007a05
 80079e8:	08007a0d 	.word	0x08007a0d
 80079ec:	08007a39 	.word	0x08007a39
 80079f0:	08007a41 	.word	0x08007a41
 80079f4:	2300      	movs	r3, #0
 80079f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079fa:	e14a      	b.n	8007c92 <UART_SetConfig+0x5a6>
 80079fc:	2304      	movs	r3, #4
 80079fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a02:	e146      	b.n	8007c92 <UART_SetConfig+0x5a6>
 8007a04:	2308      	movs	r3, #8
 8007a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a0a:	e142      	b.n	8007c92 <UART_SetConfig+0x5a6>
 8007a0c:	2310      	movs	r3, #16
 8007a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a12:	e13e      	b.n	8007c92 <UART_SetConfig+0x5a6>
 8007a14:	cfff69f3 	.word	0xcfff69f3
 8007a18:	58000c00 	.word	0x58000c00
 8007a1c:	11fff4ff 	.word	0x11fff4ff
 8007a20:	40011000 	.word	0x40011000
 8007a24:	58024400 	.word	0x58024400
 8007a28:	40004400 	.word	0x40004400
 8007a2c:	40004800 	.word	0x40004800
 8007a30:	40004c00 	.word	0x40004c00
 8007a34:	40005000 	.word	0x40005000
 8007a38:	2320      	movs	r3, #32
 8007a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a3e:	e128      	b.n	8007c92 <UART_SetConfig+0x5a6>
 8007a40:	2340      	movs	r3, #64	; 0x40
 8007a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a46:	e124      	b.n	8007c92 <UART_SetConfig+0x5a6>
 8007a48:	2380      	movs	r3, #128	; 0x80
 8007a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a4e:	e120      	b.n	8007c92 <UART_SetConfig+0x5a6>
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4acb      	ldr	r2, [pc, #812]	; (8007d84 <UART_SetConfig+0x698>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d176      	bne.n	8007b48 <UART_SetConfig+0x45c>
 8007a5a:	4bcb      	ldr	r3, [pc, #812]	; (8007d88 <UART_SetConfig+0x69c>)
 8007a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a62:	2b28      	cmp	r3, #40	; 0x28
 8007a64:	d86c      	bhi.n	8007b40 <UART_SetConfig+0x454>
 8007a66:	a201      	add	r2, pc, #4	; (adr r2, 8007a6c <UART_SetConfig+0x380>)
 8007a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a6c:	08007b11 	.word	0x08007b11
 8007a70:	08007b41 	.word	0x08007b41
 8007a74:	08007b41 	.word	0x08007b41
 8007a78:	08007b41 	.word	0x08007b41
 8007a7c:	08007b41 	.word	0x08007b41
 8007a80:	08007b41 	.word	0x08007b41
 8007a84:	08007b41 	.word	0x08007b41
 8007a88:	08007b41 	.word	0x08007b41
 8007a8c:	08007b19 	.word	0x08007b19
 8007a90:	08007b41 	.word	0x08007b41
 8007a94:	08007b41 	.word	0x08007b41
 8007a98:	08007b41 	.word	0x08007b41
 8007a9c:	08007b41 	.word	0x08007b41
 8007aa0:	08007b41 	.word	0x08007b41
 8007aa4:	08007b41 	.word	0x08007b41
 8007aa8:	08007b41 	.word	0x08007b41
 8007aac:	08007b21 	.word	0x08007b21
 8007ab0:	08007b41 	.word	0x08007b41
 8007ab4:	08007b41 	.word	0x08007b41
 8007ab8:	08007b41 	.word	0x08007b41
 8007abc:	08007b41 	.word	0x08007b41
 8007ac0:	08007b41 	.word	0x08007b41
 8007ac4:	08007b41 	.word	0x08007b41
 8007ac8:	08007b41 	.word	0x08007b41
 8007acc:	08007b29 	.word	0x08007b29
 8007ad0:	08007b41 	.word	0x08007b41
 8007ad4:	08007b41 	.word	0x08007b41
 8007ad8:	08007b41 	.word	0x08007b41
 8007adc:	08007b41 	.word	0x08007b41
 8007ae0:	08007b41 	.word	0x08007b41
 8007ae4:	08007b41 	.word	0x08007b41
 8007ae8:	08007b41 	.word	0x08007b41
 8007aec:	08007b31 	.word	0x08007b31
 8007af0:	08007b41 	.word	0x08007b41
 8007af4:	08007b41 	.word	0x08007b41
 8007af8:	08007b41 	.word	0x08007b41
 8007afc:	08007b41 	.word	0x08007b41
 8007b00:	08007b41 	.word	0x08007b41
 8007b04:	08007b41 	.word	0x08007b41
 8007b08:	08007b41 	.word	0x08007b41
 8007b0c:	08007b39 	.word	0x08007b39
 8007b10:	2301      	movs	r3, #1
 8007b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b16:	e0bc      	b.n	8007c92 <UART_SetConfig+0x5a6>
 8007b18:	2304      	movs	r3, #4
 8007b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b1e:	e0b8      	b.n	8007c92 <UART_SetConfig+0x5a6>
 8007b20:	2308      	movs	r3, #8
 8007b22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b26:	e0b4      	b.n	8007c92 <UART_SetConfig+0x5a6>
 8007b28:	2310      	movs	r3, #16
 8007b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b2e:	e0b0      	b.n	8007c92 <UART_SetConfig+0x5a6>
 8007b30:	2320      	movs	r3, #32
 8007b32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b36:	e0ac      	b.n	8007c92 <UART_SetConfig+0x5a6>
 8007b38:	2340      	movs	r3, #64	; 0x40
 8007b3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b3e:	e0a8      	b.n	8007c92 <UART_SetConfig+0x5a6>
 8007b40:	2380      	movs	r3, #128	; 0x80
 8007b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b46:	e0a4      	b.n	8007c92 <UART_SetConfig+0x5a6>
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a8f      	ldr	r2, [pc, #572]	; (8007d8c <UART_SetConfig+0x6a0>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d130      	bne.n	8007bb4 <UART_SetConfig+0x4c8>
 8007b52:	4b8d      	ldr	r3, [pc, #564]	; (8007d88 <UART_SetConfig+0x69c>)
 8007b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b56:	f003 0307 	and.w	r3, r3, #7
 8007b5a:	2b05      	cmp	r3, #5
 8007b5c:	d826      	bhi.n	8007bac <UART_SetConfig+0x4c0>
 8007b5e:	a201      	add	r2, pc, #4	; (adr r2, 8007b64 <UART_SetConfig+0x478>)
 8007b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b64:	08007b7d 	.word	0x08007b7d
 8007b68:	08007b85 	.word	0x08007b85
 8007b6c:	08007b8d 	.word	0x08007b8d
 8007b70:	08007b95 	.word	0x08007b95
 8007b74:	08007b9d 	.word	0x08007b9d
 8007b78:	08007ba5 	.word	0x08007ba5
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b82:	e086      	b.n	8007c92 <UART_SetConfig+0x5a6>
 8007b84:	2304      	movs	r3, #4
 8007b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b8a:	e082      	b.n	8007c92 <UART_SetConfig+0x5a6>
 8007b8c:	2308      	movs	r3, #8
 8007b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b92:	e07e      	b.n	8007c92 <UART_SetConfig+0x5a6>
 8007b94:	2310      	movs	r3, #16
 8007b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b9a:	e07a      	b.n	8007c92 <UART_SetConfig+0x5a6>
 8007b9c:	2320      	movs	r3, #32
 8007b9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ba2:	e076      	b.n	8007c92 <UART_SetConfig+0x5a6>
 8007ba4:	2340      	movs	r3, #64	; 0x40
 8007ba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007baa:	e072      	b.n	8007c92 <UART_SetConfig+0x5a6>
 8007bac:	2380      	movs	r3, #128	; 0x80
 8007bae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bb2:	e06e      	b.n	8007c92 <UART_SetConfig+0x5a6>
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a75      	ldr	r2, [pc, #468]	; (8007d90 <UART_SetConfig+0x6a4>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d130      	bne.n	8007c20 <UART_SetConfig+0x534>
 8007bbe:	4b72      	ldr	r3, [pc, #456]	; (8007d88 <UART_SetConfig+0x69c>)
 8007bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bc2:	f003 0307 	and.w	r3, r3, #7
 8007bc6:	2b05      	cmp	r3, #5
 8007bc8:	d826      	bhi.n	8007c18 <UART_SetConfig+0x52c>
 8007bca:	a201      	add	r2, pc, #4	; (adr r2, 8007bd0 <UART_SetConfig+0x4e4>)
 8007bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd0:	08007be9 	.word	0x08007be9
 8007bd4:	08007bf1 	.word	0x08007bf1
 8007bd8:	08007bf9 	.word	0x08007bf9
 8007bdc:	08007c01 	.word	0x08007c01
 8007be0:	08007c09 	.word	0x08007c09
 8007be4:	08007c11 	.word	0x08007c11
 8007be8:	2300      	movs	r3, #0
 8007bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bee:	e050      	b.n	8007c92 <UART_SetConfig+0x5a6>
 8007bf0:	2304      	movs	r3, #4
 8007bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bf6:	e04c      	b.n	8007c92 <UART_SetConfig+0x5a6>
 8007bf8:	2308      	movs	r3, #8
 8007bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bfe:	e048      	b.n	8007c92 <UART_SetConfig+0x5a6>
 8007c00:	2310      	movs	r3, #16
 8007c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c06:	e044      	b.n	8007c92 <UART_SetConfig+0x5a6>
 8007c08:	2320      	movs	r3, #32
 8007c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c0e:	e040      	b.n	8007c92 <UART_SetConfig+0x5a6>
 8007c10:	2340      	movs	r3, #64	; 0x40
 8007c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c16:	e03c      	b.n	8007c92 <UART_SetConfig+0x5a6>
 8007c18:	2380      	movs	r3, #128	; 0x80
 8007c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c1e:	e038      	b.n	8007c92 <UART_SetConfig+0x5a6>
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a5b      	ldr	r2, [pc, #364]	; (8007d94 <UART_SetConfig+0x6a8>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d130      	bne.n	8007c8c <UART_SetConfig+0x5a0>
 8007c2a:	4b57      	ldr	r3, [pc, #348]	; (8007d88 <UART_SetConfig+0x69c>)
 8007c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c2e:	f003 0307 	and.w	r3, r3, #7
 8007c32:	2b05      	cmp	r3, #5
 8007c34:	d826      	bhi.n	8007c84 <UART_SetConfig+0x598>
 8007c36:	a201      	add	r2, pc, #4	; (adr r2, 8007c3c <UART_SetConfig+0x550>)
 8007c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c3c:	08007c55 	.word	0x08007c55
 8007c40:	08007c5d 	.word	0x08007c5d
 8007c44:	08007c65 	.word	0x08007c65
 8007c48:	08007c6d 	.word	0x08007c6d
 8007c4c:	08007c75 	.word	0x08007c75
 8007c50:	08007c7d 	.word	0x08007c7d
 8007c54:	2302      	movs	r3, #2
 8007c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c5a:	e01a      	b.n	8007c92 <UART_SetConfig+0x5a6>
 8007c5c:	2304      	movs	r3, #4
 8007c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c62:	e016      	b.n	8007c92 <UART_SetConfig+0x5a6>
 8007c64:	2308      	movs	r3, #8
 8007c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c6a:	e012      	b.n	8007c92 <UART_SetConfig+0x5a6>
 8007c6c:	2310      	movs	r3, #16
 8007c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c72:	e00e      	b.n	8007c92 <UART_SetConfig+0x5a6>
 8007c74:	2320      	movs	r3, #32
 8007c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c7a:	e00a      	b.n	8007c92 <UART_SetConfig+0x5a6>
 8007c7c:	2340      	movs	r3, #64	; 0x40
 8007c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c82:	e006      	b.n	8007c92 <UART_SetConfig+0x5a6>
 8007c84:	2380      	movs	r3, #128	; 0x80
 8007c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c8a:	e002      	b.n	8007c92 <UART_SetConfig+0x5a6>
 8007c8c:	2380      	movs	r3, #128	; 0x80
 8007c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a3f      	ldr	r2, [pc, #252]	; (8007d94 <UART_SetConfig+0x6a8>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	f040 80f8 	bne.w	8007e8e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007c9e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007ca2:	2b20      	cmp	r3, #32
 8007ca4:	dc46      	bgt.n	8007d34 <UART_SetConfig+0x648>
 8007ca6:	2b02      	cmp	r3, #2
 8007ca8:	f2c0 8082 	blt.w	8007db0 <UART_SetConfig+0x6c4>
 8007cac:	3b02      	subs	r3, #2
 8007cae:	2b1e      	cmp	r3, #30
 8007cb0:	d87e      	bhi.n	8007db0 <UART_SetConfig+0x6c4>
 8007cb2:	a201      	add	r2, pc, #4	; (adr r2, 8007cb8 <UART_SetConfig+0x5cc>)
 8007cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb8:	08007d3b 	.word	0x08007d3b
 8007cbc:	08007db1 	.word	0x08007db1
 8007cc0:	08007d43 	.word	0x08007d43
 8007cc4:	08007db1 	.word	0x08007db1
 8007cc8:	08007db1 	.word	0x08007db1
 8007ccc:	08007db1 	.word	0x08007db1
 8007cd0:	08007d53 	.word	0x08007d53
 8007cd4:	08007db1 	.word	0x08007db1
 8007cd8:	08007db1 	.word	0x08007db1
 8007cdc:	08007db1 	.word	0x08007db1
 8007ce0:	08007db1 	.word	0x08007db1
 8007ce4:	08007db1 	.word	0x08007db1
 8007ce8:	08007db1 	.word	0x08007db1
 8007cec:	08007db1 	.word	0x08007db1
 8007cf0:	08007d63 	.word	0x08007d63
 8007cf4:	08007db1 	.word	0x08007db1
 8007cf8:	08007db1 	.word	0x08007db1
 8007cfc:	08007db1 	.word	0x08007db1
 8007d00:	08007db1 	.word	0x08007db1
 8007d04:	08007db1 	.word	0x08007db1
 8007d08:	08007db1 	.word	0x08007db1
 8007d0c:	08007db1 	.word	0x08007db1
 8007d10:	08007db1 	.word	0x08007db1
 8007d14:	08007db1 	.word	0x08007db1
 8007d18:	08007db1 	.word	0x08007db1
 8007d1c:	08007db1 	.word	0x08007db1
 8007d20:	08007db1 	.word	0x08007db1
 8007d24:	08007db1 	.word	0x08007db1
 8007d28:	08007db1 	.word	0x08007db1
 8007d2c:	08007db1 	.word	0x08007db1
 8007d30:	08007da3 	.word	0x08007da3
 8007d34:	2b40      	cmp	r3, #64	; 0x40
 8007d36:	d037      	beq.n	8007da8 <UART_SetConfig+0x6bc>
 8007d38:	e03a      	b.n	8007db0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007d3a:	f7ff f865 	bl	8006e08 <HAL_RCCEx_GetD3PCLK1Freq>
 8007d3e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007d40:	e03c      	b.n	8007dbc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7ff f874 	bl	8006e34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d50:	e034      	b.n	8007dbc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d52:	f107 0318 	add.w	r3, r7, #24
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7ff f9c0 	bl	80070dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d60:	e02c      	b.n	8007dbc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d62:	4b09      	ldr	r3, [pc, #36]	; (8007d88 <UART_SetConfig+0x69c>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f003 0320 	and.w	r3, r3, #32
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d016      	beq.n	8007d9c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007d6e:	4b06      	ldr	r3, [pc, #24]	; (8007d88 <UART_SetConfig+0x69c>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	08db      	lsrs	r3, r3, #3
 8007d74:	f003 0303 	and.w	r3, r3, #3
 8007d78:	4a07      	ldr	r2, [pc, #28]	; (8007d98 <UART_SetConfig+0x6ac>)
 8007d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007d80:	e01c      	b.n	8007dbc <UART_SetConfig+0x6d0>
 8007d82:	bf00      	nop
 8007d84:	40011400 	.word	0x40011400
 8007d88:	58024400 	.word	0x58024400
 8007d8c:	40007800 	.word	0x40007800
 8007d90:	40007c00 	.word	0x40007c00
 8007d94:	58000c00 	.word	0x58000c00
 8007d98:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007d9c:	4b9d      	ldr	r3, [pc, #628]	; (8008014 <UART_SetConfig+0x928>)
 8007d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007da0:	e00c      	b.n	8007dbc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007da2:	4b9d      	ldr	r3, [pc, #628]	; (8008018 <UART_SetConfig+0x92c>)
 8007da4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007da6:	e009      	b.n	8007dbc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007da8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007dae:	e005      	b.n	8007dbc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007db0:	2300      	movs	r3, #0
 8007db2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007dba:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	f000 81de 	beq.w	8008180 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc8:	4a94      	ldr	r2, [pc, #592]	; (800801c <UART_SetConfig+0x930>)
 8007dca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007dce:	461a      	mov	r2, r3
 8007dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dd2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007dd6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	685a      	ldr	r2, [r3, #4]
 8007ddc:	4613      	mov	r3, r2
 8007dde:	005b      	lsls	r3, r3, #1
 8007de0:	4413      	add	r3, r2
 8007de2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d305      	bcc.n	8007df4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007dee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d903      	bls.n	8007dfc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007df4:	2301      	movs	r3, #1
 8007df6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007dfa:	e1c1      	b.n	8008180 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dfe:	2200      	movs	r2, #0
 8007e00:	60bb      	str	r3, [r7, #8]
 8007e02:	60fa      	str	r2, [r7, #12]
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e08:	4a84      	ldr	r2, [pc, #528]	; (800801c <UART_SetConfig+0x930>)
 8007e0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	2200      	movs	r2, #0
 8007e12:	603b      	str	r3, [r7, #0]
 8007e14:	607a      	str	r2, [r7, #4]
 8007e16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007e1e:	f7f8 faaf 	bl	8000380 <__aeabi_uldivmod>
 8007e22:	4602      	mov	r2, r0
 8007e24:	460b      	mov	r3, r1
 8007e26:	4610      	mov	r0, r2
 8007e28:	4619      	mov	r1, r3
 8007e2a:	f04f 0200 	mov.w	r2, #0
 8007e2e:	f04f 0300 	mov.w	r3, #0
 8007e32:	020b      	lsls	r3, r1, #8
 8007e34:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007e38:	0202      	lsls	r2, r0, #8
 8007e3a:	6979      	ldr	r1, [r7, #20]
 8007e3c:	6849      	ldr	r1, [r1, #4]
 8007e3e:	0849      	lsrs	r1, r1, #1
 8007e40:	2000      	movs	r0, #0
 8007e42:	460c      	mov	r4, r1
 8007e44:	4605      	mov	r5, r0
 8007e46:	eb12 0804 	adds.w	r8, r2, r4
 8007e4a:	eb43 0905 	adc.w	r9, r3, r5
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	469a      	mov	sl, r3
 8007e56:	4693      	mov	fp, r2
 8007e58:	4652      	mov	r2, sl
 8007e5a:	465b      	mov	r3, fp
 8007e5c:	4640      	mov	r0, r8
 8007e5e:	4649      	mov	r1, r9
 8007e60:	f7f8 fa8e 	bl	8000380 <__aeabi_uldivmod>
 8007e64:	4602      	mov	r2, r0
 8007e66:	460b      	mov	r3, r1
 8007e68:	4613      	mov	r3, r2
 8007e6a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e72:	d308      	bcc.n	8007e86 <UART_SetConfig+0x79a>
 8007e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e7a:	d204      	bcs.n	8007e86 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e82:	60da      	str	r2, [r3, #12]
 8007e84:	e17c      	b.n	8008180 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007e8c:	e178      	b.n	8008180 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	69db      	ldr	r3, [r3, #28]
 8007e92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e96:	f040 80c5 	bne.w	8008024 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007e9a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007e9e:	2b20      	cmp	r3, #32
 8007ea0:	dc48      	bgt.n	8007f34 <UART_SetConfig+0x848>
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	db7b      	blt.n	8007f9e <UART_SetConfig+0x8b2>
 8007ea6:	2b20      	cmp	r3, #32
 8007ea8:	d879      	bhi.n	8007f9e <UART_SetConfig+0x8b2>
 8007eaa:	a201      	add	r2, pc, #4	; (adr r2, 8007eb0 <UART_SetConfig+0x7c4>)
 8007eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eb0:	08007f3b 	.word	0x08007f3b
 8007eb4:	08007f43 	.word	0x08007f43
 8007eb8:	08007f9f 	.word	0x08007f9f
 8007ebc:	08007f9f 	.word	0x08007f9f
 8007ec0:	08007f4b 	.word	0x08007f4b
 8007ec4:	08007f9f 	.word	0x08007f9f
 8007ec8:	08007f9f 	.word	0x08007f9f
 8007ecc:	08007f9f 	.word	0x08007f9f
 8007ed0:	08007f5b 	.word	0x08007f5b
 8007ed4:	08007f9f 	.word	0x08007f9f
 8007ed8:	08007f9f 	.word	0x08007f9f
 8007edc:	08007f9f 	.word	0x08007f9f
 8007ee0:	08007f9f 	.word	0x08007f9f
 8007ee4:	08007f9f 	.word	0x08007f9f
 8007ee8:	08007f9f 	.word	0x08007f9f
 8007eec:	08007f9f 	.word	0x08007f9f
 8007ef0:	08007f6b 	.word	0x08007f6b
 8007ef4:	08007f9f 	.word	0x08007f9f
 8007ef8:	08007f9f 	.word	0x08007f9f
 8007efc:	08007f9f 	.word	0x08007f9f
 8007f00:	08007f9f 	.word	0x08007f9f
 8007f04:	08007f9f 	.word	0x08007f9f
 8007f08:	08007f9f 	.word	0x08007f9f
 8007f0c:	08007f9f 	.word	0x08007f9f
 8007f10:	08007f9f 	.word	0x08007f9f
 8007f14:	08007f9f 	.word	0x08007f9f
 8007f18:	08007f9f 	.word	0x08007f9f
 8007f1c:	08007f9f 	.word	0x08007f9f
 8007f20:	08007f9f 	.word	0x08007f9f
 8007f24:	08007f9f 	.word	0x08007f9f
 8007f28:	08007f9f 	.word	0x08007f9f
 8007f2c:	08007f9f 	.word	0x08007f9f
 8007f30:	08007f91 	.word	0x08007f91
 8007f34:	2b40      	cmp	r3, #64	; 0x40
 8007f36:	d02e      	beq.n	8007f96 <UART_SetConfig+0x8aa>
 8007f38:	e031      	b.n	8007f9e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f3a:	f7fd fff3 	bl	8005f24 <HAL_RCC_GetPCLK1Freq>
 8007f3e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007f40:	e033      	b.n	8007faa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f42:	f7fe f805 	bl	8005f50 <HAL_RCC_GetPCLK2Freq>
 8007f46:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007f48:	e02f      	b.n	8007faa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7fe ff70 	bl	8006e34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f58:	e027      	b.n	8007faa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f5a:	f107 0318 	add.w	r3, r7, #24
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7ff f8bc 	bl	80070dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f68:	e01f      	b.n	8007faa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f6a:	4b2d      	ldr	r3, [pc, #180]	; (8008020 <UART_SetConfig+0x934>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f003 0320 	and.w	r3, r3, #32
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d009      	beq.n	8007f8a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007f76:	4b2a      	ldr	r3, [pc, #168]	; (8008020 <UART_SetConfig+0x934>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	08db      	lsrs	r3, r3, #3
 8007f7c:	f003 0303 	and.w	r3, r3, #3
 8007f80:	4a24      	ldr	r2, [pc, #144]	; (8008014 <UART_SetConfig+0x928>)
 8007f82:	fa22 f303 	lsr.w	r3, r2, r3
 8007f86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007f88:	e00f      	b.n	8007faa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007f8a:	4b22      	ldr	r3, [pc, #136]	; (8008014 <UART_SetConfig+0x928>)
 8007f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f8e:	e00c      	b.n	8007faa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007f90:	4b21      	ldr	r3, [pc, #132]	; (8008018 <UART_SetConfig+0x92c>)
 8007f92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f94:	e009      	b.n	8007faa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f9c:	e005      	b.n	8007faa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007fa8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f000 80e7 	beq.w	8008180 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb6:	4a19      	ldr	r2, [pc, #100]	; (800801c <UART_SetConfig+0x930>)
 8007fb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fc4:	005a      	lsls	r2, r3, #1
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	085b      	lsrs	r3, r3, #1
 8007fcc:	441a      	add	r2, r3
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fd6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fda:	2b0f      	cmp	r3, #15
 8007fdc:	d916      	bls.n	800800c <UART_SetConfig+0x920>
 8007fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fe4:	d212      	bcs.n	800800c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	f023 030f 	bic.w	r3, r3, #15
 8007fee:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff2:	085b      	lsrs	r3, r3, #1
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	f003 0307 	and.w	r3, r3, #7
 8007ffa:	b29a      	uxth	r2, r3
 8007ffc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007ffe:	4313      	orrs	r3, r2
 8008000:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008008:	60da      	str	r2, [r3, #12]
 800800a:	e0b9      	b.n	8008180 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008012:	e0b5      	b.n	8008180 <UART_SetConfig+0xa94>
 8008014:	03d09000 	.word	0x03d09000
 8008018:	003d0900 	.word	0x003d0900
 800801c:	080498fc 	.word	0x080498fc
 8008020:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008024:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008028:	2b20      	cmp	r3, #32
 800802a:	dc49      	bgt.n	80080c0 <UART_SetConfig+0x9d4>
 800802c:	2b00      	cmp	r3, #0
 800802e:	db7c      	blt.n	800812a <UART_SetConfig+0xa3e>
 8008030:	2b20      	cmp	r3, #32
 8008032:	d87a      	bhi.n	800812a <UART_SetConfig+0xa3e>
 8008034:	a201      	add	r2, pc, #4	; (adr r2, 800803c <UART_SetConfig+0x950>)
 8008036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800803a:	bf00      	nop
 800803c:	080080c7 	.word	0x080080c7
 8008040:	080080cf 	.word	0x080080cf
 8008044:	0800812b 	.word	0x0800812b
 8008048:	0800812b 	.word	0x0800812b
 800804c:	080080d7 	.word	0x080080d7
 8008050:	0800812b 	.word	0x0800812b
 8008054:	0800812b 	.word	0x0800812b
 8008058:	0800812b 	.word	0x0800812b
 800805c:	080080e7 	.word	0x080080e7
 8008060:	0800812b 	.word	0x0800812b
 8008064:	0800812b 	.word	0x0800812b
 8008068:	0800812b 	.word	0x0800812b
 800806c:	0800812b 	.word	0x0800812b
 8008070:	0800812b 	.word	0x0800812b
 8008074:	0800812b 	.word	0x0800812b
 8008078:	0800812b 	.word	0x0800812b
 800807c:	080080f7 	.word	0x080080f7
 8008080:	0800812b 	.word	0x0800812b
 8008084:	0800812b 	.word	0x0800812b
 8008088:	0800812b 	.word	0x0800812b
 800808c:	0800812b 	.word	0x0800812b
 8008090:	0800812b 	.word	0x0800812b
 8008094:	0800812b 	.word	0x0800812b
 8008098:	0800812b 	.word	0x0800812b
 800809c:	0800812b 	.word	0x0800812b
 80080a0:	0800812b 	.word	0x0800812b
 80080a4:	0800812b 	.word	0x0800812b
 80080a8:	0800812b 	.word	0x0800812b
 80080ac:	0800812b 	.word	0x0800812b
 80080b0:	0800812b 	.word	0x0800812b
 80080b4:	0800812b 	.word	0x0800812b
 80080b8:	0800812b 	.word	0x0800812b
 80080bc:	0800811d 	.word	0x0800811d
 80080c0:	2b40      	cmp	r3, #64	; 0x40
 80080c2:	d02e      	beq.n	8008122 <UART_SetConfig+0xa36>
 80080c4:	e031      	b.n	800812a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080c6:	f7fd ff2d 	bl	8005f24 <HAL_RCC_GetPCLK1Freq>
 80080ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80080cc:	e033      	b.n	8008136 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080ce:	f7fd ff3f 	bl	8005f50 <HAL_RCC_GetPCLK2Freq>
 80080d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80080d4:	e02f      	b.n	8008136 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080da:	4618      	mov	r0, r3
 80080dc:	f7fe feaa 	bl	8006e34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80080e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080e4:	e027      	b.n	8008136 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080e6:	f107 0318 	add.w	r3, r7, #24
 80080ea:	4618      	mov	r0, r3
 80080ec:	f7fe fff6 	bl	80070dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080f4:	e01f      	b.n	8008136 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080f6:	4b2d      	ldr	r3, [pc, #180]	; (80081ac <UART_SetConfig+0xac0>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f003 0320 	and.w	r3, r3, #32
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d009      	beq.n	8008116 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008102:	4b2a      	ldr	r3, [pc, #168]	; (80081ac <UART_SetConfig+0xac0>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	08db      	lsrs	r3, r3, #3
 8008108:	f003 0303 	and.w	r3, r3, #3
 800810c:	4a28      	ldr	r2, [pc, #160]	; (80081b0 <UART_SetConfig+0xac4>)
 800810e:	fa22 f303 	lsr.w	r3, r2, r3
 8008112:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008114:	e00f      	b.n	8008136 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008116:	4b26      	ldr	r3, [pc, #152]	; (80081b0 <UART_SetConfig+0xac4>)
 8008118:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800811a:	e00c      	b.n	8008136 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800811c:	4b25      	ldr	r3, [pc, #148]	; (80081b4 <UART_SetConfig+0xac8>)
 800811e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008120:	e009      	b.n	8008136 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008122:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008126:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008128:	e005      	b.n	8008136 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800812a:	2300      	movs	r3, #0
 800812c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800812e:	2301      	movs	r3, #1
 8008130:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008134:	bf00      	nop
    }

    if (pclk != 0U)
 8008136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008138:	2b00      	cmp	r3, #0
 800813a:	d021      	beq.n	8008180 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008140:	4a1d      	ldr	r2, [pc, #116]	; (80081b8 <UART_SetConfig+0xacc>)
 8008142:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008146:	461a      	mov	r2, r3
 8008148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800814a:	fbb3 f2f2 	udiv	r2, r3, r2
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	085b      	lsrs	r3, r3, #1
 8008154:	441a      	add	r2, r3
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	fbb2 f3f3 	udiv	r3, r2, r3
 800815e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008162:	2b0f      	cmp	r3, #15
 8008164:	d909      	bls.n	800817a <UART_SetConfig+0xa8e>
 8008166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800816c:	d205      	bcs.n	800817a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800816e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008170:	b29a      	uxth	r2, r3
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	60da      	str	r2, [r3, #12]
 8008178:	e002      	b.n	8008180 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	2201      	movs	r2, #1
 8008184:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	2201      	movs	r2, #1
 800818c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	2200      	movs	r2, #0
 8008194:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	2200      	movs	r2, #0
 800819a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800819c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3748      	adds	r7, #72	; 0x48
 80081a4:	46bd      	mov	sp, r7
 80081a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081aa:	bf00      	nop
 80081ac:	58024400 	.word	0x58024400
 80081b0:	03d09000 	.word	0x03d09000
 80081b4:	003d0900 	.word	0x003d0900
 80081b8:	080498fc 	.word	0x080498fc

080081bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081c8:	f003 0301 	and.w	r3, r3, #1
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d00a      	beq.n	80081e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	430a      	orrs	r2, r1
 80081e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ea:	f003 0302 	and.w	r3, r3, #2
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d00a      	beq.n	8008208 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	430a      	orrs	r2, r1
 8008206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800820c:	f003 0304 	and.w	r3, r3, #4
 8008210:	2b00      	cmp	r3, #0
 8008212:	d00a      	beq.n	800822a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	430a      	orrs	r2, r1
 8008228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800822e:	f003 0308 	and.w	r3, r3, #8
 8008232:	2b00      	cmp	r3, #0
 8008234:	d00a      	beq.n	800824c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	430a      	orrs	r2, r1
 800824a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008250:	f003 0310 	and.w	r3, r3, #16
 8008254:	2b00      	cmp	r3, #0
 8008256:	d00a      	beq.n	800826e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	430a      	orrs	r2, r1
 800826c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008272:	f003 0320 	and.w	r3, r3, #32
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00a      	beq.n	8008290 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	689b      	ldr	r3, [r3, #8]
 8008280:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	430a      	orrs	r2, r1
 800828e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008298:	2b00      	cmp	r3, #0
 800829a:	d01a      	beq.n	80082d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	430a      	orrs	r2, r1
 80082b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082ba:	d10a      	bne.n	80082d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	430a      	orrs	r2, r1
 80082d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00a      	beq.n	80082f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	430a      	orrs	r2, r1
 80082f2:	605a      	str	r2, [r3, #4]
  }
}
 80082f4:	bf00      	nop
 80082f6:	370c      	adds	r7, #12
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b086      	sub	sp, #24
 8008304:	af02      	add	r7, sp, #8
 8008306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2200      	movs	r2, #0
 800830c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008310:	f7fa ffc6 	bl	80032a0 <HAL_GetTick>
 8008314:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f003 0308 	and.w	r3, r3, #8
 8008320:	2b08      	cmp	r3, #8
 8008322:	d10e      	bne.n	8008342 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008324:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008328:	9300      	str	r3, [sp, #0]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2200      	movs	r2, #0
 800832e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 f82f 	bl	8008396 <UART_WaitOnFlagUntilTimeout>
 8008338:	4603      	mov	r3, r0
 800833a:	2b00      	cmp	r3, #0
 800833c:	d001      	beq.n	8008342 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800833e:	2303      	movs	r3, #3
 8008340:	e025      	b.n	800838e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f003 0304 	and.w	r3, r3, #4
 800834c:	2b04      	cmp	r3, #4
 800834e:	d10e      	bne.n	800836e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008350:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008354:	9300      	str	r3, [sp, #0]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2200      	movs	r2, #0
 800835a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 f819 	bl	8008396 <UART_WaitOnFlagUntilTimeout>
 8008364:	4603      	mov	r3, r0
 8008366:	2b00      	cmp	r3, #0
 8008368:	d001      	beq.n	800836e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800836a:	2303      	movs	r3, #3
 800836c:	e00f      	b.n	800838e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2220      	movs	r2, #32
 8008372:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2220      	movs	r2, #32
 800837a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2200      	movs	r2, #0
 8008388:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800838c:	2300      	movs	r3, #0
}
 800838e:	4618      	mov	r0, r3
 8008390:	3710      	adds	r7, #16
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}

08008396 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008396:	b580      	push	{r7, lr}
 8008398:	b09c      	sub	sp, #112	; 0x70
 800839a:	af00      	add	r7, sp, #0
 800839c:	60f8      	str	r0, [r7, #12]
 800839e:	60b9      	str	r1, [r7, #8]
 80083a0:	603b      	str	r3, [r7, #0]
 80083a2:	4613      	mov	r3, r2
 80083a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083a6:	e0a9      	b.n	80084fc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ae:	f000 80a5 	beq.w	80084fc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083b2:	f7fa ff75 	bl	80032a0 <HAL_GetTick>
 80083b6:	4602      	mov	r2, r0
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	1ad3      	subs	r3, r2, r3
 80083bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80083be:	429a      	cmp	r2, r3
 80083c0:	d302      	bcc.n	80083c8 <UART_WaitOnFlagUntilTimeout+0x32>
 80083c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d140      	bne.n	800844a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083d0:	e853 3f00 	ldrex	r3, [r3]
 80083d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80083d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80083dc:	667b      	str	r3, [r7, #100]	; 0x64
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	461a      	mov	r2, r3
 80083e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083e8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80083ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80083ee:	e841 2300 	strex	r3, r2, [r1]
 80083f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80083f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d1e6      	bne.n	80083c8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	3308      	adds	r3, #8
 8008400:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008404:	e853 3f00 	ldrex	r3, [r3]
 8008408:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800840a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840c:	f023 0301 	bic.w	r3, r3, #1
 8008410:	663b      	str	r3, [r7, #96]	; 0x60
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	3308      	adds	r3, #8
 8008418:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800841a:	64ba      	str	r2, [r7, #72]	; 0x48
 800841c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800841e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008420:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008422:	e841 2300 	strex	r3, r2, [r1]
 8008426:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008428:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800842a:	2b00      	cmp	r3, #0
 800842c:	d1e5      	bne.n	80083fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2220      	movs	r2, #32
 8008432:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2220      	movs	r2, #32
 800843a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2200      	movs	r2, #0
 8008442:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008446:	2303      	movs	r3, #3
 8008448:	e069      	b.n	800851e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f003 0304 	and.w	r3, r3, #4
 8008454:	2b00      	cmp	r3, #0
 8008456:	d051      	beq.n	80084fc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	69db      	ldr	r3, [r3, #28]
 800845e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008462:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008466:	d149      	bne.n	80084fc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008470:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847a:	e853 3f00 	ldrex	r3, [r3]
 800847e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008482:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008486:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	461a      	mov	r2, r3
 800848e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008490:	637b      	str	r3, [r7, #52]	; 0x34
 8008492:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008494:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008496:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008498:	e841 2300 	strex	r3, r2, [r1]
 800849c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800849e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d1e6      	bne.n	8008472 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	3308      	adds	r3, #8
 80084aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	e853 3f00 	ldrex	r3, [r3]
 80084b2:	613b      	str	r3, [r7, #16]
   return(result);
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	f023 0301 	bic.w	r3, r3, #1
 80084ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	3308      	adds	r3, #8
 80084c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80084c4:	623a      	str	r2, [r7, #32]
 80084c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c8:	69f9      	ldr	r1, [r7, #28]
 80084ca:	6a3a      	ldr	r2, [r7, #32]
 80084cc:	e841 2300 	strex	r3, r2, [r1]
 80084d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d1e5      	bne.n	80084a4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2220      	movs	r2, #32
 80084dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2220      	movs	r2, #32
 80084e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2220      	movs	r2, #32
 80084ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2200      	movs	r2, #0
 80084f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80084f8:	2303      	movs	r3, #3
 80084fa:	e010      	b.n	800851e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	69da      	ldr	r2, [r3, #28]
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	4013      	ands	r3, r2
 8008506:	68ba      	ldr	r2, [r7, #8]
 8008508:	429a      	cmp	r2, r3
 800850a:	bf0c      	ite	eq
 800850c:	2301      	moveq	r3, #1
 800850e:	2300      	movne	r3, #0
 8008510:	b2db      	uxtb	r3, r3
 8008512:	461a      	mov	r2, r3
 8008514:	79fb      	ldrb	r3, [r7, #7]
 8008516:	429a      	cmp	r2, r3
 8008518:	f43f af46 	beq.w	80083a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800851c:	2300      	movs	r3, #0
}
 800851e:	4618      	mov	r0, r3
 8008520:	3770      	adds	r7, #112	; 0x70
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}

08008526 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008526:	b480      	push	{r7}
 8008528:	b085      	sub	sp, #20
 800852a:	af00      	add	r7, sp, #0
 800852c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008534:	2b01      	cmp	r3, #1
 8008536:	d101      	bne.n	800853c <HAL_UARTEx_DisableFifoMode+0x16>
 8008538:	2302      	movs	r3, #2
 800853a:	e027      	b.n	800858c <HAL_UARTEx_DisableFifoMode+0x66>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2201      	movs	r2, #1
 8008540:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2224      	movs	r2, #36	; 0x24
 8008548:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f022 0201 	bic.w	r2, r2, #1
 8008562:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800856a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2220      	movs	r2, #32
 800857e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800858a:	2300      	movs	r3, #0
}
 800858c:	4618      	mov	r0, r3
 800858e:	3714      	adds	r7, #20
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d101      	bne.n	80085b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80085ac:	2302      	movs	r3, #2
 80085ae:	e02d      	b.n	800860c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2201      	movs	r2, #1
 80085b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2224      	movs	r2, #36	; 0x24
 80085bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f022 0201 	bic.w	r2, r2, #1
 80085d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	683a      	ldr	r2, [r7, #0]
 80085e8:	430a      	orrs	r2, r1
 80085ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 f84f 	bl	8008690 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	68fa      	ldr	r2, [r7, #12]
 80085f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2220      	movs	r2, #32
 80085fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800860a:	2300      	movs	r3, #0
}
 800860c:	4618      	mov	r0, r3
 800860e:	3710      	adds	r7, #16
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008624:	2b01      	cmp	r3, #1
 8008626:	d101      	bne.n	800862c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008628:	2302      	movs	r3, #2
 800862a:	e02d      	b.n	8008688 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2201      	movs	r2, #1
 8008630:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2224      	movs	r2, #36	; 0x24
 8008638:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f022 0201 	bic.w	r2, r2, #1
 8008652:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	683a      	ldr	r2, [r7, #0]
 8008664:	430a      	orrs	r2, r1
 8008666:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 f811 	bl	8008690 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	68fa      	ldr	r2, [r7, #12]
 8008674:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2220      	movs	r2, #32
 800867a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008686:	2300      	movs	r3, #0
}
 8008688:	4618      	mov	r0, r3
 800868a:	3710      	adds	r7, #16
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008690:	b480      	push	{r7}
 8008692:	b085      	sub	sp, #20
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800869c:	2b00      	cmp	r3, #0
 800869e:	d108      	bne.n	80086b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2201      	movs	r2, #1
 80086a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2201      	movs	r2, #1
 80086ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80086b0:	e031      	b.n	8008716 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80086b2:	2310      	movs	r3, #16
 80086b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80086b6:	2310      	movs	r3, #16
 80086b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	0e5b      	lsrs	r3, r3, #25
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	f003 0307 	and.w	r3, r3, #7
 80086c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	0f5b      	lsrs	r3, r3, #29
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	f003 0307 	and.w	r3, r3, #7
 80086d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80086da:	7bbb      	ldrb	r3, [r7, #14]
 80086dc:	7b3a      	ldrb	r2, [r7, #12]
 80086de:	4911      	ldr	r1, [pc, #68]	; (8008724 <UARTEx_SetNbDataToProcess+0x94>)
 80086e0:	5c8a      	ldrb	r2, [r1, r2]
 80086e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80086e6:	7b3a      	ldrb	r2, [r7, #12]
 80086e8:	490f      	ldr	r1, [pc, #60]	; (8008728 <UARTEx_SetNbDataToProcess+0x98>)
 80086ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80086ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80086f0:	b29a      	uxth	r2, r3
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80086f8:	7bfb      	ldrb	r3, [r7, #15]
 80086fa:	7b7a      	ldrb	r2, [r7, #13]
 80086fc:	4909      	ldr	r1, [pc, #36]	; (8008724 <UARTEx_SetNbDataToProcess+0x94>)
 80086fe:	5c8a      	ldrb	r2, [r1, r2]
 8008700:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008704:	7b7a      	ldrb	r2, [r7, #13]
 8008706:	4908      	ldr	r1, [pc, #32]	; (8008728 <UARTEx_SetNbDataToProcess+0x98>)
 8008708:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800870a:	fb93 f3f2 	sdiv	r3, r3, r2
 800870e:	b29a      	uxth	r2, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008716:	bf00      	nop
 8008718:	3714      	adds	r7, #20
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr
 8008722:	bf00      	nop
 8008724:	08049914 	.word	0x08049914
 8008728:	0804991c 	.word	0x0804991c

0800872c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800872c:	b084      	sub	sp, #16
 800872e:	b580      	push	{r7, lr}
 8008730:	b084      	sub	sp, #16
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
 8008736:	f107 001c 	add.w	r0, r7, #28
 800873a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800873e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008740:	2b01      	cmp	r3, #1
 8008742:	d120      	bne.n	8008786 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008748:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	68da      	ldr	r2, [r3, #12]
 8008754:	4b2a      	ldr	r3, [pc, #168]	; (8008800 <USB_CoreInit+0xd4>)
 8008756:	4013      	ands	r3, r2
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800876a:	2b01      	cmp	r3, #1
 800876c:	d105      	bne.n	800877a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 faac 	bl	8008cd8 <USB_CoreReset>
 8008780:	4603      	mov	r3, r0
 8008782:	73fb      	strb	r3, [r7, #15]
 8008784:	e01a      	b.n	80087bc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 faa0 	bl	8008cd8 <USB_CoreReset>
 8008798:	4603      	mov	r3, r0
 800879a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800879c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d106      	bne.n	80087b0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	639a      	str	r2, [r3, #56]	; 0x38
 80087ae:	e005      	b.n	80087bc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80087bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d116      	bne.n	80087f0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087c6:	b29a      	uxth	r2, r3
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80087d0:	4b0c      	ldr	r3, [pc, #48]	; (8008804 <USB_CoreInit+0xd8>)
 80087d2:	4313      	orrs	r3, r2
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	f043 0206 	orr.w	r2, r3, #6
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	f043 0220 	orr.w	r2, r3, #32
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80087f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3710      	adds	r7, #16
 80087f6:	46bd      	mov	sp, r7
 80087f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80087fc:	b004      	add	sp, #16
 80087fe:	4770      	bx	lr
 8008800:	ffbdffbf 	.word	0xffbdffbf
 8008804:	03ee0000 	.word	0x03ee0000

08008808 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	f023 0201 	bic.w	r2, r3, #1
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800881c:	2300      	movs	r3, #0
}
 800881e:	4618      	mov	r0, r3
 8008820:	370c      	adds	r7, #12
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr

0800882a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b084      	sub	sp, #16
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
 8008832:	460b      	mov	r3, r1
 8008834:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008836:	2300      	movs	r3, #0
 8008838:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008846:	78fb      	ldrb	r3, [r7, #3]
 8008848:	2b01      	cmp	r3, #1
 800884a:	d115      	bne.n	8008878 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008858:	2001      	movs	r0, #1
 800885a:	f7fa fd2d 	bl	80032b8 <HAL_Delay>
      ms++;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	3301      	adds	r3, #1
 8008862:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 fa29 	bl	8008cbc <USB_GetMode>
 800886a:	4603      	mov	r3, r0
 800886c:	2b01      	cmp	r3, #1
 800886e:	d01e      	beq.n	80088ae <USB_SetCurrentMode+0x84>
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2b31      	cmp	r3, #49	; 0x31
 8008874:	d9f0      	bls.n	8008858 <USB_SetCurrentMode+0x2e>
 8008876:	e01a      	b.n	80088ae <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008878:	78fb      	ldrb	r3, [r7, #3]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d115      	bne.n	80088aa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800888a:	2001      	movs	r0, #1
 800888c:	f7fa fd14 	bl	80032b8 <HAL_Delay>
      ms++;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	3301      	adds	r3, #1
 8008894:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 fa10 	bl	8008cbc <USB_GetMode>
 800889c:	4603      	mov	r3, r0
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d005      	beq.n	80088ae <USB_SetCurrentMode+0x84>
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2b31      	cmp	r3, #49	; 0x31
 80088a6:	d9f0      	bls.n	800888a <USB_SetCurrentMode+0x60>
 80088a8:	e001      	b.n	80088ae <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80088aa:	2301      	movs	r3, #1
 80088ac:	e005      	b.n	80088ba <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2b32      	cmp	r3, #50	; 0x32
 80088b2:	d101      	bne.n	80088b8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80088b4:	2301      	movs	r3, #1
 80088b6:	e000      	b.n	80088ba <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3710      	adds	r7, #16
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
	...

080088c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80088c4:	b084      	sub	sp, #16
 80088c6:	b580      	push	{r7, lr}
 80088c8:	b086      	sub	sp, #24
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
 80088ce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80088d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80088d6:	2300      	movs	r3, #0
 80088d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80088de:	2300      	movs	r3, #0
 80088e0:	613b      	str	r3, [r7, #16]
 80088e2:	e009      	b.n	80088f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80088e4:	687a      	ldr	r2, [r7, #4]
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	3340      	adds	r3, #64	; 0x40
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	4413      	add	r3, r2
 80088ee:	2200      	movs	r2, #0
 80088f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	3301      	adds	r3, #1
 80088f6:	613b      	str	r3, [r7, #16]
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	2b0e      	cmp	r3, #14
 80088fc:	d9f2      	bls.n	80088e4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80088fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008900:	2b00      	cmp	r3, #0
 8008902:	d11c      	bne.n	800893e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	68fa      	ldr	r2, [r7, #12]
 800890e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008912:	f043 0302 	orr.w	r3, r3, #2
 8008916:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800891c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	601a      	str	r2, [r3, #0]
 800893c:	e005      	b.n	800894a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008942:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008950:	461a      	mov	r2, r3
 8008952:	2300      	movs	r3, #0
 8008954:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800895c:	4619      	mov	r1, r3
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008964:	461a      	mov	r2, r3
 8008966:	680b      	ldr	r3, [r1, #0]
 8008968:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800896a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800896c:	2b01      	cmp	r3, #1
 800896e:	d10c      	bne.n	800898a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008972:	2b00      	cmp	r3, #0
 8008974:	d104      	bne.n	8008980 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008976:	2100      	movs	r1, #0
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 f965 	bl	8008c48 <USB_SetDevSpeed>
 800897e:	e008      	b.n	8008992 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008980:	2101      	movs	r1, #1
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 f960 	bl	8008c48 <USB_SetDevSpeed>
 8008988:	e003      	b.n	8008992 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800898a:	2103      	movs	r1, #3
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 f95b 	bl	8008c48 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008992:	2110      	movs	r1, #16
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 f8f3 	bl	8008b80 <USB_FlushTxFifo>
 800899a:	4603      	mov	r3, r0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d001      	beq.n	80089a4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80089a0:	2301      	movs	r3, #1
 80089a2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 f91f 	bl	8008be8 <USB_FlushRxFifo>
 80089aa:	4603      	mov	r3, r0
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d001      	beq.n	80089b4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80089b0:	2301      	movs	r3, #1
 80089b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089ba:	461a      	mov	r2, r3
 80089bc:	2300      	movs	r3, #0
 80089be:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089c6:	461a      	mov	r2, r3
 80089c8:	2300      	movs	r3, #0
 80089ca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089d2:	461a      	mov	r2, r3
 80089d4:	2300      	movs	r3, #0
 80089d6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80089d8:	2300      	movs	r3, #0
 80089da:	613b      	str	r3, [r7, #16]
 80089dc:	e043      	b.n	8008a66 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	015a      	lsls	r2, r3, #5
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	4413      	add	r3, r2
 80089e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089f4:	d118      	bne.n	8008a28 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d10a      	bne.n	8008a12 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	015a      	lsls	r2, r3, #5
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	4413      	add	r3, r2
 8008a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a08:	461a      	mov	r2, r3
 8008a0a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008a0e:	6013      	str	r3, [r2, #0]
 8008a10:	e013      	b.n	8008a3a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	015a      	lsls	r2, r3, #5
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	4413      	add	r3, r2
 8008a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a1e:	461a      	mov	r2, r3
 8008a20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008a24:	6013      	str	r3, [r2, #0]
 8008a26:	e008      	b.n	8008a3a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	015a      	lsls	r2, r3, #5
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	4413      	add	r3, r2
 8008a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a34:	461a      	mov	r2, r3
 8008a36:	2300      	movs	r3, #0
 8008a38:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	015a      	lsls	r2, r3, #5
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	4413      	add	r3, r2
 8008a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a46:	461a      	mov	r2, r3
 8008a48:	2300      	movs	r3, #0
 8008a4a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	015a      	lsls	r2, r3, #5
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	4413      	add	r3, r2
 8008a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a58:	461a      	mov	r2, r3
 8008a5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008a5e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	3301      	adds	r3, #1
 8008a64:	613b      	str	r3, [r7, #16]
 8008a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a68:	693a      	ldr	r2, [r7, #16]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d3b7      	bcc.n	80089de <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a6e:	2300      	movs	r3, #0
 8008a70:	613b      	str	r3, [r7, #16]
 8008a72:	e043      	b.n	8008afc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	015a      	lsls	r2, r3, #5
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a8a:	d118      	bne.n	8008abe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d10a      	bne.n	8008aa8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	015a      	lsls	r2, r3, #5
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	4413      	add	r3, r2
 8008a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008aa4:	6013      	str	r3, [r2, #0]
 8008aa6:	e013      	b.n	8008ad0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	015a      	lsls	r2, r3, #5
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	4413      	add	r3, r2
 8008ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008aba:	6013      	str	r3, [r2, #0]
 8008abc:	e008      	b.n	8008ad0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	015a      	lsls	r2, r3, #5
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aca:	461a      	mov	r2, r3
 8008acc:	2300      	movs	r3, #0
 8008ace:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	015a      	lsls	r2, r3, #5
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	4413      	add	r3, r2
 8008ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008adc:	461a      	mov	r2, r3
 8008ade:	2300      	movs	r3, #0
 8008ae0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	015a      	lsls	r2, r3, #5
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	4413      	add	r3, r2
 8008aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aee:	461a      	mov	r2, r3
 8008af0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008af4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	3301      	adds	r3, #1
 8008afa:	613b      	str	r3, [r7, #16]
 8008afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afe:	693a      	ldr	r2, [r7, #16]
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d3b7      	bcc.n	8008a74 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b0a:	691b      	ldr	r3, [r3, #16]
 8008b0c:	68fa      	ldr	r2, [r7, #12]
 8008b0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b16:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008b24:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d105      	bne.n	8008b38 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	699b      	ldr	r3, [r3, #24]
 8008b30:	f043 0210 	orr.w	r2, r3, #16
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	699a      	ldr	r2, [r3, #24]
 8008b3c:	4b0e      	ldr	r3, [pc, #56]	; (8008b78 <USB_DevInit+0x2b4>)
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d005      	beq.n	8008b56 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	699b      	ldr	r3, [r3, #24]
 8008b4e:	f043 0208 	orr.w	r2, r3, #8
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d105      	bne.n	8008b68 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	699a      	ldr	r2, [r3, #24]
 8008b60:	4b06      	ldr	r3, [pc, #24]	; (8008b7c <USB_DevInit+0x2b8>)
 8008b62:	4313      	orrs	r3, r2
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3718      	adds	r7, #24
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b74:	b004      	add	sp, #16
 8008b76:	4770      	bx	lr
 8008b78:	803c3800 	.word	0x803c3800
 8008b7c:	40000004 	.word	0x40000004

08008b80 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b085      	sub	sp, #20
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	3301      	adds	r3, #1
 8008b92:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	4a13      	ldr	r2, [pc, #76]	; (8008be4 <USB_FlushTxFifo+0x64>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d901      	bls.n	8008ba0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008b9c:	2303      	movs	r3, #3
 8008b9e:	e01b      	b.n	8008bd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	691b      	ldr	r3, [r3, #16]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	daf2      	bge.n	8008b8e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	019b      	lsls	r3, r3, #6
 8008bb0:	f043 0220 	orr.w	r2, r3, #32
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	3301      	adds	r3, #1
 8008bbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	4a08      	ldr	r2, [pc, #32]	; (8008be4 <USB_FlushTxFifo+0x64>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d901      	bls.n	8008bca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008bc6:	2303      	movs	r3, #3
 8008bc8:	e006      	b.n	8008bd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	691b      	ldr	r3, [r3, #16]
 8008bce:	f003 0320 	and.w	r3, r3, #32
 8008bd2:	2b20      	cmp	r3, #32
 8008bd4:	d0f0      	beq.n	8008bb8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008bd6:	2300      	movs	r3, #0
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3714      	adds	r7, #20
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr
 8008be4:	00030d40 	.word	0x00030d40

08008be8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b085      	sub	sp, #20
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	4a11      	ldr	r2, [pc, #68]	; (8008c44 <USB_FlushRxFifo+0x5c>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d901      	bls.n	8008c06 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008c02:	2303      	movs	r3, #3
 8008c04:	e018      	b.n	8008c38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	691b      	ldr	r3, [r3, #16]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	daf2      	bge.n	8008bf4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2210      	movs	r2, #16
 8008c16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	4a08      	ldr	r2, [pc, #32]	; (8008c44 <USB_FlushRxFifo+0x5c>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d901      	bls.n	8008c2a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008c26:	2303      	movs	r3, #3
 8008c28:	e006      	b.n	8008c38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	691b      	ldr	r3, [r3, #16]
 8008c2e:	f003 0310 	and.w	r3, r3, #16
 8008c32:	2b10      	cmp	r3, #16
 8008c34:	d0f0      	beq.n	8008c18 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008c36:	2300      	movs	r3, #0
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3714      	adds	r7, #20
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr
 8008c44:	00030d40 	.word	0x00030d40

08008c48 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b085      	sub	sp, #20
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	460b      	mov	r3, r1
 8008c52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c5e:	681a      	ldr	r2, [r3, #0]
 8008c60:	78fb      	ldrb	r3, [r7, #3]
 8008c62:	68f9      	ldr	r1, [r7, #12]
 8008c64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008c6c:	2300      	movs	r3, #0
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3714      	adds	r7, #20
 8008c72:	46bd      	mov	sp, r7
 8008c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c78:	4770      	bx	lr

08008c7a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008c7a:	b480      	push	{r7}
 8008c7c:	b085      	sub	sp, #20
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	68fa      	ldr	r2, [r7, #12]
 8008c90:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008c94:	f023 0303 	bic.w	r3, r3, #3
 8008c98:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	68fa      	ldr	r2, [r7, #12]
 8008ca4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ca8:	f043 0302 	orr.w	r3, r3, #2
 8008cac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008cae:	2300      	movs	r3, #0
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3714      	adds	r7, #20
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr

08008cbc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b083      	sub	sp, #12
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	695b      	ldr	r3, [r3, #20]
 8008cc8:	f003 0301 	and.w	r3, r3, #1
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	370c      	adds	r7, #12
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b085      	sub	sp, #20
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	4a13      	ldr	r2, [pc, #76]	; (8008d3c <USB_CoreReset+0x64>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d901      	bls.n	8008cf6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008cf2:	2303      	movs	r3, #3
 8008cf4:	e01b      	b.n	8008d2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	691b      	ldr	r3, [r3, #16]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	daf2      	bge.n	8008ce4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	691b      	ldr	r3, [r3, #16]
 8008d06:	f043 0201 	orr.w	r2, r3, #1
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	3301      	adds	r3, #1
 8008d12:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	4a09      	ldr	r2, [pc, #36]	; (8008d3c <USB_CoreReset+0x64>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d901      	bls.n	8008d20 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008d1c:	2303      	movs	r3, #3
 8008d1e:	e006      	b.n	8008d2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	691b      	ldr	r3, [r3, #16]
 8008d24:	f003 0301 	and.w	r3, r3, #1
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	d0f0      	beq.n	8008d0e <USB_CoreReset+0x36>

  return HAL_OK;
 8008d2c:	2300      	movs	r3, #0
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3714      	adds	r7, #20
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr
 8008d3a:	bf00      	nop
 8008d3c:	00030d40 	.word	0x00030d40

08008d40 <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 8008d40:	b480      	push	{r7}
 8008d42:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8008d44:	bf00      	nop
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr
	...

08008d50 <__errno>:
 8008d50:	4b01      	ldr	r3, [pc, #4]	; (8008d58 <__errno+0x8>)
 8008d52:	6818      	ldr	r0, [r3, #0]
 8008d54:	4770      	bx	lr
 8008d56:	bf00      	nop
 8008d58:	2400023c 	.word	0x2400023c

08008d5c <__libc_init_array>:
 8008d5c:	b570      	push	{r4, r5, r6, lr}
 8008d5e:	4d0d      	ldr	r5, [pc, #52]	; (8008d94 <__libc_init_array+0x38>)
 8008d60:	4c0d      	ldr	r4, [pc, #52]	; (8008d98 <__libc_init_array+0x3c>)
 8008d62:	1b64      	subs	r4, r4, r5
 8008d64:	10a4      	asrs	r4, r4, #2
 8008d66:	2600      	movs	r6, #0
 8008d68:	42a6      	cmp	r6, r4
 8008d6a:	d109      	bne.n	8008d80 <__libc_init_array+0x24>
 8008d6c:	4d0b      	ldr	r5, [pc, #44]	; (8008d9c <__libc_init_array+0x40>)
 8008d6e:	4c0c      	ldr	r4, [pc, #48]	; (8008da0 <__libc_init_array+0x44>)
 8008d70:	f000 fcd0 	bl	8009714 <_init>
 8008d74:	1b64      	subs	r4, r4, r5
 8008d76:	10a4      	asrs	r4, r4, #2
 8008d78:	2600      	movs	r6, #0
 8008d7a:	42a6      	cmp	r6, r4
 8008d7c:	d105      	bne.n	8008d8a <__libc_init_array+0x2e>
 8008d7e:	bd70      	pop	{r4, r5, r6, pc}
 8008d80:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d84:	4798      	blx	r3
 8008d86:	3601      	adds	r6, #1
 8008d88:	e7ee      	b.n	8008d68 <__libc_init_array+0xc>
 8008d8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d8e:	4798      	blx	r3
 8008d90:	3601      	adds	r6, #1
 8008d92:	e7f2      	b.n	8008d7a <__libc_init_array+0x1e>
 8008d94:	080499c0 	.word	0x080499c0
 8008d98:	080499c0 	.word	0x080499c0
 8008d9c:	080499c0 	.word	0x080499c0
 8008da0:	080499c4 	.word	0x080499c4

08008da4 <__retarget_lock_acquire_recursive>:
 8008da4:	4770      	bx	lr

08008da6 <__retarget_lock_release_recursive>:
 8008da6:	4770      	bx	lr

08008da8 <memcpy>:
 8008da8:	440a      	add	r2, r1
 8008daa:	4291      	cmp	r1, r2
 8008dac:	f100 33ff 	add.w	r3, r0, #4294967295
 8008db0:	d100      	bne.n	8008db4 <memcpy+0xc>
 8008db2:	4770      	bx	lr
 8008db4:	b510      	push	{r4, lr}
 8008db6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008dba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008dbe:	4291      	cmp	r1, r2
 8008dc0:	d1f9      	bne.n	8008db6 <memcpy+0xe>
 8008dc2:	bd10      	pop	{r4, pc}

08008dc4 <memset>:
 8008dc4:	4402      	add	r2, r0
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d100      	bne.n	8008dce <memset+0xa>
 8008dcc:	4770      	bx	lr
 8008dce:	f803 1b01 	strb.w	r1, [r3], #1
 8008dd2:	e7f9      	b.n	8008dc8 <memset+0x4>

08008dd4 <_free_r>:
 8008dd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008dd6:	2900      	cmp	r1, #0
 8008dd8:	d044      	beq.n	8008e64 <_free_r+0x90>
 8008dda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dde:	9001      	str	r0, [sp, #4]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	f1a1 0404 	sub.w	r4, r1, #4
 8008de6:	bfb8      	it	lt
 8008de8:	18e4      	addlt	r4, r4, r3
 8008dea:	f000 f903 	bl	8008ff4 <__malloc_lock>
 8008dee:	4a1e      	ldr	r2, [pc, #120]	; (8008e68 <_free_r+0x94>)
 8008df0:	9801      	ldr	r0, [sp, #4]
 8008df2:	6813      	ldr	r3, [r2, #0]
 8008df4:	b933      	cbnz	r3, 8008e04 <_free_r+0x30>
 8008df6:	6063      	str	r3, [r4, #4]
 8008df8:	6014      	str	r4, [r2, #0]
 8008dfa:	b003      	add	sp, #12
 8008dfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e00:	f000 b8fe 	b.w	8009000 <__malloc_unlock>
 8008e04:	42a3      	cmp	r3, r4
 8008e06:	d908      	bls.n	8008e1a <_free_r+0x46>
 8008e08:	6825      	ldr	r5, [r4, #0]
 8008e0a:	1961      	adds	r1, r4, r5
 8008e0c:	428b      	cmp	r3, r1
 8008e0e:	bf01      	itttt	eq
 8008e10:	6819      	ldreq	r1, [r3, #0]
 8008e12:	685b      	ldreq	r3, [r3, #4]
 8008e14:	1949      	addeq	r1, r1, r5
 8008e16:	6021      	streq	r1, [r4, #0]
 8008e18:	e7ed      	b.n	8008df6 <_free_r+0x22>
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	b10b      	cbz	r3, 8008e24 <_free_r+0x50>
 8008e20:	42a3      	cmp	r3, r4
 8008e22:	d9fa      	bls.n	8008e1a <_free_r+0x46>
 8008e24:	6811      	ldr	r1, [r2, #0]
 8008e26:	1855      	adds	r5, r2, r1
 8008e28:	42a5      	cmp	r5, r4
 8008e2a:	d10b      	bne.n	8008e44 <_free_r+0x70>
 8008e2c:	6824      	ldr	r4, [r4, #0]
 8008e2e:	4421      	add	r1, r4
 8008e30:	1854      	adds	r4, r2, r1
 8008e32:	42a3      	cmp	r3, r4
 8008e34:	6011      	str	r1, [r2, #0]
 8008e36:	d1e0      	bne.n	8008dfa <_free_r+0x26>
 8008e38:	681c      	ldr	r4, [r3, #0]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	6053      	str	r3, [r2, #4]
 8008e3e:	4421      	add	r1, r4
 8008e40:	6011      	str	r1, [r2, #0]
 8008e42:	e7da      	b.n	8008dfa <_free_r+0x26>
 8008e44:	d902      	bls.n	8008e4c <_free_r+0x78>
 8008e46:	230c      	movs	r3, #12
 8008e48:	6003      	str	r3, [r0, #0]
 8008e4a:	e7d6      	b.n	8008dfa <_free_r+0x26>
 8008e4c:	6825      	ldr	r5, [r4, #0]
 8008e4e:	1961      	adds	r1, r4, r5
 8008e50:	428b      	cmp	r3, r1
 8008e52:	bf04      	itt	eq
 8008e54:	6819      	ldreq	r1, [r3, #0]
 8008e56:	685b      	ldreq	r3, [r3, #4]
 8008e58:	6063      	str	r3, [r4, #4]
 8008e5a:	bf04      	itt	eq
 8008e5c:	1949      	addeq	r1, r1, r5
 8008e5e:	6021      	streq	r1, [r4, #0]
 8008e60:	6054      	str	r4, [r2, #4]
 8008e62:	e7ca      	b.n	8008dfa <_free_r+0x26>
 8008e64:	b003      	add	sp, #12
 8008e66:	bd30      	pop	{r4, r5, pc}
 8008e68:	24000bb4 	.word	0x24000bb4

08008e6c <sbrk_aligned>:
 8008e6c:	b570      	push	{r4, r5, r6, lr}
 8008e6e:	4e0e      	ldr	r6, [pc, #56]	; (8008ea8 <sbrk_aligned+0x3c>)
 8008e70:	460c      	mov	r4, r1
 8008e72:	6831      	ldr	r1, [r6, #0]
 8008e74:	4605      	mov	r5, r0
 8008e76:	b911      	cbnz	r1, 8008e7e <sbrk_aligned+0x12>
 8008e78:	f000 f88c 	bl	8008f94 <_sbrk_r>
 8008e7c:	6030      	str	r0, [r6, #0]
 8008e7e:	4621      	mov	r1, r4
 8008e80:	4628      	mov	r0, r5
 8008e82:	f000 f887 	bl	8008f94 <_sbrk_r>
 8008e86:	1c43      	adds	r3, r0, #1
 8008e88:	d00a      	beq.n	8008ea0 <sbrk_aligned+0x34>
 8008e8a:	1cc4      	adds	r4, r0, #3
 8008e8c:	f024 0403 	bic.w	r4, r4, #3
 8008e90:	42a0      	cmp	r0, r4
 8008e92:	d007      	beq.n	8008ea4 <sbrk_aligned+0x38>
 8008e94:	1a21      	subs	r1, r4, r0
 8008e96:	4628      	mov	r0, r5
 8008e98:	f000 f87c 	bl	8008f94 <_sbrk_r>
 8008e9c:	3001      	adds	r0, #1
 8008e9e:	d101      	bne.n	8008ea4 <sbrk_aligned+0x38>
 8008ea0:	f04f 34ff 	mov.w	r4, #4294967295
 8008ea4:	4620      	mov	r0, r4
 8008ea6:	bd70      	pop	{r4, r5, r6, pc}
 8008ea8:	24000bb8 	.word	0x24000bb8

08008eac <_malloc_r>:
 8008eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eb0:	1ccd      	adds	r5, r1, #3
 8008eb2:	f025 0503 	bic.w	r5, r5, #3
 8008eb6:	3508      	adds	r5, #8
 8008eb8:	2d0c      	cmp	r5, #12
 8008eba:	bf38      	it	cc
 8008ebc:	250c      	movcc	r5, #12
 8008ebe:	2d00      	cmp	r5, #0
 8008ec0:	4607      	mov	r7, r0
 8008ec2:	db01      	blt.n	8008ec8 <_malloc_r+0x1c>
 8008ec4:	42a9      	cmp	r1, r5
 8008ec6:	d905      	bls.n	8008ed4 <_malloc_r+0x28>
 8008ec8:	230c      	movs	r3, #12
 8008eca:	603b      	str	r3, [r7, #0]
 8008ecc:	2600      	movs	r6, #0
 8008ece:	4630      	mov	r0, r6
 8008ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ed4:	4e2e      	ldr	r6, [pc, #184]	; (8008f90 <_malloc_r+0xe4>)
 8008ed6:	f000 f88d 	bl	8008ff4 <__malloc_lock>
 8008eda:	6833      	ldr	r3, [r6, #0]
 8008edc:	461c      	mov	r4, r3
 8008ede:	bb34      	cbnz	r4, 8008f2e <_malloc_r+0x82>
 8008ee0:	4629      	mov	r1, r5
 8008ee2:	4638      	mov	r0, r7
 8008ee4:	f7ff ffc2 	bl	8008e6c <sbrk_aligned>
 8008ee8:	1c43      	adds	r3, r0, #1
 8008eea:	4604      	mov	r4, r0
 8008eec:	d14d      	bne.n	8008f8a <_malloc_r+0xde>
 8008eee:	6834      	ldr	r4, [r6, #0]
 8008ef0:	4626      	mov	r6, r4
 8008ef2:	2e00      	cmp	r6, #0
 8008ef4:	d140      	bne.n	8008f78 <_malloc_r+0xcc>
 8008ef6:	6823      	ldr	r3, [r4, #0]
 8008ef8:	4631      	mov	r1, r6
 8008efa:	4638      	mov	r0, r7
 8008efc:	eb04 0803 	add.w	r8, r4, r3
 8008f00:	f000 f848 	bl	8008f94 <_sbrk_r>
 8008f04:	4580      	cmp	r8, r0
 8008f06:	d13a      	bne.n	8008f7e <_malloc_r+0xd2>
 8008f08:	6821      	ldr	r1, [r4, #0]
 8008f0a:	3503      	adds	r5, #3
 8008f0c:	1a6d      	subs	r5, r5, r1
 8008f0e:	f025 0503 	bic.w	r5, r5, #3
 8008f12:	3508      	adds	r5, #8
 8008f14:	2d0c      	cmp	r5, #12
 8008f16:	bf38      	it	cc
 8008f18:	250c      	movcc	r5, #12
 8008f1a:	4629      	mov	r1, r5
 8008f1c:	4638      	mov	r0, r7
 8008f1e:	f7ff ffa5 	bl	8008e6c <sbrk_aligned>
 8008f22:	3001      	adds	r0, #1
 8008f24:	d02b      	beq.n	8008f7e <_malloc_r+0xd2>
 8008f26:	6823      	ldr	r3, [r4, #0]
 8008f28:	442b      	add	r3, r5
 8008f2a:	6023      	str	r3, [r4, #0]
 8008f2c:	e00e      	b.n	8008f4c <_malloc_r+0xa0>
 8008f2e:	6822      	ldr	r2, [r4, #0]
 8008f30:	1b52      	subs	r2, r2, r5
 8008f32:	d41e      	bmi.n	8008f72 <_malloc_r+0xc6>
 8008f34:	2a0b      	cmp	r2, #11
 8008f36:	d916      	bls.n	8008f66 <_malloc_r+0xba>
 8008f38:	1961      	adds	r1, r4, r5
 8008f3a:	42a3      	cmp	r3, r4
 8008f3c:	6025      	str	r5, [r4, #0]
 8008f3e:	bf18      	it	ne
 8008f40:	6059      	strne	r1, [r3, #4]
 8008f42:	6863      	ldr	r3, [r4, #4]
 8008f44:	bf08      	it	eq
 8008f46:	6031      	streq	r1, [r6, #0]
 8008f48:	5162      	str	r2, [r4, r5]
 8008f4a:	604b      	str	r3, [r1, #4]
 8008f4c:	4638      	mov	r0, r7
 8008f4e:	f104 060b 	add.w	r6, r4, #11
 8008f52:	f000 f855 	bl	8009000 <__malloc_unlock>
 8008f56:	f026 0607 	bic.w	r6, r6, #7
 8008f5a:	1d23      	adds	r3, r4, #4
 8008f5c:	1af2      	subs	r2, r6, r3
 8008f5e:	d0b6      	beq.n	8008ece <_malloc_r+0x22>
 8008f60:	1b9b      	subs	r3, r3, r6
 8008f62:	50a3      	str	r3, [r4, r2]
 8008f64:	e7b3      	b.n	8008ece <_malloc_r+0x22>
 8008f66:	6862      	ldr	r2, [r4, #4]
 8008f68:	42a3      	cmp	r3, r4
 8008f6a:	bf0c      	ite	eq
 8008f6c:	6032      	streq	r2, [r6, #0]
 8008f6e:	605a      	strne	r2, [r3, #4]
 8008f70:	e7ec      	b.n	8008f4c <_malloc_r+0xa0>
 8008f72:	4623      	mov	r3, r4
 8008f74:	6864      	ldr	r4, [r4, #4]
 8008f76:	e7b2      	b.n	8008ede <_malloc_r+0x32>
 8008f78:	4634      	mov	r4, r6
 8008f7a:	6876      	ldr	r6, [r6, #4]
 8008f7c:	e7b9      	b.n	8008ef2 <_malloc_r+0x46>
 8008f7e:	230c      	movs	r3, #12
 8008f80:	603b      	str	r3, [r7, #0]
 8008f82:	4638      	mov	r0, r7
 8008f84:	f000 f83c 	bl	8009000 <__malloc_unlock>
 8008f88:	e7a1      	b.n	8008ece <_malloc_r+0x22>
 8008f8a:	6025      	str	r5, [r4, #0]
 8008f8c:	e7de      	b.n	8008f4c <_malloc_r+0xa0>
 8008f8e:	bf00      	nop
 8008f90:	24000bb4 	.word	0x24000bb4

08008f94 <_sbrk_r>:
 8008f94:	b538      	push	{r3, r4, r5, lr}
 8008f96:	4d06      	ldr	r5, [pc, #24]	; (8008fb0 <_sbrk_r+0x1c>)
 8008f98:	2300      	movs	r3, #0
 8008f9a:	4604      	mov	r4, r0
 8008f9c:	4608      	mov	r0, r1
 8008f9e:	602b      	str	r3, [r5, #0]
 8008fa0:	f7fa f898 	bl	80030d4 <_sbrk>
 8008fa4:	1c43      	adds	r3, r0, #1
 8008fa6:	d102      	bne.n	8008fae <_sbrk_r+0x1a>
 8008fa8:	682b      	ldr	r3, [r5, #0]
 8008faa:	b103      	cbz	r3, 8008fae <_sbrk_r+0x1a>
 8008fac:	6023      	str	r3, [r4, #0]
 8008fae:	bd38      	pop	{r3, r4, r5, pc}
 8008fb0:	24000bbc 	.word	0x24000bbc

08008fb4 <siprintf>:
 8008fb4:	b40e      	push	{r1, r2, r3}
 8008fb6:	b500      	push	{lr}
 8008fb8:	b09c      	sub	sp, #112	; 0x70
 8008fba:	ab1d      	add	r3, sp, #116	; 0x74
 8008fbc:	9002      	str	r0, [sp, #8]
 8008fbe:	9006      	str	r0, [sp, #24]
 8008fc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008fc4:	4809      	ldr	r0, [pc, #36]	; (8008fec <siprintf+0x38>)
 8008fc6:	9107      	str	r1, [sp, #28]
 8008fc8:	9104      	str	r1, [sp, #16]
 8008fca:	4909      	ldr	r1, [pc, #36]	; (8008ff0 <siprintf+0x3c>)
 8008fcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fd0:	9105      	str	r1, [sp, #20]
 8008fd2:	6800      	ldr	r0, [r0, #0]
 8008fd4:	9301      	str	r3, [sp, #4]
 8008fd6:	a902      	add	r1, sp, #8
 8008fd8:	f000 f874 	bl	80090c4 <_svfiprintf_r>
 8008fdc:	9b02      	ldr	r3, [sp, #8]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	701a      	strb	r2, [r3, #0]
 8008fe2:	b01c      	add	sp, #112	; 0x70
 8008fe4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fe8:	b003      	add	sp, #12
 8008fea:	4770      	bx	lr
 8008fec:	2400023c 	.word	0x2400023c
 8008ff0:	ffff0208 	.word	0xffff0208

08008ff4 <__malloc_lock>:
 8008ff4:	4801      	ldr	r0, [pc, #4]	; (8008ffc <__malloc_lock+0x8>)
 8008ff6:	f7ff bed5 	b.w	8008da4 <__retarget_lock_acquire_recursive>
 8008ffa:	bf00      	nop
 8008ffc:	24000bb0 	.word	0x24000bb0

08009000 <__malloc_unlock>:
 8009000:	4801      	ldr	r0, [pc, #4]	; (8009008 <__malloc_unlock+0x8>)
 8009002:	f7ff bed0 	b.w	8008da6 <__retarget_lock_release_recursive>
 8009006:	bf00      	nop
 8009008:	24000bb0 	.word	0x24000bb0

0800900c <__ssputs_r>:
 800900c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009010:	688e      	ldr	r6, [r1, #8]
 8009012:	429e      	cmp	r6, r3
 8009014:	4682      	mov	sl, r0
 8009016:	460c      	mov	r4, r1
 8009018:	4690      	mov	r8, r2
 800901a:	461f      	mov	r7, r3
 800901c:	d838      	bhi.n	8009090 <__ssputs_r+0x84>
 800901e:	898a      	ldrh	r2, [r1, #12]
 8009020:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009024:	d032      	beq.n	800908c <__ssputs_r+0x80>
 8009026:	6825      	ldr	r5, [r4, #0]
 8009028:	6909      	ldr	r1, [r1, #16]
 800902a:	eba5 0901 	sub.w	r9, r5, r1
 800902e:	6965      	ldr	r5, [r4, #20]
 8009030:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009034:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009038:	3301      	adds	r3, #1
 800903a:	444b      	add	r3, r9
 800903c:	106d      	asrs	r5, r5, #1
 800903e:	429d      	cmp	r5, r3
 8009040:	bf38      	it	cc
 8009042:	461d      	movcc	r5, r3
 8009044:	0553      	lsls	r3, r2, #21
 8009046:	d531      	bpl.n	80090ac <__ssputs_r+0xa0>
 8009048:	4629      	mov	r1, r5
 800904a:	f7ff ff2f 	bl	8008eac <_malloc_r>
 800904e:	4606      	mov	r6, r0
 8009050:	b950      	cbnz	r0, 8009068 <__ssputs_r+0x5c>
 8009052:	230c      	movs	r3, #12
 8009054:	f8ca 3000 	str.w	r3, [sl]
 8009058:	89a3      	ldrh	r3, [r4, #12]
 800905a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800905e:	81a3      	strh	r3, [r4, #12]
 8009060:	f04f 30ff 	mov.w	r0, #4294967295
 8009064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009068:	6921      	ldr	r1, [r4, #16]
 800906a:	464a      	mov	r2, r9
 800906c:	f7ff fe9c 	bl	8008da8 <memcpy>
 8009070:	89a3      	ldrh	r3, [r4, #12]
 8009072:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800907a:	81a3      	strh	r3, [r4, #12]
 800907c:	6126      	str	r6, [r4, #16]
 800907e:	6165      	str	r5, [r4, #20]
 8009080:	444e      	add	r6, r9
 8009082:	eba5 0509 	sub.w	r5, r5, r9
 8009086:	6026      	str	r6, [r4, #0]
 8009088:	60a5      	str	r5, [r4, #8]
 800908a:	463e      	mov	r6, r7
 800908c:	42be      	cmp	r6, r7
 800908e:	d900      	bls.n	8009092 <__ssputs_r+0x86>
 8009090:	463e      	mov	r6, r7
 8009092:	6820      	ldr	r0, [r4, #0]
 8009094:	4632      	mov	r2, r6
 8009096:	4641      	mov	r1, r8
 8009098:	f000 faa8 	bl	80095ec <memmove>
 800909c:	68a3      	ldr	r3, [r4, #8]
 800909e:	1b9b      	subs	r3, r3, r6
 80090a0:	60a3      	str	r3, [r4, #8]
 80090a2:	6823      	ldr	r3, [r4, #0]
 80090a4:	4433      	add	r3, r6
 80090a6:	6023      	str	r3, [r4, #0]
 80090a8:	2000      	movs	r0, #0
 80090aa:	e7db      	b.n	8009064 <__ssputs_r+0x58>
 80090ac:	462a      	mov	r2, r5
 80090ae:	f000 fab7 	bl	8009620 <_realloc_r>
 80090b2:	4606      	mov	r6, r0
 80090b4:	2800      	cmp	r0, #0
 80090b6:	d1e1      	bne.n	800907c <__ssputs_r+0x70>
 80090b8:	6921      	ldr	r1, [r4, #16]
 80090ba:	4650      	mov	r0, sl
 80090bc:	f7ff fe8a 	bl	8008dd4 <_free_r>
 80090c0:	e7c7      	b.n	8009052 <__ssputs_r+0x46>
	...

080090c4 <_svfiprintf_r>:
 80090c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c8:	4698      	mov	r8, r3
 80090ca:	898b      	ldrh	r3, [r1, #12]
 80090cc:	061b      	lsls	r3, r3, #24
 80090ce:	b09d      	sub	sp, #116	; 0x74
 80090d0:	4607      	mov	r7, r0
 80090d2:	460d      	mov	r5, r1
 80090d4:	4614      	mov	r4, r2
 80090d6:	d50e      	bpl.n	80090f6 <_svfiprintf_r+0x32>
 80090d8:	690b      	ldr	r3, [r1, #16]
 80090da:	b963      	cbnz	r3, 80090f6 <_svfiprintf_r+0x32>
 80090dc:	2140      	movs	r1, #64	; 0x40
 80090de:	f7ff fee5 	bl	8008eac <_malloc_r>
 80090e2:	6028      	str	r0, [r5, #0]
 80090e4:	6128      	str	r0, [r5, #16]
 80090e6:	b920      	cbnz	r0, 80090f2 <_svfiprintf_r+0x2e>
 80090e8:	230c      	movs	r3, #12
 80090ea:	603b      	str	r3, [r7, #0]
 80090ec:	f04f 30ff 	mov.w	r0, #4294967295
 80090f0:	e0d1      	b.n	8009296 <_svfiprintf_r+0x1d2>
 80090f2:	2340      	movs	r3, #64	; 0x40
 80090f4:	616b      	str	r3, [r5, #20]
 80090f6:	2300      	movs	r3, #0
 80090f8:	9309      	str	r3, [sp, #36]	; 0x24
 80090fa:	2320      	movs	r3, #32
 80090fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009100:	f8cd 800c 	str.w	r8, [sp, #12]
 8009104:	2330      	movs	r3, #48	; 0x30
 8009106:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80092b0 <_svfiprintf_r+0x1ec>
 800910a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800910e:	f04f 0901 	mov.w	r9, #1
 8009112:	4623      	mov	r3, r4
 8009114:	469a      	mov	sl, r3
 8009116:	f813 2b01 	ldrb.w	r2, [r3], #1
 800911a:	b10a      	cbz	r2, 8009120 <_svfiprintf_r+0x5c>
 800911c:	2a25      	cmp	r2, #37	; 0x25
 800911e:	d1f9      	bne.n	8009114 <_svfiprintf_r+0x50>
 8009120:	ebba 0b04 	subs.w	fp, sl, r4
 8009124:	d00b      	beq.n	800913e <_svfiprintf_r+0x7a>
 8009126:	465b      	mov	r3, fp
 8009128:	4622      	mov	r2, r4
 800912a:	4629      	mov	r1, r5
 800912c:	4638      	mov	r0, r7
 800912e:	f7ff ff6d 	bl	800900c <__ssputs_r>
 8009132:	3001      	adds	r0, #1
 8009134:	f000 80aa 	beq.w	800928c <_svfiprintf_r+0x1c8>
 8009138:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800913a:	445a      	add	r2, fp
 800913c:	9209      	str	r2, [sp, #36]	; 0x24
 800913e:	f89a 3000 	ldrb.w	r3, [sl]
 8009142:	2b00      	cmp	r3, #0
 8009144:	f000 80a2 	beq.w	800928c <_svfiprintf_r+0x1c8>
 8009148:	2300      	movs	r3, #0
 800914a:	f04f 32ff 	mov.w	r2, #4294967295
 800914e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009152:	f10a 0a01 	add.w	sl, sl, #1
 8009156:	9304      	str	r3, [sp, #16]
 8009158:	9307      	str	r3, [sp, #28]
 800915a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800915e:	931a      	str	r3, [sp, #104]	; 0x68
 8009160:	4654      	mov	r4, sl
 8009162:	2205      	movs	r2, #5
 8009164:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009168:	4851      	ldr	r0, [pc, #324]	; (80092b0 <_svfiprintf_r+0x1ec>)
 800916a:	f7f7 f8b9 	bl	80002e0 <memchr>
 800916e:	9a04      	ldr	r2, [sp, #16]
 8009170:	b9d8      	cbnz	r0, 80091aa <_svfiprintf_r+0xe6>
 8009172:	06d0      	lsls	r0, r2, #27
 8009174:	bf44      	itt	mi
 8009176:	2320      	movmi	r3, #32
 8009178:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800917c:	0711      	lsls	r1, r2, #28
 800917e:	bf44      	itt	mi
 8009180:	232b      	movmi	r3, #43	; 0x2b
 8009182:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009186:	f89a 3000 	ldrb.w	r3, [sl]
 800918a:	2b2a      	cmp	r3, #42	; 0x2a
 800918c:	d015      	beq.n	80091ba <_svfiprintf_r+0xf6>
 800918e:	9a07      	ldr	r2, [sp, #28]
 8009190:	4654      	mov	r4, sl
 8009192:	2000      	movs	r0, #0
 8009194:	f04f 0c0a 	mov.w	ip, #10
 8009198:	4621      	mov	r1, r4
 800919a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800919e:	3b30      	subs	r3, #48	; 0x30
 80091a0:	2b09      	cmp	r3, #9
 80091a2:	d94e      	bls.n	8009242 <_svfiprintf_r+0x17e>
 80091a4:	b1b0      	cbz	r0, 80091d4 <_svfiprintf_r+0x110>
 80091a6:	9207      	str	r2, [sp, #28]
 80091a8:	e014      	b.n	80091d4 <_svfiprintf_r+0x110>
 80091aa:	eba0 0308 	sub.w	r3, r0, r8
 80091ae:	fa09 f303 	lsl.w	r3, r9, r3
 80091b2:	4313      	orrs	r3, r2
 80091b4:	9304      	str	r3, [sp, #16]
 80091b6:	46a2      	mov	sl, r4
 80091b8:	e7d2      	b.n	8009160 <_svfiprintf_r+0x9c>
 80091ba:	9b03      	ldr	r3, [sp, #12]
 80091bc:	1d19      	adds	r1, r3, #4
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	9103      	str	r1, [sp, #12]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	bfbb      	ittet	lt
 80091c6:	425b      	neglt	r3, r3
 80091c8:	f042 0202 	orrlt.w	r2, r2, #2
 80091cc:	9307      	strge	r3, [sp, #28]
 80091ce:	9307      	strlt	r3, [sp, #28]
 80091d0:	bfb8      	it	lt
 80091d2:	9204      	strlt	r2, [sp, #16]
 80091d4:	7823      	ldrb	r3, [r4, #0]
 80091d6:	2b2e      	cmp	r3, #46	; 0x2e
 80091d8:	d10c      	bne.n	80091f4 <_svfiprintf_r+0x130>
 80091da:	7863      	ldrb	r3, [r4, #1]
 80091dc:	2b2a      	cmp	r3, #42	; 0x2a
 80091de:	d135      	bne.n	800924c <_svfiprintf_r+0x188>
 80091e0:	9b03      	ldr	r3, [sp, #12]
 80091e2:	1d1a      	adds	r2, r3, #4
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	9203      	str	r2, [sp, #12]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	bfb8      	it	lt
 80091ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80091f0:	3402      	adds	r4, #2
 80091f2:	9305      	str	r3, [sp, #20]
 80091f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80092c0 <_svfiprintf_r+0x1fc>
 80091f8:	7821      	ldrb	r1, [r4, #0]
 80091fa:	2203      	movs	r2, #3
 80091fc:	4650      	mov	r0, sl
 80091fe:	f7f7 f86f 	bl	80002e0 <memchr>
 8009202:	b140      	cbz	r0, 8009216 <_svfiprintf_r+0x152>
 8009204:	2340      	movs	r3, #64	; 0x40
 8009206:	eba0 000a 	sub.w	r0, r0, sl
 800920a:	fa03 f000 	lsl.w	r0, r3, r0
 800920e:	9b04      	ldr	r3, [sp, #16]
 8009210:	4303      	orrs	r3, r0
 8009212:	3401      	adds	r4, #1
 8009214:	9304      	str	r3, [sp, #16]
 8009216:	f814 1b01 	ldrb.w	r1, [r4], #1
 800921a:	4826      	ldr	r0, [pc, #152]	; (80092b4 <_svfiprintf_r+0x1f0>)
 800921c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009220:	2206      	movs	r2, #6
 8009222:	f7f7 f85d 	bl	80002e0 <memchr>
 8009226:	2800      	cmp	r0, #0
 8009228:	d038      	beq.n	800929c <_svfiprintf_r+0x1d8>
 800922a:	4b23      	ldr	r3, [pc, #140]	; (80092b8 <_svfiprintf_r+0x1f4>)
 800922c:	bb1b      	cbnz	r3, 8009276 <_svfiprintf_r+0x1b2>
 800922e:	9b03      	ldr	r3, [sp, #12]
 8009230:	3307      	adds	r3, #7
 8009232:	f023 0307 	bic.w	r3, r3, #7
 8009236:	3308      	adds	r3, #8
 8009238:	9303      	str	r3, [sp, #12]
 800923a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800923c:	4433      	add	r3, r6
 800923e:	9309      	str	r3, [sp, #36]	; 0x24
 8009240:	e767      	b.n	8009112 <_svfiprintf_r+0x4e>
 8009242:	fb0c 3202 	mla	r2, ip, r2, r3
 8009246:	460c      	mov	r4, r1
 8009248:	2001      	movs	r0, #1
 800924a:	e7a5      	b.n	8009198 <_svfiprintf_r+0xd4>
 800924c:	2300      	movs	r3, #0
 800924e:	3401      	adds	r4, #1
 8009250:	9305      	str	r3, [sp, #20]
 8009252:	4619      	mov	r1, r3
 8009254:	f04f 0c0a 	mov.w	ip, #10
 8009258:	4620      	mov	r0, r4
 800925a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800925e:	3a30      	subs	r2, #48	; 0x30
 8009260:	2a09      	cmp	r2, #9
 8009262:	d903      	bls.n	800926c <_svfiprintf_r+0x1a8>
 8009264:	2b00      	cmp	r3, #0
 8009266:	d0c5      	beq.n	80091f4 <_svfiprintf_r+0x130>
 8009268:	9105      	str	r1, [sp, #20]
 800926a:	e7c3      	b.n	80091f4 <_svfiprintf_r+0x130>
 800926c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009270:	4604      	mov	r4, r0
 8009272:	2301      	movs	r3, #1
 8009274:	e7f0      	b.n	8009258 <_svfiprintf_r+0x194>
 8009276:	ab03      	add	r3, sp, #12
 8009278:	9300      	str	r3, [sp, #0]
 800927a:	462a      	mov	r2, r5
 800927c:	4b0f      	ldr	r3, [pc, #60]	; (80092bc <_svfiprintf_r+0x1f8>)
 800927e:	a904      	add	r1, sp, #16
 8009280:	4638      	mov	r0, r7
 8009282:	f3af 8000 	nop.w
 8009286:	1c42      	adds	r2, r0, #1
 8009288:	4606      	mov	r6, r0
 800928a:	d1d6      	bne.n	800923a <_svfiprintf_r+0x176>
 800928c:	89ab      	ldrh	r3, [r5, #12]
 800928e:	065b      	lsls	r3, r3, #25
 8009290:	f53f af2c 	bmi.w	80090ec <_svfiprintf_r+0x28>
 8009294:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009296:	b01d      	add	sp, #116	; 0x74
 8009298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800929c:	ab03      	add	r3, sp, #12
 800929e:	9300      	str	r3, [sp, #0]
 80092a0:	462a      	mov	r2, r5
 80092a2:	4b06      	ldr	r3, [pc, #24]	; (80092bc <_svfiprintf_r+0x1f8>)
 80092a4:	a904      	add	r1, sp, #16
 80092a6:	4638      	mov	r0, r7
 80092a8:	f000 f87a 	bl	80093a0 <_printf_i>
 80092ac:	e7eb      	b.n	8009286 <_svfiprintf_r+0x1c2>
 80092ae:	bf00      	nop
 80092b0:	08049984 	.word	0x08049984
 80092b4:	0804998e 	.word	0x0804998e
 80092b8:	00000000 	.word	0x00000000
 80092bc:	0800900d 	.word	0x0800900d
 80092c0:	0804998a 	.word	0x0804998a

080092c4 <_printf_common>:
 80092c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092c8:	4616      	mov	r6, r2
 80092ca:	4699      	mov	r9, r3
 80092cc:	688a      	ldr	r2, [r1, #8]
 80092ce:	690b      	ldr	r3, [r1, #16]
 80092d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80092d4:	4293      	cmp	r3, r2
 80092d6:	bfb8      	it	lt
 80092d8:	4613      	movlt	r3, r2
 80092da:	6033      	str	r3, [r6, #0]
 80092dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80092e0:	4607      	mov	r7, r0
 80092e2:	460c      	mov	r4, r1
 80092e4:	b10a      	cbz	r2, 80092ea <_printf_common+0x26>
 80092e6:	3301      	adds	r3, #1
 80092e8:	6033      	str	r3, [r6, #0]
 80092ea:	6823      	ldr	r3, [r4, #0]
 80092ec:	0699      	lsls	r1, r3, #26
 80092ee:	bf42      	ittt	mi
 80092f0:	6833      	ldrmi	r3, [r6, #0]
 80092f2:	3302      	addmi	r3, #2
 80092f4:	6033      	strmi	r3, [r6, #0]
 80092f6:	6825      	ldr	r5, [r4, #0]
 80092f8:	f015 0506 	ands.w	r5, r5, #6
 80092fc:	d106      	bne.n	800930c <_printf_common+0x48>
 80092fe:	f104 0a19 	add.w	sl, r4, #25
 8009302:	68e3      	ldr	r3, [r4, #12]
 8009304:	6832      	ldr	r2, [r6, #0]
 8009306:	1a9b      	subs	r3, r3, r2
 8009308:	42ab      	cmp	r3, r5
 800930a:	dc26      	bgt.n	800935a <_printf_common+0x96>
 800930c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009310:	1e13      	subs	r3, r2, #0
 8009312:	6822      	ldr	r2, [r4, #0]
 8009314:	bf18      	it	ne
 8009316:	2301      	movne	r3, #1
 8009318:	0692      	lsls	r2, r2, #26
 800931a:	d42b      	bmi.n	8009374 <_printf_common+0xb0>
 800931c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009320:	4649      	mov	r1, r9
 8009322:	4638      	mov	r0, r7
 8009324:	47c0      	blx	r8
 8009326:	3001      	adds	r0, #1
 8009328:	d01e      	beq.n	8009368 <_printf_common+0xa4>
 800932a:	6823      	ldr	r3, [r4, #0]
 800932c:	68e5      	ldr	r5, [r4, #12]
 800932e:	6832      	ldr	r2, [r6, #0]
 8009330:	f003 0306 	and.w	r3, r3, #6
 8009334:	2b04      	cmp	r3, #4
 8009336:	bf08      	it	eq
 8009338:	1aad      	subeq	r5, r5, r2
 800933a:	68a3      	ldr	r3, [r4, #8]
 800933c:	6922      	ldr	r2, [r4, #16]
 800933e:	bf0c      	ite	eq
 8009340:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009344:	2500      	movne	r5, #0
 8009346:	4293      	cmp	r3, r2
 8009348:	bfc4      	itt	gt
 800934a:	1a9b      	subgt	r3, r3, r2
 800934c:	18ed      	addgt	r5, r5, r3
 800934e:	2600      	movs	r6, #0
 8009350:	341a      	adds	r4, #26
 8009352:	42b5      	cmp	r5, r6
 8009354:	d11a      	bne.n	800938c <_printf_common+0xc8>
 8009356:	2000      	movs	r0, #0
 8009358:	e008      	b.n	800936c <_printf_common+0xa8>
 800935a:	2301      	movs	r3, #1
 800935c:	4652      	mov	r2, sl
 800935e:	4649      	mov	r1, r9
 8009360:	4638      	mov	r0, r7
 8009362:	47c0      	blx	r8
 8009364:	3001      	adds	r0, #1
 8009366:	d103      	bne.n	8009370 <_printf_common+0xac>
 8009368:	f04f 30ff 	mov.w	r0, #4294967295
 800936c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009370:	3501      	adds	r5, #1
 8009372:	e7c6      	b.n	8009302 <_printf_common+0x3e>
 8009374:	18e1      	adds	r1, r4, r3
 8009376:	1c5a      	adds	r2, r3, #1
 8009378:	2030      	movs	r0, #48	; 0x30
 800937a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800937e:	4422      	add	r2, r4
 8009380:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009384:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009388:	3302      	adds	r3, #2
 800938a:	e7c7      	b.n	800931c <_printf_common+0x58>
 800938c:	2301      	movs	r3, #1
 800938e:	4622      	mov	r2, r4
 8009390:	4649      	mov	r1, r9
 8009392:	4638      	mov	r0, r7
 8009394:	47c0      	blx	r8
 8009396:	3001      	adds	r0, #1
 8009398:	d0e6      	beq.n	8009368 <_printf_common+0xa4>
 800939a:	3601      	adds	r6, #1
 800939c:	e7d9      	b.n	8009352 <_printf_common+0x8e>
	...

080093a0 <_printf_i>:
 80093a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093a4:	7e0f      	ldrb	r7, [r1, #24]
 80093a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80093a8:	2f78      	cmp	r7, #120	; 0x78
 80093aa:	4691      	mov	r9, r2
 80093ac:	4680      	mov	r8, r0
 80093ae:	460c      	mov	r4, r1
 80093b0:	469a      	mov	sl, r3
 80093b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80093b6:	d807      	bhi.n	80093c8 <_printf_i+0x28>
 80093b8:	2f62      	cmp	r7, #98	; 0x62
 80093ba:	d80a      	bhi.n	80093d2 <_printf_i+0x32>
 80093bc:	2f00      	cmp	r7, #0
 80093be:	f000 80d8 	beq.w	8009572 <_printf_i+0x1d2>
 80093c2:	2f58      	cmp	r7, #88	; 0x58
 80093c4:	f000 80a3 	beq.w	800950e <_printf_i+0x16e>
 80093c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80093d0:	e03a      	b.n	8009448 <_printf_i+0xa8>
 80093d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80093d6:	2b15      	cmp	r3, #21
 80093d8:	d8f6      	bhi.n	80093c8 <_printf_i+0x28>
 80093da:	a101      	add	r1, pc, #4	; (adr r1, 80093e0 <_printf_i+0x40>)
 80093dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80093e0:	08009439 	.word	0x08009439
 80093e4:	0800944d 	.word	0x0800944d
 80093e8:	080093c9 	.word	0x080093c9
 80093ec:	080093c9 	.word	0x080093c9
 80093f0:	080093c9 	.word	0x080093c9
 80093f4:	080093c9 	.word	0x080093c9
 80093f8:	0800944d 	.word	0x0800944d
 80093fc:	080093c9 	.word	0x080093c9
 8009400:	080093c9 	.word	0x080093c9
 8009404:	080093c9 	.word	0x080093c9
 8009408:	080093c9 	.word	0x080093c9
 800940c:	08009559 	.word	0x08009559
 8009410:	0800947d 	.word	0x0800947d
 8009414:	0800953b 	.word	0x0800953b
 8009418:	080093c9 	.word	0x080093c9
 800941c:	080093c9 	.word	0x080093c9
 8009420:	0800957b 	.word	0x0800957b
 8009424:	080093c9 	.word	0x080093c9
 8009428:	0800947d 	.word	0x0800947d
 800942c:	080093c9 	.word	0x080093c9
 8009430:	080093c9 	.word	0x080093c9
 8009434:	08009543 	.word	0x08009543
 8009438:	682b      	ldr	r3, [r5, #0]
 800943a:	1d1a      	adds	r2, r3, #4
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	602a      	str	r2, [r5, #0]
 8009440:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009444:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009448:	2301      	movs	r3, #1
 800944a:	e0a3      	b.n	8009594 <_printf_i+0x1f4>
 800944c:	6820      	ldr	r0, [r4, #0]
 800944e:	6829      	ldr	r1, [r5, #0]
 8009450:	0606      	lsls	r6, r0, #24
 8009452:	f101 0304 	add.w	r3, r1, #4
 8009456:	d50a      	bpl.n	800946e <_printf_i+0xce>
 8009458:	680e      	ldr	r6, [r1, #0]
 800945a:	602b      	str	r3, [r5, #0]
 800945c:	2e00      	cmp	r6, #0
 800945e:	da03      	bge.n	8009468 <_printf_i+0xc8>
 8009460:	232d      	movs	r3, #45	; 0x2d
 8009462:	4276      	negs	r6, r6
 8009464:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009468:	485e      	ldr	r0, [pc, #376]	; (80095e4 <_printf_i+0x244>)
 800946a:	230a      	movs	r3, #10
 800946c:	e019      	b.n	80094a2 <_printf_i+0x102>
 800946e:	680e      	ldr	r6, [r1, #0]
 8009470:	602b      	str	r3, [r5, #0]
 8009472:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009476:	bf18      	it	ne
 8009478:	b236      	sxthne	r6, r6
 800947a:	e7ef      	b.n	800945c <_printf_i+0xbc>
 800947c:	682b      	ldr	r3, [r5, #0]
 800947e:	6820      	ldr	r0, [r4, #0]
 8009480:	1d19      	adds	r1, r3, #4
 8009482:	6029      	str	r1, [r5, #0]
 8009484:	0601      	lsls	r1, r0, #24
 8009486:	d501      	bpl.n	800948c <_printf_i+0xec>
 8009488:	681e      	ldr	r6, [r3, #0]
 800948a:	e002      	b.n	8009492 <_printf_i+0xf2>
 800948c:	0646      	lsls	r6, r0, #25
 800948e:	d5fb      	bpl.n	8009488 <_printf_i+0xe8>
 8009490:	881e      	ldrh	r6, [r3, #0]
 8009492:	4854      	ldr	r0, [pc, #336]	; (80095e4 <_printf_i+0x244>)
 8009494:	2f6f      	cmp	r7, #111	; 0x6f
 8009496:	bf0c      	ite	eq
 8009498:	2308      	moveq	r3, #8
 800949a:	230a      	movne	r3, #10
 800949c:	2100      	movs	r1, #0
 800949e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80094a2:	6865      	ldr	r5, [r4, #4]
 80094a4:	60a5      	str	r5, [r4, #8]
 80094a6:	2d00      	cmp	r5, #0
 80094a8:	bfa2      	ittt	ge
 80094aa:	6821      	ldrge	r1, [r4, #0]
 80094ac:	f021 0104 	bicge.w	r1, r1, #4
 80094b0:	6021      	strge	r1, [r4, #0]
 80094b2:	b90e      	cbnz	r6, 80094b8 <_printf_i+0x118>
 80094b4:	2d00      	cmp	r5, #0
 80094b6:	d04d      	beq.n	8009554 <_printf_i+0x1b4>
 80094b8:	4615      	mov	r5, r2
 80094ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80094be:	fb03 6711 	mls	r7, r3, r1, r6
 80094c2:	5dc7      	ldrb	r7, [r0, r7]
 80094c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80094c8:	4637      	mov	r7, r6
 80094ca:	42bb      	cmp	r3, r7
 80094cc:	460e      	mov	r6, r1
 80094ce:	d9f4      	bls.n	80094ba <_printf_i+0x11a>
 80094d0:	2b08      	cmp	r3, #8
 80094d2:	d10b      	bne.n	80094ec <_printf_i+0x14c>
 80094d4:	6823      	ldr	r3, [r4, #0]
 80094d6:	07de      	lsls	r6, r3, #31
 80094d8:	d508      	bpl.n	80094ec <_printf_i+0x14c>
 80094da:	6923      	ldr	r3, [r4, #16]
 80094dc:	6861      	ldr	r1, [r4, #4]
 80094de:	4299      	cmp	r1, r3
 80094e0:	bfde      	ittt	le
 80094e2:	2330      	movle	r3, #48	; 0x30
 80094e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80094e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80094ec:	1b52      	subs	r2, r2, r5
 80094ee:	6122      	str	r2, [r4, #16]
 80094f0:	f8cd a000 	str.w	sl, [sp]
 80094f4:	464b      	mov	r3, r9
 80094f6:	aa03      	add	r2, sp, #12
 80094f8:	4621      	mov	r1, r4
 80094fa:	4640      	mov	r0, r8
 80094fc:	f7ff fee2 	bl	80092c4 <_printf_common>
 8009500:	3001      	adds	r0, #1
 8009502:	d14c      	bne.n	800959e <_printf_i+0x1fe>
 8009504:	f04f 30ff 	mov.w	r0, #4294967295
 8009508:	b004      	add	sp, #16
 800950a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800950e:	4835      	ldr	r0, [pc, #212]	; (80095e4 <_printf_i+0x244>)
 8009510:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009514:	6829      	ldr	r1, [r5, #0]
 8009516:	6823      	ldr	r3, [r4, #0]
 8009518:	f851 6b04 	ldr.w	r6, [r1], #4
 800951c:	6029      	str	r1, [r5, #0]
 800951e:	061d      	lsls	r5, r3, #24
 8009520:	d514      	bpl.n	800954c <_printf_i+0x1ac>
 8009522:	07df      	lsls	r7, r3, #31
 8009524:	bf44      	itt	mi
 8009526:	f043 0320 	orrmi.w	r3, r3, #32
 800952a:	6023      	strmi	r3, [r4, #0]
 800952c:	b91e      	cbnz	r6, 8009536 <_printf_i+0x196>
 800952e:	6823      	ldr	r3, [r4, #0]
 8009530:	f023 0320 	bic.w	r3, r3, #32
 8009534:	6023      	str	r3, [r4, #0]
 8009536:	2310      	movs	r3, #16
 8009538:	e7b0      	b.n	800949c <_printf_i+0xfc>
 800953a:	6823      	ldr	r3, [r4, #0]
 800953c:	f043 0320 	orr.w	r3, r3, #32
 8009540:	6023      	str	r3, [r4, #0]
 8009542:	2378      	movs	r3, #120	; 0x78
 8009544:	4828      	ldr	r0, [pc, #160]	; (80095e8 <_printf_i+0x248>)
 8009546:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800954a:	e7e3      	b.n	8009514 <_printf_i+0x174>
 800954c:	0659      	lsls	r1, r3, #25
 800954e:	bf48      	it	mi
 8009550:	b2b6      	uxthmi	r6, r6
 8009552:	e7e6      	b.n	8009522 <_printf_i+0x182>
 8009554:	4615      	mov	r5, r2
 8009556:	e7bb      	b.n	80094d0 <_printf_i+0x130>
 8009558:	682b      	ldr	r3, [r5, #0]
 800955a:	6826      	ldr	r6, [r4, #0]
 800955c:	6961      	ldr	r1, [r4, #20]
 800955e:	1d18      	adds	r0, r3, #4
 8009560:	6028      	str	r0, [r5, #0]
 8009562:	0635      	lsls	r5, r6, #24
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	d501      	bpl.n	800956c <_printf_i+0x1cc>
 8009568:	6019      	str	r1, [r3, #0]
 800956a:	e002      	b.n	8009572 <_printf_i+0x1d2>
 800956c:	0670      	lsls	r0, r6, #25
 800956e:	d5fb      	bpl.n	8009568 <_printf_i+0x1c8>
 8009570:	8019      	strh	r1, [r3, #0]
 8009572:	2300      	movs	r3, #0
 8009574:	6123      	str	r3, [r4, #16]
 8009576:	4615      	mov	r5, r2
 8009578:	e7ba      	b.n	80094f0 <_printf_i+0x150>
 800957a:	682b      	ldr	r3, [r5, #0]
 800957c:	1d1a      	adds	r2, r3, #4
 800957e:	602a      	str	r2, [r5, #0]
 8009580:	681d      	ldr	r5, [r3, #0]
 8009582:	6862      	ldr	r2, [r4, #4]
 8009584:	2100      	movs	r1, #0
 8009586:	4628      	mov	r0, r5
 8009588:	f7f6 feaa 	bl	80002e0 <memchr>
 800958c:	b108      	cbz	r0, 8009592 <_printf_i+0x1f2>
 800958e:	1b40      	subs	r0, r0, r5
 8009590:	6060      	str	r0, [r4, #4]
 8009592:	6863      	ldr	r3, [r4, #4]
 8009594:	6123      	str	r3, [r4, #16]
 8009596:	2300      	movs	r3, #0
 8009598:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800959c:	e7a8      	b.n	80094f0 <_printf_i+0x150>
 800959e:	6923      	ldr	r3, [r4, #16]
 80095a0:	462a      	mov	r2, r5
 80095a2:	4649      	mov	r1, r9
 80095a4:	4640      	mov	r0, r8
 80095a6:	47d0      	blx	sl
 80095a8:	3001      	adds	r0, #1
 80095aa:	d0ab      	beq.n	8009504 <_printf_i+0x164>
 80095ac:	6823      	ldr	r3, [r4, #0]
 80095ae:	079b      	lsls	r3, r3, #30
 80095b0:	d413      	bmi.n	80095da <_printf_i+0x23a>
 80095b2:	68e0      	ldr	r0, [r4, #12]
 80095b4:	9b03      	ldr	r3, [sp, #12]
 80095b6:	4298      	cmp	r0, r3
 80095b8:	bfb8      	it	lt
 80095ba:	4618      	movlt	r0, r3
 80095bc:	e7a4      	b.n	8009508 <_printf_i+0x168>
 80095be:	2301      	movs	r3, #1
 80095c0:	4632      	mov	r2, r6
 80095c2:	4649      	mov	r1, r9
 80095c4:	4640      	mov	r0, r8
 80095c6:	47d0      	blx	sl
 80095c8:	3001      	adds	r0, #1
 80095ca:	d09b      	beq.n	8009504 <_printf_i+0x164>
 80095cc:	3501      	adds	r5, #1
 80095ce:	68e3      	ldr	r3, [r4, #12]
 80095d0:	9903      	ldr	r1, [sp, #12]
 80095d2:	1a5b      	subs	r3, r3, r1
 80095d4:	42ab      	cmp	r3, r5
 80095d6:	dcf2      	bgt.n	80095be <_printf_i+0x21e>
 80095d8:	e7eb      	b.n	80095b2 <_printf_i+0x212>
 80095da:	2500      	movs	r5, #0
 80095dc:	f104 0619 	add.w	r6, r4, #25
 80095e0:	e7f5      	b.n	80095ce <_printf_i+0x22e>
 80095e2:	bf00      	nop
 80095e4:	08049995 	.word	0x08049995
 80095e8:	080499a6 	.word	0x080499a6

080095ec <memmove>:
 80095ec:	4288      	cmp	r0, r1
 80095ee:	b510      	push	{r4, lr}
 80095f0:	eb01 0402 	add.w	r4, r1, r2
 80095f4:	d902      	bls.n	80095fc <memmove+0x10>
 80095f6:	4284      	cmp	r4, r0
 80095f8:	4623      	mov	r3, r4
 80095fa:	d807      	bhi.n	800960c <memmove+0x20>
 80095fc:	1e43      	subs	r3, r0, #1
 80095fe:	42a1      	cmp	r1, r4
 8009600:	d008      	beq.n	8009614 <memmove+0x28>
 8009602:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009606:	f803 2f01 	strb.w	r2, [r3, #1]!
 800960a:	e7f8      	b.n	80095fe <memmove+0x12>
 800960c:	4402      	add	r2, r0
 800960e:	4601      	mov	r1, r0
 8009610:	428a      	cmp	r2, r1
 8009612:	d100      	bne.n	8009616 <memmove+0x2a>
 8009614:	bd10      	pop	{r4, pc}
 8009616:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800961a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800961e:	e7f7      	b.n	8009610 <memmove+0x24>

08009620 <_realloc_r>:
 8009620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009624:	4680      	mov	r8, r0
 8009626:	4614      	mov	r4, r2
 8009628:	460e      	mov	r6, r1
 800962a:	b921      	cbnz	r1, 8009636 <_realloc_r+0x16>
 800962c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009630:	4611      	mov	r1, r2
 8009632:	f7ff bc3b 	b.w	8008eac <_malloc_r>
 8009636:	b92a      	cbnz	r2, 8009644 <_realloc_r+0x24>
 8009638:	f7ff fbcc 	bl	8008dd4 <_free_r>
 800963c:	4625      	mov	r5, r4
 800963e:	4628      	mov	r0, r5
 8009640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009644:	f000 f81b 	bl	800967e <_malloc_usable_size_r>
 8009648:	4284      	cmp	r4, r0
 800964a:	4607      	mov	r7, r0
 800964c:	d802      	bhi.n	8009654 <_realloc_r+0x34>
 800964e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009652:	d812      	bhi.n	800967a <_realloc_r+0x5a>
 8009654:	4621      	mov	r1, r4
 8009656:	4640      	mov	r0, r8
 8009658:	f7ff fc28 	bl	8008eac <_malloc_r>
 800965c:	4605      	mov	r5, r0
 800965e:	2800      	cmp	r0, #0
 8009660:	d0ed      	beq.n	800963e <_realloc_r+0x1e>
 8009662:	42bc      	cmp	r4, r7
 8009664:	4622      	mov	r2, r4
 8009666:	4631      	mov	r1, r6
 8009668:	bf28      	it	cs
 800966a:	463a      	movcs	r2, r7
 800966c:	f7ff fb9c 	bl	8008da8 <memcpy>
 8009670:	4631      	mov	r1, r6
 8009672:	4640      	mov	r0, r8
 8009674:	f7ff fbae 	bl	8008dd4 <_free_r>
 8009678:	e7e1      	b.n	800963e <_realloc_r+0x1e>
 800967a:	4635      	mov	r5, r6
 800967c:	e7df      	b.n	800963e <_realloc_r+0x1e>

0800967e <_malloc_usable_size_r>:
 800967e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009682:	1f18      	subs	r0, r3, #4
 8009684:	2b00      	cmp	r3, #0
 8009686:	bfbc      	itt	lt
 8009688:	580b      	ldrlt	r3, [r1, r0]
 800968a:	18c0      	addlt	r0, r0, r3
 800968c:	4770      	bx	lr
	...

08009690 <ceilf>:
 8009690:	ee10 3a10 	vmov	r3, s0
 8009694:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009698:	3a7f      	subs	r2, #127	; 0x7f
 800969a:	2a16      	cmp	r2, #22
 800969c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80096a0:	dc2a      	bgt.n	80096f8 <ceilf+0x68>
 80096a2:	2a00      	cmp	r2, #0
 80096a4:	da11      	bge.n	80096ca <ceilf+0x3a>
 80096a6:	eddf 7a19 	vldr	s15, [pc, #100]	; 800970c <ceilf+0x7c>
 80096aa:	ee30 0a27 	vadd.f32	s0, s0, s15
 80096ae:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80096b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096b6:	dd05      	ble.n	80096c4 <ceilf+0x34>
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	db23      	blt.n	8009704 <ceilf+0x74>
 80096bc:	2900      	cmp	r1, #0
 80096be:	bf18      	it	ne
 80096c0:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 80096c4:	ee00 3a10 	vmov	s0, r3
 80096c8:	4770      	bx	lr
 80096ca:	4911      	ldr	r1, [pc, #68]	; (8009710 <ceilf+0x80>)
 80096cc:	4111      	asrs	r1, r2
 80096ce:	420b      	tst	r3, r1
 80096d0:	d0fa      	beq.n	80096c8 <ceilf+0x38>
 80096d2:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800970c <ceilf+0x7c>
 80096d6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80096da:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80096de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096e2:	ddef      	ble.n	80096c4 <ceilf+0x34>
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	bfc2      	ittt	gt
 80096e8:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 80096ec:	fa40 f202 	asrgt.w	r2, r0, r2
 80096f0:	189b      	addgt	r3, r3, r2
 80096f2:	ea23 0301 	bic.w	r3, r3, r1
 80096f6:	e7e5      	b.n	80096c4 <ceilf+0x34>
 80096f8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80096fc:	d3e4      	bcc.n	80096c8 <ceilf+0x38>
 80096fe:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009702:	4770      	bx	lr
 8009704:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009708:	e7dc      	b.n	80096c4 <ceilf+0x34>
 800970a:	bf00      	nop
 800970c:	7149f2ca 	.word	0x7149f2ca
 8009710:	007fffff 	.word	0x007fffff

08009714 <_init>:
 8009714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009716:	bf00      	nop
 8009718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800971a:	bc08      	pop	{r3}
 800971c:	469e      	mov	lr, r3
 800971e:	4770      	bx	lr

08009720 <_fini>:
 8009720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009722:	bf00      	nop
 8009724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009726:	bc08      	pop	{r3}
 8009728:	469e      	mov	lr, r3
 800972a:	4770      	bx	lr
