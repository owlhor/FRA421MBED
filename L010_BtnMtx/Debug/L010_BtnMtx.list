
L010_BtnMtx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026a0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002760  08002760  00012760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027cc  080027cc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080027cc  080027cc  000127cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080027d4  080027d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027d4  080027d4  000127d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027d8  080027d8  000127d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080027dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000000c  080027e8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  080027e8  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007c0f  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000138b  00000000  00000000  00027c43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000640  00000000  00000000  00028fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005c8  00000000  00000000  00029610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fcb8  00000000  00000000  00029bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008243  00000000  00000000  00039890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00060fed  00000000  00000000  00041ad3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a2ac0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001568  00000000  00000000  000a2b10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002748 	.word	0x08002748

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002748 	.word	0x08002748

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 fa9a 	bl	80009e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f80e 	bl	80004d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b4:	f000 f8a8 	bl	8000608 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004b8:	f000 f876 	bl	80005a8 <MX_USART2_UART_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Main task Dummy
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80004bc:	23a0      	movs	r3, #160	; 0xa0
 80004be:	05db      	lsls	r3, r3, #23
 80004c0:	2120      	movs	r1, #32
 80004c2:	0018      	movs	r0, r3
 80004c4:	f000 fdb8 	bl	8001038 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80004c8:	2064      	movs	r0, #100	; 0x64
 80004ca:	f000 fafb 	bl	8000ac4 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80004ce:	e7f5      	b.n	80004bc <main+0x14>

080004d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d0:	b590      	push	{r4, r7, lr}
 80004d2:	b099      	sub	sp, #100	; 0x64
 80004d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d6:	242c      	movs	r4, #44	; 0x2c
 80004d8:	193b      	adds	r3, r7, r4
 80004da:	0018      	movs	r0, r3
 80004dc:	2334      	movs	r3, #52	; 0x34
 80004de:	001a      	movs	r2, r3
 80004e0:	2100      	movs	r1, #0
 80004e2:	f002 f929 	bl	8002738 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e6:	2318      	movs	r3, #24
 80004e8:	18fb      	adds	r3, r7, r3
 80004ea:	0018      	movs	r0, r3
 80004ec:	2314      	movs	r3, #20
 80004ee:	001a      	movs	r2, r3
 80004f0:	2100      	movs	r1, #0
 80004f2:	f002 f921 	bl	8002738 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004f6:	003b      	movs	r3, r7
 80004f8:	0018      	movs	r0, r3
 80004fa:	2318      	movs	r3, #24
 80004fc:	001a      	movs	r2, r3
 80004fe:	2100      	movs	r1, #0
 8000500:	f002 f91a 	bl	8002738 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000504:	4b26      	ldr	r3, [pc, #152]	; (80005a0 <SystemClock_Config+0xd0>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a26      	ldr	r2, [pc, #152]	; (80005a4 <SystemClock_Config+0xd4>)
 800050a:	401a      	ands	r2, r3
 800050c:	4b24      	ldr	r3, [pc, #144]	; (80005a0 <SystemClock_Config+0xd0>)
 800050e:	2180      	movs	r1, #128	; 0x80
 8000510:	0109      	lsls	r1, r1, #4
 8000512:	430a      	orrs	r2, r1
 8000514:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000516:	0021      	movs	r1, r4
 8000518:	187b      	adds	r3, r7, r1
 800051a:	2210      	movs	r2, #16
 800051c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800051e:	187b      	adds	r3, r7, r1
 8000520:	2201      	movs	r2, #1
 8000522:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2200      	movs	r2, #0
 8000528:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800052a:	187b      	adds	r3, r7, r1
 800052c:	22a0      	movs	r2, #160	; 0xa0
 800052e:	0212      	lsls	r2, r2, #8
 8000530:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000532:	187b      	adds	r3, r7, r1
 8000534:	2200      	movs	r2, #0
 8000536:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000538:	187b      	adds	r3, r7, r1
 800053a:	0018      	movs	r0, r3
 800053c:	f000 fdb4 	bl	80010a8 <HAL_RCC_OscConfig>
 8000540:	1e03      	subs	r3, r0, #0
 8000542:	d001      	beq.n	8000548 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000544:	f000 f97a 	bl	800083c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000548:	2118      	movs	r1, #24
 800054a:	187b      	adds	r3, r7, r1
 800054c:	220f      	movs	r2, #15
 800054e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000550:	187b      	adds	r3, r7, r1
 8000552:	2200      	movs	r2, #0
 8000554:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2200      	movs	r2, #0
 8000560:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2200      	movs	r2, #0
 8000566:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000568:	187b      	adds	r3, r7, r1
 800056a:	2100      	movs	r1, #0
 800056c:	0018      	movs	r0, r3
 800056e:	f001 f917 	bl	80017a0 <HAL_RCC_ClockConfig>
 8000572:	1e03      	subs	r3, r0, #0
 8000574:	d001      	beq.n	800057a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000576:	f000 f961 	bl	800083c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800057a:	003b      	movs	r3, r7
 800057c:	2202      	movs	r2, #2
 800057e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000580:	003b      	movs	r3, r7
 8000582:	2200      	movs	r2, #0
 8000584:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000586:	003b      	movs	r3, r7
 8000588:	0018      	movs	r0, r3
 800058a:	f001 fb2d 	bl	8001be8 <HAL_RCCEx_PeriphCLKConfig>
 800058e:	1e03      	subs	r3, r0, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000592:	f000 f953 	bl	800083c <Error_Handler>
  }
}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	46bd      	mov	sp, r7
 800059a:	b019      	add	sp, #100	; 0x64
 800059c:	bd90      	pop	{r4, r7, pc}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	40007000 	.word	0x40007000
 80005a4:	ffffe7ff 	.word	0xffffe7ff

080005a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005ac:	4b14      	ldr	r3, [pc, #80]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005ae:	4a15      	ldr	r2, [pc, #84]	; (8000604 <MX_USART2_UART_Init+0x5c>)
 80005b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005b2:	4b13      	ldr	r3, [pc, #76]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005b4:	22e1      	movs	r2, #225	; 0xe1
 80005b6:	0252      	lsls	r2, r2, #9
 80005b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ba:	4b11      	ldr	r3, [pc, #68]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005c6:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005ce:	220c      	movs	r2, #12
 80005d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005d2:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005d8:	4b09      	ldr	r3, [pc, #36]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005da:	2200      	movs	r2, #0
 80005dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005de:	4b08      	ldr	r3, [pc, #32]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005ea:	4b05      	ldr	r3, [pc, #20]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005ec:	0018      	movs	r0, r3
 80005ee:	f001 fc21 	bl	8001e34 <HAL_UART_Init>
 80005f2:	1e03      	subs	r3, r0, #0
 80005f4:	d001      	beq.n	80005fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005f6:	f000 f921 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000028 	.word	0x20000028
 8000604:	40004400 	.word	0x40004400

08000608 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000608:	b590      	push	{r4, r7, lr}
 800060a:	b08b      	sub	sp, #44	; 0x2c
 800060c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060e:	2414      	movs	r4, #20
 8000610:	193b      	adds	r3, r7, r4
 8000612:	0018      	movs	r0, r3
 8000614:	2314      	movs	r3, #20
 8000616:	001a      	movs	r2, r3
 8000618:	2100      	movs	r1, #0
 800061a:	f002 f88d 	bl	8002738 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061e:	4b4c      	ldr	r3, [pc, #304]	; (8000750 <MX_GPIO_Init+0x148>)
 8000620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000622:	4b4b      	ldr	r3, [pc, #300]	; (8000750 <MX_GPIO_Init+0x148>)
 8000624:	2104      	movs	r1, #4
 8000626:	430a      	orrs	r2, r1
 8000628:	62da      	str	r2, [r3, #44]	; 0x2c
 800062a:	4b49      	ldr	r3, [pc, #292]	; (8000750 <MX_GPIO_Init+0x148>)
 800062c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800062e:	2204      	movs	r2, #4
 8000630:	4013      	ands	r3, r2
 8000632:	613b      	str	r3, [r7, #16]
 8000634:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000636:	4b46      	ldr	r3, [pc, #280]	; (8000750 <MX_GPIO_Init+0x148>)
 8000638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800063a:	4b45      	ldr	r3, [pc, #276]	; (8000750 <MX_GPIO_Init+0x148>)
 800063c:	2180      	movs	r1, #128	; 0x80
 800063e:	430a      	orrs	r2, r1
 8000640:	62da      	str	r2, [r3, #44]	; 0x2c
 8000642:	4b43      	ldr	r3, [pc, #268]	; (8000750 <MX_GPIO_Init+0x148>)
 8000644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000646:	2280      	movs	r2, #128	; 0x80
 8000648:	4013      	ands	r3, r2
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064e:	4b40      	ldr	r3, [pc, #256]	; (8000750 <MX_GPIO_Init+0x148>)
 8000650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000652:	4b3f      	ldr	r3, [pc, #252]	; (8000750 <MX_GPIO_Init+0x148>)
 8000654:	2101      	movs	r1, #1
 8000656:	430a      	orrs	r2, r1
 8000658:	62da      	str	r2, [r3, #44]	; 0x2c
 800065a:	4b3d      	ldr	r3, [pc, #244]	; (8000750 <MX_GPIO_Init+0x148>)
 800065c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800065e:	2201      	movs	r2, #1
 8000660:	4013      	ands	r3, r2
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000666:	4b3a      	ldr	r3, [pc, #232]	; (8000750 <MX_GPIO_Init+0x148>)
 8000668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800066a:	4b39      	ldr	r3, [pc, #228]	; (8000750 <MX_GPIO_Init+0x148>)
 800066c:	2102      	movs	r1, #2
 800066e:	430a      	orrs	r2, r1
 8000670:	62da      	str	r2, [r3, #44]	; 0x2c
 8000672:	4b37      	ldr	r3, [pc, #220]	; (8000750 <MX_GPIO_Init+0x148>)
 8000674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000676:	2202      	movs	r2, #2
 8000678:	4013      	ands	r3, r2
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800067e:	23a0      	movs	r3, #160	; 0xa0
 8000680:	05db      	lsls	r3, r3, #23
 8000682:	2201      	movs	r2, #1
 8000684:	2120      	movs	r1, #32
 8000686:	0018      	movs	r0, r3
 8000688:	f000 fcb9 	bl	8000ffe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED3_Pin|LED2_Pin, GPIO_PIN_SET);
 800068c:	4b31      	ldr	r3, [pc, #196]	; (8000754 <MX_GPIO_Init+0x14c>)
 800068e:	2201      	movs	r2, #1
 8000690:	2138      	movs	r1, #56	; 0x38
 8000692:	0018      	movs	r0, r3
 8000694:	f000 fcb3 	bl	8000ffe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000698:	193b      	adds	r3, r7, r4
 800069a:	2280      	movs	r2, #128	; 0x80
 800069c:	0192      	lsls	r2, r2, #6
 800069e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006a0:	193b      	adds	r3, r7, r4
 80006a2:	2284      	movs	r2, #132	; 0x84
 80006a4:	0392      	lsls	r2, r2, #14
 80006a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	193b      	adds	r3, r7, r4
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006ae:	193b      	adds	r3, r7, r4
 80006b0:	4a29      	ldr	r2, [pc, #164]	; (8000758 <MX_GPIO_Init+0x150>)
 80006b2:	0019      	movs	r1, r3
 80006b4:	0010      	movs	r0, r2
 80006b6:	f000 fb07 	bl	8000cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : S1_Pin S2_Pin S3_Pin */
  GPIO_InitStruct.Pin = S1_Pin|S2_Pin|S3_Pin;
 80006ba:	193b      	adds	r3, r7, r4
 80006bc:	2213      	movs	r2, #19
 80006be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	2284      	movs	r2, #132	; 0x84
 80006c4:	0392      	lsls	r2, r2, #14
 80006c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ce:	193a      	adds	r2, r7, r4
 80006d0:	23a0      	movs	r3, #160	; 0xa0
 80006d2:	05db      	lsls	r3, r3, #23
 80006d4:	0011      	movs	r1, r2
 80006d6:	0018      	movs	r0, r3
 80006d8:	f000 faf6 	bl	8000cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	2220      	movs	r2, #32
 80006e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e2:	193b      	adds	r3, r7, r4
 80006e4:	2201      	movs	r2, #1
 80006e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	2200      	movs	r2, #0
 80006f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006f4:	193a      	adds	r2, r7, r4
 80006f6:	23a0      	movs	r3, #160	; 0xa0
 80006f8:	05db      	lsls	r3, r3, #23
 80006fa:	0011      	movs	r1, r2
 80006fc:	0018      	movs	r0, r3
 80006fe:	f000 fae3 	bl	8000cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED3_Pin|LED2_Pin;
 8000702:	0021      	movs	r1, r4
 8000704:	187b      	adds	r3, r7, r1
 8000706:	2238      	movs	r2, #56	; 0x38
 8000708:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800070a:	187b      	adds	r3, r7, r1
 800070c:	2211      	movs	r2, #17
 800070e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	187b      	adds	r3, r7, r1
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000716:	187b      	adds	r3, r7, r1
 8000718:	2200      	movs	r2, #0
 800071a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071c:	187b      	adds	r3, r7, r1
 800071e:	4a0d      	ldr	r2, [pc, #52]	; (8000754 <MX_GPIO_Init+0x14c>)
 8000720:	0019      	movs	r1, r3
 8000722:	0010      	movs	r0, r2
 8000724:	f000 fad0 	bl	8000cc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 1, 0);
 8000728:	2200      	movs	r2, #0
 800072a:	2101      	movs	r1, #1
 800072c:	2005      	movs	r0, #5
 800072e:	f000 fa99 	bl	8000c64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000732:	2005      	movs	r0, #5
 8000734:	f000 faab 	bl	8000c8e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 0);
 8000738:	2200      	movs	r2, #0
 800073a:	2102      	movs	r1, #2
 800073c:	2007      	movs	r0, #7
 800073e:	f000 fa91 	bl	8000c64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000742:	2007      	movs	r0, #7
 8000744:	f000 faa3 	bl	8000c8e <HAL_NVIC_EnableIRQ>

}
 8000748:	46c0      	nop			; (mov r8, r8)
 800074a:	46bd      	mov	sp, r7
 800074c:	b00b      	add	sp, #44	; 0x2c
 800074e:	bd90      	pop	{r4, r7, pc}
 8000750:	40021000 	.word	0x40021000
 8000754:	50000400 	.word	0x50000400
 8000758:	50000800 	.word	0x50000800

0800075c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	0002      	movs	r2, r0
 8000764:	1dbb      	adds	r3, r7, #6
 8000766:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */

	if(GPIO_Pin == GPIO_PIN_0){
 8000768:	1dbb      	adds	r3, r7, #6
 800076a:	881b      	ldrh	r3, [r3, #0]
 800076c:	2b01      	cmp	r3, #1
 800076e:	d11c      	bne.n	80007aa <HAL_GPIO_EXTI_Callback+0x4e>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); // ON LED
 8000770:	4b31      	ldr	r3, [pc, #196]	; (8000838 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000772:	2200      	movs	r2, #0
 8000774:	2108      	movs	r1, #8
 8000776:	0018      	movs	r0, r3
 8000778:	f000 fc41 	bl	8000ffe <HAL_GPIO_WritePin>
		while(HAL_GPIO_ReadPin(S1_GPIO_Port, S1_Pin) == GPIO_PIN_RESET){
 800077c:	e007      	b.n	800078e <HAL_GPIO_EXTI_Callback+0x32>
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);            // While state loop
 800077e:	4b2e      	ldr	r3, [pc, #184]	; (8000838 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000780:	2108      	movs	r1, #8
 8000782:	0018      	movs	r0, r3
 8000784:	f000 fc58 	bl	8001038 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8000788:	2064      	movs	r0, #100	; 0x64
 800078a:	f000 f99b 	bl	8000ac4 <HAL_Delay>
		while(HAL_GPIO_ReadPin(S1_GPIO_Port, S1_Pin) == GPIO_PIN_RESET){
 800078e:	23a0      	movs	r3, #160	; 0xa0
 8000790:	05db      	lsls	r3, r3, #23
 8000792:	2101      	movs	r1, #1
 8000794:	0018      	movs	r0, r3
 8000796:	f000 fc15 	bl	8000fc4 <HAL_GPIO_ReadPin>
 800079a:	1e03      	subs	r3, r0, #0
 800079c:	d0ef      	beq.n	800077e <HAL_GPIO_EXTI_Callback+0x22>
		}
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);  // OFF LED
 800079e:	4b26      	ldr	r3, [pc, #152]	; (8000838 <HAL_GPIO_EXTI_Callback+0xdc>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	2108      	movs	r1, #8
 80007a4:	0018      	movs	r0, r3
 80007a6:	f000 fc2a 	bl	8000ffe <HAL_GPIO_WritePin>
	}


	if(GPIO_Pin == GPIO_PIN_1){
 80007aa:	1dbb      	adds	r3, r7, #6
 80007ac:	881b      	ldrh	r3, [r3, #0]
 80007ae:	2b02      	cmp	r3, #2
 80007b0:	d11c      	bne.n	80007ec <HAL_GPIO_EXTI_Callback+0x90>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); // ON LED
 80007b2:	4b21      	ldr	r3, [pc, #132]	; (8000838 <HAL_GPIO_EXTI_Callback+0xdc>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	2120      	movs	r1, #32
 80007b8:	0018      	movs	r0, r3
 80007ba:	f000 fc20 	bl	8000ffe <HAL_GPIO_WritePin>
			while(HAL_GPIO_ReadPin(S2_GPIO_Port, S2_Pin) == GPIO_PIN_RESET){
 80007be:	e007      	b.n	80007d0 <HAL_GPIO_EXTI_Callback+0x74>
				HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);            // While state loop
 80007c0:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <HAL_GPIO_EXTI_Callback+0xdc>)
 80007c2:	2120      	movs	r1, #32
 80007c4:	0018      	movs	r0, r3
 80007c6:	f000 fc37 	bl	8001038 <HAL_GPIO_TogglePin>
				HAL_Delay(100);
 80007ca:	2064      	movs	r0, #100	; 0x64
 80007cc:	f000 f97a 	bl	8000ac4 <HAL_Delay>
			while(HAL_GPIO_ReadPin(S2_GPIO_Port, S2_Pin) == GPIO_PIN_RESET){
 80007d0:	23a0      	movs	r3, #160	; 0xa0
 80007d2:	05db      	lsls	r3, r3, #23
 80007d4:	2102      	movs	r1, #2
 80007d6:	0018      	movs	r0, r3
 80007d8:	f000 fbf4 	bl	8000fc4 <HAL_GPIO_ReadPin>
 80007dc:	1e03      	subs	r3, r0, #0
 80007de:	d0ef      	beq.n	80007c0 <HAL_GPIO_EXTI_Callback+0x64>
			}
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);  // OFF LED
 80007e0:	4b15      	ldr	r3, [pc, #84]	; (8000838 <HAL_GPIO_EXTI_Callback+0xdc>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	2120      	movs	r1, #32
 80007e6:	0018      	movs	r0, r3
 80007e8:	f000 fc09 	bl	8000ffe <HAL_GPIO_WritePin>
		}

	if(GPIO_Pin == GPIO_PIN_4){
 80007ec:	1dbb      	adds	r3, r7, #6
 80007ee:	881b      	ldrh	r3, [r3, #0]
 80007f0:	2b10      	cmp	r3, #16
 80007f2:	d11c      	bne.n	800082e <HAL_GPIO_EXTI_Callback+0xd2>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); // ON LED
 80007f4:	4b10      	ldr	r3, [pc, #64]	; (8000838 <HAL_GPIO_EXTI_Callback+0xdc>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	2110      	movs	r1, #16
 80007fa:	0018      	movs	r0, r3
 80007fc:	f000 fbff 	bl	8000ffe <HAL_GPIO_WritePin>
			while(HAL_GPIO_ReadPin(S3_GPIO_Port, S3_Pin) == GPIO_PIN_RESET){
 8000800:	e007      	b.n	8000812 <HAL_GPIO_EXTI_Callback+0xb6>
				HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);            // While state loop
 8000802:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000804:	2110      	movs	r1, #16
 8000806:	0018      	movs	r0, r3
 8000808:	f000 fc16 	bl	8001038 <HAL_GPIO_TogglePin>
				HAL_Delay(100);
 800080c:	2064      	movs	r0, #100	; 0x64
 800080e:	f000 f959 	bl	8000ac4 <HAL_Delay>
			while(HAL_GPIO_ReadPin(S3_GPIO_Port, S3_Pin) == GPIO_PIN_RESET){
 8000812:	23a0      	movs	r3, #160	; 0xa0
 8000814:	05db      	lsls	r3, r3, #23
 8000816:	2110      	movs	r1, #16
 8000818:	0018      	movs	r0, r3
 800081a:	f000 fbd3 	bl	8000fc4 <HAL_GPIO_ReadPin>
 800081e:	1e03      	subs	r3, r0, #0
 8000820:	d0ef      	beq.n	8000802 <HAL_GPIO_EXTI_Callback+0xa6>
			}
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);  // OFF LED
 8000822:	4b05      	ldr	r3, [pc, #20]	; (8000838 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000824:	2201      	movs	r2, #1
 8000826:	2110      	movs	r1, #16
 8000828:	0018      	movs	r0, r3
 800082a:	f000 fbe8 	bl	8000ffe <HAL_GPIO_WritePin>
		}

}
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	46bd      	mov	sp, r7
 8000832:	b002      	add	sp, #8
 8000834:	bd80      	pop	{r7, pc}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	50000400 	.word	0x50000400

0800083c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000840:	b672      	cpsid	i
}
 8000842:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000844:	e7fe      	b.n	8000844 <Error_Handler+0x8>
	...

08000848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084c:	4b07      	ldr	r3, [pc, #28]	; (800086c <HAL_MspInit+0x24>)
 800084e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <HAL_MspInit+0x24>)
 8000852:	2101      	movs	r1, #1
 8000854:	430a      	orrs	r2, r1
 8000856:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000858:	4b04      	ldr	r3, [pc, #16]	; (800086c <HAL_MspInit+0x24>)
 800085a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800085c:	4b03      	ldr	r3, [pc, #12]	; (800086c <HAL_MspInit+0x24>)
 800085e:	2180      	movs	r1, #128	; 0x80
 8000860:	0549      	lsls	r1, r1, #21
 8000862:	430a      	orrs	r2, r1
 8000864:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40021000 	.word	0x40021000

08000870 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000870:	b590      	push	{r4, r7, lr}
 8000872:	b089      	sub	sp, #36	; 0x24
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000878:	240c      	movs	r4, #12
 800087a:	193b      	adds	r3, r7, r4
 800087c:	0018      	movs	r0, r3
 800087e:	2314      	movs	r3, #20
 8000880:	001a      	movs	r2, r3
 8000882:	2100      	movs	r1, #0
 8000884:	f001 ff58 	bl	8002738 <memset>
  if(huart->Instance==USART2)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a18      	ldr	r2, [pc, #96]	; (80008f0 <HAL_UART_MspInit+0x80>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d129      	bne.n	80008e6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000892:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <HAL_UART_MspInit+0x84>)
 8000894:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000896:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <HAL_UART_MspInit+0x84>)
 8000898:	2180      	movs	r1, #128	; 0x80
 800089a:	0289      	lsls	r1, r1, #10
 800089c:	430a      	orrs	r2, r1
 800089e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a0:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <HAL_UART_MspInit+0x84>)
 80008a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008a4:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <HAL_UART_MspInit+0x84>)
 80008a6:	2101      	movs	r1, #1
 80008a8:	430a      	orrs	r2, r1
 80008aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80008ac:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <HAL_UART_MspInit+0x84>)
 80008ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008b0:	2201      	movs	r2, #1
 80008b2:	4013      	ands	r3, r2
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008b8:	0021      	movs	r1, r4
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	220c      	movs	r2, #12
 80008be:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	2202      	movs	r2, #2
 80008c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	187b      	adds	r3, r7, r1
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008cc:	187b      	adds	r3, r7, r1
 80008ce:	2203      	movs	r2, #3
 80008d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	2204      	movs	r2, #4
 80008d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d8:	187a      	adds	r2, r7, r1
 80008da:	23a0      	movs	r3, #160	; 0xa0
 80008dc:	05db      	lsls	r3, r3, #23
 80008de:	0011      	movs	r1, r2
 80008e0:	0018      	movs	r0, r3
 80008e2:	f000 f9f1 	bl	8000cc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	46bd      	mov	sp, r7
 80008ea:	b009      	add	sp, #36	; 0x24
 80008ec:	bd90      	pop	{r4, r7, pc}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	40004400 	.word	0x40004400
 80008f4:	40021000 	.word	0x40021000

080008f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <NMI_Handler+0x4>

080008fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000902:	e7fe      	b.n	8000902 <HardFault_Handler+0x4>

08000904 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000908:	46c0      	nop			; (mov r8, r8)
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800091c:	f000 f8b6 	bl	8000a8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000920:	46c0      	nop			; (mov r8, r8)
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S1_Pin);
 800092a:	2001      	movs	r0, #1
 800092c:	f000 fba0 	bl	8001070 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S2_Pin);
 8000930:	2002      	movs	r0, #2
 8000932:	f000 fb9d 	bl	8001070 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S3_Pin);
 8000940:	2010      	movs	r0, #16
 8000942:	f000 fb95 	bl	8001070 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000946:	2380      	movs	r3, #128	; 0x80
 8000948:	019b      	lsls	r3, r3, #6
 800094a:	0018      	movs	r0, r3
 800094c:	f000 fb90 	bl	8001070 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000950:	46c0      	nop			; (mov r8, r8)
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000960:	4813      	ldr	r0, [pc, #76]	; (80009b0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000962:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000964:	4813      	ldr	r0, [pc, #76]	; (80009b4 <LoopForever+0x6>)
    LDR R1, [R0]
 8000966:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000968:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800096a:	4a13      	ldr	r2, [pc, #76]	; (80009b8 <LoopForever+0xa>)
    CMP R1, R2
 800096c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800096e:	d105      	bne.n	800097c <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000970:	4812      	ldr	r0, [pc, #72]	; (80009bc <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000972:	4913      	ldr	r1, [pc, #76]	; (80009c0 <LoopForever+0x12>)
    STR R1, [R0]
 8000974:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000976:	4813      	ldr	r0, [pc, #76]	; (80009c4 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000978:	4913      	ldr	r1, [pc, #76]	; (80009c8 <LoopForever+0x1a>)
    STR R1, [R0]
 800097a:	6001      	str	r1, [r0, #0]

0800097c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800097c:	4813      	ldr	r0, [pc, #76]	; (80009cc <LoopForever+0x1e>)
  ldr r1, =_edata
 800097e:	4914      	ldr	r1, [pc, #80]	; (80009d0 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000980:	4a14      	ldr	r2, [pc, #80]	; (80009d4 <LoopForever+0x26>)
  movs r3, #0
 8000982:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000984:	e002      	b.n	800098c <LoopCopyDataInit>

08000986 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000986:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000988:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800098a:	3304      	adds	r3, #4

0800098c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800098c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800098e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000990:	d3f9      	bcc.n	8000986 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000992:	4a11      	ldr	r2, [pc, #68]	; (80009d8 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000994:	4c11      	ldr	r4, [pc, #68]	; (80009dc <LoopForever+0x2e>)
  movs r3, #0
 8000996:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000998:	e001      	b.n	800099e <LoopFillZerobss>

0800099a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800099a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800099c:	3204      	adds	r2, #4

0800099e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800099e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a0:	d3fb      	bcc.n	800099a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009a2:	f7ff ffd8 	bl	8000956 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009a6:	f001 fea3 	bl	80026f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009aa:	f7ff fd7d 	bl	80004a8 <main>

080009ae <LoopForever>:

LoopForever:
    b LoopForever
 80009ae:	e7fe      	b.n	80009ae <LoopForever>
   ldr   r0, =_estack
 80009b0:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 80009b4:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80009b8:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 80009bc:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 80009c0:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80009c4:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80009c8:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80009cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009d4:	080027dc 	.word	0x080027dc
  ldr r2, =_sbss
 80009d8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009dc:	200000b0 	.word	0x200000b0

080009e0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009e0:	e7fe      	b.n	80009e0 <ADC1_IRQHandler>
	...

080009e4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009ea:	1dfb      	adds	r3, r7, #7
 80009ec:	2200      	movs	r2, #0
 80009ee:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80009f0:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <HAL_Init+0x3c>)
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <HAL_Init+0x3c>)
 80009f6:	2140      	movs	r1, #64	; 0x40
 80009f8:	430a      	orrs	r2, r1
 80009fa:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009fc:	2000      	movs	r0, #0
 80009fe:	f000 f811 	bl	8000a24 <HAL_InitTick>
 8000a02:	1e03      	subs	r3, r0, #0
 8000a04:	d003      	beq.n	8000a0e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000a06:	1dfb      	adds	r3, r7, #7
 8000a08:	2201      	movs	r2, #1
 8000a0a:	701a      	strb	r2, [r3, #0]
 8000a0c:	e001      	b.n	8000a12 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a0e:	f7ff ff1b 	bl	8000848 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a12:	1dfb      	adds	r3, r7, #7
 8000a14:	781b      	ldrb	r3, [r3, #0]
}
 8000a16:	0018      	movs	r0, r3
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	b002      	add	sp, #8
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	40022000 	.word	0x40022000

08000a24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a24:	b590      	push	{r4, r7, lr}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a2c:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <HAL_InitTick+0x5c>)
 8000a2e:	681c      	ldr	r4, [r3, #0]
 8000a30:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <HAL_InitTick+0x60>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	0019      	movs	r1, r3
 8000a36:	23fa      	movs	r3, #250	; 0xfa
 8000a38:	0098      	lsls	r0, r3, #2
 8000a3a:	f7ff fb65 	bl	8000108 <__udivsi3>
 8000a3e:	0003      	movs	r3, r0
 8000a40:	0019      	movs	r1, r3
 8000a42:	0020      	movs	r0, r4
 8000a44:	f7ff fb60 	bl	8000108 <__udivsi3>
 8000a48:	0003      	movs	r3, r0
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f000 f92f 	bl	8000cae <HAL_SYSTICK_Config>
 8000a50:	1e03      	subs	r3, r0, #0
 8000a52:	d001      	beq.n	8000a58 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a54:	2301      	movs	r3, #1
 8000a56:	e00f      	b.n	8000a78 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2b03      	cmp	r3, #3
 8000a5c:	d80b      	bhi.n	8000a76 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a5e:	6879      	ldr	r1, [r7, #4]
 8000a60:	2301      	movs	r3, #1
 8000a62:	425b      	negs	r3, r3
 8000a64:	2200      	movs	r2, #0
 8000a66:	0018      	movs	r0, r3
 8000a68:	f000 f8fc 	bl	8000c64 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a6c:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <HAL_InitTick+0x64>)
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a72:	2300      	movs	r3, #0
 8000a74:	e000      	b.n	8000a78 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
}
 8000a78:	0018      	movs	r0, r3
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	b003      	add	sp, #12
 8000a7e:	bd90      	pop	{r4, r7, pc}
 8000a80:	20000000 	.word	0x20000000
 8000a84:	20000008 	.word	0x20000008
 8000a88:	20000004 	.word	0x20000004

08000a8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <HAL_IncTick+0x1c>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	001a      	movs	r2, r3
 8000a96:	4b05      	ldr	r3, [pc, #20]	; (8000aac <HAL_IncTick+0x20>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	18d2      	adds	r2, r2, r3
 8000a9c:	4b03      	ldr	r3, [pc, #12]	; (8000aac <HAL_IncTick+0x20>)
 8000a9e:	601a      	str	r2, [r3, #0]
}
 8000aa0:	46c0      	nop			; (mov r8, r8)
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	20000008 	.word	0x20000008
 8000aac:	200000ac 	.word	0x200000ac

08000ab0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab4:	4b02      	ldr	r3, [pc, #8]	; (8000ac0 <HAL_GetTick+0x10>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
}
 8000ab8:	0018      	movs	r0, r3
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	200000ac 	.word	0x200000ac

08000ac4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000acc:	f7ff fff0 	bl	8000ab0 <HAL_GetTick>
 8000ad0:	0003      	movs	r3, r0
 8000ad2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	3301      	adds	r3, #1
 8000adc:	d005      	beq.n	8000aea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ade:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <HAL_Delay+0x44>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	001a      	movs	r2, r3
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	189b      	adds	r3, r3, r2
 8000ae8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	f7ff ffe0 	bl	8000ab0 <HAL_GetTick>
 8000af0:	0002      	movs	r2, r0
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	68fa      	ldr	r2, [r7, #12]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d8f7      	bhi.n	8000aec <HAL_Delay+0x28>
  {
  }
}
 8000afc:	46c0      	nop			; (mov r8, r8)
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	46bd      	mov	sp, r7
 8000b02:	b004      	add	sp, #16
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	20000008 	.word	0x20000008

08000b0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	0002      	movs	r2, r0
 8000b14:	1dfb      	adds	r3, r7, #7
 8000b16:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b18:	1dfb      	adds	r3, r7, #7
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b7f      	cmp	r3, #127	; 0x7f
 8000b1e:	d809      	bhi.n	8000b34 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b20:	1dfb      	adds	r3, r7, #7
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	001a      	movs	r2, r3
 8000b26:	231f      	movs	r3, #31
 8000b28:	401a      	ands	r2, r3
 8000b2a:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <__NVIC_EnableIRQ+0x30>)
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	4091      	lsls	r1, r2
 8000b30:	000a      	movs	r2, r1
 8000b32:	601a      	str	r2, [r3, #0]
  }
}
 8000b34:	46c0      	nop			; (mov r8, r8)
 8000b36:	46bd      	mov	sp, r7
 8000b38:	b002      	add	sp, #8
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	e000e100 	.word	0xe000e100

08000b40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b40:	b590      	push	{r4, r7, lr}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	0002      	movs	r2, r0
 8000b48:	6039      	str	r1, [r7, #0]
 8000b4a:	1dfb      	adds	r3, r7, #7
 8000b4c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b4e:	1dfb      	adds	r3, r7, #7
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b7f      	cmp	r3, #127	; 0x7f
 8000b54:	d828      	bhi.n	8000ba8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b56:	4a2f      	ldr	r2, [pc, #188]	; (8000c14 <__NVIC_SetPriority+0xd4>)
 8000b58:	1dfb      	adds	r3, r7, #7
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	b25b      	sxtb	r3, r3
 8000b5e:	089b      	lsrs	r3, r3, #2
 8000b60:	33c0      	adds	r3, #192	; 0xc0
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	589b      	ldr	r3, [r3, r2]
 8000b66:	1dfa      	adds	r2, r7, #7
 8000b68:	7812      	ldrb	r2, [r2, #0]
 8000b6a:	0011      	movs	r1, r2
 8000b6c:	2203      	movs	r2, #3
 8000b6e:	400a      	ands	r2, r1
 8000b70:	00d2      	lsls	r2, r2, #3
 8000b72:	21ff      	movs	r1, #255	; 0xff
 8000b74:	4091      	lsls	r1, r2
 8000b76:	000a      	movs	r2, r1
 8000b78:	43d2      	mvns	r2, r2
 8000b7a:	401a      	ands	r2, r3
 8000b7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	019b      	lsls	r3, r3, #6
 8000b82:	22ff      	movs	r2, #255	; 0xff
 8000b84:	401a      	ands	r2, r3
 8000b86:	1dfb      	adds	r3, r7, #7
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	4003      	ands	r3, r0
 8000b90:	00db      	lsls	r3, r3, #3
 8000b92:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b94:	481f      	ldr	r0, [pc, #124]	; (8000c14 <__NVIC_SetPriority+0xd4>)
 8000b96:	1dfb      	adds	r3, r7, #7
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	b25b      	sxtb	r3, r3
 8000b9c:	089b      	lsrs	r3, r3, #2
 8000b9e:	430a      	orrs	r2, r1
 8000ba0:	33c0      	adds	r3, #192	; 0xc0
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ba6:	e031      	b.n	8000c0c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ba8:	4a1b      	ldr	r2, [pc, #108]	; (8000c18 <__NVIC_SetPriority+0xd8>)
 8000baa:	1dfb      	adds	r3, r7, #7
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	0019      	movs	r1, r3
 8000bb0:	230f      	movs	r3, #15
 8000bb2:	400b      	ands	r3, r1
 8000bb4:	3b08      	subs	r3, #8
 8000bb6:	089b      	lsrs	r3, r3, #2
 8000bb8:	3306      	adds	r3, #6
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	18d3      	adds	r3, r2, r3
 8000bbe:	3304      	adds	r3, #4
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	1dfa      	adds	r2, r7, #7
 8000bc4:	7812      	ldrb	r2, [r2, #0]
 8000bc6:	0011      	movs	r1, r2
 8000bc8:	2203      	movs	r2, #3
 8000bca:	400a      	ands	r2, r1
 8000bcc:	00d2      	lsls	r2, r2, #3
 8000bce:	21ff      	movs	r1, #255	; 0xff
 8000bd0:	4091      	lsls	r1, r2
 8000bd2:	000a      	movs	r2, r1
 8000bd4:	43d2      	mvns	r2, r2
 8000bd6:	401a      	ands	r2, r3
 8000bd8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	019b      	lsls	r3, r3, #6
 8000bde:	22ff      	movs	r2, #255	; 0xff
 8000be0:	401a      	ands	r2, r3
 8000be2:	1dfb      	adds	r3, r7, #7
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	0018      	movs	r0, r3
 8000be8:	2303      	movs	r3, #3
 8000bea:	4003      	ands	r3, r0
 8000bec:	00db      	lsls	r3, r3, #3
 8000bee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bf0:	4809      	ldr	r0, [pc, #36]	; (8000c18 <__NVIC_SetPriority+0xd8>)
 8000bf2:	1dfb      	adds	r3, r7, #7
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	001c      	movs	r4, r3
 8000bf8:	230f      	movs	r3, #15
 8000bfa:	4023      	ands	r3, r4
 8000bfc:	3b08      	subs	r3, #8
 8000bfe:	089b      	lsrs	r3, r3, #2
 8000c00:	430a      	orrs	r2, r1
 8000c02:	3306      	adds	r3, #6
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	18c3      	adds	r3, r0, r3
 8000c08:	3304      	adds	r3, #4
 8000c0a:	601a      	str	r2, [r3, #0]
}
 8000c0c:	46c0      	nop			; (mov r8, r8)
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	b003      	add	sp, #12
 8000c12:	bd90      	pop	{r4, r7, pc}
 8000c14:	e000e100 	.word	0xe000e100
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	1e5a      	subs	r2, r3, #1
 8000c28:	2380      	movs	r3, #128	; 0x80
 8000c2a:	045b      	lsls	r3, r3, #17
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d301      	bcc.n	8000c34 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c30:	2301      	movs	r3, #1
 8000c32:	e010      	b.n	8000c56 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c34:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <SysTick_Config+0x44>)
 8000c36:	687a      	ldr	r2, [r7, #4]
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	425b      	negs	r3, r3
 8000c40:	2103      	movs	r1, #3
 8000c42:	0018      	movs	r0, r3
 8000c44:	f7ff ff7c 	bl	8000b40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c48:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <SysTick_Config+0x44>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c4e:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <SysTick_Config+0x44>)
 8000c50:	2207      	movs	r2, #7
 8000c52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	0018      	movs	r0, r3
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	b002      	add	sp, #8
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	e000e010 	.word	0xe000e010

08000c64 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60b9      	str	r1, [r7, #8]
 8000c6c:	607a      	str	r2, [r7, #4]
 8000c6e:	210f      	movs	r1, #15
 8000c70:	187b      	adds	r3, r7, r1
 8000c72:	1c02      	adds	r2, r0, #0
 8000c74:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c76:	68ba      	ldr	r2, [r7, #8]
 8000c78:	187b      	adds	r3, r7, r1
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	b25b      	sxtb	r3, r3
 8000c7e:	0011      	movs	r1, r2
 8000c80:	0018      	movs	r0, r3
 8000c82:	f7ff ff5d 	bl	8000b40 <__NVIC_SetPriority>
}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	b004      	add	sp, #16
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	0002      	movs	r2, r0
 8000c96:	1dfb      	adds	r3, r7, #7
 8000c98:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c9a:	1dfb      	adds	r3, r7, #7
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	b25b      	sxtb	r3, r3
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f7ff ff33 	bl	8000b0c <__NVIC_EnableIRQ>
}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	b002      	add	sp, #8
 8000cac:	bd80      	pop	{r7, pc}

08000cae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b082      	sub	sp, #8
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	0018      	movs	r0, r3
 8000cba:	f7ff ffaf 	bl	8000c1c <SysTick_Config>
 8000cbe:	0003      	movs	r3, r0
}
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	b002      	add	sp, #8
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000cde:	e155      	b.n	8000f8c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	697a      	ldr	r2, [r7, #20]
 8000ce8:	4091      	lsls	r1, r2
 8000cea:	000a      	movs	r2, r1
 8000cec:	4013      	ands	r3, r2
 8000cee:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d100      	bne.n	8000cf8 <HAL_GPIO_Init+0x30>
 8000cf6:	e146      	b.n	8000f86 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	2203      	movs	r2, #3
 8000cfe:	4013      	ands	r3, r2
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d005      	beq.n	8000d10 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	2203      	movs	r2, #3
 8000d0a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	d130      	bne.n	8000d72 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	2203      	movs	r2, #3
 8000d1c:	409a      	lsls	r2, r3
 8000d1e:	0013      	movs	r3, r2
 8000d20:	43da      	mvns	r2, r3
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	4013      	ands	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	68da      	ldr	r2, [r3, #12]
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	409a      	lsls	r2, r3
 8000d32:	0013      	movs	r3, r2
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d46:	2201      	movs	r2, #1
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	409a      	lsls	r2, r3
 8000d4c:	0013      	movs	r3, r2
 8000d4e:	43da      	mvns	r2, r3
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	4013      	ands	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	091b      	lsrs	r3, r3, #4
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	401a      	ands	r2, r3
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	409a      	lsls	r2, r3
 8000d64:	0013      	movs	r3, r2
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	2203      	movs	r2, #3
 8000d78:	4013      	ands	r3, r2
 8000d7a:	2b03      	cmp	r3, #3
 8000d7c:	d017      	beq.n	8000dae <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	68db      	ldr	r3, [r3, #12]
 8000d82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	2203      	movs	r2, #3
 8000d8a:	409a      	lsls	r2, r3
 8000d8c:	0013      	movs	r3, r2
 8000d8e:	43da      	mvns	r2, r3
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	4013      	ands	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	689a      	ldr	r2, [r3, #8]
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	409a      	lsls	r2, r3
 8000da0:	0013      	movs	r3, r2
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	2203      	movs	r2, #3
 8000db4:	4013      	ands	r3, r2
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d123      	bne.n	8000e02 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	08da      	lsrs	r2, r3, #3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	3208      	adds	r2, #8
 8000dc2:	0092      	lsls	r2, r2, #2
 8000dc4:	58d3      	ldr	r3, [r2, r3]
 8000dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	2207      	movs	r2, #7
 8000dcc:	4013      	ands	r3, r2
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	220f      	movs	r2, #15
 8000dd2:	409a      	lsls	r2, r3
 8000dd4:	0013      	movs	r3, r2
 8000dd6:	43da      	mvns	r2, r3
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	691a      	ldr	r2, [r3, #16]
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	2107      	movs	r1, #7
 8000de6:	400b      	ands	r3, r1
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	409a      	lsls	r2, r3
 8000dec:	0013      	movs	r3, r2
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	08da      	lsrs	r2, r3, #3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3208      	adds	r2, #8
 8000dfc:	0092      	lsls	r2, r2, #2
 8000dfe:	6939      	ldr	r1, [r7, #16]
 8000e00:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	409a      	lsls	r2, r3
 8000e10:	0013      	movs	r3, r2
 8000e12:	43da      	mvns	r2, r3
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	4013      	ands	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	2203      	movs	r2, #3
 8000e20:	401a      	ands	r2, r3
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	409a      	lsls	r2, r3
 8000e28:	0013      	movs	r3, r2
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685a      	ldr	r2, [r3, #4]
 8000e3a:	23c0      	movs	r3, #192	; 0xc0
 8000e3c:	029b      	lsls	r3, r3, #10
 8000e3e:	4013      	ands	r3, r2
 8000e40:	d100      	bne.n	8000e44 <HAL_GPIO_Init+0x17c>
 8000e42:	e0a0      	b.n	8000f86 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e44:	4b57      	ldr	r3, [pc, #348]	; (8000fa4 <HAL_GPIO_Init+0x2dc>)
 8000e46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e48:	4b56      	ldr	r3, [pc, #344]	; (8000fa4 <HAL_GPIO_Init+0x2dc>)
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e50:	4a55      	ldr	r2, [pc, #340]	; (8000fa8 <HAL_GPIO_Init+0x2e0>)
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	089b      	lsrs	r3, r3, #2
 8000e56:	3302      	adds	r3, #2
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	589b      	ldr	r3, [r3, r2]
 8000e5c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	2203      	movs	r2, #3
 8000e62:	4013      	ands	r3, r2
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	220f      	movs	r2, #15
 8000e68:	409a      	lsls	r2, r3
 8000e6a:	0013      	movs	r3, r2
 8000e6c:	43da      	mvns	r2, r3
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	4013      	ands	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	23a0      	movs	r3, #160	; 0xa0
 8000e78:	05db      	lsls	r3, r3, #23
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d01f      	beq.n	8000ebe <HAL_GPIO_Init+0x1f6>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a4a      	ldr	r2, [pc, #296]	; (8000fac <HAL_GPIO_Init+0x2e4>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d019      	beq.n	8000eba <HAL_GPIO_Init+0x1f2>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a49      	ldr	r2, [pc, #292]	; (8000fb0 <HAL_GPIO_Init+0x2e8>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d013      	beq.n	8000eb6 <HAL_GPIO_Init+0x1ee>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a48      	ldr	r2, [pc, #288]	; (8000fb4 <HAL_GPIO_Init+0x2ec>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d00d      	beq.n	8000eb2 <HAL_GPIO_Init+0x1ea>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a47      	ldr	r2, [pc, #284]	; (8000fb8 <HAL_GPIO_Init+0x2f0>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d007      	beq.n	8000eae <HAL_GPIO_Init+0x1e6>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a46      	ldr	r2, [pc, #280]	; (8000fbc <HAL_GPIO_Init+0x2f4>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d101      	bne.n	8000eaa <HAL_GPIO_Init+0x1e2>
 8000ea6:	2305      	movs	r3, #5
 8000ea8:	e00a      	b.n	8000ec0 <HAL_GPIO_Init+0x1f8>
 8000eaa:	2306      	movs	r3, #6
 8000eac:	e008      	b.n	8000ec0 <HAL_GPIO_Init+0x1f8>
 8000eae:	2304      	movs	r3, #4
 8000eb0:	e006      	b.n	8000ec0 <HAL_GPIO_Init+0x1f8>
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	e004      	b.n	8000ec0 <HAL_GPIO_Init+0x1f8>
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	e002      	b.n	8000ec0 <HAL_GPIO_Init+0x1f8>
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e000      	b.n	8000ec0 <HAL_GPIO_Init+0x1f8>
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	697a      	ldr	r2, [r7, #20]
 8000ec2:	2103      	movs	r1, #3
 8000ec4:	400a      	ands	r2, r1
 8000ec6:	0092      	lsls	r2, r2, #2
 8000ec8:	4093      	lsls	r3, r2
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ed0:	4935      	ldr	r1, [pc, #212]	; (8000fa8 <HAL_GPIO_Init+0x2e0>)
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	089b      	lsrs	r3, r3, #2
 8000ed6:	3302      	adds	r3, #2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ede:	4b38      	ldr	r3, [pc, #224]	; (8000fc0 <HAL_GPIO_Init+0x2f8>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	43da      	mvns	r2, r3
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685a      	ldr	r2, [r3, #4]
 8000ef2:	2380      	movs	r3, #128	; 0x80
 8000ef4:	025b      	lsls	r3, r3, #9
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	d003      	beq.n	8000f02 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f02:	4b2f      	ldr	r3, [pc, #188]	; (8000fc0 <HAL_GPIO_Init+0x2f8>)
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000f08:	4b2d      	ldr	r3, [pc, #180]	; (8000fc0 <HAL_GPIO_Init+0x2f8>)
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	43da      	mvns	r2, r3
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	4013      	ands	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685a      	ldr	r2, [r3, #4]
 8000f1c:	2380      	movs	r3, #128	; 0x80
 8000f1e:	029b      	lsls	r3, r3, #10
 8000f20:	4013      	ands	r3, r2
 8000f22:	d003      	beq.n	8000f2c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f2c:	4b24      	ldr	r3, [pc, #144]	; (8000fc0 <HAL_GPIO_Init+0x2f8>)
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f32:	4b23      	ldr	r3, [pc, #140]	; (8000fc0 <HAL_GPIO_Init+0x2f8>)
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	43da      	mvns	r2, r3
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685a      	ldr	r2, [r3, #4]
 8000f46:	2380      	movs	r3, #128	; 0x80
 8000f48:	035b      	lsls	r3, r3, #13
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	d003      	beq.n	8000f56 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f56:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <HAL_GPIO_Init+0x2f8>)
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f5c:	4b18      	ldr	r3, [pc, #96]	; (8000fc0 <HAL_GPIO_Init+0x2f8>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	43da      	mvns	r2, r3
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685a      	ldr	r2, [r3, #4]
 8000f70:	2380      	movs	r3, #128	; 0x80
 8000f72:	039b      	lsls	r3, r3, #14
 8000f74:	4013      	ands	r3, r2
 8000f76:	d003      	beq.n	8000f80 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f80:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <HAL_GPIO_Init+0x2f8>)
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	40da      	lsrs	r2, r3
 8000f94:	1e13      	subs	r3, r2, #0
 8000f96:	d000      	beq.n	8000f9a <HAL_GPIO_Init+0x2d2>
 8000f98:	e6a2      	b.n	8000ce0 <HAL_GPIO_Init+0x18>
  }
}
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	46c0      	nop			; (mov r8, r8)
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	b006      	add	sp, #24
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	40010000 	.word	0x40010000
 8000fac:	50000400 	.word	0x50000400
 8000fb0:	50000800 	.word	0x50000800
 8000fb4:	50000c00 	.word	0x50000c00
 8000fb8:	50001000 	.word	0x50001000
 8000fbc:	50001c00 	.word	0x50001c00
 8000fc0:	40010400 	.word	0x40010400

08000fc4 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	000a      	movs	r2, r1
 8000fce:	1cbb      	adds	r3, r7, #2
 8000fd0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	691b      	ldr	r3, [r3, #16]
 8000fd6:	1cba      	adds	r2, r7, #2
 8000fd8:	8812      	ldrh	r2, [r2, #0]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	d004      	beq.n	8000fe8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000fde:	230f      	movs	r3, #15
 8000fe0:	18fb      	adds	r3, r7, r3
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	701a      	strb	r2, [r3, #0]
 8000fe6:	e003      	b.n	8000ff0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fe8:	230f      	movs	r3, #15
 8000fea:	18fb      	adds	r3, r7, r3
 8000fec:	2200      	movs	r2, #0
 8000fee:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000ff0:	230f      	movs	r3, #15
 8000ff2:	18fb      	adds	r3, r7, r3
 8000ff4:	781b      	ldrb	r3, [r3, #0]
}
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	b004      	add	sp, #16
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
 8001006:	0008      	movs	r0, r1
 8001008:	0011      	movs	r1, r2
 800100a:	1cbb      	adds	r3, r7, #2
 800100c:	1c02      	adds	r2, r0, #0
 800100e:	801a      	strh	r2, [r3, #0]
 8001010:	1c7b      	adds	r3, r7, #1
 8001012:	1c0a      	adds	r2, r1, #0
 8001014:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001016:	1c7b      	adds	r3, r7, #1
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d004      	beq.n	8001028 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800101e:	1cbb      	adds	r3, r7, #2
 8001020:	881a      	ldrh	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001026:	e003      	b.n	8001030 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001028:	1cbb      	adds	r3, r7, #2
 800102a:	881a      	ldrh	r2, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001030:	46c0      	nop			; (mov r8, r8)
 8001032:	46bd      	mov	sp, r7
 8001034:	b002      	add	sp, #8
 8001036:	bd80      	pop	{r7, pc}

08001038 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	000a      	movs	r2, r1
 8001042:	1cbb      	adds	r3, r7, #2
 8001044:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800104c:	1cbb      	adds	r3, r7, #2
 800104e:	881b      	ldrh	r3, [r3, #0]
 8001050:	68fa      	ldr	r2, [r7, #12]
 8001052:	4013      	ands	r3, r2
 8001054:	041a      	lsls	r2, r3, #16
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	43db      	mvns	r3, r3
 800105a:	1cb9      	adds	r1, r7, #2
 800105c:	8809      	ldrh	r1, [r1, #0]
 800105e:	400b      	ands	r3, r1
 8001060:	431a      	orrs	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	619a      	str	r2, [r3, #24]
}
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	46bd      	mov	sp, r7
 800106a:	b004      	add	sp, #16
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	0002      	movs	r2, r0
 8001078:	1dbb      	adds	r3, r7, #6
 800107a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800107c:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800107e:	695b      	ldr	r3, [r3, #20]
 8001080:	1dba      	adds	r2, r7, #6
 8001082:	8812      	ldrh	r2, [r2, #0]
 8001084:	4013      	ands	r3, r2
 8001086:	d008      	beq.n	800109a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800108a:	1dba      	adds	r2, r7, #6
 800108c:	8812      	ldrh	r2, [r2, #0]
 800108e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001090:	1dbb      	adds	r3, r7, #6
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	0018      	movs	r0, r3
 8001096:	f7ff fb61 	bl	800075c <HAL_GPIO_EXTI_Callback>
  }
}
 800109a:	46c0      	nop			; (mov r8, r8)
 800109c:	46bd      	mov	sp, r7
 800109e:	b002      	add	sp, #8
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	40010400 	.word	0x40010400

080010a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010a8:	b5b0      	push	{r4, r5, r7, lr}
 80010aa:	b08a      	sub	sp, #40	; 0x28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d102      	bne.n	80010bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	f000 fb6c 	bl	8001794 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010bc:	4bc8      	ldr	r3, [pc, #800]	; (80013e0 <HAL_RCC_OscConfig+0x338>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	220c      	movs	r2, #12
 80010c2:	4013      	ands	r3, r2
 80010c4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010c6:	4bc6      	ldr	r3, [pc, #792]	; (80013e0 <HAL_RCC_OscConfig+0x338>)
 80010c8:	68da      	ldr	r2, [r3, #12]
 80010ca:	2380      	movs	r3, #128	; 0x80
 80010cc:	025b      	lsls	r3, r3, #9
 80010ce:	4013      	ands	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2201      	movs	r2, #1
 80010d8:	4013      	ands	r3, r2
 80010da:	d100      	bne.n	80010de <HAL_RCC_OscConfig+0x36>
 80010dc:	e07d      	b.n	80011da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	2b08      	cmp	r3, #8
 80010e2:	d007      	beq.n	80010f4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	2b0c      	cmp	r3, #12
 80010e8:	d112      	bne.n	8001110 <HAL_RCC_OscConfig+0x68>
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	2380      	movs	r3, #128	; 0x80
 80010ee:	025b      	lsls	r3, r3, #9
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d10d      	bne.n	8001110 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f4:	4bba      	ldr	r3, [pc, #744]	; (80013e0 <HAL_RCC_OscConfig+0x338>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	2380      	movs	r3, #128	; 0x80
 80010fa:	029b      	lsls	r3, r3, #10
 80010fc:	4013      	ands	r3, r2
 80010fe:	d100      	bne.n	8001102 <HAL_RCC_OscConfig+0x5a>
 8001100:	e06a      	b.n	80011d8 <HAL_RCC_OscConfig+0x130>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d166      	bne.n	80011d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	f000 fb42 	bl	8001794 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685a      	ldr	r2, [r3, #4]
 8001114:	2380      	movs	r3, #128	; 0x80
 8001116:	025b      	lsls	r3, r3, #9
 8001118:	429a      	cmp	r2, r3
 800111a:	d107      	bne.n	800112c <HAL_RCC_OscConfig+0x84>
 800111c:	4bb0      	ldr	r3, [pc, #704]	; (80013e0 <HAL_RCC_OscConfig+0x338>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	4baf      	ldr	r3, [pc, #700]	; (80013e0 <HAL_RCC_OscConfig+0x338>)
 8001122:	2180      	movs	r1, #128	; 0x80
 8001124:	0249      	lsls	r1, r1, #9
 8001126:	430a      	orrs	r2, r1
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	e027      	b.n	800117c <HAL_RCC_OscConfig+0xd4>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	23a0      	movs	r3, #160	; 0xa0
 8001132:	02db      	lsls	r3, r3, #11
 8001134:	429a      	cmp	r2, r3
 8001136:	d10e      	bne.n	8001156 <HAL_RCC_OscConfig+0xae>
 8001138:	4ba9      	ldr	r3, [pc, #676]	; (80013e0 <HAL_RCC_OscConfig+0x338>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	4ba8      	ldr	r3, [pc, #672]	; (80013e0 <HAL_RCC_OscConfig+0x338>)
 800113e:	2180      	movs	r1, #128	; 0x80
 8001140:	02c9      	lsls	r1, r1, #11
 8001142:	430a      	orrs	r2, r1
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	4ba6      	ldr	r3, [pc, #664]	; (80013e0 <HAL_RCC_OscConfig+0x338>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	4ba5      	ldr	r3, [pc, #660]	; (80013e0 <HAL_RCC_OscConfig+0x338>)
 800114c:	2180      	movs	r1, #128	; 0x80
 800114e:	0249      	lsls	r1, r1, #9
 8001150:	430a      	orrs	r2, r1
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	e012      	b.n	800117c <HAL_RCC_OscConfig+0xd4>
 8001156:	4ba2      	ldr	r3, [pc, #648]	; (80013e0 <HAL_RCC_OscConfig+0x338>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	4ba1      	ldr	r3, [pc, #644]	; (80013e0 <HAL_RCC_OscConfig+0x338>)
 800115c:	49a1      	ldr	r1, [pc, #644]	; (80013e4 <HAL_RCC_OscConfig+0x33c>)
 800115e:	400a      	ands	r2, r1
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	4b9f      	ldr	r3, [pc, #636]	; (80013e0 <HAL_RCC_OscConfig+0x338>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	2380      	movs	r3, #128	; 0x80
 8001168:	025b      	lsls	r3, r3, #9
 800116a:	4013      	ands	r3, r2
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	4b9b      	ldr	r3, [pc, #620]	; (80013e0 <HAL_RCC_OscConfig+0x338>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	4b9a      	ldr	r3, [pc, #616]	; (80013e0 <HAL_RCC_OscConfig+0x338>)
 8001176:	499c      	ldr	r1, [pc, #624]	; (80013e8 <HAL_RCC_OscConfig+0x340>)
 8001178:	400a      	ands	r2, r1
 800117a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d014      	beq.n	80011ae <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001184:	f7ff fc94 	bl	8000ab0 <HAL_GetTick>
 8001188:	0003      	movs	r3, r0
 800118a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800118c:	e008      	b.n	80011a0 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800118e:	f7ff fc8f 	bl	8000ab0 <HAL_GetTick>
 8001192:	0002      	movs	r2, r0
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	2b64      	cmp	r3, #100	; 0x64
 800119a:	d901      	bls.n	80011a0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800119c:	2303      	movs	r3, #3
 800119e:	e2f9      	b.n	8001794 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011a0:	4b8f      	ldr	r3, [pc, #572]	; (80013e0 <HAL_RCC_OscConfig+0x338>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	2380      	movs	r3, #128	; 0x80
 80011a6:	029b      	lsls	r3, r3, #10
 80011a8:	4013      	ands	r3, r2
 80011aa:	d0f0      	beq.n	800118e <HAL_RCC_OscConfig+0xe6>
 80011ac:	e015      	b.n	80011da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ae:	f7ff fc7f 	bl	8000ab0 <HAL_GetTick>
 80011b2:	0003      	movs	r3, r0
 80011b4:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011b6:	e008      	b.n	80011ca <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011b8:	f7ff fc7a 	bl	8000ab0 <HAL_GetTick>
 80011bc:	0002      	movs	r2, r0
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b64      	cmp	r3, #100	; 0x64
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e2e4      	b.n	8001794 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011ca:	4b85      	ldr	r3, [pc, #532]	; (80013e0 <HAL_RCC_OscConfig+0x338>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	2380      	movs	r3, #128	; 0x80
 80011d0:	029b      	lsls	r3, r3, #10
 80011d2:	4013      	ands	r3, r2
 80011d4:	d1f0      	bne.n	80011b8 <HAL_RCC_OscConfig+0x110>
 80011d6:	e000      	b.n	80011da <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2202      	movs	r2, #2
 80011e0:	4013      	ands	r3, r2
 80011e2:	d100      	bne.n	80011e6 <HAL_RCC_OscConfig+0x13e>
 80011e4:	e099      	b.n	800131a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80011ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ee:	2220      	movs	r2, #32
 80011f0:	4013      	ands	r3, r2
 80011f2:	d009      	beq.n	8001208 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80011f4:	4b7a      	ldr	r3, [pc, #488]	; (80013e0 <HAL_RCC_OscConfig+0x338>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	4b79      	ldr	r3, [pc, #484]	; (80013e0 <HAL_RCC_OscConfig+0x338>)
 80011fa:	2120      	movs	r1, #32
 80011fc:	430a      	orrs	r2, r1
 80011fe:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001202:	2220      	movs	r2, #32
 8001204:	4393      	bics	r3, r2
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	2b04      	cmp	r3, #4
 800120c:	d005      	beq.n	800121a <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	2b0c      	cmp	r3, #12
 8001212:	d13e      	bne.n	8001292 <HAL_RCC_OscConfig+0x1ea>
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d13b      	bne.n	8001292 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800121a:	4b71      	ldr	r3, [pc, #452]	; (80013e0 <HAL_RCC_OscConfig+0x338>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2204      	movs	r2, #4
 8001220:	4013      	ands	r3, r2
 8001222:	d004      	beq.n	800122e <HAL_RCC_OscConfig+0x186>
 8001224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001226:	2b00      	cmp	r3, #0
 8001228:	d101      	bne.n	800122e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e2b2      	b.n	8001794 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800122e:	4b6c      	ldr	r3, [pc, #432]	; (80013e0 <HAL_RCC_OscConfig+0x338>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	4a6e      	ldr	r2, [pc, #440]	; (80013ec <HAL_RCC_OscConfig+0x344>)
 8001234:	4013      	ands	r3, r2
 8001236:	0019      	movs	r1, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	691b      	ldr	r3, [r3, #16]
 800123c:	021a      	lsls	r2, r3, #8
 800123e:	4b68      	ldr	r3, [pc, #416]	; (80013e0 <HAL_RCC_OscConfig+0x338>)
 8001240:	430a      	orrs	r2, r1
 8001242:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001244:	4b66      	ldr	r3, [pc, #408]	; (80013e0 <HAL_RCC_OscConfig+0x338>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2209      	movs	r2, #9
 800124a:	4393      	bics	r3, r2
 800124c:	0019      	movs	r1, r3
 800124e:	4b64      	ldr	r3, [pc, #400]	; (80013e0 <HAL_RCC_OscConfig+0x338>)
 8001250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001252:	430a      	orrs	r2, r1
 8001254:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001256:	f000 fbeb 	bl	8001a30 <HAL_RCC_GetSysClockFreq>
 800125a:	0001      	movs	r1, r0
 800125c:	4b60      	ldr	r3, [pc, #384]	; (80013e0 <HAL_RCC_OscConfig+0x338>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	091b      	lsrs	r3, r3, #4
 8001262:	220f      	movs	r2, #15
 8001264:	4013      	ands	r3, r2
 8001266:	4a62      	ldr	r2, [pc, #392]	; (80013f0 <HAL_RCC_OscConfig+0x348>)
 8001268:	5cd3      	ldrb	r3, [r2, r3]
 800126a:	000a      	movs	r2, r1
 800126c:	40da      	lsrs	r2, r3
 800126e:	4b61      	ldr	r3, [pc, #388]	; (80013f4 <HAL_RCC_OscConfig+0x34c>)
 8001270:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001272:	4b61      	ldr	r3, [pc, #388]	; (80013f8 <HAL_RCC_OscConfig+0x350>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2513      	movs	r5, #19
 8001278:	197c      	adds	r4, r7, r5
 800127a:	0018      	movs	r0, r3
 800127c:	f7ff fbd2 	bl	8000a24 <HAL_InitTick>
 8001280:	0003      	movs	r3, r0
 8001282:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001284:	197b      	adds	r3, r7, r5
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d046      	beq.n	800131a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 800128c:	197b      	adds	r3, r7, r5
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	e280      	b.n	8001794 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001294:	2b00      	cmp	r3, #0
 8001296:	d027      	beq.n	80012e8 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001298:	4b51      	ldr	r3, [pc, #324]	; (80013e0 <HAL_RCC_OscConfig+0x338>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2209      	movs	r2, #9
 800129e:	4393      	bics	r3, r2
 80012a0:	0019      	movs	r1, r3
 80012a2:	4b4f      	ldr	r3, [pc, #316]	; (80013e0 <HAL_RCC_OscConfig+0x338>)
 80012a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012a6:	430a      	orrs	r2, r1
 80012a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012aa:	f7ff fc01 	bl	8000ab0 <HAL_GetTick>
 80012ae:	0003      	movs	r3, r0
 80012b0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012b4:	f7ff fbfc 	bl	8000ab0 <HAL_GetTick>
 80012b8:	0002      	movs	r2, r0
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e266      	b.n	8001794 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012c6:	4b46      	ldr	r3, [pc, #280]	; (80013e0 <HAL_RCC_OscConfig+0x338>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2204      	movs	r2, #4
 80012cc:	4013      	ands	r3, r2
 80012ce:	d0f1      	beq.n	80012b4 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d0:	4b43      	ldr	r3, [pc, #268]	; (80013e0 <HAL_RCC_OscConfig+0x338>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	4a45      	ldr	r2, [pc, #276]	; (80013ec <HAL_RCC_OscConfig+0x344>)
 80012d6:	4013      	ands	r3, r2
 80012d8:	0019      	movs	r1, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	691b      	ldr	r3, [r3, #16]
 80012de:	021a      	lsls	r2, r3, #8
 80012e0:	4b3f      	ldr	r3, [pc, #252]	; (80013e0 <HAL_RCC_OscConfig+0x338>)
 80012e2:	430a      	orrs	r2, r1
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	e018      	b.n	800131a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012e8:	4b3d      	ldr	r3, [pc, #244]	; (80013e0 <HAL_RCC_OscConfig+0x338>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4b3c      	ldr	r3, [pc, #240]	; (80013e0 <HAL_RCC_OscConfig+0x338>)
 80012ee:	2101      	movs	r1, #1
 80012f0:	438a      	bics	r2, r1
 80012f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f4:	f7ff fbdc 	bl	8000ab0 <HAL_GetTick>
 80012f8:	0003      	movs	r3, r0
 80012fa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80012fc:	e008      	b.n	8001310 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012fe:	f7ff fbd7 	bl	8000ab0 <HAL_GetTick>
 8001302:	0002      	movs	r2, r0
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d901      	bls.n	8001310 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e241      	b.n	8001794 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001310:	4b33      	ldr	r3, [pc, #204]	; (80013e0 <HAL_RCC_OscConfig+0x338>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2204      	movs	r2, #4
 8001316:	4013      	ands	r3, r2
 8001318:	d1f1      	bne.n	80012fe <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2210      	movs	r2, #16
 8001320:	4013      	ands	r3, r2
 8001322:	d100      	bne.n	8001326 <HAL_RCC_OscConfig+0x27e>
 8001324:	e0a1      	b.n	800146a <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d140      	bne.n	80013ae <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800132c:	4b2c      	ldr	r3, [pc, #176]	; (80013e0 <HAL_RCC_OscConfig+0x338>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	2380      	movs	r3, #128	; 0x80
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	4013      	ands	r3, r2
 8001336:	d005      	beq.n	8001344 <HAL_RCC_OscConfig+0x29c>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d101      	bne.n	8001344 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e227      	b.n	8001794 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001344:	4b26      	ldr	r3, [pc, #152]	; (80013e0 <HAL_RCC_OscConfig+0x338>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	4a2c      	ldr	r2, [pc, #176]	; (80013fc <HAL_RCC_OscConfig+0x354>)
 800134a:	4013      	ands	r3, r2
 800134c:	0019      	movs	r1, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a1a      	ldr	r2, [r3, #32]
 8001352:	4b23      	ldr	r3, [pc, #140]	; (80013e0 <HAL_RCC_OscConfig+0x338>)
 8001354:	430a      	orrs	r2, r1
 8001356:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001358:	4b21      	ldr	r3, [pc, #132]	; (80013e0 <HAL_RCC_OscConfig+0x338>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	021b      	lsls	r3, r3, #8
 800135e:	0a19      	lsrs	r1, r3, #8
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	69db      	ldr	r3, [r3, #28]
 8001364:	061a      	lsls	r2, r3, #24
 8001366:	4b1e      	ldr	r3, [pc, #120]	; (80013e0 <HAL_RCC_OscConfig+0x338>)
 8001368:	430a      	orrs	r2, r1
 800136a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a1b      	ldr	r3, [r3, #32]
 8001370:	0b5b      	lsrs	r3, r3, #13
 8001372:	3301      	adds	r3, #1
 8001374:	2280      	movs	r2, #128	; 0x80
 8001376:	0212      	lsls	r2, r2, #8
 8001378:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800137a:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <HAL_RCC_OscConfig+0x338>)
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	091b      	lsrs	r3, r3, #4
 8001380:	210f      	movs	r1, #15
 8001382:	400b      	ands	r3, r1
 8001384:	491a      	ldr	r1, [pc, #104]	; (80013f0 <HAL_RCC_OscConfig+0x348>)
 8001386:	5ccb      	ldrb	r3, [r1, r3]
 8001388:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800138a:	4b1a      	ldr	r3, [pc, #104]	; (80013f4 <HAL_RCC_OscConfig+0x34c>)
 800138c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800138e:	4b1a      	ldr	r3, [pc, #104]	; (80013f8 <HAL_RCC_OscConfig+0x350>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2513      	movs	r5, #19
 8001394:	197c      	adds	r4, r7, r5
 8001396:	0018      	movs	r0, r3
 8001398:	f7ff fb44 	bl	8000a24 <HAL_InitTick>
 800139c:	0003      	movs	r3, r0
 800139e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80013a0:	197b      	adds	r3, r7, r5
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d060      	beq.n	800146a <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80013a8:	197b      	adds	r3, r7, r5
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	e1f2      	b.n	8001794 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d03f      	beq.n	8001436 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013b6:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <HAL_RCC_OscConfig+0x338>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <HAL_RCC_OscConfig+0x338>)
 80013bc:	2180      	movs	r1, #128	; 0x80
 80013be:	0049      	lsls	r1, r1, #1
 80013c0:	430a      	orrs	r2, r1
 80013c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c4:	f7ff fb74 	bl	8000ab0 <HAL_GetTick>
 80013c8:	0003      	movs	r3, r0
 80013ca:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80013cc:	e018      	b.n	8001400 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013ce:	f7ff fb6f 	bl	8000ab0 <HAL_GetTick>
 80013d2:	0002      	movs	r2, r0
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d911      	bls.n	8001400 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e1d9      	b.n	8001794 <HAL_RCC_OscConfig+0x6ec>
 80013e0:	40021000 	.word	0x40021000
 80013e4:	fffeffff 	.word	0xfffeffff
 80013e8:	fffbffff 	.word	0xfffbffff
 80013ec:	ffffe0ff 	.word	0xffffe0ff
 80013f0:	08002760 	.word	0x08002760
 80013f4:	20000000 	.word	0x20000000
 80013f8:	20000004 	.word	0x20000004
 80013fc:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001400:	4bc9      	ldr	r3, [pc, #804]	; (8001728 <HAL_RCC_OscConfig+0x680>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	2380      	movs	r3, #128	; 0x80
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4013      	ands	r3, r2
 800140a:	d0e0      	beq.n	80013ce <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800140c:	4bc6      	ldr	r3, [pc, #792]	; (8001728 <HAL_RCC_OscConfig+0x680>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	4ac6      	ldr	r2, [pc, #792]	; (800172c <HAL_RCC_OscConfig+0x684>)
 8001412:	4013      	ands	r3, r2
 8001414:	0019      	movs	r1, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a1a      	ldr	r2, [r3, #32]
 800141a:	4bc3      	ldr	r3, [pc, #780]	; (8001728 <HAL_RCC_OscConfig+0x680>)
 800141c:	430a      	orrs	r2, r1
 800141e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001420:	4bc1      	ldr	r3, [pc, #772]	; (8001728 <HAL_RCC_OscConfig+0x680>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	021b      	lsls	r3, r3, #8
 8001426:	0a19      	lsrs	r1, r3, #8
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	69db      	ldr	r3, [r3, #28]
 800142c:	061a      	lsls	r2, r3, #24
 800142e:	4bbe      	ldr	r3, [pc, #760]	; (8001728 <HAL_RCC_OscConfig+0x680>)
 8001430:	430a      	orrs	r2, r1
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	e019      	b.n	800146a <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001436:	4bbc      	ldr	r3, [pc, #752]	; (8001728 <HAL_RCC_OscConfig+0x680>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	4bbb      	ldr	r3, [pc, #748]	; (8001728 <HAL_RCC_OscConfig+0x680>)
 800143c:	49bc      	ldr	r1, [pc, #752]	; (8001730 <HAL_RCC_OscConfig+0x688>)
 800143e:	400a      	ands	r2, r1
 8001440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001442:	f7ff fb35 	bl	8000ab0 <HAL_GetTick>
 8001446:	0003      	movs	r3, r0
 8001448:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800144c:	f7ff fb30 	bl	8000ab0 <HAL_GetTick>
 8001450:	0002      	movs	r2, r0
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e19a      	b.n	8001794 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800145e:	4bb2      	ldr	r3, [pc, #712]	; (8001728 <HAL_RCC_OscConfig+0x680>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	2380      	movs	r3, #128	; 0x80
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4013      	ands	r3, r2
 8001468:	d1f0      	bne.n	800144c <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2208      	movs	r2, #8
 8001470:	4013      	ands	r3, r2
 8001472:	d036      	beq.n	80014e2 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	695b      	ldr	r3, [r3, #20]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d019      	beq.n	80014b0 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800147c:	4baa      	ldr	r3, [pc, #680]	; (8001728 <HAL_RCC_OscConfig+0x680>)
 800147e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001480:	4ba9      	ldr	r3, [pc, #676]	; (8001728 <HAL_RCC_OscConfig+0x680>)
 8001482:	2101      	movs	r1, #1
 8001484:	430a      	orrs	r2, r1
 8001486:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001488:	f7ff fb12 	bl	8000ab0 <HAL_GetTick>
 800148c:	0003      	movs	r3, r0
 800148e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001490:	e008      	b.n	80014a4 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001492:	f7ff fb0d 	bl	8000ab0 <HAL_GetTick>
 8001496:	0002      	movs	r2, r0
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e177      	b.n	8001794 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014a4:	4ba0      	ldr	r3, [pc, #640]	; (8001728 <HAL_RCC_OscConfig+0x680>)
 80014a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014a8:	2202      	movs	r2, #2
 80014aa:	4013      	ands	r3, r2
 80014ac:	d0f1      	beq.n	8001492 <HAL_RCC_OscConfig+0x3ea>
 80014ae:	e018      	b.n	80014e2 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014b0:	4b9d      	ldr	r3, [pc, #628]	; (8001728 <HAL_RCC_OscConfig+0x680>)
 80014b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014b4:	4b9c      	ldr	r3, [pc, #624]	; (8001728 <HAL_RCC_OscConfig+0x680>)
 80014b6:	2101      	movs	r1, #1
 80014b8:	438a      	bics	r2, r1
 80014ba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014bc:	f7ff faf8 	bl	8000ab0 <HAL_GetTick>
 80014c0:	0003      	movs	r3, r0
 80014c2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014c4:	e008      	b.n	80014d8 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014c6:	f7ff faf3 	bl	8000ab0 <HAL_GetTick>
 80014ca:	0002      	movs	r2, r0
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e15d      	b.n	8001794 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014d8:	4b93      	ldr	r3, [pc, #588]	; (8001728 <HAL_RCC_OscConfig+0x680>)
 80014da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014dc:	2202      	movs	r2, #2
 80014de:	4013      	ands	r3, r2
 80014e0:	d1f1      	bne.n	80014c6 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2204      	movs	r2, #4
 80014e8:	4013      	ands	r3, r2
 80014ea:	d100      	bne.n	80014ee <HAL_RCC_OscConfig+0x446>
 80014ec:	e0ae      	b.n	800164c <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ee:	2023      	movs	r0, #35	; 0x23
 80014f0:	183b      	adds	r3, r7, r0
 80014f2:	2200      	movs	r2, #0
 80014f4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014f6:	4b8c      	ldr	r3, [pc, #560]	; (8001728 <HAL_RCC_OscConfig+0x680>)
 80014f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014fa:	2380      	movs	r3, #128	; 0x80
 80014fc:	055b      	lsls	r3, r3, #21
 80014fe:	4013      	ands	r3, r2
 8001500:	d109      	bne.n	8001516 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001502:	4b89      	ldr	r3, [pc, #548]	; (8001728 <HAL_RCC_OscConfig+0x680>)
 8001504:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001506:	4b88      	ldr	r3, [pc, #544]	; (8001728 <HAL_RCC_OscConfig+0x680>)
 8001508:	2180      	movs	r1, #128	; 0x80
 800150a:	0549      	lsls	r1, r1, #21
 800150c:	430a      	orrs	r2, r1
 800150e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001510:	183b      	adds	r3, r7, r0
 8001512:	2201      	movs	r2, #1
 8001514:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001516:	4b87      	ldr	r3, [pc, #540]	; (8001734 <HAL_RCC_OscConfig+0x68c>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	2380      	movs	r3, #128	; 0x80
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	4013      	ands	r3, r2
 8001520:	d11a      	bne.n	8001558 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001522:	4b84      	ldr	r3, [pc, #528]	; (8001734 <HAL_RCC_OscConfig+0x68c>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	4b83      	ldr	r3, [pc, #524]	; (8001734 <HAL_RCC_OscConfig+0x68c>)
 8001528:	2180      	movs	r1, #128	; 0x80
 800152a:	0049      	lsls	r1, r1, #1
 800152c:	430a      	orrs	r2, r1
 800152e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001530:	f7ff fabe 	bl	8000ab0 <HAL_GetTick>
 8001534:	0003      	movs	r3, r0
 8001536:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800153a:	f7ff fab9 	bl	8000ab0 <HAL_GetTick>
 800153e:	0002      	movs	r2, r0
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b64      	cmp	r3, #100	; 0x64
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e123      	b.n	8001794 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800154c:	4b79      	ldr	r3, [pc, #484]	; (8001734 <HAL_RCC_OscConfig+0x68c>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	2380      	movs	r3, #128	; 0x80
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	4013      	ands	r3, r2
 8001556:	d0f0      	beq.n	800153a <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689a      	ldr	r2, [r3, #8]
 800155c:	2380      	movs	r3, #128	; 0x80
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	429a      	cmp	r2, r3
 8001562:	d107      	bne.n	8001574 <HAL_RCC_OscConfig+0x4cc>
 8001564:	4b70      	ldr	r3, [pc, #448]	; (8001728 <HAL_RCC_OscConfig+0x680>)
 8001566:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001568:	4b6f      	ldr	r3, [pc, #444]	; (8001728 <HAL_RCC_OscConfig+0x680>)
 800156a:	2180      	movs	r1, #128	; 0x80
 800156c:	0049      	lsls	r1, r1, #1
 800156e:	430a      	orrs	r2, r1
 8001570:	651a      	str	r2, [r3, #80]	; 0x50
 8001572:	e031      	b.n	80015d8 <HAL_RCC_OscConfig+0x530>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d10c      	bne.n	8001596 <HAL_RCC_OscConfig+0x4ee>
 800157c:	4b6a      	ldr	r3, [pc, #424]	; (8001728 <HAL_RCC_OscConfig+0x680>)
 800157e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001580:	4b69      	ldr	r3, [pc, #420]	; (8001728 <HAL_RCC_OscConfig+0x680>)
 8001582:	496b      	ldr	r1, [pc, #428]	; (8001730 <HAL_RCC_OscConfig+0x688>)
 8001584:	400a      	ands	r2, r1
 8001586:	651a      	str	r2, [r3, #80]	; 0x50
 8001588:	4b67      	ldr	r3, [pc, #412]	; (8001728 <HAL_RCC_OscConfig+0x680>)
 800158a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800158c:	4b66      	ldr	r3, [pc, #408]	; (8001728 <HAL_RCC_OscConfig+0x680>)
 800158e:	496a      	ldr	r1, [pc, #424]	; (8001738 <HAL_RCC_OscConfig+0x690>)
 8001590:	400a      	ands	r2, r1
 8001592:	651a      	str	r2, [r3, #80]	; 0x50
 8001594:	e020      	b.n	80015d8 <HAL_RCC_OscConfig+0x530>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689a      	ldr	r2, [r3, #8]
 800159a:	23a0      	movs	r3, #160	; 0xa0
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	429a      	cmp	r2, r3
 80015a0:	d10e      	bne.n	80015c0 <HAL_RCC_OscConfig+0x518>
 80015a2:	4b61      	ldr	r3, [pc, #388]	; (8001728 <HAL_RCC_OscConfig+0x680>)
 80015a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015a6:	4b60      	ldr	r3, [pc, #384]	; (8001728 <HAL_RCC_OscConfig+0x680>)
 80015a8:	2180      	movs	r1, #128	; 0x80
 80015aa:	00c9      	lsls	r1, r1, #3
 80015ac:	430a      	orrs	r2, r1
 80015ae:	651a      	str	r2, [r3, #80]	; 0x50
 80015b0:	4b5d      	ldr	r3, [pc, #372]	; (8001728 <HAL_RCC_OscConfig+0x680>)
 80015b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015b4:	4b5c      	ldr	r3, [pc, #368]	; (8001728 <HAL_RCC_OscConfig+0x680>)
 80015b6:	2180      	movs	r1, #128	; 0x80
 80015b8:	0049      	lsls	r1, r1, #1
 80015ba:	430a      	orrs	r2, r1
 80015bc:	651a      	str	r2, [r3, #80]	; 0x50
 80015be:	e00b      	b.n	80015d8 <HAL_RCC_OscConfig+0x530>
 80015c0:	4b59      	ldr	r3, [pc, #356]	; (8001728 <HAL_RCC_OscConfig+0x680>)
 80015c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015c4:	4b58      	ldr	r3, [pc, #352]	; (8001728 <HAL_RCC_OscConfig+0x680>)
 80015c6:	495a      	ldr	r1, [pc, #360]	; (8001730 <HAL_RCC_OscConfig+0x688>)
 80015c8:	400a      	ands	r2, r1
 80015ca:	651a      	str	r2, [r3, #80]	; 0x50
 80015cc:	4b56      	ldr	r3, [pc, #344]	; (8001728 <HAL_RCC_OscConfig+0x680>)
 80015ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015d0:	4b55      	ldr	r3, [pc, #340]	; (8001728 <HAL_RCC_OscConfig+0x680>)
 80015d2:	4959      	ldr	r1, [pc, #356]	; (8001738 <HAL_RCC_OscConfig+0x690>)
 80015d4:	400a      	ands	r2, r1
 80015d6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d015      	beq.n	800160c <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e0:	f7ff fa66 	bl	8000ab0 <HAL_GetTick>
 80015e4:	0003      	movs	r3, r0
 80015e6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80015e8:	e009      	b.n	80015fe <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ea:	f7ff fa61 	bl	8000ab0 <HAL_GetTick>
 80015ee:	0002      	movs	r2, r0
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	4a51      	ldr	r2, [pc, #324]	; (800173c <HAL_RCC_OscConfig+0x694>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e0ca      	b.n	8001794 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80015fe:	4b4a      	ldr	r3, [pc, #296]	; (8001728 <HAL_RCC_OscConfig+0x680>)
 8001600:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001602:	2380      	movs	r3, #128	; 0x80
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4013      	ands	r3, r2
 8001608:	d0ef      	beq.n	80015ea <HAL_RCC_OscConfig+0x542>
 800160a:	e014      	b.n	8001636 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800160c:	f7ff fa50 	bl	8000ab0 <HAL_GetTick>
 8001610:	0003      	movs	r3, r0
 8001612:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001614:	e009      	b.n	800162a <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001616:	f7ff fa4b 	bl	8000ab0 <HAL_GetTick>
 800161a:	0002      	movs	r2, r0
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	4a46      	ldr	r2, [pc, #280]	; (800173c <HAL_RCC_OscConfig+0x694>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e0b4      	b.n	8001794 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800162a:	4b3f      	ldr	r3, [pc, #252]	; (8001728 <HAL_RCC_OscConfig+0x680>)
 800162c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800162e:	2380      	movs	r3, #128	; 0x80
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4013      	ands	r3, r2
 8001634:	d1ef      	bne.n	8001616 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001636:	2323      	movs	r3, #35	; 0x23
 8001638:	18fb      	adds	r3, r7, r3
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d105      	bne.n	800164c <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001640:	4b39      	ldr	r3, [pc, #228]	; (8001728 <HAL_RCC_OscConfig+0x680>)
 8001642:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001644:	4b38      	ldr	r3, [pc, #224]	; (8001728 <HAL_RCC_OscConfig+0x680>)
 8001646:	493e      	ldr	r1, [pc, #248]	; (8001740 <HAL_RCC_OscConfig+0x698>)
 8001648:	400a      	ands	r2, r1
 800164a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001650:	2b00      	cmp	r3, #0
 8001652:	d100      	bne.n	8001656 <HAL_RCC_OscConfig+0x5ae>
 8001654:	e09d      	b.n	8001792 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	2b0c      	cmp	r3, #12
 800165a:	d100      	bne.n	800165e <HAL_RCC_OscConfig+0x5b6>
 800165c:	e076      	b.n	800174c <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001662:	2b02      	cmp	r3, #2
 8001664:	d145      	bne.n	80016f2 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001666:	4b30      	ldr	r3, [pc, #192]	; (8001728 <HAL_RCC_OscConfig+0x680>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	4b2f      	ldr	r3, [pc, #188]	; (8001728 <HAL_RCC_OscConfig+0x680>)
 800166c:	4935      	ldr	r1, [pc, #212]	; (8001744 <HAL_RCC_OscConfig+0x69c>)
 800166e:	400a      	ands	r2, r1
 8001670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001672:	f7ff fa1d 	bl	8000ab0 <HAL_GetTick>
 8001676:	0003      	movs	r3, r0
 8001678:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800167c:	f7ff fa18 	bl	8000ab0 <HAL_GetTick>
 8001680:	0002      	movs	r2, r0
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e082      	b.n	8001794 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800168e:	4b26      	ldr	r3, [pc, #152]	; (8001728 <HAL_RCC_OscConfig+0x680>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	2380      	movs	r3, #128	; 0x80
 8001694:	049b      	lsls	r3, r3, #18
 8001696:	4013      	ands	r3, r2
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800169a:	4b23      	ldr	r3, [pc, #140]	; (8001728 <HAL_RCC_OscConfig+0x680>)
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	4a2a      	ldr	r2, [pc, #168]	; (8001748 <HAL_RCC_OscConfig+0x6a0>)
 80016a0:	4013      	ands	r3, r2
 80016a2:	0019      	movs	r1, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ac:	431a      	orrs	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	431a      	orrs	r2, r3
 80016b4:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <HAL_RCC_OscConfig+0x680>)
 80016b6:	430a      	orrs	r2, r1
 80016b8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016ba:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <HAL_RCC_OscConfig+0x680>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	4b1a      	ldr	r3, [pc, #104]	; (8001728 <HAL_RCC_OscConfig+0x680>)
 80016c0:	2180      	movs	r1, #128	; 0x80
 80016c2:	0449      	lsls	r1, r1, #17
 80016c4:	430a      	orrs	r2, r1
 80016c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c8:	f7ff f9f2 	bl	8000ab0 <HAL_GetTick>
 80016cc:	0003      	movs	r3, r0
 80016ce:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d2:	f7ff f9ed 	bl	8000ab0 <HAL_GetTick>
 80016d6:	0002      	movs	r2, r0
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e057      	b.n	8001794 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80016e4:	4b10      	ldr	r3, [pc, #64]	; (8001728 <HAL_RCC_OscConfig+0x680>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	2380      	movs	r3, #128	; 0x80
 80016ea:	049b      	lsls	r3, r3, #18
 80016ec:	4013      	ands	r3, r2
 80016ee:	d0f0      	beq.n	80016d2 <HAL_RCC_OscConfig+0x62a>
 80016f0:	e04f      	b.n	8001792 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f2:	4b0d      	ldr	r3, [pc, #52]	; (8001728 <HAL_RCC_OscConfig+0x680>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <HAL_RCC_OscConfig+0x680>)
 80016f8:	4912      	ldr	r1, [pc, #72]	; (8001744 <HAL_RCC_OscConfig+0x69c>)
 80016fa:	400a      	ands	r2, r1
 80016fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fe:	f7ff f9d7 	bl	8000ab0 <HAL_GetTick>
 8001702:	0003      	movs	r3, r0
 8001704:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001708:	f7ff f9d2 	bl	8000ab0 <HAL_GetTick>
 800170c:	0002      	movs	r2, r0
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e03c      	b.n	8001794 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800171a:	4b03      	ldr	r3, [pc, #12]	; (8001728 <HAL_RCC_OscConfig+0x680>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	2380      	movs	r3, #128	; 0x80
 8001720:	049b      	lsls	r3, r3, #18
 8001722:	4013      	ands	r3, r2
 8001724:	d1f0      	bne.n	8001708 <HAL_RCC_OscConfig+0x660>
 8001726:	e034      	b.n	8001792 <HAL_RCC_OscConfig+0x6ea>
 8001728:	40021000 	.word	0x40021000
 800172c:	ffff1fff 	.word	0xffff1fff
 8001730:	fffffeff 	.word	0xfffffeff
 8001734:	40007000 	.word	0x40007000
 8001738:	fffffbff 	.word	0xfffffbff
 800173c:	00001388 	.word	0x00001388
 8001740:	efffffff 	.word	0xefffffff
 8001744:	feffffff 	.word	0xfeffffff
 8001748:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001750:	2b01      	cmp	r3, #1
 8001752:	d101      	bne.n	8001758 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e01d      	b.n	8001794 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001758:	4b10      	ldr	r3, [pc, #64]	; (800179c <HAL_RCC_OscConfig+0x6f4>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	2380      	movs	r3, #128	; 0x80
 8001762:	025b      	lsls	r3, r3, #9
 8001764:	401a      	ands	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176a:	429a      	cmp	r2, r3
 800176c:	d10f      	bne.n	800178e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	23f0      	movs	r3, #240	; 0xf0
 8001772:	039b      	lsls	r3, r3, #14
 8001774:	401a      	ands	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800177a:	429a      	cmp	r2, r3
 800177c:	d107      	bne.n	800178e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	23c0      	movs	r3, #192	; 0xc0
 8001782:	041b      	lsls	r3, r3, #16
 8001784:	401a      	ands	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800178a:	429a      	cmp	r2, r3
 800178c:	d001      	beq.n	8001792 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e000      	b.n	8001794 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001792:	2300      	movs	r3, #0
}
 8001794:	0018      	movs	r0, r3
 8001796:	46bd      	mov	sp, r7
 8001798:	b00a      	add	sp, #40	; 0x28
 800179a:	bdb0      	pop	{r4, r5, r7, pc}
 800179c:	40021000 	.word	0x40021000

080017a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017a0:	b5b0      	push	{r4, r5, r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d101      	bne.n	80017b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e128      	b.n	8001a06 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017b4:	4b96      	ldr	r3, [pc, #600]	; (8001a10 <HAL_RCC_ClockConfig+0x270>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2201      	movs	r2, #1
 80017ba:	4013      	ands	r3, r2
 80017bc:	683a      	ldr	r2, [r7, #0]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d91e      	bls.n	8001800 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c2:	4b93      	ldr	r3, [pc, #588]	; (8001a10 <HAL_RCC_ClockConfig+0x270>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2201      	movs	r2, #1
 80017c8:	4393      	bics	r3, r2
 80017ca:	0019      	movs	r1, r3
 80017cc:	4b90      	ldr	r3, [pc, #576]	; (8001a10 <HAL_RCC_ClockConfig+0x270>)
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017d4:	f7ff f96c 	bl	8000ab0 <HAL_GetTick>
 80017d8:	0003      	movs	r3, r0
 80017da:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017dc:	e009      	b.n	80017f2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017de:	f7ff f967 	bl	8000ab0 <HAL_GetTick>
 80017e2:	0002      	movs	r2, r0
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	4a8a      	ldr	r2, [pc, #552]	; (8001a14 <HAL_RCC_ClockConfig+0x274>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e109      	b.n	8001a06 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f2:	4b87      	ldr	r3, [pc, #540]	; (8001a10 <HAL_RCC_ClockConfig+0x270>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2201      	movs	r2, #1
 80017f8:	4013      	ands	r3, r2
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d1ee      	bne.n	80017de <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2202      	movs	r2, #2
 8001806:	4013      	ands	r3, r2
 8001808:	d009      	beq.n	800181e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800180a:	4b83      	ldr	r3, [pc, #524]	; (8001a18 <HAL_RCC_ClockConfig+0x278>)
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	22f0      	movs	r2, #240	; 0xf0
 8001810:	4393      	bics	r3, r2
 8001812:	0019      	movs	r1, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	4b7f      	ldr	r3, [pc, #508]	; (8001a18 <HAL_RCC_ClockConfig+0x278>)
 800181a:	430a      	orrs	r2, r1
 800181c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2201      	movs	r2, #1
 8001824:	4013      	ands	r3, r2
 8001826:	d100      	bne.n	800182a <HAL_RCC_ClockConfig+0x8a>
 8001828:	e089      	b.n	800193e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b02      	cmp	r3, #2
 8001830:	d107      	bne.n	8001842 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001832:	4b79      	ldr	r3, [pc, #484]	; (8001a18 <HAL_RCC_ClockConfig+0x278>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	2380      	movs	r3, #128	; 0x80
 8001838:	029b      	lsls	r3, r3, #10
 800183a:	4013      	ands	r3, r2
 800183c:	d120      	bne.n	8001880 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e0e1      	b.n	8001a06 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b03      	cmp	r3, #3
 8001848:	d107      	bne.n	800185a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800184a:	4b73      	ldr	r3, [pc, #460]	; (8001a18 <HAL_RCC_ClockConfig+0x278>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	2380      	movs	r3, #128	; 0x80
 8001850:	049b      	lsls	r3, r3, #18
 8001852:	4013      	ands	r3, r2
 8001854:	d114      	bne.n	8001880 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e0d5      	b.n	8001a06 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d106      	bne.n	8001870 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001862:	4b6d      	ldr	r3, [pc, #436]	; (8001a18 <HAL_RCC_ClockConfig+0x278>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2204      	movs	r2, #4
 8001868:	4013      	ands	r3, r2
 800186a:	d109      	bne.n	8001880 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e0ca      	b.n	8001a06 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001870:	4b69      	ldr	r3, [pc, #420]	; (8001a18 <HAL_RCC_ClockConfig+0x278>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	2380      	movs	r3, #128	; 0x80
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4013      	ands	r3, r2
 800187a:	d101      	bne.n	8001880 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e0c2      	b.n	8001a06 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001880:	4b65      	ldr	r3, [pc, #404]	; (8001a18 <HAL_RCC_ClockConfig+0x278>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	2203      	movs	r2, #3
 8001886:	4393      	bics	r3, r2
 8001888:	0019      	movs	r1, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685a      	ldr	r2, [r3, #4]
 800188e:	4b62      	ldr	r3, [pc, #392]	; (8001a18 <HAL_RCC_ClockConfig+0x278>)
 8001890:	430a      	orrs	r2, r1
 8001892:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001894:	f7ff f90c 	bl	8000ab0 <HAL_GetTick>
 8001898:	0003      	movs	r3, r0
 800189a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d111      	bne.n	80018c8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018a4:	e009      	b.n	80018ba <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018a6:	f7ff f903 	bl	8000ab0 <HAL_GetTick>
 80018aa:	0002      	movs	r2, r0
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	4a58      	ldr	r2, [pc, #352]	; (8001a14 <HAL_RCC_ClockConfig+0x274>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e0a5      	b.n	8001a06 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018ba:	4b57      	ldr	r3, [pc, #348]	; (8001a18 <HAL_RCC_ClockConfig+0x278>)
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	220c      	movs	r2, #12
 80018c0:	4013      	ands	r3, r2
 80018c2:	2b08      	cmp	r3, #8
 80018c4:	d1ef      	bne.n	80018a6 <HAL_RCC_ClockConfig+0x106>
 80018c6:	e03a      	b.n	800193e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	2b03      	cmp	r3, #3
 80018ce:	d111      	bne.n	80018f4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018d0:	e009      	b.n	80018e6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d2:	f7ff f8ed 	bl	8000ab0 <HAL_GetTick>
 80018d6:	0002      	movs	r2, r0
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	4a4d      	ldr	r2, [pc, #308]	; (8001a14 <HAL_RCC_ClockConfig+0x274>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e08f      	b.n	8001a06 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018e6:	4b4c      	ldr	r3, [pc, #304]	; (8001a18 <HAL_RCC_ClockConfig+0x278>)
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	220c      	movs	r2, #12
 80018ec:	4013      	ands	r3, r2
 80018ee:	2b0c      	cmp	r3, #12
 80018f0:	d1ef      	bne.n	80018d2 <HAL_RCC_ClockConfig+0x132>
 80018f2:	e024      	b.n	800193e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d11b      	bne.n	8001934 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80018fc:	e009      	b.n	8001912 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018fe:	f7ff f8d7 	bl	8000ab0 <HAL_GetTick>
 8001902:	0002      	movs	r2, r0
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	4a42      	ldr	r2, [pc, #264]	; (8001a14 <HAL_RCC_ClockConfig+0x274>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e079      	b.n	8001a06 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001912:	4b41      	ldr	r3, [pc, #260]	; (8001a18 <HAL_RCC_ClockConfig+0x278>)
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	220c      	movs	r2, #12
 8001918:	4013      	ands	r3, r2
 800191a:	2b04      	cmp	r3, #4
 800191c:	d1ef      	bne.n	80018fe <HAL_RCC_ClockConfig+0x15e>
 800191e:	e00e      	b.n	800193e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001920:	f7ff f8c6 	bl	8000ab0 <HAL_GetTick>
 8001924:	0002      	movs	r2, r0
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	4a3a      	ldr	r2, [pc, #232]	; (8001a14 <HAL_RCC_ClockConfig+0x274>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e068      	b.n	8001a06 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001934:	4b38      	ldr	r3, [pc, #224]	; (8001a18 <HAL_RCC_ClockConfig+0x278>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	220c      	movs	r2, #12
 800193a:	4013      	ands	r3, r2
 800193c:	d1f0      	bne.n	8001920 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800193e:	4b34      	ldr	r3, [pc, #208]	; (8001a10 <HAL_RCC_ClockConfig+0x270>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2201      	movs	r2, #1
 8001944:	4013      	ands	r3, r2
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	429a      	cmp	r2, r3
 800194a:	d21e      	bcs.n	800198a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194c:	4b30      	ldr	r3, [pc, #192]	; (8001a10 <HAL_RCC_ClockConfig+0x270>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2201      	movs	r2, #1
 8001952:	4393      	bics	r3, r2
 8001954:	0019      	movs	r1, r3
 8001956:	4b2e      	ldr	r3, [pc, #184]	; (8001a10 <HAL_RCC_ClockConfig+0x270>)
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	430a      	orrs	r2, r1
 800195c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800195e:	f7ff f8a7 	bl	8000ab0 <HAL_GetTick>
 8001962:	0003      	movs	r3, r0
 8001964:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001966:	e009      	b.n	800197c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001968:	f7ff f8a2 	bl	8000ab0 <HAL_GetTick>
 800196c:	0002      	movs	r2, r0
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	4a28      	ldr	r2, [pc, #160]	; (8001a14 <HAL_RCC_ClockConfig+0x274>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d901      	bls.n	800197c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e044      	b.n	8001a06 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800197c:	4b24      	ldr	r3, [pc, #144]	; (8001a10 <HAL_RCC_ClockConfig+0x270>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2201      	movs	r2, #1
 8001982:	4013      	ands	r3, r2
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	429a      	cmp	r2, r3
 8001988:	d1ee      	bne.n	8001968 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2204      	movs	r2, #4
 8001990:	4013      	ands	r3, r2
 8001992:	d009      	beq.n	80019a8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001994:	4b20      	ldr	r3, [pc, #128]	; (8001a18 <HAL_RCC_ClockConfig+0x278>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	4a20      	ldr	r2, [pc, #128]	; (8001a1c <HAL_RCC_ClockConfig+0x27c>)
 800199a:	4013      	ands	r3, r2
 800199c:	0019      	movs	r1, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	68da      	ldr	r2, [r3, #12]
 80019a2:	4b1d      	ldr	r3, [pc, #116]	; (8001a18 <HAL_RCC_ClockConfig+0x278>)
 80019a4:	430a      	orrs	r2, r1
 80019a6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2208      	movs	r2, #8
 80019ae:	4013      	ands	r3, r2
 80019b0:	d00a      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019b2:	4b19      	ldr	r3, [pc, #100]	; (8001a18 <HAL_RCC_ClockConfig+0x278>)
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	4a1a      	ldr	r2, [pc, #104]	; (8001a20 <HAL_RCC_ClockConfig+0x280>)
 80019b8:	4013      	ands	r3, r2
 80019ba:	0019      	movs	r1, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	00da      	lsls	r2, r3, #3
 80019c2:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <HAL_RCC_ClockConfig+0x278>)
 80019c4:	430a      	orrs	r2, r1
 80019c6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019c8:	f000 f832 	bl	8001a30 <HAL_RCC_GetSysClockFreq>
 80019cc:	0001      	movs	r1, r0
 80019ce:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <HAL_RCC_ClockConfig+0x278>)
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	091b      	lsrs	r3, r3, #4
 80019d4:	220f      	movs	r2, #15
 80019d6:	4013      	ands	r3, r2
 80019d8:	4a12      	ldr	r2, [pc, #72]	; (8001a24 <HAL_RCC_ClockConfig+0x284>)
 80019da:	5cd3      	ldrb	r3, [r2, r3]
 80019dc:	000a      	movs	r2, r1
 80019de:	40da      	lsrs	r2, r3
 80019e0:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <HAL_RCC_ClockConfig+0x288>)
 80019e2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80019e4:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <HAL_RCC_ClockConfig+0x28c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	250b      	movs	r5, #11
 80019ea:	197c      	adds	r4, r7, r5
 80019ec:	0018      	movs	r0, r3
 80019ee:	f7ff f819 	bl	8000a24 <HAL_InitTick>
 80019f2:	0003      	movs	r3, r0
 80019f4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80019f6:	197b      	adds	r3, r7, r5
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d002      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80019fe:	197b      	adds	r3, r7, r5
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	e000      	b.n	8001a06 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	0018      	movs	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	b004      	add	sp, #16
 8001a0c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a0e:	46c0      	nop			; (mov r8, r8)
 8001a10:	40022000 	.word	0x40022000
 8001a14:	00001388 	.word	0x00001388
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	fffff8ff 	.word	0xfffff8ff
 8001a20:	ffffc7ff 	.word	0xffffc7ff
 8001a24:	08002760 	.word	0x08002760
 8001a28:	20000000 	.word	0x20000000
 8001a2c:	20000004 	.word	0x20000004

08001a30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a30:	b5b0      	push	{r4, r5, r7, lr}
 8001a32:	b08e      	sub	sp, #56	; 0x38
 8001a34:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001a36:	4b4c      	ldr	r3, [pc, #304]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a3e:	230c      	movs	r3, #12
 8001a40:	4013      	ands	r3, r2
 8001a42:	2b0c      	cmp	r3, #12
 8001a44:	d014      	beq.n	8001a70 <HAL_RCC_GetSysClockFreq+0x40>
 8001a46:	d900      	bls.n	8001a4a <HAL_RCC_GetSysClockFreq+0x1a>
 8001a48:	e07b      	b.n	8001b42 <HAL_RCC_GetSysClockFreq+0x112>
 8001a4a:	2b04      	cmp	r3, #4
 8001a4c:	d002      	beq.n	8001a54 <HAL_RCC_GetSysClockFreq+0x24>
 8001a4e:	2b08      	cmp	r3, #8
 8001a50:	d00b      	beq.n	8001a6a <HAL_RCC_GetSysClockFreq+0x3a>
 8001a52:	e076      	b.n	8001b42 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001a54:	4b44      	ldr	r3, [pc, #272]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2210      	movs	r2, #16
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	d002      	beq.n	8001a64 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001a5e:	4b43      	ldr	r3, [pc, #268]	; (8001b6c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001a60:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001a62:	e07c      	b.n	8001b5e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001a64:	4b42      	ldr	r3, [pc, #264]	; (8001b70 <HAL_RCC_GetSysClockFreq+0x140>)
 8001a66:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a68:	e079      	b.n	8001b5e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a6a:	4b42      	ldr	r3, [pc, #264]	; (8001b74 <HAL_RCC_GetSysClockFreq+0x144>)
 8001a6c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a6e:	e076      	b.n	8001b5e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a72:	0c9a      	lsrs	r2, r3, #18
 8001a74:	230f      	movs	r3, #15
 8001a76:	401a      	ands	r2, r3
 8001a78:	4b3f      	ldr	r3, [pc, #252]	; (8001b78 <HAL_RCC_GetSysClockFreq+0x148>)
 8001a7a:	5c9b      	ldrb	r3, [r3, r2]
 8001a7c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a80:	0d9a      	lsrs	r2, r3, #22
 8001a82:	2303      	movs	r3, #3
 8001a84:	4013      	ands	r3, r2
 8001a86:	3301      	adds	r3, #1
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a8a:	4b37      	ldr	r3, [pc, #220]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a8c:	68da      	ldr	r2, [r3, #12]
 8001a8e:	2380      	movs	r3, #128	; 0x80
 8001a90:	025b      	lsls	r3, r3, #9
 8001a92:	4013      	ands	r3, r2
 8001a94:	d01a      	beq.n	8001acc <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a98:	61bb      	str	r3, [r7, #24]
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61fb      	str	r3, [r7, #28]
 8001a9e:	4a35      	ldr	r2, [pc, #212]	; (8001b74 <HAL_RCC_GetSysClockFreq+0x144>)
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	69b8      	ldr	r0, [r7, #24]
 8001aa4:	69f9      	ldr	r1, [r7, #28]
 8001aa6:	f7fe fbdb 	bl	8000260 <__aeabi_lmul>
 8001aaa:	0002      	movs	r2, r0
 8001aac:	000b      	movs	r3, r1
 8001aae:	0010      	movs	r0, r2
 8001ab0:	0019      	movs	r1, r3
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	617b      	str	r3, [r7, #20]
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	f7fe fbaf 	bl	8000220 <__aeabi_uldivmod>
 8001ac2:	0002      	movs	r2, r0
 8001ac4:	000b      	movs	r3, r1
 8001ac6:	0013      	movs	r3, r2
 8001ac8:	637b      	str	r3, [r7, #52]	; 0x34
 8001aca:	e037      	b.n	8001b3c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001acc:	4b26      	ldr	r3, [pc, #152]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x138>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2210      	movs	r2, #16
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	d01a      	beq.n	8001b0c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	4a23      	ldr	r2, [pc, #140]	; (8001b6c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	68b8      	ldr	r0, [r7, #8]
 8001ae4:	68f9      	ldr	r1, [r7, #12]
 8001ae6:	f7fe fbbb 	bl	8000260 <__aeabi_lmul>
 8001aea:	0002      	movs	r2, r0
 8001aec:	000b      	movs	r3, r1
 8001aee:	0010      	movs	r0, r2
 8001af0:	0019      	movs	r1, r3
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	603b      	str	r3, [r7, #0]
 8001af6:	2300      	movs	r3, #0
 8001af8:	607b      	str	r3, [r7, #4]
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f7fe fb8f 	bl	8000220 <__aeabi_uldivmod>
 8001b02:	0002      	movs	r2, r0
 8001b04:	000b      	movs	r3, r1
 8001b06:	0013      	movs	r3, r2
 8001b08:	637b      	str	r3, [r7, #52]	; 0x34
 8001b0a:	e017      	b.n	8001b3c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b0e:	0018      	movs	r0, r3
 8001b10:	2300      	movs	r3, #0
 8001b12:	0019      	movs	r1, r3
 8001b14:	4a16      	ldr	r2, [pc, #88]	; (8001b70 <HAL_RCC_GetSysClockFreq+0x140>)
 8001b16:	2300      	movs	r3, #0
 8001b18:	f7fe fba2 	bl	8000260 <__aeabi_lmul>
 8001b1c:	0002      	movs	r2, r0
 8001b1e:	000b      	movs	r3, r1
 8001b20:	0010      	movs	r0, r2
 8001b22:	0019      	movs	r1, r3
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b26:	001c      	movs	r4, r3
 8001b28:	2300      	movs	r3, #0
 8001b2a:	001d      	movs	r5, r3
 8001b2c:	0022      	movs	r2, r4
 8001b2e:	002b      	movs	r3, r5
 8001b30:	f7fe fb76 	bl	8000220 <__aeabi_uldivmod>
 8001b34:	0002      	movs	r2, r0
 8001b36:	000b      	movs	r3, r1
 8001b38:	0013      	movs	r3, r2
 8001b3a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b3e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b40:	e00d      	b.n	8001b5e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001b42:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	0b5b      	lsrs	r3, r3, #13
 8001b48:	2207      	movs	r2, #7
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001b4e:	6a3b      	ldr	r3, [r7, #32]
 8001b50:	3301      	adds	r3, #1
 8001b52:	2280      	movs	r2, #128	; 0x80
 8001b54:	0212      	lsls	r2, r2, #8
 8001b56:	409a      	lsls	r2, r3
 8001b58:	0013      	movs	r3, r2
 8001b5a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b5c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001b60:	0018      	movs	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	b00e      	add	sp, #56	; 0x38
 8001b66:	bdb0      	pop	{r4, r5, r7, pc}
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	003d0900 	.word	0x003d0900
 8001b70:	00f42400 	.word	0x00f42400
 8001b74:	007a1200 	.word	0x007a1200
 8001b78:	08002778 	.word	0x08002778

08001b7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b80:	4b02      	ldr	r3, [pc, #8]	; (8001b8c <HAL_RCC_GetHCLKFreq+0x10>)
 8001b82:	681b      	ldr	r3, [r3, #0]
}
 8001b84:	0018      	movs	r0, r3
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	46c0      	nop			; (mov r8, r8)
 8001b8c:	20000000 	.word	0x20000000

08001b90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b94:	f7ff fff2 	bl	8001b7c <HAL_RCC_GetHCLKFreq>
 8001b98:	0001      	movs	r1, r0
 8001b9a:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	0a1b      	lsrs	r3, r3, #8
 8001ba0:	2207      	movs	r2, #7
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	4a04      	ldr	r2, [pc, #16]	; (8001bb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ba6:	5cd3      	ldrb	r3, [r2, r3]
 8001ba8:	40d9      	lsrs	r1, r3
 8001baa:	000b      	movs	r3, r1
}
 8001bac:	0018      	movs	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	46c0      	nop			; (mov r8, r8)
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	08002770 	.word	0x08002770

08001bbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bc0:	f7ff ffdc 	bl	8001b7c <HAL_RCC_GetHCLKFreq>
 8001bc4:	0001      	movs	r1, r0
 8001bc6:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	0adb      	lsrs	r3, r3, #11
 8001bcc:	2207      	movs	r2, #7
 8001bce:	4013      	ands	r3, r2
 8001bd0:	4a04      	ldr	r2, [pc, #16]	; (8001be4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001bd2:	5cd3      	ldrb	r3, [r2, r3]
 8001bd4:	40d9      	lsrs	r1, r3
 8001bd6:	000b      	movs	r3, r1
}
 8001bd8:	0018      	movs	r0, r3
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	46c0      	nop			; (mov r8, r8)
 8001be0:	40021000 	.word	0x40021000
 8001be4:	08002770 	.word	0x08002770

08001be8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001bf0:	2017      	movs	r0, #23
 8001bf2:	183b      	adds	r3, r7, r0
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2220      	movs	r2, #32
 8001bfe:	4013      	ands	r3, r2
 8001c00:	d100      	bne.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001c02:	e0c2      	b.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c04:	4b81      	ldr	r3, [pc, #516]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001c06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c08:	2380      	movs	r3, #128	; 0x80
 8001c0a:	055b      	lsls	r3, r3, #21
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	d109      	bne.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c10:	4b7e      	ldr	r3, [pc, #504]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001c12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c14:	4b7d      	ldr	r3, [pc, #500]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001c16:	2180      	movs	r1, #128	; 0x80
 8001c18:	0549      	lsls	r1, r1, #21
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001c1e:	183b      	adds	r3, r7, r0
 8001c20:	2201      	movs	r2, #1
 8001c22:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c24:	4b7a      	ldr	r3, [pc, #488]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	2380      	movs	r3, #128	; 0x80
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d11a      	bne.n	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c30:	4b77      	ldr	r3, [pc, #476]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4b76      	ldr	r3, [pc, #472]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001c36:	2180      	movs	r1, #128	; 0x80
 8001c38:	0049      	lsls	r1, r1, #1
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c3e:	f7fe ff37 	bl	8000ab0 <HAL_GetTick>
 8001c42:	0003      	movs	r3, r0
 8001c44:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c46:	e008      	b.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c48:	f7fe ff32 	bl	8000ab0 <HAL_GetTick>
 8001c4c:	0002      	movs	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b64      	cmp	r3, #100	; 0x64
 8001c54:	d901      	bls.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e0d4      	b.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c5a:	4b6d      	ldr	r3, [pc, #436]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	2380      	movs	r3, #128	; 0x80
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	4013      	ands	r3, r2
 8001c64:	d0f0      	beq.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001c66:	4b69      	ldr	r3, [pc, #420]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	23c0      	movs	r3, #192	; 0xc0
 8001c6c:	039b      	lsls	r3, r3, #14
 8001c6e:	4013      	ands	r3, r2
 8001c70:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685a      	ldr	r2, [r3, #4]
 8001c76:	23c0      	movs	r3, #192	; 0xc0
 8001c78:	039b      	lsls	r3, r3, #14
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d013      	beq.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685a      	ldr	r2, [r3, #4]
 8001c86:	23c0      	movs	r3, #192	; 0xc0
 8001c88:	029b      	lsls	r3, r3, #10
 8001c8a:	401a      	ands	r2, r3
 8001c8c:	23c0      	movs	r3, #192	; 0xc0
 8001c8e:	029b      	lsls	r3, r3, #10
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d10a      	bne.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001c94:	4b5d      	ldr	r3, [pc, #372]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	2380      	movs	r3, #128	; 0x80
 8001c9a:	029b      	lsls	r3, r3, #10
 8001c9c:	401a      	ands	r2, r3
 8001c9e:	2380      	movs	r3, #128	; 0x80
 8001ca0:	029b      	lsls	r3, r3, #10
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d101      	bne.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e0ac      	b.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001caa:	4b58      	ldr	r3, [pc, #352]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001cac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cae:	23c0      	movs	r3, #192	; 0xc0
 8001cb0:	029b      	lsls	r3, r3, #10
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d03b      	beq.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	23c0      	movs	r3, #192	; 0xc0
 8001cc2:	029b      	lsls	r3, r3, #10
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d033      	beq.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2220      	movs	r2, #32
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	d02e      	beq.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001cd6:	4b4d      	ldr	r3, [pc, #308]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cda:	4a4e      	ldr	r2, [pc, #312]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001cdc:	4013      	ands	r3, r2
 8001cde:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ce0:	4b4a      	ldr	r3, [pc, #296]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ce2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ce4:	4b49      	ldr	r3, [pc, #292]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ce6:	2180      	movs	r1, #128	; 0x80
 8001ce8:	0309      	lsls	r1, r1, #12
 8001cea:	430a      	orrs	r2, r1
 8001cec:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cee:	4b47      	ldr	r3, [pc, #284]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001cf0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cf2:	4b46      	ldr	r3, [pc, #280]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001cf4:	4948      	ldr	r1, [pc, #288]	; (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001cf6:	400a      	ands	r2, r1
 8001cf8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001cfa:	4b44      	ldr	r3, [pc, #272]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	2380      	movs	r3, #128	; 0x80
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	4013      	ands	r3, r2
 8001d08:	d014      	beq.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0a:	f7fe fed1 	bl	8000ab0 <HAL_GetTick>
 8001d0e:	0003      	movs	r3, r0
 8001d10:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d12:	e009      	b.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d14:	f7fe fecc 	bl	8000ab0 <HAL_GetTick>
 8001d18:	0002      	movs	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	4a3f      	ldr	r2, [pc, #252]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e06d      	b.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d28:	4b38      	ldr	r3, [pc, #224]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d2c:	2380      	movs	r3, #128	; 0x80
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4013      	ands	r3, r2
 8001d32:	d0ef      	beq.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	23c0      	movs	r3, #192	; 0xc0
 8001d3a:	029b      	lsls	r3, r3, #10
 8001d3c:	401a      	ands	r2, r3
 8001d3e:	23c0      	movs	r3, #192	; 0xc0
 8001d40:	029b      	lsls	r3, r3, #10
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d10c      	bne.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8001d46:	4b31      	ldr	r3, [pc, #196]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a35      	ldr	r2, [pc, #212]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	0019      	movs	r1, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	23c0      	movs	r3, #192	; 0xc0
 8001d56:	039b      	lsls	r3, r3, #14
 8001d58:	401a      	ands	r2, r3
 8001d5a:	4b2c      	ldr	r3, [pc, #176]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	4b2a      	ldr	r3, [pc, #168]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d62:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	23c0      	movs	r3, #192	; 0xc0
 8001d6a:	029b      	lsls	r3, r3, #10
 8001d6c:	401a      	ands	r2, r3
 8001d6e:	4b27      	ldr	r3, [pc, #156]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d70:	430a      	orrs	r2, r1
 8001d72:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d74:	2317      	movs	r3, #23
 8001d76:	18fb      	adds	r3, r7, r3
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d105      	bne.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d7e:	4b23      	ldr	r3, [pc, #140]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d82:	4b22      	ldr	r3, [pc, #136]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d84:	4927      	ldr	r1, [pc, #156]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001d86:	400a      	ands	r2, r1
 8001d88:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2202      	movs	r2, #2
 8001d90:	4013      	ands	r3, r2
 8001d92:	d009      	beq.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d94:	4b1d      	ldr	r3, [pc, #116]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d98:	220c      	movs	r2, #12
 8001d9a:	4393      	bics	r3, r2
 8001d9c:	0019      	movs	r1, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689a      	ldr	r2, [r3, #8]
 8001da2:	4b1a      	ldr	r3, [pc, #104]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001da4:	430a      	orrs	r2, r1
 8001da6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2204      	movs	r2, #4
 8001dae:	4013      	ands	r3, r2
 8001db0:	d009      	beq.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001db2:	4b16      	ldr	r3, [pc, #88]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db6:	4a1c      	ldr	r2, [pc, #112]	; (8001e28 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001db8:	4013      	ands	r3, r2
 8001dba:	0019      	movs	r1, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68da      	ldr	r2, [r3, #12]
 8001dc0:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2208      	movs	r2, #8
 8001dcc:	4013      	ands	r3, r2
 8001dce:	d009      	beq.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001dd0:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd4:	4a15      	ldr	r2, [pc, #84]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	0019      	movs	r1, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	691a      	ldr	r2, [r3, #16]
 8001dde:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001de0:	430a      	orrs	r2, r1
 8001de2:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2280      	movs	r2, #128	; 0x80
 8001dea:	4013      	ands	r3, r2
 8001dec:	d009      	beq.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001dee:	4b07      	ldr	r3, [pc, #28]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df2:	4a0f      	ldr	r2, [pc, #60]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001df4:	4013      	ands	r3, r2
 8001df6:	0019      	movs	r1, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	695a      	ldr	r2, [r3, #20]
 8001dfc:	4b03      	ldr	r3, [pc, #12]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	0018      	movs	r0, r3
 8001e06:	46bd      	mov	sp, r7
 8001e08:	b006      	add	sp, #24
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	40007000 	.word	0x40007000
 8001e14:	fffcffff 	.word	0xfffcffff
 8001e18:	fff7ffff 	.word	0xfff7ffff
 8001e1c:	00001388 	.word	0x00001388
 8001e20:	ffcfffff 	.word	0xffcfffff
 8001e24:	efffffff 	.word	0xefffffff
 8001e28:	fffff3ff 	.word	0xfffff3ff
 8001e2c:	ffffcfff 	.word	0xffffcfff
 8001e30:	fff3ffff 	.word	0xfff3ffff

08001e34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e044      	b.n	8001ed0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d107      	bne.n	8001e5e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2274      	movs	r2, #116	; 0x74
 8001e52:	2100      	movs	r1, #0
 8001e54:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	0018      	movs	r0, r3
 8001e5a:	f7fe fd09 	bl	8000870 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2224      	movs	r2, #36	; 0x24
 8001e62:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2101      	movs	r1, #1
 8001e70:	438a      	bics	r2, r1
 8001e72:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	0018      	movs	r0, r3
 8001e78:	f000 f830 	bl	8001edc <UART_SetConfig>
 8001e7c:	0003      	movs	r3, r0
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d101      	bne.n	8001e86 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e024      	b.n	8001ed0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	0018      	movs	r0, r3
 8001e92:	f000 fa6d 	bl	8002370 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	490d      	ldr	r1, [pc, #52]	; (8001ed8 <HAL_UART_Init+0xa4>)
 8001ea2:	400a      	ands	r2, r1
 8001ea4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	212a      	movs	r1, #42	; 0x2a
 8001eb2:	438a      	bics	r2, r1
 8001eb4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	0018      	movs	r0, r3
 8001eca:	f000 fb05 	bl	80024d8 <UART_CheckIdleState>
 8001ece:	0003      	movs	r3, r0
}
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	b002      	add	sp, #8
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	ffffb7ff 	.word	0xffffb7ff

08001edc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001edc:	b5b0      	push	{r4, r5, r7, lr}
 8001ede:	b08e      	sub	sp, #56	; 0x38
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001ee4:	231a      	movs	r3, #26
 8001ee6:	2218      	movs	r2, #24
 8001ee8:	189b      	adds	r3, r3, r2
 8001eea:	19db      	adds	r3, r3, r7
 8001eec:	2200      	movs	r2, #0
 8001eee:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	431a      	orrs	r2, r3
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	431a      	orrs	r2, r3
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	69db      	ldr	r3, [r3, #28]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4ab4      	ldr	r2, [pc, #720]	; (80021e0 <UART_SetConfig+0x304>)
 8001f10:	4013      	ands	r3, r2
 8001f12:	0019      	movs	r1, r3
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	4aaf      	ldr	r2, [pc, #700]	; (80021e4 <UART_SetConfig+0x308>)
 8001f26:	4013      	ands	r3, r2
 8001f28:	0019      	movs	r1, r3
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	68da      	ldr	r2, [r3, #12]
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4aa9      	ldr	r2, [pc, #676]	; (80021e8 <UART_SetConfig+0x30c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d004      	beq.n	8001f50 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	4aa5      	ldr	r2, [pc, #660]	; (80021ec <UART_SetConfig+0x310>)
 8001f58:	4013      	ands	r3, r2
 8001f5a:	0019      	movs	r1, r3
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f62:	430a      	orrs	r2, r1
 8001f64:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4aa1      	ldr	r2, [pc, #644]	; (80021f0 <UART_SetConfig+0x314>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d131      	bne.n	8001fd4 <UART_SetConfig+0xf8>
 8001f70:	4ba0      	ldr	r3, [pc, #640]	; (80021f4 <UART_SetConfig+0x318>)
 8001f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f74:	220c      	movs	r2, #12
 8001f76:	4013      	ands	r3, r2
 8001f78:	2b0c      	cmp	r3, #12
 8001f7a:	d01d      	beq.n	8001fb8 <UART_SetConfig+0xdc>
 8001f7c:	d823      	bhi.n	8001fc6 <UART_SetConfig+0xea>
 8001f7e:	2b08      	cmp	r3, #8
 8001f80:	d00c      	beq.n	8001f9c <UART_SetConfig+0xc0>
 8001f82:	d820      	bhi.n	8001fc6 <UART_SetConfig+0xea>
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d002      	beq.n	8001f8e <UART_SetConfig+0xb2>
 8001f88:	2b04      	cmp	r3, #4
 8001f8a:	d00e      	beq.n	8001faa <UART_SetConfig+0xce>
 8001f8c:	e01b      	b.n	8001fc6 <UART_SetConfig+0xea>
 8001f8e:	231b      	movs	r3, #27
 8001f90:	2218      	movs	r2, #24
 8001f92:	189b      	adds	r3, r3, r2
 8001f94:	19db      	adds	r3, r3, r7
 8001f96:	2200      	movs	r2, #0
 8001f98:	701a      	strb	r2, [r3, #0]
 8001f9a:	e065      	b.n	8002068 <UART_SetConfig+0x18c>
 8001f9c:	231b      	movs	r3, #27
 8001f9e:	2218      	movs	r2, #24
 8001fa0:	189b      	adds	r3, r3, r2
 8001fa2:	19db      	adds	r3, r3, r7
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	701a      	strb	r2, [r3, #0]
 8001fa8:	e05e      	b.n	8002068 <UART_SetConfig+0x18c>
 8001faa:	231b      	movs	r3, #27
 8001fac:	2218      	movs	r2, #24
 8001fae:	189b      	adds	r3, r3, r2
 8001fb0:	19db      	adds	r3, r3, r7
 8001fb2:	2204      	movs	r2, #4
 8001fb4:	701a      	strb	r2, [r3, #0]
 8001fb6:	e057      	b.n	8002068 <UART_SetConfig+0x18c>
 8001fb8:	231b      	movs	r3, #27
 8001fba:	2218      	movs	r2, #24
 8001fbc:	189b      	adds	r3, r3, r2
 8001fbe:	19db      	adds	r3, r3, r7
 8001fc0:	2208      	movs	r2, #8
 8001fc2:	701a      	strb	r2, [r3, #0]
 8001fc4:	e050      	b.n	8002068 <UART_SetConfig+0x18c>
 8001fc6:	231b      	movs	r3, #27
 8001fc8:	2218      	movs	r2, #24
 8001fca:	189b      	adds	r3, r3, r2
 8001fcc:	19db      	adds	r3, r3, r7
 8001fce:	2210      	movs	r2, #16
 8001fd0:	701a      	strb	r2, [r3, #0]
 8001fd2:	e049      	b.n	8002068 <UART_SetConfig+0x18c>
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a83      	ldr	r2, [pc, #524]	; (80021e8 <UART_SetConfig+0x30c>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d13e      	bne.n	800205c <UART_SetConfig+0x180>
 8001fde:	4b85      	ldr	r3, [pc, #532]	; (80021f4 <UART_SetConfig+0x318>)
 8001fe0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fe2:	23c0      	movs	r3, #192	; 0xc0
 8001fe4:	011b      	lsls	r3, r3, #4
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	22c0      	movs	r2, #192	; 0xc0
 8001fea:	0112      	lsls	r2, r2, #4
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d027      	beq.n	8002040 <UART_SetConfig+0x164>
 8001ff0:	22c0      	movs	r2, #192	; 0xc0
 8001ff2:	0112      	lsls	r2, r2, #4
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d82a      	bhi.n	800204e <UART_SetConfig+0x172>
 8001ff8:	2280      	movs	r2, #128	; 0x80
 8001ffa:	0112      	lsls	r2, r2, #4
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d011      	beq.n	8002024 <UART_SetConfig+0x148>
 8002000:	2280      	movs	r2, #128	; 0x80
 8002002:	0112      	lsls	r2, r2, #4
 8002004:	4293      	cmp	r3, r2
 8002006:	d822      	bhi.n	800204e <UART_SetConfig+0x172>
 8002008:	2b00      	cmp	r3, #0
 800200a:	d004      	beq.n	8002016 <UART_SetConfig+0x13a>
 800200c:	2280      	movs	r2, #128	; 0x80
 800200e:	00d2      	lsls	r2, r2, #3
 8002010:	4293      	cmp	r3, r2
 8002012:	d00e      	beq.n	8002032 <UART_SetConfig+0x156>
 8002014:	e01b      	b.n	800204e <UART_SetConfig+0x172>
 8002016:	231b      	movs	r3, #27
 8002018:	2218      	movs	r2, #24
 800201a:	189b      	adds	r3, r3, r2
 800201c:	19db      	adds	r3, r3, r7
 800201e:	2200      	movs	r2, #0
 8002020:	701a      	strb	r2, [r3, #0]
 8002022:	e021      	b.n	8002068 <UART_SetConfig+0x18c>
 8002024:	231b      	movs	r3, #27
 8002026:	2218      	movs	r2, #24
 8002028:	189b      	adds	r3, r3, r2
 800202a:	19db      	adds	r3, r3, r7
 800202c:	2202      	movs	r2, #2
 800202e:	701a      	strb	r2, [r3, #0]
 8002030:	e01a      	b.n	8002068 <UART_SetConfig+0x18c>
 8002032:	231b      	movs	r3, #27
 8002034:	2218      	movs	r2, #24
 8002036:	189b      	adds	r3, r3, r2
 8002038:	19db      	adds	r3, r3, r7
 800203a:	2204      	movs	r2, #4
 800203c:	701a      	strb	r2, [r3, #0]
 800203e:	e013      	b.n	8002068 <UART_SetConfig+0x18c>
 8002040:	231b      	movs	r3, #27
 8002042:	2218      	movs	r2, #24
 8002044:	189b      	adds	r3, r3, r2
 8002046:	19db      	adds	r3, r3, r7
 8002048:	2208      	movs	r2, #8
 800204a:	701a      	strb	r2, [r3, #0]
 800204c:	e00c      	b.n	8002068 <UART_SetConfig+0x18c>
 800204e:	231b      	movs	r3, #27
 8002050:	2218      	movs	r2, #24
 8002052:	189b      	adds	r3, r3, r2
 8002054:	19db      	adds	r3, r3, r7
 8002056:	2210      	movs	r2, #16
 8002058:	701a      	strb	r2, [r3, #0]
 800205a:	e005      	b.n	8002068 <UART_SetConfig+0x18c>
 800205c:	231b      	movs	r3, #27
 800205e:	2218      	movs	r2, #24
 8002060:	189b      	adds	r3, r3, r2
 8002062:	19db      	adds	r3, r3, r7
 8002064:	2210      	movs	r2, #16
 8002066:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a5e      	ldr	r2, [pc, #376]	; (80021e8 <UART_SetConfig+0x30c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d000      	beq.n	8002074 <UART_SetConfig+0x198>
 8002072:	e084      	b.n	800217e <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002074:	231b      	movs	r3, #27
 8002076:	2218      	movs	r2, #24
 8002078:	189b      	adds	r3, r3, r2
 800207a:	19db      	adds	r3, r3, r7
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b08      	cmp	r3, #8
 8002080:	d01d      	beq.n	80020be <UART_SetConfig+0x1e2>
 8002082:	dc20      	bgt.n	80020c6 <UART_SetConfig+0x1ea>
 8002084:	2b04      	cmp	r3, #4
 8002086:	d015      	beq.n	80020b4 <UART_SetConfig+0x1d8>
 8002088:	dc1d      	bgt.n	80020c6 <UART_SetConfig+0x1ea>
 800208a:	2b00      	cmp	r3, #0
 800208c:	d002      	beq.n	8002094 <UART_SetConfig+0x1b8>
 800208e:	2b02      	cmp	r3, #2
 8002090:	d005      	beq.n	800209e <UART_SetConfig+0x1c2>
 8002092:	e018      	b.n	80020c6 <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002094:	f7ff fd7c 	bl	8001b90 <HAL_RCC_GetPCLK1Freq>
 8002098:	0003      	movs	r3, r0
 800209a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800209c:	e01c      	b.n	80020d8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800209e:	4b55      	ldr	r3, [pc, #340]	; (80021f4 <UART_SetConfig+0x318>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2210      	movs	r2, #16
 80020a4:	4013      	ands	r3, r2
 80020a6:	d002      	beq.n	80020ae <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80020a8:	4b53      	ldr	r3, [pc, #332]	; (80021f8 <UART_SetConfig+0x31c>)
 80020aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80020ac:	e014      	b.n	80020d8 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 80020ae:	4b53      	ldr	r3, [pc, #332]	; (80021fc <UART_SetConfig+0x320>)
 80020b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80020b2:	e011      	b.n	80020d8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80020b4:	f7ff fcbc 	bl	8001a30 <HAL_RCC_GetSysClockFreq>
 80020b8:	0003      	movs	r3, r0
 80020ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80020bc:	e00c      	b.n	80020d8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80020be:	2380      	movs	r3, #128	; 0x80
 80020c0:	021b      	lsls	r3, r3, #8
 80020c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80020c4:	e008      	b.n	80020d8 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80020ca:	231a      	movs	r3, #26
 80020cc:	2218      	movs	r2, #24
 80020ce:	189b      	adds	r3, r3, r2
 80020d0:	19db      	adds	r3, r3, r7
 80020d2:	2201      	movs	r2, #1
 80020d4:	701a      	strb	r2, [r3, #0]
        break;
 80020d6:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80020d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d100      	bne.n	80020e0 <UART_SetConfig+0x204>
 80020de:	e130      	b.n	8002342 <UART_SetConfig+0x466>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	0013      	movs	r3, r2
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	189b      	adds	r3, r3, r2
 80020ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d305      	bcc.n	80020fc <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80020f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d906      	bls.n	800210a <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 80020fc:	231a      	movs	r3, #26
 80020fe:	2218      	movs	r2, #24
 8002100:	189b      	adds	r3, r3, r2
 8002102:	19db      	adds	r3, r3, r7
 8002104:	2201      	movs	r2, #1
 8002106:	701a      	strb	r2, [r3, #0]
 8002108:	e11b      	b.n	8002342 <UART_SetConfig+0x466>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800210a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800210c:	613b      	str	r3, [r7, #16]
 800210e:	2300      	movs	r3, #0
 8002110:	617b      	str	r3, [r7, #20]
 8002112:	6939      	ldr	r1, [r7, #16]
 8002114:	697a      	ldr	r2, [r7, #20]
 8002116:	000b      	movs	r3, r1
 8002118:	0e1b      	lsrs	r3, r3, #24
 800211a:	0010      	movs	r0, r2
 800211c:	0205      	lsls	r5, r0, #8
 800211e:	431d      	orrs	r5, r3
 8002120:	000b      	movs	r3, r1
 8002122:	021c      	lsls	r4, r3, #8
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	085b      	lsrs	r3, r3, #1
 800212a:	60bb      	str	r3, [r7, #8]
 800212c:	2300      	movs	r3, #0
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	68b8      	ldr	r0, [r7, #8]
 8002132:	68f9      	ldr	r1, [r7, #12]
 8002134:	1900      	adds	r0, r0, r4
 8002136:	4169      	adcs	r1, r5
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	603b      	str	r3, [r7, #0]
 800213e:	2300      	movs	r3, #0
 8002140:	607b      	str	r3, [r7, #4]
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f7fe f86b 	bl	8000220 <__aeabi_uldivmod>
 800214a:	0002      	movs	r2, r0
 800214c:	000b      	movs	r3, r1
 800214e:	0013      	movs	r3, r2
 8002150:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002152:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002154:	23c0      	movs	r3, #192	; 0xc0
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	429a      	cmp	r2, r3
 800215a:	d309      	bcc.n	8002170 <UART_SetConfig+0x294>
 800215c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800215e:	2380      	movs	r3, #128	; 0x80
 8002160:	035b      	lsls	r3, r3, #13
 8002162:	429a      	cmp	r2, r3
 8002164:	d204      	bcs.n	8002170 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	e0e8      	b.n	8002342 <UART_SetConfig+0x466>
        }
        else
        {
          ret = HAL_ERROR;
 8002170:	231a      	movs	r3, #26
 8002172:	2218      	movs	r2, #24
 8002174:	189b      	adds	r3, r3, r2
 8002176:	19db      	adds	r3, r3, r7
 8002178:	2201      	movs	r2, #1
 800217a:	701a      	strb	r2, [r3, #0]
 800217c:	e0e1      	b.n	8002342 <UART_SetConfig+0x466>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	69da      	ldr	r2, [r3, #28]
 8002182:	2380      	movs	r3, #128	; 0x80
 8002184:	021b      	lsls	r3, r3, #8
 8002186:	429a      	cmp	r2, r3
 8002188:	d000      	beq.n	800218c <UART_SetConfig+0x2b0>
 800218a:	e083      	b.n	8002294 <UART_SetConfig+0x3b8>
  {
    switch (clocksource)
 800218c:	231b      	movs	r3, #27
 800218e:	2218      	movs	r2, #24
 8002190:	189b      	adds	r3, r3, r2
 8002192:	19db      	adds	r3, r3, r7
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b08      	cmp	r3, #8
 8002198:	d834      	bhi.n	8002204 <UART_SetConfig+0x328>
 800219a:	009a      	lsls	r2, r3, #2
 800219c:	4b18      	ldr	r3, [pc, #96]	; (8002200 <UART_SetConfig+0x324>)
 800219e:	18d3      	adds	r3, r2, r3
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80021a4:	f7ff fcf4 	bl	8001b90 <HAL_RCC_GetPCLK1Freq>
 80021a8:	0003      	movs	r3, r0
 80021aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80021ac:	e033      	b.n	8002216 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80021ae:	f7ff fd05 	bl	8001bbc <HAL_RCC_GetPCLK2Freq>
 80021b2:	0003      	movs	r3, r0
 80021b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80021b6:	e02e      	b.n	8002216 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80021b8:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <UART_SetConfig+0x318>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2210      	movs	r2, #16
 80021be:	4013      	ands	r3, r2
 80021c0:	d002      	beq.n	80021c8 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80021c2:	4b0d      	ldr	r3, [pc, #52]	; (80021f8 <UART_SetConfig+0x31c>)
 80021c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80021c6:	e026      	b.n	8002216 <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 80021c8:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <UART_SetConfig+0x320>)
 80021ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80021cc:	e023      	b.n	8002216 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80021ce:	f7ff fc2f 	bl	8001a30 <HAL_RCC_GetSysClockFreq>
 80021d2:	0003      	movs	r3, r0
 80021d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80021d6:	e01e      	b.n	8002216 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80021d8:	2380      	movs	r3, #128	; 0x80
 80021da:	021b      	lsls	r3, r3, #8
 80021dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80021de:	e01a      	b.n	8002216 <UART_SetConfig+0x33a>
 80021e0:	efff69f3 	.word	0xefff69f3
 80021e4:	ffffcfff 	.word	0xffffcfff
 80021e8:	40004800 	.word	0x40004800
 80021ec:	fffff4ff 	.word	0xfffff4ff
 80021f0:	40004400 	.word	0x40004400
 80021f4:	40021000 	.word	0x40021000
 80021f8:	003d0900 	.word	0x003d0900
 80021fc:	00f42400 	.word	0x00f42400
 8002200:	08002784 	.word	0x08002784
      default:
        pclk = 0U;
 8002204:	2300      	movs	r3, #0
 8002206:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002208:	231a      	movs	r3, #26
 800220a:	2218      	movs	r2, #24
 800220c:	189b      	adds	r3, r3, r2
 800220e:	19db      	adds	r3, r3, r7
 8002210:	2201      	movs	r2, #1
 8002212:	701a      	strb	r2, [r3, #0]
        break;
 8002214:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002218:	2b00      	cmp	r3, #0
 800221a:	d100      	bne.n	800221e <UART_SetConfig+0x342>
 800221c:	e091      	b.n	8002342 <UART_SetConfig+0x466>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800221e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002220:	005a      	lsls	r2, r3, #1
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	085b      	lsrs	r3, r3, #1
 8002228:	18d2      	adds	r2, r2, r3
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	0019      	movs	r1, r3
 8002230:	0010      	movs	r0, r2
 8002232:	f7fd ff69 	bl	8000108 <__udivsi3>
 8002236:	0003      	movs	r3, r0
 8002238:	b29b      	uxth	r3, r3
 800223a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800223c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800223e:	2b0f      	cmp	r3, #15
 8002240:	d921      	bls.n	8002286 <UART_SetConfig+0x3aa>
 8002242:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002244:	2380      	movs	r3, #128	; 0x80
 8002246:	025b      	lsls	r3, r3, #9
 8002248:	429a      	cmp	r2, r3
 800224a:	d21c      	bcs.n	8002286 <UART_SetConfig+0x3aa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800224c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800224e:	b29a      	uxth	r2, r3
 8002250:	200e      	movs	r0, #14
 8002252:	2418      	movs	r4, #24
 8002254:	1903      	adds	r3, r0, r4
 8002256:	19db      	adds	r3, r3, r7
 8002258:	210f      	movs	r1, #15
 800225a:	438a      	bics	r2, r1
 800225c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800225e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002260:	085b      	lsrs	r3, r3, #1
 8002262:	b29b      	uxth	r3, r3
 8002264:	2207      	movs	r2, #7
 8002266:	4013      	ands	r3, r2
 8002268:	b299      	uxth	r1, r3
 800226a:	1903      	adds	r3, r0, r4
 800226c:	19db      	adds	r3, r3, r7
 800226e:	1902      	adds	r2, r0, r4
 8002270:	19d2      	adds	r2, r2, r7
 8002272:	8812      	ldrh	r2, [r2, #0]
 8002274:	430a      	orrs	r2, r1
 8002276:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	1902      	adds	r2, r0, r4
 800227e:	19d2      	adds	r2, r2, r7
 8002280:	8812      	ldrh	r2, [r2, #0]
 8002282:	60da      	str	r2, [r3, #12]
 8002284:	e05d      	b.n	8002342 <UART_SetConfig+0x466>
      }
      else
      {
        ret = HAL_ERROR;
 8002286:	231a      	movs	r3, #26
 8002288:	2218      	movs	r2, #24
 800228a:	189b      	adds	r3, r3, r2
 800228c:	19db      	adds	r3, r3, r7
 800228e:	2201      	movs	r2, #1
 8002290:	701a      	strb	r2, [r3, #0]
 8002292:	e056      	b.n	8002342 <UART_SetConfig+0x466>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002294:	231b      	movs	r3, #27
 8002296:	2218      	movs	r2, #24
 8002298:	189b      	adds	r3, r3, r2
 800229a:	19db      	adds	r3, r3, r7
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2b08      	cmp	r3, #8
 80022a0:	d822      	bhi.n	80022e8 <UART_SetConfig+0x40c>
 80022a2:	009a      	lsls	r2, r3, #2
 80022a4:	4b2e      	ldr	r3, [pc, #184]	; (8002360 <UART_SetConfig+0x484>)
 80022a6:	18d3      	adds	r3, r2, r3
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80022ac:	f7ff fc70 	bl	8001b90 <HAL_RCC_GetPCLK1Freq>
 80022b0:	0003      	movs	r3, r0
 80022b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80022b4:	e021      	b.n	80022fa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80022b6:	f7ff fc81 	bl	8001bbc <HAL_RCC_GetPCLK2Freq>
 80022ba:	0003      	movs	r3, r0
 80022bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80022be:	e01c      	b.n	80022fa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022c0:	4b28      	ldr	r3, [pc, #160]	; (8002364 <UART_SetConfig+0x488>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2210      	movs	r2, #16
 80022c6:	4013      	ands	r3, r2
 80022c8:	d002      	beq.n	80022d0 <UART_SetConfig+0x3f4>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80022ca:	4b27      	ldr	r3, [pc, #156]	; (8002368 <UART_SetConfig+0x48c>)
 80022cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80022ce:	e014      	b.n	80022fa <UART_SetConfig+0x41e>
          pclk = (uint32_t) HSI_VALUE;
 80022d0:	4b26      	ldr	r3, [pc, #152]	; (800236c <UART_SetConfig+0x490>)
 80022d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80022d4:	e011      	b.n	80022fa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80022d6:	f7ff fbab 	bl	8001a30 <HAL_RCC_GetSysClockFreq>
 80022da:	0003      	movs	r3, r0
 80022dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80022de:	e00c      	b.n	80022fa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80022e0:	2380      	movs	r3, #128	; 0x80
 80022e2:	021b      	lsls	r3, r3, #8
 80022e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80022e6:	e008      	b.n	80022fa <UART_SetConfig+0x41e>
      default:
        pclk = 0U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80022ec:	231a      	movs	r3, #26
 80022ee:	2218      	movs	r2, #24
 80022f0:	189b      	adds	r3, r3, r2
 80022f2:	19db      	adds	r3, r3, r7
 80022f4:	2201      	movs	r2, #1
 80022f6:	701a      	strb	r2, [r3, #0]
        break;
 80022f8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80022fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d020      	beq.n	8002342 <UART_SetConfig+0x466>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	085a      	lsrs	r2, r3, #1
 8002306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002308:	18d2      	adds	r2, r2, r3
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	0019      	movs	r1, r3
 8002310:	0010      	movs	r0, r2
 8002312:	f7fd fef9 	bl	8000108 <__udivsi3>
 8002316:	0003      	movs	r3, r0
 8002318:	b29b      	uxth	r3, r3
 800231a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800231c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231e:	2b0f      	cmp	r3, #15
 8002320:	d909      	bls.n	8002336 <UART_SetConfig+0x45a>
 8002322:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002324:	2380      	movs	r3, #128	; 0x80
 8002326:	025b      	lsls	r3, r3, #9
 8002328:	429a      	cmp	r2, r3
 800232a:	d204      	bcs.n	8002336 <UART_SetConfig+0x45a>
      {
        huart->Instance->BRR = usartdiv;
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002332:	60da      	str	r2, [r3, #12]
 8002334:	e005      	b.n	8002342 <UART_SetConfig+0x466>
      }
      else
      {
        ret = HAL_ERROR;
 8002336:	231a      	movs	r3, #26
 8002338:	2218      	movs	r2, #24
 800233a:	189b      	adds	r3, r3, r2
 800233c:	19db      	adds	r3, r3, r7
 800233e:	2201      	movs	r2, #1
 8002340:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	2200      	movs	r2, #0
 8002346:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	2200      	movs	r2, #0
 800234c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800234e:	231a      	movs	r3, #26
 8002350:	2218      	movs	r2, #24
 8002352:	189b      	adds	r3, r3, r2
 8002354:	19db      	adds	r3, r3, r7
 8002356:	781b      	ldrb	r3, [r3, #0]
}
 8002358:	0018      	movs	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	b00e      	add	sp, #56	; 0x38
 800235e:	bdb0      	pop	{r4, r5, r7, pc}
 8002360:	080027a8 	.word	0x080027a8
 8002364:	40021000 	.word	0x40021000
 8002368:	003d0900 	.word	0x003d0900
 800236c:	00f42400 	.word	0x00f42400

08002370 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237c:	2201      	movs	r2, #1
 800237e:	4013      	ands	r3, r2
 8002380:	d00b      	beq.n	800239a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	4a4a      	ldr	r2, [pc, #296]	; (80024b4 <UART_AdvFeatureConfig+0x144>)
 800238a:	4013      	ands	r3, r2
 800238c:	0019      	movs	r1, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	430a      	orrs	r2, r1
 8002398:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239e:	2202      	movs	r2, #2
 80023a0:	4013      	ands	r3, r2
 80023a2:	d00b      	beq.n	80023bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	4a43      	ldr	r2, [pc, #268]	; (80024b8 <UART_AdvFeatureConfig+0x148>)
 80023ac:	4013      	ands	r3, r2
 80023ae:	0019      	movs	r1, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c0:	2204      	movs	r2, #4
 80023c2:	4013      	ands	r3, r2
 80023c4:	d00b      	beq.n	80023de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	4a3b      	ldr	r2, [pc, #236]	; (80024bc <UART_AdvFeatureConfig+0x14c>)
 80023ce:	4013      	ands	r3, r2
 80023d0:	0019      	movs	r1, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	430a      	orrs	r2, r1
 80023dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e2:	2208      	movs	r2, #8
 80023e4:	4013      	ands	r3, r2
 80023e6:	d00b      	beq.n	8002400 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	4a34      	ldr	r2, [pc, #208]	; (80024c0 <UART_AdvFeatureConfig+0x150>)
 80023f0:	4013      	ands	r3, r2
 80023f2:	0019      	movs	r1, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	430a      	orrs	r2, r1
 80023fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002404:	2210      	movs	r2, #16
 8002406:	4013      	ands	r3, r2
 8002408:	d00b      	beq.n	8002422 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	4a2c      	ldr	r2, [pc, #176]	; (80024c4 <UART_AdvFeatureConfig+0x154>)
 8002412:	4013      	ands	r3, r2
 8002414:	0019      	movs	r1, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	430a      	orrs	r2, r1
 8002420:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002426:	2220      	movs	r2, #32
 8002428:	4013      	ands	r3, r2
 800242a:	d00b      	beq.n	8002444 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	4a25      	ldr	r2, [pc, #148]	; (80024c8 <UART_AdvFeatureConfig+0x158>)
 8002434:	4013      	ands	r3, r2
 8002436:	0019      	movs	r1, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	430a      	orrs	r2, r1
 8002442:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002448:	2240      	movs	r2, #64	; 0x40
 800244a:	4013      	ands	r3, r2
 800244c:	d01d      	beq.n	800248a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	4a1d      	ldr	r2, [pc, #116]	; (80024cc <UART_AdvFeatureConfig+0x15c>)
 8002456:	4013      	ands	r3, r2
 8002458:	0019      	movs	r1, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	430a      	orrs	r2, r1
 8002464:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800246a:	2380      	movs	r3, #128	; 0x80
 800246c:	035b      	lsls	r3, r3, #13
 800246e:	429a      	cmp	r2, r3
 8002470:	d10b      	bne.n	800248a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	4a15      	ldr	r2, [pc, #84]	; (80024d0 <UART_AdvFeatureConfig+0x160>)
 800247a:	4013      	ands	r3, r2
 800247c:	0019      	movs	r1, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	430a      	orrs	r2, r1
 8002488:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248e:	2280      	movs	r2, #128	; 0x80
 8002490:	4013      	ands	r3, r2
 8002492:	d00b      	beq.n	80024ac <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	4a0e      	ldr	r2, [pc, #56]	; (80024d4 <UART_AdvFeatureConfig+0x164>)
 800249c:	4013      	ands	r3, r2
 800249e:	0019      	movs	r1, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	430a      	orrs	r2, r1
 80024aa:	605a      	str	r2, [r3, #4]
  }
}
 80024ac:	46c0      	nop			; (mov r8, r8)
 80024ae:	46bd      	mov	sp, r7
 80024b0:	b002      	add	sp, #8
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	fffdffff 	.word	0xfffdffff
 80024b8:	fffeffff 	.word	0xfffeffff
 80024bc:	fffbffff 	.word	0xfffbffff
 80024c0:	ffff7fff 	.word	0xffff7fff
 80024c4:	ffffefff 	.word	0xffffefff
 80024c8:	ffffdfff 	.word	0xffffdfff
 80024cc:	ffefffff 	.word	0xffefffff
 80024d0:	ff9fffff 	.word	0xff9fffff
 80024d4:	fff7ffff 	.word	0xfff7ffff

080024d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af02      	add	r7, sp, #8
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2280      	movs	r2, #128	; 0x80
 80024e4:	2100      	movs	r1, #0
 80024e6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80024e8:	f7fe fae2 	bl	8000ab0 <HAL_GetTick>
 80024ec:	0003      	movs	r3, r0
 80024ee:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2208      	movs	r2, #8
 80024f8:	4013      	ands	r3, r2
 80024fa:	2b08      	cmp	r3, #8
 80024fc:	d10c      	bne.n	8002518 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2280      	movs	r2, #128	; 0x80
 8002502:	0391      	lsls	r1, r2, #14
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	4a17      	ldr	r2, [pc, #92]	; (8002564 <UART_CheckIdleState+0x8c>)
 8002508:	9200      	str	r2, [sp, #0]
 800250a:	2200      	movs	r2, #0
 800250c:	f000 f82c 	bl	8002568 <UART_WaitOnFlagUntilTimeout>
 8002510:	1e03      	subs	r3, r0, #0
 8002512:	d001      	beq.n	8002518 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e021      	b.n	800255c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2204      	movs	r2, #4
 8002520:	4013      	ands	r3, r2
 8002522:	2b04      	cmp	r3, #4
 8002524:	d10c      	bne.n	8002540 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2280      	movs	r2, #128	; 0x80
 800252a:	03d1      	lsls	r1, r2, #15
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	4a0d      	ldr	r2, [pc, #52]	; (8002564 <UART_CheckIdleState+0x8c>)
 8002530:	9200      	str	r2, [sp, #0]
 8002532:	2200      	movs	r2, #0
 8002534:	f000 f818 	bl	8002568 <UART_WaitOnFlagUntilTimeout>
 8002538:	1e03      	subs	r3, r0, #0
 800253a:	d001      	beq.n	8002540 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e00d      	b.n	800255c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2220      	movs	r2, #32
 8002544:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2220      	movs	r2, #32
 800254a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2274      	movs	r2, #116	; 0x74
 8002556:	2100      	movs	r1, #0
 8002558:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	0018      	movs	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	b004      	add	sp, #16
 8002562:	bd80      	pop	{r7, pc}
 8002564:	01ffffff 	.word	0x01ffffff

08002568 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b094      	sub	sp, #80	; 0x50
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	603b      	str	r3, [r7, #0]
 8002574:	1dfb      	adds	r3, r7, #7
 8002576:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002578:	e0a3      	b.n	80026c2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800257a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800257c:	3301      	adds	r3, #1
 800257e:	d100      	bne.n	8002582 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002580:	e09f      	b.n	80026c2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002582:	f7fe fa95 	bl	8000ab0 <HAL_GetTick>
 8002586:	0002      	movs	r2, r0
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800258e:	429a      	cmp	r2, r3
 8002590:	d302      	bcc.n	8002598 <UART_WaitOnFlagUntilTimeout+0x30>
 8002592:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002594:	2b00      	cmp	r3, #0
 8002596:	d13d      	bne.n	8002614 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002598:	f3ef 8310 	mrs	r3, PRIMASK
 800259c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800259e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025a0:	647b      	str	r3, [r7, #68]	; 0x44
 80025a2:	2301      	movs	r3, #1
 80025a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a8:	f383 8810 	msr	PRIMASK, r3
}
 80025ac:	46c0      	nop			; (mov r8, r8)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	494c      	ldr	r1, [pc, #304]	; (80026ec <UART_WaitOnFlagUntilTimeout+0x184>)
 80025ba:	400a      	ands	r2, r1
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025c0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c4:	f383 8810 	msr	PRIMASK, r3
}
 80025c8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025ca:	f3ef 8310 	mrs	r3, PRIMASK
 80025ce:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80025d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025d2:	643b      	str	r3, [r7, #64]	; 0x40
 80025d4:	2301      	movs	r3, #1
 80025d6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025da:	f383 8810 	msr	PRIMASK, r3
}
 80025de:	46c0      	nop			; (mov r8, r8)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689a      	ldr	r2, [r3, #8]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2101      	movs	r1, #1
 80025ec:	438a      	bics	r2, r1
 80025ee:	609a      	str	r2, [r3, #8]
 80025f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025f6:	f383 8810 	msr	PRIMASK, r3
}
 80025fa:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2220      	movs	r2, #32
 8002600:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2220      	movs	r2, #32
 8002606:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2274      	movs	r2, #116	; 0x74
 800260c:	2100      	movs	r1, #0
 800260e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e067      	b.n	80026e4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2204      	movs	r2, #4
 800261c:	4013      	ands	r3, r2
 800261e:	d050      	beq.n	80026c2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	69da      	ldr	r2, [r3, #28]
 8002626:	2380      	movs	r3, #128	; 0x80
 8002628:	011b      	lsls	r3, r3, #4
 800262a:	401a      	ands	r2, r3
 800262c:	2380      	movs	r3, #128	; 0x80
 800262e:	011b      	lsls	r3, r3, #4
 8002630:	429a      	cmp	r2, r3
 8002632:	d146      	bne.n	80026c2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2280      	movs	r2, #128	; 0x80
 800263a:	0112      	lsls	r2, r2, #4
 800263c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800263e:	f3ef 8310 	mrs	r3, PRIMASK
 8002642:	613b      	str	r3, [r7, #16]
  return(result);
 8002644:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002646:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002648:	2301      	movs	r3, #1
 800264a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	f383 8810 	msr	PRIMASK, r3
}
 8002652:	46c0      	nop			; (mov r8, r8)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4923      	ldr	r1, [pc, #140]	; (80026ec <UART_WaitOnFlagUntilTimeout+0x184>)
 8002660:	400a      	ands	r2, r1
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002666:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	f383 8810 	msr	PRIMASK, r3
}
 800266e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002670:	f3ef 8310 	mrs	r3, PRIMASK
 8002674:	61fb      	str	r3, [r7, #28]
  return(result);
 8002676:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002678:	64bb      	str	r3, [r7, #72]	; 0x48
 800267a:	2301      	movs	r3, #1
 800267c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800267e:	6a3b      	ldr	r3, [r7, #32]
 8002680:	f383 8810 	msr	PRIMASK, r3
}
 8002684:	46c0      	nop			; (mov r8, r8)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2101      	movs	r1, #1
 8002692:	438a      	bics	r2, r1
 8002694:	609a      	str	r2, [r3, #8]
 8002696:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	f383 8810 	msr	PRIMASK, r3
}
 80026a0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2220      	movs	r2, #32
 80026a6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2220      	movs	r2, #32
 80026ac:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2280      	movs	r2, #128	; 0x80
 80026b2:	2120      	movs	r1, #32
 80026b4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2274      	movs	r2, #116	; 0x74
 80026ba:	2100      	movs	r1, #0
 80026bc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e010      	b.n	80026e4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	69db      	ldr	r3, [r3, #28]
 80026c8:	68ba      	ldr	r2, [r7, #8]
 80026ca:	4013      	ands	r3, r2
 80026cc:	68ba      	ldr	r2, [r7, #8]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	425a      	negs	r2, r3
 80026d2:	4153      	adcs	r3, r2
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	001a      	movs	r2, r3
 80026d8:	1dfb      	adds	r3, r7, #7
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d100      	bne.n	80026e2 <UART_WaitOnFlagUntilTimeout+0x17a>
 80026e0:	e74b      	b.n	800257a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	0018      	movs	r0, r3
 80026e6:	46bd      	mov	sp, r7
 80026e8:	b014      	add	sp, #80	; 0x50
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	fffffe5f 	.word	0xfffffe5f

080026f0 <__libc_init_array>:
 80026f0:	b570      	push	{r4, r5, r6, lr}
 80026f2:	2600      	movs	r6, #0
 80026f4:	4d0c      	ldr	r5, [pc, #48]	; (8002728 <__libc_init_array+0x38>)
 80026f6:	4c0d      	ldr	r4, [pc, #52]	; (800272c <__libc_init_array+0x3c>)
 80026f8:	1b64      	subs	r4, r4, r5
 80026fa:	10a4      	asrs	r4, r4, #2
 80026fc:	42a6      	cmp	r6, r4
 80026fe:	d109      	bne.n	8002714 <__libc_init_array+0x24>
 8002700:	2600      	movs	r6, #0
 8002702:	f000 f821 	bl	8002748 <_init>
 8002706:	4d0a      	ldr	r5, [pc, #40]	; (8002730 <__libc_init_array+0x40>)
 8002708:	4c0a      	ldr	r4, [pc, #40]	; (8002734 <__libc_init_array+0x44>)
 800270a:	1b64      	subs	r4, r4, r5
 800270c:	10a4      	asrs	r4, r4, #2
 800270e:	42a6      	cmp	r6, r4
 8002710:	d105      	bne.n	800271e <__libc_init_array+0x2e>
 8002712:	bd70      	pop	{r4, r5, r6, pc}
 8002714:	00b3      	lsls	r3, r6, #2
 8002716:	58eb      	ldr	r3, [r5, r3]
 8002718:	4798      	blx	r3
 800271a:	3601      	adds	r6, #1
 800271c:	e7ee      	b.n	80026fc <__libc_init_array+0xc>
 800271e:	00b3      	lsls	r3, r6, #2
 8002720:	58eb      	ldr	r3, [r5, r3]
 8002722:	4798      	blx	r3
 8002724:	3601      	adds	r6, #1
 8002726:	e7f2      	b.n	800270e <__libc_init_array+0x1e>
 8002728:	080027d4 	.word	0x080027d4
 800272c:	080027d4 	.word	0x080027d4
 8002730:	080027d4 	.word	0x080027d4
 8002734:	080027d8 	.word	0x080027d8

08002738 <memset>:
 8002738:	0003      	movs	r3, r0
 800273a:	1882      	adds	r2, r0, r2
 800273c:	4293      	cmp	r3, r2
 800273e:	d100      	bne.n	8002742 <memset+0xa>
 8002740:	4770      	bx	lr
 8002742:	7019      	strb	r1, [r3, #0]
 8002744:	3301      	adds	r3, #1
 8002746:	e7f9      	b.n	800273c <memset+0x4>

08002748 <_init>:
 8002748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800274a:	46c0      	nop			; (mov r8, r8)
 800274c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800274e:	bc08      	pop	{r3}
 8002750:	469e      	mov	lr, r3
 8002752:	4770      	bx	lr

08002754 <_fini>:
 8002754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002756:	46c0      	nop			; (mov r8, r8)
 8002758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800275a:	bc08      	pop	{r3}
 800275c:	469e      	mov	lr, r3
 800275e:	4770      	bx	lr
